[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314194922",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-314194922",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 314194922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDE5NDkyMg==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-10T18:32:34Z",
    "updated_at": "2017-07-10T18:32:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Should probably be tested on big endian. :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314194922/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314442225",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-314442225",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 314442225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDQ0MjIyNQ==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-11T13:24:30Z",
    "updated_at": "2017-07-11T13:24:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK.\r\nBinaries: https://bitcoin.jonasschnelli.ch/build/210 (Currently running on a fresh node)\r\nAgree with @gmaxwell that some BE testing would be good.\r\n\r\nWill code-review soon.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314442225/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318868567",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-318868567",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 318868567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODg2ODU2Nw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-30T00:20:53Z",
    "updated_at": "2017-07-30T00:20:53Z",
    "author_association": "MEMBER",
    "body": "Made some changes to reduce the size of the overall diff.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318868567/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322597231",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-322597231",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 322597231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjU5NzIzMQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-15T21:38:20Z",
    "updated_at": "2017-08-15T21:38:20Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322597231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325009932",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-325009932",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 325009932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTAwOTkzMg==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-25T19:02:49Z",
    "updated_at": "2017-08-25T19:02:49Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325009932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327626776",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-327626776",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 327626776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzYyNjc3Ng==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-06T22:12:56Z",
    "updated_at": "2017-09-06T22:12:56Z",
    "author_association": "MEMBER",
    "body": "Big concept ACK, happy to get rid of FLATDATA and similar ugly macros. This is a lot to review/test though, and reasonably high-risk.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327626776/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338180383",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-338180383",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 338180383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODE4MDM4Mw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-20T11:27:05Z",
    "updated_at": "2017-10-20T11:27:05Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338180383/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340916840",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-340916840",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 340916840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDkxNjg0MA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-31T21:44:14Z",
    "updated_at": "2017-10-31T21:44:14Z",
    "author_association": "MEMBER",
    "body": "Travis can not run the qt tests. Are they passing for you locally?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340916840/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340918265",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-340918265",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 340918265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDkxODI2NQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-31T21:50:21Z",
    "updated_at": "2017-10-31T22:01:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "~~~They passed for me locally.~~~ Current travis failure appears to be:\r\n\r\nQFATAL : WalletTests::walletTests() Received signal 11\r\nFAIL!  : WalletTests::walletTests() Received a fatal error.\r\n   Loc: [Unknown file(0)]\r\n\r\nEDIT: Actually they are failing for me locally too",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340918265/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340920564",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-340920564",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 340920564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDkyMDU2NA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-31T22:00:19Z",
    "updated_at": "2017-10-31T22:00:19Z",
    "author_association": "MEMBER",
    "body": "I guess they time out and you could try setting the `QTEST_FUNCTION_TIMEOUT` env var to 600,000. Though, it might be worthwhile to check why they take longer than before.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340920564/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340922989",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-340922989",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 340922989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDkyMjk4OQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-31T22:11:29Z",
    "updated_at": "2017-10-31T22:11:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Actually they are failing for me locally. Stack trace shows an infinite recursion and looks like:\r\n\r\n```\r\n(gdb) bt -50\r\n#2355058 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355059 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355060 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355061 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355062 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355063 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355064 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355065 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355066 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355067 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355068 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355069 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355070 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355071 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355072 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355073 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355074 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355075 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\r\n#2355076 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (qstring=...) at qt/guiutil.h:285\r\n#2355077 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (qstring=...) at qt/guiutil.h:285\r\n#2355078 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (ser_action=..., s=..., obj=...) at qt/walletmodel.h:69\r\n#2355079 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (s=..., this=0x7fffffffb728) at qt/walletmodel.h:66\r\n#2355080 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (a=..., os=...) at ./serialize.h:677\r\n#2355081 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (arg=..., s=...) at ./serialize.h:1030\r\n#2355082 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (arg=..., s=...) at ./serialize.h:1031\r\n#2355083 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (arg=@0x7fffffffb718: 1, s=...) at ./serialize.h:1031\r\n#2355084 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (arg=@0x7fffffffb710: 1, s=...) at ./serialize.h:1031\r\n#2355085 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (ser_action=..., s=...) at ./serialize.h:1049\r\n#2355086 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (s=..., obj=..., ser_action=...) at qt/recentrequeststablemodel.h:30\r\n#2355087 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (s=..., this=0x7fffffffb710) at qt/recentrequeststablemodel.h:28\r\n#2355088 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (a=..., os=...) at ./serialize.h:677\r\n#2355089 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (obj=..., this=0x7fffffffb600) at ./streams.h:399\r\n#2355090 0x00000001000da01d in RecentRequestsTableModel::addNewRequest(SendCoinsRecipient const&) (this=0x1014511d0, recipient=...) at qt/recentrequeststablemodel.cpp:173\r\n#2355091 0x00000001000d2a92 in ReceiveCoinsDialog::on_receiveButton_clicked() (this=0x7fffffffbf50) at qt/receivecoinsdialog.cpp:167\r\n#2355092 0x000000010010dd95 in ReceiveCoinsDialog::qt_static_metacall(QObject*, QMetaObject::Call, int, void**) (_o=<optimized out>, _c=<optimized out>, _id=<optimized out>, _a=<optimized out>)\r\n    at qt/moc_receivecoinsdialog.cpp:123\r\n#2355093 0x000000010010e0e5 in ReceiveCoinsDialog::qt_metacall(QMetaObject::Call, int, void**) (this=0x7fffffffbf50, _c=QMetaObject::InvokeMetaMethod, _id=3, _a=0x7fffffffbbb0) at qt/moc_receivecoinsdialog.cpp:177\r\n#2355094 0x00007ffff62b2ee0 in QMetaObject::activate(QObject*, int, int, void**) (sender=sender@entry=0x10163e380, signalOffset=<optimized out>, local_signal_index=local_signal_index@entry=2, argv=argv@entry=0x7fffffffbbb0) at kernel/qobject.cpp:3728\r\n#2355095 0x00007ffff62b3537 in QMetaObject::activate(QObject*, QMetaObject const*, int, void**) (sender=sender@entry=0x10163e380, m=m@entry=0x7ffff7098a40 <QAbstractButton::staticMetaObject>, local_signal_index=local_signal_index@entry=2, argv=argv@entry=0x7fffffffbbb0) at kernel/qobject.cpp:3578\r\n#2355096 0x00007ffff6f112b2 in QAbstractButton::clicked(bool) (this=this@entry=0x10163e380, _t1=false) at .moc/moc_qabstractbutton.cpp:303\r\n#2355097 0x00007ffff6c73f44 in QAbstractButtonPrivate::emitClicked() (this=0x1016cc1d0) at widgets/qabstractbutton.cpp:534\r\n#2355098 0x00007ffff6c745e1 in QAbstractButton::click() (this=0x10163e380) at widgets/qabstractbutton.cpp:992\r\n#2355099 0x0000000100086686 in (anonymous namespace)::TestGUI() () at qt/test/wallettests.cpp:222\r\n#2355100 0x00007ffff628f84a in QMetaMethod::invoke(QObject*, Qt::ConnectionType, QGenericReturnArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument) const (this=this@entry=0x7fffffffce98, object=object@entry=0x7fffffffd830, connectionType=Qt::DirectConnection, \r\n    connectionType@entry=4294954784, returnValue=..., val0=..., val1=..., val2=..., val3=..., val4=..., val5=..., val6=..., val7=..., val8=..., val9=...) at kernel/qmetaobject.cpp:2212\r\n#2355101 0x00007ffff6294f0d in QMetaObject::invokeMethod(QObject*, char const*, Qt::ConnectionType, QGenericReturnArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument) (obj=0x7fffffffd830, member=member@entry=0x100ca1990 \"walletTests\", type=4294954784, \r\n    type@entry=Qt::DirectConnection, ret=..., val0=..., val1=..., val2=..., val3=..., val4=..., val5=..., val6=..., val7=..., val8=..., val9=...) at kernel/qmetaobject.cpp:1479\r\n#2355102 0x00007ffff7fa408c in QTest::qInvokeTestMethod(char const*, char const*) (val9=..., val8=..., val7=..., val6=..., val5=..., val4=..., val3=..., val2=..., val1=..., val0=..., type=Qt::DirectConnection, member=0x100ca1990 \"walletTests\", obj=<optimized out>) at ../../include/QtCore/../../src/corelib/kernel/qobjectdefs.h:409\r\n#2355103 0x00007ffff7fa408c in QTest::qInvokeTestMethod(char const*, char const*) (slot=0x100ca1990 \"walletTests\") at qtestcase.cpp:1953\r\n#2355104 0x00007ffff7fa408c in QTest::qInvokeTestMethod(char const*, char const*) (slotName=0x100948698 \"walletTests()\", data=data@entry=0x0) at qtestcase.cpp:2082\r\n#2355105 0x00007ffff7fa4bb8 in QTest::qExec(QObject*, int, char**) (testObject=0x7fffffffd830) at qtestcase.cpp:2390\r\n#2355106 0x00007ffff7fa4bb8 in QTest::qExec(QObject*, int, char**) (testObject=0x7fffffffd830, argc=<optimized out>, argv=<optimized out>) at qtestcase.cpp:2652\r\n#2355107 0x000000010005d9df in main(int, char**) (argc=1, argv=0x7fffffffdd78) at qt/test/test_main.cpp:99\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340922989/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/341493176",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-341493176",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 341493176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTQ5MzE3Ng==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-02T17:13:08Z",
    "updated_at": "2017-11-02T17:13:08Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/341493176/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/342944703",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-342944703",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 342944703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mjk0NDcwMw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-08T20:12:40Z",
    "updated_at": "2017-11-08T20:12:40Z",
    "author_association": "MEMBER",
    "body": "Removed the need for creating a vector with absolute values for serializing/deserializing BlockTransactionsRequest.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/342944703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/345992677",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-345992677",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 345992677,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTk5MjY3Nw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-21T11:02:55Z",
    "updated_at": "2017-11-21T11:02:55Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/345992677/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364222243",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-364222243",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 364222243,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDIyMjI0Mw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-08T19:29:27Z",
    "updated_at": "2018-02-08T19:29:27Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364222243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364266888",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-364266888",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 364266888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDI2Njg4OA==",
    "user": {
      "login": "Christewart",
      "id": 3514957,
      "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3514957?u=342ef4ad54c8104639c37e5ee969fa3c003021b7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Christewart",
      "html_url": "https://github.com/Christewart",
      "followers_url": "https://api.github.com/users/Christewart/followers",
      "following_url": "https://api.github.com/users/Christewart/following{/other_user}",
      "gists_url": "https://api.github.com/users/Christewart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Christewart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
      "organizations_url": "https://api.github.com/users/Christewart/orgs",
      "repos_url": "https://api.github.com/users/Christewart/repos",
      "events_url": "https://api.github.com/users/Christewart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Christewart/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-08T22:14:49Z",
    "updated_at": "2018-02-09T03:25:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "I ran this with #8469 -- which tests serialization code pretty extensively -- and everything passed. \r\n\r\nIf anyone wants to re-run they can do with this branch: https://github.com/Christewart/bitcoin/commits/pbt_noncastserial",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364266888/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372770581",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-372770581",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 372770581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mjc3MDU4MQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-13T18:27:57Z",
    "updated_at": "2018-03-13T18:27:57Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372770581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/373960485",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-373960485",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 373960485,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzk2MDQ4NQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-17T23:29:09Z",
    "updated_at": "2018-03-17T23:29:09Z",
    "author_association": "MEMBER",
    "body": "I've reordered the commits again a bit, and made a small (but invasive) change to the design:\r\n* Removed macro READWRITEAS (using `AsType<type>(obj)` instead)\r\n* Added a `Wrap<wrapper>(obj)` function to later avoid the need for `COMPACTSIZE`, `VARINT`, and `LIMITED_STRING`, and removing the need for helper functions for each wrapper class.\r\n\r\nFeel free to ignore the changes here; I'll keep taking small bits from it and submitting them as separate PRs.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/373960485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388826869",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-388826869",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 388826869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODgyNjg2OQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-14T14:00:00Z",
    "updated_at": "2018-05-14T14:00:00Z",
    "author_association": "MEMBER",
    "body": "Concept ACK\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388826869/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389707969",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-389707969",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 389707969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTcwNzk2OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-17T00:36:42Z",
    "updated_at": "2018-05-17T00:37:01Z",
    "author_association": "MEMBER",
    "body": "@laanwj I'm going to keep extracting smaller changes from this PR into separate ones (like #12916, #12886, #12752, #12740, #12712, #12683, #12658). No need to review the whole thing, but concept ACKs are useful.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389707969/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/390689910",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-390689910",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 390689910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDY4OTkxMA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-21T15:31:07Z",
    "updated_at": "2018-05-21T15:31:07Z",
    "author_association": "MEMBER",
    "body": "Needs rebase due to merge of #12924",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/390689910/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/407893368",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-407893368",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 407893368,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzg5MzM2OA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T20:59:00Z",
    "updated_at": "2018-07-25T20:59:00Z",
    "author_association": "MEMBER",
    "body": "Travis output:\r\n\r\n```\r\nA wild circular dependency in the form of \"qt/guiutil -> qt/walletmodel -> qt/guiutil\" appears...",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/407893368/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427874099",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-427874099",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 427874099,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg3NDA5OQ==",
    "user": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?u=2ba2cccaa0fd357b363507ce5694ce3cf5e56220&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-08T15:15:49Z",
    "updated_at": "2018-10-08T15:15:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Chris Stewart <notifications@github.com> writes:\n> I ran this with #8469 -- which tests serialization code pretty extensively -- and it everything passed. \n\nI gave this a spin with the property tests as well. Seems to still pass.\nThere's a recent change to bench/prevector that needs to be updated but\nother than that it appears to work.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427874099/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439174955",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-439174955",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 439174955,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTE3NDk1NQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T20:13:47Z",
    "updated_at": "2018-11-15T20:13:47Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439174955/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439233182",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-439233182",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 439233182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTIzMzE4Mg==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T23:55:10Z",
    "updated_at": "2020-01-09T01:36:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17896](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17896.html) (Serialization improvements (step 2) by sipa)\n* [#17034](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17034.html) (Bip174 extensions by achow101)\n* [#16748](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16748.html) ([WIP] Add support for addrv2 (BIP155) by dongcarl)\n* [#16463](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16463.html) ([BIP 174] Implement serialization support for GLOBAL_XPUB field. by achow101)\n* [#14053](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14053.html) (Add address-based index (attempt 4?) by marcinja)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439233182/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/456306886",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-456306886",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 456306886,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjMwNjg4Ng==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-22T08:10:11Z",
    "updated_at": "2019-01-22T08:10:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK\r\n\r\n@sipa has this been tested on a BE system?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/456306886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536529893",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536529893",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 536529893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjUyOTg5Mw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-30T12:00:50Z",
    "updated_at": "2019-09-30T12:00:50Z",
    "author_association": "MEMBER",
    "body": "This PR is really old by now, even though there was no disagreement. What is holding this up?\r\n\r\nIMO. we should try to merge this after the 0.19 split-off in a few days.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536529893/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536543645",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536543645",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 536543645,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjU0MzY0NQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-30T12:43:09Z",
    "updated_at": "2019-09-30T12:43:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Has this been properly fuzz tested?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536543645/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536545577",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536545577",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 536545577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjU0NTU3Nw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-30T12:48:19Z",
    "updated_at": "2019-09-30T12:48:19Z",
    "author_association": "MEMBER",
    "body": "@practicalswift Pretty much all of our fuzzers are  deserialization fuzzers",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536545577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536560999",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536560999",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 536560999,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjU2MDk5OQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-30T13:29:22Z",
    "updated_at": "2019-09-30T13:29:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke Yes I know that :)  I was curious if these suggested serialization improvements had been subject to fuzz testing by the PR author - that is something different and hence my question :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536560999/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536602010",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536602010",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 536602010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjYwMjAxMA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-30T14:59:12Z",
    "updated_at": "2019-09-30T14:59:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @MarcoFalke Yes I know that :) I was curious if these suggested serialization improvements had been subject to fuzz testing by the PR author - that is something different and hence my question :)\r\n\r\nI haven't paid much attention to fuzz testing, but I did spend a good amount of time reviewing this, and wonder if you could give more detail on the extra testing that would be useful here that goes beyond the normal testing.\r\n\r\nIt is probably safe to assume that if the author here went out of their way to do special testing, this would be mentioned in the description.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536602010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536615879",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536615879",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 536615879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjYxNTg3OQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-30T15:29:00Z",
    "updated_at": "2019-09-30T15:31:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I haven't paid much attention to fuzz testing, but I did spend a good amount of time reviewing this, and wonder if you could give more detail on the extra testing that would be useful here that goes beyond the normal testing.\r\n\r\nIt would be useful to take this new code for a spin with our fuzzing test harnesses to make sure no new obvious issues are introduced.\r\n\r\nThis can be done using:\r\n\r\n```\r\n$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\r\n$ make\r\n$ find src/test/fuzz/ -type f -executable\r\n[\u2026]\u00a0then run the relevant fuzzers and observe any anomalies [\u2026]\r\n```\r\n\r\n> It is probably safe to assume that if the author here went out of their way to do special testing, this would be mentioned in the description.\r\n\r\nTBH I'm not fuzz testing qualifies as special testing these days - in security critical project like ours it really should be standard procedure for this type of code :)\r\n\r\nI've simply assumed that PR authors do fuzz testing routinely when touching \"parsing/serialization/untrusted-input-heavy\" code. I guess I'm mistaken :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536615879/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536621751",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536621751",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 536621751,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjYyMTc1MQ==",
    "user": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?u=2ba2cccaa0fd357b363507ce5694ce3cf5e56220&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-30T15:41:05Z",
    "updated_at": "2019-09-30T15:41:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @practicalswift Has this been properly fuzz tested?\r\n\r\nboth me and @Christewart ran the serialization property-based tests against this at one point. Would be good to revisit.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536621751/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536633157",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536633157",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 536633157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjYzMzE1Nw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-30T16:07:33Z",
    "updated_at": "2019-09-30T16:07:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jb55 Great to hear! I'll try to break it by fuzzing once rebased :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/536633157/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/537998463",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-537998463",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 537998463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNzk5ODQ2Mw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-03T15:34:20Z",
    "updated_at": "2019-10-03T15:34:56Z",
    "author_association": "MEMBER",
    "body": "I'll gladly rebase again next week, or try to cherry-pick pieces of it. I haven't done any fuzz testing specifically.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/537998463/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540811739",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-540811739",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 540811739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDgxMTczOQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-10T21:40:10Z",
    "updated_at": "2019-10-10T21:40:10Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540811739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546627999",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-546627999",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 546627999,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjYyNzk5OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-26T18:29:59Z",
    "updated_at": "2019-10-26T18:29:59Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546627999/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547657895",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-547657895",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 547657895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzY1Nzg5NQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-29T22:30:32Z",
    "updated_at": "2019-10-29T22:30:32Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547657895/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557250406",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-557250406",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 557250406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzI1MDQwNg==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-21T20:05:12Z",
    "updated_at": "2019-11-21T20:05:12Z",
    "author_association": "MEMBER",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557250406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557360045",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-557360045",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 557360045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzM2MDA0NQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-22T02:30:18Z",
    "updated_at": "2019-11-22T02:30:18Z",
    "author_association": "MEMBER",
    "body": "Is this going to be split into smaller bites?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557360045/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557361584",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-557361584",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 557361584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzM2MTU4NA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-22T02:37:25Z",
    "updated_at": "2019-11-22T02:37:25Z",
    "author_association": "MEMBER",
    "body": "I certainly can, though I think all the standalone improvements have already been split off and merged independently.\r\n\r\nWhat remains is introducing new serialization macros, converting all serializers to use them, and then deleting the old ones. I'm happy to split those up into separate PRs if you think that's useful.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557361584/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557362603",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-557362603",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 557362603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzM2MjYwMw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-22T02:41:53Z",
    "updated_at": "2019-11-22T02:41:53Z",
    "author_association": "MEMBER",
    "body": "Fair enough. I was asking for the general public",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557362603/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558253921",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-558253921",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 558253921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODI1MzkyMQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-25T17:17:27Z",
    "updated_at": "2019-11-25T17:17:27Z",
    "author_association": "MEMBER",
    "body": "Rebased on top of (a rebased version of) #17591, to test on a BE platform.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558253921/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558704267",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-558704267",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 558704267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODcwNDI2Nw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T16:17:32Z",
    "updated_at": "2019-11-26T16:17:32Z",
    "author_association": "MEMBER",
    "body": "Now also rebased on top of #17599 to get functional tests run on BE.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558704267/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558710827",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-558710827",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 558710827,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODcxMDgyNw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T16:32:05Z",
    "updated_at": "2019-11-26T16:32:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Could bring in the new improved deserialization fuzz harness from #17225 to fuzz test this? The new fuzz harness does roundtrip testing where possible and covers more types. Would be nice to see this new code fuzz tested :)\r\n\r\n---\r\n\r\nFuzzing in three easy steps:\r\n\r\n```\r\n$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\r\n$ make\r\n$ find src/test/fuzz/ -type f -executable\r\n[\u2026] then run the relevant fuzzers and observe any anomalies [\u2026]\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558710827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564799717",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-564799717",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 564799717,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDc5OTcxNw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-12T00:50:56Z",
    "updated_at": "2019-12-12T00:50:56Z",
    "author_association": "MEMBER",
    "body": "Rebased, and fixes a bug in the deserialization fuzzing code.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564799717/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564918074",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-564918074",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 564918074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDkxODA3NA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-12T09:13:36Z",
    "updated_at": "2019-12-12T09:13:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "This needs to be addressed to make the sanitizers happy :)\r\n\r\n```\r\nblockencodings.h:83:34: runtime error: implicit conversion from type 'int' of \r\n    value 65536 (32-bit, signed) to type 'Differential::Wrapper<std::vector<unsigned short, std::allocator<unsigned short> > >::value_type'\r\n    (aka 'unsigned short') changed the value to 0 (16-bit, unsigned)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564918074/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571729489",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-571729489",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 571729489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MTcyOTQ4OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-07T19:15:16Z",
    "updated_at": "2020-01-07T19:15:16Z",
    "author_association": "MEMBER",
    "body": "I've added a new commit with a few style improvements, and a new approach for writing wrapper classes, as well a different way of doing the differential encoding of compact block indexes.\r\n\r\nUnless people object, I'll use these modified approaches in follow-up PRs that carve out pieces out of this PR.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571729489/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571775729",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-571775729",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 571775729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MTc3NTcyOQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-07T21:13:43Z",
    "updated_at": "2020-01-07T21:13:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just reviewed commit \"Switch to different wrapping model + different differential vector\" (7da03b3ce5f4be94555b15bf4668bc251a8faac4) and I think it is a nice improvement. Getting rid of the various `Format::Wrapper` inner classes and pulling them into a standalone `Wrapper` class eliminates redundant code. And another really nice part of the change is replacing the `Differential` struct that had lots of operator overloads with simpler value function transform objects.\r\n\r\nI did have some ideas and suggestions from looking at this, but feel free to take or leave them:\r\n\r\n1. \"Wrapper\" terminology doesn't seem helpful when it isn't specifically referring to the actual wrapper class. Would maybe refer to the various classes that have `Ser` and `Unser` methods as formatters or helpers instead of wrappers since they don't really wrap anything. Similarly might rename `Wrap` function to `SerializeAs` or `FormatAs` and rename `W` template arguments to `F` or `H`.\r\n2. I don't think there's a reason to require `Ser` and `Unser` methods to be static. It should be no problem to just call `W()::Ser()` instead of `W::Ser()` inside the new `Wrapper` class, and not requiring the methods to be static could be beneficial if the formatter/helper objects are used other contexts in the future. For example if a compression formatter was used to serialize many elements in a data structure, maybe it could save some state to avoid repeating work.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571775729/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572058319",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-572058319",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 572058319,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjA1ODMxOQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-08T13:45:23Z",
    "updated_at": "2020-01-08T13:45:23Z",
    "author_association": "MEMBER",
    "body": "@ryanofsky Thanks, I'll see how hard it is to address the non-static methods suggestion. What so you think of the name \"Using\" instead of \"Wrap\" ?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572058319/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572106664",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-572106664",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 572106664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjEwNjY2NA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-08T14:57:21Z",
    "updated_at": "2020-01-08T14:57:21Z",
    "author_association": "MEMBER",
    "body": "Changed to terminology \"formatters\", with function \"Using<Formatter>\", and made the Ser/Unser functions (permitted to be) non-static.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572106664/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572107534",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-572107534",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 572107534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjEwNzUzNA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-08T14:59:15Z",
    "updated_at": "2020-01-08T14:59:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @ryanofsky Thanks, I'll see how hard it is to address the non-static methods suggestion. What so you think of the name \"Using\" instead of \"Wrap\" ?\r\n\r\nI think it'd be good, assuming it's not too much trouble to rename. I also realized the names I suggested yesterday `SerializeAs` or `FormatAs` don't really make sense given how the template argument is used. More accurate would be `SerializeWith`, `FormatWith`, or `SerializeUsing`. No strong opinions about any of this, though.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572107534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573620577",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-573620577",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 573620577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MzYyMDU3Nw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-13T11:31:50Z",
    "updated_at": "2020-01-13T11:31:50Z",
    "author_association": "MEMBER",
    "body": "Travis error:\r\n```\r\nblockencodings.h:68:17: runtime error: implicit conversion from type 'int' of value 65536 (32-bit, signed) to type 'unsigned short' changed the value to 0 (16-bit, unsigned)\r\n\r\n    #0 0x561bb3939927 in DifferentialUnserTransform<unsigned short>::operator()(unsigned short) /home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-pc-linux-gnu/src/./blockencodings.h:68:17\r\n    #1 0x561bb3938b15 in void VectorUsing<CompactSizeFormatter, DifferentialSerTransform<unsigned short>, DifferentialUnserTransform<unsigned short> >::Unser<CDataStream, std::vector<unsigned short, std::allocator<unsigned short> > >(CDataStream&, std::vector<unsigned short, std::allocator<unsigned short> >&) /home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-pc-linux-gnu/src/./serialize.h:625:29\r\n    #2 0x561bb39387c3 in void Wrapper<VectorUsing<CompactSizeFormatter, DifferentialSerTransform<unsigned short>, DifferentialUnserTransform<unsigned short> >, std::vector<unsigned short, std::allocator<unsigned short> > >::Unserialize<CDataStream>(CDataStream&) /home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-pc-linux-gnu/src/./serialize.h:444:73\r\n    #3 0x561bb39385bb in void Unserialize<CDataStream, Wrapper<VectorUsing<CompactSizeFormatter, DifferentialSerTransform<unsigned short>, DifferentialUnserTransform<unsigned short> >, std::vector<unsigned short, std::allocator<unsigned short> > >&>(CDataStream&, Wrapper<VectorUsing<CompactSizeFormatter, DifferentialSerTransform<unsigned short>, DifferentialUnserTransform<unsigned short> >, std::vector<unsigned short, std::allocator<unsigned short> > >&) /home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-pc-linux-gnu/src/./serialize.h:708:7\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573620577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/575859336",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-575859336",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 575859336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTg1OTMzNg==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-18T02:49:37Z",
    "updated_at": "2020-01-18T02:49:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/575859336/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/586551179",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-586551179",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
    "id": 586551179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjU1MTE3OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-15T04:03:07Z",
    "updated_at": "2020-02-15T04:03:07Z",
    "author_association": "MEMBER",
    "body": "Too many changes have been introduced compared to this PR in #17850, #17896, #17957, #18021, and #18112,  and I'm not going to rebase this on top of them. I'll keep picking changes from the branch, though, but no need to keep this open.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/586551179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126551394",
    "pull_request_review_id": 49047147,
    "id": 126551394,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjU1MTM5NA==",
    "diff_hunk": "@@ -12,58 +12,70 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n+template<typename T>\n+struct TransactionCompressWrapper {\n private:\n-    CTransactionRef& tx;\n+    T& tx;\n public:\n-    TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n+    TransactionCompressWrapper(T& txIn) : tx(txIn) {}\n+    SERIALIZE_METHODS(obj) { READWRITE(obj.tx); }\n+};\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+template<typename I>\n+struct Uint48Wrapper {\n+private:\n+    I& m_int;\n+public:\n+    Uint48Wrapper(I& i) : m_int(i) {}\n+    template <typename Stream> void Serialize(Stream& s) const\n+    {\n+        uint32_t lsb = m_int & 0xffffffff;\n+        uint16_t msb = (m_int >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n+    template <typename Stream> void Unserialize(Stream& s)\n+    {\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        m_int = (uint64_t(msb) << 32) | uint64_t(lsb);\n     }\n };\n \n+template<typename T>\n+static inline TransactionCompressWrapper<T> TransactionCompressor(T& tx) { return TransactionCompressWrapper<T>(tx); }\n+\n class BlockTransactionsRequest {\n public:\n     // A BlockTransactionsRequest message\n     uint256 blockhash;\n     std::vector<uint16_t> indexes;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(blockhash);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << blockhash;\n         uint64_t indexes_size = (uint64_t)indexes.size();\n-        READWRITE(COMPACTSIZE(indexes_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (indexes.size() < indexes_size) {\n-                indexes.resize(std::min((uint64_t)(1000 + indexes.size()), indexes_size));\n-                for (; i < indexes.size(); i++) {\n-                    uint64_t index = 0;\n-                    READWRITE(COMPACTSIZE(index));\n-                    if (index > std::numeric_limits<uint16_t>::max())\n-                        throw std::ios_base::failure(\"index overflowed 16 bits\");\n-                    indexes[i] = index;\n-                }\n-            }\n-\n-            uint16_t offset = 0;\n-            for (size_t j = 0; j < indexes.size(); j++) {\n-                if (uint64_t(indexes[j]) + uint64_t(offset) > std::numeric_limits<uint16_t>::max())\n-                    throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n-                indexes[j] = indexes[j] + offset;\n-                offset = indexes[j] + 1;\n-            }\n-        } else {\n-            for (size_t i = 0; i < indexes.size(); i++) {\n-                uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n-                READWRITE(COMPACTSIZE(index));\n-            }\n+        s << CompactSize(indexes_size);\n+        for (size_t i = 0; i < indexes.size(); i++) {\n+            const uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n+            s << CompactSize(index);\n+        }\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        std::vector<uint64_t> tmp;\n+        s >> blockhash >> VectorApply<CompactSizeWrapper>(tmp);",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 98,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "21cf5887e9cc6f8b3521b4748acc167a905655da",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "For ease of implementation, deserialization first happens into a `std::vector<uint64_t>`, and is then converted. This means a temporary is created and allocated, which is an overhead that the old implementation didn't have.",
    "created_at": "2017-07-10T22:18:13Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126551394",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126551394"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126551394"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126551394/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 115,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126551772",
    "pull_request_review_id": 49047147,
    "id": 126551772,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjU1MTc3Mg==",
    "diff_hunk": "@@ -49,11 +48,10 @@ class CSerializeMethodsTestMany : public CSerializeMethodsTestSingle\n {\n public:\n     using CSerializeMethodsTestSingle::CSerializeMethodsTestSingle;\n-    ADD_SERIALIZE_METHODS;\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEMANY(intval, boolval, stringval, FLATDATA(charstrval), txval);\n+    SERIALIZE_METHODS(obj)\n+    {\n+        READWRITE(obj.intval, obj.boolval, obj.stringval, FlatData(obj.charstrval), obj.txval);",
    "path": "src/test/serialize_tests.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "21cf5887e9cc6f8b3521b4748acc167a905655da",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This whole test is somewhat less valuable now, as both cases use `READWRITE`.",
    "created_at": "2017-07-10T22:20:41Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126551772",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126551772"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126551772"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126551772/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 54,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552095",
    "pull_request_review_id": 49047147,
    "id": 126552095,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjU1MjA5NQ==",
    "diff_hunk": "@@ -378,42 +376,36 @@ class CWalletTx : public CMerkleTx\n         nOrderPos = -1;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead())\n-            Init(NULL);\n+    template<typename Stream>",
    "path": "src/wallet/wallet.h",
    "position": null,
    "original_position": 79,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "21cf5887e9cc6f8b3521b4748acc167a905655da",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is one of the more involved changes, as it's both splitting the serializer into two versions, and the `Serialize` code no longer modifies `mapValue` in-place (wtf?).",
    "created_at": "2017-07-10T22:22:40Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552095",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552095"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552095"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552095/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 369,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552169",
    "pull_request_review_id": 49047147,
    "id": 126552169,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjU1MjE2OQ==",
    "diff_hunk": "@@ -378,42 +376,36 @@ class CWalletTx : public CMerkleTx\n         nOrderPos = -1;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead())\n-            Init(NULL);\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         char fSpent = false;\n+        mapValue_t mapValueCopy = mapValue;\n \n-        if (!ser_action.ForRead())\n-        {\n-            mapValue[\"fromaccount\"] = strFromAccount;\n-\n-            WriteOrderPos(nOrderPos, mapValue);\n-\n-            if (nTimeSmart)\n-                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+        mapValueCopy[\"fromaccount\"] = strFromAccount;\n+        WriteOrderPos(nOrderPos, mapValueCopy);\n+        if (nTimeSmart) {\n+            mapValueCopy[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        READWRITE(*(CMerkleTx*)this);\n+        s << AsBaseType<CMerkleTx>(*this);\n         std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n-        READWRITE(vUnused);\n-        READWRITE(mapValue);\n-        READWRITE(vOrderForm);\n-        READWRITE(fTimeReceivedIsTxTime);\n-        READWRITE(nTimeReceived);\n-        READWRITE(fFromMe);\n-        READWRITE(fSpent);\n-\n-        if (ser_action.ForRead())\n-        {\n-            strFromAccount = mapValue[\"fromaccount\"];\n+        s << vUnused << mapValueCopy << vOrderForm << fTimeReceivedIsTxTime << nTimeReceived << fFromMe << fSpent;\n+    }\n \n-            ReadOrderPos(nOrderPos, mapValue);\n+    template<typename Stream>",
    "path": "src/wallet/wallet.h",
    "position": null,
    "original_position": 117,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "21cf5887e9cc6f8b3521b4748acc167a905655da",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Here is another big change, that avoids modifying `mapValue` and `strAccount` and then later fixing it up before returning (wtf?).",
    "created_at": "2017-07-10T22:23:15Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552169",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552169"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552169"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552169/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 388,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552640",
    "pull_request_review_id": 49047147,
    "id": 126552640,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjU1MjY0MA==",
    "diff_hunk": "@@ -456,14 +458,104 @@ class LimitedString\n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        WriteCompactSize(s, string.size());\n-        if (!string.empty())\n-            s.write((char*)&string[0], string.size());\n+        s << string;\n     }\n };\n+//! Add a LimitedString wrapper around a const string (identity)\n+template<size_t I> static inline const std::string& LimitedString(const std::string& str) { return str; }\n+//! Add a LimitedString wrapper around a non-const string\n+template<size_t I> static inline LimitedStringWrapper<I> LimitedString(std::string& str) { return LimitedStringWrapper<I>(str); }\n+\n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native\n+ * byte order, but serialized in big endian notation.\n+ *\n+ * Onlyy 16-bit types are supported for now.\n+ */\n+template<typename I, size_t S> class BigEndianWrapper\n+{\n+protected:\n+    I& m_val;\n+public:\n+    BigEndianWrapper(I& val) : m_val(val)\n+    {\n+        static_assert(S == 2, \"Unsupported BigEndian size\");\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        if (S == 2) ser_writedata16be(s, m_val);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        if (S == 2) m_val = ser_readdata16be(s);\n+    }\n+};\n+//! Automatically construct a BigEndianWrapper around the argument.\n+template<typename I> static inline BigEndianWrapper<I,sizeof(I)> BigEndian(I& i) { return BigEndianWrapper<I,sizeof(I)>(i); }\n+\n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * For const-correctness, the W parameter is a template itself.\n+ * It is instantiated as W<const V::value_type> when serializing, and as\n+ * W<V::value_type> when deserializing.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(obj) { READWRITE(VectorApply<VarIntWrapper>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, iteration, and resize method that behave like vectors.\n+ */\n+template<template <typename> class W, typename V> class VectorApplyWrapper",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 302,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "21cf5887e9cc6f8b3521b4748acc167a905655da",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Notice the unusual construction of a template that takes a template as parameter here. See \"Template template parameter\" here: http://en.cppreference.com/w/cpp/language/template_parameters",
    "created_at": "2017-07-10T22:25:58Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552640",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552640"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552640"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 566,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552772",
    "pull_request_review_id": 49047147,
    "id": 126552772,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjU1Mjc3Mg==",
    "diff_hunk": "@@ -898,16 +978,16 @@ void SerializeMany(Stream& s)\n }\n \n template<typename Stream, typename Arg>\n-void SerializeMany(Stream& s, Arg&& arg)\n+void SerializeMany(Stream& s, const Arg& arg)\n {\n-    ::Serialize(s, std::forward<Arg>(arg));\n+    ::Serialize(s, arg);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 381,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "21cf5887e9cc6f8b3521b4748acc167a905655da",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The reason for removing the `std::forward` calls here is explained in the commit message (there is no benefit in passing down the rvalue-ness).",
    "created_at": "2017-07-10T22:26:40Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552772",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552772"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552772"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552772/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1021,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/131536929",
    "pull_request_review_id": 54529753,
    "id": 131536929,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTUzNjkyOQ==",
    "diff_hunk": "@@ -495,11 +494,14 @@ class LimitedString\n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        WriteCompactSize(s, string.size());\n-        if (!string.empty())\n-            s.write((char*)string.data(), string.size());\n+        s << string;\n     }\n };\n+//! Add a LimitedString wrapper around a const string (identity)\n+template<size_t I> static inline const std::string& LimitedString(const std::string& str) { return str; }\n+//! Add a LimitedString wrapper around a non-const string",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 38,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "6020efb64a92ace29ad5a4a73648637799d6b44e",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing periods in comments.",
    "created_at": "2017-08-06T08:12:46Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r131536929",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/131536929"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r131536929"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/131536929/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 504,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136429372",
    "pull_request_review_id": 59968407,
    "id": 136429372,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQyOTM3Mg==",
    "diff_hunk": "@@ -493,9 +515,44 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native\n+ * byte order, but serialized in big endian notation.\n+ *\n+ * Onlyy 16-bit types are supported for now.\n+ */\n+template<typename I, size_t S> class BigEndianWrapper\n+{\n+protected:\n+    I& m_val;\n+public:\n+    explicit BigEndianWrapper(I& val) : m_val(val)\n+    {\n+        static_assert(S == 2 || S == 4, \"Unsupported BigEndian size\");",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 65,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "8dc6fc7cad4fa76544f4651c45063031cae0d5c0",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add BigEndian serialization wrapper\"\r\n\r\nShould also static assert sizeof(I) <= S, and std::is_unsigned\\<I>::value",
    "created_at": "2017-08-31T19:39:01Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136429372",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136429372"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136429372"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136429372/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 516,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136430185",
    "pull_request_review_id": 59968407,
    "id": 136430185,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQzMDE4NQ==",
    "diff_hunk": "@@ -493,9 +515,44 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native\n+ * byte order, but serialized in big endian notation.\n+ *\n+ * Onlyy 16-bit types are supported for now.",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 56,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "8dc6fc7cad4fa76544f4651c45063031cae0d5c0",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add BigEndian serialization wrapper\"\r\n\r\nThis seems to support 16 and 32 bit types, not just 16.",
    "created_at": "2017-08-31T19:42:53Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136430185",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136430185"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136430185"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136430185/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 523,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136430865",
    "pull_request_review_id": 59968407,
    "id": 136430865,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQzMDg2NQ==",
    "diff_hunk": "@@ -493,9 +515,44 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 53,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "8dc6fc7cad4fa76544f4651c45063031cae0d5c0",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add BigEndian serialization wrapper\"\r\n\r\nCan you add a usage note here on when big endian numbers are actually recommended? Is this only for backwards compatibility with CService? It seems like a serialization format that uses a mix of big endian and little endian numbers would be confusing to work with.",
    "created_at": "2017-08-31T19:46:01Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136430865",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136430865"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136430865"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136430865/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 510,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136435274",
    "pull_request_review_id": 59968407,
    "id": 136435274,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQzNTI3NA==",
    "diff_hunk": "@@ -468,23 +467,27 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& nIn) : n(nIn) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s) {\n+        n = ReadCompactSize<Stream>(s);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadCompactSize<Stream>(s);\n+    void Serialize(Stream& s) const {\n+        WriteCompactSize<Stream>(s, n);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 35,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "a090659685519395e2b637bf32ec7353535092b4",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Generalize CompactSize wrapper\r\n\r\nProbably should add static assert to check std::is_unsigned\\<I>, or raise exception if n is less than 0.\r\n\r\nCould also check against numeric_limits\\<int64_t\\>::max() at runtime or compile time.\r\n\r\n(It also seems weird, though not relevant to this wrapper, that it is an error to read a compact int greater than MAX_SIZE but not to write one.)",
    "created_at": "2017-08-31T20:04:43Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136435274",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136435274"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136435274"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136435274/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 486,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136435516",
    "pull_request_review_id": 59968407,
    "id": 136435516,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQzNTUxNg==",
    "diff_hunk": "@@ -468,23 +467,27 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& nIn) : n(nIn) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s) {\n+        n = ReadCompactSize<Stream>(s);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 28,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "a090659685519395e2b637bf32ec7353535092b4",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Generalize CompactSize wrapper\"\r\n\r\nIdeally, this would throw an exception if return value is greater than numeric_limits\\<I>::max()",
    "created_at": "2017-08-31T20:05:45Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136435516",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136435516"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136435516"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136435516/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 481,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136457586",
    "pull_request_review_id": 59968407,
    "id": 136457586,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQ1NzU4Ng==",
    "diff_hunk": "@@ -446,6 +428,16 @@ class CFlatData\n         s.read(pbegin, pend - pbegin);\n     }\n };\n+//! Construct a FlatRange wrapper around a const vector.\n+template<typename T> static inline const FlatRangeWrapper<const char> FlatVector(const T& t) { return FlatRangeWrapper<const char>((const char*)t.data(), (const char*)(t.data() + t.size())); }\n+//! Construct a FlatRange wrapper around a non-const vector.\n+template<typename T> static inline FlatRangeWrapper<char> FlatVector(T& t) { return FlatRangeWrapper<char>((char*)t.data(), (char*)(t.data() + t.size())); }\n+//! Construct a FlatRange wrapper around a const POD and array types.\n+template<typename T> static inline const FlatRangeWrapper<const char> FlatDataInner(const T* t, size_t len) { return FlatRangeWrapper<const char>((const char*)t, ((const char*)t) + len); }\n+//! Construct a FlatRange wrapper around a non-const POD and array types.\n+template<typename T> static inline FlatRangeWrapper<char> FlatDataInner(T* t, size_t len) { return FlatRangeWrapper<char>((char*)t, ((char*)t) + len); }\n+//! Helper macro to easily serialize POD types.\n+#define FLATDATA(x) FlatDataInner(&(x), sizeof(x))",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 55,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "2061c50879fc75fbb24dbaf1489f71f24d555077",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Generalize FlatData wrapper\"\r\n\r\nThough these changes don't make FLATDATA more dangerous than it was previously, the lack of type safety relying on C casts and sizeof here is a little scary. I experimented a little, and it seems this could be cleaned up with some simple changes I posted here: 6ef78bcd83dd6f88362dec29736811b762ad75eb. Could you take a look, and maybe incorporate these into the PR?",
    "created_at": "2017-08-31T21:50:28Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136457586",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136457586"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136457586"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136457586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 440,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493050",
    "pull_request_review_id": 60040038,
    "id": 136493050,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQ5MzA1MA==",
    "diff_hunk": "@@ -468,23 +467,27 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& nIn) : n(nIn) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s) {\n+        n = ReadCompactSize<Stream>(s);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 28,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "a090659685519395e2b637bf32ec7353535092b4",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2017-09-01T03:34:50Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493050",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493050"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493050"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493050/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 481,
    "side": "RIGHT",
    "in_reply_to_id": 136435516
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493065",
    "pull_request_review_id": 60040054,
    "id": 136493065,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQ5MzA2NQ==",
    "diff_hunk": "@@ -468,23 +467,27 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& nIn) : n(nIn) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s) {\n+        n = ReadCompactSize<Stream>(s);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadCompactSize<Stream>(s);\n+    void Serialize(Stream& s) const {\n+        WriteCompactSize<Stream>(s, n);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 35,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "a090659685519395e2b637bf32ec7353535092b4",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2017-09-01T03:35:00Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493065",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493065"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493065"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493065/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 486,
    "side": "RIGHT",
    "in_reply_to_id": 136435274
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493075",
    "pull_request_review_id": 60040068,
    "id": 136493075,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQ5MzA3NQ==",
    "diff_hunk": "@@ -493,9 +515,44 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 53,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "8dc6fc7cad4fa76544f4651c45063031cae0d5c0",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-01T03:35:09Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493075",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493075"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493075"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493075/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 510,
    "side": "RIGHT",
    "in_reply_to_id": 136430865
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493129",
    "pull_request_review_id": 60040133,
    "id": 136493129,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQ5MzEyOQ==",
    "diff_hunk": "@@ -446,6 +428,16 @@ class CFlatData\n         s.read(pbegin, pend - pbegin);\n     }\n };\n+//! Construct a FlatRange wrapper around a const vector.\n+template<typename T> static inline const FlatRangeWrapper<const char> FlatVector(const T& t) { return FlatRangeWrapper<const char>((const char*)t.data(), (const char*)(t.data() + t.size())); }\n+//! Construct a FlatRange wrapper around a non-const vector.\n+template<typename T> static inline FlatRangeWrapper<char> FlatVector(T& t) { return FlatRangeWrapper<char>((char*)t.data(), (char*)(t.data() + t.size())); }\n+//! Construct a FlatRange wrapper around a const POD and array types.\n+template<typename T> static inline const FlatRangeWrapper<const char> FlatDataInner(const T* t, size_t len) { return FlatRangeWrapper<const char>((const char*)t, ((const char*)t) + len); }\n+//! Construct a FlatRange wrapper around a non-const POD and array types.\n+template<typename T> static inline FlatRangeWrapper<char> FlatDataInner(T* t, size_t len) { return FlatRangeWrapper<char>((char*)t, ((char*)t) + len); }\n+//! Helper macro to easily serialize POD types.\n+#define FLATDATA(x) FlatDataInner(&(x), sizeof(x))",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 55,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "2061c50879fc75fbb24dbaf1489f71f24d555077",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've incorporated part of your changes, but gone further and just added native support for serializing char arrays (without any wrapper). I think this is much cleaner now.",
    "created_at": "2017-09-01T03:36:07Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493129",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493129"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493129"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493129/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 440,
    "side": "RIGHT",
    "in_reply_to_id": 136457586
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493137",
    "pull_request_review_id": 60040146,
    "id": 136493137,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQ5MzEzNw==",
    "diff_hunk": "@@ -493,9 +515,44 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native\n+ * byte order, but serialized in big endian notation.\n+ *\n+ * Onlyy 16-bit types are supported for now.",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 56,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "8dc6fc7cad4fa76544f4651c45063031cae0d5c0",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2017-09-01T03:36:13Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493137",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493137"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493137"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493137/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 523,
    "side": "RIGHT",
    "in_reply_to_id": 136430185
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493144",
    "pull_request_review_id": 60040153,
    "id": 136493144,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQ5MzE0NA==",
    "diff_hunk": "@@ -493,9 +515,44 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native\n+ * byte order, but serialized in big endian notation.\n+ *\n+ * Onlyy 16-bit types are supported for now.\n+ */\n+template<typename I, size_t S> class BigEndianWrapper\n+{\n+protected:\n+    I& m_val;\n+public:\n+    explicit BigEndianWrapper(I& val) : m_val(val)\n+    {\n+        static_assert(S == 2 || S == 4, \"Unsupported BigEndian size\");",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 65,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "8dc6fc7cad4fa76544f4651c45063031cae0d5c0",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2017-09-01T03:36:21Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493144",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493144"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493144"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 516,
    "side": "RIGHT",
    "in_reply_to_id": 136429372
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136527772",
    "pull_request_review_id": 60079059,
    "id": 136527772,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjUyNzc3Mg==",
    "diff_hunk": "@@ -495,9 +517,48 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native\n+ * byte order, but serialized in big endian notation. This is only intended\n+ * to implement serializers that are compatible with existing formats, and\n+ * its use is not recommended for new data structures.\n+ *\n+ * Only 16-bit and 32-bit types are supported for now.\n+ */\n+template<typename I, size_t S> class BigEndianWrapper\n+{\n+protected:\n+    I& m_val;\n+public:\n+    explicit BigEndianWrapper(I& val) : m_val(val)\n+    {\n+        static_assert(sizeof(I) <= S, \"BigEndian type exceeds claimed size\");\n+        static_assert(S == 2 || S == 4, \"Unsupported BigEndian size\");\n+        static_assert(std::is_unsigned<I>::value, \"BigEndian type must be unsigned integer\");\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        if (S == 2) ser_writedata16be(s, m_val);\n+        if (S == 4) ser_writedata32be(s, m_val);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        if (S == 2) m_val = ser_readdata16be(s);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 82,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "00284cb0a69b224304a2046463601f8161e9a918",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add BigEndian serialization wrapper\"\r\n\r\nWould be good to throw exception if deserialized value is greater than numeric_limits\\<I>::max(). Or alternately, change the `sizeof(I) <= S` requirement to `sizeof(I) == S` to prevent this being possible.",
    "created_at": "2017-09-01T08:53:15Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136527772",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136527772"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136527772"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136527772/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 551,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136529062",
    "pull_request_review_id": 60079059,
    "id": 136529062,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjUyOTA2Mg==",
    "diff_hunk": "@@ -470,23 +469,36 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &m_n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& n) : m_n(n)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+    }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s)\n+    {\n+        uint64_t n = ReadCompactSize<Stream>(s);\n+        if (n > std::numeric_limits<I>::max()) {\n+            throw std::ios_base::failure(\"CompactSize exceeds limit of type\");\n+        }\n+        m_n = n;\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadCompactSize<Stream>(s);\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize<Stream>(s, m_n);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 44,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "dddd1af7514be05f940eb618b2afa8dbadb9b3c9",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Generalize CompactSize wrapper\"\r\n\r\nWould be good to throw exception if `m_n` is greater than numeric_limits<uint64_t>::max(). Or alternately, require `numeric_limits<I>::max() < numeric_limits<int64_t>::max()` with static assert.",
    "created_at": "2017-09-01T08:59:59Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136529062",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136529062"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136529062"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136529062/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 496,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136531179",
    "pull_request_review_id": 60079059,
    "id": 136531179,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjUzMTE3OQ==",
    "diff_hunk": "@@ -132,7 +132,7 @@ class CSubNet\n         inline void SerializationOp(Stream& s, Operation ser_action) {\n             READWRITE(network);\n             READWRITE(FLATDATA(netmask));\n-            READWRITE(FLATDATA(valid));\n+            READWRITE(valid);",
    "path": "src/netaddress.h",
    "position": null,
    "original_position": 5,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f8c39376a39e0971629dab0c37eac5cc94e0b94e",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Overhaul FLATDATA\"\r\n\r\nMight be worth splitting this change out into separate commit, or noting in commit message here that that this change is not backwards compatible on platforms where sizeof(bool) is not 1.",
    "created_at": "2017-09-01T09:11:24Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136531179",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136531179"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136531179"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136531179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 135,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136532188",
    "pull_request_review_id": 60079059,
    "id": 136532188,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjUzMjE4OA==",
    "diff_hunk": "@@ -406,48 +415,36 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing arrays and POD. */",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 41,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f8c39376a39e0971629dab0c37eac5cc94e0b94e",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Overhaul FLATDATA\"\r\n\r\nProbably more accurate to say \"wrapper for serializing char arrays\". (Though in principle this could work with stream classes with read/write methods not taking char pointers.)",
    "created_at": "2017-09-01T09:16:44Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136532188",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136532188"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136532188"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136532188/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 420,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136534994",
    "pull_request_review_id": 60079059,
    "id": 136534994,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjUzNDk5NA==",
    "diff_hunk": "@@ -406,48 +415,36 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing arrays and POD. */\n+template<typename C>\n+class FlatRangeWrapper\n {\n protected:\n-    char* pbegin;\n-    char* pend;\n+    C* m_begin;\n+    C* m_end;\n public:\n-    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }\n-    template <class T, class TAl>\n-    explicit CFlatData(std::vector<T,TAl> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    template <unsigned int N, typename T, typename S, typename D>\n-    explicit CFlatData(prevector<N, T, S, D> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    char* begin() { return pbegin; }\n-    const char* begin() const { return pbegin; }\n-    char* end() { return pend; }\n-    const char* end() const { return pend; }\n+    FlatRangeWrapper(C* begin, C* end) : m_begin(begin), m_end(end) { }\n \n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        s.write(pbegin, pend - pbegin);\n+        s.write(m_begin, m_end - m_begin);\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream& s)\n     {\n-        s.read(pbegin, pend - pbegin);\n+        s.read(m_begin, m_end - m_begin);\n     }\n };\n+//! Construct a FlatRange wrapper around a const char vector.\n+template<typename T> static inline const FlatRangeWrapper<const char> FlatVector(const T& t) { return FlatRangeWrapper<const char>(CharCast(t.data()), CharCast(t.data() + t.size())); }",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 85,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f8c39376a39e0971629dab0c37eac5cc94e0b94e",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Overhaul FLATDATA\"\r\n\r\nMaybe call it CharVector or CharArray instead of FlatVector. FlatVector is kind of redundant because any vectors should be flat. But also the vector part is limiting because these functions can work for other types (std::array, std::string, SecureString, std::basic_string_view, etc)",
    "created_at": "2017-09-01T09:32:15Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136534994",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136534994"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136534994"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136534994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 443,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136538430",
    "pull_request_review_id": 60091325,
    "id": 136538430,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjUzODQzMA==",
    "diff_hunk": "@@ -189,22 +170,6 @@ template<typename X> const X&& AsBaseType(const X&& x) { return std::move(x); }\n  */\n #define READWRITEAS(obj, typ) (::SerReadWriteMany(s, ser_action, AsBaseType<typ>(obj)))\n \n-/** \n- * Implement three methods for serializable objects. These are actually wrappers over\n- * \"SerializationOp\" template, which implements the body of each class' serialization\n- * code. Adding \"ADD_SERIALIZE_METHODS\" in the body of the class causes these wrappers to be\n- * added as members. \n- */\n-#define ADD_SERIALIZE_METHODS                                         \\",
    "path": "src/serialize.h",
    "position": 51,
    "original_position": 43,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "d04c25740539ab5d8a764fd8cbf713f55e571ec0",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Remove old serialization primitives\"\r\n\r\nThere are still two references to ADD_SERIALIZE_METHODS in comments.",
    "created_at": "2017-09-01T09:46:51Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136538430",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136538430"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136538430"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136538430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 192,
    "original_line": 192,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631456",
    "pull_request_review_id": 60202506,
    "id": 136631456,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjYzMTQ1Ng==",
    "diff_hunk": "@@ -406,48 +415,36 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing arrays and POD. */",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 41,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f8c39376a39e0971629dab0c37eac5cc94e0b94e",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2017-09-01T17:53:28Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631456",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631456"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631456"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631456/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 420,
    "side": "RIGHT",
    "in_reply_to_id": 136532188
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631479",
    "pull_request_review_id": 60202539,
    "id": 136631479,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjYzMTQ3OQ==",
    "diff_hunk": "@@ -470,23 +469,36 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &m_n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& n) : m_n(n)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+    }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s)\n+    {\n+        uint64_t n = ReadCompactSize<Stream>(s);\n+        if (n > std::numeric_limits<I>::max()) {\n+            throw std::ios_base::failure(\"CompactSize exceeds limit of type\");\n+        }\n+        m_n = n;\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadCompactSize<Stream>(s);\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize<Stream>(s, m_n);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 44,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "dddd1af7514be05f940eb618b2afa8dbadb9b3c9",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-01T17:53:37Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631479",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631479"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631479"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 496,
    "side": "RIGHT",
    "in_reply_to_id": 136529062
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631499",
    "pull_request_review_id": 60202565,
    "id": 136631499,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjYzMTQ5OQ==",
    "diff_hunk": "@@ -495,9 +517,48 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native\n+ * byte order, but serialized in big endian notation. This is only intended\n+ * to implement serializers that are compatible with existing formats, and\n+ * its use is not recommended for new data structures.\n+ *\n+ * Only 16-bit and 32-bit types are supported for now.\n+ */\n+template<typename I, size_t S> class BigEndianWrapper\n+{\n+protected:\n+    I& m_val;\n+public:\n+    explicit BigEndianWrapper(I& val) : m_val(val)\n+    {\n+        static_assert(sizeof(I) <= S, \"BigEndian type exceeds claimed size\");\n+        static_assert(S == 2 || S == 4, \"Unsupported BigEndian size\");\n+        static_assert(std::is_unsigned<I>::value, \"BigEndian type must be unsigned integer\");\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        if (S == 2) ser_writedata16be(s, m_val);\n+        if (S == 4) ser_writedata32be(s, m_val);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        if (S == 2) m_val = ser_readdata16be(s);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 82,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "00284cb0a69b224304a2046463601f8161e9a918",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-01T17:53:44Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631499",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631499"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631499"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631499/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 551,
    "side": "RIGHT",
    "in_reply_to_id": 136527772
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631541",
    "pull_request_review_id": 60202601,
    "id": 136631541,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjYzMTU0MQ==",
    "diff_hunk": "@@ -406,48 +415,36 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing arrays and POD. */\n+template<typename C>\n+class FlatRangeWrapper\n {\n protected:\n-    char* pbegin;\n-    char* pend;\n+    C* m_begin;\n+    C* m_end;\n public:\n-    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }\n-    template <class T, class TAl>\n-    explicit CFlatData(std::vector<T,TAl> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    template <unsigned int N, typename T, typename S, typename D>\n-    explicit CFlatData(prevector<N, T, S, D> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    char* begin() { return pbegin; }\n-    const char* begin() const { return pbegin; }\n-    char* end() { return pend; }\n-    const char* end() const { return pend; }\n+    FlatRangeWrapper(C* begin, C* end) : m_begin(begin), m_end(end) { }\n \n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        s.write(pbegin, pend - pbegin);\n+        s.write(m_begin, m_end - m_begin);\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream& s)\n     {\n-        s.read(pbegin, pend - pbegin);\n+        s.read(m_begin, m_end - m_begin);\n     }\n };\n+//! Construct a FlatRange wrapper around a const char vector.\n+template<typename T> static inline const FlatRangeWrapper<const char> FlatVector(const T& t) { return FlatRangeWrapper<const char>(CharCast(t.data()), CharCast(t.data() + t.size())); }",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 85,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f8c39376a39e0971629dab0c37eac5cc94e0b94e",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-01T17:53:51Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631541",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631541"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631541"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631541/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 443,
    "side": "RIGHT",
    "in_reply_to_id": 136534994
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631558",
    "pull_request_review_id": 60202626,
    "id": 136631558,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjYzMTU1OA==",
    "diff_hunk": "@@ -132,7 +132,7 @@ class CSubNet\n         inline void SerializationOp(Stream& s, Operation ser_action) {\n             READWRITE(network);\n             READWRITE(FLATDATA(netmask));\n-            READWRITE(FLATDATA(valid));\n+            READWRITE(valid);",
    "path": "src/netaddress.h",
    "position": null,
    "original_position": 5,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f8c39376a39e0971629dab0c37eac5cc94e0b94e",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-01T17:53:57Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631558",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631558"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631558"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631558/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 135,
    "side": "RIGHT",
    "in_reply_to_id": 136531179
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136638567",
    "pull_request_review_id": 60091325,
    "id": 136638567,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjYzODU2Nw==",
    "diff_hunk": "@@ -167,6 +167,28 @@ enum\n         SerializationOp(s, CSerActionUnserialize());                  \\\n     }\n \n+/**\n+ * Implement the Serialize and Unserialize methods by delegating to a single templated\n+ * static method that takes the to-be-(de)serialized object as a parameter. This approach\n+ * has the advantage that the constness of the object becomes a template parameter, and\n+ * thus allows a single implementation that sees the object as const for serializing\n+ * and non-const for deserializing, without casts.\n+ */\n+#define SERIALIZE_METHODS(obj)                                                      \\",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 11,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "d85bbf9affb8002a48e8319d94c1de2a2d6eb013",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Introduce new serialization macros without casts\"\r\n\r\nIt would be nice if the `SERIALIZE_METHODS` macro took a `class_name` argument. I'd like this so it'd be possible to add deserializing constructors here (like `CTransaction` has), so there could be a uniform way to deserialize objects without assuming they support default construction. But also a `class_name` argument would make the macro more flexible and future proof, so it'd be easy to do things like:\r\n\r\n- Adding stricter type checking (e.g. an `is_same<class_name, remove_const<Type>>` assert in SerializationOps to prevent usage errors or template bloat.\r\n- Logging or debugging with `#class_name`\r\n- Adding static or friend functions that reference `class_name`.",
    "created_at": "2017-09-01T18:27:41Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136638567",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136638567"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136638567"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136638567/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 177,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136639150",
    "pull_request_review_id": 60091325,
    "id": 136639150,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjYzOTE1MA==",
    "diff_hunk": "@@ -148,9 +148,21 @@ enum\n     SER_GETHASH         = (1 << 2),\n };\n \n+// Convert the reference base type to X, without changing constness or reference type.",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 4,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "2d0edd1cfcadd5ccda25c9ea8b5ae7faae88b5f8",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add READWRITEAS, a macro to serialize safely as a different type\"\r\n\r\nMaybe use `//!`",
    "created_at": "2017-09-01T18:30:40Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136639150",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136639150"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136639150"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136639150/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 151,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136643231",
    "pull_request_review_id": 60091325,
    "id": 136643231,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY0MzIzMQ==",
    "diff_hunk": "@@ -470,23 +469,37 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &m_n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& n) : m_n(n)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max(), \"CompactSize only supports 64-bit integers and below\");\n+    }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s)\n+    {\n+        uint64_t n = ReadCompactSize<Stream>(s);\n+        if (n > std::numeric_limits<I>::max()) {\n+            throw std::ios_base::failure(\"CompactSize exceeds limit of type\");\n+        }\n+        m_n = n;\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadCompactSize<Stream>(s);\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize<Stream>(s, m_n);\n     }\n };\n+//! Automatically construct a CompactSize wrapper around the argument.\n+template<typename I> static inline CompactSizeWrapper<I> COMPACTSIZE(I& i) { return CompactSizeWrapper<I>(i); }",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 49,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "08da230f0f351c7a34539e20990ea1fa7b5a96df",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Generalize CompactSize wrapper\"\r\n\r\nMight be good to add `const I& i` overload so it's possible to serialize rvalues.",
    "created_at": "2017-09-01T18:52:07Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136643231",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136643231"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136643231"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136643231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 472,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136644028",
    "pull_request_review_id": 60091325,
    "id": 136644028,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY0NDAyOA==",
    "diff_hunk": "@@ -450,24 +449,29 @@ class CFlatData\n     }\n };\n \n+/** Serialization wrapper class for integers in VarInt format. */\n template<typename I>\n-class CVarInt\n+class VarIntWrapper\n {\n protected:\n-    I &n;\n+    I &m_n;\n public:\n-    explicit CVarInt(I& nIn) : n(nIn) { }\n+    explicit VarIntWrapper(I& n) : m_n(n) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteVarInt<Stream,I>(s, n);\n+    void Serialize(Stream &s) const\n+    {\n+        WriteVarInt(s, m_n);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadVarInt<Stream,I>(s);\n+    void Unserialize(Stream& s)\n+    {\n+        m_n = ReadVarInt<Stream,I>(s);\n     }\n };\n+//! Automatically construct a VarInt wrapper around the argument.\n+template<typename I> static inline VarIntWrapper<typename std::remove_reference<I>::type> VARINT(I&& i) { return VarIntWrapper<typename std::remove_reference<I>::type>(i); }",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 41,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "d013fb285b19a748bbf49e19b6882fa52975ea41",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Generalize VarInt wrappers\"\r\n\r\nThis might be easier to understand written with overloads instead of rvalue references:\r\n\r\n```\r\ntemplate<typename I> static inline VarIntWrapper<I> VARINT(I& i) { return VarIntWrapper<I>(i); }\r\ntemplate<typename I> static inline VarIntWrapper<const I> VARINT(const I& i) { return VarIntWrapper<const I>(i); }\r\n```\r\n\r\nAlso would make it more consistent with other wrappers.",
    "created_at": "2017-09-01T18:56:22Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136644028",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136644028"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136644028"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136644028/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 435,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136644775",
    "pull_request_review_id": 60091325,
    "id": 136644775,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY0NDc3NQ==",
    "diff_hunk": "@@ -406,48 +415,38 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing ranges of chars. */\n+template<typename C>\n+class CharArrayWrapper\n {\n protected:\n-    char* pbegin;\n-    char* pend;\n+    C* m_begin;\n+    size_t m_size;\n public:\n-    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }\n-    template <class T, class TAl>\n-    explicit CFlatData(std::vector<T,TAl> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    template <unsigned int N, typename T, typename S, typename D>\n-    explicit CFlatData(prevector<N, T, S, D> &v)\n+    CharArrayWrapper(C* begin, size_t size) : m_begin(begin), m_size(size)\n     {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n+        static_assert(sizeof(C) == 1, \"CharArrayWrapper only works for char types\");",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 64,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f6063a02801d19c2b41d8fbf0092cffd892c7f53",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Overhaul FLATDATA for char arrays only\"\r\n\r\nConsider dropping this assert. I don't think it accomplishes much, and in principle CharArrayWrapper should work perfectly well with wchar_t, or with any stream object that has happens to have non-`char` read and write methods.",
    "created_at": "2017-09-01T19:00:25Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136644775",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136644775"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136644775"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136644775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 423,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136648225",
    "pull_request_review_id": 60091325,
    "id": 136648225,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY0ODIyNQ==",
    "diff_hunk": "@@ -898,16 +898,16 @@ void SerializeMany(Stream& s)\n }\n \n template<typename Stream, typename Arg>\n-void SerializeMany(Stream& s, Arg&& arg)\n+void SerializeMany(Stream& s, const Arg& arg)",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 23,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "a2d870857730dccb171be87313fe20a6baac3dc1",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Support deserializing into temporaries\"\r\n\r\nCould drop this overload entirely. The overload above is sufficient for a base case.\r\n\r\nAlso applies to UnserializeMany below.",
    "created_at": "2017-09-01T19:21:22Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136648225",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136648225"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136648225"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136648225/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 901,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136649911",
    "pull_request_review_id": 60091325,
    "id": 136649911,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY0OTkxMQ==",
    "diff_hunk": "@@ -519,19 +518,23 @@ class LimitedString\n         if (size > Limit) {\n             throw std::ios_base::failure(\"String length limit exceeded\");\n         }\n-        string.resize(size);\n-        if (size != 0)\n-            s.read((char*)string.data(), size);\n+        m_string.resize(size);\n+        if (size != 0) {\n+            s.read((char*)m_string.data(), size);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 36,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "0b5fd4ad9c28d850f545eab5015e7b9062f51259",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Generalize LimitedString wrapper\"\r\n\r\nMaybe use `&m_string[0]` avoid writing to a const pointer.",
    "created_at": "2017-09-01T19:31:23Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136649911",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136649911"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136649911"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136649911/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 523,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136653725",
    "pull_request_review_id": 60091325,
    "id": 136653725,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY1MzcyNQ==",
    "diff_hunk": "@@ -573,6 +573,64 @@ template<typename I> class BigEndianWrapper\n //! Automatically construct a BigEndianWrapper around the argument.\n template<typename I> static inline BigEndianWrapper<I> BigEndian(I& i) { return BigEndianWrapper<I>(i); }\n \n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * For const-correctness, the W parameter is a template itself.\n+ * It is instantiated as W<const V::value_type> when serializing, and as\n+ * W<V::value_type> when deserializing.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(obj) { READWRITE(VectorApply<VarIntWrapper>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, iteration, and resize method that behave like vectors.\n+ */\n+template<template <typename> class W, typename V> class VectorApplyWrapper\n+{\n+protected:\n+    typedef typename V::value_type value_type;\n+    V& m_vector;\n+public:\n+    explicit VectorApplyWrapper(V& vector) : m_vector(vector) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize(s, m_vector.size());\n+        for (const value_type& x : m_vector) {\n+            s << W<const value_type>(x);\n+        }\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        m_vector.clear();\n+        unsigned int nSize = ReadCompactSize(s);\n+        unsigned int nMid = 0;\n+        while (nMid < nSize) {\n+            nMid += 5000000 / sizeof(value_type);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 48,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "ba4260615daae26ddb0112d8b7b88eab43863660",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add custom vector-element serialization wrapper\"\r\n\r\nThis could use a comment. I don't understand it at all. Wouldn't it be simpler and more efficient to just resize and fill the vector once instead of resizing it multiple times?",
    "created_at": "2017-09-01T19:55:44Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136653725",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136653725"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136653725"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136653725/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 584,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136654732",
    "pull_request_review_id": 60091325,
    "id": 136654732,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY1NDczMg==",
    "diff_hunk": "@@ -573,6 +573,64 @@ template<typename I> class BigEndianWrapper\n //! Automatically construct a BigEndianWrapper around the argument.\n template<typename I> static inline BigEndianWrapper<I> BigEndian(I& i) { return BigEndianWrapper<I>(i); }\n \n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * For const-correctness, the W parameter is a template itself.\n+ * It is instantiated as W<const V::value_type> when serializing, and as\n+ * W<V::value_type> when deserializing.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(obj) { READWRITE(VectorApply<VarIntWrapper>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, iteration, and resize method that behave like vectors.\n+ */\n+template<template <typename> class W, typename V> class VectorApplyWrapper\n+{\n+protected:\n+    typedef typename V::value_type value_type;\n+    V& m_vector;\n+public:\n+    explicit VectorApplyWrapper(V& vector) : m_vector(vector) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize(s, m_vector.size());\n+        for (const value_type& x : m_vector) {\n+            s << W<const value_type>(x);\n+        }\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        m_vector.clear();\n+        unsigned int nSize = ReadCompactSize(s);\n+        unsigned int nMid = 0;\n+        while (nMid < nSize) {\n+            nMid += 5000000 / sizeof(value_type);\n+            if (nMid > nSize) {\n+                nMid = nSize;\n+            }\n+            m_vector.resize(nMid);\n+            for (value_type& x : m_vector) {\n+                s >> W<value_type>(x);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 54,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "ba4260615daae26ddb0112d8b7b88eab43863660",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add custom vector-element serialization wrapper\"\r\n\r\nDoesn't this overwrite elements in the front of the vector each time through the while loop?",
    "created_at": "2017-09-01T20:01:39Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136654732",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136654732"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136654732"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136654732/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 590,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136655347",
    "pull_request_review_id": 60091325,
    "id": 136655347,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY1NTM0Nw==",
    "diff_hunk": "@@ -12,58 +12,70 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n+template<typename T>\n+struct TransactionCompressWrapper {\n private:\n-    CTransactionRef& tx;\n+    T& tx;\n public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n+    explicit TransactionCompressWrapper(T& txIn) : tx(txIn) {}\n+    SERIALIZE_METHODS(obj) { READWRITE(obj.tx); }\n+};\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+template<typename I>\n+struct Uint48Wrapper {\n+private:\n+    I& m_int;\n+public:\n+    Uint48Wrapper(I& i) : m_int(i) {}\n+    template <typename Stream> void Serialize(Stream& s) const\n+    {\n+        uint32_t lsb = m_int & 0xffffffff;\n+        uint16_t msb = (m_int >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n+    template <typename Stream> void Unserialize(Stream& s)\n+    {\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        m_int = (uint64_t(msb) << 32) | uint64_t(lsb);\n     }\n };\n \n+template<typename T>",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 42,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "d64f7fb78da1d2f1fdc3e7046a28740e1276a235",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert blockencodings to new serialization\"\r\n\r\nMaybe move this up closer to TransactionCompressWrapper class",
    "created_at": "2017-09-01T20:05:40Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136655347",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136655347"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136655347"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136655347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136660513",
    "pull_request_review_id": 60091325,
    "id": 136660513,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY2MDUxMw==",
    "diff_hunk": "@@ -154,40 +156,18 @@ class CBlockHeaderAndShortTxIDs {\n \n     size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-\n-        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n-        READWRITE(COMPACTSIZE(shorttxids_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n-                for (; i < shorttxids.size(); i++) {\n-                    uint32_t lsb = 0; uint16_t msb = 0;\n-                    READWRITE(lsb);\n-                    READWRITE(msb);\n-                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-                }\n-            }\n-        } else {\n-            for (size_t i = 0; i < shorttxids.size(); i++) {\n-                uint32_t lsb = shorttxids[i] & 0xffffffff;\n-                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-                READWRITE(lsb);\n-                READWRITE(msb);\n-            }\n-        }\n-\n-        READWRITE(prefilledtxn);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << header << nonce << VectorApply<Uint48Wrapper>(shorttxids) << prefilledtxn;\n+    }\n \n-        if (ser_action.ForRead())\n-            FillShortTxIDSelector();\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s)\n+    {\n+        static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+        s >> header >> nonce >> VectorApply<Uint48Wrapper>(shorttxids) >> prefilledtxn;\n+        FillShortTxIDSelector();",
    "path": "src/blockencodings.h",
    "position": 224,
    "original_position": 214,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "d64f7fb78da1d2f1fdc3e7046a28740e1276a235",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert blockencodings to new serialization\"\r\n\r\nWould you be opposed to adding mutable object access to SERIALIZE_METHODS so Serialize and Unserialize methods don't need to be split up? I could think of a number of ways to do this. Maybe easiest would be to stick a mutable pointer inside ser_action:\r\n\r\n```\r\nSERIALIZE_METHODS(obj) {\r\n  READWRITE(obj.header, obj.nonce, VectorApply<Uint48Wrapper>(obj.shorttxids), obj.prefilledtxn);\r\n  if (ser_action.ForRead()) ser_action.MutableObj()->FillShortTxId();\r\n}\r\n```\r\n\r\nThe pointer would be null when serializing.",
    "created_at": "2017-09-01T20:35:53Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136660513",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136660513"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136660513"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136660513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 175,
    "original_line": 193,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683939",
    "pull_request_review_id": 60263104,
    "id": 136683939,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY4MzkzOQ==",
    "diff_hunk": "@@ -148,9 +148,21 @@ enum\n     SER_GETHASH         = (1 << 2),\n };\n \n+// Convert the reference base type to X, without changing constness or reference type.",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 4,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "2d0edd1cfcadd5ccda25c9ea8b5ae7faae88b5f8",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-02T00:19:26Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683939",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683939"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683939"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683939/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 151,
    "side": "RIGHT",
    "in_reply_to_id": 136639150
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683943",
    "pull_request_review_id": 60263107,
    "id": 136683943,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY4Mzk0Mw==",
    "diff_hunk": "@@ -167,6 +167,28 @@ enum\n         SerializationOp(s, CSerActionUnserialize());                  \\\n     }\n \n+/**\n+ * Implement the Serialize and Unserialize methods by delegating to a single templated\n+ * static method that takes the to-be-(de)serialized object as a parameter. This approach\n+ * has the advantage that the constness of the object becomes a template parameter, and\n+ * thus allows a single implementation that sees the object as const for serializing\n+ * and non-const for deserializing, without casts.\n+ */\n+#define SERIALIZE_METHODS(obj)                                                      \\",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 11,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "d85bbf9affb8002a48e8319d94c1de2a2d6eb013",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done!",
    "created_at": "2017-09-02T00:19:33Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683943",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683943"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683943"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683943/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 177,
    "side": "RIGHT",
    "in_reply_to_id": 136638567
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683952",
    "pull_request_review_id": 60263117,
    "id": 136683952,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY4Mzk1Mg==",
    "diff_hunk": "@@ -898,16 +898,16 @@ void SerializeMany(Stream& s)\n }\n \n template<typename Stream, typename Arg>\n-void SerializeMany(Stream& s, Arg&& arg)\n+void SerializeMany(Stream& s, const Arg& arg)",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 23,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "a2d870857730dccb171be87313fe20a6baac3dc1",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-02T00:19:43Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683952",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683952"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683952"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683952/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 901,
    "side": "RIGHT",
    "in_reply_to_id": 136648225
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683956",
    "pull_request_review_id": 60263126,
    "id": 136683956,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY4Mzk1Ng==",
    "diff_hunk": "@@ -519,19 +518,23 @@ class LimitedString\n         if (size > Limit) {\n             throw std::ios_base::failure(\"String length limit exceeded\");\n         }\n-        string.resize(size);\n-        if (size != 0)\n-            s.read((char*)string.data(), size);\n+        m_string.resize(size);\n+        if (size != 0) {\n+            s.read((char*)m_string.data(), size);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 36,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "0b5fd4ad9c28d850f545eab5015e7b9062f51259",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-02T00:19:50Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683956",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683956"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683956"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683956/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 523,
    "side": "RIGHT",
    "in_reply_to_id": 136649911
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683982",
    "pull_request_review_id": 60263156,
    "id": 136683982,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY4Mzk4Mg==",
    "diff_hunk": "@@ -450,24 +449,29 @@ class CFlatData\n     }\n };\n \n+/** Serialization wrapper class for integers in VarInt format. */\n template<typename I>\n-class CVarInt\n+class VarIntWrapper\n {\n protected:\n-    I &n;\n+    I &m_n;\n public:\n-    explicit CVarInt(I& nIn) : n(nIn) { }\n+    explicit VarIntWrapper(I& n) : m_n(n) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteVarInt<Stream,I>(s, n);\n+    void Serialize(Stream &s) const\n+    {\n+        WriteVarInt(s, m_n);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadVarInt<Stream,I>(s);\n+    void Unserialize(Stream& s)\n+    {\n+        m_n = ReadVarInt<Stream,I>(s);\n     }\n };\n+//! Automatically construct a VarInt wrapper around the argument.\n+template<typename I> static inline VarIntWrapper<typename std::remove_reference<I>::type> VARINT(I&& i) { return VarIntWrapper<typename std::remove_reference<I>::type>(i); }",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 41,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "d013fb285b19a748bbf49e19b6882fa52975ea41",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The problem is that VARINT is called with temporaries as arguments, which is not true for the other ones. Either it's written as 4 cases, or using `std::remove_refence`.\r\n\r\nEDIT: Oh, you're right. An lvalue reference parameter binds to rvalue reference argument, so all good.",
    "created_at": "2017-09-02T00:20:36Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683982",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683982"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683982"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 435,
    "side": "RIGHT",
    "in_reply_to_id": 136644028
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690564",
    "pull_request_review_id": 60270049,
    "id": 136690564,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY5MDU2NA==",
    "diff_hunk": "@@ -450,24 +449,29 @@ class CFlatData\n     }\n };\n \n+/** Serialization wrapper class for integers in VarInt format. */\n template<typename I>\n-class CVarInt\n+class VarIntWrapper\n {\n protected:\n-    I &n;\n+    I &m_n;\n public:\n-    explicit CVarInt(I& nIn) : n(nIn) { }\n+    explicit VarIntWrapper(I& n) : m_n(n) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteVarInt<Stream,I>(s, n);\n+    void Serialize(Stream &s) const\n+    {\n+        WriteVarInt(s, m_n);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadVarInt<Stream,I>(s);\n+    void Unserialize(Stream& s)\n+    {\n+        m_n = ReadVarInt<Stream,I>(s);\n     }\n };\n+//! Automatically construct a VarInt wrapper around the argument.\n+template<typename I> static inline VarIntWrapper<typename std::remove_reference<I>::type> VARINT(I&& i) { return VarIntWrapper<typename std::remove_reference<I>::type>(i); }",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 41,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "d013fb285b19a748bbf49e19b6882fa52975ea41",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-02T06:38:06Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690564",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690564"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690564"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690564/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 435,
    "side": "RIGHT",
    "in_reply_to_id": 136644028
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690565",
    "pull_request_review_id": 60270051,
    "id": 136690565,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY5MDU2NQ==",
    "diff_hunk": "@@ -189,22 +170,6 @@ template<typename X> const X&& AsBaseType(const X&& x) { return std::move(x); }\n  */\n #define READWRITEAS(obj, typ) (::SerReadWriteMany(s, ser_action, AsBaseType<typ>(obj)))\n \n-/** \n- * Implement three methods for serializable objects. These are actually wrappers over\n- * \"SerializationOp\" template, which implements the body of each class' serialization\n- * code. Adding \"ADD_SERIALIZE_METHODS\" in the body of the class causes these wrappers to be\n- * added as members. \n- */\n-#define ADD_SERIALIZE_METHODS                                         \\",
    "path": "src/serialize.h",
    "position": 51,
    "original_position": 43,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "d04c25740539ab5d8a764fd8cbf713f55e571ec0",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-02T06:38:14Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690565",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690565"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690565"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 192,
    "original_line": 192,
    "side": "LEFT",
    "in_reply_to_id": 136538430
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690572",
    "pull_request_review_id": 60270058,
    "id": 136690572,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY5MDU3Mg==",
    "diff_hunk": "@@ -573,6 +573,64 @@ template<typename I> class BigEndianWrapper\n //! Automatically construct a BigEndianWrapper around the argument.\n template<typename I> static inline BigEndianWrapper<I> BigEndian(I& i) { return BigEndianWrapper<I>(i); }\n \n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * For const-correctness, the W parameter is a template itself.\n+ * It is instantiated as W<const V::value_type> when serializing, and as\n+ * W<V::value_type> when deserializing.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(obj) { READWRITE(VectorApply<VarIntWrapper>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, iteration, and resize method that behave like vectors.\n+ */\n+template<template <typename> class W, typename V> class VectorApplyWrapper\n+{\n+protected:\n+    typedef typename V::value_type value_type;\n+    V& m_vector;\n+public:\n+    explicit VectorApplyWrapper(V& vector) : m_vector(vector) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize(s, m_vector.size());\n+        for (const value_type& x : m_vector) {\n+            s << W<const value_type>(x);\n+        }\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        m_vector.clear();\n+        unsigned int nSize = ReadCompactSize(s);\n+        unsigned int nMid = 0;\n+        while (nMid < nSize) {\n+            nMid += 5000000 / sizeof(value_type);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 48,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "ba4260615daae26ddb0112d8b7b88eab43863660",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done. The code was also totally broken, so I've rewritten it.",
    "created_at": "2017-09-02T06:38:38Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690572",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690572"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690572"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690572/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 584,
    "side": "RIGHT",
    "in_reply_to_id": 136653725
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690575",
    "pull_request_review_id": 60270061,
    "id": 136690575,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY5MDU3NQ==",
    "diff_hunk": "@@ -470,23 +469,37 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &m_n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& n) : m_n(n)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max(), \"CompactSize only supports 64-bit integers and below\");\n+    }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s)\n+    {\n+        uint64_t n = ReadCompactSize<Stream>(s);\n+        if (n > std::numeric_limits<I>::max()) {\n+            throw std::ios_base::failure(\"CompactSize exceeds limit of type\");\n+        }\n+        m_n = n;\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadCompactSize<Stream>(s);\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize<Stream>(s, m_n);\n     }\n };\n+//! Automatically construct a CompactSize wrapper around the argument.\n+template<typename I> static inline CompactSizeWrapper<I> COMPACTSIZE(I& i) { return CompactSizeWrapper<I>(i); }",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 49,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "08da230f0f351c7a34539e20990ea1fa7b5a96df",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done (and for other wrappers).",
    "created_at": "2017-09-02T06:38:53Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690575",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690575"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690575"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690575/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 472,
    "side": "RIGHT",
    "in_reply_to_id": 136643231
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690581",
    "pull_request_review_id": 60270068,
    "id": 136690581,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY5MDU4MQ==",
    "diff_hunk": "@@ -573,6 +573,64 @@ template<typename I> class BigEndianWrapper\n //! Automatically construct a BigEndianWrapper around the argument.\n template<typename I> static inline BigEndianWrapper<I> BigEndian(I& i) { return BigEndianWrapper<I>(i); }\n \n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * For const-correctness, the W parameter is a template itself.\n+ * It is instantiated as W<const V::value_type> when serializing, and as\n+ * W<V::value_type> when deserializing.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(obj) { READWRITE(VectorApply<VarIntWrapper>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, iteration, and resize method that behave like vectors.\n+ */\n+template<template <typename> class W, typename V> class VectorApplyWrapper\n+{\n+protected:\n+    typedef typename V::value_type value_type;\n+    V& m_vector;\n+public:\n+    explicit VectorApplyWrapper(V& vector) : m_vector(vector) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize(s, m_vector.size());\n+        for (const value_type& x : m_vector) {\n+            s << W<const value_type>(x);\n+        }\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        m_vector.clear();\n+        unsigned int nSize = ReadCompactSize(s);\n+        unsigned int nMid = 0;\n+        while (nMid < nSize) {\n+            nMid += 5000000 / sizeof(value_type);\n+            if (nMid > nSize) {\n+                nMid = nSize;\n+            }\n+            m_vector.resize(nMid);\n+            for (value_type& x : m_vector) {\n+                s >> W<value_type>(x);",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 54,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "ba4260615daae26ddb0112d8b7b88eab43863660",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, this was bogus. Thanks for pointing that out; fixed by rewriting,",
    "created_at": "2017-09-02T06:39:14Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690581",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690581"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690581"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 590,
    "side": "RIGHT",
    "in_reply_to_id": 136654732
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690588",
    "pull_request_review_id": 60270075,
    "id": 136690588,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY5MDU4OA==",
    "diff_hunk": "@@ -406,48 +415,38 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing ranges of chars. */\n+template<typename C>\n+class CharArrayWrapper\n {\n protected:\n-    char* pbegin;\n-    char* pend;\n+    C* m_begin;\n+    size_t m_size;\n public:\n-    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }\n-    template <class T, class TAl>\n-    explicit CFlatData(std::vector<T,TAl> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    template <unsigned int N, typename T, typename S, typename D>\n-    explicit CFlatData(prevector<N, T, S, D> &v)\n+    CharArrayWrapper(C* begin, size_t size) : m_begin(begin), m_size(size)\n     {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n+        static_assert(sizeof(C) == 1, \"CharArrayWrapper only works for char types\");",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 64,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f6063a02801d19c2b41d8fbf0092cffd892c7f53",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not sure that wchar_t has a well-defined in-memory representation.",
    "created_at": "2017-09-02T06:39:37Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690588",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690588"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690588"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690588/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 423,
    "side": "RIGHT",
    "in_reply_to_id": 136644775
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690591",
    "pull_request_review_id": 60270077,
    "id": 136690591,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjY5MDU5MQ==",
    "diff_hunk": "@@ -12,58 +12,70 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n+template<typename T>\n+struct TransactionCompressWrapper {\n private:\n-    CTransactionRef& tx;\n+    T& tx;\n public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n+    explicit TransactionCompressWrapper(T& txIn) : tx(txIn) {}\n+    SERIALIZE_METHODS(obj) { READWRITE(obj.tx); }\n+};\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+template<typename I>\n+struct Uint48Wrapper {\n+private:\n+    I& m_int;\n+public:\n+    Uint48Wrapper(I& i) : m_int(i) {}\n+    template <typename Stream> void Serialize(Stream& s) const\n+    {\n+        uint32_t lsb = m_int & 0xffffffff;\n+        uint16_t msb = (m_int >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n+    template <typename Stream> void Unserialize(Stream& s)\n+    {\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        m_int = (uint64_t(msb) << 32) | uint64_t(lsb);\n     }\n };\n \n+template<typename T>",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 42,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "d64f7fb78da1d2f1fdc3e7046a28740e1276a235",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-02T06:39:50Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690591",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690591"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690591"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690591/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 136655347
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136707627",
    "pull_request_review_id": 60287367,
    "id": 136707627,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjcwNzYyNw==",
    "diff_hunk": "@@ -154,40 +156,18 @@ class CBlockHeaderAndShortTxIDs {\n \n     size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-\n-        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n-        READWRITE(COMPACTSIZE(shorttxids_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n-                for (; i < shorttxids.size(); i++) {\n-                    uint32_t lsb = 0; uint16_t msb = 0;\n-                    READWRITE(lsb);\n-                    READWRITE(msb);\n-                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-                }\n-            }\n-        } else {\n-            for (size_t i = 0; i < shorttxids.size(); i++) {\n-                uint32_t lsb = shorttxids[i] & 0xffffffff;\n-                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-                READWRITE(lsb);\n-                READWRITE(msb);\n-            }\n-        }\n-\n-        READWRITE(prefilledtxn);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << header << nonce << VectorApply<Uint48Wrapper>(shorttxids) << prefilledtxn;\n+    }\n \n-        if (ser_action.ForRead())\n-            FillShortTxIDSelector();\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s)\n+    {\n+        static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+        s >> header >> nonce >> VectorApply<Uint48Wrapper>(shorttxids) >> prefilledtxn;\n+        FillShortTxIDSelector();",
    "path": "src/blockencodings.h",
    "position": 224,
    "original_position": 214,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "d64f7fb78da1d2f1fdc3e7046a28740e1276a235",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That's a neat trick. It seems a bit ugly to need to fake returning a mutable object nullptr. I have an alternative, but I'm not sure it's any better.:\r\n\r\n```c++\r\ntemplate <typename T, typename F>\r\nvoid IfUnserializer(T& obj, CSerActionUnserialize ser_action, const F& fn) { fn(obj); }\r\ntemplate <typename T, typename F>\r\nvoid IfUnserialize(const T& obj, CSerActionSerialize ser_action, const F& fn) {}\r\n#define IF_UNSERIALIZE(typ, obj, code) (::IfUnserialize<typ>(obj, ser_action, [&](typ& obj)code))\r\n```\r\n\r\nWhich you'd then invoke using\r\n\r\n```c++\r\n     SERIALIZE_METHODS(SomeType, obj)\r\n     {\r\n          READWRITE(obj.member);\r\n          IF_UNSERIALIZE(SomeType, obj, {obj.FillShortTxid();});\r\n     }\r\n```\r\n",
    "created_at": "2017-09-03T03:29:17Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136707627",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136707627"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136707627"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136707627/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 175,
    "original_line": 193,
    "side": "RIGHT",
    "in_reply_to_id": 136660513
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137061927",
    "pull_request_review_id": 60681544,
    "id": 137061927,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzA2MTkyNw==",
    "diff_hunk": "@@ -406,48 +415,38 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing ranges of chars. */\n+template<typename C>\n+class CharArrayWrapper\n {\n protected:\n-    char* pbegin;\n-    char* pend;\n+    C* m_begin;\n+    size_t m_size;\n public:\n-    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }\n-    template <class T, class TAl>\n-    explicit CFlatData(std::vector<T,TAl> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    template <unsigned int N, typename T, typename S, typename D>\n-    explicit CFlatData(prevector<N, T, S, D> &v)\n+    CharArrayWrapper(C* begin, size_t size) : m_begin(begin), m_size(size)\n     {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n+        static_assert(sizeof(C) == 1, \"CharArrayWrapper only works for char types\");",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 64,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f6063a02801d19c2b41d8fbf0092cffd892c7f53",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> I'm not sure that wchar_t has a well-defined in-memory representation.\r\n\r\nSince this class is no longer casting any pointers, I don't think that's a problem. Existing c++ type checking will make sure pointers passed to stream read & write methods are compatible, so I don't think there is a reason for this class to be interjecting and adding extra type requirements.",
    "created_at": "2017-09-05T17:29:22Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137061927",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137061927"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137061927"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137061927/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 423,
    "side": "RIGHT",
    "in_reply_to_id": 136644775
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137093656",
    "pull_request_review_id": 60681544,
    "id": 137093656,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzA5MzY1Ng==",
    "diff_hunk": "@@ -577,6 +577,66 @@ template<typename I> class BigEndianWrapper\n template<typename I> static inline BigEndianWrapper<const I> BigEndian(const I& i) { return BigEndianWrapper<const I>(i); }\n template<typename I> static inline BigEndianWrapper<I> BigEndian(I& i) { return BigEndianWrapper<I>(i); }\n \n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * For const-correctness, the W parameter is a template itself.\n+ * It is instantiated as W<const V::value_type> when serializing, and as\n+ * W<V::value_type> when deserializing.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(VectorApply<VarIntWrapper>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, iteration, and resize method that behave like vectors.\n+ */\n+template<template <typename> class W, typename V> class VectorApplyWrapper\n+{\n+protected:\n+    typedef typename V::value_type value_type;\n+    V& m_vector;\n+public:\n+    explicit VectorApplyWrapper(V& vector) : m_vector(vector) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize(s, m_vector.size());\n+        for (const value_type& x : m_vector) {\n+            s << W<const value_type>(x);\n+        }\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        m_vector.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        size_t deserialized = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.\n+            allocated = std::min(size, allocated + 5000000 / sizeof(value_type));",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 52,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "954826ce26573edf67701055d21ef4b5714d4504",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add custom vector-element serialization wrapper\"\r\n\r\nMaybe declare 5MiB as a constant next to to MAX_SIZE, since it serves a similar purpose.",
    "created_at": "2017-09-05T19:40:02Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137093656",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137093656"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137093656"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137093656/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 628,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137102968",
    "pull_request_review_id": 60681544,
    "id": 137102968,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzEwMjk2OA==",
    "diff_hunk": "@@ -12,17 +12,35 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n+template<typename T>\n+struct TransactionCompressWrapper {\n private:\n-    CTransactionRef& tx;\n+    T& tx;\n public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n+    explicit TransactionCompressWrapper(T& txIn) : tx(txIn) {}\n+    SERIALIZE_METHODS(TransactionCompressWrapper, obj) { READWRITE(obj.tx); }\n+};\n+template<typename T>\n+static inline TransactionCompressWrapper<T> TransactionCompressor(T& tx) { return TransactionCompressWrapper<T>(tx); }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+template<typename I>\n+struct Uint48Wrapper {\n+private:\n+    I& m_int;\n+public:\n+    Uint48Wrapper(I& i) : m_int(i) {}\n+    template <typename Stream> void Serialize(Stream& s) const\n+    {\n+        uint32_t lsb = m_int & 0xffffffff;\n+        uint16_t msb = (m_int >> 32) & 0xffff;\n+        s << lsb << msb;",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 33,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "97250236a0b43822cf0d5b17f3889b83ea7019c3",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert blockencodings to new serialization\"\r\n\r\nSimilar to previous suggestions, could throw here if m_int is >= 2**48 or less than 0 (or static assert is_unsigned).",
    "created_at": "2017-09-05T20:19:14Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137102968",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137102968"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137102968"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137102968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 39,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137106687",
    "pull_request_review_id": 60681544,
    "id": 137106687,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzEwNjY4Nw==",
    "diff_hunk": "@@ -12,17 +12,35 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n+template<typename T>\n+struct TransactionCompressWrapper {\n private:\n-    CTransactionRef& tx;\n+    T& tx;\n public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n+    explicit TransactionCompressWrapper(T& txIn) : tx(txIn) {}\n+    SERIALIZE_METHODS(TransactionCompressWrapper, obj) { READWRITE(obj.tx); }\n+};\n+template<typename T>\n+static inline TransactionCompressWrapper<T> TransactionCompressor(T& tx) { return TransactionCompressWrapper<T>(tx); }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+template<typename I>\n+struct Uint48Wrapper {\n+private:\n+    I& m_int;\n+public:\n+    Uint48Wrapper(I& i) : m_int(i) {}\n+    template <typename Stream> void Serialize(Stream& s) const\n+    {\n+        uint32_t lsb = m_int & 0xffffffff;\n+        uint16_t msb = (m_int >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n+    template <typename Stream> void Unserialize(Stream& s)\n+    {\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        m_int = (uint64_t(msb) << 32) | uint64_t(lsb);",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 40,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "97250236a0b43822cf0d5b17f3889b83ea7019c3",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert blockencodings to new serialization\"\r\n\r\nCould throw if deserialized value is greater than numeric_limits\\<I>::max(), or static_assert that I max is big enough to hold any 48 bit value.\r\n",
    "created_at": "2017-09-05T20:35:22Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137106687",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137106687"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137106687"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137106687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 46,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137111254",
    "pull_request_review_id": 60681544,
    "id": 137111254,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzExMTI1NA==",
    "diff_hunk": "@@ -154,40 +156,18 @@ class CBlockHeaderAndShortTxIDs {\n \n     size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-\n-        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n-        READWRITE(COMPACTSIZE(shorttxids_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n-                for (; i < shorttxids.size(); i++) {\n-                    uint32_t lsb = 0; uint16_t msb = 0;\n-                    READWRITE(lsb);\n-                    READWRITE(msb);\n-                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-                }\n-            }\n-        } else {\n-            for (size_t i = 0; i < shorttxids.size(); i++) {\n-                uint32_t lsb = shorttxids[i] & 0xffffffff;\n-                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-                READWRITE(lsb);\n-                READWRITE(msb);\n-            }\n-        }\n-\n-        READWRITE(prefilledtxn);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << header << nonce << VectorApply<Uint48Wrapper>(shorttxids) << prefilledtxn;\n+    }\n \n-        if (ser_action.ForRead())\n-            FillShortTxIDSelector();\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s)\n+    {\n+        static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+        s >> header >> nonce >> VectorApply<Uint48Wrapper>(shorttxids) >> prefilledtxn;\n+        FillShortTxIDSelector();",
    "path": "src/blockencodings.h",
    "position": 224,
    "original_position": 214,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "d64f7fb78da1d2f1fdc3e7046a28740e1276a235",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thread https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136660513\r\n\r\nThat looks good to me. I was actually going to suggest this same approach before I noticed there was a ser_action.ForRead method. ser_action could also have a method returning a reference instead of a pointer. I think any approach that would avoid duplicating serialization & deserialization would be good, though.\r\n\r\nFor IF_UNSERIALIZE, maybe consider getting of all the obj macro arguments:\r\n\r\n```c++\r\n     SERIALIZE_METHODS(SomeType)\r\n     {\r\n          READWRITE(obj.member);\r\n          IF_UNSERIALIZE({obj.FillShortTxid();});\r\n     }\r\n```\r\n\r\nI think the obj arguments maybe help make serialize methods resemble normal methods, but don't actually add real utility.",
    "created_at": "2017-09-05T20:54:31Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137111254",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137111254"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137111254"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137111254/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 175,
    "original_line": 193,
    "side": "RIGHT",
    "in_reply_to_id": 136660513
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137125177",
    "pull_request_review_id": 60681544,
    "id": 137125177,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzEyNTE3Nw==",
    "diff_hunk": "@@ -32,38 +50,31 @@ class BlockTransactionsRequest {\n     uint256 blockhash;\n     std::vector<uint16_t> indexes;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(blockhash);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << blockhash;\n         uint64_t indexes_size = (uint64_t)indexes.size();\n-        READWRITE(COMPACTSIZE(indexes_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (indexes.size() < indexes_size) {\n-                indexes.resize(std::min((uint64_t)(1000 + indexes.size()), indexes_size));\n-                for (; i < indexes.size(); i++) {\n-                    uint64_t index = 0;\n-                    READWRITE(COMPACTSIZE(index));\n-                    if (index > std::numeric_limits<uint16_t>::max())\n-                        throw std::ios_base::failure(\"index overflowed 16 bits\");\n-                    indexes[i] = index;\n-                }\n-            }\n-\n-            uint16_t offset = 0;\n-            for (size_t j = 0; j < indexes.size(); j++) {\n-                if (uint64_t(indexes[j]) + uint64_t(offset) > std::numeric_limits<uint16_t>::max())\n-                    throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n-                indexes[j] = indexes[j] + offset;\n-                offset = indexes[j] + 1;\n-            }\n-        } else {\n-            for (size_t i = 0; i < indexes.size(); i++) {\n-                uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n-                READWRITE(COMPACTSIZE(index));\n-            }\n+        s << COMPACTSIZE(indexes_size);\n+        for (size_t i = 0; i < indexes.size(); i++) {\n+            const uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 86,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "97250236a0b43822cf0d5b17f3889b83ea7019c3",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert blockencodings to new serialization\"\r\n\r\nWould be good to assert or throw if indexes[i] <= indices[i-1].",
    "created_at": "2017-09-05T21:55:25Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137125177",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137125177"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137125177"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137125177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 106,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137139951",
    "pull_request_review_id": 60681544,
    "id": 137139951,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzEzOTk1MQ==",
    "diff_hunk": "@@ -18,81 +18,49 @@\n  *  zero. This is be compatible with older versions which expect to see\n  *  the transaction version there.\n  */\n-class TxInUndoSerializer\n+template<typename C>\n+class TxInUndoWrapper\n {\n-    const Coin* txout;\n+    C& txout;\n \n public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n-        if (txout->nHeight > 0) {\n+        ::Serialize(s, VARINT(txout.nHeight * 2 + (txout.fCoinBase ? 1 : 0)));\n+        if (txout.nHeight > 0) {\n             // Required to maintain compatibility with older undo format.\n             ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n+        ::Serialize(s, TxOutCompress(txout.out));\n     }\n \n-    explicit TxInUndoSerializer(const Coin* coin) : txout(coin) {}\n-};\n-\n-class TxInUndoDeserializer\n-{\n-    Coin* txout;\n-\n-public:\n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        txout->nHeight = nCode / 2;\n-        txout->fCoinBase = nCode & 1;\n-        if (txout->nHeight > 0) {\n+        txout.nHeight = nCode / 2;\n+        txout.fCoinBase = nCode & 1;\n+        if (txout.nHeight > 0) {\n             // Old versions stored the version number for the last spend of\n             // a transaction's outputs. Non-final spends were indicated with\n             // height = 0.\n             int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n+        ::Unserialize(s, TxOutCompress(txout.out));\n     }\n \n-    explicit TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n+    explicit TxInUndoWrapper(C& coin) : txout(coin) {}\n };\n \n-static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), SER_NETWORK, PROTOCOL_VERSION);\n-static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_INPUT_WEIGHT;\n-\n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n     std::vector<Coin> vprevout;\n \n-    template <typename Stream>\n-    void Serialize(Stream& s) const {\n-        // TODO: avoid reimplementing vector serializer\n-        uint64_t count = vprevout.size();\n-        ::Serialize(s, COMPACTSIZE(REF(count)));\n-        for (const auto& prevout : vprevout) {\n-            ::Serialize(s, REF(TxInUndoSerializer(&prevout)));\n-        }\n-    }\n-\n-    template <typename Stream>\n-    void Unserialize(Stream& s) {\n-        // TODO: avoid reimplementing vector deserializer\n-        uint64_t count = 0;\n-        ::Unserialize(s, COMPACTSIZE(count));\n-        if (count > MAX_INPUTS_PER_BLOCK) {",
    "path": "src/undo.h",
    "position": 89,
    "original_position": 82,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "62f7eb2925532ef844374e593d43002253eb5bab",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe mention in commit message if behavior is changing here. I guess the limit is higher now.",
    "created_at": "2017-09-05T23:28:24Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137139951",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137139951"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137139951"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137139951/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 90,
    "original_line": 90,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137140260",
    "pull_request_review_id": 60681544,
    "id": 137140260,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzE0MDI2MA==",
    "diff_hunk": "@@ -24,19 +24,19 @@ class RecentRequestEntry\n     QDateTime date;\n     SendCoinsRecipient recipient;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         unsigned int nDate = date.toTime_t();\n+        s << this->nVersion << id << nDate << recipient;\n+    }\n \n-        READWRITE(this->nVersion);\n-        READWRITE(id);\n-        READWRITE(nDate);\n-        READWRITE(recipient);\n-\n-        if (ser_action.ForRead())\n-            date = QDateTime::fromTime_t(nDate);\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        unsigned int nDate;\n+        s >> this->nVersion >> id >> nDate >> recipient;\n+        date = QDateTime::fromTime_t(nDate);",
    "path": "src/qt/recentrequeststablemodel.h",
    "position": null,
    "original_position": 27,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "30d7e934d6cef080744c39f93958d51e2a63af2b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert Qt to new serialization\"\r\n\r\nI guess this is another place that could use IF_UNSERIALIZE if you decide to go this route.\r\n",
    "created_at": "2017-09-05T23:30:46Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137140260",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137140260"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137140260"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137140260/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 39,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137141562",
    "pull_request_review_id": 60681544,
    "id": 137141562,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzE0MTU2Mg==",
    "diff_hunk": "@@ -62,35 +62,32 @@ class SendCoinsRecipient\n     static const int CURRENT_VERSION = 1;\n     int nVersion;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         std::string sAddress = address.toStdString();\n         std::string sLabel = label.toStdString();\n         std::string sMessage = message.toStdString();\n         std::string sPaymentRequest;\n-        if (!ser_action.ForRead() && paymentRequest.IsInitialized())\n+        if (paymentRequest.IsInitialized()) {\n             paymentRequest.SerializeToString(&sPaymentRequest);\n+        }\n         std::string sAuthenticatedMerchant = authenticatedMerchant.toStdString();\n+        s << this->nVersion << sAddress << sLabel << amount << sMessage << sPaymentRequest << sAuthenticatedMerchant;\n+    }\n \n-        READWRITE(this->nVersion);\n-        READWRITE(sAddress);\n-        READWRITE(sLabel);\n-        READWRITE(amount);\n-        READWRITE(sMessage);\n-        READWRITE(sPaymentRequest);\n-        READWRITE(sAuthenticatedMerchant);\n-\n-        if (ser_action.ForRead())\n-        {\n-            address = QString::fromStdString(sAddress);\n-            label = QString::fromStdString(sLabel);\n-            message = QString::fromStdString(sMessage);\n-            if (!sPaymentRequest.empty())\n-                paymentRequest.parse(QByteArray::fromRawData(sPaymentRequest.data(), sPaymentRequest.size()));\n-            authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        std::string sAddress, sLabel, sMessage, sPaymentRequest, sAuthenticatedMerchant;\n+        s >> this->nVersion >> sAddress >> sLabel >> amount >> sMessage >> sPaymentRequest >> sAuthenticatedMerchant;\n+        address = QString::fromStdString(sAddress);\n+        label = QString::fromStdString(sLabel);\n+        message = QString::fromStdString(sMessage);\n+        if (!sPaymentRequest.empty()) {\n+            paymentRequest.parse(QByteArray::fromRawData(sPaymentRequest.data(), sPaymentRequest.size()));\n         }\n+        authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);",
    "path": "src/qt/walletmodel.h",
    "position": null,
    "original_position": 50,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "30d7e934d6cef080744c39f93958d51e2a63af2b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert Qt to new serialization\"\r\n\r\nIt seems like if there were serialization wrappers from QString and proto types, the serialize and deserialize methods could be combined again.",
    "created_at": "2017-09-05T23:41:57Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137141562",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137141562"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137141562"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137141562/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 90,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137143490",
    "pull_request_review_id": 60681544,
    "id": 137143490,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzE0MzQ5MA==",
    "diff_hunk": "@@ -111,27 +111,30 @@ class CKeyPool\n     CKeyPool();\n     CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         int nVersion = s.GetVersion();\n-        if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(nTime);\n-        READWRITE(vchPubKey);\n-        if (ser_action.ForRead()) {\n-            try {\n-                READWRITE(fInternal);\n-            }\n-            catch (std::ios_base::failure&) {\n-                /* flag as external address if we can't read the internal boolean\n-                   (this will be the case for any wallet before the HD chain split version) */\n-                fInternal = false;\n-            }\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            s << nVersion;\n         }\n-        else {\n-            READWRITE(fInternal);\n+        s << nTime << vchPubKey << fInternal;\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        int nVersion;\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            s >> nVersion;\n+        }\n+        s >> nTime >> vchPubKey;\n+        try {\n+            s >> fInternal;\n+        } catch (std::ios_base::failure&) {",
    "path": "src/wallet/wallet.h",
    "position": null,
    "original_position": 43,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "651bb85d380babb5904f802103216a22f1f9d402",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Convert wallet/walletdb/crypter to new serialization\r\n\r\nMaybe another place to use IF_UNSERIALIZE. Or maybe there could be a wrapper that ignores ios_base errors on deserialization.\r\n",
    "created_at": "2017-09-05T23:58:14Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137143490",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137143490"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137143490"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137143490/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 251,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137143998",
    "pull_request_review_id": 60681544,
    "id": 137143998,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzE0Mzk5OA==",
    "diff_hunk": "@@ -381,42 +379,36 @@ class CWalletTx : public CMerkleTx\n         nOrderPos = -1;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead())\n-            Init(nullptr);\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         char fSpent = false;\n+        mapValue_t mapValueCopy = mapValue;\n \n-        if (!ser_action.ForRead())\n-        {\n-            mapValue[\"fromaccount\"] = strFromAccount;\n-\n-            WriteOrderPos(nOrderPos, mapValue);\n-\n-            if (nTimeSmart)\n-                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+        mapValueCopy[\"fromaccount\"] = strFromAccount;\n+        WriteOrderPos(nOrderPos, mapValueCopy);\n+        if (nTimeSmart) {\n+            mapValueCopy[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        READWRITE(*(CMerkleTx*)this);\n+        s << AsBaseType<CMerkleTx>(*this);\n         std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n-        READWRITE(vUnused);\n-        READWRITE(mapValue);\n-        READWRITE(vOrderForm);\n-        READWRITE(fTimeReceivedIsTxTime);\n-        READWRITE(nTimeReceived);\n-        READWRITE(fFromMe);\n-        READWRITE(fSpent);\n-\n-        if (ser_action.ForRead())\n-        {\n-            strFromAccount = mapValue[\"fromaccount\"];\n+        s << vUnused << mapValueCopy << vOrderForm << fTimeReceivedIsTxTime << nTimeReceived << fFromMe << fSpent;\n+    }\n \n-            ReadOrderPos(nOrderPos, mapValue);\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        Init(nullptr);\n+        char fSpent;\n \n-            nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n-        }\n+        s >> AsBaseType<CMerkleTx>(*this);\n+        std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n+        s >> vUnused >> mapValue >> vOrderForm >> fTimeReceivedIsTxTime >> nTimeReceived >> fFromMe >> fSpent;\n+\n+        strFromAccount = mapValue[\"fromaccount\"];",
    "path": "src/wallet/wallet.h",
    "position": null,
    "original_position": 129,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "651bb85d380babb5904f802103216a22f1f9d402",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could use std::move here.",
    "created_at": "2017-09-06T00:02:43Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137143998",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137143998"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137143998"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137143998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 409,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137353871",
    "pull_request_review_id": 61009641,
    "id": 137353871,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzM1Mzg3MQ==",
    "diff_hunk": "@@ -154,40 +156,18 @@ class CBlockHeaderAndShortTxIDs {\n \n     size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-\n-        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n-        READWRITE(COMPACTSIZE(shorttxids_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n-                for (; i < shorttxids.size(); i++) {\n-                    uint32_t lsb = 0; uint16_t msb = 0;\n-                    READWRITE(lsb);\n-                    READWRITE(msb);\n-                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-                }\n-            }\n-        } else {\n-            for (size_t i = 0; i < shorttxids.size(); i++) {\n-                uint32_t lsb = shorttxids[i] & 0xffffffff;\n-                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-                READWRITE(lsb);\n-                READWRITE(msb);\n-            }\n-        }\n-\n-        READWRITE(prefilledtxn);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << header << nonce << VectorApply<Uint48Wrapper>(shorttxids) << prefilledtxn;\n+    }\n \n-        if (ser_action.ForRead())\n-            FillShortTxIDSelector();\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s)\n+    {\n+        static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+        s >> header >> nonce >> VectorApply<Uint48Wrapper>(shorttxids) >> prefilledtxn;\n+        FillShortTxIDSelector();",
    "path": "src/blockencodings.h",
    "position": 224,
    "original_position": 214,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "d64f7fb78da1d2f1fdc3e7046a28740e1276a235",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@ryanofsky I don't see how to get rid of passing in the type to IF_UNSERIALIZE.",
    "created_at": "2017-09-06T18:34:39Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137353871",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137353871"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137353871"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137353871/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 175,
    "original_line": 193,
    "side": "RIGHT",
    "in_reply_to_id": 136660513
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354186",
    "pull_request_review_id": 61010033,
    "id": 137354186,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzM1NDE4Ng==",
    "diff_hunk": "@@ -406,48 +415,38 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing ranges of chars. */\n+template<typename C>\n+class CharArrayWrapper\n {\n protected:\n-    char* pbegin;\n-    char* pend;\n+    C* m_begin;\n+    size_t m_size;\n public:\n-    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }\n-    template <class T, class TAl>\n-    explicit CFlatData(std::vector<T,TAl> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    template <unsigned int N, typename T, typename S, typename D>\n-    explicit CFlatData(prevector<N, T, S, D> &v)\n+    CharArrayWrapper(C* begin, size_t size) : m_begin(begin), m_size(size)\n     {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n+        static_assert(sizeof(C) == 1, \"CharArrayWrapper only works for char types\");",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 64,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f6063a02801d19c2b41d8fbf0092cffd892c7f53",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think I'm talking about something else.\r\n\r\nIf you serialize a 16-bit wchar_t on a big endian system using this class, the characters will be serialized using 2 big endian bytes. If you then deserialize it on a little endian system, you won't get the same wchar_t values back. ",
    "created_at": "2017-09-06T18:36:04Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354186",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354186"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354186"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354186/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 423,
    "side": "RIGHT",
    "in_reply_to_id": 136644775
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354251",
    "pull_request_review_id": 61010115,
    "id": 137354251,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzM1NDI1MQ==",
    "diff_hunk": "@@ -577,6 +577,66 @@ template<typename I> class BigEndianWrapper\n template<typename I> static inline BigEndianWrapper<const I> BigEndian(const I& i) { return BigEndianWrapper<const I>(i); }\n template<typename I> static inline BigEndianWrapper<I> BigEndian(I& i) { return BigEndianWrapper<I>(i); }\n \n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * For const-correctness, the W parameter is a template itself.\n+ * It is instantiated as W<const V::value_type> when serializing, and as\n+ * W<V::value_type> when deserializing.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(VectorApply<VarIntWrapper>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, iteration, and resize method that behave like vectors.\n+ */\n+template<template <typename> class W, typename V> class VectorApplyWrapper\n+{\n+protected:\n+    typedef typename V::value_type value_type;\n+    V& m_vector;\n+public:\n+    explicit VectorApplyWrapper(V& vector) : m_vector(vector) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize(s, m_vector.size());\n+        for (const value_type& x : m_vector) {\n+            s << W<const value_type>(x);\n+        }\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        m_vector.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        size_t deserialized = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.\n+            allocated = std::min(size, allocated + 5000000 / sizeof(value_type));",
    "path": "src/serialize.h",
    "position": null,
    "original_position": 52,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "954826ce26573edf67701055d21ef4b5714d4504",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-06T18:36:21Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354251",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354251"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354251"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354251/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 628,
    "side": "RIGHT",
    "in_reply_to_id": 137093656
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354337",
    "pull_request_review_id": 61010222,
    "id": 137354337,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzM1NDMzNw==",
    "diff_hunk": "@@ -12,17 +12,35 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n+template<typename T>\n+struct TransactionCompressWrapper {\n private:\n-    CTransactionRef& tx;\n+    T& tx;\n public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n+    explicit TransactionCompressWrapper(T& txIn) : tx(txIn) {}\n+    SERIALIZE_METHODS(TransactionCompressWrapper, obj) { READWRITE(obj.tx); }\n+};\n+template<typename T>\n+static inline TransactionCompressWrapper<T> TransactionCompressor(T& tx) { return TransactionCompressWrapper<T>(tx); }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+template<typename I>\n+struct Uint48Wrapper {\n+private:\n+    I& m_int;\n+public:\n+    Uint48Wrapper(I& i) : m_int(i) {}\n+    template <typename Stream> void Serialize(Stream& s) const\n+    {\n+        uint32_t lsb = m_int & 0xffffffff;\n+        uint16_t msb = (m_int >> 32) & 0xffff;\n+        s << lsb << msb;",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 33,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "97250236a0b43822cf0d5b17f3889b83ea7019c3",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added static assert; I'd like to avoid runtime impact.",
    "created_at": "2017-09-06T18:36:42Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354337",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354337"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354337"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354337/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 39,
    "side": "RIGHT",
    "in_reply_to_id": 137102968
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354381",
    "pull_request_review_id": 61010271,
    "id": 137354381,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzM1NDM4MQ==",
    "diff_hunk": "@@ -12,17 +12,35 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n+template<typename T>\n+struct TransactionCompressWrapper {\n private:\n-    CTransactionRef& tx;\n+    T& tx;\n public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n+    explicit TransactionCompressWrapper(T& txIn) : tx(txIn) {}\n+    SERIALIZE_METHODS(TransactionCompressWrapper, obj) { READWRITE(obj.tx); }\n+};\n+template<typename T>\n+static inline TransactionCompressWrapper<T> TransactionCompressor(T& tx) { return TransactionCompressWrapper<T>(tx); }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+template<typename I>\n+struct Uint48Wrapper {\n+private:\n+    I& m_int;\n+public:\n+    Uint48Wrapper(I& i) : m_int(i) {}\n+    template <typename Stream> void Serialize(Stream& s) const\n+    {\n+        uint32_t lsb = m_int & 0xffffffff;\n+        uint16_t msb = (m_int >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n+    template <typename Stream> void Unserialize(Stream& s)\n+    {\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        m_int = (uint64_t(msb) << 32) | uint64_t(lsb);",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 40,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "97250236a0b43822cf0d5b17f3889b83ea7019c3",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added static assert.",
    "created_at": "2017-09-06T18:36:52Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354381",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354381"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354381"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 46,
    "side": "RIGHT",
    "in_reply_to_id": 137106687
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354421",
    "pull_request_review_id": 61010324,
    "id": 137354421,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzM1NDQyMQ==",
    "diff_hunk": "@@ -32,38 +50,31 @@ class BlockTransactionsRequest {\n     uint256 blockhash;\n     std::vector<uint16_t> indexes;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(blockhash);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << blockhash;\n         uint64_t indexes_size = (uint64_t)indexes.size();\n-        READWRITE(COMPACTSIZE(indexes_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (indexes.size() < indexes_size) {\n-                indexes.resize(std::min((uint64_t)(1000 + indexes.size()), indexes_size));\n-                for (; i < indexes.size(); i++) {\n-                    uint64_t index = 0;\n-                    READWRITE(COMPACTSIZE(index));\n-                    if (index > std::numeric_limits<uint16_t>::max())\n-                        throw std::ios_base::failure(\"index overflowed 16 bits\");\n-                    indexes[i] = index;\n-                }\n-            }\n-\n-            uint16_t offset = 0;\n-            for (size_t j = 0; j < indexes.size(); j++) {\n-                if (uint64_t(indexes[j]) + uint64_t(offset) > std::numeric_limits<uint16_t>::max())\n-                    throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n-                indexes[j] = indexes[j] + offset;\n-                offset = indexes[j] + 1;\n-            }\n-        } else {\n-            for (size_t i = 0; i < indexes.size(); i++) {\n-                uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n-                READWRITE(COMPACTSIZE(index));\n-            }\n+        s << COMPACTSIZE(indexes_size);\n+        for (size_t i = 0; i < indexes.size(); i++) {\n+            const uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 86,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "97250236a0b43822cf0d5b17f3889b83ea7019c3",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'd rather avoid runtime overhead.",
    "created_at": "2017-09-06T18:37:03Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354421",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354421"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354421"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354421/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 106,
    "side": "RIGHT",
    "in_reply_to_id": 137125177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137366161",
    "pull_request_review_id": 61023743,
    "id": 137366161,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzM2NjE2MQ==",
    "diff_hunk": "@@ -32,38 +50,31 @@ class BlockTransactionsRequest {\n     uint256 blockhash;\n     std::vector<uint16_t> indexes;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(blockhash);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << blockhash;\n         uint64_t indexes_size = (uint64_t)indexes.size();\n-        READWRITE(COMPACTSIZE(indexes_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (indexes.size() < indexes_size) {\n-                indexes.resize(std::min((uint64_t)(1000 + indexes.size()), indexes_size));\n-                for (; i < indexes.size(); i++) {\n-                    uint64_t index = 0;\n-                    READWRITE(COMPACTSIZE(index));\n-                    if (index > std::numeric_limits<uint16_t>::max())\n-                        throw std::ios_base::failure(\"index overflowed 16 bits\");\n-                    indexes[i] = index;\n-                }\n-            }\n-\n-            uint16_t offset = 0;\n-            for (size_t j = 0; j < indexes.size(); j++) {\n-                if (uint64_t(indexes[j]) + uint64_t(offset) > std::numeric_limits<uint16_t>::max())\n-                    throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n-                indexes[j] = indexes[j] + offset;\n-                offset = indexes[j] + 1;\n-            }\n-        } else {\n-            for (size_t i = 0; i < indexes.size(); i++) {\n-                uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n-                READWRITE(COMPACTSIZE(index));\n-            }\n+        s << COMPACTSIZE(indexes_size);\n+        for (size_t i = 0; i < indexes.size(); i++) {\n+            const uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));",
    "path": "src/blockencodings.h",
    "position": null,
    "original_position": 86,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "97250236a0b43822cf0d5b17f3889b83ea7019c3",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In that case, could add a comment like \"this code will produce an invalid serialization if indices are not increasing.\"",
    "created_at": "2017-09-06T19:24:44Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137366161",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137366161"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137366161"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137366161/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 106,
    "side": "RIGHT",
    "in_reply_to_id": 137125177
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137367021",
    "pull_request_review_id": 61023743,
    "id": 137367021,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzM2NzAyMQ==",
    "diff_hunk": "@@ -154,40 +156,18 @@ class CBlockHeaderAndShortTxIDs {\n \n     size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-\n-        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n-        READWRITE(COMPACTSIZE(shorttxids_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n-                for (; i < shorttxids.size(); i++) {\n-                    uint32_t lsb = 0; uint16_t msb = 0;\n-                    READWRITE(lsb);\n-                    READWRITE(msb);\n-                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-                }\n-            }\n-        } else {\n-            for (size_t i = 0; i < shorttxids.size(); i++) {\n-                uint32_t lsb = shorttxids[i] & 0xffffffff;\n-                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-                READWRITE(lsb);\n-                READWRITE(msb);\n-            }\n-        }\n-\n-        READWRITE(prefilledtxn);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << header << nonce << VectorApply<Uint48Wrapper>(shorttxids) << prefilledtxn;\n+    }\n \n-        if (ser_action.ForRead())\n-            FillShortTxIDSelector();\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s)\n+    {\n+        static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+        s >> header >> nonce >> VectorApply<Uint48Wrapper>(shorttxids) >> prefilledtxn;\n+        FillShortTxIDSelector();",
    "path": "src/blockencodings.h",
    "position": 224,
    "original_position": 214,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "d64f7fb78da1d2f1fdc3e7046a28740e1276a235",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> @ryanofsky I don't see how to get rid of passing in the type to IF_UNSERIALIZE.\r\n\r\nYou could pass it as a template parameter to CSerActionSerialize / CSerActionUnserialize and access it through ser_action.",
    "created_at": "2017-09-06T19:28:46Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137367021",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137367021"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137367021"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137367021/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 175,
    "original_line": 193,
    "side": "RIGHT",
    "in_reply_to_id": 136660513
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137454932",
    "pull_request_review_id": 61122835,
    "id": 137454932,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzQ1NDkzMg==",
    "diff_hunk": "@@ -18,81 +18,49 @@\n  *  zero. This is be compatible with older versions which expect to see\n  *  the transaction version there.\n  */\n-class TxInUndoSerializer\n+template<typename C>\n+class TxInUndoWrapper\n {\n-    const Coin* txout;\n+    C& txout;\n \n public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n-        if (txout->nHeight > 0) {\n+        ::Serialize(s, VARINT(txout.nHeight * 2 + (txout.fCoinBase ? 1 : 0)));\n+        if (txout.nHeight > 0) {\n             // Required to maintain compatibility with older undo format.\n             ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n+        ::Serialize(s, TxOutCompress(txout.out));\n     }\n \n-    explicit TxInUndoSerializer(const Coin* coin) : txout(coin) {}\n-};\n-\n-class TxInUndoDeserializer\n-{\n-    Coin* txout;\n-\n-public:\n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        txout->nHeight = nCode / 2;\n-        txout->fCoinBase = nCode & 1;\n-        if (txout->nHeight > 0) {\n+        txout.nHeight = nCode / 2;\n+        txout.fCoinBase = nCode & 1;\n+        if (txout.nHeight > 0) {\n             // Old versions stored the version number for the last spend of\n             // a transaction's outputs. Non-final spends were indicated with\n             // height = 0.\n             int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n+        ::Unserialize(s, TxOutCompress(txout.out));\n     }\n \n-    explicit TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n+    explicit TxInUndoWrapper(C& coin) : txout(coin) {}\n };\n \n-static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), SER_NETWORK, PROTOCOL_VERSION);\n-static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_INPUT_WEIGHT;\n-\n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n     std::vector<Coin> vprevout;\n \n-    template <typename Stream>\n-    void Serialize(Stream& s) const {\n-        // TODO: avoid reimplementing vector serializer\n-        uint64_t count = vprevout.size();\n-        ::Serialize(s, COMPACTSIZE(REF(count)));\n-        for (const auto& prevout : vprevout) {\n-            ::Serialize(s, REF(TxInUndoSerializer(&prevout)));\n-        }\n-    }\n-\n-    template <typename Stream>\n-    void Unserialize(Stream& s) {\n-        // TODO: avoid reimplementing vector deserializer\n-        uint64_t count = 0;\n-        ::Unserialize(s, COMPACTSIZE(count));\n-        if (count > MAX_INPUTS_PER_BLOCK) {",
    "path": "src/undo.h",
    "position": 89,
    "original_position": 82,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "62f7eb2925532ef844374e593d43002253eb5bab",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It could use slightly more memory when deserializing an otherwise invalid object, but that shouldn't change behaviour otherwise - if the number of transaction undo objects doesn't match the number of transaction in the block, it's invalid anyway.",
    "created_at": "2017-09-07T06:25:13Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137454932",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137454932"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137454932"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137454932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 90,
    "original_line": 90,
    "side": "LEFT",
    "in_reply_to_id": 137139951
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137629183",
    "pull_request_review_id": 61321775,
    "id": 137629183,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzYyOTE4Mw==",
    "diff_hunk": "@@ -24,19 +24,19 @@ class RecentRequestEntry\n     QDateTime date;\n     SendCoinsRecipient recipient;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         unsigned int nDate = date.toTime_t();\n+        s << this->nVersion << id << nDate << recipient;\n+    }\n \n-        READWRITE(this->nVersion);\n-        READWRITE(id);\n-        READWRITE(nDate);\n-        READWRITE(recipient);\n-\n-        if (ser_action.ForRead())\n-            date = QDateTime::fromTime_t(nDate);\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        unsigned int nDate;\n+        s >> this->nVersion >> id >> nDate >> recipient;\n+        date = QDateTime::fromTime_t(nDate);",
    "path": "src/qt/recentrequeststablemodel.h",
    "position": null,
    "original_position": 27,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "30d7e934d6cef080744c39f93958d51e2a63af2b",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Introduced a wrapper for QDateTime instead.",
    "created_at": "2017-09-07T19:05:11Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137629183",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137629183"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137629183"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137629183/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 39,
    "side": "RIGHT",
    "in_reply_to_id": 137140260
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137630099",
    "pull_request_review_id": 61322875,
    "id": 137630099,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzYzMDA5OQ==",
    "diff_hunk": "@@ -381,42 +379,36 @@ class CWalletTx : public CMerkleTx\n         nOrderPos = -1;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead())\n-            Init(nullptr);\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         char fSpent = false;\n+        mapValue_t mapValueCopy = mapValue;\n \n-        if (!ser_action.ForRead())\n-        {\n-            mapValue[\"fromaccount\"] = strFromAccount;\n-\n-            WriteOrderPos(nOrderPos, mapValue);\n-\n-            if (nTimeSmart)\n-                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+        mapValueCopy[\"fromaccount\"] = strFromAccount;\n+        WriteOrderPos(nOrderPos, mapValueCopy);\n+        if (nTimeSmart) {\n+            mapValueCopy[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        READWRITE(*(CMerkleTx*)this);\n+        s << AsBaseType<CMerkleTx>(*this);\n         std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n-        READWRITE(vUnused);\n-        READWRITE(mapValue);\n-        READWRITE(vOrderForm);\n-        READWRITE(fTimeReceivedIsTxTime);\n-        READWRITE(nTimeReceived);\n-        READWRITE(fFromMe);\n-        READWRITE(fSpent);\n-\n-        if (ser_action.ForRead())\n-        {\n-            strFromAccount = mapValue[\"fromaccount\"];\n+        s << vUnused << mapValueCopy << vOrderForm << fTimeReceivedIsTxTime << nTimeReceived << fFromMe << fSpent;\n+    }\n \n-            ReadOrderPos(nOrderPos, mapValue);\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        Init(nullptr);\n+        char fSpent;\n \n-            nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n-        }\n+        s >> AsBaseType<CMerkleTx>(*this);\n+        std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n+        s >> vUnused >> mapValue >> vOrderForm >> fTimeReceivedIsTxTime >> nTimeReceived >> fFromMe >> fSpent;\n+\n+        strFromAccount = mapValue[\"fromaccount\"];",
    "path": "src/wallet/wallet.h",
    "position": null,
    "original_position": 129,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "651bb85d380babb5904f802103216a22f1f9d402",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-09-07T19:09:15Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137630099",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137630099"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137630099"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137630099/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 409,
    "side": "RIGHT",
    "in_reply_to_id": 137143998
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137630189",
    "pull_request_review_id": 61322988,
    "id": 137630189,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzYzMDE4OQ==",
    "diff_hunk": "@@ -62,35 +62,32 @@ class SendCoinsRecipient\n     static const int CURRENT_VERSION = 1;\n     int nVersion;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         std::string sAddress = address.toStdString();\n         std::string sLabel = label.toStdString();\n         std::string sMessage = message.toStdString();\n         std::string sPaymentRequest;\n-        if (!ser_action.ForRead() && paymentRequest.IsInitialized())\n+        if (paymentRequest.IsInitialized()) {\n             paymentRequest.SerializeToString(&sPaymentRequest);\n+        }\n         std::string sAuthenticatedMerchant = authenticatedMerchant.toStdString();\n+        s << this->nVersion << sAddress << sLabel << amount << sMessage << sPaymentRequest << sAuthenticatedMerchant;\n+    }\n \n-        READWRITE(this->nVersion);\n-        READWRITE(sAddress);\n-        READWRITE(sLabel);\n-        READWRITE(amount);\n-        READWRITE(sMessage);\n-        READWRITE(sPaymentRequest);\n-        READWRITE(sAuthenticatedMerchant);\n-\n-        if (ser_action.ForRead())\n-        {\n-            address = QString::fromStdString(sAddress);\n-            label = QString::fromStdString(sLabel);\n-            message = QString::fromStdString(sMessage);\n-            if (!sPaymentRequest.empty())\n-                paymentRequest.parse(QByteArray::fromRawData(sPaymentRequest.data(), sPaymentRequest.size()));\n-            authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        std::string sAddress, sLabel, sMessage, sPaymentRequest, sAuthenticatedMerchant;\n+        s >> this->nVersion >> sAddress >> sLabel >> amount >> sMessage >> sPaymentRequest >> sAuthenticatedMerchant;\n+        address = QString::fromStdString(sAddress);\n+        label = QString::fromStdString(sLabel);\n+        message = QString::fromStdString(sMessage);\n+        if (!sPaymentRequest.empty()) {\n+            paymentRequest.parse(QByteArray::fromRawData(sPaymentRequest.data(), sPaymentRequest.size()));\n         }\n+        authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);",
    "path": "src/qt/walletmodel.h",
    "position": null,
    "original_position": 50,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "30d7e934d6cef080744c39f93958d51e2a63af2b",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done using wrappers for QString and proto.",
    "created_at": "2017-09-07T19:09:43Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137630189",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137630189"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137630189"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137630189/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 90,
    "side": "RIGHT",
    "in_reply_to_id": 137141562
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148142135",
    "pull_request_review_id": 73340611,
    "id": 148142135,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODE0MjEzNQ==",
    "diff_hunk": "@@ -239,6 +240,82 @@ namespace GUIUtil\n     typedef ClickableProgressBar ProgressBar;\n #endif\n \n+//! Wrapper class to serialize QDateTime objects as 32-bit time_t.\n+template<typename Q>\n+class AsTimeTWrapper\n+{\n+private:\n+    Q& m_qdatetime;\n+public:\n+    AsTimeTWrapper(Q& qdatetime) : m_qdatetime(qdatetime) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const { s << (uint32_t)m_qdatetime.toTime_t(); }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        uint32_t timeval;\n+        s >> timeval;\n+        m_qdatetime = QDateTime::fromTime_t(timeval);\n+    }\n+};\n+template<typename Q> AsTimeTWrapper<Q> AsTimeT(Q& qdatetime) { return AsTimeTWrapper<Q>(qdatetime); }\n+\n+//! Wrapper class to serialize QString objects as std::strings.\n+template<typename Q>\n+class AsStdStringWrapper\n+{\n+private:\n+    Q& m_qstring;\n+public:\n+    AsStdStringWrapper(Q& qstring) : m_qstring(qstring) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const { s << m_qstring.toStdString(); }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        std::string str;\n+        s >> str;\n+        m_qstring = QString::fromStdString(std::move(str));\n+    }\n+};\n+template<typename Q> AsStdStringWrapper<Q> AsStdString(Q& qstring) { return AsStdString<Q>(qstring); }",
    "path": "src/qt/guiutil.h",
    "position": null,
    "original_position": 54,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "c3e505c8551a29d12edcebbed8a69f1e798823ef",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This should say `return AsStdStringWrapper<Q>(qstring)` or just `return {qstring}`",
    "created_at": "2017-10-31T22:15:43Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r148142135",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148142135"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r148142135"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148142135/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 287,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148580528",
    "pull_request_review_id": 73845803,
    "id": 148580528,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODU4MDUyOA==",
    "diff_hunk": "@@ -239,6 +240,82 @@ namespace GUIUtil\n     typedef ClickableProgressBar ProgressBar;\n #endif\n \n+//! Wrapper class to serialize QDateTime objects as 32-bit time_t.\n+template<typename Q>\n+class AsTimeTWrapper\n+{\n+private:\n+    Q& m_qdatetime;\n+public:\n+    AsTimeTWrapper(Q& qdatetime) : m_qdatetime(qdatetime) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const { s << (uint32_t)m_qdatetime.toTime_t(); }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        uint32_t timeval;\n+        s >> timeval;\n+        m_qdatetime = QDateTime::fromTime_t(timeval);\n+    }\n+};\n+template<typename Q> AsTimeTWrapper<Q> AsTimeT(Q& qdatetime) { return AsTimeTWrapper<Q>(qdatetime); }\n+\n+//! Wrapper class to serialize QString objects as std::strings.\n+template<typename Q>\n+class AsStdStringWrapper\n+{\n+private:\n+    Q& m_qstring;\n+public:\n+    AsStdStringWrapper(Q& qstring) : m_qstring(qstring) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const { s << m_qstring.toStdString(); }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        std::string str;\n+        s >> str;\n+        m_qstring = QString::fromStdString(std::move(str));\n+    }\n+};\n+template<typename Q> AsStdStringWrapper<Q> AsStdString(Q& qstring) { return AsStdString<Q>(qstring); }",
    "path": "src/qt/guiutil.h",
    "position": null,
    "original_position": 54,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "c3e505c8551a29d12edcebbed8a69f1e798823ef",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed! Thanks for figuring this out!",
    "created_at": "2017-11-02T16:07:20Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r148580528",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148580528"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r148580528"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148580528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 287,
    "side": "RIGHT",
    "in_reply_to_id": 148142135
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404667",
    "pull_request_review_id": 176049961,
    "id": 234404667,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDQwNDY2Nw==",
    "diff_hunk": "@@ -33,79 +29,94 @@ uint64_t DecompressAmount(uint64_t nAmount);\n  *  Other scripts up to 121 bytes require 1 byte + script length. Above\n  *  that, scripts up to 16505 bytes require 2 bytes + script length.\n  */\n-class CScriptCompressor\n+struct ScriptCompression\n {\n-private:\n-    /**\n-     * make this static for now (there are only 6 special scripts defined)\n-     * this can potentially be extended together with a new nVersion for\n-     * transactions, in which case this value becomes dependent on nVersion\n-     * and nHeight of the enclosing transaction.\n-     */\n-    static const unsigned int nSpecialScripts = 6;\n+    template<typename S>\n+    class Wrapper\n+    {\n+    private:\n+        /**\n+         * make this static for now (there are only 6 special scripts defined)\n+         * this can potentially be extended together with a new nVersion for\n+         * transactions, in which case this value becomes dependent on nVersion\n+         * and nHeight of the enclosing transaction.\n+         */\n+        static const unsigned int nSpecialScripts = 6;\n+\n+        S &script;\n+    public:\n+        explicit Wrapper(S &scriptIn) : script(scriptIn) { }\n \n-    CScript &script;\n-public:\n-    explicit CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n+        template<typename Stream>\n+        void Serialize(Stream &s) const {\n+            std::vector<unsigned char> compr;\n+            if (CompressScript(script, compr)) {\n+                s << MakeSpan(compr);\n+                return;\n+            }\n+            unsigned int nSize = script.size() + nSpecialScripts;\n+            s << VARINT(nSize);\n+            s << MakeSpan(script);\n+        }\n \n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        std::vector<unsigned char> compr;\n-        if (CompressScript(script, compr)) {\n-            s << MakeSpan(compr);\n-            return;\n+        template<typename Stream>\n+        void Unserialize(Stream &s) {\n+            unsigned int nSize = 0;\n+            s >> VARINT(nSize);\n+            if (nSize < nSpecialScripts) {\n+                std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n+                s >> MakeSpan(vch);\n+                DecompressScript(script, nSize, vch);\n+                return;\n+            }\n+            nSize -= nSpecialScripts;\n+            if (nSize > MAX_SCRIPT_SIZE) {\n+                // Overly long script, replace with a short invalid one\n+                script << OP_RETURN;\n+                s.ignore(nSize);\n+            } else {\n+                script.resize(nSize);\n+                s >> MakeSpan(script);\n+            }\n         }\n-        unsigned int nSize = script.size() + nSpecialScripts;\n-        s << VARINT(nSize);\n-        s << MakeSpan(script);\n-    }\n+    };\n+};\n \n-    template<typename Stream>\n-    void Unserialize(Stream &s) {\n-        unsigned int nSize = 0;\n-        s >> VARINT(nSize);\n-        if (nSize < nSpecialScripts) {\n-            std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n-            s >> MakeSpan(vch);\n-            DecompressScript(script, nSize, vch);\n-            return;\n+struct AmountCompression\n+{\n+    template<typename I>\n+    class Wrapper\n+    {\n+        I& m_val;\n+    public:\n+        explicit Wrapper(I& val) : m_val(val) {}\n+        template<typename Stream> void Serialize(Stream& s) const\n+        {\n+            s << VARINT(CompressAmount(m_val));\n         }\n-        nSize -= nSpecialScripts;\n-        if (nSize > MAX_SCRIPT_SIZE) {\n-            // Overly long script, replace with a short invalid one\n-            script << OP_RETURN;\n-            s.ignore(nSize);\n-        } else {\n-            script.resize(nSize);\n-            s >> MakeSpan(script);\n+        template<typename Stream> void Unserialize(Stream& s)\n+        {\n+            uint64_t v;\n+            s >> VARINT(v);\n+            m_val = DecompressAmount(v);",
    "path": "src/compressor.h",
    "position": null,
    "original_position": 123,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f92343358b71e510432444018ee9c1b5ea0bdd1d",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Make this conversion explicit since it changes signedness?",
    "created_at": "2018-11-17T11:00:32Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404667",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404667"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404667"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404667/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 101,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404677",
    "pull_request_review_id": 176049970,
    "id": 234404677,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDQwNDY3Nw==",
    "diff_hunk": "@@ -33,79 +29,94 @@ uint64_t DecompressAmount(uint64_t nAmount);\n  *  Other scripts up to 121 bytes require 1 byte + script length. Above\n  *  that, scripts up to 16505 bytes require 2 bytes + script length.\n  */\n-class CScriptCompressor\n+struct ScriptCompression\n {\n-private:\n-    /**\n-     * make this static for now (there are only 6 special scripts defined)\n-     * this can potentially be extended together with a new nVersion for\n-     * transactions, in which case this value becomes dependent on nVersion\n-     * and nHeight of the enclosing transaction.\n-     */\n-    static const unsigned int nSpecialScripts = 6;\n+    template<typename S>\n+    class Wrapper\n+    {\n+    private:\n+        /**\n+         * make this static for now (there are only 6 special scripts defined)\n+         * this can potentially be extended together with a new nVersion for\n+         * transactions, in which case this value becomes dependent on nVersion\n+         * and nHeight of the enclosing transaction.\n+         */\n+        static const unsigned int nSpecialScripts = 6;\n+\n+        S &script;\n+    public:\n+        explicit Wrapper(S &scriptIn) : script(scriptIn) { }\n \n-    CScript &script;\n-public:\n-    explicit CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n+        template<typename Stream>\n+        void Serialize(Stream &s) const {\n+            std::vector<unsigned char> compr;\n+            if (CompressScript(script, compr)) {\n+                s << MakeSpan(compr);\n+                return;\n+            }\n+            unsigned int nSize = script.size() + nSpecialScripts;\n+            s << VARINT(nSize);\n+            s << MakeSpan(script);\n+        }\n \n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        std::vector<unsigned char> compr;\n-        if (CompressScript(script, compr)) {\n-            s << MakeSpan(compr);\n-            return;\n+        template<typename Stream>\n+        void Unserialize(Stream &s) {\n+            unsigned int nSize = 0;\n+            s >> VARINT(nSize);\n+            if (nSize < nSpecialScripts) {\n+                std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n+                s >> MakeSpan(vch);\n+                DecompressScript(script, nSize, vch);\n+                return;\n+            }\n+            nSize -= nSpecialScripts;\n+            if (nSize > MAX_SCRIPT_SIZE) {\n+                // Overly long script, replace with a short invalid one\n+                script << OP_RETURN;\n+                s.ignore(nSize);\n+            } else {\n+                script.resize(nSize);\n+                s >> MakeSpan(script);\n+            }\n         }\n-        unsigned int nSize = script.size() + nSpecialScripts;\n-        s << VARINT(nSize);\n-        s << MakeSpan(script);\n-    }\n+    };\n+};\n \n-    template<typename Stream>\n-    void Unserialize(Stream &s) {\n-        unsigned int nSize = 0;\n-        s >> VARINT(nSize);\n-        if (nSize < nSpecialScripts) {\n-            std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n-            s >> MakeSpan(vch);\n-            DecompressScript(script, nSize, vch);\n-            return;\n+struct AmountCompression\n+{\n+    template<typename I>\n+    class Wrapper\n+    {\n+        I& m_val;\n+    public:\n+        explicit Wrapper(I& val) : m_val(val) {}\n+        template<typename Stream> void Serialize(Stream& s) const\n+        {\n+            s << VARINT(CompressAmount(m_val));",
    "path": "src/compressor.h",
    "position": null,
    "original_position": 109,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f92343358b71e510432444018ee9c1b5ea0bdd1d",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Make this conversion explicit since it changes signedness?",
    "created_at": "2018-11-17T11:00:53Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404677",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404677"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404677"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404677/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 95,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404698",
    "pull_request_review_id": 176049988,
    "id": 234404698,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDQwNDY5OA==",
    "diff_hunk": "@@ -33,79 +29,94 @@ uint64_t DecompressAmount(uint64_t nAmount);\n  *  Other scripts up to 121 bytes require 1 byte + script length. Above\n  *  that, scripts up to 16505 bytes require 2 bytes + script length.\n  */\n-class CScriptCompressor\n+struct ScriptCompression\n {\n-private:\n-    /**\n-     * make this static for now (there are only 6 special scripts defined)\n-     * this can potentially be extended together with a new nVersion for\n-     * transactions, in which case this value becomes dependent on nVersion\n-     * and nHeight of the enclosing transaction.\n-     */\n-    static const unsigned int nSpecialScripts = 6;\n+    template<typename S>\n+    class Wrapper\n+    {\n+    private:\n+        /**\n+         * make this static for now (there are only 6 special scripts defined)\n+         * this can potentially be extended together with a new nVersion for\n+         * transactions, in which case this value becomes dependent on nVersion\n+         * and nHeight of the enclosing transaction.\n+         */\n+        static const unsigned int nSpecialScripts = 6;\n+\n+        S &script;\n+    public:\n+        explicit Wrapper(S &scriptIn) : script(scriptIn) { }\n \n-    CScript &script;\n-public:\n-    explicit CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n+        template<typename Stream>\n+        void Serialize(Stream &s) const {\n+            std::vector<unsigned char> compr;\n+            if (CompressScript(script, compr)) {\n+                s << MakeSpan(compr);\n+                return;\n+            }\n+            unsigned int nSize = script.size() + nSpecialScripts;\n+            s << VARINT(nSize);\n+            s << MakeSpan(script);\n+        }\n \n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        std::vector<unsigned char> compr;\n-        if (CompressScript(script, compr)) {\n-            s << MakeSpan(compr);\n-            return;\n+        template<typename Stream>\n+        void Unserialize(Stream &s) {\n+            unsigned int nSize = 0;\n+            s >> VARINT(nSize);\n+            if (nSize < nSpecialScripts) {\n+                std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n+                s >> MakeSpan(vch);\n+                DecompressScript(script, nSize, vch);\n+                return;\n+            }\n+            nSize -= nSpecialScripts;\n+            if (nSize > MAX_SCRIPT_SIZE) {\n+                // Overly long script, replace with a short invalid one\n+                script << OP_RETURN;\n+                s.ignore(nSize);\n+            } else {\n+                script.resize(nSize);\n+                s >> MakeSpan(script);\n+            }\n         }\n-        unsigned int nSize = script.size() + nSpecialScripts;\n-        s << VARINT(nSize);\n-        s << MakeSpan(script);\n-    }\n+    };\n+};\n \n-    template<typename Stream>\n-    void Unserialize(Stream &s) {\n-        unsigned int nSize = 0;\n-        s >> VARINT(nSize);\n-        if (nSize < nSpecialScripts) {\n-            std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n-            s >> MakeSpan(vch);\n-            DecompressScript(script, nSize, vch);\n-            return;\n+struct AmountCompression\n+{\n+    template<typename I>\n+    class Wrapper\n+    {\n+        I& m_val;\n+    public:\n+        explicit Wrapper(I& val) : m_val(val) {}\n+        template<typename Stream> void Serialize(Stream& s) const\n+        {\n+            s << VARINT(CompressAmount(m_val));\n         }\n-        nSize -= nSpecialScripts;\n-        if (nSize > MAX_SCRIPT_SIZE) {\n-            // Overly long script, replace with a short invalid one\n-            script << OP_RETURN;\n-            s.ignore(nSize);\n-        } else {\n-            script.resize(nSize);\n-            s >> MakeSpan(script);\n+        template<typename Stream> void Unserialize(Stream& s)\n+        {\n+            uint64_t v;\n+            s >> VARINT(v);\n+            m_val = DecompressAmount(v);\n         }\n-    }\n+    };\n };\n \n /** wrapper for CTxOut that provides a more compact serialization */\n-class CTxOutCompressor\n+struct TxOutCompression\n {\n-private:\n-    CTxOut &txout;\n-\n-public:\n-    explicit CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (!ser_action.ForRead()) {\n-            uint64_t nVal = CompressAmount(txout.nValue);\n-            READWRITE(VARINT(nVal));\n-        } else {\n-            uint64_t nVal = 0;\n-            READWRITE(VARINT(nVal));\n-            txout.nValue = DecompressAmount(nVal);\n+    template<typename O>\n+    class Wrapper\n+    {\n+    private:\n+        O &txout;\n+    public:\n+        Wrapper(O &txoutIn) : txout(txoutIn) { }",
    "path": "src/compressor.h",
    "position": null,
    "original_position": 156,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f92343358b71e510432444018ee9c1b5ea0bdd1d",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Make this `explicit`? :-)",
    "created_at": "2018-11-17T11:01:46Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404698",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404698"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404698"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404698/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 115,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404709",
    "pull_request_review_id": 176050005,
    "id": 234404709,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDQwNDcwOQ==",
    "diff_hunk": "@@ -583,17 +579,13 @@ class CWalletKey\n \n     explicit CWalletKey(int64_t nExpires=0);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    SERIALIZE_METHODS(CWalletKey, obj)\n+    {\n         int nVersion = s.GetVersion();",
    "path": "src/wallet/wallet.h",
    "position": null,
    "original_position": 95,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f92343358b71e510432444018ee9c1b5ea0bdd1d",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The scope of `nVersion` can be reduced?",
    "created_at": "2018-11-17T11:02:24Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404709",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404709"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404709"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 584,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404716",
    "pull_request_review_id": 176050013,
    "id": 234404716,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDQwNDcxNg==",
    "diff_hunk": "@@ -51,6 +51,65 @@ QT_BEGIN_NAMESPACE\n class QTimer;\n QT_END_NAMESPACE\n \n+//! Wrapper class to serialize QString objects as std::strings.\n+struct AsStdString\n+{\n+    template<typename Q>\n+    class Wrapper\n+    {\n+    private:\n+        Q& m_qstring;\n+    public:\n+        Wrapper(Q& qstring) : m_qstring(qstring) {}",
    "path": "src/qt/walletmodel.h",
    "position": null,
    "original_position": 13,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f92343358b71e510432444018ee9c1b5ea0bdd1d",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`explicit`?",
    "created_at": "2018-11-17T11:02:40Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404716",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404716"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404716"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404716/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 59,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404768",
    "pull_request_review_id": 176050070,
    "id": 234404768,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDQwNDc2OA==",
    "diff_hunk": "@@ -251,24 +251,26 @@ struct StringContentsSerializer {\n     }\n     StringContentsSerializer& operator+=(const StringContentsSerializer& s) { return *this += s.str; }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead()) {",
    "path": "src/test/dbwrapper_tests.cpp",
    "position": 8,
    "original_position": 8,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f92343358b71e510432444018ee9c1b5ea0bdd1d",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`ForRead` is no longer needed and can be removed from `serialize.h`?",
    "created_at": "2018-11-17T11:04:51Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404768",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404768"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404768"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234404768/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 338,
    "original_line": 338,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234825855",
    "pull_request_review_id": 176551385,
    "id": 234825855,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDgyNTg1NQ==",
    "diff_hunk": "@@ -33,79 +29,94 @@ uint64_t DecompressAmount(uint64_t nAmount);\n  *  Other scripts up to 121 bytes require 1 byte + script length. Above\n  *  that, scripts up to 16505 bytes require 2 bytes + script length.\n  */\n-class CScriptCompressor\n+struct ScriptCompression\n {\n-private:\n-    /**\n-     * make this static for now (there are only 6 special scripts defined)\n-     * this can potentially be extended together with a new nVersion for\n-     * transactions, in which case this value becomes dependent on nVersion\n-     * and nHeight of the enclosing transaction.\n-     */\n-    static const unsigned int nSpecialScripts = 6;\n+    template<typename S>\n+    class Wrapper\n+    {\n+    private:\n+        /**\n+         * make this static for now (there are only 6 special scripts defined)\n+         * this can potentially be extended together with a new nVersion for\n+         * transactions, in which case this value becomes dependent on nVersion\n+         * and nHeight of the enclosing transaction.\n+         */\n+        static const unsigned int nSpecialScripts = 6;\n+\n+        S &script;\n+    public:\n+        explicit Wrapper(S &scriptIn) : script(scriptIn) { }\n \n-    CScript &script;\n-public:\n-    explicit CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n+        template<typename Stream>\n+        void Serialize(Stream &s) const {\n+            std::vector<unsigned char> compr;\n+            if (CompressScript(script, compr)) {\n+                s << MakeSpan(compr);\n+                return;\n+            }\n+            unsigned int nSize = script.size() + nSpecialScripts;\n+            s << VARINT(nSize);\n+            s << MakeSpan(script);\n+        }\n \n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        std::vector<unsigned char> compr;\n-        if (CompressScript(script, compr)) {\n-            s << MakeSpan(compr);\n-            return;\n+        template<typename Stream>\n+        void Unserialize(Stream &s) {\n+            unsigned int nSize = 0;\n+            s >> VARINT(nSize);\n+            if (nSize < nSpecialScripts) {\n+                std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n+                s >> MakeSpan(vch);\n+                DecompressScript(script, nSize, vch);\n+                return;\n+            }\n+            nSize -= nSpecialScripts;\n+            if (nSize > MAX_SCRIPT_SIZE) {\n+                // Overly long script, replace with a short invalid one\n+                script << OP_RETURN;\n+                s.ignore(nSize);\n+            } else {\n+                script.resize(nSize);\n+                s >> MakeSpan(script);\n+            }\n         }\n-        unsigned int nSize = script.size() + nSpecialScripts;\n-        s << VARINT(nSize);\n-        s << MakeSpan(script);\n-    }\n+    };\n+};\n \n-    template<typename Stream>\n-    void Unserialize(Stream &s) {\n-        unsigned int nSize = 0;\n-        s >> VARINT(nSize);\n-        if (nSize < nSpecialScripts) {\n-            std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n-            s >> MakeSpan(vch);\n-            DecompressScript(script, nSize, vch);\n-            return;\n+struct AmountCompression\n+{\n+    template<typename I>\n+    class Wrapper\n+    {\n+        I& m_val;\n+    public:\n+        explicit Wrapper(I& val) : m_val(val) {}\n+        template<typename Stream> void Serialize(Stream& s) const\n+        {\n+            s << VARINT(CompressAmount(m_val));\n         }\n-        nSize -= nSpecialScripts;\n-        if (nSize > MAX_SCRIPT_SIZE) {\n-            // Overly long script, replace with a short invalid one\n-            script << OP_RETURN;\n-            s.ignore(nSize);\n-        } else {\n-            script.resize(nSize);\n-            s >> MakeSpan(script);\n+        template<typename Stream> void Unserialize(Stream& s)\n+        {\n+            uint64_t v;\n+            s >> VARINT(v);\n+            m_val = DecompressAmount(v);",
    "path": "src/compressor.h",
    "position": null,
    "original_position": 123,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f92343358b71e510432444018ee9c1b5ea0bdd1d",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The best I can do in this place is cast it to `I`, which isn't making anything interesting explicit, and will just hide the warning.\r\n\r\nThe issue is that CTxOut has a signed `int64_t`, but for UTXOs only ever contains unsigned values. I think the warning, if any, is appropriate, and should remain until the actual \"issue\" (the fact that the type in outputs doesn't match its assumptions) is fixed.",
    "created_at": "2018-11-19T23:54:54Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234825855",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234825855"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234825855"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234825855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 101,
    "side": "RIGHT",
    "in_reply_to_id": 234404667
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234885986",
    "pull_request_review_id": 176622527,
    "id": 234885986,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDg4NTk4Ng==",
    "diff_hunk": "@@ -33,79 +29,94 @@ uint64_t DecompressAmount(uint64_t nAmount);\n  *  Other scripts up to 121 bytes require 1 byte + script length. Above\n  *  that, scripts up to 16505 bytes require 2 bytes + script length.\n  */\n-class CScriptCompressor\n+struct ScriptCompression\n {\n-private:\n-    /**\n-     * make this static for now (there are only 6 special scripts defined)\n-     * this can potentially be extended together with a new nVersion for\n-     * transactions, in which case this value becomes dependent on nVersion\n-     * and nHeight of the enclosing transaction.\n-     */\n-    static const unsigned int nSpecialScripts = 6;\n+    template<typename S>\n+    class Wrapper\n+    {\n+    private:\n+        /**\n+         * make this static for now (there are only 6 special scripts defined)\n+         * this can potentially be extended together with a new nVersion for\n+         * transactions, in which case this value becomes dependent on nVersion\n+         * and nHeight of the enclosing transaction.\n+         */\n+        static const unsigned int nSpecialScripts = 6;\n+\n+        S &script;\n+    public:\n+        explicit Wrapper(S &scriptIn) : script(scriptIn) { }\n \n-    CScript &script;\n-public:\n-    explicit CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n+        template<typename Stream>\n+        void Serialize(Stream &s) const {\n+            std::vector<unsigned char> compr;\n+            if (CompressScript(script, compr)) {\n+                s << MakeSpan(compr);\n+                return;\n+            }\n+            unsigned int nSize = script.size() + nSpecialScripts;\n+            s << VARINT(nSize);\n+            s << MakeSpan(script);\n+        }\n \n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        std::vector<unsigned char> compr;\n-        if (CompressScript(script, compr)) {\n-            s << MakeSpan(compr);\n-            return;\n+        template<typename Stream>\n+        void Unserialize(Stream &s) {\n+            unsigned int nSize = 0;\n+            s >> VARINT(nSize);\n+            if (nSize < nSpecialScripts) {\n+                std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n+                s >> MakeSpan(vch);\n+                DecompressScript(script, nSize, vch);\n+                return;\n+            }\n+            nSize -= nSpecialScripts;\n+            if (nSize > MAX_SCRIPT_SIZE) {\n+                // Overly long script, replace with a short invalid one\n+                script << OP_RETURN;\n+                s.ignore(nSize);\n+            } else {\n+                script.resize(nSize);\n+                s >> MakeSpan(script);\n+            }\n         }\n-        unsigned int nSize = script.size() + nSpecialScripts;\n-        s << VARINT(nSize);\n-        s << MakeSpan(script);\n-    }\n+    };\n+};\n \n-    template<typename Stream>\n-    void Unserialize(Stream &s) {\n-        unsigned int nSize = 0;\n-        s >> VARINT(nSize);\n-        if (nSize < nSpecialScripts) {\n-            std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n-            s >> MakeSpan(vch);\n-            DecompressScript(script, nSize, vch);\n-            return;\n+struct AmountCompression\n+{\n+    template<typename I>\n+    class Wrapper\n+    {\n+        I& m_val;\n+    public:\n+        explicit Wrapper(I& val) : m_val(val) {}\n+        template<typename Stream> void Serialize(Stream& s) const\n+        {\n+            s << VARINT(CompressAmount(m_val));\n         }\n-        nSize -= nSpecialScripts;\n-        if (nSize > MAX_SCRIPT_SIZE) {\n-            // Overly long script, replace with a short invalid one\n-            script << OP_RETURN;\n-            s.ignore(nSize);\n-        } else {\n-            script.resize(nSize);\n-            s >> MakeSpan(script);\n+        template<typename Stream> void Unserialize(Stream& s)\n+        {\n+            uint64_t v;\n+            s >> VARINT(v);\n+            m_val = DecompressAmount(v);",
    "path": "src/compressor.h",
    "position": null,
    "original_position": 123,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "f92343358b71e510432444018ee9c1b5ea0bdd1d",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Makes sense! Thanks for the clarification.",
    "created_at": "2018-11-20T06:51:04Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234885986",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234885986"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234885986"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234885986/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 101,
    "side": "RIGHT",
    "in_reply_to_id": 234404667
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350770408",
    "pull_request_review_id": 323017081,
    "id": 350770408,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDc3MDQwOA==",
    "diff_hunk": "@@ -33,8 +57,8 @@ class SendCoinsRecipient\n     CAmount amount;\n     // If from a payment request, this is used for storing the memo\n     QString message;\n-    // Keep the payment request around as a serialized string to ensure\n-    // load/store is lossless.\n+    // If building with BIP70 is disabled, keep the payment request around as",
    "path": "src/qt/sendcoinsrecipient.h",
    "position": null,
    "original_position": 37,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "a4dcab62f04210ebde9288862d83713c5565a4a0",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is no longer an \"if\" :smiley: ",
    "created_at": "2019-11-26T14:23:56Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r350770408",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350770408"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r350770408"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350770408/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350842277",
    "pull_request_review_id": 323108289,
    "id": 350842277,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDg0MjI3Nw==",
    "diff_hunk": "@@ -33,8 +57,8 @@ class SendCoinsRecipient\n     CAmount amount;\n     // If from a payment request, this is used for storing the memo\n     QString message;\n-    // Keep the payment request around as a serialized string to ensure\n-    // load/store is lossless.\n+    // If building with BIP70 is disabled, keep the payment request around as",
    "path": "src/qt/sendcoinsrecipient.h",
    "position": null,
    "original_position": 37,
    "commit_id": "f4ca9782d6092ace8988b2716c374f1046487219",
    "original_commit_id": "a4dcab62f04210ebde9288862d83713c5565a4a0",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oops, accident revert added in a rebase. Fixed.",
    "created_at": "2019-11-26T16:16:51Z",
    "updated_at": "2020-01-13T18:16:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r350842277",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350842277"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r350842277"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350842277/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT",
    "in_reply_to_id": 350770408
  }
]