gmaxwell,2017-07-10T18:32:34Z,Should probably be tested on big endian. :),https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-314194922,314194922,
jonasschnelli,2017-07-11T13:24:30Z,"Concept ACK.\nBinaries: https://bitcoin.jonasschnelli.ch/build/210 (Currently running on a fresh node)\nAgree with @gmaxwell that some BE testing would be good.\n\nWill code-review soon.",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-314442225,314442225,
sipa,2017-07-30T00:20:53Z,Made some changes to reduce the size of the overall diff.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-318868567,318868567,
sipa,2017-08-15T21:38:20Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-322597231,322597231,
sipa,2017-08-25T19:02:49Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-325009932,325009932,
laanwj,2017-09-06T22:12:56Z,"Big concept ACK, happy to get rid of FLATDATA and similar ugly macros. This is a lot to review/test though, and reasonably high-risk.",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-327626776,327626776,
sipa,2017-10-20T11:27:05Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-338180383,338180383,
MarcoFalke,2017-10-31T21:44:14Z,Travis can not run the qt tests. Are they passing for you locally?,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-340916840,340916840,
ryanofsky,2017-10-31T21:50:21Z,"~~~They passed for me locally.~~~ Current travis failure appears to be:\n\nQFATAL : WalletTests::walletTests() Received signal 11\nFAIL!  : WalletTests::walletTests() Received a fatal error.\n   Loc: [Unknown file(0)]\n\nEDIT: Actually they are failing for me locally too",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-340918265,340918265,
MarcoFalke,2017-10-31T22:00:19Z,"I guess they time out and you could try setting the `QTEST_FUNCTION_TIMEOUT` env var to 600,000. Though, it might be worthwhile to check why they take longer than before.",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-340920564,340920564,
ryanofsky,2017-10-31T22:11:29Z,"Actually they are failing for me locally. Stack trace shows an infinite recursion and looks like:\n\n```\n(gdb) bt -50\n#2355058 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\n#2355059 0x00000001000dbe89 in GUIUtil::AsStdString<QString const>(QString const&) (qstring=...) at qt/guiutil.h:285\n#2355060 0x00000001000dbe89 in GUIUtil",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-340922989,340922989,
sipa,2017-11-02T17:13:08Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-341493176,341493176,
sipa,2017-11-08T20:12:40Z,Removed the need for creating a vector with absolute values for serializing/deserializing BlockTransactionsRequest.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-342944703,342944703,
sipa,2017-11-21T11:02:55Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-345992677,345992677,
sipa,2018-02-08T19:29:27Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-364222243,364222243,
Christewart,2018-02-08T22:14:49Z,"I ran this with #8469 -- which tests serialization code pretty extensively -- and everything passed. \n\nIf anyone wants to re-run they can do with this branch: https://github.com/Christewart/bitcoin/commits/pbt_noncastserial",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-364266888,364266888,
sipa,2018-03-13T18:27:57Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-372770581,372770581,
sipa,2018-03-17T23:29:09Z,"I've reordered the commits again a bit, and made a small (but invasive) change to the design:\n* Removed macro READWRITEAS (using `AsType<type>(obj)` instead)\n* Added a `Wrap<wrapper>(obj)` function to later avoid the need for `COMPACTSIZE`, `VARINT`, and `LIMITED_STRING`, and removing the need for helper functions for each wrapper class.\n\nFeel free to ignore the changes here; I'll keep tak",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-373960485,373960485,
laanwj,2018-05-14T14:00:00Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-388826869,388826869,
sipa,2018-05-17T00:36:42Z,"@laanwj I'm going to keep extracting smaller changes from this PR into separate ones (like #12916, #12886, #12752, #12740, #12712, #12683, #12658). No need to review the whole thing, but concept ACKs are useful.",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-389707969,389707969,
MarcoFalke,2018-05-21T15:31:07Z,Needs rebase due to merge of #12924,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-390689910,390689910,
MarcoFalke,2018-07-25T20:59:00Z,"Travis output:\n\n```\nA wild circular dependency in the form of ""qt/guiutil -> qt/walletmodel -> qt/guiutil"" appears...",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-407893368,407893368,
jb55,2018-10-08T15:15:49Z,Chris Stewart <notifications@github.com> writes:\n> I ran this with #8469 -- which tests serialization code pretty extensively -- and it everything passed. \n\nI gave this a spin with the property tests as well. Seems to still pass.\nThere's a recent change to bench/prevector that needs to be updated but\nother than that it appears to work.\n,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-427874099,427874099,
sipa,2018-11-15T20:13:47Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-439174955,439174955,
DrahtBot,2018-11-15T23:55:10Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17896](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17896.html) (Serialization improvements (step 2) by sipa",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-439233182,439233182,
practicalswift,2019-01-22T08:10:11Z,"Concept ACK\n\n@sipa has this been tested on a BE system?",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-456306886,456306886,
laanwj,2019-09-30T12:00:50Z,"This PR is really old by now, even though there was no disagreement. What is holding this up?\n\nIMO. we should try to merge this after the 0.19 split-off in a few days.",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536529893,536529893,
practicalswift,2019-09-30T12:43:09Z,Has this been properly fuzz tested?,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536543645,536543645,
MarcoFalke,2019-09-30T12:48:19Z,@practicalswift Pretty much all of our fuzzers are  deserialization fuzzers,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536545577,536545577,
practicalswift,2019-09-30T13:29:22Z,@MarcoFalke Yes I know that :)  I was curious if these suggested serialization improvements had been subject to fuzz testing by the PR author - that is something different and hence my question :),https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536560999,536560999,
ryanofsky,2019-09-30T14:59:12Z,"> @MarcoFalke Yes I know that :) I was curious if these suggested serialization improvements had been subject to fuzz testing by the PR author - that is something different and hence my question :)\n\nI haven't paid much attention to fuzz testing, but I did spend a good amount of time reviewing this, and wonder if you could give more detail on the extra testing that would be useful here that goe",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536602010,536602010,
practicalswift,2019-09-30T15:29:00Z,"> I haven't paid much attention to fuzz testing, but I did spend a good amount of time reviewing this, and wonder if you could give more detail on the extra testing that would be useful here that goes beyond the normal testing.\n\nIt would be useful to take this new code for a spin with our fuzzing test harnesses to make sure no new obvious issues are introduced.\n\nThis can be done using:\n",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536615879,536615879,
jb55,2019-09-30T15:41:05Z,"> @practicalswift Has this been properly fuzz tested?\n\nboth me and @Christewart ran the serialization property-based tests against this at one point. Would be good to revisit.",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536621751,536621751,
practicalswift,2019-09-30T16:07:33Z,@jb55 Great to hear! I'll try to break it by fuzzing once rebased :),https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-536633157,536633157,
sipa,2019-10-03T15:34:20Z,"I'll gladly rebase again next week, or try to cherry-pick pieces of it. I haven't done any fuzz testing specifically.",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-537998463,537998463,
sipa,2019-10-10T21:40:10Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-540811739,540811739,
sipa,2019-10-26T18:29:59Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-546627999,546627999,
sipa,2019-10-29T22:30:32Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-547657895,547657895,
sipa,2019-11-21T20:05:12Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-557250406,557250406,
MarcoFalke,2019-11-22T02:30:18Z,Is this going to be split into smaller bites?,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-557360045,557360045,
sipa,2019-11-22T02:37:25Z,"I certainly can, though I think all the standalone improvements have already been split off and merged independently.\n\nWhat remains is introducing new serialization macros, converting all serializers to use them, and then deleting the old ones. I'm happy to split those up into separate PRs if you think that's useful.",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-557361584,557361584,
MarcoFalke,2019-11-22T02:41:53Z,Fair enough. I was asking for the general public,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-557362603,557362603,
sipa,2019-11-25T17:17:27Z,"Rebased on top of (a rebased version of) #17591, to test on a BE platform.",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-558253921,558253921,
sipa,2019-11-26T16:17:32Z,Now also rebased on top of #17599 to get functional tests run on BE.,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-558704267,558704267,
practicalswift,2019-11-26T16:32:05Z,"Could bring in the new improved deserialization fuzz harness from #17225 to fuzz test this? The new fuzz harness does roundtrip testing where possible and covers more types. Would be nice to see this new code fuzz tested :)\n\n---\n\nFuzzing in three easy steps:\n\n```\n$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n$ make\n$ find src/test/fuz",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-558710827,558710827,
sipa,2019-12-12T00:50:56Z,"Rebased, and fixes a bug in the deserialization fuzzing code.",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-564799717,564799717,
practicalswift,2019-12-12T09:13:36Z,"This needs to be addressed to make the sanitizers happy :)\n\n```\nblockencodings.h:83:34: runtime error: implicit conversion from type 'int' of \n    value 65536 (32-bit, signed) to type 'Differential::Wrapper<std::vector<unsigned short, std::allocator<unsigned short> > >::value_type'\n    (aka 'unsigned short') changed the value to 0 (16-bit, unsigned)\n```",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-564918074,564918074,
sipa,2020-01-07T19:15:16Z,"I've added a new commit with a few style improvements, and a new approach for writing wrapper classes, as well a different way of doing the differential encoding of compact block indexes.\n\nUnless people object, I'll use these modified approaches in follow-up PRs that carve out pieces out of this PR.",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-571729489,571729489,
ryanofsky,2020-01-07T21:13:43Z,"Just reviewed commit ""Switch to different wrapping model + different differential vector"" (7da03b3ce5f4be94555b15bf4668bc251a8faac4) and I think it is a nice improvement. Getting rid of the various `Format::Wrapper` inner classes and pulling them into a standalone `Wrapper` class eliminates redundant code. And another really nice part of the change is replacing the `Differential` struct that had l",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-571775729,571775729,
sipa,2020-01-08T13:45:23Z,"@ryanofsky Thanks, I'll see how hard it is to address the non-static methods suggestion. What so you think of the name ""Using"" instead of ""Wrap"" ?",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-572058319,572058319,
sipa,2020-01-08T14:57:21Z,"Changed to terminology ""formatters"", with function ""Using<Formatter>"", and made the Ser/Unser functions (permitted to be) non-static.",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-572106664,572106664,
ryanofsky,2020-01-08T14:59:15Z,"> @ryanofsky Thanks, I'll see how hard it is to address the non-static methods suggestion. What so you think of the name ""Using"" instead of ""Wrap"" ?\n\nI think it'd be good, assuming it's not too much trouble to rename. I also realized the names I suggested yesterday `SerializeAs` or `FormatAs` don't really make sense given how the template argument is used. More accurate would be `SerializeWith",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-572107534,572107534,
laanwj,2020-01-13T11:31:50Z,"Travis error:\n```\nblockencodings.h:68:17: runtime error: implicit conversion from type 'int' of value 65536 (32-bit, signed) to type 'unsigned short' changed the value to 0 (16-bit, unsigned)\n\n    #0 0x561bb3939927 in DifferentialUnserTransform<unsigned short>::operator()(unsigned short) /home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-pc-linux-gnu/src/./blockencodings.h:68:17\n   ",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-573620577,573620577,
DrahtBot,2020-01-18T02:49:37Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-575859336,575859336,
sipa,2020-02-15T04:03:07Z,"Too many changes have been introduced compared to this PR in #17850, #17896, #17957, #18021, and #18112,  and I'm not going to rebase this on top of them. I'll keep picking changes from the branch, though, but no need to keep this open.",https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-586551179,586551179,
sipa,2017-07-10T22:18:13Z,"For ease of implementation, deserialization first happens into a `std::vector<uint64_t>`, and is then converted. This means a temporary is created and allocated, which is an overhead that the old implementation didn't have.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126551394,126551394,src/blockencodings.h
sipa,2017-07-10T22:20:41Z,"This whole test is somewhat less valuable now, as both cases use `READWRITE`.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126551772,126551772,src/test/serialize_tests.cpp
sipa,2017-07-10T22:22:40Z,"This is one of the more involved changes, as it's both splitting the serializer into two versions, and the `Serialize` code no longer modifies `mapValue` in-place (wtf?).",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552095,126552095,src/wallet/wallet.h
sipa,2017-07-10T22:23:15Z,"Here is another big change, that avoids modifying `mapValue` and `strAccount` and then later fixing it up before returning (wtf?).",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552169,126552169,src/wallet/wallet.h
sipa,2017-07-10T22:25:58Z,"Notice the unusual construction of a template that takes a template as parameter here. See ""Template template parameter"" here: http://en.cppreference.com/w/cpp/language/template_parameters",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552640,126552640,src/serialize.h
sipa,2017-07-10T22:26:40Z,The reason for removing the `std::forward` calls here is explained in the commit message (there is no benefit in passing down the rvalue-ness).,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552772,126552772,src/serialize.h
promag,2017-08-06T08:12:46Z,Missing periods in comments.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r131536929,131536929,src/serialize.h
ryanofsky,2017-08-31T19:39:01Z,"In commit ""Add BigEndian serialization wrapper""\n\nShould also static assert sizeof(I) <= S, and std::is_unsigned\<I>::value",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136429372,136429372,src/serialize.h
ryanofsky,2017-08-31T19:42:53Z,"In commit ""Add BigEndian serialization wrapper""\n\nThis seems to support 16 and 32 bit types, not just 16.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136430185,136430185,src/serialize.h
ryanofsky,2017-08-31T19:46:01Z,"In commit ""Add BigEndian serialization wrapper""\n\nCan you add a usage note here on when big endian numbers are actually recommended? Is this only for backwards compatibility with CService? It seems like a serialization format that uses a mix of big endian and little endian numbers would be confusing to work with.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136430865,136430865,src/serialize.h
ryanofsky,2017-08-31T20:04:43Z,"Generalize CompactSize wrapper\n\nProbably should add static assert to check std::is_unsigned\<I>, or raise exception if n is less than 0.\n\nCould also check against numeric_limits\<int64_t\>::max() at runtime or compile time.\n\n(It also seems weird, though not relevant to this wrapper, that it is an error to read a compact int greater than MAX_SIZE but not to write one.)",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136435274,136435274,src/serialize.h
ryanofsky,2017-08-31T20:05:45Z,"In commit ""Generalize CompactSize wrapper""\n\nIdeally, this would throw an exception if return value is greater than numeric_limits\<I>::max()",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136435516,136435516,src/serialize.h
ryanofsky,2017-08-31T21:50:28Z,"In commit ""Generalize FlatData wrapper""\n\nThough these changes don't make FLATDATA more dangerous than it was previously, the lack of type safety relying on C casts and sizeof here is a little scary. I experimented a little, and it seems this could be cleaned up with some simple changes I posted here: 6ef78bcd83dd6f88362dec29736811b762ad75eb. Could you take a look, and maybe incorporate these i",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136457586,136457586,src/serialize.h
sipa,2017-09-01T03:34:50Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493050,136493050,src/serialize.h
sipa,2017-09-01T03:35:00Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493065,136493065,src/serialize.h
sipa,2017-09-01T03:35:09Z,Done.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493075,136493075,src/serialize.h
sipa,2017-09-01T03:36:07Z,"I've incorporated part of your changes, but gone further and just added native support for serializing char arrays (without any wrapper). I think this is much cleaner now.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493129,136493129,src/serialize.h
sipa,2017-09-01T03:36:13Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493137,136493137,src/serialize.h
sipa,2017-09-01T03:36:21Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493144,136493144,src/serialize.h
ryanofsky,2017-09-01T08:53:15Z,"In commit ""Add BigEndian serialization wrapper""\n\nWould be good to throw exception if deserialized value is greater than numeric_limits\<I>::max(). Or alternately, change the `sizeof(I) <= S` requirement to `sizeof(I) == S` to prevent this being possible.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136527772,136527772,src/serialize.h
ryanofsky,2017-09-01T08:59:59Z,"In commit ""Generalize CompactSize wrapper""\n\nWould be good to throw exception if `m_n` is greater than numeric_limits<uint64_t>::max(). Or alternately, require `numeric_limits<I>::max() < numeric_limits<int64_t>::max()` with static assert.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136529062,136529062,src/serialize.h
ryanofsky,2017-09-01T09:11:24Z,"In commit ""Overhaul FLATDATA""\n\nMight be worth splitting this change out into separate commit, or noting in commit message here that that this change is not backwards compatible on platforms where sizeof(bool) is not 1.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136531179,136531179,src/netaddress.h
ryanofsky,2017-09-01T09:16:44Z,"In commit ""Overhaul FLATDATA""\n\nProbably more accurate to say ""wrapper for serializing char arrays"". (Though in principle this could work with stream classes with read/write methods not taking char pointers.)",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136532188,136532188,src/serialize.h
ryanofsky,2017-09-01T09:32:15Z,"In commit ""Overhaul FLATDATA""\n\nMaybe call it CharVector or CharArray instead of FlatVector. FlatVector is kind of redundant because any vectors should be flat. But also the vector part is limiting because these functions can work for other types (std::array, std::string, SecureString, std::basic_string_view, etc)",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136534994,136534994,src/serialize.h
ryanofsky,2017-09-01T09:46:51Z,"In commit ""Remove old serialization primitives""\n\nThere are still two references to ADD_SERIALIZE_METHODS in comments.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136538430,136538430,src/serialize.h
sipa,2017-09-01T17:53:28Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631456,136631456,src/serialize.h
sipa,2017-09-01T17:53:37Z,Done.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631479,136631479,src/serialize.h
sipa,2017-09-01T17:53:44Z,Done.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631499,136631499,src/serialize.h
sipa,2017-09-01T17:53:51Z,Done.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631541,136631541,src/serialize.h
sipa,2017-09-01T17:53:57Z,Done.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631558,136631558,src/netaddress.h
ryanofsky,2017-09-01T18:27:41Z,"In commit ""Introduce new serialization macros without casts""\n\nIt would be nice if the `SERIALIZE_METHODS` macro took a `class_name` argument. I'd like this so it'd be possible to add deserializing constructors here (like `CTransaction` has), so there could be a uniform way to deserialize objects without assuming they support default construction. But also a `class_name` argument would make the",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136638567,136638567,src/serialize.h
ryanofsky,2017-09-01T18:30:40Z,"In commit ""Add READWRITEAS, a macro to serialize safely as a different type""\n\nMaybe use `//!`",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136639150,136639150,src/serialize.h
ryanofsky,2017-09-01T18:52:07Z,"In commit ""Generalize CompactSize wrapper""\n\nMight be good to add `const I& i` overload so it's possible to serialize rvalues.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136643231,136643231,src/serialize.h
ryanofsky,2017-09-01T18:56:22Z,"In commit ""Generalize VarInt wrappers""\n\nThis might be easier to understand written with overloads instead of rvalue references:\n\n```\ntemplate<typename I> static inline VarIntWrapper<I> VARINT(I& i) { return VarIntWrapper<I>(i); }\ntemplate<typename I> static inline VarIntWrapper<const I> VARINT(const I& i) { return VarIntWrapper<const I>(i); }\n```\n\nAlso would make it more consiste",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136644028,136644028,src/serialize.h
ryanofsky,2017-09-01T19:00:25Z,"In commit ""Overhaul FLATDATA for char arrays only""\n\nConsider dropping this assert. I don't think it accomplishes much, and in principle CharArrayWrapper should work perfectly well with wchar_t, or with any stream object that has happens to have non-`char` read and write methods.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136644775,136644775,src/serialize.h
ryanofsky,2017-09-01T19:21:22Z,"In commit ""Support deserializing into temporaries""\n\nCould drop this overload entirely. The overload above is sufficient for a base case.\n\nAlso applies to UnserializeMany below.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136648225,136648225,src/serialize.h
ryanofsky,2017-09-01T19:31:23Z,"In commit ""Generalize LimitedString wrapper""\n\nMaybe use `&m_string[0]` avoid writing to a const pointer.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136649911,136649911,src/serialize.h
ryanofsky,2017-09-01T19:55:44Z,"In commit ""Add custom vector-element serialization wrapper""\n\nThis could use a comment. I don't understand it at all. Wouldn't it be simpler and more efficient to just resize and fill the vector once instead of resizing it multiple times?",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136653725,136653725,src/serialize.h
ryanofsky,2017-09-01T20:01:39Z,"In commit ""Add custom vector-element serialization wrapper""\n\nDoesn't this overwrite elements in the front of the vector each time through the while loop?",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136654732,136654732,src/serialize.h
ryanofsky,2017-09-01T20:05:40Z,"In commit ""Convert blockencodings to new serialization""\n\nMaybe move this up closer to TransactionCompressWrapper class",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136655347,136655347,src/blockencodings.h
ryanofsky,2017-09-01T20:35:53Z,"In commit ""Convert blockencodings to new serialization""\n\nWould you be opposed to adding mutable object access to SERIALIZE_METHODS so Serialize and Unserialize methods don't need to be split up? I could think of a number of ways to do this. Maybe easiest would be to stick a mutable pointer inside ser_action:\n\n```\nSERIALIZE_METHODS(obj) {\n  READWRITE(obj.header, obj.nonce, VectorApply<U",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136660513,136660513,src/blockencodings.h
sipa,2017-09-02T00:19:26Z,Done.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683939,136683939,src/serialize.h
sipa,2017-09-02T00:19:33Z,Done!,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683943,136683943,src/serialize.h
sipa,2017-09-02T00:19:43Z,Done.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683952,136683952,src/serialize.h
sipa,2017-09-02T00:19:50Z,Done.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683956,136683956,src/serialize.h
sipa,2017-09-02T00:20:36Z,"The problem is that VARINT is called with temporaries as arguments, which is not true for the other ones. Either it's written as 4 cases, or using `std::remove_refence`.\n\nEDIT: Oh, you're right. An lvalue reference parameter binds to rvalue reference argument, so all good.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683982,136683982,src/serialize.h
sipa,2017-09-02T06:38:06Z,Done.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690564,136690564,src/serialize.h
sipa,2017-09-02T06:38:14Z,Done.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690565,136690565,src/serialize.h
sipa,2017-09-02T06:38:38Z,"Done. The code was also totally broken, so I've rewritten it.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690572,136690572,src/serialize.h
sipa,2017-09-02T06:38:53Z,Done (and for other wrappers).,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690575,136690575,src/serialize.h
sipa,2017-09-02T06:39:14Z,"Yes, this was bogus. Thanks for pointing that out; fixed by rewriting,",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690581,136690581,src/serialize.h
sipa,2017-09-02T06:39:37Z,I'm not sure that wchar_t has a well-defined in-memory representation.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690588,136690588,src/serialize.h
sipa,2017-09-02T06:39:50Z,Done.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690591,136690591,src/blockencodings.h
sipa,2017-09-03T03:29:17Z,"That's a neat trick. It seems a bit ugly to need to fake returning a mutable object nullptr. I have an alternative, but I'm not sure it's any better.:\n\n```c++\ntemplate <typename T, typename F>\nvoid IfUnserializer(T& obj, CSerActionUnserialize ser_action, const F& fn) { fn(obj); }\ntemplate <typename T, typename F>\nvoid IfUnserialize(const T& obj, CSerActionSerialize ser_action, const F&",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136707627,136707627,src/blockencodings.h
ryanofsky,2017-09-05T17:29:22Z,"> I'm not sure that wchar_t has a well-defined in-memory representation.\n\nSince this class is no longer casting any pointers, I don't think that's a problem. Existing c++ type checking will make sure pointers passed to stream read & write methods are compatible, so I don't think there is a reason for this class to be interjecting and adding extra type requirements.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137061927,137061927,src/serialize.h
ryanofsky,2017-09-05T19:40:02Z,"In commit ""Add custom vector-element serialization wrapper""\n\nMaybe declare 5MiB as a constant next to to MAX_SIZE, since it serves a similar purpose.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137093656,137093656,src/serialize.h
ryanofsky,2017-09-05T20:19:14Z,"In commit ""Convert blockencodings to new serialization""\n\nSimilar to previous suggestions, could throw here if m_int is >= 2**48 or less than 0 (or static assert is_unsigned).",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137102968,137102968,src/blockencodings.h
ryanofsky,2017-09-05T20:35:22Z,"In commit ""Convert blockencodings to new serialization""\n\nCould throw if deserialized value is greater than numeric_limits\<I>::max(), or static_assert that I max is big enough to hold any 48 bit value.\n",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137106687,137106687,src/blockencodings.h
ryanofsky,2017-09-05T20:54:31Z,"Thread https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136660513\n\nThat looks good to me. I was actually going to suggest this same approach before I noticed there was a ser_action.ForRead method. ser_action could also have a method returning a reference instead of a pointer. I think any approach that would avoid duplicating serialization & deserialization would be good, though.\n\n",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137111254,137111254,src/blockencodings.h
ryanofsky,2017-09-05T21:55:25Z,"In commit ""Convert blockencodings to new serialization""\n\nWould be good to assert or throw if indexes[i] <= indices[i-1].",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137125177,137125177,src/blockencodings.h
ryanofsky,2017-09-05T23:28:24Z,Maybe mention in commit message if behavior is changing here. I guess the limit is higher now.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137139951,137139951,src/undo.h
ryanofsky,2017-09-05T23:30:46Z,"In commit ""Convert Qt to new serialization""\n\nI guess this is another place that could use IF_UNSERIALIZE if you decide to go this route.\n",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137140260,137140260,src/qt/recentrequeststablemodel.h
ryanofsky,2017-09-05T23:41:57Z,"In commit ""Convert Qt to new serialization""\n\nIt seems like if there were serialization wrappers from QString and proto types, the serialize and deserialize methods could be combined again.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137141562,137141562,src/qt/walletmodel.h
ryanofsky,2017-09-05T23:58:14Z,"In commit ""Convert wallet/walletdb/crypter to new serialization\n\nMaybe another place to use IF_UNSERIALIZE. Or maybe there could be a wrapper that ignores ios_base errors on deserialization.\n",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137143490,137143490,src/wallet/wallet.h
ryanofsky,2017-09-06T00:02:43Z,Could use std::move here.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137143998,137143998,src/wallet/wallet.h
sipa,2017-09-06T18:34:39Z,@ryanofsky I don't see how to get rid of passing in the type to IF_UNSERIALIZE.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137353871,137353871,src/blockencodings.h
sipa,2017-09-06T18:36:04Z,"I think I'm talking about something else.\n\nIf you serialize a 16-bit wchar_t on a big endian system using this class, the characters will be serialized using 2 big endian bytes. If you then deserialize it on a little endian system, you won't get the same wchar_t values back. ",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354186,137354186,src/serialize.h
sipa,2017-09-06T18:36:21Z,Done.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354251,137354251,src/serialize.h
sipa,2017-09-06T18:36:42Z,Added static assert; I'd like to avoid runtime impact.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354337,137354337,src/blockencodings.h
sipa,2017-09-06T18:36:52Z,Added static assert.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354381,137354381,src/blockencodings.h
sipa,2017-09-06T18:37:03Z,I'd rather avoid runtime overhead.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354421,137354421,src/blockencodings.h
ryanofsky,2017-09-06T19:24:44Z,"In that case, could add a comment like ""this code will produce an invalid serialization if indices are not increasing.""",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137366161,137366161,src/blockencodings.h
ryanofsky,2017-09-06T19:28:46Z,"> @ryanofsky I don't see how to get rid of passing in the type to IF_UNSERIALIZE.\n\nYou could pass it as a template parameter to CSerActionSerialize / CSerActionUnserialize and access it through ser_action.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137367021,137367021,src/blockencodings.h
sipa,2017-09-07T06:25:13Z,"It could use slightly more memory when deserializing an otherwise invalid object, but that shouldn't change behaviour otherwise - if the number of transaction undo objects doesn't match the number of transaction in the block, it's invalid anyway.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137454932,137454932,src/undo.h
sipa,2017-09-07T19:05:11Z,Introduced a wrapper for QDateTime instead.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137629183,137629183,src/qt/recentrequeststablemodel.h
sipa,2017-09-07T19:09:15Z,Done.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137630099,137630099,src/wallet/wallet.h
sipa,2017-09-07T19:09:43Z,Done using wrappers for QString and proto.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137630189,137630189,src/qt/walletmodel.h
ryanofsky,2017-10-31T22:15:43Z,This should say `return AsStdStringWrapper<Q>(qstring)` or just `return {qstring}`,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r148142135,148142135,src/qt/guiutil.h
sipa,2017-11-02T16:07:20Z,Fixed! Thanks for figuring this out!,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r148580528,148580528,src/qt/guiutil.h
practicalswift,2018-11-17T11:00:32Z,Make this conversion explicit since it changes signedness?,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404667,234404667,src/compressor.h
practicalswift,2018-11-17T11:00:53Z,Make this conversion explicit since it changes signedness?,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404677,234404677,src/compressor.h
practicalswift,2018-11-17T11:01:46Z,Make this `explicit`? :-),https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404698,234404698,src/compressor.h
practicalswift,2018-11-17T11:02:24Z,The scope of `nVersion` can be reduced?,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404709,234404709,src/wallet/wallet.h
practicalswift,2018-11-17T11:02:40Z,`explicit`?,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404716,234404716,src/qt/walletmodel.h
practicalswift,2018-11-17T11:04:51Z,`ForRead` is no longer needed and can be removed from `serialize.h`?,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234404768,234404768,src/test/dbwrapper_tests.cpp
sipa,2018-11-19T23:54:54Z,"The best I can do in this place is cast it to `I`, which isn't making anything interesting explicit, and will just hide the warning.\n\nThe issue is that CTxOut has a signed `int64_t`, but for UTXOs only ever contains unsigned values. I think the warning, if any, is appropriate, and should remain until the actual ""issue"" (the fact that the type in outputs doesn't match its assumptions) is fixed.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234825855,234825855,src/compressor.h
practicalswift,2018-11-20T06:51:04Z,Makes sense! Thanks for the clarification.,https://github.com/bitcoin/bitcoin/pull/10785#discussion_r234885986,234885986,src/compressor.h
laanwj,2019-11-26T14:23:56Z,"This is no longer an ""if"" :smiley: ",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r350770408,350770408,src/qt/sendcoinsrecipient.h
sipa,2019-11-26T16:16:51Z,"Oops, accident revert added in a rebase. Fixed.",https://github.com/bitcoin/bitcoin/pull/10785#discussion_r350842277,350842277,src/qt/sendcoinsrecipient.h
