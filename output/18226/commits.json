[
  {
    "sha": "b29bd328e80775c7cc68d8e0c43cb006954b1181",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjliZDMyOGU4MDc3NWM3Y2M2OGQ4ZTBjNDNjYjAwNjk1NGIxMTgx",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-02-28T18:48:50Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-02-28T20:44:19Z"
      },
      "message": "refactor: Consolidate unnecessary base58 interfaces\n\nThree of these seven interfaces are functionally unused, removing them\nsimplifies the codebase.",
      "tree": {
        "sha": "acebb7433520e0693f20961e4c843d0cad6318c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acebb7433520e0693f20961e4c843d0cad6318c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b29bd328e80775c7cc68d8e0c43cb006954b1181",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJeWXulAAoJEG7l83hfeLNFeiUH/iuH5g4cOMm86fgbdIL7yVao\nRmpFZt4uWOPlNG2hG2WwW6ei5xUxJdNmZCn1I8wpyV9krbZZQgdLn9fCDSkw738F\n3TnEjPttBMkyTgHlyVJBh/c49dqKoIfOa4NPhgSivOEIY7QdDZNxnWgwNqQwgziN\nrIFPEWRX1xPWYZ/bXkyEVcDm1SrFqLlkBzF/ygY81zCSQfzeVZFZUDYrRlu3le3f\njhL/PyAkew7S9+7sQ1MjgN5OSNwiykUiyzBZIJ0L1PGFE4HiSUfFtezYzX/Q9XHK\nkTxZMGz7zhQ3OMkOa1AGGBv8Va7Oj/oQKv0ecRAWodVPhVDbfaRrVO5NTDVacww=\n=MwHj\n-----END PGP SIGNATURE-----",
        "payload": "tree acebb7433520e0693f20961e4c843d0cad6318c5\nparent fe63d79eabf1a9a0084d43802620d34f383aa358\nauthor Ben Woosley <ben.woosley@gmail.com> 1582915730 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1582922659 -0800\n\nrefactor: Consolidate unnecessary base58 interfaces\n\nThree of these seven interfaces are functionally unused, removing them\nsimplifies the codebase.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b29bd328e80775c7cc68d8e0c43cb006954b1181",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b29bd328e80775c7cc68d8e0c43cb006954b1181",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b29bd328e80775c7cc68d8e0c43cb006954b1181/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe63d79eabf1a9a0084d43802620d34f383aa358",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe63d79eabf1a9a0084d43802620d34f383aa358",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe63d79eabf1a9a0084d43802620d34f383aa358"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 23,
      "deletions": 59
    },
    "files": [
      {
        "sha": "89886c617300727908dafa4f6f111d766b46b9fd",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 24,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b29bd328e80775c7cc68d8e0c43cb006954b1181/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b29bd328e80775c7cc68d8e0c43cb006954b1181/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=b29bd328e80775c7cc68d8e0c43cb006954b1181",
        "patch": "@@ -84,8 +84,10 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch, int max_ret_\n     return true;\n }\n \n-std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n+std::string EncodeBase58(const std::vector<unsigned char>& vch)\n {\n+    const unsigned char* pbegin = vch.data();\n+    const unsigned char* pend = pbegin + vch.size();\n     // Skip & count leading zeroes.\n     int zeroes = 0;\n     int length = 0;\n@@ -124,19 +126,6 @@ std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n     return str;\n }\n \n-std::string EncodeBase58(const std::vector<unsigned char>& vch)\n-{\n-    return EncodeBase58(vch.data(), vch.data() + vch.size());\n-}\n-\n-bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len)\n-{\n-    if (!ValidAsCString(str)) {\n-        return false;\n-    }\n-    return DecodeBase58(str.c_str(), vchRet, max_ret_len);\n-}\n-\n std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n {\n     // add 4-byte hash check to the end\n@@ -146,9 +135,12 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n     return EncodeBase58(vch);\n }\n \n-bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len)\n+bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len)\n {\n-    if (!DecodeBase58(psz, vchRet, max_ret_len > std::numeric_limits<int>::max() - 4 ? std::numeric_limits<int>::max() : max_ret_len + 4) ||\n+    if (!ValidAsCString(str)) {\n+        return false;\n+    }\n+    if (!DecodeBase58(str.c_str(), vchRet, max_ret_len > std::numeric_limits<int>::max() - 4 ? std::numeric_limits<int>::max() : max_ret_len + 4) ||\n         (vchRet.size() < 4)) {\n         vchRet.clear();\n         return false;\n@@ -162,11 +154,3 @@ bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int\n     vchRet.resize(vchRet.size() - 4);\n     return true;\n }\n-\n-bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret)\n-{\n-    if (!ValidAsCString(str)) {\n-        return false;\n-    }\n-    return DecodeBase58Check(str.c_str(), vchRet, max_ret);\n-}"
      },
      {
        "sha": "5d7f5498fadf8f96a81ce2ad840744ad44df969d",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 5,
        "deletions": 23,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b29bd328e80775c7cc68d8e0c43cb006954b1181/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b29bd328e80775c7cc68d8e0c43cb006954b1181/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=b29bd328e80775c7cc68d8e0c43cb006954b1181",
        "patch": "@@ -20,40 +20,22 @@\n #include <vector>\n \n /**\n- * Encode a byte sequence as a base58-encoded string.\n- * pbegin and pend cannot be nullptr, unless both are.\n+ * Encode a byte vector as a base58-encoded string\n  */\n-std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend);\n+NODISCARD std::string EncodeBase58(const std::vector<unsigned char>& vch);\n \n /**\n- * Encode a byte vector as a base58-encoded string\n+ * Encode a byte vector into a base58-encoded string, including checksum\n  */\n-std::string EncodeBase58(const std::vector<unsigned char>& vch);\n+NODISCARD std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n \n /**\n  * Decode a base58-encoded string (psz) into a byte vector (vchRet).\n- * return true if decoding is successful.\n  * psz cannot be nullptr.\n+ * @returns true if decoding is successful.\n  */\n NODISCARD bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n-/**\n- * Decode a base58-encoded string (str) into a byte vector (vchRet).\n- * return true if decoding is successful.\n- */\n-NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n-\n-/**\n- * Encode a byte vector into a base58-encoded string, including checksum\n- */\n-std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n-\n-/**\n- * Decode a base58-encoded string (psz) that includes a checksum into a byte\n- * vector (vchRet), return true if decoding is successful\n- */\n-NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len);\n-\n /**\n  * Decode a base58-encoded string (str) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful"
      },
      {
        "sha": "5fcd9bba14a1731d742e4d62cda0a02ef8639b44",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b29bd328e80775c7cc68d8e0c43cb006954b1181/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b29bd328e80775c7cc68d8e0c43cb006954b1181/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=b29bd328e80775c7cc68d8e0c43cb006954b1181",
        "patch": "@@ -9,7 +9,6 @@\n #include <array>\n #include <vector>\n \n-\n static void Base58Encode(benchmark::State& state)\n {\n     static const std::array<unsigned char, 32> buff = {\n@@ -19,8 +18,10 @@ static void Base58Encode(benchmark::State& state)\n             200, 24\n         }\n     };\n+    std::vector<unsigned char> vch;\n+    vch.assign(buff.begin(), buff.end());\n     while (state.KeepRunning()) {\n-        EncodeBase58(buff.data(), buff.data() + buff.size());\n+        (void) EncodeBase58(vch);\n     }\n }\n \n@@ -37,7 +38,7 @@ static void Base58CheckEncode(benchmark::State& state)\n     std::vector<unsigned char> vch;\n     vch.assign(buff.begin(), buff.end());\n     while (state.KeepRunning()) {\n-        EncodeBase58Check(vch);\n+        (void) EncodeBase58Check(vch);\n     }\n }\n "
      },
      {
        "sha": "dff6b0cc49104ef47b81ab33feded679cd695fb0",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b29bd328e80775c7cc68d8e0c43cb006954b1181/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b29bd328e80775c7cc68d8e0c43cb006954b1181/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=b29bd328e80775c7cc68d8e0c43cb006954b1181",
        "patch": "@@ -92,7 +92,7 @@ static std::string DummyAddress(const CChainParams &params)\n     std::vector<unsigned char> sourcedata = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n     sourcedata.insert(sourcedata.end(), dummydata, dummydata + sizeof(dummydata));\n     for(int i=0; i<256; ++i) { // Try every trailing byte\n-        std::string s = EncodeBase58(sourcedata.data(), sourcedata.data() + sourcedata.size());\n+        std::string s = EncodeBase58(sourcedata);\n         if (!IsValidDestinationString(s)) {\n             return s;\n         }"
      },
      {
        "sha": "b8607374e7186a160e96c71ff08fd879b0674945",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b29bd328e80775c7cc68d8e0c43cb006954b1181/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b29bd328e80775c7cc68d8e0c43cb006954b1181/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=b29bd328e80775c7cc68d8e0c43cb006954b1181",
        "patch": "@@ -33,7 +33,7 @@ BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n         std::vector<unsigned char> sourcedata = ParseHex(test[0].get_str());\n         std::string base58string = test[1].get_str();\n         BOOST_CHECK_MESSAGE(\n-                    EncodeBase58(sourcedata.data(), sourcedata.data() + sourcedata.size()) == base58string,\n+                    EncodeBase58(sourcedata) == base58string,\n                     strTest);\n     }\n }\n@@ -54,18 +54,15 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n         }\n         std::vector<unsigned char> expected = ParseHex(test[0].get_str());\n         std::string base58string = test[1].get_str();\n-        BOOST_CHECK_MESSAGE(DecodeBase58(base58string, result, 256), strTest);\n+        BOOST_CHECK_MESSAGE(DecodeBase58(base58string.c_str(), result, 256), strTest);\n         BOOST_CHECK_MESSAGE(result.size() == expected.size() && std::equal(result.begin(), result.end(), expected.begin()), strTest);\n     }\n \n     BOOST_CHECK(!DecodeBase58(\"invalid\", result, 100));\n-    BOOST_CHECK(!DecodeBase58(std::string(\"invalid\"), result, 100));\n-    BOOST_CHECK(!DecodeBase58(std::string(\"\\0invalid\", 8), result, 100));\n \n-    BOOST_CHECK(DecodeBase58(std::string(\"good\", 4), result, 100));\n-    BOOST_CHECK(!DecodeBase58(std::string(\"bad0IOl\", 7), result, 100));\n-    BOOST_CHECK(!DecodeBase58(std::string(\"goodbad0IOl\", 11), result, 100));\n-    BOOST_CHECK(!DecodeBase58(std::string(\"good\\0bad0IOl\", 12), result, 100));\n+    BOOST_CHECK(DecodeBase58(\"good\", result, 100));\n+    BOOST_CHECK(!DecodeBase58(\"bad0IOl\", result, 100));\n+    BOOST_CHECK(!DecodeBase58(\"goodbad0IOl\", result, 100));\n \n     // check that DecodeBase58 skips whitespace, but still fails with unexpected non-whitespace at the end.\n     BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result, 3));"
      }
    ]
  },
  {
    "sha": "464bee876eb279e81fda687bd4a3f116056b0bdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjRiZWU4NzZlYjI3OWU4MWZkYTY4N2JkNGEzZjExNjA1NmIwYmRk",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-02-28T19:17:36Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-02-28T20:44:29Z"
      },
      "message": "Assert against invalid args to DecodeBase58",
      "tree": {
        "sha": "ca816e2738c66f4e4c15f49cdf8531bb90135f83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca816e2738c66f4e4c15f49cdf8531bb90135f83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/464bee876eb279e81fda687bd4a3f116056b0bdd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJeWXutAAoJEG7l83hfeLNFGQ8IAIKH4gjcAxLbdoppfTJpk+H9\nLlLTCRtZPTn/f18e9DgELb3QG9M1ApRj6G/5/bREknIyGx888MBXunODyi12SJRd\njBNQV5i/e4DiPo5l11n8I75CIhkIMHFofUrgqUyBQVtYC4r6XEBpg5Ds9tPPl8+9\nimUGv7bSOkbr2eiKnDhDge0WGPZibmTMZnWk5L9YPVwPMH/EV7pJx38TVNQWuR0K\nqrwIa2dP6RVNevX6wHF5/JCd9YU3yscY+4DSRFHw+8pL3sIi4z6yqOJiCchwhwmn\nZMEYk3O9h8KSUDlORtn5bXLnCJVZGegxLcP933E58UOMrYEWUUz9OclMfk1eU7g=\n=J5+V\n-----END PGP SIGNATURE-----",
        "payload": "tree ca816e2738c66f4e4c15f49cdf8531bb90135f83\nparent b29bd328e80775c7cc68d8e0c43cb006954b1181\nauthor Ben Woosley <ben.woosley@gmail.com> 1582917456 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1582922669 -0800\n\nAssert against invalid args to DecodeBase58\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/464bee876eb279e81fda687bd4a3f116056b0bdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/464bee876eb279e81fda687bd4a3f116056b0bdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/464bee876eb279e81fda687bd4a3f116056b0bdd/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b29bd328e80775c7cc68d8e0c43cb006954b1181",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b29bd328e80775c7cc68d8e0c43cb006954b1181",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b29bd328e80775c7cc68d8e0c43cb006954b1181"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e3c84bd86be372830b05c027920545ef1c02afff",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/464bee876eb279e81fda687bd4a3f116056b0bdd/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/464bee876eb279e81fda687bd4a3f116056b0bdd/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=464bee876eb279e81fda687bd4a3f116056b0bdd",
        "patch": "@@ -37,6 +37,8 @@ static const int8_t mapBase58[256] = {\n \n bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch, int max_ret_len)\n {\n+    assert(psz != nullptr);\n+    assert(max_ret_len > 0);\n     // Skip leading spaces.\n     while (*psz && IsSpace(*psz))\n         psz++;"
      }
    ]
  }
]