[
  {
    "sha": "c516c3a770e93dcd283dc4a9275cba88221d0e3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTE2YzNhNzcwZTkzZGNkMjgzZGM0YTkyNzVjYmE4ODIyMWQwZTNh",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-20T13:32:06Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-08-25T13:08:16Z"
      },
      "message": "[contrib] Support ARM and RISC-V symbol check",
      "tree": {
        "sha": "4dc8686aee52329b3c42a2245a62fca1387a7738",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dc8686aee52329b3c42a2245a62fca1387a7738"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c516c3a770e93dcd283dc4a9275cba88221d0e3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c516c3a770e93dcd283dc4a9275cba88221d0e3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c516c3a770e93dcd283dc4a9275cba88221d0e3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c516c3a770e93dcd283dc4a9275cba88221d0e3a/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55c18a45305f9e89a726f8cf82a7b16a2ab7f955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55c18a45305f9e89a726f8cf82a7b16a2ab7f955",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55c18a45305f9e89a726f8cf82a7b16a2ab7f955"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 32,
      "deletions": 29
    },
    "files": [
      {
        "sha": "c6158c94225adfa7760484c4e4c2c771450d8b08",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 31,
        "deletions": 17,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c516c3a770e93dcd283dc4a9275cba88221d0e3a/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c516c3a770e93dcd283dc4a9275cba88221d0e3a/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=c516c3a770e93dcd283dc4a9275cba88221d0e3a",
        "patch": "@@ -36,17 +36,18 @@\n #   (glibc)    GLIBC_2_11\n #\n MAX_VERSIONS = {\n-'GCC':     (4,4,0),\n-'CXXABI':  (1,3,3),\n-'GLIBCXX': (3,4,13),\n-'GLIBC':   (2,11)\n+'GCC':       (4,4,0),\n+'CXXABI':    (1,3,3),\n+'GLIBCXX':   (3,4,13),\n+'GLIBC':     (2,11),\n+'LIBATOMIC': (1,0)\n }\n # See here for a description of _IO_stdin_used:\n # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=634261#109\n \n # Ignore symbols that are exported as part of every executable\n IGNORE_EXPORTS = {\n-'_edata', '_end', '_init', '__bss_start', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr'\n+'_edata', '_end', '__end__', '_init', '__bss_start', '__bss_start__', '_bss_end__', '__bss_end__', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr'\n }\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n@@ -59,8 +60,12 @@\n 'libanl.so.1', # DNS resolve\n 'libm.so.6', # math library\n 'librt.so.1', # real-time (clock)\n+'libatomic.so.1',\n 'ld-linux-x86-64.so.2', # 64-bit dynamic linker\n 'ld-linux.so.2', # 32-bit dynamic linker\n+'ld-linux-aarch64.so.1', # 64-bit ARM dynamic linker\n+'ld-linux-armhf.so.3', # 32-bit ARM dynamic linker\n+'ld-linux-riscv64-lp64d.so.1', # 64-bit RISC-V dynamic linker\n # bitcoin-qt only\n 'libX11-xcb.so.1', # part of X11\n 'libX11.so.6', # part of X11\n@@ -69,7 +74,13 @@\n 'libfreetype.so.6', # font parsing\n 'libdl.so.2' # programming interface to dynamic linker\n }\n-\n+ARCH_MIN_GLIBC_VER = {\n+'80386':  (2,1),\n+'X86-64': (2,2,5),\n+'ARM':    (2,4),\n+'AArch64':(2,17),\n+'RISC-V': (2,27)\n+}\n class CPPFilt(object):\n     '''\n     Demangle C++ symbol names.\n@@ -94,23 +105,25 @@ def read_symbols(executable, imports=True):\n     Parse an ELF executable and return a list of (symbol,version) tuples\n     for dynamic, imported symbols.\n     '''\n-    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', '-h', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n     (stdout, stderr) = p.communicate()\n     if p.returncode:\n         raise IOError('Could not read symbols for %s: %s' % (executable, stderr.strip()))\n     syms = []\n     for line in stdout.splitlines():\n         line = line.split()\n+        if 'Machine:' in line:\n+            arch = line[-1]\n         if len(line)>7 and re.match('[0-9]+:$', line[0]):\n             (sym, _, version) = line[7].partition('@')\n             is_import = line[6] == 'UND'\n             if version.startswith('@'):\n                 version = version[1:]\n             if is_import == imports:\n-                syms.append((sym, version))\n+                syms.append((sym, version, arch))\n     return syms\n \n-def check_version(max_versions, version):\n+def check_version(max_versions, version, arch):\n     if '_' in version:\n         (lib, _, ver) = version.rpartition('_')\n     else:\n@@ -119,7 +132,7 @@ def check_version(max_versions, version):\n     ver = tuple([int(x) for x in ver.split('.')])\n     if not lib in max_versions:\n         return False\n-    return ver <= max_versions[lib]\n+    return ver <= max_versions[lib] or lib == 'GLIBC' and ver <= ARCH_MIN_GLIBC_VER[arch]\n \n def read_libraries(filename):\n     p = subprocess.Popen([READELF_CMD, '-d', '-W', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n@@ -142,16 +155,17 @@ def read_libraries(filename):\n     retval = 0\n     for filename in sys.argv[1:]:\n         # Check imported symbols\n-        for sym,version in read_symbols(filename, True):\n-            if version and not check_version(MAX_VERSIONS, version):\n+        for sym,version,arch in read_symbols(filename, True):\n+            if version and not check_version(MAX_VERSIONS, version, arch):\n                 print('%s: symbol %s from unsupported version %s' % (filename, cppfilt(sym), version))\n                 retval = 1\n         # Check exported symbols\n-        for sym,version in read_symbols(filename, False):\n-            if sym in IGNORE_EXPORTS:\n-                continue\n-            print('%s: export of symbol %s not allowed' % (filename, cppfilt(sym)))\n-            retval = 1\n+        if arch != 'RISC-V':\n+            for sym,version,arch in read_symbols(filename, False):\n+                if sym in IGNORE_EXPORTS:\n+                    continue\n+                print('%s: export of symbol %s not allowed' % (filename, cppfilt(sym)))\n+                retval = 1\n         # Check dependency libraries\n         for library_name in read_libraries(filename):\n             if library_name not in ALLOWED_LIBRARIES:"
      },
      {
        "sha": "1d62a3bca87699b9f9ab17bd20d74e34df2a5713",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c516c3a770e93dcd283dc4a9275cba88221d0e3a/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c516c3a770e93dcd283dc4a9275cba88221d0e3a/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=c516c3a770e93dcd283dc4a9275cba88221d0e3a",
        "patch": "@@ -173,18 +173,7 @@ script: |\n     CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\" LDFLAGS=\"${HOST_LDFLAGS}\"\n     make ${MAKEOPTS}\n     make ${MAKEOPTS} -C src check-security\n-\n-    #TODO: This is a quick hack that disables symbol checking for arm.\n-    #      Instead, we should investigate why these are popping up.\n-    #      For aarch64, we'll need to bump up the min GLIBC version, as the abi\n-    #      support wasn't introduced until 2.17.\n-    case $i in\n-       aarch64-*) : ;;\n-       arm-*) : ;;\n-       riscv64-*) : ;;\n-       *) make ${MAKEOPTS} -C src check-symbols ;;\n-    esac\n-\n+    make ${MAKEOPTS} -C src check-symbols\n     make install DESTDIR=${INSTALLPATH}\n     cd installed\n     find . -name \"lib*.la\" -delete"
      }
    ]
  }
]