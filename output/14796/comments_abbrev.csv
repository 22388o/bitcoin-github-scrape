promag,2018-11-24T01:03:50Z,:clap: ,https://github.com/bitcoin/bitcoin/pull/14796#issuecomment-441334578,441334578,
DrahtBot,2018-11-24T01:37:59Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14707](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14707.html) ([RPC] Include coinbase transactions in rece",https://github.com/bitcoin/bitcoin/pull/14796#issuecomment-441336111,441336111,
practicalswift,2018-11-25T21:04:49Z,Shadows `const RPCArg& arg` :-),https://github.com/bitcoin/bitcoin/pull/14796#discussion_r236089980,236089980,src/rpc/util.cpp
practicalswift,2018-11-25T21:04:58Z,Same here.,https://github.com/bitcoin/bitcoin/pull/14796#discussion_r236089985,236089985,src/rpc/util.cpp
MarcoFalke,2018-11-26T16:09:50Z,Thx. Fixed both,https://github.com/bitcoin/bitcoin/pull/14796#discussion_r236317854,236317854,src/rpc/util.cpp
ryanofsky,2018-12-03T20:38:53Z,"New help seems little strange with vout_index on its own line and with no description.\n\n```\n       ""subtractFeeFromOutputs"":[    (json array, optional) A json array of integers.\n                                     The fee will be equally deducted from the amount of each specified output.\n                                     The outputs are specified by their zero-based index, before any",https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238427969,238427969,src/wallet/rpcwallet.cpp
ryanofsky,2018-12-03T21:04:04Z,"Output is changing here as follows:\n\n```diff\n-""redeemscript"": ""<script>""  \n+""redeemscript"":""str"",\n```\n\nBut previous output seems better, and it would be nice if the same pattern could be used in other places.\n\nThe ""\<variable>"" notation is nice because it allows distinguishing variable strings from literal strings. The current convention where you're supposed to magically know th",https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238436189,238436189,src/wallet/rpcdump.cpp
ryanofsky,2018-12-03T21:21:08Z,"Output is:\n\n```\n2. dummy        (numeric, required) API-Compatibility for previous API. Must be zero or null.\n```\n\nShould this say optional instead of required since value can be null?",https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238441745,238441745,src/rpc/mining.cpp
ryanofsky,2018-12-03T21:43:15Z,"Output changes as follows:\n\n```diff\n-""address"": x.xxx\n+""address"":amount,\n-""data"": ""hex""\n+""data"":""hex"",\n```\n\nI think it would be a little nicer to keep the spaces after colons. If you look for JSON examples on the internet they tend to include spaces e.g., https://en.wikipedia.org/wiki/JSON#JSON_sample, https://json.org/example.html, and tools like `jq` and javascript devtools als",https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238448708,238448708,src/rpc/rawtransaction.cpp
ryanofsky,2018-12-03T21:54:57Z,"Would be more optimal to take strings by value instead of const reference to avoid copying:\n\n```c++\nRPCArg(std::string name) : m_name(std::move(name)) {}\n```\n\nIn general this a better pattern to follow when a function inserts a value into a structure.",https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238452498,238452498,src/rpc/util.h
ryanofsky,2018-12-03T21:59:24Z,"Might be more appropriate to use `optional<tuple<string, string>>`",https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238454099,238454099,src/rpc/util.h
ryanofsky,2018-12-03T22:00:48Z,Can you add a comment saying what implicitly_required means?,https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238454535,238454535,src/rpc/util.h
ryanofsky,2018-12-03T22:05:56Z,"Generally a better pattern anytime you have a function which inserts a value into a larger data structure is to take the argument by value instead of reference, and use std::move() to avoid copying.",https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238456186,238456186,src/rpc/util.cpp
ryanofsky,2018-12-03T22:14:54Z,Why keep this member? It seems like keeping it could only lead to inconsistencies or omissions in the  output. It would be easy to define an `bool IsOptional() const { return !m_default.value.empty(); }` helper if needed for convenience.,https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238459116,238459116,src/rpc/util.h
MarcoFalke,2018-12-04T16:44:48Z,"Sure, but this will be a follow up pull request, since it needs someone to actually supply the default value when the argument is optional. See also the comment in the cpp file:\n\n```cpp\n// TODO enable this assert, when all optional parameters have their default value documented\n//assert(false);",https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238744740,238744740,src/rpc/util.h
MarcoFalke,2018-12-04T16:59:13Z,Done,https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238750824,238750824,src/wallet/rpcwallet.cpp
MarcoFalke,2018-12-04T17:36:00Z,"This should be done in a separate pull request, since it will change most of the existing documentation and this pull request's goal is to normalize all documentation to a single standard.",https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238764895,238764895,src/wallet/rpcdump.cpp
MarcoFalke,2018-12-04T17:37:42Z,"This conflicts the existing one-line summary, so I'd prefer to keep the changes to the documentation minimal and only normalize everything and then do the cleanup in follow up pull requests.\n\nThis is among the changes I have queued up.",https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238765557,238765557,src/rpc/mining.cpp
MarcoFalke,2018-12-04T17:38:59Z,Good point.,https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238765995,238765995,src/rpc/rawtransaction.cpp
MarcoFalke,2018-12-04T18:28:58Z,"It is set to true for arguments in an array, because those are commonly omitted in the current help texts.\n\n* I presume this is because they are implicitly required if you pass an array, but are still optional because you can pass different number of args in. I think it should be clear from context what the interface looks like.",https://github.com/bitcoin/bitcoin/pull/14796#discussion_r238783514,238783514,src/rpc/util.h
