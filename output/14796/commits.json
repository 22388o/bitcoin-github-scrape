[
  {
    "sha": "1db0096f61680d2b2a9cfe454154de3ad121a9d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZGIwMDk2ZjYxNjgwZDJiMmE5Y2ZlNDU0MTU0ZGUzYWQxMjFhOWQz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-23T16:21:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-27T19:18:19Z"
      },
      "message": "rpc: Pass argument descriptions to RPCHelpMan",
      "tree": {
        "sha": "0c6e79b59ed1822cf86ac97866d0c67a2aea29b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c6e79b59ed1822cf86ac97866d0c67a2aea29b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1db0096f61680d2b2a9cfe454154de3ad121a9d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1db0096f61680d2b2a9cfe454154de3ad121a9d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1db0096f61680d2b2a9cfe454154de3ad121a9d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1db0096f61680d2b2a9cfe454154de3ad121a9d3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c119b27551f56db72bfbdb9ed632b4deb19e161",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c119b27551f56db72bfbdb9ed632b4deb19e161",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c119b27551f56db72bfbdb9ed632b4deb19e161"
      }
    ],
    "stats": {
      "total": 1811,
      "additions": 780,
      "deletions": 1031
    },
    "files": [
      {
        "sha": "0eb5c2baeca96b12f8aaffb6a78f4d94cd76ab7c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 107,
        "changes": 154,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1db0096f61680d2b2a9cfe454154de3ad121a9d3",
        "patch": "@@ -212,7 +212,7 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n-                    {\"timeout\", RPCArg::Type::NUM, true},\n+                    {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"\"},\n                 }}\n                 .ToString() +\n             \"\\nArguments:\\n\"\n@@ -254,13 +254,10 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR, false},\n-                    {\"timeout\", RPCArg::Type::NUM, true},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"Block hash to wait for.\"},\n+                    {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\" (required, string) Block hash to wait for.\\n\"\n-            \"2. timeout       (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n             \"\\nResult:\\n\"\n             \"{                           (json object)\\n\"\n             \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n@@ -302,13 +299,10 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n                 \"of the current tip.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, false},\n-                    {\"timeout\", RPCArg::Type::NUM, true},\n+                    {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Block height to wait for.\"},\n+                    {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. height  (int, required) Block height to wait for.\\n\"\n-            \"2. timeout (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n             \"\\nResult:\\n\"\n             \"{                           (json object)\\n\"\n             \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n@@ -496,14 +490,12 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n             RPCHelpMan{\"getrawmempool\",\n-                \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\",\n+                \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n+                \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\",\n                 {\n-                    {\"verbose\", RPCArg::Type::BOOL, true},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n                 }}\n                 .ToString() +\n-            \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n             \"\\nResult: (for verbose = false):\\n\"\n             \"[                     (json array of string)\\n\"\n             \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n@@ -534,13 +526,10 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmempoolancestors\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, false},\n-                    {\"verbose\", RPCArg::Type::BOOL, true},\n+                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"                 (string, required) The transaction id (must be in mempool)\\n\"\n-            \"2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n             \"\\nResult (for verbose = false):\\n\"\n             \"[                       (json array of strings)\\n\"\n             \"  \\\"transactionid\\\"           (string) The transaction id of an in-mempool ancestor transaction\\n\"\n@@ -603,13 +592,10 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmempooldescendants\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, false},\n-                    {\"verbose\", RPCArg::Type::BOOL, true},\n+                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"                 (string, required) The transaction id (must be in mempool)\\n\"\n-            \"2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n             \"\\nResult (for verbose = false):\\n\"\n             \"[                       (json array of strings)\\n\"\n             \"  \\\"transactionid\\\"           (string) The transaction id of an in-mempool descendant transaction\\n\"\n@@ -672,11 +658,9 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmempoolentry\",\n                 \"\\nReturns mempool data for given transaction\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"                   (string, required) The transaction id (must be in mempool)\\n\"\n             \"\\nResult:\\n\"\n             \"{                           (json object)\\n\"\n             + EntryDescriptionString()\n@@ -709,11 +693,9 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n             RPCHelpMan{\"getblockhash\",\n                 \"\\nReturns hash of block in best-block-chain at height provided.\\n\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, false},\n+                    {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The height index\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. height         (numeric, required) The height index\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"hash\\\"         (string) The block hash\\n\"\n             \"\\nExamples:\\n\"\n@@ -739,13 +721,10 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n                 \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n                 \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, false},\n-                    {\"verbose\", RPCArg::Type::BOOL, true},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The block hash\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"true for a json object, false for the hex-encoded data\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"     (string, required) The block hash\\n\"\n-            \"2. verbose           (boolean, optional, default=true) true for a json object, false for the hex-encoded data\\n\"\n             \"\\nResult (for verbose = true):\\n\"\n             \"{\\n\"\n             \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n@@ -823,13 +802,10 @@ static UniValue getblock(const JSONRPCRequest& request)\n                 \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n                 \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, false},\n-                    {\"verbosity\", RPCArg::Type::NUM, true},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The block hash\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"          (string, required) The block hash\\n\"\n-            \"2. verbosity              (numeric, optional, default=1) 0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\\n\"\n             \"\\nResult (for verbosity = 0):\\n\"\n             \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n             \"\\nResult (for verbosity = 1):\\n\"\n@@ -977,12 +953,10 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             RPCHelpMan{\"pruneblockchain\", \"\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, false},\n+                    {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n+            \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n-            \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\\n\"\n             \"\\nResult:\\n\"\n             \"n    (numeric) Height of the last block pruned.\\n\"\n             \"\\nExamples:\\n\"\n@@ -1075,16 +1049,11 @@ UniValue gettxout(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxout\",\n                 \"\\nReturns details about an unspent transaction output.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR, false},\n-                    {\"n\", RPCArg::Type::NUM, false},\n-                    {\"include_mempool\", RPCArg::Type::BOOL, true},\n+                    {\"txid\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n+                    {\"n\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"vout number\"},\n+                    {\"include_mempool\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"             (string, required) The transaction id\\n\"\n-            \"2. \\\"n\\\"                (numeric, required) vout number\\n\"\n-            \"3. \\\"include_mempool\\\"  (boolean, optional) Whether to include the mempool. Default: true.\"\n-            \"     Note that an unspent output that is spent in the mempool won't appear.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"bestblock\\\":  \\\"hash\\\",    (string) The hash of the block at the tip of the chain\\n\"\n@@ -1161,13 +1130,10 @@ static UniValue verifychain(const JSONRPCRequest& request)\n             RPCHelpMan{\"verifychain\",\n                 \"\\nVerifies blockchain database.\\n\",\n                 {\n-                    {\"checklevel\", RPCArg::Type::NUM, true},\n-                    {\"nblocks\", RPCArg::Type::NUM, true},\n+                    {\"checklevel\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ strprintf(\"%d, range=0-4\", nCheckLevel), \"How thorough the block verification is.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ strprintf(\"%d, 0=all\", nCheckDepth), \"The number of blocks to check.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. checklevel   (numeric, optional, 0-4, default=\" + strprintf(\"%d\", nCheckLevel) + \") How thorough the block verification is.\\n\"\n-            \"2. nblocks      (numeric, optional, default=\" + strprintf(\"%d\", nCheckDepth) + \", 0=all) The number of blocks to check.\\n\"\n             \"\\nResult:\\n\"\n             \"true|false       (boolean) Verified or not\\n\"\n             \"\\nExamples:\\n\"\n@@ -1526,11 +1492,9 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n                 \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n                 \"\\nThe effects of preciousblock are not retained across restarts.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, false},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to mark as precious\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"   (string, required) the hash of the block to mark as precious\\n\"\n             \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"preciousblock\", \"\\\"blockhash\\\"\")\n@@ -1565,11 +1529,9 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n             RPCHelpMan{\"invalidateblock\",\n                 \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, false},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to mark as invalid\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"   (string, required) the hash of the block to mark as invalid\\n\"\n             \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"invalidateblock\", \"\\\"blockhash\\\"\")\n@@ -1608,11 +1570,9 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n                 \"\\nRemoves invalidity status of a block and its descendants, reconsider them for activation.\\n\"\n                 \"This can be used to undo the effects of invalidateblock.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, false},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to reconsider\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"   (string, required) the hash of the block to reconsider\\n\"\n             \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n@@ -1648,13 +1608,10 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n             RPCHelpMan{\"getchaintxstats\",\n                 \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, true},\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, true},\n+                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"one month\", \"Size of the window in number of blocks\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"\", \"The hash of the block that ends the window.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks      (numeric, optional) Size of the window in number of blocks (default: one month).\\n\"\n-            \"2. \\\"blockhash\\\"  (string, optional) The hash of the block that ends the window.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"time\\\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.\\n\"\n@@ -1785,23 +1742,15 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                 \"It won't work for some heights with pruning.\\n\"\n                 \"It won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\",\n                 {\n-                    {\"hash_or_height\", RPCArg::Type::NUM, false},\n-                    {\"stats\", RPCArg::Type::ARR,\n+                    {\"hash_or_height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The block hash or height of the target block\", \"\", {\"\", \"string or numeric\"}},\n+                    {\"stats\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"Values to plot, by default all values (see result below)\",\n                         {\n-                            {\"height\", RPCArg::Type::STR, true},\n-                            {\"time\", RPCArg::Type::STR, true},\n+                            {\"height\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Selected statistic\"},\n+                            {\"time\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Selected statistic\"},\n                         },\n-                        true, \"stats\"},\n+                        \"stats\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block\\n\"\n-            \"2. \\\"stats\\\"              (array,  optional) Values to plot, by default all values (see result below)\\n\"\n-            \"    [\\n\"\n-            \"      \\\"height\\\",         (string, optional) Selected statistic\\n\"\n-            \"      \\\"time\\\",           (string, optional) Selected statistic\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n             \"\\nResult:\\n\"\n             \"{                           (json object)\\n\"\n             \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n@@ -2153,33 +2102,24 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                 \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n                 \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n                 {\n-                    {\"action\", RPCArg::Type::STR, false},\n-                    {\"scanobjects\", RPCArg::Type::ARR,\n+                    {\"action\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"Array of scan objects\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n                         {\n-                            {\"descriptor\", RPCArg::Type::OBJ,\n+                            {\"descriptor\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"An object with output descriptor and metadata\",\n                                 {\n-                                    {\"desc\", RPCArg::Type::STR, false},\n-                                    {\"range\", RPCArg::Type::NUM, true},\n+                                    {\"desc\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1000\", \"Up to what child index HD chains should be explored\"},\n                                 },\n-                                false, \"scanobjects\"},\n+                            },\n                         },\n-                        false},\n+                        \"[scanobjects,...]\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"action\\\"                       (string, required) The action to execute\\n\"\n-            \"                                      \\\"start\\\" for starting a scan\\n\"\n-            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n-            \"                                      \\\"status\\\" for progress report (in %) of the current scan\\n\"\n-            \"2. \\\"scanobjects\\\"                  (array, required) Array of scan objects\\n\"\n-            \"    [                             Every scan object is either a string descriptor or an object:\\n\"\n-            \"        \\\"descriptor\\\",             (string, optional) An output descriptor\\n\"\n-            \"        {                         (object, optional) An object with output descriptor and metadata\\n\"\n-            \"          \\\"desc\\\": \\\"descriptor\\\",   (string, required) An output descriptor\\n\"\n-            \"          \\\"range\\\": n,             (numeric, optional) Up to what child index HD chains should be explored (default: 1000)\\n\"\n-            \"        },\\n\"\n-            \"        ...\\n\"\n-            \"    ]\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"unspents\\\": [\\n\""
      },
      {
        "sha": "f0a7589cfbe08b9723260986f2c5813bde81a8f7",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 70,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=1db0096f61680d2b2a9cfe454154de3ad121a9d3",
        "patch": "@@ -92,13 +92,10 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n                 \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n                 \"Pass in [height] to estimate the network speed at the time when a certain block was found.\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, true},\n-                    {\"height\", RPCArg::Type::NUM, true},\n+                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"120\", \"The number of blocks, or -1 for blocks since last difficulty change.\"},\n+                    {\"height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"-1\", \"To estimate at the time of the given height.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.\\n\"\n-            \"2. height      (numeric, optional, default=-1) To estimate at the time of the given height.\\n\"\n             \"\\nResult:\\n\"\n             \"x             (numeric) Hashes per second estimated\\n\"\n             \"\\nExamples:\\n\"\n@@ -165,15 +162,11 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n             RPCHelpMan{\"generatetoaddress\",\n                 \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, false},\n-                    {\"address\", RPCArg::Type::STR, false},\n-                    {\"maxtries\", RPCArg::Type::NUM, true},\n+                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"How many blocks are generated immediately.\"},\n+                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The address to send the newly generated bitcoin to.\"},\n+                    {\"maxtries\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1000000\", \"How many iterations to try.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n-            \"2. address      (string, required) The address to send the newly generated bitcoin to.\\n\"\n-            \"3. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n             \"\\nResult:\\n\"\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n             \"\\nExamples:\\n\"\n@@ -247,19 +240,15 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n             RPCHelpMan{\"prioritisetransaction\",\n                 \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR, false},\n-                    {\"dummy\", RPCArg::Type::NUM, false},\n-                    {\"fee_delta\", RPCArg::Type::NUM, false},\n-                }}\n-                .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"       (string, required) The transaction id.\\n\"\n-            \"2. dummy          (numeric, optional) API-Compatibility for previous API. Must be zero or null.\\n\"\n-            \"                  DEPRECATED. For forward compatibility use named arguments and omit this parameter.\\n\"\n-            \"3. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n+                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id.\"},\n+                    {\"dummy\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"API-Compatibility for previous API. Must be zero or null.\\n\"\n+            \"                  DEPRECATED. For forward compatibility use named arguments and omit this parameter.\"},\n+                    {\"fee_delta\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n             \"                  Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.\\n\"\n             \"                  The fee is not actually paid, only the algorithm for selecting transactions into a block\\n\"\n-            \"                  considers the transaction as it would have paid a higher (or lower) fee.\\n\"\n+            \"                  considers the transaction as it would have paid a higher (or lower) fee.\"},\n+                }}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"true              (boolean) Returns true\\n\"\n             \"\\nExamples:\\n\"\n@@ -322,38 +311,23 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n                 {\n-                    {\"template_request\", RPCArg::Type::OBJ,\n+                    {\"template_request\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"A json object in the following spec\",\n                         {\n-                            {\"mode\", RPCArg::Type::STR, true},\n-                            {\"capabilities\", RPCArg::Type::ARR,\n+                            {\"mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n+                            {\"capabilities\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A list of strings\",\n                                 {\n-                                    {\"support\", RPCArg::Type::STR, true},\n+                                    {\"support\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n                                 },\n-                                true},\n-                            {\"rules\", RPCArg::Type::ARR,\n+                                },\n+                            {\"rules\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A list of strings\",\n                                 {\n-                                    {\"support\", RPCArg::Type::STR, true},\n+                                    {\"support\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"client side supported softfork deployment\"},\n+                                },\n                                 },\n-                                true},\n                         },\n-                        true, \"\\\"template_request\\\"\"},\n+                        \"\\\"template_request\\\"\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. template_request         (json object, optional) A json object in the following spec\\n\"\n-            \"     {\\n\"\n-            \"       \\\"mode\\\":\\\"template\\\"    (string, optional) This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\\n\"\n-            \"       \\\"capabilities\\\":[     (array, optional) A list of strings\\n\"\n-            \"           \\\"support\\\"          (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\\n\"\n-            \"           ,...\\n\"\n-            \"       ],\\n\"\n-            \"       \\\"rules\\\":[            (array, optional) A list of strings\\n\"\n-            \"           \\\"support\\\"          (string) client side supported softfork deployment\\n\"\n-            \"           ,...\\n\"\n-            \"       ]\\n\"\n-            \"     }\\n\"\n-            \"\\n\"\n-\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"version\\\" : n,                    (numeric) The preferred block version\\n\"\n@@ -742,13 +716,10 @@ static UniValue submitblock(const JSONRPCRequest& request)\n                 \"\\nAttempts to submit new block to network.\\n\"\n                 \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\",\n                 {\n-                    {\"hexdata\", RPCArg::Type::STR_HEX, false},\n-                    {\"dummy\", RPCArg::Type::STR, true},\n+                    {\"hexdata\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded block data to submit\"},\n+                    {\"dummy\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments\\n\"\n-            \"1. \\\"hexdata\\\"        (string, required) the hex-encoded block data to submit\\n\"\n-            \"2. \\\"dummy\\\"          (optional) dummy value, for compatibility with BIP22. This value is ignored.\\n\"\n             \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"submitblock\", \"\\\"mydata\\\"\")\n@@ -810,11 +781,9 @@ static UniValue submitheader(const JSONRPCRequest& request)\n                 \"\\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\"\n                 \"\\nThrows when the header is invalid.\\n\",\n                 {\n-                    {\"hexdata\", RPCArg::Type::STR_HEX, false},\n+                    {\"hexdata\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded block header data\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments\\n\"\n-            \"1. \\\"hexdata\\\"        (string, required) the hex-encoded block header data\\n\"\n             \"\\nResult:\\n\"\n             \"None\"\n             \"\\nExamples:\\n\" +\n@@ -852,21 +821,18 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n                 \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n                 \"in BIP 141 (witness data is discounted).\\n\",\n                 {\n-                    {\"conf_target\", RPCArg::Type::NUM, false},\n-                    {\"estimate_mode\", RPCArg::Type::STR, true},\n-                }}\n-                .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. conf_target     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n-            \"2. \\\"estimate_mode\\\" (string, optional, default=CONSERVATIVE) The fee estimate mode.\\n\"\n+                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Confirmation target in blocks (1 - 1008)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"CONSERVATIVE\", \"The fee estimate mode.\\n\"\n             \"                   Whether to return a more conservative estimate which also satisfies\\n\"\n             \"                   a longer history. A conservative estimate potentially returns a\\n\"\n             \"                   higher feerate and is more likely to be sufficient for the desired\\n\"\n             \"                   target, but is not as responsive to short term drops in the\\n\"\n             \"                   prevailing fee market.  Must be one of:\\n\"\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n-            \"       \\\"CONSERVATIVE\\\"\\n\"\n+            \"       \\\"CONSERVATIVE\\\"\"},\n+                }}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n@@ -921,15 +887,12 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n                 \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n                 \"defined in BIP 141 (witness data is discounted).\\n\",\n                 {\n-                    {\"conf_target\", RPCArg::Type::NUM, false},\n-                    {\"threshold\", RPCArg::Type::NUM, true},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Confirmation target in blocks (1 - 1008)\"},\n+                    {\"threshold\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. conf_target (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n-            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n-            \"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n-            \"               lower buckets.  Default: 0.95\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\""
      },
      {
        "sha": "71c94ae499837bc5b53032f523ad80b10e11a3b5",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 50,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=1db0096f61680d2b2a9cfe454154de3ad121a9d3",
        "patch": "@@ -39,11 +39,9 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n                 \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n                 \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, false},\n+                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to validate\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n@@ -82,18 +80,19 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n     {\n-        std::string msg = \"createmultisig nrequired [\\\"key\\\",...] ( \\\"address_type\\\" )\\n\"\n-            \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n-            \"It returns a json object with the address and redeemScript.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. nrequired                    (numeric, required) The number of required signatures out of the n keys.\\n\"\n-            \"2. \\\"keys\\\"                       (string, required) A json array of hex-encoded public keys\\n\"\n-            \"     [\\n\"\n-            \"       \\\"key\\\"                    (string) The hex-encoded public key\\n\"\n-            \"       ,...\\n\"\n-            \"     ]\\n\"\n-            \"3. \\\"address_type\\\"               (string, optional) The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is legacy.\\n\"\n-\n+        std::string msg =\n+            RPCHelpMan{\"createmultisig\",\n+                \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n+                \"It returns a json object with the address and redeemScript.\\n\",\n+                {\n+                    {\"nrequired\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The number of required signatures out of the n keys.\"},\n+                    {\"keys\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of hex-encoded public keys.\",\n+                        {\n+                            {\"key\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded public key\"},\n+                        }},\n+                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is legacy.\"},\n+                }}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new multisig address.\\n\"\n@@ -149,15 +148,11 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n             RPCHelpMan{\"verifymessage\",\n                 \"\\nVerify a signed message\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, false},\n-                    {\"signature\", RPCArg::Type::STR, false},\n-                    {\"message\", RPCArg::Type::STR, false},\n+                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to use for the signature.\"},\n+                    {\"signature\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The signature provided by the signer in base 64 encoding (see signmessage).\"},\n+                    {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message that was signed.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"         (string, required) The bitcoin address to use for the signature.\\n\"\n-            \"2. \\\"signature\\\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\\n\"\n-            \"3. \\\"message\\\"         (string, required) The message that was signed.\\n\"\n             \"\\nResult:\\n\"\n             \"true|false   (boolean) If the signature is verified or not.\\n\"\n             \"\\nExamples:\\n\"\n@@ -211,13 +206,10 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n             RPCHelpMan{\"signmessagewithprivkey\",\n                 \"\\nSign a message with the private key of an address\\n\",\n                 {\n-                    {\"privkey\", RPCArg::Type::STR, false},\n-                    {\"message\", RPCArg::Type::STR, false},\n+                    {\"privkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The private key to sign the message with.\"},\n+                    {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message to create a signature of.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"privkey\\\"         (string, required) The private key to sign the message with.\\n\"\n-            \"2. \\\"message\\\"         (string, required) The message to create a signature of.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n             \"\\nExamples:\\n\"\n@@ -255,12 +247,10 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n             RPCHelpMan{\"setmocktime\",\n                 \"\\nSet the local time to given timestamp (-regtest only)\\n\",\n                 {\n-                    {\"timestamp\", RPCArg::Type::NUM, false},\n+                    {\"timestamp\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Unix seconds-since-epoch timestamp\\n\"\n+            \"   Pass 0 to go back to using the system time.\"},\n                 }}\n-                .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. timestamp  (integer, required) Unix seconds-since-epoch timestamp\\n\"\n-            \"   Pass 0 to go back to using the system time.\"\n+                .ToString()\n         );\n \n     if (!Params().MineBlocksOnDemand())\n@@ -321,13 +311,11 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmemoryinfo\",\n                 \"Returns an object containing information about memory usage.\\n\",\n                 {\n-                    {\"mode\", RPCArg::Type::STR, true},\n+                    {\"mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"determines what kind of information is returned. This argument is optional, the default mode is \\\"stats\\\".\\n\"\n+            \"  - \\\"stats\\\" returns general statistics about memory usage in the daemon.\\n\"\n+            \"  - \\\"mallocinfo\\\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\"},\n                 }}\n                 .ToString() +\n-            \"Arguments:\\n\"\n-            \"1. \\\"mode\\\" determines what kind of information is returned. This argument is optional, the default mode is \\\"stats\\\".\\n\"\n-            \"  - \\\"stats\\\" returns general statistics about memory usage in the daemon.\\n\"\n-            \"  - \\\"mallocinfo\\\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\\n\"\n             \"\\nResult (mode \\\"stats\\\"):\\n\"\n             \"{\\n\"\n             \"  \\\"locked\\\": {               (json object) Information about locked memory manager\\n\"\n@@ -396,21 +384,16 @@ UniValue logging(const JSONRPCRequest& request)\n             \"  - \\\"none\\\", \\\"0\\\" : even if other logging categories are specified, ignore all of them.\\n\"\n             ,\n                 {\n-                    {\"include\", RPCArg::Type::STR, true},\n-                    {\"exclude\", RPCArg::Type::STR, true},\n+                    {\"include\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of categories to add debug logging\",\n+                        {\n+                            {\"include_category\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"the valid logging category\"},\n+                        }},\n+                    {\"exclude\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of categories to remove debug logging\",\n+                        {\n+                            {\"exclude_category\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"the valid logging category\"},\n+                        }},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"include\\\"        (array of strings, optional) A json array of categories to add debug logging\\n\"\n-            \"     [\\n\"\n-            \"       \\\"category\\\"   (string) the valid logging category\\n\"\n-            \"       ,...\\n\"\n-            \"     ]\\n\"\n-            \"2. \\\"exclude\\\"        (array of strings, optional) A json array of categories to remove debug logging\\n\"\n-            \"     [\\n\"\n-            \"       \\\"category\\\"   (string) the valid logging category\\n\"\n-            \"       ,...\\n\"\n-            \"     ]\\n\"\n             \"\\nResult:\\n\"\n             \"{                   (json object where keys are the logging categories, and values indicates its status\\n\"\n             \"  \\\"category\\\": 0|1,  (numeric) if being debug logged or not. 0:inactive, 1:active\\n\""
      },
      {
        "sha": "f523ca835f8cb0e8b57a912102ba2313f3af5799",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 30,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=1db0096f61680d2b2a9cfe454154de3ad121a9d3",
        "patch": "@@ -211,13 +211,10 @@ static UniValue addnode(const JSONRPCRequest& request)\n                 \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n                 \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\\n\",\n                 {\n-                    {\"node\", RPCArg::Type::STR, false},\n-                    {\"command\", RPCArg::Type::STR, false},\n+                    {\"node\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The node (see getpeerinfo for nodes)\"},\n+                    {\"command\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n-            \"2. \\\"command\\\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"addnode\", \"\\\"192.168.0.6:8333\\\" \\\"onetry\\\"\")\n             + HelpExampleRpc(\"addnode\", \"\\\"192.168.0.6:8333\\\", \\\"onetry\\\"\")\n@@ -258,13 +255,10 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n                 \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n                 \"\\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, true},\n-                    {\"nodeid\", RPCArg::Type::NUM, true},\n+                    {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The IP address/port of the node\"},\n+                    {\"nodeid\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The node ID (see getpeerinfo for node IDs)\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, optional) The IP address/port of the node\\n\"\n-            \"2. nodeid        (number, optional) The node ID (see getpeerinfo for node IDs)\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n             + HelpExampleCli(\"disconnectnode\", \"\\\"\\\" 1\")\n@@ -305,11 +299,9 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n                 \"\\nReturns information about the given added node, or all added nodes\\n\"\n                 \"(note that onetry addnodes are not listed here)\\n\",\n                 {\n-                    {\"node\", RPCArg::Type::STR, true},\n+                    {\"node\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"If provided, return information about this specific node, otherwise all nodes are returned.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"node\\\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n@@ -524,17 +516,12 @@ static UniValue setban(const JSONRPCRequest& request)\n             RPCHelpMan{\"setban\",\n                 \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\",\n                 {\n-                    {\"subnet\", RPCArg::Type::STR, false},\n-                    {\"command\", RPCArg::Type::STR, false},\n-                    {\"bantime\", RPCArg::Type::NUM, true},\n-                    {\"absolute\", RPCArg::Type::NUM, true},\n+                    {\"subnet\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n+                    {\"command\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\"},\n+                    {\"bantime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n+                    {\"absolute\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\"},\n                 }}\n                 .ToString() +\n-                            \"\\nArguments:\\n\"\n-                            \"1. \\\"subnet\\\"       (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\\n\"\n-                            \"2. \\\"command\\\"      (string, required) 'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\\n\"\n-                            \"3. \\\"bantime\\\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n-                            \"4. \\\"absolute\\\"     (boolean, optional) If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n                             \"\\nExamples:\\n\"\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.6\\\" \\\"add\\\" 86400\")\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")\n@@ -644,11 +631,9 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n             RPCHelpMan{\"setnetworkactive\",\n                 \"\\nDisable/enable all p2p network activity.\\n\",\n                 {\n-                    {\"state\", RPCArg::Type::BOOL, false},\n+                    {\"state\", RPCArg::Type::BOOL, /* opt */ false, /* default_val */ \"\", \"true to enable networking, false to disable\"},\n                 }}\n-                .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"state\\\"        (boolean, required) true to enable networking, false to disable\\n\"\n+                .ToString()\n         );\n     }\n \n@@ -668,12 +653,9 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n             RPCHelpMan{\"getnodeaddresses\",\n                 \"\\nReturn known addresses which can potentially be used to find new nodes in the network\\n\",\n                 {\n-                    {\"count\", RPCArg::Type::NUM, true},\n+                    {\"count\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) + \" or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"count\\\"    (numeric, optional) How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) +\n-                \" or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses. (default = 1)\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\""
      },
      {
        "sha": "f5f6c344ea46e5ebcffb7ca42039a66efd248563",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 126,
        "deletions": 204,
        "changes": 330,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=1db0096f61680d2b2a9cfe454154de3ad121a9d3",
        "patch": "@@ -71,24 +71,19 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n                 \"enabled, it also works for blockchain transactions. If the block which contains the transaction\\n\"\n                 \"is known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is\\n\"\n                 \"provided, only that block will be searched and if the transaction is in the mempool or other\\n\"\n-                \"blocks, or if this node does not have the given block available, the transaction will not be found.\\n\",\n-                {\n-                    {\"txid\", RPCArg::Type::STR_HEX, false},\n-                    {\"verbose\", RPCArg::Type::BOOL, true},\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, true},\n-                }}\n-                .ToString() +\n+                \"blocks, or if this node does not have the given block available, the transaction will not be found.\\n\"\n             \"DEPRECATED: for now, it also works for transactions with unspent outputs.\\n\"\n \n             \"\\nReturn the raw transaction data.\\n\"\n             \"\\nIf verbose is 'true', returns an Object with information about 'txid'.\\n\"\n             \"If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.\\n\"\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"      (string, required) The transaction id\\n\"\n-            \"2. verbose     (bool, optional, default=false) If false, return a string, otherwise return a json object\\n\"\n-            \"3. \\\"blockhash\\\" (string, optional) The block in which to look for the transaction\\n\"\n-\n+                ,\n+                {\n+                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If false, return a string, otherwise return a json object\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"\", \"The block in which to look for the transaction\"},\n+                }}\n+                .ToString() +\n             \"\\nResult (if verbose is not set or set to false):\\n\"\n             \"\\\"data\\\"      (string) The serialized, hex-encoded data for 'txid'\\n\"\n \n@@ -218,21 +213,14 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n                 \"you need to maintain a transaction index, using the -txindex command line option or\\n\"\n                 \"specify the block in which the transaction is included manually (by blockhash).\\n\",\n                 {\n-                    {\"txids\", RPCArg::Type::ARR,\n+                    {\"txids\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of txids to filter\",\n                         {\n-                            {\"txid\", RPCArg::Type::STR_HEX, false},\n+                            {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A transaction hash\"},\n                         },\n-                        false},\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, true},\n+                        },\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"\", \"If specified, looks for txid in the block with this hash\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txids\\\"       (string) A json array of txids to filter\\n\"\n-            \"    [\\n\"\n-            \"      \\\"txid\\\"     (string) A transaction hash\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"2. \\\"blockhash\\\"   (string, optional) If specified, looks for txid in the block with this hash\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"data\\\"           (string) A string that is a serialized, hex-encoded data for the proof.\\n\"\n         );\n@@ -316,11 +304,9 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n                 \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n                 \"and throwing an RPC error if the block is not in our best chain\\n\",\n                 {\n-                    {\"proof\", RPCArg::Type::STR, false},\n+                    {\"proof\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded proof generated by gettxoutproof\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"proof\\\"    (string, required) The hex-encoded proof generated by gettxoutproof\\n\"\n             \"\\nResult:\\n\"\n             \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.\\n\"\n         );\n@@ -462,38 +448,45 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4) {\n         throw std::runtime_error(\n-            // clang-format off\n-            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] [{\\\"address\\\":amount},{\\\"data\\\":\\\"hex\\\"},...] ( locktime ) ( replaceable )\\n\"\n-            \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n-            \"Outputs can be addresses or data.\\n\"\n-            \"Returns hex-encoded raw transaction.\\n\"\n-            \"Note that the transaction's inputs are not signed, and\\n\"\n-            \"it is not stored in the wallet or transmitted to the network.\\n\"\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"inputs\\\"                (array, required) A json array of json objects\\n\"\n-            \"     [\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",      (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,         (numeric, required) The output number\\n\"\n-            \"         \\\"sequence\\\":n      (numeric, optional) The sequence number\\n\"\n-            \"       } \\n\"\n-            \"       ,...\\n\"\n-            \"     ]\\n\"\n-            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n-            \"   [\\n\"\n-            \"    {\\n\"\n-            \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\"\n-            \"    },\\n\"\n-            \"    {\\n\"\n-            \"      \\\"data\\\": \\\"hex\\\"        (obj, optional) A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\\n\"\n-            \"    }\\n\"\n-            \"    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n-            \"                             accepted as second parameter.\\n\"\n-            \"   ]\\n\"\n-            \"3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n-            \"4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125-replaceable.\\n\"\n-            \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\\n\"\n+            RPCHelpMan{\"createrawtransaction\",\n+                \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n+                \"Outputs can be addresses or data.\\n\"\n+                \"Returns hex-encoded raw transaction.\\n\"\n+                \"Note that the transaction's inputs are not signed, and\\n\"\n+                \"it is not stored in the wallet or transmitted to the network.\\n\",\n+                {\n+                    {\"inputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of json objects\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n+                                {\n+                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The sequence number\"},\n+                                },\n+                                },\n+                        },\n+                        },\n+                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs).\\n\"\n+                            \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n+                            \"                             accepted as second parameter.\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                                {\n+                                    {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT},\n+                                },\n+                                },\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                                {\n+                                    {\"data\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                                },\n+                                },\n+                        },\n+                        },\n+                    {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Marks this transaction as BIP125-replaceable.\\n\"\n+            \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n+                }}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"\\\"transaction\\\"              (string) hex string of the transaction\\n\"\n \n@@ -502,7 +495,6 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"address\\\\\\\":0.01}]\\\"\")\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n-            // clang-format on\n         );\n     }\n \n@@ -526,15 +518,11 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n             RPCHelpMan{\"decoderawtransaction\",\n                 \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, false},\n-                    {\"iswitness\", RPCArg::Type::BOOL, true},\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Whether the transaction hex is a serialized witness transaction\\n\"\n+            \"                         If iswitness is not present, heuristic tests will be used in decoding\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"      (string, required) The transaction hex string\\n\"\n-            \"2. iswitness          (boolean, optional) Whether the transaction hex is a serialized witness transaction\\n\"\n-            \"                         If iswitness is not present, heuristic tests will be used in decoding\\n\"\n-\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id\\n\"\n@@ -605,11 +593,9 @@ static UniValue decodescript(const JSONRPCRequest& request)\n             RPCHelpMan{\"decodescript\",\n                 \"\\nDecode a hex-encoded script.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, false},\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded script\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string) the hex-encoded script\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"asm\\\":\\\"asm\\\",   (string) Script public key\\n\"\n@@ -706,20 +692,13 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n                 \"The combined transaction may be another partially signed transaction or a \\n\"\n                 \"fully signed transaction.\",\n                 {\n-                    {\"txs\", RPCArg::Type::ARR,\n+                    {\"txs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of hex strings of partially signed transactions\",\n                         {\n-                            {\"hexstring\", RPCArg::Type::STR_HEX, false},\n+                            {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A transaction hash\"},\n+                        },\n                         },\n-                        false},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txs\\\"         (string) A json array of hex strings of partially signed transactions\\n\"\n-            \"    [\\n\"\n-            \"      \\\"hexstring\\\"     (string) A transaction hash\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-\n             \"\\nResult:\\n\"\n             \"\\\"hex\\\"            (string) The hex-encoded raw transaction with signature(s)\\n\"\n \n@@ -938,54 +917,35 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                 \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n                 \"this transaction depends on but may not yet be in the block chain.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR, false},\n-                    {\"privkeys\", RPCArg::Type::ARR,\n+                    {\"hexstring\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n+                    {\"privkeys\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of base58-encoded private keys for signing\",\n                         {\n-                            {\"privatekey\", RPCArg::Type::STR_HEX, false},\n+                            {\"privatekey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"private key in base58-encoding\"},\n                         },\n-                        false},\n-                    {\"prevtxs\", RPCArg::Type::ARR,\n+                        },\n+                    {\"prevtxs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of previous dependent transaction outputs\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ,\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, false},\n-                                    {\"vout\", RPCArg::Type::NUM, false},\n-                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, false},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, false},\n-                                    {\"amount\", RPCArg::Type::AMOUNT, false},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"script key\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"\", \"(required for P2SH or P2WSH) redeem script\"},\n+                                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount spent\"},\n+                                },\n                                 },\n-                                true},\n                         },\n-                        true},\n-                    {\"sighashtype\", RPCArg::Type::STR, true},\n-                }}\n-                .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n-            \"2. \\\"privkeys\\\"                       (string, required) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                               (json array of strings)\\n\"\n-            \"      \\\"privatekey\\\"                  (string) private key in base58-encoding\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"prevtxs\\\"                        (string, optional) An json array of previous dependent transaction outputs\\n\"\n-            \"     [                              (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",               (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",     (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",     (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of:\\n\"\n+                        },\n+                    {\"sighashtype\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ALL\", \"The signature hash type. Must be one of:\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n             \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n+                    },\n+                }}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n@@ -1044,13 +1004,10 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n                 \"\\nAlso see createrawtransaction and signrawtransactionwithkey calls.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, false},\n-                    {\"allowhighfees\", RPCArg::Type::BOOL, true},\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of the raw transaction\"},\n+                    {\"allowhighfees\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Allow high fees\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction)\\n\"\n-            \"2. allowhighfees    (boolean, optional, default=false) Allow high fees\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"hex\\\"             (string) The transaction hash in hex\\n\"\n             \"\\nExamples:\\n\"\n@@ -1140,15 +1097,20 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n-            // clang-format off\n-            \"testmempoolaccept [\\\"rawtxs\\\"] ( allowhighfees )\\n\"\n-            \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n-            \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n-            \"\\nSee sendrawtransaction call.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. [\\\"rawtxs\\\"]       (array, required) An array of hex strings of raw transactions.\\n\"\n-            \"                                        Length must be one for now.\\n\"\n-            \"2. allowhighfees    (boolean, optional, default=false) Allow high fees\\n\"\n+            RPCHelpMan{\"testmempoolaccept\",\n+                \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n+                \"\\nSee sendrawtransaction call.\\n\",\n+                {\n+                    {\"rawtxs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"An array of hex strings of raw transactions.\\n\"\n+            \"                                        Length must be one for now.\",\n+                        {\n+                            {\"rawtx\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"\"},\n+                        },\n+                        },\n+                    {\"allowhighfees\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Allow high fees\"},\n+                }}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n             \"                            Length is exactly one for now.\\n\"\n@@ -1167,7 +1129,6 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n             + HelpExampleCli(\"testmempoolaccept\", \"\\\"signedhex\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"testmempoolaccept\", \"[\\\"signedhex\\\"]\")\n-            // clang-format on\n             );\n     }\n \n@@ -1241,12 +1202,9 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n             RPCHelpMan{\"decodepsbt\",\n                 \"\\nReturn a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\\n\",\n                 {\n-                    {\"psbt\", RPCArg::Type::STR, false},\n+                    {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The PSBT base64 string\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"psbt\\\"            (string, required) The PSBT base64 string\\n\"\n-\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"tx\\\" : {                   (json object) The decoded network-serialized unsigned transaction.\\n\"\n@@ -1520,20 +1478,13 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n                 \"\\nCombine multiple partially signed Bitcoin transactions into one transaction.\\n\"\n                 \"Implements the Combiner role.\\n\",\n                 {\n-                    {\"txs\", RPCArg::Type::ARR,\n+                    {\"txs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of base64 strings of partially signed transactions\",\n                         {\n-                            {\"psbt\", RPCArg::Type::STR_HEX, false},\n+                            {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"},\n+                        },\n                         },\n-                        false},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n-            \"    [\\n\"\n-            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-\n             \"\\nResult:\\n\"\n             \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n             \"\\nExamples:\\n\"\n@@ -1583,15 +1534,11 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n                 \"created which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.\\n\"\n                 \"Implements the Finalizer and Extractor roles.\\n\",\n                 {\n-                    {\"psbt\", RPCArg::Type::STR, false},\n-                    {\"extract\", RPCArg::Type::BOOL, true},\n+                    {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"},\n+                    {\"extract\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"If true and the transaction is complete,\\n\"\n+            \"                             extract and return the complete transaction in normal network serialization instead of the PSBT.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n-            \"2. \\\"extract\\\"              (boolean, optional, default=true) If true and the transaction is complete, \\n\"\n-            \"                             extract and return the complete transaction in normal network serialization instead of the PSBT.\\n\"\n-\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"psbt\\\" : \\\"value\\\",          (string) The base64-encoded partially signed transaction if not extracted\\n\"\n@@ -1650,59 +1597,38 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                 \"\\nCreates a transaction in the Partially Signed Transaction format.\\n\"\n                 \"Implements the Creator role.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR,\n+                    {\"inputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of json objects\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ,\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, false},\n-                                    {\"vout\", RPCArg::Type::NUM, false},\n-                                    {\"sequence\", RPCArg::Type::NUM, true},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The sequence number\"},\n                                 },\n-                                false},\n+                                },\n+                        },\n                         },\n-                        false},\n-                    {\"outputs\", RPCArg::Type::ARR,\n+                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs).\\n\"\n+                            \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n+                            \"                             accepted as second parameter.\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ,\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n                                 {\n-                                    {\"address\", RPCArg::Type::AMOUNT, false},\n+                                    {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT},\n                                 },\n-                                true},\n-                            {\"\", RPCArg::Type::OBJ,\n+                                },\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n                                 {\n-                                    {\"data\", RPCArg::Type::STR_HEX, false},\n+                                    {\"data\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                                },\n                                 },\n-                                true},\n                         },\n-                        false},\n-                    {\"locktime\", RPCArg::Type::NUM, true},\n-                    {\"replaceable\", RPCArg::Type::BOOL, true},\n+                        },\n+                    {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                            \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n                 }}\n                 .ToString() +\n-                            \"\\nArguments:\\n\"\n-                            \"1. \\\"inputs\\\"                (array, required) A json array of json objects\\n\"\n-                            \"     [\\n\"\n-                            \"       {\\n\"\n-                            \"         \\\"txid\\\":\\\"id\\\",      (string, required) The transaction id\\n\"\n-                            \"         \\\"vout\\\":n,         (numeric, required) The output number\\n\"\n-                            \"         \\\"sequence\\\":n      (numeric, optional) The sequence number\\n\"\n-                            \"       } \\n\"\n-                            \"       ,...\\n\"\n-                            \"     ]\\n\"\n-                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n-                            \"   [\\n\"\n-                            \"    {\\n\"\n-                            \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\"\n-                            \"    },\\n\"\n-                            \"    {\\n\"\n-                            \"      \\\"data\\\": \\\"hex\\\"        (obj, optional) A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\\n\"\n-                            \"    }\\n\"\n-                            \"    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n-                            \"                             accepted as second parameter.\\n\"\n-                            \"   ]\\n\"\n-                            \"3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n-                            \"4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.\\n\"\n-                            \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\\n\"\n                             \"\\nResult:\\n\"\n                             \"  \\\"psbt\\\"        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n                             \"\\nExamples:\\n\"\n@@ -1745,19 +1671,15 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                 \"\\nConverts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\\n\"\n                 \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, false},\n-                    {\"permitsigdata\", RPCArg::Type::BOOL, true},\n-                    {\"iswitness\", RPCArg::Type::BOOL, true},\n-                }}\n-                .ToString() +\n-                            \"\\nArguments:\\n\"\n-                            \"1. \\\"hexstring\\\"              (string, required) The hex string of a raw transaction\\n\"\n-                            \"2. permitsigdata           (boolean, optional, default=false) If true, any signatures in the input will be discarded and conversion.\\n\"\n-                            \"                              will continue. If false, RPC will fail if any signatures are present.\\n\"\n-                            \"3. iswitness               (boolean, optional) Whether the transaction hex is a serialized witness transaction.\\n\"\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of a raw transaction\"},\n+                    {\"permitsigdata\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, any signatures in the input will be discarded and conversion.\\n\"\n+                            \"                              will continue. If false, RPC will fail if any signatures are present.\"},\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n                             \"                              If iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion\\n\"\n                             \"                              will be tried. If false, only non-witness deserialization will be tried. Only has an effect if\\n\"\n-                            \"                              permitsigdata is true.\\n\"\n+                            \"                              permitsigdata is true.\"},\n+                }}\n+                .ToString() +\n                             \"\\nResult:\\n\"\n                             \"  \\\"psbt\\\"        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n                             \"\\nExamples:\\n\""
      },
      {
        "sha": "97745c62d60f06497bf7e558ae749db4f73e8620",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=1db0096f61680d2b2a9cfe454154de3ad121a9d3",
        "patch": "@@ -142,10 +142,6 @@ std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey)\n     return ParseHexV(find_value(o, strKey), strKey);\n }\n \n-/**\n- * Note: This interface may still be subject to change.\n- */\n-\n std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest& helpreq) const\n {\n     std::string strRet;\n@@ -207,11 +203,9 @@ UniValue help(const JSONRPCRequest& jsonRequest)\n             RPCHelpMan{\"help\",\n                 \"\\nList all commands, or get help for a specified command.\\n\",\n                 {\n-                    {\"command\", RPCArg::Type::STR, true},\n+                    {\"command\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The command to get help on\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"command\\\"     (string, optional) The command to get help on\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"text\\\"     (string) The help text\\n\"\n         );\n@@ -256,9 +250,6 @@ static UniValue uptime(const JSONRPCRequest& jsonRequest)\n }\n \n // clang-format off\n-/**\n- * Call Table\n- */\n static const CRPCCommand vRPCCommands[] =\n { //  category              name                      actor (function)         argNames\n   //  --------------------- ------------------------  -----------------------  ----------"
      },
      {
        "sha": "a1c0134146805f7953476f07be4f93d6f4e0a106",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 194,
        "deletions": 4,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=1db0096f61680d2b2a9cfe454154de3ad121a9d3",
        "patch": "@@ -129,10 +129,124 @@ UniValue DescribeAddress(const CTxDestination& dest)\n     return boost::apply_visitor(DescribeAddressVisitor(), dest);\n }\n \n+struct Section {\n+    Section(const std::string& left, const std::string& right)\n+        : m_left{left}, m_right{right} {}\n+    const std::string m_left;\n+    const std::string m_right;\n+};\n+\n+struct Sections {\n+    std::vector<Section> m_sections;\n+    size_t m_max_pad{0};\n+\n+    void PushSection(const Section& s)\n+    {\n+        m_max_pad = std::max(m_max_pad, s.m_left.size());\n+        m_sections.push_back(s);\n+    }\n+\n+    enum class OuterType {\n+        ARR,\n+        OBJ,\n+        NAMED_ARG, // Only set on first recursion\n+    };\n+\n+    void Push(const RPCArg& arg, const size_t current_indent = 5, const OuterType outer_type = OuterType::NAMED_ARG)\n+    {\n+        const auto indent = std::string(current_indent, ' ');\n+        const auto indent_next = std::string(current_indent + 2, ' ');\n+        switch (arg.m_type) {\n+        case RPCArg::Type::STR_HEX:\n+        case RPCArg::Type::STR:\n+        case RPCArg::Type::NUM:\n+        case RPCArg::Type::AMOUNT:\n+        case RPCArg::Type::BOOL: {\n+            if (outer_type == OuterType::NAMED_ARG) return; // Nothing more to do for non-recursive types on first recursion\n+            auto left = indent;\n+            if (arg.m_type_str.size() != 0 && outer_type == OuterType::OBJ) {\n+                left += \"\\\"\" + arg.m_name + \"\\\":\" + arg.m_type_str.at(0);\n+            } else {\n+                left += outer_type == OuterType::OBJ ? arg.ToStringObj() : arg.ToString();\n+            }\n+            left += \",\";\n+            PushSection({left, arg.ToDescriptionString(/* implicitly_required */ outer_type == OuterType::ARR)});\n+            break;\n+        }\n+        case RPCArg::Type::OBJ:\n+        case RPCArg::Type::OBJ_USER_KEYS: {\n+            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString(/* implicitly_required */ outer_type == OuterType::ARR);\n+            PushSection({indent + \"{\", right});\n+            for (const auto& arg_inner : arg.m_inner) {\n+                Push(arg_inner, current_indent + 2, OuterType::OBJ);\n+            }\n+            if (arg.m_type != RPCArg::Type::OBJ) {\n+                PushSection({indent_next + \"...\", \"\"});\n+            }\n+            PushSection({indent + \"}\" + (outer_type != OuterType::NAMED_ARG ? \",\" : \"\"), \"\"});\n+            break;\n+        }\n+        case RPCArg::Type::ARR: {\n+            auto left = indent;\n+            left += outer_type == OuterType::OBJ ? \"\\\"\" + arg.m_name + \"\\\":\" : \"\";\n+            left += \"[\";\n+            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString(/* implicitly_required */ outer_type == OuterType::ARR);\n+            PushSection({left, right});\n+            for (const auto& arg_inner : arg.m_inner) {\n+                Push(arg_inner, current_indent + 2, OuterType::ARR);\n+            }\n+            PushSection({indent_next + \"...\", \"\"});\n+            PushSection({indent + \"]\" + (outer_type != OuterType::NAMED_ARG ? \",\" : \"\"), \"\"});\n+            break;\n+        }\n+\n+            // no default case, so the compiler can warn about missing cases\n+        }\n+    }\n+\n+    std::string ToString() const\n+    {\n+        std::string ret;\n+        const size_t pad = m_max_pad + 4;\n+        for (const auto& s : m_sections) {\n+            if (s.m_right.empty()) {\n+                ret += s.m_left;\n+                ret += \"\\n\";\n+                continue;\n+            }\n+\n+            std::string left = s.m_left;\n+            left.resize(pad, ' ');\n+            ret += left;\n+\n+            // Properly pad after newlines\n+            std::string right;\n+            size_t begin = 0;\n+            size_t new_line_pos = s.m_right.find_first_of('\\n');\n+            while (true) {\n+                right += s.m_right.substr(begin, new_line_pos - begin);\n+                if (new_line_pos == std::string::npos) {\n+                    break; //No new line\n+                }\n+                right += \"\\n\" + std::string(pad, ' ');\n+                begin = s.m_right.find_first_not_of(' ', new_line_pos + 1);\n+                if (begin == std::string::npos) {\n+                    break; // Empty line\n+                }\n+                new_line_pos = s.m_right.find_first_of('\\n', begin + 1);\n+            }\n+            ret += right;\n+            ret += \"\\n\";\n+        }\n+        return ret;\n+    }\n+};\n+\n std::string RPCHelpMan::ToString() const\n {\n     std::string ret;\n \n+    // Oneline summary\n     ret += m_name;\n     bool is_optional{false};\n     for (const auto& arg : m_args) {\n@@ -145,13 +259,89 @@ std::string RPCHelpMan::ToString() const\n             // If support for positional arguments is deprecated in the future, remove this line\n             assert(!is_optional);\n         }\n-        ret += arg.ToString();\n+        ret += arg.ToString(/* oneline */ true);\n     }\n     if (is_optional) ret += \" )\";\n     ret += \"\\n\";\n \n+    // Description\n     ret += m_description;\n \n+    // Arguments\n+    Sections sections;\n+    for (size_t i{0}; i < m_args.size(); ++i) {\n+        const auto& arg = m_args.at(i);\n+\n+        if (i == 0) ret += \"\\nArguments:\\n\";\n+\n+        // Push named argument name and description\n+        const auto str_wrapper = (arg.m_type == RPCArg::Type::STR || arg.m_type == RPCArg::Type::STR_HEX) ? \"\\\"\" : \"\";\n+        sections.m_sections.emplace_back(std::to_string(i + 1) + \". \" + str_wrapper + arg.m_name + str_wrapper, arg.ToDescriptionString());\n+        sections.m_max_pad = std::max(sections.m_max_pad, sections.m_sections.back().m_left.size());\n+\n+        // Recursively push nested args\n+        sections.Push(arg);\n+    }\n+    ret += sections.ToString();\n+\n+    return ret;\n+}\n+\n+std::string RPCArg::ToDescriptionString(const bool implicitly_required) const\n+{\n+    std::string ret;\n+    ret += \"(\";\n+    if (m_type_str.size() != 0) {\n+        ret += m_type_str.at(1);\n+    } else {\n+        switch (m_type) {\n+        case Type::STR_HEX:\n+        case Type::STR: {\n+            ret += \"string\";\n+            break;\n+        }\n+        case Type::NUM: {\n+            ret += \"numeric\";\n+            break;\n+        }\n+        case Type::AMOUNT: {\n+            ret += \"numeric or string\";\n+            break;\n+        }\n+        case Type::BOOL: {\n+            ret += \"boolean\";\n+            break;\n+        }\n+        case Type::OBJ:\n+        case Type::OBJ_USER_KEYS: {\n+            ret += \"json object\";\n+            break;\n+        }\n+        case Type::ARR: {\n+            ret += \"json array\";\n+            break;\n+        }\n+\n+            // no default case, so the compiler can warn about missing cases\n+        }\n+    }\n+    if (!implicitly_required) {\n+        ret += \", \";\n+        if (m_optional) {\n+            ret += \"optional\";\n+            if (!m_default_value.empty()) {\n+                ret += \", default=\" + m_default_value;\n+            } else {\n+                // TODO enable this assert, when all optional parameters have their default value documented\n+                //assert(false);\n+            }\n+        } else {\n+            ret += \"required\";\n+            assert(m_default_value.empty()); // Default value is ignored, and must not be present\n+        }\n+    }\n+    ret += \")\";\n+    ret += m_description.empty() ? \"\" : \" \" + m_description;\n     return ret;\n }\n \n@@ -185,9 +375,9 @@ std::string RPCArg::ToStringObj() const\n     assert(false);\n }\n \n-std::string RPCArg::ToString() const\n+std::string RPCArg::ToString(const bool oneline) const\n {\n-    if (!m_oneline_description.empty()) return m_oneline_description;\n+    if (oneline && !m_oneline_description.empty()) return m_oneline_description;\n \n     switch (m_type) {\n     case Type::STR_HEX:\n@@ -215,7 +405,7 @@ std::string RPCArg::ToString() const\n     case Type::ARR: {\n         std::string res;\n         for (const auto& i : m_inner) {\n-            res += i.ToString() + \",\";\n+            res += i.ToString(oneline) + \",\";\n         }\n         return \"[\" + res + \"...]\";\n     }"
      },
      {
        "sha": "11238ce9f75704867c8c86c5e827d092b95cae30",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 38,
        "deletions": 8,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=1db0096f61680d2b2a9cfe454154de3ad121a9d3",
        "patch": "@@ -43,24 +43,54 @@ struct RPCArg {\n     const Type m_type;\n     const std::vector<RPCArg> m_inner; //!< Only used for arrays or dicts\n     const bool m_optional;\n+    const std::string m_default_value; //!< Only used for optional args\n+    const std::string m_description;\n     const std::string m_oneline_description; //!< Should be empty unless it is supposed to override the auto-generated summary line\n-\n-    RPCArg(const std::string& name, const Type& type, const bool optional, const std::string& oneline_description = \"\")\n-        : m_name{name}, m_type{type}, m_optional{optional}, m_oneline_description{oneline_description}\n+    const std::vector<std::string> m_type_str; //!< Should be empty unless it is supposed to override the auto-generated type strings. Vector length is either 0 or 2, m_type_str.at(0) will override the type of the value in a key-value pair, m_type_str.at(1) will override the type in the argument description.\n+\n+    RPCArg(\n+        const std::string& name,\n+        const Type& type,\n+        const bool opt,\n+        const std::string& default_val,\n+        const std::string& description,\n+        const std::string& oneline_description = \"\",\n+        const std::vector<std::string>& type_str = {})\n+        : m_name{name},\n+          m_type{type},\n+          m_optional{opt},\n+          m_default_value{default_val},\n+          m_description{description},\n+          m_oneline_description{oneline_description},\n+          m_type_str{type_str}\n     {\n         assert(type != Type::ARR && type != Type::OBJ);\n     }\n \n-    RPCArg(const std::string& name, const Type& type, const std::vector<RPCArg>& inner, const bool optional, const std::string& oneline_description = \"\")\n-        : m_name{name}, m_type{type}, m_inner{inner}, m_optional{optional}, m_oneline_description{oneline_description}\n+    RPCArg(\n+        const std::string& name,\n+        const Type& type,\n+        const bool opt,\n+        const std::string& default_val,\n+        const std::string& description,\n+        const std::vector<RPCArg>& inner,\n+        const std::string& oneline_description = \"\",\n+        const std::vector<std::string>& type_str = {})\n+        : m_name{name},\n+          m_type{type},\n+          m_inner{inner},\n+          m_optional{opt},\n+          m_default_value{default_val},\n+          m_description{description},\n+          m_oneline_description{oneline_description},\n+          m_type_str{type_str}\n     {\n         assert(type == Type::ARR || type == Type::OBJ);\n     }\n \n-    std::string ToString() const;\n-\n-private:\n+    std::string ToString(bool oneline = false) const;\n     std::string ToStringObj() const;\n+    std::string ToDescriptionString(bool implicitly_required = false) const;\n };\n \n class RPCHelpMan"
      },
      {
        "sha": "0ecfcc177696aec6e7c9132140499291d91fdc3f",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 84,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=1db0096f61680d2b2a9cfe454154de3ad121a9d3",
        "patch": "@@ -110,18 +110,14 @@ UniValue importprivkey(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n             RPCHelpMan{\"importprivkey\",\n-                \"\\nAdds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\\n\",\n+                \"\\nAdds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\\n\"\n+                \"Hint: use importmulti to import more than one private key.\\n\",\n                 {\n-                    {\"privkey\", RPCArg::Type::STR, false},\n-                    {\"label\", RPCArg::Type::STR, true},\n-                    {\"rescan\", RPCArg::Type::BOOL, true},\n+                    {\"privkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The private key (see dumpprivkey)\"},\n+                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"current label if address exists, otherwise \\\"\\\"\", \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n                 }}\n                 .ToString() +\n-            \"Hint: use importmulti to import more than one private key.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"privkey\\\"          (string, required) The private key (see dumpprivkey)\\n\"\n-            \"2. \\\"label\\\"            (string, optional, default=current label if address exists, otherwise \\\"\\\") An optional label\\n\"\n-            \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n             \"\\nExamples:\\n\"\n@@ -278,17 +274,12 @@ UniValue importaddress(const JSONRPCRequest& request)\n             RPCHelpMan{\"importaddress\",\n                 \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, false},\n-                    {\"label\", RPCArg::Type::STR, true},\n-                    {\"rescan\", RPCArg::Type::BOOL, true},\n-                    {\"p2sh\", RPCArg::Type::BOOL, true},\n+                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The Bitcoin address (or hex-encoded script)\"},\n+                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"\\\"\", \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n+                    {\"p2sh\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Add the P2SH version of the script as well\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"          (string, required) The Bitcoin address (or hex-encoded script)\\n\"\n-            \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n-            \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n-            \"4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\\n\"\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n             \"If you have the full public key, you should call importpubkey instead of this.\\n\"\n@@ -365,13 +356,10 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n             RPCHelpMan{\"importprunedfunds\",\n                 \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\",\n                 {\n-                    {\"rawtransaction\", RPCArg::Type::STR_HEX, false},\n-                    {\"txoutproof\", RPCArg::Type::STR_HEX, false},\n+                    {\"rawtransaction\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A raw transaction in hex funding an already-existing address in wallet\"},\n+                    {\"txoutproof\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex output from gettxoutproof that contains the transaction\"},\n                 }}\n-                .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"rawtransaction\\\" (string, required) A raw transaction in hex funding an already-existing address in wallet\\n\"\n-            \"2. \\\"txoutproof\\\"     (string, required) The hex output from gettxoutproof that contains the transaction\\n\"\n+                .ToString()\n         );\n \n     CMutableTransaction tx;\n@@ -434,11 +422,9 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n             RPCHelpMan{\"removeprunedfunds\",\n                 \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded id of the transaction you are deleting\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"           (string, required) The hex-encoded id of the transaction you are deleting\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n@@ -477,15 +463,11 @@ UniValue importpubkey(const JSONRPCRequest& request)\n             RPCHelpMan{\"importpubkey\",\n                 \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\",\n                 {\n-                    {\"pubkey\", RPCArg::Type::STR, false},\n-                    {\"label\", RPCArg::Type::STR, true},\n-                    {\"rescan\", RPCArg::Type::BOOL, true},\n+                    {\"pubkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The hex-encoded public key\"},\n+                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"\\\"\", \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"pubkey\\\"           (string, required) The hex-encoded public key\\n\"\n-            \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n-            \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n             \"\\nExamples:\\n\"\n@@ -555,11 +537,9 @@ UniValue importwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"importwallet\",\n                 \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\",\n                 {\n-                    {\"filename\", RPCArg::Type::STR, false},\n+                    {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet file\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"filename\\\"    (string, required) The wallet file\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nDump the wallet\\n\"\n             + HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\") +\n@@ -690,11 +670,9 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n                 \"\\nReveals the private key corresponding to 'address'.\\n\"\n                 \"Then the importprivkey can be used with this output\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, false},\n+                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address for the private key\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"   (string, required) The bitcoin address for the private key\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"key\\\"                (string) The private key\\n\"\n             \"\\nExamples:\\n\"\n@@ -741,11 +719,9 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n                 \"Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by\\n\"\n                 \"only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).\\n\",\n                 {\n-                    {\"filename\", RPCArg::Type::STR, false},\n+                    {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The filename with path (either absolute or relative to bitcoind)\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"filename\\\"    (string, required) The filename with path (either absolute or relative to bitcoind)\\n\"\n             \"\\nResult:\\n\"\n             \"{                           (json object)\\n\"\n             \"  \\\"filename\\\" : {        (string) The filename with full absolute path\\n\"\n@@ -1127,57 +1103,49 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     if (mainRequest.fHelp || mainRequest.params.size() < 1 || mainRequest.params.size() > 2)\n         throw std::runtime_error(\n             RPCHelpMan{\"importmulti\",\n-                \"\\nImport addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.\\n\\n\",\n+                \"\\nImport addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.\\n\",\n                 {\n-                    {\"requests\", RPCArg::Type::ARR,\n+                    {\"requests\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"Data to be imported\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ,\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n                                 {\n-                                    {\n-                                        {\"scriptPubKey\", RPCArg::Type::STR, false},\n-                                        {\"timestamp\", RPCArg::Type::NUM, false},\n-                                        {\"redeemscript\", RPCArg::Type::STR, true},\n-                                        {\"witnessscript\", RPCArg::Type::STR, true},\n-                                        {\"internal\", RPCArg::Type::BOOL, true},\n-                                        {\"watchonly\", RPCArg::Type::BOOL, true},\n-                                        {\"label\", RPCArg::Type::STR, true},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"Type of scriptPubKey (string for script, json for address)\",\n+                                        /* oneline_description */ \"\", {\"\\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }\", \"string / json\"}\n+                                    },\n+                                    {\"timestamp\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+        \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n+        \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n+        \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n+        \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\\n\"\n+        \"                                                              creation time of all keys being imported by the importmulti call will be scanned.\",\n+                                        /* oneline_description */ \"\", {\"timestamp | \\\"now\\\"\", \"integer / string\"}\n+                                    },\n+                                    {\"redeemscript\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Allowed only if the scriptPubKey is a P2SH or P2SH-P2WSH address/scriptPubKey\"},\n+                                    {\"witnessscript\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Allowed only if the scriptPubKey is a P2SH-P2WSH or P2WSH address/scriptPubKey\"},\n+                                    {\"pubkeys\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"Array of strings giving pubkeys that must occur in the output or redeemscript\",\n+                                        {\n+                                            {\"pubKey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"\"},\n+                                        }\n+                                    },\n+                                    {\"keys\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\",\n+                                        {\n+                                            {\"key\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"\"},\n+                                        }\n                                     },\n+                                    {\"internal\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments aka change\"},\n+                                    {\"watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\"},\n+                                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n                                 },\n-                                false},\n+                            },\n                         },\n-                        false, \"\\\"requests\\\"\"},\n-                    {\"options\", RPCArg::Type::OBJ,\n+                        \"\\\"requests\\\"\"},\n+                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n                         {\n-                            {\"rescan\", RPCArg::Type::BOOL, true},\n+                            {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Stating if should rescan the blockchain after all imports\"},\n                         },\n-                        true, \"\\\"options\\\"\"},\n+                        \"\\\"options\\\"\"},\n                 }}\n                 .ToString() +\n-            \"Arguments:\\n\"\n-            \"1. requests     (array, required) Data to be imported\\n\"\n-            \"  [     (array of json objects)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"scriptPubKey\\\": \\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)\\n\"\n-            \"      \\\"timestamp\\\": timestamp | \\\"now\\\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n-            \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n-            \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n-            \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n-            \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\\n\"\n-            \"                                                              creation time of all keys being imported by the importmulti call will be scanned.\\n\"\n-            \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH or P2SH-P2WSH address/scriptPubKey\\n\"\n-            \"      \\\"witnessscript\\\": \\\"<script>\\\"                           , (string, optional) Allowed only if the scriptPubKey is a P2SH-P2WSH or P2WSH address/scriptPubKey\\n\"\n-            \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n-            \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n-            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments aka change\\n\"\n-            \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n-            \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address, only allowed with internal=false\\n\"\n-            \"    }\\n\"\n-            \"  ,...\\n\"\n-            \"  ]\\n\"\n-            \"2. options                 (json, optional)\\n\"\n-            \"  {\\n\"\n-            \"     \\\"rescan\\\": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports\\n\"\n-            \"  }\\n\"\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\"\n             \"\\nExamples:\\n\" +"
      },
      {
        "sha": "28ef0ddcdcbef10c790a958ceb8c5c10c4ee680d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 244,
        "deletions": 464,
        "changes": 708,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1db0096f61680d2b2a9cfe454154de3ad121a9d3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1db0096f61680d2b2a9cfe454154de3ad121a9d3",
        "patch": "@@ -154,13 +154,10 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                 \"If 'label' is specified, it is added to the address book \\n\"\n                 \"so payments received with the address will be associated with 'label'.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, true},\n-                    {\"address_type\", RPCArg::Type::STR, true},\n+                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The label name for the address to be linked to. If not provided, the default label \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -addresstype.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"label\\\"          (string, optional) The label name for the address to be linked to. If not provided, the default label \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\\n\"\n-            \"2. \\\"address_type\\\"   (string, optional) The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -addresstype.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"address\\\"    (string) The new bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n@@ -218,11 +215,9 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                 \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n                 \"This is for use with raw transactions, NOT normal use.\\n\",\n                 {\n-                    {\"address_type\", RPCArg::Type::STR, true},\n+                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -changetype.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address_type\\\"           (string, optional) The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -changetype.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"address\\\"    (string) The address\\n\"\n             \"\\nExamples:\\n\"\n@@ -275,13 +270,10 @@ static UniValue setlabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"setlabel\",\n                 \"\\nSets the label associated with the given address.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, false},\n-                    {\"label\", RPCArg::Type::STR, false},\n+                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to be associated with a label.\"},\n+                    {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The label to assign to the address.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with a label.\\n\"\n-            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n             + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n@@ -358,35 +350,26 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n         throw std::runtime_error(\n             RPCHelpMan{\"sendtoaddress\",\n-                \"\\nSend an amount to a given address.\\n\",\n+                \"\\nSend an amount to a given address.\" +\n+                    HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, false},\n-                    {\"amount\", RPCArg::Type::AMOUNT, false},\n-                    {\"comment\", RPCArg::Type::STR, true},\n-                    {\"comment_to\", RPCArg::Type::STR, true},\n-                    {\"subtractfeefromamount\", RPCArg::Type::BOOL, true},\n-                    {\"replaceable\", RPCArg::Type::BOOL, true},\n-                    {\"conf_target\", RPCArg::Type::NUM, true},\n-                    {\"estimate_mode\", RPCArg::Type::STR, true},\n-                }}\n-                .ToString() +\n-            HelpRequiringPassphrase(pwallet) +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"            (string, required) The bitcoin address to send to.\\n\"\n-            \"2. \\\"amount\\\"             (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\\n\"\n-            \"3. \\\"comment\\\"            (string, optional) A comment used to store what the transaction is for. \\n\"\n-            \"                             This is not part of the transaction, just kept in your wallet.\\n\"\n-            \"4. \\\"comment_to\\\"         (string, optional) A comment to store the name of the person or organization \\n\"\n+                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to send to.\"},\n+                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\"},\n+                    {\"comment\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"A comment used to store what the transaction is for.\\n\"\n+            \"                             This is not part of the transaction, just kept in your wallet.\"},\n+                    {\"comment_to\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"A comment to store the name of the person or organization\\n\"\n             \"                             to which you're sending the transaction. This is not part of the \\n\"\n-            \"                             transaction, just kept in your wallet.\\n\"\n-            \"5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\\n\"\n-            \"                             The recipient will receive less bitcoins than you enter in the amount field.\\n\"\n-            \"6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125\\n\"\n-            \"7. conf_target            (numeric, optional) Confirmation target (in blocks)\\n\"\n-            \"8. \\\"estimate_mode\\\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+            \"                             transaction, just kept in your wallet.\"},\n+                    {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n+            \"                             The recipient will receive less bitcoins than you enter in the amount field.\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n-            \"       \\\"CONSERVATIVE\\\"\\n\"\n+            \"       \\\"CONSERVATIVE\\\"\"},\n+                }}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"\\\"txid\\\"                  (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n@@ -521,16 +504,13 @@ static UniValue signmessage(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 2)\n         throw std::runtime_error(\n             RPCHelpMan{\"signmessage\",\n-                \"\\nSign a message with the private key of an address\",\n+                \"\\nSign a message with the private key of an address\" +\n+                    HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, false},\n-                    {\"message\", RPCArg::Type::STR, false},\n+                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to use for the private key.\"},\n+                    {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message to create a signature of.\"},\n                 }}\n                 .ToString() +\n-            HelpRequiringPassphrase(pwallet) + \"\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"         (string, required) The bitcoin address to use for the private key.\\n\"\n-            \"2. \\\"message\\\"         (string, required) The message to create a signature of.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n             \"\\nExamples:\\n\"\n@@ -592,13 +572,10 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n             RPCHelpMan{\"getreceivedbyaddress\",\n                 \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, false},\n-                    {\"minconf\", RPCArg::Type::NUM, true},\n+                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address for transactions.\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"         (string, required) The bitcoin address for transactions.\\n\"\n-            \"2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"\\nResult:\\n\"\n             \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n             \"\\nExamples:\\n\"\n@@ -666,13 +643,10 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"getreceivedbylabel\",\n                 \"\\nReturns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, false},\n-                    {\"minconf\", RPCArg::Type::NUM, true},\n+                    {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The selected label, may be the default label using \\\"\\\".\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"label\\\"        (string, required) The selected label, may be the default label using \\\"\\\".\\n\"\n-            \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this label.\\n\"\n             \"\\nExamples:\\n\"\n@@ -740,15 +714,11 @@ static UniValue getbalance(const JSONRPCRequest& request)\n                 \"The available balance is what the wallet considers currently spendable, and is\\n\"\n                 \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\",\n                 {\n-                    {\"dummy\", RPCArg::Type::STR, true},\n-                    {\"minconf\", RPCArg::Type::NUM, true},\n-                    {\"include_watchonly\", RPCArg::Type::NUM, true},\n+                    {\"dummy\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Only include transactions confirmed at least this many times.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. (dummy)           (string, optional) Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\\n\"\n-            \"2. minconf           (numeric, optional, default=0) Only include transactions confirmed at least this many times.\\n\"\n-            \"3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this wallet.\\n\"\n             \"\\nExamples:\\n\"\n@@ -823,50 +793,33 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n         throw std::runtime_error(\n             RPCHelpMan{\"sendmany\",\n-                \"\\nSend multiple times. Amounts are double-precision floating point numbers.\\n\",\n+                \"\\nSend multiple times. Amounts are double-precision floating point numbers.\" +\n+                    HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"dummy\", RPCArg::Type::STR, false, \"\\\"\\\"\"},\n-                    {\"amounts\", RPCArg::Type::OBJ,\n-                        {\n-                            {\"address\", RPCArg::Type::AMOUNT, false},\n-                        },\n-                        false},\n-                    {\"minconf\", RPCArg::Type::NUM, true},\n-                    {\"comment\", RPCArg::Type::STR, true},\n-                    {\"subtractfeefrom\", RPCArg::Type::ARR,\n+                    {\"dummy\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"Must be set to \\\"\\\" for backwards compatibility.\", \"\\\"\\\"\"},\n+                    {\"amounts\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"A json object with addresses and amounts\",\n                         {\n-                            {\"address\", RPCArg::Type::STR, true},\n+                            {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\"},\n                         },\n-                        true},\n-                    {\"replaceable\", RPCArg::Type::BOOL, true},\n-                    {\"conf_target\", RPCArg::Type::NUM, true},\n-                    {\"estimate_mode\", RPCArg::Type::STR, true},\n-                }}\n-                .ToString() +\n-            HelpRequiringPassphrase(pwallet) + \"\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"dummy\\\"               (string, required) Must be set to \\\"\\\" for backwards compatibility.\\n\"\n-            \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n-            \"    {\\n\"\n-            \"      \\\"address\\\":amount   (numeric or string) The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\\n\"\n-            \"      ,...\\n\"\n-            \"    }\\n\"\n-            \"3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\\n\"\n-            \"4. \\\"comment\\\"             (string, optional) A comment\\n\"\n-            \"5. subtractfeefrom         (array, optional) A json array with addresses.\\n\"\n+                    },\n+                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only use the balance confirmed at least this many times.\"},\n+                    {\"comment\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"A comment\"},\n+                    {\"subtractfeefrom\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array with addresses.\\n\"\n             \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n             \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n-            \"                           If no addresses are specified here, the sender pays the fee.\\n\"\n-            \"    [\\n\"\n-            \"      \\\"address\\\"          (string) Subtract fee from this address\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125\\n\"\n-            \"7. conf_target            (numeric, optional) Confirmation target (in blocks)\\n\"\n-            \"8. \\\"estimate_mode\\\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+            \"                           If no addresses are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Subtract fee from this address\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n-            \"       \\\"CONSERVATIVE\\\"\\n\"\n+            \"       \\\"CONSERVATIVE\\\"\"},\n+                }}\n+                .ToString() +\n              \"\\nResult:\\n\"\n             \"\\\"txid\\\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n             \"                                    the number of addresses.\\n\"\n@@ -994,23 +947,24 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4) {\n-        std::string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( \\\"label\\\" \\\"address_type\\\" )\\n\"\n-            \"\\nAdd a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n-            \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n-            \"This functionality is only intended for use with non-watchonly addresses.\\n\"\n-            \"See `importaddress` for watchonly p2sh address support.\\n\"\n-            \"If 'label' is specified, assign address to that label.\\n\"\n-\n-            \"\\nArguments:\\n\"\n-            \"1. nrequired                      (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n-            \"2. \\\"keys\\\"                         (string, required) A json array of bitcoin addresses or hex-encoded public keys\\n\"\n-            \"     [\\n\"\n-            \"       \\\"address\\\"                  (string) bitcoin address or hex-encoded public key\\n\"\n-            \"       ...,\\n\"\n-            \"     ]\\n\"\n-            \"3. \\\"label\\\"                        (string, optional) A label to assign the addresses to.\\n\"\n-            \"4. \\\"address_type\\\"                 (string, optional) The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -addresstype.\\n\"\n-\n+        std::string msg =\n+            RPCHelpMan{\"addmultisigaddress\",\n+                \"\\nAdd a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n+                \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n+                \"This functionality is only intended for use with non-watchonly addresses.\\n\"\n+                \"See `importaddress` for watchonly p2sh address support.\\n\"\n+                \"If 'label' is specified, assign address to that label.\\n\",\n+                {\n+                    {\"nrequired\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The number of required signatures out of the n keys or addresses.\"},\n+                    {\"keys\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of bitcoin addresses or hex-encoded public keys\",\n+                        {\n+                            {\"key\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"bitcoin address or hex-encoded public key\"},\n+                        },\n+                        },\n+                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"A label to assign the addresses to.\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -addresstype.\"},\n+                }}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"address\\\":\\\"multisigaddress\\\",    (string) The value of the new multisig address.\\n\"\n@@ -1237,17 +1191,12 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             RPCHelpMan{\"listreceivedbyaddress\",\n                 \"\\nList balances by receiving address.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, true},\n-                    {\"include_empty\", RPCArg::Type::BOOL, true},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, true},\n-                    {\"address_filter\", RPCArg::Type::STR, true},\n+                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n+                    {\"include_empty\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include addresses that haven't received any payments.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n+                    {\"address_filter\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"If present, only return information on this address.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n-            \"2. include_empty     (bool, optional, default=false) Whether to include addresses that haven't received any payments.\\n\"\n-            \"3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').\\n\"\n-            \"4. address_filter    (string, optional) If present, only return information on this address.\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n@@ -1295,16 +1244,11 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"listreceivedbylabel\",\n                 \"\\nList received transactions by label.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, true},\n-                    {\"include_empty\", RPCArg::Type::BOOL, true},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, true},\n+                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n+                    {\"include_empty\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include labels that haven't received any payments.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n-            \"2. include_empty     (bool, optional, default=false) Whether to include labels that haven't received any payments.\\n\"\n-            \"3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').\\n\"\n-\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n@@ -1441,18 +1385,13 @@ UniValue listtransactions(const JSONRPCRequest& request)\n                 \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n                 \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, true},\n-                    {\"count\", RPCArg::Type::NUM, true},\n-                    {\"skip\", RPCArg::Type::NUM, true},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, true},\n+                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"If set, should be a valid label name to return only incoming transactions\\n\"\n+            \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\"},\n+                    {\"count\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"10\", \"The number of transactions to return\"},\n+                    {\"skip\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"The number of transactions to skip\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"label\\\"    (string, optional) If set, should be a valid label name to return only incoming transactions\\n\"\n-            \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\\n\"\n-            \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n-            \"3. skip           (numeric, optional, default=0) The number of transactions to skip\\n\"\n-            \"4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n@@ -1576,18 +1515,13 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n                 \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n                 \"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \\\"removed\\\" array.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR, true},\n-                    {\"target_confirmations\", RPCArg::Type::NUM, true},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, true},\n-                    {\"include_removed\", RPCArg::Type::BOOL, true},\n+                    {\"blockhash\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The block hash to list transactions since\"},\n+                    {\"target_confirmations\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n+                    {\"include_removed\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n+            \"                                                           (not guaranteed to work on pruned nodes)\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"            (string, optional) The block hash to list transactions since\\n\"\n-            \"2. target_confirmations:    (numeric, optional, default=1) Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\\n\"\n-            \"3. include_watchonly:       (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n-            \"4. include_removed:         (bool, optional, default=true) Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n-            \"                                                           (not guaranteed to work on pruned nodes)\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"transactions\\\": [\\n\"\n@@ -1721,13 +1655,10 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettransaction\",\n                 \"\\nGet detailed information about in-wallet transaction <txid>\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR, false},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, true},\n+                    {\"txid\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses in balance calculation and details[]\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"                  (string, required) The transaction id\\n\"\n-            \"2. \\\"include_watchonly\\\"     (bool, optional, default=false) Whether to include watch-only addresses in balance calculation and details[]\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n@@ -1825,11 +1756,9 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n                 \"It only works on transactions which are not included in a block and are not currently in the mempool.\\n\"\n                 \"It has no effect on transactions which are already abandoned.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"    (string, required) The transaction id\\n\"\n             \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n@@ -1871,11 +1800,9 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"backupwallet\",\n                 \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\",\n                 {\n-                    {\"destination\", RPCArg::Type::STR, false},\n+                    {\"destination\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The destination directory or file\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"destination\\\"   (string) The destination directory or file\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"backupwallet\", \"\\\"backup.dat\\\"\")\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n@@ -1909,14 +1836,12 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n             RPCHelpMan{\"keypoolrefill\",\n-                \"\\nFills the keypool.\",\n+                \"\\nFills the keypool.\"+\n+                    HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"newsize\", RPCArg::Type::NUM, true},\n+                    {\"newsize\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"100\", \"The new keypool size\"},\n                 }}\n                 .ToString() +\n-            HelpRequiringPassphrase(pwallet) + \"\\n\"\n-            \"\\nArguments\\n\"\n-            \"1. newsize     (numeric, optional, default=100) The new keypool size\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"keypoolrefill\", \"\")\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n@@ -1963,13 +1888,10 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n                 \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n                 \"This is needed prior to performing transactions related to private keys such as sending bitcoins\\n\",\n                 {\n-                    {\"passphrase\", RPCArg::Type::STR, false},\n-                    {\"timeout\", RPCArg::Type::NUM, false},\n+                    {\"passphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet passphrase\"},\n+                    {\"timeout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The time to keep the decryption key in seconds; capped at 100000000 (~3 years).\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"passphrase\\\"     (string, required) The wallet passphrase\\n\"\n-            \"2. timeout            (numeric, required) The time to keep the decryption key in seconds; capped at 100000000 (~3 years).\\n\"\n             \"\\nNote:\\n\"\n             \"Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\\n\"\n             \"time that overrides the old one.\\n\"\n@@ -2051,13 +1973,10 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n             RPCHelpMan{\"walletpassphrasechange\",\n                 \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\",\n                 {\n-                    {\"oldpassphrase\", RPCArg::Type::STR, false},\n-                    {\"newpassphrase\", RPCArg::Type::STR, false},\n+                    {\"oldpassphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The current passphrase\"},\n+                    {\"newpassphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The new passphrase\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"oldpassphrase\\\"      (string) The current passphrase\\n\"\n-            \"2. \\\"newpassphrase\\\"      (string) The new passphrase\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"walletpassphrasechange\", \"\\\"old one\\\" \\\"new one\\\"\")\n             + HelpExampleRpc(\"walletpassphrasechange\", \"\\\"old one\\\", \\\"new one\\\"\")\n@@ -2154,11 +2073,9 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n                 \"Use the walletpassphrase call for this, and then walletlock call.\\n\"\n                 \"If the wallet is already encrypted, use the walletpassphrasechange call.\\n\",\n                 {\n-                    {\"passphrase\", RPCArg::Type::STR, false},\n+                    {\"passphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"passphrase\\\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nEncrypt your wallet\\n\"\n             + HelpExampleCli(\"encryptwallet\", \"\\\"my pass phrase\\\"\") +\n@@ -2217,30 +2134,19 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n                 \"is always cleared (by virtue of process exit) when a node stops or fails.\\n\"\n                 \"Also see the listunspent call\\n\",\n                 {\n-                    {\"unlock\", RPCArg::Type::BOOL, false},\n-                    {\"transactions\", RPCArg::Type::ARR,\n+                    {\"unlock\", RPCArg::Type::BOOL, /* opt */ false, /* default_val */ \"\", \"Whether to unlock (true) or lock (false) the specified transactions\"},\n+                    {\"transactions\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of objects. Each object the txid (string) vout (numeric)\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ,\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, false},\n-                                    {\"vout\", RPCArg::Type::NUM, false},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n                                 },\n-                                true},\n+                            },\n                         },\n-                        true},\n+                    },\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\\n\"\n-            \"2. \\\"transactions\\\"  (string, optional) A json array of objects. Each object the txid (string) vout (numeric)\\n\"\n-            \"     [           (json array of json objects)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",    (string) The transaction id\\n\"\n-            \"         \\\"vout\\\": n         (numeric) The output number\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"     ]\\n\"\n-\n             \"\\nResult:\\n\"\n             \"true|false    (boolean) Whether the command was successful or not\\n\"\n \n@@ -2407,11 +2313,9 @@ static UniValue settxfee(const JSONRPCRequest& request)\n             RPCHelpMan{\"settxfee\",\n                 \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\",\n                 {\n-                    {\"amount\", RPCArg::Type::NUM, false},\n+                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The transaction fee in \" + CURRENCY_UNIT + \"/kB\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. amount         (numeric or string, required) The transaction fee in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"\\nResult\\n\"\n             \"true|false        (boolean) Returns true if successful\\n\"\n             \"\\nExamples:\\n\"\n@@ -2583,11 +2487,9 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n                 \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n                 \"\\napplied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).\\n\",\n                 {\n-                    {\"filename\", RPCArg::Type::STR, false},\n+                    {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet directory or .dat file.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"filename\\\"    (string, required) The wallet directory or .dat file.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"name\\\" :    <wallet_name>,        (string) The wallet name if loaded successfully.\\n\"\n@@ -2638,13 +2540,10 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"createwallet\",\n                 \"\\nCreates and loads a new wallet.\\n\",\n                 {\n-                    {\"wallet_name\", RPCArg::Type::STR, false},\n-                    {\"disable_private_keys\", RPCArg::Type::BOOL, true},\n+                    {\"wallet_name\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n+                    {\"disable_private_keys\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"wallet_name\\\"          (string, required) The name for the new wallet. If this is a path, the wallet will be created at the path location.\\n\"\n-            \"2. disable_private_keys   (boolean, optional, default: false) Disable the possibility of private keys (only watchonlys are possible in this mode).\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"name\\\" :    <wallet_name>,        (string) The wallet name if created successfully. If the wallet was created using a full path, the wallet_name will be the full path.\\n\"\n@@ -2696,11 +2595,9 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n                 \"Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.\\n\"\n                 \"Specifying the wallet name on a wallet endpoint is invalid.\",\n                 {\n-                    {\"wallet_name\", RPCArg::Type::STR, true},\n+                    {\"wallet_name\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The name of the wallet to unload.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"wallet_name\\\"    (string, optional) The name of the wallet to unload.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"unloadwallet\", \"wallet_name\")\n             + HelpExampleRpc(\"unloadwallet\", \"wallet_name\")\n@@ -2797,41 +2694,25 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n                 \"Optionally filter to only include txouts paid to specified addresses.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, true},\n-                    {\"maxconf\", RPCArg::Type::NUM, true},\n-                    {\"addresses\", RPCArg::Type::ARR,\n+                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum confirmations to filter\"},\n+                    {\"maxconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"9999999\", \"The maximum confirmations to filter\"},\n+                    {\"addresses\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of bitcoin addresses to filter\",\n                         {\n-                            {\"address\", RPCArg::Type::STR, true},\n+                            {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"bitcoin address\"},\n                         },\n-                        true},\n-                    {\"include_unsafe\", RPCArg::Type::BOOL, true},\n-                    {\"query_options\", RPCArg::Type::OBJ,\n+                    },\n+                    {\"include_unsafe\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Include outputs that are not safe to spend\\n\"\n+            \"                  See description of \\\"safe\\\" attribute below.\"},\n+                    {\"query_options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"JSON with query options\",\n                         {\n-                            {\"minimumAmount\", RPCArg::Type::AMOUNT, true},\n-                            {\"maximumAmount\", RPCArg::Type::AMOUNT, true},\n-                            {\"maximumCount\", RPCArg::Type::NUM, true},\n-                            {\"minimumSumAmount\", RPCArg::Type::AMOUNT, true},\n+                            {\"minimumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"0\", \"Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n+                            {\"maximumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"unlimited\", \"Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n+                            {\"maximumCount\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"unlimited\", \"Maximum number of UTXOs\"},\n+                            {\"minimumSumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"unlimited\", \"Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\"},\n                         },\n-                        true, \"query_options\"},\n+                        \"query_options\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. minconf          (numeric, optional, default=1) The minimum confirmations to filter\\n\"\n-            \"2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\\n\"\n-            \"3. \\\"addresses\\\"      (string) A json array of bitcoin addresses to filter\\n\"\n-            \"    [\\n\"\n-            \"      \\\"address\\\"     (string) bitcoin address\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend\\n\"\n-            \"                  See description of \\\"safe\\\" attribute below.\\n\"\n-            \"5. query_options    (json, optional) JSON with query options\\n\"\n-            \"    {\\n\"\n-            \"      \\\"minimumAmount\\\"    (numeric or string, default=0) Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\\n\"\n-            \"      \\\"maximumAmount\\\"    (numeric or string, default=unlimited) Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\\n\"\n-            \"      \\\"maximumCount\\\"     (numeric or string, default=unlimited) Maximum number of UTXOs\\n\"\n-            \"      \\\"minimumSumAmount\\\" (numeric or string, default=unlimited) Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\\n\"\n-            \"    }\\n\"\n             \"\\nResult\\n\"\n             \"[                   (array of json object)\\n\"\n             \"  {\\n\"\n@@ -3109,56 +2990,37 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 \"You can see whether this is the case by checking the \\\"solvable\\\" field in the listunspent output.\\n\"\n                 \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, false},\n-                    {\"options\", RPCArg::Type::OBJ,\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of the raw transaction\"},\n+                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n                         {\n-                            {\"changeAddress\", RPCArg::Type::STR, true},\n-                            {\"changePosition\", RPCArg::Type::NUM, true},\n-                            {\"change_type\", RPCArg::Type::STR, true},\n-                            {\"includeWatching\", RPCArg::Type::BOOL, true},\n-                            {\"lockUnspents\", RPCArg::Type::BOOL, true},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, true},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR,\n-                                {\n-                                    {\"vout_index\", RPCArg::Type::NUM, true},\n-                                },\n-                                true},\n-                            {\"replaceable\", RPCArg::Type::BOOL, true},\n-                            {\"conf_target\", RPCArg::Type::NUM, true},\n-                            {\"estimate_mode\", RPCArg::Type::STR, true},\n-                        },\n-                        true, \"options\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, true},\n-                }}\n-                .ToString() +\n-                            \"\\nArguments:\\n\"\n-                            \"1. \\\"hexstring\\\"           (string, required) The hex string of the raw transaction\\n\"\n-                            \"2. options                 (object, optional)\\n\"\n-                            \"   {\\n\"\n-                            \"     \\\"changeAddress\\\"          (string, optional, default pool address) The bitcoin address to receive the change\\n\"\n-                            \"     \\\"changePosition\\\"         (numeric, optional, default random) The index of the change output\\n\"\n-                            \"     \\\"change_type\\\"            (string, optional) The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -changetype.\\n\"\n-                            \"     \\\"includeWatching\\\"        (boolean, optional, default false) Also select inputs which are watch only\\n\"\n-                            \"     \\\"lockUnspents\\\"           (boolean, optional, default false) Lock selected unspent outputs\\n\"\n-                            \"     \\\"feeRate\\\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n-                            \"     \\\"subtractFeeFromOutputs\\\" (array, optional) A json array of integers.\\n\"\n+                            {\"changeAddress\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                            {\"changePosition\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"random\", \"The index of the change output\"},\n+                            {\"change_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -changetype.\"},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also select inputs which are watch only\"},\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Lock selected unspent outputs\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n                             \"                              The outputs are specified by their zero-based index, before any change output is added.\\n\"\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n-                            \"                              If no outputs are specified here, the sender pays the fee.\\n\"\n-                            \"                                  [vout_index,...]\\n\"\n-                            \"     \\\"replaceable\\\"            (boolean, optional) Marks this transaction as BIP125 replaceable.\\n\"\n-                            \"                              Allows this transaction to be replaced by a transaction with higher fees\\n\"\n-                            \"     \\\"conf_target\\\"            (numeric, optional) Confirmation target (in blocks)\\n\"\n-                            \"     \\\"estimate_mode\\\"          (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+                            \"                              If no outputs are specified here, the sender pays the fee.\",\n+                                {\n+                                    {\"vout_index\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"\"},\n+                                },\n+                            },\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                            \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"Confirmation target (in blocks)\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n                             \"         \\\"UNSET\\\"\\n\"\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n-                            \"         \\\"CONSERVATIVE\\\"\\n\"\n-                            \"   }\\n\"\n-                            \"                         for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n-                            \"3. iswitness               (boolean, optional) Whether the transaction hex is a serialized witness transaction \\n\"\n-                            \"                              If iswitness is not present, heuristic tests will be used in decoding\\n\"\n-\n+                            \"         \\\"CONSERVATIVE\\\"\"},\n+                        },\n+                        \"options\"},\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Whether the transaction hex is a serialized witness transaction \\n\"\n+                            \"                              If iswitness is not present, heuristic tests will be used in decoding\"},\n+                }}\n+                .ToString() +\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n@@ -3212,48 +3074,32 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"signrawtransactionwithwallet\",\n                 \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n                 \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-                \"this transaction depends on but may not yet be in the block chain.\\n\",\n+                \"this transaction depends on but may not yet be in the block chain.\" +\n+                    HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR, false},\n-                    {\"prevtxs\", RPCArg::Type::ARR,\n+                    {\"hexstring\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n+                    {\"prevtxs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of previous dependent transaction outputs\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ,\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, false},\n-                                    {\"vout\", RPCArg::Type::NUM, false},\n-                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, false},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, false},\n-                                    {\"amount\", RPCArg::Type::AMOUNT, false},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"script key\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"\", \"(required for P2SH or P2WSH)\"},\n+                                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount spent\"},\n                                 },\n-                                false},\n+                            },\n                         },\n-                        true},\n-                    {\"sighashtype\", RPCArg::Type::STR, true},\n-                }}\n-                .ToString() +\n-            HelpRequiringPassphrase(pwallet) + \"\\n\"\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"                        (string, optional) An json array of previous dependent transaction outputs\\n\"\n-            \"     [                              (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",               (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",     (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",     (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+                    },\n+                    {\"sighashtype\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ALL\", \"The signature hash type. Must be one of\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n             \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n+                }}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n@@ -3314,38 +3160,29 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n                 \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, false},\n-                    {\"options\", RPCArg::Type::OBJ,\n+                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The txid to be bumped\"},\n+                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n                         {\n-                            {\"confTarget\", RPCArg::Type::NUM, true},\n-                            {\"totalFee\", RPCArg::Type::AMOUNT, true},\n-                            {\"replaceable\", RPCArg::Type::BOOL, true},\n-                            {\"estimate_mode\", RPCArg::Type::STR, true},\n-                        },\n-                        true, \"options\"},\n-                }}\n-                .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. txid                  (string, required) The txid to be bumped\\n\"\n-            \"2. options               (object, optional)\\n\"\n-            \"   {\\n\"\n-            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n-            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+                            {\"confTarget\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"Confirmation target (in blocks)\"},\n+                            {\"totalFee\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"Total fee (NOT feerate) to pay, in satoshis.\\n\"\n             \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n             \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n-            \"                         the dust threshold.\\n\"\n-            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         the dust threshold.\"},\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Whether the new transaction should still be\\n\"\n             \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n             \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n             \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n             \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n             \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n-            \"                         are replaceable).\\n\"\n-            \"     \\\"estimate_mode\\\"     (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+            \"                         are replaceable).\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n             \"         \\\"UNSET\\\"\\n\"\n             \"         \\\"ECONOMICAL\\\"\\n\"\n-            \"         \\\"CONSERVATIVE\\\"\\n\"\n-            \"   }\\n\"\n+            \"         \\\"CONSERVATIVE\\\"\"},\n+                        },\n+                        \"options\"},\n+                }}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n@@ -3468,13 +3305,10 @@ UniValue generate(const JSONRPCRequest& request)\n             RPCHelpMan{\"generate\",\n                 \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, false},\n-                    {\"maxtries\", RPCArg::Type::NUM, true},\n+                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"How many blocks are generated immediately.\"},\n+                    {\"maxtries\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"How many iterations to try (default = 1000000).\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n-            \"2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n             \"\\nResult:\\n\"\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n             \"\\nExamples:\\n\"\n@@ -3525,13 +3359,10 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n             RPCHelpMan{\"rescanblockchain\",\n                 \"\\nRescan the local blockchain for wallet related transactions.\\n\",\n                 {\n-                    {\"start_height\", RPCArg::Type::NUM, true},\n-                    {\"stop_height\", RPCArg::Type::NUM, true},\n+                    {\"start_height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"block height where the rescan should start\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"the last block height that should be scanned\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"start_height\\\"    (numeric, optional) block height where the rescan should start\\n\"\n-            \"2. \\\"stop_height\\\"     (numeric, optional) the last block height that should be scanned\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"start_height\\\"     (numeric) The block height where the rescan has started. If omitted, rescan started from the genesis block.\\n\"\n@@ -3737,11 +3568,9 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n                 \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n                 \"to be in the wallet.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, false},\n+                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to get the information of.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n@@ -3860,11 +3689,9 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"getaddressesbylabel\",\n                 \"\\nReturns the list of addresses assigned the specified label.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, false},\n+                    {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The label.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n             \"\\nResult:\\n\"\n             \"{ (json object with addresses as keys)\\n\"\n             \"  \\\"address\\\": { (json object with information about address)\\n\"\n@@ -3909,11 +3736,9 @@ static UniValue listlabels(const JSONRPCRequest& request)\n             RPCHelpMan{\"listlabels\",\n                 \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\",\n                 {\n-                    {\"purpose\", RPCArg::Type::STR, true},\n+                    {\"purpose\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"purpose\\\"    (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n             \"\\nResult:\\n\"\n             \"[               (json array of string)\\n\"\n             \"  \\\"label\\\",      (string) Label name\\n\"\n@@ -3967,20 +3792,17 @@ UniValue sethdseed(const JSONRPCRequest& request)\n             RPCHelpMan{\"sethdseed\",\n                 \"\\nSet or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already\\n\"\n                 \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\\n\"\n-                \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\",\n+                \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\" +\n+                    HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"newkeypool\", RPCArg::Type::BOOL, true},\n-                    {\"seed\", RPCArg::Type::STR, true},\n-                }}\n-                .ToString()\n-            + HelpRequiringPassphrase(pwallet) +\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"newkeypool\\\"         (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n+                    {\"newkeypool\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n             \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n             \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing\\n\"\n-            \"                             keypool will be used until it has been depleted.\\n\"\n-            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed; if not provided a random seed will be used.\\n\"\n-            \"                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1\\n\"\n+            \"                             keypool will be used until it has been depleted.\"},\n+                    {\"seed\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The WIF private key to use as the new HD seed; if not provided a random seed will be used.\\n\"\n+            \"                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1\"},\n+                }}\n+                .ToString() +\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"sethdseed\", \"\")\n             + HelpExampleCli(\"sethdseed\", \"false\")\n@@ -4110,28 +3932,21 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             RPCHelpMan{\"walletprocesspsbt\",\n                 \"\\nUpdate a PSBT with input information from our wallet and then sign inputs\\n\"\n-                \"that we can sign for.\\n\",\n+                \"that we can sign for.\" +\n+                    HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"psbt\", RPCArg::Type::STR, false},\n-                    {\"sign\", RPCArg::Type::BOOL, true},\n-                    {\"sighashtype\", RPCArg::Type::STR, true},\n-                    {\"bip32derivs\", RPCArg::Type::BOOL, true},\n-                }}\n-                .ToString() +\n-            HelpRequiringPassphrase(pwallet) + \"\\n\"\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"psbt\\\"                      (string, required) The transaction base64 string\\n\"\n-            \"2. sign                          (boolean, optional, default=true) Also sign the transaction when updating\\n\"\n-            \"3. \\\"sighashtype\\\"            (string, optional, default=ALL) The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n+                    {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction base64 string\"},\n+                    {\"sign\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Also sign the transaction when updating\"},\n+                    {\"sighashtype\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ALL\", \"The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n             \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-            \"4. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n-\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n+                    {\"bip32derivs\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n+                }}\n+                .ToString() +\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"psbt\\\" : \\\"value\\\",          (string) The base64-encoded partially signed transaction\\n\"\n@@ -4184,99 +3999,64 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                 \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n                 \"Implements the Creator and Updater roles.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR,\n+                    {\"inputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of json objects\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ,\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, false},\n-                                    {\"vout\", RPCArg::Type::NUM, false},\n-                                    {\"sequence\", RPCArg::Type::NUM, false},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The sequence number\"},\n                                 },\n-                                false},\n+                            },\n+                        },\n                         },\n-                        false},\n-                    {\"outputs\", RPCArg::Type::ARR,\n+                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs).\\n\"\n+                            \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n+                            \"                             accepted as second parameter.\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ,\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n                                 {\n-                                    {\"address\", RPCArg::Type::AMOUNT, true},\n+                                    {\"address\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"\", \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n                                 },\n-                                true},\n-                            {\"\", RPCArg::Type::OBJ,\n-                                {\n-                                    {\"data\", RPCArg::Type::STR_HEX, true},\n                                 },\n-                                true},\n-                        },\n-                        false},\n-                    {\"locktime\", RPCArg::Type::NUM, true},\n-                    {\"options\", RPCArg::Type::OBJ,\n-                        {\n-                            {\"changeAddress\", RPCArg::Type::STR_HEX, true},\n-                            {\"changePosition\", RPCArg::Type::NUM, true},\n-                            {\"change_type\", RPCArg::Type::STR, true},\n-                            {\"includeWatching\", RPCArg::Type::BOOL, true},\n-                            {\"lockUnspents\", RPCArg::Type::BOOL, true},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, true},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR,\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n                                 {\n-                                    {\"int\", RPCArg::Type::NUM, true},\n+                                    {\"data\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"\", \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n                                 },\n-                                true},\n-                            {\"replaceable\", RPCArg::Type::BOOL, true},\n-                            {\"conf_target\", RPCArg::Type::NUM, true},\n-                            {\"estimate_mode\", RPCArg::Type::STR, true},\n+                            },\n                         },\n-                        true, \"options\"},\n-                    {\"bip32derivs\", RPCArg::Type::BOOL, true},\n-                }}\n-                .ToString() +\n-                            \"\\nArguments:\\n\"\n-                            \"1. \\\"inputs\\\"                (array, required) A json array of json objects\\n\"\n-                            \"     [\\n\"\n-                            \"       {\\n\"\n-                            \"         \\\"txid\\\":\\\"id\\\",      (string, required) The transaction id\\n\"\n-                            \"         \\\"vout\\\":n,         (numeric, required) The output number\\n\"\n-                            \"         \\\"sequence\\\":n      (numeric, optional) The sequence number\\n\"\n-                            \"       } \\n\"\n-                            \"       ,...\\n\"\n-                            \"     ]\\n\"\n-                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n-                            \"   [\\n\"\n-                            \"    {\\n\"\n-                            \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\"\n-                            \"    },\\n\"\n-                            \"    {\\n\"\n-                            \"      \\\"data\\\": \\\"hex\\\"        (obj, optional) A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\\n\"\n-                            \"    }\\n\"\n-                            \"    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n-                            \"                             accepted as second parameter.\\n\"\n-                            \"   ]\\n\"\n-                            \"3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n-                            \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\\n\"\n-                            \"4. options                 (object, optional)\\n\"\n-                            \"   {\\n\"\n-                            \"     \\\"changeAddress\\\"          (string, optional, default pool address) The bitcoin address to receive the change\\n\"\n-                            \"     \\\"changePosition\\\"         (numeric, optional, default random) The index of the change output\\n\"\n-                            \"     \\\"change_type\\\"            (string, optional) The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -changetype.\\n\"\n-                            \"     \\\"includeWatching\\\"        (boolean, optional, default false) Also select inputs which are watch only\\n\"\n-                            \"     \\\"lockUnspents\\\"           (boolean, optional, default false) Lock selected unspent outputs\\n\"\n-                            \"     \\\"feeRate\\\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n-                            \"     \\\"subtractFeeFromOutputs\\\" (array, optional) A json array of integers.\\n\"\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n+                            \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n+                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                        {\n+                            {\"changeAddress\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                            {\"changePosition\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"random\", \"The index of the change output\"},\n+                            {\"change_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -changetype.\"},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also select inputs which are watch only\"},\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Lock selected unspent outputs\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n                             \"                              The outputs are specified by their zero-based index, before any change output is added.\\n\"\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n-                            \"                              If no outputs are specified here, the sender pays the fee.\\n\"\n-                            \"                                  [vout_index,...]\\n\"\n-                            \"     \\\"replaceable\\\"            (boolean, optional) Marks this transaction as BIP125 replaceable.\\n\"\n-                            \"                              Allows this transaction to be replaced by a transaction with higher fees\\n\"\n-                            \"     \\\"conf_target\\\"            (numeric, optional) Confirmation target (in blocks)\\n\"\n-                            \"     \\\"estimate_mode\\\"          (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+                            \"                              If no outputs are specified here, the sender pays the fee.\",\n+                                {\n+                                    {\"vout_index\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"\"},\n+                                },\n+                            },\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                            \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"Confirmation target (in blocks)\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n                             \"         \\\"UNSET\\\"\\n\"\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n-                            \"         \\\"CONSERVATIVE\\\"\\n\"\n-                            \"   }\\n\"\n-                            \"5. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n+                            \"         \\\"CONSERVATIVE\\\"\"},\n+                        },\n+                        \"options\"},\n+                    {\"bip32derivs\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n+                }}\n+                .ToString() +\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"psbt\\\": \\\"value\\\",        (string)  The resulting raw transaction (base64-encoded string)\\n\""
      }
    ]
  },
  {
    "sha": "fafd040f7321294d5e4335b9581a6bd46a714c37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZkMDQwZjczMjEyOTRkNWU0MzM1Yjk1ODFhNmJkNDZhNzE0YzM3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-04T16:59:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-04T17:06:13Z"
      },
      "message": "rpc: Add description to fundrawtransaction vout_index",
      "tree": {
        "sha": "773622c99501bb0412b336ae757e797cd430064d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/773622c99501bb0412b336ae757e797cd430064d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafd040f7321294d5e4335b9581a6bd46a714c37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcBrQFAAoJEM4rdWl+aaVIsnkMAKhfN2vKOzgBVjMjuHJs/wPq\nFHdWe8VMjy7lNIyXkgozgdRIUq9ZhRdVPtXRMdQfu9Sjqv7TYKqCCyl5fVP8aZOS\nRgOjLuo6YXOxyTX9Xfk3iWvtAhykvGGtGX43XNn7R7y5NBvGyR/rJPR+wgepBAHX\nM2zOsI5YA5Lf9v+hwRY/2guDL7f8YMA2y2fMAg9GJ1j2Gj225SklQgaiNgluXkp2\nKPVzi18B7259ga1VFlXlByxVLQMxOoTT0V87jXZNs1cCDQEfKHR6iqhcBlB3EjFi\n1JbIDiRgp0CVnfHnNsU6XS8Opeljo9C5U1K8Y+1iNitjZDlXBWQNROGHu09kHVaR\nUjfh7FBFcVDE419lJASKI+m/wOVfWoAiMYCh2utWEyGSrf5eWTXVxdTKIumTajVU\nBG5fc5c2tid8I/N2JjraXcOptOG5aFdpE/T8UMfeQzE1c2VcTTKCxwbWma68gpBL\neZBj0Sj4Xw8r7o9ikTDMlNkMQIc8pLNrG/qcMfH/0g==\n=ILtC\n-----END PGP SIGNATURE-----",
        "payload": "tree 773622c99501bb0412b336ae757e797cd430064d\nparent 1db0096f61680d2b2a9cfe454154de3ad121a9d3\nauthor MarcoFalke <falke.marco@gmail.com> 1543942786 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1543943173 -0500\n\nrpc: Add description to fundrawtransaction vout_index\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafd040f7321294d5e4335b9581a6bd46a714c37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafd040f7321294d5e4335b9581a6bd46a714c37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafd040f7321294d5e4335b9581a6bd46a714c37/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1db0096f61680d2b2a9cfe454154de3ad121a9d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1db0096f61680d2b2a9cfe454154de3ad121a9d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1db0096f61680d2b2a9cfe454154de3ad121a9d3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "de0778b73451ef260307821fe634d1a2335f29d3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafd040f7321294d5e4335b9581a6bd46a714c37/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafd040f7321294d5e4335b9581a6bd46a714c37/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fafd040f7321294d5e4335b9581a6bd46a714c37",
        "patch": "@@ -3005,7 +3005,7 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                             \"                              If no outputs are specified here, the sender pays the fee.\",\n                                 {\n-                                    {\"vout_index\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"\"},\n+                                    {\"vout_index\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n                             {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Marks this transaction as BIP125 replaceable.\\n\""
      }
    ]
  },
  {
    "sha": "fabca42c68ee4cdff08d30e91412ccf1de6d7b41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWJjYTQyYzY4ZWU0Y2RmZjA4ZDMwZTkxNDEyY2NmMWRlNmQ3YjQx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-04T18:30:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-04T18:47:49Z"
      },
      "message": "RPCHelpMan: Add space after colons in extended description\n\nAlso, add doxygen comment to ToDescriptionString",
      "tree": {
        "sha": "aeaab7e7d2bbba758858daa52f7b91580a8c6636",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aeaab7e7d2bbba758858daa52f7b91580a8c6636"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fabca42c68ee4cdff08d30e91412ccf1de6d7b41",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcBsvVAAoJEM4rdWl+aaVIQ5gL/j1ereYhhL2TZZaxABtQRJ0q\nbVlQrctUve8VlLOCWnlH9dDE9YXFYufpBXnZtpkg4ZzcEaIaMkGBAjTRFrZmb+xW\nw0qBMaS9IOu68GkAEk2UL3Re4iOj/FtGngzcx9fmg01hYzMf/zZ9MS1Xf7bh0KNK\nstcgCXr57yvboQey2u31eU1EQYqenT6yQC98yWyiAQFmzOlM3WF9J4mRj50DFtyP\n1w//EmYIY1M/ep2RLkQEU9bsPd+ChYemgMxfhpSPY15JnOIbhW328NR5aEGX3B/W\nIq/NWTIk20xwKQWY3yylpqd+ixSuqXPdj0iTr3SXdWnJFcdZ3VLbea+3AI8L8Wfy\nMnokLfnKkhz9KF9if/c8sTeiGB5paQL7IiqPpfWTexv9ruXqGcY3asj+QfwrRozP\nY3UuxzF6WVLu+VuWbZ0Vgo1ULgWkKFQWyGiX2ygbSU9nNLQpGR+hU3Cmr9tbPmx2\nRmIrajNwRxZuOysPa5vqEsBMrSNUgY2c4vULUfTS1g==\n=HAJm\n-----END PGP SIGNATURE-----",
        "payload": "tree aeaab7e7d2bbba758858daa52f7b91580a8c6636\nparent fafd040f7321294d5e4335b9581a6bd46a714c37\nauthor MarcoFalke <falke.marco@gmail.com> 1543948206 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1543949269 -0500\n\nRPCHelpMan: Add space after colons in extended description\n\nAlso, add doxygen comment to ToDescriptionString\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabca42c68ee4cdff08d30e91412ccf1de6d7b41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fabca42c68ee4cdff08d30e91412ccf1de6d7b41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabca42c68ee4cdff08d30e91412ccf1de6d7b41/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fafd040f7321294d5e4335b9581a6bd46a714c37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafd040f7321294d5e4335b9581a6bd46a714c37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fafd040f7321294d5e4335b9581a6bd46a714c37"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 29,
      "deletions": 9
    },
    "files": [
      {
        "sha": "bb1c315bc7a62c6a18ad733fe90552da511cd489",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabca42c68ee4cdff08d30e91412ccf1de6d7b41/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabca42c68ee4cdff08d30e91412ccf1de6d7b41/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=fabca42c68ee4cdff08d30e91412ccf1de6d7b41",
        "patch": "@@ -165,9 +165,9 @@ struct Sections {\n             if (outer_type == OuterType::NAMED_ARG) return; // Nothing more to do for non-recursive types on first recursion\n             auto left = indent;\n             if (arg.m_type_str.size() != 0 && outer_type == OuterType::OBJ) {\n-                left += \"\\\"\" + arg.m_name + \"\\\":\" + arg.m_type_str.at(0);\n+                left += \"\\\"\" + arg.m_name + \"\\\": \" + arg.m_type_str.at(0);\n             } else {\n-                left += outer_type == OuterType::OBJ ? arg.ToStringObj() : arg.ToString();\n+                left += outer_type == OuterType::OBJ ? arg.ToStringObj(/* oneline */ false) : arg.ToString(/* oneline */ false);\n             }\n             left += \",\";\n             PushSection({left, arg.ToDescriptionString(/* implicitly_required */ outer_type == OuterType::ARR)});\n@@ -188,7 +188,7 @@ struct Sections {\n         }\n         case RPCArg::Type::ARR: {\n             auto left = indent;\n-            left += outer_type == OuterType::OBJ ? \"\\\"\" + arg.m_name + \"\\\":\" : \"\";\n+            left += outer_type == OuterType::OBJ ? \"\\\"\" + arg.m_name + \"\\\": \" : \"\";\n             left += \"[\";\n             const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString(/* implicitly_required */ outer_type == OuterType::ARR);\n             PushSection({left, right});\n@@ -345,9 +345,16 @@ std::string RPCArg::ToDescriptionString(const bool implicitly_required) const\n     return ret;\n }\n \n-std::string RPCArg::ToStringObj() const\n+std::string RPCArg::ToStringObj(const bool oneline) const\n {\n-    std::string res = \"\\\"\" + m_name + \"\\\":\";\n+    std::string res;\n+    res += \"\\\"\";\n+    res += m_name;\n+    if (oneline) {\n+        res += \"\\\":\";\n+    } else {\n+        res += \"\\\": \";\n+    }\n     switch (m_type) {\n     case Type::STR:\n         return res + \"\\\"str\\\"\";\n@@ -362,7 +369,7 @@ std::string RPCArg::ToStringObj() const\n     case Type::ARR:\n         res += \"[\";\n         for (const auto& i : m_inner) {\n-            res += i.ToString() + \",\";\n+            res += i.ToString(oneline) + \",\";\n         }\n         return res + \"...]\";\n     case Type::OBJ:\n@@ -393,7 +400,7 @@ std::string RPCArg::ToString(const bool oneline) const\n     case Type::OBJ_USER_KEYS: {\n         std::string res;\n         for (size_t i = 0; i < m_inner.size();) {\n-            res += m_inner[i].ToStringObj();\n+            res += m_inner[i].ToStringObj(oneline);\n             if (++i < m_inner.size()) res += \",\";\n         }\n         if (m_type == Type::OBJ) {"
      },
      {
        "sha": "1d1df2c6354942456a669fdddf3bcbab260b3f47",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabca42c68ee4cdff08d30e91412ccf1de6d7b41/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabca42c68ee4cdff08d30e91412ccf1de6d7b41/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=fabca42c68ee4cdff08d30e91412ccf1de6d7b41",
        "patch": "@@ -88,8 +88,21 @@ struct RPCArg {\n         assert(type == Type::ARR || type == Type::OBJ);\n     }\n \n-    std::string ToString(bool oneline = false) const;\n-    std::string ToStringObj() const;\n+    /**\n+     * Return the type string of the argument.\n+     * Set oneline to allow it to be overrided by a custom oneline type string (m_oneline_description).\n+     */\n+    std::string ToString(bool oneline) const;\n+    /**\n+     * Return the type string of the argument when it is in an object (dict).\n+     * Set oneline to get the oneline representation (less whitespace)\n+     */\n+    std::string ToStringObj(bool oneline) const;\n+    /**\n+     * Return the description string, including the argument type and whether\n+     * the argument is required.\n+     * implicitly_required is set for arguments in an array, which are neither optional nor required.\n+     */\n     std::string ToDescriptionString(bool implicitly_required = false) const;\n };\n "
      }
    ]
  }
]