sipa,2017-06-03T18:14:12Z,utACK 6909865869d9f2582e33e936e770538dfc541cf7,https://github.com/bitcoin/bitcoin/pull/10481#issuecomment-305992151,305992151,
sipa,2017-06-04T23:55:13Z,Something else you could consider is checking whether the total script is not too large (MAX_SCRIPT_SIZE) or the stack elements aren't too large (MAX_SCRIPT_ELEMENT_SIZE).,https://github.com/bitcoin/bitcoin/pull/10481#issuecomment-306076013,306076013,
achow101,2017-06-05T19:02:23Z,addressed @sipa's comments.,https://github.com/bitcoin/bitcoin/pull/10481#issuecomment-306274726,306274726,
sipa,2017-06-06T21:41:59Z,reutACK e76d516a19f09f546d6fb5f16f8b4c758c5287ed,https://github.com/bitcoin/bitcoin/pull/10481#issuecomment-306625939,306625939,
roconnor-blockstream,2017-08-26T16:10:45Z,"This sanity check doesn't work.  invalid opcodes are not illegal, and can even appear in real transactions.  For an example see transaction 95f7832b6449348bd1f3bc2e6eb110785248427bbe13853f2d61da9a6e810800 on testnet.",https://github.com/bitcoin/bitcoin/pull/10481#issuecomment-325142230,325142230,
sipa,2017-08-26T19:35:34Z,@roconnor-blockstream This test is only a heuristic to determine whether to prefer a non-witness interpretation of a transaction over a witness interpretation when it has 0 inputs. It's also only relevant for interpreting inputs to `decoderawtransaction` and `fundrawtransaction` (which are the only things that accept transactions with 0 inputs in the first place).,https://github.com/bitcoin/bitcoin/pull/10481#issuecomment-325157442,325157442,
roconnor-blockstream,2017-08-27T04:50:55Z,"We cannot use heuristics for deciding how to interpret ambiguous parameters to API calls such as `fundrawtransaction`.  It is a security hazard.\n\nImagine someone is using Bitcoin Core as part of some protocol.  They have assembled data from various parties, some of them generated adversarially.  The protocol safely validates the adversarial inputs and composes a valid, partial transaction, and",https://github.com/bitcoin/bitcoin/pull/10481#issuecomment-325177009,325177009,
sipa,2017-08-28T00:42:46Z,@roconnor-blockstream Then what do you suggest? The only full solution is not using the same format for partial transactions (something that @achow101's PSBT format accomplishes). Anything else will inherently risk being ambiguous.,https://github.com/bitcoin/bitcoin/pull/10481#issuecomment-325235809,325235809,
roconnor-blockstream,2017-08-28T02:21:13Z,"Yes, ultimately this format for partial transactions must be retired.\n\nIn the mean time I suggest either adding a, preferably mandatory, flag to `fundrawtransaction` to tell it whether the parameter is a partially signed segwit transaction or a partially signed legacy transaction.\nIf you choose to make the flag optional, then, when no flag is given, you must parse the parameter both ways and",https://github.com/bitcoin/bitcoin/pull/10481#issuecomment-325244946,325244946,
sipa,2017-05-30T23:46:43Z,"You should probably skip this loop for coinbase transactions, as those don't have meaningful input scripts.\n\nIs testing the inputs even useful, as the function of this test is to distinguish between transactions that may errorneously be decoded as 0-input transaction?\n\nNit: space after `for` (and elsewhere).",https://github.com/bitcoin/bitcoin/pull/10481#discussion_r119242422,119242422,src/core_read.cpp
sipa,2017-05-31T02:52:50Z,Mark the `tx` argument const?,https://github.com/bitcoin/bitcoin/pull/10481#discussion_r119260852,119260852,src/core_read.cpp
achow101,2017-06-05T19:02:10Z,done,https://github.com/bitcoin/bitcoin/pull/10481#discussion_r120184103,120184103,src/core_read.cpp
sipa,2017-06-05T21:54:18Z,"I think this isn't actually correct. MAX_SCRIPT_ELEMENT_SIZE is the maximum length of the data, but its encoding as a CScript push may be up to 2 bytes more. Perhaps you can use GetOp2, which returns the data being pushed?",https://github.com/bitcoin/bitcoin/pull/10481#discussion_r120219601,120219601,src/script/script.cpp
achow101,2017-06-05T22:31:27Z,done,https://github.com/bitcoin/bitcoin/pull/10481#discussion_r120226426,120226426,src/script/script.cpp
sipa,2017-06-05T22:35:22Z,vout[i],https://github.com/bitcoin/bitcoin/pull/10481#discussion_r120227012,120227012,src/core_read.cpp
sipa,2017-06-06T07:01:24Z,No MAX_SCRIPT_SIZE test here?,https://github.com/bitcoin/bitcoin/pull/10481#discussion_r120278241,120278241,src/core_read.cpp
achow101,2017-06-06T17:47:28Z,done,https://github.com/bitcoin/bitcoin/pull/10481#discussion_r120430950,120430950,src/core_read.cpp
laanwj,2017-06-07T17:59:10Z,"Let's define a constant for 0xb9, this is kind of a magic number here. `OP_NOP10` would work, but maybe it's better to explicitly mark what the maximum valid opcode is.",https://github.com/bitcoin/bitcoin/pull/10481#discussion_r120700111,120700111,src/script/script.cpp
achow101,2017-06-07T21:08:04Z,Done,https://github.com/bitcoin/bitcoin/pull/10481#discussion_r120745147,120745147,src/script/script.cpp
