[
  {
    "sha": "003ab97862ae5c37148e0fc1f39525112bc190a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDNhYjk3ODYyYWU1YzM3MTQ4ZTBmYzFmMzk1MjUxMTJiYzE5MGEy",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-05-10T15:16:51Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-05-10T15:16:51Z"
      },
      "message": "test: add more assert_* methods",
      "tree": {
        "sha": "046b322aad51a9c8adadc0d1665e1a7c36889780",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/046b322aad51a9c8adadc0d1665e1a7c36889780"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/003ab97862ae5c37148e0fc1f39525112bc190a2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl64GuMACgkQJiaFvHjt\nEftliQf7BTWPEJcbbyQa9w+ljDcgX4JdGQcY2kfnz+gcq3+xcBDqt1w0YniRT1Sa\n2GhE/G1qf8pndyPnLUMqSEWwYTTv6OxhWApG3fp7UOpSZ96f1QdEEYOqa3v/BW7H\nQ+BuSrnYYvEh9+aZ/OJzGfx1WW9HcPBIw76HbMh0UH/hE1o3HrdrwwYSDS8P2bIT\n9+oEqafCpir2QStEwbI8PlzHyLL2HRwsT5ZSlXC6PZI8CdDV0M2/PdGU+MQEtY6j\nRh2ygWl11QX5SmrYmcd4mVOcP3rqdFKQ2hDHc7V5S/sojnQkSTVB0Zo9n72J0gnP\nkq+OPC8YhZ9MhivHmXeY1wxQFVGArA==\n=HoCr\n-----END PGP SIGNATURE-----",
        "payload": "tree 046b322aad51a9c8adadc0d1665e1a7c36889780\nparent 88d8b4e182bfc75e8496f7046af7aab93307b9d0\nauthor Harris <brakmic@gmail.com> 1589123811 +0200\ncommitter Harris <brakmic@gmail.com> 1589123811 +0200\n\ntest: add more assert_* methods\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/003ab97862ae5c37148e0fc1f39525112bc190a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/003ab97862ae5c37148e0fc1f39525112bc190a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/003ab97862ae5c37148e0fc1f39525112bc190a2/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88d8b4e182bfc75e8496f7046af7aab93307b9d0"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 44,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0724b1f263221ee289a40a4c02ba7e471fa7f074",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/003ab97862ae5c37148e0fc1f39525112bc190a2/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/003ab97862ae5c37148e0fc1f39525112bc190a2/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=003ab97862ae5c37148e0fc1f39525112bc190a2",
        "patch": "@@ -25,6 +25,11 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_not_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_less_than,\n+    assert_less_than_or_equal,\n     connect_nodes,\n     wait_until,\n )\n@@ -133,6 +138,30 @@ def custom_method(self):\n \n         self.log.info(\"Running custom_method\")\n \n+    def test_asserts(self):\n+        \"\"\"Test assert methods\n+\n+        This method should be used to try out various assert_* methods.\"\"\"\n+\n+        besthash = self.nodes[0].getbestblockhash()\n+        besthash_copy = besthash\n+\n+        assert_equal(besthash, besthash_copy)\n+\n+        block1 = self.nodes[0].getblock(self.nodes[0].getbestblockhash())\n+        self.nodes[0].generate(nblocks=1)\n+        block2 = self.nodes[0].getblock(self.nodes[0].getbestblockhash())\n+\n+        assert_not_equal(block1, block2)\n+\n+        height1 = block1['height']\n+        height2 = block2['height']\n+\n+        assert_greater_than(height2, height1)\n+        assert_greater_than_or_equal(height2, height1)\n+        assert_less_than(height1, height2)\n+        assert_less_than_or_equal(height1, height2)\n+\n     def run_test(self):\n         \"\"\"Main test logic\"\"\"\n \n@@ -154,6 +183,9 @@ def run_test(self):\n         # breaking the test into sub-sections.\n         self.log.info(\"Starting test!\")\n \n+        self.log.info(\"Testing assert methods\")\n+        self.test_asserts()\n+\n         self.log.info(\"Calling a custom function\")\n         custom_function()\n "
      },
      {
        "sha": "6c7403a1b5a5ae356823c9b2a16f98ab14ef685e",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/003ab97862ae5c37148e0fc1f39525112bc190a2/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/003ab97862ae5c37148e0fc1f39525112bc190a2/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=003ab97862ae5c37148e0fc1f39525112bc190a2",
        "patch": "@@ -45,6 +45,10 @@ def assert_equal(thing1, thing2, *args):\n     if thing1 != thing2 or any(thing1 != arg for arg in args):\n         raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\n \n+def assert_not_equal(thing1, thing2, *args):\n+   if thing1 == thing2 and all(thing1 == arg for arg in args):\n+        raise AssertionError(\"(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\n+\n def assert_greater_than(thing1, thing2):\n     if thing1 <= thing2:\n         raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\n@@ -53,6 +57,14 @@ def assert_greater_than_or_equal(thing1, thing2):\n     if thing1 < thing2:\n         raise AssertionError(\"%s < %s\" % (str(thing1), str(thing2)))\n \n+def assert_less_than(thing1, thing2):\n+    if thing1 >= thing2:\n+        raise AssertionError(\"%s >= %s\" % (str(thing1), str(thing2)))\n+\n+def assert_less_than_or_equal(thing1, thing2):\n+    if thing1 > thing2:\n+        raise AssertionError(\"%s > %s\" % (str(thing1), str(thing2)))\n+\n def assert_raises(exc, fun, *args, **kwds):\n     assert_raises_message(exc, None, fun, *args, **kwds)\n "
      }
    ]
  }
]