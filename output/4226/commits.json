[
  {
    "sha": "9864031485ad063f058b8d597da386e53bc50252",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODY0MDMxNDg1YWQwNjNmMDU4YjhkNTk3ZGEzODZlNTNiYzUwMjUy",
    "commit": {
      "author": {
        "name": "Andrew Poelstra",
        "email": "asp11@sfu.ca",
        "date": "2014-06-02T15:59:59Z"
      },
      "committer": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2014-11-03T21:29:58Z"
      },
      "message": "rpc: Add 'explainrawtransaction' RPC to decode a raw tx with fees, etc.\n\nWhen decoding raw transactions, it is useful to have information about\nthe inputs beyond their txid and vout (if this information is available).\nThis patch adds an RPC analogous to decoderawtransaction, which looks up\nthe inputs of the raw transaction.\n\nIt outputs the following information beyond decoderawtransaction:\n  o txout data on all the inputs (everything from gettxout)\n  o Total input and output values, and the implied fee\n  o the priority of the transaction\n\nSince all this information depends on the inputs being available, if the\nutxo lookup fails for any input, the RPC fails, telling the user to use\ndecoderawtransaction instead.\n\nThe JSON output is also contained in a list, unlike decoderawtransaction.\nA future extension will be to allow the user to explain several (linked)\ntransactions in one go, using outputs from earlier transactions when\nlooking up inputs for later ones. (This is not implemented.)",
      "tree": {
        "sha": "a5beea6883e648b782b0358d9e79c96119108147",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5beea6883e648b782b0358d9e79c96119108147"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9864031485ad063f058b8d597da386e53bc50252",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9864031485ad063f058b8d597da386e53bc50252",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9864031485ad063f058b8d597da386e53bc50252",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9864031485ad063f058b8d597da386e53bc50252/comments",
    "author": {
      "login": "apoelstra",
      "id": 1351933,
      "node_id": "MDQ6VXNlcjEzNTE5MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apoelstra",
      "html_url": "https://github.com/apoelstra",
      "followers_url": "https://api.github.com/users/apoelstra/followers",
      "following_url": "https://api.github.com/users/apoelstra/following{/other_user}",
      "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
      "organizations_url": "https://api.github.com/users/apoelstra/orgs",
      "repos_url": "https://api.github.com/users/apoelstra/repos",
      "events_url": "https://api.github.com/users/apoelstra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apoelstra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "apoelstra",
      "id": 1351933,
      "node_id": "MDQ6VXNlcjEzNTE5MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apoelstra",
      "html_url": "https://github.com/apoelstra",
      "followers_url": "https://api.github.com/users/apoelstra/followers",
      "following_url": "https://api.github.com/users/apoelstra/following{/other_user}",
      "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
      "organizations_url": "https://api.github.com/users/apoelstra/orgs",
      "repos_url": "https://api.github.com/users/apoelstra/repos",
      "events_url": "https://api.github.com/users/apoelstra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apoelstra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff17816abf2d2be2b349c4ba4d49633a126074fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff17816abf2d2be2b349c4ba4d49633a126074fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff17816abf2d2be2b349c4ba4d49633a126074fa"
      }
    ],
    "stats": {
      "total": 270,
      "additions": 201,
      "deletions": 69
    },
    "files": [
      {
        "sha": "1c6d548d361f0974e9869a5075ec660158410a37",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -68,13 +68,6 @@ bool CBasicKeyStore::AddWatchOnly(const CScript &dest)\n     return true;\n }\n \n-bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)\n-{\n-    LOCK(cs_KeyStore);\n-    setWatchOnly.erase(dest);\n-    return true;\n-}\n-\n bool CBasicKeyStore::HaveWatchOnly(const CScript &dest) const\n {\n     LOCK(cs_KeyStore);"
      },
      {
        "sha": "f4de57318bdfeaf9f079ec8ab95158684d687361",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -41,7 +41,6 @@ class CKeyStore\n \n     //! Support for Watch-only addresses\n     virtual bool AddWatchOnly(const CScript &dest) =0;\n-    virtual bool RemoveWatchOnly(const CScript &dest) =0;\n     virtual bool HaveWatchOnly(const CScript &dest) const =0;\n     virtual bool HaveWatchOnly() const =0;\n };\n@@ -100,7 +99,6 @@ class CBasicKeyStore : public CKeyStore\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const;\n \n     virtual bool AddWatchOnly(const CScript &dest);\n-    virtual bool RemoveWatchOnly(const CScript &dest);\n     virtual bool HaveWatchOnly(const CScript &dest) const;\n     virtual bool HaveWatchOnly() const;\n };"
      },
      {
        "sha": "afb343f349ea33bc7e89de3361e43001b88f2658",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -32,7 +32,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n {\n     QList<TransactionRecord> parts;\n     int64_t nTime = wtx.GetTxTime();\n-    CAmount nCredit = wtx.GetCredit(ISMINE_ALL);\n+    CAmount nCredit = wtx.GetCredit(true);\n     CAmount nDebit = wtx.GetDebit(ISMINE_ALL);\n     CAmount nNet = nCredit - nDebit;\n     uint256 hash = wtx.GetHash();"
      },
      {
        "sha": "7d8c886ab27c398942dbe23e0c54831f2a4c6522",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -572,8 +572,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n         if (nDepth < 0) continue;\n         COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth, true);\n-        if (outpoint.n < out.tx->vout.size() && wallet->IsMine(out.tx->vout[outpoint.n]) == ISMINE_SPENDABLE)\n-            vCoins.push_back(out);\n+        vCoins.push_back(out);\n     }\n \n     BOOST_FOREACH(const COutput& out, vCoins)"
      },
      {
        "sha": "1ac7024550c6f14f5c082f20636ad1f9dd8a861b",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -114,6 +114,8 @@ Value importprivkey(const Array& params, bool fHelp)\n     CPubKey pubkey = key.GetPubKey();\n     CKeyID vchAddress = pubkey.GetID();\n     {\n+        LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n         pwalletMain->MarkDirty();\n         pwalletMain->SetAddressBook(vchAddress, strLabel, \"receive\");\n \n@@ -179,8 +181,7 @@ Value importaddress(const Array& params, bool fHelp)\n         fRescan = params[2].get_bool();\n \n     {\n-        if (::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        LOCK2(cs_main, pwalletMain->cs_wallet);\n \n         // add to address book or update label\n         if (address.IsValid())"
      },
      {
        "sha": "bc89911df7fefa67f208844bb89943c6bd028c87",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -52,6 +52,7 @@ enum RPCErrorCode\n     RPC_VERIFY_ERROR                = -25, // General error during transaction or block submission\n     RPC_VERIFY_REJECTED             = -26, // Transaction or block was rejected by network rules\n     RPC_VERIFY_ALREADY_IN_CHAIN     = -27, // Transaction already in chain\n+    RPC_VERIFY_INPUT_UNKNOWN        = -28, // Unknown input for explainrawtransaction\n \n     // Aliases for backward compatibility\n     RPC_TRANSACTION_ERROR           = RPC_VERIFY_ERROR,"
      },
      {
        "sha": "cbff96f52274cd0fadce32095ca66a31350e1c1d",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 179,
        "deletions": 0,
        "changes": 179,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -443,6 +443,185 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n+Value explainrawtransaction(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"explainrawtransaction \\\"hexstring\\\"\\n\"\n+            \"\\nReturn a JSON object representing the serialized, hex-encoded transaction,\\n\"\n+            \"as it applies to the current chainstate.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hex\\\"      (string, required) The transaction hex string\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id\\n\"\n+            \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n+            \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n+            \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n+            \"     {\\n\"\n+            \"       \\\"txid\\\": \\\"id\\\",    (string) The transaction id\\n\"\n+            \"       \\\"vout\\\": n,         (numeric) The output number\\n\"\n+            \"       \\\"scriptSig\\\": {     (json object) The script\\n\"\n+            \"         \\\"asm\\\": \\\"asm\\\",  (string) asm\\n\"\n+            \"         \\\"hex\\\": \\\"hex\\\"   (string) hex\\n\"\n+            \"       },\\n\"\n+            \"       \\\"txoInfo\\\": {     (json object) Information about the referenced output\\n\"\n+            \"         \\\"coinbase\\\" : true|false   (boolean) Coinbase or not\\n\"\n+            \"         \\\"scriptPubKey\\\" : {        (json object)\\n\"\n+            \"           \\\"asm\\\" : \\\"code\\\",       (string) \\n\"\n+            \"           \\\"hex\\\" : \\\"hex\\\",        (string) \\n\"\n+            \"           \\\"reqSigs\\\" : n,          (numeric) Number of required signatures\\n\"\n+            \"           \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg pubkeyhash\\n\"\n+            \"           \\\"addresses\\\" : [         (array of string) array of bitcoin addresses\\n\"\n+            \"             \\\"bitcoinaddress\\\"      (string) bitcoin address\\n\"\n+            \"              ,...\\n\"\n+            \"           ]\\n\"\n+            \"         }\\n\"\n+            \"         \\\"value\\\" : x.xxx,          (numeric) The transaction value in btc\\n\"\n+            \"         \\\"version\\\" : n,            (numeric) The version\\n\"\n+            \"         \\\"bestblock\\\" : \\\"hash\\\",     (string) the block hash\\n\"\n+            \"         \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n+            \"       },\\n\"\n+            \"       \\\"sequence\\\": n     (numeric) The script sequence number\\n\"\n+            \"     }\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"vout\\\" : [             (array of json objects)\\n\"\n+            \"     {\\n\"\n+            \"       \\\"value\\\" : x.xxx,            (numeric) The value in btc\\n\"\n+            \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n+            \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n+            \"         \\\"hex\\\" : \\\"hex\\\",          (string) the hex\\n\"\n+            \"         \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n+            \"         \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n+            \"         \\\"addresses\\\" : [           (json array of string)\\n\"\n+            \"           \\\"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\\\"   (string) bitcoin address\\n\"\n+            \"           ,...\\n\"\n+            \"         ]\\n\"\n+            \"       }\\n\"\n+            \"     }\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"total_input\\\" : x.xxx,            (numeric) The total input value in btc\\n\"\n+            \"  \\\"total_output\\\" : x.xxx,           (numeric) The total output value in btc\\n\"\n+            \"  \\\"fee\\\" : x.xxx,                    (numeric) total_output - total_input\\n\"\n+            \"  \\\"priority\\\" : x.xxx,               (numeric) The priority of the transaction\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"explainrawtransaction\", \"\\\"hexstring\\\"\")\n+            + HelpExampleRpc(\"explainrawtransaction\", \"\\\"hexstring\\\"\")\n+        );\n+\n+    vector<unsigned char> txData(ParseHexV(params[0], \"argument\"));\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+    CTransaction tx;\n+    try {\n+        ssData >> tx;\n+    }\n+    catch (std::exception &e) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    // Do a pure decode of the transaction\n+    Object result;\n+    TxToJSON(tx, 0, result);\n+\n+    // Loop through pure decode, adding available information\n+    int64_t total_in = 0;\n+    int64_t total_out = 0;\n+    // First, check that all inputs are available, attach information, and sum\n+    // their values\n+    Array vin = find_value(result, \"vin\").get_array();\n+    BOOST_FOREACH(Value& json_input_v, vin)\n+    {\n+        Object& json_input = json_input_v.get_obj();\n+        RPCTypeCheck(json_input, map_list_of(\"txid\", str_type)(\"vout\", int_type));\n+        const Value& txid_v = find_value(json_input, \"txid\");\n+        const Value& vout_v = find_value(json_input, \"vout\");\n+\n+        // Look up the input transaction and place it into `coins`\n+        const unsigned vout = vout_v.get_int();\n+        CCoins coins;\n+        {\n+            uint256 txid;\n+            txid.SetHex(txid_v.get_str());\n+            // Start by checking the wallet.\n+            bool txout_known = pwalletMain->mapWallet.count(txid) > 0;\n+            if (txout_known) {\n+                const CWalletTx& wtx = pwalletMain->mapWallet[txid];\n+                coins = CCoins(wtx, chainActive.Height());\n+            }\n+            // If not there, try the utxoset\n+            if (!txout_known)\n+                txout_known = !!pcoinsTip->GetCoins(txid, coins);\n+            // If not there, try the mempool\n+            if (!txout_known) {\n+                // nb this block was lifted from gettxout in rpcblockchain.cpp\n+                LOCK(mempool.cs);\n+                CCoinsViewMemPool view(pcoinsTip, mempool);\n+                txout_known = !!view.GetCoins(txid, coins);\n+                // Should we prune spent outputs for explainrawtransaction?\n+                // For now, do so to be consistent with gettxout.\n+                if (txout_known)\n+                    mempool.pruneSpent(txid, coins);\n+            }\n+            // Ok, we have the previous transaction -- do we have the right output?\n+            if (txout_known &&\n+                (vout >= coins.vout.size() || coins.vout[vout].IsNull()))\n+                txout_known = false;\n+            // If all that failed, give up :)\n+            if (!txout_known)\n+                throw JSONRPCError(RPC_VERIFY_INPUT_UNKNOWN, \"Not all transaction inputs are known. Please use decoderawtransaction instead.\");\n+        }\n+        // Add the coin's information to the JSON output\n+        // nb this code was lifted from gettxout in rpcblockchain.cpp\n+        Object vout_info;\n+        vout_info.push_back(Pair(\"coinbase\", coins.fCoinBase));\n+        Object o;\n+        ScriptPubKeyToJSON(coins.vout[vout].scriptPubKey, o, true);\n+        vout_info.push_back(Pair(\"scriptPubKey\", o));\n+        vout_info.push_back(Pair(\"value\", ValueFromAmount(coins.vout[vout].nValue)));\n+        vout_info.push_back(Pair(\"version\", coins.nVersion));\n+\n+        BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n+        CBlockIndex *pindex = it->second;\n+        vout_info.push_back(Pair(\"bestblock\", pindex->GetBlockHash().GetHex()));\n+        if ((unsigned int)coins.nHeight == MEMPOOL_HEIGHT)\n+            vout_info.push_back(Pair(\"confirmations\", 0));\n+        else\n+            vout_info.push_back(Pair(\"confirmations\", pindex->nHeight - coins.nHeight + 1));\n+        json_input.push_back(Pair(\"txoInfo\", vout_info));\n+        total_in += coins.vout[vout].nValue;\n+    }\n+    // Loop through the outputs just to get the total\n+    Array vout = find_value(result, \"vout\").get_array();\n+    BOOST_FOREACH(const Value& json_output_v, vout)\n+    {\n+        const Object& json_output = json_output_v.get_obj();\n+        const Value& value_v = find_value(json_output, \"value\");\n+        total_out += AmountFromValue(value_v);\n+    }\n+\n+    // Add total input/output data to the JSON\n+    CCoinsViewCache &view = *pcoinsTip;\n+    result.push_back(Pair(\"total_input\", ValueFromAmount(total_in)));\n+    result.push_back(Pair(\"total_output\", ValueFromAmount(total_out)));\n+    result.push_back(Pair(\"fee\", ValueFromAmount(total_in - total_out)));\n+    result.push_back(Pair(\"priority\", view.GetPriority(tx, chainActive.Height())));\n+\n+    // TODO: we should take multiple raw transactions as input and explain them all,\n+    // allowing them to be chained together (which means our input lookups above will\n+    // need to also check the list of earlier-seen outputs).\n+    Array ret;\n+    ret.push_back(result);\n+\n+    return ret;\n+}\n+\n Value decodescript(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)"
      },
      {
        "sha": "80d37d1a8797d95bc36be96f2dbb330452dadae8",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -284,6 +284,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      false,      false },\n     { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false,      false },\n     { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      false,      false },\n+    { \"rawtransactions\",    \"explainrawtransaction\",  &explainrawtransaction,  true,      false,      false },\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false,      false },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false,      false },\n     { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false,      false }, /* uses wallet if enabled */"
      },
      {
        "sha": "45e907c5decfc9cdb7680648121b53ddfb1d9cfd",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -194,6 +194,7 @@ extern json_spirit::Value lockunspent(const json_spirit::Array& params, bool fHe\n extern json_spirit::Value listlockunspent(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value createrawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value decoderawtransaction(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value explainrawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value decodescript(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value signrawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value sendrawtransaction(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "2154c767357ef4cd2aee51b1f3dbe858bdb37ffb",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -1540,7 +1540,7 @@ Value gettransaction(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n-    CAmount nCredit = wtx.GetCredit(filter);\n+    CAmount nCredit = wtx.GetCredit(filter != 0);\n     CAmount nDebit = wtx.GetDebit(filter);\n     CAmount nNet = nCredit - nDebit;\n     CAmount nFee = (wtx.IsFromMe(filter) ? wtx.GetValueOut() - nDebit : 0);"
      },
      {
        "sha": "9b71d011d482937b5c08472a200fe1459ffe6649",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -74,6 +74,12 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"locktime\").get_int(), 0);\n     BOOST_CHECK_THROW(r = CallRPC(string(\"decoderawtransaction \")+rawtx+\" extra\"), runtime_error);\n \n+    // Only check failure cases, we have no blockchain data to decode the inputs\n+    BOOST_CHECK_THROW(CallRPC(\"explainrawtransaction\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"explainrawtransaction null\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"explainrawtransaction DEADBEEF\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(string(\"explainrawtransaction \")+rawtx), runtime_error);\n+\n     BOOST_CHECK_THROW(CallRPC(\"signrawtransaction\"), runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"signrawtransaction null\"), runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"signrawtransaction ff00\"), runtime_error);"
      },
      {
        "sha": "7cb61d3121cfca881a4a70d658e6e02fdf9d7073",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -94,13 +94,6 @@ bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     if (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey))\n         return false;\n-\n-    // check if we need to remove from watch-only\n-    CScript script;\n-    script = GetScriptForDestination(pubkey.GetID());\n-    if (HaveWatchOnly(script))\n-        RemoveWatchOnly(script);\n-\n     if (!fFileBacked)\n         return true;\n     if (!IsCrypted()) {\n@@ -183,20 +176,6 @@ bool CWallet::AddWatchOnly(const CScript &dest)\n     return CWalletDB(strWalletFile).WriteWatchOnly(dest);\n }\n \n-bool CWallet::RemoveWatchOnly(const CScript &dest)\n-{\n-    AssertLockHeld(cs_wallet);\n-    if (!CCryptoKeyStore::RemoveWatchOnly(dest))\n-        return false;\n-    if (!HaveWatchOnly())\n-        NotifyWatchonlyChanged(false);\n-    if (fFileBacked)\n-        if (!CWalletDB(strWalletFile).EraseWatchOnly(dest))\n-            return false;\n-\n-    return true;\n-}\n-\n bool CWallet::LoadWatchOnly(const CScript &dest)\n {\n     return CCryptoKeyStore::AddWatchOnly(dest);"
      },
      {
        "sha": "fb5194760cc0fafe2d44e1ed6699ad80050d466b",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 26,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -730,37 +730,18 @@ class CWalletTx : public CMerkleTx\n         return debit;\n     }\n \n-    CAmount GetCredit(const isminefilter& filter) const\n+    CAmount GetCredit(bool fUseCache=true) const\n     {\n         // Must wait until coinbase is safely deep enough in the chain before valuing it\n         if (IsCoinBase() && GetBlocksToMaturity() > 0)\n             return 0;\n \n-        int64_t credit = 0;\n-        if (filter & ISMINE_SPENDABLE)\n-        {\n-            // GetBalance can assume transactions in mapWallet won't change\n-            if (fCreditCached)\n-                credit += nCreditCached;\n-            else\n-            {\n-                nCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n-                fCreditCached = true;\n-                credit += nCreditCached;\n-            }\n-        }\n-        if (filter & ISMINE_WATCH_ONLY)\n-        {\n-            if (fWatchCreditCached)\n-                credit += nWatchCreditCached;\n-            else\n-            {\n-                nWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n-                fWatchCreditCached = true;\n-                credit += nWatchCreditCached;\n-            }\n-        }\n-        return credit;\n+        // GetBalance can assume transactions in mapWallet won't change\n+        if (fUseCache && fCreditCached)\n+            return nCreditCached;\n+        nCreditCached = pwallet->GetCredit(*this, ISMINE_ALL);\n+        fCreditCached = true;\n+        return nCreditCached;\n     }\n \n     CAmount GetImmatureCredit(bool fUseCache=true) const"
      },
      {
        "sha": "eab434e27e9fdbf8aad41fd2859774967a7769b1",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -121,12 +121,6 @@ bool CWalletDB::WriteWatchOnly(const CScript &dest)\n     return Write(std::make_pair(std::string(\"watchs\"), dest), '1');\n }\n \n-bool CWalletDB::EraseWatchOnly(const CScript &dest)\n-{\n-    nWalletDBUpdated++;\n-    return Erase(std::make_pair(std::string(\"watchs\"), dest));\n-}\n-\n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n {\n     nWalletDBUpdated++;"
      },
      {
        "sha": "f3d6e61f8bc7031b32ed9b5ce324264feb6e6373",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9864031485ad063f058b8d597da386e53bc50252/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9864031485ad063f058b8d597da386e53bc50252/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=9864031485ad063f058b8d597da386e53bc50252",
        "patch": "@@ -96,7 +96,6 @@ class CWalletDB : public CDB\n     bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n     bool WriteWatchOnly(const CScript &script);\n-    bool EraseWatchOnly(const CScript &script);\n \n     bool WriteBestBlock(const CBlockLocator& locator);\n     bool ReadBestBlock(CBlockLocator& locator);"
      }
    ]
  }
]