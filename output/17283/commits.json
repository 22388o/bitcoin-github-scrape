[
  {
    "sha": "70cda342cd20d0e0cd9f28405457544036968f2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGNkYTM0MmNkMjBkMGUwY2Q5ZjI4NDA1NDU3NTQ0MDM2OTY4ZjJk",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-26T15:14:38Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-24T15:09:51Z"
      },
      "message": "rpc: improve getaddressinfo RPCHelpman formatting",
      "tree": {
        "sha": "0a58081c4c8a147281a7c77aa3f742f878e436fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a58081c4c8a147281a7c77aa3f742f878e436fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70cda342cd20d0e0cd9f28405457544036968f2d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3anUEACgkQT1chs9Dj\nkh2obBAAkUoXi/alrb8MQNnUnx2vpS+2aCIcmXC/WWVjRZLT70rqdNj1wVHE3Eoa\nOHHHjVHphxAt5ieUhnWUoZOxoyaI0dafQSGp8K1SRxl4g0jOZHsQKt1q3RI3e/H1\nhcpJpsnxKbP6BchGYl0OkIbciSl5aIM5+4ctUhslcqIGXCcn3xlnHquuhf3jj/R+\nZDJLRJL+Fmu7YMwpGYuqKjQgkeimcUbIHVj4D50s6ZZjz2PeCMhaf7rZPTlOYGOO\nZVIgFI59MpK8VqyUrJPv0e9hpDFy1mLeVxDd1WmI85wlqFFu3x9PV1M4v/sHrGdW\nD99YdzsSJ3get+YUIY9aQXB8Vnk2OKGhCdkZ7fvlB+cdUabwxmfwKdu9xmhAw3qz\n1GVlKTSggXRMXMUT3vbu0P52p9qFBEx21d+PWZewU6QDNbmdW8qXz1PCS42Qd8GQ\nrXW6FOznrzT3BBs7AlQeBDInXMudqQAXDtqzBDOBojs1opf9cln9z6g8+1xx+Zoa\naYQ+6lkh888QCoxQAEnkR9ZBJBucZISmCcka3HtiWAeBTjISiqTL9zsOCPR9+pdU\ng+XezAWiMk7DLBx+6oS91xJG39VyeLL626baLOMNPFojH1OJn4xYJN8RxHQGZ+Yp\nL3e/H3ROTuO0nZsm234l2ywMJLd0uCOmav5eCT0VAblONWZR8Go=\n=EhCW\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGE2lG1N3+aQkWM9V1BcHCacEbwEcP2GhrfcaYlntGG+CP/wEFtCN+NBOuWq\nhcNk3bqQZTwI8QRd2p1C8Ah1QNRdXCy+JQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEIzOvXPSD9N8VHAQktO9YgEI8QRd2p1C\n8Ag8o3VMOoc6tQCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wEK2njeWTrSyNsoexMHfOpcgI8QRd2p1D8AjQShNH\nmOmKHgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BDnJ86a/IxIlCOMv8uAoGOFCPEEXdqdQvAIq0F6YM2hWioA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 0a58081c4c8a147281a7c77aa3f742f878e436fe\nparent 239d199667888e5d60309f15a38eed4d3afe56c4\nauthor Jon Atack <jon@atack.com> 1572102878 +0200\ncommitter Jon Atack <jon@atack.com> 1574608191 +0100\n\nrpc: improve getaddressinfo RPCHelpman formatting\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70cda342cd20d0e0cd9f28405457544036968f2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70cda342cd20d0e0cd9f28405457544036968f2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70cda342cd20d0e0cd9f28405457544036968f2d/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "239d199667888e5d60309f15a38eed4d3afe56c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/239d199667888e5d60309f15a38eed4d3afe56c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/239d199667888e5d60309f15a38eed4d3afe56c4"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 29,
      "deletions": 25
    },
    "files": [
      {
        "sha": "2ac58cba6aaf000c8dfa1b2409b17eea1641548b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 25,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70cda342cd20d0e0cd9f28405457544036968f2d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70cda342cd20d0e0cd9f28405457544036968f2d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=70cda342cd20d0e0cd9f28405457544036968f2d",
        "patch": "@@ -3709,41 +3709,45 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     }\n \n             RPCHelpMan{\"getaddressinfo\",\n-                \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n-                \"to be in the wallet.\\n\",\n+                \"\\nReturn information about the given bitcoin address.\\n\"\n+                \"Some information requires the address to be in the wallet.\\n\",\n                 {\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to get the information of.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n-            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex-encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n-            \"  \\\"solvable\\\" : true|false,      (boolean) Whether we know how to spend coins sent to this address, ignoring the possible lack of private keys\\n\"\n-            \"  \\\"desc\\\" : \\\"desc\\\",            (string, optional) A descriptor for spending coins sent to this address (only when solvable)\\n\"\n-            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"ischange\\\" : true|false,      (boolean) If the address was used for change output\\n\"\n-            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n-            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",              (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",             (string) The hex-encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,              (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,         (boolean) If the address is watchonly\\n\"\n+            \"  \\\"solvable\\\" : true|false,            (boolean) Whether we know how to spend coins sent to this address, ignoring the possible lack of private keys\\n\"\n+            \"  \\\"desc\\\" : \\\"desc\\\",                    (string, optional) A descriptor for spending coins sent to this address (only when solvable)\\n\"\n+            \"  \\\"isscript\\\" : true|false,            (boolean) If the key is a script\\n\"\n+            \"  \\\"ischange\\\" : true|false,            (boolean) If the address was used for change output\\n\"\n+            \"  \\\"iswitness\\\" : true|false,           (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version         (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"           (string, optional) The hex value of the witness program\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"                   (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible\\n\"\n+            \"                                                         types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash,\\n\"\n+            \"                                                         witness_v0_scripthash, witness_unknown\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                      (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"pubkeys\\\"                           (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n             \"    [\\n\"\n             \"      \\\"pubkey\\\"\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdseedid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\").\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean, optional) If the pubkey is compressed\\n\"\n-            \"  \\\"label\\\" :  \\\"label\\\"         (string) The label associated with the address, \\\"\\\" is the default label\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"      (string, optional) The Hash160 of the HD seed\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx              (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",          (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n+            \"  \\\"embedded\\\" : {...},                 (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all\\n\"\n+            \"                                                         getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\",\\n\"\n+            \"                                                         \\\"hdseedid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\").\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,        (boolean, optional) If the pubkey is compressed\\n\"\n+            \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address, \\\"\\\" is the default label\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed\\n\"\n             \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingperint of the master key.\\n\"\n-            \"  \\\"labels\\\"                      (object) Array of labels associated with the address.\\n\"\n+            \"  \\\"labels\\\"                            (object) Array of labels associated with the address.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\"\n             \"        \\\"name\\\": \\\"labelname\\\" (string) The label\\n\""
      }
    ]
  },
  {
    "sha": "5a0ed850700dfb19167d40b38f80313bd5e427ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTBlZDg1MDcwMGRmYjE5MTY3ZDQwYjM4ZjgwMzEzYmQ1ZTQyN2Nh",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-26T15:43:13Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-24T22:05:48Z"
      },
      "message": "rpc: improve getaddressinfo RPCHelpman content",
      "tree": {
        "sha": "87da921621498957ab65e7ce6c24b6d6c55a9a3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87da921621498957ab65e7ce6c24b6d6c55a9a3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a0ed850700dfb19167d40b38f80313bd5e427ca",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3a/sUACgkQT1chs9Dj\nkh3duw/+PX6fz5xGsSUp915QmjY/yTgIy2nY2ClirB5wiCb1MJHUUGJwKbdikCQl\n4Z99i7knyxIH7G2v/81F/rBj5rc025tmsI6CKMnGrZnlpOGbcKrXm+sGksLDZmTv\nBe4n43ZKQogq5orTAYqK+IDsCCpKQR0407ntDImq1BVcJjyJebLYGdWbH1wF98rF\nMM7MLCslxNPmDbGJiOqvDSSxFjkLQ55kFhAYe/py07izGR7YdrnGIYB1vcvCTkcD\n29/4jUmcqTsCMTZBMM/BhCGxSWLzJQsWQK0TLZ/zOjjxiZFM/2zVVBkAdaC9l8Zi\nlS42W5tNZLwz4+DMzKX0SeskHZpEZZUyd1XWH/aoxMEDuMQBQCRyqQOMjohWelc9\nYLq+VuBOKSKW9QTmCZ44e70EjKDLx9dS6gfi9QakPtCrjYFD3OQZx0Z2q7kCiMCr\nak714QW6bt8XfU3kqQa5SndTmrrzwM85lREOey3emjGc7ZhAL4VA59l4PYyDa1qF\n3dKn6UDEpK+5EQbWxlwOAPrfnihplCByDyFxUrDq0/QOw6gJKM+B3UacpXvIM6pb\ncYKQVb+kFBBiYhVd1Wnib441dKbQszfEi4r4CPaqVKU8lYUPyAWSHMjfsWvwavzI\nSyJry2HmZ++7AcIzPU1HBCVZJCCW6aJKh4Niw2cw6pt49rW0vME=\n=VySC\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIBUqCF/ZdgVMrUfjuwVfLm1jgrUI8HE1z4yXkVP2YDN5CP/wEFj9jjfBKKHT\n8Mz/SC6vIBwI8QRd2v7G8Agm25H+j86E7QCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wENY4dBriNvYkikcyrKBIIDoI8QRd2v7H\n8AhxqzBtmtSeXACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQ/PfFu57ReUEbBYUnsQ9VWwjxBF3a/sfwCO5M\nWc9ntUT5AIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t8BD9HDF9KqUhR/6Rf+z/uHWKCPEEXdr+x/AIRf7/k7Ry08EAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 87da921621498957ab65e7ce6c24b6d6c55a9a3c\nparent 70cda342cd20d0e0cd9f28405457544036968f2d\nauthor Jon Atack <jon@atack.com> 1572104593 +0200\ncommitter Jon Atack <jon@atack.com> 1574633148 +0100\n\nrpc: improve getaddressinfo RPCHelpman content\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a0ed850700dfb19167d40b38f80313bd5e427ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a0ed850700dfb19167d40b38f80313bd5e427ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a0ed850700dfb19167d40b38f80313bd5e427ca/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70cda342cd20d0e0cd9f28405457544036968f2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70cda342cd20d0e0cd9f28405457544036968f2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70cda342cd20d0e0cd9f28405457544036968f2d"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "db7d6ad0dae75f964e9a56554b3624011a57151b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a0ed850700dfb19167d40b38f80313bd5e427ca/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a0ed850700dfb19167d40b38f80313bd5e427ca/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5a0ed850700dfb19167d40b38f80313bd5e427ca",
        "patch": "@@ -951,7 +951,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n     }\n \n             RPCHelpMan{\"addmultisigaddress\",\n-                \"\\nAdd a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n+                \"\\nAdd an nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n                 \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n                 \"This functionality is only intended for use with non-watchonly addresses.\\n\"\n                 \"See `importaddress` for watchonly p2sh address support.\\n\"\n@@ -3710,48 +3710,48 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n             RPCHelpMan{\"getaddressinfo\",\n                 \"\\nReturn information about the given bitcoin address.\\n\"\n-                \"Some information requires the address to be in the wallet.\\n\",\n+                \"Some of the information will only be present if the address is in the active wallet.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to get the information of.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for which to get information.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\",              (string) The bitcoin address validated\\n\"\n-            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",             (string) The hex-encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,              (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,         (boolean) If the address is watchonly\\n\"\n-            \"  \\\"solvable\\\" : true|false,            (boolean) Whether we know how to spend coins sent to this address, ignoring the possible lack of private keys\\n\"\n-            \"  \\\"desc\\\" : \\\"desc\\\",                    (string, optional) A descriptor for spending coins sent to this address (only when solvable)\\n\"\n-            \"  \\\"isscript\\\" : true|false,            (boolean) If the key is a script\\n\"\n-            \"  \\\"ischange\\\" : true|false,            (boolean) If the address was used for change output\\n\"\n-            \"  \\\"iswitness\\\" : true|false,           (boolean) If the address is a witness address\\n\"\n-            \"  \\\"witness_version\\\" : version         (numeric, optional) The version number of the witness program\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"           (string, optional) The hex value of the witness program\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"                   (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",              (string) The bitcoin address validated.\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",             (string) The hex-encoded scriptPubKey generated by the address.\\n\"\n+            \"  \\\"ismine\\\" : true|false,              (boolean) If the address is yours.\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,         (boolean) If the address is watchonly.\\n\"\n+            \"  \\\"solvable\\\" : true|false,            (boolean) If we know how to spend coins sent to this address, ignoring the possible lack of private keys.\\n\"\n+            \"  \\\"desc\\\" : \\\"desc\\\",                    (string, optional) A descriptor for spending coins sent to this address (only when solvable).\\n\"\n+            \"  \\\"isscript\\\" : true|false,            (boolean) If the key is a script.\\n\"\n+            \"  \\\"ischange\\\" : true|false,            (boolean) If the address was used for change output.\\n\"\n+            \"  \\\"iswitness\\\" : true|false,           (boolean) If the address is a witness address.\\n\"\n+            \"  \\\"witness_version\\\" : version         (numeric, optional) The version number of the witness program.\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"           (string, optional) The hex value of the witness program.\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"                   (string, optional) The output script type. Only if isscript is true and the redeemscript is known. Possible\\n\"\n             \"                                                         types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash,\\n\"\n-            \"                                                         witness_v0_scripthash, witness_unknown\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                      (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"pubkeys\\\"                           (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"                                                         witness_v0_scripthash, witness_unknown.\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                      (string, optional) The redeemscript for the p2sh address.\\n\"\n+            \"  \\\"pubkeys\\\"                           (array, optional) Array of pubkeys associated with the known redeemscript (only if script is multisig).\\n\"\n             \"    [\\n\"\n-            \"      \\\"pubkey\\\"\\n\"\n+            \"      \\\"pubkey\\\" (string)\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx              (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",          (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},                 (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all\\n\"\n-            \"                                                         getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\",\\n\"\n-            \"                                                         \\\"hdseedid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\").\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,        (boolean, optional) If the pubkey is compressed\\n\"\n-            \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address, \\\"\\\" is the default label\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed\\n\"\n-            \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingperint of the master key.\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx              (numeric, optional) The number of signatures required to spend multisig output (only if script is multisig).\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",          (string, optional) The hex value of the raw public key for single-key addresses (possibly embedded in P2SH or P2WSH).\\n\"\n+            \"  \\\"embedded\\\" : {...},                 (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. Includes all\\n\"\n+            \"                                                         getaddressinfo output fields for the embedded address, excluding metadata (timestamp, hdkeypath,\\n\"\n+            \"                                                         hdseedid) and relation to the wallet (ismine, iswatchonly).\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,        (boolean, optional) If the pubkey is compressed.\\n\"\n+            \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address. Defaults to \\\"\\\".\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key if available, expressed in seconds since Epoch Time (Jan 1 1970 GMT).\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath, if the key is HD and available.\\n\"\n+            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed.\\n\"\n+            \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingerprint of the master key.\\n\"\n             \"  \\\"labels\\\"                            (object) Array of labels associated with the address.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\"\n-            \"        \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n-            \"        \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"        \\\"name\\\": \\\"label name\\\" (string) The label.\\n\"\n+            \"        \\\"purpose\\\": \\\"purpose\\\" (string) The purpose of the associated address (send or receive).\\n\"\n             \"      },...\\n\"\n             \"    ]\\n\"\n             \"}\\n\""
      }
    ]
  },
  {
    "sha": "8d1ed0c263f8cdff7189f02040b5d02238d93da0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDFlZDBjMjYzZjhjZGZmNzE4OWYwMjA0MGI1ZDAyMjM4ZDkzZGEw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-28T15:09:15Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-24T22:06:54Z"
      },
      "message": "rpc: clarify label vs labels in getaddressinfo RPCHelpman",
      "tree": {
        "sha": "872d077fcc259a446b627e73acc179d0d2d1e3be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/872d077fcc259a446b627e73acc179d0d2d1e3be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d1ed0c263f8cdff7189f02040b5d02238d93da0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3a/wYACgkQT1chs9Dj\nkh2bBA//SZgt8Aic+iHrg/gt9iFC/jdbDFA912rBdVU7rxfMbbKN/HXowMD/KxXE\nNO5lhRsjcVb8T2XbPM+4D3KNFR77ypqccjrC0QFuGEiiH8fFB3KvzFMg55YBbMvH\n+uhwvFYVO7YZvWVuuQSio9U1ZGiDeqdkNR3y8bpA1J3tD9NECxp9c/AbEn5jbEpE\nvC80CqY/Yt+wkLViD2JvRNoaVoqzkbqTwpD+FLTj5BOPbRYS8FLp/vRx6far9vFl\n4AaevbBT1LUsvfUv+8mYL5EKyxvlFyzLt4/BIG6tqZV8S97983zjIQQ/Tu+VHm20\nwiNhglRBbXhwntfSQeDqPOJbj/pg3SIue+ina0XFSWJ/pQNe3WgRin9MDvWTXjXn\nJnGD2Uk1QEk9OYtjFXSuOdD/ekYUtsupPmK1JCepqX3FgInWdoFnlgQZ8Qr209/H\nYQ3khLsz3AQhRy8R50wlq/zV8P0uq2W4Z0nHjbxxf28LlzeFokKln85ZGol/ynKD\nQhNP8pgx34IEMdOylyuE89E1cMnVb/q90CHOh1gClRjVCTmg+j/FnfU051K7dpmZ\nQhRRI9zUCuRB17vbCynD1IOI7f5OIbOGCGUIKQ3Tkrq+N5BwQKxNMSZusQZYv4v1\nFLKkuY4WjbECoJrY26TQJ9dr8ugVcLiw4esZlLVMv8FlMP4CcL8=\n=TLfl\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMksKA8futthQa0m6lJnGnvJ9CW9H0V6NE4b1J3Bnf6RCP/wEAPzxffRqX8b\nZQ5Dm7mTge0I8QRd2v8H8AiLyi89fpsPDgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEARRVv+PcxX52VUGR+wpKbII8QRd2v8H\n8Ajea/kugjpRCACD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRl\ncm5pdHl3YWxsLmNvbf/wEGrgAPbn8BYJLFujLnWN6KkI8QRd2v8I8Ai7Ux0JYFDx\n6ACD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZ/AQxdbxWCGWWR2c+qoFyYF0BgjxBF3a/wjwCN+NRtblHf23AIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 872d077fcc259a446b627e73acc179d0d2d1e3be\nparent 5a0ed850700dfb19167d40b38f80313bd5e427ca\nauthor Jon Atack <jon@atack.com> 1572275355 +0100\ncommitter Jon Atack <jon@atack.com> 1574633214 +0100\n\nrpc: clarify label vs labels in getaddressinfo RPCHelpman\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d1ed0c263f8cdff7189f02040b5d02238d93da0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d1ed0c263f8cdff7189f02040b5d02238d93da0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d1ed0c263f8cdff7189f02040b5d02238d93da0/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a0ed850700dfb19167d40b38f80313bd5e427ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a0ed850700dfb19167d40b38f80313bd5e427ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a0ed850700dfb19167d40b38f80313bd5e427ca"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "253466ad783a8d730b003812d2cf33b3a6b81078",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d1ed0c263f8cdff7189f02040b5d02238d93da0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d1ed0c263f8cdff7189f02040b5d02238d93da0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8d1ed0c263f8cdff7189f02040b5d02238d93da0",
        "patch": "@@ -3742,15 +3742,16 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"                                                         getaddressinfo output fields for the embedded address, excluding metadata (timestamp, hdkeypath,\\n\"\n             \"                                                         hdseedid) and relation to the wallet (ismine, iswatchonly).\\n\"\n             \"  \\\"iscompressed\\\" : true|false,        (boolean, optional) If the pubkey is compressed.\\n\"\n-            \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address. Defaults to \\\"\\\".\\n\"\n+            \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address. Defaults to \\\"\\\". Equivalent to the name field in the labels array.\\n\"\n             \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key if available, expressed in seconds since Epoch Time (Jan 1 1970 GMT).\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath, if the key is HD and available.\\n\"\n             \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed.\\n\"\n             \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingerprint of the master key.\\n\"\n-            \"  \\\"labels\\\"                            (object) Array of labels associated with the address.\\n\"\n+            \"  \\\"labels\\\"                            (object) An array of labels associated with the address. Currently limited to one label but returned\\n\"\n+            \"                                               as an array to keep the API stable if multiple labels are enabled in the future.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\"\n-            \"        \\\"name\\\": \\\"label name\\\" (string) The label.\\n\"\n+            \"        \\\"name\\\": \\\"label name\\\" (string) The label name. Defaults to \\\"\\\". Equivalent to the label field above.\\n\"\n             \"        \\\"purpose\\\": \\\"purpose\\\" (string) The purpose of the associated address (send or receive).\\n\"\n             \"      },...\\n\"\n             \"    ]\\n\""
      }
    ]
  },
  {
    "sha": "2ee0cb3330ccf70f0540cb42370796e32eff1569",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWUwY2IzMzMwY2NmNzBmMDU0MGNiNDIzNzA3OTZlMzJlZmYxNTY5",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-28T16:26:03Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-24T22:07:05Z"
      },
      "message": "rpc: update getaddressinfo RPCExamples to bech32",
      "tree": {
        "sha": "fa057444e0cfdca52faaed0bc5c51c41621c89ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa057444e0cfdca52faaed0bc5c51c41621c89ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ee0cb3330ccf70f0540cb42370796e32eff1569",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3a/wkACgkQT1chs9Dj\nkh3kHw/9Fqk66Ij+eHWtaHFUxIadWNzlBG59YadZFwkYs2i0KyICL3kP0UgZ8EAO\ne+n0JEWV7g7Hn6jQcuNG8c4ZCDhOaPJCFvECXjOaTa+XgDomGpPdmqXCxEtxXyDm\nGBCrTQT1GtYkyO6X8OtXIfTt8EvDWgivybPOa61L9bUa6/BeY0LV/N3q5FHi3gn8\nzUQfuBkpOhaQCngwbZjdOQENzwH4zJFNDXd8d+mR62rZWRtj7+t8tiNCJH6IO27Z\n3sbrrl0izucnR0/QjaXorJC9gBvApgVsCx/YoBNGYI1u9qO3EOoZtAqf1zConcGl\nMk2ZNFTaHCHoGdPRrVjfUEjic2LE2VSZTY0nuuA2kxU2UPUM9d8roHima5vHiraa\nkyT39nEsilHahX4KtT6p+flofDzlrv47QKE7nXdSLH2ZlV3FQJnp+LDz6z5p2GCz\nDRPS4o1obnTHBo45o95dWIVYr5ut1MN4oiWNuaqcL5fWEvnxS7l/KQKu9Zpdi3KS\n4NwegrSph4BKuAGIQgb9pNM1oWQ+Kx7q7xlAadM6rmwHtYRRW9Z1qDNm4bR8+ymS\nytP1KqGoyiEngrOtiOKi32q7fCG8C2KbgRymoBFBJGYpjsZXVtd+UAPy2mX3kqTl\nIfU9+Q44EmmgGzyGywLfLJrCyXQF4NtgsXLZbCqIgP5ugnAs8f8=\n=S3sr\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIAfExnEKu6DiAkLTHVVY7ypCXCMQG1QV9JbWryZ2huTLCP/wEBS7Z5sJYxSt\nt/arSieUUvII8QRd2v8K8AjY7SHsjMAuVACD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEBzFFfWQMnTvzTQgkfDc1wUI\n8CAfavZpqoVobX7F0rJY+HdlGUhamDI7Zdaj4JYnWjwD/AjxBF3a/wvwCEzzVhiS\ngHzyAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRpbWVz\ndGFtcHMub3Jn//AQKg9czV06McSCa75cREc2vgjxBF3a/wvwCDodJs6ZRkqoAIPf\n4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHkuY29t8BBEWQw/\ni+x6dhcrY/11NUsJCPEEXdr/CvAIBk1hVqEn6NsAg9/jDS75DI4uLWh0dHBzOi8v\nYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree fa057444e0cfdca52faaed0bc5c51c41621c89ca\nparent 8d1ed0c263f8cdff7189f02040b5d02238d93da0\nauthor Jon Atack <jon@atack.com> 1572279963 +0100\ncommitter Jon Atack <jon@atack.com> 1574633225 +0100\n\nrpc: update getaddressinfo RPCExamples to bech32\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ee0cb3330ccf70f0540cb42370796e32eff1569",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ee0cb3330ccf70f0540cb42370796e32eff1569",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ee0cb3330ccf70f0540cb42370796e32eff1569/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d1ed0c263f8cdff7189f02040b5d02238d93da0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d1ed0c263f8cdff7189f02040b5d02238d93da0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d1ed0c263f8cdff7189f02040b5d02238d93da0"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9dd7d8435c04a85108b9acceddcec39817c3d8d0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ee0cb3330ccf70f0540cb42370796e32eff1569/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ee0cb3330ccf70f0540cb42370796e32eff1569/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2ee0cb3330ccf70f0540cb42370796e32eff1569",
        "patch": "@@ -3758,8 +3758,8 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"}\\n\"\n                 },\n                 RPCExamples{\n-                    HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n-            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+                    HelpExampleCli(\"getaddressinfo\", \"\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\"\") +\n+                    HelpExampleRpc(\"getaddressinfo\", \"\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\"\")\n                 },\n             }.Check(request);\n "
      }
    ]
  },
  {
    "sha": "1388de83900eaced906d369fe9e8887ae74b2dcf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzg4ZGU4MzkwMGVhY2VkOTA2ZDM2OWZlOWU4ODg3YWU3NGIyZGNm",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-27T13:16:00Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-24T22:07:07Z"
      },
      "message": "rpc: add getaddressinfo code documentation\n\nand separate the fields with a line break for readability.",
      "tree": {
        "sha": "63491701a09b92d8365f045283867b77720b4c7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63491701a09b92d8365f045283867b77720b4c7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1388de83900eaced906d369fe9e8887ae74b2dcf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3a/wwACgkQT1chs9Dj\nkh32lhAAqj5TpgVQqkGBilOt59/l3rvzzHiGdI6Dr+dQONkRF/+sI3eSZO6XRv9B\npH+JCt+S+bkTrjpJnv/UjYToks2c4kpZ+U5/VX7ajp/gZv3svODYJj23r5IWZIxN\nICqtdJ5SleVuGhYN8QTGIjC0YEd//oibEb2xqawc/Cw63GvKKyW/qsHPsM9guIq/\nvsmT44RKsseiSPy6Eq5/83eSFz1dZsf7uHrazUcXouey6EO+i9+rqe49Pxuu0x3g\n5PsLPoCH592dqIyvcvuJEimpBx9Ninl4fYL2JLuxXYQy6VNNkrGF3ptiI0VCc3yB\nXBshiFZM7ywry+OkSfu4I0WlHtcOJ89ncW/Xy6PLoCN0elnPw/LLvkOBsa4WrnPz\npNI+yQRZXhvb0wzUGtWPHWHx/asvHe5koJr1Yy81F1YEdeaCKGYPojZcaZqDR7Dt\n4Jo5ZqFPi96uUamDUIe6yxndLzq3kokzPxkh5H+xQYA1qUXf8vyjFyMoyUXpQfR0\n6qoYP9bRPPXHPY+rLdz2sUB9SmHwTFMluAyqeSLjG2KRxqeFlkCA2XM73ShqIuSO\nO8bCsqX5UrVq8oKOzMXr2I8AKs2O8bDzI1ChAhjFEiKk8XdtzXJB2Fv0kft6zAV9\nexzoUgncb0xOXy3/537dJZMIKscQk7UiaWEsB6UzjOV1PioPO9w=\n=gIl3\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEwkLgnDfiH0xrcpXWQViQeXsemG37Wx56XIprebqu4hCP/wEC9p5gr4vX5i\nVsY/yXj/A6YI8QRd2v8N8AiOYDkQbmo5jQCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEEJZMJWaPlWncdIC0yTJ\n7l8I8QRd2v8O8AitGS3LiB7oHQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wEEoi2qYCrmeDlz5QQ1NB4UAI8QRd2v8N8Ahq4eH8\ncvj1VwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BBWSk+qooPb0yzhS8B8cOhPCPEEXdr/DfAIquyFQAkQA5QA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 63491701a09b92d8365f045283867b77720b4c7a\nparent 2ee0cb3330ccf70f0540cb42370796e32eff1569\nauthor Jon Atack <jon@atack.com> 1572182160 +0100\ncommitter Jon Atack <jon@atack.com> 1574633227 +0100\n\nrpc: add getaddressinfo code documentation\n\nand separate the fields with a line break for readability.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1388de83900eaced906d369fe9e8887ae74b2dcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1388de83900eaced906d369fe9e8887ae74b2dcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1388de83900eaced906d369fe9e8887ae74b2dcf/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ee0cb3330ccf70f0540cb42370796e32eff1569",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ee0cb3330ccf70f0540cb42370796e32eff1569",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ee0cb3330ccf70f0540cb42370796e32eff1569"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 21,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f4b5a8b9ac02da2204f74015fcbfc3bfa63d79c9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 3,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1388de83900eaced906d369fe9e8887ae74b2dcf/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1388de83900eaced906d369fe9e8887ae74b2dcf/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1388de83900eaced906d369fe9e8887ae74b2dcf",
        "patch": "@@ -3778,23 +3778,39 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n     CScript scriptPubKey = GetScriptForDestination(dest);\n     ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n     const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n \n     isminetype mine = pwallet->IsMine(dest);\n     ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n+\n     bool solvable = provider && IsSolvable(*provider, scriptPubKey);\n     ret.pushKV(\"solvable\", solvable);\n+\n     if (solvable) {\n        ret.pushKV(\"desc\", InferDescriptor(scriptPubKey, *provider)->ToString());\n     }\n+\n     ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n+\n+    // Return DescribeWalletAddress fields.\n+    // Always returned: isscript, ischange, iswitness.\n+    // Optional: witness_version, witness_program, script, hex, pubkeys (array),\n+    // sigsrequired, pubkey, embedded, iscompressed.\n     UniValue detail = DescribeWalletAddress(pwallet, dest);\n     ret.pushKVs(detail);\n+\n+    // Return label field if existing. Currently only one label can be\n+    // associated with an address, so the label should be equivalent to the\n+    // value of the name key/value pair in the labels hash array below.\n     if (pwallet->mapAddressBook.count(dest)) {\n         ret.pushKV(\"label\", pwallet->mapAddressBook[dest].name);\n     }\n+\n     ret.pushKV(\"ischange\", pwallet->IsChange(scriptPubKey));\n \n+    // Fetch KeyMetadata, if present, for the timestamp, hdkeypath, hdseedid,\n+    // and hdmasterfingerprint fields.\n     ScriptPubKeyMan* spk_man = pwallet->GetScriptPubKeyMan(scriptPubKey);\n     if (spk_man) {\n         if (const CKeyMetadata* meta = spk_man->GetMetadata(dest)) {\n@@ -3807,9 +3823,11 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n         }\n     }\n \n-    // Currently only one label can be associated with an address, return an array\n-    // so the API remains stable if we allow multiple labels to be associated with\n-    // an address.\n+    // Return a labels array containing a hash of key/value pairs for the label\n+    // name and address purpose. The name value is equivalent to the label field\n+    // above. Currently only one label can be associated with an address, but we\n+    // return an array so the API remains stable if we allow multiple labels to\n+    // be associated with an address in the future.\n     UniValue labels(UniValue::VARR);\n     std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n     if (mi != pwallet->mapAddressBook.end()) {"
      }
    ]
  },
  {
    "sha": "0f3539ac6d772fc646b5f184fa1efe77bf632f6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjM1MzlhYzZkNzcyZmM2NDZiNWYxODRmYTFlZmU3N2JmNjMyZjZh",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-28T13:54:41Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-24T22:07:10Z"
      },
      "message": "test: add listlabels test in wallet_labels.py",
      "tree": {
        "sha": "b61fd8109e1f6e504ca45815e54fe677bdff500c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b61fd8109e1f6e504ca45815e54fe677bdff500c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f3539ac6d772fc646b5f184fa1efe77bf632f6a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3a/w8ACgkQT1chs9Dj\nkh1gMhAAnxKGkMpHB2mikQ6iOTrZoydGOZeBiDIn2p4+56JrA67/Fu3Z9f3ldIO/\nayxkZwFNd0jT4yN0ldmZk9z2CKNAQFvWIqGhQJ8kjZtdsHCuSI6ne3fU+WmZwUoB\nbCWZRYMvjuoX+/FmTv71Bty9mIW5MeI3klY62uYkXFs2wTpqWpULhNu4MdZYG+qa\nc6L9k7iaI/Hvv5m5iG+dT76PD19WWUPE25IyDG49YZwVrn26NOsMu/XdH4fhK1ts\nLZo9oUnUZPzNQtM6DOnW1kU/gCQXHGz0V8u9E+6PwlKUC70dHcIoMWWAFlknxyft\nExP/pD3ITWoRt4CMl6VwCmrO60+BcZVFThG7L7NtT4vJPl3kW/QmIRemEiT26Nlb\n1sV+uuM92MQ9uixbctoHJjdzO+EeLlmN4YY2P01Tn2kRafs3xp/YHiB+jHhegCAp\nxgwgvUqzaXsOI6wE7t9c4Livp5vIVyGP7BNUKi7TBjXkR+z40113QKgRM+Yt+ar4\nDAxWWQ/OOXO/fY+4NEtrc0a5vYk8NXDGuUM5lAwhc4uobhIF7QM0A/6d37DM9ZcX\nwgmX6YQw15dBB0J2LMr1bFA3bH/mz+ONdNRU6DroJOqnSRBvsfPwPUDJJPV3eP/U\nH2v0x1y//ua9A/g9gte+EHlaPWEHt/S7elzMxFWo4Yni3ir3AqU=\n=LSjz\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILyhE4bW8TKiA1WlkPr0zdjTsDMBZWvUHf+uQqs4wwCZCP/wEGABLs71/kgv\nU9XHWjmUo+sI8QRd2v8Q8Aj7dHKOLvB/AgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEH70Xls8yTyVq4JiBkcn3III8QRd2v8P\n8AibKmvRNA5jxACD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRl\ncm5pdHl3YWxsLmNvbf/wEMoYLFd2Hsqwv7Gpa18JJCUI8CD7aCKkCZj2qq8mzRHp\n/N+Gm0YDuH2tdDT/HxWgQgmSEwjxBF3a/xDwCAwkxEo6hkybAIPf4w0u+QyOLCto\ndHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BDUwrzN\neTCCyceA4hOtPlAACPAgrSiOiuKuIe3frY2rFil17cInPXlRtM6dCtU7lkRQoCAI\n8QRd2v8Q8AjBJbdl8LcFaACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree b61fd8109e1f6e504ca45815e54fe677bdff500c\nparent 1388de83900eaced906d369fe9e8887ae74b2dcf\nauthor Jon Atack <jon@atack.com> 1572270881 +0100\ncommitter Jon Atack <jon@atack.com> 1574633230 +0100\n\ntest: add listlabels test in wallet_labels.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3539ac6d772fc646b5f184fa1efe77bf632f6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f3539ac6d772fc646b5f184fa1efe77bf632f6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3539ac6d772fc646b5f184fa1efe77bf632f6a/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1388de83900eaced906d369fe9e8887ae74b2dcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1388de83900eaced906d369fe9e8887ae74b2dcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1388de83900eaced906d369fe9e8887ae74b2dcf"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2af8d2abacfce50e31f480d5b659e7a2d02302e9",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f3539ac6d772fc646b5f184fa1efe77bf632f6a/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f3539ac6d772fc646b5f184fa1efe77bf632f6a/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=0f3539ac6d772fc646b5f184fa1efe77bf632f6a",
        "patch": "@@ -152,14 +152,13 @@ def add_receive_address(self, address):\n     def verify(self, node):\n         if self.receive_address is not None:\n             assert self.receive_address in self.addresses\n-\n         for address in self.addresses:\n             assert_equal(\n                 node.getaddressinfo(address)['labels'][0],\n                 {\"name\": self.name,\n                  \"purpose\": self.purpose[address]})\n             assert_equal(node.getaddressinfo(address)['label'], self.name)\n-\n+        assert self.name in node.listlabels()\n         assert_equal(\n             node.getaddressesbylabel(self.name),\n             {address: {\"purpose\": self.purpose[address]} for address in self.addresses})"
      }
    ]
  },
  {
    "sha": "33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2Y1ZmMzMmU1YmZiZTFlODljNGQyMGNlNDU1YmNjNmRjMTk0MTUx",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-28T10:11:20Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-24T22:08:38Z"
      },
      "message": "test: add rpc getaddressinfo labels test coverage",
      "tree": {
        "sha": "541a9905f6291d56b1227e21827ebaaa100ca15a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/541a9905f6291d56b1227e21827ebaaa100ca15a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3a/2sACgkQT1chs9Dj\nkh2yxg/+MMC0FVOUFm7Zx5bl0Dg+oJDF1Z96wXrwWUs8aPaCJ+8H13OSKsG3OCKw\nHlxNoy+a+Zi47Ans9DAg8cJhIMQS0em6MXxJBP1GUmKOs7azc4cNZNtqUMN2nRlV\nIiodj8zhjvpXXgOYB6Bu1wKZN65Me5d0TwYjbeC1H5frFZPNNMZoL8LY9MJpNEu6\nS5E9nu1GNpAcrz2q+HPLRMsAAzfJNGbV4BeW1c+mZe5hZY7xPou5Q3CCiitjQGYc\nNYuU05VpOO7/YRTOaTw+qKRT5Ygj129IVrxkJKHqAnkexL/xweVd24mtHqvwQIqd\nVWSRQpYQjd00z5nscb3tO8rnTU0e4VNnI4CFr1CjJ6fsLvE0HRvpfIdM7t4RGkA+\nwqF0AGwxSmdeo7icpeGcCosR+xgYf5EcDMBB3Ij1Wq+Tbsy+1/1faYNFs1gMi4p2\n3BcX+mgIWd9fXyIp2HUl/r+//AZyoFPLVp9FntAYP7ot6BfRuCgI6YxUmxgtimof\nCVegHhIcgyc2XLqizNkN0UYkkA60Dr03Nm5I767cWi6TxAyBMwHL3odxSFEotYwD\nw15K1ONnkrF4OYXDJGEXaCSGgZPsTOfWVJqDspdaY6POzcNIIO6YJNQ1YaAGzv3o\nqGVuET23ZhKWjVFfZnLFfk/8bzMwy+YKhwp+TKbOsrQ7lCW7VYo=\n=zeas\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDXrH9kQ2nruwZQ91qImZUepXH9URBx7QgDHwx4lv6lACP/wED9TwKiOVghH\nS8wfIusKMT0I8QRd2v9s8AhIx+vls/JLvgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEFeiuohl59qpuqtxHK7XDdEI8QRd2v9t\n8AgIlfdAjVypJgCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRl\ncm5pdHl3YWxsLmNvbf/wELmS7ys//wYTa3HesmpsXecI8QRd2v9t8AhtkxCmlD86\nZACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVz\ndGFtcHMub3Jn8BDgXB5t2GqdesmREsx6NlpBCPEEXdr/bfAIK+Xz/6V5FjAAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 541a9905f6291d56b1227e21827ebaaa100ca15a\nparent 0f3539ac6d772fc646b5f184fa1efe77bf632f6a\nauthor Jon Atack <jon@atack.com> 1572257480 +0100\ncommitter Jon Atack <jon@atack.com> 1574633318 +0100\n\ntest: add rpc getaddressinfo labels test coverage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f3539ac6d772fc646b5f184fa1efe77bf632f6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3539ac6d772fc646b5f184fa1efe77bf632f6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f3539ac6d772fc646b5f184fa1efe77bf632f6a"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 58,
      "deletions": 22
    },
    "files": [
      {
        "sha": "3d81a61120270b4c4e6422d354579a7d10075100",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
        "patch": "@@ -88,6 +88,11 @@ def get_multisig(node):\n                     p2sh_p2wsh_script=CScript([OP_HASH160, witness_script, OP_EQUAL]).hex(),\n                     p2sh_p2wsh_addr=script_to_p2sh_p2wsh(script_code))\n \n+def labels_value(name=\"\", purpose=\"receive\"):\n+    \"\"\"Generate a getaddressinfo labels array from a name and purpose.\n+    Often used as the value of a labels kwarg for calling test_address below.\"\"\"\n+    return [{\"name\": name, \"purpose\": purpose}]\n+\n def test_address(node, address, **kwargs):\n     \"\"\"Get address info for `address` and test whether the returned values are as expected.\"\"\"\n     addr_info = node.getaddressinfo(address)"
      },
      {
        "sha": "130fa3cfaf78dac939055a9a4eac04907eee1f8b",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
        "patch": "@@ -15,6 +15,10 @@\n     connect_nodes,\n     wait_until,\n )\n+from test_framework.wallet_util import (\n+    labels_value,\n+    test_address,\n+)\n \n \n class WalletTest(BitcoinTestFramework):\n@@ -390,7 +394,7 @@ def run_test(self):\n             for label in [u'\u0440\u044b\u0431\u0430', u'\ud834\udd61']:\n                 addr = self.nodes[0].getnewaddress()\n                 self.nodes[0].setlabel(addr, label)\n-                assert_equal(self.nodes[0].getaddressinfo(addr)['label'], label)\n+                test_address(self.nodes[0], addr, label=label, labels=labels_value(name=label))\n                 assert label in self.nodes[0].listlabels()\n         self.nodes[0].rpc.ensure_ascii = True  # restore to default\n "
      },
      {
        "sha": "e356fce46944da2da83e9b07891d51f4693f01aa",
        "filename": "test/functional/wallet_import_with_label.py",
        "status": "modified",
        "additions": 22,
        "deletions": 9,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_import_with_label.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_import_with_label.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_with_label.py?ref=33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
        "patch": "@@ -11,7 +11,10 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.wallet_util import test_address\n+from test_framework.wallet_util import (\n+    labels_value,\n+    test_address,\n+)\n \n \n class ImportWithLabel(BitcoinTestFramework):\n@@ -36,7 +39,8 @@ def run_test(self):\n                      address,\n                      iswatchonly=True,\n                      ismine=False,\n-                     label=label)\n+                     label=label,\n+                     labels=labels_value(name=label))\n \n         self.log.info(\n             \"Import the watch-only address's private key without a \"\n@@ -47,7 +51,8 @@ def run_test(self):\n \n         test_address(self.nodes[1],\n                      address,\n-                     label=label)\n+                     label=label,\n+                     labels=labels_value(name=label))\n \n         self.log.info(\n             \"Test importaddress without label and importprivkey with label.\"\n@@ -59,7 +64,8 @@ def run_test(self):\n                      address2,\n                      iswatchonly=True,\n                      ismine=False,\n-                     label=\"\")\n+                     label=\"\",\n+                     labels=labels_value())\n \n         self.log.info(\n             \"Import the watch-only address's private key with a \"\n@@ -71,7 +77,8 @@ def run_test(self):\n \n         test_address(self.nodes[1],\n                      address2,\n-                     label=label2)\n+                     label=label2,\n+                     labels=labels_value(name=label2))\n \n         self.log.info(\"Test importaddress with label and importprivkey with label.\")\n         self.log.info(\"Import a watch-only address with a label.\")\n@@ -82,7 +89,8 @@ def run_test(self):\n                      address3,\n                      iswatchonly=True,\n                      ismine=False,\n-                     label=label3_addr)\n+                     label=label3_addr,\n+                     labels=labels_value(name=label3_addr))\n \n         self.log.info(\n             \"Import the watch-only address's private key with a \"\n@@ -94,7 +102,8 @@ def run_test(self):\n \n         test_address(self.nodes[1],\n                      address3,\n-                     label=label3_priv)\n+                     label=label3_priv,\n+                     labels=labels_value(name=label3_priv))\n \n         self.log.info(\n             \"Test importprivkey won't label new dests with the same \"\n@@ -109,6 +118,7 @@ def run_test(self):\n                      iswatchonly=True,\n                      ismine=False,\n                      label=label4_addr,\n+                     labels=labels_value(name=label4_addr),\n                      embedded=None)\n \n         self.log.info(\n@@ -123,10 +133,13 @@ def run_test(self):\n \n         test_address(self.nodes[1],\n                      embedded_addr,\n-                     label=\"\")\n+                     label=\"\",\n+                     labels=labels_value())\n+\n         test_address(self.nodes[1],\n                      address4,\n-                     label=label4_addr)\n+                     label=label4_addr,\n+                     labels=labels_value(name=label4_addr))\n \n         self.stop_nodes()\n "
      },
      {
        "sha": "5febac5998b75fa5dc04c21076941c57748968c6",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
        "patch": "@@ -29,6 +29,7 @@\n from test_framework.wallet_util import (\n     get_key,\n     get_multisig,\n+    labels_value,\n     test_address,\n )\n \n@@ -121,7 +122,7 @@ def run_test(self):\n         self.test_importmulti({\"scriptPubKey\": key.p2pkh_script,\n                                \"timestamp\": \"now\",\n                                \"internal\": True,\n-                               \"label\": \"Example label\"},\n+                               \"label\": \"Unsuccessful labelling for internal addresses\"},\n                               success=False,\n                               error_code=-8,\n                               error_message='Internal addresses should not have a label')\n@@ -550,25 +551,27 @@ def run_test(self):\n         self.log.info(\"Should not import a p2sh-p2wpkh address from descriptor without checksum and private key\")\n         self.test_importmulti({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n                                \"timestamp\": \"now\",\n-                               \"label\": \"Descriptor import test\",\n+                               \"label\": \"Unsuccessful P2SH-P2WPKH descriptor import\",\n                                \"keys\": [key.privkey]},\n                               success=False,\n                               error_code=-5,\n                               error_message=\"Missing checksum\")\n \n         # Test importing of a P2SH-P2WPKH address via descriptor + private key\n         key = get_key(self.nodes[0])\n+        p2sh_p2wpkh_label = \"Successful P2SH-P2WPKH descriptor import\"\n         self.log.info(\"Should import a p2sh-p2wpkh address from descriptor and private key\")\n         self.test_importmulti({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n                                \"timestamp\": \"now\",\n-                               \"label\": \"Descriptor import test\",\n+                               \"label\": p2sh_p2wpkh_label,\n                                \"keys\": [key.privkey]},\n                               success=True)\n         test_address(self.nodes[1],\n                      key.p2sh_p2wpkh_addr,\n                      solvable=True,\n                      ismine=True,\n-                     label=\"Descriptor import test\")\n+                     label=p2sh_p2wpkh_label,\n+                     labels=labels_value(name=p2sh_p2wpkh_label))\n \n         # Test ranged descriptor fails if range is not specified\n         xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n@@ -628,17 +631,19 @@ def run_test(self):\n \n         # Test importing of a P2PKH address via descriptor\n         key = get_key(self.nodes[0])\n+        p2pkh_label = \"P2PKH descriptor import\"\n         self.log.info(\"Should import a p2pkh address from descriptor\")\n         self.test_importmulti({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n                                \"timestamp\": \"now\",\n-                               \"label\": \"Descriptor import test\"},\n+                               \"label\": p2pkh_label},\n                               True,\n                               warnings=[\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\"])\n         test_address(self.nodes[1],\n                      key.p2pkh_addr,\n                      solvable=True,\n                      ismine=False,\n-                     label=\"Descriptor import test\")\n+                     label=p2pkh_label,\n+                     labels=labels_value(name=p2pkh_label))\n \n         # Test import fails if both desc and scriptPubKey are provided\n         key = get_key(self.nodes[0])"
      },
      {
        "sha": "27371d43bb4a15512177b2e37125d41d101fe597",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
        "patch": "@@ -13,6 +13,10 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet_util import (\n+    labels_value,\n+    test_address,\n+)\n \n class WalletLabelsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -153,11 +157,12 @@ def verify(self, node):\n         if self.receive_address is not None:\n             assert self.receive_address in self.addresses\n         for address in self.addresses:\n-            assert_equal(\n-                node.getaddressinfo(address)['labels'][0],\n-                {\"name\": self.name,\n-                 \"purpose\": self.purpose[address]})\n-            assert_equal(node.getaddressinfo(address)['label'], self.name)\n+            test_address(\n+                node,\n+                address,\n+                label=self.name,\n+                labels=labels_value(name=self.name, purpose=self.purpose[address])\n+             )\n         assert self.name in node.listlabels()\n         assert_equal(\n             node.getaddressesbylabel(self.name),"
      },
      {
        "sha": "afd473306d52aea19b4212039a9d4e75798edf41",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=33f5fc32e5bfbe1e89c4d20ce455bcc6dc194151",
        "patch": "@@ -11,6 +11,10 @@\n     assert_equal,\n     assert_raises_rpc_error,\n )\n+from test_framework.wallet_util import (\n+    labels_value,\n+    test_address,\n+)\n \n \n class ReceivedByTest(BitcoinTestFramework):\n@@ -127,7 +131,7 @@ def run_test(self):\n         # set pre-state\n         label = ''\n         address = self.nodes[1].getnewaddress()\n-        assert_equal(self.nodes[1].getaddressinfo(address)['label'], label)\n+        test_address(self.nodes[1], address, label=label, labels=labels_value(name=label))\n         received_by_label_json = [r for r in self.nodes[1].listreceivedbylabel() if r[\"label\"] == label][0]\n         balance_by_label = self.nodes[1].getreceivedbylabel(label)\n "
      }
    ]
  }
]