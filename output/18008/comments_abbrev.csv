practicalswift,2020-01-27 12:42:32,"ACK 6b04aff38c06ee9db74132c783fde3e72c117ca0 -- diff looks correct\n\nThanks for fixing this!",https://github.com/bitcoin/bitcoin/pull/18008#issuecomment-578729489,578729489,
eriknylund,2020-01-27 20:37:58,"ACK 6b04aff38c06ee9db74132c783fde3e72c117ca0\n\nTested both AFL and libFuzzer using documentation from https://github.com/bitcoin/bitcoin/pull/17942\n\nBoth AFL and libFuzzer build and run without issues.",https://github.com/bitcoin/bitcoin/pull/18008#issuecomment-578941147,578941147,
fjahr,2020-01-27 21:11:15,"ACK 6b04aff38c06ee9db74132c783fde3e72c117ca0\n\nTested compiling fuzzer tests with libFuzzer which had not been working previously.",https://github.com/bitcoin/bitcoin/pull/18008#issuecomment-578954245,578954245,
Sjors,2020-01-28 17:04:59,"What error am I supposed to be seeing on master (I run into plenty of problems, but don't know if that's because not following instructions correctly)?\n\nOn macOS 10.15.2 with llvm/9.0.1 (homebrew) I followed the instructions in #17942, first on master then on this PR. On master I ran into `subprocess timed out: Currently only libFuzzer is supported`. With this branch it just exits after `Fuzz ",https://github.com/bitcoin/bitcoin/pull/18008#issuecomment-579353310,579353310,
fjahr,2020-01-28 17:11:28,"> What error am I supposed to be seeing on master (I run into plenty of problems, but don't know if that's because not following instructions correctly)?\n\nFor me the fuzzers compile when following the instructions from #17942 but when I start any of the fuzzers, they just hang. There is not output and they don't stop until interrupted manually. Running them through the python harness gives an ",https://github.com/bitcoin/bitcoin/pull/18008#issuecomment-579356294,579356294,
fanquake,2020-01-29 00:04:56,"> With this branch it just exits after Fuzz targets selected: ['bech32']\n\n@Sjors It doesn't just exit, the bech32 fuzzer is run. However the log level defaults to `INFO`, which doesn't generate any output. Pass `-l DEBUG` and you'll see:\n```bash\nFuzz targets selected: ['bech32']\nRun bech32 with args ['/Users/michael/github/fanquake-bitcoin/src/test/fuzz/bech32', '-runs=1', '-detect_leaks",https://github.com/bitcoin/bitcoin/pull/18008#issuecomment-579532154,579532154,
MarcoFalke,2020-01-29 00:10:04,"> On master I ran into `subprocess timed out: Currently only libFuzzer is supported`.\n\nThis is exactly the error you are supposed to see without this patch on macos. The fuzzer will run the main function, but not the one provided by libFuzzer.",https://github.com/bitcoin/bitcoin/pull/18008#issuecomment-579533472,579533472,
fanquake,2020-01-29 00:33:31,Updated to drop `main()` deceleration entirely except for when using AFL.,https://github.com/bitcoin/bitcoin/pull/18008#issuecomment-579539375,579539375,
MarcoFalke,2020-01-29 00:35:52,"ACK b35567fe0ba3e6f8d8f9525088eb8ee62065ad01\n\nCan't test on mac, sorry :grimacing: ",https://github.com/bitcoin/bitcoin/pull/18008#issuecomment-579539857,579539857,
Sjors,2020-01-29 08:46:46,Tested b35567fe0ba3e6f8d8f9525088eb8ee62065ad01 on macOS 10.15.2 (also checked that AFL still works),https://github.com/bitcoin/bitcoin/pull/18008#issuecomment-579654157,579654157,
fjahr,2020-01-29 12:34:06,"ACK b35567f\n\nTested libFuzzer on macOS.",https://github.com/bitcoin/bitcoin/pull/18008#issuecomment-579735736,579735736,
MarcoFalke,2020-01-27 18:50:57,"What is the point of declaring main here if it is already declared in libFuzzer?\n\nI guess we could save us all of this `__attribute__` wrangling with a simple compile time check:\n\n```cpp\n#if defined(__AFL_COMPILER)\nstatic bool read_stdin(std::vector<uint8_t>& data) { ... }\nint main(int argc, char** argv) { ... }\n#endif ",https://github.com/bitcoin/bitcoin/pull/18008#discussion_r371417906,371417906,src/test/fuzz/fuzz.cpp
fanquake,2020-01-28 09:26:50,"We could leave out the `main` declaration entirely, I just thought it might be clearer in regards to it being weak linked. If you prefer I can replace it with a comment as to why we special case libFuzzer on macOS.",https://github.com/bitcoin/bitcoin/pull/18008#discussion_r371688017,371688017,src/test/fuzz/fuzz.cpp
MarcoFalke,2020-01-28 14:15:29,"> I can replace it with a comment as to why we special case libFuzzer on macOS\n\nMy point is that we don't need to special case libFuzzer on macOS. I think, we can have the same simple code (a single compile time check) for all operating systems. There would be no need for `_attribute__` and `#if defined(MAC_OSX)` wrangling.",https://github.com/bitcoin/bitcoin/pull/18008#discussion_r371826368,371826368,src/test/fuzz/fuzz.cpp
MarcoFalke,2020-01-28 18:00:29,"Also, not having a main function should fix the issue where compilation and linking succeeds and the fuzzer just runs ""blank"", I think.",https://github.com/bitcoin/bitcoin/pull/18008#discussion_r371965117,371965117,src/test/fuzz/fuzz.cpp
fanquake,2020-01-28 21:57:28,">  should fix the issue where compilation and linking succeeds and the fuzzer just runs ""blank"", I think.\n\nThat is what is fixed by this PR in its current state. Are you still seeing that issue somewhere else with this change applied?",https://github.com/bitcoin/bitcoin/pull/18008#discussion_r372081535,372081535,src/test/fuzz/fuzz.cpp
MarcoFalke,2020-01-28 23:48:51,"Sorry, I think I might have been unclear. I see that your patch does fix the issue. However, I think we should go even further: A main function that does not exist should be better than a main function that is weak, as it would properly lead to linker issues instead of odd runtime behaviour.\n\nThe following patch (on top of master) should achieve the same result while also removing the main fun",https://github.com/bitcoin/bitcoin/pull/18008#discussion_r372122714,372122714,src/test/fuzz/fuzz.cpp
fanquake,2020-01-29 00:05:58,"Right, we can do that. I'll update this and drop the `__attribute__` usage in favour of an #ifdef.",https://github.com/bitcoin/bitcoin/pull/18008#discussion_r372127581,372127581,src/test/fuzz/fuzz.cpp
