DrahtBot,2021-09-10 09:48:46,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23394](https://github.com/bitcoin/bitcoin/pull/23394) (Taproot wallet test vectors (generation+tests) by sipa)\n* [#2338",https://github.com/bitcoin/bitcoin/pull/22934#issuecomment-916778111,916778111,
benthecarman,2021-09-13 17:42:59,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22934#issuecomment-918424840,918424840,
amadeuszpawlik,2021-09-15 15:04:18,"As per @sipa's suggestion, I added verification step to ECDSA signing functions too.\nChanged the disable flag name to reflect that.",https://github.com/bitcoin/bitcoin/pull/22934#issuecomment-920102752,920102752,
benthecarman,2021-09-16 15:10:39,"Please squash your commits\n\nhttps://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits",https://github.com/bitcoin/bitcoin/pull/22934#issuecomment-920989594,920989594,
laanwj,2021-09-27 11:32:39,"> at the same time allowing for disabling the extra verification in case this extra step is computationally too expensive (--disable-verify-signing).\n\nDoes this ever come up in practice? I mean, yes, the secp256k1 library is used on some very low-end hardware. However Bitcoin Core's minimum specifications are a lot higher. The amount of signatures generated is also fairly low, compared to the ",https://github.com/bitcoin/bitcoin/pull/22934#issuecomment-927786022,927786022,
practicalswift,2021-09-30 08:19:35,@amadeuszpawlik Do you have any measurements suggesting that `--disable-verify-signing` might be needed in practice for performance reasons? If not I think it would be better to not introduce that option :),https://github.com/bitcoin/bitcoin/pull/22934#issuecomment-931009917,931009917,
amadeuszpawlik,2021-09-30 17:23:56,"@laanwj @practicalswift I got this idea from the original issue: [#22435](https://github.com/bitcoin/bitcoin/issues/22435), but I agree with you both and have thus dropped the ""disable option"".",https://github.com/bitcoin/bitcoin/pull/22934#issuecomment-931517874,931517874,
amadeuszpawlik,2021-10-04 16:44:31,"@theStack I don't think #23089 is it\nCirrusCI: \n`TestFramework (ERROR): Unexpected exception caught during testing \n File ""C:\Users\ContainerAdministrator\AppData\Local\Temp\cirrus-ci-build\test\functional\wallet_send.py"", line 506, in run_test\n ext_utxo = ext_fund.listunspent(addresses=[addr])[0]\n IndexError: list index out of range`\nCan't reproduce on linux though",https://github.com/bitcoin/bitcoin/pull/22934#issuecomment-933663445,933663445,
amadeuszpawlik,2021-10-05 07:44:44,"@theStack Agree, I reran the Win64 build and it went through just fine üëç ",https://github.com/bitcoin/bitcoin/pull/22934#issuecomment-934152607,934152607,
sipa,2021-11-02 21:23:39,utACK 79fd28cacbbcb86ea03d3d468845001f84a76de3,https://github.com/bitcoin/bitcoin/pull/22934#issuecomment-958177997,958177997,
laanwj,2021-11-09 13:11:38,Code review ACK 79fd28cacbbcb86ea03d3d468845001f84a76de3,https://github.com/bitcoin/bitcoin/pull/22934#issuecomment-964138125,964138125,
sipa,2021-09-13 17:48:20,For API safeness it's probably better to clear the output `sig` if ret is `false`.,https://github.com/bitcoin/bitcoin/pull/22934#discussion_r707554273,707554273,src/key.cpp
sipa,2021-09-13 17:48:38,Style nit: spaces before and after `(ret)`.,https://github.com/bitcoin/bitcoin/pull/22934#discussion_r707554485,707554485,src/key.cpp
amadeuszpawlik,2021-09-14 14:15:18,"resolved, thanks",https://github.com/bitcoin/bitcoin/pull/22934#discussion_r708316250,708316250,src/key.cpp
amadeuszpawlik,2021-09-14 14:17:08,Like [this](https://github.com/bitcoin/bitcoin/pull/22934/commits/c660374a37f4a83a774db55e15e4e67d1d33ef3c)?,https://github.com/bitcoin/bitcoin/pull/22934#discussion_r708318159,708318159,src/key.cpp
fanquake,2021-09-20 03:21:22,How about using `memory_cleanse()`.,https://github.com/bitcoin/bitcoin/pull/22934#discussion_r711857194,711857194,src/key.cpp
amadeuszpawlik,2021-09-20 19:55:27,thanks,https://github.com/bitcoin/bitcoin/pull/22934#discussion_r712470152,712470152,src/key.cpp
theStack,2021-10-02 20:27:11,"IMHO this cleans the wrong location, since you pass the address of the Span object, not the address it points to. Also, I think it's fine to simply pass the size without multiplying by `sizeof(unsigned char)` which is obviously 1. (We also use .size() on `std::vector<unsigned char>` objects frequently without this multiplication).\n```suggestion\n    if (!ret) memory_cleanse(sig.data(), sig.size",https://github.com/bitcoin/bitcoin/pull/22934#discussion_r720725253,720725253,src/key.cpp
sipa,2021-11-01 17:45:38,"Instead, you could invoke the recovery operation itself, and verify that the decoded public key matches `pk`. That would verify that the recovery id in the signature is correct as well (`secp256k1_ecdsa_recoverable_signature_convert` throws it away).",https://github.com/bitcoin/bitcoin/pull/22934#discussion_r740407107,740407107,src/key.cpp
amadeuszpawlik,2021-11-02 15:29:59,"Hi @sipa, thanks a lot for the input.\nLet's see if I understand you right:  _instead_ of computing the `pk` in `secp256k1_ec_pubkey_create`, we recover the `pk` by running `secp256k1_ecdsa_recover` (which gives us the additional checks that you mention).\nThe `secp256k1_ecdsa_recoverable_signature_convert` stays because we need a normal signature to do the verification - correct?",https://github.com/bitcoin/bitcoin/pull/22934#discussion_r741200452,741200452,src/key.cpp
sipa,2021-11-02 15:46:50,"No, the other way around.\n\nYou still use `secp256k1_ec_pubkey_create` to compute the expected public key. But then instead of verifying it against the normal signature extracted from sig, you run recovery on the message and sig, which gives you the signing public key. Then you can compare the expected pk with the signing one. There is no explicit signature verification in this case; instead yo",https://github.com/bitcoin/bitcoin/pull/22934#discussion_r741220457,741220457,src/key.cpp
amadeuszpawlik,2021-11-02 16:21:04,"Perfect, thanks!",https://github.com/bitcoin/bitcoin/pull/22934#discussion_r741260486,741260486,src/key.cpp
