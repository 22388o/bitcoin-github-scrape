[
  {
    "sha": "ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTBlOThiNWZmNzhmODY4NTk3MWZkYmM1Mjc0OWYxZDk4MWI3YmQ1",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2019-11-19T14:49:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-14T16:01:34Z"
      },
      "message": "Deduplicate the message verifying code\n\nThe logic of verifying a message was duplicated in 2 places:\n\nsrc/qt/signverifymessagedialog.cpp\n  SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()\n\nsrc/rpc/misc.cpp\n  verifymessage()\n\nwith the only difference being the result handling. Move the logic into\na dedicated\n\nsrc/util/message.cpp\n  MessageVerify()\n\nwhich returns a set of result codes, call it from the 2 places and just\nhandle the results differently in the callers.",
      "tree": {
        "sha": "a020379c988b3dfdf44acf6f4483ac6356de87b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a020379c988b3dfdf44acf6f4483ac6356de87b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "646f0ada0205ae4b3952107e3b1542f06adda32b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/646f0ada0205ae4b3952107e3b1542f06adda32b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/646f0ada0205ae4b3952107e3b1542f06adda32b"
      }
    ],
    "stats": {
      "total": 273,
      "additions": 211,
      "deletions": 62
    },
    "files": [
      {
        "sha": "eac7b38e03e90ba58cae64f5d59ee0e5d8f5d707",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
        "patch": "@@ -220,6 +220,7 @@ BITCOIN_CORE_H = \\\n   util/system.h \\\n   util/macros.h \\\n   util/memory.h \\\n+  util/message.h \\\n   util/moneystr.h \\\n   util/rbf.h \\\n   util/settings.h \\\n@@ -517,6 +518,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/error.cpp \\\n   util/fees.cpp \\\n   util/system.cpp \\\n+  util/message.cpp \\\n   util/moneystr.cpp \\\n   util/rbf.cpp \\\n   util/settings.cpp \\"
      },
      {
        "sha": "aa8e23f53b9a02e9a41e186ba9cd02181b55b32d",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 36,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
        "patch": "@@ -11,7 +11,7 @@\n #include <qt/walletmodel.h>\n \n #include <key_io.h>\n-#include <util/validation.h> // For strMessageMagic\n+#include <util/message.h> // For strMessageMagic, MessageVerify()\n #include <wallet/wallet.h>\n \n #include <vector>\n@@ -189,51 +189,57 @@ void SignVerifyMessageDialog::on_addressBookButton_VM_clicked()\n \n void SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()\n {\n-    CTxDestination destination = DecodeDestination(ui->addressIn_VM->text().toStdString());\n-    if (!IsValidDestination(destination)) {\n+    const std::string& address = ui->addressIn_VM->text().toStdString();\n+    const std::string& signature = ui->signatureIn_VM->text().toStdString();\n+    const std::string& message = ui->messageIn_VM->document()->toPlainText().toStdString();\n+\n+    const auto result = MessageVerify(address, signature, message);\n+\n+    if (result == MessageVerificationResult::OK) {\n+        ui->statusLabel_VM->setStyleSheet(\"QLabel { color: green; }\");\n+    } else {\n         ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_VM->setText(tr(\"The entered address is invalid.\") + QString(\" \") + tr(\"Please check the address and try again.\"));\n-        return;\n     }\n-    if (!boost::get<PKHash>(&destination)) {\n+\n+    switch (result) {\n+    case MessageVerificationResult::OK:\n+        ui->statusLabel_VM->setText(\n+            QString(\"<nobr>\") + tr(\"Message verified.\") + QString(\"</nobr>\")\n+        );\n+        return;\n+    case MessageVerificationResult::ERR_INVALID_ADDRESS:\n+        ui->statusLabel_VM->setText(\n+            tr(\"The entered address is invalid.\") + QString(\" \") +\n+            tr(\"Please check the address and try again.\")\n+        );\n+        return;\n+    case MessageVerificationResult::ERR_ADDRESS_NO_KEY:\n         ui->addressIn_VM->setValid(false);\n-        ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_VM->setText(tr(\"The entered address does not refer to a key.\") + QString(\" \") + tr(\"Please check the address and try again.\"));\n+        ui->statusLabel_VM->setText(\n+            tr(\"The entered address does not refer to a key.\") + QString(\" \") +\n+            tr(\"Please check the address and try again.\")\n+        );\n         return;\n-    }\n-\n-    bool fInvalid = false;\n-    std::vector<unsigned char> vchSig = DecodeBase64(ui->signatureIn_VM->text().toStdString().c_str(), &fInvalid);\n-\n-    if (fInvalid)\n-    {\n+    case MessageVerificationResult::ERR_MALFORMED_SIGNATURE:\n         ui->signatureIn_VM->setValid(false);\n-        ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_VM->setText(tr(\"The signature could not be decoded.\") + QString(\" \") + tr(\"Please check the signature and try again.\"));\n+        ui->statusLabel_VM->setText(\n+            tr(\"The signature could not be decoded.\") + QString(\" \") +\n+            tr(\"Please check the signature and try again.\")\n+        );\n         return;\n-    }\n-\n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << ui->messageIn_VM->document()->toPlainText().toStdString();\n-\n-    CPubKey pubkey;\n-    if (!pubkey.RecoverCompact(ss.GetHash(), vchSig))\n-    {\n+    case MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED:\n         ui->signatureIn_VM->setValid(false);\n-        ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_VM->setText(tr(\"The signature did not match the message digest.\") + QString(\" \") + tr(\"Please check the signature and try again.\"));\n+        ui->statusLabel_VM->setText(\n+            tr(\"The signature did not match the message digest.\") + QString(\" \") +\n+            tr(\"Please check the signature and try again.\")\n+        );\n         return;\n-    }\n-\n-    if (!(CTxDestination(PKHash(pubkey)) == destination)) {\n-        ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_VM->setText(QString(\"<nobr>\") + tr(\"Message verification failed.\") + QString(\"</nobr>\"));\n+    case MessageVerificationResult::ERR_NOT_SIGNED:\n+        ui->statusLabel_VM->setText(\n+            QString(\"<nobr>\") + tr(\"Message verification failed.\") + QString(\"</nobr>\")\n+        );\n         return;\n     }\n-\n-    ui->statusLabel_VM->setStyleSheet(\"QLabel { color: green; }\");\n-    ui->statusLabel_VM->setText(QString(\"<nobr>\") + tr(\"Message verified.\") + QString(\"</nobr>\"));\n }\n \n void SignVerifyMessageDialog::on_clearButton_VM_clicked()"
      },
      {
        "sha": "9686a111ed5e20a5a86eaf6bf9c95578179bfbab",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 21,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
        "patch": "@@ -11,9 +11,9 @@\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <util/check.h>\n+#include <util/message.h> // For strMessageMagic, MessageVerify()\n #include <util/strencodings.h>\n #include <util/system.h>\n-#include <util/validation.h>\n \n #include <stdint.h>\n #include <tuple>\n@@ -276,31 +276,21 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n     std::string strSign     = request.params[1].get_str();\n     std::string strMessage  = request.params[2].get_str();\n \n-    CTxDestination destination = DecodeDestination(strAddress);\n-    if (!IsValidDestination(destination)) {\n+    switch (MessageVerify(strAddress, strSign, strMessage)) {\n+    case MessageVerificationResult::ERR_INVALID_ADDRESS:\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n-    }\n-\n-    const PKHash *pkhash = boost::get<PKHash>(&destination);\n-    if (!pkhash) {\n+    case MessageVerificationResult::ERR_ADDRESS_NO_KEY:\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n-    }\n-\n-    bool fInvalid = false;\n-    std::vector<unsigned char> vchSig = DecodeBase64(strSign.c_str(), &fInvalid);\n-\n-    if (fInvalid)\n+    case MessageVerificationResult::ERR_MALFORMED_SIGNATURE:\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Malformed base64 encoding\");\n-\n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << strMessage;\n-\n-    CPubKey pubkey;\n-    if (!pubkey.RecoverCompact(ss.GetHash(), vchSig))\n+    case MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED:\n+    case MessageVerificationResult::ERR_NOT_SIGNED:\n         return false;\n+    case MessageVerificationResult::OK:\n+        return true;\n+    }\n \n-    return (pubkey.GetID() == *pkhash);\n+    return false;\n }\n \n static UniValue signmessagewithprivkey(const JSONRPCRequest& request)"
      },
      {
        "sha": "0b40df0b370bfbc21bdfbeeeb75a6ed90e3a13d6",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
        "patch": "@@ -9,6 +9,7 @@\n #include <sync.h>\n #include <test/util/setup_common.h>\n #include <test/util/str.h>\n+#include <util/message.h> // For MessageVerify()\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n@@ -2025,4 +2026,56 @@ BOOST_AUTO_TEST_CASE(test_tracked_vector)\n     BOOST_CHECK_EQUAL(v8[2].copies, 0);\n }\n \n+BOOST_AUTO_TEST_CASE(message_verify)\n+{\n+    BOOST_CHECK_EQUAL(\n+        MessageVerify(\n+            \"invalid address\",\n+            \"signature should be irrelevant\",\n+            \"message too\"),\n+        MessageVerificationResult::ERR_INVALID_ADDRESS);\n+\n+    BOOST_CHECK_EQUAL(\n+        MessageVerify(\n+            \"3B5fQsEXEaV8v6U3ejYc8XaKXAkyQj2MjV\",\n+            \"signature should be irrelevant\",\n+            \"message too\"),\n+        MessageVerificationResult::ERR_ADDRESS_NO_KEY);\n+\n+    BOOST_CHECK_EQUAL(\n+        MessageVerify(\n+            \"1KqbBpLy5FARmTPD4VZnDDpYjkUvkr82Pm\",\n+            \"invalid signature, not in base64 encoding\",\n+            \"message should be irrelevant\"),\n+        MessageVerificationResult::ERR_MALFORMED_SIGNATURE);\n+\n+    BOOST_CHECK_EQUAL(\n+        MessageVerify(\n+            \"1KqbBpLy5FARmTPD4VZnDDpYjkUvkr82Pm\",\n+            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n+            \"message should be irrelevant\"),\n+        MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED);\n+\n+    BOOST_CHECK_EQUAL(\n+        MessageVerify(\n+            \"15CRxFdyRpGZLW9w8HnHvVduizdL5jKNbs\",\n+            \"IPojfrX2dfPnH26UegfbGQQLrdK844DlHq5157/P6h57WyuS/Qsl+h/WSVGDF4MUi4rWSswW38oimDYfNNUBUOk=\",\n+            \"I never signed this\"),\n+        MessageVerificationResult::ERR_NOT_SIGNED);\n+\n+    BOOST_CHECK_EQUAL(\n+        MessageVerify(\n+            \"15CRxFdyRpGZLW9w8HnHvVduizdL5jKNbs\",\n+            \"IPojfrX2dfPnH26UegfbGQQLrdK844DlHq5157/P6h57WyuS/Qsl+h/WSVGDF4MUi4rWSswW38oimDYfNNUBUOk=\",\n+            \"Trust no one\"),\n+        MessageVerificationResult::OK);\n+\n+    BOOST_CHECK_EQUAL(\n+        MessageVerify(\n+            \"11canuhp9X2NocwCq7xNrQYTmUgZAnLK3\",\n+            \"IIcaIENoYW5jZWxsb3Igb24gYnJpbmsgb2Ygc2Vjb25kIGJhaWxvdXQgZm9yIGJhbmtzIAaHRtbCeDZINyavx14=\",\n+            \"Trust me\"),\n+        MessageVerificationResult::OK);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "33e9c3384b715fdb6c8968913a1e3811d8d18f2b",
        "filename": "src/util/message.cpp",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/util/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/util/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.cpp?ref=ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
        "patch": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>            // For CHashWriter\n+#include <key_io.h>          // For DecodeDestination()\n+#include <pubkey.h>          // For CPubKey\n+#include <script/standard.h> // For CTxDestination, IsValidDestination(), PKHash\n+#include <serialize.h>       // For SER_GETHASH\n+#include <util/message.h>\n+#include <util/strencodings.h> // For DecodeBase64()\n+\n+#include <string>\n+#include <vector>\n+\n+const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n+\n+MessageVerificationResult MessageVerify(\n+    const std::string& address,\n+    const std::string& signature,\n+    const std::string& message)\n+{\n+    CTxDestination destination = DecodeDestination(address);\n+    if (!IsValidDestination(destination)) {\n+        return MessageVerificationResult::ERR_INVALID_ADDRESS;\n+    }\n+\n+    if (boost::get<PKHash>(&destination) == nullptr) {\n+        return MessageVerificationResult::ERR_ADDRESS_NO_KEY;\n+    }\n+\n+    bool invalid = false;\n+    std::vector<unsigned char> signature_bytes = DecodeBase64(signature.c_str(), &invalid);\n+    if (invalid) {\n+        return MessageVerificationResult::ERR_MALFORMED_SIGNATURE;\n+    }\n+\n+    CHashWriter ss(SER_GETHASH, 0);\n+    ss << strMessageMagic;\n+    ss << message;\n+\n+    CPubKey pubkey;\n+    if (!pubkey.RecoverCompact(ss.GetHash(), signature_bytes)) {\n+        return MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED;\n+    }\n+\n+    if (!(CTxDestination(PKHash(pubkey)) == destination)) {\n+        return MessageVerificationResult::ERR_NOT_SIGNED;\n+    }\n+\n+    return MessageVerificationResult::OK;\n+}"
      },
      {
        "sha": "6adda5d3ff72215b6e5d7ac9bb2e90de12e028a2",
        "filename": "src/util/message.h",
        "status": "added",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/util/message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/util/message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.h?ref=ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
        "patch": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_MESSAGE_H\n+#define BITCOIN_UTIL_MESSAGE_H\n+\n+#include <string>\n+\n+extern const std::string strMessageMagic;\n+\n+/** The result of a signed message verification.\n+ * Message verification takes as an input:\n+ * - address (with whose private key the message is supposed to have been signed)\n+ * - signature\n+ * - message\n+ */\n+enum class MessageVerificationResult {\n+    //! The provided address is invalid.\n+    ERR_INVALID_ADDRESS,\n+\n+    //! The provided address is valid but does not refer to a public key.\n+    ERR_ADDRESS_NO_KEY,\n+\n+    //! The provided signature couldn't be parsed (maybe invalid base64).\n+    ERR_MALFORMED_SIGNATURE,\n+\n+    //! A public key could not be recovered from the provided signature and message.\n+    ERR_PUBKEY_NOT_RECOVERED,\n+\n+    //! The message was not signed with the private key of the provided address.\n+    ERR_NOT_SIGNED,\n+\n+    //! The message verification was successful.\n+    OK\n+};\n+\n+/** Verify a signed message.\n+ * @param[in] address Signer's bitcoin address, it must refer to a public key.\n+ * @param[in] signature The signature in base64 format.\n+ * @param[in] message The message that was signed.\n+ * @return result code */\n+MessageVerificationResult MessageVerify(\n+    const std::string& address,\n+    const std::string& signature,\n+    const std::string& message);\n+\n+#endif // BITCOIN_UTIL_MESSAGE_H"
      },
      {
        "sha": "ffbee21aebf96e2bbab494e471430645fef7d0e4",
        "filename": "src/util/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/util/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/util/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/validation.cpp?ref=ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
        "patch": "@@ -21,5 +21,3 @@ std::string FormatStateMessage(const ValidationState &state)\n \n     return state.GetRejectReason();\n }\n-\n-const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";"
      },
      {
        "sha": "5ee260a055e762815736d7ccaa30bebe7a7caced",
        "filename": "src/util/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/util/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/util/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/validation.h?ref=ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
        "patch": "@@ -13,6 +13,4 @@ class ValidationState;\n /** Convert ValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const ValidationState &state);\n \n-extern const std::string strMessageMagic;\n-\n #endif // BITCOIN_UTIL_VALIDATION_H"
      },
      {
        "sha": "38b23a6ed4b3573c69fcb50c30e59d4d88698dae",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
        "patch": "@@ -19,11 +19,11 @@\n #include <script/sign.h>\n #include <util/bip32.h>\n #include <util/fees.h>\n+#include <util/message.h> // For strMessageMagic\n #include <util/moneystr.h>\n #include <util/string.h>\n #include <util/system.h>\n #include <util/url.h>\n-#include <util/validation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n #include <wallet/psbtwallet.h>"
      }
    ]
  },
  {
    "sha": "4b9d620f6cb2cb70366a26beeebd9698aaa8680b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjlkNjIwZjZjYjJjYjcwMzY2YTI2YmVlZWJkOTY5OGFhYTg2ODBi",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2019-11-22T16:17:29Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-14T16:01:34Z"
      },
      "message": "Deduplicate the message signing code\n\nThe logic of signing a message was duplicated in 3 places:\n\nsrc/qt/signverifymessagedialog.cpp\n  SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n\nsrc/rpc/misc.cpp\n  signmessagewithprivkey()\n\nsrc/wallet/rpcwallet.cpp\n  signmessage()\n\nMove the logic into\n\nsrc/util/message.cpp\n  MessageSign()\n\nand call it from all the 3 places.",
      "tree": {
        "sha": "a8828a8b987c7830aa8053dc070264ad3212cdd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8828a8b987c7830aa8053dc070264ad3212cdd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b9d620f6cb2cb70366a26beeebd9698aaa8680b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b9d620f6cb2cb70366a26beeebd9698aaa8680b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b9d620f6cb2cb70366a26beeebd9698aaa8680b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b9d620f6cb2cb70366a26beeebd9698aaa8680b/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea0e98b5ff78f8685971fdbc52749f1d981b7bd5"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 87,
      "deletions": 23
    },
    "files": [
      {
        "sha": "883dcecf9a1649f22f2eee431bf258a66fca1847",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b9d620f6cb2cb70366a26beeebd9698aaa8680b/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b9d620f6cb2cb70366a26beeebd9698aaa8680b/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=4b9d620f6cb2cb70366a26beeebd9698aaa8680b",
        "patch": "@@ -11,7 +11,7 @@\n #include <qt/walletmodel.h>\n \n #include <key_io.h>\n-#include <util/message.h> // For strMessageMagic, MessageVerify()\n+#include <util/message.h> // For MessageSign(), MessageVerify()\n #include <wallet/wallet.h>\n \n #include <vector>\n@@ -141,13 +141,10 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         return;\n     }\n \n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << ui->messageIn_SM->document()->toPlainText().toStdString();\n+    const std::string& message = ui->messageIn_SM->document()->toPlainText().toStdString();\n+    std::string signature;\n \n-    std::vector<unsigned char> vchSig;\n-    if (!key.SignCompact(ss.GetHash(), vchSig))\n-    {\n+    if (!MessageSign(key, message, signature)) {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(QString(\"<nobr>\") + tr(\"Message signing failed.\") + QString(\"</nobr>\"));\n         return;\n@@ -156,7 +153,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n     ui->statusLabel_SM->setStyleSheet(\"QLabel { color: green; }\");\n     ui->statusLabel_SM->setText(QString(\"<nobr>\") + tr(\"Message signed.\") + QString(\"</nobr>\"));\n \n-    ui->signatureOut_SM->setText(QString::fromStdString(EncodeBase64(vchSig.data(), vchSig.size())));\n+    ui->signatureOut_SM->setText(QString::fromStdString(signature));\n }\n \n void SignVerifyMessageDialog::on_copySignatureButton_SM_clicked()"
      },
      {
        "sha": "e77dad6bfa28e34a91bda9901b6efdd892c2b698",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b9d620f6cb2cb70366a26beeebd9698aaa8680b/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b9d620f6cb2cb70366a26beeebd9698aaa8680b/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=4b9d620f6cb2cb70366a26beeebd9698aaa8680b",
        "patch": "@@ -11,7 +11,7 @@\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <util/check.h>\n-#include <util/message.h> // For strMessageMagic, MessageVerify()\n+#include <util/message.h> // For MessageSign(), MessageVerify()\n #include <util/strencodings.h>\n #include <util/system.h>\n \n@@ -322,15 +322,13 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n     }\n \n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << strMessage;\n+    std::string signature;\n \n-    std::vector<unsigned char> vchSig;\n-    if (!key.SignCompact(ss.GetHash(), vchSig))\n+    if (!MessageSign(key, strMessage, signature)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n+    }\n \n-    return EncodeBase64(vchSig.data(), vchSig.size());\n+    return signature;\n }\n \n static UniValue setmocktime(const JSONRPCRequest& request)"
      },
      {
        "sha": "8a2553617b284b3baeb278bab213ba74578ff08a",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 1,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b9d620f6cb2cb70366a26beeebd9698aaa8680b/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b9d620f6cb2cb70366a26beeebd9698aaa8680b/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=4b9d620f6cb2cb70366a26beeebd9698aaa8680b",
        "patch": "@@ -5,18 +5,20 @@\n #include <util/system.h>\n \n #include <clientversion.h>\n+#include <key.h> // For CKey\n #include <optional.h>\n #include <sync.h>\n #include <test/util/setup_common.h>\n #include <test/util/str.h>\n-#include <util/message.h> // For MessageVerify()\n+#include <util/message.h> // For MessageSign(), MessageVerify()\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n #include <util/time.h>\n #include <util/spanparsing.h>\n #include <util/vector.h>\n \n+#include <array>\n #include <stdint.h>\n #include <thread>\n #include <univalue.h>\n@@ -2026,6 +2028,42 @@ BOOST_AUTO_TEST_CASE(test_tracked_vector)\n     BOOST_CHECK_EQUAL(v8[2].copies, 0);\n }\n \n+BOOST_AUTO_TEST_CASE(message_sign)\n+{\n+    const std::array<unsigned char, 32> privkey_bytes = {\n+        // just some random data\n+        // derived address from this private key: 15CRxFdyRpGZLW9w8HnHvVduizdL5jKNbs\n+        0xD9, 0x7F, 0x51, 0x08, 0xF1, 0x1C, 0xDA, 0x6E,\n+        0xEE, 0xBA, 0xAA, 0x42, 0x0F, 0xEF, 0x07, 0x26,\n+        0xB1, 0xF8, 0x98, 0x06, 0x0B, 0x98, 0x48, 0x9F,\n+        0xA3, 0x09, 0x84, 0x63, 0xC0, 0x03, 0x28, 0x66\n+    };\n+\n+    const std::string message = \"Trust no one\";\n+\n+    const std::string expected_signature =\n+        \"IPojfrX2dfPnH26UegfbGQQLrdK844DlHq5157/P6h57WyuS/Qsl+h/WSVGDF4MUi4rWSswW38oimDYfNNUBUOk=\";\n+\n+    CKey privkey;\n+    std::string generated_signature;\n+\n+    BOOST_REQUIRE_MESSAGE(!privkey.IsValid(),\n+        \"Confirm the private key is invalid\");\n+\n+    BOOST_CHECK_MESSAGE(!MessageSign(privkey, message, generated_signature),\n+        \"Sign with an invalid private key\");\n+\n+    privkey.Set(privkey_bytes.begin(), privkey_bytes.end(), true);\n+\n+    BOOST_REQUIRE_MESSAGE(privkey.IsValid(),\n+        \"Confirm the private key is valid\");\n+\n+    BOOST_CHECK_MESSAGE(MessageSign(privkey, message, generated_signature),\n+        \"Sign with a valid private key\");\n+\n+    BOOST_CHECK_EQUAL(expected_signature, generated_signature);\n+}\n+\n BOOST_AUTO_TEST_CASE(message_verify)\n {\n     BOOST_CHECK_EQUAL("
      },
      {
        "sha": "22ace2dd75bc02fd19cffd1f97dd4d3dd992e0aa",
        "filename": "src/util/message.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b9d620f6cb2cb70366a26beeebd9698aaa8680b/src/util/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b9d620f6cb2cb70366a26beeebd9698aaa8680b/src/util/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.cpp?ref=4b9d620f6cb2cb70366a26beeebd9698aaa8680b",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <hash.h>            // For CHashWriter\n+#include <key.h>             // For CKey\n #include <key_io.h>          // For DecodeDestination()\n #include <pubkey.h>          // For CPubKey\n #include <script/standard.h> // For CTxDestination, IsValidDestination(), PKHash\n@@ -51,3 +52,23 @@ MessageVerificationResult MessageVerify(\n \n     return MessageVerificationResult::OK;\n }\n+\n+bool MessageSign(\n+    const CKey& privkey,\n+    const std::string& message,\n+    std::string& signature)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    ss << strMessageMagic;\n+    ss << message;\n+\n+    std::vector<unsigned char> signature_bytes;\n+\n+    if (!privkey.SignCompact(ss.GetHash(), signature_bytes)) {\n+        return false;\n+    }\n+\n+    signature = EncodeBase64(signature_bytes.data(), signature_bytes.size());\n+\n+    return true;\n+}"
      },
      {
        "sha": "1a1ba88daf7f6f81d887db5180dabafa1ff155e4",
        "filename": "src/util/message.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b9d620f6cb2cb70366a26beeebd9698aaa8680b/src/util/message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b9d620f6cb2cb70366a26beeebd9698aaa8680b/src/util/message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.h?ref=4b9d620f6cb2cb70366a26beeebd9698aaa8680b",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_UTIL_MESSAGE_H\n #define BITCOIN_UTIL_MESSAGE_H\n \n+#include <key.h> // For CKey\n+\n #include <string>\n \n extern const std::string strMessageMagic;\n@@ -46,4 +48,14 @@ MessageVerificationResult MessageVerify(\n     const std::string& signature,\n     const std::string& message);\n \n+/** Sign a message.\n+ * @param[in] privkey Private key to sign with.\n+ * @param[in] message The message to sign.\n+ * @param[out] signature Signature, base64 encoded, only set if true is returned.\n+ * @return true if signing was successful. */\n+bool MessageSign(\n+    const CKey& privkey,\n+    const std::string& message,\n+    std::string& signature);\n+\n #endif // BITCOIN_UTIL_MESSAGE_H"
      },
      {
        "sha": "1b2d992851e81cf1b2bce7f6a1b1c01da989e7f4",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b9d620f6cb2cb70366a26beeebd9698aaa8680b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b9d620f6cb2cb70366a26beeebd9698aaa8680b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4b9d620f6cb2cb70366a26beeebd9698aaa8680b",
        "patch": "@@ -19,7 +19,7 @@\n #include <script/sign.h>\n #include <util/bip32.h>\n #include <util/fees.h>\n-#include <util/message.h> // For strMessageMagic\n+#include <util/message.h> // For MessageSign()\n #include <util/moneystr.h>\n #include <util/string.h>\n #include <util/system.h>\n@@ -576,15 +576,13 @@ static UniValue signmessage(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n     }\n \n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << strMessage;\n+    std::string signature;\n \n-    std::vector<unsigned char> vchSig;\n-    if (!key.SignCompact(ss.GetHash(), vchSig))\n+    if (!MessageSign(key, strMessage, signature)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n+    }\n \n-    return EncodeBase64(vchSig.data(), vchSig.size());\n+    return signature;\n }\n \n static UniValue getreceivedbyaddress(const JSONRPCRequest& request)"
      }
    ]
  },
  {
    "sha": "cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjc2NDQwM2EzYjdjZDBiY2ZhMGFmN2UxN2RjOGZmYjZjNjM0NmJm",
    "commit": {
      "author": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-12-07T19:52:38Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-14T16:01:34Z"
      },
      "message": "Refactor message hashing into a utility function\n\nAnd add unit test for it.\n\nThe purpose of using a preamble or \"magic\" text as part of signing and\nverifying a message was not given when the code was repeated in a few\nlocations. Make a test showing how it is used to prevent inadvertently\nsigning a transaction.",
      "tree": {
        "sha": "7e5a7a1149e2cb2437223c9800f281d470dc1719",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e5a7a1149e2cb2437223c9800f281d470dc1719"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf/comments",
    "author": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b9d620f6cb2cb70366a26beeebd9698aaa8680b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b9d620f6cb2cb70366a26beeebd9698aaa8680b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b9d620f6cb2cb70366a26beeebd9698aaa8680b"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 43,
      "deletions": 13
    },
    "files": [
      {
        "sha": "f86e713676748f6813ea1931d9e1debceb99e10e",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf",
        "patch": "@@ -5,12 +5,14 @@\n #include <util/system.h>\n \n #include <clientversion.h>\n+#include <hash.h> // For Hash()\n #include <key.h> // For CKey\n #include <optional.h>\n #include <sync.h>\n #include <test/util/setup_common.h>\n #include <test/util/str.h>\n-#include <util/message.h> // For MessageSign(), MessageVerify()\n+#include <uint256.h>\n+#include <util/message.h> // For MessageSign(), MessageVerify(), MESSAGE_MAGIC\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n@@ -2116,4 +2118,21 @@ BOOST_AUTO_TEST_CASE(message_verify)\n         MessageVerificationResult::OK);\n }\n \n+BOOST_AUTO_TEST_CASE(message_hash)\n+{\n+    const std::string unsigned_tx = \"...\";\n+    const std::string prefixed_message =\n+        std::string(1, (char)MESSAGE_MAGIC.length()) +\n+        MESSAGE_MAGIC +\n+        std::string(1, (char)unsigned_tx.length()) +\n+        unsigned_tx;\n+\n+    const uint256 signature_hash = Hash(unsigned_tx.begin(), unsigned_tx.end());\n+    const uint256 message_hash1 = Hash(prefixed_message.begin(), prefixed_message.end());\n+    const uint256 message_hash2 = MessageHash(unsigned_tx);\n+\n+    BOOST_CHECK_EQUAL(message_hash1, message_hash2);\n+    BOOST_CHECK_NE(message_hash1, signature_hash);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "17603a43d2db6fe0d7c271c28c82e80a2c4acbe8",
        "filename": "src/util/message.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf/src/util/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf/src/util/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.cpp?ref=cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf",
        "patch": "@@ -15,7 +15,11 @@\n #include <string>\n #include <vector>\n \n-const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n+/**\n+ * Text used to signify that a signed message follows and to prevent\n+ * inadvertently signing a transaction.\n+ */\n+const std::string MESSAGE_MAGIC = \"Bitcoin Signed Message:\\n\";\n \n MessageVerificationResult MessageVerify(\n     const std::string& address,\n@@ -37,12 +41,8 @@ MessageVerificationResult MessageVerify(\n         return MessageVerificationResult::ERR_MALFORMED_SIGNATURE;\n     }\n \n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << message;\n-\n     CPubKey pubkey;\n-    if (!pubkey.RecoverCompact(ss.GetHash(), signature_bytes)) {\n+    if (!pubkey.RecoverCompact(MessageHash(message), signature_bytes)) {\n         return MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED;\n     }\n \n@@ -58,17 +58,21 @@ bool MessageSign(\n     const std::string& message,\n     std::string& signature)\n {\n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << message;\n-\n     std::vector<unsigned char> signature_bytes;\n \n-    if (!privkey.SignCompact(ss.GetHash(), signature_bytes)) {\n+    if (!privkey.SignCompact(MessageHash(message), signature_bytes)) {\n         return false;\n     }\n \n     signature = EncodeBase64(signature_bytes.data(), signature_bytes.size());\n \n     return true;\n }\n+\n+uint256 MessageHash(const std::string& message)\n+{\n+    CHashWriter hasher(SER_GETHASH, 0);\n+    hasher << MESSAGE_MAGIC << message;\n+\n+    return hasher.GetHash();\n+}"
      },
      {
        "sha": "01fd14ce2dcd58ba5a828d6e9aff347b2a953ebd",
        "filename": "src/util/message.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf/src/util/message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf/src/util/message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.h?ref=cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf",
        "patch": "@@ -7,10 +7,11 @@\n #define BITCOIN_UTIL_MESSAGE_H\n \n #include <key.h> // For CKey\n+#include <uint256.h>\n \n #include <string>\n \n-extern const std::string strMessageMagic;\n+extern const std::string MESSAGE_MAGIC;\n \n /** The result of a signed message verification.\n  * Message verification takes as an input:\n@@ -58,4 +59,10 @@ bool MessageSign(\n     const std::string& message,\n     std::string& signature);\n \n+/**\n+ * Hashes a message for signing and verification in a manner that prevents\n+ * inadvertently signing a transaction.\n+ */\n+uint256 MessageHash(const std::string& message);\n+\n #endif // BITCOIN_UTIL_MESSAGE_H"
      }
    ]
  },
  {
    "sha": "8b865bef58f6f9dadea182ef3294e9dd507aaf26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Yjg2NWJlZjU4ZjZmOWRhZGVhMTgyZWYzMjk0ZTlkZDUwN2FhZjI2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T00:19:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-21T17:13:40Z"
      },
      "message": "Refactor rawtransaction's SignTransaction into generic SignTransaction function",
      "tree": {
        "sha": "b06f3ed3a8451d142d03bde162d79290faea07aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b06f3ed3a8451d142d03bde162d79290faea07aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b865bef58f6f9dadea182ef3294e9dd507aaf26",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b865bef58f6f9dadea182ef3294e9dd507aaf26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b865bef58f6f9dadea182ef3294e9dd507aaf26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b865bef58f6f9dadea182ef3294e9dd507aaf26/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb764403a3b7cd0bcfa0af7e17dc8ffb6c6346bf"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 73,
      "deletions": 42
    },
    "files": [
      {
        "sha": "9dde81c36b36f464b594d4d54657f2ba6c0974ba",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b865bef58f6f9dadea182ef3294e9dd507aaf26/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b865bef58f6f9dadea182ef3294e9dd507aaf26/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=8b865bef58f6f9dadea182ef3294e9dd507aaf26",
        "patch": "@@ -124,6 +124,11 @@ class CTxIn\n         return !(a == b);\n     }\n \n+    friend bool operator<(const CTxIn& a, const CTxIn& b)\n+    {\n+        return a.prevout < b.prevout;\n+    }\n+\n     std::string ToString() const;\n };\n "
      },
      {
        "sha": "54baec6c6faebadc6afb7e85a41e476333993425",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 42,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b865bef58f6f9dadea182ef3294e9dd507aaf26/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b865bef58f6f9dadea182ef3294e9dd507aaf26/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=8b865bef58f6f9dadea182ef3294e9dd507aaf26",
        "patch": "@@ -272,55 +272,27 @@ void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n {\n     int nHashType = ParseSighashString(hashType);\n \n-    bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n-\n     // Script verification errors\n-    UniValue vErrors(UniValue::VARR);\n-\n-    // Use CTransaction for the constant parts of the\n-    // transaction to avoid rehashing.\n-    const CTransaction txConst(mtx);\n-    // Sign what we can:\n-    for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n-        CTxIn& txin = mtx.vin[i];\n-        auto coin = coins.find(txin.prevout);\n-        if (coin == coins.end() || coin->second.IsSpent()) {\n-            TxInErrorToJSON(txin, vErrors, \"Input not found or already spent\");\n-            continue;\n-        }\n-        const CScript& prevPubKey = coin->second.out.scriptPubKey;\n-        const CAmount& amount = coin->second.out.nValue;\n-\n-        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n-        // Only sign SIGHASH_SINGLE if there's a corresponding output:\n-        if (!fHashSingle || (i < mtx.vout.size())) {\n-            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n-        }\n-\n-        UpdateInput(txin, sigdata);\n+    std::map<int, std::string> input_errors;\n \n-        // amount must be specified for valid segwit signature\n-        if (amount == MAX_MONEY && !txin.scriptWitness.IsNull()) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing amount for %s\", coin->second.out.ToString()));\n-        }\n+    bool complete = SignTransaction(mtx, keystore, coins, nHashType, input_errors);\n+    SignTransactionResultToJSON(mtx, complete, coins, input_errors, result);\n+}\n \n-        ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n-            if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n-                // Unable to sign input and verification failed (possible attempt to partially sign).\n-                TxInErrorToJSON(txin, vErrors, \"Unable to sign input, invalid stack size (possibly missing key)\");\n-            } else if (serror == SCRIPT_ERR_SIG_NULLFAIL) {\n-                // Verification failed (possibly due to insufficient signatures).\n-                TxInErrorToJSON(txin, vErrors, \"CHECK(MULTI)SIG failing with non-zero signature (possibly need more signatures)\");\n-            } else {\n-                TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n-            }\n+void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, std::map<int, std::string>& input_errors, UniValue& result)\n+{\n+    // Make errors UniValue\n+    UniValue vErrors(UniValue::VARR);\n+    for (const auto& err_pair : input_errors) {\n+        if (err_pair.second == \"Missing amount\") {\n+            // This particular error needs to be an exception for some reason\n+            throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing amount for %s\", coins.at(mtx.vin.at(err_pair.first).prevout).out.ToString()));\n         }\n+        TxInErrorToJSON(mtx.vin.at(err_pair.first), vErrors, err_pair.second);\n     }\n-    bool fComplete = vErrors.empty();\n \n     result.pushKV(\"hex\", EncodeHexTx(CTransaction(mtx)));\n-    result.pushKV(\"complete\", fComplete);\n+    result.pushKV(\"complete\", complete);\n     if (!vErrors.empty()) {\n         if (result.exists(\"errors\")) {\n             vErrors.push_backV(result[\"errors\"].getValues());"
      },
      {
        "sha": "436db5dc6070781c1ca32d4556441ea829751945",
        "filename": "src/rpc/rawtransaction_util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b865bef58f6f9dadea182ef3294e9dd507aaf26/src/rpc/rawtransaction_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b865bef58f6f9dadea182ef3294e9dd507aaf26/src/rpc/rawtransaction_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.h?ref=8b865bef58f6f9dadea182ef3294e9dd507aaf26",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_RPC_RAWTRANSACTION_UTIL_H\n \n #include <map>\n+#include <string>\n \n class FillableSigningProvider;\n class UniValue;\n@@ -24,6 +25,7 @@ class SigningProvider;\n  * @param result         JSON object where signed transaction results accumulate\n  */\n void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType, UniValue& result);\n+void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, std::map<int, std::string>& input_errors, UniValue& result);\n \n /**\n   * Parse a prevtxs UniValue array and get the map of coins from it"
      },
      {
        "sha": "a8abd347daa15d08179cf4a2e5bcf264b2c4529b",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b865bef58f6f9dadea182ef3294e9dd507aaf26/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b865bef58f6f9dadea182ef3294e9dd507aaf26/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=8b865bef58f6f9dadea182ef3294e9dd507aaf26",
        "patch": "@@ -465,3 +465,51 @@ bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n     }\n     return false;\n }\n+\n+bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, int nHashType, std::map<int, std::string>& input_errors)\n+{\n+    bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n+\n+    // Use CTransaction for the constant parts of the\n+    // transaction to avoid rehashing.\n+    const CTransaction txConst(mtx);\n+    // Sign what we can:\n+    for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n+        CTxIn& txin = mtx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n+        }\n+        const CScript& prevPubKey = coin->second.out.scriptPubKey;\n+        const CAmount& amount = coin->second.out.nValue;\n+\n+        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n+        // Only sign SIGHASH_SINGLE if there's a corresponding output:\n+        if (!fHashSingle || (i < mtx.vout.size())) {\n+            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        }\n+\n+        UpdateInput(txin, sigdata);\n+\n+        // amount must be specified for valid segwit signature\n+        if (amount == MAX_MONEY && !txin.scriptWitness.IsNull()) {\n+            input_errors[i] = \"Missing amount\";\n+            continue;\n+        }\n+\n+        ScriptError serror = SCRIPT_ERR_OK;\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n+            if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n+                // Unable to sign input and verification failed (possible attempt to partially sign).\n+                input_errors[i] = \"Unable to sign input, invalid stack size (possibly missing key)\";\n+            } else if (serror == SCRIPT_ERR_SIG_NULLFAIL) {\n+                // Verification failed (possibly due to insufficient signatures).\n+                input_errors[i] = \"CHECK(MULTI)SIG failing with non-zero signature (possibly need more signatures)\";\n+            } else {\n+                input_errors[i] = ScriptErrorString(serror);\n+            }\n+        }\n+    }\n+    return input_errors.empty();\n+}"
      },
      {
        "sha": "f03af0713fb62aa581ea49471117608234ff405a",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b865bef58f6f9dadea182ef3294e9dd507aaf26/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b865bef58f6f9dadea182ef3294e9dd507aaf26/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=8b865bef58f6f9dadea182ef3294e9dd507aaf26",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_SCRIPT_SIGN_H\n #define BITCOIN_SCRIPT_SIGN_H\n \n+#include <coins.h>\n #include <hash.h>\n #include <pubkey.h>\n #include <script/interpreter.h>\n@@ -168,4 +169,7 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script);\n /** Check whether a scriptPubKey is known to be segwit. */\n bool IsSegWitOutput(const SigningProvider& provider, const CScript& script);\n \n+/** Sign the CMutableTransaction */\n+bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* provider, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors);\n+\n #endif // BITCOIN_SCRIPT_SIGN_H"
      }
    ]
  },
  {
    "sha": "5ec7ec37fb1c0dec22e53580dfcc1350fba92b19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWM3ZWMzN2ZiMWMwZGVjMjJlNTM1ODBkZmNjMTM1MGZiYTkyYjE5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T00:49:31Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-21T17:13:40Z"
      },
      "message": "Add SignTransaction function to ScriptPubKeyMan and LegacyScriptPubKeyMan",
      "tree": {
        "sha": "6f14e64948b9fed1128b3e725d5d2ab828570f6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f14e64948b9fed1128b3e725d5d2ab828570f6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ec7ec37fb1c0dec22e53580dfcc1350fba92b19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ec7ec37fb1c0dec22e53580dfcc1350fba92b19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ec7ec37fb1c0dec22e53580dfcc1350fba92b19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ec7ec37fb1c0dec22e53580dfcc1350fba92b19/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b865bef58f6f9dadea182ef3294e9dd507aaf26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b865bef58f6f9dadea182ef3294e9dd507aaf26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b865bef58f6f9dadea182ef3294e9dd507aaf26"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "acafc9b3d1c0d05d624a0ecee169d695934d79e7",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ec7ec37fb1c0dec22e53580dfcc1350fba92b19/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ec7ec37fb1c0dec22e53580dfcc1350fba92b19/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=5ec7ec37fb1c0dec22e53580dfcc1350fba92b19",
        "patch": "@@ -5,6 +5,7 @@\n #include <key_io.h>\n #include <outputtype.h>\n #include <script/descriptor.h>\n+#include <script/sign.h>\n #include <util/bip32.h>\n #include <util/strencodings.h>\n #include <util/translation.h>\n@@ -497,6 +498,11 @@ bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sig\n     }\n }\n \n+bool LegacyScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    return ::SignTransaction(tx, this, coins, sighash, input_errors);\n+}\n+\n const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n {\n     LOCK(cs_KeyStore);"
      },
      {
        "sha": "333f87b34f4f912e192655853cced66b39713950",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ec7ec37fb1c0dec22e53580dfcc1350fba92b19/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ec7ec37fb1c0dec22e53580dfcc1350fba92b19/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=5ec7ec37fb1c0dec22e53580dfcc1350fba92b19",
        "patch": "@@ -210,6 +210,9 @@ class ScriptPubKeyMan\n       */\n     virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n \n+    /** Creates new signatures and adds them to the transaction. Returns whether all inputs were signed */\n+    virtual bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const { return false; }\n+\n     virtual uint256 GetID() const { return uint256(); }\n \n     /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n@@ -350,6 +353,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n \n+    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const override;\n+\n     uint256 GetID() const override;\n \n     // Map from Key ID to key metadata."
      }
    ]
  },
  {
    "sha": "1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmI3OTM5ZDNlYjdiMGUwYzU1MWJhNmI3ZTNjZjkxNThjNzg0ZTY4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T00:49:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-21T17:17:53Z"
      },
      "message": "Implement CWallet::SignTransaction using ScriptPubKeyMan::SignTransaction",
      "tree": {
        "sha": "8c0e36f614acd7ce135f46b7b180639143df1d0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c0e36f614acd7ce135f46b7b180639143df1d0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ec7ec37fb1c0dec22e53580dfcc1350fba92b19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ec7ec37fb1c0dec22e53580dfcc1350fba92b19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ec7ec37fb1c0dec22e53580dfcc1350fba92b19"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 59,
      "deletions": 18
    },
    "files": [
      {
        "sha": "95c60cc39ed5f32dd350a8b92e746ab478aaeb87",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 17,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
        "patch": "@@ -2403,34 +2403,68 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    // Because each ScriptPubKeyMan can sign more than one input, we need to keep track of each ScriptPubKeyMan that has signed this transaction.\n+    // Each iteration, we may sign more txins than the txin that is specified in that iteration.\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Get the prevout\n+        CTxIn& txin = tx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n         }\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n+        // Check if this input is complete\n+        SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n+        if (sigdata.complete) {\n+            continue;\n         }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+\n+        // Input needs to be signed, find the right ScriptPubKeyMan\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(coin->second.out.scriptPubKey, sigdata);\n+        if (!spk_man) {\n+            input_errors[i] = \"Unable to sign input, missing keys\";\n+            continue;\n+        }\n+\n+        // If we've already been signed by this spk_man, skip it\n+        if (visited_spk_mans.count(spk_man->GetID()) > 0) {\n+            continue;\n+        }\n+\n+        // Sign the tx.\n+        // spk_man->SignTransaction will return true if the transaction is complete,\n+        // so we can exit early and return true if that happens.\n+        if (spk_man->SignTransaction(tx, coins, sighash, input_errors)) {\n+            return true;\n+        }\n+\n+        // Add this spk_man to visited_spk_mans so we can skip it later\n+        visited_spk_mans.insert(spk_man->GetID());\n     }\n-    return true;\n+    return false;\n }\n \n bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)\n@@ -4148,9 +4182,8 @@ ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const OutputType& type, bool intern\n     return it->second;\n }\n \n-ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const CScript& script) const\n+ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const CScript& script, SignatureData& sigdata) const\n {\n-    SignatureData sigdata;\n     for (const auto& spk_man_pair : m_spk_managers) {\n         if (spk_man_pair.second->CanProvide(script, sigdata)) {\n             return spk_man_pair.second.get();\n@@ -4159,6 +4192,12 @@ ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const CScript& script) const\n     return nullptr;\n }\n \n+ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const CScript& script) const\n+{\n+    SignatureData sigdata;\n+    return GetScriptPubKeyMan(script, sigdata);\n+}\n+\n ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const uint256& id) const\n {\n     if (m_spk_managers.count(id) > 0) {"
      },
      {
        "sha": "aa0460e7b43d612ba1d8ab5496159d69296ac070",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
        "patch": "@@ -916,7 +916,8 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n      * calling CreateTransaction();\n      */\n     bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl);\n-    bool SignTransaction(CMutableTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool SignTransaction(CMutableTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const;\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins\n@@ -1150,6 +1151,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     //! Get the ScriptPubKeyMan for a script\n     ScriptPubKeyMan* GetScriptPubKeyMan(const CScript& script) const;\n+    ScriptPubKeyMan* GetScriptPubKeyMan(const CScript& script, SignatureData& sigdata) const;\n     //! Get the ScriptPubKeyMan by id\n     ScriptPubKeyMan* GetScriptPubKeyMan(const uint256& id) const;\n "
      }
    ]
  },
  {
    "sha": "6be1281f731b32dbd0e223a73747647e8b87beda",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmUxMjgxZjczMWIzMmRiZDBlMjIzYTczNzQ3NjQ3ZThiODdiZWRh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T00:50:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-21T17:17:57Z"
      },
      "message": "Use CWallet::SignTransaction in CreateTransaction and signrawtransactionwithwallet\n\nInstead of duplicating signing code, just use the function we already\nhave.",
      "tree": {
        "sha": "3c8a9c8788c67b70d464a8dbe81f0d9fce9cb250",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c8a9c8788c67b70d464a8dbe81f0d9fce9cb250"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6be1281f731b32dbd0e223a73747647e8b87beda",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6be1281f731b32dbd0e223a73747647e8b87beda",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6be1281f731b32dbd0e223a73747647e8b87beda",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6be1281f731b32dbd0e223a73747647e8b87beda/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 10,
      "deletions": 31
    },
    "files": [
      {
        "sha": "e48cfea81c0b6387feb6dd246fea3126dfbc7c75",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 15,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6be1281f731b32dbd0e223a73747647e8b87beda/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6be1281f731b32dbd0e223a73747647e8b87beda/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6be1281f731b32dbd0e223a73747647e8b87beda",
        "patch": "@@ -3306,23 +3306,15 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     // Parse the prevtxs array\n     ParsePrevouts(request.params[1], nullptr, coins);\n \n-    std::set<std::shared_ptr<SigningProvider>> providers;\n-    for (const std::pair<COutPoint, Coin> coin_pair : coins) {\n-        std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(coin_pair.second.out.scriptPubKey);\n-        if (provider) {\n-            providers.insert(std::move(provider));\n-        }\n-    }\n-    if (providers.size() == 0) {\n-        // When there are no available providers, use a dummy SigningProvider so we can check if the tx is complete\n-        providers.insert(std::make_shared<SigningProvider>());\n-    }\n+    int nHashType = ParseSighashString(request.params[2]);\n \n+    // Script verification errors\n+    std::map<int, std::string> input_errors;\n+\n+    bool complete = pwallet->SignTransaction(mtx, coins, nHashType, input_errors);\n     UniValue result(UniValue::VOBJ);\n-    for (std::shared_ptr<SigningProvider> provider : providers) {\n-        SignTransaction(mtx, provider.get(), coins, request.params[2], result);\n-    }\n-     return result;\n+    SignTransactionResultToJSON(mtx, complete, coins, input_errors, result);\n+    return result;\n }\n \n static UniValue bumpfee(const JSONRPCRequest& request)"
      },
      {
        "sha": "cdce0d5058cef11ab702029104f53c0455c7b482",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 16,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6be1281f731b32dbd0e223a73747647e8b87beda/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6be1281f731b32dbd0e223a73747647e8b87beda/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6be1281f731b32dbd0e223a73747647e8b87beda",
        "patch": "@@ -2915,22 +2915,9 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n         if (sign)\n         {\n-            int nIn = 0;\n-            for (const auto& coin : selected_coins)\n-            {\n-                const CScript& scriptPubKey = coin.txout.scriptPubKey;\n-                SignatureData sigdata;\n-\n-                std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-                if (!provider || !ProduceSignature(*provider, MutableTransactionSignatureCreator(&txNew, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n-                {\n-                    strFailReason = _(\"Signing transaction failed\").translated;\n-                    return false;\n-                } else {\n-                    UpdateInput(txNew.vin.at(nIn), sigdata);\n-                }\n-\n-                nIn++;\n+            if (!SignTransaction(txNew)) {\n+                strFailReason = _(\"Signing transaction failed\").translated;\n+                return false;\n             }\n         }\n "
      }
    ]
  },
  {
    "sha": "e4314bf986d0fe5f3186afaa1372255039356563",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDMxNGJmOTg2ZDBmZTVmMzE4NmFmYWExMzcyMjU1MDM5MzU2NTYz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T00:50:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-21T17:18:01Z"
      },
      "message": "Move FillPSBT to be a member of CWallet",
      "tree": {
        "sha": "2cd51cd00877b3fa71df33bdf0fb4c24c96dc366",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cd51cd00877b3fa71df33bdf0fb4c24c96dc366"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4314bf986d0fe5f3186afaa1372255039356563",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4314bf986d0fe5f3186afaa1372255039356563",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4314bf986d0fe5f3186afaa1372255039356563",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4314bf986d0fe5f3186afaa1372255039356563/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6be1281f731b32dbd0e223a73747647e8b87beda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6be1281f731b32dbd0e223a73747647e8b87beda",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6be1281f731b32dbd0e223a73747647e8b87beda"
      }
    ],
    "stats": {
      "total": 217,
      "additions": 97,
      "deletions": 120
    },
    "files": [
      {
        "sha": "d15556d5f5104c0a8fbe2d3b201e61714ccf2a00",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4314bf986d0fe5f3186afaa1372255039356563/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4314bf986d0fe5f3186afaa1372255039356563/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e4314bf986d0fe5f3186afaa1372255039356563",
        "patch": "@@ -243,7 +243,6 @@ BITCOIN_CORE_H = \\\n   wallet/fees.h \\\n   wallet/ismine.h \\\n   wallet/load.h \\\n-  wallet/psbtwallet.h \\\n   wallet/rpcwallet.h \\\n   wallet/scriptpubkeyman.h \\\n   wallet/wallet.h \\\n@@ -351,7 +350,6 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\\n   wallet/load.cpp \\\n-  wallet/psbtwallet.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/scriptpubkeyman.cpp \\"
      },
      {
        "sha": "1c1564dc7061842a480a507b722d47c892dfb8a3",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4314bf986d0fe5f3186afaa1372255039356563/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4314bf986d0fe5f3186afaa1372255039356563/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=e4314bf986d0fe5f3186afaa1372255039356563",
        "patch": "@@ -19,7 +19,6 @@\n #include <wallet/fees.h>\n #include <wallet/ismine.h>\n #include <wallet/load.h>\n-#include <wallet/psbtwallet.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n \n@@ -363,7 +362,7 @@ class WalletImpl : public Wallet\n         bool sign = true,\n         bool bip32derivs = false) override\n     {\n-        return FillPSBT(m_wallet.get(), psbtx, complete, sighash_type, sign, bip32derivs);\n+        return m_wallet->FillPSBT(psbtx, complete, sighash_type, sign, bip32derivs);\n     }\n     WalletBalances getBalances() override\n     {"
      },
      {
        "sha": "4ddee513a1b6872dba8584a2ae8b5e36361bbe2b",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4314bf986d0fe5f3186afaa1372255039356563/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4314bf986d0fe5f3186afaa1372255039356563/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=e4314bf986d0fe5f3186afaa1372255039356563",
        "patch": "@@ -26,7 +26,6 @@\n #include <ui_interface.h>\n #include <wallet/coincontrol.h>\n #include <wallet/fees.h>\n-#include <wallet/psbtwallet.h>\n #include <wallet/wallet.h>\n \n #include <QFontMetrics>"
      },
      {
        "sha": "d995fb06d498f52982a6b25fa9f96ea4aba7f990",
        "filename": "src/wallet/psbtwallet.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 77,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6be1281f731b32dbd0e223a73747647e8b87beda/src/wallet/psbtwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6be1281f731b32dbd0e223a73747647e8b87beda/src/wallet/psbtwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.cpp?ref=6be1281f731b32dbd0e223a73747647e8b87beda",
        "patch": "@@ -1,77 +0,0 @@\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <wallet/psbtwallet.h>\n-\n-TransactionError FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, bool& complete, int sighash_type, bool sign, bool bip32derivs)\n-{\n-    LOCK(pwallet->cs_wallet);\n-    // Get all of the previous transactions\n-    complete = true;\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        const CTxIn& txin = psbtx.tx->vin[i];\n-        PSBTInput& input = psbtx.inputs.at(i);\n-\n-        if (PSBTInputSigned(input)) {\n-            continue;\n-        }\n-\n-        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n-        if (!input.IsSane()) {\n-            return TransactionError::INVALID_PSBT;\n-        }\n-\n-        // If we have no utxo, grab it from the wallet.\n-        if (!input.non_witness_utxo && input.witness_utxo.IsNull()) {\n-            const uint256& txhash = txin.prevout.hash;\n-            const auto it = pwallet->mapWallet.find(txhash);\n-            if (it != pwallet->mapWallet.end()) {\n-                const CWalletTx& wtx = it->second;\n-                // We only need the non_witness_utxo, which is a superset of the witness_utxo.\n-                //   The signing code will switch to the smaller witness_utxo if this is ok.\n-                input.non_witness_utxo = wtx.tx;\n-            }\n-        }\n-\n-        // Get the Sighash type\n-        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n-            return TransactionError::SIGHASH_MISMATCH;\n-        }\n-\n-        // Get the scriptPubKey to know which SigningProvider to use\n-        CScript script;\n-        if (!input.witness_utxo.IsNull()) {\n-            script = input.witness_utxo.scriptPubKey;\n-        } else if (input.non_witness_utxo) {\n-            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n-                return TransactionError::MISSING_INPUTS;\n-            }\n-            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n-        } else {\n-            // There's no UTXO so we can just skip this now\n-            complete = false;\n-            continue;\n-        }\n-        SignatureData sigdata;\n-        input.FillSignatureData(sigdata);\n-        std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(script, sigdata);\n-        if (!provider) {\n-            complete = false;\n-            continue;\n-        }\n-\n-        complete &= SignPSBTInput(HidingSigningProvider(provider.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n-    }\n-\n-    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n-    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n-        const CTxOut& out = psbtx.tx->vout.at(i);\n-        std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(out.scriptPubKey);\n-        if (provider) {\n-            UpdatePSBTOutput(HidingSigningProvider(provider.get(), true, !bip32derivs), psbtx, i);\n-        }\n-    }\n-\n-    return TransactionError::OK;\n-}"
      },
      {
        "sha": "b35a0a58d13c7e26960e5b6ced2d5a409d58a9a7",
        "filename": "src/wallet/psbtwallet.h",
        "status": "removed",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6be1281f731b32dbd0e223a73747647e8b87beda/src/wallet/psbtwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6be1281f731b32dbd0e223a73747647e8b87beda/src/wallet/psbtwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.h?ref=6be1281f731b32dbd0e223a73747647e8b87beda",
        "patch": "@@ -1,32 +0,0 @@\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_WALLET_PSBTWALLET_H\n-#define BITCOIN_WALLET_PSBTWALLET_H\n-\n-#include <psbt.h>\n-#include <wallet/wallet.h>\n-\n-/**\n- * Fills out a PSBT with information from the wallet. Fills in UTXOs if we have\n- * them. Tries to sign if sign=true. Sets `complete` if the PSBT is now complete\n- * (i.e. has all required signatures or signature-parts, and is ready to\n- * finalize.) Sets `error` and returns false if something goes wrong.\n- *\n- * @param[in]  pwallet pointer to a wallet\n- * @param[in]  psbtx PartiallySignedTransaction to fill in\n- * @param[out] complete indicates whether the PSBT is now complete\n- * @param[in]  sighash_type the sighash type to use when signing (if PSBT does not specify)\n- * @param[in]  sign whether to sign or not\n- * @param[in]  bip32derivs whether to fill in bip32 derivation information if available\n- * return error\n- */\n-NODISCARD TransactionError FillPSBT(const CWallet* pwallet,\n-              PartiallySignedTransaction& psbtx,\n-              bool& complete,\n-              int sighash_type = 1 /* SIGHASH_ALL */,\n-              bool sign = true,\n-              bool bip32derivs = false);\n-\n-#endif // BITCOIN_WALLET_PSBTWALLET_H"
      },
      {
        "sha": "c22576b9ef005bb23bdd9dd3add0fbc8fa6f27a2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4314bf986d0fe5f3186afaa1372255039356563/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4314bf986d0fe5f3186afaa1372255039356563/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e4314bf986d0fe5f3186afaa1372255039356563",
        "patch": "@@ -26,7 +26,6 @@\n #include <util/url.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n-#include <wallet/psbtwallet.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n@@ -3490,7 +3489,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     } else {\n         PartiallySignedTransaction psbtx(mtx);\n         bool complete = false;\n-        const TransactionError err = FillPSBT(pwallet, psbtx, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+        const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n         CHECK_NONFATAL(err == TransactionError::OK);\n         CHECK_NONFATAL(!complete);\n         CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n@@ -4102,7 +4101,7 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n     bool bip32derivs = request.params[3].isNull() ? false : request.params[3].get_bool();\n     bool complete = true;\n-    const TransactionError err = FillPSBT(pwallet, psbtx, complete, nHashType, sign, bip32derivs);\n+    const TransactionError err = pwallet->FillPSBT(psbtx, complete, nHashType, sign, bip32derivs);\n     if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }\n@@ -4224,7 +4223,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     // Fill transaction with out data but don't sign\n     bool bip32derivs = request.params[4].isNull() ? false : request.params[4].get_bool();\n     bool complete = true;\n-    const TransactionError err = FillPSBT(pwallet, psbtx, complete, 1, false, bip32derivs);\n+    const TransactionError err = pwallet->FillPSBT(psbtx, complete, 1, false, bip32derivs);\n     if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }"
      },
      {
        "sha": "008272a69b060fdb234a74c966fcbeb8fd451056",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4314bf986d0fe5f3186afaa1372255039356563/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4314bf986d0fe5f3186afaa1372255039356563/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=e4314bf986d0fe5f3186afaa1372255039356563",
        "patch": "@@ -5,7 +5,6 @@\n #include <key_io.h>\n #include <util/bip32.h>\n #include <util/strencodings.h>\n-#include <wallet/psbtwallet.h>\n #include <wallet/wallet.h>\n \n #include <boost/test/unit_test.hpp>\n@@ -61,7 +60,7 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n \n     // Fill transaction with our data\n     bool complete = true;\n-    BOOST_REQUIRE_EQUAL(TransactionError::OK, FillPSBT(&m_wallet, psbtx, complete, SIGHASH_ALL, false, true));\n+    BOOST_REQUIRE_EQUAL(TransactionError::OK, m_wallet.FillPSBT(psbtx, complete, SIGHASH_ALL, false, true));\n \n     // Get the final tx\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "f1579ac7581ee68d9b57cb072ad45b8940eeac45",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4314bf986d0fe5f3186afaa1372255039356563/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4314bf986d0fe5f3186afaa1372255039356563/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e4314bf986d0fe5f3186afaa1372255039356563",
        "patch": "@@ -2467,6 +2467,78 @@ bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint,\n     return false;\n }\n \n+TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& complete, int sighash_type, bool sign, bool bip32derivs)\n+{\n+    LOCK(cs_wallet);\n+    // Get all of the previous transactions\n+    complete = true;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // If we have no utxo, grab it from the wallet.\n+        if (!input.non_witness_utxo && input.witness_utxo.IsNull()) {\n+            const uint256& txhash = txin.prevout.hash;\n+            const auto it = mapWallet.find(txhash);\n+            if (it != mapWallet.end()) {\n+                const CWalletTx& wtx = it->second;\n+                // We only need the non_witness_utxo, which is a superset of the witness_utxo.\n+                //   The signing code will switch to the smaller witness_utxo if this is ok.\n+                input.non_witness_utxo = wtx.tx;\n+            }\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Get the scriptPubKey to know which SigningProvider to use\n+        CScript script;\n+        if (!input.witness_utxo.IsNull()) {\n+            script = input.witness_utxo.scriptPubKey;\n+        } else if (input.non_witness_utxo) {\n+            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+                return TransactionError::MISSING_INPUTS;\n+            }\n+            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n+        } else {\n+            // There's no UTXO so we can just skip this now\n+            complete = false;\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+        std::unique_ptr<SigningProvider> provider = GetSigningProvider(script, sigdata);\n+        if (!provider) {\n+            complete = false;\n+            continue;\n+        }\n+\n+        complete &= SignPSBTInput(HidingSigningProvider(provider.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n+    }\n+\n+    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        const CTxOut& out = psbtx.tx->vout.at(i);\n+        std::unique_ptr<SigningProvider> provider = GetSigningProvider(out.scriptPubKey);\n+        if (provider) {\n+            UpdatePSBTOutput(HidingSigningProvider(provider.get(), true, !bip32derivs), psbtx, i);\n+        }\n+    }\n+\n+    return TransactionError::OK;\n+}\n+\n bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)\n {\n     std::vector<CRecipient> vecSend;"
      },
      {
        "sha": "2ffbe11a9cd97536731309bb0920bc8054b0d29a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4314bf986d0fe5f3186afaa1372255039356563/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4314bf986d0fe5f3186afaa1372255039356563/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e4314bf986d0fe5f3186afaa1372255039356563",
        "patch": "@@ -11,6 +11,7 @@\n #include <interfaces/handler.h>\n #include <outputtype.h>\n #include <policy/feerate.h>\n+#include <psbt.h>\n #include <tinyformat.h>\n #include <ui_interface.h>\n #include <util/strencodings.h>\n@@ -919,6 +920,25 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     bool SignTransaction(CMutableTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const;\n \n+    /**\n+     * Fills out a PSBT with information from the wallet. Fills in UTXOs if we have\n+     * them. Tries to sign if sign=true. Sets `complete` if the PSBT is now complete\n+     * (i.e. has all required signatures or signature-parts, and is ready to\n+     * finalize.) Sets `error` and returns false if something goes wrong.\n+     *\n+     * @param[in]  psbtx PartiallySignedTransaction to fill in\n+     * @param[out] complete indicates whether the PSBT is now complete\n+     * @param[in]  sighash_type the sighash type to use when signing (if PSBT does not specify)\n+     * @param[in]  sign whether to sign or not\n+     * @param[in]  bip32derivs whether to fill in bip32 derivation information if available\n+     * return error\n+     */\n+    TransactionError FillPSBT(PartiallySignedTransaction& psbtx,\n+                  bool& complete,\n+                  int sighash_type = 1 /* SIGHASH_ALL */,\n+                  bool sign = true,\n+                  bool bip32derivs = false);\n+\n     /**\n      * Create a new transaction paying the recipients with a set of coins\n      * selected by SelectCoins(); Also create the change output, when needed"
      }
    ]
  },
  {
    "sha": "c5ae320bc62607b10bd7575b541ca972234f464c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWFlMzIwYmM2MjYwN2IxMGJkNzU3NWI1NDFjYTk3MjIzNGY0NjRj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T00:50:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-21T17:18:58Z"
      },
      "message": "Move key and script filling and signing from CWallet::FillPSBT to ScriptPubKeyMan::FillPSBT\n\nInstead of fetching a SigningProvider from ScriptPubKeyMan in order\nto fill and sign the keys and scripts for a PSBT, just pass that\nPSBT to a new FillPSBT function that does all that for us.",
      "tree": {
        "sha": "f255fd9db4831171e7c1633ae117763c053dee63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f255fd9db4831171e7c1633ae117763c053dee63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5ae320bc62607b10bd7575b541ca972234f464c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5ae320bc62607b10bd7575b541ca972234f464c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5ae320bc62607b10bd7575b541ca972234f464c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5ae320bc62607b10bd7575b541ca972234f464c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4314bf986d0fe5f3186afaa1372255039356563",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4314bf986d0fe5f3186afaa1372255039356563",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4314bf986d0fe5f3186afaa1372255039356563"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 79,
      "deletions": 20
    },
    "files": [
      {
        "sha": "f996971d96015e0bf9f5a945c51262c3146fc7fa",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5ae320bc62607b10bd7575b541ca972234f464c/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5ae320bc62607b10bd7575b541ca972234f464c/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=c5ae320bc62607b10bd7575b541ca972234f464c",
        "patch": "@@ -503,6 +503,48 @@ bool LegacyScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::\n     return ::SignTransaction(tx, this, coins, sighash, input_errors);\n }\n \n+TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n+{\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Check non_witness_utxo has specified prevout\n+        if (input.non_witness_utxo) {\n+            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+                return TransactionError::MISSING_INPUTS;\n+            }\n+        } else if (input.witness_utxo.IsNull()) {\n+            // There's no UTXO so we can just skip this now\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+        SignPSBTInput(HidingSigningProvider(this, !sign, !bip32derivs), psbtx, i, sighash_type);\n+    }\n+\n+    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        UpdatePSBTOutput(HidingSigningProvider(this, true, !bip32derivs), psbtx, i);\n+    }\n+\n+    return TransactionError::OK;\n+}\n+\n const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n {\n     LOCK(cs_KeyStore);"
      },
      {
        "sha": "344caf9588802b084c7c69b715ddce4d58b9fe2b",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5ae320bc62607b10bd7575b541ca972234f464c/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5ae320bc62607b10bd7575b541ca972234f464c/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=c5ae320bc62607b10bd7575b541ca972234f464c",
        "patch": "@@ -5,8 +5,10 @@\n #ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n #define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n \n+#include <psbt.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n+#include <util/error.h>\n #include <wallet/crypter.h>\n #include <wallet/ismine.h>\n #include <wallet/walletdb.h>\n@@ -212,6 +214,8 @@ class ScriptPubKeyMan\n \n     /** Creates new signatures and adds them to the transaction. Returns whether all inputs were signed */\n     virtual bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const { return false; }\n+    /** Adds script and derivation path information to a PSBT, and optionally signs it. */\n+    virtual TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false) const { return TransactionError::INVALID_PSBT; }\n \n     virtual uint256 GetID() const { return uint256(); }\n \n@@ -354,6 +358,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n \n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const override;\n+    TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false) const override;\n \n     uint256 GetID() const override;\n "
      },
      {
        "sha": "8b7b7af21d52540bd816fb6d198b712cb13873fb",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5ae320bc62607b10bd7575b541ca972234f464c/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5ae320bc62607b10bd7575b541ca972234f464c/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=c5ae320bc62607b10bd7575b541ca972234f464c",
        "patch": "@@ -73,9 +73,7 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n \n     // Try to sign the mutated input\n     SignatureData sigdata;\n-    psbtx.inputs[0].FillSignatureData(sigdata);\n-    const std::unique_ptr<SigningProvider> provider = m_wallet.GetSigningProvider(ws1, sigdata);\n-    BOOST_CHECK(!SignPSBTInput(*provider, psbtx, 0, SIGHASH_ALL));\n+    BOOST_CHECK(spk_man->FillPSBT(psbtx, SIGHASH_ALL, true, true) != TransactionError::OK);\n }\n \n BOOST_AUTO_TEST_CASE(parse_hd_keypath)"
      },
      {
        "sha": "1a2f38527427ebdb2267f7c45794766aafe014be",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 17,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5ae320bc62607b10bd7575b541ca972234f464c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5ae320bc62607b10bd7575b541ca972234f464c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c5ae320bc62607b10bd7575b541ca972234f464c",
        "patch": "@@ -2471,7 +2471,6 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n {\n     LOCK(cs_wallet);\n     // Get all of the previous transactions\n-    complete = true;\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n         const CTxIn& txin = psbtx.tx->vin[i];\n         PSBTInput& input = psbtx.inputs.at(i);\n@@ -2496,13 +2495,21 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n                 input.non_witness_utxo = wtx.tx;\n             }\n         }\n+    }\n \n-        // Get the Sighash type\n-        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n-            return TransactionError::SIGHASH_MISMATCH;\n+    // Fill in information from ScriptPubKeyMans\n+    // Because each ScriptPubKeyMan may be able to fill more than one input, we need to keep track of each ScriptPubKeyMan that has filled this psbt.\n+    // Each iteration, we may fill more inputs than the input that is specified in that iteration.\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n         }\n \n-        // Get the scriptPubKey to know which SigningProvider to use\n+        // Get the scriptPubKey to know which ScriptPubKeyMan to use\n         CScript script;\n         if (!input.witness_utxo.IsNull()) {\n             script = input.witness_utxo.scriptPubKey;\n@@ -2513,27 +2520,34 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n             script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n         } else {\n             // There's no UTXO so we can just skip this now\n-            complete = false;\n             continue;\n         }\n         SignatureData sigdata;\n         input.FillSignatureData(sigdata);\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(script, sigdata);\n-        if (!provider) {\n-            complete = false;\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(script, sigdata);\n+        if (!spk_man) {\n             continue;\n         }\n \n-        complete &= SignPSBTInput(HidingSigningProvider(provider.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n-    }\n+        // If we've already been signed by this spk_man, skip it\n+        if (visited_spk_mans.count(spk_man->GetID()) > 0) {\n+            continue;\n+        }\n \n-    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n-    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n-        const CTxOut& out = psbtx.tx->vout.at(i);\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(out.scriptPubKey);\n-        if (provider) {\n-            UpdatePSBTOutput(HidingSigningProvider(provider.get(), true, !bip32derivs), psbtx, i);\n+        // Fill in the information from the spk_man\n+        TransactionError res = spk_man->FillPSBT(psbtx, sighash_type, sign, bip32derivs);\n+        if (res != TransactionError::OK) {\n+            return res;\n         }\n+\n+        // Add this spk_man to visited_spk_mans so we can skip it later\n+        visited_spk_mans.insert(spk_man->GetID());\n+    }\n+\n+    // Complete if every input is now signed\n+    complete = true;\n+    for (const auto& input : psbtx.inputs) {\n+        complete &= PSBTInputSigned(input);\n     }\n \n     return TransactionError::OK;"
      }
    ]
  },
  {
    "sha": "d7df7b82438ae087c2dea53312e4321446642d15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkN2RmN2I4MjQzOGFlMDg3YzJkZWE1MzMxMmU0MzIxNDQ2NjQyZDE1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-13T22:09:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-21T17:19:00Z"
      },
      "message": "Move direct calls to MessageSign into new SignMessage functions in CWallet and ScriptPubKeyMan\n\nInstead of getting a SigningProvider and then going to MessageSign,\nhave ScriptPubKeyMan handle the message signing internally.",
      "tree": {
        "sha": "e7b4535e24b7e248d006da2e012dfdb47bf2f327",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7b4535e24b7e248d006da2e012dfdb47bf2f327"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7df7b82438ae087c2dea53312e4321446642d15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7df7b82438ae087c2dea53312e4321446642d15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7df7b82438ae087c2dea53312e4321446642d15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7df7b82438ae087c2dea53312e4321446642d15/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5ae320bc62607b10bd7575b541ca972234f464c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5ae320bc62607b10bd7575b541ca972234f464c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5ae320bc62607b10bd7575b541ca972234f464c"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 84,
      "deletions": 25
    },
    "files": [
      {
        "sha": "6a49b36834f219ba77045f3269aaaaa9c4d85063",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7df7b82438ae087c2dea53312e4321446642d15/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7df7b82438ae087c2dea53312e4321446642d15/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=d7df7b82438ae087c2dea53312e4321446642d15",
        "patch": "@@ -132,6 +132,10 @@ class WalletImpl : public Wallet\n         }\n         return false;\n     }\n+    SigningResult signMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) override\n+    {\n+        return m_wallet->SignMessage(message, pkhash, str_sig);\n+    }\n     bool isSpendable(const CTxDestination& dest) override { return m_wallet->IsMine(dest) & ISMINE_SPENDABLE; }\n     bool haveWatchOnly() override\n     {"
      },
      {
        "sha": "f80284798739b1a6853c9d4018897f0ec6926b85",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7df7b82438ae087c2dea53312e4321446642d15/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7df7b82438ae087c2dea53312e4321446642d15/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=d7df7b82438ae087c2dea53312e4321446642d15",
        "patch": "@@ -10,6 +10,7 @@\n #include <script/standard.h>           // For CTxDestination\n #include <support/allocators/secure.h> // For SecureString\n #include <ui_interface.h>              // For ChangeType\n+#include <util/message.h>\n \n #include <functional>\n #include <map>\n@@ -87,6 +88,9 @@ class Wallet\n     //! Get private key.\n     virtual bool getPrivKey(const CScript& script, const CKeyID& address, CKey& key) = 0;\n \n+    //! Sign message\n+    virtual SigningResult signMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) = 0;\n+\n     //! Return whether wallet has private key.\n     virtual bool isSpendable(const CTxDestination& dest) = 0;\n "
      },
      {
        "sha": "4552753bf6df0ab30d00b05f296f99555d3dfb2e",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7df7b82438ae087c2dea53312e4321446642d15/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7df7b82438ae087c2dea53312e4321446642d15/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=d7df7b82438ae087c2dea53312e4321446642d15",
        "patch": "@@ -133,20 +133,27 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         return;\n     }\n \n-    CKey key;\n-    if (!model->wallet().getPrivKey(GetScriptForDestination(destination), CKeyID(*pkhash), key))\n-    {\n-        ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));\n-        return;\n-    }\n-\n     const std::string& message = ui->messageIn_SM->document()->toPlainText().toStdString();\n     std::string signature;\n+    SigningResult res = model->wallet().signMessage(message, *pkhash, signature);\n+\n+    QString error;\n+    switch (res) {\n+        case SigningResult::OK:\n+            error = tr(\"No error\");\n+            break;\n+        case SigningResult::PRIVATE_KEY_NOT_AVAILABLE:\n+            error = tr(\"Private key for the entered address is not available.\");\n+            break;\n+        case SigningResult::SIGNING_FAILED:\n+            error = tr(\"Message signing failed.\");\n+            break;\n+        // no default case, so the compiler can warn about missing cases\n+    }\n \n-    if (!MessageSign(key, message, signature)) {\n+    if (res != SigningResult::OK) {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_SM->setText(QString(\"<nobr>\") + tr(\"Message signing failed.\") + QString(\"</nobr>\"));\n+        ui->statusLabel_SM->setText(QString(\"<nobr>\") + error + QString(\"</nobr>\"));\n         return;\n     }\n "
      },
      {
        "sha": "1e7128d2252bc2cbf8f99dcf949c2bbee9940013",
        "filename": "src/util/message.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7df7b82438ae087c2dea53312e4321446642d15/src/util/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7df7b82438ae087c2dea53312e4321446642d15/src/util/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.cpp?ref=d7df7b82438ae087c2dea53312e4321446642d15",
        "patch": "@@ -76,3 +76,17 @@ uint256 MessageHash(const std::string& message)\n \n     return hasher.GetHash();\n }\n+\n+std::string SigningResultString(const SigningResult res)\n+{\n+    switch (res) {\n+        case SigningResult::OK:\n+            return \"No error\";\n+        case SigningResult::PRIVATE_KEY_NOT_AVAILABLE:\n+            return \"Private key not available\";\n+        case SigningResult::SIGNING_FAILED:\n+            return \"Sign failed\";\n+        // no default case, so the compiler can warn about missing cases\n+    }\n+    assert(false);\n+}"
      },
      {
        "sha": "b31c5f5761b81d5dbae06499801404c5b152b190",
        "filename": "src/util/message.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7df7b82438ae087c2dea53312e4321446642d15/src/util/message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7df7b82438ae087c2dea53312e4321446642d15/src/util/message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.h?ref=d7df7b82438ae087c2dea53312e4321446642d15",
        "patch": "@@ -39,6 +39,12 @@ enum class MessageVerificationResult {\n     OK\n };\n \n+enum class SigningResult {\n+    OK, //!< No error\n+    PRIVATE_KEY_NOT_AVAILABLE,\n+    SIGNING_FAILED,\n+};\n+\n /** Verify a signed message.\n  * @param[in] address Signer's bitcoin address, it must refer to a public key.\n  * @param[in] signature The signature in base64 format.\n@@ -65,4 +71,6 @@ bool MessageSign(\n  */\n uint256 MessageHash(const std::string& message);\n \n+std::string SigningResultString(const SigningResult res);\n+\n #endif // BITCOIN_UTIL_MESSAGE_H"
      },
      {
        "sha": "1c9212c4dcfb5e8b36ec274dfaace696dad2892e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 15,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7df7b82438ae087c2dea53312e4321446642d15/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7df7b82438ae087c2dea53312e4321446642d15/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d7df7b82438ae087c2dea53312e4321446642d15",
        "patch": "@@ -563,22 +563,12 @@ static UniValue signmessage(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n     }\n \n-    CScript script_pub_key = GetScriptForDestination(*pkhash);\n-    std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(script_pub_key);\n-    if (!provider) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n-    }\n-\n-    CKey key;\n-    CKeyID keyID(*pkhash);\n-    if (!provider->GetKey(keyID, key)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n-    }\n-\n     std::string signature;\n-\n-    if (!MessageSign(key, strMessage, signature)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n+    SigningResult err = pwallet->SignMessage(strMessage, *pkhash, signature);\n+    if (err == SigningResult::SIGNING_FAILED) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, SigningResultString(err));\n+    } else if (err != SigningResult::OK){\n+        throw JSONRPCError(RPC_WALLET_ERROR, SigningResultString(err));\n     }\n \n     return signature;"
      },
      {
        "sha": "95c978be23838193fca06541aa6976d956ba33c5",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7df7b82438ae087c2dea53312e4321446642d15/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7df7b82438ae087c2dea53312e4321446642d15/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=d7df7b82438ae087c2dea53312e4321446642d15",
        "patch": "@@ -503,6 +503,20 @@ bool LegacyScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::\n     return ::SignTransaction(tx, this, coins, sighash, input_errors);\n }\n \n+SigningResult LegacyScriptPubKeyMan::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const\n+{\n+    CKeyID key_id(pkhash);\n+    CKey key;\n+    if (!GetKey(key_id, key)) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    if (MessageSign(key, message, str_sig)) {\n+        return SigningResult::OK;\n+    }\n+    return SigningResult::SIGNING_FAILED;\n+}\n+\n TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n {\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {"
      },
      {
        "sha": "cfc7fe253c16c6cda1cc3bf624ddd2f497d0a303",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7df7b82438ae087c2dea53312e4321446642d15/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7df7b82438ae087c2dea53312e4321446642d15/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=d7df7b82438ae087c2dea53312e4321446642d15",
        "patch": "@@ -9,6 +9,7 @@\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <util/error.h>\n+#include <util/message.h>\n #include <wallet/crypter.h>\n #include <wallet/ismine.h>\n #include <wallet/walletdb.h>\n@@ -214,6 +215,8 @@ class ScriptPubKeyMan\n \n     /** Creates new signatures and adds them to the transaction. Returns whether all inputs were signed */\n     virtual bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const { return false; }\n+    /** Sign a message with the given script */\n+    virtual SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const { return SigningResult::SIGNING_FAILED; };\n     /** Adds script and derivation path information to a PSBT, and optionally signs it. */\n     virtual TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false) const { return TransactionError::INVALID_PSBT; }\n \n@@ -358,6 +361,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n \n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const override;\n+    SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n     TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false) const override;\n \n     uint256 GetID() const override;"
      },
      {
        "sha": "3bdcd9ae0a4bda6c0ab823f2b18ce94d41dea200",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7df7b82438ae087c2dea53312e4321446642d15/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7df7b82438ae087c2dea53312e4321446642d15/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d7df7b82438ae087c2dea53312e4321446642d15",
        "patch": "@@ -2553,6 +2553,18 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n     return TransactionError::OK;\n }\n \n+SigningResult CWallet::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const\n+{\n+    SignatureData sigdata;\n+    CScript script_pub_key = GetScriptForDestination(pkhash);\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        if (spk_man_pair.second->CanProvide(script_pub_key, sigdata)) {\n+            return spk_man_pair.second->SignMessage(message, pkhash, str_sig);\n+        }\n+    }\n+    return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+}\n+\n bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)\n {\n     std::vector<CRecipient> vecSend;"
      },
      {
        "sha": "b40ac76b93e8cfd6d815d233f164a55e822c4fb1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7df7b82438ae087c2dea53312e4321446642d15/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7df7b82438ae087c2dea53312e4321446642d15/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d7df7b82438ae087c2dea53312e4321446642d15",
        "patch": "@@ -14,6 +14,7 @@\n #include <psbt.h>\n #include <tinyformat.h>\n #include <ui_interface.h>\n+#include <util/message.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <validationinterface.h>\n@@ -919,6 +920,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl);\n     bool SignTransaction(CMutableTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const;\n+    SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const;\n \n     /**\n      * Fills out a PSBT with information from the wallet. Fills in UTXOs if we have"
      }
    ]
  },
  {
    "sha": "f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmJkOTE5Y2ZkNjVlZTc5YTlhMGUyNjkxOTgwNTgwZDhlNzQwNGMx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T02:27:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-21T17:19:00Z"
      },
      "message": "Replace GetSigningProvider with GetSolvingProvider\n\nNot all ScriptPubKeyMans will be able to provide private keys,\nbut pubkeys and scripts should be. So only provide public-only\nSigningProviders, i.e. ones that can help with Solving.",
      "tree": {
        "sha": "89476a3276c83067bf58ed36ed5594163e81e0ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89476a3276c83067bf58ed36ed5594163e81e0ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7df7b82438ae087c2dea53312e4321446642d15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7df7b82438ae087c2dea53312e4321446642d15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7df7b82438ae087c2dea53312e4321446642d15"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 21,
      "deletions": 32
    },
    "files": [
      {
        "sha": "c345f7db706a59eddfd9fa9cbef0c4fbb235b00c",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
        "patch": "@@ -118,20 +118,12 @@ class WalletImpl : public Wallet\n     }\n     bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) override\n     {\n-        std::unique_ptr<SigningProvider> provider = m_wallet->GetSigningProvider(script);\n+        std::unique_ptr<SigningProvider> provider = m_wallet->GetSolvingProvider(script);\n         if (provider) {\n             return provider->GetPubKey(address, pub_key);\n         }\n         return false;\n     }\n-    bool getPrivKey(const CScript& script, const CKeyID& address, CKey& key) override\n-    {\n-        std::unique_ptr<SigningProvider> provider = m_wallet->GetSigningProvider(script);\n-        if (provider) {\n-            return provider->GetKey(address, key);\n-        }\n-        return false;\n-    }\n     SigningResult signMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) override\n     {\n         return m_wallet->SignMessage(message, pkhash, str_sig);"
      },
      {
        "sha": "7cc620a91e8b65b2df14a564380cacc4b344aa7a",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
        "patch": "@@ -85,9 +85,6 @@ class Wallet\n     //! Get public key.\n     virtual bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) = 0;\n \n-    //! Get private key.\n-    virtual bool getPrivKey(const CScript& script, const CKeyID& address, CKey& key) = 0;\n-\n     //! Sign message\n     virtual SigningResult signMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) = 0;\n "
      },
      {
        "sha": "07ac6374ea992937f191d9e6dda96a55607b52af",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
        "patch": "@@ -2942,7 +2942,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 entry.pushKV(\"label\", i->second.name);\n             }\n \n-            std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(scriptPubKey);\n+            std::unique_ptr<SigningProvider> provider = pwallet->GetSolvingProvider(scriptPubKey);\n             if (provider) {\n                 if (scriptPubKey.IsPayToScriptHash()) {\n                     const CScriptID& hash = CScriptID(boost::get<ScriptHash>(address));\n@@ -2982,7 +2982,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         entry.pushKV(\"spendable\", out.fSpendable);\n         entry.pushKV(\"solvable\", out.fSolvable);\n         if (out.fSolvable) {\n-            std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(scriptPubKey);\n+            std::unique_ptr<SigningProvider> provider = pwallet->GetSolvingProvider(scriptPubKey);\n             if (provider) {\n                 auto descriptor = InferDescriptor(scriptPubKey, *provider);\n                 entry.pushKV(\"desc\", descriptor->ToString());\n@@ -3689,7 +3689,7 @@ static UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& de\n     CScript script = GetScriptForDestination(dest);\n     std::unique_ptr<SigningProvider> provider = nullptr;\n     if (pwallet) {\n-        provider = pwallet->GetSigningProvider(script);\n+        provider = pwallet->GetSolvingProvider(script);\n     }\n     ret.pushKVs(detail);\n     ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(provider.get()), dest));\n@@ -3790,7 +3790,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     CScript scriptPubKey = GetScriptForDestination(dest);\n     ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n-    std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(scriptPubKey);\n+    std::unique_ptr<SigningProvider> provider = pwallet->GetSolvingProvider(scriptPubKey);\n \n     isminetype mine = pwallet->IsMine(dest);\n     ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));"
      },
      {
        "sha": "e0be0cdf37e932becdc0389185ed501d1d053e83",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
        "patch": "@@ -470,7 +470,7 @@ int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const\n     return nTimeFirstKey;\n }\n \n-std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const CScript& script) const\n+std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSolvingProvider(const CScript& script) const\n {\n     return MakeUnique<LegacySigningProvider>(*this);\n }"
      },
      {
        "sha": "7bb51082c61b7fbd7f66d9db62d6835bcb017e86",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
        "patch": "@@ -206,10 +206,10 @@ class ScriptPubKeyMan\n \n     virtual const CKeyMetadata* GetMetadata(const CTxDestination& dest) const { return nullptr; }\n \n-    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+    virtual std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script) const { return nullptr; }\n \n-    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n-      * sigdata, can produce a valid signature.\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSolvingProvider) that, combined with\n+      * sigdata, can produce solving data.\n       */\n     virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n \n@@ -356,7 +356,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool CanGetAddresses(bool internal = false) override;\n \n-    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const override;\n+    std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script) const override;\n \n     bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n \n@@ -461,7 +461,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     std::set<CKeyID> GetKeys() const override;\n };\n \n-/** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */\n+/** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr. Does not provide privkeys */\n class LegacySigningProvider : public SigningProvider\n {\n private:\n@@ -472,8 +472,8 @@ class LegacySigningProvider : public SigningProvider\n     bool GetCScript(const CScriptID &scriptid, CScript& script) const override { return m_spk_man.GetCScript(scriptid, script); }\n     bool HaveCScript(const CScriptID &scriptid) const override { return m_spk_man.HaveCScript(scriptid); }\n     bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const override { return m_spk_man.GetPubKey(address, pubkey); }\n-    bool GetKey(const CKeyID &address, CKey& key) const override { return m_spk_man.GetKey(address, key); }\n-    bool HaveKey(const CKeyID &address) const override { return m_spk_man.HaveKey(address); }\n+    bool GetKey(const CKeyID &address, CKey& key) const override { return false; }\n+    bool HaveKey(const CKeyID &address) const override { return false; }\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n "
      },
      {
        "sha": "f4e3312ff2a5c209ff3ab1114b43bdea036d1740",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
        "patch": "@@ -1400,7 +1400,7 @@ bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig\n     const CScript& scriptPubKey = txout.scriptPubKey;\n     SignatureData sigdata;\n \n-    std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n+    std::unique_ptr<SigningProvider> provider = GetSolvingProvider(scriptPubKey);\n     if (!provider) {\n         // We don't know about this scriptpbuKey;\n         return false;\n@@ -2164,7 +2164,7 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n                 continue;\n             }\n \n-            std::unique_ptr<SigningProvider> provider = GetSigningProvider(wtx.tx->vout[i].scriptPubKey);\n+            std::unique_ptr<SigningProvider> provider = GetSolvingProvider(wtx.tx->vout[i].scriptPubKey);\n \n             bool solvable = provider ? IsSolvable(*provider, wtx.tx->vout[i].scriptPubKey) : false;\n             bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n@@ -4291,17 +4291,17 @@ ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const uint256& id) const\n     return nullptr;\n }\n \n-std::unique_ptr<SigningProvider> CWallet::GetSigningProvider(const CScript& script) const\n+std::unique_ptr<SigningProvider> CWallet::GetSolvingProvider(const CScript& script) const\n {\n     SignatureData sigdata;\n-    return GetSigningProvider(script, sigdata);\n+    return GetSolvingProvider(script, sigdata);\n }\n \n-std::unique_ptr<SigningProvider> CWallet::GetSigningProvider(const CScript& script, SignatureData& sigdata) const\n+std::unique_ptr<SigningProvider> CWallet::GetSolvingProvider(const CScript& script, SignatureData& sigdata) const\n {\n     for (const auto& spk_man_pair : m_spk_managers) {\n         if (spk_man_pair.second->CanProvide(script, sigdata)) {\n-            return spk_man_pair.second->GetSigningProvider(script);\n+            return spk_man_pair.second->GetSolvingProvider(script);\n         }\n     }\n     return nullptr;"
      },
      {
        "sha": "c2edcce908f5bf72e1b29ea901488e7d887023fc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2bd919cfd65ee79a9a0e2691980580d8e7404c1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
        "patch": "@@ -1178,8 +1178,8 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     ScriptPubKeyMan* GetScriptPubKeyMan(const uint256& id) const;\n \n     //! Get the SigningProvider for a script\n-    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const;\n-    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script, SignatureData& sigdata) const;\n+    std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script) const;\n+    std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script, SignatureData& sigdata) const;\n \n     //! Get the LegacyScriptPubKeyMan which is used for all types, internal, and external.\n     LegacyScriptPubKeyMan* GetLegacyScriptPubKeyMan() const;"
      }
    ]
  },
  {
    "sha": "5cab890b915fd9f25cada7ddab7cc00eea22c80b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2FiODkwYjkxNWZkOWYyNWNhZGE3ZGRhYjdjYzAwZWVhMjJjODBi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-12T00:24:14Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-21T17:19:00Z"
      },
      "message": "Clear any input_errors for an input after it is signed\n\nMake sure that there are no errors set for an input after it is signed.\nThis is useful for when there are multiple ScriptPubKeyMans. Some may\nfail to sign, but one may be able to sign, and after it does, we don't\nwant there to be any more errors there.",
      "tree": {
        "sha": "f4dbd216c236f185584e4402bb7959ca836034d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4dbd216c236f185584e4402bb7959ca836034d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cab890b915fd9f25cada7ddab7cc00eea22c80b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cab890b915fd9f25cada7ddab7cc00eea22c80b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cab890b915fd9f25cada7ddab7cc00eea22c80b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cab890b915fd9f25cada7ddab7cc00eea22c80b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2bd919cfd65ee79a9a0e2691980580d8e7404c1"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe8292fe5762f7fb64e3a704d2bf098262d7f4b8",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cab890b915fd9f25cada7ddab7cc00eea22c80b/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cab890b915fd9f25cada7ddab7cc00eea22c80b/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=5cab890b915fd9f25cada7ddab7cc00eea22c80b",
        "patch": "@@ -509,6 +509,9 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n             } else {\n                 input_errors[i] = ScriptErrorString(serror);\n             }\n+        } else {\n+            // If this input succeeds, make sure there is no error set for it\n+            input_errors.erase(i);\n         }\n     }\n     return input_errors.empty();"
      }
    ]
  },
  {
    "sha": "7061c2c5c980258254200c8f102cc5db9b974067",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDYxYzJjNWM5ODAyNTgyNTQyMDBjOGYxMDJjYzVkYjliOTc0MDY3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-02-24T16:06:21Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-02-24T16:32:52Z"
      },
      "message": "[rpc] refactor: consolidate sendmany and sendtoaddress code\n\nThe only new behavior is some error codes are changed from -4 to -6.",
      "tree": {
        "sha": "834f9be416189aa0c73a36b550ea0742d321db7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/834f9be416189aa0c73a36b550ea0742d321db7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7061c2c5c980258254200c8f102cc5db9b974067",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl5T+rUACgkQV/+b28ww\nEAlO3g//ZBllvxjTEu68FsnRV2q+jokqK5Dx5iUqHhStBlwsLrWYy2yeouKNfcql\n14PYDMuOBBfWzxxFygmMt5Kc/EEOg4vRWlSv21qi63Q0xpMCoi9h0eNCOCx2izV/\nU9xsTOrSGzSZAE3ufPYZ6yR7U81FYwmVvNDwmkwcXkCID/6UdUdhIw/qdmjGpXr/\nOJ9di1Kk9rQmoOSllYnFCPbzgbk0518fxGhs4mwsiDhlo1NS6iKz43W9XLCKPOnN\nd+m5aEOkQKZUxm44Fyvl1xHW4BLJmIqC950SnbwPAJaEd0aZZ4yfL2CbtSYV7HC7\nkWPWDHBW90UTapjSeSH+55IHujabjALaQuBdCKzRPqedTii0jS274boxH//wyeNS\nkHd7yzuJK9tN1DGcZn1qYHaHRxfgbN2BWlFF7Miz5wQ+u0s9tYNsBdFZt1+ChAbU\nIV2PF+RjBmbGMRbN3xsNY5l3PBseH2m6HC1/4lWwkC6PbQ64RgyQsE2QswilqO2e\naAAUki2E7NSUu4TQU5iRVYvvn8yhBONyTUkvI29Qp1nzu9em4AfYqGjSflqf4JvE\n1PCQqPlCUeK/mbA2gmJ7fKhgOPTs72favU+95qspeF3DhjyDXSOW3FUjVKtEHlxL\nWMBAJu+f9PRkol8APZtDNbQob4UPrgw0+yfigZMrW8MU6duC8zo=\n=vZ2E\n-----END PGP SIGNATURE-----",
        "payload": "tree 834f9be416189aa0c73a36b550ea0742d321db7a\nparent 5cab890b915fd9f25cada7ddab7cc00eea22c80b\nauthor Sjors Provoost <sjors@sprovoost.nl> 1582560381 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1582561972 +0100\n\n[rpc] refactor: consolidate sendmany and sendtoaddress code\n\nThe only new behavior is some error codes are changed from -4 to -6.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7061c2c5c980258254200c8f102cc5db9b974067",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7061c2c5c980258254200c8f102cc5db9b974067",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7061c2c5c980258254200c8f102cc5db9b974067/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cab890b915fd9f25cada7ddab7cc00eea22c80b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cab890b915fd9f25cada7ddab7cc00eea22c80b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cab890b915fd9f25cada7ddab7cc00eea22c80b"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 58,
      "deletions": 82
    },
    "files": [
      {
        "sha": "04e77d5d9d45223aab06a5aa9f670d2a9400dd79",
        "filename": "doc/release-notes-18198.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7061c2c5c980258254200c8f102cc5db9b974067/doc/release-notes-18198.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7061c2c5c980258254200c8f102cc5db9b974067/doc/release-notes-18198.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-18198.md?ref=7061c2c5c980258254200c8f102cc5db9b974067",
        "patch": "@@ -0,0 +1,8 @@\n+Low-level RPC Changes\n+---------------------\n+\n+- To make RPC `sendtoaddress` more consisent with `sendmany` the following error\n+    `sendtoaddress` codes were changed from `-4` to `-6`:\n+  - Insufficient funds\n+  - Fee estimation failed\n+  - Transaction has too long of a mempool chain"
      },
      {
        "sha": "53e757cf1d8948aa024f8746b2bad541e2bb2709",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 79,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7061c2c5c980258254200c8f102cc5db9b974067/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7061c2c5c980258254200c8f102cc5db9b974067/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7061c2c5c980258254200c8f102cc5db9b974067",
        "patch": "@@ -325,36 +325,53 @@ static UniValue setlabel(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-\n-static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue)\n+UniValue SendMoney(interfaces::Chain::Lock& locked_chain, CWallet * const pwallet, CCoinControl coin_control, UniValue& address_amounts, mapValue_t mapValue, UniValue& subtractFeeFromAmount)\n {\n-    CAmount curBalance = pwallet->GetBalance(0, coin_control.m_avoid_address_reuse).m_mine_trusted;\n+    std::set<CTxDestination> destinations;\n+    std::vector<CRecipient> vecSend;\n+    for (const std::string& address: address_amounts.getKeys()) {\n+        CTxDestination dest = DecodeDestination(address);\n+        if (!IsValidDestination(dest)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(\"Invalid Bitcoin address: \") + address);\n+        }\n \n-    // Check amount\n-    if (nValue <= 0)\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+        if (destinations.count(dest)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated address: \") + address);\n+        }\n+        destinations.insert(dest);\n \n-    if (nValue > curBalance)\n-        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+        CScript scriptPubKey = GetScriptForDestination(dest);\n+        CAmount nAmount = AmountFromValue(address_amounts[address]);\n+        if (nAmount <= 0)\n+            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n \n-    // Parse Bitcoin address\n-    CScript scriptPubKey = GetScriptForDestination(address);\n+        bool fSubtractFeeFromAmount = false;\n+        for (unsigned int idx = 0; idx < subtractFeeFromAmount.size(); idx++) {\n+            const UniValue& addr = subtractFeeFromAmount[idx];\n+            if (addr.get_str() == address)\n+                fSubtractFeeFromAmount = true;\n+        }\n \n-    // Create and send the transaction\n-    CAmount nFeeRequired;\n-    std::string strError;\n-    std::vector<CRecipient> vecSend;\n+        CRecipient recipient = {scriptPubKey, nAmount, fSubtractFeeFromAmount};\n+        vecSend.push_back(recipient);\n+    }\n+\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    // Shuffle recipient list\n+    std::shuffle(vecSend.begin(), vecSend.end(), FastRandomContext());\n+\n+    // Send\n+    CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n-    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n-    vecSend.push_back(recipient);\n+    std::string strFailReason;\n     CTransactionRef tx;\n-    if (!pwallet->CreateTransaction(locked_chain, vecSend, tx, nFeeRequired, nChangePosRet, strError, coin_control)) {\n-        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > curBalance)\n-            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n-        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    bool fCreated = pwallet->CreateTransaction(locked_chain, vecSend, tx, nFeeRequired, nChangePosRet, strFailReason, coin_control, !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    if (!fCreated) {\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     }\n     pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */);\n-    return tx;\n+    return tx->GetHash().GetHex();\n }\n \n static UniValue sendtoaddress(const JSONRPCRequest& request)\n@@ -406,16 +423,6 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n-    if (!IsValidDestination(dest)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n-    }\n-\n-    // Amount\n-    CAmount nAmount = AmountFromValue(request.params[1]);\n-    if (nAmount <= 0)\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n-\n     // Wallet comments\n     mapValue_t mapValue;\n     if (!request.params[2].isNull() && !request.params[2].get_str().empty())\n@@ -449,8 +456,14 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    CTransactionRef tx = SendMoney(*locked_chain, pwallet, dest, nAmount, fSubtractFeeFromAmount, coin_control, std::move(mapValue));\n-    return tx->GetHash().GetHex();\n+    UniValue address_amounts(UniValue::VOBJ);\n+    const std::string address = request.params[0].get_str();\n+    address_amounts.pushKV(address, request.params[1]);\n+    UniValue subtractFeeFromAmount(UniValue::VARR);\n+    if (fSubtractFeeFromAmount) {\n+        subtractFeeFromAmount.push_back(address);\n+    }\n+    return SendMoney(*locked_chain, pwallet, coin_control, address_amounts, mapValue, subtractFeeFromAmount);\n }\n \n static UniValue listaddressgroupings(const JSONRPCRequest& request)\n@@ -884,52 +897,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         }\n     }\n \n-    std::set<CTxDestination> destinations;\n-    std::vector<CRecipient> vecSend;\n-\n-    std::vector<std::string> keys = sendTo.getKeys();\n-    for (const std::string& name_ : keys) {\n-        CTxDestination dest = DecodeDestination(name_);\n-        if (!IsValidDestination(dest)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(\"Invalid Bitcoin address: \") + name_);\n-        }\n-\n-        if (destinations.count(dest)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated address: \") + name_);\n-        }\n-        destinations.insert(dest);\n-\n-        CScript scriptPubKey = GetScriptForDestination(dest);\n-        CAmount nAmount = AmountFromValue(sendTo[name_]);\n-        if (nAmount <= 0)\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n-\n-        bool fSubtractFeeFromAmount = false;\n-        for (unsigned int idx = 0; idx < subtractFeeFromAmount.size(); idx++) {\n-            const UniValue& addr = subtractFeeFromAmount[idx];\n-            if (addr.get_str() == name_)\n-                fSubtractFeeFromAmount = true;\n-        }\n-\n-        CRecipient recipient = {scriptPubKey, nAmount, fSubtractFeeFromAmount};\n-        vecSend.push_back(recipient);\n-    }\n-\n-    EnsureWalletIsUnlocked(pwallet);\n-\n-    // Shuffle recipient list\n-    std::shuffle(vecSend.begin(), vecSend.end(), FastRandomContext());\n-\n-    // Send\n-    CAmount nFeeRequired = 0;\n-    int nChangePosRet = -1;\n-    std::string strFailReason;\n-    CTransactionRef tx;\n-    bool fCreated = pwallet->CreateTransaction(*locked_chain, vecSend, tx, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n-    if (!fCreated)\n-        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n-    pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */);\n-    return tx->GetHash().GetHex();\n+    return SendMoney(*locked_chain, pwallet, coin_control, sendTo, mapValue, subtractFeeFromAmount);\n }\n \n static UniValue addmultisigaddress(const JSONRPCRequest& request)"
      },
      {
        "sha": "bc621255432b3452db96ac8fce425cc9725cd613",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7061c2c5c980258254200c8f102cc5db9b974067/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7061c2c5c980258254200c8f102cc5db9b974067/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=7061c2c5c980258254200c8f102cc5db9b974067",
        "patch": "@@ -119,7 +119,7 @@ def run_test(self):\n         assert_raises_rpc_error(-8, \"Invalid parameter, expected locked output\", self.nodes[2].lockunspent, True, [unspent_0])\n         self.nodes[2].lockunspent(False, [unspent_0])\n         assert_raises_rpc_error(-8, \"Invalid parameter, output already locked\", self.nodes[2].lockunspent, False, [unspent_0])\n-        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n+        assert_raises_rpc_error(-6, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n         assert_equal([unspent_0], self.nodes[2].listlockunspent())\n         self.nodes[2].lockunspent(True, [unspent_0])\n         assert_equal(len(self.nodes[2].listlockunspent()), 0)\n@@ -471,7 +471,7 @@ def run_test(self):\n \n         node0_balance = self.nodes[0].getbalance()\n         # With walletrejectlongchains we will not create the tx and store it in our wallet.\n-        assert_raises_rpc_error(-4, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))\n+        assert_raises_rpc_error(-6, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))\n \n         # Verify nothing new in wallet\n         assert_equal(total_txs, len(self.nodes[0].listtransactions(\"*\", 99999)))"
      },
      {
        "sha": "dbf853b35c9787d1090e0cc5a6b176884e6cc94b",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7061c2c5c980258254200c8f102cc5db9b974067/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7061c2c5c980258254200c8f102cc5db9b974067/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=7061c2c5c980258254200c8f102cc5db9b974067",
        "patch": "@@ -22,7 +22,7 @@ def run_test(self):\n \n         # test sending a tx with disabled fallback fee (must fail)\n         self.restart_node(0, extra_args=[\"-fallbackfee=0\"])\n-        assert_raises_rpc_error(-4, \"Fee estimation failed\", lambda: self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1))\n+        assert_raises_rpc_error(-6, \"Fee estimation failed\", lambda: self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1))\n         assert_raises_rpc_error(-4, \"Fee estimation failed\", lambda: self.nodes[0].fundrawtransaction(self.nodes[0].createrawtransaction([], {self.nodes[0].getnewaddress(): 1})))\n         assert_raises_rpc_error(-6, \"Fee estimation failed\", lambda: self.nodes[0].sendmany(\"\", {self.nodes[0].getnewaddress(): 1}))\n "
      }
    ]
  },
  {
    "sha": "7421500a567ed971268a075b0b1ac31e8bc70652",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDIxNTAwYTU2N2VkOTcxMjY4YTA3NWIwYjFhYzMxZThiYzcwNjUy",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-02-24T16:17:36Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-02-24T16:32:53Z"
      },
      "message": "[rpc] sendmany, sendtoaddress: PSBT for wallets without privkeys\n\nIn addition we check to see if the PSBT is complete, in preperation for a ScriptPubKeyMan that can use an external signer.\n\nPSBT for sendtoaddress",
      "tree": {
        "sha": "4e3009d525d982b3c8c3a90b17d047832bf841ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e3009d525d982b3c8c3a90b17d047832bf841ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7421500a567ed971268a075b0b1ac31e8bc70652",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl5T+rUACgkQV/+b28ww\nEAmTwQ//ebjVySjR+DpO/cYL23oqAOe80Gt5B8p/vAmfng/kZTuSJYvuv2ZpGFqB\nf40L0tteMDiH8aD0gPLapqk7m+WfUhMU5afHUbvtid3TfqcR6wryUkpxQ3kn4SDZ\nz8Fu6B9FIoMKQDrJfbawhwj08/ywWhbKMmcdKErowEEgsoWKsSjFCZmnKumwQdHq\ntfGUha1LnhdnfGXRUHJEIMubNjeo3g45V8UH0IkNhqLjjRmMSkWdUZ8+Kl/4NarG\ngqRGLaf0UwD2GpaLfYD7Q2ZiqSghw1DbOpe6CLk58qaerfweNMWPZhiNVXLQ4zFX\nd3Oy4TkuJsvkB3MGss9Wn/AdJleeKplPP2fbBavdA9EOtzJKxw7pTYoJHrzsy/i/\nwy+cK5mKgkKzWx5lu1yLAq6GuuKG+RvICvmf3pKa/zhXxZBd4qkKWLv+XPwX4Xa/\nKDrrULXadY4S7XWklFp7S/ty6xZCI8X0XgPN4ewvI9XdKPaJCZYYf1RV/QJ8Zj0y\nJJOl1fA33NJy6hmhdBdMnWGcnb3Zns5lKi9Cp4A5vG/HaFHJ1mup9ISYO5NIJN49\ny0SrPggiLIzy6s8l6fiQ7Tx41jvgC0tmzMGo/5f9UyuUHLiBAnHhJffHMtq6CCKi\n3GZsaD7A49Ne2vCn3oIox+Rg74JplikcenTwkUIZ+kEmu1ih400=\n=0Gry\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e3009d525d982b3c8c3a90b17d047832bf841ce\nparent 7061c2c5c980258254200c8f102cc5db9b974067\nauthor Sjors Provoost <sjors@sprovoost.nl> 1582561056 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1582561973 +0100\n\n[rpc] sendmany, sendtoaddress: PSBT for wallets without privkeys\n\nIn addition we check to see if the PSBT is complete, in preperation for a ScriptPubKeyMan that can use an external signer.\n\nPSBT for sendtoaddress\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7421500a567ed971268a075b0b1ac31e8bc70652",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7421500a567ed971268a075b0b1ac31e8bc70652",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7421500a567ed971268a075b0b1ac31e8bc70652/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7061c2c5c980258254200c8f102cc5db9b974067",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7061c2c5c980258254200c8f102cc5db9b974067",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7061c2c5c980258254200c8f102cc5db9b974067"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 56,
      "deletions": 5
    },
    "files": [
      {
        "sha": "06131bcc9747d396b051d165a58d74b0c5930657",
        "filename": "doc/release-notes-18198.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7421500a567ed971268a075b0b1ac31e8bc70652/doc/release-notes-18198.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7421500a567ed971268a075b0b1ac31e8bc70652/doc/release-notes-18198.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-18198.md?ref=7421500a567ed971268a075b0b1ac31e8bc70652",
        "patch": "@@ -6,3 +6,5 @@ Low-level RPC Changes\n   - Insufficient funds\n   - Fee estimation failed\n   - Transaction has too long of a mempool chain\n+\n+- RPC `sendmany` and  `sendtoaddress` now return a PSBT for wallets that have private keys disabled."
      },
      {
        "sha": "c6350f0ac1ecab433911ad8c313a8fd35c896703",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 3,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7421500a567ed971268a075b0b1ac31e8bc70652/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7421500a567ed971268a075b0b1ac31e8bc70652/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7421500a567ed971268a075b0b1ac31e8bc70652",
        "patch": "@@ -370,8 +370,33 @@ UniValue SendMoney(interfaces::Chain::Lock& locked_chain, CWallet * const pwalle\n     if (!fCreated) {\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     }\n-    pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */);\n-    return tx->GetHash().GetHex();\n+    if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */);\n+        return tx->GetHash().GetHex();\n+    } else {\n+        CMutableTransaction mtx(*tx);\n+        PartiallySignedTransaction psbtx(mtx);\n+        bool dummy_complete;\n+        const TransactionError err = pwallet->FillPSBT(psbtx, dummy_complete, SIGHASH_ALL, true, true);\n+        if (err != TransactionError::OK) {\n+            throw JSONRPCTransactionError(err);\n+        }\n+        // Future ScriptPubKeyMans may be able to sign for wallets without private keys\n+        bool complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+        if (complete) {\n+            tx = MakeTransactionRef(mtx);\n+            pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */);\n+            return tx->GetHash().GetHex();\n+        } else {\n+            UniValue result(UniValue::VOBJ);\n+            CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+            ssTx << psbtx;\n+            std::string result_str = EncodeBase64(ssTx.str());\n+            result.pushKV(\"psbt\", result_str);\n+            result.pushKV(\"complete\", complete);\n+            return result;\n+        }\n+    }\n }\n \n static UniValue sendtoaddress(const JSONRPCRequest& request)\n@@ -407,6 +432,9 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"\\\"txid\\\"                  (string) The transaction id.\\n\"\n+            \"{\\n\"\n+            \"  \\\"psbt\\\":    \\\"psbt\\\"     (string) The base64-encoded unsigned PSBT of the new transaction. Only returned when wallet private keys are disabled.\\n\"\n+            \"}\\n\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1\")\n@@ -454,6 +482,10 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n     // We also enable partial spend avoidance if reuse avoidance is set.\n     coin_control.m_avoid_partial_spends |= coin_control.m_avoid_address_reuse;\n \n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        coin_control.fAllowWatchOnly = true;\n+    }\n+\n     EnsureWalletIsUnlocked(pwallet);\n \n     UniValue address_amounts(UniValue::VOBJ);\n@@ -849,6 +881,9 @@ static UniValue sendmany(const JSONRPCRequest& request)\n                  RPCResult{\n             \"\\\"txid\\\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n             \"                                    the number of addresses.\\n\"\n+            \"{\\n\"\n+            \"  \\\"psbt\\\":    \\\"psbt\\\"      (string) The base64-encoded unsigned PSBT of the new transaction. Only returned when wallet private keys are disabled.\\n\"\n+            \"}\\n\"\n                  },\n                 RPCExamples{\n             \"\\nSend two amounts to two different addresses:\\n\"\n@@ -896,7 +931,9 @@ static UniValue sendmany(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n         }\n     }\n-\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        coin_control.fAllowWatchOnly = true;\n+    }\n     return SendMoney(*locked_chain, pwallet, coin_control, sendTo, mapValue, subtractFeeFromAmount);\n }\n "
      },
      {
        "sha": "7ddb9d24317eff234dcdf4e6e90e7b4a4f60e273",
        "filename": "test/functional/wallet_watchonly.py",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7421500a567ed971268a075b0b1ac31e8bc70652/test/functional/wallet_watchonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7421500a567ed971268a075b0b1ac31e8bc70652/test/functional/wallet_watchonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_watchonly.py?ref=7421500a567ed971268a075b0b1ac31e8bc70652",
        "patch": "@@ -28,13 +28,17 @@ def run_test(self):\n \n         a1 = def_wallet.getnewaddress()\n         wo_change = def_wallet.getnewaddress()\n+        wo_change2 = def_wallet.getnewaddress()\n         wo_addr = def_wallet.getnewaddress()\n \n         self.nodes[0].createwallet(wallet_name='wo', disable_private_keys=True)\n         wo_wallet = node.get_wallet_rpc('wo')\n \n-        wo_wallet.importpubkey(pubkey=def_wallet.getaddressinfo(wo_addr)['pubkey'])\n-        wo_wallet.importpubkey(pubkey=def_wallet.getaddressinfo(wo_change)['pubkey'])\n+        wo_wallet.importmulti([\n+            {\"desc\": def_wallet.getaddressinfo(wo_addr)['desc'], \"timestamp\": \"now\", \"keypool\": True},\n+            {\"desc\": def_wallet.getaddressinfo(wo_change)['desc'], \"timestamp\": \"now\", \"keypool\": True, \"internal\": True},\n+            {\"desc\": def_wallet.getaddressinfo(wo_change2)['desc'], \"timestamp\": \"now\", \"keypool\": True, \"internal\": True}\n+        ])\n \n         # generate some btc for testing\n         node.generatetoaddress(101, a1)\n@@ -94,6 +98,14 @@ def run_test(self):\n         assert_equal(\"psbt\" in result, True)\n         assert_raises_rpc_error(-4, \"Insufficient funds\", wo_wallet.walletcreatefundedpsbt, inputs, outputs, 0, no_wo_options)\n \n+        self.log.info('Testing sendmany watch-only')\n+        result = wo_wallet.sendmany(dummy=\"\", amounts=outputs[0])\n+        assert_equal(\"psbt\" in result, True)\n+\n+        self.log.info('Testing sendtoaddress watch-only')\n+        result = wo_wallet.sendtoaddress(a1, 0.5)\n+        assert_equal(\"psbt\" in result, True)\n+\n         self.log.info('Testing fundrawtransaction watch-only defaults')\n         rawtx = wo_wallet.createrawtransaction(inputs=inputs, outputs=outputs)\n         result = wo_wallet.fundrawtransaction(hexstring=rawtx, options=options)"
      }
    ]
  }
]