DrahtBot,2018-09-25T17:01:56Z,"<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14531 (Replace fs::relative call with custom GetRelativePath by promag)\n* #11911 (Free BerkeleyEnvironment instances when not in use by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that shou",https://github.com/bitcoin/bitcoin/pull/14320#issuecomment-424423106,424423106,
MarcoFalke,2018-09-27T16:20:23Z,Is this for backport?,https://github.com/bitcoin/bitcoin/pull/14320#issuecomment-425155025,425155025,
ryanofsky,2018-09-27T16:35:43Z,"> Is this for backport?\n\nCould be backported, but I think the benefit would be very minimal. I think you have to literally copy a wallet database file and use the `loadwallet` RPC in order to trigger the missing error check that this PR restores.",https://github.com/bitcoin/bitcoin/pull/14320#issuecomment-425159822,425159822,
DrahtBot,2018-09-28T03:33:33Z,<!--32850dd3fdea838b4049e64f46995ea2-->\n| Coverage  | Change ([pull 14320](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/14320/total.coverage/index.html)) | Reference ([master](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/index.html))   |\n|-----------|-------------------------|--------------------|\n| Lines     | +0.0019 %            | 87.0361 %,https://github.com/bitcoin/bitcoin/pull/14320#issuecomment-425310592,425310592,
ken2812221,2018-10-21T07:47:48Z,Rebased,https://github.com/bitcoin/bitcoin/pull/14320#issuecomment-431646954,431646954,
ken2812221,2018-10-24T07:13:49Z,Just split appveyor part to #14559 to make this PR easier to review.,https://github.com/bitcoin/bitcoin/pull/14320#issuecomment-432540256,432540256,
ken2812221,2018-10-24T15:13:43Z,"ef16fc5 -> 4ea7732\n1. Rename BerkeleyFileid -> WalletDatabaseFileId (@promag)\n2. Added @ryanofsky's comments",https://github.com/bitcoin/bitcoin/pull/14320#issuecomment-432700770,432700770,
promag,2018-10-24T15:32:21Z,"Tested ACK 4ea7732, new test fails without this fix.",https://github.com/bitcoin/bitcoin/pull/14320#issuecomment-432707886,432707886,
laanwj,2018-10-24T15:37:15Z,utACK 6241eb3224d95ea04c04dcab2dac88687f49440e,https://github.com/bitcoin/bitcoin/pull/14320#issuecomment-432709742,432709742,
ryanofsky,2018-09-25T15:32:43Z,"I think it'd be more correct to add a `std::unordered_map<std::string, BerkeleyFileid> m_fileids` member in `BerkeleyEnvironment` member instead of a `g_fileids` global because there can be duplicate filenames if the files are in different directories.\n\nAlso, making this a member would be consistent with existing `mapFileUseCount` `mapDb` members there which are also maps indexed by filename. ",https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220243205,220243205,src/wallet/db.cpp
ken2812221,2018-09-25T16:38:29Z,Updated,https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220267509,220267509,src/wallet/db.cpp
promag,2018-09-25T17:10:26Z,move `memcmp` to `BerkeleyFileid::operator==`?,https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220277755,220277755,src/wallet/db.cpp
ryanofsky,2018-09-25T17:45:51Z,"Since `CheckUniqueFileid` is called on all `BerkeleyEnvironment` instances, this will incorrectly add the filename to unrelated BerkeleyEnvironment instances that don't actually contain `filename`. I'd suggest dropping this line, adding a `BerkeleyFileid& fileid` output parameter to `CheckUniqueFileid`, and passing in `this->env->m_fileids[strFilename]` where `CheckUniqueFileid` is called in `Berk",https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220290148,220290148,src/wallet/db.cpp
ryanofsky,2018-09-25T17:53:54Z,"In commit ""util: Fix broken Windows file lock""\n\nCan you describe how the lock is broken in the commit message?",https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220293029,220293029,src/fs.cpp
ken2812221,2018-09-25T19:42:04Z,"That was introduced by #13862. I assume that it could work with length 0 if it is a exclusive lock, but it doesn't. I would have to specify -1, -1 to make it work.\n\nThe boost implementation:\n\nhttps://github.com/boostorg/interprocess/blob/8b3621353017aa527a22124655c9458d0b64b358/include/boost/interprocess/detail/os_file_functions.hpp#L230-L243",https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220328915,220328915,src/fs.cpp
ken2812221,2018-09-25T19:52:49Z,"Note that if two or more BerkeleyDatabase share the same BerkeleyEnvironment, the `env` would be a wild pointer after the first call.",https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220332273,220332273,src/wallet/db.cpp
ryanofsky,2018-09-25T20:10:50Z,I think you could restore `auto& env` to `const auto& env` here.,https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220337687,220337687,src/wallet/db.cpp
ryanofsky,2018-09-25T20:19:08Z,"I think `item.first != filename` condition makes the check too loose again because the same filename can exist in different directories (and we'd expect pretty much all wallet directories to have a `wallet.dat` file).\n\nPerhaps change condition to: `if (item.second == fileid && !(&item.second == &fileid))`\n",https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220340144,220340144,src/wallet/db.cpp
ryanofsky,2018-09-25T20:20:39Z,"It might be safer if memcmp compared just the value field rather than the whole object, since it seems possible the compiler could pad the objects. Maybe:\n\n```\nreturn memcmp(this->field, b.field, sizeof(this->field)) == 0;\n```",https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220340609,220340609,src/wallet/db.cpp
ryanofsky,2018-09-25T20:25:44Z,"Good catch. This appears to be a bug introduced in 0b82bac76d0f842bd2294a290388536951fbc576 from #13111 and then tweaked in a769461d5e37ddcb771ae836254fdc69177a28c4 in #12493. It seems not directly related to this issue, so probably best addressed separately.",https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220342404,220342404,src/wallet/db.cpp
ken2812221,2018-09-25T20:31:47Z,done,https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220344442,220344442,src/wallet/db.cpp
ken2812221,2018-09-25T20:32:06Z,done,https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220344539,220344539,src/wallet/db.cpp
ryanofsky,2018-09-26T06:22:55Z,"Why not call `m_fileds.erase` if `shutdown` is true? It seems ok to only erase if `shutdown` is false, but if there is a specific reason for not erasing when shutting down, it would be useful to note in a code comment.",https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220437861,220437861,src/wallet/db.cpp
ken2812221,2018-09-26T06:32:50Z,"That would cause an access violation on Windows since it's a wild pointer in the second call. Also, since the env is deleted when `g_dbenvs.erase` called, the map doesn't exist anymore.",https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220439572,220439572,src/wallet/db.cpp
ryanofsky,2018-10-22T21:11:28Z,"Note: It looks os.path.join change is not directly related to this PR, but is just a fix for listwalletdir (added in #14291) on windows.",https://github.com/bitcoin/bitcoin/pull/14320#discussion_r227140002,227140002,test/functional/wallet_multiwallet.py
ryanofsky,2018-10-22T21:12:34Z,"> 'w7', 'w7'\n\nCode precedes this PR, but I think listing w7 twice has no effect.",https://github.com/bitcoin/bitcoin/pull/14320#discussion_r227140322,227140322,test/functional/wallet_multiwallet.py
promag,2018-10-22T22:14:08Z,This is changed in #14531.,https://github.com/bitcoin/bitcoin/pull/14320#discussion_r227157098,227157098,test/functional/wallet_multiwallet.py
promag,2018-10-24T10:40:47Z,Good catch indeed. The bug was not introduced in 0b82bac but in a769461d?,https://github.com/bitcoin/bitcoin/pull/14320#discussion_r227735179,227735179,src/wallet/db.cpp
ryanofsky,2018-10-24T14:23:53Z,"It might not be clear what ""wild pointers"" refers to in this todo (laanwj asked about it here: https://github.com/bitcoin/bitcoin/pull/14531#discussion_r227770685). Wild pointers could mean either dead pointers or raw pointers, but I think the TODO is referring to the bug described here: https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220332273. Maybe could be expanded as:\n\n```c++\n",https://github.com/bitcoin/bitcoin/pull/14320#discussion_r227811095,227811095,src/wallet/db.cpp
promag,2018-10-24T14:35:11Z,@laanwj suggested `BerkeleyFileId`. I also suggest `WalletDatabaseFileId` or `DBFileId`.,https://github.com/bitcoin/bitcoin/pull/14320#discussion_r227816594,227816594,src/wallet/db.h
ryanofsky,2018-10-24T15:30:35Z,"Thread https://github.com/bitcoin/bitcoin/pull/14320#discussion_r220332273\n\n> Good catch indeed. The bug was not introduced in 0b82bac but in a769461?\n\n0b82bac76d0f842bd2294a290388536951fbc576 added the call to erase the environment too early and a769461d5e37ddcb771ae836254fdc69177a28c4 just moved the call, IIUC.",https://github.com/bitcoin/bitcoin/pull/14320#discussion_r227842330,227842330,src/wallet/db.cpp
