[
  {
    "sha": "5400ef6bcb9d243b2b21697775aa6491115420f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDAwZWY2YmNiOWQyNDNiMmIyMTY5Nzc3NWFhNjQ5MTExNTQyMGYz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-04-08T18:20:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-11T21:20:38Z"
      },
      "message": "Replace trickle nodes with per-node/message Poisson delays\n\nWe used to have a trickle node, a node which was chosen in each iteration of\nthe send loop that was privileged and allowed to send out queued up non-time\ncritical messages. Since the removal of the fixed sleeps in the network code,\nthis resulted in fast and attackable treatment of such broadcasts.\n\nThis pull request changes the 3 remaining trickle use cases by random delays:\n* Local address broadcast (while also removing the the wiping of the seen filter)\n* Address relay\n* Inv relay (for transactions; blocks are always relayed immediately)\n\nThe code is based on older commits by Patrick Strateman.",
      "tree": {
        "sha": "bb8bb37f0db1e2a48318f64fb42de0a95d5f997b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb8bb37f0db1e2a48318f64fb42de0a95d5f997b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5400ef6bcb9d243b2b21697775aa6491115420f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5400ef6bcb9d243b2b21697775aa6491115420f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5400ef6bcb9d243b2b21697775aa6491115420f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5400ef6bcb9d243b2b21697775aa6491115420f3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ee02cf564d1ce79d2981899cb4d38c914210dc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ee02cf564d1ce79d2981899cb4d38c914210dc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ee02cf564d1ce79d2981899cb4d38c914210dc7"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 47,
      "deletions": 36
    },
    "files": [
      {
        "sha": "41fc0b80989ab87770d63e07cc3ea0d880750959",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 20,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5400ef6bcb9d243b2b21697775aa6491115420f3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5400ef6bcb9d243b2b21697775aa6491115420f3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5400ef6bcb9d243b2b21697775aa6491115420f3",
        "patch": "@@ -5326,7 +5326,7 @@ bool ProcessMessages(CNode* pfrom)\n }\n \n \n-bool SendMessages(CNode* pto, bool fSendTrickle)\n+bool SendMessages(CNode* pto)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {\n@@ -5368,28 +5368,17 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             return true;\n \n         // Address refresh broadcast\n-        static int64_t nLastRebroadcast;\n-        if (!IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60))\n-        {\n-            LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n-            {\n-                // Periodically clear addrKnown to allow refresh broadcasts\n-                if (nLastRebroadcast)\n-                    pnode->addrKnown.reset();\n-\n-                // Rebroadcast our address\n-                AdvertizeLocal(pnode);\n-            }\n-            if (!vNodes.empty())\n-                nLastRebroadcast = GetTime();\n+        int64_t nNow = GetTimeMicros();\n+        if (!IsInitialBlockDownload() && pto->nNextLocalAddrSend < nNow) {\n+            AdvertizeLocal(pto);\n+            pto->nNextLocalAddrSend = PoissonNextSend(nNow, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n         }\n \n         //\n         // Message: addr\n         //\n-        if (fSendTrickle)\n-        {\n+        if (pto->nNextAddrSend < nNow) {\n+            pto->nNextAddrSend = PoissonNextSend(nNow, AVG_ADDRESS_BROADCAST_INTERVAL);\n             vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());\n             BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n@@ -5563,8 +5552,13 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         vector<CInv> vInv;\n         vector<CInv> vInvWait;\n         {\n+            bool fSendTrickle = pto->fWhitelisted;\n+            if (pto->nNextInvSend < nNow) {\n+                fSendTrickle = true;\n+                pto->nNextInvSend = PoissonNextSend(nNow, AVG_INVENTORY_BROADCAST_INTERVAL);\n+            }\n             LOCK(pto->cs_inventory);\n-            vInv.reserve(pto->vInventoryToSend.size());\n+            vInv.reserve(std::min<size_t>(1000, pto->vInventoryToSend.size()));\n             vInvWait.reserve(pto->vInventoryToSend.size());\n             BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n             {\n@@ -5604,7 +5598,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             pto->PushMessage(NetMsgType::INV, vInv);\n \n         // Detect whether we're stalling\n-        int64_t nNow = GetTimeMicros();\n+        nNow = GetTimeMicros();\n         if (!pto->fDisconnect && state.nStallingSince && state.nStallingSince < nNow - 1000000 * BLOCK_STALLING_TIMEOUT) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection"
      },
      {
        "sha": "25a006387353d32b0af672c7a4b9cddbcf78fe71",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5400ef6bcb9d243b2b21697775aa6491115420f3/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5400ef6bcb9d243b2b21697775aa6491115420f3/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5400ef6bcb9d243b2b21697775aa6491115420f3",
        "patch": "@@ -87,6 +87,14 @@ static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n+/** Average delay between local address broadcasts in seconds. */\n+static const unsigned int AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24 * 24 * 60;\n+/** Average delay between peer address broadcasts in seconds. */\n+static const unsigned int AVG_ADDRESS_BROADCAST_INTERVAL = 30;\n+/** Average delay between trickled inventory broadcasts in seconds.\n+ *  Blocks, whitelisted receivers, and a random 25% of transactions bypass this. */\n+static const unsigned int AVG_INVENTORY_BROADCAST_INTERVAL = 5;\n+\n static const unsigned int DEFAULT_LIMITFREERELAY = 15;\n static const bool DEFAULT_RELAYPRIORITY = true;\n \n@@ -197,9 +205,8 @@ bool ProcessMessages(CNode* pfrom);\n  * Send queued protocol messages to be sent to a give node.\n  *\n  * @param[in]   pto             The node which we are sending messages to.\n- * @param[in]   fSendTrickle    When true send the trickled data, otherwise trickle the data until true.\n  */\n-bool SendMessages(CNode* pto, bool fSendTrickle);\n+bool SendMessages(CNode* pto);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n /** Try to detect Partition (network isolation) attacks against us */"
      },
      {
        "sha": "e0d96a2dc8fd9a616669338165abdd868f363e7f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5400ef6bcb9d243b2b21697775aa6491115420f3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5400ef6bcb9d243b2b21697775aa6491115420f3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5400ef6bcb9d243b2b21697775aa6491115420f3",
        "patch": "@@ -36,6 +36,8 @@\n #include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n+#include <math.h>\n+\n // Dump addresses to peers.dat every 15 minutes (900s)\n #define DUMP_ADDRESSES_INTERVAL 900\n \n@@ -1733,11 +1735,6 @@ void ThreadMessageHandler()\n             }\n         }\n \n-        // Poll the connected nodes for messages\n-        CNode* pnodeTrickle = NULL;\n-        if (!vNodesCopy.empty())\n-            pnodeTrickle = vNodesCopy[GetRand(vNodesCopy.size())];\n-\n         bool fSleep = true;\n \n         BOOST_FOREACH(CNode* pnode, vNodesCopy)\n@@ -1768,7 +1765,7 @@ void ThreadMessageHandler()\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n                 if (lockSend)\n-                    g_signals.SendMessages(pnode, pnode == pnodeTrickle || pnode->fWhitelisted);\n+                    g_signals.SendMessages(pnode);\n             }\n             boost::this_thread::interruption_point();\n         }\n@@ -2384,6 +2381,9 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     nStartingHeight = -1;\n     filterInventoryKnown.reset();\n     fGetAddr = false;\n+    nNextLocalAddrSend = 0;\n+    nNextAddrSend = 0;\n+    nNextInvSend = 0;\n     fRelayTxes = false;\n     pfilter = new CBloomFilter();\n     nPingNonceSent = 0;\n@@ -2634,3 +2634,7 @@ void DumpBanlist()\n     LogPrint(\"net\", \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n              banmap.size(), GetTimeMillis() - nStart);\n }\n+\n+int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n+    return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n+}"
      },
      {
        "sha": "bc64571aeb9a8ad27ac352fa9370bf41ae38380f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5400ef6bcb9d243b2b21697775aa6491115420f3/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5400ef6bcb9d243b2b21697775aa6491115420f3/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5400ef6bcb9d243b2b21697775aa6491115420f3",
        "patch": "@@ -113,7 +113,7 @@ struct CNodeSignals\n {\n     boost::signals2::signal<int ()> GetHeight;\n     boost::signals2::signal<bool (CNode*), CombinerAll> ProcessMessages;\n-    boost::signals2::signal<bool (CNode*, bool), CombinerAll> SendMessages;\n+    boost::signals2::signal<bool (CNode*), CombinerAll> SendMessages;\n     boost::signals2::signal<void (NodeId, const CNode*)> InitializeNode;\n     boost::signals2::signal<void (NodeId)> FinalizeNode;\n };\n@@ -391,13 +391,16 @@ class CNode\n     CRollingBloomFilter addrKnown;\n     bool fGetAddr;\n     std::set<uint256> setKnown;\n+    int64_t nNextAddrSend;\n+    int64_t nNextLocalAddrSend;\n \n     // inventory based relay\n     CRollingBloomFilter filterInventoryKnown;\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n     std::set<uint256> setAskFor;\n     std::multimap<int64_t, CInv> mapAskFor;\n+    int64_t nNextInvSend;\n     // Used for headers announcements - unfiltered blocks to relay\n     // Also protected by cs_inventory\n     std::vector<uint256> vBlockHashesToAnnounce;\n@@ -791,4 +794,7 @@ class CBanDB\n \n void DumpBanlist();\n \n+/** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n+int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds);\n+\n #endif // BITCOIN_NET_H"
      },
      {
        "sha": "51d296502e47ca1ec88d7deeabdff7f73d761da7",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5400ef6bcb9d243b2b21697775aa6491115420f3/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5400ef6bcb9d243b2b21697775aa6491115420f3/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=5400ef6bcb9d243b2b21697775aa6491115420f3",
        "patch": "@@ -49,19 +49,19 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n-    SendMessages(&dummyNode1, false);\n+    SendMessages(&dummyNode1);\n     BOOST_CHECK(CNode::IsBanned(addr1));\n     BOOST_CHECK(!CNode::IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002));\n     CNode dummyNode2(INVALID_SOCKET, addr2, \"\", true);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2, false);\n+    SendMessages(&dummyNode2);\n     BOOST_CHECK(!CNode::IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(CNode::IsBanned(addr1));  // ... but 1 still should be\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2, false);\n+    SendMessages(&dummyNode2);\n     BOOST_CHECK(CNode::IsBanned(addr2));\n }\n \n@@ -73,13 +73,13 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n-    SendMessages(&dummyNode1, false);\n+    SendMessages(&dummyNode1);\n     BOOST_CHECK(!CNode::IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 10);\n-    SendMessages(&dummyNode1, false);\n+    SendMessages(&dummyNode1);\n     BOOST_CHECK(!CNode::IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 1);\n-    SendMessages(&dummyNode1, false);\n+    SendMessages(&dummyNode1);\n     BOOST_CHECK(CNode::IsBanned(addr1));\n     mapArgs.erase(\"-banscore\");\n }\n@@ -95,7 +95,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.nVersion = 1;\n \n     Misbehaving(dummyNode.GetId(), 100);\n-    SendMessages(&dummyNode, false);\n+    SendMessages(&dummyNode);\n     BOOST_CHECK(CNode::IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60);"
      }
    ]
  }
]