ryanofsky,2018-10-17T15:04:26Z,"This is a nice change, and I think making documentation more structured will make it easier to maintain.\n\nI do think it'd be good to replace `Table`/`Row` methods with explicit `Params` / `Result` methods that make it possible to extract names, types, and structure of parameters. This could be used to generate richer documentation, and support other applications like autocomplete.",https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-430665608,430665608,
karelbilek,2018-10-17T15:56:35Z,"That's a good point.\n\nI used ""Table"" and ""Row"", since there are few more different table types, and also ""Arguments"" and ""Results"" tables are basically the same thing (Arguments have the numbers next to some rows, but only some of them)\n\nThe possible table types, by just grepping the source code:\n\n* Arguments\n* Examples of output descriptors\n* Modes\n* Result\n* Result with verbo",https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-430685804,430685804,
karelbilek,2018-10-17T16:04:59Z,"Of course another level would be to somehow match the actual RPC arguments to the arguments in the table, and to the arguments in the short example in the first line, but that is ... just too complex. :)\n\nGood first step would be to replace `Table(""Arguments"")` with just `Arguments()`, the rows with numbered arguments replace with `Argument()`, add `Result(""classifier"")` as a thing, and ... ye",https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-430688845,430688845,
karelbilek,2018-10-17T16:11:55Z,"~~The fuctional tests seem to be failing for some reason. I will investigate if I get more general concept ACKs :)~~\n\nFinally fixed",https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-430691380,430691380,
ryanofsky,2018-10-17T17:07:19Z,Concept ACK. The functional tests do seem to be passing for me when I try them locally.,https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-430710255,430710255,
meshcollider,2018-10-18T05:11:55Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-430877267,430877267,
DrahtBot,2018-10-20T09:53:32Z,"<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14555 (Move util files to directory by jimpo)\n* #14530 (Use RPCHelpMan to generate RPC doc strings by MarcoFalke)\n* #14481 (Add P2SH-P2WSH support to listunspent RPC by MeshCollider)\n* #14477 (Add ability to convert solvability info to descriptor by sipa)\n* #14468 ([wallet] Deprecate ge",https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-431566415,431566415,
MarcoFalke,2018-10-20T13:32:44Z,"Concept ACK. However, this seems to be a large change that is probably impossible to review without splitting it up in smaller chunks and/or making it a scripted diff.\n\nWhile the change seems to touch every help text, it doesn't yet make it meaningfully easier to actually produce the help text machine-generated. You split out the rpc method name, but then pass all arguments as a single string ",https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-431582466,431582466,
karelbilek,2018-10-23T08:38:38Z,"Thanks for feedback.\n\nad script-diff: I can probably make it script-diffed, it will need some constistency fixed first so the text is parseable, but that can be done as a separate commit. (It is mostly whitespace, missing `:` after ""Arguments"" etc)\n\nad other notes:\n\nYes, this PR lets most of the arguments/""rows"" be as-is, as the various styles seemed too different to me to make consist",https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-432152246,432152246,
karelbilek,2018-10-23T12:58:53Z,"#14530 looks great, I will try to work on top of that",https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-432236176,432236176,
DrahtBot,2018-10-23T22:50:34Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-432449647,432449647,
karelbilek,2018-10-24T12:32:38Z,"Closing this, in support of approach similar to https://github.com/bitcoin/bitcoin/pull/14530 \n\nIt will be harder to rewrite current source code to that, but ultimately will be more helpful.",https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-432636184,432636184,
kallewoof,2018-10-18T07:44:17Z,"Why do you need the `, """"` part? It looks like it does not require it:\n\nhttps://github.com/bitcoin/bitcoin/blob/e60061c524f14df8b9e856ec0b89eb6805baf824/src/rpc/doc.h#L70-L71\n\n(this applies to multiple files/places)",https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226198455,226198455,src/rpc/mining.cpp
karelbilek,2018-10-18T08:15:39Z,I just forgot I made the constructor with just one argument. :),https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226208044,226208044,src/rpc/mining.cpp
practicalswift,2018-10-18T20:30:06Z,"Make sure this matches the parameter naming in:\n\n```\nRPCDoc& RPCDoc::Example(const std::string& code, const std::string& example)\n```\n\nNow it is `(description, code)` vs `(code, example)` :-)",https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226454620,226454620,src/rpc/doc.h
practicalswift,2018-10-18T20:31:16Z,The initialisation here is redundant.,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226454978,226454978,src/rpc/doc.cpp
practicalswift,2018-10-18T20:31:36Z,Could be const reference?,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455081,226455081,src/rpc/doc.cpp
practicalswift,2018-10-18T20:32:12Z,`emplace_back` instead?,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455277,226455277,src/rpc/doc.cpp
practicalswift,2018-10-18T20:32:23Z,`emplace_back` instead?,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455350,226455350,src/rpc/doc.cpp
practicalswift,2018-10-18T20:32:32Z,`emplace_back` instead?,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455394,226455394,src/rpc/doc.cpp
practicalswift,2018-10-18T20:32:40Z,`emplace_back` instead?,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455433,226455433,src/rpc/doc.cpp
practicalswift,2018-10-18T20:32:51Z,`emplace_back` instead?,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455485,226455485,src/rpc/doc.cpp
practicalswift,2018-10-18T20:35:31Z,`RPCDoc` should be derived from `std::exception`?,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226456282,226456282,src/rpc/mining.cpp
practicalswift,2018-10-18T20:42:20Z,Should be `explicit`?,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226458211,226458211,src/rpc/doc.h
practicalswift,2018-10-18T20:42:32Z,Should be `explicit`?,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226458274,226458274,src/rpc/doc.h
practicalswift,2018-10-18T20:42:40Z,Should be `explicit`?,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226458313,226458313,src/rpc/doc.h
practicalswift,2018-10-18T20:42:48Z,Should be `explicit`?,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226458359,226458359,src/rpc/doc.h
practicalswift,2018-10-18T20:45:14Z,Should be const references?,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226459110,226459110,src/rpc/doc.cpp
practicalswift,2018-10-18T20:45:26Z,Should be const reference?,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226459160,226459160,src/rpc/doc.cpp
practicalswift,2018-10-18T20:46:02Z,This function is never used?,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226459360,226459360,src/rpc/doc.cpp
karelbilek,2018-10-19T07:35:33Z,"Hm, not sure if I like it... I like how explicit it is now, so you can either have a RPCDoc object (which could later be used somewhere else too) and then explicitly make exception out of it\n\nAlso I *think* that right now when you throw different exception than runtime_error, bitcoind crashes instead of bitcoin-cli writing out the help. I will look once more to be sure",https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226556435,226556435,src/rpc/mining.cpp
karelbilek,2018-10-19T07:48:48Z,"I have to admit, I don't really understand the difference between emplace_back and push_back\n\nWhat good does it bring here?",https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226559336,226559336,src/rpc/doc.cpp
karelbilek,2018-10-19T07:51:19Z,"...but online wisdom seems to be that emplace_back is faster, because it doesn't create temporary objects, so... ok :)",https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226559920,226559920,src/rpc/doc.cpp
karelbilek,2018-10-19T08:33:20Z,fixed,https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226570627,226570627,src/rpc/doc.h
