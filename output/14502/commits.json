[
  {
    "sha": "635fa2f26691295cb2bd0f231cced76ebe1288a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzVmYTJmMjY2OTEyOTVjYjJiZDBmMjMxY2NlZDc2ZWJlMTI4OGEx",
    "commit": {
      "author": {
        "name": "Karel Bilek",
        "email": "kb@karelbilek.com",
        "date": "2018-10-17T11:07:10Z"
      },
      "committer": {
        "name": "Karel Bilek",
        "email": "kb@karelbilek.com",
        "date": "2018-10-19T10:18:40Z"
      },
      "message": "[rpc] Helper class for RPC help format",
      "tree": {
        "sha": "b3b236cf1d1edac68cf6ee80cd5510a5fad07ffb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3b236cf1d1edac68cf6ee80cd5510a5fad07ffb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/635fa2f26691295cb2bd0f231cced76ebe1288a1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEEB0I5VVMWmCbHjE6cAbGb9s2JHwFAlvJr4kACgkQcAbGb9s2\nJHzjqxAAiNaa9gwpo9LCPScVJhL/WsPxVjHuZQSVX79W6rXwDflyCruTH75wWhQH\nNBNa8Mn+HujSPngJ67rVcBNSlymuCF9KyK2HOyzlX561zNZQjk1SSZX2uWXK4r4o\n+r56BkKINGsl9P/gX3dsW9LNGPWsph2byGa1upmJJ3yB75EKY3Ol93c5mBi/SvFw\nUPDeb0yTcE6Y4YuubtKF5PC3uGMvFbC/a3KdkMsEtbnvds15K8jscpMaycfC2wx5\nKdrq37dBLNThBpgB9KCUga7W4I4xXeZtrvGHJayNQttPSzdA2Zlx9NlBfK5nJc8r\neaxW95CgELOxwAuornsYrxEwRSar0LdeQ4j9tdOLGqcU+AUECkOULNPSIyvsyOUJ\n2qYCg4kyGMPNUuP+VTqqpLEsn69ZiJWTguqMauOO8gh/m0q/A+9lnrqx56Hx0zQS\nC0HniGbAtY9BeyQ5FAhTLAQqg5w9bNqCdIeBpi4mC/Q7yz+2ARgIqKGRBjAwdASX\nrWYHnYr8MENm7LRezhUJ+q4Bm3BZKeKE89z1sP9uAIhv1kQ06C3cF4Xe9iRN3Qz9\nHV3IArrj1t0bczEZqMnEZL/G6HWtrL9x7f8l2WB6cQXHr9m8x8FwdGa+/saMPx4M\nP8TXSHMq5ifKRtKlhBdB2jfMWriomT3rYjaglhPkOr9L8h4vi2E=\n=zX4e\n-----END PGP SIGNATURE-----",
        "payload": "tree b3b236cf1d1edac68cf6ee80cd5510a5fad07ffb\nparent d387507aeca652a5569825af65243536f2ce26ea\nauthor Karel Bilek <kb@karelbilek.com> 1539774430 +0700\ncommitter Karel Bilek <kb@karelbilek.com> 1539944320 +0700\n\n[rpc] Helper class for RPC help format\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/635fa2f26691295cb2bd0f231cced76ebe1288a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/635fa2f26691295cb2bd0f231cced76ebe1288a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/635fa2f26691295cb2bd0f231cced76ebe1288a1/comments",
    "author": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d387507aeca652a5569825af65243536f2ce26ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d387507aeca652a5569825af65243536f2ce26ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d387507aeca652a5569825af65243536f2ce26ea"
      }
    ],
    "stats": {
      "total": 382,
      "additions": 382,
      "deletions": 0
    },
    "files": [
      {
        "sha": "720a796bc2ba647f89ea04ffdc2d9f87abf7d471",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/635fa2f26691295cb2bd0f231cced76ebe1288a1/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/635fa2f26691295cb2bd0f231cced76ebe1288a1/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=635fa2f26691295cb2bd0f231cced76ebe1288a1",
        "patch": "@@ -155,6 +155,7 @@ BITCOIN_CORE_H = \\\n   reverselock.h \\\n   rpc/blockchain.h \\\n   rpc/client.h \\\n+  rpc/doc.h \\\n   rpc/mining.h \\\n   rpc/protocol.h \\\n   rpc/server.h \\\n@@ -248,6 +249,7 @@ libbitcoin_server_a_SOURCES = \\\n   pow.cpp \\\n   rest.cpp \\\n   rpc/blockchain.cpp \\\n+  rpc/doc.cpp \\\n   rpc/mining.cpp \\\n   rpc/misc.cpp \\\n   rpc/net.cpp \\"
      },
      {
        "sha": "219829570735731b9daf13f054e603fb3b027663",
        "filename": "src/rpc/doc.cpp",
        "status": "added",
        "additions": 284,
        "deletions": 0,
        "changes": 284,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/635fa2f26691295cb2bd0f231cced76ebe1288a1/src/rpc/doc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/635fa2f26691295cb2bd0f231cced76ebe1288a1/src/rpc/doc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/doc.cpp?ref=635fa2f26691295cb2bd0f231cced76ebe1288a1",
        "patch": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <rpc/doc.h>\n+\n+RPCDocExample::RPCDocExample(const std::string& description, const std::string& code)\n+    : m_description(description), m_code(code)\n+{\n+}\n+\n+RPCDocExample::RPCDocExample(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+std::string RPCDocExample::AsText() const\n+{\n+    std::string result;\n+    if (!m_description.empty()) {\n+        result += m_description;\n+        result += \"\\n\";\n+    }\n+\n+    result += \"> \";\n+    result += m_code;\n+    result += \"\\n\";\n+    return result;\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::string& description)\n+    : m_code(code), m_description(description)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+    : m_code(code), m_types(types), m_description(description)\n+{\n+}\n+\n+std::string const& RPCDocTableRow::Code() const\n+{\n+    return m_code;\n+}\n+\n+std::vector<std::string> const& RPCDocTableRow::Types() const\n+{\n+    return m_types;\n+}\n+\n+std::vector<std::string> RPCDocTableRow::DescriptionLines() const\n+{\n+    std::vector<std::string> res;\n+    boost::split(res, m_description, boost::is_any_of(\"\\n\"));\n+    return res;\n+}\n+\n+size_t RPCDocTable::PrefixLength() const\n+{\n+    size_t max = 0;\n+    for (auto const& row : m_rows) {\n+        size_t prefix = row.Code().length() + 2;\n+        if (prefix > max) {\n+            max = prefix;\n+        }\n+    }\n+    return max;\n+}\n+\n+\n+RPCDocTable::RPCDocTable(const std::string& name)\n+    : m_name(name)\n+{\n+}\n+\n+void RPCDocTable::AddRow(const RPCDocTableRow& row)\n+{\n+    m_rows.push_back(row);\n+}\n+\n+std::string RPCDocTable::AsText() const\n+{\n+    std::string res = \"\";\n+    res += m_name;\n+    res += \":\\n\";\n+\n+    size_t prefixLen = PrefixLength();\n+    for (auto const& row : m_rows) {\n+        std::string code = row.Code();\n+        res += row.Code();\n+        auto lines = row.DescriptionLines();\n+        bool firstLine = true;\n+        for (auto const& line : lines) {\n+            size_t spaces;\n+            if (firstLine) {\n+                spaces = prefixLen - code.length();\n+            } else {\n+                spaces = prefixLen;\n+            }\n+            res += std::string(spaces, ' ');\n+\n+            if (firstLine) {\n+                auto types = row.Types();\n+                if (!types.empty()) {\n+                    bool firstType = true;\n+                    res += \"(\";\n+                    for (auto const& type : types) {\n+                        if (!firstType) {\n+                            res += \", \";\n+                        }\n+                        res += type;\n+                        firstType = false;\n+                    }\n+                    res += \") \";\n+                }\n+            }\n+            res += line;\n+            res += \"\\n\";\n+            firstLine = false;\n+        }\n+    }\n+    return res;\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName, std::string firstArguments)\n+    : m_methodName(methodName), m_firstArguments(firstArguments)\n+{\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName)\n+    : m_methodName(methodName), m_firstArguments(\"\")\n+{\n+}\n+\n+RPCDoc& RPCDoc::Desc(const std::string& description)\n+{\n+    m_description = description;\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Table(const std::string& name)\n+{\n+    m_tables.push_back(RPCDocTable(name));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::string& description)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, description));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, types, description));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::initializer_list<std::string>& types)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, types, \"\"));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Rows(const std::vector<RPCDocTableRow>& rows)\n+{\n+    for (auto const& row : rows) {\n+        m_tables.back().AddRow(row);\n+    }\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Example(const std::string& code)\n+{\n+    m_examples.push_back(RPCDocExample(code));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Example(const std::string& code, const std::string& example)\n+{\n+    m_examples.push_back(RPCDocExample(code, example));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::ExampleCli(const std::string& description, const std::string& methodName, const std::string& args)\n+{\n+    m_examples.push_back(\n+        RPCDocExample(description, \"bitcoin-cli \" + methodName + \" \" + args));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::ExampleRpc(const std::string& description, const std::string& methodName, const std::string& args)\n+{\n+    m_examples.push_back(RPCDocExample(\n+        description,\n+        \"curl --user myusername --data-binary '{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\":\\\"curltest\\\", \"\n+        \"\\\"method\\\": \\\"\" +\n+            methodName + \"\\\", \\\"params\\\": [\" + args + \"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\"));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::ExampleCli(const std::string& description, const std::string& args)\n+{\n+    return ExampleCli(description, m_methodName, args);\n+}\n+\n+RPCDoc& RPCDoc::ExampleRpc(const std::string& description, const std::string& args)\n+{\n+    return ExampleRpc(description, m_methodName, args);\n+}\n+\n+RPCDoc& RPCDoc::ExampleCli(const std::string& args)\n+{\n+    return ExampleCli(\"\", args);\n+}\n+\n+RPCDoc& RPCDoc::ExampleRpc(const std::string& args)\n+{\n+    return ExampleRpc(\"\", args);\n+}\n+\n+std::string RPCDoc::AsText() const\n+{\n+    std::string result;\n+\n+    result += m_methodName;\n+    if (!m_firstArguments.empty()) {\n+        result += \" \";\n+        result += m_firstArguments;\n+    }\n+\n+    result += \"\\n\";\n+\n+    if (!m_description.empty()) {\n+        result += \"\\n\";\n+        result += m_description;\n+        result += \"\\n\";\n+    }\n+\n+    for (const auto& table : m_tables) {\n+        result += \"\\n\";\n+        result += table.AsText();\n+    }\n+\n+    if (!m_examples.empty()) {\n+        result += \"\\nExamples:\\n\";\n+        for (const auto& example : m_examples) {\n+            result += \"\\n\";\n+            result += example.AsText();\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+std::runtime_error RPCDoc::AsError() const\n+{\n+    return std::runtime_error(AsText());\n+}"
      },
      {
        "sha": "ff1fe059357f4b3dd02c727b34dc5da5b7412893",
        "filename": "src/rpc/doc.h",
        "status": "added",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/635fa2f26691295cb2bd0f231cced76ebe1288a1/src/rpc/doc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/635fa2f26691295cb2bd0f231cced76ebe1288a1/src/rpc/doc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/doc.h?ref=635fa2f26691295cb2bd0f231cced76ebe1288a1",
        "patch": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_DOC_H\n+#define BITCOIN_RPC_DOC_H\n+\n+#include <amount.h>\n+#include <rpc/protocol.h>\n+#include <uint256.h>\n+\n+#include <list>\n+#include <map>\n+#include <stdint.h>\n+#include <string>\n+\n+class RPCDocExample\n+{\n+private:\n+    const std::string m_description;\n+    const std::string m_code;\n+\n+public:\n+    RPCDocExample(const std::string& description, const std::string& code);\n+    RPCDocExample(const std::string& code);\n+    std::string AsText() const;\n+};\n+\n+class RPCDocTableRow\n+{\n+private:\n+    const std::string m_code;\n+    std::vector<std::string> m_types;\n+    const std::string m_description;\n+\n+public:\n+    RPCDocTableRow(const std::string& code);\n+    RPCDocTableRow(const std::string& code, const std::string& description);\n+    RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description);\n+    std::string const& Code() const;\n+    std::vector<std::string> const& Types() const;\n+    std::vector<std::string> DescriptionLines() const;\n+};\n+\n+class RPCDocTable\n+{\n+private:\n+    std::string m_name;\n+    std::vector<RPCDocTableRow> m_rows;\n+\n+    size_t PrefixLength() const;\n+\n+public:\n+    RPCDocTable(const std::string& name);\n+    void AddRow(const RPCDocTableRow& row);\n+\n+    std::string AsText() const;\n+};\n+\n+class RPCDoc\n+{\n+private:\n+    std::string m_methodName;\n+    std::string m_firstArguments;\n+    std::string m_description;\n+    std::vector<RPCDocTable> m_tables;\n+    std::vector<RPCDocExample> m_examples;\n+\n+public:\n+    RPCDoc(std::string methodName);\n+    RPCDoc(std::string methodName, std::string firstArguments);\n+\n+    RPCDoc& Desc(const std::string& description);\n+    RPCDoc& Table(const std::string& name);\n+    RPCDoc& Row(const std::string& code);\n+    RPCDoc& Row(const std::string& code, const std::initializer_list<std::string>& types);\n+    RPCDoc& Row(const std::string& code, const std::string& description);\n+    RPCDoc& Row(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description);\n+    RPCDoc& Rows(const std::vector<RPCDocTableRow>& rows);\n+    RPCDoc& Example(const std::string& code);\n+    RPCDoc& Example(const std::string& description, const std::string& code);\n+\n+    RPCDoc& ExampleCli(const std::string& args);\n+    RPCDoc& ExampleRpc(const std::string& args);\n+\n+    RPCDoc& ExampleCli(const std::string& description, const std::string& args);\n+    RPCDoc& ExampleRpc(const std::string& description, const std::string& args);\n+\n+    RPCDoc& ExampleCli(const std::string& description, const std::string& methodName, const std::string& args);\n+    RPCDoc& ExampleRpc(const std::string& description, const std::string& methodName, const std::string& args);\n+\n+    std::string AsText() const;\n+    std::runtime_error AsError() const;\n+};\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "a9b9eedc201f08f34cf4a97999dc465a4dd69492",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWI5ZWVkYzIwMWYwOGYzNGNmNGE5Nzk5OWRjNDY1YTRkZDY5NDky",
    "commit": {
      "author": {
        "name": "Karel Bilek",
        "email": "kb@karelbilek.com",
        "date": "2018-10-17T11:08:57Z"
      },
      "committer": {
        "name": "Karel Bilek",
        "email": "kb@karelbilek.com",
        "date": "2018-10-19T10:29:05Z"
      },
      "message": "[rpc] Rewrite all RPC commands to use new helper",
      "tree": {
        "sha": "fb89b65ae3c04bf33a5b12dcd35f9012b3b2d77e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb89b65ae3c04bf33a5b12dcd35f9012b3b2d77e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9b9eedc201f08f34cf4a97999dc465a4dd69492",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEEB0I5VVMWmCbHjE6cAbGb9s2JHwFAlvJsfEACgkQcAbGb9s2\nJHx86w//XGhnJfrkreXGebCLbYij0MVQwsSvz83PyaxRwP6cZsLnUc7yURqlTJ7V\nFIu4DfL3aKJuZdyNnxusg3D57QBMAOO+x4ft29NA7mQrKYyGTtG0+ZHhRiirNOed\nPl6UM3m5DOU1Zp8TvoyIyovoepAY+32m4+WQ7xjgou3ZGk8YOD7oWrvdamAE16Pm\nq9QJucP4Fo7xOq6SO2PH35jmakq5XSBqON9sgoVwsJFchHtMVmv1jHE2ruaMAoEZ\nvoxdILJRO4Tki8ElJtimXLeh3wLht4nxHa6kMXjmQoTODkl/Il4v9+fzorYr1Gb+\nYsi7AUgnHtyLvQ+RQzzGEpiOFkpMrY8GHnmrRXlrfMHXzU86Kh1sLkiE+QabAQsG\nNN//tIYuRWMDLvkLZwMXauE9d29CJAnZU1npW/3byMfHsQ1g7Ah0CVC4KiTZJouk\nlfZlruvAwISOsOyp11ejPWcbylF65pwZAeAMLsyHZZpSKcvnJYaqX7pNhKC88Nl1\nqE+I9bOYapROcoUphjn3tQnyOA0LyBRH5bGKlaKP8nuEB5q8N4yXeu03kNcYPrMM\nGsut17d9RoTdxlGNMiGy0bdcpTKjGWZQTvvHR6gkltfBhHAGzIYpwvBrEncm/1q8\nECvOq2ikIrcfWLag+UeeNhKxBfSB5SnG8cVwGnNfB0//OgBkhmE=\n=3KBg\n-----END PGP SIGNATURE-----",
        "payload": "tree fb89b65ae3c04bf33a5b12dcd35f9012b3b2d77e\nparent 635fa2f26691295cb2bd0f231cced76ebe1288a1\nauthor Karel Bilek <kb@karelbilek.com> 1539774537 +0700\ncommitter Karel Bilek <kb@karelbilek.com> 1539944945 +0700\n\n[rpc] Rewrite all RPC commands to use new helper\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9b9eedc201f08f34cf4a97999dc465a4dd69492",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9b9eedc201f08f34cf4a97999dc465a4dd69492",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9b9eedc201f08f34cf4a97999dc465a4dd69492/comments",
    "author": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "635fa2f26691295cb2bd0f231cced76ebe1288a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/635fa2f26691295cb2bd0f231cced76ebe1288a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/635fa2f26691295cb2bd0f231cced76ebe1288a1"
      }
    ],
    "stats": {
      "total": 6187,
      "additions": 3073,
      "deletions": 3114
    },
    "files": [
      {
        "sha": "4d8aec693dbd99a729aa2b06690d7883cd80674c",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=a9b9eedc201f08f34cf4a97999dc465a4dd69492",
        "patch": "@@ -146,7 +146,7 @@ std::string ListLogCategories()\n         // Omit the special cases.\n         if (category_desc.flag != BCLog::NONE && category_desc.flag != BCLog::ALL) {\n             if (outcount != 0) ret += \", \";\n-            ret += category_desc.category;\n+            ret += \"`\" + category_desc.category + \"`\";\n             outcount++;\n         }\n     }"
      },
      {
        "sha": "561286cf269171654552caf7c4a6ccb3762fd129",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 571,
        "deletions": 603,
        "changes": 1174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=a9b9eedc201f08f34cf4a97999dc465a4dd69492",
        "patch": "@@ -12,14 +12,15 @@\n #include <checkpoints.h>\n #include <coins.h>\n #include <consensus/validation.h>\n-#include <validation.h>\n #include <core_io.h>\n+#include <hash.h>\n #include <index/txindex.h>\n #include <key_io.h>\n #include <policy/feerate.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n+#include <rpc/doc.h>\n #include <rpc/server.h>\n #include <script/descriptor.h>\n #include <streams.h>\n@@ -28,7 +29,7 @@\n #include <txmempool.h>\n #include <util.h>\n #include <utilstrencodings.h>\n-#include <hash.h>\n+#include <validation.h>\n #include <validationinterface.h>\n #include <versionbitsinfo.h>\n #include <warnings.h>\n@@ -161,15 +162,13 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n static UniValue getblockcount(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"getblockcount\\n\"\n-            \"\\nReturns the number of blocks in the longest blockchain.\\n\"\n-            \"\\nResult:\\n\"\n-            \"n    (numeric) The current block count\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblockcount\", \"\")\n-            + HelpExampleRpc(\"getblockcount\", \"\")\n-        );\n+        throw RPCDoc(\"getblockcount\")\n+            .Desc(\"Returns the number of blocks in the longest blockchain.\")\n+            .Table(\"Result\")\n+            .Row(\"n\", {\"numeric\"}, \"The current block count\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     LOCK(cs_main);\n     return chainActive.Height();\n@@ -178,15 +177,13 @@ static UniValue getblockcount(const JSONRPCRequest& request)\n static UniValue getbestblockhash(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"getbestblockhash\\n\"\n-            \"\\nReturns the hash of the best (tip) block in the longest blockchain.\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\\"hex\\\"      (string) the block hash, hex-encoded\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getbestblockhash\", \"\")\n-            + HelpExampleRpc(\"getbestblockhash\", \"\")\n-        );\n+        throw RPCDoc(\"getbestblockhash\")\n+            .Desc(\"Returns the hash of the best (tip) block in the longest blockchain.\")\n+            .Table(\"Result\")\n+            .Row(\"\\\"hex\\\"\", {\"string\"}, \"the block hash hex-encoded\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     LOCK(cs_main);\n     return chainActive.Tip()->GetBlockHash().GetHex();\n@@ -205,21 +202,22 @@ void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)\n static UniValue waitfornewblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n-            \"waitfornewblock (timeout)\\n\"\n-            \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n-            \"\\nReturns the current block on timeout or exit.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. timeout (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n-            \"  \\\"height\\\" : {     (int) Block height\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"waitfornewblock\", \"1000\")\n-            + HelpExampleRpc(\"waitfornewblock\", \"1000\")\n-        );\n+        throw RPCDoc(\"waitfornewblock\", \"(timeout)\")\n+            .Desc(\n+                \"Waits for a specific new block and returns useful info about it.\\n\"\n+                \"\\n\"\n+                \"Returns the current block on timeout or exit.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. timeout\", {\"int\", \"optional\", \"default=0\"}, \"Time in milliseconds to wait for a response. 0 indicates no timeout.\")\n+            .Table(\"Result\")\n+            .Row(\"{\", {\"json object\"})\n+            .Row(\"  \\\"hash\\\" : {\", {\"string\"}, \"The blockhash\")\n+            .Row(\"  \\\"height\\\" : {\", {\"int\"}, \"Block height\")\n+            .Row(\"}\")\n+            .ExampleCli(\"1000\")\n+            .ExampleRpc(\"1000\")\n+            .AsError();\n+\n     int timeout = 0;\n     if (!request.params[0].isNull())\n         timeout = request.params[0].get_int();\n@@ -243,22 +241,23 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n static UniValue waitforblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"waitforblock <blockhash> (timeout)\\n\"\n-            \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n-            \"\\nReturns the current block on timeout or exit.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\" (required, string) Block hash to wait for.\\n\"\n-            \"2. timeout       (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n-            \"  \\\"height\\\" : {     (int) Block height\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n-            + HelpExampleRpc(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n-        );\n+        throw RPCDoc(\"waitforblock\", \"<blockhash> (timeout)\")\n+            .Desc(\n+                \"Waits for a specific new block and returns useful info about it.\\n\"\n+                \"\\n\"\n+                \"Returns the current block on timeout or exit.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"blockhash\\\"\", {\"required\", \"string\"}, \"Block hash to wait for.\")\n+            .Row(\"2. timeout\", {\"int\", \"optional\", \"default=0\"}, \"Time in milliseconds to wait for a response. 0 indicates no timeout.\")\n+            .Table(\"Result\")\n+            .Row(\"{\", {\"json object\"})\n+            .Row(\"  \\\"hash\\\" : {\", {\"string\"}, \"The blockhash\")\n+            .Row(\"  \\\"height\\\" : {\", {\"int\"}, \"Block height\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n+            .ExampleRpc(\"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n+            .AsError();\n+\n     int timeout = 0;\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n@@ -285,23 +284,24 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n static UniValue waitforblockheight(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"waitforblockheight <height> (timeout)\\n\"\n-            \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n-            \"of the current tip.\\n\"\n-            \"\\nReturns the current block on timeout or exit.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. height  (required, int) Block height to wait for (int)\\n\"\n-            \"2. timeout (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n-            \"  \\\"height\\\" : {     (int) Block height\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n-            + HelpExampleRpc(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n-        );\n+        throw RPCDoc(\"waitforblockheight\", \"<height> (timeout)\")\n+            .Desc(\n+                \"Waits for (at least) block height and returns the height and hash\\n\"\n+                \"of the current tip.\\n\"\n+                \"\\n\"\n+                \"Returns the current block on timeout or exit.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. height\", {\"required\", \"int\"}, \"Block height to wait for (int)\")\n+            .Row(\"2. timeout\", {\"int\", \"optional\", \"default=0\"}, \"Time in milliseconds to wait for a response. 0 indicates no timeout.\")\n+            .Table(\"Result\")\n+            .Row(\"{\", {\"json object\"})\n+            .Row(\"  \\\"hash\\\" : {\", {\"string\"}, \"The blockhash\")\n+            .Row(\"  \\\"height\\\" : {\", {\"int\"}, \"Block height\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"100\\\", 1000\")\n+            .ExampleRpc(\"\\\"100\\\", 1000\")\n+            .AsError();\n+\n     int timeout = 0;\n \n     int height = request.params[0].get_int();\n@@ -327,13 +327,11 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 0) {\n-        throw std::runtime_error(\n-            \"syncwithvalidationinterfacequeue\\n\"\n-            \"\\nWaits for the validation interface queue to catch up on everything that was there when we entered this function.\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"syncwithvalidationinterfacequeue\",\"\")\n-            + HelpExampleRpc(\"syncwithvalidationinterfacequeue\",\"\")\n-        );\n+        throw RPCDoc(\"syncwithvalidationinterfacequeue\")\n+            .Desc(\"Waits for the validation interface queue to catch up on everything that was there when we entered this function.\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n     }\n     SyncWithValidationInterfaceQueue();\n     return NullUniValue;\n@@ -342,47 +340,46 @@ static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n static UniValue getdifficulty(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"getdifficulty\\n\"\n-            \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\"\n-            \"\\nResult:\\n\"\n-            \"n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getdifficulty\", \"\")\n-            + HelpExampleRpc(\"getdifficulty\", \"\")\n-        );\n+        throw RPCDoc(\"getdifficulty\")\n+            .Desc(\"Returns the proof-of-work difficulty as a multiple of the minimum difficulty.\")\n+            .Table(\"Result\")\n+            .Row(\"n.nnn\", {\"numeric\"}, \"the proof-of-work difficulty as a multiple of the minimum difficulty.\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     LOCK(cs_main);\n     return GetDifficulty(chainActive.Tip());\n }\n \n-static std::string EntryDescriptionString()\n+static std::vector<RPCDocTableRow> EntryDescription()\n {\n-    return \"    \\\"size\\\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\\n\"\n-           \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \" (DEPRECATED)\\n\"\n-           \"    \\\"modifiedfee\\\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\\n\"\n-           \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n-           \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n-           \"    \\\"descendantcount\\\" : n,  (numeric) number of in-mempool descendant transactions (including this one)\\n\"\n-           \"    \\\"descendantsize\\\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)\\n\"\n-           \"    \\\"descendantfees\\\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\\n\"\n-           \"    \\\"ancestorcount\\\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)\\n\"\n-           \"    \\\"ancestorsize\\\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)\\n\"\n-           \"    \\\"ancestorfees\\\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\\n\"\n-           \"    \\\"wtxid\\\" : hash,         (string) hash of serialized transaction, including witness data\\n\"\n-           \"    \\\"fees\\\" : {\\n\"\n-           \"        \\\"base\\\" : n,         (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n-           \"        \\\"modified\\\" : n,     (numeric) transaction fee with fee deltas used for mining priority in \" + CURRENCY_UNIT + \"\\n\"\n-           \"        \\\"ancestor\\\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in \" + CURRENCY_UNIT + \"\\n\"\n-           \"        \\\"descendant\\\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in \" + CURRENCY_UNIT + \"\\n\"\n-           \"    }\\n\"\n-           \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n-           \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n-           \"       ... ]\\n\"\n-           \"    \\\"spentby\\\" : [           (array) unconfirmed transactions spending outputs from this transaction\\n\"\n-           \"        \\\"transactionid\\\",    (string) child transaction id\\n\"\n-           \"       ... ]\\n\"\n-           \"    \\\"bip125-replaceable\\\" : true|false,  (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)\\n\";\n+    return {\n+        RPCDocTableRow(\"    \\\"size\\\" : n,\", {\"numeric\"}, \"virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\"),\n+        RPCDocTableRow(\"    \\\"fee\\\" : n,\", {\"numeric\"}, \"transaction fee in \" + CURRENCY_UNIT + \" (DEPRECATED)\"),\n+        RPCDocTableRow(\"    \\\"modifiedfee\\\" : n,\", {\"numeric\"}, \"transaction fee with fee deltas used for mining priority (DEPRECATED)\"),\n+        RPCDocTableRow(\"    \\\"time\\\" : n,\", {\"numeric\"}, \"local time transaction entered pool in seconds since 1 Jan 1970 GMT\"),\n+        RPCDocTableRow(\"    \\\"height\\\" : n,\", {\"numeric\"}, \"block height when transaction entered pool\"),\n+        RPCDocTableRow(\"    \\\"descendantcount\\\" : n,\", {\"numeric\"}, \"number of in-mempool descendant transactions (including this one)\"),\n+        RPCDocTableRow(\"    \\\"descendantsize\\\" : n,\", {\"numeric\"}, \"virtual transaction size of in-mempool descendants (including this one)\"),\n+        RPCDocTableRow(\"    \\\"descendantfees\\\" : n,\", {\"numeric\"}, \"modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\"),\n+        RPCDocTableRow(\"    \\\"ancestorcount\\\" : n,\", {\"numeric\"}, \"number of in-mempool ancestor transactions (including this one)\"),\n+        RPCDocTableRow(\"    \\\"ancestorsize\\\" : n,\", {\"numeric\"}, \"virtual transaction size of in-mempool ancestors (including this one)\"),\n+        RPCDocTableRow(\"    \\\"ancestorfees\\\" : n,\", {\"numeric\"}, \"modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\"),\n+        RPCDocTableRow(\"    \\\"wtxid\\\" : hash,\", {\"string\"}, \"hash of serialized transaction, including witness data\"),\n+        RPCDocTableRow(\"    \\\"fees\\\" : {\"),\n+        RPCDocTableRow(\"        \\\"base\\\" : n,\", {\"numeric\"}, \"transaction fee in \" + CURRENCY_UNIT),\n+        RPCDocTableRow(\"        \\\"modified\\\" : n,\", {\"numeric\"}, \"transaction fee with fee deltas used for mining priority in \" + CURRENCY_UNIT),\n+        RPCDocTableRow(\"        \\\"ancestor\\\" : n,\", {\"numeric\"}, \"modified fees (see above) of in-mempool ancestors (including this one) in \" + CURRENCY_UNIT),\n+        RPCDocTableRow(\"        \\\"descendant\\\" : n,\", {\"numeric\"}, \"modified fees (see above) of in-mempool descendants (including this one) in \" + CURRENCY_UNIT),\n+        RPCDocTableRow(\"    }\"),\n+        RPCDocTableRow(\"    \\\"depends\\\" : [\", {\"array\"}, \"unconfirmed transactions used as inputs for this transaction\"),\n+        RPCDocTableRow(\"        \\\"transactionid\\\",\", {\"string\"}, \"parent transaction id\"),\n+        RPCDocTableRow(\"       ... ]\"),\n+        RPCDocTableRow(\"    \\\"spentby\\\" : [\", {\"array\"}, \"unconfirmed transactions spending outputs from this transaction\"),\n+        RPCDocTableRow(\"        \\\"transactionid\\\",\", {\"string\"}, \"child transaction id\"),\n+        RPCDocTableRow(\"       ... ]\"),\n+        RPCDocTableRow(\"    \\\"bip125-replaceable\\\" : true|false,\", {\"boolean\"}, \"Whether this transaction could be replaced due to BIP125 (replace-by-fee)\")};\n }\n \n static void entryToJSON(UniValue &info, const CTxMemPoolEntry &e) EXCLUSIVE_LOCKS_REQUIRED(::mempool.cs)\n@@ -476,27 +473,27 @@ UniValue mempoolToJSON(bool fVerbose)\n static UniValue getrawmempool(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n-            \"getrawmempool ( verbose )\\n\"\n-            \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n-            \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n-            \"\\nResult: (for verbose = false):\\n\"\n-            \"[                     (json array of string)\\n\"\n-            \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-            \"\\nResult: (for verbose = true):\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n-            + EntryDescriptionString()\n-            + \"  }, ...\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getrawmempool\", \"true\")\n-            + HelpExampleRpc(\"getrawmempool\", \"true\")\n-        );\n+        throw RPCDoc(\"getrawmempool\", \"( verbose )\")\n+            .Desc(\n+                \"Returns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n+                \"\\n\"\n+                \"Hint: use getmempoolentry to fetch a specific transaction from the mempool.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. verbose\", {\"boolean\", \"optional\", \"default=false\"}, \"True for a json object, false for array of transaction ids\")\n+            .Table(\"Result: (for verbose = false)\")\n+            .Row(\"[\", {\"json array of string\"})\n+            .Row(\"  \\\"transactionid\\\"\", {\"string\"}, \"The transaction id\")\n+            .Row(\"  ,...\")\n+            .Row(\"]\")\n+            .Table(\"Result: (for verbose = true)\")\n+            .Row(\"{\", {\"json object\"})\n+            .Row(\"  \\\"transactionid\\\" : {\", {\"json object\"})\n+            .Rows(EntryDescription())\n+            .Row(\"  }, ...\")\n+            .Row(\"}\")\n+            .ExampleCli(\"true\")\n+            .ExampleRpc(\"true\")\n+            .AsError();\n \n     bool fVerbose = false;\n     if (!request.params[0].isNull())\n@@ -508,27 +505,25 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n static UniValue getmempoolancestors(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n-            \"getmempoolancestors txid ( verbose )\\n\"\n-            \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"                 (string, required) The transaction id (must be in mempool)\\n\"\n-            \"2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n-            \"\\nResult (for verbose = false):\\n\"\n-            \"[                       (json array of strings)\\n\"\n-            \"  \\\"transactionid\\\"           (string) The transaction id of an in-mempool ancestor transaction\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-            \"\\nResult (for verbose = true):\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n-            + EntryDescriptionString()\n-            + \"  }, ...\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmempoolancestors\", \"\\\"mytxid\\\"\")\n-            + HelpExampleRpc(\"getmempoolancestors\", \"\\\"mytxid\\\"\")\n-            );\n+        throw RPCDoc(\"getmempoolancestors\", \"txid ( verbose )\")\n+            .Desc(\"If txid is in the mempool, returns all in-mempool ancestors.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"txid\\\"\", {\"string\", \"required\"}, \"The transaction id (must be in mempool)\")\n+            .Row(\"2. verbose\", {\"boolean\", \"optional\", \"default=false\"}, \"True for a json object, false for array of transaction ids\")\n+            .Table(\"Result (for verbose = false)\")\n+            .Row(\"[\", {\"json array of strings\"})\n+            .Row(\"  \\\"transactionid\\\"\", {\"string\"}, \"The transaction id of an in-mempool ancestor transaction\")\n+            .Row(\"  ,...\")\n+            .Row(\"]\")\n+            .Table(\"Result (for verbose = true)\")\n+            .Row(\"{\", {\"json object\"})\n+            .Row(\"  \\\"transactionid\\\" : {\", {\"json object\"})\n+            .Rows(EntryDescription())\n+            .Row(\"  }, ...\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"mytxid\\\"\")\n+            .ExampleRpc(\"\\\"mytxid\\\"\")\n+            .AsError();\n     }\n \n     bool fVerbose = false;\n@@ -572,27 +567,25 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n static UniValue getmempooldescendants(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n-            \"getmempooldescendants txid ( verbose )\\n\"\n-            \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"                 (string, required) The transaction id (must be in mempool)\\n\"\n-            \"2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n-            \"\\nResult (for verbose = false):\\n\"\n-            \"[                       (json array of strings)\\n\"\n-            \"  \\\"transactionid\\\"           (string) The transaction id of an in-mempool descendant transaction\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-            \"\\nResult (for verbose = true):\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n-            + EntryDescriptionString()\n-            + \"  }, ...\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmempooldescendants\", \"\\\"mytxid\\\"\")\n-            + HelpExampleRpc(\"getmempooldescendants\", \"\\\"mytxid\\\"\")\n-            );\n+        throw RPCDoc(\"getmempooldescendants\", \"txid ( verbose )\")\n+            .Desc(\"If txid is in the mempool, returns all in-mempool descendants.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"txid\\\"\", {\"string\", \"required\"}, \"The transaction id (must be in mempool)\")\n+            .Row(\"2. verbose\", {\"boolean\", \"optional\", \"default=false\"}, \"True for a json object, false for array of transaction ids\")\n+            .Table(\"Result (for verbose = false)\")\n+            .Row(\"[\", {\"json array of strings\"})\n+            .Row(\"  \\\"transactionid\\\"\", {\"string\"}, \"The transaction id of an in-mempool descendant transaction\")\n+            .Row(\"  ,...\")\n+            .Row(\"]\")\n+            .Table(\"Result (for verbose = true)\")\n+            .Row(\"{\", {\"json object\"})\n+            .Row(\"  \\\"transactionid\\\" : {\", {\"json object\"})\n+            .Rows(EntryDescription())\n+            .Row(\"  }, ...\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"mytxid\\\"\")\n+            .ExampleRpc(\"\\\"mytxid\\\"\")\n+            .AsError();\n     }\n \n     bool fVerbose = false;\n@@ -636,19 +629,17 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n static UniValue getmempoolentry(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n-            \"getmempoolentry txid\\n\"\n-            \"\\nReturns mempool data for given transaction\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"                   (string, required) The transaction id (must be in mempool)\\n\"\n-            \"\\nResult:\\n\"\n-            \"{                           (json object)\\n\"\n-            + EntryDescriptionString()\n-            + \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n-            + HelpExampleRpc(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n-        );\n+        throw RPCDoc(\"getmempoolentry\", \"txid\")\n+            .Desc(\"Returns mempool data for given transaction\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"txid\\\"\", {\"string\", \"required\"}, \"The transaction id (must be in mempool)\")\n+            .Table(\"Result\")\n+            .Row(\"{\", {\"json object\"})\n+            .Rows(EntryDescription())\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"mytxid\\\"\")\n+            .ExampleRpc(\"\\\"mytxid\\\"\")\n+            .AsError();\n     }\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n@@ -669,17 +660,15 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n static UniValue getblockhash(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"getblockhash height\\n\"\n-            \"\\nReturns hash of block in best-block-chain at height provided.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. height         (numeric, required) The height index\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\\"hash\\\"         (string) The block hash\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblockhash\", \"1000\")\n-            + HelpExampleRpc(\"getblockhash\", \"1000\")\n-        );\n+        throw RPCDoc(\"getblockhash\", \"height\")\n+            .Desc(\"Returns hash of block in best-block-chain at height provided.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. height\", {\"numeric\", \"required\"}, \"The height index\")\n+            .Table(\"Result\")\n+            .Row(\"\\\"hash\\\"\", {\"string\"}, \"The block hash\")\n+            .ExampleCli(\"1000\")\n+            .ExampleRpc(\"1000\")\n+            .AsError();\n \n     LOCK(cs_main);\n \n@@ -694,37 +683,36 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n static UniValue getblockheader(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"getblockheader \\\"hash\\\" ( verbose )\\n\"\n-            \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n-            \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n-            \"2. verbose           (boolean, optional, default=true) true for a json object, false for the hex-encoded data\\n\"\n-            \"\\nResult (for verbose = true):\\n\"\n-            \"{\\n\"\n-            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n-            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n-            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n-            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n-            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n-            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n-            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n-            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n-            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n-            \"  \\\"chainwork\\\" : \\\"0000...1f3\\\"     (string) Expected number of hashes required to produce the current chain (in hex)\\n\"\n-            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n-            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n-            \"  \\\"nextblockhash\\\" : \\\"hash\\\",      (string) The hash of the next block\\n\"\n-            \"}\\n\"\n-            \"\\nResult (for verbose=false):\\n\"\n-            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n-            + HelpExampleRpc(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n-        );\n+        throw RPCDoc(\"getblockheader\", \"\\\"hash\\\" ( verbose )\")\n+            .Desc(\n+                \"If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n+                \"If verbose is true, returns an Object with information about blockheader <hash>.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"hash\\\"\", {\"string\", \"required\"}, \"The block hash\")\n+            .Row(\"2. verbose\", {\"boolean\", \"optional\", \"default=true\"}, \"true for a json object, false for the hex-encoded data\")\n+            .Table(\"Result (for verbose = true)\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"hash\\\" : \\\"hash\\\",\", {\"string\"}, \"the block hash (same as provided)\")\n+            .Row(\"  \\\"confirmations\\\" : n,\", {\"numeric\"}, \"The number of confirmations, or -1 if the block is not on the main chain\")\n+            .Row(\"  \\\"height\\\" : n,\", {\"numeric\"}, \"The block height or index\")\n+            .Row(\"  \\\"version\\\" : n,\", {\"numeric\"}, \"The block version\")\n+            .Row(\"  \\\"versionHex\\\" : \\\"00000000\\\",\", {\"string\"}, \"The block version formatted in hexadecimal\")\n+            .Row(\"  \\\"merkleroot\\\" : \\\"xxxx\\\",\", {\"string\"}, \"The merkle root\")\n+            .Row(\"  \\\"time\\\" : ttt,\", {\"numeric\"}, \"The block time in seconds since epoch (Jan 1 1970 GMT)\")\n+            .Row(\"  \\\"mediantime\\\" : ttt,\", {\"numeric\"}, \"The median block time in seconds since epoch (Jan 1 1970 GMT)\")\n+            .Row(\"  \\\"nonce\\\" : n,\", {\"numeric\"}, \"The nonce\")\n+            .Row(\"  \\\"bits\\\" : \\\"1d00ffff\\\",\", {\"string\"}, \"The bits\")\n+            .Row(\"  \\\"difficulty\\\" : x.xxx,\", {\"numeric\"}, \"The difficulty\")\n+            .Row(\"  \\\"chainwork\\\" : \\\"0000...1f3\\\"\", {\"string\"}, \"Expected number of hashes required to produce the current chain (in hex)\")\n+            .Row(\"  \\\"nTx\\\" : n,\", {\"numeric\"}, \"The number of transactions in the block.\")\n+            .Row(\"  \\\"previousblockhash\\\" : \\\"hash\\\",\", {\"string\"}, \"The hash of the previous block\")\n+            .Row(\"  \\\"nextblockhash\\\" : \\\"hash\\\",\", {\"string\"}, \"The hash of the next block\")\n+            .Row(\"}\")\n+            .Table(\"Result (for verbose=false)\")\n+            .Row(\"\\\"data\\\"\", {\"string\"}, \"A string that is serialized, hex-encoded data for block 'hash'.\")\n+            .ExampleCli(\"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+            .ExampleRpc(\"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+            .AsError();\n \n     LOCK(cs_main);\n \n@@ -772,53 +760,52 @@ static CBlock GetBlockChecked(const CBlockIndex* pblockindex)\n static UniValue getblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"getblock \\\"blockhash\\\" ( verbosity ) \\n\"\n-            \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n-            \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n-            \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"          (string, required) The block hash\\n\"\n-            \"2. verbosity              (numeric, optional, default=1) 0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\\n\"\n-            \"\\nResult (for verbosity = 0):\\n\"\n-            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n-            \"\\nResult (for verbosity = 1):\\n\"\n-            \"{\\n\"\n-            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n-            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n-            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n-            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n-            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n-            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n-            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n-            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n-            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n-            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n-            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n-            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n-            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n-            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n-            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n-            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n-            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n-            \"}\\n\"\n-            \"\\nResult (for verbosity = 2):\\n\"\n-            \"{\\n\"\n-            \"  ...,                     Same output as verbosity = 1.\\n\"\n-            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n-            \"         ,...\\n\"\n-            \"  ],\\n\"\n-            \"  ,...                     Same output as verbosity = 1.\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n-            + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n-        );\n+        throw RPCDoc(\"getblock\", \"\\\"blockhash\\\" ( verbosity ) \")\n+            .Desc(\n+                \"If verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n+                \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n+                \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"blockhash\\\"\", {\"string\", \"required\"}, \"The block hash\")\n+            .Row(\"2. verbosity\", {\"numeric\", \"optional\", \"default=1\"}, \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\")\n+            .Table(\"Result (for verbosity = 0)\")\n+            .Row(\"\\\"data\\\"\", {\"string\"}, \"A string that is serialized, hex-encoded data for block 'hash'.\")\n+            .Table(\"Result (for verbosity = 1)\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"hash\\\" : \\\"hash\\\",\", {\"string\"}, \"the block hash (same as provided)\")\n+            .Row(\"  \\\"confirmations\\\" : n,\", {\"numeric\"}, \"The number of confirmations, or -1 if the block is not on the main chain\")\n+            .Row(\"  \\\"size\\\" : n,\", {\"numeric\"}, \"The block size\")\n+            .Row(\"  \\\"strippedsize\\\" : n,\", {\"numeric\"}, \"The block size excluding witness data\")\n+            .Row(\"  \\\"weight\\\" : n\", {\"numeric\"}, \"The block weight as defined in BIP 141\")\n+            .Row(\"  \\\"height\\\" : n,\", {\"numeric\"}, \"The block height or index\")\n+            .Row(\"  \\\"version\\\" : n,\", {\"numeric\"}, \"The block version\")\n+            .Row(\"  \\\"versionHex\\\" : \\\"00000000\\\",\", {\"string\"}, \"The block version formatted in hexadecimal\")\n+            .Row(\"  \\\"merkleroot\\\" : \\\"xxxx\\\",\", {\"string\"}, \"The merkle root\")\n+            .Row(\"  \\\"tx\\\" : [\", {\"array of string\"}, \"The transaction ids\")\n+            .Row(\"     \\\"transactionid\\\"\", {\"string\"}, \"The transaction id\")\n+            .Row(\"     ,...\")\n+            .Row(\"  ],\")\n+            .Row(\"  \\\"time\\\" : ttt,\", {\"numeric\"}, \"The block time in seconds since epoch (Jan 1 1970 GMT)\")\n+            .Row(\"  \\\"mediantime\\\" : ttt,\", {\"numeric\"}, \"The median block time in seconds since epoch (Jan 1 1970 GMT)\")\n+            .Row(\"  \\\"nonce\\\" : n,\", {\"numeric\"}, \"The nonce\")\n+            .Row(\"  \\\"bits\\\" : \\\"1d00ffff\\\",\", {\"string\"}, \"The bits\")\n+            .Row(\"  \\\"difficulty\\\" : x.xxx,\", {\"numeric\"}, \"The difficulty\")\n+            .Row(\"  \\\"chainwork\\\" : \\\"xxxx\\\",\", {\"string\"}, \"Expected number of hashes required to produce the chain up to this block (in hex)\")\n+            .Row(\"  \\\"nTx\\\" : n,\", {\"numeric\"}, \"The number of transactions in the block.\")\n+            .Row(\"  \\\"previousblockhash\\\" : \\\"hash\\\",\", {\"string\"}, \"The hash of the previous block\")\n+            .Row(\"  \\\"nextblockhash\\\" : \\\"hash\\\"\", {\"string\"}, \"The hash of the next block\")\n+            .Row(\"}\")\n+            .Table(\"Result (for verbosity = 2)\")\n+            .Row(\"{\")\n+            .Row(\"  ...,\", \"Same output as verbosity = 1.\")\n+            .Row(\"  \\\"tx\\\" : [\", {\"array of Objects\"}, \"The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\")\n+            .Row(\"         ,...\")\n+            .Row(\"  ],\")\n+            .Row(\"  ,...\", \"Same output as verbosity = 1.\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+            .ExampleRpc(\"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+            .AsError();\n \n     LOCK(cs_main);\n \n@@ -924,16 +911,16 @@ static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n static UniValue pruneblockchain(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"pruneblockchain\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n-            \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\\n\"\n-            \"\\nResult:\\n\"\n-            \"n    (numeric) Height of the last block pruned.\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"pruneblockchain\", \"1000\")\n-            + HelpExampleRpc(\"pruneblockchain\", \"1000\"));\n+        throw RPCDoc(\"pruneblockchain\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"height\\\"\", {\"numeric\", \"required\"},\n+                \"The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n+                \"to prune blocks whose block time is at least 2 hours older than the provided timestamp.\")\n+            .Table(\"Result\")\n+            .Row(\"n\", {\"numeric\"}, \"Height of the last block pruned.\")\n+            .ExampleCli(\"1000\")\n+            .ExampleRpc(\"1000\")\n+            .AsError();\n \n     if (!fPruneMode)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n@@ -973,25 +960,24 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"gettxoutsetinfo\\n\"\n-            \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-            \"Note this call may take some time.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"height\\\":n,     (numeric) The current block height (index)\\n\"\n-            \"  \\\"bestblock\\\": \\\"hex\\\",   (string) The hash of the block at the tip of the chain\\n\"\n-            \"  \\\"transactions\\\": n,      (numeric) The number of transactions with unspent outputs\\n\"\n-            \"  \\\"txouts\\\": n,            (numeric) The number of unspent transaction outputs\\n\"\n-            \"  \\\"bogosize\\\": n,          (numeric) A meaningless metric for UTXO set size\\n\"\n-            \"  \\\"hash_serialized_2\\\": \\\"hash\\\", (string) The serialized hash\\n\"\n-            \"  \\\"disk_size\\\": n,         (numeric) The estimated size of the chainstate on disk\\n\"\n-            \"  \\\"total_amount\\\": x.xxx          (numeric) The total amount\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"gettxoutsetinfo\", \"\")\n-            + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n-        );\n+        throw RPCDoc(\"gettxoutsetinfo\")\n+            .Desc(\n+                \"Returns statistics about the unspent transaction output set.\\n\"\n+                \"Note this call may take some time.\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"height\\\":n,\", {\"numeric\"}, \"The current block height (index)\")\n+            .Row(\"  \\\"bestblock\\\": \\\"hex\\\",\", {\"string\"}, \"The hash of the block at the tip of the chain\")\n+            .Row(\"  \\\"transactions\\\": n,\", {\"numeric\"}, \"The number of transactions with unspent outputs\")\n+            .Row(\"  \\\"txouts\\\": n,\", {\"numeric\"}, \"The number of unspent transaction outputs\")\n+            .Row(\"  \\\"bogosize\\\": n,\", {\"numeric\"}, \"A meaningless metric for UTXO set size\")\n+            .Row(\"  \\\"hash_serialized_2\\\": \\\"hash\\\",\", {\"string\"}, \"The serialized hash\")\n+            .Row(\"  \\\"disk_size\\\": n,\", {\"numeric\"}, \"The estimated size of the chainstate on disk\")\n+            .Row(\"  \\\"total_amount\\\": x.xxx\", {\"numeric\"}, \"The total amount\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     UniValue ret(UniValue::VOBJ);\n \n@@ -1015,40 +1001,40 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n UniValue gettxout(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n-        throw std::runtime_error(\n-            \"gettxout \\\"txid\\\" n ( include_mempool )\\n\"\n-            \"\\nReturns details about an unspent transaction output.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"             (string, required) The transaction id\\n\"\n-            \"2. \\\"n\\\"                (numeric, required) vout number\\n\"\n-            \"3. \\\"include_mempool\\\"  (boolean, optional) Whether to include the mempool. Default: true.\"\n-            \"     Note that an unspent output that is spent in the mempool won't appear.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"bestblock\\\":  \\\"hash\\\",    (string) The hash of the block at the tip of the chain\\n\"\n-            \"  \\\"confirmations\\\" : n,       (numeric) The number of confirmations\\n\"\n-            \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"scriptPubKey\\\" : {         (json object)\\n\"\n-            \"     \\\"asm\\\" : \\\"code\\\",       (string) \\n\"\n-            \"     \\\"hex\\\" : \\\"hex\\\",        (string) \\n\"\n-            \"     \\\"reqSigs\\\" : n,          (numeric) Number of required signatures\\n\"\n-            \"     \\\"type\\\" : \\\"pubkeyhash\\\", (string) The type, eg pubkeyhash\\n\"\n-            \"     \\\"addresses\\\" : [          (array of string) array of bitcoin addresses\\n\"\n-            \"        \\\"address\\\"     (string) bitcoin address\\n\"\n-            \"        ,...\\n\"\n-            \"     ]\\n\"\n-            \"  },\\n\"\n-            \"  \\\"coinbase\\\" : true|false   (boolean) Coinbase or not\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            \"\\nGet unspent transactions\\n\"\n-            + HelpExampleCli(\"listunspent\", \"\") +\n-            \"\\nView the details\\n\"\n-            + HelpExampleCli(\"gettxout\", \"\\\"txid\\\" 1\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"gettxout\", \"\\\"txid\\\", 1\")\n-        );\n+        throw RPCDoc(\"gettxout\", \"\\\"txid\\\" n ( include_mempool )\")\n+            .Desc(\"Returns details about an unspent transaction output.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"txid\\\"\", {\"string\", \"required\"}, \"The transaction id\")\n+            .Row(\"2. \\\"n\\\"\", {\"numeric\", \"required\"}, \"vout number\")\n+            .Row(\"3. \\\"include_mempool\\\"\", {\"boolean\", \"optional\"}, \"Whether to include the mempool. Default: true.     Note that an unspent output that is spent in the mempool won't appear.\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"bestblock\\\": \\\"hash\\\",\", {\"string\"}, \"The hash of the block at the tip of the chain\")\n+            .Row(\"  \\\"confirmations\\\" : n,\", {\"numeric\"}, \"The number of confirmations\")\n+            .Row(\"  \\\"value\\\" : x.xxx,\", {\"numeric\"}, \"The transaction value in \" + CURRENCY_UNIT)\n+            .Row(\"  \\\"scriptPubKey\\\" : {\", {\"json object\"})\n+            .Row(\"     \\\"asm\\\" : \\\"code\\\",\", {\"string\"})\n+            .Row(\"     \\\"hex\\\" : \\\"hex\\\",\", {\"string\"})\n+            .Row(\"     \\\"reqSigs\\\" : n,\", {\"numeric\"}, \"Number of required signatures\")\n+            .Row(\"     \\\"type\\\" : \\\"pubkeyhash\\\",\", {\"string\"}, \"The type, eg pubkeyhash\")\n+            .Row(\"     \\\"addresses\\\" : [\", {\"array of string\"}, \"array of bitcoin addresses\")\n+            .Row(\"        \\\"address\\\"\", {\"string\"}, \"bitcoin address\")\n+            .Row(\"        ,...\")\n+            .Row(\"     ]\")\n+            .Row(\"  },\")\n+            .Row(\"  \\\"coinbase\\\" : true|false\", {\"boolean\"}, \"Coinbase or not\")\n+            .Row(\"}\")\n+            .ExampleCli(\n+                \"Get unspent transactions\",\n+                \"listunspent\",\n+                \"\")\n+            .ExampleCli(\n+                \"View the details\",\n+                \"\\\"txid\\\" 1\")\n+            .ExampleRpc(\n+                \"As a JSON-RPC call\",\n+                \"\\\"txid\\\" 1\")\n+            .AsError();\n \n     LOCK(cs_main);\n \n@@ -1095,18 +1081,16 @@ static UniValue verifychain(const JSONRPCRequest& request)\n     int nCheckLevel = gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n     int nCheckDepth = gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n     if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"verifychain ( checklevel nblocks )\\n\"\n-            \"\\nVerifies blockchain database.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. checklevel   (numeric, optional, 0-4, default=\" + strprintf(\"%d\", nCheckLevel) + \") How thorough the block verification is.\\n\"\n-            \"2. nblocks      (numeric, optional, default=\" + strprintf(\"%d\", nCheckDepth) + \", 0=all) The number of blocks to check.\\n\"\n-            \"\\nResult:\\n\"\n-            \"true|false       (boolean) Verified or not\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"verifychain\", \"\")\n-            + HelpExampleRpc(\"verifychain\", \"\")\n-        );\n+        throw RPCDoc(\"verifychain\", \"( checklevel nblocks )\")\n+            .Desc(\"Verifies blockchain database.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. checklevel\", {\"numeric\", \"optional\", \"0-4\", \"default=\" + strprintf(\"%d\", nCheckLevel)}, \"How thorough the block verification is.\")\n+            .Row(\"2. nblocks\", {\"numeric\", \"optional\", \"default=\" + strprintf(\"%d\", nCheckDepth), \"0=all\"}, \"The number of blocks to check.\")\n+            .Table(\"Result\")\n+            .Row(\"true|false\", {\"boolean\"}, \"Verified or not\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     LOCK(cs_main);\n \n@@ -1192,56 +1176,53 @@ static void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::\n UniValue getblockchaininfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"getblockchaininfo\\n\"\n-            \"Returns an object containing various state info regarding blockchain processing.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"chain\\\": \\\"xxxx\\\",              (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n-            \"  \\\"blocks\\\": xxxxxx,             (numeric) the current number of blocks processed in the server\\n\"\n-            \"  \\\"headers\\\": xxxxxx,            (numeric) the current number of headers we have validated\\n\"\n-            \"  \\\"bestblockhash\\\": \\\"...\\\",       (string) the hash of the currently best block\\n\"\n-            \"  \\\"difficulty\\\": xxxxxx,         (numeric) the current difficulty\\n\"\n-            \"  \\\"mediantime\\\": xxxxxx,         (numeric) median time for the current best block\\n\"\n-            \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n-            \"  \\\"initialblockdownload\\\": xxxx, (bool) (debug information) estimate of whether this node is in Initial Block Download mode.\\n\"\n-            \"  \\\"chainwork\\\": \\\"xxxx\\\"           (string) total amount of work in active chain, in hexadecimal\\n\"\n-            \"  \\\"size_on_disk\\\": xxxxxx,       (numeric) the estimated size of the block and undo files on disk\\n\"\n-            \"  \\\"pruned\\\": xx,                 (boolean) if the blocks are subject to pruning\\n\"\n-            \"  \\\"pruneheight\\\": xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)\\n\"\n-            \"  \\\"automatic_pruning\\\": xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\\n\"\n-            \"  \\\"prune_target_size\\\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\\n\"\n-            \"  \\\"softforks\\\": [                (array) status of softforks in progress\\n\"\n-            \"     {\\n\"\n-            \"        \\\"id\\\": \\\"xxxx\\\",           (string) name of softfork\\n\"\n-            \"        \\\"version\\\": xx,          (numeric) block version\\n\"\n-            \"        \\\"reject\\\": {             (object) progress toward rejecting pre-softfork blocks\\n\"\n-            \"           \\\"status\\\": xx,        (boolean) true if threshold reached\\n\"\n-            \"        },\\n\"\n-            \"     }, ...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"bip9_softforks\\\": {           (object) status of BIP9 softforks in progress\\n\"\n-            \"     \\\"xxxx\\\" : {                 (string) name of the softfork\\n\"\n-            \"        \\\"status\\\": \\\"xxxx\\\",       (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n-            \"        \\\"bit\\\": xx,              (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n-            \"        \\\"startTime\\\": xx,        (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n-            \"        \\\"timeout\\\": xx,          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n-            \"        \\\"since\\\": xx,            (numeric) height of the first block to which the status applies\\n\"\n-            \"        \\\"statistics\\\": {         (object) numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\\n\"\n-            \"           \\\"period\\\": xx,        (numeric) the length in blocks of the BIP9 signalling period \\n\"\n-            \"           \\\"threshold\\\": xx,     (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n-            \"           \\\"elapsed\\\": xx,       (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n-            \"           \\\"count\\\": xx,         (numeric) the number of blocks with the version bit set in the current period \\n\"\n-            \"           \\\"possible\\\": xx       (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n-            \"        }\\n\"\n-            \"     }\\n\"\n-            \"  }\\n\"\n-            \"  \\\"warnings\\\" : \\\"...\\\",           (string) any network and blockchain warnings.\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblockchaininfo\", \"\")\n-            + HelpExampleRpc(\"getblockchaininfo\", \"\")\n-        );\n+        throw RPCDoc(\"getblockchaininfo\")\n+            .Desc(\"Returns an object containing various state info regarding blockchain processing.\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"chain\\\": \\\"xxxx\\\",\", {\"string\"}, \"current network name as defined in BIP70 (main, test, regtest)\")\n+            .Row(\"  \\\"blocks\\\": xxxxxx,\", {\"numeric\"}, \"the current number of blocks processed in the server\")\n+            .Row(\"  \\\"headers\\\": xxxxxx,\", {\"numeric\"}, \"the current number of headers we have validated\")\n+            .Row(\"  \\\"bestblockhash\\\": \\\"...\\\",\", {\"string\"}, \"the hash of the currently best block\")\n+            .Row(\"  \\\"difficulty\\\": xxxxxx,\", {\"numeric\"}, \"the current difficulty\")\n+            .Row(\"  \\\"mediantime\\\": xxxxxx,\", {\"numeric\"}, \"median time for the current best block\")\n+            .Row(\"  \\\"verificationprogress\\\": xxxx,\", {\"numeric\"}, \"estimate of verification progress [0..1]\")\n+            .Row(\"  \\\"initialblockdownload\\\": xxxx,\", {\"bool\", \"debug information\"}, \"estimate of whether this node is in Initial Block Download mode.\")\n+            .Row(\"  \\\"chainwork\\\": \\\"xxxx\\\"\", {\"string\"}, \"total amount of work in active chain, in hexadecimal\")\n+            .Row(\"  \\\"size_on_disk\\\": xxxxxx,\", {\"numeric\"}, \"the estimated size of the block and undo files on disk\")\n+            .Row(\"  \\\"pruned\\\": xx,\", {\"boolean\"}, \"if the blocks are subject to pruning\")\n+            .Row(\"  \\\"pruneheight\\\": xxxxxx,\", {\"numeric\"}, \"lowest-height complete block stored (only present if pruning is enabled)\")\n+            .Row(\"  \\\"automatic_pruning\\\": xx,\", {\"boolean\"}, \"whether automatic pruning is enabled (only present if pruning is enabled)\")\n+            .Row(\"  \\\"prune_target_size\\\": xxxxxx,\", {\"numeric\"}, \"the target size used by pruning (only present if automatic pruning is enabled)\")\n+            .Row(\"  \\\"softforks\\\": [\", {\"array\"}, \"status of softforks in progress\")\n+            .Row(\"     {\")\n+            .Row(\"        \\\"id\\\": \\\"xxxx\\\",\", {\"string\"}, \"name of softfork\")\n+            .Row(\"        \\\"version\\\": xx,\", {\"numeric\"}, \"block version\")\n+            .Row(\"        \\\"reject\\\": {\", {\"object\"}, \"progress toward rejecting pre-softfork blocks\")\n+            .Row(\"           \\\"status\\\": xx,\", {\"boolean\"}, \"true if threshold reached\")\n+            .Row(\"        },\")\n+            .Row(\"     }, ...\")\n+            .Row(\"  ],\")\n+            .Row(\"  \\\"bip9_softforks\\\": {\", {\"object\"}, \"status of BIP9 softforks in progress\")\n+            .Row(\"     \\\"xxxx\\\" : {\", {\"string\"}, \"name of the softfork\")\n+            .Row(\"        \\\"status\\\": \\\"xxxx\\\",\", {\"string\"}, \"one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\")\n+            .Row(\"        \\\"bit\\\": xx,\", {\"numeric\"}, \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\")\n+            .Row(\"        \\\"startTime\\\": xx,\", {\"numeric\"}, \"the minimum median time past of a block at which the bit gains its meaning\")\n+            .Row(\"        \\\"timeout\\\": xx,\", {\"numeric\"}, \"the median time past of a block at which the deployment is considered failed if not yet locked in\")\n+            .Row(\"        \\\"since\\\": xx,\", {\"numeric\"}, \"height of the first block to which the status applies\")\n+            .Row(\"        \\\"statistics\\\": {\", {\"object\"}, \"numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\")\n+            .Row(\"           \\\"period\\\": xx,\", {\"numeric\"}, \"the length in blocks of the BIP9 signalling period\")\n+            .Row(\"           \\\"threshold\\\": xx,\", {\"numeric\"}, \"the number of blocks with the version bit set required to activate the feature\")\n+            .Row(\"           \\\"elapsed\\\": xx,\", {\"numeric\"}, \"the number of blocks elapsed since the beginning of the current period\")\n+            .Row(\"           \\\"count\\\": xx,\", {\"numeric\"}, \"the number of blocks with the version bit set in the current period\")\n+            .Row(\"           \\\"possible\\\": xx\", {\"boolean\"}, \"returns false if there are not enough blocks left in this period to pass activation threshold\")\n+            .Row(\"        }\")\n+            .Row(\"     }\")\n+            .Row(\"  }\")\n+            .Row(\"  \\\"warnings\\\" : \\\"...\\\",\", {\"string\"}, \"any network and blockchain warnings.\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     LOCK(cs_main);\n \n@@ -1309,35 +1290,32 @@ struct CompareBlocksByHeight\n static UniValue getchaintips(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"getchaintips\\n\"\n-            \"Return information about all known tips in the block tree,\"\n-            \" including the main chain as well as orphaned branches.\\n\"\n-            \"\\nResult:\\n\"\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"height\\\": xxxx,         (numeric) height of the chain tip\\n\"\n-            \"    \\\"hash\\\": \\\"xxxx\\\",         (string) block hash of the tip\\n\"\n-            \"    \\\"branchlen\\\": 0          (numeric) zero for main chain\\n\"\n-            \"    \\\"status\\\": \\\"active\\\"      (string) \\\"active\\\" for the main chain\\n\"\n-            \"  },\\n\"\n-            \"  {\\n\"\n-            \"    \\\"height\\\": xxxx,\\n\"\n-            \"    \\\"hash\\\": \\\"xxxx\\\",\\n\"\n-            \"    \\\"branchlen\\\": 1          (numeric) length of branch connecting the tip to the main chain\\n\"\n-            \"    \\\"status\\\": \\\"xxxx\\\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\\n\"\n-            \"  }\\n\"\n-            \"]\\n\"\n-            \"Possible values for status:\\n\"\n-            \"1.  \\\"invalid\\\"               This branch contains at least one invalid block\\n\"\n-            \"2.  \\\"headers-only\\\"          Not all blocks for this branch are available, but the headers are valid\\n\"\n-            \"3.  \\\"valid-headers\\\"         All blocks are available for this branch, but they were never fully validated\\n\"\n-            \"4.  \\\"valid-fork\\\"            This branch is not part of the active chain, but is fully validated\\n\"\n-            \"5.  \\\"active\\\"                This is the tip of the active main chain, which is certainly valid\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getchaintips\", \"\")\n-            + HelpExampleRpc(\"getchaintips\", \"\")\n-        );\n+        throw RPCDoc(\"getchaintips\")\n+            .Desc(\"Return information about all known tips in the block tree, including the main chain as well as orphaned branches.\")\n+            .Table(\"Result\")\n+            .Row(\"[\")\n+            .Row(\"  {\")\n+            .Row(\"    \\\"height\\\": xxxx,\", {\"numeric\"}, \"height of the chain tip\")\n+            .Row(\"    \\\"hash\\\": \\\"xxxx\\\",\", {\"string\"}, \"block hash of the tip\")\n+            .Row(\"    \\\"branchlen\\\": 0\", {\"numeric\"}, \"zero for main chain\")\n+            .Row(\"    \\\"status\\\": \\\"active\\\"\", {\"string\"}, \"\\\"active\\\" for the main chain\")\n+            .Row(\"  },\")\n+            .Row(\"  {\")\n+            .Row(\"    \\\"height\\\": xxxx,\")\n+            .Row(\"    \\\"hash\\\": \\\"xxxx\\\",\")\n+            .Row(\"    \\\"branchlen\\\": 1\", {\"numeric\"}, \"length of branch connecting the tip to the main chain\")\n+            .Row(\"    \\\"status\\\": \\\"xxxx\\\"\", {\"string\"}, \"status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\")\n+            .Row(\"  }\")\n+            .Row(\"]\")\n+            .Table(\"Possible values for status\")\n+            .Row(\"1. \\\"invalid\\\"\", \"This branch contains at least one invalid block\")\n+            .Row(\"2. \\\"headers-only\\\"\", \"Not all blocks for this branch are available, but the headers are valid\")\n+            .Row(\"3. \\\"valid-headers\\\"\", \"All blocks are available for this branch, but they were never fully validated\")\n+            .Row(\"4. \\\"valid-fork\\\"\", \"This branch is not part of the active chain, but is fully validated\")\n+            .Row(\"5. \\\"active\\\"\", \"This is the tip of the active main chain, which is certainly valid\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     LOCK(cs_main);\n \n@@ -1426,41 +1404,39 @@ UniValue mempoolInfoToJSON()\n static UniValue getmempoolinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"getmempoolinfo\\n\"\n-            \"\\nReturns details on the active state of the TX memory pool.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"size\\\": xxxxx,               (numeric) Current tx count\\n\"\n-            \"  \\\"bytes\\\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\\n\"\n-            \"  \\\"usage\\\": xxxxx,              (numeric) Total memory usage for the mempool\\n\"\n-            \"  \\\"maxmempool\\\": xxxxx,         (numeric) Maximum memory usage for the mempool\\n\"\n-            \"  \\\"mempoolminfee\\\": xxxxx       (numeric) Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\\n\"\n-            \"  \\\"minrelaytxfee\\\": xxxxx       (numeric) Current minimum relay fee for transactions\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n-        );\n+        throw RPCDoc(\"getmempoolinfo\")\n+            .Desc(\"Returns details on the active state of the TX memory pool.\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"size\\\": xxxxx,\", {\"numeric\"}, \"Current tx count\")\n+            .Row(\"  \\\"bytes\\\": xxxxx,\", {\"numeric\"}, \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\")\n+            .Row(\"  \\\"usage\\\": xxxxx,\", {\"numeric\"}, \"Total memory usage for the mempool\")\n+            .Row(\"  \\\"maxmempool\\\": xxxxx,\", {\"numeric\"}, \"Maximum memory usage for the mempool\")\n+            .Row(\"  \\\"mempoolminfee\\\": xxxxx\", {\"numeric\"}, \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\")\n+            .Row(\"  \\\"minrelaytxfee\\\": xxxxx\", {\"numeric\"}, \"Current minimum relay fee for transactions\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     return mempoolInfoToJSON();\n }\n \n static UniValue preciousblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"preciousblock \\\"blockhash\\\"\\n\"\n-            \"\\nTreats a block as if it were received before others with the same work.\\n\"\n-            \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n-            \"\\nThe effects of preciousblock are not retained across restarts.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"   (string, required) the hash of the block to mark as precious\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"preciousblock\", \"\\\"blockhash\\\"\")\n-            + HelpExampleRpc(\"preciousblock\", \"\\\"blockhash\\\"\")\n-        );\n+        throw RPCDoc(\"preciousblock\", \"\\\"blockhash\\\"\")\n+            .Desc(\n+                \"Treats a block as if it were received before others with the same work.\\n\"\n+                \"\\n\"\n+                \"A later preciousblock call can override the effect of an earlier one.\\n\"\n+                \"\\n\"\n+                \"The effects of preciousblock are not retained across restarts.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"blockhash\\\"\", {\"string\", \"required\"}, \"the hash of the block to mark as precious\")\n+            .ExampleCli(\"\\\"blockhash\\\"\")\n+            .ExampleRpc(\"\\\"blockhash\\\"\")\n+            .AsError();\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CBlockIndex* pblockindex;\n@@ -1486,16 +1462,13 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n static UniValue invalidateblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"invalidateblock \\\"blockhash\\\"\\n\"\n-            \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"   (string, required) the hash of the block to mark as invalid\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"invalidateblock\", \"\\\"blockhash\\\"\")\n-            + HelpExampleRpc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n-        );\n+        throw RPCDoc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n+            .Desc(\"Permanently marks a block as invalid, as if it violated a consensus rule.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"blockhash\\\"\", {\"string\", \"required\"}, \"the hash of the block to mark as invalid\")\n+            .ExampleCli(\"\\\"blockhash\\\"\")\n+            .ExampleRpc(\"\\\"blockhash\\\"\")\n+            .AsError();\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CValidationState state;\n@@ -1524,17 +1497,15 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n static UniValue reconsiderblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"reconsiderblock \\\"blockhash\\\"\\n\"\n-            \"\\nRemoves invalidity status of a block and its descendants, reconsider them for activation.\\n\"\n-            \"This can be used to undo the effects of invalidateblock.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"   (string, required) the hash of the block to reconsider\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n-            + HelpExampleRpc(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n-        );\n+        throw RPCDoc(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n+            .Desc(\n+                \"Removes invalidity status of a block and its descendants, reconsider them for activation.\\n\"\n+                \"This can be used to undo the effects of invalidateblock.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"blockhash\\\"\", {\"string\", \"required\"}, \"the hash of the block to reconsider\")\n+            .ExampleCli(\"\\\"blockhash\\\"\")\n+            .ExampleRpc(\"\\\"blockhash\\\"\")\n+            .AsError();\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n@@ -1561,26 +1532,24 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n static UniValue getchaintxstats(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"getchaintxstats ( nblocks blockhash )\\n\"\n-            \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks      (numeric, optional) Size of the window in number of blocks (default: one month).\\n\"\n-            \"2. \\\"blockhash\\\"  (string, optional) The hash of the block that ends the window.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"time\\\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.\\n\"\n-            \"  \\\"txcount\\\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\\n\"\n-            \"  \\\"window_final_block_hash\\\": \\\"...\\\",      (string) The hash of the final block in the window.\\n\"\n-            \"  \\\"window_block_count\\\": xxxxx,           (numeric) Size of the window in number of blocks.\\n\"\n-            \"  \\\"window_tx_count\\\": xxxxx,              (numeric) The number of transactions in the window. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n-            \"  \\\"window_interval\\\": xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n-            \"  \\\"txrate\\\": x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if \\\"window_interval\\\" is > 0.\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getchaintxstats\", \"\")\n-            + HelpExampleRpc(\"getchaintxstats\", \"2016\")\n-        );\n+        throw RPCDoc(\"getchaintxstats\", \"( nblocks blockhash )\")\n+            .Desc(\"Compute statistics about the total number and rate of transactions in the chain.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. nblocks\", {\"numeric\", \"optional\"}, \"Size of the window in number of blocks (default: one month).\")\n+            .Row(\"2. \\\"blockhash\\\"\", {\"string\", \"optional\"}, \"The hash of the block that ends the window.\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"time\\\": xxxxx,\", {\"numeric\"}, \"The timestamp for the final block in the window in UNIX format.\")\n+            .Row(\"  \\\"txcount\\\": xxxxx,\", {\"numeric\"}, \"The total number of transactions in the chain up to that point.\")\n+            .Row(\"  \\\"window_final_block_hash\\\": \\\"...\\\",\", {\"string\"}, \"The hash of the final block in the window.\")\n+            .Row(\"  \\\"window_block_count\\\": xxxxx,\", {\"numeric\"}, \"Size of the window in number of blocks.\")\n+            .Row(\"  \\\"window_tx_count\\\": xxxxx,\", {\"numeric\"}, \"The number of transactions in the window. Only returned if \\\"window_block_count\\\" is > 0.\")\n+            .Row(\"  \\\"window_interval\\\": xxxxx,\", {\"numeric\"}, \"The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0.\")\n+            .Row(\"  \\\"txrate\\\": x.xx,\", {\"numeric\"}, \"The average rate of transactions per second in the window. Only returned if \\\"window_interval\\\" is > 0.\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"2016\")\n+            .AsError();\n \n     const CBlockIndex* pindex;\n     int blockcount = 30 * 24 * 60 * 60 / Params().GetConsensus().nPowTargetSpacing; // By default: 1 month\n@@ -1691,61 +1660,60 @@ static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t)\n static UniValue getblockstats(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4) {\n-        throw std::runtime_error(\n-            \"getblockstats hash_or_height ( stats )\\n\"\n-            \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n-            \"It won't work for some heights with pruning.\\n\"\n-            \"It won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hash_or_height\\\"     (string or numeric, required) The block hash or height of the target block\\n\"\n-            \"2. \\\"stats\\\"              (array,  optional) Values to plot, by default all values (see result below)\\n\"\n-            \"    [\\n\"\n-            \"      \\\"height\\\",         (string, optional) Selected statistic\\n\"\n-            \"      \\\"time\\\",           (string, optional) Selected statistic\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"\\nResult:\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n-            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n-            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n-            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n-            \"  \\\"feerate_percentiles\\\": [  (array of numeric) Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)\\n\"\n-            \"      \\\"10th_percentile_feerate\\\",      (numeric) The 10th percentile feerate\\n\"\n-            \"      \\\"25th_percentile_feerate\\\",      (numeric) The 25th percentile feerate\\n\"\n-            \"      \\\"50th_percentile_feerate\\\",      (numeric) The 50th percentile feerate\\n\"\n-            \"      \\\"75th_percentile_feerate\\\",      (numeric) The 75th percentile feerate\\n\"\n-            \"      \\\"90th_percentile_feerate\\\",      (numeric) The 90th percentile feerate\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n-            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n-            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n-            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n-            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n-            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n-            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n-            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n-            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n-            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n-            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n-            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n-            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n-            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n-            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n-            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n-            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n-            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n-            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n-            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n-            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n-            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n-            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n-            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n-            + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n-        );\n+        throw RPCDoc(\"getblockstats\", \"hash_or_height ( stats )\")\n+            .Desc(\n+                \"Compute per block statistics for a given window. All amounts are in satoshis.\\n\"\n+                \"It won't work for some heights with pruning.\\n\"\n+                \"It won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"hash_or_height\\\"\", {\"string or numeric\", \"required\"}, \"The block hash or height of the target block\")\n+            .Row(\"2. \\\"stats\\\"\", {\"array\", \" optional\"}, \"Values to plot, by default all values (see result below)\")\n+            .Row(\"    [\")\n+            .Row(\"      \\\"height\\\",\", {\"string\", \"optional\"}, \"Selected statistic\")\n+            .Row(\"      \\\"time\\\",\", {\"string\", \"optional\"}, \"Selected statistic\")\n+            .Row(\"      ,...\")\n+            .Row(\"    ]\")\n+            .Table(\"Result\")\n+            .Row(\"{\", {\"json object\"})\n+            .Row(\"  \\\"avgfee\\\": xxxxx,\", {\"numeric\"}, \"Average fee in the block\")\n+            .Row(\"  \\\"avgfeerate\\\": xxxxx,\", {\"numeric\"}, \"Average feerate (in satoshis per virtual byte)\")\n+            .Row(\"  \\\"avgtxsize\\\": xxxxx,\", {\"numeric\"}, \"Average transaction size\")\n+            .Row(\"  \\\"blockhash\\\": xxxxx,\", {\"string\"}, \"The block hash (to check for potential reorgs)\")\n+            .Row(\"  \\\"feerate_percentiles\\\": [\", {\"array of numeric\"}, \"Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)\")\n+            .Row(\"      \\\"10th_percentile_feerate\\\",\", {\"numeric\"}, \"The 10th percentile feerate\")\n+            .Row(\"      \\\"25th_percentile_feerate\\\",\", {\"numeric\"}, \"The 25th percentile feerate\")\n+            .Row(\"      \\\"50th_percentile_feerate\\\",\", {\"numeric\"}, \"The 50th percentile feerate\")\n+            .Row(\"      \\\"75th_percentile_feerate\\\",\", {\"numeric\"}, \"The 75th percentile feerate\")\n+            .Row(\"      \\\"90th_percentile_feerate\\\",\", {\"numeric\"}, \"The 90th percentile feerate\")\n+            .Row(\"  ],\")\n+            .Row(\"  \\\"height\\\": xxxxx,\", {\"numeric\"}, \"The height of the block\")\n+            .Row(\"  \\\"ins\\\": xxxxx,\", {\"numeric\"}, \"The number of inputs (excluding coinbase)\")\n+            .Row(\"  \\\"maxfee\\\": xxxxx,\", {\"numeric\"}, \"Maximum fee in the block\")\n+            .Row(\"  \\\"maxfeerate\\\": xxxxx,\", {\"numeric\"}, \"Maximum feerate (in satoshis per virtual byte)\")\n+            .Row(\"  \\\"maxtxsize\\\": xxxxx,\", {\"numeric\"}, \"Maximum transaction size\")\n+            .Row(\"  \\\"medianfee\\\": xxxxx,\", {\"numeric\"}, \"Truncated median fee in the block\")\n+            .Row(\"  \\\"mediantime\\\": xxxxx,\", {\"numeric\"}, \"The block median time past\")\n+            .Row(\"  \\\"mediantxsize\\\": xxxxx,\", {\"numeric\"}, \"Truncated median transaction size\")\n+            .Row(\"  \\\"minfee\\\": xxxxx,\", {\"numeric\"}, \"Minimum fee in the block\")\n+            .Row(\"  \\\"minfeerate\\\": xxxxx,\", {\"numeric\"}, \"Minimum feerate (in satoshis per virtual byte)\")\n+            .Row(\"  \\\"mintxsize\\\": xxxxx,\", {\"numeric\"}, \"Minimum transaction size\")\n+            .Row(\"  \\\"outs\\\": xxxxx,\", {\"numeric\"}, \"The number of outputs\")\n+            .Row(\"  \\\"subsidy\\\": xxxxx,\", {\"numeric\"}, \"The block subsidy\")\n+            .Row(\"  \\\"swtotal_size\\\": xxxxx,\", {\"numeric\"}, \"Total size of all segwit transactions\")\n+            .Row(\"  \\\"swtotal_weight\\\": xxxxx,\", {\"numeric\"}, \"Total weight of all segwit transactions divided by segwit scale factor (4)\")\n+            .Row(\"  \\\"swtxs\\\": xxxxx,\", {\"numeric\"}, \"The number of segwit transactions\")\n+            .Row(\"  \\\"time\\\": xxxxx,\", {\"numeric\"}, \"The block time\")\n+            .Row(\"  \\\"total_out\\\": xxxxx,\", {\"numeric\"}, \"Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\")\n+            .Row(\"  \\\"total_size\\\": xxxxx,\", {\"numeric\"}, \"Total size of all non-coinbase transactions\")\n+            .Row(\"  \\\"total_weight\\\": xxxxx,\", {\"numeric\"}, \"Total weight of all non-coinbase transactions divided by segwit scale factor (4)\")\n+            .Row(\"  \\\"totalfee\\\": xxxxx,\", {\"numeric\"}, \"The fee total\")\n+            .Row(\"  \\\"txs\\\": xxxxx,\", {\"numeric\"}, \"The number of transactions (excluding coinbase)\")\n+            .Row(\"  \\\"utxo_increase\\\": xxxxx,\", {\"numeric\"}, \"The increase/decrease in the number of unspent outputs\")\n+            .Row(\"  \\\"utxo_size_inc\\\": xxxxx,\", {\"numeric\"}, \"The increase/decrease in size for the utxo index (not discounting op_return and similar)\")\n+            .Row(\"}\")\n+            .ExampleCli(\"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+            .ExampleRpc(\"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n+            .AsError();\n     }\n \n     LOCK(cs_main);\n@@ -1955,13 +1923,11 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n static UniValue savemempool(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0) {\n-        throw std::runtime_error(\n-            \"savemempool\\n\"\n-            \"\\nDumps the mempool to disk. It will fail until the previous dump is fully loaded.\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"savemempool\", \"\")\n-            + HelpExampleRpc(\"savemempool\", \"\")\n-        );\n+        throw RPCDoc(\"savemempool\")\n+            .Desc(\"Dumps the mempool to disk. It will fail until the previous dump is fully loaded.\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n     }\n \n     if (!g_is_mempool_loaded) {\n@@ -2038,49 +2004,51 @@ class CoinsViewScanReserver\n UniValue scantxoutset(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"scantxoutset <action> ( <scanobjects> )\\n\"\n-            \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n-            \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n-            \"Examples of output descriptors are:\\n\"\n-            \"    addr(<address>)                      Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK)\\n\"\n-            \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n-            \"    combo(<pubkey>)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\\n\"\n-            \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n-            \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n-            \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n-            \"or more path elements separated by \\\"/\\\", and optionally ending in \\\"/*\\\" (unhardened), or \\\"/*'\\\" or \\\"/*h\\\" (hardened) to specify all\\n\"\n-            \"unhardened or hardened child keys.\\n\"\n-            \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n-            \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"action\\\"                       (string, required) The action to execute\\n\"\n-            \"                                      \\\"start\\\" for starting a scan\\n\"\n-            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n-            \"                                      \\\"status\\\" for progress report (in %) of the current scan\\n\"\n-            \"2. \\\"scanobjects\\\"                  (array, required) Array of scan objects\\n\"\n-            \"    [                             Every scan object is either a string descriptor or an object:\\n\"\n-            \"        \\\"descriptor\\\",             (string, optional) An output descriptor\\n\"\n-            \"        {                         (object, optional) An object with output descriptor and metadata\\n\"\n-            \"          \\\"desc\\\": \\\"descriptor\\\",   (string, required) An output descriptor\\n\"\n-            \"          \\\"range\\\": n,             (numeric, optional) Up to what child index HD chains should be explored (default: 1000)\\n\"\n-            \"        },\\n\"\n-            \"        ...\\n\"\n-            \"    ]\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"unspents\\\": [\\n\"\n-            \"    {\\n\"\n-            \"    \\\"txid\\\" : \\\"transactionid\\\",     (string) The transaction id\\n\"\n-            \"    \\\"vout\\\": n,                    (numeric) the vout value\\n\"\n-            \"    \\\"scriptPubKey\\\" : \\\"script\\\",    (string) the script key\\n\"\n-            \"    \\\"amount\\\" : x.xxx,             (numeric) The total amount in \" + CURRENCY_UNIT + \" of the unspent output\\n\"\n-            \"    \\\"height\\\" : n,                 (numeric) Height of the unspent transaction output\\n\"\n-            \"   }\\n\"\n-            \"   ,...], \\n\"\n-            \" \\\"total_amount\\\" : x.xxx,          (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n-            \"]\\n\"\n-        );\n+        throw RPCDoc(\"scantxoutset\", \"<action> ( <scanobjects> )\")\n+            .Desc(\n+                \"EXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n+                \"\\n\"\n+                \"Scans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n+                \"\\n\"\n+                \"In the descriptors below, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+                \"or more path elements separated by `/`, and optionally ending in `/*` (unhardened), or `/*'` or `/*h` (hardened) to specify all\\n\"\n+                \"unhardened or hardened child keys.\\n\"\n+                \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n+                \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\")\n+            .Table(\"Examples of output descriptors\")\n+            .Row(\"addr(<address>)\", \"Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK)\")\n+            .Row(\"raw(<hex script>)\", \"Outputs whose scriptPubKey equals the specified hex scripts\")\n+            .Row(\"combo(<pubkey>)\", \"P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\")\n+            .Row(\"pkh(<pubkey>)\", \"P2PKH outputs for the given pubkey\")\n+            .Row(\"sh(multi(<n>,<pubkey>,<pubkey>,...))\", \"P2SH-multisig outputs for the given threshold and pubkeys\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"action\\\"\", {\"string\", \"required\"},\n+                \"The action to execute\\n\"\n+                \"- \\\"start\\\" for starting a scan\\n\"\n+                \"- \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+                \"- \\\"status\\\" for progress report (in %) of the current scan\")\n+            .Row(\"2. \\\"scanobjects\\\"\", {\"array\", \"required\"}, \"Array of scan objects\")\n+            .Row(\"    [\", \"Every scan object is either a string descriptor or an object:\")\n+            .Row(\"        \\\"descriptor\\\",\", {\"string\", \"optional\"}, \"An output descriptor\")\n+            .Row(\"        {\", {\"object\", \"optional\"}, \"An object with output descriptor and metadata\")\n+            .Row(\"          \\\"desc\\\": \\\"descriptor\\\",\", {\"string\", \"required\"}, \"An output descriptor\")\n+            .Row(\"          \\\"range\\\": n,\", {\"numeric\", \"optional\"}, \"Up to what child index HD chains should be explored (default: 1000)\")\n+            .Row(\"        },\")\n+            .Row(\"        ...\")\n+            .Row(\"    ]\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"unspents\\\": [\")\n+            .Row(\"    {\")\n+            .Row(\"    \\\"txid\\\" : \\\"transactionid\\\",\", {\"string\"}, \"The transaction id\")\n+            .Row(\"    \\\"vout\\\": n,\", {\"numeric\"}, \"the vout value\")\n+            .Row(\"    \\\"scriptPubKey\\\" : \\\"script\\\",\", {\"string\"}, \"the script key\")\n+            .Row(\"    \\\"amount\\\" : x.xxx,\", {\"numeric\"}, \"The total amount in \" + CURRENCY_UNIT + \" of the unspent output\")\n+            .Row(\"    \\\"height\\\" : n,\", {\"numeric\"}, \"Height of the unspent transaction output\")\n+            .Row(\"   }\")\n+            .Row(\"   ,...], \")\n+            .Row(\" \\\"total_amount\\\" : x.xxx,\", {\"numeric\"}, \"The total amount of all found unspent outputs in \" + CURRENCY_UNIT)\n+            .AsError();\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR});\n "
      },
      {
        "sha": "e1f024da2ef0003436af61416371149f72c7d6e9",
        "filename": "src/rpc/doc.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 21,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/doc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/doc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/doc.cpp?ref=a9b9eedc201f08f34cf4a97999dc465a4dd69492",
        "patch": "@@ -65,7 +65,7 @@ std::vector<std::string> RPCDocTableRow::DescriptionLines() const\n size_t RPCDocTable::PrefixLength() const\n {\n     size_t max = 0;\n-    for (auto const& row : m_rows) {\n+    for (const auto& row : m_rows) {\n         size_t prefix = row.Code().length() + 2;\n         if (prefix > max) {\n             max = prefix;\n@@ -82,22 +82,22 @@ RPCDocTable::RPCDocTable(const std::string& name)\n \n void RPCDocTable::AddRow(const RPCDocTableRow& row)\n {\n-    m_rows.push_back(row);\n+    m_rows.emplace_back(row);\n }\n \n std::string RPCDocTable::AsText() const\n {\n-    std::string res = \"\";\n+    std::string res;\n     res += m_name;\n     res += \":\\n\";\n \n     size_t prefixLen = PrefixLength();\n-    for (auto const& row : m_rows) {\n-        std::string code = row.Code();\n+    for (const auto& row : m_rows) {\n+        const std::string& code = row.Code();\n         res += row.Code();\n         auto lines = row.DescriptionLines();\n         bool firstLine = true;\n-        for (auto const& line : lines) {\n+        for (const auto& line : lines) {\n             size_t spaces;\n             if (firstLine) {\n                 spaces = prefixLen - code.length();\n@@ -111,7 +111,7 @@ std::string RPCDocTable::AsText() const\n                 if (!types.empty()) {\n                     bool firstType = true;\n                     res += \"(\";\n-                    for (auto const& type : types) {\n+                    for (const auto& type : types) {\n                         if (!firstType) {\n                             res += \", \";\n                         }\n@@ -129,12 +129,12 @@ std::string RPCDocTable::AsText() const\n     return res;\n }\n \n-RPCDoc::RPCDoc(std::string methodName, std::string firstArguments)\n+RPCDoc::RPCDoc(const std::string& methodName, const std::string& firstArguments)\n     : m_methodName(methodName), m_firstArguments(firstArguments)\n {\n }\n \n-RPCDoc::RPCDoc(std::string methodName)\n+RPCDoc::RPCDoc(const std::string& methodName)\n     : m_methodName(methodName), m_firstArguments(\"\")\n {\n }\n@@ -147,7 +147,7 @@ RPCDoc& RPCDoc::Desc(const std::string& description)\n \n RPCDoc& RPCDoc::Table(const std::string& name)\n {\n-    m_tables.push_back(RPCDocTable(name));\n+    m_tables.emplace_back(RPCDocTable(name));\n     return *this;\n }\n \n@@ -189,34 +189,28 @@ RPCDoc& RPCDoc::Row(const std::string& code, const std::initializer_list<std::st\n \n RPCDoc& RPCDoc::Rows(const std::vector<RPCDocTableRow>& rows)\n {\n-    for (auto const& row : rows) {\n+    for (const auto& row : rows) {\n         m_tables.back().AddRow(row);\n     }\n     return *this;\n }\n \n-RPCDoc& RPCDoc::Example(const std::string& code)\n+RPCDoc& RPCDoc::Example(const std::string& description, const std::string& code)\n {\n-    m_examples.push_back(RPCDocExample(code));\n-    return *this;\n-}\n-\n-RPCDoc& RPCDoc::Example(const std::string& code, const std::string& example)\n-{\n-    m_examples.push_back(RPCDocExample(code, example));\n+    m_examples.emplace_back(RPCDocExample(description, code));\n     return *this;\n }\n \n RPCDoc& RPCDoc::ExampleCli(const std::string& description, const std::string& methodName, const std::string& args)\n {\n-    m_examples.push_back(\n+    m_examples.emplace_back(\n         RPCDocExample(description, \"bitcoin-cli \" + methodName + \" \" + args));\n     return *this;\n }\n \n RPCDoc& RPCDoc::ExampleRpc(const std::string& description, const std::string& methodName, const std::string& args)\n {\n-    m_examples.push_back(RPCDocExample(\n+    m_examples.emplace_back(RPCDocExample(\n         description,\n         \"curl --user myusername --data-binary '{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\":\\\"curltest\\\", \"\n         \"\\\"method\\\": \\\"\" +"
      },
      {
        "sha": "1d1d6abb9d65c5eba95e0b13c028da9a5eaaf538",
        "filename": "src/rpc/doc.h",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/doc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/doc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/doc.h?ref=a9b9eedc201f08f34cf4a97999dc465a4dd69492",
        "patch": "@@ -21,8 +21,8 @@ class RPCDocExample\n     const std::string m_code;\n \n public:\n-    RPCDocExample(const std::string& description, const std::string& code);\n-    RPCDocExample(const std::string& code);\n+    explicit RPCDocExample(const std::string& description, const std::string& code);\n+    explicit RPCDocExample(const std::string& code);\n     std::string AsText() const;\n };\n \n@@ -34,9 +34,9 @@ class RPCDocTableRow\n     const std::string m_description;\n \n public:\n-    RPCDocTableRow(const std::string& code);\n-    RPCDocTableRow(const std::string& code, const std::string& description);\n-    RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description);\n+    explicit RPCDocTableRow(const std::string& code);\n+    explicit RPCDocTableRow(const std::string& code, const std::string& description);\n+    explicit RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description);\n     std::string const& Code() const;\n     std::vector<std::string> const& Types() const;\n     std::vector<std::string> DescriptionLines() const;\n@@ -51,7 +51,7 @@ class RPCDocTable\n     size_t PrefixLength() const;\n \n public:\n-    RPCDocTable(const std::string& name);\n+    explicit RPCDocTable(const std::string& name);\n     void AddRow(const RPCDocTableRow& row);\n \n     std::string AsText() const;\n@@ -67,8 +67,8 @@ class RPCDoc\n     std::vector<RPCDocExample> m_examples;\n \n public:\n-    RPCDoc(std::string methodName);\n-    RPCDoc(std::string methodName, std::string firstArguments);\n+    explicit RPCDoc(const std::string& methodName);\n+    explicit RPCDoc(const std::string& methodName, const std::string& firstArguments);\n \n     RPCDoc& Desc(const std::string& description);\n     RPCDoc& Table(const std::string& name);\n@@ -77,7 +77,6 @@ class RPCDoc\n     RPCDoc& Row(const std::string& code, const std::string& description);\n     RPCDoc& Row(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description);\n     RPCDoc& Rows(const std::vector<RPCDocTableRow>& rows);\n-    RPCDoc& Example(const std::string& code);\n     RPCDoc& Example(const std::string& description, const std::string& code);\n \n     RPCDoc& ExampleCli(const std::string& args);"
      },
      {
        "sha": "601350b3303671108b07e717cd072e113f808f0c",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 221,
        "deletions": 231,
        "changes": 452,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=a9b9eedc201f08f34cf4a97999dc465a4dd69492",
        "patch": "@@ -16,6 +16,7 @@\n #include <policy/fees.h>\n #include <pow.h>\n #include <rpc/blockchain.h>\n+#include <rpc/doc.h>\n #include <rpc/mining.h>\n #include <rpc/server.h>\n #include <shutdown.h>\n@@ -85,20 +86,19 @@ static UniValue GetNetworkHashPS(int lookup, int height) {\n static UniValue getnetworkhashps(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"getnetworkhashps ( nblocks height )\\n\"\n-            \"\\nReturns the estimated network hashes per second based on the last n blocks.\\n\"\n-            \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n-            \"Pass in [height] to estimate the network speed at the time when a certain block was found.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.\\n\"\n-            \"2. height      (numeric, optional, default=-1) To estimate at the time of the given height.\\n\"\n-            \"\\nResult:\\n\"\n-            \"x             (numeric) Hashes per second estimated\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getnetworkhashps\", \"\")\n-            + HelpExampleRpc(\"getnetworkhashps\", \"\")\n-       );\n+        throw RPCDoc(\"getnetworkhashps\", \"( nblocks height )\")\n+            .Desc(\n+                \"Returns the estimated network hashes per second based on the last n blocks.\\n\"\n+                \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n+                \"Pass in [height] to estimate the network speed at the time when a certain block was found.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. nblocks\", {\"numeric\", \"optional\", \"default=120\"}, \"The number of blocks, or -1 for blocks since last difficulty change.\")\n+            .Row(\"2. height\", {\"numeric\", \"optional\", \"default=-1\"}, \"To estimate at the time of the given height.\")\n+            .Table(\"Result\")\n+            .Row(\"x\", {\"numeric\"}, \"Hashes per second estimated\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     LOCK(cs_main);\n     return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n@@ -155,19 +155,16 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n static UniValue generatetoaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n-        throw std::runtime_error(\n-            \"generatetoaddress nblocks address (maxtries)\\n\"\n-            \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n-            \"2. address      (string, required) The address to send the newly generated bitcoin to.\\n\"\n-            \"3. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n-            \"\\nResult:\\n\"\n-            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nGenerate 11 blocks to myaddress\\n\"\n-            + HelpExampleCli(\"generatetoaddress\", \"11 \\\"myaddress\\\"\")\n-        );\n+        throw RPCDoc(\"generatetoaddress\", \"nblocks address (maxtries)\")\n+            .Desc(\"Mine blocks immediately to a specified address (before the RPC call returns)\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. nblocks\", {\"numeric\", \"required\"}, \"How many blocks are generated immediately.\")\n+            .Row(\"2. address\", {\"string\", \"required\"}, \"The address to send the newly generated bitcoin to.\")\n+            .Row(\"3. maxtries\", {\"numeric\", \"optional\"}, \"How many iterations to try (default = 1000000).\")\n+            .Table(\"Result\")\n+            .Row(\"[ blockhashes ]\", {\"array\"}, \"hashes of blocks generated\")\n+            .ExampleCli(\"11 \\\"myaddress\\\"\")\n+            .AsError();\n \n     int nGenerate = request.params[0].get_int();\n     uint64_t nMaxTries = 1000000;\n@@ -189,25 +186,22 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n static UniValue getmininginfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"getmininginfo\\n\"\n-            \"\\nReturns a json object containing mining-related information.\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n-            \"  \\\"currentblockweight\\\": nnn, (numeric) The last block weight\\n\"\n-            \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n-            \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n-            \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n-            \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n-            \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n-            \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmininginfo\", \"\")\n-            + HelpExampleRpc(\"getmininginfo\", \"\")\n-        );\n-\n+        throw RPCDoc(\"getmininginfo\")\n+            .Desc(\"Returns a json object containing mining-related information.\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"blocks\\\": nnn,\", {\"numeric\"}, \"The current block\")\n+            .Row(\"  \\\"currentblockweight\\\": nnn,\", {\"numeric\"}, \"The last block weight\")\n+            .Row(\"  \\\"currentblocktx\\\": nnn,\", {\"numeric\"}, \"The last block transaction\")\n+            .Row(\"  \\\"difficulty\\\": xxx.xxxxx\", {\"numeric\"}, \"The current difficulty\")\n+            .Row(\"  \\\"networkhashps\\\": nnn,\", {\"numeric\"}, \"The network hashes per second\")\n+            .Row(\"  \\\"pooledtx\\\": n\", {\"numeric\"}, \"The size of the mempool\")\n+            .Row(\"  \\\"chain\\\": \\\"xxxx\\\",\", {\"string\"}, \"current network name as defined in BIP70 (main, test, regtest)\")\n+            .Row(\"  \\\"warnings\\\": \\\"...\\\"\", {\"string\"}, \"any network and blockchain warnings\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     LOCK(cs_main);\n \n@@ -228,23 +222,23 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n static UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 3)\n-        throw std::runtime_error(\n-            \"prioritisetransaction <txid> <dummy value> <fee delta>\\n\"\n-            \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"       (string, required) The transaction id.\\n\"\n-            \"2. dummy          (numeric, optional) API-Compatibility for previous API. Must be zero or null.\\n\"\n-            \"                  DEPRECATED. For forward compatibility use named arguments and omit this parameter.\\n\"\n-            \"3. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n-            \"                  Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.\\n\"\n-            \"                  The fee is not actually paid, only the algorithm for selecting transactions into a block\\n\"\n-            \"                  considers the transaction as it would have paid a higher (or lower) fee.\\n\"\n-            \"\\nResult:\\n\"\n-            \"true              (boolean) Returns true\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"prioritisetransaction\", \"\\\"txid\\\" 0.0 10000\")\n-            + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n-        );\n+        throw RPCDoc(\"prioritisetransaction\", \"<txid> <dummy value> <fee delta>\")\n+            .Desc(\"Accepts the transaction into mined blocks at a higher (or lower) priority\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"txid\\\"\", {\"string\", \"required\"}, \"The transaction id.\")\n+            .Row(\"2. dummy\", {\"numeric\", \"optional\"},\n+                \"API-Compatibility for previous API. Must be zero or null.\\n\"\n+                \"DEPRECATED. For forward compatibility use named arguments and omit this parameter.\")\n+            .Row(\"3. fee_delta\", {\"numeric\", \"required\"},\n+                \"The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n+                \"Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.\\n\"\n+                \"The fee is not actually paid, only the algorithm for selecting transactions into a block\\n\"\n+                \"considers the transaction as it would have paid a higher (or lower) fee.\")\n+            .Table(\"Result\")\n+            .Row(\"true\", {\"boolean\"}, \"Returns true\")\n+            .ExampleCli(\"\\\"txid\\\" 0.0 10000\")\n+            .ExampleRpc(\"\\\"txid\\\", 0.0, 10000\")\n+            .AsError();\n \n     LOCK(cs_main);\n \n@@ -291,80 +285,76 @@ static std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n static UniValue getblocktemplate(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n-            \"getblocktemplate ( TemplateRequest )\\n\"\n-            \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n-            \"It returns data needed to construct a block to work on.\\n\"\n-            \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n-            \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n-            \"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n-            \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n-            \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\"\n-\n-            \"\\nArguments:\\n\"\n-            \"1. template_request         (json object, optional) A json object in the following spec\\n\"\n-            \"     {\\n\"\n-            \"       \\\"mode\\\":\\\"template\\\"    (string, optional) This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\\n\"\n-            \"       \\\"capabilities\\\":[     (array, optional) A list of strings\\n\"\n-            \"           \\\"support\\\"          (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\\n\"\n-            \"           ,...\\n\"\n-            \"       ],\\n\"\n-            \"       \\\"rules\\\":[            (array, optional) A list of strings\\n\"\n-            \"           \\\"support\\\"          (string) client side supported softfork deployment\\n\"\n-            \"           ,...\\n\"\n-            \"       ]\\n\"\n-            \"     }\\n\"\n-            \"\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"version\\\" : n,                    (numeric) The preferred block version\\n\"\n-            \"  \\\"rules\\\" : [ \\\"rulename\\\", ... ],    (array of strings) specific block rules that are to be enforced\\n\"\n-            \"  \\\"vbavailable\\\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments\\n\"\n-            \"      \\\"rulename\\\" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule\\n\"\n-            \"      ,...\\n\"\n-            \"  },\\n\"\n-            \"  \\\"vbrequired\\\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions\\n\"\n-            \"  \\\"previousblockhash\\\" : \\\"xxxx\\\",     (string) The hash of current highest block\\n\"\n-            \"  \\\"transactions\\\" : [                (array) contents of non-coinbase transactions that should be included in the next block\\n\"\n-            \"      {\\n\"\n-            \"         \\\"data\\\" : \\\"xxxx\\\",             (string) transaction data encoded in hexadecimal (byte-for-byte)\\n\"\n-            \"         \\\"txid\\\" : \\\"xxxx\\\",             (string) transaction id encoded in little-endian hexadecimal\\n\"\n-            \"         \\\"hash\\\" : \\\"xxxx\\\",             (string) hash encoded in little-endian hexadecimal (including witness data)\\n\"\n-            \"         \\\"depends\\\" : [                (array) array of numbers \\n\"\n-            \"             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\\n\"\n-            \"             ,...\\n\"\n-            \"         ],\\n\"\n-            \"         \\\"fee\\\": n,                    (numeric) difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n-            \"         \\\"sigops\\\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\\n\"\n-            \"         \\\"weight\\\" : n,                (numeric) total transaction weight, as counted for purposes of block limits\\n\"\n-            \"      }\\n\"\n-            \"      ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"coinbaseaux\\\" : {                 (json object) data that should be included in the coinbase's scriptSig content\\n\"\n-            \"      \\\"flags\\\" : \\\"xx\\\"                  (string) key name is to be ignored, and value included in scriptSig\\n\"\n-            \"  },\\n\"\n-            \"  \\\"coinbasevalue\\\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\\n\"\n-            \"  \\\"coinbasetxn\\\" : { ... },          (json object) information for coinbase transaction\\n\"\n-            \"  \\\"target\\\" : \\\"xxxx\\\",                (string) The hash target\\n\"\n-            \"  \\\"mintime\\\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"mutable\\\" : [                     (array of string) list of ways the block template may be changed \\n\"\n-            \"     \\\"value\\\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"noncerange\\\" : \\\"00000000ffffffff\\\",(string) A range of valid nonces\\n\"\n-            \"  \\\"sigoplimit\\\" : n,                 (numeric) limit of sigops in blocks\\n\"\n-            \"  \\\"sizelimit\\\" : n,                  (numeric) limit of block size\\n\"\n-            \"  \\\"weightlimit\\\" : n,                (numeric) limit of block weight\\n\"\n-            \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"bits\\\" : \\\"xxxxxxxx\\\",              (string) compressed target of next block\\n\"\n-            \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n-            + HelpExampleRpc(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n-         );\n+        throw RPCDoc(\"getblocktemplate\", \"( TemplateRequest )\")\n+            .Desc(\n+                \"If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n+                \"It returns data needed to construct a block to work on.\\n\"\n+                \"\\n\"\n+                \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n+                \"-  https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n+                \"-  https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n+                \"-  https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n+                \"-  https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. template_request\", {\"json object\", \"optional\"}, \"A json object in the following spec\")\n+            .Row(\"     {\")\n+            .Row(\"       \\\"mode\\\":\\\"template\\\"\", {\"string\", \"optional\"}, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\")\n+            .Row(\"       \\\"capabilities\\\":[\", {\"array\", \"optional\"}, \"A list of strings\")\n+            .Row(\"           \\\"support\\\"\", {\"string\"}, \"client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\")\n+            .Row(\"           ,...\")\n+            .Row(\"       ],\")\n+            .Row(\"       \\\"rules\\\":[\", {\"array\", \"optional\"}, \"A list of strings\")\n+            .Row(\"           \\\"support\\\"\", {\"string\"}, \"client side supported softfork deployment\")\n+            .Row(\"           ,...\")\n+            .Row(\"       ]\")\n+            .Row(\"     }\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"version\\\" : n,\", {\"numeric\"}, \"The preferred block version\")\n+            .Row(\"  \\\"rules\\\" : [ \\\"rulename\\\", ... ],\", {\"array of strings\"}, \"specific block rules that are to be enforced\")\n+            .Row(\"  \\\"vbavailable\\\" : {\", {\"json object\"}, \"set of pending, supported versionbit (BIP 9) softfork deployments\")\n+            .Row(\"      \\\"rulename\\\" : bitnumber\", {\"numeric\"}, \"identifies the bit number as indicating acceptance and readiness for the named softfork rule\")\n+            .Row(\"      ,...\")\n+            .Row(\"  },\")\n+            .Row(\"  \\\"vbrequired\\\" : n,\", {\"numeric\"}, \"bit mask of versionbits the server requires set in submissions\")\n+            .Row(\"  \\\"previousblockhash\\\" : \\\"xxxx\\\",\", {\"string\"}, \"The hash of current highest block\")\n+            .Row(\"  \\\"transactions\\\" : [\", {\"array\"}, \"contents of non-coinbase transactions that should be included in the next block\")\n+            .Row(\"      {\")\n+            .Row(\"         \\\"data\\\" : \\\"xxxx\\\",\", {\"string\"}, \"transaction data encoded in hexadecimal (byte-for-byte)\")\n+            .Row(\"         \\\"txid\\\" : \\\"xxxx\\\",\", {\"string\"}, \"transaction id encoded in little-endian hexadecimal\")\n+            .Row(\"         \\\"hash\\\" : \\\"xxxx\\\",\", {\"string\"}, \"hash encoded in little-endian hexadecimal (including witness data)\")\n+            .Row(\"         \\\"depends\\\" : [\", {\"array\"}, \"array of numbers\")\n+            .Row(\"             n\", {\"numeric\"}, \"transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\")\n+            .Row(\"             ,...\")\n+            .Row(\"         ],\")\n+            .Row(\"         \\\"fee\\\": n,\", {\"numeric\"}, \"difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\")\n+            .Row(\"         \\\"sigops\\\" : n,\", {\"numeric\"}, \"total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\")\n+            .Row(\"         \\\"weight\\\" : n,\", {\"numeric\"}, \"total transaction weight, as counted for purposes of block limits\")\n+            .Row(\"      }\")\n+            .Row(\"      ,...\")\n+            .Row(\"  ],\")\n+            .Row(\"  \\\"coinbaseaux\\\" : {\", {\"json object\"}, \"data that should be included in the coinbase's scriptSig content\")\n+            .Row(\"      \\\"flags\\\" : \\\"xx\\\"\", {\"string\"}, \"key name is to be ignored, and value included in scriptSig\")\n+            .Row(\"  },\")\n+            .Row(\"  \\\"coinbasevalue\\\" : n,\", {\"numeric\"}, \"maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\")\n+            .Row(\"  \\\"coinbasetxn\\\" : { ... },\", {\"json object\"}, \"information for coinbase transaction\")\n+            .Row(\"  \\\"target\\\" : \\\"xxxx\\\",\", {\"string\"}, \"The hash target\")\n+            .Row(\"  \\\"mintime\\\" : xxx,\", {\"numeric\"}, \"The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\")\n+            .Row(\"  \\\"mutable\\\" : [\", {\"array of string\"}, \"list of ways the block template may be changed\")\n+            .Row(\"     \\\"value\\\"\", {\"string\"}, \"A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\")\n+            .Row(\"     ,...\")\n+            .Row(\"  ],\")\n+            .Row(\"  \\\"noncerange\\\" : \\\"00000000ffffffff\\\",\", {\"string\"}, \"A range of valid nonces\")\n+            .Row(\"  \\\"sigoplimit\\\" : n,\", {\"numeric\"}, \"limit of sigops in blocks\")\n+            .Row(\"  \\\"sizelimit\\\" : n,\", {\"numeric\"}, \"limit of block size\")\n+            .Row(\"  \\\"weightlimit\\\" : n,\", {\"numeric\"}, \"limit of block weight\")\n+            .Row(\"  \\\"curtime\\\" : ttt,\", {\"numeric\"}, \"current timestamp in seconds since epoch (Jan 1 1970 GMT)\")\n+            .Row(\"  \\\"bits\\\" : \\\"xxxxxxxx\\\",\", {\"string\"}, \"compressed target of next block\")\n+            .Row(\"  \\\"height\\\" : n\", {\"numeric\"}, \"The height of the next block\")\n+            .Row(\"}\")\n+            .ExampleCli(\"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n+            .ExampleRpc(\"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n+            .AsError();\n \n     LOCK(cs_main);\n \n@@ -699,19 +689,16 @@ static UniValue submitblock(const JSONRPCRequest& request)\n {\n     // We allow 2 arguments for compliance with BIP22. Argument 2 is ignored.\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n-            \"submitblock \\\"hexdata\\\"  ( \\\"dummy\\\" )\\n\"\n-            \"\\nAttempts to submit new block to network.\\n\"\n-            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\"\n-\n-            \"\\nArguments\\n\"\n-            \"1. \\\"hexdata\\\"        (string, required) the hex-encoded block data to submit\\n\"\n-            \"2. \\\"dummy\\\"          (optional) dummy value, for compatibility with BIP22. This value is ignored.\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"submitblock\", \"\\\"mydata\\\"\")\n-            + HelpExampleRpc(\"submitblock\", \"\\\"mydata\\\"\")\n-        );\n+        throw RPCDoc(\"submitblock\", \"\\\"hexdata\\\"  ( \\\"dummy\\\" )\")\n+            .Desc(\n+                \"Attempts to submit new block to network.\\n\"\n+                \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"hexdata\\\"\", {\"string\", \"required\"}, \"the hex-encoded block data to submit\")\n+            .Row(\"2. \\\"dummy\\\"\", {\"optional\"}, \"dummy value, for compatibility with BIP22. This value is ignored.\")\n+            .ExampleCli(\"\\\"mydata\\\"\")\n+            .ExampleRpc(\"\\\"mydata\\\"\")\n+            .AsError();\n     }\n \n     std::shared_ptr<CBlock> blockptr = std::make_shared<CBlock>();\n@@ -763,17 +750,17 @@ static UniValue submitblock(const JSONRPCRequest& request)\n static UniValue submitheader(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n-            \"submitheader \\\"hexdata\\\"\\n\"\n-            \"\\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\"\n-            \"\\nThrows when the header is invalid.\\n\"\n-            \"\\nArguments\\n\"\n-            \"1. \\\"hexdata\\\"        (string, required) the hex-encoded block header data\\n\"\n-            \"\\nResult:\\n\"\n-            \"None\"\n-            \"\\nExamples:\\n\" +\n-            HelpExampleCli(\"submitheader\", \"\\\"aabbcc\\\"\") +\n-            HelpExampleRpc(\"submitheader\", \"\\\"aabbcc\\\"\"));\n+        throw RPCDoc(\"submitheader\", \"\\\"hexdata\\\"\")\n+            .Desc(\n+                \"Decode the given hexdata as a header and submit it as a candidate chain tip if valid.\\n\"\n+                \"Throws when the header is invalid.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"hexdata\\\"\", {\"string\", \"required\"}, \"the hex-encoded block header data\")\n+            .Table(\"Result\")\n+            .Row(\"None\")\n+            .ExampleCli(\"\\\"aabbcc\\\"\")\n+            .ExampleRpc(\"\\\"aabbcc\\\"\")\n+            .AsError();\n     }\n \n     CBlockHeader h;\n@@ -799,37 +786,37 @@ static UniValue submitheader(const JSONRPCRequest& request)\n static UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"estimatesmartfee conf_target (\\\"estimate_mode\\\")\\n\"\n-            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n-            \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n-            \"in BIP 141 (witness data is discounted).\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. conf_target     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n-            \"2. \\\"estimate_mode\\\" (string, optional, default=CONSERVATIVE) The fee estimate mode.\\n\"\n-            \"                   Whether to return a more conservative estimate which also satisfies\\n\"\n-            \"                   a longer history. A conservative estimate potentially returns a\\n\"\n-            \"                   higher feerate and is more likely to be sufficient for the desired\\n\"\n-            \"                   target, but is not as responsive to short term drops in the\\n\"\n-            \"                   prevailing fee market.  Must be one of:\\n\"\n-            \"       \\\"UNSET\\\"\\n\"\n-            \"       \\\"ECONOMICAL\\\"\\n\"\n-            \"       \\\"CONSERVATIVE\\\"\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"errors\\\": [ str... ] (json array of strings, optional) Errors encountered during processing\\n\"\n-            \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n-            \"}\\n\"\n-            \"\\n\"\n-            \"The request target will be clamped between 2 and the highest target\\n\"\n-            \"fee estimation is able to return based on how long it has been running.\\n\"\n-            \"An error is returned if not enough transactions and blocks\\n\"\n-            \"have been observed to make an estimate for any number of blocks.\\n\"\n-            \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimatesmartfee\", \"6\")\n-            );\n+        throw RPCDoc(\"estimatesmartfee\", \"conf_target (\\\"estimate_mode\\\")\")\n+            .Desc(\n+                \"Estimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+                \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n+                \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n+                \"in BIP 141 (witness data is discounted).\\n\"\n+                \"\\n\"\n+                \"The request target will be clamped between 2 and the highest target\\n\"\n+                \"fee estimation is able to return based on how long it has been running.\\n\"\n+                \"An error is returned if not enough transactions and blocks\\n\"\n+                \"have been observed to make an estimate for any number of blocks.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. conf_target\", {\"numeric\"}, \"Confirmation target in blocks (1 - 1008)\")\n+            .Row(\"2. \\\"estimate_mode\\\"\", {\"string\", \"optional\", \"default=CONSERVATIVE\"},\n+                \"The fee estimate mode.\\n\"\n+                \"Whether to return a more conservative estimate which also satisfies\\n\"\n+                \"a longer history. A conservative estimate potentially returns a\\n\"\n+                \"higher feerate and is more likely to be sufficient for the desired\\n\"\n+                \"target, but is not as responsive to short term drops in the\\n\"\n+                \"prevailing fee market.  Must be one of:\\n\"\n+                \"- \\\"UNSET\\\"\\n\"\n+                \"- \\\"ECONOMICAL\\\"\\n\"\n+                \"- \\\"CONSERVATIVE\\\"\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"feerate\\\" : x.x,\", {\"numeric\", \"optional\"}, \"estimate fee rate in \" + CURRENCY_UNIT + \"/kB\")\n+            .Row(\"  \\\"errors\\\": [ str... ]\", {\"json array of strings\", \"optional\"}, \"Errors encountered during processing\")\n+            .Row(\"  \\\"blocks\\\" : n\", {\"numeric\"}, \"block number where estimate was found\")\n+            .Row(\"}\")\n+            .ExampleCli(\"6\")\n+            .AsError();\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n@@ -860,45 +847,48 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n static UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"estimaterawfee conf_target (threshold)\\n\"\n-            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n-            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n-            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n-            \"         and the results it returns will change if the internal implementation changes.\\n\"\n-            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n-            \"defined in BIP 141 (witness data is discounted).\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. conf_target (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n-            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n-            \"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n-            \"               lower buckets.  Default: 0.95\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n-            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"      },\\n\"\n-            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n-            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n-            \"  },\\n\"\n-            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n-            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n-            \"}\\n\"\n-            \"\\n\"\n-            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n-            \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n-            );\n+\n+        throw RPCDoc(\"estimaterawfee\", \"conf_target (threshold)\")\n+            .Desc(\n+                \"WARNING: This interface is unstable and may disappear or change!\\n\"\n+                \"\\n\"\n+                \"WARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+                \"implementation of fee estimation. The parameters it can be called with\\n\"\n+                \"and the results it returns will change if the internal implementation changes.\\n\"\n+                \"\\n\"\n+                \"Estimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+                \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n+                \"defined in BIP 141 (witness data is discounted).\\n\"\n+                \"\\n\"\n+                \"Results are returned for any horizon which tracks blocks up to the confirmation target.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. conf_target\", {\"numeric\"}, \"Confirmation target in blocks (1 - 1008)\")\n+            .Row(\"2. threshold\", {\"numeric\", \"optional\"},\n+                \"The proportion of transactions in a given feerate range that must have been\\n\"\n+                \"confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n+                \"lower buckets.  Default: 0.95\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"short\\\" : {\", {\"json object\", \"optional\"}, \"estimate for short time horizon\")\n+            .Row(\"      \\\"feerate\\\" : x.x,\", {\"numeric\", \"optional\"}, \"estimate fee rate in \" + CURRENCY_UNIT + \"/kB\")\n+            .Row(\"      \\\"decay\\\" : x.x,\", {\"numeric\"}, \"exponential decay (per block) for historical moving average of confirmation data\")\n+            .Row(\"      \\\"scale\\\" : x,\", {\"numeric\"}, \"The resolution of confirmation targets at this time horizon\")\n+            .Row(\"      \\\"pass\\\" : {\", {\"json object\", \"optional\"}, \"information about the lowest range of feerates to succeed in meeting the threshold\")\n+            .Row(\"          \\\"startrange\\\" : x.x,\", {\"numeric\"}, \"start of feerate range\")\n+            .Row(\"          \\\"endrange\\\" : x.x,\", {\"numeric\"}, \"end of feerate range\")\n+            .Row(\"          \\\"withintarget\\\" : x.x,\", {\"numeric\"}, \"number of txs over history horizon in the feerate range that were confirmed within target\")\n+            .Row(\"          \\\"totalconfirmed\\\" : x.x,\", {\"numeric\"}, \"number of txs over history horizon in the feerate range that were confirmed at any point\")\n+            .Row(\"          \\\"inmempool\\\" : x.x,\", {\"numeric\"}, \"current number of txs in mempool in the feerate range unconfirmed for at least target blocks\")\n+            .Row(\"          \\\"leftmempool\\\" : x.x,\", {\"numeric\"}, \"number of txs over history horizon in the feerate range that left mempool unconfirmed after target\")\n+            .Row(\"      },\")\n+            .Row(\"      \\\"fail\\\" : { ... },\", {\"json object\", \"optional\"}, \"information about the highest range of feerates to fail to meet the threshold\")\n+            .Row(\"      \\\"errors\\\":\", \"[ str... ]   (json array of strings, optional) Errors encountered during processing\")\n+            .Row(\"  },\")\n+            .Row(\"  \\\"medium\\\" : { ... },\", {\"json object\", \"optional\"}, \"estimate for medium time horizon\")\n+            .Row(\"  \\\"long\\\" : { ... }\", {\"json object\"}, \"estimate for long time horizon\")\n+            .Row(\"}\")\n+            .ExampleCli(\"6 0.9\")\n+            .AsError();\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);"
      },
      {
        "sha": "9b4a39ecfeeccb99fa75c8529bafcd1ba4855dd7",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 161,
        "deletions": 153,
        "changes": 314,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=a9b9eedc201f08f34cf4a97999dc465a4dd69492",
        "patch": "@@ -7,18 +7,19 @@\n #include <clientversion.h>\n #include <core_io.h>\n #include <crypto/ripemd160.h>\n-#include <key_io.h>\n-#include <validation.h>\n #include <httpserver.h>\n+#include <key_io.h>\n #include <net.h>\n #include <netbase.h>\n #include <outputtype.h>\n #include <rpc/blockchain.h>\n+#include <rpc/doc.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n #include <timedata.h>\n #include <util.h>\n #include <utilstrencodings.h>\n+#include <validation.h>\n #include <warnings.h>\n \n #include <stdint.h>\n@@ -31,29 +32,28 @@\n static UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"validateaddress \\\"address\\\"\\n\"\n-            \"\\nReturn information about the given bitcoin address.\\n\"\n-            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n-            \"transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\\n\"\n-            \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n-            \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n-            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex-encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n-            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n-            + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n-        );\n+        throw RPCDoc(\"validateaddress\", \"\\\"address\\\"\")\n+            .Desc(\n+                \"Return information about the given bitcoin address.\\n\"\n+                \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+                \"transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\\n\"\n+                \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n+                \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"address\\\"\", {\"string\", \"required\"}, \"The bitcoin address to validate\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"isvalid\\\" : true|false,\", {\"boolean\"}, \"If the address is valid or not. If not, this is the only property returned.\")\n+            .Row(\"  \\\"address\\\" : \\\"address\\\",\", {\"string\"}, \"The bitcoin address validated\")\n+            .Row(\"  \\\"scriptPubKey\\\" : \\\"hex\\\",\", {\"string\"}, \"The hex-encoded scriptPubKey generated by the address\")\n+            .Row(\"  \\\"isscript\\\" : true|false,\", {\"boolean\"}, \"If the key is a script\")\n+            .Row(\"  \\\"iswitness\\\" : true|false,\", {\"boolean\"}, \"If the address is a witness address\")\n+            .Row(\"  \\\"witness_version\\\" : version\", {\"numeric\", \"optional\"}, \"The version number of the witness program\")\n+            .Row(\"  \\\"witness_program\\\" : \\\"hex\\\"\", {\"string\", \"optional\"}, \"The hex value of the witness program\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            .ExampleRpc(\"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            .AsError();\n \n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     bool isValid = IsValidDestination(dest);\n@@ -78,31 +78,30 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n     {\n-        std::string msg = \"createmultisig nrequired [\\\"key\\\",...] ( \\\"address_type\\\" )\\n\"\n-            \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n-            \"It returns a json object with the address and redeemScript.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. nrequired                    (numeric, required) The number of required signatures out of the n keys.\\n\"\n-            \"2. \\\"keys\\\"                       (string, required) A json array of hex-encoded public keys\\n\"\n-            \"     [\\n\"\n-            \"       \\\"key\\\"                    (string) The hex-encoded public key\\n\"\n-            \"       ,...\\n\"\n-            \"     ]\\n\"\n-            \"3. \\\"address_type\\\"               (string, optional) The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is legacy.\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new multisig address.\\n\"\n-            \"  \\\"redeemScript\\\":\\\"script\\\"       (string) The string value of the hex-encoded redemption script.\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            \"\\nCreate a multisig address from 2 public keys\\n\"\n-            + HelpExampleCli(\"createmultisig\", \"2 \\\"[\\\\\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\\\\\",\\\\\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\\\\\"]\\\"\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"createmultisig\", \"2, \\\"[\\\\\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\\\\\",\\\\\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\\\\\"]\\\"\")\n-        ;\n-        throw std::runtime_error(msg);\n+        throw RPCDoc(\"createmultisig\", \"nrequired [\\\"key\\\",...] ( \\\"address_type\\\" )\")\n+            .Desc(\n+                \"Creates a multi-signature address with n signature of m keys required.\\n\"\n+                \"It returns a json object with the address and redeemScript.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. nrequired\", {\"numeric\", \"required\"}, \"The number of required signatures out of the n keys.\")\n+            .Row(\"2. \\\"keys\\\"\", {\"string\", \"required\"}, \"A json array of hex-encoded public keys\")\n+            .Row(\"     [\")\n+            .Row(\"       \\\"key\\\"\", {\"string\"}, \"The hex-encoded public key\")\n+            .Row(\"       ,...\")\n+            .Row(\"     ]\")\n+            .Row(\"3. \\\"address_type\\\"\", {\"string\", \"optional\"}, \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is legacy.\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"address\\\":\\\"multisigaddress\\\",\", {\"string\"}, \"The value of the new multisig address.\")\n+            .Row(\"  \\\"redeemScript\\\":\\\"script\\\"\", {\"string\"}, \"The string value of the hex-encoded redemption script.\")\n+            .Row(\"}\")\n+            .ExampleCli(\n+                \"Create a multisig address from 2 public keys\",\n+                \"2 \\\"[\\\\\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\\\\\",\\\\\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\\\\\"]\\\"\")\n+            .ExampleRpc(\n+                \"As a JSON-RPC call\",\n+                \"2 \\\"[\\\\\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\\\\\",\\\\\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\\\\\"]\\\"\")\n+            .AsError();\n     }\n \n     int required = request.params[0].get_int();\n@@ -141,25 +140,29 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n static UniValue verifymessage(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 3)\n-        throw std::runtime_error(\n-            \"verifymessage \\\"address\\\" \\\"signature\\\" \\\"message\\\"\\n\"\n-            \"\\nVerify a signed message\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"         (string, required) The bitcoin address to use for the signature.\\n\"\n-            \"2. \\\"signature\\\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\\n\"\n-            \"3. \\\"message\\\"         (string, required) The message that was signed.\\n\"\n-            \"\\nResult:\\n\"\n-            \"true|false   (boolean) If the signature is verified or not.\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nUnlock the wallet for 30 seconds\\n\"\n-            + HelpExampleCli(\"walletpassphrase\", \"\\\"mypassphrase\\\" 30\") +\n-            \"\\nCreate the signature\\n\"\n-            + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"my message\\\"\") +\n-            \"\\nVerify the signature\\n\"\n-            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"signature\\\", \\\"my message\\\"\")\n-        );\n+        throw RPCDoc(\"verifymessage\", \"\\\"address\\\" \\\"signature\\\" \\\"message\\\"\")\n+            .Desc(\"Verify a signed message\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"address\\\"\", {\"string\", \"required\"}, \"The bitcoin address to use for the signature.\")\n+            .Row(\"2. \\\"signature\\\"\", {\"string\", \"required\"}, \"The signature provided by the signer in base 64 encoding (see signmessage).\")\n+            .Row(\"3. \\\"message\\\"\", {\"string\", \"required\"}, \"The message that was signed.\")\n+            .Table(\"Result\")\n+            .Row(\"true|false\", {\"boolean\"}, \"If the signature is verified or not.\")\n+            .ExampleCli(\n+                \"Unlock the wallet for 30 seconds\",\n+                \"walletpassphrase\",\n+                \"\\\"mypassphrase\\\" 30\")\n+            .ExampleCli(\n+                \"Create the signature\",\n+                \"signmessage\",\n+                \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"my message\\\"\")\n+            .ExampleCli(\n+                \"Verify the signature\",\n+                \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\")\n+            .ExampleRpc(\n+                \"As a JSON-RPC call\",\n+                \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"signature\\\", \\\"my message\\\"\")\n+            .AsError();\n \n     LOCK(cs_main);\n \n@@ -197,22 +200,24 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 2)\n-        throw std::runtime_error(\n-            \"signmessagewithprivkey \\\"privkey\\\" \\\"message\\\"\\n\"\n-            \"\\nSign a message with the private key of an address\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"privkey\\\"         (string, required) The private key to sign the message with.\\n\"\n-            \"2. \\\"message\\\"         (string, required) The message to create a signature of.\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nCreate the signature\\n\"\n-            + HelpExampleCli(\"signmessagewithprivkey\", \"\\\"privkey\\\" \\\"my message\\\"\") +\n-            \"\\nVerify the signature\\n\"\n-            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"signmessagewithprivkey\", \"\\\"privkey\\\", \\\"my message\\\"\")\n-        );\n+        throw RPCDoc(\"signmessagewithprivkey\", \"\\\"privkey\\\" \\\"message\\\"\")\n+            .Desc(\"Sign a message with the private key of an address\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"privkey\\\"\", {\"string\", \"required\"}, \"The private key to sign the message with.\")\n+            .Row(\"2. \\\"message\\\"\", {\"string\", \"required\"}, \"The message to create a signature of.\")\n+            .Table(\"Result\")\n+            .Row(\"\\\"signature\\\"\", {\"string\"}, \"The signature of the message encoded in base 64\")\n+            .ExampleCli(\n+                \"Create the signature\",\n+                \"\\\"privkey\\\" \\\"my message\\\"\")\n+            .ExampleCli(\n+                \"Verify the signature\",\n+                \"verifymessage\",\n+                \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\")\n+            .ExampleRpc(\n+                \"As a JSON-RPC call\",\n+                \"\\\"privkey\\\", \\\"my message\\\"\")\n+            .AsError();\n \n     std::string strPrivkey = request.params[0].get_str();\n     std::string strMessage = request.params[1].get_str();\n@@ -236,13 +241,14 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n static UniValue setmocktime(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"setmocktime timestamp\\n\"\n-            \"\\nSet the local time to given timestamp (-regtest only)\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. timestamp  (integer, required) Unix seconds-since-epoch timestamp\\n\"\n-            \"   Pass 0 to go back to using the system time.\"\n-        );\n+        throw RPCDoc(\"setmocktime\", \"timestamp\")\n+            .Desc(\"Set the local time to given timestamp (-regtest only)\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. timestamp\", {\"integer\", \"required\"},\n+                \"Unix seconds-since-epoch timestamp\\n\"\n+                \"\\n\"\n+                \"Pass 0 to go back to using the system time.\")\n+            .AsError();\n \n     if (!Params().MineBlocksOnDemand())\n         throw std::runtime_error(\"setmocktime for regression testing (-regtest mode) only\");\n@@ -298,30 +304,29 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n      * as users will undoubtedly confuse it with the other \"memory pool\"\n      */\n     if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n-            \"getmemoryinfo (\\\"mode\\\")\\n\"\n-            \"Returns an object containing information about memory usage.\\n\"\n-            \"Arguments:\\n\"\n-            \"1. \\\"mode\\\" determines what kind of information is returned. This argument is optional, the default mode is \\\"stats\\\".\\n\"\n-            \"  - \\\"stats\\\" returns general statistics about memory usage in the daemon.\\n\"\n-            \"  - \\\"mallocinfo\\\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\\n\"\n-            \"\\nResult (mode \\\"stats\\\"):\\n\"\n-            \"{\\n\"\n-            \"  \\\"locked\\\": {               (json object) Information about locked memory manager\\n\"\n-            \"    \\\"used\\\": xxxxx,          (numeric) Number of bytes used\\n\"\n-            \"    \\\"free\\\": xxxxx,          (numeric) Number of bytes available in current arenas\\n\"\n-            \"    \\\"total\\\": xxxxxxx,       (numeric) Total number of bytes managed\\n\"\n-            \"    \\\"locked\\\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\\n\"\n-            \"    \\\"chunks_used\\\": xxxxx,   (numeric) Number allocated chunks\\n\"\n-            \"    \\\"chunks_free\\\": xxxxx,   (numeric) Number unused chunks\\n\"\n-            \"  }\\n\"\n-            \"}\\n\"\n-            \"\\nResult (mode \\\"mallocinfo\\\"):\\n\"\n-            \"\\\"<malloc version=\\\"1\\\">...\\\"\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmemoryinfo\", \"\")\n-            + HelpExampleRpc(\"getmemoryinfo\", \"\")\n-        );\n+        throw RPCDoc(\"getmemoryinfo\", \"(\\\"mode\\\")\")\n+            .Desc(\"Returns an object containing information about memory usage.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"mode\\\"\", \"determines what kind of information is returned. This argument is optional, the default mode is \\\"stats\\\".\")\n+            .Table(\"Modes\")\n+            .Row(\"stats\", \"returns general statistics about memory usage in the daemon.\")\n+            .Row(\"mallocinfo\", \"returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\")\n+            .Table(\"Result (mode \\\"stats\\\")\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"locked\\\": {\", {\"json object\"}, \"Information about locked memory manager\")\n+            .Row(\"    \\\"used\\\": xxxxx,\", {\"numeric\"}, \"Number of bytes used\")\n+            .Row(\"    \\\"free\\\": xxxxx,\", {\"numeric\"}, \"Number of bytes available in current arenas\")\n+            .Row(\"    \\\"total\\\": xxxxxxx,\", {\"numeric\"}, \"Total number of bytes managed\")\n+            .Row(\"    \\\"locked\\\": xxxxxx,\", {\"numeric\"}, \"Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\")\n+            .Row(\"    \\\"chunks_used\\\": xxxxx,\", {\"numeric\"}, \"Number allocated chunks\")\n+            .Row(\"    \\\"chunks_free\\\": xxxxx,\", {\"numeric\"}, \"Number unused chunks\")\n+            .Row(\"  }\")\n+            .Row(\"}\")\n+            .Table(\"Result (mode \\\"mallocinfo\\\")\")\n+            .Row(\"\\\"<malloc version=\\\"1\\\">...\\\"\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     std::string mode = request.params[0].isNull() ? \"stats\" : request.params[0].get_str();\n     if (mode == \"stats\") {\n@@ -360,37 +365,41 @@ static void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n UniValue logging(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2) {\n-        throw std::runtime_error(\n-            \"logging ( <include> <exclude> )\\n\"\n-            \"Gets and sets the logging configuration.\\n\"\n-            \"When called without an argument, returns the list of categories with status that are currently being debug logged or not.\\n\"\n-            \"When called with arguments, adds or removes categories from debug logging and return the lists above.\\n\"\n-            \"The arguments are evaluated in order \\\"include\\\", \\\"exclude\\\".\\n\"\n-            \"If an item is both included and excluded, it will thus end up being excluded.\\n\"\n-            \"The valid logging categories are: \" + ListLogCategories() + \"\\n\"\n-            \"In addition, the following are available as category names with special meanings:\\n\"\n-            \"  - \\\"all\\\",  \\\"1\\\" : represent all logging categories.\\n\"\n-            \"  - \\\"none\\\", \\\"0\\\" : even if other logging categories are specified, ignore all of them.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"include\\\"        (array of strings, optional) A json array of categories to add debug logging\\n\"\n-            \"     [\\n\"\n-            \"       \\\"category\\\"   (string) the valid logging category\\n\"\n-            \"       ,...\\n\"\n-            \"     ]\\n\"\n-            \"2. \\\"exclude\\\"        (array of strings, optional) A json array of categories to remove debug logging\\n\"\n-            \"     [\\n\"\n-            \"       \\\"category\\\"   (string) the valid logging category\\n\"\n-            \"       ,...\\n\"\n-            \"     ]\\n\"\n-            \"\\nResult:\\n\"\n-            \"{                   (json object where keys are the logging categories, and values indicates its status\\n\"\n-            \"  \\\"category\\\": 0|1,  (numeric) if being debug logged or not. 0:inactive, 1:active\\n\"\n-            \"  ...\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"logging\", \"\\\"[\\\\\\\"all\\\\\\\"]\\\" \\\"[\\\\\\\"http\\\\\\\"]\\\"\")\n-            + HelpExampleRpc(\"logging\", \"[\\\"all\\\"], \\\"[libevent]\\\"\")\n-        );\n+        throw RPCDoc(\"logging\", \"( <include> <exclude> )\")\n+            .Desc(\n+                \"Gets and sets the logging configuration.\\n\"\n+                \"\\n\"\n+                \"When called without an argument, returns the list of categories with status that are currently being debug logged or not.\\n\"\n+                \"\\n\"\n+                \"When called with arguments, adds or removes categories from debug logging and return the lists above.\\n\"\n+                \"\\n\"\n+                \"The arguments are evaluated in order `include`, `exclude`.\\n\"\n+                \"If an item is both included and excluded, it will thus end up being excluded.\\n\"\n+                \"The valid logging categories are: \" +\n+                ListLogCategories() + \"\\n\"\n+                                      \"\\n\"\n+                                      \"In addition, the following are available as category names with special meanings:\\n\"\n+                                      \"- `all`,  `1` : represent all logging categories.\\n\"\n+                                      \"- `none`, `0` : even if other logging categories are specified, ignore all of them.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"include\\\"\", {\"array of strings\", \"optional\"}, \"A json array of categories to add debug logging\")\n+            .Row(\"     [\")\n+            .Row(\"       \\\"category\\\"\", {\"string\"}, \"the valid logging category\")\n+            .Row(\"       ,...\")\n+            .Row(\"     ]\")\n+            .Row(\"2. \\\"exclude\\\"\", {\"array of strings\", \"optional\"}, \"A json array of categories to remove debug logging\")\n+            .Row(\"     [\")\n+            .Row(\"       \\\"category\\\"\", {\"string\"}, \"the valid logging category\")\n+            .Row(\"       ,...\")\n+            .Row(\"     ]\")\n+            .Table(\"Result\")\n+            .Row(\"{\", {\"json\"}, \"object where keys are the logging categories, and values indicates its status\")\n+            .Row(\"  \\\"category\\\": 0|1,\", {\"numeric\"}, \"if being debug logged or not. 0:inactive, 1:active\")\n+            .Row(\"  ...\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"[\\\\\\\"all\\\\\\\"]\\\" \\\"[\\\\\\\"http\\\\\\\"]\\\"\")\n+            .ExampleRpc(\"[\\\"all\\\"], \\\"[libevent]\\\"\")\n+            .AsError();\n     }\n \n     uint32_t original_log_categories = g_logger->GetCategoryMask();\n@@ -429,12 +438,11 @@ UniValue logging(const JSONRPCRequest& request)\n static UniValue echo(const JSONRPCRequest& request)\n {\n     if (request.fHelp)\n-        throw std::runtime_error(\n-            \"echo|echojson \\\"message\\\" ...\\n\"\n-            \"\\nSimply echo back the input arguments. This command is for testing.\\n\"\n-            \"\\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in\"\n-            \"bitcoin-cli and the GUI. There is no server-side difference.\"\n-        );\n+        throw RPCDoc(\"echo|echojson\", \"\\\"message\\\" ...\")\n+            .Desc(\n+                \"Simply echo back the input arguments. This command is for testing.\\n\"\n+                \"The difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in bitcoin-cli and the GUI. There is no server-side difference.\")\n+            .AsError();\n \n     return request.params;\n }"
      },
      {
        "sha": "a1a11e2a483dd7d9864799736646de6fa42d0cff",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 226,
        "deletions": 235,
        "changes": 461,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=a9b9eedc201f08f34cf4a97999dc465a4dd69492",
        "patch": "@@ -7,17 +7,18 @@\n #include <chainparams.h>\n #include <clientversion.h>\n #include <core_io.h>\n-#include <validation.h>\n #include <net.h>\n #include <net_processing.h>\n #include <netbase.h>\n #include <policy/policy.h>\n+#include <rpc/doc.h>\n #include <rpc/protocol.h>\n #include <sync.h>\n #include <timedata.h>\n #include <ui_interface.h>\n #include <util.h>\n #include <utilstrencodings.h>\n+#include <validation.h>\n #include <version.h>\n #include <warnings.h>\n \n@@ -26,15 +27,13 @@\n static UniValue getconnectioncount(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"getconnectioncount\\n\"\n-            \"\\nReturns the number of connections to other nodes.\\n\"\n-            \"\\nResult:\\n\"\n-            \"n          (numeric) The connection count\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getconnectioncount\", \"\")\n-            + HelpExampleRpc(\"getconnectioncount\", \"\")\n-        );\n+        throw RPCDoc(\"getconnectioncount\")\n+            .Desc(\"Returns the number of connections to other nodes.\")\n+            .Table(\"Result\")\n+            .Row(\"n\", {\"numeric\"}, \"The connection count\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -45,15 +44,14 @@ static UniValue getconnectioncount(const JSONRPCRequest& request)\n static UniValue ping(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"ping\\n\"\n-            \"\\nRequests that a ping be sent to all other nodes, to measure ping time.\\n\"\n-            \"Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\\n\"\n-            \"Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"ping\", \"\")\n-            + HelpExampleRpc(\"ping\", \"\")\n-        );\n+        throw RPCDoc(\"ping\")\n+            .Desc(\n+                \"Requests that a ping be sent to all other nodes, to measure ping time.\\n\"\n+                \"Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\\n\"\n+                \"Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -68,56 +66,54 @@ static UniValue ping(const JSONRPCRequest& request)\n static UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"getpeerinfo\\n\"\n-            \"\\nReturns data about each connected network node as a json array of objects.\\n\"\n-            \"\\nResult:\\n\"\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"id\\\": n,                   (numeric) Peer index\\n\"\n-            \"    \\\"addr\\\":\\\"host:port\\\",      (string) The IP address and port of the peer\\n\"\n-            \"    \\\"addrbind\\\":\\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n-            \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"\n-            \"    \\\"services\\\":\\\"xxxxxxxxxxxxxxxx\\\",   (string) The services offered\\n\"\n-            \"    \\\"relaytxes\\\":true|false,    (boolean) Whether peer has asked us to relay transactions to it\\n\"\n-            \"    \\\"lastsend\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\\n\"\n-            \"    \\\"lastrecv\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\\n\"\n-            \"    \\\"bytessent\\\": n,            (numeric) The total bytes sent\\n\"\n-            \"    \\\"bytesrecv\\\": n,            (numeric) The total bytes received\\n\"\n-            \"    \\\"conntime\\\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"    \\\"timeoffset\\\": ttt,         (numeric) The time offset in seconds\\n\"\n-            \"    \\\"pingtime\\\": n,             (numeric) ping time (if available)\\n\"\n-            \"    \\\"minping\\\": n,              (numeric) minimum observed ping time (if any at all)\\n\"\n-            \"    \\\"pingwait\\\": n,             (numeric) ping wait (if non-zero)\\n\"\n-            \"    \\\"version\\\": v,              (numeric) The peer version, such as 70001\\n\"\n-            \"    \\\"subver\\\": \\\"/Satoshi:0.8.5/\\\",  (string) The string version\\n\"\n-            \"    \\\"inbound\\\": true|false,     (boolean) Inbound (true) or Outbound (false)\\n\"\n-            \"    \\\"addnode\\\": true|false,     (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection\\n\"\n-            \"    \\\"startingheight\\\": n,       (numeric) The starting height (block) of the peer\\n\"\n-            \"    \\\"banscore\\\": n,             (numeric) The ban score\\n\"\n-            \"    \\\"synced_headers\\\": n,       (numeric) The last header we have in common with this peer\\n\"\n-            \"    \\\"synced_blocks\\\": n,        (numeric) The last block we have in common with this peer\\n\"\n-            \"    \\\"inflight\\\": [\\n\"\n-            \"       n,                        (numeric) The heights of blocks we're currently asking from this peer\\n\"\n-            \"       ...\\n\"\n-            \"    ],\\n\"\n-            \"    \\\"whitelisted\\\": true|false, (boolean) Whether the peer is whitelisted\\n\"\n-            \"    \\\"minfeefilter\\\": n,         (numeric) The minimum fee rate for transactions this peer accepts\\n\"\n-            \"    \\\"bytessent_per_msg\\\": {\\n\"\n-            \"       \\\"addr\\\": n,              (numeric) The total bytes sent aggregated by message type\\n\"\n-            \"       ...\\n\"\n-            \"    },\\n\"\n-            \"    \\\"bytesrecv_per_msg\\\": {\\n\"\n-            \"       \\\"addr\\\": n,              (numeric) The total bytes received aggregated by message type\\n\"\n-            \"       ...\\n\"\n-            \"    }\\n\"\n-            \"  }\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getpeerinfo\", \"\")\n-            + HelpExampleRpc(\"getpeerinfo\", \"\")\n-        );\n+        throw RPCDoc(\"getpeerinfo\")\n+            .Desc(\"Returns data about each connected network node as a json array of objects.\")\n+            .Table(\"Result\")\n+            .Row(\"[\")\n+            .Row(\"  {\")\n+            .Row(\"    \\\"id\\\": n,\", {\"numeric\"}, \"Peer index\")\n+            .Row(\"    \\\"addr\\\":\\\"host:port\\\",\", {\"string\"}, \"The IP address and port of the peer\")\n+            .Row(\"    \\\"addrbind\\\":\\\"ip:port\\\",\", {\"string\"}, \"Bind address of the connection to the peer\")\n+            .Row(\"    \\\"addrlocal\\\":\\\"ip:port\\\",\", {\"string\"}, \"Local address as reported by the peer\")\n+            .Row(\"    \\\"services\\\":\\\"xxxxxxxxxxxxxxxx\\\",\", {\"string\"}, \"The services offered\")\n+            .Row(\"    \\\"relaytxes\\\":true|false,\", {\"boolean\"}, \"Whether peer has asked us to relay transactions to it\")\n+            .Row(\"    \\\"lastsend\\\": ttt,\", {\"numeric\"}, \"The time in seconds since epoch (Jan 1 1970 GMT) of the last send\")\n+            .Row(\"    \\\"lastrecv\\\": ttt,\", {\"numeric\"}, \"The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\")\n+            .Row(\"    \\\"bytessent\\\": n,\", {\"numeric\"}, \"The total bytes sent\")\n+            .Row(\"    \\\"bytesrecv\\\": n,\", {\"numeric\"}, \"The total bytes received\")\n+            .Row(\"    \\\"conntime\\\": ttt,\", {\"numeric\"}, \"The connection time in seconds since epoch (Jan 1 1970 GMT)\")\n+            .Row(\"    \\\"timeoffset\\\": ttt,\", {\"numeric\"}, \"The time offset in seconds\")\n+            .Row(\"    \\\"pingtime\\\": n,\", {\"numeric\"}, \"ping time (if available)\")\n+            .Row(\"    \\\"minping\\\": n,\", {\"numeric\"}, \"minimum observed ping time (if any at all)\")\n+            .Row(\"    \\\"pingwait\\\": n,\", {\"numeric\"}, \"ping wait (if non-zero)\")\n+            .Row(\"    \\\"version\\\": v,\", {\"numeric\"}, \"The peer version, such as 70001\")\n+            .Row(\"    \\\"subver\\\": \\\"/Satoshi:0.8.5/\\\",\", {\"string\"}, \"The string version\")\n+            .Row(\"    \\\"inbound\\\": true|false,\", {\"boolean\"}, \"Inbound (true) or Outbound (false)\")\n+            .Row(\"    \\\"addnode\\\": true|false,\", {\"boolean\"}, \"Whether connection was due to addnode/-connect or if it was an automatic/inbound connection\")\n+            .Row(\"    \\\"startingheight\\\": n,\", {\"numeric\"}, \"The starting height (block) of the peer\")\n+            .Row(\"    \\\"banscore\\\": n,\", {\"numeric\"}, \"The ban score\")\n+            .Row(\"    \\\"synced_headers\\\": n,\", {\"numeric\"}, \"The last header we have in common with this peer\")\n+            .Row(\"    \\\"synced_blocks\\\": n,\", {\"numeric\"}, \"The last block we have in common with this peer\")\n+            .Row(\"    \\\"inflight\\\": [\")\n+            .Row(\"       n,\", {\"numeric\"}, \"The heights of blocks we're currently asking from this peer\")\n+            .Row(\"       ...\")\n+            .Row(\"    ],\")\n+            .Row(\"    \\\"whitelisted\\\": true|false,\", {\"boolean\"}, \"Whether the peer is whitelisted\")\n+            .Row(\"    \\\"minfeefilter\\\": n,\", {\"numeric\"}, \"The minimum fee rate for transactions this peer accepts\")\n+            .Row(\"    \\\"bytessent_per_msg\\\": {\")\n+            .Row(\"       \\\"addr\\\": n,\", {\"numeric\"}, \"The total bytes sent aggregated by message type\")\n+            .Row(\"       ...\")\n+            .Row(\"    },\")\n+            .Row(\"    \\\"bytesrecv_per_msg\\\": {\")\n+            .Row(\"       \\\"addr\\\": n,\", {\"numeric\"}, \"The total bytes received aggregated by message type\")\n+            .Row(\"       ...\")\n+            .Row(\"    }\")\n+            .Row(\"  }\")\n+            .Row(\"  ,...\")\n+            .Row(\"]\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -199,19 +195,18 @@ static UniValue addnode(const JSONRPCRequest& request)\n         strCommand = request.params[1].get_str();\n     if (request.fHelp || request.params.size() != 2 ||\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n-        throw std::runtime_error(\n-            \"addnode \\\"node\\\" \\\"add|remove|onetry\\\"\\n\"\n-            \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n-            \"Or try a connection to a node once.\\n\"\n-            \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n-            \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n-            \"2. \\\"command\\\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"addnode\", \"\\\"192.168.0.6:8333\\\" \\\"onetry\\\"\")\n-            + HelpExampleRpc(\"addnode\", \"\\\"192.168.0.6:8333\\\", \\\"onetry\\\"\")\n-        );\n+        throw RPCDoc(\"addnode\", \"\\\"node\\\" \\\"add|remove|onetry\\\"\")\n+            .Desc(\n+                \"Attempts to add or remove a node from the addnode list.\\n\"\n+                \"Or try a connection to a node once.\\n\"\n+                \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n+                \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"node\\\"\", {\"string\", \"required\"}, \"The node (see getpeerinfo for nodes)\")\n+            .Row(\"2. \\\"command\\\"\", {\"string\", \"required\"}, \"'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\")\n+            .ExampleCli(\"\\\"192.168.0.6:8333\\\" \\\"onetry\\\"\")\n+            .ExampleRpc(\"\\\"192.168.0.6:8333\\\", \\\"onetry\\\"\")\n+            .AsError();\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -242,20 +237,21 @@ static UniValue addnode(const JSONRPCRequest& request)\n static UniValue disconnectnode(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() == 0 || request.params.size() >= 3)\n-        throw std::runtime_error(\n-            \"disconnectnode \\\"[address]\\\" [nodeid]\\n\"\n-            \"\\nImmediately disconnects from the specified peer node.\\n\"\n-            \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n-            \"\\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, optional) The IP address/port of the node\\n\"\n-            \"2. \\\"nodeid\\\"      (number, optional) The node ID (see getpeerinfo for node IDs)\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n-            + HelpExampleCli(\"disconnectnode\", \"\\\"\\\" 1\")\n-            + HelpExampleRpc(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n-            + HelpExampleRpc(\"disconnectnode\", \"\\\"\\\", 1\")\n-        );\n+        throw RPCDoc(\"disconnectnode\", \"\\\"[address]\\\" [nodeid]\")\n+            .Desc(\n+                \"Immediately disconnects from the specified peer node.\\n\"\n+                \"\\n\"\n+                \"Strictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n+                \"\\n\"\n+                \"To disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"address\\\"\", {\"string\", \"optional\"}, \"The IP address/port of the node\")\n+            .Row(\"2. \\\"nodeid\\\"\", {\"number\", \"optional\"}, \"The node ID (see getpeerinfo for node IDs)\")\n+            .ExampleCli(\"\\\"192.168.0.6:8333\\\"\")\n+            .ExampleCli(\"\\\"\\\" 1\")\n+            .ExampleRpc(\"\\\"192.168.0.6:8333\\\"\")\n+            .ExampleRpc(\"\\\"\\\", 1\")\n+            .AsError();\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -285,30 +281,29 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n-            \"getaddednodeinfo ( \\\"node\\\" )\\n\"\n-            \"\\nReturns information about the given added node, or all added nodes\\n\"\n-            \"(note that onetry addnodes are not listed here)\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"node\\\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.\\n\"\n-            \"\\nResult:\\n\"\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"addednode\\\" : \\\"192.168.0.201\\\",   (string) The node IP address or name (as provided to addnode)\\n\"\n-            \"    \\\"connected\\\" : true|false,          (boolean) If connected\\n\"\n-            \"    \\\"addresses\\\" : [                    (list of objects) Only when connected = true\\n\"\n-            \"       {\\n\"\n-            \"         \\\"address\\\" : \\\"192.168.0.201:8333\\\",  (string) The bitcoin server IP and port we're connected to\\n\"\n-            \"         \\\"connected\\\" : \\\"outbound\\\"           (string) connection, inbound or outbound\\n\"\n-            \"       }\\n\"\n-            \"     ]\\n\"\n-            \"  }\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n-            + HelpExampleRpc(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n-        );\n+        throw RPCDoc(\"getaddednodeinfo\", \"( \\\"node\\\" )\")\n+            .Desc(\n+                \"Returns information about the given added node, or all added nodes\\n\"\n+                \"(note that onetry addnodes are not listed here)\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"node\\\"\", {\"string\", \"optional\"}, \"If provided, return information about this specific node, otherwise all nodes are returned.\")\n+            .Table(\"Result\")\n+            .Row(\"[\")\n+            .Row(\"  {\")\n+            .Row(\"    \\\"addednode\\\" : \\\"192.168.0.201\\\",\", {\"string\"}, \"The node IP address or name (as provided to addnode)\")\n+            .Row(\"    \\\"connected\\\" : true|false,\", {\"boolean\"}, \"If connected\")\n+            .Row(\"    \\\"addresses\\\" : [\", {\"list of objects\"}, \"Only when connected = true\")\n+            .Row(\"       {\")\n+            .Row(\"         \\\"address\\\" : \\\"192.168.0.201:8333\\\",\", {\"string\"}, \"The bitcoin server IP and port we're connected to\")\n+            .Row(\"         \\\"connected\\\" : \\\"outbound\\\"\", {\"string\"}, \"connection, inbound or outbound\")\n+            .Row(\"       }\")\n+            .Row(\"     ]\")\n+            .Row(\"  }\")\n+            .Row(\"  ,...\")\n+            .Row(\"]\")\n+            .ExampleCli(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n+            .ExampleRpc(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n+            .AsError();\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -352,29 +347,29 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n static UniValue getnettotals(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 0)\n-        throw std::runtime_error(\n-            \"getnettotals\\n\"\n-            \"\\nReturns information about network traffic, including bytes in, bytes out,\\n\"\n-            \"and current time.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"totalbytesrecv\\\": n,   (numeric) Total bytes received\\n\"\n-            \"  \\\"totalbytessent\\\": n,   (numeric) Total bytes sent\\n\"\n-            \"  \\\"timemillis\\\": t,       (numeric) Current UNIX time in milliseconds\\n\"\n-            \"  \\\"uploadtarget\\\":\\n\"\n-            \"  {\\n\"\n-            \"    \\\"timeframe\\\": n,                         (numeric) Length of the measuring timeframe in seconds\\n\"\n-            \"    \\\"target\\\": n,                            (numeric) Target in bytes\\n\"\n-            \"    \\\"target_reached\\\": true|false,           (boolean) True if target is reached\\n\"\n-            \"    \\\"serve_historical_blocks\\\": true|false,  (boolean) True if serving historical blocks\\n\"\n-            \"    \\\"bytes_left_in_cycle\\\": t,               (numeric) Bytes left in current time cycle\\n\"\n-            \"    \\\"time_left_in_cycle\\\": t                 (numeric) Seconds left in current time cycle\\n\"\n-            \"  }\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getnettotals\", \"\")\n-            + HelpExampleRpc(\"getnettotals\", \"\")\n-       );\n+        throw RPCDoc(\"getnettotals\")\n+            .Desc(\n+                \"Returns information about network traffic, including bytes in, bytes out,\\n\"\n+                \"and current time.\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"totalbytesrecv\\\": n,\", {\"numeric\"}, \"Total bytes received\")\n+            .Row(\"  \\\"totalbytessent\\\": n,\", {\"numeric\"}, \"Total bytes sent\")\n+            .Row(\"  \\\"timemillis\\\": t,\", {\"numeric\"}, \"Current UNIX time in milliseconds\")\n+            .Row(\"  \\\"uploadtarget\\\":\")\n+            .Row(\"  {\")\n+            .Row(\"    \\\"timeframe\\\": n,\", {\"numeric\"}, \"Length of the measuring timeframe in seconds\")\n+            .Row(\"    \\\"target\\\": n,\", {\"numeric\"}, \"Target in bytes\")\n+            .Row(\"    \\\"target_reached\\\": true|false,\", {\"boolean\"}, \"True if target is reached\")\n+            .Row(\"    \\\"serve_historical_blocks\\\": true|false,\", {\"boolean\"}, \"True if serving historical blocks\")\n+            .Row(\"    \\\"bytes_left_in_cycle\\\": t,\", {\"numeric\"}, \"Bytes left in current time cycle\")\n+            .Row(\"    \\\"time_left_in_cycle\\\": t\", {\"numeric\"}, \"Seconds left in current time cycle\")\n+            .Row(\"  }\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n+\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -418,45 +413,43 @@ static UniValue GetNetworksInfo()\n static UniValue getnetworkinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"getnetworkinfo\\n\"\n-            \"Returns an object containing various state info regarding P2P networking.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"version\\\": xxxxx,                      (numeric) the server version\\n\"\n-            \"  \\\"subversion\\\": \\\"/Satoshi:x.x.x/\\\",     (string) the server subversion string\\n\"\n-            \"  \\\"protocolversion\\\": xxxxx,              (numeric) the protocol version\\n\"\n-            \"  \\\"localservices\\\": \\\"xxxxxxxxxxxxxxxx\\\", (string) the services we offer to the network\\n\"\n-            \"  \\\"localrelay\\\": true|false,              (bool) true if transaction relay is requested from peers\\n\"\n-            \"  \\\"timeoffset\\\": xxxxx,                   (numeric) the time offset\\n\"\n-            \"  \\\"connections\\\": xxxxx,                  (numeric) the number of connections\\n\"\n-            \"  \\\"networkactive\\\": true|false,           (bool) whether p2p networking is enabled\\n\"\n-            \"  \\\"networks\\\": [                          (array) information per network\\n\"\n-            \"  {\\n\"\n-            \"    \\\"name\\\": \\\"xxx\\\",                     (string) network (ipv4, ipv6 or onion)\\n\"\n-            \"    \\\"limited\\\": true|false,               (boolean) is the network limited using -onlynet?\\n\"\n-            \"    \\\"reachable\\\": true|false,             (boolean) is the network reachable?\\n\"\n-            \"    \\\"proxy\\\": \\\"host:port\\\"               (string) the proxy that is used for this network, or empty if none\\n\"\n-            \"    \\\"proxy_randomize_credentials\\\": true|false,  (string) Whether randomized credentials are used\\n\"\n-            \"  }\\n\"\n-            \"  ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"incrementalfee\\\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"localaddresses\\\": [                    (array) list of local addresses\\n\"\n-            \"  {\\n\"\n-            \"    \\\"address\\\": \\\"xxxx\\\",                 (string) network address\\n\"\n-            \"    \\\"port\\\": xxx,                         (numeric) network port\\n\"\n-            \"    \\\"score\\\": xxx                         (numeric) relative score\\n\"\n-            \"  }\\n\"\n-            \"  ,...\\n\"\n-            \"  ]\\n\"\n-            \"  \\\"warnings\\\": \\\"...\\\"                    (string) any network and blockchain warnings\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getnetworkinfo\", \"\")\n-            + HelpExampleRpc(\"getnetworkinfo\", \"\")\n-        );\n+        throw RPCDoc(\"getnetworkinfo\")\n+            .Desc(\"Returns an object containing various state info regarding P2P networking.\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"version\\\": xxxxx,\", {\"numeric\"}, \"the server version\")\n+            .Row(\"  \\\"subversion\\\": \\\"/Satoshi:x.x.x/\\\",\", {\"string\"}, \"the server subversion string\")\n+            .Row(\"  \\\"protocolversion\\\": xxxxx,\", {\"numeric\"}, \"the protocol version\")\n+            .Row(\"  \\\"localservices\\\": \\\"xxxxxxxxxxxxxxxx\\\",\", {\"string\"}, \"the services we offer to the network\")\n+            .Row(\"  \\\"localrelay\\\": true|false,\", {\"bool\"}, \"true if transaction relay is requested from peers\")\n+            .Row(\"  \\\"timeoffset\\\": xxxxx,\", {\"numeric\"}, \"the time offset\")\n+            .Row(\"  \\\"connections\\\": xxxxx,\", {\"numeric\"}, \"the number of connections\")\n+            .Row(\"  \\\"networkactive\\\": true|false,\", {\"bool\"}, \"whether p2p networking is enabled\")\n+            .Row(\"  \\\"networks\\\": [\", {\"array\"}, \"information per network\")\n+            .Row(\"  {\")\n+            .Row(\"    \\\"name\\\": \\\"xxx\\\",\", {\"string\"}, \"network (ipv4, ipv6 or onion)\")\n+            .Row(\"    \\\"limited\\\": true|false,\", {\"boolean\"}, \"is the network limited using -onlynet?\")\n+            .Row(\"    \\\"reachable\\\": true|false,\", {\"boolean\"}, \"is the network reachable?\")\n+            .Row(\"    \\\"proxy\\\": \\\"host:port\\\"\", {\"string\"}, \"the proxy that is used for this network, or empty if none\")\n+            .Row(\"    \\\"proxy_randomize_credentials\\\": true|false,\", {\"string\"}, \"Whether randomized credentials are used\")\n+            .Row(\"  }\")\n+            .Row(\"  ,...\")\n+            .Row(\"  ],\")\n+            .Row(\"  \\\"relayfee\\\": x.xxxxxxxx,\", {\"numeric\"}, \"minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kB\")\n+            .Row(\"  \\\"incrementalfee\\\": x.xxxxxxxx,\", {\"numeric\"}, \"minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kB\")\n+            .Row(\"  \\\"localaddresses\\\": [\", {\"array\"}, \"list of local addresses\")\n+            .Row(\"  {\")\n+            .Row(\"    \\\"address\\\": \\\"xxxx\\\",\", {\"string\"}, \"network address\")\n+            .Row(\"    \\\"port\\\": xxx,\", {\"numeric\"}, \"network port\")\n+            .Row(\"    \\\"score\\\": xxx\", {\"numeric\"}, \"relative score\")\n+            .Row(\"  }\")\n+            .Row(\"  ,...\")\n+            .Row(\"  ]\")\n+            .Row(\"  \\\"warnings\\\": \\\"...\\\"\", {\"string\"}, \"any network and blockchain warnings\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     LOCK(cs_main);\n     UniValue obj(UniValue::VOBJ);\n@@ -498,19 +491,22 @@ static UniValue setban(const JSONRPCRequest& request)\n         strCommand = request.params[1].get_str();\n     if (request.fHelp || request.params.size() < 2 ||\n         (strCommand != \"add\" && strCommand != \"remove\"))\n-        throw std::runtime_error(\n-                            \"setban \\\"subnet\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n-                            \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\"\n-                            \"\\nArguments:\\n\"\n-                            \"1. \\\"subnet\\\"       (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\\n\"\n-                            \"2. \\\"command\\\"      (string, required) 'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\\n\"\n-                            \"3. \\\"bantime\\\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n-                            \"4. \\\"absolute\\\"     (boolean, optional) If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-                            \"\\nExamples:\\n\"\n-                            + HelpExampleCli(\"setban\", \"\\\"192.168.0.6\\\" \\\"add\\\" 86400\")\n-                            + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")\n-                            + HelpExampleRpc(\"setban\", \"\\\"192.168.0.6\\\", \\\"add\\\", 86400\")\n-                            );\n+        throw RPCDoc(\"setban\", \"\\\"subnet\\\" \\\"add|remove\\\" (bantime) (absolute)\")\n+            .Desc(\"Attempts to add or remove an IP/Subnet from the banned list.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"subnet\\\"\", {\"string\", \"required\"},\n+                \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\")\n+            .Row(\"2. \\\"command\\\"\", {\"string\", \"required\"},\n+                \"'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\")\n+            .Row(\"3. \\\"bantime\\\"\", {\"numeric\", \"optional\"},\n+                \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\")\n+            .Row(\"4. \\\"absolute\\\"\", {\"boolean\", \"optional\"},\n+                \"If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\")\n+            .ExampleCli(\"\\\"192.168.0.6\\\" \\\"add\\\" 86400\")\n+            .ExampleCli(\"\\\"192.168.0.0/24\\\" \\\"add\\\"\")\n+            .ExampleRpc(\"setban\", \"\\\"192.168.0.6\\\", \\\"add\\\", 86400\")\n+            .AsError();\n+\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -558,13 +554,11 @@ static UniValue setban(const JSONRPCRequest& request)\n static UniValue listbanned(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-                            \"listbanned\\n\"\n-                            \"\\nList all banned IPs/Subnets.\\n\"\n-                            \"\\nExamples:\\n\"\n-                            + HelpExampleCli(\"listbanned\", \"\")\n-                            + HelpExampleRpc(\"listbanned\", \"\")\n-                            );\n+        throw RPCDoc(\"listbanned\")\n+            .Desc(\"List all banned IPs/Subnets.\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -591,13 +585,12 @@ static UniValue listbanned(const JSONRPCRequest& request)\n static UniValue clearbanned(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-                            \"clearbanned\\n\"\n-                            \"\\nClear all banned IPs.\\n\"\n-                            \"\\nExamples:\\n\"\n-                            + HelpExampleCli(\"clearbanned\", \"\")\n-                            + HelpExampleRpc(\"clearbanned\", \"\")\n-                            );\n+        throw RPCDoc(\"clearbanned\")\n+            .Desc(\"Clear all banned IPs.\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n+\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -609,12 +602,11 @@ static UniValue clearbanned(const JSONRPCRequest& request)\n static UniValue setnetworkactive(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n-            \"setnetworkactive true|false\\n\"\n-            \"\\nDisable/enable all p2p network activity.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"state\\\"        (boolean, required) true to enable networking, false to disable\\n\"\n-        );\n+        throw RPCDoc(\"setnetworkactive\", \"true|false\")\n+            .Desc(\"Disable/enable all p2p network activity.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"state\\\"\", {\"boolean\", \"required\"}, \"true to enable networking, false to disable\")\n+            .AsError();\n     }\n \n     if (!g_connman) {\n@@ -629,26 +621,25 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n static UniValue getnodeaddresses(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1) {\n-        throw std::runtime_error(\n-            \"getnodeaddresses ( count )\\n\"\n-            \"\\nReturn known addresses which can potentially be used to find new nodes in the network\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"count\\\"    (numeric, optional) How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) +\n-                \" or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses. (default = 1)\\n\"\n-            \"\\nResult:\\n\"\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"time\\\": ttt,                (numeric) Timestamp in seconds since epoch (Jan 1 1970 GMT) keeping track of when the node was last seen\\n\"\n-            \"    \\\"services\\\": n,              (numeric) The services offered\\n\"\n-            \"    \\\"address\\\": \\\"host\\\",          (string) The address of the node\\n\"\n-            \"    \\\"port\\\": n                   (numeric) The port of the node\\n\"\n-            \"  }\\n\"\n-            \"  ,....\\n\"\n-            \"]\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getnodeaddresses\", \"8\")\n-            + HelpExampleRpc(\"getnodeaddresses\", \"8\")\n-        );\n+        throw RPCDoc(\"getnodeaddresses\", \"( count )\")\n+            .Desc(\"Return known addresses which can potentially be used to find new nodes in the network\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"count\\\"\", {\"numeric\", \"optional\"},\n+                \"How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) +\n+                    \"or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses. (default = 1)\")\n+            .Table(\"Result\")\n+            .Row(\"[\")\n+            .Row(\"  {\")\n+            .Row(\"    \\\"time\\\": ttt,\", {\"numeric\"}, \"Timestamp in seconds since epoch (Jan 1 1970 GMT) keeping track of when the node was last seen\")\n+            .Row(\"    \\\"services\\\": n,\", {\"numeric\"}, \"The services offered\")\n+            .Row(\"    \\\"address\\\": \\\"host\\\",\", {\"string\"}, \"The address of the node\")\n+            .Row(\"    \\\"port\\\": n\", {\"numeric\"}, \"The port of the node\")\n+            .Row(\"  }\")\n+            .Row(\"  ,....\")\n+            .Row(\"]\")\n+            .ExampleCli(\"8\")\n+            .ExampleRpc(\"8\")\n+            .AsError();\n     }\n     if (!g_connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");"
      },
      {
        "sha": "d04df2c499eaeb9aea04bd37c079e25d81239a45",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 498,
        "deletions": 536,
        "changes": 1034,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=a9b9eedc201f08f34cf4a97999dc465a4dd69492",
        "patch": "@@ -9,15 +9,14 @@\n #include <consensus/validation.h>\n #include <core_io.h>\n #include <index/txindex.h>\n-#include <keystore.h>\n-#include <validation.h>\n-#include <validationinterface.h>\n #include <key_io.h>\n+#include <keystore.h>\n #include <merkleblock.h>\n #include <net.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n+#include <rpc/doc.h>\n #include <rpc/rawtransaction.h>\n #include <rpc/server.h>\n #include <script/script.h>\n@@ -27,6 +26,8 @@\n #include <txmempool.h>\n #include <uint256.h>\n #include <utilstrencodings.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n #include <future>\n #include <stdint.h>\n@@ -63,82 +64,77 @@ static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue&\n static UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n-            \"getrawtransaction \\\"txid\\\" ( verbose \\\"blockhash\\\" )\\n\"\n-\n-            \"\\nNOTE: By default this function only works for mempool transactions. If the -txindex option is\\n\"\n-            \"enabled, it also works for blockchain transactions. If the block which contains the transaction\\n\"\n-            \"is known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is\\n\"\n-            \"provided, only that block will be searched and if the transaction is in the mempool or other\\n\"\n-            \"blocks, or if this node does not have the given block available, the transaction will not be found.\\n\"\n-            \"DEPRECATED: for now, it also works for transactions with unspent outputs.\\n\"\n-\n-            \"\\nReturn the raw transaction data.\\n\"\n-            \"\\nIf verbose is 'true', returns an Object with information about 'txid'.\\n\"\n-            \"If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.\\n\"\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"      (string, required) The transaction id\\n\"\n-            \"2. verbose     (bool, optional, default=false) If false, return a string, otherwise return a json object\\n\"\n-            \"3. \\\"blockhash\\\" (string, optional) The block in which to look for the transaction\\n\"\n-\n-            \"\\nResult (if verbose is not set or set to false):\\n\"\n-            \"\\\"data\\\"      (string) The serialized, hex-encoded data for 'txid'\\n\"\n-\n-            \"\\nResult (if verbose is set to true):\\n\"\n-            \"{\\n\"\n-            \"  \\\"in_active_chain\\\": b, (bool) Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\\n\"\n-            \"  \\\"hex\\\" : \\\"data\\\",       (string) The serialized, hex-encoded data for 'txid'\\n\"\n-            \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n-            \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n-            \"  \\\"size\\\" : n,             (numeric) The serialized transaction size\\n\"\n-            \"  \\\"vsize\\\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)\\n\"\n-            \"  \\\"weight\\\" : n,           (numeric) The transaction's weight (between vsize*4-3 and vsize*4)\\n\"\n-            \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n-            \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n-            \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n-            \"     {\\n\"\n-            \"       \\\"txid\\\": \\\"id\\\",    (string) The transaction id\\n\"\n-            \"       \\\"vout\\\": n,         (numeric) \\n\"\n-            \"       \\\"scriptSig\\\": {     (json object) The script\\n\"\n-            \"         \\\"asm\\\": \\\"asm\\\",  (string) asm\\n\"\n-            \"         \\\"hex\\\": \\\"hex\\\"   (string) hex\\n\"\n-            \"       },\\n\"\n-            \"       \\\"sequence\\\": n      (numeric) The script sequence number\\n\"\n-            \"       \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n-            \"     }\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"vout\\\" : [              (array of json objects)\\n\"\n-            \"     {\\n\"\n-            \"       \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n-            \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n-            \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n-            \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n-            \"         \\\"hex\\\" : \\\"hex\\\",          (string) the hex\\n\"\n-            \"         \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n-            \"         \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n-            \"         \\\"addresses\\\" : [           (json array of string)\\n\"\n-            \"           \\\"address\\\"        (string) bitcoin address\\n\"\n-            \"           ,...\\n\"\n-            \"         ]\\n\"\n-            \"       }\\n\"\n-            \"     }\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"blockhash\\\" : \\\"hash\\\",   (string) the block hash\\n\"\n-            \"  \\\"confirmations\\\" : n,      (numeric) The confirmations\\n\"\n-            \"  \\\"time\\\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"blocktime\\\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\"\")\n-            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true\")\n-            + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", true\")\n-            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" false \\\"myblockhash\\\"\")\n-            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\n-        );\n+        throw RPCDoc(\"getrawtransaction\", \"\\\"txid\\\" ( verbose \\\"blockhash\\\" )\")\n+            .Desc(\n+                \"NOTE: By default this function only works for mempool transactions. If the -txindex option is\\n\"\n+                \"enabled, it also works for blockchain transactions. If the block which contains the transaction\\n\"\n+                \"is known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is\\n\"\n+                \"provided, only that block will be searched and if the transaction is in the mempool or other\\n\"\n+                \"blocks, or if this node does not have the given block available, the transaction will not be found.\\n\"\n+                \"DEPRECATED: for now, it also works for transactions with unspent outputs.\\n\"\n+                \"\\n\"\n+                \"Return the raw transaction data.\\n\"\n+                \"\\n\"\n+                \"If verbose is 'true', returns an Object with information about 'txid'.\\n\"\n+                \"If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"txid\\\"\", {\"string\", \"required\"}, \"The transaction id\")\n+            .Row(\"2. verbose\", {\"bool\", \"optional\", \"default=false\"}, \"If false, return a string, otherwise return a json object\")\n+            .Row(\"3. \\\"blockhash\\\"\", {\"string\", \"optional\"}, \"The block in which to look for the transaction\")\n+            .Table(\"Result (if verbose is not set or set to false)\")\n+            .Row(\"\\\"data\\\"\", {\"string\"}, \"The serialized, hex-encoded data for 'txid'\")\n+            .Table(\"Result (if verbose is set to true)\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"in_active_chain\\\": b,\", {\"bool\"}, \"Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\")\n+            .Row(\"  \\\"hex\\\" : \\\"data\\\",\", {\"string\"}, \"The serialized, hex-encoded data for 'txid'\")\n+            .Row(\"  \\\"txid\\\" : \\\"id\\\",\", {\"string\"}, \"The transaction id (same as provided)\")\n+            .Row(\"  \\\"hash\\\" : \\\"id\\\",\", {\"string\"}, \"The transaction hash (differs from txid for witness transactions)\")\n+            .Row(\"  \\\"size\\\" : n,\", {\"numeric\"}, \"The serialized transaction size\")\n+            .Row(\"  \\\"vsize\\\" : n,\", {\"numeric\"}, \"The virtual transaction size (differs from size for witness transactions)\")\n+            .Row(\"  \\\"weight\\\" : n,\", {\"numeric\"}, \"The transaction's weight (between vsize*4-3 and vsize*4)\")\n+            .Row(\"  \\\"version\\\" : n,\", {\"numeric\"}, \"The version\")\n+            .Row(\"  \\\"locktime\\\" : ttt,\", {\"numeric\"}, \"The lock time\")\n+            .Row(\"  \\\"vin\\\" : [\", {\"array of json objects\"})\n+            .Row(\"     {\")\n+            .Row(\"       \\\"txid\\\": \\\"id\\\",\", {\"string\"}, \"The transaction id\")\n+            .Row(\"       \\\"vout\\\": n,\", {\"numeric\"})\n+            .Row(\"       \\\"scriptSig\\\": {\", {\"json object\"}, \"The script\")\n+            .Row(\"         \\\"asm\\\": \\\"asm\\\",\", {\"string\"}, \"asm\")\n+            .Row(\"         \\\"hex\\\": \\\"hex\\\"\", {\"string\"}, \"hex\")\n+            .Row(\"       },\")\n+            .Row(\"       \\\"sequence\\\": n\", {\"numeric\"}, \"The script sequence number\")\n+            .Row(\"       \\\"txinwitness\\\": [\\\"hex\\\", ...]\", {\"array of string\"}, \"hex-encoded witness data (if any)\")\n+            .Row(\"     }\")\n+            .Row(\"     ,...\")\n+            .Row(\"  ],\")\n+            .Row(\"  \\\"vout\\\" : [\", {\"array of json objects\"})\n+            .Row(\"     {\")\n+            .Row(\"       \\\"value\\\" : x.xxx,\", {\"numeric\"}, \"The value in \" + CURRENCY_UNIT)\n+            .Row(\"       \\\"n\\\" : n,\", {\"numeric\"}, \"index\")\n+            .Row(\"       \\\"scriptPubKey\\\" : {\", {\"json object\"})\n+            .Row(\"         \\\"asm\\\" : \\\"asm\\\",\", {\"string\"}, \"the asm\")\n+            .Row(\"         \\\"hex\\\" : \\\"hex\\\",\", {\"string\"}, \"the hex\")\n+            .Row(\"         \\\"reqSigs\\\" : n,\", {\"numeric\"}, \"The required sigs\")\n+            .Row(\"         \\\"type\\\" : \\\"pubkeyhash\\\",\", {\"string\"}, \"The type, eg 'pubkeyhash'\")\n+            .Row(\"         \\\"addresses\\\" : [\", {\"json array of string\"})\n+            .Row(\"           \\\"address\\\"\", {\"string\"}, \"bitcoin address\")\n+            .Row(\"           ,...\")\n+            .Row(\"         ]\")\n+            .Row(\"       }\")\n+            .Row(\"     }\")\n+            .Row(\"     ,...\")\n+            .Row(\"  ],\")\n+            .Row(\"  \\\"blockhash\\\" : \\\"hash\\\",\", {\"string\"}, \"the block hash\")\n+            .Row(\"  \\\"confirmations\\\" : n,\", {\"numeric\"}, \"The confirmations\")\n+            .Row(\"  \\\"time\\\" : ttt,\", {\"numeric\"}, \"The transaction time in seconds since epoch (Jan 1 1970 GMT)\")\n+            .Row(\"  \\\"blocktime\\\" : ttt\", {\"numeric\"}, \"The block time in seconds since epoch (Jan 1 1970 GMT)\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"mytxid\\\"\")\n+            .ExampleCli(\"\\\"mytxid\\\" true\")\n+            .ExampleRpc(\"\\\"mytxid\\\", true\")\n+            .ExampleCli(\"\\\"mytxid\\\" false \\\"myblockhash\\\"\")\n+            .ExampleCli(\"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\n+            .AsError();\n \n     bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n@@ -203,23 +199,24 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n static UniValue gettxoutproof(const JSONRPCRequest& request)\n {\n     if (request.fHelp || (request.params.size() != 1 && request.params.size() != 2))\n-        throw std::runtime_error(\n-            \"gettxoutproof [\\\"txid\\\",...] ( blockhash )\\n\"\n-            \"\\nReturns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n-            \"\\nNOTE: By default this function only works sometimes. This is when there is an\\n\"\n-            \"unspent output in the utxo for this transaction. To make it always work,\\n\"\n-            \"you need to maintain a transaction index, using the -txindex command line option or\\n\"\n-            \"specify the block in which the transaction is included manually (by blockhash).\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txids\\\"       (string) A json array of txids to filter\\n\"\n-            \"    [\\n\"\n-            \"      \\\"txid\\\"     (string) A transaction hash\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"2. \\\"blockhash\\\"   (string, optional) If specified, looks for txid in the block with this hash\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\\"data\\\"           (string) A string that is a serialized, hex-encoded data for the proof.\\n\"\n-        );\n+        throw RPCDoc(\"gettxoutproof\", \"[\\\"txid\\\",...] ( blockhash )\")\n+            .Desc(\n+                \"Returns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n+                \"\\n\"\n+                \"NOTE: By default this function only works sometimes. This is when there is an\\n\"\n+                \"unspent output in the utxo for this transaction. To make it always work,\\n\"\n+                \"you need to maintain a transaction index, using the -txindex command line option or\\n\"\n+                \"specify the block in which the transaction is included manually (by blockhash).\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"txids\\\"\", {\"string\"}, \"A json array of txids to filter\")\n+            .Row(\"    [\")\n+            .Row(\"      \\\"txid\\\"\", {\"string\"}, \"A transaction hash\")\n+            .Row(\"      ,...\")\n+            .Row(\"    ]\")\n+            .Row(\"2. \\\"blockhash\\\"\", {\"string\", \"optional\"}, \"If specified, looks for txid in the block with this hash\")\n+            .Table(\"Result\")\n+            .Row(\"\\\"data\\\"\", {\"string\"}, \"A string that is a serialized, hex-encoded data for the proof.\")\n+            .AsError();\n \n     std::set<uint256> setTxids;\n     uint256 oneTxid;\n@@ -295,15 +292,15 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n static UniValue verifytxoutproof(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"verifytxoutproof \\\"proof\\\"\\n\"\n-            \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n-            \"and throwing an RPC error if the block is not in our best chain\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"proof\\\"    (string, required) The hex-encoded proof generated by gettxoutproof\\n\"\n-            \"\\nResult:\\n\"\n-            \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.\\n\"\n-        );\n+        throw RPCDoc(\"verifytxoutproof\", \"\\\"proof\\\"\")\n+            .Desc(\n+                \"Verifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n+                \"and throwing an RPC error if the block is not in our best chain\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"proof\\\"\", {\"string\", \"required\"}, \"The hex-encoded proof generated by gettxoutproof\")\n+            .Table(\"Result\")\n+            .Row(\"[\\\"txid\\\"]\", {\"array\", \"strings\"}, \"The txid(s) which the proof commits to, or empty array if the proof can not be validated.\")\n+            .AsError();\n \n     CDataStream ssMB(ParseHexV(request.params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n     CMerkleBlock merkleBlock;\n@@ -441,49 +438,46 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n static UniValue createrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4) {\n-        throw std::runtime_error(\n-            // clang-format off\n-            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] [{\\\"address\\\":amount},{\\\"data\\\":\\\"hex\\\"},...] ( locktime ) ( replaceable )\\n\"\n-            \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n-            \"Outputs can be addresses or data.\\n\"\n-            \"Returns hex-encoded raw transaction.\\n\"\n-            \"Note that the transaction's inputs are not signed, and\\n\"\n-            \"it is not stored in the wallet or transmitted to the network.\\n\"\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"inputs\\\"                (array, required) A json array of json objects\\n\"\n-            \"     [\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",      (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,         (numeric, required) The output number\\n\"\n-            \"         \\\"sequence\\\":n      (numeric, optional) The sequence number\\n\"\n-            \"       } \\n\"\n-            \"       ,...\\n\"\n-            \"     ]\\n\"\n-            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n-            \"   [\\n\"\n-            \"    {\\n\"\n-            \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\"\n-            \"    },\\n\"\n-            \"    {\\n\"\n-            \"      \\\"data\\\": \\\"hex\\\"        (obj, optional) A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\\n\"\n-            \"    }\\n\"\n-            \"    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n-            \"                             accepted as second parameter.\\n\"\n-            \"   ]\\n\"\n-            \"3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n-            \"4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125-replaceable.\\n\"\n-            \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\\"transaction\\\"              (string) hex string of the transaction\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"address\\\\\\\":0.01}]\\\"\")\n-            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n-            + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"address\\\\\\\":0.01}]\\\"\")\n-            + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n-            // clang-format on\n-        );\n+        throw RPCDoc(\"createrawtransaction\", \"[{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] [{\\\"address\\\":amount},{\\\"data\\\":\\\"hex\\\"},...] ( locktime ) ( replaceable )\")\n+            .Desc(\n+                \"Create a transaction spending the given inputs and creating new outputs.\\n\"\n+                \"Outputs can be addresses or data.\\n\"\n+                \"Returns hex-encoded raw transaction.\\n\"\n+                \"Note that the transaction's inputs are not signed, and\\n\"\n+                \"it is not stored in the wallet or transmitted to the network.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"inputs\\\"\", {\"array\", \"required\"}, \"A json array of json objects\")\n+            .Row(\"     [\")\n+            .Row(\"       {\")\n+            .Row(\"         \\\"txid\\\":\\\"id\\\",\", {\"string\", \"required\"}, \"The transaction id\")\n+            .Row(\"         \\\"vout\\\":n,\", {\"numeric\", \"required\"}, \"The output number\")\n+            .Row(\"         \\\"sequence\\\":n\", {\"numeric\", \"optional\"}, \"The sequence number\")\n+            .Row(\"       } \")\n+            .Row(\"       ,...\")\n+            .Row(\"     ]\")\n+            .Row(\"2. \\\"outputs\\\"\", {\"array\", \"required\"}, \"a json array with outputs (key-value pairs)\")\n+            .Row(\"   [\")\n+            .Row(\"    {\")\n+            .Row(\"      \\\"address\\\": x.xxx,\", {\"obj\", \"optional\"}, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT)\n+            .Row(\"    },\")\n+            .Row(\"    {\")\n+            .Row(\"      \\\"data\\\": \\\"hex\\\"\", {\"obj\", \"optional\"}, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\")\n+            .Row(\"    }\")\n+            .Row(\"    ,...\",\n+                \"More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n+                \"accepted as second parameter.\")\n+            .Row(\"   ]\")\n+            .Row(\"3. locktime\", {\"numeric\", \"optional\", \"default=0\"}, \"Raw locktime. Non-0 value also locktime-activates inputs\")\n+            .Row(\"4. replaceable\", {\"boolean\", \"optional\", \"default=false\"},\n+                \"Marks this transaction as BIP125-replaceable.\\n\"\n+                \"Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\")\n+            .Table(\"Result\")\n+            .Row(\"\\\"transaction\\\"\", {\"string\"}, \"hex string of the transaction\")\n+            .ExampleCli(\"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"address\\\\\\\":0.01}]\\\"\")\n+            .ExampleCli(\"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n+            .ExampleRpc(\"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"address\\\\\\\":0.01}]\\\"\")\n+            .ExampleRpc(\"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n+            .AsError();\n     }\n \n     RPCTypeCheck(request.params, {\n@@ -502,60 +496,56 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n static UniValue decoderawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"decoderawtransaction \\\"hexstring\\\" ( iswitness )\\n\"\n-            \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\"\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"      (string, required) The transaction hex string\\n\"\n-            \"2. iswitness          (boolean, optional) Whether the transaction hex is a serialized witness transaction\\n\"\n-            \"                         If iswitness is not present, heuristic tests will be used in decoding\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id\\n\"\n-            \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n-            \"  \\\"size\\\" : n,             (numeric) The transaction size\\n\"\n-            \"  \\\"vsize\\\" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)\\n\"\n-            \"  \\\"weight\\\" : n,           (numeric) The transaction's weight (between vsize*4 - 3 and vsize*4)\\n\"\n-            \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n-            \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n-            \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n-            \"     {\\n\"\n-            \"       \\\"txid\\\": \\\"id\\\",    (string) The transaction id\\n\"\n-            \"       \\\"vout\\\": n,         (numeric) The output number\\n\"\n-            \"       \\\"scriptSig\\\": {     (json object) The script\\n\"\n-            \"         \\\"asm\\\": \\\"asm\\\",  (string) asm\\n\"\n-            \"         \\\"hex\\\": \\\"hex\\\"   (string) hex\\n\"\n-            \"       },\\n\"\n-            \"       \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n-            \"       \\\"sequence\\\": n     (numeric) The script sequence number\\n\"\n-            \"     }\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"vout\\\" : [             (array of json objects)\\n\"\n-            \"     {\\n\"\n-            \"       \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n-            \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n-            \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n-            \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n-            \"         \\\"hex\\\" : \\\"hex\\\",          (string) the hex\\n\"\n-            \"         \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n-            \"         \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n-            \"         \\\"addresses\\\" : [           (json array of string)\\n\"\n-            \"           \\\"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\\\"   (string) bitcoin address\\n\"\n-            \"           ,...\\n\"\n-            \"         ]\\n\"\n-            \"       }\\n\"\n-            \"     }\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n-            + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n-        );\n+        throw RPCDoc(\"decoderawtransaction\", \"\\\"hexstring\\\" ( iswitness )\")\n+            .Desc(\"Return a JSON object representing the serialized, hex-encoded transaction.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"hexstring\\\"\", {\"string\", \"required\"}, \"The transaction hex string\")\n+            .Row(\"2. iswitness\", {\"boolean\", \"optional\"},\n+                \"Whether the transaction hex is a serialized witness transaction\\n\"\n+                \"If iswitness is not present, heuristic tests will be used in decoding\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"txid\\\" : \\\"id\\\",\", {\"string\"}, \"The transaction id\")\n+            .Row(\"  \\\"hash\\\" : \\\"id\\\",\", {\"string\"}, \"The transaction hash (differs from txid for witness transactions)\")\n+            .Row(\"  \\\"size\\\" : n,\", {\"numeric\"}, \"The transaction size\")\n+            .Row(\"  \\\"vsize\\\" : n,\", {\"numeric\"}, \"The virtual transaction size (differs from size for witness transactions)\")\n+            .Row(\"  \\\"weight\\\" : n,\", {\"numeric\"}, \"The transaction's weight (between vsize*4 - 3 and vsize*4)\")\n+            .Row(\"  \\\"version\\\" : n,\", {\"numeric\"}, \"The version\")\n+            .Row(\"  \\\"locktime\\\" : ttt,\", {\"numeric\"}, \"The lock time\")\n+            .Row(\"  \\\"vin\\\" : [\", {\"array of json objects\"})\n+            .Row(\"     {\")\n+            .Row(\"       \\\"txid\\\": \\\"id\\\",\", {\"string\"}, \"The transaction id\")\n+            .Row(\"       \\\"vout\\\": n,\", {\"numeric\"}, \"The output number\")\n+            .Row(\"       \\\"scriptSig\\\": {\", {\"json object\"}, \"The script\")\n+            .Row(\"         \\\"asm\\\": \\\"asm\\\",\", {\"string\"}, \"asm\")\n+            .Row(\"         \\\"hex\\\": \\\"hex\\\"\", {\"string\"}, \"hex\")\n+            .Row(\"       },\")\n+            .Row(\"       \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\")\n+            .Row(\"       \\\"sequence\\\": n\", {\"numeric\"}, \"The script sequence number\")\n+            .Row(\"     }\")\n+            .Row(\"     ,...\")\n+            .Row(\"  ],\")\n+            .Row(\"  \\\"vout\\\" : [\", {\"array of json objects\"})\n+            .Row(\"     {\")\n+            .Row(\"       \\\"value\\\" : x.xxx,\", {\"numeric\"}, \"The value in \" + CURRENCY_UNIT)\n+            .Row(\"       \\\"n\\\" : n,\", {\"numeric\"}, \"index\")\n+            .Row(\"       \\\"scriptPubKey\\\" : {\", {\"json object\"})\n+            .Row(\"         \\\"asm\\\" : \\\"asm\\\",\", {\"string\"}, \"the asm\")\n+            .Row(\"         \\\"hex\\\" : \\\"hex\\\",\", {\"string\"}, \"the hex\")\n+            .Row(\"         \\\"reqSigs\\\" : n,\", {\"numeric\"}, \"The required sigs\")\n+            .Row(\"         \\\"type\\\" : \\\"pubkeyhash\\\",\", {\"string\"}, \"The type, eg 'pubkeyhash'\")\n+            .Row(\"         \\\"addresses\\\" : [\", {\"json array of string\"})\n+            .Row(\"           \\\"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\\\"\", {\"string\"}, \"bitcoin address\")\n+            .Row(\"           ,...\")\n+            .Row(\"         ]\")\n+            .Row(\"       }\")\n+            .Row(\"     }\")\n+            .Row(\"     ,...\")\n+            .Row(\"  ],\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"hexstring\\\"\")\n+            .ExampleRpc(\"\\\"hexstring\\\"\")\n+            .AsError();\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n \n@@ -577,27 +567,25 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n static UniValue decodescript(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"decodescript \\\"hexstring\\\"\\n\"\n-            \"\\nDecode a hex-encoded script.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string) the hex-encoded script\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"asm\\\":\\\"asm\\\",   (string) Script public key\\n\"\n-            \"  \\\"hex\\\":\\\"hex\\\",   (string) hex-encoded public key\\n\"\n-            \"  \\\"type\\\":\\\"type\\\", (string) The output type\\n\"\n-            \"  \\\"reqSigs\\\": n,    (numeric) The required signatures\\n\"\n-            \"  \\\"addresses\\\": [   (json array of string)\\n\"\n-            \"     \\\"address\\\"     (string) bitcoin address\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"p2sh\\\",\\\"address\\\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"decodescript\", \"\\\"hexstring\\\"\")\n-            + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n-        );\n+        throw RPCDoc(\"decodescript\", \"\\\"hexstring\\\"\")\n+            .Desc(\"Decode a hex-encoded script.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"hexstring\\\"\", {\"string\"}, \"the hex-encoded script\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"asm\\\":\\\"asm\\\",\", {\"string\"}, \"Script public key\")\n+            .Row(\"  \\\"hex\\\":\\\"hex\\\",\", {\"string\"}, \"hex-encoded public key\")\n+            .Row(\"  \\\"type\\\":\\\"type\\\", (string) The output type\")\n+            .Row(\"  \\\"reqSigs\\\": n,\", {\"numeric\"}, \"The required signatures\")\n+            .Row(\"  \\\"addresses\\\": [\", {\"json array of string\"})\n+            .Row(\"     \\\"address\\\"\", {\"string\"}, \"bitcoin address\")\n+            .Row(\"     ,...\")\n+            .Row(\"  ],\")\n+            .Row(\"  \\\"p2sh\\\",\\\"address\\\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"hexstring\\\"\")\n+            .ExampleRpc(\"\\\"hexstring\\\"\")\n+            .AsError();\n \n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n@@ -673,26 +661,21 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n {\n \n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"combinerawtransaction [\\\"hexstring\\\",...]\\n\"\n-            \"\\nCombine multiple partially signed transactions into one transaction.\\n\"\n-            \"The combined transaction may be another partially signed transaction or a \\n\"\n-            \"fully signed transaction.\"\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txs\\\"         (string) A json array of hex strings of partially signed transactions\\n\"\n-            \"    [\\n\"\n-            \"      \\\"hexstring\\\"     (string) A transaction hash\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"\\\"hex\\\"            (string) The hex-encoded raw transaction with signature(s)\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"combinerawtransaction\", \"[\\\"myhex1\\\", \\\"myhex2\\\", \\\"myhex3\\\"]\")\n-        );\n-\n+        throw RPCDoc(\"combinerawtransaction\", \"[\\\"hexstring\\\",...]\")\n+            .Desc(\n+                \"Combine multiple partially signed transactions into one transaction.\\n\"\n+                \"The combined transaction may be another partially signed transaction or a \\n\"\n+                \"fully signed transaction.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"txs\\\"\", {\"string\"}, \"A json array of hex strings of partially signed transactions\")\n+            .Row(\"    [\")\n+            .Row(\"      \\\"hexstring\\\"\", {\"string\"}, \"A transaction hash\")\n+            .Row(\"      ,...\")\n+            .Row(\"    ]\")\n+            .Table(\"Result\")\n+            .Row(\"\\\"hex\\\"\", {\"string\"}, \"The hex-encoded raw transaction with signature(s)\")\n+            .ExampleCli(\"[\\\"myhex1\\\", \\\"myhex2\\\", \\\"myhex3\\\"]\")\n+            .AsError();\n \n     UniValue txs = request.params[0].get_array();\n     std::vector<CMutableTransaction> txVariants(txs.size());\n@@ -896,60 +879,57 @@ UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival\n static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n-            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second argument is an array of base58-encoded private\\n\"\n-            \"keys that will be the only keys used to sign the transaction.\\n\"\n-            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n-            \"2. \\\"privkeys\\\"                       (string, required) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                               (json array of strings)\\n\"\n-            \"      \\\"privatekey\\\"                  (string) private key in base58-encoding\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"prevtxs\\\"                        (string, optional) An json array of previous dependent transaction outputs\\n\"\n-            \"     [                              (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",               (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",     (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",     (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of:\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                      (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",              (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                   (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",          (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,               (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"              (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n-        );\n+        throw RPCDoc(\"signrawtransactionwithkey\", \"\\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\")\n+            .Desc(\n+                \"Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+                \"The second argument is an array of base58-encoded private\\n\"\n+                \"keys that will be the only keys used to sign the transaction.\\n\"\n+                \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+                \"this transaction depends on but may not yet be in the block chain.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"hexstring\\\"\", {\"string\", \"required\"}, \"The transaction hex string\")\n+            .Row(\"2. \\\"privkeys\\\"\", {\"string\", \"required\"}, \"A json array of base58-encoded private keys for signing\")\n+            .Row(\"    [\", {\"json array of strings\"})\n+            .Row(\"      \\\"privatekey\\\"\", {\"string\"}, \"private key in base58-encoding\")\n+            .Row(\"      ,...\")\n+            .Row(\"    ]\")\n+            .Row(\"3. \\\"prevtxs\\\"\", {\"string\", \"optional\"}, \"An json array of previous dependent transaction outputs\")\n+            .Row(\"     [\", {\"json array of json objects\", \"or 'null' if none provided\"})\n+            .Row(\"       {\")\n+            .Row(\"         \\\"txid\\\":\\\"id\\\",\", {\"string\", \"required\"}, \"The transaction id\")\n+            .Row(\"         \\\"vout\\\":n,\", {\"numeric\", \"required\"}, \"The output number\")\n+            .Row(\"         \\\"scriptPubKey\\\": \\\"hex\\\",\", {\"string\", \"required\"}, \"script key\")\n+            .Row(\"         \\\"redeemScript\\\": \\\"hex\\\",\", {\"string\", \"required for P2SH or P2WSH\"}, \"redeem script\")\n+            .Row(\"         \\\"amount\\\": value\", {\"numeric\", \"required\"}, \"The amount spent\")\n+            .Row(\"       }\")\n+            .Row(\"       ,...\")\n+            .Row(\"    ]\")\n+            .Row(\"4. \\\"sighashtype\\\"\", {\"string\", \"optional\", \"default=ALL\"},\n+                \"The signature hash type. Must be one of:\\n\"\n+                \"- \\\"ALL\\\"\\n\"\n+                \"- \\\"NONE\\\"\\n\"\n+                \"- \\\"SINGLE\\\"\\n\"\n+                \"- \\\"ALL|ANYONECANPAY\\\"\\n\"\n+                \"- \\\"NONE|ANYONECANPAY\\\"\\n\"\n+                \"- \\\"SINGLE|ANYONECANPAY\\\"\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"hex\\\" : \\\"value\\\",\", {\"string\"}, \"The hex-encoded raw transaction with signature(s)\")\n+            .Row(\"  \\\"complete\\\" : true|false,\", {\"boolean\"}, \"If the transaction has a complete set of signatures\")\n+            .Row(\"  \\\"errors\\\" : [\", {\"json array of objects\"}, \"Script verification errors (if there are any)\")\n+            .Row(\"    {\")\n+            .Row(\"      \\\"txid\\\" : \\\"hash\\\",\", {\"string\"}, \"The hash of the referenced, previous transaction\")\n+            .Row(\"      \\\"vout\\\" : n,\", {\"numeric\"}, \"The index of the output to spent and used as input\")\n+            .Row(\"      \\\"scriptSig\\\" : \\\"hex\\\",\", {\"string\"}, \"The hex-encoded signature script\")\n+            .Row(\"      \\\"sequence\\\" : n,\", {\"numeric\"}, \"Script sequence number\")\n+            .Row(\"      \\\"error\\\" : \\\"text\\\"\", {\"string\"}, \"Verification or signing error related to the input\")\n+            .Row(\"    }\")\n+            .Row(\"    ,...\")\n+            .Row(\"  ]\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"myhex\\\"\")\n+            .ExampleRpc(\"\\\"myhex\\\"\")\n+            .AsError();\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n \n@@ -983,25 +963,20 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n static UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"sendrawtransaction \\\"hexstring\\\" ( allowhighfees )\\n\"\n-            \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n-            \"\\nAlso see createrawtransaction and signrawtransactionwithkey calls.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction)\\n\"\n-            \"2. allowhighfees    (boolean, optional, default=false) Allow high fees\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\\"hex\\\"             (string) The transaction hash in hex\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nCreate a transaction\\n\"\n-            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\" : \\\\\\\"mytxid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n-            \"Sign the transaction, and get back the hex\\n\"\n-            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\") +\n-            \"\\nSend the transaction (signed hex)\\n\"\n-            + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedhex\\\"\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n-        );\n+        throw RPCDoc(\"sendrawtransaction\", \"\\\"hexstring\\\" ( allowhighfees )\")\n+            .Desc(\n+                \"Submits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n+                \"\\n\"\n+                \"Also see createrawtransaction and signrawtransactionwithkey calls.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"hexstring\\\"\", {\"string\", \"required\"}, \"The hex string of the raw transaction)\")\n+            .Row(\"2. allowhighfees\", {\"boolean\", \"optional\", \"default=false\"}, \"Allow high fees\")\n+            .Table(\"Result\")\n+            .Row(\"\\\"hex\\\"\", {\"string\"}, \"The transaction hash in hex\")\n+            .ExampleCli(\"Sign the transaction, and get back the hex\", \"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+            .ExampleCli(\"Send the transaction (signed hex)\", \"\\\"signedhex\\\"\")\n+            .ExampleRpc(\"As a JSON-RPC call\", \"\\\"signedhex\\\"\")\n+            .AsError();\n \n     std::promise<void> promise;\n \n@@ -1078,36 +1053,33 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n static UniValue testmempoolaccept(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n-            // clang-format off\n-            \"testmempoolaccept [\\\"rawtxs\\\"] ( allowhighfees )\\n\"\n-            \"\\nReturns if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n-            \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n-            \"\\nSee sendrawtransaction call.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. [\\\"rawtxs\\\"]       (array, required) An array of hex strings of raw transactions.\\n\"\n-            \"                                        Length must be one for now.\\n\"\n-            \"2. allowhighfees    (boolean, optional, default=false) Allow high fees\\n\"\n-            \"\\nResult:\\n\"\n-            \"[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-            \"                            Length is exactly one for now.\\n\"\n-            \" {\\n\"\n-            \"  \\\"txid\\\"           (string) The transaction hash in hex\\n\"\n-            \"  \\\"allowed\\\"        (boolean) If the mempool allows this tx to be inserted\\n\"\n-            \"  \\\"reject-reason\\\"  (string) Rejection string (only present when 'allowed' is false)\\n\"\n-            \" }\\n\"\n-            \"]\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nCreate a transaction\\n\"\n-            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\" : \\\\\\\"mytxid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n-            \"Sign the transaction, and get back the hex\\n\"\n-            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\") +\n-            \"\\nTest acceptance of the transaction (signed hex)\\n\"\n-            + HelpExampleCli(\"testmempoolaccept\", \"\\\"signedhex\\\"\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"testmempoolaccept\", \"[\\\"signedhex\\\"]\")\n-            // clang-format on\n-            );\n+        throw RPCDoc(\"testmempoolaccept\", \"[\\\"rawtxs\\\"] ( allowhighfees )\")\n+            .Desc(\n+                \"Returns if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\n\"\n+                \"This checks if the transaction violates the consensus or policy rules.\\n\"\n+                \"\\n\"\n+                \"See sendrawtransaction call.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. [\\\"rawtxs\\\"]\", {\"array\", \"required\"},\n+                \"An array of hex strings of raw transactions.\\n\"\n+                \"Length must be one for now.\")\n+            .Row(\"2. allowhighfees\", {\"boolean\", \"optional\", \"default=false\"}, \"Allow high fees\")\n+            .Table(\"Result\")\n+            .Row(\"[\", {\"array\"},\n+                \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n+                \"Length is exactly one for now.\")\n+            .Row(\" {\")\n+            .Row(\"  \\\"txid\\\"\", {\"string\"}, \"The transaction hash in hex\")\n+            .Row(\"  \\\"allowed\\\"\", {\"boolean\"}, \"If the mempool allows this tx to be inserted\")\n+            .Row(\"  \\\"reject-reason\\\"\", {\"string\"}, \"Rejection string (only present when 'allowed' is false)\")\n+            .Row(\" }\")\n+            .Row(\"]\")\n+            .ExampleCli(\"Create a transaction\", \"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\" : \\\\\\\"mytxid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\")\n+            .ExampleCli(\"Sign the transaction, and get back the hex\", \"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+            .ExampleCli(\"Test acceptance of the transaction (signed hex)\", \"\\\"signedhex\\\"\")\n+            .ExampleRpc(\"As a JSON-RPC call\", \"[\\\"signedhex\\\"]\")\n+            .AsError();\n     }\n \n     RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VBOOL});\n@@ -1176,104 +1148,99 @@ static std::string WriteHDKeypath(std::vector<uint32_t>& keypath)\n UniValue decodepsbt(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"decodepsbt \\\"psbt\\\"\\n\"\n-            \"\\nReturn a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\\n\"\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"psbt\\\"            (string, required) The PSBT base64 string\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"tx\\\" : {                   (json object) The decoded network-serialized unsigned transaction.\\n\"\n-            \"    ...                                      The layout is the same as the output of decoderawtransaction.\\n\"\n-            \"  },\\n\"\n-            \"  \\\"unknown\\\" : {                (json object) The unknown global fields\\n\"\n-            \"    \\\"key\\\" : \\\"value\\\"            (key-value pair) An unknown key-value pair\\n\"\n-            \"     ...\\n\"\n-            \"  },\\n\"\n-            \"  \\\"inputs\\\" : [                 (array of json objects)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"non_witness_utxo\\\" : {   (json object, optional) Decoded network transaction for non-witness UTXOs\\n\"\n-            \"        ...\\n\"\n-            \"      },\\n\"\n-            \"      \\\"witness_utxo\\\" : {            (json object, optional) Transaction output for witness UTXOs\\n\"\n-            \"        \\\"amount\\\" : x.xxx,           (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n-            \"        \\\"scriptPubKey\\\" : {          (json object)\\n\"\n-            \"          \\\"asm\\\" : \\\"asm\\\",            (string) The asm\\n\"\n-            \"          \\\"hex\\\" : \\\"hex\\\",            (string) The hex\\n\"\n-            \"          \\\"type\\\" : \\\"pubkeyhash\\\",    (string) The type, eg 'pubkeyhash'\\n\"\n-            \"          \\\"address\\\" : \\\"address\\\"     (string) Bitcoin address if there is one\\n\"\n-            \"        }\\n\"\n-            \"      },\\n\"\n-            \"      \\\"partial_signatures\\\" : {             (json object, optional)\\n\"\n-            \"        \\\"pubkey\\\" : \\\"signature\\\",           (string) The public key and signature that corresponds to it.\\n\"\n-            \"        ,...\\n\"\n-            \"      }\\n\"\n-            \"      \\\"sighash\\\" : \\\"type\\\",                  (string, optional) The sighash type to be used\\n\"\n-            \"      \\\"redeem_script\\\" : {       (json object, optional)\\n\"\n-            \"          \\\"asm\\\" : \\\"asm\\\",            (string) The asm\\n\"\n-            \"          \\\"hex\\\" : \\\"hex\\\",            (string) The hex\\n\"\n-            \"          \\\"type\\\" : \\\"pubkeyhash\\\",    (string) The type, eg 'pubkeyhash'\\n\"\n-            \"        }\\n\"\n-            \"      \\\"witness_script\\\" : {       (json object, optional)\\n\"\n-            \"          \\\"asm\\\" : \\\"asm\\\",            (string) The asm\\n\"\n-            \"          \\\"hex\\\" : \\\"hex\\\",            (string) The hex\\n\"\n-            \"          \\\"type\\\" : \\\"pubkeyhash\\\",    (string) The type, eg 'pubkeyhash'\\n\"\n-            \"        }\\n\"\n-            \"      \\\"bip32_derivs\\\" : {          (json object, optional)\\n\"\n-            \"        \\\"pubkey\\\" : {                     (json object, optional) The public key with the derivation path as the value.\\n\"\n-            \"          \\\"master_fingerprint\\\" : \\\"fingerprint\\\"     (string) The fingerprint of the master key\\n\"\n-            \"          \\\"path\\\" : \\\"path\\\",                         (string) The path\\n\"\n-            \"        }\\n\"\n-            \"        ,...\\n\"\n-            \"      }\\n\"\n-            \"      \\\"final_scriptsig\\\" : {       (json object, optional)\\n\"\n-            \"          \\\"asm\\\" : \\\"asm\\\",            (string) The asm\\n\"\n-            \"          \\\"hex\\\" : \\\"hex\\\",            (string) The hex\\n\"\n-            \"        }\\n\"\n-            \"       \\\"final_scriptwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n-            \"      \\\"unknown\\\" : {                (json object) The unknown global fields\\n\"\n-            \"        \\\"key\\\" : \\\"value\\\"            (key-value pair) An unknown key-value pair\\n\"\n-            \"         ...\\n\"\n-            \"      },\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"  \\\"outputs\\\" : [                 (array of json objects)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"redeem_script\\\" : {       (json object, optional)\\n\"\n-            \"          \\\"asm\\\" : \\\"asm\\\",            (string) The asm\\n\"\n-            \"          \\\"hex\\\" : \\\"hex\\\",            (string) The hex\\n\"\n-            \"          \\\"type\\\" : \\\"pubkeyhash\\\",    (string) The type, eg 'pubkeyhash'\\n\"\n-            \"        }\\n\"\n-            \"      \\\"witness_script\\\" : {       (json object, optional)\\n\"\n-            \"          \\\"asm\\\" : \\\"asm\\\",            (string) The asm\\n\"\n-            \"          \\\"hex\\\" : \\\"hex\\\",            (string) The hex\\n\"\n-            \"          \\\"type\\\" : \\\"pubkeyhash\\\",    (string) The type, eg 'pubkeyhash'\\n\"\n-            \"      }\\n\"\n-            \"      \\\"bip32_derivs\\\" : [          (array of json objects, optional)\\n\"\n-            \"        {\\n\"\n-            \"          \\\"pubkey\\\" : \\\"pubkey\\\",                     (string) The public key this path corresponds to\\n\"\n-            \"          \\\"master_fingerprint\\\" : \\\"fingerprint\\\"     (string) The fingerprint of the master key\\n\"\n-            \"          \\\"path\\\" : \\\"path\\\",                         (string) The path\\n\"\n-            \"          }\\n\"\n-            \"        }\\n\"\n-            \"        ,...\\n\"\n-            \"      ],\\n\"\n-            \"      \\\"unknown\\\" : {                (json object) The unknown global fields\\n\"\n-            \"        \\\"key\\\" : \\\"value\\\"            (key-value pair) An unknown key-value pair\\n\"\n-            \"         ...\\n\"\n-            \"      },\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"  \\\"fee\\\" : fee                      (numeric, optional) The transaction fee paid if all UTXOs slots in the PSBT have been filled.\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"decodepsbt\", \"\\\"psbt\\\"\")\n-    );\n+        throw RPCDoc(\"decodepsbt\", \"\\\"psbt\\\"\")\n+            .Desc(\"Return a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"psbt\\\"\", {\"string\", \"required\"}, \"The PSBT base64 string\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"tx\\\" : {\", {\"json object\"}, \"The decoded network-serialized unsigned transaction.\")\n+            .Row(\"    ...\", \"The layout is the same as the output of decoderawtransaction.\")\n+            .Row(\"  },\")\n+            .Row(\"  \\\"unknown\\\" : {\", {\"json object\"}, \"The unknown global fields\")\n+            .Row(\"    \\\"key\\\" : \\\"value\\\"\", {\"key-value pair\"}, \"An unknown key-value pair\")\n+            .Row(\"     ...\")\n+            .Row(\"  },\")\n+            .Row(\"  \\\"inputs\\\" : [\", {\"array of json objects\"})\n+            .Row(\"    {\")\n+            .Row(\"      \\\"non_witness_utxo\\\" : {\", {\"json object\", \"optional\"}, \"Decoded network transaction for non-witness UTXOs\")\n+            .Row(\"        ...\")\n+            .Row(\"      },\")\n+            .Row(\"      \\\"witness_utxo\\\" : {\", {\"json object\", \"optional\"}, \"Transaction output for witness UTXOs\")\n+            .Row(\"        \\\"amount\\\" : x.xxx,\", {\"numeric\"}, \"The value in \" + CURRENCY_UNIT)\n+            .Row(\"        \\\"scriptPubKey\\\" : {\", {\"json object\"})\n+            .Row(\"          \\\"asm\\\" : \\\"asm\\\",\", {\"string\"}, \"The asm\")\n+            .Row(\"          \\\"hex\\\" : \\\"hex\\\",\", {\"string\"}, \"The hex\")\n+            .Row(\"          \\\"type\\\" : \\\"pubkeyhash\\\",\", {\"string\"}, \"The type, eg 'pubkeyhash'\")\n+            .Row(\"          \\\"address\\\" : \\\"address\\\"\", {\"string\"}, \"Bitcoin address if there is one\")\n+            .Row(\"        }\")\n+            .Row(\"      },\")\n+            .Row(\"      \\\"partial_signatures\\\" : {\", {\"json object\", \"optional\"})\n+            .Row(\"        \\\"pubkey\\\" : \\\"signature\\\",\", {\"string\"}, \"The public key and signature that corresponds to it.\")\n+            .Row(\"        ,...\")\n+            .Row(\"      }\")\n+            .Row(\"      \\\"sighash\\\" : \\\"type\\\",\", {\"string\", \"optional\"}, \"The sighash type to be used\")\n+            .Row(\"      \\\"redeem_script\\\" : {\", {\"json object\", \"optional\"})\n+            .Row(\"          \\\"asm\\\" : \\\"asm\\\",\", {\"string\"}, \"The asm\")\n+            .Row(\"          \\\"hex\\\" : \\\"hex\\\",\", {\"string\"}, \"The hex\")\n+            .Row(\"          \\\"type\\\" : \\\"pubkeyhash\\\",\", {\"string\"}, \"The type, eg 'pubkeyhash'\")\n+            .Row(\"        }\")\n+            .Row(\"      \\\"witness_script\\\" : {\", {\"json object\", \"optional\"})\n+            .Row(\"          \\\"asm\\\" : \\\"asm\\\",\", {\"string\"}, \"The asm\")\n+            .Row(\"          \\\"hex\\\" : \\\"hex\\\",\", {\"string\"}, \"The hex\")\n+            .Row(\"          \\\"type\\\" : \\\"pubkeyhash\\\",\", {\"string\"}, \"The type, eg 'pubkeyhash'\")\n+            .Row(\"        }\")\n+            .Row(\"      \\\"bip32_derivs\\\" : {\", {\"json object\", \"optional\"})\n+            .Row(\"        \\\"pubkey\\\" : {\", {\"json object\", \"optional\"}, \"The public key with the derivation path as the value.\")\n+            .Row(\"          \\\"master_fingerprint\\\" : \\\"fingerprint\\\"\", {\"string\"}, \"The fingerprint of the master key\")\n+            .Row(\"          \\\"path\\\" : \\\"path\\\",\", {\"string\"}, \"The path\")\n+            .Row(\"        }\")\n+            .Row(\"        ,...\")\n+            .Row(\"      }\")\n+            .Row(\"      \\\"final_scriptsig\\\" : {\", {\"json object\", \"optional\"})\n+            .Row(\"          \\\"asm\\\" : \\\"asm\\\",\", {\"string\"}, \"The asm\")\n+            .Row(\"          \\\"hex\\\" : \\\"hex\\\",\", {\"string\"}, \"The hex\")\n+            .Row(\"        }\")\n+            .Row(\"       \\\"final_scriptwitness\\\": [\\\"hex\\\", ...]\", {\"array of string\"}, \"hex-encoded witness data (if any)\")\n+            .Row(\"      \\\"unknown\\\" : {\", {\"json object\"}, \"The unknown global fields\")\n+            .Row(\"        \\\"key\\\" : \\\"value\\\"\", {\"key-value pair\"}, \"An unknown key-value pair\")\n+            .Row(\"         ...\")\n+            .Row(\"      },\")\n+            .Row(\"    }\")\n+            .Row(\"    ,...\")\n+            .Row(\"  ]\")\n+            .Row(\"  \\\"outputs\\\" : [\", {\"array of json objects\"})\n+            .Row(\"    {\")\n+            .Row(\"      \\\"redeem_script\\\" : {\", {\"json object\", \"optional\"})\n+            .Row(\"          \\\"asm\\\" : \\\"asm\\\",\", {\"string\"}, \"The asm\")\n+            .Row(\"          \\\"hex\\\" : \\\"hex\\\",\", {\"string\"}, \"The hex\")\n+            .Row(\"          \\\"type\\\" : \\\"pubkeyhash\\\",\", {\"string\"}, \"The type, eg 'pubkeyhash'\")\n+            .Row(\"        }\")\n+            .Row(\"      \\\"witness_script\\\" : {\", {\"json object\", \"optional\"})\n+            .Row(\"          \\\"asm\\\" : \\\"asm\\\",\", {\"string\"}, \"The asm\")\n+            .Row(\"          \\\"hex\\\" : \\\"hex\\\",\", {\"string\"}, \"The hex\")\n+            .Row(\"          \\\"type\\\" : \\\"pubkeyhash\\\",\", {\"string\"}, \"The type, eg 'pubkeyhash'\")\n+            .Row(\"      }\")\n+            .Row(\"      \\\"bip32_derivs\\\" : [\", {\"array of json objects\", \"optional\"})\n+            .Row(\"        {\")\n+            .Row(\"          \\\"pubkey\\\" : \\\"pubkey\\\",\", {\"string\"}, \"The public key this path corresponds to\")\n+            .Row(\"          \\\"master_fingerprint\\\" : \\\"fingerprint\\\"\", {\"string\"}, \"The fingerprint of the master key\")\n+            .Row(\"          \\\"path\\\" : \\\"path\\\",\", {\"string\"}, \"The path\")\n+            .Row(\"          }\")\n+            .Row(\"        }\")\n+            .Row(\"        ,...\")\n+            .Row(\"      ],\")\n+            .Row(\"      \\\"unknown\\\" : {\", {\"json object\"}, \"The unknown global fields\")\n+            .Row(\"        \\\"key\\\" : \\\"value\\\"\", {\"key-value pair\"}, \"An unknown key-value pair\")\n+            .Row(\"         ...\")\n+            .Row(\"      },\")\n+            .Row(\"    }\")\n+            .Row(\"    ,...\")\n+            .Row(\"  ]\")\n+            .Row(\"  \\\"fee\\\" : fee\", {\"numeric\", \"optional\"}, \"The transaction fee paid if all UTXOs slots in the PSBT have been filled.\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"psbt\\\"\")\n+            .AsError();\n \n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n@@ -1451,22 +1418,20 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n UniValue combinepsbt(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"combinepsbt [\\\"psbt\\\",...]\\n\"\n-            \"\\nCombine multiple partially signed Bitcoin transactions into one transaction.\\n\"\n-            \"Implements the Combiner role.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n-            \"    [\\n\"\n-            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"combinepsbt\", \"[\\\"mybase64_1\\\", \\\"mybase64_2\\\", \\\"mybase64_3\\\"]\")\n-        );\n+        throw RPCDoc(\"combinepsbt\", \"[\\\"psbt\\\",...]\")\n+            .Desc(\n+                \"Combine multiple partially signed Bitcoin transactions into one transaction.\\n\"\n+                \"Implements the Combiner role.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"txs\\\"\", {\"string\"}, \"A json array of base64 strings of partially signed transactions\")\n+            .Row(\"    [\")\n+            .Row(\"      \\\"psbt\\\"\", {\"string\"}, \"A base64 string of a PSBT\")\n+            .Row(\"      ,...\")\n+            .Row(\"    ]\")\n+            .Table(\"Result\")\n+            .Row(\"  \\\"psbt\\\"\", {\"string\"}, \"The base64-encoded partially signed transaction\")\n+            .ExampleCli(\"[\\\"mybase64_1\\\", \\\"mybase64_2\\\", \\\"mybase64_3\\\"]\")\n+            .AsError();\n \n     RPCTypeCheck(request.params, {UniValue::VARR}, true);\n \n@@ -1504,28 +1469,26 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n UniValue finalizepsbt(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"finalizepsbt \\\"psbt\\\" ( extract )\\n\"\n-            \"Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a\\n\"\n-            \"network serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be\\n\"\n-            \"created which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.\\n\"\n-            \"Implements the Finalizer and Extractor roles.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n-            \"2. \\\"extract\\\"              (boolean, optional, default=true) If true and the transaction is complete, \\n\"\n-            \"                             extract and return the complete transaction in normal network serialization instead of the PSBT.\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"psbt\\\" : \\\"value\\\",          (string) The base64-encoded partially signed transaction if not extracted\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded network transaction if extracted\\n\"\n-            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"finalizepsbt\", \"\\\"psbt\\\"\")\n-        );\n+        throw RPCDoc(\"finalizepsbt\", \"\\\"psbt\\\" ( extract )\")\n+            .Desc(\n+                \"Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a\\n\"\n+                \"network serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be\\n\"\n+                \"created which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.\\n\"\n+                \"Implements the Finalizer and Extractor roles.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"psbt\\\"\", {\"string\"}, \"A base64 string of a PSBT\")\n+            .Row(\"2. \\\"extract\\\"\", {\"boolean\", \"optional\", \"default=true\"},\n+                \"If true and the transaction is complete, \\n\"\n+                \"extract and return the complete transaction in normal network serialization instead of the PSBT.\")\n+            .Table(\"Result\")\n+            .Row(\"{\")\n+            .Row(\"  \\\"psbt\\\" : \\\"value\\\",\", {\"string\"}, \"The base64-encoded partially signed transaction if not extracted\")\n+            .Row(\"  \\\"hex\\\" : \\\"value\\\",\", {\"string\"}, \"The hex-encoded network transaction if extracted\")\n+            .Row(\"  \\\"complete\\\" : true|false,\", {\"boolean\"}, \"If the transaction has a complete set of signatures\")\n+            .Row(\"  ]\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"psbt\\\"\")\n+            .AsError();\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL}, true);\n \n@@ -1567,40 +1530,40 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n UniValue createpsbt(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n-        throw std::runtime_error(\n-                            \"createpsbt [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] [{\\\"address\\\":amount},{\\\"data\\\":\\\"hex\\\"},...] ( locktime ) ( replaceable )\\n\"\n-                            \"\\nCreates a transaction in the Partially Signed Transaction format.\\n\"\n-                            \"Implements the Creator role.\\n\"\n-                            \"\\nArguments:\\n\"\n-                            \"1. \\\"inputs\\\"                (array, required) A json array of json objects\\n\"\n-                            \"     [\\n\"\n-                            \"       {\\n\"\n-                            \"         \\\"txid\\\":\\\"id\\\",      (string, required) The transaction id\\n\"\n-                            \"         \\\"vout\\\":n,         (numeric, required) The output number\\n\"\n-                            \"         \\\"sequence\\\":n      (numeric, optional) The sequence number\\n\"\n-                            \"       } \\n\"\n-                            \"       ,...\\n\"\n-                            \"     ]\\n\"\n-                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n-                            \"   [\\n\"\n-                            \"    {\\n\"\n-                            \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\"\n-                            \"    },\\n\"\n-                            \"    {\\n\"\n-                            \"      \\\"data\\\": \\\"hex\\\"        (obj, optional) A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\\n\"\n-                            \"    }\\n\"\n-                            \"    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n-                            \"                             accepted as second parameter.\\n\"\n-                            \"   ]\\n\"\n-                            \"3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n-                            \"4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.\\n\"\n-                            \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\\n\"\n-                            \"\\nResult:\\n\"\n-                            \"  \\\"psbt\\\"        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n-                            \"\\nExamples:\\n\"\n-                            + HelpExampleCli(\"createpsbt\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n-                            );\n-\n+        throw RPCDoc(\"createpsbt\", \"[{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] [{\\\"address\\\":amount},{\\\"data\\\":\\\"hex\\\"},...] ( locktime ) ( replaceable )\")\n+            .Desc(\n+                \"Creates a transaction in the Partially Signed Transaction format.\\n\"\n+                \"Implements the Creator role.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"inputs\\\"\", {\"array\", \"required\"}, \"A json array of json objects\")\n+            .Row(\"     [\")\n+            .Row(\"       {\")\n+            .Row(\"         \\\"txid\\\":\\\"id\\\",\", {\"string\", \"required\"}, \"The transaction id\")\n+            .Row(\"         \\\"vout\\\":n,\", {\"numeric\", \"required\"}, \"The output number\")\n+            .Row(\"         \\\"sequence\\\":n\", {\"numeric\", \"optional\"}, \"The sequence number\")\n+            .Row(\"       } \")\n+            .Row(\"       ,...\")\n+            .Row(\"     ]\")\n+            .Row(\"2. \\\"outputs\\\"\", {\"array\", \"required\"}, \"a json array with outputs (key-value pairs)\")\n+            .Row(\"   [\")\n+            .Row(\"    {\")\n+            .Row(\"      \\\"address\\\": x.xxx,\", {\"obj\", \"optional\"}, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT)\n+            .Row(\"    },\")\n+            .Row(\"    {\")\n+            .Row(\"      \\\"data\\\": \\\"hex\\\"\", {\"obj\", \"optional\"}, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\")\n+            .Row(\"    }\")\n+            .Row(\"    ,...\",\n+                \"More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n+                \"accepted as second parameter.\")\n+            .Row(\"   ]\")\n+            .Row(\"3. locktime\", {\"numeric\", \"optional\", \"default=0\"}, \"Raw locktime. Non-0 value also locktime-activates inputs\")\n+            .Row(\"4. replaceable\", {\"boolean\", \"optional\", \"default=false\"},\n+                \"Marks this transaction as BIP125 replaceable.\\n\"\n+                \"Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\")\n+            .Table(\"Result\")\n+            .Row(\"  \\\"psbt\\\"\", {\"string\"}, \"The resulting raw transaction (base64-encoded string)\")\n+            .ExampleCli(\"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n+            .AsError();\n \n     RPCTypeCheck(request.params, {\n         UniValue::VARR,\n@@ -1632,26 +1595,25 @@ UniValue createpsbt(const JSONRPCRequest& request)\n UniValue converttopsbt(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n-                            \"converttopsbt \\\"hexstring\\\" ( permitsigdata iswitness )\\n\"\n-                            \"\\nConverts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\\n\"\n-                            \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\"\n-                            \"\\nArguments:\\n\"\n-                            \"1. \\\"hexstring\\\"              (string, required) The hex string of a raw transaction\\n\"\n-                            \"2. permitsigdata           (boolean, optional, default=false) If true, any signatures in the input will be discarded and conversion.\\n\"\n-                            \"                              will continue. If false, RPC will fail if any signatures are present.\\n\"\n-                            \"3. iswitness               (boolean, optional) Whether the transaction hex is a serialized witness transaction.\\n\"\n-                            \"                              If iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion\\n\"\n-                            \"                              will be tried. If false, only non-witness deserialization will be tried. Only has an effect if\\n\"\n-                            \"                              permitsigdata is true.\\n\"\n-                            \"\\nResult:\\n\"\n-                            \"  \\\"psbt\\\"        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n-                            \"\\nExamples:\\n\"\n-                            \"\\nCreate a transaction\\n\"\n-                            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\") +\n-                            \"\\nConvert the transaction to a PSBT\\n\"\n-                            + HelpExampleCli(\"converttopsbt\", \"\\\"rawtransaction\\\"\")\n-                            );\n+        throw RPCDoc(\"converttopsbt\", \"\\\"hexstring\\\" ( permitsigdata iswitness )\")\n+            .Desc(\n+                \"Converts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\\n\"\n+                \"createpsbt and walletcreatefundedpsbt should be used for new applications.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"hexstring\\\"\", {\"string\", \"required\"}, \"The hex string of a raw transaction\")\n+            .Row(\"2. permitsigdata\", {\"boolean\", \"optional\", \"default=false\"},\n+                \"If true, any signatures in the input will be discarded and conversion\\n\"\n+                \"will continue. If false, RPC will fail if any signatures are present.\")\n+            .Row(\"3. iswitness\", {\"boolean\", \"optional\"},\n+                \"Whether the transaction hex is a serialized witness transaction.\\n\"\n+                \"If iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion\\n\"\n+                \"will be tried. If false, only non-witness deserialization will be tried. Only has an effect if\\n\"\n+                \"permitsigdata is true.\")\n+            .Table(\"Result\")\n+            .Row(\"  \\\"psbt\\\"\", {\"string\"}, \"The resulting raw transaction (base64-encoded string)\")\n+            .ExampleCli(\"Create a transaction\", \"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n+            .ExampleCli(\"Convert the transaction to a PSBT\", \"\\\"rawtransaction\\\"\")\n+            .AsError();\n \n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VBOOL}, true);"
      },
      {
        "sha": "fddaeb2945f3a8f18a4c4cd6ef04e945dacdbae2",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 20,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=a9b9eedc201f08f34cf4a97999dc465a4dd69492",
        "patch": "@@ -14,6 +14,8 @@\n #include <util.h>\n #include <utilstrencodings.h>\n \n+#include <rpc/doc.h>\n+\n #include <boost/bind.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/algorithm/string/classification.hpp>\n@@ -202,14 +204,13 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n UniValue help(const JSONRPCRequest& jsonRequest)\n {\n     if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n-        throw std::runtime_error(\n-            \"help ( \\\"command\\\" )\\n\"\n-            \"\\nList all commands, or get help for a specified command.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"command\\\"     (string, optional) The command to get help on\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\\"text\\\"     (string) The help text\\n\"\n-        );\n+        throw RPCDoc(\"help\", \"( \\\"command\\\" )\")\n+            .Desc(\"List all commands, or get help for a specified command.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"command\\\"\", {\"string\", \"optional\"}, \"The command to get help on\")\n+            .Table(\"Result\")\n+            .Row(\"\\\"text\\\"\", {\"string\"}, \"The help text\")\n+            .AsError();\n \n     std::string strCommand;\n     if (jsonRequest.params.size() > 0)\n@@ -223,9 +224,9 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n {\n     // Accept the deprecated and ignored 'detach' boolean argument\n     if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n-        throw std::runtime_error(\n-            \"stop\\n\"\n-            \"\\nStop Bitcoin server.\");\n+        throw RPCDoc(\"stop\")\n+            .Desc(\"Stop Bitcoin server.\")\n+            .AsError();\n     // Event loop will exit after current HTTP requests have been handled, so\n     // this reply will get back to the client.\n     StartShutdown();\n@@ -235,15 +236,13 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n static UniValue uptime(const JSONRPCRequest& jsonRequest)\n {\n     if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n-        throw std::runtime_error(\n-                \"uptime\\n\"\n-                        \"\\nReturns the total uptime of the server.\\n\"\n-                        \"\\nResult:\\n\"\n-                        \"ttt        (numeric) The number of seconds that the server has been running\\n\"\n-                        \"\\nExamples:\\n\"\n-                + HelpExampleCli(\"uptime\", \"\")\n-                + HelpExampleRpc(\"uptime\", \"\")\n-        );\n+        throw RPCDoc(\"uptime\")\n+            .Desc(\"Returns the total uptime of the server.\")\n+            .Table(\"Result\")\n+            .Row(\"ttt\", {\"numeric\"}, \"The number of seconds that the server has been running\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n \n     return GetTime() - GetStartupTime();\n }"
      },
      {
        "sha": "65495f57813351c0e784c757430c0d57b3043eff",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 199,
        "deletions": 171,
        "changes": 370,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a9b9eedc201f08f34cf4a97999dc465a4dd69492",
        "patch": "@@ -3,17 +3,18 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n+#include <core_io.h>\n #include <key_io.h>\n+#include <merkleblock.h>\n+#include <rpc/doc.h>\n #include <rpc/server.h>\n-#include <validation.h>\n #include <script/script.h>\n #include <script/standard.h>\n #include <sync.h>\n #include <util.h>\n #include <utiltime.h>\n+#include <validation.h>\n #include <wallet/wallet.h>\n-#include <merkleblock.h>\n-#include <core_io.h>\n \n #include <wallet/rpcwallet.h>\n \n@@ -106,28 +107,34 @@ UniValue importprivkey(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n-            \"importprivkey \\\"privkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n-            \"\\nAdds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\\n\"\n-            \"Hint: use importmulti to import more than one private key.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"privkey\\\"          (string, required) The private key (see dumpprivkey)\\n\"\n-            \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n-            \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n-            \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n-            \"may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nDump a private key\\n\"\n-            + HelpExampleCli(\"dumpprivkey\", \"\\\"myaddress\\\"\") +\n-            \"\\nImport the private key with rescan\\n\"\n-            + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\") +\n-            \"\\nImport using a label and without rescan\\n\"\n-            + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\" \\\"testing\\\" false\") +\n-            \"\\nImport using default blank label and without rescan\\n\"\n-            + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\" \\\"\\\" false\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"importprivkey\", \"\\\"mykey\\\", \\\"testing\\\", false\")\n-        );\n+        throw RPCDoc(\"importprivkey\", \"\\\"privkey\\\" ( \\\"label\\\" ) ( rescan )\")\n+            .Desc(\n+                \"Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\\n\"\n+                \"Hint: use importmulti to import more than one private key.\\n\"\n+                \"\\n\"\n+                \"Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n+                \"may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"privkey\\\"\", {\"string\", \"required\"}, \"The private key (see dumpprivkey)\")\n+            .Row(\"2. \\\"label\\\"\", {\"string\", \"optional\", \"default=\\\"\\\"\"}, \"An optional label\")\n+            .Row(\"3. rescan\", {\"boolean\", \"optional\", \"default=true\"}, \"Rescan the wallet for transactions\")\n+            .ExampleCli(\n+                \"Dump a private key\",\n+                \"dumpprivkey\",\n+                \"\\\"myaddress\\\"\")\n+            .ExampleCli(\n+                \"Import the private key with rescan\"\n+                \"\\\"mykey\\\"\")\n+            .ExampleCli(\n+                \"Import using a label and without rescan\",\n+                \"\\\"mykey\\\" \\\"testing\\\" false\")\n+            .ExampleCli(\n+                \"Import using default blank label and without rescan\",\n+                \"\\\"mykey\\\" \\\"\\\" false\")\n+            .ExampleRpc(\n+                \"As a JSON-RPC call\",\n+                \"\\\"mykey\\\", \\\"testing\\\", false\")\n+            .AsError();\n \n \n     WalletRescanReserver reserver(pwallet);\n@@ -197,17 +204,19 @@ UniValue abortrescan(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() > 0)\n-        throw std::runtime_error(\n-            \"abortrescan\\n\"\n-            \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nImport a private key\\n\"\n-            + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\") +\n-            \"\\nAbort the running wallet rescan\\n\"\n-            + HelpExampleCli(\"abortrescan\", \"\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"abortrescan\", \"\")\n-        );\n+        throw RPCDoc(\"abortrescan\")\n+            .Desc(\"Stops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\")\n+            .ExampleCli(\n+                \"Import a private key\",\n+                \"importprivkey\",\n+                \"\\\"mykey\\\"\")\n+            .ExampleCli(\n+                \"Abort the running wallet rescan\",\n+                \"\")\n+            .ExampleRpc(\n+                \"As a JSON-RPC call\",\n+                \"\")\n+            .AsError();\n \n     if (!pwallet->IsScanning() || pwallet->IsAbortingRescan()) return false;\n     pwallet->AbortRescan();\n@@ -259,28 +268,31 @@ UniValue importaddress(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n-            \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"          (string, required) The Bitcoin address (or hex-encoded script)\\n\"\n-            \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n-            \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n-            \"4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\\n\"\n-            \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n-            \"may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n-            \"If you have the full public key, you should call importpubkey instead of this.\\n\"\n-            \"\\nNote: If you import a non-standard raw script in hex form, outputs sending to it will be treated\\n\"\n-            \"as change, and not show up in many RPCs.\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nImport an address with rescan\\n\"\n-            + HelpExampleCli(\"importaddress\", \"\\\"myaddress\\\"\") +\n-            \"\\nImport using a label without rescan\\n\"\n-            + HelpExampleCli(\"importaddress\", \"\\\"myaddress\\\" \\\"testing\\\" false\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"importaddress\", \"\\\"myaddress\\\", \\\"testing\\\", false\")\n-        );\n-\n+        throw RPCDoc(\"importaddress\", \"\\\"address\\\" ( \\\"label\\\" rescan p2sh )\")\n+            .Desc(\n+                \"Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n+                \"\\n\"\n+                \"Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n+                \"may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n+                \"\\n\"\n+                \"Note: If you import a non-standard raw script in hex form, outputs sending to it will be treated\\n\"\n+                \"as change, and not show up in many RPCs.\\n\"\n+                \"If you have the full public key, you should call importpubkey instead of this.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"address\\\"\", {\"string\", \"required\"}, \"The Bitcoin address (or hex-encoded script)\")\n+            .Row(\"2. \\\"label\\\"\", {\"string\", \"optional\", \"default=\\\"\\\"\"}, \"An optional label\")\n+            .Row(\"3. rescan\", {\"boolean\", \"optional\", \"default=true\"}, \"Rescan the wallet for transactions\")\n+            .Row(\"4. p2sh\", {\"boolean\", \"optional\", \"default=false\"}, \"Add the P2SH version of the script as well\")\n+            .ExampleCli(\n+                \"Import an address with rescan\",\n+                \"\\\"myaddress\\\"\")\n+            .ExampleCli(\n+                \"Import using a label without rescan\",\n+                \"\\\"myaddress\\\" \\\"testing\\\" false\")\n+            .ExampleRpc(\n+                \"As a JSON-RPC call\",\n+                \"\\\"myaddress\\\", \\\"testing\\\", false\")\n+            .AsError();\n \n     std::string strLabel;\n     if (!request.params[1].isNull())\n@@ -338,13 +350,12 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 2)\n-        throw std::runtime_error(\n-            \"importprunedfunds\\n\"\n-            \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"rawtransaction\\\" (string, required) A raw transaction in hex funding an already-existing address in wallet\\n\"\n-            \"2. \\\"txoutproof\\\"     (string, required) The hex output from gettxoutproof that contains the transaction\\n\"\n-        );\n+        throw RPCDoc(\"importprunedfunds\")\n+            .Desc(\"Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"rawtransaction\\\"\", {\"string\", \"required\"}, \"A raw transaction in hex funding an already-existing address in wallet\")\n+            .Row(\"2. \\\"txoutproof\\\"\", {\"string\", \"required\"}, \"The hex output from gettxoutproof that contains the transaction\")\n+            .AsError();\n \n     CMutableTransaction tx;\n     if (!DecodeHexTx(tx, request.params[0].get_str()))\n@@ -401,16 +412,15 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"removeprunedfunds \\\"txid\\\"\\n\"\n-            \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"           (string, required) The hex-encoded id of the transaction you are deleting\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\")\n-        );\n+        throw RPCDoc(\"removeprunedfunds\", \"\\\"txid\\\"\")\n+            .Desc(\"Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"txid\\\"\", {\"string\", \"required\"}, \"The hex-encoded id of the transaction you are deleting\")\n+            .ExampleCli(\"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\")\n+            .ExampleRpc(\n+                \"As a JSON-RPC call\",\n+                \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\")\n+            .AsError();\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n@@ -439,24 +449,25 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n-            \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan )\\n\"\n-            \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"pubkey\\\"           (string, required) The hex-encoded public key\\n\"\n-            \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n-            \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n-            \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n-            \"may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nImport a public key with rescan\\n\"\n-            + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\"\") +\n-            \"\\nImport using a label without rescan\\n\"\n-            + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\" \\\"testing\\\" false\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"importpubkey\", \"\\\"mypubkey\\\", \\\"testing\\\", false\")\n-        );\n-\n+        throw RPCDoc(\"importpubkey\", \"\\\"pubkey\\\" ( \\\"label\\\" rescan )\")\n+            .Desc(\n+                \"Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n+                \"\\n\"\n+                \"Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n+                \"may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"pubkey\\\"\", {\"string\", \"required\"}, \"The hex-encoded public key\")\n+            .Row(\"2. \\\"label\\\"\", {\"string\", \"optional\", \"default=\\\"\\\"\"}, \"An optional label\")\n+            .Row(\"3. rescan\", {\"boolean\", \"optional\", \"default=true\"}, \"Rescan the wallet for transactions\")\n+            .ExampleCli(\n+                \"Import a public key with rescan\",\n+                \"\\\"mypubkey\\\"\")\n+            .ExampleCli(\n+                \"Import using a label without rescan\",\n+                \"\\\"mypubkey\\\" \\\"testing\\\" false\")\n+            .ExampleRpc(\"As a JSON-RPC call\",\n+                \"\\\"mypubkey\\\", \\\"testing\\\", false\")\n+            .AsError();\n \n     std::string strLabel;\n     if (!request.params[1].isNull())\n@@ -510,19 +521,21 @@ UniValue importwallet(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"importwallet \\\"filename\\\"\\n\"\n-            \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"filename\\\"    (string, required) The wallet file\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nDump the wallet\\n\"\n-            + HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\") +\n-            \"\\nImport the wallet\\n\"\n-            + HelpExampleCli(\"importwallet\", \"\\\"test\\\"\") +\n-            \"\\nImport using the json rpc call\\n\"\n-            + HelpExampleRpc(\"importwallet\", \"\\\"test\\\"\")\n-        );\n+        throw RPCDoc(\"importwallet\", \"\\\"filename\\\"\")\n+            .Desc(\"Imports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"filename\\\"\", {\"string\", \"required\"}, \"The wallet file\")\n+            .ExampleCli(\n+                \"Dump the wallet\",\n+                \"dumpwallet\",\n+                \"\\\"test\\\"\")\n+            .ExampleCli(\n+                \"Import the wallet\",\n+                \"\\\"test\\\"\")\n+            .ExampleRpc(\n+                \"Import using the json rpc call\",\n+                \"\\\"test\\\"\")\n+            .AsError();\n \n     if (fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled in pruned mode\");\n@@ -639,19 +652,21 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"dumpprivkey \\\"address\\\"\\n\"\n-            \"\\nReveals the private key corresponding to 'address'.\\n\"\n-            \"Then the importprivkey can be used with this output\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"   (string, required) The bitcoin address for the private key\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\\"key\\\"                (string) The private key\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n-            + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\")\n-            + HelpExampleRpc(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n-        );\n+        throw RPCDoc(\"dumpprivkey\", \"\\\"address\\\"\")\n+            .Desc(\n+                \"Reveals the private key corresponding to 'address'.\\n\"\n+                \"Then the importprivkey can be used with this output\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"address\\\"\", {\"string\", \"required\"}, \"The bitcoin address for the private key\")\n+            .Table(\"Result\")\n+            .Row(\"\\\"key\\\"\", {\"string\"}, \"The private key\")\n+            .ExampleCli(\"\\\"myaddress\\\"\")\n+            .ExampleCli(\n+                \"\",\n+                \"importprivkey\",\n+                \"\\\"mykey\\\"\")\n+            .ExampleRpc(\"\\\"myaddress\\\"\")\n+            .AsError();\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n@@ -683,22 +698,21 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"dumpwallet \\\"filename\\\"\\n\"\n-            \"\\nDumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\\n\"\n-            \"Imported scripts are included in the dumpfile, but corresponding BIP173 addresses, etc. may not be added automatically by importwallet.\\n\"\n-            \"Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by\\n\"\n-            \"only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"filename\\\"    (string, required) The filename with path (either absolute or relative to bitcoind)\\n\"\n-            \"\\nResult:\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"filename\\\" : {        (string) The filename with full absolute path\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\")\n-            + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n-        );\n+        throw RPCDoc(\"dumpwallet\", \"\\\"filename\\\"\")\n+            .Desc(\n+                \"Dumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\\n\"\n+                \"Imported scripts are included in the dumpfile, but corresponding BIP173 addresses, etc. may not be added automatically by importwallet.\\n\"\n+                \"Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by\\n\"\n+                \"only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).\")\n+            .Table(\"Arguments\")\n+            .Row(\"1. \\\"filename\\\"\", {\"string\", \"required\"}, \"The filename with path (either absolute or relative to bitcoind)\")\n+            .Table(\"Result\")\n+            .Row(\"{\", {\"json object\"})\n+            .Row(\"  \\\"filename\\\" : {\", {\"string\"}, \"The filename with full absolute path\")\n+            .Row(\"}\")\n+            .ExampleCli(\"\\\"test\\\"\")\n+            .ExampleRpc(\"\\\"test\\\"\")\n+            .AsError();\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n@@ -1103,42 +1117,56 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     // clang-format off\n     if (mainRequest.fHelp || mainRequest.params.size() < 1 || mainRequest.params.size() > 2)\n-        throw std::runtime_error(\n-            \"importmulti \\\"requests\\\" ( \\\"options\\\" )\\n\\n\"\n-            \"Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.\\n\\n\"\n-            \"Arguments:\\n\"\n-            \"1. requests     (array, required) Data to be imported\\n\"\n-            \"  [     (array of json objects)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"scriptPubKey\\\": \\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)\\n\"\n-            \"      \\\"timestamp\\\": timestamp | \\\"now\\\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n-            \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n-            \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n-            \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n-            \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\\n\"\n-            \"                                                              creation time of all keys being imported by the importmulti call will be scanned.\\n\"\n-            \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n-            \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n-            \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n-            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments\\n\"\n-            \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n-            \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address, only allowed with internal=false\\n\"\n-            \"    }\\n\"\n-            \"  ,...\\n\"\n-            \"  ]\\n\"\n-            \"2. options                 (json, optional)\\n\"\n-            \"  {\\n\"\n-            \"     \\\"rescan\\\": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports\\n\"\n-            \"  }\\n\"\n-            \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n-            \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\"\n-            \"\\nExamples:\\n\" +\n-            HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }, \"\n-                                          \"{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my 2nd address>\\\" }, \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +\n-            HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }]' '{ \\\"rescan\\\": false}'\") +\n-\n-            \"\\nResponse is an array with the same size as the input that has the execution result :\\n\"\n-            \"  [{ \\\"success\\\": true } , { \\\"success\\\": false, \\\"error\\\": { \\\"code\\\": -1, \\\"message\\\": \\\"Internal Server Error\\\"} }, ... ]\\n\");\n+        throw RPCDoc(\"importmulti\", \"\\\"requests\\\" ( \\\"options\\\" )\")\n+            .Desc(\n+                \"Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.\\n\"\n+                \"\\n\"\n+                \"Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n+                \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\"\n+                \"\\n\"\n+                \"Response is an array with the same size as the input that has the execution result :\\n\"\n+                \"`[{ \\\"success\\\": true } , { \\\"success\\\": false, \\\"error\\\": { \\\"code\\\": -1, \\\"message\\\": \\\"Internal Server Error\\\"} }, ... ]`\"\n+            )\n+            .Table(\"Arguments\")\n+            .Row(\"1. requests\", {\"array\", \"required\"}, \"Data to be imported\")\n+            .Row(\"  [\", {\"array of json objects\"})\n+            .Row(\"    {\")\n+            .Row(\"      \\\"scriptPubKey\\\":\", {\"string / json\", \"required\"}, \"Type of scriptPubKey (string for script, json for address)\")\n+            .Row(\"        \\\"<script>\\\" |\")\n+            .Row(\"        { \\\"address\\\":\\\"<address>\\\" },\")\n+            .Row(\"      \\\"timestamp\\\": timestamp | \\\"now\\\",\", {\"integer / string\", \"required\"},\n+                \"Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+                \"or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n+                \"key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n+                \"\\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n+                \"0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\\n\"\n+                \"creation time of all keys being imported by the importmulti call will be scanned.\"\n+            )\n+            .Row(\"      \\\"redeemscript\\\": \\\"<script>\\\",\", {\"string\", \"optional\"},\n+                \"Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\")\n+            .Row(\"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ],\", {\"array\", \"optional\"},\n+                \"Array of strings giving pubkeys that must occur in the output or redeemscript\")\n+            .Row(\"      \\\"keys\\\": [\\\"<key>\\\", ... ],\", {\"array\", \"optional\"},\n+                \"Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\")\n+            .Row(\"      \\\"internal\\\": <true>,\", {\"boolean\", \"optional\", \"default: false\"},\n+                \"Stating whether matching outputs should be treated as not incoming payments\")\n+            .Row(\"      \\\"watchonly\\\": <true>,\", {\"boolean\", \"optional\", \"default: false\"},\n+                \"Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\")\n+            .Row(\"      \\\"label\\\": <label>,\", {\"string\", \"optional\", \"default: ''\"},\n+                \"Label to assign to the address, only allowed with internal=false\")\n+            .Row(\"    }\")\n+            .Row(\"  ,...\")\n+            .Row(\"  ]\")\n+            .Row(\"2. options\", {\"json\", \"optional\"})\n+            .Row(\"  {\")\n+            .Row(\"     \\\"rescan\\\": <false>,\", {\"boolean\", \"optional\", \"default: true\"}, \"Stating if should rescan the blockchain after all imports\")\n+            .Row(\"  }\")\n+            .ExampleCli(\n+                \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }, \"\n+                \"{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my 2nd address>\\\" }, \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\")\n+            .ExampleCli(\n+                \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }]' '{ \\\"rescan\\\": false}'\")\n+            .AsError();\n \n     // clang-format on\n "
      },
      {
        "sha": "2df1f076c941e23063b2bfcb05fbc4e689a48344",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1140,
        "deletions": 1119,
        "changes": 2259,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a9b9eedc201f08f34cf4a97999dc465a4dd69492"
      },
      {
        "sha": "99249de74c2c097c947d0504982e181c5de84547",
        "filename": "src/zmq/zmqrpc.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 15,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/zmq/zmqrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b9eedc201f08f34cf4a97999dc465a4dd69492/src/zmq/zmqrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqrpc.cpp?ref=a9b9eedc201f08f34cf4a97999dc465a4dd69492",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <zmq/zmqrpc.h>\n \n+#include <rpc/doc.h>\n #include <rpc/server.h>\n #include <zmq/zmqabstractnotifier.h>\n #include <zmq/zmqnotificationinterface.h>\n@@ -15,21 +16,19 @@ namespace {\n UniValue getzmqnotifications(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0) {\n-        throw std::runtime_error(\n-            \"getzmqnotifications\\n\"\n-            \"\\nReturns information about the active ZeroMQ notifications.\\n\"\n-            \"\\nResult:\\n\"\n-            \"[\\n\"\n-            \"  {                        (json object)\\n\"\n-            \"    \\\"type\\\": \\\"pubhashtx\\\",   (string) Type of notification\\n\"\n-            \"    \\\"address\\\": \\\"...\\\"       (string) Address of the publisher\\n\"\n-            \"  },\\n\"\n-            \"  ...\\n\"\n-            \"]\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getzmqnotifications\", \"\")\n-            + HelpExampleRpc(\"getzmqnotifications\", \"\")\n-        );\n+        throw RPCDoc(\"getzmqnotifications\")\n+            .Desc(\"Returns information about the active ZeroMQ notifications.\")\n+            .Table(\"Result\")\n+            .Row(\"[\")\n+            .Row(\"  {\", {\"json object\"})\n+            .Row(\"    \\\"type\\\": \\\"pubhashtx\\\",\", {\"string\"}, \"Type of notification\")\n+            .Row(\"    \\\"address\\\": \\\"...\\\"\", {\"string\"}, \"Address of the publisher\")\n+            .Row(\"  },\")\n+            .Row(\"  ...\")\n+            .Row(\"]\")\n+            .ExampleCli(\"\")\n+            .ExampleRpc(\"\")\n+            .AsError();\n     }\n \n     UniValue result(UniValue::VARR);"
      }
    ]
  },
  {
    "sha": "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzhiYWExNDRhMjk0MjhhN2FlMzQ0OTNlYjNiYjNkYjNhYjRjMWY1",
    "commit": {
      "author": {
        "name": "Karel Bilek",
        "email": "kb@karelbilek.com",
        "date": "2018-10-17T11:41:26Z"
      },
      "committer": {
        "name": "Karel Bilek",
        "email": "kb@karelbilek.com",
        "date": "2018-10-19T10:29:05Z"
      },
      "message": "[rpc] Removing unused helper functions",
      "tree": {
        "sha": "53b634190b50cf8a19fc4513b1bf3b539a133bc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53b634190b50cf8a19fc4513b1bf3b539a133bc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEEB0I5VVMWmCbHjE6cAbGb9s2JHwFAlvJsfEACgkQcAbGb9s2\nJHxdzw/8DCb4jz3XvoUE3DGw6oo5Sdk4sJamwaVy9b3WGOX/VFF428tIpJp+t/UU\nNmVMt+oqxOZK7Jv4h446G8MKUnWhrDNLANJsSjSW4j8wP+D4C8IzOQ3qvrHzaHdt\nZqPsSenBrwGx545aTQkS8WRoD7Ils+S3dKKlfECNgcdrNg+wExgGNCZT32MYH+aQ\n9LwZ0dPt4V+HGB85Yxs55leMVH+sK2oXL7B2Rr4gT43xoxbKQGjXkPAow3STkitK\nDAwToIHax5JjmZjZVeFtVcc4IuM/aCsU3+zPNGS4gQNBFdjwpOrHTcrslMP1IsNK\na2T21ffgIw6MVl/+DrZMbxYj9mQ6q01Mm9gOcSOaDXNJsoBuiidwDFRb0zw+WIJy\ne6eqnE27iGK5pR4GySwGtFBzICqrjLNlKNc5KTBHAYAMPmlvGhcSLrbLUZE2rpW3\nLMXKAG4jx0o3jiXqCW0MxPrUgbO+08+3f9n26CUMHHoONY0fE0PK/sZXhJRRpD3V\nQn4AzWiMvRiNMk+P2KcE1xCfeYASJRE6KtXk243X968Q/FJFclYTrGL6rlBJhres\ng5MA++mcRKctpjNH4zQUxG91rUXTA8ozEQ07npb5t7hguvAAnBhAMyCyQPzll/VA\nX23OI+xqh41KIXuX3txS19c5p6YNeOX3qDrE6Xjjbw5DQuguegc=\n=3YEi\n-----END PGP SIGNATURE-----",
        "payload": "tree 53b634190b50cf8a19fc4513b1bf3b539a133bc5\nparent a9b9eedc201f08f34cf4a97999dc465a4dd69492\nauthor Karel Bilek <kb@karelbilek.com> 1539776486 +0700\ncommitter Karel Bilek <kb@karelbilek.com> 1539944945 +0700\n\n[rpc] Removing unused helper functions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c78baa144a29428a7ae34493eb3bb3db3ab4c1f5/comments",
    "author": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9b9eedc201f08f34cf4a97999dc465a4dd69492",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9b9eedc201f08f34cf4a97999dc465a4dd69492",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9b9eedc201f08f34cf4a97999dc465a4dd69492"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 0,
      "deletions": 13
    },
    "files": [
      {
        "sha": "8bba8137bcb40a2840a47bfdf16fdea8036b40dd",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c78baa144a29428a7ae34493eb3bb3db3ab4c1f5/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c78baa144a29428a7ae34493eb3bb3db3ab4c1f5/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
        "patch": "@@ -507,17 +507,6 @@ std::vector<std::string> CRPCTable::listCommands() const\n     return commandList;\n }\n \n-std::string HelpExampleCli(const std::string& methodname, const std::string& args)\n-{\n-    return \"> bitcoin-cli \" + methodname + \" \" + args + \"\\n\";\n-}\n-\n-std::string HelpExampleRpc(const std::string& methodname, const std::string& args)\n-{\n-    return \"> curl --user myusername --data-binary '{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\":\\\"curltest\\\", \"\n-        \"\\\"method\\\": \\\"\" + methodname + \"\\\", \\\"params\\\": [\" + args + \"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\\n\";\n-}\n-\n void RPCSetTimerInterfaceIfUnset(RPCTimerInterface *iface)\n {\n     if (!timerInterface)"
      },
      {
        "sha": "1fdb67cd44466801d2426b65ca91638381bcd3ae",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c78baa144a29428a7ae34493eb3bb3db3ab4c1f5/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c78baa144a29428a7ae34493eb3bb3db3ab4c1f5/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
        "patch": "@@ -195,8 +195,6 @@ extern std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strNa\n extern std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey);\n \n extern CAmount AmountFromValue(const UniValue& value);\n-extern std::string HelpExampleCli(const std::string& methodname, const std::string& args);\n-extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);\n \n void StartRPC();\n void InterruptRPC();"
      }
    ]
  }
]