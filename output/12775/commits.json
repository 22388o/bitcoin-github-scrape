[
  {
    "sha": "b2f49bd7325989267017260a9e7c843588a8c237",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmY0OWJkNzMyNTk4OTI2NzAxNzI2MGE5ZTdjODQzNTg4YThjMjM3",
    "commit": {
      "author": {
        "name": "Chris Stewart",
        "email": "stewart.chris1234@gmail.com",
        "date": "2018-03-24T23:37:10Z"
      },
      "committer": {
        "name": "Chris Stewart",
        "email": "stewart.chris1234@gmail.com",
        "date": "2018-08-27T13:51:51Z"
      },
      "message": "Integration of property based testing into Bitcoin Core\n\nupdate copyright headers\n\nattempt to fix linting errors\n\nFixing issue with make check classifying generator files as actual unit tests\n\nWrapping gen files in ENABLE_PROPERTY_TESTS macro\n\nMake macro better",
      "tree": {
        "sha": "f1ffe8bfbb8f3ff6cf210e24b3e9250097892f15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1ffe8bfbb8f3ff6cf210e24b3e9250097892f15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2f49bd7325989267017260a9e7c843588a8c237",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2f49bd7325989267017260a9e7c843588a8c237",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2f49bd7325989267017260a9e7c843588a8c237",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2f49bd7325989267017260a9e7c843588a8c237/comments",
    "author": {
      "login": "Christewart",
      "id": 3514957,
      "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Christewart",
      "html_url": "https://github.com/Christewart",
      "followers_url": "https://api.github.com/users/Christewart/followers",
      "following_url": "https://api.github.com/users/Christewart/following{/other_user}",
      "gists_url": "https://api.github.com/users/Christewart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Christewart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
      "organizations_url": "https://api.github.com/users/Christewart/orgs",
      "repos_url": "https://api.github.com/users/Christewart/repos",
      "events_url": "https://api.github.com/users/Christewart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Christewart/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Christewart",
      "id": 3514957,
      "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Christewart",
      "html_url": "https://github.com/Christewart",
      "followers_url": "https://api.github.com/users/Christewart/followers",
      "following_url": "https://api.github.com/users/Christewart/following{/other_user}",
      "gists_url": "https://api.github.com/users/Christewart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Christewart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
      "organizations_url": "https://api.github.com/users/Christewart/orgs",
      "repos_url": "https://api.github.com/users/Christewart/repos",
      "events_url": "https://api.github.com/users/Christewart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Christewart/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca4510c15da2f42a1769b9cab0e26d3f855a93b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca4510c15da2f42a1769b9cab0e26d3f855a93b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca4510c15da2f42a1769b9cab0e26d3f855a93b3"
      }
    ],
    "stats": {
      "total": 197,
      "additions": 196,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0b96e15b9e221bfab531697213ab5ede718fcb58",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2f49bd7325989267017260a9e7c843588a8c237/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2f49bd7325989267017260a9e7c843588a8c237/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b2f49bd7325989267017260a9e7c843588a8c237",
        "patch": "@@ -130,6 +130,12 @@ AC_ARG_ENABLE(gui-tests,\n     [use_gui_tests=$enableval],\n     [use_gui_tests=$use_tests])\n \n+AC_ARG_WITH([rapidcheck],\n+  [AS_HELP_STRING([--with-rapidcheck],\n+  [enable RapidCheck property based tests (default is yes if librapidcheck is found)])],\n+  [use_rapidcheck=$withval],\n+  [use_rapidcheck=auto])\n+\n AC_ARG_ENABLE(bench,\n     AS_HELP_STRING([--disable-bench],[do not compile benchmarks (default is to compile)]),\n     [use_bench=$enableval],\n@@ -1134,6 +1140,22 @@ AC_CHECK_DECLS([EVP_MD_CTX_new],,,[AC_INCLUDES_DEFAULT\n ])\n CXXFLAGS=\"${save_CXXFLAGS}\"\n \n+dnl RapidCheck Property Based Testing\n+\n+enable_property_tests=no\n+if test \"x$use_rapidcheck\" = xauto; then\n+    AC_CHECK_HEADERS([rapidcheck.h], [enable_property_tests=yes])\n+elif test \"x$use_rapidcheck\" != xno; then\n+    enable_property_tests=yes\n+fi\n+\n+RAPIDCHECK_LIBS=\n+if test \"x$enable_property_tests\" = xyes; then\n+   RAPIDCHECK_LIBS=-lrapidcheck\n+fi\n+AC_SUBST(RAPIDCHECK_LIBS)\n+AM_CONDITIONAL([ENABLE_PROPERTY_TESTS], [test x$enable_property_tests = xyes])\n+\n dnl univalue check\n \n need_bundled_univalue=yes"
      },
      {
        "sha": "da81c4c7eeb6f8ff50e73fe99007ad272ef904c9",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2f49bd7325989267017260a9e7c843588a8c237/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2f49bd7325989267017260a9e7c843588a8c237/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=b2f49bd7325989267017260a9e7c843588a8c237",
        "patch": "@@ -5,6 +5,7 @@ WORK_PATH = $(BASEDIR)/work\n BASE_CACHE ?= $(BASEDIR)/built\n SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n+RAPIDCHECK ?=\n NO_WALLET ?=\n NO_UPNP ?=\n FALLBACK_DOWNLOAD_PATH ?= https://bitcoincore.org/depends-sources\n@@ -93,13 +94,19 @@ qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch\n wallet_packages_$(NO_WALLET) = $(wallet_packages)\n upnp_packages_$(NO_UPNP) = $(upnp_packages)\n \n+rapidcheck_packages_$(RAPIDCHECK) = $(rapidcheck_packages)\n+\n packages += $($(host_arch)_$(host_os)_packages) $($(host_os)_packages) $(qt_packages_) $(wallet_packages_) $(upnp_packages_)\n native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages)\n \n ifneq ($(qt_packages_),)\n native_packages += $(qt_native_packages)\n endif\n \n+ifeq ($(rapidcheck_packages_),)\n+packages += $(rapidcheck_packages)\n+endif\n+\n all_packages = $(packages) $(native_packages)\n \n meta_depends = Makefile funcs.mk builders/default.mk hosts/default.mk hosts/$(host_os).mk builders/$(build_os).mk"
      },
      {
        "sha": "73bfc8b726fc2dba22aba640953ba39d98e9d9f3",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2f49bd7325989267017260a9e7c843588a8c237/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2f49bd7325989267017260a9e7c843588a8c237/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=b2f49bd7325989267017260a9e7c843588a8c237",
        "patch": "@@ -63,6 +63,7 @@ The following can be set when running make: make FOO=bar\n     NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n     NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n     DEBUG: disable some optimizations and enable more runtime checking\n+    RAPIDCHECK: build rapidcheck (experimental)\n     HOST_ID_SALT: Optional salt to use when generating host package ids\n     BUILD_ID_SALT: Optional salt to use when generating build package ids\n "
      },
      {
        "sha": "38329d16d736544a32b4f3279584be1da3a4cea7",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2f49bd7325989267017260a9e7c843588a8c237/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2f49bd7325989267017260a9e7c843588a8c237/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=b2f49bd7325989267017260a9e7c843588a8c237",
        "patch": "@@ -5,6 +5,8 @@ qt_packages = qrencode protobuf zlib\n \n qt_linux_packages:=qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n \n+rapidcheck_packages = rapidcheck\n+\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n "
      },
      {
        "sha": "19cf1cae2ec83e95b7a1d00b33476346c9ff199f",
        "filename": "depends/packages/rapidcheck.mk",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2f49bd7325989267017260a9e7c843588a8c237/depends/packages/rapidcheck.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2f49bd7325989267017260a9e7c843588a8c237/depends/packages/rapidcheck.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/rapidcheck.mk?ref=b2f49bd7325989267017260a9e7c843588a8c237",
        "patch": "@@ -0,0 +1,18 @@\n+package=rapidcheck\n+$(package)_version=10fc0cb\n+$(package)_download_path=https://github.com/MarcoFalke/rapidcheck/archive\n+$(package)_file_name=$(package)-$($(package)_version).tar.gz\n+$(package)_sha256_hash=9640926223c00af45bce4c7df8b756b5458a89b2ba74cfe3e404467f13ce26df\n+\n+define $(package)_config_cmds\n+  cmake -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=true .\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE) && \\\n+  mkdir -p $($(package)_staging_dir)$(host_prefix)/include && \\\n+  cp -a include/* $($(package)_staging_dir)$(host_prefix)/include/ && \\\n+  cp -a extras/boost_test/include/rapidcheck/* $($(package)_staging_dir)$(host_prefix)/include/rapidcheck/ && \\\n+  mkdir -p $($(package)_staging_dir)$(host_prefix)/lib && \\\n+  cp -a librapidcheck.a $($(package)_staging_dir)$(host_prefix)/lib/\n+endef"
      },
      {
        "sha": "f515774b79c34fb537855e3707bf698a3a6790a9",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2f49bd7325989267017260a9e7c843588a8c237/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2f49bd7325989267017260a9e7c843588a8c237/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=b2f49bd7325989267017260a9e7c843588a8c237",
        "patch": "@@ -8,6 +8,7 @@ TEST_SRCDIR = test\n TEST_BINARY=test/test_bitcoin$(EXEEXT)\n \n JSON_TEST_FILES = \\\n+  test/data/script_tests.json \\\n   test/data/base58_encode_decode.json \\\n   test/data/blockfilters.json \\\n   test/data/key_io_valid.json \\\n@@ -94,6 +95,15 @@ BITCOIN_TESTS =\\\n   test/validation_block_tests.cpp \\\n   test/versionbits_tests.cpp\n \n+if ENABLE_PROPERTY_TESTS\n+BITCOIN_TESTS += \\\n+  test/key_properties.cpp\n+\n+BITCOIN_TEST_SUITE += \\\n+  test/gen/crypto_gen.cpp \\\n+  test/gen/crypto_gen.h\n+endif\n+\n if ENABLE_WALLET\n BITCOIN_TESTS += \\\n   wallet/test/accounting_tests.cpp \\\n@@ -118,7 +128,7 @@ test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_C\n   $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n-test_test_bitcoin_LDADD += $(LIBBITCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n+test_test_bitcoin_LDADD += $(LIBBITCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(RAPIDCHECK_LIBS)\n test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static\n \n if ENABLE_ZMQ"
      },
      {
        "sha": "ca8c65806ff884722f5473f263a953c457862a7f",
        "filename": "src/test/gen/crypto_gen.cpp",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2f49bd7325989267017260a9e7c843588a8c237/src/test/gen/crypto_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2f49bd7325989267017260a9e7c843588a8c237/src/test/gen/crypto_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/crypto_gen.cpp?ref=b2f49bd7325989267017260a9e7c843588a8c237",
        "patch": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <test/gen/crypto_gen.h>\n+\n+#include <key.h>\n+\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Predicate.h>\n+#include <rapidcheck/gen/Container.h>\n+\n+/** Generates 1 to 20 keys for OP_CHECKMULTISIG */\n+rc::Gen<std::vector<CKey>> MultisigKeys()\n+{\n+    return rc::gen::suchThat(rc::gen::arbitrary<std::vector<CKey>>(), [](const std::vector<CKey>& keys) {\n+        return keys.size() >= 1 && keys.size() <= 15;\n+    });\n+};"
      },
      {
        "sha": "7c2fb0350fa50acf00f08409d083a014a99e64c3",
        "filename": "src/test/gen/crypto_gen.h",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2f49bd7325989267017260a9e7c843588a8c237/src/test/gen/crypto_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2f49bd7325989267017260a9e7c843588a8c237/src/test/gen/crypto_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/crypto_gen.h?ref=b2f49bd7325989267017260a9e7c843588a8c237",
        "patch": "@@ -0,0 +1,63 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_TEST_GEN_CRYPTO_GEN_H\n+#define BITCOIN_TEST_GEN_CRYPTO_GEN_H\n+\n+#include <key.h>\n+#include <random.h>\n+#include <uint256.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Create.h>\n+#include <rapidcheck/gen/Numeric.h>\n+\n+/** Generates 1 to 15 keys for OP_CHECKMULTISIG */\n+rc::Gen<std::vector<CKey>> MultisigKeys();\n+\n+namespace rc\n+{\n+/** Generator for a new CKey */\n+template <>\n+struct Arbitrary<CKey> {\n+    static Gen<CKey> arbitrary()\n+    {\n+        return rc::gen::map<int>([](int x) {\n+            CKey key;\n+            key.MakeNewKey(true);\n+            return key;\n+        });\n+    };\n+};\n+\n+/** Generator for a CPrivKey */\n+template <>\n+struct Arbitrary<CPrivKey> {\n+    static Gen<CPrivKey> arbitrary()\n+    {\n+        return gen::map(gen::arbitrary<CKey>(), [](const CKey& key) {\n+            return key.GetPrivKey();\n+        });\n+    };\n+};\n+\n+/** Generator for a new CPubKey */\n+template <>\n+struct Arbitrary<CPubKey> {\n+    static Gen<CPubKey> arbitrary()\n+    {\n+        return gen::map(gen::arbitrary<CKey>(), [](const CKey& key) {\n+            return key.GetPubKey();\n+        });\n+    };\n+};\n+/** Generates a arbitrary uint256 */\n+template <>\n+struct Arbitrary<uint256> {\n+    static Gen<uint256> arbitrary()\n+    {\n+        return rc::gen::just(GetRandHash());\n+    };\n+};\n+} //namespace rc\n+#endif"
      },
      {
        "sha": "14e3c8535921381465957f9456bbf591748da010",
        "filename": "src/test/key_properties.cpp",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2f49bd7325989267017260a9e7c843588a8c237/src/test/key_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2f49bd7325989267017260a9e7c843588a8c237/src/test/key_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_properties.cpp?ref=b2f49bd7325989267017260a9e7c843588a8c237",
        "patch": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <key.h>\n+\n+#include <base58.h>\n+#include <script/script.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n+#include <string>\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <rapidcheck/boost_test.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+#include <test/gen/crypto_gen.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(key_properties, BasicTestingSetup)\n+\n+/** Check CKey uniqueness */\n+RC_BOOST_PROP(key_uniqueness, (const CKey& key1, const CKey& key2))\n+{\n+    RC_ASSERT(!(key1 == key2));\n+}\n+\n+/** Verify that a private key generates the correct public key */\n+RC_BOOST_PROP(key_generates_correct_pubkey, (const CKey& key))\n+{\n+    CPubKey pubKey = key.GetPubKey();\n+    RC_ASSERT(key.VerifyPubKey(pubKey));\n+}\n+\n+/** Create a CKey using the 'Set' function must give us the same key */\n+RC_BOOST_PROP(key_set_symmetry, (const CKey& key))\n+{\n+    CKey key1;\n+    key1.Set(key.begin(), key.end(), key.IsCompressed());\n+    RC_ASSERT(key1 == key);\n+}\n+\n+/** Create a CKey, sign a piece of data, then verify it with the public key */\n+RC_BOOST_PROP(key_sign_symmetry, (const CKey& key, const uint256& hash))\n+{\n+    std::vector<unsigned char> vchSig;\n+    key.Sign(hash, vchSig, 0);\n+    const CPubKey& pubKey = key.GetPubKey();\n+    RC_ASSERT(pubKey.Verify(hash, vchSig));\n+}\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]