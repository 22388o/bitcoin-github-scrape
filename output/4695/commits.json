[
  {
    "sha": "898753401f4b05df7a475b3c07e9b96666376b82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTg3NTM0MDFmNGIwNWRmN2E0NzViM2MwN2U5Yjk2NjY2Mzc2Yjgy",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-08-13T11:32:31Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-13T20:46:40Z"
      },
      "message": "Don't hash what you're not going to sign",
      "tree": {
        "sha": "d6e33e42cd078f50105c6287aaa4964dfe56709d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6e33e42cd078f50105c6287aaa4964dfe56709d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/898753401f4b05df7a475b3c07e9b96666376b82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898753401f4b05df7a475b3c07e9b96666376b82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/898753401f4b05df7a475b3c07e9b96666376b82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898753401f4b05df7a475b3c07e9b96666376b82/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5fc6631b9ca452eaacc8f978b3c5ffe2ef38e77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5fc6631b9ca452eaacc8f978b3c5ffe2ef38e77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5fc6631b9ca452eaacc8f978b3c5ffe2ef38e77"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 7,
      "deletions": 11
    },
    "files": [
      {
        "sha": "11e9013709dc1a788eb8a7a6bfff68eb866d8e19",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/898753401f4b05df7a475b3c07e9b96666376b82/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/898753401f4b05df7a475b3c07e9b96666376b82/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=898753401f4b05df7a475b3c07e9b96666376b82",
        "patch": "@@ -52,15 +52,18 @@ bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint2\n // unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n // Returns false if scriptPubKey could not be completely satisfied.\n //\n-bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType,\n-                  CScript& scriptSigRet, txnouttype& whichTypeRet)\n+bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType, CScript& scriptSigRet, txnouttype& whichTypeRet)\n {\n     scriptSigRet.clear();\n \n     vector<valtype> vSolutions;\n     if (!Solver(scriptPubKey, whichTypeRet, vSolutions))\n         return false;\n \n+    // Leave out the signature from the hash, since a signature can't sign itself.\n+    // The checksig op will also drop the signatures from its hash.\n+    uint256 hash = SignatureHash(scriptPubKey, txTo, nIn, nHashType);\n+\n     CKeyID keyID;\n     switch (whichTypeRet)\n     {\n@@ -96,12 +99,8 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     assert(nIn < txTo.vin.size());\n     CTxIn& txin = txTo.vin[nIn];\n \n-    // Leave out the signature from the hash, since a signature can't sign itself.\n-    // The checksig op will also drop the signatures from its hash.\n-    uint256 hash = SignatureHash(fromPubKey, txTo, nIn, nHashType);\n-\n     txnouttype whichType;\n-    if (!Solver(keystore, fromPubKey, hash, nHashType, txin.scriptSig, whichType))\n+    if (!Solver(keystore, fromPubKey, txTo, nIn, nHashType, txin.scriptSig, whichType))\n         return false;\n \n     if (whichType == TX_SCRIPTHASH)\n@@ -111,12 +110,9 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n         // and then the serialized subscript:\n         CScript subscript = txin.scriptSig;\n \n-        // Recompute txn hash using subscript in place of scriptPubKey:\n-        uint256 hash2 = SignatureHash(subscript, txTo, nIn, nHashType);\n-\n         txnouttype subType;\n         bool fSolved =\n-            Solver(keystore, subscript, hash2, nHashType, txin.scriptSig, subType) && subType != TX_SCRIPTHASH;\n+            Solver(keystore, subscript, txTo, nIn, nHashType, txin.scriptSig, subType) && subType != TX_SCRIPTHASH;\n         // Append serialized subscript whether or not it is completely signed:\n         txin.scriptSig << static_cast<valtype>(subscript);\n         if (!fSolved) return false;"
      }
    ]
  },
  {
    "sha": "1b5938edc81cf4d5af407d7b81bc76f0748de38b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjU5MzhlZGM4MWNmNGQ1YWY0MDdkN2I4MWJjNzZmMDc0OGRlMzhi",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-08-13T13:27:45Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-13T20:46:40Z"
      },
      "message": "Refactor SignSignature and higher level Solver",
      "tree": {
        "sha": "8c3fe5d7b7c88c43e3fc330cc54bc1c752e1e797",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c3fe5d7b7c88c43e3fc330cc54bc1c752e1e797"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b5938edc81cf4d5af407d7b81bc76f0748de38b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5938edc81cf4d5af407d7b81bc76f0748de38b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b5938edc81cf4d5af407d7b81bc76f0748de38b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5938edc81cf4d5af407d7b81bc76f0748de38b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "898753401f4b05df7a475b3c07e9b96666376b82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898753401f4b05df7a475b3c07e9b96666376b82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/898753401f4b05df7a475b3c07e9b96666376b82"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 18,
      "deletions": 19
    },
    "files": [
      {
        "sha": "f2ae58af3728c5a0695b526631e4e9aaddad6851",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 19,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b5938edc81cf4d5af407d7b81bc76f0748de38b/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b5938edc81cf4d5af407d7b81bc76f0748de38b/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=1b5938edc81cf4d5af407d7b81bc76f0748de38b",
        "patch": "@@ -52,23 +52,20 @@ bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint2\n // unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n // Returns false if scriptPubKey could not be completely satisfied.\n //\n-bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType, CScript& scriptSigRet, txnouttype& whichTypeRet)\n+bool SignSignature(const CKeyStore& keystore, const CScript& scriptPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType, CScript& scriptSigRet, const txnouttype& whichType, const vector<valtype> vSolutions)\n {\n     scriptSigRet.clear();\n \n-    vector<valtype> vSolutions;\n-    if (!Solver(scriptPubKey, whichTypeRet, vSolutions))\n-        return false;\n-\n     // Leave out the signature from the hash, since a signature can't sign itself.\n     // The checksig op will also drop the signatures from its hash.\n     uint256 hash = SignatureHash(scriptPubKey, txTo, nIn, nHashType);\n \n     CKeyID keyID;\n-    switch (whichTypeRet)\n+    switch (whichType)\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n+    case TX_SCRIPTHASH:\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n@@ -84,9 +81,6 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, CMutableTran\n             scriptSigRet << vch;\n         }\n         return true;\n-    case TX_SCRIPTHASH:\n-        return keystore.GetCScript(uint160(vSolutions[0]), scriptSigRet);\n-\n     case TX_MULTISIG:\n         scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n         return (SignN(vSolutions, keystore, hash, nHashType, scriptSigRet));\n@@ -100,26 +94,31 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     CTxIn& txin = txTo.vin[nIn];\n \n     txnouttype whichType;\n-    if (!Solver(keystore, fromPubKey, txTo, nIn, nHashType, txin.scriptSig, whichType))\n+    vector<valtype> vSolutions;\n+    if (!Solver(fromPubKey, whichType, vSolutions))\n         return false;\n \n+    bool fSolved;\n     if (whichType == TX_SCRIPTHASH)\n     {\n-        // Solver returns the subscript that need to be evaluated;\n-        // the final scriptSig is the signatures from that\n-        // and then the serialized subscript:\n-        CScript subscript = txin.scriptSig;\n+        // The keystore contains the subscript that needs to be evaluated\n+        CScript subscript;\n+        if (!keystore.GetCScript(uint160(vSolutions[0]), subscript))\n+            return false;\n \n         txnouttype subType;\n-        bool fSolved =\n-            Solver(keystore, subscript, txTo, nIn, nHashType, txin.scriptSig, subType) && subType != TX_SCRIPTHASH;\n-        // Append serialized subscript whether or not it is completely signed:\n+        vSolutions.clear();\n+        fSolved = Solver(subscript, subType, vSolutions);\n+        fSolved = fSolved && SignSignature(keystore, subscript, txTo, nIn, nHashType, txin.scriptSig, subType, vSolutions);\n+        // The final scriptSig are the signatures from the subscript and then\n+        // the serialized subscript whether or not it is completely signed:\n         txin.scriptSig << static_cast<valtype>(subscript);\n-        if (!fSolved) return false;\n+    } else {\n+         fSolved = SignSignature(keystore, fromPubKey, txTo, nIn, nHashType, txin.scriptSig, whichType, vSolutions);\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, STANDARD_SCRIPT_VERIFY_FLAGS, 0);\n+    return fSolved && VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, STANDARD_SCRIPT_VERIFY_FLAGS, 0);\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)"
      }
    ]
  },
  {
    "sha": "59bad4514c282e497f0a0b9bc05552e69b6d7450",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWJhZDQ1MTRjMjgyZTQ5N2YwYTBiOWJjMDU1NTJlNjliNmQ3NDUw",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-08-13T11:34:23Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-13T20:46:40Z"
      },
      "message": "Inline SignN only use",
      "tree": {
        "sha": "e6452535cad4814e06810ecb36f6592bcc63cf1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6452535cad4814e06810ecb36f6592bcc63cf1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59bad4514c282e497f0a0b9bc05552e69b6d7450",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59bad4514c282e497f0a0b9bc05552e69b6d7450",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59bad4514c282e497f0a0b9bc05552e69b6d7450",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59bad4514c282e497f0a0b9bc05552e69b6d7450/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b5938edc81cf4d5af407d7b81bc76f0748de38b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5938edc81cf4d5af407d7b81bc76f0748de38b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b5938edc81cf4d5af407d7b81bc76f0748de38b"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 10,
      "deletions": 15
    },
    "files": [
      {
        "sha": "8a1160acde52b046d44435bd4bef4dc18a3fced0",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 15,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59bad4514c282e497f0a0b9bc05552e69b6d7450/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59bad4514c282e497f0a0b9bc05552e69b6d7450/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=59bad4514c282e497f0a0b9bc05552e69b6d7450",
        "patch": "@@ -32,20 +32,6 @@ bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int n\n     return true;\n }\n \n-bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n-{\n-    int nSigned = 0;\n-    int nRequired = multisigdata.front()[0];\n-    for (unsigned int i = 1; i < multisigdata.size()-1 && nSigned < nRequired; i++)\n-    {\n-        const valtype& pubkey = multisigdata[i];\n-        CKeyID keyID = CPubKey(pubkey).GetID();\n-        if (Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n-            ++nSigned;\n-    }\n-    return nSigned==nRequired;\n-}\n-\n //\n // Sign scriptPubKey with private keys stored in keystore, given transaction hash and hash type.\n // Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),\n@@ -83,7 +69,16 @@ bool SignSignature(const CKeyStore& keystore, const CScript& scriptPubKey, CMuta\n         return true;\n     case TX_MULTISIG:\n         scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n-        return (SignN(vSolutions, keystore, hash, nHashType, scriptSigRet));\n+        int nSigned = 0;\n+        int nRequired = vSolutions.front()[0];\n+        for (unsigned int i = 1; i < vSolutions.size()-1 && nSigned < nRequired; i++)\n+        {\n+            const valtype& pubkey = vSolutions[i];\n+            CKeyID keyID = CPubKey(pubkey).GetID();\n+            if (Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n+                ++nSigned;\n+        }\n+        return nSigned==nRequired;\n     }\n     return false;\n }"
      }
    ]
  },
  {
    "sha": "9aaf3b6c02e746d7db17ab260837f8736c99f4f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWFmM2I2YzAyZTc0NmQ3ZGIxN2FiMjYwODM3Zjg3MzZjOTlmNGYw",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-08-13T11:58:37Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-13T20:46:40Z"
      },
      "message": "Strictly hash what is going to be signed (without hurting multisig)",
      "tree": {
        "sha": "b1b4f5426c6c58da35bd655924e81600be3b7c7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1b4f5426c6c58da35bd655924e81600be3b7c7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9aaf3b6c02e746d7db17ab260837f8736c99f4f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9aaf3b6c02e746d7db17ab260837f8736c99f4f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9aaf3b6c02e746d7db17ab260837f8736c99f4f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9aaf3b6c02e746d7db17ab260837f8736c99f4f0/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59bad4514c282e497f0a0b9bc05552e69b6d7450",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59bad4514c282e497f0a0b9bc05552e69b6d7450",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59bad4514c282e497f0a0b9bc05552e69b6d7450"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 18,
      "deletions": 12
    },
    "files": [
      {
        "sha": "e0726b95f0c6530d8e18fdeed01dca88368336ae",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aaf3b6c02e746d7db17ab260837f8736c99f4f0/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aaf3b6c02e746d7db17ab260837f8736c99f4f0/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=9aaf3b6c02e746d7db17ab260837f8736c99f4f0",
        "patch": "@@ -17,12 +17,8 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n-bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n+bool SignHash(const CKey& key, uint256 hash, int nHashType, CScript& scriptSigRet)\n {\n-    CKey key;\n-    if (!keystore.GetKey(address, key))\n-        return false;\n-\n     vector<unsigned char> vchSig;\n     if (!key.Sign(hash, vchSig))\n         return false;\n@@ -32,6 +28,17 @@ bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int n\n     return true;\n }\n \n+bool Sign(const CKeyID& address, const CKeyStore& keystore, const CScript& scriptPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType, CScript& scriptSigRet)\n+{\n+    CKey key;\n+    if (!keystore.GetKey(address, key))\n+        return false;\n+    // Leave out the signature from the hash, since a signature can't sign itself.\n+    // The checksig op will also drop the signatures from its hash.\n+    uint256 hash = SignatureHash(scriptPubKey, txTo, nIn, nHashType);\n+    return SignHash(key, hash, nHashType, scriptSigRet);\n+}\n+\n //\n // Sign scriptPubKey with private keys stored in keystore, given transaction hash and hash type.\n // Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),\n@@ -42,10 +49,6 @@ bool SignSignature(const CKeyStore& keystore, const CScript& scriptPubKey, CMuta\n {\n     scriptSigRet.clear();\n \n-    // Leave out the signature from the hash, since a signature can't sign itself.\n-    // The checksig op will also drop the signatures from its hash.\n-    uint256 hash = SignatureHash(scriptPubKey, txTo, nIn, nHashType);\n-\n     CKeyID keyID;\n     switch (whichType)\n     {\n@@ -55,10 +58,10 @@ bool SignSignature(const CKeyStore& keystore, const CScript& scriptPubKey, CMuta\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n-        return Sign1(keyID, keystore, hash, nHashType, scriptSigRet);\n+        return Sign(keyID, keystore, scriptPubKey, txTo, nIn, nHashType, scriptSigRet);\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n+        if (!Sign(keyID, keystore, scriptPubKey, txTo, nIn, nHashType, scriptSigRet))\n             return false;\n         else\n         {\n@@ -68,14 +71,17 @@ bool SignSignature(const CKeyStore& keystore, const CScript& scriptPubKey, CMuta\n         }\n         return true;\n     case TX_MULTISIG:\n+        uint256 hash = SignatureHash(scriptPubKey, txTo, nIn, nHashType);\n         scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n         int nSigned = 0;\n         int nRequired = vSolutions.front()[0];\n         for (unsigned int i = 1; i < vSolutions.size()-1 && nSigned < nRequired; i++)\n         {\n             const valtype& pubkey = vSolutions[i];\n             CKeyID keyID = CPubKey(pubkey).GetID();\n-            if (Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n+            CKey key;\n+            if (keystore.GetKey(keyID, key) &&\n+                SignHash(key, hash, nHashType, scriptSigRet))\n                 ++nSigned;\n         }\n         return nSigned==nRequired;"
      }
    ]
  }
]