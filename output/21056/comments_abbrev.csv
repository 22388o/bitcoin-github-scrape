theStack,2021-02-01 22:59:52,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-771220590,771220590,
laanwj,2021-02-02 05:49:07,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-771381565,771381565,
practicalswift,2021-02-02 12:29:20,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-771601971,771601971,
cdecker,2021-02-03 12:19:41,"Thanks for the reviews and concept ACKs everybody :+1: \n\nI'm a bit puzzled by the appveyo failure, which doesn't surface any details related to these changes, is this something my changes broke or was it something with `master` at the time of the branching?",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-772467174,772467174,
promag,2021-02-03 12:29:23,"Concept ACK, code change looks good to me.\n\nJust noting that effective minimum timeout is 1s, maybe sleep with min(timout, 1s)? An alternative would be to specify attempt count.",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-772472401,772472401,
cdecker,2021-02-03 12:36:41,"> Just noting that effective minimum timeout is 1s, maybe sleep with min(timout, 1s)? An alternative would be to specify attempt count.\n\nExcellent point/ The reason I went for the deadline approach was that in between sleeps we are actually attempting to connect over the network, which has its own timeout (`DEFAULT_HTTP_CLIENT_TIMEOUT`), which would cause drift if we were to just count the att",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-772476602,772476602,
jonatack,2021-02-03 13:33:28,"> I'm a bit puzzled by the appveyo failure, which doesn't surface any details related to these changes, is this something my changes broke or was it something with `master` at the time of the branching?\n\nAppveyor is a bit flakey ATM, it's probably unrelated.\n",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-772509112,772509112,
cdecker,2021-02-05 11:55:58,"Rebased on top of `master` and squashed, let's see if the flake persists.",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-773988651,773988651,
cdecker,2021-02-08 11:16:15,"Yep seems, like CI is happier now ^^",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-775071058,775071058,
cdecker,2021-02-15 10:41:50,"> Code review ACK [7dcead4](https://github.com/bitcoin/bitcoin/commit/7dcead4319258b058eb8ee5f2271e5c6dad264aa).\n> \n> nit, could have a release note.\n\nCan you point me to the conventions for release notes? This is my first PR that might need them ðŸŽ‰",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-779132459,779132459,
laanwj,2021-02-15 10:55:26,"> Can you point me to the conventions for release notes? This is my first PR that might need them \n\nI couldn't find anything in `CONTRIBUTING.md` (this would make sense to add). We prefer to use 'release notes fragments' to avoid introducing merge hotspots. These will be collected before the next major release.\n\nThese have a) the broad category (in this case, I guess ""RPC client functional",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-779140249,779140249,
cdecker,2021-02-15 11:04:07,"> > Can you point me to the conventions for release notes? This is my first PR that might need them\n> \n> I couldn't find anything in `CONTRIBUTING.md` (this would make sense to add). We prefer to use 'release notes fragments' to avoid introducing merge hotspots. These will be collected before the next major release.\n> \n> These have a) the broad category (in this case, I guess ""RPC client f",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-779145567,779145567,
promag,2021-02-15 11:05:03,We have details at https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#release-notes,https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-779146225,779146225,
laanwj,2021-02-15 11:10:28,"> We have details at https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#release-notes\n\nOh great! I somehow couldn't find this (I did grep for a few things). Might make sense to link to this from `CONTRIBUTING.md`.",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-779149418,779149418,
cdecker,2021-02-16 14:10:05,"Added preliminary release notes in a new file, and fixed up the units in the `GetTime<T>` template as well as the unit of the sleep call. Let me know if the release notes are not in the desired format, and I'll fix them up asap.",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-779860568,779860568,
laanwj,2021-02-25 20:23:29,"> utACK, but I think actual software shouldn't be using bitcoin-cli at all...\n\nFor what it's worth I agree with @luke-jr here. Never really understood why `lightningd` doesn't use the RPC API directly. It's generally the more stable way, less moving parts, less potential ambiguity in input arguments. But it's an aside of course and off topic here.",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-786177287,786177287,
cdecker,2021-02-26 10:16:12,"> For what it's worth I agree with @luke-jr here. Never really understood why `lightningd` doesn't use the RPC API directly. It's generally the more stable way, less moving parts, less potential ambiguity in input arguments. But it's an aside of course and off topic here.\n\nNot trying to make this a `lightningd` specific proposal, but since it was brought up I'll try to reconstruct the rationale ",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-786552602,786552602,
laanwj,2021-02-26 16:15:22,"> Are there downsides of calling out to bitcoin-cli? Sure. Will we eventually end up replacing it with an internal implementation? Maybe. Is it working well as it is now? I think so\n\nI guess it's mostly down to personal preference,  I prefer to use APIs directly, calling out to external programs reminds me of shell scripts which always are very environment-dependent. One concrete case is that ",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-786743317,786743317,
cdecker,2021-03-08 13:19:40,"Reworded the release notes as proposed by @jonatack, and rebased on top of `master`.\n\nOpen questions are:\n\n - Add a specific error message pointing towards a timeout if we get something like `RPC warmup`\n   - Pointed out [here](https://github.com/bitcoin/bitcoin/pull/21056#discussion_r576924237)\n   - I think passing through the error is correct here, and not amend it since the timeout ",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-792750987,792750987,
laanwj,2021-03-15 07:50:24,"> If we were to customize the error we could end up hiding the underlying cause for the failure (timeout ok, but what caused the timeout to fail ultimately?)\n\nTend to agree. Maybe printing both would be a possibility? E.g. `timeout on transient error: â€¦`.\n\n> Instead of adding a new command line option in the form of -rpcwaittimeout, merge it instead with -rpcwait, redefining the semantics ",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-799196773,799196773,
cdecker,2021-03-16 19:26:18,"> Tend to agree. Maybe printing both would be a possibility? E.g. `timeout on transient error: â€¦`.\n> \n> >\n\nI'll look into it, sounds like a good idea :+1:",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-800542681,800542681,
cdecker,2021-03-23 13:43:05,Prefixed the error message with the prefix proposed by @laanwj. One thing that I'm not quite clear on is whether the string allocated by `strprintf` is freed (not too familiar how the memory ownership in the presence of exceptions in C++ is). Would that require additional handling or is it ok in this case to wait for the exit to clean up memory?,https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-804913449,804913449,
laanwj,2021-03-23 15:48:33,"Thanks!\n\n> One thing that I'm not quite clear on is whether the string allocated by strprintf is freed \n\nYes, the exception object (including the string it refers to) is destructed when it leaves the scope where it is catched. This should be okay.",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-805013960,805013960,
cdecker,2021-04-06 11:09:59,"> Concept ACK. Could append a test to the existing `-rpcwait` coverage at the end of `test/functional/interface_bitcoin_cli.py` to add coverage.\n\nGoing through the reviews I noticed that I hadn't addressed this so far. Added a test for it where suggested.",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-814034859,814034859,
cdecker,2021-04-15 12:40:08,"As far as I can see the only unresolved thing in this PR is the discussion about whether to reuse `-rpcwait` and redefine the argument to be the timeout in seconds, or whether the current addition of a new flag is preferrable.",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-820390638,820390638,
DrahtBot,2021-05-02 18:00:35,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-830847090,830847090,
cdecker,2021-05-11 09:03:53,"Rebased on top of `master`, addressed @promag's feedback and amended OP to mention the tests that are now included.",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-838115969,838115969,
promag,2021-05-11 17:44:24,@cdecker I think you forgot to autosquash?,https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-838895094,838895094,
cdecker,2021-05-11 19:47:13,"Sorry, used to the c-lightning workflow where we keep fixups to show how things were addressed. Will squash as soon as I wake up ðŸ™‚",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-839071375,839071375,
cdecker,2021-06-03 09:23:33,Rebased on top of `master`,https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-853725719,853725719,
cdecker,2021-06-04 10:27:31,"> Tested ACK [5685cdc](https://github.com/bitcoin/bitcoin/commit/5685cdcacdb8b59e420c4cc32a1ef3bf2cac067c) but the test needs to be fixed.\n\nYep, I switched the arguments around apparently :wink:",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-854597071,854597071,
cdecker,2021-06-21 09:54:13,"Is this good in its current state or does something need to be addressed? Probably not the highest priority issue, but would love to remove it from my watchlist, e.g., by merging it :wink: ",https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-864899823,864899823,
laanwj,2021-06-21 10:58:30,Code review ACK b9e76f1bf08c52fcd402b2314e00db4ad247ebc8,https://github.com/bitcoin/bitcoin/pull/21056#issuecomment-864939321,864939321,
jonatack,2021-02-01 19:24:37,"I think `GetTime` is deprecated in favor of `GetSystemTimeInSeconds` (not mockable) or `GetTime<T>` (mockable), see src/util.time.h",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r568080691,568080691,src/bitcoin-cli.cpp
jonatack,2021-02-01 19:29:44,"Judging from the PR description you likely thought about this, but could the timeout still be an argument in `-rpcwait` and only kick in if the value is greater than 1? That would avoid introducing another config option and as a bonus would be shorter to type. IDK what kind of timeout values API clients need.",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r568083803,568083803,src/bitcoin-cli.cpp
jonatack,2021-02-01 19:30:18,"nit, could be `constexpr` and apply clang formatting for new code",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r568084179,568084179,src/bitcoin-cli.cpp
cdecker,2021-02-01 19:55:21,"Ok, amended the use of `GetTime` with the `GetTime<T>` version (had to look it up, hopefully I got the right version).",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r568098843,568098843,src/bitcoin-cli.cpp
cdecker,2021-02-01 19:55:45,"Had to catch up about `constexpr`, but good point :+1:",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r568099146,568099146,src/bitcoin-cli.cpp
cdecker,2021-02-01 19:56:49,"I'm quite happy to switch it around, but having `1` as a special value is kinda weird as well. I thought I'd go the most cautious route first and see which way wins in the review xD",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r568099730,568099730,src/bitcoin-cli.cpp
jonatack,2021-02-01 20:04:53,"Fair. Is the real time ever that low anyway? Maybe counting -rpcwait=1 as one second would be fine...I don't have a fast computer and generally run debug builds, so I may see slower times than others, but rpcwait is ~3 seconds for me on signet and much longer on regtest (~10s), testnet (~95s) and mainnet.",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r568104605,568104605,src/bitcoin-cli.cpp
cdecker,2021-02-03 12:17:09,"I don't expect many users to run into issues if we were to special case `-rpcwait=1`, but given the ""creativity"" of users I wouldn't put it past them to use `-rpcwait=42` or `-rpcwait=31337`. Some users seem to see ""any value"" as a personal challenge :smiley: ",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r569366635,569366635,src/bitcoin-cli.cpp
darosior,2021-02-10 21:47:27,"I think you want this to be `std::chrono::seconds` instead of `std::chrono::microseconds`, or to change the doc above to mention the parameter is passed in microseconds.",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r574100686,574100686,src/bitcoin-cli.cpp
jonatack,2021-02-16 15:29:41,"Among the current headers in `doc/release-notes.md`, ""New settings"" might be the closest, but I'm not sure. There doesn't seem to be a CLI header. Suggestion follows, feel free to ignore.\n\n```diff\n-RPC client functionality\n-------------------------\n+New settings\n+------------\n \n-- The new `-rpcwaittimeout` argument to `bitcoin-cli` sets the timeout\n-  in seconds to use with `-rpc",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r576912337,576912337,doc/release-notes-21056.md
jonatack,2021-02-16 15:36:18,"I'd still be in favor of combining `rpcwait` and `rpcwaittimeout`, but if we prefer two arguments for this, it may be helpful to mention the relationship to `-rpcwait` in this description. ",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r576917497,576917497,src/bitcoin-cli.cpp
jonatack,2021-02-16 15:44:58,"The error I'm seeing is a bit confusing. It would be good to raise a specific error for the timeout value exceeded.\n```\n$ bitcoind -regtest -daemon ; bitcoin-cli -regtest -rpcwait -rpcwaittimeout=3 -getinfo\nBitcoin Core starting\nerror: server in warmup\n```\n",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r576924237,576924237,src/bitcoin-cli.cpp
laanwj,2021-02-26 16:30:11,"I don't know if that header is better. As a compromise ""New bitcoin-cli settings"" maybe?\n\nI do think it's important to keep mentions of server and other tools's command line arguments separated. Then again, all of this can be organized when merging the fragmentsâ€”it's not an automatic process.",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r583762439,583762439,doc/release-notes-21056.md
jonatack,2021-02-26 17:25:55,"Yes, ""New bitcoin-cli settings"" seems better to me, too. Though as mentioned in https://github.com/bitcoin/bitcoin/pull/21056#discussion_r576917497, if we add the argument to the existing `-rpcwait=` (as a CLI setting intended for human manual use rather than by client software, ISTM it may be less subject to API constraints and would be less verbose than `-rpcwait -rpcwaittimeout=`), it could be ",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r583798248,583798248,doc/release-notes-21056.md
promag,2021-04-22 08:06:07,"nit, could check elapsed time is >= to 5s.",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r618175578,618175578,test/functional/interface_bitcoin_cli.py
promag,2021-04-22 09:05:15,"nit, is it fine to accept <0? A negative value is same as  `-rpcwait=false`.",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r618219710,618219710,src/bitcoin-cli.cpp
promag,2021-04-22 09:08:50,Maybe `timeout <= 0` - zero or negative means no timeout.,https://github.com/bitcoin/bitcoin/pull/21056#discussion_r618222463,618222463,src/bitcoin-cli.cpp
cdecker,2021-05-11 08:57:15,"I think so, the alternative would be to throw an error, but that might be a bit much.",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r629981147,629981147,src/bitcoin-cli.cpp
cdecker,2021-05-11 09:02:41,Amended the `==` to become `<=` :+1: ,https://github.com/bitcoin/bitcoin/pull/21056#discussion_r629985361,629985361,src/bitcoin-cli.cpp
cdecker,2021-05-11 09:03:12,Added check using `assert_greater_than_or_equal` and had to import `time` but that should work ok.,https://github.com/bitcoin/bitcoin/pull/21056#discussion_r629985673,629985673,test/functional/interface_bitcoin_cli.py
promag,2021-06-03 10:05:49,"This should be `assert_greater_than_or_equal(time.time(), start_time + 5)`.",https://github.com/bitcoin/bitcoin/pull/21056#discussion_r644663320,644663320,test/functional/interface_bitcoin_cli.py
