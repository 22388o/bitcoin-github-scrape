[
  {
    "sha": "1bee1e6269b76b52b1eab9112d39c245beaa27a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmVlMWU2MjY5Yjc2YjUyYjFlYWI5MTEyZDM5YzI0NWJlYWEyN2Ey",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-22T21:58:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-09-09T01:02:53Z"
      },
      "message": "Do not create default wallet\n\nNo longer create a default wallet. The default wallet will still be\nloaded if it exists and not other wallets were specified (anywhere,\nincluding settings.json, bitcoin.conf, and command line).\n\nTests are updated to be started with -wallet= if they need the default\nwallet.\n\nAdded test to wallet_startup.py testing that no default wallet is\ncreated and that it is loaded if it exists and no other wallets were\nspecified.",
      "tree": {
        "sha": "1b437fa47cf89317a767c7e5ae25087283d5d28a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b437fa47cf89317a767c7e5ae25087283d5d28a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1bee1e6269b76b52b1eab9112d39c245beaa27a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bee1e6269b76b52b1eab9112d39c245beaa27a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1bee1e6269b76b52b1eab9112d39c245beaa27a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bee1e6269b76b52b1eab9112d39c245beaa27a2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78cb45d72251e85db07e8500bbdd2e9460b132b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78cb45d72251e85db07e8500bbdd2e9460b132b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78cb45d72251e85db07e8500bbdd2e9460b132b2"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 67,
      "deletions": 43
    },
    "files": [
      {
        "sha": "00c847a8d2928f3e679e600b49dd9934e5706b42",
        "filename": "doc/release-notes-15454.md",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/doc/release-notes-15454.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/doc/release-notes-15454.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15454.md?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -0,0 +1,6 @@\n+Wallet\n+------\n+\n+Bitcoin Core will no longer create an unnamed `\"\"` wallet by default when no wallet is specified on the command line or in the configuration files.\n+For backwards compatibility, if an unnamed `\"\"` wallet already exists and would have been loaded previously, then it will still be loaded.\n+Users without an unnamed `\"\"` wallet and without any other wallets to be loaded on startup  will be prompted to either choose a wallet to load, or to create a new wallet."
      },
      {
        "sha": "94c63da84e37259df1137eab1f75c1449b6867ab",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -488,8 +488,7 @@ class WalletImpl : public Wallet\n class WalletClientImpl : public WalletClient\n {\n public:\n-    WalletClientImpl(Chain& chain, ArgsManager& args, std::vector<std::string> wallet_filenames)\n-        : m_wallet_filenames(std::move(wallet_filenames))\n+    WalletClientImpl(Chain& chain, ArgsManager& args)\n     {\n         m_context.chain = &chain;\n         m_context.args = &args;\n@@ -506,8 +505,8 @@ class WalletClientImpl : public WalletClient\n             m_rpc_handlers.emplace_back(m_context.chain->handleRpc(m_rpc_commands.back()));\n         }\n     }\n-    bool verify() override { return VerifyWallets(*m_context.chain, m_wallet_filenames); }\n-    bool load() override { return LoadWallets(*m_context.chain, m_wallet_filenames); }\n+    bool verify() override { return VerifyWallets(*m_context.chain); }\n+    bool load() override { return LoadWallets(*m_context.chain); }\n     void start(CScheduler& scheduler) override { return StartWallets(scheduler, *Assert(m_context.args)); }\n     void flush() override { return FlushWallets(); }\n     void stop() override { return StopWallets(); }\n@@ -566,9 +565,9 @@ class WalletClientImpl : public WalletClient\n \n std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet) { return wallet ? MakeUnique<WalletImpl>(wallet) : nullptr; }\n \n-std::unique_ptr<WalletClient> MakeWalletClient(Chain& chain, ArgsManager& args, std::vector<std::string> wallet_filenames)\n+std::unique_ptr<WalletClient> MakeWalletClient(Chain& chain, ArgsManager& args)\n {\n-    return MakeUnique<WalletClientImpl>(chain, args, std::move(wallet_filenames));\n+    return MakeUnique<WalletClientImpl>(chain, args);\n }\n \n } // namespace interfaces"
      },
      {
        "sha": "6ccfd7fc205a421d1d066795386d6e79e444ef16",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -411,7 +411,7 @@ std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet);\n \n //! Return implementation of ChainClient interface for a wallet client. This\n //! function will be undefined in builds where ENABLE_WALLET is false.\n-std::unique_ptr<WalletClient> MakeWalletClient(Chain& chain, ArgsManager& args, std::vector<std::string> wallet_filenames);\n+std::unique_ptr<WalletClient> MakeWalletClient(Chain& chain, ArgsManager& args);\n \n } // namespace interfaces\n "
      },
      {
        "sha": "5d8c4fba292054fa64c695b305cf8ca4d83ce9ce",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -107,16 +107,7 @@ void WalletInit::Construct(NodeContext& node) const\n         LogPrintf(\"Wallet disabled!\\n\");\n         return;\n     }\n-    // If there's no -wallet setting with a list of wallets to load, set it to\n-    // load the default \"\" wallet.\n-    if (!args.IsArgSet(\"wallet\")) {\n-        args.LockSettings([&](util::Settings& settings) {\n-            util::SettingsValue wallets(util::SettingsValue::VARR);\n-            wallets.push_back(\"\"); // Default wallet name is \"\"\n-            settings.rw_settings[\"wallet\"] = wallets;\n-        });\n-    }\n-    auto wallet_client = interfaces::MakeWalletClient(*node.chain, args, args.GetArgs(\"-wallet\"));\n+    auto wallet_client = interfaces::MakeWalletClient(*node.chain, args);\n     node.wallet_client = wallet_client.get();\n     node.chain_clients.emplace_back(std::move(wallet_client));\n }"
      },
      {
        "sha": "1b057000d268235ff70455e276d8c5d79bd9972f",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -16,7 +16,7 @@\n \n #include <univalue.h>\n \n-bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)\n+bool VerifyWallets(interfaces::Chain& chain)\n {\n     if (gArgs.IsArgSet(\"-walletdir\")) {\n         fs::path wallet_dir = gArgs.GetArg(\"-walletdir\", \"\");\n@@ -41,10 +41,27 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n \n     chain.initMessage(_(\"Verifying wallet(s)...\").translated);\n \n+    // For backwards compatibility if an unnamed top level wallet exists in the\n+    // wallets directory, include it in the default list of wallets to load.\n+    if (!gArgs.IsArgSet(\"wallet\")) {\n+        DatabaseOptions options;\n+        DatabaseStatus status;\n+        bilingual_str error_string;\n+        options.require_existing = true;\n+        options.verify = false;\n+        if (MakeWalletDatabase(\"\", options, status, error_string)) {\n+            gArgs.LockSettings([&](util::Settings& settings) {\n+                util::SettingsValue wallets(util::SettingsValue::VARR);\n+                wallets.push_back(\"\"); // Default wallet name is \"\"\n+                settings.rw_settings[\"wallet\"] = wallets;\n+            });\n+        }\n+    }\n+\n     // Keep track of each wallet absolute path to detect duplicates.\n     std::set<fs::path> wallet_paths;\n \n-    for (const auto& wallet_file : wallet_files) {\n+    for (const auto& wallet_file : gArgs.GetArgs(\"-wallet\")) {\n         const fs::path path = fs::absolute(wallet_file, GetWalletDir());\n \n         if (!wallet_paths.insert(path).second) {\n@@ -65,10 +82,10 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n     return true;\n }\n \n-bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)\n+bool LoadWallets(interfaces::Chain& chain)\n {\n     try {\n-        for (const std::string& name : wallet_files) {\n+        for (const std::string& name : gArgs.GetArgs(\"-wallet\")) {\n             DatabaseOptions options;\n             DatabaseStatus status;\n             options.verify = false; // No need to verify, assuming verified earlier in VerifyWallets()"
      },
      {
        "sha": "e12343de2745a687ab869a8a48699034c41367c6",
        "filename": "src/wallet/load.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/src/wallet/load.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/src/wallet/load.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.h?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -17,10 +17,10 @@ class Chain;\n } // namespace interfaces\n \n //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n-bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files);\n+bool VerifyWallets(interfaces::Chain& chain);\n \n //! Load wallet databases.\n-bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files);\n+bool LoadWallets(interfaces::Chain& chain);\n \n //! Complete startup of wallets.\n void StartWallets(CScheduler& scheduler, const ArgsManager& args);"
      },
      {
        "sha": "c80310045ad8f882d6773d62c57bc5eeb68691ec",
        "filename": "src/wallet/test/init_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/src/wallet/test/init_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/src/wallet/test/init_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.cpp?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -10,7 +10,7 @@\n \n InitWalletDirTestingSetup::InitWalletDirTestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n {\n-    m_wallet_client = MakeWalletClient(*m_chain, *Assert(m_node.args), {});\n+    m_wallet_client = MakeWalletClient(*m_chain, *Assert(m_node.args));\n \n     std::string sep;\n     sep += fs::path::preferred_separator;"
      },
      {
        "sha": "ba8a5ff1f3a8a7849a352b552a10f944898ef811",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -21,7 +21,7 @@ struct WalletTestingSetup : public TestingSetup {\n     explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n \n     std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain(m_node);\n-    std::unique_ptr<interfaces::WalletClient> m_wallet_client = interfaces::MakeWalletClient(*m_chain, *Assert(m_node.args), {});\n+    std::unique_ptr<interfaces::WalletClient> m_wallet_client = interfaces::MakeWalletClient(*m_chain, *Assert(m_node.args));\n     CWallet m_wallet;\n     std::unique_ptr<interfaces::Handler> m_chain_notifications_handler;\n };"
      },
      {
        "sha": "daefb161ac794d2aec887c492c5592d977a29a66",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -36,12 +36,12 @@ def set_test_params(self):\n         self.num_nodes = 6\n         # Add new version after each release:\n         self.extra_args = [\n-            [\"-addresstype=bech32\"], # Pre-release: use to mine blocks\n+            [\"-addresstype=bech32\", \"-wallet=\"], # Pre-release: use to mine blocks\n             [\"-nowallet\", \"-walletrbf=1\", \"-addresstype=bech32\"], # Pre-release: use to receive coins, swap wallets, etc\n             [\"-nowallet\", \"-walletrbf=1\", \"-addresstype=bech32\"], # v0.19.1\n             [\"-nowallet\", \"-walletrbf=1\", \"-addresstype=bech32\"], # v0.18.1\n             [\"-nowallet\", \"-walletrbf=1\", \"-addresstype=bech32\"], # v0.17.2\n-            [\"-nowallet\", \"-walletrbf=1\", \"-addresstype=bech32\"], # v0.16.3\n+            [\"-nowallet\", \"-walletrbf=1\", \"-addresstype=bech32\", \"-wallet=wallet.dat\"], # v0.16.3\n         ]\n \n     def skip_test_if_missing_module(self):"
      },
      {
        "sha": "d89eeec400d8d7574923b3c666335892ff729f5f",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -145,9 +145,9 @@ def set_test_params(self):\n         # mine non-standard txs (e.g. txs with \"dust\" outputs)\n         # Force fSendTrickle to true (via whitelist.noban)\n         self.extra_args = [\n-            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\"],\n-            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\", \"-blockmaxweight=68000\"],\n-            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\", \"-blockmaxweight=32000\"],\n+            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\", \"-wallet=\"],\n+            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\", \"-blockmaxweight=68000\", \"-wallet=\"],\n+            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\", \"-blockmaxweight=32000\", \"-wallet=\"],\n         ]\n \n     def skip_test_if_missing_module(self):"
      },
      {
        "sha": "e4ceb62c94cc1d0f26d342edfd09e86bb3ebcd87",
        "filename": "test/functional/feature_filelock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/feature_filelock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/feature_filelock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_filelock.py?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -15,7 +15,7 @@ def set_test_params(self):\n \n     def setup_network(self):\n         self.add_nodes(self.num_nodes, extra_args=None)\n-        self.nodes[0].start([])\n+        self.nodes[0].start(['-wallet='])\n         self.nodes[0].wait_for_rpc_connection()\n \n     def run_test(self):\n@@ -30,7 +30,7 @@ def run_test(self):\n             wallet_dir = os.path.join(datadir, 'wallets')\n             self.log.info(\"Check that we can't start a second bitcoind instance using the same wallet\")\n             expected_msg = \"Error: Error initializing wallet database environment\"\n-            self.nodes[1].assert_start_raises_init_error(extra_args=['-walletdir={}'.format(wallet_dir), '-noserver'], expected_msg=expected_msg, match=ErrorMatch.PARTIAL_REGEX)\n+            self.nodes[1].assert_start_raises_init_error(extra_args=['-walletdir={}'.format(wallet_dir), '-wallet=', '-noserver'], expected_msg=expected_msg, match=ErrorMatch.PARTIAL_REGEX)\n \n if __name__ == '__main__':\n     FilelockTest().main()"
      },
      {
        "sha": "fd3dd47e2d001f7db1010a0a9eb152a6f4ddb08e",
        "filename": "test/functional/mempool_compatibility.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/mempool_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/mempool_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_compatibility.py?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -31,7 +31,7 @@ def setup_network(self):\n             150200, # oldest version supported by the test framework\n             None,\n         ])\n-        self.start_nodes()\n+        self.start_nodes([[], [\"-wallet=\"]])\n         self.import_deterministic_coinbase_privkeys()\n \n     def run_test(self):"
      },
      {
        "sha": "bcbac18d5787763979e5f77354b3639d56a8e44f",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -50,10 +50,10 @@ def set_test_params(self):\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         # whitelist all peers to speed up tx relay / mempool sync\n         self.extra_args = [\n-            [\"-whitelist=noban@127.0.0.1\", \"-keypool=100\"],\n-            [\"-whitelist=noban@127.0.0.1\", \"-keypool=100\"],\n-            [\"-whitelist=noban@127.0.0.1\", \"-keypool=100\"],\n-            [\"-whitelist=noban@127.0.0.1\"],\n+            [\"-whitelist=noban@127.0.0.1\", \"-keypool=100\", \"-wallet=\"],\n+            [\"-whitelist=noban@127.0.0.1\", \"-keypool=100\", \"-wallet=\"],\n+            [\"-whitelist=noban@127.0.0.1\", \"-keypool=100\", \"-wallet=\"],\n+            [\"-whitelist=noban@127.0.0.1\", \"-wallet=\"],\n         ]\n         self.rpc_timeout = 120\n "
      },
      {
        "sha": "09581d864b9a3c64726b402cfdefce091be64048",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -95,7 +95,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n class WalletDumpTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [[\"-keypool=90\", \"-addresstype=legacy\"]]\n+        self.extra_args = [[\"-keypool=90\", \"-addresstype=legacy\", \"-wallet=dump\"]]\n         self.rpc_timeout = 120\n \n     def skip_test_if_missing_module(self):"
      },
      {
        "sha": "87deaded095832c4ee61c36692dca36a62674445",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -151,15 +151,15 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def setup_network(self):\n-        self.extra_args = [[] for _ in range(self.num_nodes)]\n+        self.extra_args = [[\"-wallet=\"] for _ in range(self.num_nodes)]\n         for i, import_node in enumerate(IMPORT_NODES, 2):\n             if import_node.prune:\n                 self.extra_args[i] += [\"-prune=1\"]\n \n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n \n         # Import keys with pruning disabled\n-        self.start_nodes(extra_args=[[]] * self.num_nodes)\n+        self.start_nodes(extra_args=[[\"-wallet=\"]] * self.num_nodes)\n         for n in self.nodes:\n             n.importprivkey(privkey=n.get_deterministic_priv_key().key, label='coinbase')\n         self.stop_nodes()"
      },
      {
        "sha": "aaf050ebf79f53f9e5795e14e590178298d6c928",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -43,6 +43,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.rpc_timeout = 120\n+        self.extra_args = [[\"-wallet=\"], [\"-wallet=\"]]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -82,7 +83,7 @@ def wallet_file(name):\n         os.rename(wallet_dir(\"wallet.dat\"), wallet_dir(\"w8\"))\n \n         # create another dummy wallet for use in testing backups later\n-        self.start_node(0, [])\n+        self.start_node(0, [\"-wallet=\"])\n         self.stop_nodes()\n         empty_wallet = os.path.join(self.options.tmpdir, 'empty.dat')\n         os.rename(wallet_dir(\"wallet.dat\"), empty_wallet)\n@@ -152,7 +153,7 @@ def wallet_file(name):\n \n         competing_wallet_dir = os.path.join(self.options.tmpdir, 'competing_walletdir')\n         os.mkdir(competing_wallet_dir)\n-        self.restart_node(0, ['-walletdir=' + competing_wallet_dir])\n+        self.restart_node(0, ['-walletdir=' + competing_wallet_dir, '-wallet='])\n         exp_stderr = r\"Error: Error initializing wallet database environment \\\"\\S+competing_walletdir\\\"!\"\n         self.nodes[1].assert_start_raises_init_error(['-walletdir=' + competing_wallet_dir], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n "
      },
      {
        "sha": "d3119925f752b36a98010ad1d5ffff26c16368e0",
        "filename": "test/functional/wallet_startup.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/wallet_startup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/wallet_startup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_startup.py?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -26,6 +26,16 @@ def setup_nodes(self):\n         self.start_nodes()\n \n     def run_test(self):\n+        self.log.info('Should start without any wallets')\n+        assert_equal(self.nodes[0].listwallets(), [])\n+        assert_equal(self.nodes[0].listwalletdir(), {'wallets': []})\n+\n+        self.log.info('New default wallet should load by default when there are no other wallets')\n+        self.nodes[0].createwallet(wallet_name='', load_on_startup=False)\n+        self.restart_node(0)\n+        assert_equal(self.nodes[0].listwallets(), [''])\n+\n+        self.log.info('Test load on startup behavior')\n         self.nodes[0].createwallet(wallet_name='w0', load_on_startup=True)\n         self.nodes[0].createwallet(wallet_name='w1', load_on_startup=False)\n         self.nodes[0].createwallet(wallet_name='w2', load_on_startup=True)"
      },
      {
        "sha": "031da8da8182ca02eda4025ee421d93767d16335",
        "filename": "test/functional/wallet_upgradewallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/wallet_upgradewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bee1e6269b76b52b1eab9112d39c245beaa27a2/test/functional/wallet_upgradewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_upgradewallet.py?ref=1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "patch": "@@ -27,7 +27,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         self.extra_args = [\n-            [\"-addresstype=bech32\"], # current wallet version\n+            [\"-addresstype=bech32\", \"-wallet=\"], # current wallet version\n             [\"-usehd=1\"],            # v0.16.3 wallet\n             [\"-usehd=0\"]             # v0.15.2 wallet\n         ]"
      }
    ]
  },
  {
    "sha": "d26f0648f1c0d1115dcb8d76e57195032b88f400",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjZmMDY0OGYxYzBkMTExNWRjYjhkNzZlNTcxOTUwMzJiODhmNDAw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-20T18:35:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-09-09T01:02:53Z"
      },
      "message": "Tell users how to load or create a wallet when no wallet is loaded",
      "tree": {
        "sha": "8892d0f1c46004ab03def09c2d1d57d820fb4a27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8892d0f1c46004ab03def09c2d1d57d820fb4a27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d26f0648f1c0d1115dcb8d76e57195032b88f400",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26f0648f1c0d1115dcb8d76e57195032b88f400",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d26f0648f1c0d1115dcb8d76e57195032b88f400",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26f0648f1c0d1115dcb8d76e57195032b88f400/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bee1e6269b76b52b1eab9112d39c245beaa27a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bee1e6269b76b52b1eab9112d39c245beaa27a2"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 29,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0c2dcc3584e5f95cc3266bcbd6319147a2e8739b",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d26f0648f1c0d1115dcb8d76e57195032b88f400/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d26f0648f1c0d1115dcb8d76e57195032b88f400/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=d26f0648f1c0d1115dcb8d76e57195032b88f400",
        "patch": "@@ -660,6 +660,11 @@ void BitcoinGUI::setWalletController(WalletController* wallet_controller)\n     }\n }\n \n+WalletController* BitcoinGUI::getWalletController()\n+{\n+    return m_wallet_controller;\n+}\n+\n void BitcoinGUI::addWallet(WalletModel* walletModel)\n {\n     if (!walletFrame) return;"
      },
      {
        "sha": "912297a74eef532730ae10d7cd42f5871a356e10",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d26f0648f1c0d1115dcb8d76e57195032b88f400/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d26f0648f1c0d1115dcb8d76e57195032b88f400/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=d26f0648f1c0d1115dcb8d76e57195032b88f400",
        "patch": "@@ -79,6 +79,7 @@ class BitcoinGUI : public QMainWindow\n     void setClientModel(ClientModel *clientModel = nullptr, interfaces::BlockAndHeaderTipInfo* tip_info = nullptr);\n #ifdef ENABLE_WALLET\n     void setWalletController(WalletController* wallet_controller);\n+    WalletController* getWalletController();\n #endif\n \n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "f16761d6b2ecf1b994a1a83dcb74f66566fc8355",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d26f0648f1c0d1115dcb8d76e57195032b88f400/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d26f0648f1c0d1115dcb8d76e57195032b88f400/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=d26f0648f1c0d1115dcb8d76e57195032b88f400",
        "patch": "@@ -2,6 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <qt/createwalletdialog.h>\n+#include <qt/walletcontroller.h>\n #include <qt/walletframe.h>\n #include <qt/walletmodel.h>\n \n@@ -10,8 +12,11 @@\n \n #include <cassert>\n \n+#include <QGroupBox>\n #include <QHBoxLayout>\n #include <QLabel>\n+#include <QPushButton>\n+#include <QVBoxLayout>\n \n WalletFrame::WalletFrame(const PlatformStyle *_platformStyle, BitcoinGUI *_gui) :\n     QFrame(_gui),\n@@ -25,9 +30,25 @@ WalletFrame::WalletFrame(const PlatformStyle *_platformStyle, BitcoinGUI *_gui)\n     walletFrameLayout->setContentsMargins(0,0,0,0);\n     walletFrameLayout->addWidget(walletStack);\n \n-    QLabel *noWallet = new QLabel(tr(\"No wallet has been loaded.\"));\n+    // hbox for no wallet\n+    QGroupBox* no_wallet_group = new QGroupBox(walletStack);\n+    QVBoxLayout* no_wallet_layout = new QVBoxLayout(no_wallet_group);\n+\n+    QLabel *noWallet = new QLabel(tr(\"No wallet has been loaded.\\nGo to File > Open Wallet to load a wallet.\\n- OR -\"));\n     noWallet->setAlignment(Qt::AlignCenter);\n-    walletStack->addWidget(noWallet);\n+    no_wallet_layout->addWidget(noWallet, 0, Qt::AlignHCenter | Qt::AlignBottom);\n+\n+    // A button for create wallet dialog\n+    QPushButton* create_wallet_button = new QPushButton(tr(\"Create a new wallet\"), walletStack);\n+    connect(create_wallet_button, &QPushButton::clicked, [this] {\n+        auto activity = new CreateWalletActivity(gui->getWalletController(), this);\n+        connect(activity, &CreateWalletActivity::finished, activity, &QObject::deleteLater);\n+        activity->create();\n+    });\n+    no_wallet_layout->addWidget(create_wallet_button, 0, Qt::AlignHCenter | Qt::AlignTop);\n+    no_wallet_group->setLayout(no_wallet_layout);\n+\n+    walletStack->addWidget(no_wallet_group);\n }\n \n WalletFrame::~WalletFrame()"
      }
    ]
  }
]