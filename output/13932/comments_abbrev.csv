DrahtBot,2018-08-09T22:37:01Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15404](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15404.html) ([test] Remove -txindex to start nodes by am",https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-411919967,411919967,
gmaxwell,2018-08-10T05:53:56Z,">  It only works with witness UTXOs because full transactions (as would be needed for non-witness UTXOs) are not available unless txindex is enabled.\n\nIt doesn't look in the wallet?",https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-411982919,411982919,
sipa,2018-08-10T06:07:08Z,@gmaxwell `walletprocesspsbt` already exists for that. This is a node RPC that works without a wallet.,https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-411984826,411984826,
achow101,2018-08-14T20:48:49Z,Rebased,https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-413010930,413010930,
achow101,2018-08-28T21:53:42Z,Rebased,https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-416753468,416753468,
achow101,2018-09-13T23:51:54Z,Rebased,https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-421187586,421187586,
achow101,2018-11-17T01:38:43Z,Rebased,https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-439576833,439576833,
gwillen,2019-01-16T01:46:04Z,"It looks like I'm going to depend on this for my offline-signing GUI work, so we can display nice messages in the GUI about the status of PSBTs that users hand us. Can I therefore encourage its revival? :-) @achow101 \n\nNote that, assuming #14978 goes in relatively soon, a little refactoring will be needed -- mostly just changing #includes I expect. The other PSBT RPCs have had their guts moved",https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-454619751,454619751,
achow101,2019-01-25T03:18:50Z,Rebased and addressed comments.,https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-457441565,457441565,
gwillen,2019-01-29T01:45:43Z,"utACK modulo comments above. I have a general sense that analyzepsbt is a little hard to follow the logic of, but I don't immediately have suggestions for improving that.",https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-458374378,458374378,
laanwj,2019-02-15T16:20:03Z,"very strange!-one of the travis runs seems to be failing with\n```\n/bin/bash: test/test_bitcoin: No such file or directory\nMakefile:12966: recipe for target 'test/addrman_tests.cpp.test' failed\nmake[3]: *** [test/addrman_tests.cpp.test] Error 1\nmake[3]: *** Waiting for unfinished jobs....\n/bin/bash: test/test_bitcoin: No such file or directory\nMakefile:12966: recipe for target 'test/a",https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-464109008,464109008,
laanwj,2019-02-15T20:31:13Z,utACK 0c35f0e802274c27736b16a4542ad44bc3c7f794,https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-464189036,464189036,
laanwj,2019-02-16T19:44:26Z,re-utACK 540729ef4bf1b6c6da1ec795e441d2ce56a9a58b,https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-464377172,464377172,
promag,2018-08-28T23:19:40Z,Could reduce indentation?,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213502647,213502647,src/rpc/rawtransaction.cpp
promag,2018-08-28T23:29:53Z,Could be more informative?,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213504242,213504242,src/rpc/rawtransaction.cpp
promag,2018-08-28T23:30:27Z,Should allow duplicate outputs? Or should sum values into one output?,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213504324,213504324,src/rpc/rawtransaction.cpp
promag,2018-08-28T23:36:08Z,"So this is necessary because the first is a copy and the remaining psbt inputs are cleared because of `AddInput`. Maybe remove this ""optimization"" and merge all psbts to an empty psbt?",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213505237,213505237,src/rpc/rawtransaction.cpp
promag,2018-08-28T23:48:17Z,Should force `txs.size() > 1`?,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213507178,213507178,src/rpc/rawtransaction.cpp
practicalswift,2018-09-05T07:11:16Z,The scope of `size` could be reduced?,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r215157287,215157287,src/rpc/rawtransaction.cpp
achow101,2018-09-13T23:21:44Z,What else could be said?,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217562904,217562904,src/rpc/rawtransaction.cpp
achow101,2018-09-13T23:23:15Z,Duplicate outputs should be allowed. The idea is that there are two distinct transactions with separate inputs and outputs. They are just being combined into one transaction. Thus you can have duplicate outputs as outputs are still unique. However the inputs must be enforced to be unique.,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217563202,217563202,src/rpc/rawtransaction.cpp
achow101,2018-09-13T23:24:42Z,I don't see how that is better.,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217563440,217563440,src/rpc/rawtransaction.cpp
achow101,2018-09-13T23:51:39Z,Done,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217567515,217567515,src/rpc/rawtransaction.cpp
achow101,2018-09-13T23:51:46Z,Done,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217567536,217567536,src/rpc/rawtransaction.cpp
achow101,2018-09-13T23:51:50Z,Done,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217567543,217567543,src/rpc/rawtransaction.cpp
practicalswift,2018-10-02T05:14:10Z,Nit: Sort imports :-),https://github.com/bitcoin/bitcoin/pull/13932#discussion_r221827004,221827004,test/functional/rpc_psbt.py
luke-jr,2018-11-05T20:06:27Z,Unused?,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r230893599,230893599,src/rpc/rawtransaction.cpp
luke-jr,2018-11-05T20:06:36Z,Unused?,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r230893649,230893649,src/rpc/rawtransaction.cpp
practicalswift,2018-11-09T18:27:27Z,Nit: Looks like a case for `std::accumulate` perhaps? :-),https://github.com/bitcoin/bitcoin/pull/13932#discussion_r232348313,232348313,src/rpc/rawtransaction.cpp
promag,2018-11-20T00:06:37Z,Like the conflicting input index?,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234827979,234827979,src/rpc/rawtransaction.cpp
promag,2018-11-20T00:09:48Z,"@achow101 could you ack/nack on #12419, esp @MeshCollider https://github.com/bitcoin/bitcoin/pull/12419#issuecomment-437636604",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234828603,234828603,src/rpc/rawtransaction.cpp
promag,2018-11-20T00:12:20Z,Should use `RPCHelpMan` from #14530.,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234829077,234829077,src/rpc/rawtransaction.cpp
promag,2018-11-20T00:22:00Z,Could add test for this error.,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234830911,234830911,src/rpc/rawtransaction.cpp
promag,2018-11-20T00:22:07Z,"nit, `{`",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234830933,234830933,src/rpc/rawtransaction.cpp
gwillen,2018-11-30T03:05:00Z,"It would be less code, and less complexity, which I would say is always better, absent a reason to write more code. Why write more code? \n",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r237732910,237732910,src/rpc/rawtransaction.cpp
gwillen,2018-12-04T03:14:31Z,"(Also, this is copied from combinepsbt, where it is easiest to treat the first tx specially, because we need something to compare all the others to, to make sure the underlying transaction is the same. That restriction doesn't exist here, so the need for the extra step is gone.)",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r238517900,238517900,src/rpc/rawtransaction.cpp
gwillen,2019-01-16T01:43:07Z,"This doesn't match the code, right? ""next"" goes inside the input, not inside ""missing""?",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r248126733,248126733,src/rpc/rawtransaction.cpp
achow101,2019-01-25T03:17:56Z,`DecodePSBT` has its own tests.,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r250855459,250855459,src/rpc/rawtransaction.cpp
achow101,2019-01-25T03:18:20Z,Put the bracket where?,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r250855492,250855492,src/rpc/rawtransaction.cpp
gwillen,2019-01-29T01:20:56Z,"What about just having SignPSBTInput take an (optional) output-parameter sigdata, just like ProduceSignature? This function signature is getting unwieldy.",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r251659769,251659769,src/script/sign.cpp
gwillen,2019-01-29T01:35:54Z,"This interface feels fragile to me. Could this instead be ""bool PartiallySignedTransaction::GetInputUTXO(CTxOut& utxo, int input_index)""? That version would be resistant to misuse, whereas this version will do non-obvious crazy things if you accidentally give it the wrong prevout_index for your input (which seems easy to do.)",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r251662651,251662651,src/script/sign.cpp
gwillen,2019-01-29T01:39:17Z,"Are there cases where this isn't overwritten by a later check? If so, you should set all_final = false here. (If not you should remove this.)",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r251663308,251663308,src/rpc/rawtransaction.cpp
gwillen,2019-01-29T01:42:50Z,"Oh, I see, it's handled by calc_fee = false? The flow is a little hard to follow.",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r251663915,251663915,src/rpc/rawtransaction.cpp
sipa,2019-02-09T02:19:39Z,"Not P2SH? There's no guarantee that P2SH outputs are witness of course, but there is no real harm in including too much.",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255283623,255283623,src/rpc/rawtransaction.cpp
achow101,2019-02-09T20:55:25Z,"I think that would be a problem right now since providing a witness utxo requires a witness signature and if a P2SH output was not witness, then it would never be signed.",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255313205,255313205,src/rpc/rawtransaction.cpp
achow101,2019-02-09T22:03:50Z,Done,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255315183,255315183,src/script/sign.cpp
achow101,2019-02-09T22:04:04Z,Done,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255315191,255315191,src/script/sign.cpp
achow101,2019-02-09T22:06:01Z,I'm not quite sure you are asking.,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255315242,255315242,src/rpc/rawtransaction.cpp
gwillen,2019-02-10T04:32:19Z,"Yeah, I think I just have trouble following the state machine of this function, which is a little complicated, and so I was confused about whether all_final was actually getting set correctly in every case. Since nobody's relying on it yet, and I haven't found any actual issues, I think it should probably go in as-is, and I may propose some refactoring when I go to actually use it.",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255323243,255323243,src/rpc/rawtransaction.cpp
laanwj,2019-02-12T07:53:15Z,"Please add a short doxygen documentation for the new calls.\n(I know, the current ones don't, but every day is a good day to get started)\n\nEdit: also, what is our normal argument ordering here? input then output arguments or vice versa? Let's try to be consistent.",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255835511,255835511,src/script/sign.h
laanwj,2019-02-12T08:43:04Z,"Maybe we can avoid the input/output order completely by returning an `Optional<CTxOut>` instead. We have this in `optional.h`, after all.",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255850010,255850010,src/script/sign.h
laanwj,2019-02-12T08:56:23Z,"`Decimal(""10.999"")` I guess?\n(there are some more occurrences of floats for monetary values, won't comment them individually)",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r255854713,255854713,test/functional/rpc_psbt.py
achow101,2019-02-12T17:08:01Z,Added doxygen comment,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r256054582,256054582,src/script/sign.h
achow101,2019-02-12T17:08:05Z,Done,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r256054620,256054620,test/functional/rpc_psbt.py
sipa,2019-02-15T22:51:01Z,"Technically this violates the style guide, as it's not putting the then clause on the same line as the `if`, so it needs braces + indenting on the next line.",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257416737,257416737,src/rpc/rawtransaction.cpp
sipa,2019-02-15T23:00:03Z,"I guess there's an obvious solution which can be added later, namely letting the RPC take in descriptor(s) that apply to its inputs. I'll look into that after this PR is merged.",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257418589,257418589,src/rpc/rawtransaction.cpp
sipa,2019-02-15T23:08:49Z,Use `PSBTInputSigned` here?,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257420296,257420296,src/rpc/rawtransaction.cpp
sipa,2019-02-15T23:10:23Z,"I think you may want to add a check here for whether the input UTXO is present (if not, it's possible that you first set next=""updater"", and then overwrite it in this conditional).",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257420598,257420598,src/rpc/rawtransaction.cpp
sipa,2019-02-15T23:12:27Z,"I think this (cross-input) variable can't be set to true here. If this branch is executed for the last input in a transaction, the global ""next"" will report ""signer"", even if keys/script or even UTXOs are missing for other inputs.\n\nYou probably want to have the variable start at true, and then set it to false if anything anywhere more than a signature is missing.",https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257420943,257420943,src/rpc/rawtransaction.cpp
achow101,2019-02-16T05:16:45Z,Done,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257447204,257447204,src/rpc/rawtransaction.cpp
achow101,2019-02-16T05:16:51Z,Done,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257447207,257447207,src/rpc/rawtransaction.cpp
achow101,2019-02-16T05:17:15Z,Done,https://github.com/bitcoin/bitcoin/pull/13932#discussion_r257447218,257447218,src/rpc/rawtransaction.cpp
