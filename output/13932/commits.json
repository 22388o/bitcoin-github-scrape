[
  {
    "sha": "7344a7b9984b99882e136efc8ad48fb31740df93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzQ0YTdiOTk4NGI5OTg4MmUxMzZlZmM4YWQ0OGZiMzE3NDBkZjkz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-07-21T00:08:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T05:04:27Z"
      },
      "message": "Implement utxoupdatepsbt RPC and tests",
      "tree": {
        "sha": "a3f3914903f06d765ca78ed072a875bd9081da9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3f3914903f06d765ca78ed072a875bd9081da9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7344a7b9984b99882e136efc8ad48fb31740df93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7344a7b9984b99882e136efc8ad48fb31740df93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7344a7b9984b99882e136efc8ad48fb31740df93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7344a7b9984b99882e136efc8ad48fb31740df93/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 93,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2adfd0c0fc5fcad19975ad653f8cb6a98a535603",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7344a7b9984b99882e136efc8ad48fb31740df93/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7344a7b9984b99882e136efc8ad48fb31740df93/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7344a7b9984b99882e136efc8ad48fb31740df93",
        "patch": "@@ -1691,6 +1691,70 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                            actor (function)            argNames\n@@ -1709,6 +1773,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"finalizepsbt\",                 &finalizepsbt,              {\"psbt\", \"extract\"} },\n     { \"rawtransactions\",    \"createpsbt\",                   &createpsbt,                {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"converttopsbt\",                &converttopsbt,             {\"hexstring\",\"permitsigdata\",\"iswitness\"} },\n+    { \"rawtransactions\",    \"utxoupdatepsbt\",               &utxoupdatepsbt,            {\"psbt\"} },\n \n     { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n     { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },"
      },
      {
        "sha": "28507267ce57038ff95f8f9693cbe3d283385f11",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 28,
        "deletions": 1,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7344a7b9984b99882e136efc8ad48fb31740df93/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7344a7b9984b99882e136efc8ad48fb31740df93/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=7344a7b9984b99882e136efc8ad48fb31740df93",
        "patch": "@@ -20,7 +20,7 @@ def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n        # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[], [\"-txindex\"], [\"-txindex\"]]\n+        self.extra_args = [[\"-txindex\"], [\"-txindex\"], [\"-txindex\"]]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -296,5 +296,32 @@ def run_test(self):\n         # Test decoding error: invalid base64\n         assert_raises_rpc_error(-22, \"TX decode failed invalid base64\", self.nodes[0].decodepsbt, \";definitely not base64;\")\n \n+        # Send to all types of addresses\n+        addr1 = self.nodes[1].getnewaddress(\"\", \"bech32\")\n+        txid1 = self.nodes[0].sendtoaddress(addr1, 11)\n+        vout1 = find_output(self.nodes[0], txid1, 11)\n+        addr2 = self.nodes[1].getnewaddress(\"\", \"legacy\")\n+        txid2 = self.nodes[0].sendtoaddress(addr2, 11)\n+        vout2 = find_output(self.nodes[0], txid2, 11)\n+        addr3 = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n+        txid3 = self.nodes[0].sendtoaddress(addr3, 11)\n+        vout3 = find_output(self.nodes[0], txid3, 11)\n+        self.sync_all()\n+\n+        # Update a PSBT with UTXOs from the node\n+        # Bech32 inputs should be filled with witness UTXO. Other inputs should not be filled because they are non-witness\n+        psbt = self.nodes[1].createpsbt([{\"txid\":txid1, \"vout\":vout1},{\"txid\":txid2, \"vout\":vout2},{\"txid\":txid3, \"vout\":vout3}], {self.nodes[0].getnewaddress():32.999})\n+        decoded = self.nodes[1].decodepsbt(psbt)\n+        assert \"witness_utxo\" not in decoded['inputs'][0] and \"non_witness_utxo\" not in decoded['inputs'][0]\n+        assert \"witness_utxo\" not in decoded['inputs'][1] and \"non_witness_utxo\" not in decoded['inputs'][1]\n+        assert \"witness_utxo\" not in decoded['inputs'][2] and \"non_witness_utxo\" not in decoded['inputs'][2]\n+        updated = self.nodes[1].utxoupdatepsbt(psbt)\n+        decoded = self.nodes[1].decodepsbt(updated)\n+        assert \"witness_utxo\" in decoded['inputs'][0] and \"non_witness_utxo\" not in decoded['inputs'][0]\n+        assert \"witness_utxo\" not in decoded['inputs'][1] and \"non_witness_utxo\" not in decoded['inputs'][1]\n+        assert \"witness_utxo\" not in decoded['inputs'][2] and \"non_witness_utxo\" not in decoded['inputs'][2]\n+\n+\n+\n if __name__ == '__main__':\n     PSBTTest().main()"
      }
    ]
  },
  {
    "sha": "08f749c9147a5f3fdbbd880e0974b97084429002",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGY3NDljOTE0N2E1ZjNmZGJiZDg4MGUwOTc0Yjk3MDg0NDI5MDAy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-07-21T01:24:16Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T05:04:27Z"
      },
      "message": "Implement joinpsbts RPC and tests\n\nAdds a joinpsbts RPC which combines multiple distinct PSBTs into\none PSBT.",
      "tree": {
        "sha": "b54ee7d58a907acbe39af79fd2e8d226a2b520fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b54ee7d58a907acbe39af79fd2e8d226a2b520fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08f749c9147a5f3fdbbd880e0974b97084429002",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08f749c9147a5f3fdbbd880e0974b97084429002",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08f749c9147a5f3fdbbd880e0974b97084429002",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08f749c9147a5f3fdbbd880e0974b97084429002/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7344a7b9984b99882e136efc8ad48fb31740df93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7344a7b9984b99882e136efc8ad48fb31740df93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7344a7b9984b99882e136efc8ad48fb31740df93"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 115,
      "deletions": 0
    },
    "files": [
      {
        "sha": "424b92cfb5c2e56e43eff18175c4cdbac9cbf233",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f749c9147a5f3fdbbd880e0974b97084429002/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f749c9147a5f3fdbbd880e0974b97084429002/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=08f749c9147a5f3fdbbd880e0974b97084429002",
        "patch": "@@ -42,6 +42,26 @@ bool PartiallySignedTransaction::IsSane() const\n     return true;\n }\n \n+bool PartiallySignedTransaction::AddInput(const CTxIn& txin, PSBTInput& psbtin)\n+{\n+    if (std::find(tx->vin.begin(), tx->vin.end(), txin) != tx->vin.end()) {\n+        return false;\n+    }\n+    tx->vin.push_back(txin);\n+    psbtin.partial_sigs.clear();\n+    psbtin.final_script_sig.clear();\n+    psbtin.final_script_witness.SetNull();\n+    inputs.push_back(psbtin);\n+    return true;\n+}\n+\n+bool PartiallySignedTransaction::AddOutput(const CTxOut& txout, const PSBTOutput& psbtout)\n+{\n+    tx->vout.push_back(txout);\n+    outputs.push_back(psbtout);\n+    return true;\n+}\n+\n bool PSBTInput::IsNull() const\n {\n     return !non_witness_utxo && witness_utxo.IsNull() && partial_sigs.empty() && unknown.empty() && hd_keypaths.empty() && redeem_script.empty() && witness_script.empty();"
      },
      {
        "sha": "982fb803d59f83b4c4720689432af4ca955a3da0",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f749c9147a5f3fdbbd880e0974b97084429002/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f749c9147a5f3fdbbd880e0974b97084429002/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=08f749c9147a5f3fdbbd880e0974b97084429002",
        "patch": "@@ -389,6 +389,8 @@ struct PartiallySignedTransaction\n       * same actual Bitcoin transaction.) Returns true if the merge succeeded, false otherwise. */\n     NODISCARD bool Merge(const PartiallySignedTransaction& psbt);\n     bool IsSane() const;\n+    bool AddInput(const CTxIn& txin, PSBTInput& psbtin);\n+    bool AddOutput(const CTxOut& txout, const PSBTOutput& psbtout);\n     PartiallySignedTransaction() {}\n     PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx);"
      },
      {
        "sha": "1cdc9f87a769de188acc46d20c96960775487ba8",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f749c9147a5f3fdbbd880e0974b97084429002/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f749c9147a5f3fdbbd880e0974b97084429002/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=08f749c9147a5f3fdbbd880e0974b97084429002",
        "patch": "@@ -112,6 +112,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createpsbt\", 2, \"locktime\" },\n     { \"createpsbt\", 3, \"replaceable\" },\n     { \"combinepsbt\", 0, \"txs\"},\n+    { \"joinpsbts\", 0, \"txs\"},\n     { \"finalizepsbt\", 1, \"extract\"},\n     { \"converttopsbt\", 1, \"permitsigdata\"},\n     { \"converttopsbt\", 2, \"iswitness\"},"
      },
      {
        "sha": "866158e003d46413bc162462890f3064c88ef6bf",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 0,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f749c9147a5f3fdbbd880e0974b97084429002/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f749c9147a5f3fdbbd880e0974b97084429002/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=08f749c9147a5f3fdbbd880e0974b97084429002",
        "patch": "@@ -1755,6 +1755,80 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"joinpsbts\",\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n+            {\n+                {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base64 strings of partially signed transactions\",\n+                    {\n+                        {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+                    }}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    int32_t best_version = 1;\n+    uint32_t best_locktime = 0xffffffff;\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodeBase64PSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+        // Choose the highest version number\n+        if (psbtx.tx->nVersion > best_version) {\n+            best_version = psbtx.tx->nVersion;\n+        }\n+        // Choose the lowest lock time\n+        if (psbtx.tx->nLockTime < best_locktime) {\n+            best_locktime = psbtx.tx->nLockTime;\n+        }\n+    }\n+\n+    // Create a blank psbt where everything will be added\n+    PartiallySignedTransaction merged_psbt;\n+    merged_psbt.tx = CMutableTransaction();\n+    merged_psbt.tx->nVersion = best_version;\n+    merged_psbt.tx->nLockTime = best_locktime;\n+\n+    // Merge\n+    for (auto& psbt : psbtxs) {\n+        for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(psbt.tx->vin[i], psbt.inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString().c_str(), psbt.tx->vin[i].prevout.n));\n+            }\n+        }\n+        for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n+        }\n+        merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                            actor (function)            argNames\n@@ -1774,6 +1848,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"createpsbt\",                   &createpsbt,                {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"converttopsbt\",                &converttopsbt,             {\"hexstring\",\"permitsigdata\",\"iswitness\"} },\n     { \"rawtransactions\",    \"utxoupdatepsbt\",               &utxoupdatepsbt,            {\"psbt\"} },\n+    { \"rawtransactions\",    \"joinpsbts\",                    &joinpsbts,                 {\"txs\"} },\n \n     { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n     { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },"
      },
      {
        "sha": "f1538b34a8aff2f0ab69a03a8316a5727ea76e3b",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f749c9147a5f3fdbbd880e0974b97084429002/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f749c9147a5f3fdbbd880e0974b97084429002/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=08f749c9147a5f3fdbbd880e0974b97084429002",
        "patch": "@@ -321,6 +321,23 @@ def run_test(self):\n         assert \"witness_utxo\" not in decoded['inputs'][1] and \"non_witness_utxo\" not in decoded['inputs'][1]\n         assert \"witness_utxo\" not in decoded['inputs'][2] and \"non_witness_utxo\" not in decoded['inputs'][2]\n \n+        # Two PSBTs with a common input should not be joinable\n+        psbt1 = self.nodes[1].createpsbt([{\"txid\":txid1, \"vout\":vout1}], {self.nodes[0].getnewaddress():Decimal('10.999')})\n+        assert_raises_rpc_error(-8, \"exists in multiple PSBTs\", self.nodes[1].joinpsbts, [psbt1, updated])\n+\n+        # Join two distinct PSBTs\n+        addr4 = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n+        txid4 = self.nodes[0].sendtoaddress(addr4, 5)\n+        vout4 = find_output(self.nodes[0], txid4, 5)\n+        self.nodes[0].generate(6)\n+        self.sync_all()\n+        psbt2 = self.nodes[1].createpsbt([{\"txid\":txid4, \"vout\":vout4}], {self.nodes[0].getnewaddress():Decimal('4.999')})\n+        psbt2 = self.nodes[1].walletprocesspsbt(psbt2)['psbt']\n+        psbt2_decoded = self.nodes[0].decodepsbt(psbt2)\n+        assert \"final_scriptwitness\" in psbt2_decoded['inputs'][0] and \"final_scriptSig\" in psbt2_decoded['inputs'][0]\n+        joined = self.nodes[0].joinpsbts([psbt, psbt2])\n+        joined_decoded = self.nodes[0].decodepsbt(joined)\n+        assert len(joined_decoded['inputs']) == 4 and len(joined_decoded['outputs']) == 2 and \"final_scriptwitness\" not in joined_decoded['inputs'][3] and \"final_scriptSig\" not in joined_decoded['inputs'][3]\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "cb40b3abd4514361a024a1e7a1a281da9261261b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjQwYjNhYmQ0NTE0MzYxYTAyNGExZTdhMWEyODFkYTkyNjEyNjFi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-01T00:57:15Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T05:04:27Z"
      },
      "message": "Figure out what is missing during signing\n\nWhen signing an input, figure out what was requested for but was unable\nto be found and store it in a SignatureData.\n\nReturn this information in SignPSBTInput.",
      "tree": {
        "sha": "0bfab83a9b752625a3ee28022318a96a7df5c0a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bfab83a9b752625a3ee28022318a96a7df5c0a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb40b3abd4514361a024a1e7a1a281da9261261b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb40b3abd4514361a024a1e7a1a281da9261261b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb40b3abd4514361a024a1e7a1a281da9261261b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb40b3abd4514361a024a1e7a1a281da9261261b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08f749c9147a5f3fdbbd880e0974b97084429002",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08f749c9147a5f3fdbbd880e0974b97084429002",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08f749c9147a5f3fdbbd880e0974b97084429002"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 34,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0734edcf8e9669d11ceeffc62d726b4535da5b53",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb40b3abd4514361a024a1e7a1a281da9261261b/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb40b3abd4514361a024a1e7a1a281da9261261b/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=cb40b3abd4514361a024a1e7a1a281da9261261b",
        "patch": "@@ -191,13 +191,12 @@ void PSBTOutput::Merge(const PSBTOutput& output)\n     if (redeem_script.empty() && !output.redeem_script.empty()) redeem_script = output.redeem_script;\n     if (witness_script.empty() && !output.witness_script.empty()) witness_script = output.witness_script;\n }\n-\n bool PSBTInputSigned(PSBTInput& input)\n {\n     return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n }\n \n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash)\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash, SignatureData* out_sigdata, bool use_dummy)\n {\n     PSBTInput& input = psbt.inputs.at(index);\n     const CMutableTransaction& tx = *psbt.tx;\n@@ -237,9 +236,14 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n         return false;\n     }\n \n-    MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n     sigdata.witness = false;\n-    bool sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n+    bool sig_complete;\n+    if (use_dummy) {\n+        sig_complete = ProduceSignature(provider, DUMMY_SIGNATURE_CREATOR, utxo.scriptPubKey, sigdata);\n+    } else {\n+        MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n+        sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n+    }\n     // Verify that a witness signature was produced in case one was required.\n     if (require_witness_sig && !sigdata.witness) return false;\n     input.FromSignatureData(sigdata);\n@@ -250,6 +254,14 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n         input.non_witness_utxo = nullptr;\n     }\n \n+    // Fill in the missing info\n+    if (out_sigdata) {\n+        out_sigdata->missing_pubkeys = sigdata.missing_pubkeys;\n+        out_sigdata->missing_sigs = sigdata.missing_sigs;\n+        out_sigdata->missing_redeem_script = sigdata.missing_redeem_script;\n+        out_sigdata->missing_witness_script = sigdata.missing_witness_script;\n+    }\n+\n     return sig_complete;\n }\n "
      },
      {
        "sha": "cc4882c5800226e655897e16fc9dd92b99de6bed",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb40b3abd4514361a024a1e7a1a281da9261261b/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb40b3abd4514361a024a1e7a1a281da9261261b/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=cb40b3abd4514361a024a1e7a1a281da9261261b",
        "patch": "@@ -544,7 +544,7 @@ struct PartiallySignedTransaction\n bool PSBTInputSigned(PSBTInput& input);\n \n /** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL);\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL, SignatureData* out_sigdata = nullptr, bool use_dummy = false);\n \n /**\n  * Finalizes a PSBT if possible, combining partial signatures."
      },
      {
        "sha": "320956d0c4c6bba943b4d0441e63852e8e1fa4e1",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb40b3abd4514361a024a1e7a1a281da9261261b/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb40b3abd4514361a024a1e7a1a281da9261261b/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=cb40b3abd4514361a024a1e7a1a281da9261261b",
        "patch": "@@ -83,6 +83,8 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n         assert(i.second);\n         return true;\n     }\n+    // Could not make signature or signature not found, add keyid to missing\n+    sigdata.missing_sigs.push_back(keyid);\n     return false;\n }\n \n@@ -116,17 +118,24 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n     case TX_PUBKEYHASH: {\n         CKeyID keyID = CKeyID(uint160(vSolutions[0]));\n         CPubKey pubkey;\n-        if (!GetPubKey(provider, sigdata, keyID, pubkey)) return false;\n+        if (!GetPubKey(provider, sigdata, keyID, pubkey)) {\n+            // Pubkey could not be found, add to missing\n+            sigdata.missing_pubkeys.push_back(keyID);\n+            return false;\n+        }\n         if (!CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) return false;\n         ret.push_back(std::move(sig));\n         ret.push_back(ToByteVector(pubkey));\n         return true;\n     }\n     case TX_SCRIPTHASH:\n-        if (GetCScript(provider, sigdata, uint160(vSolutions[0]), scriptRet)) {\n+        h160 = uint160(vSolutions[0]);\n+        if (GetCScript(provider, sigdata, h160, scriptRet)) {\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }\n+        // Could not find redeemScript, add to missing\n+        sigdata.missing_redeem_script = h160;\n         return false;\n \n     case TX_MULTISIG: {\n@@ -154,6 +163,8 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }\n+        // Could not find witnessScript, add to missing\n+        sigdata.missing_witness_script = uint256(vSolutions[0]);\n         return false;\n \n     default:"
      },
      {
        "sha": "e229c375c762f30450c240e1f3bdd318c6e26f3e",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb40b3abd4514361a024a1e7a1a281da9261261b/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb40b3abd4514361a024a1e7a1a281da9261261b/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=cb40b3abd4514361a024a1e7a1a281da9261261b",
        "patch": "@@ -117,6 +117,10 @@ struct SignatureData {\n     CScriptWitness scriptWitness; ///< The scriptWitness of an input. Contains complete signatures or the traditional partial signatures format. scriptWitness is part of a transaction input per BIP 144.\n     std::map<CKeyID, SigPair> signatures; ///< BIP 174 style partial signatures for the input. May contain all signatures necessary for producing a final scriptSig or scriptWitness.\n     std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> misc_pubkeys;\n+    std::vector<CKeyID> missing_pubkeys; ///< KeyIDs of pubkeys which could not be found\n+    std::vector<CKeyID> missing_sigs; ///< KeyIDs of pubkeys for signatures which could not be found\n+    uint160 missing_redeem_script; ///< ScriptID of the missing redeemScript (if any)\n+    uint256 missing_witness_script; ///< SHA256 of the missing witnessScript (if any)\n \n     SignatureData() {}\n     explicit SignatureData(const CScript& script) : scriptSig(script) {}"
      }
    ]
  },
  {
    "sha": "77542cf2a5f8abb97dd46f782c1b0199cc062033",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzU0MmNmMmE1ZjhhYmI5N2RkNDZmNzgyYzFiMDE5OWNjMDYyMDMz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-01T00:56:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T05:04:27Z"
      },
      "message": "Move PSBT UTXO fetching to a separate method",
      "tree": {
        "sha": "9afe02a12ae92cb9594d46f3d3e682f26c26551c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9afe02a12ae92cb9594d46f3d3e682f26c26551c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77542cf2a5f8abb97dd46f782c1b0199cc062033",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77542cf2a5f8abb97dd46f782c1b0199cc062033",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77542cf2a5f8abb97dd46f782c1b0199cc062033",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77542cf2a5f8abb97dd46f782c1b0199cc062033/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb40b3abd4514361a024a1e7a1a281da9261261b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb40b3abd4514361a024a1e7a1a281da9261261b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb40b3abd4514361a024a1e7a1a281da9261261b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "32fb459decfc60f75765a28f07a95ef68b9f588b",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77542cf2a5f8abb97dd46f782c1b0199cc062033/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77542cf2a5f8abb97dd46f782c1b0199cc062033/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=77542cf2a5f8abb97dd46f782c1b0199cc062033",
        "patch": "@@ -62,6 +62,20 @@ bool PartiallySignedTransaction::AddOutput(const CTxOut& txout, const PSBTOutput\n     return true;\n }\n \n+bool PartiallySignedTransaction::GetInputUTXO(CTxOut& utxo, int input_index) const\n+{\n+    PSBTInput input = inputs[input_index];\n+    int prevout_index = tx->vin[input_index].prevout.n;\n+    if (input.non_witness_utxo) {\n+        utxo = input.non_witness_utxo->vout[prevout_index];\n+    } else if (!input.witness_utxo.IsNull()) {\n+        utxo = input.witness_utxo;\n+    } else {\n+        return false;\n+    }\n+    return true;\n+}\n+\n bool PSBTInput::IsNull() const\n {\n     return !non_witness_utxo && witness_utxo.IsNull() && partial_sigs.empty() && unknown.empty() && hd_keypaths.empty() && redeem_script.empty() && witness_script.empty();"
      },
      {
        "sha": "27b0aedd055e184866da898ac0e3696801480596",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77542cf2a5f8abb97dd46f782c1b0199cc062033/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77542cf2a5f8abb97dd46f782c1b0199cc062033/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=77542cf2a5f8abb97dd46f782c1b0199cc062033",
        "patch": "@@ -394,6 +394,14 @@ struct PartiallySignedTransaction\n     PartiallySignedTransaction() {}\n     PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n+    /**\n+     * Finds the UTXO for a given input index\n+     *\n+     * @param[out] utxo The UTXO of the input if found\n+     * @param[in] input_index Index of the input to retrieve the UTXO of\n+     * @return Whether the UTXO for the specified input was found\n+     */\n+    bool GetInputUTXO(CTxOut& utxo, int input_index) const;\n \n     template <typename Stream>\n     inline void Serialize(Stream& s) const {"
      }
    ]
  },
  {
    "sha": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDA3MjllZjRiZjFiNmM2ZGExZWM3OTVlNDQxZDJjZTU2YTlhNThi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-01T00:58:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T16:51:02Z"
      },
      "message": "Implement analyzepsbt RPC and tests",
      "tree": {
        "sha": "f7984f7df6df66f36b45a8d9a0fc52b5edd10963",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7984f7df6df66f36b45a8d9a0fc52b5edd10963"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77542cf2a5f8abb97dd46f782c1b0199cc062033",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77542cf2a5f8abb97dd46f782c1b0199cc062033",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77542cf2a5f8abb97dd46f782c1b0199cc062033"
      }
    ],
    "stats": {
      "total": 224,
      "additions": 223,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ac412074045b85cfd3808ab1a07a8158d059de6e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 198,
        "deletions": 0,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
        "patch": "@@ -7,6 +7,7 @@\n #include <coins.h>\n #include <compat/byteswap.h>\n #include <consensus/validation.h>\n+#include <consensus/tx_verify.h>\n #include <core_io.h>\n #include <index/txindex.h>\n #include <init.h>\n@@ -30,6 +31,8 @@\n #include <validation.h>\n #include <validationinterface.h>\n \n+\n+#include <numeric>\n #include <stdint.h>\n \n #include <univalue.h>\n@@ -1829,6 +1832,200 @@ UniValue joinpsbts(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"analyzepsbt\",\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"{\\n\"\n+                \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+                \"    {\\n\"\n+                \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+                \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+                \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+                \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"signatures\\\" : [          (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+                \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+                \"      }\\n\"\n+                \"      \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+                \"    }\\n\"\n+                \"    ,...\\n\"\n+                \"  ]\\n\"\n+                \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+                \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+                \"}\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = true;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (psbtx.GetInputUTXO(utxo, i)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (!utxo.IsNull() && !PSBTInputSigned(input)) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            SignatureData outdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, &outdata);\n+\n+            // Things are missing\n+            if (!complete) {\n+                if (!outdata.missing_pubkeys.empty()) {\n+                    // Missing pubkeys\n+                    UniValue missing_pubkeys_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : outdata.missing_pubkeys) {\n+                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+                }\n+                if (!outdata.missing_redeem_script.IsNull()) {\n+                    // Missing redeemScript\n+                    missing.pushKV(\"redeemscript\", HexStr(outdata.missing_redeem_script));\n+                }\n+                if (!outdata.missing_witness_script.IsNull()) {\n+                    // Missing witnessScript\n+                    missing.pushKV(\"witnessscript\", HexStr(outdata.missing_witness_script));\n+                }\n+                if (!outdata.missing_sigs.empty()) {\n+                    // Missing sigs\n+                    UniValue missing_sigs_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : outdata.missing_sigs) {\n+                        missing_sigs_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"signatures\", missing_sigs_univ);\n+                }\n+                input_univ.pushKV(\"missing\", missing);\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (outdata.missing_pubkeys.empty() && outdata.missing_redeem_script.IsNull() && outdata.missing_witness_script.IsNull() && !outdata.missing_sigs.empty()) {\n+                    input_univ.pushKV(\"next\", \"signer\");\n+                } else {\n+                    only_missing_sigs = false;\n+                    input_univ.pushKV(\"next\", \"updater\");\n+                }\n+            } else {\n+                only_missing_final = true;\n+                input_univ.pushKV(\"next\", \"finalizer\");\n+            }\n+        } else if (!utxo.IsNull()){\n+            input_univ.pushKV(\"is_final\", true);\n+        }\n+        inputs_result.push_back(input_univ);\n+    }\n+    result.pushKV(\"inputs\", inputs_result);\n+\n+    if (all_final) {\n+        only_missing_sigs = false;\n+        result.pushKV(\"next\", \"extractor\");\n+    }\n+    if (calc_fee) {\n+        // Get the output amount\n+        CAmount out_amt = std::accumulate(psbtx.tx->vout.begin(), psbtx.tx->vout.end(), 0,\n+            [](int a, const CTxOut& b) {\n+                return a += b.nValue;\n+            }\n+        );\n+\n+        // Get the fee\n+        CAmount fee = in_amt - out_amt;\n+\n+        // Estimate the size\n+        CMutableTransaction mtx(*psbtx.tx);\n+        CCoinsView view_dummy;\n+        CCoinsViewCache view(&view_dummy);\n+        bool success = true;\n+\n+        for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+            PSBTInput& input = psbtx.inputs[i];\n+            if (SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, nullptr, true)) {\n+                mtx.vin[i].scriptSig = input.final_script_sig;\n+                mtx.vin[i].scriptWitness = input.final_script_witness;\n+\n+                Coin newcoin;\n+                if (!psbtx.GetInputUTXO(newcoin.out, i)) {\n+                    success = false;\n+                    break;\n+                }\n+                newcoin.nHeight = 1;\n+                view.AddCoin(psbtx.tx->vin[i].prevout, std::move(newcoin), true);\n+            } else {\n+                success = false;\n+                break;\n+            }\n+        }\n+\n+        if (success) {\n+            CTransaction ctx = CTransaction(mtx);\n+            size_t size = GetVirtualTransactionSize(ctx, GetTransactionSigOpCost(ctx, view, STANDARD_SCRIPT_VERIFY_FLAGS));\n+            result.pushKV(\"estimated_vsize\", (int)size);\n+            // Estimate fee rate\n+            CFeeRate feerate(fee, size);\n+            result.pushKV(\"estimated_feerate\", feerate.ToString());\n+        }\n+        result.pushKV(\"fee\", ValueFromAmount(fee));\n+\n+        if (only_missing_sigs) {\n+            result.pushKV(\"next\", \"signer\");\n+        } else if (only_missing_final) {\n+            result.pushKV(\"next\", \"finalizer\");\n+        } else if (all_final) {\n+            result.pushKV(\"next\", \"extractor\");\n+        } else {\n+            result.pushKV(\"next\", \"updater\");\n+        }\n+    } else {\n+        result.pushKV(\"next\", \"updater\");\n+    }\n+    return result;\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                            actor (function)            argNames\n@@ -1849,6 +2046,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"converttopsbt\",                &converttopsbt,             {\"hexstring\",\"permitsigdata\",\"iswitness\"} },\n     { \"rawtransactions\",    \"utxoupdatepsbt\",               &utxoupdatepsbt,            {\"psbt\"} },\n     { \"rawtransactions\",    \"joinpsbts\",                    &joinpsbts,                 {\"txs\"} },\n+    { \"rawtransactions\",    \"analyzepsbt\",                  &analyzepsbt,               {\"psbt\"} },\n \n     { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n     { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },"
      },
      {
        "sha": "9a79a7ee4373ce89a413502ad50de1f9631fc335",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
        "patch": "@@ -5,8 +5,9 @@\n \"\"\"Test the Partially Signed Transaction RPCs.\n \"\"\"\n \n+from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, find_output, disconnect_nodes, connect_nodes_bi, sync_blocks\n+from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes_bi, disconnect_nodes, find_output, sync_blocks\n \n import json\n import os\n@@ -339,6 +340,29 @@ def run_test(self):\n         joined_decoded = self.nodes[0].decodepsbt(joined)\n         assert len(joined_decoded['inputs']) == 4 and len(joined_decoded['outputs']) == 2 and \"final_scriptwitness\" not in joined_decoded['inputs'][3] and \"final_scriptSig\" not in joined_decoded['inputs'][3]\n \n+        # Newly created PSBT needs UTXOs and updating\n+        addr = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n+        txid = self.nodes[0].sendtoaddress(addr, 7)\n+        addrinfo = self.nodes[1].getaddressinfo(addr)\n+        self.nodes[0].generate(6)\n+        self.sync_all()\n+        vout = find_output(self.nodes[0], txid, 7)\n+        psbt = self.nodes[1].createpsbt([{\"txid\":txid, \"vout\":vout}], {self.nodes[0].getnewaddress(\"\", \"p2sh-segwit\"):Decimal('6.999')})\n+        analyzed = self.nodes[0].analyzepsbt(psbt)\n+        assert not analyzed['inputs'][0]['has_utxo'] and not analyzed['inputs'][0]['is_final'] and analyzed['inputs'][0]['next'] == 'updater' and analyzed['next'] == 'updater'\n+\n+        # After update with wallet, only needs signing\n+        updated = self.nodes[1].walletprocesspsbt(psbt, False, 'ALL', True)['psbt']\n+        analyzed = self.nodes[0].analyzepsbt(updated)\n+        assert analyzed['inputs'][0]['has_utxo'] and not analyzed['inputs'][0]['is_final'] and analyzed['inputs'][0]['next'] == 'signer' and analyzed['next'] == 'signer' and analyzed['inputs'][0]['missing']['signatures'][0] == addrinfo['embedded']['witness_program']\n+\n+        # Check fee and size things\n+        assert analyzed['fee'] == Decimal('0.001') and analyzed['estimated_vsize'] == 134 and analyzed['estimated_feerate'] == '0.00746268 BTC/kB'\n+\n+        # After signing and finalizing, needs extracting\n+        signed = self.nodes[1].walletprocesspsbt(updated)['psbt']\n+        analyzed = self.nodes[0].analyzepsbt(signed)\n+        assert analyzed['inputs'][0]['has_utxo'] and analyzed['inputs'][0]['is_final'] and analyzed['next'] == 'extractor'\n \n if __name__ == '__main__':\n     PSBTTest().main()"
      }
    ]
  }
]