[
  {
    "sha": "19a5676280370148492cf59a5103584cf37893ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWE1Njc2MjgwMzcwMTQ4NDkyY2Y1OWE1MTAzNTg0Y2YzNzg5M2Fj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-19T08:09:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-19T08:46:11Z"
      },
      "message": "Use mutex pointer instead of name for AssertLockHeld\n\nThis makes it useable for non-global locks such as the wallet and\nkeystore locks.",
      "tree": {
        "sha": "cc3212d12ff9799fc0d5633b289d1832cb0915d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc3212d12ff9799fc0d5633b289d1832cb0915d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19a5676280370148492cf59a5103584cf37893ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19a5676280370148492cf59a5103584cf37893ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19a5676280370148492cf59a5103584cf37893ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19a5676280370148492cf59a5103584cf37893ac/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "636a42bd0e208d1d49dab6a95e23863736823883",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/636a42bd0e208d1d49dab6a95e23863736823883",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/636a42bd0e208d1d49dab6a95e23863736823883"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "174c9934531ca0433bdc8dcdde7b14455abfbeae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19a5676280370148492cf59a5103584cf37893ac/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19a5676280370148492cf59a5103584cf37893ac/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=19a5676280370148492cf59a5103584cf37893ac",
        "patch": "@@ -2238,7 +2238,7 @@ void PushGetBlocks(CNode* pnode, CBlockIndex* pindexBegin, uint256 hashEnd)\n \n bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n {\n-    AssertLockHeld(\"cs_main\");\n+    AssertLockHeld(cs_main);\n \n     // Check for duplicate\n     uint256 hash = pblock->GetHash();"
      },
      {
        "sha": "b57d8c3c00afdfd1ed7c85434fc701d139e5b337",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19a5676280370148492cf59a5103584cf37893ac/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19a5676280370148492cf59a5103584cf37893ac/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=19a5676280370148492cf59a5103584cf37893ac",
        "patch": "@@ -136,11 +136,11 @@ std::string LocksHeld()\n     return result;\n }\n \n-void AssertLockHeld(std::string strName)\n+void AssertLockHeldInternal(const char *pszName, const char* pszFile, int nLine, void *cs)\n {\n     BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)&i, *lockstack)\n-        if (i.second.MutexName() == strName) return;\n-    LogPrintf(\"Lock %s not held; locks held:\\n%s\", strName.c_str(), LocksHeld().c_str());\n+        if (i.first == cs) return;\n+    LogPrintf(\"Lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n     assert(0);\n }\n "
      },
      {
        "sha": "077ed59b89460248737be42695674493fc8113bd",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19a5676280370148492cf59a5103584cf37893ac/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19a5676280370148492cf59a5103584cf37893ac/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=19a5676280370148492cf59a5103584cf37893ac",
        "patch": "@@ -88,12 +88,13 @@ typedef AnnotatedMixin<boost::mutex> CWaitableCriticalSection;\n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false);\n void LeaveCritical();\n std::string LocksHeld();\n-void AssertLockHeld(std::string strName);\n+void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void *cs);\n #else\n void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\n void static inline LeaveCritical() {}\n-void static inline AssertLockHeld(std::string) {}\n+void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void *cs) {}\n #endif\n+#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n \n #ifdef DEBUG_LOCKCONTENTION\n void PrintLockContention(const char* pszName, const char* pszFile, int nLine);"
      }
    ]
  },
  {
    "sha": "956916806a932b3502d8a1add410fd393c005df0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTY5MTY4MDZhOTMyYjM1MDJkOGExYWRkNDEwZmQzOTNjMDA1ZGYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-12T07:07:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-19T08:46:11Z"
      },
      "message": "Document cs_wallet lock and add AssertLockHeld\n\nAdd locking assertions to wallet to all methods that\naccess internal fields and do not aquire the cs_wallet mutex.",
      "tree": {
        "sha": "8e7de16c6066e6698966456e93aef0c089b39cec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e7de16c6066e6698966456e93aef0c089b39cec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/956916806a932b3502d8a1add410fd393c005df0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/956916806a932b3502d8a1add410fd393c005df0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/956916806a932b3502d8a1add410fd393c005df0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/956916806a932b3502d8a1add410fd393c005df0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19a5676280370148492cf59a5103584cf37893ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19a5676280370148492cf59a5103584cf37893ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19a5676280370148492cf59a5103584cf37893ac"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 28,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6601575d881bd5e5937da491ecbe89f2a77d8e0f",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/956916806a932b3502d8a1add410fd393c005df0/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/956916806a932b3502d8a1add410fd393c005df0/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=956916806a932b3502d8a1add410fd393c005df0",
        "patch": "@@ -33,6 +33,7 @@ struct CompareValueOnly\n \n CPubKey CWallet::GenerateNewKey()\n {\n+    AssertLockHeld(cs_wallet); // mapKeyMetadata\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n     RandAddSeedPerfmon();\n@@ -58,6 +59,7 @@ CPubKey CWallet::GenerateNewKey()\n \n bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n {\n+    AssertLockHeld(cs_wallet); // mapKeyMetadata\n     if (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey))\n         return false;\n     if (!fFileBacked)\n@@ -93,6 +95,7 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n \n bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n {\n+    AssertLockHeld(cs_wallet); // mapKeyMetadata\n     if (meta.nCreateTime && (!nTimeFirstKey || meta.nCreateTime < nTimeFirstKey))\n         nTimeFirstKey = meta.nCreateTime;\n \n@@ -200,6 +203,7 @@ class CCorruptAddress\n \n bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn, bool fExplicit)\n {\n+    AssertLockHeld(cs_wallet); // nWalletVersion\n     if (nWalletVersion >= nVersion)\n         return true;\n \n@@ -233,6 +237,7 @@ bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn,\n \n bool CWallet::SetMaxVersion(int nVersion)\n {\n+    AssertLockHeld(cs_wallet); // nWalletVersion, nWalletMaxVersion\n     // cannot downgrade below current version\n     if (nWalletVersion > nVersion)\n         return false;\n@@ -325,6 +330,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)\n {\n+    AssertLockHeld(cs_wallet); // nOrderPosNext\n     int64_t nRet = nOrderPosNext++;\n     if (pwalletdb) {\n         pwalletdb->WriteOrderPosNext(nOrderPosNext);\n@@ -336,6 +342,7 @@ int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)\n \n CWallet::TxItems CWallet::OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount)\n {\n+    AssertLockHeld(cs_wallet); // mapWallet\n     CWalletDB walletdb(strWalletFile);\n \n     // First: get all CWalletTx and CAccountingEntry into a sorted-by-order multimap.\n@@ -1482,6 +1489,7 @@ string CWallet::SendMoneyToDestination(const CTxDestination& address, int64_t nV\n \n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n+    AssertLockHeld(cs_wallet); // setKeyPool\n     if (!fFileBacked)\n         return DB_LOAD_OK;\n     fFirstRunRet = false;\n@@ -1507,6 +1515,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n \n bool CWallet::SetAddressBook(const CTxDestination& address, const string& strName, const string& strPurpose)\n {\n+    AssertLockHeld(cs_wallet); // mapAddressBook\n     std::map<CTxDestination, CAddressBookData>::iterator mi = mapAddressBook.find(address);\n     mapAddressBook[address].name = strName;\n     if (!strPurpose.empty()) /* update purpose only if requested */\n@@ -1523,6 +1532,7 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const string& strNam\n \n bool CWallet::DelAddressBook(const CTxDestination& address)\n {\n+    AssertLockHeld(cs_wallet); // mapAddressBook\n     mapAddressBook.erase(address);\n     NotifyAddressBookChanged(this, address, \"\", ::IsMine(*this, address), \"\", CT_DELETED);\n     if (!fFileBacked)\n@@ -1736,6 +1746,7 @@ std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n \n set< set<CTxDestination> > CWallet::GetAddressGroupings()\n {\n+    AssertLockHeld(cs_wallet); // mapWallet\n     set< set<CTxDestination> > groupings;\n     set<CTxDestination> grouping;\n \n@@ -1828,6 +1839,7 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n \n set<CTxDestination> CWallet::GetAccountAddresses(string strAccount) const\n {\n+    AssertLockHeld(cs_wallet); // mapWallet\n     set<CTxDestination> result;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, mapAddressBook)\n     {\n@@ -1909,28 +1921,33 @@ void CWallet::UpdatedTransaction(const uint256 &hashTx)\n \n void CWallet::LockCoin(COutPoint& output)\n {\n+    AssertLockHeld(cs_wallet); // setLockedCoins\n     setLockedCoins.insert(output);\n }\n \n void CWallet::UnlockCoin(COutPoint& output)\n {\n+    AssertLockHeld(cs_wallet); // setLockedCoins\n     setLockedCoins.erase(output);\n }\n \n void CWallet::UnlockAllCoins()\n {\n+    AssertLockHeld(cs_wallet); // setLockedCoins\n     setLockedCoins.clear();\n }\n \n bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const\n {\n+    AssertLockHeld(cs_wallet); // setLockedCoins\n     COutPoint outpt(hash, n);\n \n     return (setLockedCoins.count(outpt) > 0);\n }\n \n void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n {\n+    AssertLockHeld(cs_wallet); // setLockedCoins\n     for (std::set<COutPoint>::iterator it = setLockedCoins.begin();\n          it != setLockedCoins.end(); it++) {\n         COutPoint outpt = (*it);\n@@ -1939,6 +1956,7 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n }\n \n void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n+    AssertLockHeld(cs_wallet); // mapKeyMetadata\n     mapKeyBirth.clear();\n \n     // get birth times for keys with metadata"
      },
      {
        "sha": "feb5cbf0c7d8daea30cb571bd4149c8bf57588f0",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/956916806a932b3502d8a1add410fd393c005df0/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/956916806a932b3502d8a1add410fd393c005df0/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=956916806a932b3502d8a1add410fd393c005df0",
        "patch": "@@ -102,6 +102,11 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int64_t nLastResend;\n \n public:\n+    /// Main wallet lock.\n+    /// This lock protects all the fields added by CWallet\n+    ///   except for:\n+    ///      fFileBacked (immutable after instantiation)\n+    ///      strWalletFile (immutable after instantiation)\n     mutable CCriticalSection cs_wallet;\n \n     bool fFileBacked;\n@@ -151,10 +156,11 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int64_t nTimeFirstKey;\n \n     // check whether we are allowed to upgrade (or already support) to the named feature\n-    bool CanSupportFeature(enum WalletFeature wf) { return nWalletMaxVersion >= wf; }\n+    bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n     bool SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const;\n+\n     bool IsLockedCoin(uint256 hash, unsigned int n) const;\n     void LockCoin(COutPoint& output);\n     void UnlockCoin(COutPoint& output);\n@@ -171,7 +177,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     // Load metadata (used by LoadWallet)\n     bool LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &metadata);\n \n-    bool LoadMinVersion(int nVersion) { nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n+    bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n \n     // Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n@@ -320,6 +326,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     unsigned int GetKeyPoolSize()\n     {\n+        AssertLockHeld(cs_wallet); // setKeyPool\n         return setKeyPool.size();\n     }\n \n@@ -332,7 +339,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     bool SetMaxVersion(int nVersion);\n \n     // get the current wallet format (the oldest client version guaranteed to understand this wallet)\n-    int GetVersion() { return nWalletVersion; }\n+    int GetVersion() { AssertLockHeld(cs_wallet); return nWalletVersion; }\n \n     /** Address book entry changed.\n      * @note called with lock cs_wallet held."
      }
    ]
  },
  {
    "sha": "012ca1c9e4f21e0414f965cb812ecb1f2ddb4f67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTJjYTFjOWU0ZjIxZTA0MTRmOTY1Y2I4MTJlY2IxZjJkZGI0ZjY3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-19T08:58:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-19T09:00:58Z"
      },
      "message": "LoadWallet: acquire cs_wallet mutex before clearing setKeyPool\n\nMake the function mutex-aware, to prevent having to lock cs_wallet\nat the call site in Init.",
      "tree": {
        "sha": "a9cfb699a58ad9d201e739fa8523b93592a40f27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9cfb699a58ad9d201e739fa8523b93592a40f27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/012ca1c9e4f21e0414f965cb812ecb1f2ddb4f67",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/012ca1c9e4f21e0414f965cb812ecb1f2ddb4f67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/012ca1c9e4f21e0414f965cb812ecb1f2ddb4f67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/012ca1c9e4f21e0414f965cb812ecb1f2ddb4f67/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "956916806a932b3502d8a1add410fd393c005df0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/956916806a932b3502d8a1add410fd393c005df0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/956916806a932b3502d8a1add410fd393c005df0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cfaa0d6b9f4a6ca9ef64da2f5f21f62aec558c11",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/012ca1c9e4f21e0414f965cb812ecb1f2ddb4f67/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/012ca1c9e4f21e0414f965cb812ecb1f2ddb4f67/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=012ca1c9e4f21e0414f965cb812ecb1f2ddb4f67",
        "patch": "@@ -1489,7 +1489,6 @@ string CWallet::SendMoneyToDestination(const CTxDestination& address, int64_t nV\n \n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n-    AssertLockHeld(cs_wallet); // setKeyPool\n     if (!fFileBacked)\n         return DB_LOAD_OK;\n     fFirstRunRet = false;\n@@ -1498,6 +1497,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     {\n         if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n         {\n+            LOCK(cs_wallet);\n             setKeyPool.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation"
      }
    ]
  }
]