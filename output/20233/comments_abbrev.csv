DrahtBot,2020-10-24 08:59:26,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22627](https://github.com/bitcoin/bitcoin/pull/22627) ([addrman] De-duplicate Add() function by amitiuttarwar)\n* [#2187",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-715884174,715884174,
practicalswift,2020-10-24 09:03:49,"Concept ACK\n\nShould we run with `-checkaddrman` in at least one of the Travis jobs?",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-715884692,715884692,
jnewbery,2020-10-24 10:28:07,"> Should we run with -checkaddrman in at least one of the Traivs jobs?\n\n`-checkaddrman` is enabled by default for regtest, so is on for all Travis jobs (although our functional tests probably don't exercise addrman very much)",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-715894659,715894659,
jnewbery,2020-10-24 17:11:37,The consistency check fails on one of the unit tests. I've converted this PR to draft status while I work out why it's failing.,https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-716008503,716008503,
practicalswift,2020-10-24 21:56:37,"> `-checkaddrman` is enabled by default for regtest, so is on for all Travis jobs (although our functional tests probably don't exercise addrman very much)\n\nOh, I missed the ""by default on regtest"" in the PR description. Sorry about that :)\n\nDefaulting to sanity checking in regtest makes perfect sense! Even more Concept ACK :)",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-716060484,716060484,
jnewbery,2020-10-25 10:00:53,I've fixed the failing unit tests.,https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-716121546,716121546,
jnewbery,2020-10-25 14:47:55,This makes some of the functional tests run very slowly. I'll do some comparisons and maybe disable consistency checks on the slowest tests.,https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-716160060,716160060,
jnewbery,2020-10-26 12:02:54,Marking as draft until #20228 is merged.,https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-716503063,716503063,
ajtowns,2021-01-06 02:57:52,"This seems to make rpc_net and p2p_getaddr_caching tests run extremely slowly:\n\n    rpc_net.py                                       | ✓ Passed  | 1372 s\n    p2p_getaddr_caching.py                           | ✓ Passed  | 1367 s\n\nI don't think there's any need for this to be based on #20228 -- passing a ""check_addrman"" from init to CConnman seems to work fine, see https://github.com/ajtow",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-755044221,755044221,
jnewbery,2021-01-06 09:30:23,"> This seems to make rpc_net and p2p_getaddr_caching tests run extremely slowly.\n\nYes, see my comment at https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-716160060. I was planning on addressing that after 20228 was merged, probably by disabling the checks for those tests, or perhaps by changing the consistency check configuration to be a ratio, like the mempool consistency checks:\n",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-755188580,755188580,
ajtowns,2021-01-07 06:24:50,"> Connman uses addrman, but there's no reason for it to have an addrman.\n\nThere's no point having addrman without a connman outside of unit tests (in which case the test can create an addrman directly), and connman uses addrman. That's enough reason for connman to be the thing that owns it, and for anything that wants it to access it via connman. I don't think there's anything you could do wit",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-755914044,755914044,
jnewbery,2021-01-07 09:55:44,"> But more importantly, it's easy to separate the two questions (should connman own the addrman instance and should debug_addrman be used more often) and judge them independently, so we should.\n\nThe aim of this PR is to add the ability to run internal consistency checks in addrman. If that can be done without adding more unnecessary coupling between components, then we should do that. There's ",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-756011974,756011974,
jnewbery,2021-03-30 10:54:46,Rebased on master. I'm leaving this as draft since I still need to update it to disable addrman consistency checks for certain tests.,https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-810124639,810124639,
vasild,2021-07-16 11:43:25,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-881386449,881386449,
jnewbery,2021-07-19 10:49:11,"Addrman corruption is getting more attention recently, so I've rebased on master, with some small changes:\n\n- the option is now an integer, where setting `-checkaddrman=n` will cause the consistency checks to be run every `n` operations (similar to `-checkmempool=n`).\n- the consistency check ratio is set to 100 for unit tests. On my machine, running the addrman_tests took: \n  - with no con",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-882447465,882447465,
MarcoFalke,2021-07-19 14:07:14,review ACK a343f9079c30e1dce6f13852ff84bab7dab3fcde,https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-882577713,882577713,
jamesob,2021-07-19 14:12:35,"Concept ACK, seems like an obvious win. Will review soon.",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-882582362,882582362,
jnewbery,2021-07-19 17:11:41,"> This results in about 8% slowdown of ./src/test/test_bitcoin on my machine (approx 6m10s -> 6m45s).\n\nHmmm, that's rather worrying. I'd expect the only test for this to have a material impact on would be the addrman tests, which take less than a second to run. Perhaps the calls to `GetRand()` are expensive enough that even with consistency checks disabled, this has a negative effect on perfor",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-882715719,882715719,
MarcoFalke,2021-07-19 17:20:20,`GetRand` seems unneeded wasteful anyway (it calls `SeedFast` on every call). Have you seen https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672437419 ?,https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-882722128,882722128,
jnewbery,2021-07-19 17:30:05,"> GetRand seems unneeded wasteful anyway (it calls SeedFast on every call). Have you seen #20233 (comment) ?\n\nI see it. I'll try this with `insecure_rand` tomorrow. Thanks for the tip!",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-882728536,882728536,
jnewbery,2021-07-20 10:30:12,"> This results in about 8% slowdown of ./src/test/test_bitcoin on my machine (approx 6m10s -> 6m45s).\n\n@vasild how many samples did you take? There's some variance in the time taken to run the entire test suite, so you'll need to run it several times to ensure that this isn't just noise. Here are my results:\n\nReturning immediately from `_Check()`:\n\n```\n→ time `for i in {1..5}; do ./s",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-883284166,883284166,
jnewbery,2021-07-21 09:31:42,"Added the two commits from PR #22500, to resolve the various suggestions in this thread: https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672204994.",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-884041364,884041364,
jnewbery,2021-07-21 09:41:11,"@MarcoFalke has just told me that he no longer believes that #22500 is the right approach, so I've removed those two commits again.",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-884047846,884047846,
jnewbery,2021-07-23 10:04:41,Thanks for the recent review comments @sipa @MarcoFalke @mzumsande. All comments should now be addressed.,https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-885533996,885533996,
jnewbery,2021-07-26 16:00:19,"Thanks for the review @vasild! I've taken your suggestion of setting `insecure_rand` in the initializer list.\n\nI've also removed the default args for the `CAddrMan` constructor, since default args are evil and can hide subtle bugs.",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-886827484,886827484,
vasild,2021-07-30 10:54:19,"Before this PR, it was possible to run all unit and fuzz tests with checks enabled on every step (when compiled with `DEBUG_ADDRMAN`). One had to recompile, but changing the source code was not necessary.\n\nWith this PR, addrman unit tests are run with checks on every 100th step, other unit tests and fuzz tests have the checks disabled. To change that (to enable the checks or get them more ofte",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-889813074,889813074,
jnewbery,2021-08-02 13:09:48,"Rebased and taken the fix from #22601.\n\n> What about replacing those hardcoded 0s (no checks) with a constant DEFAULT_ADDRMAN_CONSISTENCY_CHECKS_IN_TESTS that can be easily changed in order to enable the checks? Or maybe have two constants ..._IN_ADDRMAN_TESTS=100 and ..._IN_TESTS=0.\n\n> Or replace the 0s with something like m_args.GetArg(""-checkaddrman"", 0) so that the checks can be enable",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-891013192,891013192,
theStack,2021-08-02 20:31:24,"Concept ACK\n\nThis approach seems to resolve a lot of potential headache caused by the fact that barely anyone ever builds with DEBUG_ADDRMAN (see https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-890937517 for an example where this caused problems) and we don't have a CI instance running with it. The only slight drawback I could think of this solution is that the (released) bitcoind b",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-891313223,891313223,
jonatack,2021-08-04 16:54:32,"In 0d2d0de the commit message states ""addrman_tests fail when consistency checks are enabled""...I was unable to reproduce this failure in the preceding commits. Is it still the case, should the message be updated, can the commit be dropped?",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-892816577,892816577,
jnewbery,2021-08-05 16:15:31,Rebased and addressed review comments from @jonatack and @amitiuttarwar ,https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-893586268,893586268,
jnewbery,2021-08-05 17:17:07,"> In 0d2d0de the commit message states ""addrman_tests fail when consistency checks are enabled""...I was unable to reproduce this failure in the preceding commits. Is it still the case, should the message be updated, can the commit be dropped?\n\n@jonatack - I think it's still true. Try enabling `DEBUG_ADDRMAN` and running the addrman tests here: https://github.com/jnewbery/bitcoin/tree/2021-08-f",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-893635010,893635010,
jonatack,2021-08-05 17:48:48,"Thanks @jnewbery, I'll have a look (once the guix build finishes ⏰)",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-893661732,893661732,
amitiuttarwar,2021-08-06 18:55:10,reACK 00fd0891ce,https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-894455854,894455854,
jonatack,2021-08-07 10:14:32,"ACK 00fd0891ce799084fdd137fafc0522c27fbfb429 per `git range-diff 03826ae 7883160 00fd089` modulo the addrman fuzzer crash\n\n<details><summary>reproduced the CI addrman fuzzer crash locally</summary><p>\n\n```bash\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior serialize.h:205:93 in \nfuzz: ./addrman.h:754: void CAddrMan::Check() const: Assertion `false' failed.\n==62677== ERROR: l",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-894635035,894635035,
jnewbery,2021-08-11 11:11:26,"I've disabled the consistency checks again in the addrman fuzz test. I think the problem is that the fuzzer will call `Clear()`, and subsequent calls to `Check()` may fail, since `Clear()` may leave the CAddrMan in a slightly inconsistent state.\n\nI have a branch that removes `Clear()` at https://github.com/jnewbery/bitcoin/tree/2021-08-remove-addrman-clear, which I'll open after this is merged",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-896737668,896737668,
jonatack,2021-08-12 17:02:56,"ACK a4d78546b0858602c60c03fdf8b35ca666ab2e56 per `git diff 00fd089 a4d7854`, tested by adding logging similar to #22479 and running with `-checkaddrman=<n>` for various values 0/1/10/100 etc, tested the updated docs with `bitcoind -help-debug | grep -A2 ""checkaddrman\|checkmempool""` and verified rebased on master that compiling with `CPPFLAGS=""-DDEBUG_ADDRMAN""` no longer causes the build to error.",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-897808457,897808457,
mzumsande,2021-08-12 21:39:40,"Code-review ACK a4d78546b0858602c60c03fdf8b35ca666ab2e56\nAlso did some testing with different values of `-checkaddrman` and it worked as expected.",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-897985846,897985846,
fanquake,2021-08-13 09:02:42,"The various nits/changes mentioned can be done in a followup. Either separately, or potentially as part of the `Clear()` branch.",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-898302500,898302500,
mzumsande,2021-08-13 09:11:18,"> I've disabled the consistency checks again in the addrman fuzz test. I think the problem is that the fuzzer will call `Clear()`, and subsequent calls to `Check()` may fail, since `Clear()` may leave the CAddrMan in a slightly inconsistent state.\n> \n> I have a branch that removes `Clear()` at https://github.com/jnewbery/bitcoin/tree/2021-08-remove-addrman-clear, which I'll open after this is ",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-898307721,898307721,
vasild,2021-10-27 12:24:20,">> ... replace the 0s with something like `m_args.GetArg(""-checkaddrman"", 0)` so that the checks can be enabled without modifying the source code.\n\n> @vasild - This can be done in a follow-up PR ...\n\nDone in https://github.com/bitcoin/bitcoin/pull/23373.\n",https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-952871817,952871817,
Empact,2020-10-23 23:50:50,nit: other cases line break after banman,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r511200283,511200283,src/test/util/setup_common.cpp
jnewbery,2020-10-29 16:06:07,"I don't it matters where the line break is, as long as the line isn't too long.",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r514380030,514380030,src/test/util/setup_common.cpp
MarcoFalke,2021-07-19 11:09:55,nit: https://en.cppreference.com/w/cpp/algorithm/clamp,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672204202,672204202,src/init.cpp
MarcoFalke,2021-07-19 11:11:20,Nice. Verbosely complaining to developers about bugs makes them less likely to get missed.,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672204994,672204994,src/addrman.h
MarcoFalke,2021-07-19 11:27:57,Unrelated improvement: Maybe just simplify the `if foo return -xx;` with `assert(!foo);` in the cpp file?,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672214710,672214710,src/addrman.h
vasild,2021-07-19 12:03:29,"```suggestion\n            std::abort();\n```",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672236604,672236604,src/addrman.h
jnewbery,2021-07-19 13:05:45,"@MarcoFalke I left the cpp file unchanged in case we want to later add some kind of recovery code instead of simply asserting on failure. Changing the `if foo return -xx;` to `assert(!foo)` would involve making changes in more places.\n\n@vasild - What's the advantage of using `std::abort`? I see lots more examples of `assert(false)` in the code than `std::abort()`.",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672279096,672279096,src/addrman.h
jnewbery,2021-07-19 13:05:53,Nice. Done.,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672279183,672279183,src/init.cpp
vasild,2021-07-19 15:04:01,"`assert()` calls `abort()`, so it is the same thing in practice (modulo the ""strange"" message `assertion failed: false`). Feel free to ignore or use `assert(0)` or `assert(nullptr)`.",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672382001,672382001,src/addrman.h
vasild,2021-07-19 15:29:50,"nit: clang-format, spaces around `=`",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672404847,672404847,src/addrman.h
vasild,2021-07-19 15:31:09,Why remove `const`?,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672405977,672405977,src/addrman.h
vasild,2021-07-19 15:37:03,"```suggestion\n    argsman.AddArg(""-checkaddrman"", strprintf(""Do consistency checks on the addrman every <n> operations. Use 0 to disable. (default: %u)"", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n```",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672410803,672410803,src/init.cpp
vasild,2021-07-19 15:58:17,"This could result in ""sometimes fails, sometimes succeeds"" tests on CI. A developer should always get the failure if using `-checkaddrman=1`. If this is undesirable, then `if (++counter % m_consistency_check == 0)` can be considered to get the checks at deterministic times.",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672428534,672428534,src/addrman.cpp
MarcoFalke,2021-07-19 16:09:26,"The same is true for `CTxMemPool::check`. At least here we could use `insecure_rand`, which should be deterministic if initialized deterministically. ",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672437419,672437419,src/addrman.cpp
ajtowns,2021-07-20 05:26:23,"`assert(false && ""addrman consistency check failed"");` perhaps? Or `assert(err == 0)` or `Assume(err == 0)`",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672815269,672815269,src/addrman.h
MarcoFalke,2021-07-20 05:29:02,#22500 ;),https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672816243,672816243,src/addrman.h
vasild,2021-07-20 07:33:55,Or set `g_mock_deterministic_tests` to `true` for all tests :eyes: :bomb: ,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672878735,672878735,src/addrman.cpp
vasild,2021-07-20 07:40:40,"Would it be a good idea to\n1. do the check unconditionally at the end of `Unserialize()` (as if `m_consistency_check == 1`) and\n2. if it fails, to treat it as disk corruption - throw `std::ios_base::failure` instead of `abort()`?",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672883161,672883161,src/addrman.h
jnewbery,2021-07-20 08:20:41,Seems reasonable. This can be done as a follow-up if desired.,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672910911,672910911,src/addrman.h
jnewbery,2021-07-20 08:24:39,"> At least here we could use insecure_rand, which should be deterministic if initialized deterministically.\n\nThis has the unfortunate effect that the checks are run on the same operations for every run of the unit tests. Having them picked at random means that eventually they're run at every operation in the unit tests. Taking entropy from insecure_rand at different points would also invalidat",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672913835,672913835,src/addrman.cpp
jnewbery,2021-07-20 10:33:48,done,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r673004759,673004759,src/addrman.h
jnewbery,2021-07-20 10:33:52,added back,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r673004808,673004808,src/addrman.h
jnewbery,2021-07-20 10:33:58,done,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r673004862,673004862,src/init.cpp
jnewbery,2021-07-20 10:35:13,Leaving this as is for now. The `GetRand()` call doesn't seem to result in a performance degradation from my tests: https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-883284166.,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r673005563,673005563,src/addrman.cpp
jnewbery,2021-07-21 09:30:44,Thanks @MarcoFalke. I've added the two commits from that PR into this branch.,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r673814769,673814769,src/addrman.h
sipa,2021-07-22 19:27:35,Perhaps use `insecure_rand.randrange(m_consistency_check_ratio)`? Probably orders of magnitude faster...,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r675103344,675103344,src/addrman.cpp
MarcoFalke,2021-07-22 19:45:47,See previous discussion: https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672913835,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r675114327,675114327,src/addrman.cpp
jnewbery,2021-07-22 20:01:27,I think I was mistaken about this causing problems for the unit tests. I'll try again with insecure_rand tomorrow.,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r675123971,675123971,src/addrman.cpp
mzumsande,2021-07-22 23:11:11,"The same `MakeDeterministic()` also exists in `net_tests.cpp` and should be changed there too to prevent `net_tests/caddrdb_read` from failing (though I'm not sure why these tests are there, looks to me like they should be integrated into `addrman_tests.cpp` or removed if redundant).",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r675218487,675218487,src/test/addrman_tests.cpp
jnewbery,2021-07-23 10:01:16,Done.,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r675451225,675451225,src/addrman.cpp
jnewbery,2021-07-23 10:03:16,"Oh good spot! There's also a deterministic addrman in the fuzzers.\n\nI've added a `deterministic` argument to the `CAddrMan` ctor (similar to `TxRequestTracker`) to consolidate these into one place, so that the tests can just ask for a deterministic addrman rather than constructing and addrman and then updating its internals.\n\nI agree that those addrman tests in net_tests.cpp should be move",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r675452435,675452435,src/test/addrman_tests.cpp
MarcoFalke,2021-07-23 13:52:17,"This is still true, right?\n\n> This has the unfortunate effect that the checks are run on the same operations for every run of the unit tests. Having them picked at random means that eventually they're run at every operation in the unit tests.\n\nFrom https://github.com/bitcoin/bitcoin/pull/20233#discussion_r672913835",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r675581724,675581724,src/addrman.cpp
jnewbery,2021-07-23 14:54:39,"Yes, I think this is true, but I'm not sure how big a problem it is. Before this PR we weren't running the consistency tests at all in the unit tests.",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r675628010,675628010,src/addrman.cpp
vasild,2021-07-26 10:14:12,"nit: initialize `insecure_rand` here:\n\n```suggestion\n        : insecure_rand(deterministic), m_consistency_check_ratio(consistency_check_ratio)          \n```\n\nand remove `insecure_rand = FastRandomContext(true);` from below.\n\nAlso, given that `Clear()` (called from the constructor) contains `nKey = insecure_rand.rand256();` maybe also remove `nKey = uint256{1};` from below.",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r676472503,676472503,src/addrman.h
jnewbery,2021-07-26 15:49:38,"I've moved the `insecure_rand` to the initializer list as suggested.\n\nI'm not going to remove the `nKey` assignment in this PR. I'd like to remove the `Clear()` method from `CAddrMan` in a future PR. The only place it's used in the product code is if peers.dat deserialization fails, we'll call `Clear()`. I think it's better just to instantiate a new `CAddrMan` object in that case, since it's d",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r676730241,676730241,src/addrman.h
vasild,2021-07-26 16:17:49,nit: here and below - indentation of 3 spaces,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r676753548,676753548,src/bench/addrman.cpp
vasild,2021-07-26 16:32:33,"In the previous incarnation of this PR which did not pass `consistency_checks` explicitly: `CAddrMan addrman(/* deterministic */ false)` it would have equaled to `DEFAULT_ADDRMAN_CONSISTENCY_CHECKS`.\n\nIn the latest incarnation (24515fee60) `0` is passed explicitly.\n\nThis contains the assumption that `DEFAULT_ADDRMAN_CONSISTENCY_CHECKS` is `0` which is true now, but could change in the futu",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r676764762,676764762,src/test/fuzz/connman.cpp
vasild,2021-07-26 16:35:02,Maybe also adding `explicit` would make sense.,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r676766775,676766775,src/addrman.h
jnewbery,2021-07-27 08:45:49,oops. Fixed.,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r677247258,677247258,src/bench/addrman.cpp
jnewbery,2021-07-27 08:46:05,Made the ctor explicit.,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r677247457,677247457,src/addrman.h
jnewbery,2021-07-27 08:49:19,"It's the other way around. The previous version implicitly assumed that the `DEFAULT_ADDRMAN_CONSISTENCY_CHECKS` was 0. This line is explicitly saying that we want an addrman without consistency checks.\n\nIf we used `DEFAULT_ADDRMAN_CONSISTENCY_CHECKS` explicitly in the call sites and that value changes in future (unlikely I think, since we don't want these debug checks enabled in production), ",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r677250016,677250016,src/test/fuzz/connman.cpp
vasild,2021-07-27 13:28:58,"I see, makes sense, thanks for the elaboration!",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r677450006,677450006,src/test/fuzz/connman.cpp
jonatack,2021-08-04 16:16:49,"7883160 suggestion\n```diff\n- *    * Several indexes are kept for high performance. Setting m_consistency_check_ratio will introduce (expensive)\n- *      consistency checks for the entire data structure.\n+ *    * Several indexes are kept for high performance. Setting m_consistency_check_ratio with the -checkaddrman\n+        configuration option will introduce (expensive) consistency check",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r682766066,682766066,src/addrman.h
jonatack,2021-08-04 16:19:18,"7883160 missng `=<n>`? (and optional suggestions for the descriptions)\n\n```diff\n-    argsman.AddArg(""-checkaddrman"", strprintf(""Do consistency checks on the addrman every <n> operations. Use 0 to disable. (default: %u)"", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(""-checkmempool=<n>"", strprintf(""Ru",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r682768076,682768076,src/init.cpp
jonatack,2021-08-04 16:21:43,"579584d Should the 4 CAddrMan ctors that follow pass deterministic `true` instead of `false`?\n\n```diff\n-    CAddrMan addrman1(/* deterministic */ false, /* consistency_checks */ 0);\n+    CAddrMan addrman1(/* deterministic */ true, /* consistency_checks */ 0);\n```\n",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r682770019,682770019,src/test/net_tests.cpp
jonatack,2021-08-04 16:23:12,"579584d nit, prefer prefix iterator (idem in addrman_tests.cpp)\n```suggestion\n    for (size_t i{0}; i < addrman_count; ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r682771234,682771234,src/bench/addrman.cpp
jonatack,2021-08-04 16:24:18,"579584d for benchmarks would it be preferable to pass deterministic `true`?\n",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r682772126,682772126,src/bench/addrman.cpp
jonatack,2021-08-04 16:24:38,"579584d nit, can be const",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r682772390,682772390,src/bench/addrman.cpp
jonatack,2021-08-04 16:29:35,"7883160 negative values would be meaningless and value is clamped in range 0...1000000; could be unsigned\n\n<details><summary>tested diff</summary><p>\n\n```diff\n--- a/src/addrman.h\n+++ b/src/addrman.h\n@@ -27,7 +27,7 @@ \n /** Default for -checkaddrman */\n /** Default for -checkaddrman */\n-static constexpr int32_t DEFAULT_ADDRMAN_CONSISTENCY_CHECKS{0};\n+static constexpr uint32_t ",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r682776199,682776199,src/addrman.h
jonatack,2021-08-04 16:58:03,"78831602\n```bash\n$ test/lint/lint-spelling.sh \nsrc/init.cpp:1164: determinstic ==> deterministic\n```\n",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r682796896,682796896,src/init.cpp
amitiuttarwar,2021-08-04 22:39:58,"nit: the variable name `addrs` makes me think its a vector since that's a common naming pattern in the codebase, so I'd prefer if this was something like `num_addrs`. ",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r683005930,683005930,src/test/addrman_tests.cpp
amitiuttarwar,2021-08-04 23:12:39,"Could it make sense to enable the consistency checks here? \n\nI saw the conversation here https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-755188580, where you said: \n> I think somewhere that they're definitely useful would be in fuzz testing, to ensure that there's no way to violate addrman's invariants.\n\nSo wondering why you landed on disabling.",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r683018519,683018519,src/test/fuzz/addrman.cpp
jnewbery,2021-08-05 15:16:32,done,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r683551331,683551331,src/addrman.h
jnewbery,2021-08-05 15:17:14,It's the same default for both mainnet and regtest (disabled).,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r683551893,683551893,src/init.cpp
jnewbery,2021-08-05 15:18:39,I don't think so. They weren't deterministic before.,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r683553195,683553195,src/test/net_tests.cpp
jnewbery,2021-08-05 15:21:49,Fixed here. I don't think I've added any `i++` in addrman_tests.cpp.,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r683556161,683556161,src/bench/addrman.cpp
jnewbery,2021-08-05 15:22:24,"Perhaps, but that's a change in behaviour. Maybe we can do it in a follow up PR.",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r683556703,683556703,src/bench/addrman.cpp
jnewbery,2021-08-05 15:23:21,done,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r683557598,683557598,src/bench/addrman.cpp
jnewbery,2021-08-05 15:24:51,"Since we're already clamping the value, I don't think it matters.",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r683559040,683559040,src/addrman.h
jnewbery,2021-08-05 15:29:39,fixed,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r683563507,683563507,src/init.cpp
jnewbery,2021-08-05 15:29:59,Added here and to the other fuzzers.,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r683563784,683563784,src/test/fuzz/addrman.cpp
jnewbery,2021-08-05 16:07:57,done!,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r683594181,683594181,src/test/addrman_tests.cpp
jnewbery,2021-08-11 11:04:11,Done,https://github.com/bitcoin/bitcoin/pull/20233#discussion_r686725613,686725613,src/init.cpp
theStack,2021-08-13 08:04:56,"```suggestion\n    BOOST_CHECK_EQUAL(addrman.size(), 36);\n```",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r688324819,688324819,src/test/addrman_tests.cpp
theStack,2021-08-13 08:05:57,"```suggestion\n    BOOST_CHECK_EQUAL(addrman.size(), 59);\n```",https://github.com/bitcoin/bitcoin/pull/20233#discussion_r688325369,688325369,src/test/addrman_tests.cpp
