[
  {
    "sha": "ee458d84fc187d69f002ebead6fccc4f4f9c0744",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTQ1OGQ4NGZjMTg3ZDY5ZjAwMmViZWFkNmZjY2M0ZjRmOWMwNzQ0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-08-02T11:42:42Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-05T14:24:12Z"
      },
      "message": "Add missing const to CAddrMan::Check_()\n\nAlso: Always compile the function signature to avoid similar issues in\nthe future.",
      "tree": {
        "sha": "8929ebc0f1544e8e2845c89298ab20d8194ec540",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8929ebc0f1544e8e2845c89298ab20d8194ec540"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee458d84fc187d69f002ebead6fccc4f4f9c0744",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee458d84fc187d69f002ebead6fccc4f4f9c0744",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee458d84fc187d69f002ebead6fccc4f4f9c0744",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee458d84fc187d69f002ebead6fccc4f4f9c0744/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d67330d11245b11fbdd5e2dd5343ee451186931e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67330d11245b11fbdd5e2dd5343ee451186931e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d67330d11245b11fbdd5e2dd5343ee451186931e"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 14,
      "deletions": 11
    },
    "files": [
      {
        "sha": "c5c6dfbb861e794825bd820fe8f6670e24bbd907",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee458d84fc187d69f002ebead6fccc4f4f9c0744/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee458d84fc187d69f002ebead6fccc4f4f9c0744/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=ee458d84fc187d69f002ebead6fccc4f4f9c0744",
        "patch": "@@ -431,9 +431,9 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n     }\n }\n \n-#ifdef DEBUG_ADDRMAN\n-int CAddrMan::Check_()\n+int CAddrMan::Check_() const\n {\n+#ifdef DEBUG_ADDRMAN\n     AssertLockHeld(cs);\n \n     std::unordered_set<int> setTried;\n@@ -458,8 +458,10 @@ int CAddrMan::Check_()\n                 return -4;\n             mapNew[n] = info.nRefCount;\n         }\n-        if (mapAddr[info] != n)\n+        const auto it{mapAddr.find(info)};\n+        if (it == mapAddr.end() || it->second != n) {\n             return -5;\n+        }\n         if (info.nRandomPos < 0 || (size_t)info.nRandomPos >= vRandom.size() || vRandom[info.nRandomPos] != n)\n             return -14;\n         if (info.nLastTry < 0)\n@@ -478,10 +480,13 @@ int CAddrMan::Check_()\n             if (vvTried[n][i] != -1) {\n                 if (!setTried.count(vvTried[n][i]))\n                     return -11;\n-                if (mapInfo[vvTried[n][i]].GetTriedBucket(nKey, m_asmap) != n)\n+                const auto it{mapInfo.find(vvTried[n][i])};\n+                if (it == mapInfo.end() || it->second.GetTriedBucket(nKey, m_asmap) != n) {\n                     return -17;\n-                if (mapInfo[vvTried[n][i]].GetBucketPosition(nKey, false, n) != i)\n+                }\n+                if (it->second.GetBucketPosition(nKey, false, n) != i) {\n                     return -18;\n+                }\n                 setTried.erase(vvTried[n][i]);\n             }\n         }\n@@ -492,8 +497,10 @@ int CAddrMan::Check_()\n             if (vvNew[n][i] != -1) {\n                 if (!mapNew.count(vvNew[n][i]))\n                     return -12;\n-                if (mapInfo[vvNew[n][i]].GetBucketPosition(nKey, true, n) != i)\n+                const auto it{mapInfo.find(vvNew[n][i])};\n+                if (it == mapInfo.end() || it->second.GetBucketPosition(nKey, true, n) != i) {\n                     return -19;\n+                }\n                 if (--mapNew[vvNew[n][i]] == 0)\n                     mapNew.erase(vvNew[n][i]);\n             }\n@@ -507,9 +514,9 @@ int CAddrMan::Check_()\n     if (nKey.IsNull())\n         return -16;\n \n+#endif // DEBUG_ADDRMAN\n     return 0;\n }\n-#endif\n \n void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr, size_t max_addresses, size_t max_pct, std::optional<Network> network) const\n {"
      },
      {
        "sha": "16be374f7b7ce3b4a706c0191b77ef5a184247f1",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee458d84fc187d69f002ebead6fccc4f4f9c0744/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee458d84fc187d69f002ebead6fccc4f4f9c0744/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=ee458d84fc187d69f002ebead6fccc4f4f9c0744",
        "patch": "@@ -738,19 +738,15 @@ class CAddrMan\n     void Check() const\n         EXCLUSIVE_LOCKS_REQUIRED(cs)\n     {\n-#ifdef DEBUG_ADDRMAN\n         AssertLockHeld(cs);\n         const int err = Check_();\n         if (err) {\n             LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n         }\n-#endif\n     }\n \n-#ifdef DEBUG_ADDRMAN\n     //! Perform consistency check. Returns an error code or zero.\n     int Check_() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n-#endif\n \n     /**\n      * Return all or many randomly selected addresses, optionally by network."
      }
    ]
  },
  {
    "sha": "fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTk3MTBmNjJjMjljN2Y4ZDcxYzlmMjgxMDAxYzliNWU3MDk0NmJm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-07-23T09:48:34Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-05T16:10:30Z"
      },
      "message": "[addrman] Add deterministic argument to CAddrMan ctor\n\nRemoves the need for tests to update nKey and insecure_rand after constructing\na CAddrMan.",
      "tree": {
        "sha": "25117f2104f8d4a848e3760f3d02f76cef828faa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25117f2104f8d4a848e3760f3d02f76cef828faa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee458d84fc187d69f002ebead6fccc4f4f9c0744",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee458d84fc187d69f002ebead6fccc4f4f9c0744",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee458d84fc187d69f002ebead6fccc4f4f9c0744"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 31,
      "deletions": 43
    },
    "files": [
      {
        "sha": "2503f53a350c391bc74add7442dcdc3093173417",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
        "patch": "@@ -493,9 +493,11 @@ class CAddrMan\n         mapAddr.clear();\n     }\n \n-    CAddrMan()\n+    explicit CAddrMan(bool deterministic)\n+        : insecure_rand{deterministic}\n     {\n         Clear();\n+        if (deterministic) nKey.SetNull();\n     }\n \n     ~CAddrMan()\n@@ -637,13 +639,13 @@ class CAddrMan\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n \n-    //! Source of random numbers for randomization in inner loops\n-    mutable FastRandomContext insecure_rand GUARDED_BY(cs);\n-\n     //! A mutex to protect the inner data structures.\n     mutable Mutex cs;\n \n private:\n+    //! Source of random numbers for randomization in inner loops\n+    mutable FastRandomContext insecure_rand GUARDED_BY(cs);\n+\n     //! Serialization versions.\n     enum Format : uint8_t {\n         V0_HISTORICAL = 0,    //!< historic format, before commit e6b343d88"
      },
      {
        "sha": "e1175e44ecd7feee31f028ab1211006af6b69284",
        "filename": "src/bench/addrman.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/bench/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/bench/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/addrman.cpp?ref=fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
        "patch": "@@ -72,7 +72,7 @@ static void AddrManAdd(benchmark::Bench& bench)\n {\n     CreateAddresses();\n \n-    CAddrMan addrman;\n+    CAddrMan addrman(/* deterministic */ false);\n \n     bench.run([&] {\n         AddAddressesToAddrMan(addrman);\n@@ -82,7 +82,7 @@ static void AddrManAdd(benchmark::Bench& bench)\n \n static void AddrManSelect(benchmark::Bench& bench)\n {\n-    CAddrMan addrman;\n+    CAddrMan addrman(/* deterministic */ false);\n \n     FillAddrMan(addrman);\n \n@@ -94,7 +94,7 @@ static void AddrManSelect(benchmark::Bench& bench)\n \n static void AddrManGetAddr(benchmark::Bench& bench)\n {\n-    CAddrMan addrman;\n+    CAddrMan addrman(/* deterministic */ false);\n \n     FillAddrMan(addrman);\n \n@@ -112,10 +112,12 @@ static void AddrManGood(benchmark::Bench& bench)\n      * we want to do the same amount of work in every loop iteration. */\n \n     bench.epochs(5).epochIterations(1);\n+    const size_t addrman_count{bench.epochs() * bench.epochIterations()};\n \n-    std::vector<CAddrMan> addrmans(bench.epochs() * bench.epochIterations());\n-    for (auto& addrman : addrmans) {\n-        FillAddrMan(addrman);\n+    std::vector<std::unique_ptr<CAddrMan>> addrmans(addrman_count);\n+    for (size_t i{0}; i < addrman_count; ++i) {\n+        addrmans[i] = std::make_unique<CAddrMan>(/* deterministic */ false);\n+        FillAddrMan(*addrmans[i]);\n     }\n \n     auto markSomeAsGood = [](CAddrMan& addrman) {\n@@ -130,7 +132,7 @@ static void AddrManGood(benchmark::Bench& bench)\n \n     uint64_t i = 0;\n     bench.run([&] {\n-        markSomeAsGood(addrmans.at(i));\n+        markSomeAsGood(*addrmans.at(i));\n         ++i;\n     });\n }"
      },
      {
        "sha": "2250834111155ff57801193b053fa3fc6fb4d477",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
        "patch": "@@ -1164,7 +1164,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     const bool ignores_incoming_txs{args.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)};\n \n     assert(!node.addrman);\n-    node.addrman = std::make_unique<CAddrMan>();\n+    node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false);\n     assert(!node.banman);\n     node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);"
      },
      {
        "sha": "0ab6cd0a2bee64594c6a43141ef08734afc9bab3",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 13,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
        "patch": "@@ -21,24 +21,13 @@ class CAddrManTest : public CAddrMan\n     bool deterministic;\n public:\n     explicit CAddrManTest(bool makeDeterministic = true,\n-        std::vector<bool> asmap = std::vector<bool>())\n+                          std::vector<bool> asmap = std::vector<bool>())\n+        : CAddrMan(makeDeterministic)\n     {\n-        if (makeDeterministic) {\n-            //  Set addrman addr placement to be deterministic.\n-            MakeDeterministic();\n-        }\n         deterministic = makeDeterministic;\n         m_asmap = asmap;\n     }\n \n-    //! Ensure that bucket placement is always the same for testing purposes.\n-    void MakeDeterministic()\n-    {\n-        LOCK(cs);\n-        nKey.SetNull();\n-        insecure_rand = FastRandomContext(true);\n-    }\n-\n     CAddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr)\n     {\n         LOCK(cs);"
      },
      {
        "sha": "b5e946c528af22300ab9ae18a5495c9fa2282c2c",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
        "patch": "@@ -29,7 +29,8 @@ class CAddrManDeterministic : public CAddrMan\n     FuzzedDataProvider& m_fuzzed_data_provider;\n \n     explicit CAddrManDeterministic(FuzzedDataProvider& fuzzed_data_provider)\n-        : m_fuzzed_data_provider(fuzzed_data_provider)\n+        : CAddrMan(/* deterministic */ true)\n+        , m_fuzzed_data_provider(fuzzed_data_provider)\n     {\n         WITH_LOCK(cs, insecure_rand = FastRandomContext{ConsumeUInt256(fuzzed_data_provider)});\n         if (fuzzed_data_provider.ConsumeBool()) {"
      },
      {
        "sha": "a32cb544657982ad764758eee38126f7d701a9ae",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
        "patch": "@@ -25,7 +25,7 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    CAddrMan addrman;\n+    CAddrMan addrman(/* deterministic */ false);\n     CConnman connman{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), addrman, fuzzed_data_provider.ConsumeBool()};\n     CNetAddr random_netaddr;\n     CNode random_node = ConsumeNode(fuzzed_data_provider);"
      },
      {
        "sha": "63bc4b2afe425db3fd6ac899370565ac5b79a001",
        "filename": "src/test/fuzz/data_stream.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/test/fuzz/data_stream.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/test/fuzz/data_stream.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/data_stream.cpp?ref=fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
        "patch": "@@ -21,6 +21,6 @@ FUZZ_TARGET_INIT(data_stream_addr_man, initialize_data_stream_addr_man)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     CDataStream data_stream = ConsumeDataStream(fuzzed_data_provider);\n-    CAddrMan addr_man;\n+    CAddrMan addr_man(/* deterministic */ false);\n     CAddrDB::Read(addr_man, data_stream);\n }"
      },
      {
        "sha": "6ab338912319bb33ae4b113959685cca981fea3a",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
        "patch": "@@ -188,7 +188,7 @@ FUZZ_TARGET_DESERIALIZE(blockmerkleroot, {\n     BlockMerkleRoot(block, &mutated);\n })\n FUZZ_TARGET_DESERIALIZE(addrman_deserialize, {\n-    CAddrMan am;\n+    CAddrMan am(/* deterministic */ false);\n     DeserializeFromFuzzingInput(buffer, am);\n })\n FUZZ_TARGET_DESERIALIZE(blockheader_deserialize, {"
      },
      {
        "sha": "ff9e9b7a0770d75ce97fee0867033ce525386cd5",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 13,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
        "patch": "@@ -34,13 +34,9 @@ class CAddrManSerializationMock : public CAddrMan\n public:\n     virtual void Serialize(CDataStream& s) const = 0;\n \n-    //! Ensure that bucket placement is always the same for testing purposes.\n-    void MakeDeterministic()\n-    {\n-        LOCK(cs);\n-        nKey.SetNull();\n-        insecure_rand = FastRandomContext(true);\n-    }\n+    CAddrManSerializationMock()\n+        : CAddrMan(/* deterministic */ true)\n+    {}\n };\n \n class CAddrManUncorrupted : public CAddrManSerializationMock\n@@ -105,7 +101,6 @@ BOOST_AUTO_TEST_CASE(cnode_listen_port)\n BOOST_AUTO_TEST_CASE(caddrdb_read)\n {\n     CAddrManUncorrupted addrmanUncorrupted;\n-    addrmanUncorrupted.MakeDeterministic();\n \n     CService addr1, addr2, addr3;\n     BOOST_CHECK(Lookup(\"250.7.1.1\", addr1, 8333, false));\n@@ -124,7 +119,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     // Test that the de-serialization does not throw an exception.\n     CDataStream ssPeers1 = AddrmanToStream(addrmanUncorrupted);\n     bool exceptionThrown = false;\n-    CAddrMan addrman1;\n+    CAddrMan addrman1(/* deterministic */ false);\n \n     BOOST_CHECK(addrman1.size() == 0);\n     try {\n@@ -141,7 +136,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     // Test that CAddrDB::Read creates an addrman with the correct number of addrs.\n     CDataStream ssPeers2 = AddrmanToStream(addrmanUncorrupted);\n \n-    CAddrMan addrman2;\n+    CAddrMan addrman2(/* deterministic */ false);\n     BOOST_CHECK(addrman2.size() == 0);\n     BOOST_CHECK(CAddrDB::Read(addrman2, ssPeers2));\n     BOOST_CHECK(addrman2.size() == 3);\n@@ -151,12 +146,11 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n {\n     CAddrManCorrupted addrmanCorrupted;\n-    addrmanCorrupted.MakeDeterministic();\n \n     // Test that the de-serialization of corrupted addrman throws an exception.\n     CDataStream ssPeers1 = AddrmanToStream(addrmanCorrupted);\n     bool exceptionThrown = false;\n-    CAddrMan addrman1;\n+    CAddrMan addrman1(/* deterministic */ false);\n     BOOST_CHECK(addrman1.size() == 0);\n     try {\n         unsigned char pchMsgTmp[4];\n@@ -172,7 +166,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n     // Test that CAddrDB::Read leaves addrman in a clean state if de-serialization fails.\n     CDataStream ssPeers2 = AddrmanToStream(addrmanCorrupted);\n \n-    CAddrMan addrman2;\n+    CAddrMan addrman2(/* deterministic */ false);\n     BOOST_CHECK(addrman2.size() == 0);\n     BOOST_CHECK(!CAddrDB::Read(addrman2, ssPeers2));\n     BOOST_CHECK(addrman2.size() == 0);"
      },
      {
        "sha": "b1567d924bb4d9f1a4feb0e009c56a262a13345b",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9710f62c29c7f8d71c9f281001c9b5e70946bf/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
        "patch": "@@ -193,7 +193,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n \n-    m_node.addrman = std::make_unique<CAddrMan>();\n+    m_node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false);\n     m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,"
      }
    ]
  },
  {
    "sha": "10aac241455a3270462d49b53732477ed97623e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGFhYzI0MTQ1NWEzMjcwNDYyZDQ5YjUzNzMyNDc3ZWQ5NzYyM2U3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-07-19T09:45:32Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-05T16:10:32Z"
      },
      "message": "[tests] Make deterministic addrman use nKey = 1\n\naddrman_tests fail when consistency checks are enabled, since the tests\nset the deterministic test addrman's nKey value to zero, which is an\ninvalid value. Change this so that deterministic addrman's nKey value is\nset to 1.\n\nThis requires updating a few tests that are using magic values derived\nfrom nKey being set to 0.",
      "tree": {
        "sha": "eb41cb0493ae0fd01777c2cf424b326a8a691d6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb41cb0493ae0fd01777c2cf424b326a8a691d6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10aac241455a3270462d49b53732477ed97623e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10aac241455a3270462d49b53732477ed97623e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10aac241455a3270462d49b53732477ed97623e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10aac241455a3270462d49b53732477ed97623e7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9710f62c29c7f8d71c9f281001c9b5e70946bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9710f62c29c7f8d71c9f281001c9b5e70946bf"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 52,
      "deletions": 46
    },
    "files": [
      {
        "sha": "2c6ffbe5237bb9b5b2892f4a6a57fc8827a2b130",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10aac241455a3270462d49b53732477ed97623e7/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10aac241455a3270462d49b53732477ed97623e7/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=10aac241455a3270462d49b53732477ed97623e7",
        "patch": "@@ -497,7 +497,7 @@ class CAddrMan\n         : insecure_rand{deterministic}\n     {\n         Clear();\n-        if (deterministic) nKey.SetNull();\n+        if (deterministic) nKey = uint256{1};\n     }\n \n     ~CAddrMan()"
      },
      {
        "sha": "b7da1c88962be27db2bd452853c7305629c39dbf",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 45,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10aac241455a3270462d49b53732477ed97623e7/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10aac241455a3270462d49b53732477ed97623e7/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=10aac241455a3270462d49b53732477ed97623e7",
        "patch": "@@ -78,7 +78,7 @@ class CAddrManTest : public CAddrMan\n         CAddrMan::Clear();\n         if (deterministic) {\n             LOCK(cs);\n-            nKey.SetNull();\n+            nKey = uint256{1};\n             insecure_rand = FastRandomContext(true);\n         }\n     }\n@@ -256,24 +256,27 @@ BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    uint32_t num_addrs{0};\n+\n+    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n \n-    for (unsigned int i = 1; i < 18; i++) {\n-        CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n+    while (num_addrs < 22) {  // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n+        CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n         BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n \n         //Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), i);\n+        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n     }\n \n     //Test: new table collision!\n-    CService addr1 = ResolveService(\"250.1.1.18\");\n+    CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n+    uint32_t collisions{1};\n     BOOST_CHECK(addrman.Add(CAddress(addr1, NODE_NONE), source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 17U);\n+    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n \n-    CService addr2 = ResolveService(\"250.1.1.19\");\n+    CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     BOOST_CHECK(addrman.Add(CAddress(addr2, NODE_NONE), source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 18U);\n+    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n@@ -282,25 +285,28 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    uint32_t num_addrs{0};\n+\n+    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n \n-    for (unsigned int i = 1; i < 80; i++) {\n-        CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n+    while (num_addrs < 64) {  // Magic number! 250.1.1.1 - 250.1.1.64 do not collide with deterministic key = 1\n+        CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n         BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n         addrman.Good(CAddress(addr, NODE_NONE));\n \n         //Test: No collision in tried table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), i);\n+        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n     }\n \n     //Test: tried table collision!\n-    CService addr1 = ResolveService(\"250.1.1.80\");\n+    CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n+    uint32_t collisions{1};\n     BOOST_CHECK(addrman.Add(CAddress(addr1, NODE_NONE), source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 79U);\n+    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n \n-    CService addr2 = ResolveService(\"250.1.1.81\");\n+    CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     BOOST_CHECK(addrman.Add(CAddress(addr2, NODE_NONE), source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 80U);\n+    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_find)\n@@ -850,9 +856,9 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n {\n     CAddrManTest addrman;\n \n-    // Add twenty two addresses.\n+    // Add 35 addresses.\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n-    for (unsigned int i = 1; i < 23; i++) {\n+    for (unsigned int i = 1; i < 36; i++) {\n         CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n         BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n         addrman.Good(addr);\n@@ -862,20 +868,20 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n         BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n     }\n \n-    // Collision between 23 and 19.\n-    CService addr23 = ResolveService(\"250.1.1.23\");\n-    BOOST_CHECK(addrman.Add(CAddress(addr23, NODE_NONE), source));\n-    addrman.Good(addr23);\n+    // Collision between 36 and 19.\n+    CService addr36 = ResolveService(\"250.1.1.36\");\n+    BOOST_CHECK(addrman.Add(CAddress(addr36, NODE_NONE), source));\n+    addrman.Good(addr36);\n \n-    BOOST_CHECK(addrman.size() == 23);\n-    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"250.1.1.19:0\");\n+    BOOST_CHECK(addrman.size() == 36);\n+    BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().ToString(), \"250.1.1.19:0\");\n \n-    // 23 should be discarded and 19 not evicted.\n+    // 36 should be discarded and 19 not evicted.\n     addrman.ResolveCollisions();\n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n \n     // Lets create two collisions.\n-    for (unsigned int i = 24; i < 33; i++) {\n+    for (unsigned int i = 37; i < 59; i++) {\n         CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n         BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n         addrman.Good(addr);\n@@ -885,17 +891,17 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n     }\n \n     // Cause a collision.\n-    CService addr33 = ResolveService(\"250.1.1.33\");\n-    BOOST_CHECK(addrman.Add(CAddress(addr33, NODE_NONE), source));\n-    addrman.Good(addr33);\n-    BOOST_CHECK(addrman.size() == 33);\n+    CService addr59 = ResolveService(\"250.1.1.59\");\n+    BOOST_CHECK(addrman.Add(CAddress(addr59, NODE_NONE), source));\n+    addrman.Good(addr59);\n+    BOOST_CHECK(addrman.size() == 59);\n \n-    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"250.1.1.27:0\");\n+    BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().ToString(), \"250.1.1.10:0\");\n \n     // Cause a second collision.\n-    BOOST_CHECK(!addrman.Add(CAddress(addr23, NODE_NONE), source));\n-    addrman.Good(addr23);\n-    BOOST_CHECK(addrman.size() == 33);\n+    BOOST_CHECK(!addrman.Add(CAddress(addr36, NODE_NONE), source));\n+    addrman.Good(addr36);\n+    BOOST_CHECK(addrman.size() == 59);\n \n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() != \"[::]:0\");\n     addrman.ResolveCollisions();\n@@ -911,9 +917,9 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     // Empty addrman should return blank addrman info.\n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n \n-    // Add twenty two addresses.\n+    // Add 35 addresses\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n-    for (unsigned int i = 1; i < 23; i++) {\n+    for (unsigned int i = 1; i < 36; i++) {\n         CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n         BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n         addrman.Good(addr);\n@@ -923,34 +929,34 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n         BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n     }\n \n-    // Collision between 23 and 19.\n-    CService addr = ResolveService(\"250.1.1.23\");\n+    // Collision between 36 and 19.\n+    CService addr = ResolveService(\"250.1.1.36\");\n     BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n     addrman.Good(addr);\n \n-    BOOST_CHECK(addrman.size() == 23);\n+    BOOST_CHECK_EQUAL(addrman.size(), 36);\n     CAddrInfo info = addrman.SelectTriedCollision();\n-    BOOST_CHECK(info.ToString() == \"250.1.1.19:0\");\n+    BOOST_CHECK_EQUAL(info.ToString(), \"250.1.1.19:0\");\n \n     // Ensure test of address fails, so that it is evicted.\n     addrman.SimConnFail(info);\n \n-    // Should swap 23 for 19.\n+    // Should swap 36 for 19.\n     addrman.ResolveCollisions();\n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n \n-    // If 23 was swapped for 19, then this should cause no collisions.\n+    // If 36 was swapped for 19, then this should cause no collisions.\n     BOOST_CHECK(!addrman.Add(CAddress(addr, NODE_NONE), source));\n     addrman.Good(addr);\n \n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n \n-    // If we insert 19 is should collide with 23.\n+    // If we insert 19 it should collide with 36\n     CService addr19 = ResolveService(\"250.1.1.19\");\n     BOOST_CHECK(!addrman.Add(CAddress(addr19, NODE_NONE), source));\n     addrman.Good(addr19);\n \n-    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"250.1.1.23:0\");\n+    BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().ToString(), \"250.1.1.36:0\");\n \n     addrman.ResolveCollisions();\n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");"
      }
    ]
  },
  {
    "sha": "a4d78546b0858602c60c03fdf8b35ca666ab2e56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGQ3ODU0NmIwODU4NjAyYzYwYzAzZmRmOGIzNWNhNjY2YWIyZTU2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-10-23T21:03:24Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-12T09:41:11Z"
      },
      "message": "[addrman] Make addrman consistency checks a runtime option\n\nCurrently addrman consistency checks are a compile time option, and are not\nenabled in our CI. It's unlikely anyone is running these consistency checks.\n\nMake them a runtime option instead, where users can enable addrman\nconsistency checks every n operations (similar to mempool tests). Update\nthe addrman unit tests to do internal consistency checks every 100\noperations (checking on every operations causes the test runtime to\nincrease by several seconds).\n\nAlso assert on a failed addrman consistency check to terminate program\nexecution.",
      "tree": {
        "sha": "c029c3a4ea6b74ff7d9977138d18661ab4181d69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c029c3a4ea6b74ff7d9977138d18661ab4181d69"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4d78546b0858602c60c03fdf8b35ca666ab2e56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4d78546b0858602c60c03fdf8b35ca666ab2e56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4d78546b0858602c60c03fdf8b35ca666ab2e56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4d78546b0858602c60c03fdf8b35ca666ab2e56/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10aac241455a3270462d49b53732477ed97623e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10aac241455a3270462d49b53732477ed97623e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10aac241455a3270462d49b53732477ed97623e7"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 37,
      "deletions": 25
    },
    "files": [
      {
        "sha": "8e2fc67569bcb8396eb3a2de0beb7ee5f413d510",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=a4d78546b0858602c60c03fdf8b35ca666ab2e56",
        "patch": "@@ -433,9 +433,12 @@ CAddrInfo CAddrMan::Select_(bool newOnly) const\n \n int CAddrMan::Check_() const\n {\n-#ifdef DEBUG_ADDRMAN\n     AssertLockHeld(cs);\n \n+    // Run consistency checks 1 in m_consistency_check_ratio times if enabled\n+    if (m_consistency_check_ratio == 0) return 0;\n+    if (insecure_rand.randrange(m_consistency_check_ratio) >= 1) return 0;\n+\n     std::unordered_set<int> setTried;\n     std::unordered_map<int, int> mapNew;\n \n@@ -514,7 +517,6 @@ int CAddrMan::Check_() const\n     if (nKey.IsNull())\n         return -16;\n \n-#endif // DEBUG_ADDRMAN\n     return 0;\n }\n "
      },
      {
        "sha": "3ee8c3ee09af94e900a9e804bb1b7840d0840ea5",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 14,
        "deletions": 6,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=a4d78546b0858602c60c03fdf8b35ca666ab2e56",
        "patch": "@@ -26,6 +26,9 @@\n #include <unordered_map>\n #include <vector>\n \n+/** Default for -checkaddrman */\n+static constexpr int32_t DEFAULT_ADDRMAN_CONSISTENCY_CHECKS{0};\n+\n /**\n  * Extended statistics about a CAddress\n  */\n@@ -124,8 +127,8 @@ class CAddrInfo : public CAddress\n  *        attempt was unsuccessful.\n  *    * Bucket selection is based on cryptographic hashing, using a randomly-generated 256-bit key, which should not\n  *      be observable by adversaries.\n- *    * Several indexes are kept for high performance. Defining DEBUG_ADDRMAN will introduce frequent (and expensive)\n- *      consistency checks for the entire data structure.\n+ *    * Several indexes are kept for high performance. Setting m_consistency_check_ratio with the -checkaddrman\n+ *      configuration option will introduce (expensive) consistency checks for the entire data structure.\n  */\n \n //! total number of buckets for tried addresses\n@@ -493,8 +496,9 @@ class CAddrMan\n         mapAddr.clear();\n     }\n \n-    explicit CAddrMan(bool deterministic)\n-        : insecure_rand{deterministic}\n+    explicit CAddrMan(bool deterministic, int32_t consistency_check_ratio)\n+        : insecure_rand{deterministic},\n+          m_consistency_check_ratio{consistency_check_ratio}\n     {\n         Clear();\n         if (deterministic) nKey = uint256{1};\n@@ -700,6 +704,9 @@ class CAddrMan\n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n \n+    /** Perform consistency checks every m_consistency_check_ratio operations (if non-zero). */\n+    const int32_t m_consistency_check_ratio;\n+\n     //! Find an entry.\n     CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n@@ -737,13 +744,14 @@ class CAddrMan\n     CAddrInfo SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Consistency check\n-    void Check() const\n-        EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    void Check() const EXCLUSIVE_LOCKS_REQUIRED(cs)\n     {\n         AssertLockHeld(cs);\n+\n         const int err = Check_();\n         if (err) {\n             LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n+            assert(false);\n         }\n     }\n "
      },
      {
        "sha": "5ae2dafd5a37b2b32aca0a4e278d8988ff46a61f",
        "filename": "src/bench/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/bench/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/bench/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/addrman.cpp?ref=a4d78546b0858602c60c03fdf8b35ca666ab2e56",
        "patch": "@@ -72,7 +72,7 @@ static void AddrManAdd(benchmark::Bench& bench)\n {\n     CreateAddresses();\n \n-    CAddrMan addrman(/* deterministic */ false);\n+    CAddrMan addrman(/* deterministic */ false, /* consistency_check_ratio */ 0);\n \n     bench.run([&] {\n         AddAddressesToAddrMan(addrman);\n@@ -82,7 +82,7 @@ static void AddrManAdd(benchmark::Bench& bench)\n \n static void AddrManSelect(benchmark::Bench& bench)\n {\n-    CAddrMan addrman(/* deterministic */ false);\n+    CAddrMan addrman(/* deterministic */ false, /* consistency_check_ratio */ 0);\n \n     FillAddrMan(addrman);\n \n@@ -94,7 +94,7 @@ static void AddrManSelect(benchmark::Bench& bench)\n \n static void AddrManGetAddr(benchmark::Bench& bench)\n {\n-    CAddrMan addrman(/* deterministic */ false);\n+    CAddrMan addrman(/* deterministic */ false, /* consistency_check_ratio */ 0);\n \n     FillAddrMan(addrman);\n \n@@ -116,7 +116,7 @@ static void AddrManGood(benchmark::Bench& bench)\n \n     std::vector<std::unique_ptr<CAddrMan>> addrmans(addrman_count);\n     for (size_t i{0}; i < addrman_count; ++i) {\n-        addrmans[i] = std::make_unique<CAddrMan>(/* deterministic */ false);\n+        addrmans[i] = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ 0);\n         FillAddrMan(*addrmans[i]);\n     }\n "
      },
      {
        "sha": "9154fc0a6f625857d63aa4de69fb276e6229c29f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a4d78546b0858602c60c03fdf8b35ca666ab2e56",
        "patch": "@@ -501,7 +501,8 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-checklevel=<n>\", strprintf(\"How thorough the block verification of -checkblocks is: %s (0-4, default: %u)\", Join(CHECKLEVEL_DOC, \", \"), DEFAULT_CHECKLEVEL), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-checkblockindex\", strprintf(\"Do a consistency check for the block tree, chainstate, and other validation data structures occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-checkaddrman=<n>\", strprintf(\"Run addrman consistency checks every <n> operations. Use 0 to disable. (default: %u)\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-checkmempool=<n>\", strprintf(\"Run mempool consistency checks every <n> transactions. Use 0 to disable. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-checkpoints\", strprintf(\"Enable rejection of any forks from the known historical chain until block %s (default: %u)\", defaultChainParams->Checkpoints().GetHeight(), DEFAULT_CHECKPOINTS_ENABLED), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n@@ -1164,7 +1165,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     const bool ignores_incoming_txs{args.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)};\n \n     assert(!node.addrman);\n-    node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false);\n+    auto check_addrman = std::clamp<int32_t>(args.GetArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n+    node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n     assert(!node.banman);\n     node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);"
      },
      {
        "sha": "3c644616059ed1b576220ca185bd9dd4c18bbd8f",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=a4d78546b0858602c60c03fdf8b35ca666ab2e56",
        "patch": "@@ -22,7 +22,7 @@ class CAddrManTest : public CAddrMan\n public:\n     explicit CAddrManTest(bool makeDeterministic = true,\n                           std::vector<bool> asmap = std::vector<bool>())\n-        : CAddrMan(makeDeterministic)\n+        : CAddrMan(makeDeterministic, /* consistency_check_ratio */ 100)\n     {\n         deterministic = makeDeterministic;\n         m_asmap = asmap;"
      },
      {
        "sha": "60fba5730a4c7994d13f0e03cb36249db69d71fc",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=a4d78546b0858602c60c03fdf8b35ca666ab2e56",
        "patch": "@@ -29,7 +29,7 @@ class CAddrManDeterministic : public CAddrMan\n     FuzzedDataProvider& m_fuzzed_data_provider;\n \n     explicit CAddrManDeterministic(FuzzedDataProvider& fuzzed_data_provider)\n-        : CAddrMan(/* deterministic */ true)\n+        : CAddrMan(/* deterministic */ true, /* consistency_check_ratio */ 0)\n         , m_fuzzed_data_provider(fuzzed_data_provider)\n     {\n         WITH_LOCK(cs, insecure_rand = FastRandomContext{ConsumeUInt256(fuzzed_data_provider)});"
      },
      {
        "sha": "0e323ddc203d36ae077cbc3776dbd6b9e94c435b",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=a4d78546b0858602c60c03fdf8b35ca666ab2e56",
        "patch": "@@ -25,7 +25,7 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    CAddrMan addrman(/* deterministic */ false);\n+    CAddrMan addrman(/* deterministic */ false, /* consistency_check_ratio */ 0);\n     CConnman connman{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), addrman, fuzzed_data_provider.ConsumeBool()};\n     CNetAddr random_netaddr;\n     CNode random_node = ConsumeNode(fuzzed_data_provider);"
      },
      {
        "sha": "53400082abe7ac73f150a86658d71292ae810bb4",
        "filename": "src/test/fuzz/data_stream.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/test/fuzz/data_stream.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/test/fuzz/data_stream.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/data_stream.cpp?ref=a4d78546b0858602c60c03fdf8b35ca666ab2e56",
        "patch": "@@ -21,6 +21,6 @@ FUZZ_TARGET_INIT(data_stream_addr_man, initialize_data_stream_addr_man)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     CDataStream data_stream = ConsumeDataStream(fuzzed_data_provider);\n-    CAddrMan addr_man(/* deterministic */ false);\n+    CAddrMan addr_man(/* deterministic */ false, /* consistency_check_ratio */ 0);\n     CAddrDB::Read(addr_man, data_stream);\n }"
      },
      {
        "sha": "49503e8dc6f0d7c8ca436d9a91c25e9663e970ab",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=a4d78546b0858602c60c03fdf8b35ca666ab2e56",
        "patch": "@@ -188,7 +188,7 @@ FUZZ_TARGET_DESERIALIZE(blockmerkleroot, {\n     BlockMerkleRoot(block, &mutated);\n })\n FUZZ_TARGET_DESERIALIZE(addrman_deserialize, {\n-    CAddrMan am(/* deterministic */ false);\n+    CAddrMan am(/* deterministic */ false, /* consistency_check_ratio */ 0);\n     DeserializeFromFuzzingInput(buffer, am);\n })\n FUZZ_TARGET_DESERIALIZE(blockheader_deserialize, {"
      },
      {
        "sha": "1915f9c7d52018fa4e331bb9f8880b07b161e711",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=a4d78546b0858602c60c03fdf8b35ca666ab2e56",
        "patch": "@@ -35,7 +35,7 @@ class CAddrManSerializationMock : public CAddrMan\n     virtual void Serialize(CDataStream& s) const = 0;\n \n     CAddrManSerializationMock()\n-        : CAddrMan(/* deterministic */ true)\n+        : CAddrMan(/* deterministic */ true, /* consistency_check_ratio */ 100)\n     {}\n };\n \n@@ -119,7 +119,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     // Test that the de-serialization does not throw an exception.\n     CDataStream ssPeers1 = AddrmanToStream(addrmanUncorrupted);\n     bool exceptionThrown = false;\n-    CAddrMan addrman1(/* deterministic */ false);\n+    CAddrMan addrman1(/* deterministic */ false, /* consistency_check_ratio */ 100);\n \n     BOOST_CHECK(addrman1.size() == 0);\n     try {\n@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     // Test that CAddrDB::Read creates an addrman with the correct number of addrs.\n     CDataStream ssPeers2 = AddrmanToStream(addrmanUncorrupted);\n \n-    CAddrMan addrman2(/* deterministic */ false);\n+    CAddrMan addrman2(/* deterministic */ false, /* consistency_check_ratio */ 100);\n     BOOST_CHECK(addrman2.size() == 0);\n     BOOST_CHECK(CAddrDB::Read(addrman2, ssPeers2));\n     BOOST_CHECK(addrman2.size() == 3);\n@@ -150,7 +150,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n     // Test that the de-serialization of corrupted addrman throws an exception.\n     CDataStream ssPeers1 = AddrmanToStream(addrmanCorrupted);\n     bool exceptionThrown = false;\n-    CAddrMan addrman1(/* deterministic */ false);\n+    CAddrMan addrman1(/* deterministic */ false, /* consistency_check_ratio */ 100);\n     BOOST_CHECK(addrman1.size() == 0);\n     try {\n         unsigned char pchMsgTmp[4];\n@@ -166,7 +166,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n     // Test that CAddrDB::Read leaves addrman in a clean state if de-serialization fails.\n     CDataStream ssPeers2 = AddrmanToStream(addrmanCorrupted);\n \n-    CAddrMan addrman2(/* deterministic */ false);\n+    CAddrMan addrman2(/* deterministic */ false, /* consistency_check_ratio */ 100);\n     BOOST_CHECK(addrman2.size() == 0);\n     BOOST_CHECK(!CAddrDB::Read(addrman2, ssPeers2));\n     BOOST_CHECK(addrman2.size() == 0);"
      },
      {
        "sha": "a58f4ba25ab278a79fe99ef2b0c3f36c3ff2b41d",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4d78546b0858602c60c03fdf8b35ca666ab2e56/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=a4d78546b0858602c60c03fdf8b35ca666ab2e56",
        "patch": "@@ -193,7 +193,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n \n-    m_node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false);\n+    m_node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ 0);\n     m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,"
      }
    ]
  }
]