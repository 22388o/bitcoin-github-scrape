[
  {
    "sha": "85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWNjNmJlZDY0ZGMxN2UzYjA5MWFmOWUxNGJjMmY0ZDRlOWJjYWYx",
    "commit": {
      "author": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-12-30T17:57:00Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-01-12T10:27:09Z"
      },
      "message": "lock annotations for MemPoolAccept functions\n\nWe should already have the mempool lock when entering\nCheckInputsFromMempoolAndCache",
      "tree": {
        "sha": "589166d216f79f465d7acd8104b912590b77c792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/589166d216f79f465d7acd8104b912590b77c792"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86a8b35f321d55bb2381ea56bcc1cdd17c7896e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86a8b35f321d55bb2381ea56bcc1cdd17c7896e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86a8b35f321d55bb2381ea56bcc1cdd17c7896e6"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 8,
      "deletions": 12
    },
    "files": [
      {
        "sha": "a27bbd78eee9ce79328dbc8b84092075a689cdc2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1",
        "patch": "@@ -407,21 +407,17 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {\n     AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n+    AssertLockHeld(pool.cs);\n \n     assert(!tx.IsCoinBase());\n     for (const CTxIn& txin : tx.vin) {\n         const Coin& coin = view.AccessCoin(txin.prevout);\n \n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n+        // This coin was checked in PreChecks and MemPoolAccept\n+        // has been holding cs_main since then.\n+        Assume(!coin.IsSpent());\n         if (coin.IsSpent()) return false;\n \n         // Check equivalence for available inputs.\n@@ -502,21 +498,21 @@ class MemPoolAccept\n \n     // Run the script checks using our policy flags. As this can be slow, we should\n     // only invoke this on transactions that have otherwise passed policy checks.\n-    bool PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Re-run the script checks, using consensus flags, and try to cache the\n     // result in the scriptcache. This should be done after\n     // PolicyScriptChecks(). This requires that all inputs either be in our\n     // utxo set or in the mempool.\n-    bool ConsensusScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData &txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool ConsensusScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData &txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Try to add the transaction to the mempool, removing any conflicts first.\n     // Returns true if the transaction is in the mempool after any size\n     // limiting is performed, false otherwise.\n     bool Finalize(ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Compare a package's feerate against minimum allowed.\n-    bool CheckFeeRate(size_t package_size, CAmount package_fee, TxValidationState& state)\n+    bool CheckFeeRate(size_t package_size, CAmount package_fee, TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs)\n     {\n         CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n         if (mempoolRejectFee > 0 && package_fee < mempoolRejectFee) {"
      }
    ]
  },
  {
    "sha": "2f463f57e3a9797236142a525703359a98fe19ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjQ2M2Y1N2UzYTk3OTcyMzYxNDJhNTI1NzAzMzU5YTk4ZmUxOWVh",
    "commit": {
      "author": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-01-06T21:38:32Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-01-12T10:27:09Z"
      },
      "message": "[doc] for CheckInputsFromMempoolAndCache",
      "tree": {
        "sha": "472a5ee745a73a408e2d644d5b8da0697301f7a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/472a5ee745a73a408e2d644d5b8da0697301f7a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f463f57e3a9797236142a525703359a98fe19ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f463f57e3a9797236142a525703359a98fe19ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f463f57e3a9797236142a525703359a98fe19ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f463f57e3a9797236142a525703359a98fe19ea/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 17,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a22c75a686e7624c8349c2302f88fea02214e4db",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f463f57e3a9797236142a525703359a98fe19ea/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f463f57e3a9797236142a525703359a98fe19ea/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2f463f57e3a9797236142a525703359a98fe19ea",
        "patch": "@@ -404,10 +404,16 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n-// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n-// were somehow broken and returning the wrong scriptPubKeys\n-static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {\n+/**\n+* Checks to avoid mempool polluting consensus critical paths since cached\n+* signature and script validity results will be reused if we validate this\n+* transaction again during block validation.\n+* */\n+static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state,\n+                const CCoinsViewCache& view, const CTxMemPool& pool,\n+                unsigned int flags, PrecomputedTransactionData& txdata)\n+                EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)\n+{\n     AssertLockHeld(cs_main);\n     AssertLockHeld(pool.cs);\n \n@@ -420,16 +426,19 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n         Assume(!coin.IsSpent());\n         if (coin.IsSpent()) return false;\n \n-        // Check equivalence for available inputs.\n+        // If the Coin is available, there are 2 possibilities:\n+        // it is available in our current ChainstateActive UTXO set,\n+        // or it's a UTXO provided by a transaction in our mempool.\n+        // Ensure the scriptPubKeys in Coins from CoinsView are correct.\n         const CTransactionRef& txFrom = pool.get(txin.prevout.hash);\n         if (txFrom) {\n             assert(txFrom->GetHash() == txin.prevout.hash);\n             assert(txFrom->vout.size() > txin.prevout.n);\n             assert(txFrom->vout[txin.prevout.n] == coin.out);\n         } else {\n-            const Coin& coinFromDisk = ::ChainstateActive().CoinsTip().AccessCoin(txin.prevout);\n-            assert(!coinFromDisk.IsSpent());\n-            assert(coinFromDisk.out == coin.out);\n+            const Coin& coinFromUTXOSet = ::ChainstateActive().CoinsTip().AccessCoin(txin.prevout);\n+            assert(!coinFromUTXOSet.IsSpent());\n+            assert(coinFromUTXOSet.out == coin.out);\n         }\n     }\n "
      }
    ]
  }
]