DrahtBot,2021-01-03 11:28:15,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20833 (rpc/validation: enable packages through testmempoolaccept by glozow)\n\nIf you consider this pull request importan",https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-753602797,753602797,
michaelfolkson,2021-01-03 13:51:32,"Concept ACK. Great PR description, really informative. \n\nIs there anything in particular you'd recommend a reviewer do to assure themselves that removing this code doesn't cause any problems beyond the usual building, running tests etc?",https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-753620266,753620266,
glozow,2021-01-03 18:48:57,"@michaelfolkson good question. You could go line-by-line in the function and verify that what I said in the description is true, i.e. that each one is done earlier in ATMP. And then you can also look at what `cs_main` and `pool.cs` guarantee wrt consistency so you can say ""yeah, this wouldn't change."" Might be fun to trace the coinsview through ATMP with some logs. If you prefer writing code, you ",https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-753660173,753660173,
jnewbery,2021-01-05 14:00:20,"This code was added in commit https://github.com/bitcoin/bitcoin/commit/b014668e27b496bd6ad30985294f3d6971311910, specifically in response to this review comment: https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-295316813.\n\nThe code was added here: https://github.com/bitcoin/bitcoin/pull/10192#event-1049081888 before the change to per-txout db and later rebased: https://github.com/bi",https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754652998,754652998,
sdaftuar,2021-01-05 15:31:41,"I'm pretty skeptical of this change.  I think the OP downplays the consensus risk if a bug is introduced in the CCoinsViewMempool or the mempool (which CCoinsViewMempool relies on).\n\nI also took a quick look at #20833, and it seems to make that code much higher risk if we would be turning CCoinsViewMempool into something consensus critical and then make a bunch of changes to it.  Is there a me",https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754708905,754708905,
glozow,2021-01-05 19:33:40,"@jnewbery @sdaftuar Thanks for your input and for digging into things! I agree that a bug here would be awful as we could potentially cache incorrect script checks, affecting consensus. I think these lines from CIFMAC are a nice sanity check:\n``` c\n        const CTransactionRef& txFrom = m_pool.get(txin.prevout.hash);\n        if (txFrom) {\n            assert(txFrom->GetHash() == txin.prevo",https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754851634,754851634,
jnewbery,2021-01-06 12:09:54,"I like the way this is going. CCoinsViewMempool should live in validation.cpp and be considered consensus critical since script caching was introduced. Making that clear by reflecting it in the code structure, rather than working around it by double checking the results returned from CCoinsViewCache seems like an improvement.\n\nAs far as I'm aware, CTxMemPool is not consensus critical, since an",https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-755263880,755263880,
sdaftuar,2021-01-06 14:59:04,"Concept NACK.  I think the current structure of using CIFMAC to encapsulate the consensus requirements of the script cache is better than spreading the checks out across validation, where it is less clear why these checks exist and what they protect against.  Moreover, I don't believe this change is necessary (or desired) for #20833, as I commented here: https://github.com/bitcoin/bitcoin/pull/208",https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-755348055,755348055,
glozow,2021-01-06 22:09:43,"@sdaftuar Thanks for your thorough review - I'm no longer removing CIFMAC. I think the lock annotations are still helpful, though, and in general would like to update the documentation to clarify what this function does.",https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-755743904,755743904,
MarcoFalke,2021-01-07 07:50:41,Concept ACK for updating locks and docs,https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-755948612,755948612,
sdaftuar,2021-01-07 16:13:44,"> It's not clear to me why we want CheckInputsFromMempoolAndCache() to be a separate function from ConsensusScriptChecks(). It means that the documentation is split out over three places - the ConsensusScriptChecks() declaration (""Re-run the script checks, using consensus flags, and try to cache the result in the scriptcache...""), the ConsensusScriptChecks() function body (""Check again against the",https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-756214982,756214982,
sdaftuar,2021-01-12 17:32:30,"utACK 2f463f57e3a9797236142a525703359a98fe19ea\n\n",https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-758818799,758818799,
DrahtBot,2021-01-13 11:45:46,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nüïµÔ∏è @sipa has been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-759396249,759396249,
jnewbery,2021-01-13 16:56:27,utACK 2f463f57e3a9797236142a525703359a98fe19ea,https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-759582149,759582149,
MarcoFalke,2021-01-03 17:13:08,"I assumed this was protecting against corruption of the utxo set on disk, but that doesn't seem to be the case. `coin` will be from disk as well.",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r551031030,551031030,src/validation.cpp
jnewbery,2021-01-05 13:01:14,Is that true? `AccessCoin()` doesn't necessarily hit the disk. It could be pulling the coin from the cache.,https://github.com/bitcoin/bitcoin/pull/20834#discussion_r551917492,551917492,src/validation.cpp
jnewbery,2021-01-05 19:32:12,"Everything after "", and it cannot have pruned ..."" can be removed. There's no such thing as pruned coins cache entries since per-txout db.",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552148046,552148046,src/validation.cpp
glozow,2021-01-05 19:37:12,Oh true. I do fix this in #20833... should I do it here instead?,https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552150626,552150626,src/validation.cpp
jnewbery,2021-01-05 20:07:47,"Up to you. I only mention it here because you're touching this code, but if you want to keep this move-only, then that's fine as well.",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552166146,552166146,src/validation.cpp
MarcoFalke,2021-01-06 13:49:14,nit: Could explain a bit more what this sanity check is doing? Maybe a oneline summary of https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754652998 ?,https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552628862,552628862,src/validation.cpp
glozow,2021-01-06 22:05:19,Made big effort to improve the documentation :D ,https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552984141,552984141,src/validation.cpp
jnewbery,2021-01-07 10:13:59,"While you're touching these lines, feel free to:\n\n- make the comment a doxygen comment\n- add some wrapping/alignment to make the signature more readable\n- move the opening brace to a new line to follow project code style\n\n```diff\n-// Checks to avoid mempool polluting consensus critical paths since cached\n-// signature and script validity results will be reused if we validate this\",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r553233548,553233548,src/validation.cpp
sdaftuar,2021-01-08 17:44:22,"Now that we have `Assume()` (#20255), that might be a good choice to use here?  It seems to me that we don't need to crash if this assumption is violated (as the old code handled this case and returned false, so we could just continue to do that) -- but adding the `Assume()` will mean we do get the crash in debug builds, which I think is what we're looking for.",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554095702,554095702,src/validation.cpp
sdaftuar,2021-01-08 17:50:26,"Interestingly, `PolicyScriptChecks` doesn't itself need the mempool, so on its face this seems slightly strange.  I can understand that the semantics may be easiest to reason about if we try to enforce that cs_main and the mempool.cs locks are held throughout mempool acceptance, so no objection to that idea conceptually. But it's not clear to me if there's some better idiom to express this?  As it",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554098803,554098803,src/validation.cpp
glozow,2021-01-08 21:38:25,Done!,https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554204027,554204027,src/validation.cpp
glozow,2021-01-08 21:38:54,"Ah, I wasn't aware of that! Yes I think that's better.",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554204208,554204208,src/validation.cpp
glozow,2021-01-08 21:40:23,"I've added annotations to `CheckFeeRate` for now.\n\nIn my mind, I think of `MemPoolAccept` class as one ""validation session"" on top of current Tip and mempool, so would want to assert that it holds `cs_main, pool.cs` for the entirety of `AcceptSingleTransaction`. Don't know how to do that though üòÖ not familiar",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554204752,554204752,src/validation.cpp
sdaftuar,2021-01-11 13:32:09,"I believe we need to leave in the old line that returned false if this test fails (after this `Assume()` call); this check is a no-op in non-debug builds, so we'd want to return false if the check were to fail.",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r555047780,555047780,src/validation.cpp
glozow,2021-01-12 12:18:25,oops! fixed,https://github.com/bitcoin/bitcoin/pull/20834#discussion_r555728891,555728891,src/validation.cpp
TheBlueMatt,2021-01-12 17:31:42,The non-static functions need EXCLUSIVE_LOCKS_REQUIRED in any header files which include them as well - EXCLUSIVE_LOCKS_REQUIRED will be ignored by call-sites if its only set in the definitions and not all declarations.,https://github.com/bitcoin/bitcoin/pull/20834#discussion_r555950398,555950398,src/validation.cpp
MarcoFalke,2021-01-13 14:43:04,"in commit "" lock annotations for MemPoolAccept functions "":\n\nThe assumption was that even though cs_main was locked the whole time, but the mempool lock wasn't (guaranteed to), so previously this was a ""weak check"" (return)? If so: Now that the mempool lock is taken (on top of cs_main) the whole time, there is no way this could fail. So it could make sense to change to `Assert`?\n\nAlso, the",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556569993,556569993,src/validation.cpp
MarcoFalke,2021-01-13 14:46:22,"in commit "" [doc] for CheckInputsFromMempoolAndCache "":\n\nCould make sense to refer to `g_scriptExecutionCache` to clarify this has nothing to do with the schnorr-cache and ecdsa-cache?",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556572552,556572552,src/validation.cpp
MarcoFalke,2021-01-13 14:53:21,"in commit "" lock annotations for MemPoolAccept functions "":\n\n`ChainstateActive` is deprecated, so to make @dongcarl 's life easier it might be best to not add new references to it\n\n```suggestion\n        // it is available in our current active UTXO set,\n```",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556578022,556578022,src/validation.cpp
glozow,2021-01-13 16:01:57,"I had `Assert` and changed to `Assume` based on @sdaftuar's [comment](https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554095702) üòÖ \n\n> we don't need to crash if this assumption is violated (as the old code handled this case and returned false, so we could just continue to do that) -- but adding the Assume() will mean we do get the crash in debug builds, which I think is what we're lo",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556639381,556639381,src/validation.cpp
MarcoFalke,2021-01-13 16:21:39,"Just a nit. It seems a bit odd to assume the `Assert` here could fail and should be an `Assume` instead. Then, at the same time assume that the other asserts (before and after this one) checking the exact same thing won't hit. Seems more consistent to have all three be `Assert`, or even remove this one completely and rely on the others.",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556654093,556654093,src/validation.cpp
sdaftuar,2021-01-13 18:35:56,"If we thought the Assume could fail, we would fix the code, not add an Assume.  I think it's a question of what do you want the software to do if we are all somehow wrong in our reasoning.  In my view, crashing -- which could be a network-wide event -- should be avoided if the software is otherwise able to recover, and since that seems to be the case here, I don't know why we would change the code",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556744669,556744669,src/validation.cpp
MarcoFalke,2021-01-14 07:45:07,"Thanks, makes sense",https://github.com/bitcoin/bitcoin/pull/20834#discussion_r557121090,557121090,src/validation.cpp
