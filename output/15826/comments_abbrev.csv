jonasschnelli,2019-04-16T07:35:29Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15826#issuecomment-483546373,483546373,
practicalswift,2019-04-16T08:53:20Z,"Concept ACK\n\nExcellent work! Thanks for doing this!",https://github.com/bitcoin/bitcoin/pull/15826#issuecomment-483571886,483571886,
MarcoFalke,2019-04-16T11:44:20Z,":heart: Makes it easier to run the tests on native windows, where I couldn't figure out how to install that library. Will give it a try...",https://github.com/bitcoin/bitcoin/pull/15826#issuecomment-483625450,483625450,
sdaftuar,2019-04-16T11:56:28Z,"> Makes it easier to run the tests on native windows, where I couldn't figure out how to install that library\n\nThat seems like a good motivation for making a change like this, but I'm curious if there are other reasons as well?",https://github.com/bitcoin/bitcoin/pull/15826#issuecomment-483628933,483628933,
sipa,2019-04-16T17:07:55Z,"@sdaftuar The original motivation was that for testing a Schnorr signature implementation we'll want a Python version to test against, which needs much of this logic anyway, and it felt silly to maintain two independent versions just for testing (especially as one relies on OpenSSL we're trying to get rid of as a dependency).\n\n@MarcoFalke I added the verify_ecdsa function to test the sign_ecdsa ",https://github.com/bitcoin/bitcoin/pull/15826#issuecomment-483761823,483761823,
MarcoFalke,2019-04-16T19:26:59Z,"Yeah, having a test that `verify_ecdsa`s a Bitcoin Core generated signature would be nice",https://github.com/bitcoin/bitcoin/pull/15826#issuecomment-483810752,483810752,
sipa,2019-04-16T20:02:44Z,"I've added ecdsa_verify to the ignore list. I'll try to write a test that actually uses it, but it's not that trivial either.",https://github.com/bitcoin/bitcoin/pull/15826#issuecomment-483822298,483822298,
gmaxwell,2019-04-17T01:15:57Z,"At a glance this looks fine, I was going to urge you to put a really strong warning on it, but the warning looks adequate.  I'm not going to give this any cryptographic review because I don't think it needs/deserves any.",https://github.com/bitcoin/bitcoin/pull/15826#issuecomment-483900004,483900004,
MarcoFalke,2019-04-17T18:29:45Z,This will be merged next Monday unless there are objections,https://github.com/bitcoin/bitcoin/pull/15826#issuecomment-484208598,484208598,
laanwj,2019-04-18T18:34:18Z,"good to lose this dependency on an external library w/ ctypes, this makes porting the tests easier\n\nACK 8cc786094fb55907a25a4b46caa7f1f8fb512363 (though would be good to integrate @jnewbery's comments)",https://github.com/bitcoin/bitcoin/pull/15826#issuecomment-484631489,484631489,
sipa,2019-04-18T19:31:44Z,"I've rewritten the extgcd/modinv functions to be a bit faster, and also included @jnewbery's comments (after rebasing that commit).",https://github.com/bitcoin/bitcoin/pull/15826#issuecomment-484656086,484656086,
jnewbery,2019-04-18T20:07:49Z,"Nice find for the quicker modinv().\n\nutACK ac050deca0227fe44346f3f91c79d733ed5705d8",https://github.com/bitcoin/bitcoin/pull/15826#issuecomment-484670421,484670421,
jnewbery,2019-04-18T20:56:04Z,"utACK b67978529ad02fc2665f2362418dc53db2e25e17\n\nOnly change is correcting two small code comments.",https://github.com/bitcoin/bitcoin/pull/15826#issuecomment-484686838,484686838,
MarcoFalke,2019-04-16T11:47:56Z,"Looks like this is never called. Could either:\n* Remove it\n* Update the python linter\n* Call it in a smoke test",https://github.com/bitcoin/bitcoin/pull/15826#discussion_r275756645,275756645,test/functional/test_framework/key.py
jnewbery,2019-04-16T19:46:55Z,unused import `ECPubKey`,https://github.com/bitcoin/bitcoin/pull/15826#discussion_r275963052,275963052,test/functional/p2p_segwit.py
sipa,2019-04-16T20:00:51Z,Gone.,https://github.com/bitcoin/bitcoin/pull/15826#discussion_r275968215,275968215,test/functional/p2p_segwit.py
jnewbery,2019-04-17T14:11:55Z,"Not that it matters for this application since you only call this with +ve n, but I believe this should be:\n\n```python\nt = 1 if n > 0 else -1\n```",https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276261481,276261481,test/functional/test_framework/key.py
sipa,2019-04-17T15:04:24Z,"That would not be correct (I represent the ""t"" variable from the Wikipedia article as 0/1 rather than 1/-1, so that I can use xor operations to flip it).",https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276289233,276289233,test/functional/test_framework/key.py
jnewbery,2019-04-17T16:57:29Z,"As discussed on IRC, I believe this (and the wikipedia Lua code that it's based on) is incorrect when passed -ve a (I believe the bug probably stems from the misunderstanding that % in python and lua represents the remainder, not the modulus, so a % n is negative when n is negative).\n\nSimplest fix is:\n\n```python\n    assert k > 0 and k % 2\n    n = n % k\n    t = 1\n```",https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276340483,276340483,test/functional/test_framework/key.py
sipa,2019-04-17T17:26:55Z,"@jnewbery Nice catch, fixed. You've inadvertently fixed another bug, I suspect, namely that `jacobi_symbol(0,1)` is supposed to be 1, not 0.\n\nNote to reviewers: this bug doesn't affect our use, as we never invoke with n<0 or k=1.",https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276351776,276351776,test/functional/test_framework/key.py
jnewbery,2019-04-17T19:57:31Z,"Again, not a problem for this application since a=0 in secp256k1, but I think this should be:\n\n```python\nreturn z1 != 0 and (pow(x1, 3, self.p) + self.a * x1 * z4 + self.b * z2 * z4 - pow(y1, 2, self.p)) % self.p == 0\n```\n\n(ie the self.a term should be multiplied by `z4` so that all terms in the eliptic curve equation have a common z^6 factor that can be cancelled)",https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276409021,276409021,test/functional/test_framework/key.py
jnewbery,2019-04-17T21:06:53Z,Note that you can also do ceiling division with `-(-r.bit_length() // 8)`. I'm not sure if that's any more readable though.,https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276434022,276434022,test/functional/test_framework/key.py
jnewbery,2019-04-17T21:07:40Z,Does the project have a policy on individual contributors' copyright notices in source files? Do you also want to include the MIT license boilerplate here too?,https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276434289,276434289,test/functional/test_framework/key.py
sipa,2019-04-17T21:13:59Z,"I don't want a ceiling division; i want a flooring one plus 1 (255 should become 32, but 256 should become 33).",https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276436540,276436540,test/functional/test_framework/key.py
sipa,2019-04-17T21:47:29Z,"There are a few files with individual author's names. As the ""Copyright The Bitcoin Core contributors"" is likely meaningless I think listing actual authors is preferable when it's a well-defined set of people, but I don't feel strongly.",https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276447177,276447177,test/functional/test_framework/key.py
sipa,2019-04-17T22:03:55Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276451984,276451984,test/functional/test_framework/key.py
jnewbery,2019-04-18T17:13:54Z,oops. Thanks!,https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276754939,276754939,test/functional/test_framework/key.py
jnewbery,2019-04-18T17:38:32Z,"I'd have a slight preference for these to be named `x2`, `y2`, `z2`",https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276763690,276763690,test/functional/test_framework/key.py
jnewbery,2019-04-18T17:39:05Z,nit: You could remove `z2` here (since it's 1 for an affine point),https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276763899,276763899,test/functional/test_framework/key.py
sipa,2019-04-18T18:58:52Z,Done.,https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276793201,276793201,test/functional/test_framework/key.py
sipa,2019-04-18T18:59:00Z,Done.,https://github.com/bitcoin/bitcoin/pull/15826#discussion_r276793247,276793247,test/functional/test_framework/key.py
