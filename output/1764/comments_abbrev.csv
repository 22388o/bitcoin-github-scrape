jgarzik,2012-08-31T05:40:52Z,"Code change looks OK to my 1am brain.  Commit description seems lame.  I would say something like:\n\n""Using a byte-for-byte comparison excludes valid nHeight encodings.  Replace with standard script method for decoding integer values on the script stack.""\n",https://github.com/bitcoin/bitcoin/pull/1764#issuecomment-8183155,8183155,
luke-jr,2012-08-31T05:42:53Z,"Comment updated, also fixed a bug in the error message\n",https://github.com/bitcoin/bitcoin/pull/1764#issuecomment-8183176,8183176,
jgarzik,2012-08-31T05:45:51Z,ACK... assuming it tests OK\n,https://github.com/bitcoin/bitcoin/pull/1764#issuecomment-8183200,8183200,
gavinandresen,2012-08-31T12:27:25Z,"NACK. The format should be strict/canonical. Changing the BIP to make that clear is the right fix, in my humble opinion.\n",https://github.com/bitcoin/bitcoin/pull/1764#issuecomment-8190386,8190386,
luke-jr,2012-08-31T14:13:32Z,Encoding 24-bit heights instead of 32-bit isn't exactly cheap everywhere. :(\n,https://github.com/bitcoin/bitcoin/pull/1764#issuecomment-8193218,8193218,
jgarzik,2012-08-31T15:10:28Z,&lt;shrug&gt;  Satoshi created CastToBigNum() precisely for reasons like this...\n,https://github.com/bitcoin/bitcoin/pull/1764#issuecomment-8195023,8195023,
TheBlueMatt,2012-08-31T17:02:10Z,"I was under the impression we were gearing up to put a lot of effort into forcing scripts to be canonical, I dont see why we would not do that here, too.\n",https://github.com/bitcoin/bitcoin/pull/1764#issuecomment-8198420,8198420,
gmaxwell,2012-08-31T17:15:11Z,Right. This should be forced to be canonical and the BIP should be fixed to make it clear that it's specifying that. (Gavin pointed out that it already does; but it only does so in a fairly vague manner).  I'm glad that Luke caught the lack of clarity though.\n,https://github.com/bitcoin/bitcoin/pull/1764#issuecomment-8198785,8198785,
jgarzik,2012-08-31T17:16:39Z,"Well-formed scripts in the coinbase means it is parseable -- which is not the issue here in this thread.  These scripts are parseable in both luke-jr's and gavin's cases.\n\nBigNums may have multiple encodings, which is perfectly normal and accepted and supported in script for script stack values.  Thus, universal use of CastToBool and CastToBigNum before calculating with a stack value.\n\nNot-wel",https://github.com/bitcoin/bitcoin/pull/1764#issuecomment-8198819,8198819,
luke-jr,2012-08-31T19:47:55Z,"I ask that everyone reconsider their position based on a new reason: Bitcoin script number format is rather complicated, and could easily be vulnerable to subtle implementation bugs.\n\nMy attempt to explain the format in the shortest possible terms:\n- Zero is special-cased to serialize to 00 regardless of everything else herein.\n- All numbers with a multiple of 8 bits are padded with an extra 8",https://github.com/bitcoin/bitcoin/pull/1764#issuecomment-8203051,8203051,
gmaxwell,2012-08-31T19:51:04Z,@luke-jr  that is a major reason to impose a strict canonicality requirement. If there is only one way to encode/decode each value then it is relatively simple and reliable to write tests cases that that show two implementations agree.  If there are multiple ways then an attacker can exploit them to create network splits if there are subtle bugs in some implementation.\n,https://github.com/bitcoin/bitcoin/pull/1764#issuecomment-8203127,8203127,
luke-jr,2012-08-31T19:57:39Z,"Guess I didn't look at it from that perspective :)\n\nFair enough, closing this.\n",https://github.com/bitcoin/bitcoin/pull/1764#issuecomment-8203288,8203288,
TheBlueMatt,2012-08-31T20:00:34Z,"Just to correct it if anyone else reads this thread and implements based on it:\nzero is not special-cased to 00, its a zero-length vector.\nSee: the script test-cases which include a number of specific number tests.\n",https://github.com/bitcoin/bitcoin/pull/1764#issuecomment-8203353,8203353,
luke-jr,2012-08-31T20:03:34Z,"Right, by 00 I meant as a serialized script; ie, OP_0\n",https://github.com/bitcoin/bitcoin/pull/1764#issuecomment-8203423,8203423,
