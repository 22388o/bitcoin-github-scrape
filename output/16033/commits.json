[
  {
    "sha": "593a8e8a2ce177c41a7809479c0086ae0fee4b4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTNhOGU4YTJjZTE3N2M0MWE3ODA5NDc5YzAwODZhZTBmZWU0YjRl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-16T19:42:34Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-16T19:42:34Z"
      },
      "message": "wallet: Use chain.lock() instead of temporary chain.assumeLocked()",
      "tree": {
        "sha": "a7781c4e009507d66f367e6b074db577e0afaf00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7781c4e009507d66f367e6b074db577e0afaf00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/593a8e8a2ce177c41a7809479c0086ae0fee4b4e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/593a8e8a2ce177c41a7809479c0086ae0fee4b4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/593a8e8a2ce177c41a7809479c0086ae0fee4b4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/593a8e8a2ce177c41a7809479c0086ae0fee4b4e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d266dbdecb45bbd69a24ddea5f5cc8e8c153687",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d266dbdecb45bbd69a24ddea5f5cc8e8c153687",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d266dbdecb45bbd69a24ddea5f5cc8e8c153687"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0822c7c30ea275433046588757c66fad3442a6c4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/593a8e8a2ce177c41a7809479c0086ae0fee4b4e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/593a8e8a2ce177c41a7809479c0086ae0fee4b4e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=593a8e8a2ce177c41a7809479c0086ae0fee4b4e",
        "patch": "@@ -4074,7 +4074,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             return nullptr;\n         }\n \n-        auto locked_chain = chain.assumeLocked();  // Temporary. Removed in upcoming lock cleanup\n+        auto locked_chain = chain.lock();\n         walletInstance->ChainStateFlushed(locked_chain->getTipLocator());\n     } else if (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS) {\n         // Make it impossible to disable private keys after creation"
      }
    ]
  },
  {
    "sha": "9402ef0739fdcd8e989c07c0595095e9608b243c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDAyZWYwNzM5ZmRjZDhlOTg5YzA3YzA1OTUwOTVlOTYwOGIyNDNj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-16T19:43:22Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-16T19:43:22Z"
      },
      "message": "Remove temporary method assumeLocked(). Remove LockingStateImpl. Remove redundant cs_main locks.",
      "tree": {
        "sha": "5eb2b83a92bd349615dc204a0e15973d26b3a288",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5eb2b83a92bd349615dc204a0e15973d26b3a288"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9402ef0739fdcd8e989c07c0595095e9608b243c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9402ef0739fdcd8e989c07c0595095e9608b243c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9402ef0739fdcd8e989c07c0595095e9608b243c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9402ef0739fdcd8e989c07c0595095e9608b243c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "593a8e8a2ce177c41a7809479c0086ae0fee4b4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/593a8e8a2ce177c41a7809479c0086ae0fee4b4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/593a8e8a2ce177c41a7809479c0086ae0fee4b4e"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 22,
      "deletions": 24
    },
    "files": [
      {
        "sha": "eaddcd9dd2344d4e7430c44bbaafc1e277e51ab6",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9402ef0739fdcd8e989c07c0595095e9608b243c/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9402ef0739fdcd8e989c07c0595095e9608b243c/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=9402ef0739fdcd8e989c07c0595095e9608b243c",
        "patch": "@@ -37,7 +37,7 @@\n namespace interfaces {\n namespace {\n \n-class LockImpl : public Chain::Lock\n+class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n {\n     Optional<int> getHeight() override\n     {\n@@ -155,10 +155,7 @@ class LockImpl : public Chain::Lock\n         return AcceptToMemoryPool(::mempool, state, tx, nullptr /* missing inputs */, nullptr /* txn replaced */,\n             false /* bypass limits */, absurd_fee);\n     }\n-};\n \n-class LockingStateImpl : public LockImpl, public UniqueLock<CCriticalSection>\n-{\n     using UniqueLock::UniqueLock;\n };\n \n@@ -249,13 +246,12 @@ class ChainImpl : public Chain\n public:\n     std::unique_ptr<Chain::Lock> lock(bool try_lock) override\n     {\n-        auto result = MakeUnique<LockingStateImpl>(::cs_main, \"cs_main\", __FILE__, __LINE__, try_lock);\n+        auto result = MakeUnique<LockImpl>(::cs_main, \"cs_main\", __FILE__, __LINE__, try_lock);\n         if (try_lock && result && !*result) return {};\n         // std::move necessary on some compilers due to conversion from\n-        // LockingStateImpl to Lock pointer\n+        // LockImpl to Lock pointer\n         return std::move(result);\n     }\n-    std::unique_ptr<Chain::Lock> assumeLocked() override { return MakeUnique<LockImpl>(); }\n     bool findBlock(const uint256& hash, CBlock* block, int64_t* time, int64_t* time_max) override\n     {\n         CBlockIndex* index;"
      },
      {
        "sha": "459c3c9a9ff6763068de133c628a3ece84e30027",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9402ef0739fdcd8e989c07c0595095e9608b243c/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9402ef0739fdcd8e989c07c0595095e9608b243c/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=9402ef0739fdcd8e989c07c0595095e9608b243c",
        "patch": "@@ -138,11 +138,6 @@ class Chain\n     //! unlocked when the returned interface is freed.\n     virtual std::unique_ptr<Lock> lock(bool try_lock = false) = 0;\n \n-    //! Return Lock interface assuming chain is already locked. This\n-    //! method is temporary and is only used in a few places to avoid changing\n-    //! behavior while code is transitioned to use the Chain::Lock interface.\n-    virtual std::unique_ptr<Lock> assumeLocked() = 0;\n-\n     //! Return whether node has the block and optionally return block metadata\n     //! or contents.\n     //!"
      },
      {
        "sha": "62630c011a0355f5172007670ea843632a5cd7a0",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 12,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9402ef0739fdcd8e989c07c0595095e9608b243c/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9402ef0739fdcd8e989c07c0595095e9608b243c/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=9402ef0739fdcd8e989c07c0595095e9608b243c",
        "patch": "@@ -368,7 +368,10 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         int changePos = -1;\n         std::string error;\n         CCoinControl dummy;\n-        BOOST_CHECK(wallet->CreateTransaction(*m_locked_chain, {recipient}, tx, reservekey, fee, changePos, error, dummy));\n+        {\n+            auto locked_chain = m_chain->lock();\n+            BOOST_CHECK(wallet->CreateTransaction(*locked_chain, {recipient}, tx, reservekey, fee, changePos, error, dummy));\n+        }\n         CValidationState state;\n         BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, reservekey, state));\n         CMutableTransaction blocktx;\n@@ -387,7 +390,6 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     }\n \n     std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();\n-    std::unique_ptr<interfaces::Chain::Lock> m_locked_chain = m_chain->assumeLocked();  // Temporary. Removed in upcoming lock cleanup\n     std::unique_ptr<CWallet> wallet;\n };\n \n@@ -399,8 +401,9 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n     // address.\n     std::map<CTxDestination, std::vector<COutput>> list;\n     {\n-        LOCK2(cs_main, wallet->cs_wallet);\n-        list = wallet->ListCoins(*m_locked_chain);\n+        auto locked_chain = m_chain->lock();\n+        LOCK(wallet->cs_wallet);\n+        list = wallet->ListCoins(*locked_chain);\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n     BOOST_CHECK_EQUAL(boost::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);\n@@ -415,18 +418,20 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n     // pubkey.\n     AddTx(CRecipient{GetScriptForRawPubKey({}), 1 * COIN, false /* subtract fee */});\n     {\n-        LOCK2(cs_main, wallet->cs_wallet);\n-        list = wallet->ListCoins(*m_locked_chain);\n+        auto locked_chain = m_chain->lock();\n+        LOCK(wallet->cs_wallet);\n+        list = wallet->ListCoins(*locked_chain);\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n     BOOST_CHECK_EQUAL(boost::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 2U);\n \n     // Lock both coins. Confirm number of available coins drops to 0.\n     {\n-        LOCK2(cs_main, wallet->cs_wallet);\n+        auto locked_chain = m_chain->lock();\n+        LOCK(wallet->cs_wallet);\n         std::vector<COutput> available;\n-        wallet->AvailableCoins(*m_locked_chain, available);\n+        wallet->AvailableCoins(*locked_chain, available);\n         BOOST_CHECK_EQUAL(available.size(), 2U);\n     }\n     for (const auto& group : list) {\n@@ -436,16 +441,18 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n         }\n     }\n     {\n-        LOCK2(cs_main, wallet->cs_wallet);\n+        auto locked_chain = m_chain->lock();\n+        LOCK(wallet->cs_wallet);\n         std::vector<COutput> available;\n-        wallet->AvailableCoins(*m_locked_chain, available);\n+        wallet->AvailableCoins(*locked_chain, available);\n         BOOST_CHECK_EQUAL(available.size(), 0U);\n     }\n     // Confirm ListCoins still returns same result as before, despite coins\n     // being locked.\n     {\n-        LOCK2(cs_main, wallet->cs_wallet);\n-        list = wallet->ListCoins(*m_locked_chain);\n+        auto locked_chain = m_chain->lock();\n+        LOCK(wallet->cs_wallet);\n+        list = wallet->ListCoins(*locked_chain);\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n     BOOST_CHECK_EQUAL(boost::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);"
      }
    ]
  }
]