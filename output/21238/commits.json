[
  {
    "sha": "84f3939ece9f4901141b28fd2dd6e3899d01d66e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGYzOTM5ZWNlOWY0OTAxMTQxYjI4ZmQyZGQ2ZTM4OTlkMDFkNjZl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-12T02:58:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-29T23:40:22Z"
      },
      "message": "Remove support for subdescriptors expanding to multiple scripts",
      "tree": {
        "sha": "fe714cb0c4ba86636b2315c33d6665336d259414",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe714cb0c4ba86636b2315c33d6665336d259414"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84f3939ece9f4901141b28fd2dd6e3899d01d66e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84f3939ece9f4901141b28fd2dd6e3899d01d66e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84f3939ece9f4901141b28fd2dd6e3899d01d66e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84f3939ece9f4901141b28fd2dd6e3899d01d66e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c7be9ab90af14d24f4668b02d9f07cec6f88a78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c7be9ab90af14d24f4668b02d9f07cec6f88a78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c7be9ab90af14d24f4668b02d9f07cec6f88a78"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 5,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ed382f2a5435ae9bcf9cef6447e295107c38d90c",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84f3939ece9f4901141b28fd2dd6e3899d01d66e/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84f3939ece9f4901141b28fd2dd6e3899d01d66e/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=84f3939ece9f4901141b28fd2dd6e3899d01d66e",
        "patch": "@@ -484,15 +484,15 @@ class DescriptorImpl : public Descriptor\n     //! The sub-descriptor argument (nullptr for everything but SH and WSH).\n     //! In doc/descriptors.m this is referred to as SCRIPT expressions sh(SCRIPT)\n     //! and wsh(SCRIPT), and distinct from KEY expressions and ADDR expressions.\n+    //! Subdescriptors can only ever generate a single script.\n     const std::unique_ptr<DescriptorImpl> m_subdescriptor_arg;\n \n     //! Return a serialization of anything except pubkey and script arguments, to be prepended to those.\n     virtual std::string ToStringExtra() const { return \"\"; }\n \n     /** A helper function to construct the scripts for this descriptor.\n      *\n-     *  This function is invoked once for every CScript produced by evaluating\n-     *  m_subdescriptor_arg, or just once in case m_subdescriptor_arg is nullptr.\n+     *  This function is invoked once by ExpandHelper.\n \n      *  @param pubkeys The evaluations of the m_pubkey_args field.\n      *  @param script The evaluation of m_subdescriptor_arg (or nullptr when m_subdescriptor_arg is nullptr).\n@@ -586,6 +586,7 @@ class DescriptorImpl : public Descriptor\n         if (m_subdescriptor_arg) {\n             FlatSigningProvider subprovider;\n             if (!m_subdescriptor_arg->ExpandHelper(pos, arg, read_cache, subscripts, subprovider, write_cache)) return false;\n+            assert(subscripts.size() == 1);\n             out = Merge(out, subprovider);\n         }\n \n@@ -596,13 +597,8 @@ class DescriptorImpl : public Descriptor\n             out.origins.emplace(entry.first.GetID(), std::make_pair<CPubKey, KeyOriginInfo>(CPubKey(entry.first), std::move(entry.second)));\n         }\n         if (m_subdescriptor_arg) {\n-            for (const auto& subscript : subscripts) {\n-                out.scripts.emplace(CScriptID(subscript), subscript);\n-                std::vector<CScript> addscripts = MakeScripts(pubkeys, &subscript, out);\n-                for (auto& addscript : addscripts) {\n-                    output_scripts.push_back(std::move(addscript));\n-                }\n-            }\n+            out.scripts.emplace(CScriptID(subscripts[0]), subscripts[0]);\n+            output_scripts = MakeScripts(pubkeys, &subscripts[0], out);\n         } else {\n             output_scripts = MakeScripts(pubkeys, nullptr, out);\n         }"
      }
    ]
  },
  {
    "sha": "a917478db0788b244c0c799b98bf67a94df7035e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTE3NDc4ZGIwNzg4YjI0NGMwYzc5OWI5OGJmNjdhOTRkZjcwMzVl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-05T00:11:05Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-29T23:40:22Z"
      },
      "message": "refactor: move population of out.scripts from ExpandHelper to MakeScripts\n\nThere are currently two DescriptorImpl subclasses that rely on the functionality\nthat ExpandHelper automatically adds subscripts to the output SigningProvider.\n\nTaproot descriptors will have subscripts, but we don't want them in the\nSigningProvider's bare script field. To avoid them ending up there, move this\nfunctionality into the specific classes' MakeScripts implementation.",
      "tree": {
        "sha": "1316a8a78be54d563778e43b5cde2353c1e70077",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1316a8a78be54d563778e43b5cde2353c1e70077"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a917478db0788b244c0c799b98bf67a94df7035e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a917478db0788b244c0c799b98bf67a94df7035e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a917478db0788b244c0c799b98bf67a94df7035e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a917478db0788b244c0c799b98bf67a94df7035e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84f3939ece9f4901141b28fd2dd6e3899d01d66e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84f3939ece9f4901141b28fd2dd6e3899d01d66e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84f3939ece9f4901141b28fd2dd6e3899d01d66e"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d15cba1fa8a6302817c006faded718fb998e3b14",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a917478db0788b244c0c799b98bf67a94df7035e/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a917478db0788b244c0c799b98bf67a94df7035e/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=a917478db0788b244c0c799b98bf67a94df7035e",
        "patch": "@@ -497,7 +497,7 @@ class DescriptorImpl : public Descriptor\n      *  @param pubkeys The evaluations of the m_pubkey_args field.\n      *  @param script The evaluation of m_subdescriptor_arg (or nullptr when m_subdescriptor_arg is nullptr).\n      *  @param out A FlatSigningProvider to put scripts or public keys in that are necessary to the solver.\n-     *             The script arguments to this function are automatically added, as is the origin info of the provided pubkeys.\n+     *             The origin info of the provided pubkeys is automatically added.\n      *  @return A vector with scriptPubKeys for this descriptor.\n      */\n     virtual std::vector<CScript> MakeScripts(const std::vector<CPubKey>& pubkeys, const CScript* script, FlatSigningProvider& out) const = 0;\n@@ -597,7 +597,6 @@ class DescriptorImpl : public Descriptor\n             out.origins.emplace(entry.first.GetID(), std::make_pair<CPubKey, KeyOriginInfo>(CPubKey(entry.first), std::move(entry.second)));\n         }\n         if (m_subdescriptor_arg) {\n-            out.scripts.emplace(CScriptID(subscripts[0]), subscripts[0]);\n             output_scripts = MakeScripts(pubkeys, &subscripts[0], out);\n         } else {\n             output_scripts = MakeScripts(pubkeys, nullptr, out);\n@@ -776,7 +775,12 @@ class MultisigDescriptor final : public DescriptorImpl\n class SHDescriptor final : public DescriptorImpl\n {\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider&) const override { return Vector(GetScriptForDestination(ScriptHash(*script))); }\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider& out) const override\n+    {\n+        auto ret = Vector(GetScriptForDestination(ScriptHash(*script)));\n+        if (ret.size()) out.scripts.emplace(CScriptID(*script), *script);\n+        return ret;\n+    }\n public:\n     SHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"sh\") {}\n \n@@ -793,7 +797,12 @@ class SHDescriptor final : public DescriptorImpl\n class WSHDescriptor final : public DescriptorImpl\n {\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider&) const override { return Vector(GetScriptForDestination(WitnessV0ScriptHash(*script))); }\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider& out) const override\n+    {\n+        auto ret = Vector(GetScriptForDestination(WitnessV0ScriptHash(*script)));\n+        if (ret.size()) out.scripts.emplace(CScriptID(*script), *script);\n+        return ret;\n+    }\n public:\n     WSHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"wsh\") {}\n     std::optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }"
      }
    ]
  },
  {
    "sha": "4441c6f3c046c0b28ce3f0ca6d938af71d797586",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDQxYzZmM2MwNDZjMGIyOGNlM2YwY2E2ZDkzOGFmNzFkNzk3NTg2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-04T23:58:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-30T00:38:38Z"
      },
      "message": "Make DescriptorImpl support multiple subscripts\n\nSo far, no descriptor exists that supports more than one sub-script\ndescriptor. This will change with taproot, so prepare for this by\nchanging the m_subdescriptor_arg from a unique_ptr to a vector of\nunique_ptr's.",
      "tree": {
        "sha": "f5c44edb3272f1bc69ccfde1e047669991b749c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5c44edb3272f1bc69ccfde1e047669991b749c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4441c6f3c046c0b28ce3f0ca6d938af71d797586",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4441c6f3c046c0b28ce3f0ca6d938af71d797586",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4441c6f3c046c0b28ce3f0ca6d938af71d797586",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4441c6f3c046c0b28ce3f0ca6d938af71d797586/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a917478db0788b244c0c799b98bf67a94df7035e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a917478db0788b244c0c799b98bf67a94df7035e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a917478db0788b244c0c799b98bf67a94df7035e"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 47,
      "deletions": 49
    },
    "files": [
      {
        "sha": "5fbc740608ee70f6d35ec34d19f495a1e9a967c8",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 49,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4441c6f3c046c0b28ce3f0ca6d938af71d797586/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4441c6f3c046c0b28ce3f0ca6d938af71d797586/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=4441c6f3c046c0b28ce3f0ca6d938af71d797586",
        "patch": "@@ -481,34 +481,35 @@ class DescriptorImpl : public Descriptor\n     const std::string m_name;\n \n protected:\n-    //! The sub-descriptor argument (nullptr for everything but SH and WSH).\n+    //! The sub-descriptor arguments (empty for everything but SH and WSH).\n     //! In doc/descriptors.m this is referred to as SCRIPT expressions sh(SCRIPT)\n     //! and wsh(SCRIPT), and distinct from KEY expressions and ADDR expressions.\n     //! Subdescriptors can only ever generate a single script.\n-    const std::unique_ptr<DescriptorImpl> m_subdescriptor_arg;\n+    const std::vector<std::unique_ptr<DescriptorImpl>> m_subdescriptor_args;\n \n     //! Return a serialization of anything except pubkey and script arguments, to be prepended to those.\n     virtual std::string ToStringExtra() const { return \"\"; }\n \n     /** A helper function to construct the scripts for this descriptor.\n      *\n      *  This function is invoked once by ExpandHelper.\n-\n+     *\n      *  @param pubkeys The evaluations of the m_pubkey_args field.\n-     *  @param script The evaluation of m_subdescriptor_arg (or nullptr when m_subdescriptor_arg is nullptr).\n+     *  @param script The evaluations of m_subdescriptor_args (one for each m_subdescriptor_args element).\n      *  @param out A FlatSigningProvider to put scripts or public keys in that are necessary to the solver.\n      *             The origin info of the provided pubkeys is automatically added.\n      *  @return A vector with scriptPubKeys for this descriptor.\n      */\n-    virtual std::vector<CScript> MakeScripts(const std::vector<CPubKey>& pubkeys, const CScript* script, FlatSigningProvider& out) const = 0;\n+    virtual std::vector<CScript> MakeScripts(const std::vector<CPubKey>& pubkeys, Span<const CScript> scripts, FlatSigningProvider& out) const = 0;\n \n public:\n-    DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::unique_ptr<DescriptorImpl> script, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_arg(std::move(script)) {}\n+    DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_args() {}\n+    DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::unique_ptr<DescriptorImpl> script, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_args(Vector(std::move(script))) {}\n \n     bool IsSolvable() const override\n     {\n-        if (m_subdescriptor_arg) {\n-            if (!m_subdescriptor_arg->IsSolvable()) return false;\n+        for (const auto& arg : m_subdescriptor_args) {\n+            if (!arg->IsSolvable()) return false;\n         }\n         return true;\n     }\n@@ -518,8 +519,8 @@ class DescriptorImpl : public Descriptor\n         for (const auto& pubkey : m_pubkey_args) {\n             if (pubkey->IsRange()) return true;\n         }\n-        if (m_subdescriptor_arg) {\n-            if (m_subdescriptor_arg->IsRange()) return true;\n+        for (const auto& arg : m_subdescriptor_args) {\n+            if (arg->IsRange()) return true;\n         }\n         return false;\n     }\n@@ -541,10 +542,10 @@ class DescriptorImpl : public Descriptor\n             }\n             ret += std::move(tmp);\n         }\n-        if (m_subdescriptor_arg) {\n+        for (const auto& scriptarg : m_subdescriptor_args) {\n             if (pos++) ret += \",\";\n             std::string tmp;\n-            if (!m_subdescriptor_arg->ToStringHelper(arg, tmp, priv, normalized)) return false;\n+            if (!scriptarg->ToStringHelper(arg, tmp, priv, normalized)) return false;\n             ret += std::move(tmp);\n         }\n         out = std::move(ret) + \")\";\n@@ -577,30 +578,29 @@ class DescriptorImpl : public Descriptor\n         std::vector<std::pair<CPubKey, KeyOriginInfo>> entries;\n         entries.reserve(m_pubkey_args.size());\n \n-        // Construct temporary data in `entries` and `subscripts`, to avoid producing output in case of failure.\n+        // Construct temporary data in `entries`, `subscripts`, and `subprovider` to avoid producing output in case of failure.\n         for (const auto& p : m_pubkey_args) {\n             entries.emplace_back();\n             if (!p->GetPubKey(pos, arg, entries.back().first, entries.back().second, read_cache, write_cache)) return false;\n         }\n         std::vector<CScript> subscripts;\n-        if (m_subdescriptor_arg) {\n-            FlatSigningProvider subprovider;\n-            if (!m_subdescriptor_arg->ExpandHelper(pos, arg, read_cache, subscripts, subprovider, write_cache)) return false;\n-            assert(subscripts.size() == 1);\n-            out = Merge(out, subprovider);\n+        FlatSigningProvider subprovider;\n+        for (const auto& subarg : m_subdescriptor_args) {\n+            std::vector<CScript> outscripts;\n+            if (!subarg->ExpandHelper(pos, arg, read_cache, outscripts, subprovider, write_cache)) return false;\n+            assert(outscripts.size() == 1);\n+            subscripts.emplace_back(std::move(outscripts[0]));\n         }\n+        out = Merge(std::move(out), std::move(subprovider));\n \n         std::vector<CPubKey> pubkeys;\n         pubkeys.reserve(entries.size());\n         for (auto& entry : entries) {\n             pubkeys.push_back(entry.first);\n             out.origins.emplace(entry.first.GetID(), std::make_pair<CPubKey, KeyOriginInfo>(CPubKey(entry.first), std::move(entry.second)));\n         }\n-        if (m_subdescriptor_arg) {\n-            output_scripts = MakeScripts(pubkeys, &subscripts[0], out);\n-        } else {\n-            output_scripts = MakeScripts(pubkeys, nullptr, out);\n-        }\n+\n+        output_scripts = MakeScripts(pubkeys, MakeSpan(subscripts), out);\n         return true;\n     }\n \n@@ -621,10 +621,8 @@ class DescriptorImpl : public Descriptor\n             if (!p->GetPrivKey(pos, provider, key)) continue;\n             out.keys.emplace(key.GetPubKey().GetID(), key);\n         }\n-        if (m_subdescriptor_arg) {\n-            FlatSigningProvider subprovider;\n-            m_subdescriptor_arg->ExpandPrivate(pos, provider, subprovider);\n-            out = Merge(out, subprovider);\n+        for (const auto& arg : m_subdescriptor_args) {\n+            arg->ExpandPrivate(pos, provider, out);\n         }\n     }\n \n@@ -637,9 +635,9 @@ class AddressDescriptor final : public DescriptorImpl\n     const CTxDestination m_destination;\n protected:\n     std::string ToStringExtra() const override { return EncodeDestination(m_destination); }\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript*, FlatSigningProvider&) const override { return Vector(GetScriptForDestination(m_destination)); }\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, Span<const CScript>, FlatSigningProvider&) const override { return Vector(GetScriptForDestination(m_destination)); }\n public:\n-    AddressDescriptor(CTxDestination destination) : DescriptorImpl({}, {}, \"addr\"), m_destination(std::move(destination)) {}\n+    AddressDescriptor(CTxDestination destination) : DescriptorImpl({}, \"addr\"), m_destination(std::move(destination)) {}\n     bool IsSolvable() const final { return false; }\n \n     std::optional<OutputType> GetOutputType() const override\n@@ -663,9 +661,9 @@ class RawDescriptor final : public DescriptorImpl\n     const CScript m_script;\n protected:\n     std::string ToStringExtra() const override { return HexStr(m_script); }\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript*, FlatSigningProvider&) const override { return Vector(m_script); }\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, Span<const CScript>, FlatSigningProvider&) const override { return Vector(m_script); }\n public:\n-    RawDescriptor(CScript script) : DescriptorImpl({}, {}, \"raw\"), m_script(std::move(script)) {}\n+    RawDescriptor(CScript script) : DescriptorImpl({}, \"raw\"), m_script(std::move(script)) {}\n     bool IsSolvable() const final { return false; }\n \n     std::optional<OutputType> GetOutputType() const override\n@@ -689,24 +687,24 @@ class RawDescriptor final : public DescriptorImpl\n class PKDescriptor final : public DescriptorImpl\n {\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, const CScript*, FlatSigningProvider&) const override { return Vector(GetScriptForRawPubKey(keys[0])); }\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript>, FlatSigningProvider&) const override { return Vector(GetScriptForRawPubKey(keys[0])); }\n public:\n-    PKDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"pk\") {}\n+    PKDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), \"pk\") {}\n     bool IsSingleType() const final { return true; }\n };\n \n /** A parsed pkh(P) descriptor. */\n class PKHDescriptor final : public DescriptorImpl\n {\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, const CScript*, FlatSigningProvider& out) const override\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript>, FlatSigningProvider& out) const override\n     {\n         CKeyID id = keys[0].GetID();\n         out.pubkeys.emplace(id, keys[0]);\n         return Vector(GetScriptForDestination(PKHash(id)));\n     }\n public:\n-    PKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"pkh\") {}\n+    PKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), \"pkh\") {}\n     std::optional<OutputType> GetOutputType() const override { return OutputType::LEGACY; }\n     bool IsSingleType() const final { return true; }\n };\n@@ -715,14 +713,14 @@ class PKHDescriptor final : public DescriptorImpl\n class WPKHDescriptor final : public DescriptorImpl\n {\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, const CScript*, FlatSigningProvider& out) const override\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript>, FlatSigningProvider& out) const override\n     {\n         CKeyID id = keys[0].GetID();\n         out.pubkeys.emplace(id, keys[0]);\n         return Vector(GetScriptForDestination(WitnessV0KeyHash(id)));\n     }\n public:\n-    WPKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"wpkh\") {}\n+    WPKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), \"wpkh\") {}\n     std::optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n     bool IsSingleType() const final { return true; }\n };\n@@ -731,7 +729,7 @@ class WPKHDescriptor final : public DescriptorImpl\n class ComboDescriptor final : public DescriptorImpl\n {\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, const CScript*, FlatSigningProvider& out) const override\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript>, FlatSigningProvider& out) const override\n     {\n         std::vector<CScript> ret;\n         CKeyID id = keys[0].GetID();\n@@ -747,7 +745,7 @@ class ComboDescriptor final : public DescriptorImpl\n         return ret;\n     }\n public:\n-    ComboDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"combo\") {}\n+    ComboDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), \"combo\") {}\n     bool IsSingleType() const final { return false; }\n };\n \n@@ -758,7 +756,7 @@ class MultisigDescriptor final : public DescriptorImpl\n     const bool m_sorted;\n protected:\n     std::string ToStringExtra() const override { return strprintf(\"%i\", m_threshold); }\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, const CScript*, FlatSigningProvider&) const override {\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript>, FlatSigningProvider&) const override {\n         if (m_sorted) {\n             std::vector<CPubKey> sorted_keys(keys);\n             std::sort(sorted_keys.begin(), sorted_keys.end());\n@@ -767,27 +765,27 @@ class MultisigDescriptor final : public DescriptorImpl\n         return Vector(GetScriptForMultisig(m_threshold, keys));\n     }\n public:\n-    MultisigDescriptor(int threshold, std::vector<std::unique_ptr<PubkeyProvider>> providers, bool sorted = false) : DescriptorImpl(std::move(providers), {}, sorted ? \"sortedmulti\" : \"multi\"), m_threshold(threshold), m_sorted(sorted) {}\n+    MultisigDescriptor(int threshold, std::vector<std::unique_ptr<PubkeyProvider>> providers, bool sorted = false) : DescriptorImpl(std::move(providers), sorted ? \"sortedmulti\" : \"multi\"), m_threshold(threshold), m_sorted(sorted) {}\n     bool IsSingleType() const final { return true; }\n };\n \n /** A parsed sh(...) descriptor. */\n class SHDescriptor final : public DescriptorImpl\n {\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider& out) const override\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, Span<const CScript> scripts, FlatSigningProvider& out) const override\n     {\n-        auto ret = Vector(GetScriptForDestination(ScriptHash(*script)));\n-        if (ret.size()) out.scripts.emplace(CScriptID(*script), *script);\n+        auto ret = Vector(GetScriptForDestination(ScriptHash(scripts[0])));\n+        if (ret.size()) out.scripts.emplace(CScriptID(scripts[0]), scripts[0]);\n         return ret;\n     }\n public:\n     SHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"sh\") {}\n \n     std::optional<OutputType> GetOutputType() const override\n     {\n-        assert(m_subdescriptor_arg);\n-        if (m_subdescriptor_arg->GetOutputType() == OutputType::BECH32) return OutputType::P2SH_SEGWIT;\n+        assert(m_subdescriptor_args.size() == 1);\n+        if (m_subdescriptor_args[0]->GetOutputType() == OutputType::BECH32) return OutputType::P2SH_SEGWIT;\n         return OutputType::LEGACY;\n     }\n     bool IsSingleType() const final { return true; }\n@@ -797,10 +795,10 @@ class SHDescriptor final : public DescriptorImpl\n class WSHDescriptor final : public DescriptorImpl\n {\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider& out) const override\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, Span<const CScript> scripts, FlatSigningProvider& out) const override\n     {\n-        auto ret = Vector(GetScriptForDestination(WitnessV0ScriptHash(*script)));\n-        if (ret.size()) out.scripts.emplace(CScriptID(*script), *script);\n+        auto ret = Vector(GetScriptForDestination(WitnessV0ScriptHash(scripts[0])));\n+        if (ret.size()) out.scripts.emplace(CScriptID(scripts[0]), scripts[0]);\n         return ret;\n     }\n public:"
      }
    ]
  },
  {
    "sha": "6ba5dda0c9de75196c6a427d9e59d39e5a41bff7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmE1ZGRhMGM5ZGU3NTE5NmM2YTQyN2Q5ZTU5ZDM5ZTVhNDFiZmY3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-07T01:47:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-30T00:38:41Z"
      },
      "message": "Account for key cache indices in subexpressions\n\nThis has no effect for now, as the only fragments with sub-script\nexpressions (sh, wsh) only allow one, and don't have key expressions\nin them.\n\nA future Taproot descriptor will however violate both, and we want\nthe keys in different sub-scripts to be assigned non-overlapping\ncache indices.",
      "tree": {
        "sha": "f88edd0640d613aecc250619d8bec1259eafd8db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f88edd0640d613aecc250619d8bec1259eafd8db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ba5dda0c9de75196c6a427d9e59d39e5a41bff7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba5dda0c9de75196c6a427d9e59d39e5a41bff7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ba5dda0c9de75196c6a427d9e59d39e5a41bff7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba5dda0c9de75196c6a427d9e59d39e5a41bff7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4441c6f3c046c0b28ce3f0ca6d938af71d797586",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4441c6f3c046c0b28ce3f0ca6d938af71d797586",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4441c6f3c046c0b28ce3f0ca6d938af71d797586"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a1ef23ea1a550b4534fc3236ec0b5543c84846e9",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba5dda0c9de75196c6a427d9e59d39e5a41bff7/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba5dda0c9de75196c6a427d9e59d39e5a41bff7/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=6ba5dda0c9de75196c6a427d9e59d39e5a41bff7",
        "patch": "@@ -939,7 +939,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkey(uint32_t key_exp_index, const Span<c\n }\n \n /** Parse a script in a particular context. */\n-std::unique_ptr<DescriptorImpl> ParseScript(uint32_t key_exp_index, Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     using namespace spanparsing;\n \n@@ -948,16 +948,19 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t key_exp_index, Span<const c\n     if (Func(\"pk\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n+        ++key_exp_index;\n         return std::make_unique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n+        ++key_exp_index;\n         return std::make_unique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, true, out, error);\n         if (!pubkey) return nullptr;\n+        ++key_exp_index;\n         return std::make_unique<ComboDescriptor>(std::move(pubkey));\n     } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n         error = \"Cannot have combo in non-top level\";\n@@ -1011,6 +1014,7 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t key_exp_index, Span<const c\n     if (ctx != ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, false, out, error);\n         if (!pubkey) return nullptr;\n+        key_exp_index++;\n         return std::make_unique<WPKHDescriptor>(std::move(pubkey));\n     } else if (ctx == ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n         error = \"Cannot have wpkh within wsh\";\n@@ -1177,7 +1181,8 @@ std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProv\n {\n     Span<const char> sp{descriptor};\n     if (!CheckChecksum(sp, require_checksum, error)) return nullptr;\n-    auto ret = ParseScript(0, sp, ParseScriptContext::TOP, out, error);\n+    uint32_t key_exp_index = 0;\n+    auto ret = ParseScript(key_exp_index, sp, ParseScriptContext::TOP, out, error);\n     if (sp.size() == 0 && ret) return std::unique_ptr<Descriptor>(std::move(ret));\n     return nullptr;\n }"
      }
    ]
  },
  {
    "sha": "17e006ff8d5e42f22474c5191d1b745bbc97571f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2UwMDZmZjhkNWU0MmYyMjQ3NGM1MTkxZDFiNzQ1YmJjOTc1NzFm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-08T03:18:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-30T00:44:07Z"
      },
      "message": "refactor: split off subscript logic from ToStringHelper\n\nThis will allow subclasses to overwrite the serialization of subscript\narguments without needing to reimplement all the rest of the ToString\nlogic.",
      "tree": {
        "sha": "c085dd32cf856ac73a23e7d7268ef23043e63390",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c085dd32cf856ac73a23e7d7268ef23043e63390"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17e006ff8d5e42f22474c5191d1b745bbc97571f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17e006ff8d5e42f22474c5191d1b745bbc97571f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17e006ff8d5e42f22474c5191d1b745bbc97571f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17e006ff8d5e42f22474c5191d1b745bbc97571f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ba5dda0c9de75196c6a427d9e59d39e5a41bff7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba5dda0c9de75196c6a427d9e59d39e5a41bff7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ba5dda0c9de75196c6a427d9e59d39e5a41bff7"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 16,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6253f1b2b096dcc3fda37e5b77b6aeac6d93f92e",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 7,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17e006ff8d5e42f22474c5191d1b745bbc97571f/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17e006ff8d5e42f22474c5191d1b745bbc97571f/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=17e006ff8d5e42f22474c5191d1b745bbc97571f",
        "patch": "@@ -525,6 +525,18 @@ class DescriptorImpl : public Descriptor\n         return false;\n     }\n \n+    virtual bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, bool priv, bool normalized) const\n+    {\n+        size_t pos = 0;\n+        for (const auto& scriptarg : m_subdescriptor_args) {\n+            if (pos++) ret += \",\";\n+            std::string tmp;\n+            if (!scriptarg->ToStringHelper(arg, tmp, priv, normalized)) return false;\n+            ret += std::move(tmp);\n+        }\n+        return true;\n+    }\n+\n     bool ToStringHelper(const SigningProvider* arg, std::string& out, bool priv, bool normalized) const\n     {\n         std::string extra = ToStringExtra();\n@@ -542,13 +554,10 @@ class DescriptorImpl : public Descriptor\n             }\n             ret += std::move(tmp);\n         }\n-        for (const auto& scriptarg : m_subdescriptor_args) {\n-            if (pos++) ret += \",\";\n-            std::string tmp;\n-            if (!scriptarg->ToStringHelper(arg, tmp, priv, normalized)) return false;\n-            ret += std::move(tmp);\n-        }\n-        out = std::move(ret) + \")\";\n+        std::string subscript;\n+        if (!ToStringSubScriptHelper(arg, subscript, priv, normalized)) return false;\n+        if (pos && subscript.size()) ret += ',';\n+        out = std::move(ret) + std::move(subscript) + \")\";\n         return true;\n     }\n "
      }
    ]
  },
  {
    "sha": "33275a96490445e293c322a29a3b146ccb91083c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzI3NWE5NjQ5MDQ0NWUyOTNjMzIyYTI5YTNiMTQ2Y2NiOTEwODNj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-17T23:37:40Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-30T00:44:13Z"
      },
      "message": "refactor: move uncompressed-permitted logic into ParsePubkey*\n\nThis is a preparation for parsing xonly pubkeys, which will complicate\nthis logic. It's cleaner to put the decision logic close to the public\nkey parsing itself.",
      "tree": {
        "sha": "f76f2be3dfbe60271821e4e93e1c42efb0e8ca13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f76f2be3dfbe60271821e4e93e1c42efb0e8ca13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33275a96490445e293c322a29a3b146ccb91083c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33275a96490445e293c322a29a3b146ccb91083c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33275a96490445e293c322a29a3b146ccb91083c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33275a96490445e293c322a29a3b146ccb91083c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17e006ff8d5e42f22474c5191d1b745bbc97571f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17e006ff8d5e42f22474c5191d1b745bbc97571f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17e006ff8d5e42f22474c5191d1b745bbc97571f"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 14,
      "deletions": 12
    },
    "files": [
      {
        "sha": "59c3b2e0a6d01a7c9abeb06352295b9d62cbb314",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33275a96490445e293c322a29a3b146ccb91083c/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33275a96490445e293c322a29a3b146ccb91083c/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=33275a96490445e293c322a29a3b146ccb91083c",
        "patch": "@@ -821,9 +821,10 @@ class WSHDescriptor final : public DescriptorImpl\n ////////////////////////////////////////////////////////////////////////////\n \n enum class ParseScriptContext {\n-    TOP,\n-    P2SH,\n-    P2WSH,\n+    TOP,     //!< Top-level context (script goes directly in scriptPubKey)\n+    P2SH,    //!< Inside sh() (script becomes P2SH redeemScript)\n+    P2WPKH,  //!< Inside wpkh() (no script, pubkey only)\n+    P2WSH,   //!< Inside wsh() (script becomes v0 witness script)\n };\n \n /** Parse a key path, being passed a split list of elements (the first element is ignored). */\n@@ -850,10 +851,11 @@ enum class ParseScriptContext {\n }\n \n /** Parse a public key that excludes origin information. */\n-std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n+std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     using namespace spanparsing;\n \n+    bool permit_uncompressed = ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH;\n     auto split = Split(sp, '/');\n     std::string str(split[0].begin(), split[0].end());\n     if (str.size() == 0) {\n@@ -911,7 +913,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const S\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(uint32_t key_exp_index, const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n+std::unique_ptr<PubkeyProvider> ParsePubkey(uint32_t key_exp_index, const Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     using namespace spanparsing;\n \n@@ -920,7 +922,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkey(uint32_t key_exp_index, const Span<c\n         error = \"Multiple ']' characters found for a single pubkey\";\n         return nullptr;\n     }\n-    if (origin_split.size() == 1) return ParsePubkeyInner(key_exp_index, origin_split[0], permit_uncompressed, out, error);\n+    if (origin_split.size() == 1) return ParsePubkeyInner(key_exp_index, origin_split[0], ctx, out, error);\n     if (origin_split[0].empty() || origin_split[0][0] != '[') {\n         error = strprintf(\"Key origin start '[ character expected but not found, got '%c' instead\",\n                           origin_split[0].empty() ? /** empty, implies split char */ ']' : origin_split[0][0]);\n@@ -942,7 +944,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkey(uint32_t key_exp_index, const Span<c\n     assert(fpr_bytes.size() == 4);\n     std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n     if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n-    auto provider = ParsePubkeyInner(key_exp_index, origin_split[1], permit_uncompressed, out, error);\n+    auto provider = ParsePubkeyInner(key_exp_index, origin_split[1], ctx, out, error);\n     if (!provider) return nullptr;\n     return std::make_unique<OriginPubkeyProvider>(key_exp_index, std::move(info), std::move(provider));\n }\n@@ -955,19 +957,19 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n     auto expr = Expr(sp);\n     bool sorted_multi = false;\n     if (Func(\"pk\", expr)) {\n-        auto pubkey = ParsePubkey(key_exp_index, expr, ctx != ParseScriptContext::P2WSH, out, error);\n+        auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n         if (!pubkey) return nullptr;\n         ++key_exp_index;\n         return std::make_unique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n-        auto pubkey = ParsePubkey(key_exp_index, expr, ctx != ParseScriptContext::P2WSH, out, error);\n+        auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n         if (!pubkey) return nullptr;\n         ++key_exp_index;\n         return std::make_unique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        auto pubkey = ParsePubkey(key_exp_index, expr, true, out, error);\n+        auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n         if (!pubkey) return nullptr;\n         ++key_exp_index;\n         return std::make_unique<ComboDescriptor>(std::move(pubkey));\n@@ -990,7 +992,7 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n                 return nullptr;\n             }\n             auto arg = Expr(expr);\n-            auto pk = ParsePubkey(key_exp_index, arg, ctx != ParseScriptContext::P2WSH, out, error);\n+            auto pk = ParsePubkey(key_exp_index, arg, ctx, out, error);\n             if (!pk) return nullptr;\n             script_size += pk->GetSize() + 1;\n             providers.emplace_back(std::move(pk));\n@@ -1021,7 +1023,7 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n         return std::make_unique<MultisigDescriptor>(thres, std::move(providers), sorted_multi);\n     }\n     if (ctx != ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n-        auto pubkey = ParsePubkey(key_exp_index, expr, false, out, error);\n+        auto pubkey = ParsePubkey(key_exp_index, expr, ParseScriptContext::P2WPKH, out, error);\n         if (!pubkey) return nullptr;\n         key_exp_index++;\n         return std::make_unique<WPKHDescriptor>(std::move(pubkey));"
      }
    ]
  },
  {
    "sha": "0b188b751f970027c52729e0c223cc9257669322",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjE4OGI3NTFmOTcwMDI3YzUyNzI5ZTBjMjIzY2M5MjU3NjY5MzIy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-02-08T03:31:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-30T00:44:13Z"
      },
      "message": "Clean up context dependent checks in descriptor parsing\n\nThis changes all context dependent checks in the parser to be\ndisjunctions of equality checks, rather than also including inequalities.\nThis makes sure that adding a new context enum in the future won't change\nsemantics for existing checks.\n\nThe error messages are also made a bit more consistent.",
      "tree": {
        "sha": "27197bbcfa9663cbf008a074d7d621949fe904ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27197bbcfa9663cbf008a074d7d621949fe904ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b188b751f970027c52729e0c223cc9257669322",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b188b751f970027c52729e0c223cc9257669322",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b188b751f970027c52729e0c223cc9257669322",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b188b751f970027c52729e0c223cc9257669322/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33275a96490445e293c322a29a3b146ccb91083c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33275a96490445e293c322a29a3b146ccb91083c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33275a96490445e293c322a29a3b146ccb91083c"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 22,
      "deletions": 16
    },
    "files": [
      {
        "sha": "5f085d233a51234a8e3890b5d3b1b62c3fa5d616",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 10,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b188b751f970027c52729e0c223cc9257669322/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b188b751f970027c52729e0c223cc9257669322/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=0b188b751f970027c52729e0c223cc9257669322",
        "patch": "@@ -973,8 +973,8 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n         if (!pubkey) return nullptr;\n         ++key_exp_index;\n         return std::make_unique<ComboDescriptor>(std::move(pubkey));\n-    } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        error = \"Cannot have combo in non-top level\";\n+    } else if (Func(\"combo\", expr)) {\n+        error = \"Can only have combo() at top level\";\n         return nullptr;\n     }\n     if ((sorted_multi = Func(\"sortedmulti\", expr)) || Func(\"multi\", expr)) {\n@@ -1022,29 +1022,29 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n         }\n         return std::make_unique<MultisigDescriptor>(thres, std::move(providers), sorted_multi);\n     }\n-    if (ctx != ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n+    if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH) && Func(\"wpkh\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, ParseScriptContext::P2WPKH, out, error);\n         if (!pubkey) return nullptr;\n         key_exp_index++;\n         return std::make_unique<WPKHDescriptor>(std::move(pubkey));\n-    } else if (ctx == ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n-        error = \"Cannot have wpkh within wsh\";\n+    } else if (Func(\"wpkh\", expr)) {\n+        error = \"Can only have wpkh() at top level or inside sh()\";\n         return nullptr;\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"sh\", expr)) {\n         auto desc = ParseScript(key_exp_index, expr, ParseScriptContext::P2SH, out, error);\n         if (!desc || expr.size()) return nullptr;\n         return std::make_unique<SHDescriptor>(std::move(desc));\n-    } else if (ctx != ParseScriptContext::TOP && Func(\"sh\", expr)) {\n-        error = \"Cannot have sh in non-top level\";\n+    } else if (Func(\"sh\", expr)) {\n+        error = \"Can only have sh() at top level\";\n         return nullptr;\n     }\n-    if (ctx != ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n+    if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH) && Func(\"wsh\", expr)) {\n         auto desc = ParseScript(key_exp_index, expr, ParseScriptContext::P2WSH, out, error);\n         if (!desc || expr.size()) return nullptr;\n         return std::make_unique<WSHDescriptor>(std::move(desc));\n-    } else if (ctx == ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n-        error = \"Cannot have wsh within wsh\";\n+    } else if (Func(\"wsh\", expr)) {\n+        error = \"Can only have wsh() at top level or inside sh()\";\n         return nullptr;\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"addr\", expr)) {\n@@ -1054,6 +1054,9 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n             return nullptr;\n         }\n         return std::make_unique<AddressDescriptor>(std::move(dest));\n+    } else if (Func(\"addr\", expr)) {\n+        error = \"Can only have addr() at top level\";\n+        return nullptr;\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"raw\", expr)) {\n         std::string str(expr.begin(), expr.end());\n@@ -1063,6 +1066,9 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n         }\n         auto bytes = ParseHex(str);\n         return std::make_unique<RawDescriptor>(CScript(bytes.begin(), bytes.end()));\n+    } else if (Func(\"raw\", expr)) {\n+        error = \"Can only have raw() at top level\";\n+        return nullptr;\n     }\n     if (ctx == ParseScriptContext::P2SH) {\n         error = \"A function is needed within P2SH\";"
      },
      {
        "sha": "ea41a0372843bfcc90ce5a216a222962c495ca3d",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b188b751f970027c52729e0c223cc9257669322/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b188b751f970027c52729e0c223cc9257669322/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=0b188b751f970027c52729e0c223cc9257669322",
        "patch": "@@ -24,7 +24,7 @@ void CheckUnparsable(const std::string& prv, const std::string& pub, const std::\n     auto parse_pub = Parse(pub, keys_pub, error);\n     BOOST_CHECK_MESSAGE(!parse_priv, prv);\n     BOOST_CHECK_MESSAGE(!parse_pub, pub);\n-    BOOST_CHECK(error == expected_error);\n+    BOOST_CHECK_EQUAL(error, expected_error);\n }\n \n constexpr int DEFAULT = 0;\n@@ -355,12 +355,12 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n \n     // Check for invalid nesting of structures\n     CheckUnparsable(\"sh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"A function is needed within P2SH\"); // P2SH needs a script, not a key\n-    CheckUnparsable(\"sh(combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", \"Cannot have combo in non-top level\"); // Old must be top level\n+    CheckUnparsable(\"sh(combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", \"Can only have combo() at top level\"); // Old must be top level\n     CheckUnparsable(\"wsh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wsh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"A function is needed within P2WSH\"); // P2WSH needs a script, not a key\n-    CheckUnparsable(\"wsh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", \"Cannot have wpkh within wsh\"); // Cannot embed witness inside witness\n-    CheckUnparsable(\"wsh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", \"Cannot have sh in non-top level\"); // Cannot embed P2SH inside P2WSH\n-    CheckUnparsable(\"sh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", \"Cannot have sh in non-top level\"); // Cannot embed P2SH inside P2SH\n-    CheckUnparsable(\"wsh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", \"Cannot have wsh within wsh\"); // Cannot embed P2WSH inside P2WSH\n+    CheckUnparsable(\"wsh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", \"Can only have wpkh() at top level or inside sh()\"); // Cannot embed witness inside witness\n+    CheckUnparsable(\"wsh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", \"Can only have sh() at top level\"); // Cannot embed P2SH inside P2WSH\n+    CheckUnparsable(\"sh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", \"Can only have sh() at top level\"); // Cannot embed P2SH inside P2SH\n+    CheckUnparsable(\"wsh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", \"Can only have wsh() at top level or inside sh()\"); // Cannot embed P2WSH inside P2WSH\n \n     // Checksums\n     Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t\", \"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, OutputType::LEGACY, {{0x8000006FUL,222},{0}});"
      }
    ]
  }
]