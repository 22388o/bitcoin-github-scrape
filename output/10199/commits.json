[
  {
    "sha": "c0a273f4c8bed50de9fc227d98d90dc5ff755515",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGEyNzNmNGM4YmVkNTBkZTlmYzIyN2Q5OGQ5MGRjNWZmNzU1NTE1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-23T20:13:41Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-20T19:46:15Z"
      },
      "message": "Change file format for fee estimates.\n\nMove buckets and bucketMap to be stored as part of overall serialization of estimator.\nAdd some placeholder data so file format is only changed once.\nMaintain 3 different TxConfirmStats with potential for different decays and scales.",
      "tree": {
        "sha": "5888822ef9969015299d7f1f9f6a02c5634d2c09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5888822ef9969015299d7f1f9f6a02c5634d2c09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0a273f4c8bed50de9fc227d98d90dc5ff755515",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0a273f4c8bed50de9fc227d98d90dc5ff755515",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0a273f4c8bed50de9fc227d98d90dc5ff755515",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0a273f4c8bed50de9fc227d98d90dc5ff755515/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14c948987f0b5128af4dcf9864cf5fa62977c401",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14c948987f0b5128af4dcf9864cf5fa62977c401",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14c948987f0b5128af4dcf9864cf5fa62977c401"
      }
    ],
    "stats": {
      "total": 233,
      "additions": 156,
      "deletions": 77
    },
    "files": [
      {
        "sha": "0f3f2c63d26aa47cb822c27a806df17fac91f727",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 151,
        "deletions": 77,
        "changes": 228,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0a273f4c8bed50de9fc227d98d90dc5ff755515/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0a273f4c8bed50de9fc227d98d90dc5ff755515/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=c0a273f4c8bed50de9fc227d98d90dc5ff755515",
        "patch": "@@ -26,8 +26,8 @@ class TxConfirmStats\n {\n private:\n     //Define the buckets we will group transactions into\n-    std::vector<double> buckets;              // The upper-bound of the range for the bucket (inclusive)\n-    std::map<double, unsigned int> bucketMap; // Map of bucket upper-bound to index into all vectors by bucket\n+    const std::vector<double>& buckets;              // The upper-bound of the range for the bucket (inclusive)\n+    const std::map<double, unsigned int>& bucketMap; // Map of bucket upper-bound to index into all vectors by bucket\n \n     // For each bucket X:\n     // Count the total # of txs in each bucket\n@@ -38,9 +38,11 @@ class TxConfirmStats\n \n     // Count the total # of txs confirmed within Y blocks in each bucket\n     // Track the historical moving average of theses totals over blocks\n-    std::vector<std::vector<double> > confAvg; // confAvg[Y][X]\n+    std::vector<std::vector<double>> confAvg; // confAvg[Y][X]\n     // and calculate the totals for the current block to update the moving averages\n-    std::vector<std::vector<int> > curBlockConf; // curBlockConf[Y][X]\n+    std::vector<std::vector<int>> curBlockConf; // curBlockConf[Y][X]\n+\n+    std::vector<std::vector<double>> failAvg; // future use\n \n     // Sum the total feerate of all tx's in each bucket\n     // Track the historical moving average of this total over blocks\n@@ -53,13 +55,17 @@ class TxConfirmStats\n \n     double decay;\n \n+    unsigned int scale;\n+\n     // Mempool counts of outstanding transactions\n     // For each bucket X, track the number of transactions in the mempool\n     // that are unconfirmed for each possible confirmation value Y\n     std::vector<std::vector<int> > unconfTxs;  //unconfTxs[Y][X]\n     // transactions still unconfirmed after MAX_CONFIRMS for each bucket\n     std::vector<int> oldUnconfTxs;\n \n+    void resizeInMemoryCounters(size_t newbuckets);\n+\n public:\n     /**\n      * Create new TxConfirmStats. This is called by BlockPolicyEstimator's\n@@ -68,7 +74,8 @@ class TxConfirmStats\n      * @param maxConfirms max number of confirms to track\n      * @param decay how much to decay the historical moving average per block\n      */\n-    TxConfirmStats(const std::vector<double>& defaultBuckets, unsigned int maxConfirms, double decay);\n+    TxConfirmStats(const std::vector<double>& defaultBuckets, const std::map<double, unsigned int>& defaultBucketMap,\n+                   unsigned int maxConfirms, double decay);\n \n     /** Clear the state of the curBlock variables to start counting for the new block */\n     void ClearCurrent(unsigned int nBlockHeight);\n@@ -116,32 +123,39 @@ class TxConfirmStats\n      * Read saved state of estimation data from a file and replace all internal data structures and\n      * variables with this state.\n      */\n-    void Read(CAutoFile& filein);\n+    void Read(CAutoFile& filein, int nFileVersion, size_t numBuckets);\n };\n \n \n TxConfirmStats::TxConfirmStats(const std::vector<double>& defaultBuckets,\n+                                const std::map<double, unsigned int>& defaultBucketMap,\n                                unsigned int maxConfirms, double _decay)\n+    : buckets(defaultBuckets), bucketMap(defaultBucketMap)\n {\n     decay = _decay;\n-    for (unsigned int i = 0; i < defaultBuckets.size(); i++) {\n-        buckets.push_back(defaultBuckets[i]);\n-        bucketMap[defaultBuckets[i]] = i;\n-    }\n+    scale = 1;\n     confAvg.resize(maxConfirms);\n-    curBlockConf.resize(maxConfirms);\n-    unconfTxs.resize(maxConfirms);\n     for (unsigned int i = 0; i < maxConfirms; i++) {\n         confAvg[i].resize(buckets.size());\n-        curBlockConf[i].resize(buckets.size());\n-        unconfTxs[i].resize(buckets.size());\n     }\n \n-    oldUnconfTxs.resize(buckets.size());\n-    curBlockTxCt.resize(buckets.size());\n     txCtAvg.resize(buckets.size());\n-    curBlockVal.resize(buckets.size());\n     avg.resize(buckets.size());\n+\n+    resizeInMemoryCounters(buckets.size());\n+}\n+\n+void TxConfirmStats::resizeInMemoryCounters(size_t newbuckets) {\n+    curBlockConf.resize(GetMaxConfirms());\n+    // newbuckets must be passed in because the buckets referred to during Read have not been updated yet.\n+    unconfTxs.resize(GetMaxConfirms());\n+    for (unsigned int i = 0; i < unconfTxs.size(); i++) {\n+        curBlockConf[i].resize(newbuckets);\n+        unconfTxs[i].resize(newbuckets);\n+    }\n+    oldUnconfTxs.resize(newbuckets);\n+    curBlockTxCt.resize(newbuckets);\n+    curBlockVal.resize(newbuckets);\n }\n \n // Zero out the data for the current block\n@@ -283,70 +297,55 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n void TxConfirmStats::Write(CAutoFile& fileout) const\n {\n     fileout << decay;\n-    fileout << buckets;\n+    fileout << scale;\n     fileout << avg;\n     fileout << txCtAvg;\n     fileout << confAvg;\n+    fileout << failAvg;\n }\n \n-void TxConfirmStats::Read(CAutoFile& filein)\n+void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets)\n {\n-    // Read data file into temporary variables and do some very basic sanity checking\n-    std::vector<double> fileBuckets;\n-    std::vector<double> fileAvg;\n-    std::vector<std::vector<double> > fileConfAvg;\n-    std::vector<double> fileTxCtAvg;\n-    double fileDecay;\n+    // Read data file and do some very basic sanity checking\n+    // buckets and bucketMap are not updated yet, so don't access them\n+    // If there is a read failure, we'll just discard this entire object anyway\n     size_t maxConfirms;\n-    size_t numBuckets;\n-\n-    filein >> fileDecay;\n-    if (fileDecay <= 0 || fileDecay >= 1)\n-        throw std::runtime_error(\"Corrupt estimates file. Decay must be between 0 and 1 (non-inclusive)\");\n-    filein >> fileBuckets;\n-    numBuckets = fileBuckets.size();\n-    if (numBuckets <= 1 || numBuckets > 1000)\n-        throw std::runtime_error(\"Corrupt estimates file. Must have between 2 and 1000 feerate buckets\");\n-    filein >> fileAvg;\n-    if (fileAvg.size() != numBuckets)\n+\n+    // The current version will store the decay with each individual TxConfirmStats and also keep a scale factor\n+    if (nFileVersion >= 149900) {\n+        filein >> decay;\n+        if (decay <= 0 || decay >= 1) {\n+            throw std::runtime_error(\"Corrupt estimates file. Decay must be between 0 and 1 (non-inclusive)\");\n+        }\n+        filein >> scale; //Unused for now\n+    }\n+\n+    filein >> avg;\n+    if (avg.size() != numBuckets) {\n         throw std::runtime_error(\"Corrupt estimates file. Mismatch in feerate average bucket count\");\n-    filein >> fileTxCtAvg;\n-    if (fileTxCtAvg.size() != numBuckets)\n+    }\n+    filein >> txCtAvg;\n+    if (txCtAvg.size() != numBuckets) {\n         throw std::runtime_error(\"Corrupt estimates file. Mismatch in tx count bucket count\");\n-    filein >> fileConfAvg;\n-    maxConfirms = fileConfAvg.size();\n-    if (maxConfirms <= 0 || maxConfirms > 6 * 24 * 7) // one week\n+    }\n+    filein >> confAvg;\n+    maxConfirms = confAvg.size();\n+    if (maxConfirms <= 0 || maxConfirms > 6 * 24 * 7) { // one week\n         throw std::runtime_error(\"Corrupt estimates file.  Must maintain estimates for between 1 and 1008 (one week) confirms\");\n-    for (unsigned int i = 0; i < maxConfirms; i++) {\n-        if (fileConfAvg[i].size() != numBuckets)\n-            throw std::runtime_error(\"Corrupt estimates file. Mismatch in feerate conf average bucket count\");\n     }\n-    // Now that we've processed the entire feerate estimate data file and not\n-    // thrown any errors, we can copy it to our data structures\n-    decay = fileDecay;\n-    buckets = fileBuckets;\n-    avg = fileAvg;\n-    confAvg = fileConfAvg;\n-    txCtAvg = fileTxCtAvg;\n-    bucketMap.clear();\n-\n-    // Resize the current block variables which aren't stored in the data file\n-    // to match the number of confirms and buckets\n-    curBlockConf.resize(maxConfirms);\n     for (unsigned int i = 0; i < maxConfirms; i++) {\n-        curBlockConf[i].resize(buckets.size());\n+        if (confAvg[i].size() != numBuckets) {\n+            throw std::runtime_error(\"Corrupt estimates file. Mismatch in feerate conf average bucket count\");\n+        }\n     }\n-    curBlockTxCt.resize(buckets.size());\n-    curBlockVal.resize(buckets.size());\n \n-    unconfTxs.resize(maxConfirms);\n-    for (unsigned int i = 0; i < maxConfirms; i++) {\n-        unconfTxs[i].resize(buckets.size());\n+    if (nFileVersion >= 149900) {\n+        filein >> failAvg;\n     }\n-    oldUnconfTxs.resize(buckets.size());\n \n-    for (unsigned int i = 0; i < buckets.size(); i++)\n-        bucketMap[buckets[i]] = i;\n+    // Resize the current block variables which aren't stored in the data file\n+    // to match the number of confirms and buckets\n+    resizeInMemoryCounters(numBuckets);\n \n     LogPrint(BCLog::ESTIMATEFEE, \"Reading estimates: %u buckets counting confirms up to %u blocks\\n\",\n              numBuckets, maxConfirms);\n@@ -413,17 +412,25 @@ CBlockPolicyEstimator::CBlockPolicyEstimator()\n {\n     static_assert(MIN_BUCKET_FEERATE > 0, \"Min feerate must be nonzero\");\n     minTrackedFee = CFeeRate(MIN_BUCKET_FEERATE);\n-    std::vector<double> vfeelist;\n-    for (double bucketBoundary = minTrackedFee.GetFeePerK(); bucketBoundary <= MAX_BUCKET_FEERATE; bucketBoundary *= FEE_SPACING) {\n-        vfeelist.push_back(bucketBoundary);\n+    size_t bucketIndex = 0;\n+    for (double bucketBoundary = minTrackedFee.GetFeePerK(); bucketBoundary <= MAX_BUCKET_FEERATE; bucketBoundary *= FEE_SPACING, bucketIndex++) {\n+        buckets.push_back(bucketBoundary);\n+        bucketMap[bucketBoundary] = bucketIndex;\n     }\n-    vfeelist.push_back(INF_FEERATE);\n-    feeStats = new TxConfirmStats(vfeelist, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY);\n+    buckets.push_back(INF_FEERATE);\n+    bucketMap[INF_FEERATE] = bucketIndex;\n+    assert(bucketMap.size() == buckets.size());\n+\n+    feeStats = new TxConfirmStats(buckets, bucketMap, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY);\n+    shortStats = new TxConfirmStats(buckets, bucketMap, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY);\n+    longStats = new TxConfirmStats(buckets, bucketMap, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY);\n }\n \n CBlockPolicyEstimator::~CBlockPolicyEstimator()\n {\n     delete feeStats;\n+    delete shortStats;\n+    delete longStats;\n }\n \n void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate)\n@@ -580,10 +587,15 @@ bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n {\n     try {\n         LOCK(cs_feeEstimator);\n-        fileout << 139900; // version required to read: 0.13.99 or later\n+        fileout << 149900; // version required to read: 0.14.99 or later\n         fileout << CLIENT_VERSION; // version that wrote the file\n         fileout << nBestSeenHeight;\n+        unsigned int future1 = 0, future2 = 0;\n+        fileout << future1 << future2;\n+        fileout << buckets;\n         feeStats->Write(fileout);\n+        shortStats->Write(fileout);\n+        longStats->Write(fileout);\n     }\n     catch (const std::exception&) {\n         LogPrintf(\"CBlockPolicyEstimator::Write(): unable to read policy estimator data (non-fatal)\\n\");\n@@ -596,17 +608,79 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n {\n     try {\n         LOCK(cs_feeEstimator);\n-        int nVersionRequired, nVersionThatWrote, nFileBestSeenHeight;\n+        int nVersionRequired, nVersionThatWrote;\n+        unsigned int nFileBestSeenHeight;\n         filein >> nVersionRequired >> nVersionThatWrote;\n         if (nVersionRequired > CLIENT_VERSION)\n             return error(\"CBlockPolicyEstimator::Read(): up-version (%d) fee estimate file\", nVersionRequired);\n+\n+        // Read fee estimates file into temporary variables so existing data\n+        // structures aren't corrupted if there is an exception.\n         filein >> nFileBestSeenHeight;\n-        feeStats->Read(filein);\n-        nBestSeenHeight = nFileBestSeenHeight;\n-        // if nVersionThatWrote < 139900 then another TxConfirmStats (for priority) follows but can be ignored.\n+\n+        if (nVersionThatWrote < 149900) {\n+            // Read the old fee estimates file for temporary use, but then discard.  Will start collecting data from scratch.\n+            // decay is stored before buckets in old versions, so pre-read decay and pass into TxConfirmStats constructor\n+            double tempDecay;\n+            filein >> tempDecay;\n+            if (tempDecay <= 0 || tempDecay >= 1)\n+                throw std::runtime_error(\"Corrupt estimates file. Decay must be between 0 and 1 (non-inclusive)\");\n+\n+            std::vector<double> tempBuckets;\n+            filein >> tempBuckets;\n+            size_t tempNum = tempBuckets.size();\n+            if (tempNum <= 1 || tempNum > 1000)\n+                throw std::runtime_error(\"Corrupt estimates file. Must have between 2 and 1000 feerate buckets\");\n+\n+            std::map<double, unsigned int> tempMap;\n+\n+            std::unique_ptr<TxConfirmStats> tempFeeStats(new TxConfirmStats(tempBuckets, tempMap, MAX_BLOCK_CONFIRMS, tempDecay));\n+            tempFeeStats->Read(filein, nVersionThatWrote, tempNum);\n+            // if nVersionThatWrote < 139900 then another TxConfirmStats (for priority) follows but can be ignored.\n+\n+            tempMap.clear();\n+            for (unsigned int i = 0; i < tempBuckets.size(); i++) {\n+                tempMap[tempBuckets[i]] = i;\n+            }\n+        }\n+        else { // nVersionThatWrote >= 149900\n+            unsigned int future1, future2;\n+            filein >> future1 >> future2;\n+\n+            std::vector<double> fileBuckets;\n+            filein >> fileBuckets;\n+            size_t numBuckets = fileBuckets.size();\n+            if (numBuckets <= 1 || numBuckets > 1000)\n+                throw std::runtime_error(\"Corrupt estimates file. Must have between 2 and 1000 feerate buckets\");\n+\n+            std::unique_ptr<TxConfirmStats> fileFeeStats(new TxConfirmStats(buckets, bucketMap, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY));\n+            std::unique_ptr<TxConfirmStats> fileShortStats(new TxConfirmStats(buckets, bucketMap, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY));\n+            std::unique_ptr<TxConfirmStats> fileLongStats(new TxConfirmStats(buckets, bucketMap, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY));\n+            fileFeeStats->Read(filein, nVersionThatWrote, numBuckets);\n+            fileShortStats->Read(filein, nVersionThatWrote, numBuckets);\n+            fileLongStats->Read(filein, nVersionThatWrote, numBuckets);\n+\n+            // Fee estimates file parsed correctly\n+            // Copy buckets from file and refresh our bucketmap\n+            buckets = fileBuckets;\n+            bucketMap.clear();\n+            for (unsigned int i = 0; i < buckets.size(); i++) {\n+                bucketMap[buckets[i]] = i;\n+            }\n+\n+            // Destroy old TxConfirmStats and point to new ones that already reference buckets and bucketMap\n+            delete feeStats;\n+            delete shortStats;\n+            delete longStats;\n+            feeStats = fileFeeStats.release();\n+            shortStats = fileShortStats.release();\n+            longStats = fileLongStats.release();\n+\n+            nBestSeenHeight = nFileBestSeenHeight;\n+        }\n     }\n-    catch (const std::exception&) {\n-        LogPrintf(\"CBlockPolicyEstimator::Read(): unable to read policy estimator data (non-fatal)\\n\");\n+    catch (const std::exception& e) {\n+        LogPrintf(\"CBlockPolicyEstimator::Read(): unable to read policy estimator data (non-fatal): %s\\n\",e.what());\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "7aaba7d7d5641f669e795d194ec4ad0418646994",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0a273f4c8bed50de9fc227d98d90dc5ff755515/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0a273f4c8bed50de9fc227d98d90dc5ff755515/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=c0a273f4c8bed50de9fc227d98d90dc5ff755515",
        "patch": "@@ -141,10 +141,15 @@ class CBlockPolicyEstimator\n \n     /** Classes to track historical data on transaction confirmations */\n     TxConfirmStats* feeStats;\n+    TxConfirmStats* shortStats;\n+    TxConfirmStats* longStats;\n \n     unsigned int trackedTxs;\n     unsigned int untrackedTxs;\n \n+    std::vector<double> buckets;              // The upper-bound of the range for the bucket (inclusive)\n+    std::map<double, unsigned int> bucketMap; // Map of bucket upper-bound to index into all vectors by bucket\n+\n     mutable CCriticalSection cs_feeEstimator;\n \n     /** Process a transaction confirmed in a block*/"
      }
    ]
  },
  {
    "sha": "e5007bae35ce22036a816505038277d99c84e3f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTAwN2JhZTM1Y2UyMjAzNmE4MTY1MDUwMzgyNzdkOTljODRlM2Y3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-09T19:02:00Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:45:26Z"
      },
      "message": "Change parameters for fee estimation and estimates on all 3 time horizons.\n\nMake feerate buckets smaller (5% instead of 10%) and make the 3 different horizons have half lifes of 3 hours, 1 day and 1 week respectively.",
      "tree": {
        "sha": "aab87df2ef3fbc30e0fb3b3ca22d190d9ecdf1d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aab87df2ef3fbc30e0fb3b3ca22d190d9ecdf1d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5007bae35ce22036a816505038277d99c84e3f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5007bae35ce22036a816505038277d99c84e3f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5007bae35ce22036a816505038277d99c84e3f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5007bae35ce22036a816505038277d99c84e3f7/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0a273f4c8bed50de9fc227d98d90dc5ff755515",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0a273f4c8bed50de9fc227d98d90dc5ff755515",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0a273f4c8bed50de9fc227d98d90dc5ff755515"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 89,
      "deletions": 51
    },
    "files": [
      {
        "sha": "42059cf94f8f588f293bbccdfaa2828357fcedee",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 11,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5007bae35ce22036a816505038277d99c84e3f7/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5007bae35ce22036a816505038277d99c84e3f7/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=e5007bae35ce22036a816505038277d99c84e3f7",
        "patch": "@@ -14,6 +14,8 @@\n #include \"txmempool.h\"\n #include \"util.h\"\n \n+static constexpr double INF_FEERATE = 1e99;\n+\n /**\n  * We will instantiate an instance of this class to track transactions that were\n  * included in a block. We will lump transactions into a bucket according to their\n@@ -400,6 +402,8 @@ bool CBlockPolicyEstimator::removeTx(uint256 hash)\n     std::map<uint256, TxStatsInfo>::iterator pos = mapMemPoolTxs.find(hash);\n     if (pos != mapMemPoolTxs.end()) {\n         feeStats->removeTx(pos->second.blockHeight, nBestSeenHeight, pos->second.bucketIndex);\n+        shortStats->removeTx(pos->second.blockHeight, nBestSeenHeight, pos->second.bucketIndex);\n+        longStats->removeTx(pos->second.blockHeight, nBestSeenHeight, pos->second.bucketIndex);\n         mapMemPoolTxs.erase(hash);\n         return true;\n     } else {\n@@ -421,9 +425,9 @@ CBlockPolicyEstimator::CBlockPolicyEstimator()\n     bucketMap[INF_FEERATE] = bucketIndex;\n     assert(bucketMap.size() == buckets.size());\n \n-    feeStats = new TxConfirmStats(buckets, bucketMap, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY);\n-    shortStats = new TxConfirmStats(buckets, bucketMap, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY);\n-    longStats = new TxConfirmStats(buckets, bucketMap, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY);\n+    feeStats = new TxConfirmStats(buckets, bucketMap, MED_BLOCK_CONFIRMS, MED_DECAY);\n+    shortStats = new TxConfirmStats(buckets, bucketMap, SHORT_BLOCK_CONFIRMS, SHORT_DECAY);\n+    longStats = new TxConfirmStats(buckets, bucketMap, LONG_BLOCK_CONFIRMS, LONG_DECAY);\n }\n \n CBlockPolicyEstimator::~CBlockPolicyEstimator()\n@@ -464,7 +468,12 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     CFeeRate feeRate(entry.GetFee(), entry.GetTxSize());\n \n     mapMemPoolTxs[hash].blockHeight = txHeight;\n-    mapMemPoolTxs[hash].bucketIndex = feeStats->NewTx(txHeight, (double)feeRate.GetFeePerK());\n+    unsigned int bucketIndex = feeStats->NewTx(txHeight, (double)feeRate.GetFeePerK());\n+    mapMemPoolTxs[hash].bucketIndex = bucketIndex;\n+    unsigned int bucketIndex2 = shortStats->NewTx(txHeight, (double)feeRate.GetFeePerK());\n+    assert(bucketIndex == bucketIndex2);\n+    unsigned int bucketIndex3 = longStats->NewTx(txHeight, (double)feeRate.GetFeePerK());\n+    assert(bucketIndex == bucketIndex3);\n }\n \n bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry)\n@@ -489,6 +498,8 @@ bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n     CFeeRate feeRate(entry->GetFee(), entry->GetTxSize());\n \n     feeStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n+    shortStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n+    longStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n     return true;\n }\n \n@@ -512,6 +523,8 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n \n     // Clear the current block state and update unconfirmed circular buffer\n     feeStats->ClearCurrent(nBlockHeight);\n+    shortStats->ClearCurrent(nBlockHeight);\n+    longStats->ClearCurrent(nBlockHeight);\n \n     unsigned int countedTxs = 0;\n     // Repopulate the current block states\n@@ -522,6 +535,8 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n \n     // Update all exponential averages with the current block state\n     feeStats->UpdateMovingAverages();\n+    shortStats->UpdateMovingAverages();\n+    longStats->UpdateMovingAverages();\n \n     LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy after updating estimates for %u of %u txs in block, since last block %u of %u tracked, new mempool map size %u\\n\",\n              countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size());\n@@ -538,7 +553,7 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const\n     if (confTarget <= 1 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n         return CFeeRate(0);\n \n-    double median = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    double median = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n \n     if (median < 0)\n         return CFeeRate(0);\n@@ -565,7 +580,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n             confTarget = 2;\n \n         while (median < 0 && (unsigned int)confTarget <= feeStats->GetMaxConfirms()) {\n-            median = feeStats->EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+            median = feeStats->EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n         }\n     } // Must unlock cs_feeEstimator before taking mempool locks\n \n@@ -634,7 +649,7 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n \n             std::map<double, unsigned int> tempMap;\n \n-            std::unique_ptr<TxConfirmStats> tempFeeStats(new TxConfirmStats(tempBuckets, tempMap, MAX_BLOCK_CONFIRMS, tempDecay));\n+            std::unique_ptr<TxConfirmStats> tempFeeStats(new TxConfirmStats(tempBuckets, tempMap, MED_BLOCK_CONFIRMS, tempDecay));\n             tempFeeStats->Read(filein, nVersionThatWrote, tempNum);\n             // if nVersionThatWrote < 139900 then another TxConfirmStats (for priority) follows but can be ignored.\n \n@@ -653,9 +668,9 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n             if (numBuckets <= 1 || numBuckets > 1000)\n                 throw std::runtime_error(\"Corrupt estimates file. Must have between 2 and 1000 feerate buckets\");\n \n-            std::unique_ptr<TxConfirmStats> fileFeeStats(new TxConfirmStats(buckets, bucketMap, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY));\n-            std::unique_ptr<TxConfirmStats> fileShortStats(new TxConfirmStats(buckets, bucketMap, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY));\n-            std::unique_ptr<TxConfirmStats> fileLongStats(new TxConfirmStats(buckets, bucketMap, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY));\n+            std::unique_ptr<TxConfirmStats> fileFeeStats(new TxConfirmStats(buckets, bucketMap, MED_BLOCK_CONFIRMS, MED_DECAY));\n+            std::unique_ptr<TxConfirmStats> fileShortStats(new TxConfirmStats(buckets, bucketMap, SHORT_BLOCK_CONFIRMS, SHORT_DECAY));\n+            std::unique_ptr<TxConfirmStats> fileLongStats(new TxConfirmStats(buckets, bucketMap, LONG_BLOCK_CONFIRMS, LONG_DECAY));\n             fileFeeStats->Read(filein, nVersionThatWrote, numBuckets);\n             fileShortStats->Read(filein, nVersionThatWrote, numBuckets);\n             fileLongStats->Read(filein, nVersionThatWrote, numBuckets);\n@@ -690,7 +705,7 @@ FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)\n {\n     CAmount minFeeLimit = std::max(CAmount(1), minIncrementalFee.GetFeePerK() / 2);\n     feeset.insert(0);\n-    for (double bucketBoundary = minFeeLimit; bucketBoundary <= MAX_BUCKET_FEERATE; bucketBoundary *= FEE_SPACING) {\n+    for (double bucketBoundary = minFeeLimit; bucketBoundary <= MAX_FILTER_FEERATE; bucketBoundary *= FEE_FILTER_SPACING) {\n         feeset.insert(bucketBoundary);\n     }\n }"
      },
      {
        "sha": "0df40df42a0f3323eaabc781991af129e1cf285b",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 48,
        "deletions": 28,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5007bae35ce22036a816505038277d99c84e3f7/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5007bae35ce22036a816505038277d99c84e3f7/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=e5007bae35ce22036a816505038277d99c84e3f7",
        "patch": "@@ -61,41 +61,53 @@ class TxConfirmStats;\n  * they've been outstanding.\n  */\n \n-/** Track confirm delays up to 25 blocks, can't estimate beyond that */\n-static const unsigned int MAX_BLOCK_CONFIRMS = 25;\n-\n-/** Decay of .998 is a half-life of 346 blocks or about 2.4 days */\n-static const double DEFAULT_DECAY = .998;\n-\n-/** Require greater than 95% of X feerate transactions to be confirmed within Y blocks for X to be big enough */\n-static const double MIN_SUCCESS_PCT = .95;\n-\n-/** Require an avg of 1 tx in the combined feerate bucket per block to have stat significance */\n-static const double SUFFICIENT_FEETXS = 1;\n-\n-// Minimum and Maximum values for tracking feerates\n-// The MIN_BUCKET_FEERATE should just be set to the lowest reasonable feerate we\n-// might ever want to track.  Historically this has been 1000 since it was\n-// inheriting DEFAULT_MIN_RELAY_TX_FEE and changing it is disruptive as it\n-// invalidates old estimates files. So leave it at 1000 unless it becomes\n-// necessary to lower it, and then lower it substantially.\n-static constexpr double MIN_BUCKET_FEERATE = 1000;\n-static const double MAX_BUCKET_FEERATE = 1e7;\n-static const double INF_FEERATE = MAX_MONEY;\n-\n-// We have to lump transactions into buckets based on feerate, but we want to be able\n-// to give accurate estimates over a large range of potential feerates\n-// Therefore it makes sense to exponentially space the buckets\n-/** Spacing of FeeRate buckets */\n-static const double FEE_SPACING = 1.1;\n-\n /**\n  *  We want to be able to estimate feerates that are needed on tx's to be included in\n  * a certain number of blocks.  Every time a block is added to the best chain, this class records\n  * stats on the transactions included in that block\n  */\n class CBlockPolicyEstimator\n {\n+private:\n+    /** Track confirm delays up to 12 blocks medium decay */\n+    static constexpr unsigned int SHORT_BLOCK_CONFIRMS = 12;\n+    /** Track confirm delays up to 48 blocks medium decay */\n+    static constexpr unsigned int MED_BLOCK_CONFIRMS = 48;\n+    /** Track confirm delays up to 1008 blocks for longer decay */\n+    static constexpr unsigned int LONG_BLOCK_CONFIRMS = 1008;\n+\n+    /** Decay of .962 is a half-life of 18 blocks or about 3 hours */\n+    static constexpr double SHORT_DECAY = .962;\n+    /** Decay of .998 is a half-life of 144 blocks or about 1 day */\n+    static constexpr double MED_DECAY = .9952;\n+    /** Decay of .9995 is a half-life of 1008 blocks or about 1 week */\n+    static constexpr double LONG_DECAY = .99931;\n+\n+    /** Require greater than 95% of X feerate transactions to be confirmed within Y blocks for X to be big enough */\n+    static constexpr double HALF_SUCCESS_PCT = .6;\n+    static constexpr double SUCCESS_PCT = .85;\n+    static constexpr double DOUBLE_SUCCESS_PCT = .95;\n+\n+    /** Require an avg of 1 tx in the combined feerate bucket per block to have stat significance */\n+    static constexpr double SUFFICIENT_FEETXS = 1;\n+\n+    /** Minimum and Maximum values for tracking feerates\n+     * The MIN_BUCKET_FEERATE should just be set to the lowest reasonable feerate we\n+     * might ever want to track.  Historically this has been 1000 since it was\n+     * inheriting DEFAULT_MIN_RELAY_TX_FEE and changing it is disruptive as it\n+     * invalidates old estimates files. So leave it at 1000 unless it becomes\n+     * necessary to lower it, and then lower it substantially.\n+     */\n+    static constexpr double MIN_BUCKET_FEERATE = 1000;\n+    static constexpr double MAX_BUCKET_FEERATE = 1e7;\n+\n+    /** Spacing of FeeRate buckets\n+     * We have to lump transactions into buckets based on feerate, but we want to be able\n+     * to give accurate estimates over a large range of potential feerates\n+     * Therefore it makes sense to exponentially space the buckets\n+     */\n+    static constexpr double FEE_SPACING = 1.05;\n+\n public:\n     /** Create new BlockPolicyEstimator and initialize stats tracking classes with default values */\n     CBlockPolicyEstimator();\n@@ -159,6 +171,14 @@ class CBlockPolicyEstimator\n \n class FeeFilterRounder\n {\n+private:\n+    static constexpr double MAX_FILTER_FEERATE = 1e7;\n+    /** FEE_FILTER_SPACING is just used to provide some quantization of fee\n+     * filter results.  Historically it reused FEE_SPACING, but it is completely\n+     * unrelated, and was made a separate constant so the two concepts are not\n+     * tied together */\n+    static constexpr double FEE_FILTER_SPACING = 1.1;\n+\n public:\n     /** Create new FeeFilterRounder */\n     FeeFilterRounder(const CFeeRate& minIncrementalFee);"
      },
      {
        "sha": "942efce0f76eb5ba436b64117023603709309796",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5007bae35ce22036a816505038277d99c84e3f7/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5007bae35ce22036a816505038277d99c84e3f7/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=e5007bae35ce22036a816505038277d99c84e3f7",
        "patch": "@@ -50,8 +50,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     int blocknum = 0;\n \n     // Loop through 200 blocks\n-    // At a decay .998 and 4 fee transactions per block\n-    // This makes the tx count about 1.33 per bucket, above the 1 threshold\n+    // At a decay .9952 and 4 fee transactions per block\n+    // This makes the tx count about 2.5 per bucket, well above the 0.1 threshold\n     while (blocknum < 200) {\n         for (int j = 0; j < 10; j++) { // For each fee\n             for (int k = 0; k < 4; k++) { // add 4 fee txs\n@@ -75,18 +75,17 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         }\n         mpool.removeForBlock(block, ++blocknum);\n         block.clear();\n-        if (blocknum == 30) {\n-            // At this point we should need to combine 5 buckets to get enough data points\n-            // So estimateFee(1,2,3) should fail and estimateFee(4) should return somewhere around\n-            // 8*baserate.  estimateFee(4) %'s are 100,100,100,100,90 = average 98%\n+        // Check after just a few txs that combining buckets works as expected\n+        if (blocknum == 3) {\n+            // At this point we should need to combine 3 buckets to get enough data points\n+            // So estimateFee(1) should fail and estimateFee(2) should return somewhere around\n+            // 9*baserate.  estimateFee(2) %'s are 100,100,90 = average 97%\n             BOOST_CHECK(feeEst.estimateFee(1) == CFeeRate(0));\n-            BOOST_CHECK(feeEst.estimateFee(2) == CFeeRate(0));\n-            BOOST_CHECK(feeEst.estimateFee(3) == CFeeRate(0));\n-            BOOST_CHECK(feeEst.estimateFee(4).GetFeePerK() < 8*baseRate.GetFeePerK() + deltaFee);\n-            BOOST_CHECK(feeEst.estimateFee(4).GetFeePerK() > 8*baseRate.GetFeePerK() - deltaFee);\n+            BOOST_CHECK(feeEst.estimateFee(2).GetFeePerK() < 9*baseRate.GetFeePerK() + deltaFee);\n+            BOOST_CHECK(feeEst.estimateFee(2).GetFeePerK() > 9*baseRate.GetFeePerK() - deltaFee);\n             int answerFound;\n-            BOOST_CHECK(feeEst.estimateSmartFee(1, &answerFound, mpool) == feeEst.estimateFee(4) && answerFound == 4);\n-            BOOST_CHECK(feeEst.estimateSmartFee(3, &answerFound, mpool) == feeEst.estimateFee(4) && answerFound == 4);\n+            BOOST_CHECK(feeEst.estimateSmartFee(1, &answerFound, mpool) == feeEst.estimateFee(2) && answerFound == 2);\n+            BOOST_CHECK(feeEst.estimateSmartFee(2, &answerFound, mpool) == feeEst.estimateFee(2) && answerFound == 2);\n             BOOST_CHECK(feeEst.estimateSmartFee(4, &answerFound, mpool) == feeEst.estimateFee(4) && answerFound == 4);\n             BOOST_CHECK(feeEst.estimateSmartFee(8, &answerFound, mpool) == feeEst.estimateFee(8) && answerFound == 8);\n         }\n@@ -113,6 +112,10 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             BOOST_CHECK(origFeeEst[i-1] == CFeeRate(0).GetFeePerK());\n         }\n     }\n+    // Fill out rest of the original estimates\n+    for (int i = 10; i <= 48; i++) {\n+        origFeeEst.push_back(feeEst.estimateFee(i).GetFeePerK());\n+    }\n \n     // Mine 50 more blocks with no transactions happening, estimates shouldn't change\n     // We haven't decayed the moving average enough so we still have enough data points in every bucket"
      }
    ]
  },
  {
    "sha": "d3e30bca1bfa9900bc31fec957bb001115acac7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2UzMGJjYTFiZmE5OTAwYmMzMWZlYzk1N2JiMDAxMTE1YWNhYzdi",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-28T22:29:42Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:45:26Z"
      },
      "message": "Refactor to update moving average on fly",
      "tree": {
        "sha": "020e3ff48c1f61d7528ed39ca55d7c195f83419e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/020e3ff48c1f61d7528ed39ca55d7c195f83419e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3e30bca1bfa9900bc31fec957bb001115acac7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3e30bca1bfa9900bc31fec957bb001115acac7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3e30bca1bfa9900bc31fec957bb001115acac7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3e30bca1bfa9900bc31fec957bb001115acac7b/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5007bae35ce22036a816505038277d99c84e3f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5007bae35ce22036a816505038277d99c84e3f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5007bae35ce22036a816505038277d99c84e3f7"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 16,
      "deletions": 29
    },
    "files": [
      {
        "sha": "0e9fb4dfeaef39c341b522bcb9f6e55df3c137dc",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 29,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3e30bca1bfa9900bc31fec957bb001115acac7b/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3e30bca1bfa9900bc31fec957bb001115acac7b/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=d3e30bca1bfa9900bc31fec957bb001115acac7b",
        "patch": "@@ -35,22 +35,16 @@ class TxConfirmStats\n     // Count the total # of txs in each bucket\n     // Track the historical moving average of this total over blocks\n     std::vector<double> txCtAvg;\n-    // and calculate the total for the current block to update the moving average\n-    std::vector<int> curBlockTxCt;\n \n     // Count the total # of txs confirmed within Y blocks in each bucket\n     // Track the historical moving average of theses totals over blocks\n     std::vector<std::vector<double>> confAvg; // confAvg[Y][X]\n-    // and calculate the totals for the current block to update the moving averages\n-    std::vector<std::vector<int>> curBlockConf; // curBlockConf[Y][X]\n \n     std::vector<std::vector<double>> failAvg; // future use\n \n     // Sum the total feerate of all tx's in each bucket\n     // Track the historical moving average of this total over blocks\n     std::vector<double> avg;\n-    // and calculate the total for the current block to update the moving average\n-    std::vector<double> curBlockVal;\n \n     // Combine the conf counts with tx counts to calculate the confirmation % for each Y,X\n     // Combine the total value with the tx counts to calculate the avg feerate per bucket\n@@ -79,7 +73,7 @@ class TxConfirmStats\n     TxConfirmStats(const std::vector<double>& defaultBuckets, const std::map<double, unsigned int>& defaultBucketMap,\n                    unsigned int maxConfirms, double decay);\n \n-    /** Clear the state of the curBlock variables to start counting for the new block */\n+    /** Roll the circular buffer for unconfirmed txs*/\n     void ClearCurrent(unsigned int nBlockHeight);\n \n     /**\n@@ -148,28 +142,20 @@ TxConfirmStats::TxConfirmStats(const std::vector<double>& defaultBuckets,\n }\n \n void TxConfirmStats::resizeInMemoryCounters(size_t newbuckets) {\n-    curBlockConf.resize(GetMaxConfirms());\n     // newbuckets must be passed in because the buckets referred to during Read have not been updated yet.\n     unconfTxs.resize(GetMaxConfirms());\n     for (unsigned int i = 0; i < unconfTxs.size(); i++) {\n-        curBlockConf[i].resize(newbuckets);\n         unconfTxs[i].resize(newbuckets);\n     }\n     oldUnconfTxs.resize(newbuckets);\n-    curBlockTxCt.resize(newbuckets);\n-    curBlockVal.resize(newbuckets);\n }\n \n-// Zero out the data for the current block\n+// Roll the unconfirmed txs circular buffer\n void TxConfirmStats::ClearCurrent(unsigned int nBlockHeight)\n {\n     for (unsigned int j = 0; j < buckets.size(); j++) {\n         oldUnconfTxs[j] += unconfTxs[nBlockHeight%unconfTxs.size()][j];\n         unconfTxs[nBlockHeight%unconfTxs.size()][j] = 0;\n-        for (unsigned int i = 0; i < curBlockConf.size(); i++)\n-            curBlockConf[i][j] = 0;\n-        curBlockTxCt[j] = 0;\n-        curBlockVal[j] = 0;\n     }\n }\n \n@@ -180,20 +166,20 @@ void TxConfirmStats::Record(int blocksToConfirm, double val)\n     if (blocksToConfirm < 1)\n         return;\n     unsigned int bucketindex = bucketMap.lower_bound(val)->second;\n-    for (size_t i = blocksToConfirm; i <= curBlockConf.size(); i++) {\n-        curBlockConf[i - 1][bucketindex]++;\n+    for (size_t i = blocksToConfirm; i <= confAvg.size(); i++) {\n+        confAvg[i - 1][bucketindex]++;\n     }\n-    curBlockTxCt[bucketindex]++;\n-    curBlockVal[bucketindex] += val;\n+    txCtAvg[bucketindex]++;\n+    avg[bucketindex] += val;\n }\n \n void TxConfirmStats::UpdateMovingAverages()\n {\n     for (unsigned int j = 0; j < buckets.size(); j++) {\n         for (unsigned int i = 0; i < confAvg.size(); i++)\n-            confAvg[i][j] = confAvg[i][j] * decay + curBlockConf[i][j];\n-        avg[j] = avg[j] * decay + curBlockVal[j];\n-        txCtAvg[j] = txCtAvg[j] * decay + curBlockTxCt[j];\n+            confAvg[i][j] = confAvg[i][j] * decay;\n+        avg[j] = avg[j] * decay;\n+        txCtAvg[j] = txCtAvg[j] * decay;\n     }\n }\n \n@@ -521,22 +507,23 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n     // of unconfirmed txs to remove from tracking.\n     nBestSeenHeight = nBlockHeight;\n \n-    // Clear the current block state and update unconfirmed circular buffer\n+    // Update unconfirmed circular buffer\n     feeStats->ClearCurrent(nBlockHeight);\n     shortStats->ClearCurrent(nBlockHeight);\n     longStats->ClearCurrent(nBlockHeight);\n \n+    // Decay all exponential averages\n+    feeStats->UpdateMovingAverages();\n+    shortStats->UpdateMovingAverages();\n+    longStats->UpdateMovingAverages();\n+\n     unsigned int countedTxs = 0;\n-    // Repopulate the current block states\n+    // Update averages with data points from current block\n     for (unsigned int i = 0; i < entries.size(); i++) {\n         if (processBlockTx(nBlockHeight, entries[i]))\n             countedTxs++;\n     }\n \n-    // Update all exponential averages with the current block state\n-    feeStats->UpdateMovingAverages();\n-    shortStats->UpdateMovingAverages();\n-    longStats->UpdateMovingAverages();\n \n     LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy after updating estimates for %u of %u txs in block, since last block %u of %u tracked, new mempool map size %u\\n\",\n              countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size());"
      }
    ]
  },
  {
    "sha": "1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmE0M2NjMGVjYWZmY2I2Mzg5ZGJiYjZiY2YwMzhlNzhjZjA0MDIz",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-02T15:08:25Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:45:26Z"
      },
      "message": "Make EstimateMedianVal smarter about small failures.\n\nInstead of stopping if it encounters a \"sufficient\" number of transactions which don't meet the threshold for being confirmed within the target, it keeps looking to add more transactions to see if there is a temporary blip in the data.  This allows a smaller number of required data points.",
      "tree": {
        "sha": "796977bf2f41e53fbe45b588151709fb47123fc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/796977bf2f41e53fbe45b588151709fb47123fc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3e30bca1bfa9900bc31fec957bb001115acac7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3e30bca1bfa9900bc31fec957bb001115acac7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3e30bca1bfa9900bc31fec957bb001115acac7b"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 5,
      "deletions": 7
    },
    "files": [
      {
        "sha": "03a0df4610ad0b6f87f75f1c238056c67ee0a2f3",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023",
        "patch": "@@ -231,11 +231,9 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n             double curPct = nConf / (totalNum + extraNum);\n \n             // Check to see if we are no longer getting confirmed at the success rate\n-            if (requireGreater && curPct < successBreakPoint)\n-                break;\n-            if (!requireGreater && curPct > successBreakPoint)\n-                break;\n-\n+            if ((requireGreater && curPct < successBreakPoint) || (!requireGreater && curPct > successBreakPoint)) {\n+                continue;\n+            }\n             // Otherwise update the cumulative stats, and the bucket variables\n             // and reset the counters\n             else {"
      },
      {
        "sha": "c5955d7b04c3631ed8c414e74141f429ea7f6dd4",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023",
        "patch": "@@ -88,8 +88,8 @@ class CBlockPolicyEstimator\n     static constexpr double SUCCESS_PCT = .85;\n     static constexpr double DOUBLE_SUCCESS_PCT = .95;\n \n-    /** Require an avg of 1 tx in the combined feerate bucket per block to have stat significance */\n-    static constexpr double SUFFICIENT_FEETXS = 1;\n+    /** Require an avg of 0.1 tx in the combined feerate bucket per block to have stat significance */\n+    static constexpr double SUFFICIENT_FEETXS = 0.1;\n \n     /** Minimum and Maximum values for tracking feerates\n      * The MIN_BUCKET_FEERATE should just be set to the lowest reasonable feerate we"
      }
    ]
  },
  {
    "sha": "2681153af38324258dab8d1cf8e83c899324ece1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjgxMTUzYWYzODMyNDI1OGRhYjhkMWNmOGU4M2M4OTkzMjRlY2Ux",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-22T03:18:13Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:45:26Z"
      },
      "message": "minor refactor: explicitly track start of new bucket range and don't update curNearBucket on final loop.",
      "tree": {
        "sha": "b4b65d3f9e406b9888f589ef31316d87c08369e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4b65d3f9e406b9888f589ef31316d87c08369e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2681153af38324258dab8d1cf8e83c899324ece1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2681153af38324258dab8d1cf8e83c899324ece1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2681153af38324258dab8d1cf8e83c899324ece1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2681153af38324258dab8d1cf8e83c899324ece1/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a0e56d244bf5e1fd4a0e8959c42b67024dae0821",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2681153af38324258dab8d1cf8e83c899324ece1/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2681153af38324258dab8d1cf8e83c899324ece1/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=2681153af38324258dab8d1cf8e83c899324ece1",
        "patch": "@@ -214,9 +214,14 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n \n     bool foundAnswer = false;\n     unsigned int bins = unconfTxs.size();\n+    bool newBucketRange = true;\n \n     // Start counting from highest(default) or lowest feerate transactions\n     for (int bucket = startbucket; bucket >= 0 && bucket <= maxbucketindex; bucket += step) {\n+        if (newBucketRange) {\n+            curNearBucket = bucket;\n+            newBucketRange = false;\n+        }\n         curFarBucket = bucket;\n         nConf += confAvg[confTarget - 1][bucket];\n         totalNum += txCtAvg[bucket];\n@@ -243,7 +248,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n                 extraNum = 0;\n                 bestNearBucket = curNearBucket;\n                 bestFarBucket = curFarBucket;\n-                curNearBucket = bucket + step;\n+                newBucketRange = true;\n             }\n         }\n     }"
      }
    ]
  },
  {
    "sha": "4186d3fdfd319b568b520dd587be27bdff45c53d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTg2ZDNmZGZkMzE5YjU2OGI1MjBkZDU4N2JlMjdiZGZmNDVjNTNk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-24T21:30:03Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:45:26Z"
      },
      "message": "Expose estimaterawfee\n\nTrack information the ranges of fee rates that were used to calculate the fee estimates (the last range of fee rates in which the data points met the threshold and the first to fail) and provide an RPC call to return this information.",
      "tree": {
        "sha": "f5df89a7fd16f64329bb05240472ff5d7a7437d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5df89a7fd16f64329bb05240472ff5d7a7437d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4186d3fdfd319b568b520dd587be27bdff45c53d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4186d3fdfd319b568b520dd587be27bdff45c53d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4186d3fdfd319b568b520dd587be27bdff45c53d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4186d3fdfd319b568b520dd587be27bdff45c53d/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2681153af38324258dab8d1cf8e83c899324ece1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2681153af38324258dab8d1cf8e83c899324ece1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2681153af38324258dab8d1cf8e83c899324ece1"
      }
    ],
    "stats": {
      "total": 203,
      "additions": 192,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a9a8335c61770c9b2143115153ab9fa594e9f6cb",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 86,
        "deletions": 11,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4186d3fdfd319b568b520dd587be27bdff45c53d/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4186d3fdfd319b568b520dd587be27bdff45c53d/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=4186d3fdfd319b568b520dd587be27bdff45c53d",
        "patch": "@@ -107,7 +107,8 @@ class TxConfirmStats\n      * @param nBlockHeight the current block height\n      */\n     double EstimateMedianVal(int confTarget, double sufficientTxVal,\n-                             double minSuccess, bool requireGreater, unsigned int nBlockHeight) const;\n+                             double minSuccess, bool requireGreater, unsigned int nBlockHeight,\n+                             EstimationResult *result = nullptr) const;\n \n     /** Return the max number of confirms we're tracking */\n     unsigned int GetMaxConfirms() const { return confAvg.size(); }\n@@ -186,7 +187,7 @@ void TxConfirmStats::UpdateMovingAverages()\n // returns -1 on error conditions\n double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n                                          double successBreakPoint, bool requireGreater,\n-                                         unsigned int nBlockHeight) const\n+                                         unsigned int nBlockHeight, EstimationResult *result) const\n {\n     // Counters for a bucket (or range of buckets)\n     double nConf = 0; // Number of tx's confirmed within the confTarget\n@@ -215,6 +216,9 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n     bool foundAnswer = false;\n     unsigned int bins = unconfTxs.size();\n     bool newBucketRange = true;\n+    bool passing = true;\n+    EstimatorBucket passBucket;\n+    EstimatorBucket failBucket;\n \n     // Start counting from highest(default) or lowest feerate transactions\n     for (int bucket = startbucket; bucket >= 0 && bucket <= maxbucketindex; bucket += step) {\n@@ -237,14 +241,30 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n \n             // Check to see if we are no longer getting confirmed at the success rate\n             if ((requireGreater && curPct < successBreakPoint) || (!requireGreater && curPct > successBreakPoint)) {\n+                if (passing == true) {\n+                    // First time we hit a failure record the failed bucket\n+                    unsigned int failMinBucket = std::min(curNearBucket, curFarBucket);\n+                    unsigned int failMaxBucket = std::max(curNearBucket, curFarBucket);\n+                    failBucket.start = failMinBucket ? buckets[failMinBucket - 1] : 0;\n+                    failBucket.end = buckets[failMaxBucket];\n+                    failBucket.withinTarget = nConf;\n+                    failBucket.totalConfirmed = totalNum;\n+                    failBucket.inMempool = extraNum;\n+                    passing = false;\n+                }\n                 continue;\n             }\n             // Otherwise update the cumulative stats, and the bucket variables\n             // and reset the counters\n             else {\n+                failBucket = EstimatorBucket(); // Reset any failed bucket, currently passing\n                 foundAnswer = true;\n+                passing = true;\n+                passBucket.withinTarget = nConf;\n                 nConf = 0;\n+                passBucket.totalConfirmed = totalNum;\n                 totalNum = 0;\n+                passBucket.inMempool = extraNum;\n                 extraNum = 0;\n                 bestNearBucket = curNearBucket;\n                 bestFarBucket = curFarBucket;\n@@ -260,8 +280,8 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n     // Find the bucket with the median transaction and then report the average feerate from that bucket\n     // This is a compromise between finding the median which we can't since we don't save all tx's\n     // and reporting the average which is less accurate\n-    unsigned int minBucket = bestNearBucket < bestFarBucket ? bestNearBucket : bestFarBucket;\n-    unsigned int maxBucket = bestNearBucket > bestFarBucket ? bestNearBucket : bestFarBucket;\n+    unsigned int minBucket = std::min(bestNearBucket, bestFarBucket);\n+    unsigned int maxBucket = std::max(bestNearBucket, bestFarBucket);\n     for (unsigned int j = minBucket; j <= maxBucket; j++) {\n         txSum += txCtAvg[j];\n     }\n@@ -275,13 +295,37 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n                 break;\n             }\n         }\n+\n+        passBucket.start = minBucket ? buckets[minBucket-1] : 0;\n+        passBucket.end = buckets[maxBucket];\n+    }\n+\n+    // If we were passing until we reached last few buckets with insufficient data, then report those as failed\n+    if (passing && !newBucketRange) {\n+        unsigned int failMinBucket = std::min(curNearBucket, curFarBucket);\n+        unsigned int failMaxBucket = std::max(curNearBucket, curFarBucket);\n+        failBucket.start = failMinBucket ? buckets[failMinBucket - 1] : 0;\n+        failBucket.end = buckets[failMaxBucket];\n+        failBucket.withinTarget = nConf;\n+        failBucket.totalConfirmed = totalNum;\n+        failBucket.inMempool = extraNum;\n     }\n \n-    LogPrint(BCLog::ESTIMATEFEE, \"%3d: For conf success %s %4.2f need feerate %s: %12.5g from buckets %8g - %8g  Cur Bucket stats %6.2f%%  %8.1f/(%.1f+%d mempool)\\n\",\n-             confTarget, requireGreater ? \">\" : \"<\", successBreakPoint,\n-             requireGreater ? \">\" : \"<\", median, buckets[minBucket], buckets[maxBucket],\n-             100 * nConf / (totalNum + extraNum), nConf, totalNum, extraNum);\n+    LogPrint(BCLog::ESTIMATEFEE, \"FeeEst: %d %s%.0f%% decay %.5f: need feerate: %g from (%g - %g) %.2f%% %.1f/(%.1f+%d mem) Fail: (%g - %g) %.2f%% %.1f/(%.1f+%d mem)\\n\",\n+             confTarget, requireGreater ? \">\" : \"<\", 100.0 * successBreakPoint, decay,\n+             median, passBucket.start, passBucket.end,\n+             100 * passBucket.withinTarget / (passBucket.totalConfirmed + passBucket.inMempool),\n+             passBucket.withinTarget, passBucket.totalConfirmed, passBucket.inMempool,\n+             failBucket.start, failBucket.end,\n+             100 * failBucket.withinTarget / (failBucket.totalConfirmed + failBucket.inMempool),\n+             failBucket.withinTarget, failBucket.totalConfirmed, failBucket.inMempool);\n \n+\n+    if (result) {\n+        result->pass = passBucket;\n+        result->fail = failBucket;\n+        result->decay = decay;\n+    }\n     return median;\n }\n \n@@ -537,13 +581,44 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n \n CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const\n {\n+    // It's not possible to get reasonable estimates for confTarget of 1\n+    if (confTarget <= 1)\n+        return CFeeRate(0);\n+\n+    return estimateRawFee(confTarget, DOUBLE_SUCCESS_PCT, FeeEstimateHorizon::MED_HALFLIFE);\n+}\n+\n+CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThreshold, FeeEstimateHorizon horizon, EstimationResult* result) const\n+{\n+    TxConfirmStats* stats;\n+    double sufficientTxs = SUFFICIENT_FEETXS;\n+    switch (horizon) {\n+    case FeeEstimateHorizon::SHORT_HALFLIFE: {\n+        stats = shortStats;\n+        sufficientTxs = SUFFICIENT_TXS_SHORT;\n+        break;\n+    }\n+    case FeeEstimateHorizon::MED_HALFLIFE: {\n+        stats = feeStats;\n+        break;\n+    }\n+    case FeeEstimateHorizon::LONG_HALFLIFE: {\n+        stats = longStats;\n+        break;\n+    }\n+    default: {\n+        return CFeeRate(0);\n+    }\n+    }\n+\n     LOCK(cs_feeEstimator);\n     // Return failure if trying to analyze a target we're not tracking\n-    // It's not possible to get reasonable estimates for confTarget of 1\n-    if (confTarget <= 1 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n+    if (confTarget <= 0 || (unsigned int)confTarget > stats->GetMaxConfirms())\n+        return CFeeRate(0);\n+    if (successThreshold > 1)\n         return CFeeRate(0);\n \n-    double median = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+    double median = stats->EstimateMedianVal(confTarget, sufficientTxs, successThreshold, true, nBestSeenHeight, result);\n \n     if (median < 0)\n         return CFeeRate(0);"
      },
      {
        "sha": "f42fe7bda796f1620874976da75b071b2879f226",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4186d3fdfd319b568b520dd587be27bdff45c53d/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4186d3fdfd319b568b520dd587be27bdff45c53d/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=4186d3fdfd319b568b520dd587be27bdff45c53d",
        "patch": "@@ -61,6 +61,28 @@ class TxConfirmStats;\n  * they've been outstanding.\n  */\n \n+enum FeeEstimateHorizon {\n+    SHORT_HALFLIFE = 0,\n+    MED_HALFLIFE = 1,\n+    LONG_HALFLIFE = 2\n+};\n+\n+struct EstimatorBucket\n+{\n+    double start = -1;\n+    double end = -1;\n+    double withinTarget = 0;\n+    double totalConfirmed = 0;\n+    double inMempool = 0;\n+};\n+\n+struct EstimationResult\n+{\n+    EstimatorBucket pass;\n+    EstimatorBucket fail;\n+    double decay;\n+};\n+\n /**\n  *  We want to be able to estimate feerates that are needed on tx's to be included in\n  * a certain number of blocks.  Every time a block is added to the best chain, this class records\n@@ -90,6 +112,8 @@ class CBlockPolicyEstimator\n \n     /** Require an avg of 0.1 tx in the combined feerate bucket per block to have stat significance */\n     static constexpr double SUFFICIENT_FEETXS = 0.1;\n+    /** Require an avg of 0.5 tx when using short decay since there are fewer blocks considered*/\n+    static constexpr double SUFFICIENT_TXS_SHORT = 0.5;\n \n     /** Minimum and Maximum values for tracking feerates\n      * The MIN_BUCKET_FEERATE should just be set to the lowest reasonable feerate we\n@@ -132,6 +156,10 @@ class CBlockPolicyEstimator\n      */\n     CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const;\n \n+    /** Return a specific fee estimate calculation with a given success threshold and time horizon.\n+     */\n+    CFeeRate estimateRawFee(int confTarget, double successThreshold, FeeEstimateHorizon horizon, EstimationResult *result = nullptr) const;\n+\n     /** Write estimation data to a file */\n     bool Write(CAutoFile& fileout) const;\n \n@@ -190,4 +218,5 @@ class FeeFilterRounder\n     std::set<double> feeset;\n     FastRandomContext insecure_rand;\n };\n+\n #endif /*BITCOIN_POLICYESTIMATOR_H */"
      },
      {
        "sha": "afc1fa1c79f4053ad78c759df52e6f5e90dff144",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4186d3fdfd319b568b520dd587be27bdff45c53d/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4186d3fdfd319b568b520dd587be27bdff45c53d/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=4186d3fdfd319b568b520dd587be27bdff45c53d",
        "patch": "@@ -106,6 +106,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getrawmempool\", 0, \"verbose\" },\n     { \"estimatefee\", 0, \"nblocks\" },\n     { \"estimatesmartfee\", 0, \"nblocks\" },\n+    { \"estimaterawfee\", 0, \"nblocks\" },\n+    { \"estimaterawfee\", 1, \"threshold\" },\n+    { \"estimaterawfee\", 2, \"horizon\" },\n     { \"prioritisetransaction\", 1, \"fee_delta\" },\n     { \"setban\", 2, \"bantime\" },\n     { \"setban\", 3, \"absolute\" },"
      },
      {
        "sha": "6851f2100469502264049e3513daa90104f313e5",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4186d3fdfd319b568b520dd587be27bdff45c53d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4186d3fdfd319b568b520dd587be27bdff45c53d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=4186d3fdfd319b568b520dd587be27bdff45c53d",
        "patch": "@@ -863,6 +863,78 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks (threshold horizon)\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementation changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n+            \"               Default: 1\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"  \\\"pass.\\\"                 information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"  \\\"fail.\\\"                 information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"  \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"  \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"  \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"  \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VNUM), true);\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nBlocks = request.params[0].get_int();\n+    double threshold = 0.95;\n+    if (!request.params[1].isNull())\n+        threshold = request.params[1].get_real();\n+    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n+    if (!request.params[2].isNull()) {\n+        int horizonInt = request.params[2].get_int();\n+        if (horizonInt < 0 || horizonInt > 2) {\n+            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n+        } else {\n+            horizon = (FeeEstimateHorizon)horizonInt;\n+        }\n+    }\n+    UniValue result(UniValue::VOBJ);\n+    CFeeRate feeRate;\n+    EstimationResult buckets;\n+    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+\n+    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n+    result.push_back(Pair(\"decay\", buckets.decay));\n+    result.push_back(Pair(\"pass.startrange\", round(buckets.pass.start)));\n+    result.push_back(Pair(\"pass.endrange\", round(buckets.pass.end)));\n+    result.push_back(Pair(\"pass.withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+    result.push_back(Pair(\"pass.totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+    result.push_back(Pair(\"pass.inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+    result.push_back(Pair(\"fail.startrange\", round(buckets.fail.start)));\n+    result.push_back(Pair(\"fail.endrange\", round(buckets.fail.end)));\n+    result.push_back(Pair(\"fail.withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+    result.push_back(Pair(\"fail.totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+    result.push_back(Pair(\"fail.inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+    return result;\n+}\n+\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n@@ -877,6 +949,8 @@ static const CRPCCommand commands[] =\n \n     { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },\n     { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\"} },\n+\n+    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"nblocks\", \"threshold\", \"horizon\"} },\n };\n \n void RegisterMiningRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "c7447ec30348b338e77bc6429fbfac9f93549ef6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzQ0N2VjMzAzNDhiMzM4ZTc3YmM2NDI5ZmJmYWM5ZjkzNTQ5ZWY2",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-09T20:26:05Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:45:27Z"
      },
      "message": "Track failures in fee estimation.\n\nStart tracking transactions which fail to confirm within the target and are then evicted or otherwise leave mempool.\n\nFix slight error in unit test.",
      "tree": {
        "sha": "d29e992933923be972226b92b687cd081183e504",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d29e992933923be972226b92b687cd081183e504"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7447ec30348b338e77bc6429fbfac9f93549ef6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7447ec30348b338e77bc6429fbfac9f93549ef6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7447ec30348b338e77bc6429fbfac9f93549ef6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7447ec30348b338e77bc6429fbfac9f93549ef6/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4186d3fdfd319b568b520dd587be27bdff45c53d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4186d3fdfd319b568b520dd587be27bdff45c53d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4186d3fdfd319b568b520dd587be27bdff45c53d"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 72,
      "deletions": 20
    },
    "files": [
      {
        "sha": "3a112fdc93196177951df0d280ef5de34f964c6e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7447ec30348b338e77bc6429fbfac9f93549ef6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7447ec30348b338e77bc6429fbfac9f93549ef6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c7447ec30348b338e77bc6429fbfac9f93549ef6",
        "patch": "@@ -213,6 +213,7 @@ void Shutdown()\n \n     if (fFeeEstimatesInitialized)\n     {\n+        ::feeEstimator.FlushUnconfirmed(::mempool);\n         fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n         CAutoFile est_fileout(fsbridge::fopen(est_path, \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (!est_fileout.IsNull())"
      },
      {
        "sha": "e9d137e7f0520302b07b216119bd81d3b59d6ac1",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 14,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7447ec30348b338e77bc6429fbfac9f93549ef6/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7447ec30348b338e77bc6429fbfac9f93549ef6/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=c7447ec30348b338e77bc6429fbfac9f93549ef6",
        "patch": "@@ -40,7 +40,9 @@ class TxConfirmStats\n     // Track the historical moving average of theses totals over blocks\n     std::vector<std::vector<double>> confAvg; // confAvg[Y][X]\n \n-    std::vector<std::vector<double>> failAvg; // future use\n+    // Track moving avg of txs which have been evicted from the mempool\n+    // after failing to be confirmed within Y blocks\n+    std::vector<std::vector<double>> failAvg; // failAvg[Y][X]\n \n     // Sum the total feerate of all tx's in each bucket\n     // Track the historical moving average of this total over blocks\n@@ -89,7 +91,7 @@ class TxConfirmStats\n \n     /** Remove a transaction from mempool tracking stats*/\n     void removeTx(unsigned int entryHeight, unsigned int nBestSeenHeight,\n-                  unsigned int bucketIndex);\n+                  unsigned int bucketIndex, bool inBlock);\n \n     /** Update our estimates by decaying our historical moving average and updating\n         with the data gathered from the current block */\n@@ -135,6 +137,10 @@ TxConfirmStats::TxConfirmStats(const std::vector<double>& defaultBuckets,\n     for (unsigned int i = 0; i < maxConfirms; i++) {\n         confAvg[i].resize(buckets.size());\n     }\n+    failAvg.resize(maxConfirms);\n+    for (unsigned int i = 0; i < maxConfirms; i++) {\n+        failAvg[i].resize(buckets.size());\n+    }\n \n     txCtAvg.resize(buckets.size());\n     avg.resize(buckets.size());\n@@ -179,6 +185,8 @@ void TxConfirmStats::UpdateMovingAverages()\n     for (unsigned int j = 0; j < buckets.size(); j++) {\n         for (unsigned int i = 0; i < confAvg.size(); i++)\n             confAvg[i][j] = confAvg[i][j] * decay;\n+        for (unsigned int i = 0; i < failAvg.size(); i++)\n+            failAvg[i][j] = failAvg[i][j] * decay;\n         avg[j] = avg[j] * decay;\n         txCtAvg[j] = txCtAvg[j] * decay;\n     }\n@@ -193,6 +201,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n     double nConf = 0; // Number of tx's confirmed within the confTarget\n     double totalNum = 0; // Total number of tx's that were ever confirmed\n     int extraNum = 0;  // Number of tx's still in mempool for confTarget or longer\n+    double failNum = 0; // Number of tx's that were never confirmed but removed from the mempool after confTarget\n \n     int maxbucketindex = buckets.size() - 1;\n \n@@ -229,6 +238,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n         curFarBucket = bucket;\n         nConf += confAvg[confTarget - 1][bucket];\n         totalNum += txCtAvg[bucket];\n+        failNum += failAvg[confTarget - 1][bucket];\n         for (unsigned int confct = confTarget; confct < GetMaxConfirms(); confct++)\n             extraNum += unconfTxs[(nBlockHeight - confct)%bins][bucket];\n         extraNum += oldUnconfTxs[bucket];\n@@ -237,7 +247,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n         // (Only count the confirmed data points, so that each confirmation count\n         // will be looking at the same amount of data and same bucket breaks)\n         if (totalNum >= sufficientTxVal / (1 - decay)) {\n-            double curPct = nConf / (totalNum + extraNum);\n+            double curPct = nConf / (totalNum + failNum + extraNum);\n \n             // Check to see if we are no longer getting confirmed at the success rate\n             if ((requireGreater && curPct < successBreakPoint) || (!requireGreater && curPct > successBreakPoint)) {\n@@ -250,6 +260,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n                     failBucket.withinTarget = nConf;\n                     failBucket.totalConfirmed = totalNum;\n                     failBucket.inMempool = extraNum;\n+                    failBucket.leftMempool = failNum;\n                     passing = false;\n                 }\n                 continue;\n@@ -265,6 +276,8 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n                 passBucket.totalConfirmed = totalNum;\n                 totalNum = 0;\n                 passBucket.inMempool = extraNum;\n+                passBucket.leftMempool = failNum;\n+                failNum = 0;\n                 extraNum = 0;\n                 bestNearBucket = curNearBucket;\n                 bestFarBucket = curFarBucket;\n@@ -309,16 +322,17 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n         failBucket.withinTarget = nConf;\n         failBucket.totalConfirmed = totalNum;\n         failBucket.inMempool = extraNum;\n+        failBucket.leftMempool = failNum;\n     }\n \n-    LogPrint(BCLog::ESTIMATEFEE, \"FeeEst: %d %s%.0f%% decay %.5f: need feerate: %g from (%g - %g) %.2f%% %.1f/(%.1f+%d mem) Fail: (%g - %g) %.2f%% %.1f/(%.1f+%d mem)\\n\",\n+    LogPrint(BCLog::ESTIMATEFEE, \"FeeEst: %d %s%.0f%% decay %.5f: need feerate: %g from (%g - %g) %.2f%% %.1f/(%.1f+%d mem+%.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f+%d mem+%.1f out)\\n\",\n              confTarget, requireGreater ? \">\" : \"<\", 100.0 * successBreakPoint, decay,\n              median, passBucket.start, passBucket.end,\n-             100 * passBucket.withinTarget / (passBucket.totalConfirmed + passBucket.inMempool),\n-             passBucket.withinTarget, passBucket.totalConfirmed, passBucket.inMempool,\n+             100 * passBucket.withinTarget / (passBucket.totalConfirmed + passBucket.inMempool + passBucket.leftMempool),\n+             passBucket.withinTarget, passBucket.totalConfirmed, passBucket.inMempool, passBucket.leftMempool,\n              failBucket.start, failBucket.end,\n-             100 * failBucket.withinTarget / (failBucket.totalConfirmed + failBucket.inMempool),\n-             failBucket.withinTarget, failBucket.totalConfirmed, failBucket.inMempool);\n+             100 * failBucket.withinTarget / (failBucket.totalConfirmed + failBucket.inMempool + failBucket.leftMempool),\n+             failBucket.withinTarget, failBucket.totalConfirmed, failBucket.inMempool, failBucket.leftMempool);\n \n \n     if (result) {\n@@ -376,6 +390,19 @@ void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets\n \n     if (nFileVersion >= 149900) {\n         filein >> failAvg;\n+        if (maxConfirms != failAvg.size()) {\n+            throw std::runtime_error(\"Corrupt estimates file. Mismatch in confirms tracked for failures\");\n+        }\n+        for (unsigned int i = 0; i < maxConfirms; i++) {\n+            if (failAvg[i].size() != numBuckets) {\n+                throw std::runtime_error(\"Corrupt estimates file. Mismatch in one of failure average bucket counts\");\n+            }\n+        }\n+    } else {\n+        failAvg.resize(confAvg.size());\n+        for (unsigned int i = 0; i < failAvg.size(); i++) {\n+            failAvg[i].resize(numBuckets);\n+        }\n     }\n \n     // Resize the current block variables which aren't stored in the data file\n@@ -394,7 +421,7 @@ unsigned int TxConfirmStats::NewTx(unsigned int nBlockHeight, double val)\n     return bucketindex;\n }\n \n-void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHeight, unsigned int bucketindex)\n+void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHeight, unsigned int bucketindex, bool inBlock)\n {\n     //nBestSeenHeight is not updated yet for the new block\n     int blocksAgo = nBestSeenHeight - entryHeight;\n@@ -422,21 +449,26 @@ void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHe\n                      blockIndex, bucketindex);\n         }\n     }\n+    if (!inBlock && blocksAgo >= 1) {\n+        for (size_t i = 0; i < blocksAgo && i < failAvg.size(); i++) {\n+            failAvg[i][bucketindex]++;\n+        }\n+    }\n }\n \n // This function is called from CTxMemPool::removeUnchecked to ensure\n // txs removed from the mempool for any reason are no longer\n // tracked. Txs that were part of a block have already been removed in\n // processBlockTx to ensure they are never double tracked, but it is\n // of no harm to try to remove them again.\n-bool CBlockPolicyEstimator::removeTx(uint256 hash)\n+bool CBlockPolicyEstimator::removeTx(uint256 hash, bool inBlock)\n {\n     LOCK(cs_feeEstimator);\n     std::map<uint256, TxStatsInfo>::iterator pos = mapMemPoolTxs.find(hash);\n     if (pos != mapMemPoolTxs.end()) {\n-        feeStats->removeTx(pos->second.blockHeight, nBestSeenHeight, pos->second.bucketIndex);\n-        shortStats->removeTx(pos->second.blockHeight, nBestSeenHeight, pos->second.bucketIndex);\n-        longStats->removeTx(pos->second.blockHeight, nBestSeenHeight, pos->second.bucketIndex);\n+        feeStats->removeTx(pos->second.blockHeight, nBestSeenHeight, pos->second.bucketIndex, inBlock);\n+        shortStats->removeTx(pos->second.blockHeight, nBestSeenHeight, pos->second.bucketIndex, inBlock);\n+        longStats->removeTx(pos->second.blockHeight, nBestSeenHeight, pos->second.bucketIndex, inBlock);\n         mapMemPoolTxs.erase(hash);\n         return true;\n     } else {\n@@ -511,7 +543,7 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n \n bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry)\n {\n-    if (!removeTx(entry->GetTx().GetHash())) {\n+    if (!removeTx(entry->GetTx().GetHash(), true)) {\n         // This transaction wasn't being tracked for fee estimation\n         return false;\n     }\n@@ -766,6 +798,18 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n     return true;\n }\n \n+void CBlockPolicyEstimator::FlushUnconfirmed(CTxMemPool& pool) {\n+    int64_t startclear = GetTimeMicros();\n+    std::vector<uint256> txids;\n+    pool.queryHashes(txids);\n+    LOCK(cs_feeEstimator);\n+    for (auto& txid : txids) {\n+        removeTx(txid, false);\n+    }\n+    int64_t endclear = GetTimeMicros();\n+    LogPrint(BCLog::ESTIMATEFEE, \"Recorded %u unconfirmed txs from mempool in %ld micros\\n\",txids.size(), endclear - startclear);\n+}\n+\n FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)\n {\n     CAmount minFeeLimit = std::max(CAmount(1), minIncrementalFee.GetFeePerK() / 2);"
      },
      {
        "sha": "03adbac4d2cac55a7cd420616140e9106e1ddd07",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7447ec30348b338e77bc6429fbfac9f93549ef6/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7447ec30348b338e77bc6429fbfac9f93549ef6/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=c7447ec30348b338e77bc6429fbfac9f93549ef6",
        "patch": "@@ -74,6 +74,7 @@ struct EstimatorBucket\n     double withinTarget = 0;\n     double totalConfirmed = 0;\n     double inMempool = 0;\n+    double leftMempool = 0;\n };\n \n struct EstimationResult\n@@ -145,7 +146,7 @@ class CBlockPolicyEstimator\n     void processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate);\n \n     /** Remove a transaction from the mempool tracking stats*/\n-    bool removeTx(uint256 hash);\n+    bool removeTx(uint256 hash, bool inBlock);\n \n     /** Return a feerate estimate */\n     CFeeRate estimateFee(int confTarget) const;\n@@ -166,6 +167,9 @@ class CBlockPolicyEstimator\n     /** Read estimation data from a file */\n     bool Read(CAutoFile& filein);\n \n+    /** Empty mempool transactions on shutdown to record failure to confirm for txs still in mempool */\n+    void FlushUnconfirmed(CTxMemPool& pool);\n+\n private:\n     CFeeRate minTrackedFee;    //!< Passed to constructor to avoid dependency on main\n     unsigned int nBestSeenHeight;"
      },
      {
        "sha": "74e5ba5f44c28666bb8191e17803b30b536d63b1",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7447ec30348b338e77bc6429fbfac9f93549ef6/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7447ec30348b338e77bc6429fbfac9f93549ef6/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c7447ec30348b338e77bc6429fbfac9f93549ef6",
        "patch": "@@ -893,6 +893,7 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"  \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n             \"  \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n             \"  \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"  \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n             \"}\\n\"\n             \"\\n\"\n             \"A negative feerate is returned if no answer can be given.\\n\"\n@@ -927,11 +928,13 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n     result.push_back(Pair(\"pass.withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n     result.push_back(Pair(\"pass.totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n     result.push_back(Pair(\"pass.inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+    result.push_back(Pair(\"pass.leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n     result.push_back(Pair(\"fail.startrange\", round(buckets.fail.start)));\n     result.push_back(Pair(\"fail.endrange\", round(buckets.fail.end)));\n     result.push_back(Pair(\"fail.withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n     result.push_back(Pair(\"fail.totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n     result.push_back(Pair(\"fail.inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+    result.push_back(Pair(\"fail.leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n     return result;\n }\n "
      },
      {
        "sha": "94de72ba47d1d05c15c3b213803c19d56fd6bbfc",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7447ec30348b338e77bc6429fbfac9f93549ef6/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7447ec30348b338e77bc6429fbfac9f93549ef6/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=c7447ec30348b338e77bc6429fbfac9f93549ef6",
        "patch": "@@ -159,16 +159,16 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             txHashes[j].pop_back();\n         }\n     }\n-    mpool.removeForBlock(block, 265);\n+    mpool.removeForBlock(block, 266);\n     block.clear();\n     BOOST_CHECK(feeEst.estimateFee(1) == CFeeRate(0));\n     for (int i = 2; i < 10;i++) {\n-        BOOST_CHECK(feeEst.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(feeEst.estimateFee(i) == CFeeRate(0) || feeEst.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n     }\n \n-    // Mine 200 more blocks where everything is mined every block\n+    // Mine 400 more blocks where everything is mined every block\n     // Estimates should be below original estimates\n-    while (blocknum < 465) {\n+    while (blocknum < 665) {\n         for (int j = 0; j < 10; j++) { // For each fee multiple\n             for (int k = 0; k < 4; k++) { // add 4 fee txs\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;"
      },
      {
        "sha": "a83805267b9eb2d3801dcd98cc7f1c2bbfcc8301",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7447ec30348b338e77bc6429fbfac9f93549ef6/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7447ec30348b338e77bc6429fbfac9f93549ef6/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=c7447ec30348b338e77bc6429fbfac9f93549ef6",
        "patch": "@@ -448,7 +448,7 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     mapLinks.erase(it);\n     mapTx.erase(it);\n     nTransactionsUpdated++;\n-    if (minerPolicyEstimator) {minerPolicyEstimator->removeTx(hash);}\n+    if (minerPolicyEstimator) {minerPolicyEstimator->removeTx(hash, false);}\n }\n \n // Calculates descendants of entry that are not already in setDescendants, and adds to"
      }
    ]
  },
  {
    "sha": "3810e976d6a3956dff9e66077415cf04c1fe1f90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODEwZTk3NmQ2YTM5NTZkZmY5ZTY2MDc3NDE1Y2YwNGMxZmUxZjkw",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-07T16:33:44Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:47:44Z"
      },
      "message": "Rewrite estimateSmartFee\n\nChange the logic of estimateSmartFee to check a 60% threshold at half the target, a 85% threshold at the target and a 95% threshold at double the target. Always check the shortest time horizon possible and ensure that estimates are monotonically decreasing.  Add a conservative mode, which makes sure that the 95% threshold is also met at longer time horizons as well.",
      "tree": {
        "sha": "0f32c47253bb1b439a5935392822a080b58bad73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f32c47253bb1b439a5935392822a080b58bad73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3810e976d6a3956dff9e66077415cf04c1fe1f90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3810e976d6a3956dff9e66077415cf04c1fe1f90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3810e976d6a3956dff9e66077415cf04c1fe1f90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3810e976d6a3956dff9e66077415cf04c1fe1f90/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7447ec30348b338e77bc6429fbfac9f93549ef6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7447ec30348b338e77bc6429fbfac9f93549ef6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7447ec30348b338e77bc6429fbfac9f93549ef6"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 104,
      "deletions": 22
    },
    "files": [
      {
        "sha": "2b22d59ffb63352c5a98cffbf0b5655eeb063284",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 6,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3810e976d6a3956dff9e66077415cf04c1fe1f90/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3810e976d6a3956dff9e66077415cf04c1fe1f90/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=3810e976d6a3956dff9e66077415cf04c1fe1f90",
        "patch": "@@ -658,31 +658,107 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const\n+\n+/** Return a fee estimate at the required successThreshold from the shortest\n+ * time horizon which tracks confirmations up to the desired target.  If\n+ * checkShorterHorizon is requested, also allow short time horizon estimates\n+ * for a lower target to reduce the given answer */\n+double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon) const\n+{\n+    double estimate = -1;\n+    if (confTarget >= 1 && confTarget <= longStats->GetMaxConfirms()) {\n+        // Find estimate from shortest time horizon possible\n+        if (confTarget <= shortStats->GetMaxConfirms()) { // short horizon\n+            estimate = shortStats->EstimateMedianVal(confTarget, SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+        }\n+        else if (confTarget <= feeStats->GetMaxConfirms()) { // medium horizon\n+            estimate = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+        }\n+        else { // long horizon\n+            estimate = longStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+        }\n+        if (checkShorterHorizon) {\n+            // If a lower confTarget from a more recent horizon returns a lower answer use it.\n+            if (confTarget > feeStats->GetMaxConfirms()) {\n+                double medMax = feeStats->EstimateMedianVal(feeStats->GetMaxConfirms(), SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                if (medMax > 0 && (estimate == -1 || medMax < estimate))\n+                    estimate = medMax;\n+            }\n+            if (confTarget > shortStats->GetMaxConfirms()) {\n+                double shortMax = shortStats->EstimateMedianVal(shortStats->GetMaxConfirms(), SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+                if (shortMax > 0 && (estimate == -1 || shortMax < estimate))\n+                    estimate = shortMax;\n+            }\n+        }\n+    }\n+    return estimate;\n+}\n+\n+double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget) const\n+{\n+    double estimate = -1;\n+    if (doubleTarget <= shortStats->GetMaxConfirms()) {\n+        estimate = feeStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+    }\n+    if (doubleTarget <= feeStats->GetMaxConfirms()) {\n+        double longEstimate = longStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+        if (longEstimate > estimate) {\n+            estimate = longEstimate;\n+        }\n+    }\n+    return estimate;\n+}\n+\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool, bool conservative) const\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n \n     double median = -1;\n-\n     {\n         LOCK(cs_feeEstimator);\n \n         // Return failure if trying to analyze a target we're not tracking\n-        if (confTarget <= 0 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n+        if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n             return CFeeRate(0);\n \n         // It's not possible to get reasonable estimates for confTarget of 1\n         if (confTarget == 1)\n             confTarget = 2;\n \n-        while (median < 0 && (unsigned int)confTarget <= feeStats->GetMaxConfirms()) {\n-            median = feeStats->EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+        assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints\n+\n+        /** true is passed to estimateCombined fee for target/2 and target so\n+         * that we check the max confirms for shorter time horizons as well.\n+         * This is necessary to preserve monotonically increasing estimates.\n+         * For non-conservative estimates we do the same thing for 2*target, but\n+         * for conservative estimates we want to skip these shorter horizons\n+         * checks for 2*target becuase we are taking the max over all time\n+         * horizons so we already have monotonically increasing estimates and\n+         * the purpose of conservative estimates is not to let short term\n+         * fluctuations lower our estimates by too much.\n+         */\n+        double halfEst = estimateCombinedFee(confTarget/2, HALF_SUCCESS_PCT, true);\n+        double actualEst = estimateCombinedFee(confTarget, SUCCESS_PCT, true);\n+        double doubleEst = estimateCombinedFee(2 * confTarget, DOUBLE_SUCCESS_PCT, !conservative);\n+        median = halfEst;\n+        if (actualEst > median) {\n+            median = actualEst;\n+        }\n+        if (doubleEst > median) {\n+            median = doubleEst;\n+        }\n+\n+        if (conservative || median == -1) {\n+            double consEst =  estimateConservativeFee(2 * confTarget);\n+            if (consEst > median) {\n+                median = consEst;\n+            }\n         }\n     } // Must unlock cs_feeEstimator before taking mempool locks\n \n     if (answerFoundAtTarget)\n-        *answerFoundAtTarget = confTarget - 1;\n+        *answerFoundAtTarget = confTarget;\n \n     // If mempool is limiting txs , return at least the min feerate from the mempool\n     CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n@@ -695,6 +771,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n     return CFeeRate(median);\n }\n \n+\n bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n {\n     try {"
      },
      {
        "sha": "7064ad15c138f093b6a36f1445874eccaed7805b",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3810e976d6a3956dff9e66077415cf04c1fe1f90/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3810e976d6a3956dff9e66077415cf04c1fe1f90/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=3810e976d6a3956dff9e66077415cf04c1fe1f90",
        "patch": "@@ -155,7 +155,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const;\n+    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool, bool conservative = true) const;\n \n     /** Return a specific fee estimate calculation with a given success threshold and time horizon.\n      */\n@@ -199,6 +199,8 @@ class CBlockPolicyEstimator\n     /** Process a transaction confirmed in a block*/\n     bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry);\n \n+    double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon) const;\n+    double estimateConservativeFee(unsigned int doubleTarget) const;\n };\n \n class FeeFilterRounder"
      },
      {
        "sha": "455d1dc722dca5af7211e4d799b12d78ba539310",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3810e976d6a3956dff9e66077415cf04c1fe1f90/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3810e976d6a3956dff9e66077415cf04c1fe1f90/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=3810e976d6a3956dff9e66077415cf04c1fe1f90",
        "patch": "@@ -106,6 +106,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getrawmempool\", 0, \"verbose\" },\n     { \"estimatefee\", 0, \"nblocks\" },\n     { \"estimatesmartfee\", 0, \"nblocks\" },\n+    { \"estimatesmartfee\", 1, \"conservative\" },\n     { \"estimaterawfee\", 0, \"nblocks\" },\n     { \"estimaterawfee\", 1, \"threshold\" },\n     { \"estimaterawfee\", 2, \"horizon\" },"
      },
      {
        "sha": "9f6cab861ca56bbad47ce14f47f0e1fc27632329",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3810e976d6a3956dff9e66077415cf04c1fe1f90/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3810e976d6a3956dff9e66077415cf04c1fe1f90/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=3810e976d6a3956dff9e66077415cf04c1fe1f90",
        "patch": "@@ -828,16 +828,20 @@ UniValue estimatefee(const JSONRPCRequest& request)\n \n UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"estimatesmartfee nblocks\\n\"\n+            \"estimatesmartfee nblocks (conservative)\\n\"\n             \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n             \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n             \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks       (numeric)\\n\"\n+            \"2. conservative  (bool, optional, default=true) Whether to return a more conservative estimate which\\n\"\n+            \"                 also satisfies a longer history. A conservative estimate potentially returns a higher\\n\"\n+            \"                 feerate and is more likely to be sufficient for the desired target, but is not as\\n\"\n+            \"                 responsive to short term drops in the prevailing fee market\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"feerate\\\" : x.x,     (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n@@ -854,10 +858,15 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n@@ -951,7 +960,7 @@ static const CRPCCommand commands[] =\n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true,  {\"nblocks\",\"address\",\"maxtries\"} },\n \n     { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },\n-    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\"} },\n+    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\", \"conservative\"} },\n \n     { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"nblocks\", \"threshold\", \"horizon\"} },\n };"
      },
      {
        "sha": "0d7ca1251fa418fc831ff76209f5fcbb8f3fec44",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3810e976d6a3956dff9e66077415cf04c1fe1f90/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3810e976d6a3956dff9e66077415cf04c1fe1f90/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=3810e976d6a3956dff9e66077415cf04c1fe1f90",
        "patch": "@@ -83,11 +83,6 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             BOOST_CHECK(feeEst.estimateFee(1) == CFeeRate(0));\n             BOOST_CHECK(feeEst.estimateFee(2).GetFeePerK() < 9*baseRate.GetFeePerK() + deltaFee);\n             BOOST_CHECK(feeEst.estimateFee(2).GetFeePerK() > 9*baseRate.GetFeePerK() - deltaFee);\n-            int answerFound;\n-            BOOST_CHECK(feeEst.estimateSmartFee(1, &answerFound, mpool) == feeEst.estimateFee(2) && answerFound == 2);\n-            BOOST_CHECK(feeEst.estimateSmartFee(2, &answerFound, mpool) == feeEst.estimateFee(2) && answerFound == 2);\n-            BOOST_CHECK(feeEst.estimateSmartFee(4, &answerFound, mpool) == feeEst.estimateFee(4) && answerFound == 4);\n-            BOOST_CHECK(feeEst.estimateSmartFee(8, &answerFound, mpool) == feeEst.estimateFee(8) && answerFound == 8);\n         }\n     }\n \n@@ -143,10 +138,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         mpool.removeForBlock(block, ++blocknum);\n     }\n \n-    int answerFound;\n     for (int i = 1; i < 10;i++) {\n         BOOST_CHECK(feeEst.estimateFee(i) == CFeeRate(0) || feeEst.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, &answerFound, mpool).GetFeePerK() > origFeeEst[answerFound-1] - deltaFee);\n     }\n \n     // Mine all those transactions\n@@ -194,7 +187,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     mpool.TrimToSize(1);\n     BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[5]);\n     for (int i = 1; i < 10; i++) {\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= feeEst.estimateFee(i).GetFeePerK());\n+        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= feeEst.estimateRawFee(i, 0.85, FeeEstimateHorizon::MED_HALFLIFE).GetFeePerK());\n         BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n     }\n }"
      },
      {
        "sha": "aafdb14846264430f5da21c78edc70e769d1388e",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3810e976d6a3956dff9e66077415cf04c1fe1f90/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3810e976d6a3956dff9e66077415cf04c1fe1f90/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=3810e976d6a3956dff9e66077415cf04c1fe1f90",
        "patch": "@@ -116,8 +116,8 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n     for i,e in enumerate(all_estimates): # estimate is for i+1\n         if e >= 0:\n             valid_estimate = True\n-            # estimatesmartfee should return the same result\n-            assert_equal(node.estimatesmartfee(i+1)[\"feerate\"], e)\n+            if i >= 13:  # for n>=14 estimatesmartfee(n/2) should be at least as high as estimatefee(n)\n+                assert(node.estimatesmartfee((i+1)//2)[\"feerate\"] > float(e) - delta)\n \n         else:\n             invalid_estimates += 1"
      }
    ]
  },
  {
    "sha": "10f7cbd2471ae289d2846e09c4b088fdc0330c8f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGY3Y2JkMjQ3MWFlMjg5ZDI4NDZlMDljNGIwODhmZGMwMzMwYzhm",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-07T20:01:50Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:47:44Z"
      },
      "message": "Track first recorded height\n\nTrack the first time we seen txs in a block that we have been tracking in our mempool. Used to evaluate validity of fee estimates for different targets.",
      "tree": {
        "sha": "09377865a8899abf9bdc028cf6652c1e7a2b1c57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09377865a8899abf9bdc028cf6652c1e7a2b1c57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10f7cbd2471ae289d2846e09c4b088fdc0330c8f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10f7cbd2471ae289d2846e09c4b088fdc0330c8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10f7cbd2471ae289d2846e09c4b088fdc0330c8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10f7cbd2471ae289d2846e09c4b088fdc0330c8f/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3810e976d6a3956dff9e66077415cf04c1fe1f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3810e976d6a3956dff9e66077415cf04c1fe1f90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3810e976d6a3956dff9e66077415cf04c1fe1f90"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cba063aea90a88e7505100d8eedc8523f42a324f",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10f7cbd2471ae289d2846e09c4b088fdc0330c8f/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10f7cbd2471ae289d2846e09c4b088fdc0330c8f/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=10f7cbd2471ae289d2846e09c4b088fdc0330c8f",
        "patch": "@@ -477,7 +477,7 @@ bool CBlockPolicyEstimator::removeTx(uint256 hash, bool inBlock)\n }\n \n CBlockPolicyEstimator::CBlockPolicyEstimator()\n-    : nBestSeenHeight(0), trackedTxs(0), untrackedTxs(0)\n+    : nBestSeenHeight(0), firstRecordedHeight(0), trackedTxs(0), untrackedTxs(0)\n {\n     static_assert(MIN_BUCKET_FEERATE > 0, \"Min feerate must be nonzero\");\n     minTrackedFee = CFeeRate(MIN_BUCKET_FEERATE);\n@@ -603,6 +603,11 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n             countedTxs++;\n     }\n \n+    if (firstRecordedHeight == 0 && countedTxs > 0) {\n+        firstRecordedHeight = nBestSeenHeight;\n+        LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy first recorded height %u\\n\", firstRecordedHeight);\n+    }\n+\n \n     LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy after updating estimates for %u of %u txs in block, since last block %u of %u tracked, new mempool map size %u\\n\",\n              countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size());"
      },
      {
        "sha": "3184aa08abaf347c73996a7a8b5deef942de7675",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10f7cbd2471ae289d2846e09c4b088fdc0330c8f/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10f7cbd2471ae289d2846e09c4b088fdc0330c8f/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=10f7cbd2471ae289d2846e09c4b088fdc0330c8f",
        "patch": "@@ -173,6 +173,10 @@ class CBlockPolicyEstimator\n private:\n     CFeeRate minTrackedFee;    //!< Passed to constructor to avoid dependency on main\n     unsigned int nBestSeenHeight;\n+    unsigned int firstRecordedHeight;\n+    unsigned int historicalFirst;\n+    unsigned int historicalBest;\n+\n     struct TxStatsInfo\n     {\n         unsigned int blockHeight;"
      }
    ]
  },
  {
    "sha": "aa19b8ea44b292cd612c4ce01e08c83324fa8296",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTE5YjhlYTQ0YjI5MmNkNjEyYzRjZTAxZTA4YzgzMzI0ZmE4Mjk2",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-10T21:57:21Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:47:45Z"
      },
      "message": "Clean up fee estimate debug printing",
      "tree": {
        "sha": "afa9c6f9c0e056696b8245e944474879149abdd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afa9c6f9c0e056696b8245e944474879149abdd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa19b8ea44b292cd612c4ce01e08c83324fa8296",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa19b8ea44b292cd612c4ce01e08c83324fa8296",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa19b8ea44b292cd612c4ce01e08c83324fa8296",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa19b8ea44b292cd612c4ce01e08c83324fa8296/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10f7cbd2471ae289d2846e09c4b088fdc0330c8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10f7cbd2471ae289d2846e09c4b088fdc0330c8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10f7cbd2471ae289d2846e09c4b088fdc0330c8f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1b8ef85282eca73c33e13b1e9e365c9c48bf4441",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa19b8ea44b292cd612c4ce01e08c83324fa8296/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa19b8ea44b292cd612c4ce01e08c83324fa8296/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=aa19b8ea44b292cd612c4ce01e08c83324fa8296",
        "patch": "@@ -325,7 +325,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n         failBucket.leftMempool = failNum;\n     }\n \n-    LogPrint(BCLog::ESTIMATEFEE, \"FeeEst: %d %s%.0f%% decay %.5f: need feerate: %g from (%g - %g) %.2f%% %.1f/(%.1f+%d mem+%.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f+%d mem+%.1f out)\\n\",\n+    LogPrint(BCLog::ESTIMATEFEE, \"FeeEst: %d %s%.0f%% decay %.5f: feerate: %g from (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out)\\n\",\n              confTarget, requireGreater ? \">\" : \"<\", 100.0 * successBreakPoint, decay,\n              median, passBucket.start, passBucket.end,\n              100 * passBucket.withinTarget / (passBucket.totalConfirmed + passBucket.inMempool + passBucket.leftMempool),"
      }
    ]
  },
  {
    "sha": "5f1f0c64905491fea4ba50c0a8eb68fa59d65411",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjFmMGM2NDkwNTQ5MWZlYTRiYTUwYzBhOGViNjhmYTU5ZDY1NDEx",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-10T21:57:40Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:47:45Z"
      },
      "message": "Historical block span\n\nStore in fee estimate file the block span for which we were tracking estimates, so we know what targets we can successfully evaluate with the data in the file. When restarting use either this historical block span to set valid range of targets until our current span of tracking estimates is just as long.",
      "tree": {
        "sha": "ba3d8fcf85daea9a7d7f03ec4fce5a9b2809bb2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba3d8fcf85daea9a7d7f03ec4fce5a9b2809bb2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f1f0c64905491fea4ba50c0a8eb68fa59d65411",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f1f0c64905491fea4ba50c0a8eb68fa59d65411",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f1f0c64905491fea4ba50c0a8eb68fa59d65411",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f1f0c64905491fea4ba50c0a8eb68fa59d65411/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa19b8ea44b292cd612c4ce01e08c83324fa8296",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa19b8ea44b292cd612c4ce01e08c83324fa8296",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa19b8ea44b292cd612c4ce01e08c83324fa8296"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 53,
      "deletions": 9
    },
    "files": [
      {
        "sha": "74ed0027246259a65da88350f6b3c6531720e444",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 9,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1f0c64905491fea4ba50c0a8eb68fa59d65411/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1f0c64905491fea4ba50c0a8eb68fa59d65411/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=5f1f0c64905491fea4ba50c0a8eb68fa59d65411",
        "patch": "@@ -477,7 +477,7 @@ bool CBlockPolicyEstimator::removeTx(uint256 hash, bool inBlock)\n }\n \n CBlockPolicyEstimator::CBlockPolicyEstimator()\n-    : nBestSeenHeight(0), firstRecordedHeight(0), trackedTxs(0), untrackedTxs(0)\n+    : nBestSeenHeight(0), firstRecordedHeight(0), historicalFirst(0), historicalBest(0), trackedTxs(0), untrackedTxs(0)\n {\n     static_assert(MIN_BUCKET_FEERATE > 0, \"Min feerate must be nonzero\");\n     minTrackedFee = CFeeRate(MIN_BUCKET_FEERATE);\n@@ -609,8 +609,9 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n     }\n \n \n-    LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy after updating estimates for %u of %u txs in block, since last block %u of %u tracked, new mempool map size %u\\n\",\n-             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size());\n+    LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy estimates updated by %u of %u block txs, since last block %u of %u tracked, mempool map size %u, max target %u from %s\\n\",\n+             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size(),\n+             MaxUsableEstimate(), HistoricalBlockSpan() > BlockSpan() ? \"historical\" : \"current\");\n \n     trackedTxs = 0;\n     untrackedTxs = 0;\n@@ -663,6 +664,29 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     return CFeeRate(median);\n }\n \n+unsigned int CBlockPolicyEstimator::BlockSpan() const\n+{\n+    if (firstRecordedHeight == 0) return 0;\n+    assert(nBestSeenHeight >= firstRecordedHeight);\n+\n+    return nBestSeenHeight - firstRecordedHeight;\n+}\n+\n+unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const\n+{\n+    if (historicalFirst == 0) return 0;\n+    assert(historicalBest >= historicalFirst);\n+\n+    if (nBestSeenHeight - historicalBest > OLDEST_ESTIMATE_HISTORY) return 0;\n+\n+    return historicalBest - historicalFirst;\n+}\n+\n+unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const\n+{\n+    // Block spans are divided by 2 to make sure there are enough potential failing data points for the estimate\n+    return std::min(longStats->GetMaxConfirms(), std::max(BlockSpan(), HistoricalBlockSpan()) / 2);\n+}\n \n /** Return a fee estimate at the required successThreshold from the shortest\n  * time horizon which tracks confirmations up to the desired target.  If\n@@ -731,6 +755,14 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n         if (confTarget == 1)\n             confTarget = 2;\n \n+        unsigned int maxUsableEstimate = MaxUsableEstimate();\n+        if (maxUsableEstimate <= 1)\n+            return CFeeRate(0);\n+\n+        if ((unsigned int)confTarget > maxUsableEstimate) {\n+            confTarget = maxUsableEstimate;\n+        }\n+\n         assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints\n \n         /** true is passed to estimateCombined fee for target/2 and target so\n@@ -784,8 +816,12 @@ bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n         fileout << 149900; // version required to read: 0.14.99 or later\n         fileout << CLIENT_VERSION; // version that wrote the file\n         fileout << nBestSeenHeight;\n-        unsigned int future1 = 0, future2 = 0;\n-        fileout << future1 << future2;\n+        if (BlockSpan() > HistoricalBlockSpan()/2) {\n+            fileout << firstRecordedHeight << nBestSeenHeight;\n+        }\n+        else {\n+            fileout << historicalFirst << historicalBest;\n+        }\n         fileout << buckets;\n         feeStats->Write(fileout);\n         shortStats->Write(fileout);\n@@ -803,7 +839,7 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n     try {\n         LOCK(cs_feeEstimator);\n         int nVersionRequired, nVersionThatWrote;\n-        unsigned int nFileBestSeenHeight;\n+        unsigned int nFileBestSeenHeight, nFileHistoricalFirst, nFileHistoricalBest;\n         filein >> nVersionRequired >> nVersionThatWrote;\n         if (nVersionRequired > CLIENT_VERSION)\n             return error(\"CBlockPolicyEstimator::Read(): up-version (%d) fee estimate file\", nVersionRequired);\n@@ -838,9 +874,10 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n             }\n         }\n         else { // nVersionThatWrote >= 149900\n-            unsigned int future1, future2;\n-            filein >> future1 >> future2;\n-\n+            filein >> nFileHistoricalFirst >> nFileHistoricalBest;\n+            if (nFileHistoricalFirst > nFileHistoricalBest || nFileHistoricalBest > nFileBestSeenHeight) {\n+                throw std::runtime_error(\"Corrupt estimates file. Historical block range for estimates is invalid\");\n+            }\n             std::vector<double> fileBuckets;\n             filein >> fileBuckets;\n             size_t numBuckets = fileBuckets.size();\n@@ -871,6 +908,8 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n             longStats = fileLongStats.release();\n \n             nBestSeenHeight = nFileBestSeenHeight;\n+            historicalFirst = nFileHistoricalFirst;\n+            historicalBest = nFileHistoricalBest;\n         }\n     }\n     catch (const std::exception& e) {"
      },
      {
        "sha": "1f752415e72c001e0e0d32345da06001d61de242",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1f0c64905491fea4ba50c0a8eb68fa59d65411/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1f0c64905491fea4ba50c0a8eb68fa59d65411/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=5f1f0c64905491fea4ba50c0a8eb68fa59d65411",
        "patch": "@@ -98,6 +98,8 @@ class CBlockPolicyEstimator\n     static constexpr unsigned int MED_BLOCK_CONFIRMS = 48;\n     /** Track confirm delays up to 1008 blocks for longer decay */\n     static constexpr unsigned int LONG_BLOCK_CONFIRMS = 1008;\n+    /** Historical estimates that are older than this aren't valid */\n+    static const unsigned int OLDEST_ESTIMATE_HISTORY = 6 * 1008;\n \n     /** Decay of .962 is a half-life of 18 blocks or about 3 hours */\n     static constexpr double SHORT_DECAY = .962;\n@@ -205,6 +207,9 @@ class CBlockPolicyEstimator\n \n     double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon) const;\n     double estimateConservativeFee(unsigned int doubleTarget) const;\n+    unsigned int BlockSpan() const;\n+    unsigned int HistoricalBlockSpan() const;\n+    unsigned int MaxUsableEstimate() const;\n };\n \n class FeeFilterRounder"
      }
    ]
  },
  {
    "sha": "3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWU3NmQ2ZGU1YzhmODcwNWM0YjliYmNjNzVkYTBkZjRkNDJjOTY2",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-03T15:31:27Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:47:45Z"
      },
      "message": "Introduce a scale factor\n\nFor the per confirmation number tracking of data, introduce a scale factor so that in the longer horizones confirmations are bucketed together at a resolution of the scale.  (instead of 1008 individual data points for each fee bucket, have 42 data points each covering 24 different confirmation values.. (1-24), (25-48), etc.. )",
      "tree": {
        "sha": "73e4c35a931df13e5b8300e0fd983ebc26e00044",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73e4c35a931df13e5b8300e0fd983ebc26e00044"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f1f0c64905491fea4ba50c0a8eb68fa59d65411",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f1f0c64905491fea4ba50c0a8eb68fa59d65411",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f1f0c64905491fea4ba50c0a8eb68fa59d65411"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 45,
      "deletions": 35
    },
    "files": [
      {
        "sha": "44adb26d4ccd58a09e18e45bcf3311e0764a45bb",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 27,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966",
        "patch": "@@ -53,13 +53,14 @@ class TxConfirmStats\n \n     double decay;\n \n+    // Resolution (# of blocks) with which confirmations are tracked\n     unsigned int scale;\n \n     // Mempool counts of outstanding transactions\n     // For each bucket X, track the number of transactions in the mempool\n     // that are unconfirmed for each possible confirmation value Y\n     std::vector<std::vector<int> > unconfTxs;  //unconfTxs[Y][X]\n-    // transactions still unconfirmed after MAX_CONFIRMS for each bucket\n+    // transactions still unconfirmed after GetMaxConfirms for each bucket\n     std::vector<int> oldUnconfTxs;\n \n     void resizeInMemoryCounters(size_t newbuckets);\n@@ -73,7 +74,7 @@ class TxConfirmStats\n      * @param decay how much to decay the historical moving average per block\n      */\n     TxConfirmStats(const std::vector<double>& defaultBuckets, const std::map<double, unsigned int>& defaultBucketMap,\n-                   unsigned int maxConfirms, double decay);\n+                   unsigned int maxPeriods, double decay, unsigned int scale);\n \n     /** Roll the circular buffer for unconfirmed txs*/\n     void ClearCurrent(unsigned int nBlockHeight);\n@@ -113,7 +114,7 @@ class TxConfirmStats\n                              EstimationResult *result = nullptr) const;\n \n     /** Return the max number of confirms we're tracking */\n-    unsigned int GetMaxConfirms() const { return confAvg.size(); }\n+    unsigned int GetMaxConfirms() const { return scale * confAvg.size(); }\n \n     /** Write state of estimation data to a file*/\n     void Write(CAutoFile& fileout) const;\n@@ -128,17 +129,17 @@ class TxConfirmStats\n \n TxConfirmStats::TxConfirmStats(const std::vector<double>& defaultBuckets,\n                                 const std::map<double, unsigned int>& defaultBucketMap,\n-                               unsigned int maxConfirms, double _decay)\n+                               unsigned int maxPeriods, double _decay, unsigned int _scale)\n     : buckets(defaultBuckets), bucketMap(defaultBucketMap)\n {\n     decay = _decay;\n-    scale = 1;\n-    confAvg.resize(maxConfirms);\n-    for (unsigned int i = 0; i < maxConfirms; i++) {\n+    scale = _scale;\n+    confAvg.resize(maxPeriods);\n+    for (unsigned int i = 0; i < maxPeriods; i++) {\n         confAvg[i].resize(buckets.size());\n     }\n-    failAvg.resize(maxConfirms);\n-    for (unsigned int i = 0; i < maxConfirms; i++) {\n+    failAvg.resize(maxPeriods);\n+    for (unsigned int i = 0; i < maxPeriods; i++) {\n         failAvg[i].resize(buckets.size());\n     }\n \n@@ -172,8 +173,9 @@ void TxConfirmStats::Record(int blocksToConfirm, double val)\n     // blocksToConfirm is 1-based\n     if (blocksToConfirm < 1)\n         return;\n+    int periodsToConfirm = (blocksToConfirm + scale - 1)/scale;\n     unsigned int bucketindex = bucketMap.lower_bound(val)->second;\n-    for (size_t i = blocksToConfirm; i <= confAvg.size(); i++) {\n+    for (size_t i = periodsToConfirm; i <= confAvg.size(); i++) {\n         confAvg[i - 1][bucketindex]++;\n     }\n     txCtAvg[bucketindex]++;\n@@ -202,6 +204,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n     double totalNum = 0; // Total number of tx's that were ever confirmed\n     int extraNum = 0;  // Number of tx's still in mempool for confTarget or longer\n     double failNum = 0; // Number of tx's that were never confirmed but removed from the mempool after confTarget\n+    int periodTarget = (confTarget + scale - 1)/scale;\n \n     int maxbucketindex = buckets.size() - 1;\n \n@@ -236,9 +239,9 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n             newBucketRange = false;\n         }\n         curFarBucket = bucket;\n-        nConf += confAvg[confTarget - 1][bucket];\n+        nConf += confAvg[periodTarget - 1][bucket];\n         totalNum += txCtAvg[bucket];\n-        failNum += failAvg[confTarget - 1][bucket];\n+        failNum += failAvg[periodTarget - 1][bucket];\n         for (unsigned int confct = confTarget; confct < GetMaxConfirms(); confct++)\n             extraNum += unconfTxs[(nBlockHeight - confct)%bins][bucket];\n         extraNum += oldUnconfTxs[bucket];\n@@ -339,6 +342,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n         result->pass = passBucket;\n         result->fail = failBucket;\n         result->decay = decay;\n+        result->scale = scale;\n     }\n     return median;\n }\n@@ -358,15 +362,15 @@ void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets\n     // Read data file and do some very basic sanity checking\n     // buckets and bucketMap are not updated yet, so don't access them\n     // If there is a read failure, we'll just discard this entire object anyway\n-    size_t maxConfirms;\n+    size_t maxConfirms, maxPeriods;\n \n     // The current version will store the decay with each individual TxConfirmStats and also keep a scale factor\n     if (nFileVersion >= 149900) {\n         filein >> decay;\n         if (decay <= 0 || decay >= 1) {\n             throw std::runtime_error(\"Corrupt estimates file. Decay must be between 0 and 1 (non-inclusive)\");\n         }\n-        filein >> scale; //Unused for now\n+        filein >> scale;\n     }\n \n     filein >> avg;\n@@ -378,22 +382,24 @@ void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets\n         throw std::runtime_error(\"Corrupt estimates file. Mismatch in tx count bucket count\");\n     }\n     filein >> confAvg;\n-    maxConfirms = confAvg.size();\n+    maxPeriods = confAvg.size();\n+    maxConfirms = scale * maxPeriods;\n+\n     if (maxConfirms <= 0 || maxConfirms > 6 * 24 * 7) { // one week\n         throw std::runtime_error(\"Corrupt estimates file.  Must maintain estimates for between 1 and 1008 (one week) confirms\");\n     }\n-    for (unsigned int i = 0; i < maxConfirms; i++) {\n+    for (unsigned int i = 0; i < maxPeriods; i++) {\n         if (confAvg[i].size() != numBuckets) {\n             throw std::runtime_error(\"Corrupt estimates file. Mismatch in feerate conf average bucket count\");\n         }\n     }\n \n     if (nFileVersion >= 149900) {\n         filein >> failAvg;\n-        if (maxConfirms != failAvg.size()) {\n+        if (maxPeriods != failAvg.size()) {\n             throw std::runtime_error(\"Corrupt estimates file. Mismatch in confirms tracked for failures\");\n         }\n-        for (unsigned int i = 0; i < maxConfirms; i++) {\n+        for (unsigned int i = 0; i < maxPeriods; i++) {\n             if (failAvg[i].size() != numBuckets) {\n                 throw std::runtime_error(\"Corrupt estimates file. Mismatch in one of failure average bucket counts\");\n             }\n@@ -449,8 +455,9 @@ void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHe\n                      blockIndex, bucketindex);\n         }\n     }\n-    if (!inBlock && blocksAgo >= 1) {\n-        for (size_t i = 0; i < blocksAgo && i < failAvg.size(); i++) {\n+    if (!inBlock && (unsigned int)blocksAgo >= scale) { // Only counts as a failure if not confirmed for entire period\n+        unsigned int periodsAgo = blocksAgo / scale;\n+        for (size_t i = 0; i < periodsAgo && i < failAvg.size(); i++) {\n             failAvg[i][bucketindex]++;\n         }\n     }\n@@ -490,9 +497,9 @@ CBlockPolicyEstimator::CBlockPolicyEstimator()\n     bucketMap[INF_FEERATE] = bucketIndex;\n     assert(bucketMap.size() == buckets.size());\n \n-    feeStats = new TxConfirmStats(buckets, bucketMap, MED_BLOCK_CONFIRMS, MED_DECAY);\n-    shortStats = new TxConfirmStats(buckets, bucketMap, SHORT_BLOCK_CONFIRMS, SHORT_DECAY);\n-    longStats = new TxConfirmStats(buckets, bucketMap, LONG_BLOCK_CONFIRMS, LONG_DECAY);\n+    feeStats = new TxConfirmStats(buckets, bucketMap, MED_BLOCK_PERIODS, MED_DECAY, MED_SCALE);\n+    shortStats = new TxConfirmStats(buckets, bucketMap, SHORT_BLOCK_PERIODS, SHORT_DECAY, SHORT_SCALE);\n+    longStats = new TxConfirmStats(buckets, bucketMap, LONG_BLOCK_PERIODS, LONG_DECAY, LONG_SCALE);\n }\n \n CBlockPolicyEstimator::~CBlockPolicyEstimator()\n@@ -864,7 +871,7 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n \n             std::map<double, unsigned int> tempMap;\n \n-            std::unique_ptr<TxConfirmStats> tempFeeStats(new TxConfirmStats(tempBuckets, tempMap, MED_BLOCK_CONFIRMS, tempDecay));\n+            std::unique_ptr<TxConfirmStats> tempFeeStats(new TxConfirmStats(tempBuckets, tempMap, MED_BLOCK_PERIODS, tempDecay, 1));\n             tempFeeStats->Read(filein, nVersionThatWrote, tempNum);\n             // if nVersionThatWrote < 139900 then another TxConfirmStats (for priority) follows but can be ignored.\n \n@@ -884,9 +891,9 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n             if (numBuckets <= 1 || numBuckets > 1000)\n                 throw std::runtime_error(\"Corrupt estimates file. Must have between 2 and 1000 feerate buckets\");\n \n-            std::unique_ptr<TxConfirmStats> fileFeeStats(new TxConfirmStats(buckets, bucketMap, MED_BLOCK_CONFIRMS, MED_DECAY));\n-            std::unique_ptr<TxConfirmStats> fileShortStats(new TxConfirmStats(buckets, bucketMap, SHORT_BLOCK_CONFIRMS, SHORT_DECAY));\n-            std::unique_ptr<TxConfirmStats> fileLongStats(new TxConfirmStats(buckets, bucketMap, LONG_BLOCK_CONFIRMS, LONG_DECAY));\n+            std::unique_ptr<TxConfirmStats> fileFeeStats(new TxConfirmStats(buckets, bucketMap, MED_BLOCK_PERIODS, MED_DECAY, MED_SCALE));\n+            std::unique_ptr<TxConfirmStats> fileShortStats(new TxConfirmStats(buckets, bucketMap, SHORT_BLOCK_PERIODS, SHORT_DECAY, SHORT_SCALE));\n+            std::unique_ptr<TxConfirmStats> fileLongStats(new TxConfirmStats(buckets, bucketMap, LONG_BLOCK_PERIODS, LONG_DECAY, LONG_SCALE));\n             fileFeeStats->Read(filein, nVersionThatWrote, numBuckets);\n             fileShortStats->Read(filein, nVersionThatWrote, numBuckets);\n             fileLongStats->Read(filein, nVersionThatWrote, numBuckets);"
      },
      {
        "sha": "45356d62f613dc0efcbea6f7633dfd7032fadd2e",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966",
        "patch": "@@ -82,6 +82,7 @@ struct EstimationResult\n     EstimatorBucket pass;\n     EstimatorBucket fail;\n     double decay;\n+    unsigned int scale;\n };\n \n /**\n@@ -93,11 +94,14 @@ class CBlockPolicyEstimator\n {\n private:\n     /** Track confirm delays up to 12 blocks medium decay */\n-    static constexpr unsigned int SHORT_BLOCK_CONFIRMS = 12;\n+    static constexpr unsigned int SHORT_BLOCK_PERIODS = 12;\n+    static constexpr unsigned int SHORT_SCALE = 1;\n     /** Track confirm delays up to 48 blocks medium decay */\n-    static constexpr unsigned int MED_BLOCK_CONFIRMS = 48;\n+    static constexpr unsigned int MED_BLOCK_PERIODS = 24;\n+    static constexpr unsigned int MED_SCALE = 2;\n     /** Track confirm delays up to 1008 blocks for longer decay */\n-    static constexpr unsigned int LONG_BLOCK_CONFIRMS = 1008;\n+    static constexpr unsigned int LONG_BLOCK_PERIODS = 42;\n+    static constexpr unsigned int LONG_SCALE = 24;\n     /** Historical estimates that are older than this aren't valid */\n     static const unsigned int OLDEST_ESTIMATE_HISTORY = 6 * 1008;\n "
      },
      {
        "sha": "22bff1cf9e55a6877e3789d3680320db388d8260",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966",
        "patch": "@@ -895,6 +895,7 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n             \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n             \"  \\\"pass.\\\"                 information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n             \"  \\\"fail.\\\"                 information about the highest range of feerates to fail to meet the threshold\\n\"\n             \"  \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n@@ -932,6 +933,7 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n \n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"decay\", buckets.decay));\n+    result.push_back(Pair(\"scale\", (int)buckets.scale));\n     result.push_back(Pair(\"pass.startrange\", round(buckets.pass.start)));\n     result.push_back(Pair(\"pass.endrange\", round(buckets.pass.end)));\n     result.push_back(Pair(\"pass.withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));"
      },
      {
        "sha": "6bfd31564730233d800b244a2b93bd56bbdb6123",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966",
        "patch": "@@ -99,13 +99,10 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             BOOST_CHECK(origFeeEst[i-1] <= origFeeEst[i-2]);\n         }\n         int mult = 11-i;\n-        if (i > 1) {\n+        if (i % 2 == 0) { //At scale 2, test logic is only correct for even targets\n             BOOST_CHECK(origFeeEst[i-1] < mult*baseRate.GetFeePerK() + deltaFee);\n             BOOST_CHECK(origFeeEst[i-1] > mult*baseRate.GetFeePerK() - deltaFee);\n         }\n-        else {\n-            BOOST_CHECK(origFeeEst[i-1] == CFeeRate(0).GetFeePerK());\n-        }\n     }\n     // Fill out rest of the original estimates\n     for (int i = 10; i <= 48; i++) {\n@@ -177,7 +174,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         block.clear();\n     }\n     BOOST_CHECK(feeEst.estimateFee(1) == CFeeRate(0));\n-    for (int i = 2; i < 10; i++) {\n+    for (int i = 2; i < 9; i++) { // At 9, the original estimate was already at the bottom (b/c scale = 2)\n         BOOST_CHECK(feeEst.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n     }\n "
      }
    ]
  },
  {
    "sha": "ef589f8d40d926bbc78a556a149c367cf634c376",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjU4OWY4ZDQwZDkyNmJiYzc4YTU1NmExNDljMzY3Y2Y2MzRjMzc2",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-12T16:05:10Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:47:45Z"
      },
      "message": "minor cleanup: remove unnecessary variable",
      "tree": {
        "sha": "94d04ab78c258fb1ca98f69a20715a7baca86d25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94d04ab78c258fb1ca98f69a20715a7baca86d25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef589f8d40d926bbc78a556a149c367cf634c376",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef589f8d40d926bbc78a556a149c367cf634c376",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef589f8d40d926bbc78a556a149c367cf634c376",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef589f8d40d926bbc78a556a149c367cf634c376/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "97e9536867ecb7286b3b52dc96e797820fffdcb4",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef589f8d40d926bbc78a556a149c367cf634c376/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef589f8d40d926bbc78a556a149c367cf634c376/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=ef589f8d40d926bbc78a556a149c367cf634c376",
        "patch": "@@ -487,9 +487,8 @@ CBlockPolicyEstimator::CBlockPolicyEstimator()\n     : nBestSeenHeight(0), firstRecordedHeight(0), historicalFirst(0), historicalBest(0), trackedTxs(0), untrackedTxs(0)\n {\n     static_assert(MIN_BUCKET_FEERATE > 0, \"Min feerate must be nonzero\");\n-    minTrackedFee = CFeeRate(MIN_BUCKET_FEERATE);\n     size_t bucketIndex = 0;\n-    for (double bucketBoundary = minTrackedFee.GetFeePerK(); bucketBoundary <= MAX_BUCKET_FEERATE; bucketBoundary *= FEE_SPACING, bucketIndex++) {\n+    for (double bucketBoundary = MIN_BUCKET_FEERATE; bucketBoundary <= MAX_BUCKET_FEERATE; bucketBoundary *= FEE_SPACING, bucketIndex++) {\n         buckets.push_back(bucketBoundary);\n         bucketMap[bucketBoundary] = bucketIndex;\n     }"
      },
      {
        "sha": "aa179cfddd56d44ad79f64ca53620e4871f18381",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef589f8d40d926bbc78a556a149c367cf634c376/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef589f8d40d926bbc78a556a149c367cf634c376/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=ef589f8d40d926bbc78a556a149c367cf634c376",
        "patch": "@@ -177,7 +177,6 @@ class CBlockPolicyEstimator\n     void FlushUnconfirmed(CTxMemPool& pool);\n \n private:\n-    CFeeRate minTrackedFee;    //!< Passed to constructor to avoid dependency on main\n     unsigned int nBestSeenHeight;\n     unsigned int firstRecordedHeight;\n     unsigned int historicalFirst;"
      }
    ]
  },
  {
    "sha": "2d2e17052c389948c511d2b5d41c4cc243cdc145",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDJlMTcwNTJjMzg5OTQ4YzUxMWQyYjVkNDFjNGNjMjQzY2RjMTQ1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-12T16:29:03Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:48:46Z"
      },
      "message": "Comments and improved documentation",
      "tree": {
        "sha": "42818bf17591732fe5bf1d65be22ded212a47e29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42818bf17591732fe5bf1d65be22ded212a47e29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d2e17052c389948c511d2b5d41c4cc243cdc145",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d2e17052c389948c511d2b5d41c4cc243cdc145",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d2e17052c389948c511d2b5d41c4cc243cdc145",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d2e17052c389948c511d2b5d41c4cc243cdc145/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef589f8d40d926bbc78a556a149c367cf634c376",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef589f8d40d926bbc78a556a149c367cf634c376",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef589f8d40d926bbc78a556a149c367cf634c376"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 56,
      "deletions": 28
    },
    "files": [
      {
        "sha": "35e2857399e5461869fa00afb5bbe8546803fe3e",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d2e17052c389948c511d2b5d41c4cc243cdc145/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d2e17052c389948c511d2b5d41c4cc243cdc145/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=2d2e17052c389948c511d2b5d41c4cc243cdc145",
        "patch": "@@ -729,6 +729,9 @@ double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, doubl\n     return estimate;\n }\n \n+/** Ensure that for a conservative estimate, the DOUBLE_SUCCESS_PCT is also met\n+ * at 2 * target for any longer time horizons.\n+ */\n double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget) const\n {\n     double estimate = -1;\n@@ -744,6 +747,13 @@ double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget)\n     return estimate;\n }\n \n+/** estimateSmartFee returns the max of the feerates calculated with a 60%\n+ * threshold required at target / 2, an 85% threshold required at target and a\n+ * 95% threshold required at 2 * target.  Each calculation is performed at the\n+ * shortest time horizon which tracks the required target.  Conservative\n+ * estimates, however, required the 95% threshold at 2 * target be met for any\n+ * longer time horizons also.\n+ */\n CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool, bool conservative) const\n {\n     if (answerFoundAtTarget)"
      },
      {
        "sha": "d5b63823adf40b06109a089b15a62857ec2533ca",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 45,
        "deletions": 27,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d2e17052c389948c511d2b5d41c4cc243cdc145/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d2e17052c389948c511d2b5d41c4cc243cdc145/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=2d2e17052c389948c511d2b5d41c4cc243cdc145",
        "patch": "@@ -41,32 +41,39 @@ class TxConfirmStats;\n  * within your desired 5 blocks.\n  *\n  * Here is a brief description of the implementation:\n- * When a transaction enters the mempool, we\n- * track the height of the block chain at entry.  Whenever a block comes in,\n- * we count the number of transactions in each bucket and the total amount of feerate\n- * paid in each bucket. Then we calculate how many blocks Y it took each\n- * transaction to be mined and we track an array of counters in each bucket\n- * for how long it to took transactions to get confirmed from 1 to a max of 25\n- * and we increment all the counters from Y up to 25. This is because for any\n- * number Z>=Y the transaction was successfully mined within Z blocks.  We\n- * want to save a history of this information, so at any time we have a\n- * counter of the total number of transactions that happened in a given feerate\n- * bucket and the total number that were confirmed in each number 1-25 blocks\n- * or less for any bucket.   We save this history by keeping an exponentially\n- * decaying moving average of each one of these stats.  Furthermore we also\n- * keep track of the number unmined (in mempool) transactions in each bucket\n- * and for how many blocks they have been outstanding and use that to increase\n- * the number of transactions we've seen in that feerate bucket when calculating\n- * an estimate for any number of confirmations below the number of blocks\n- * they've been outstanding.\n+ * When a transaction enters the mempool, we track the height of the block chain\n+ * at entry.  All further calculations are conducted only on this set of \"seen\"\n+ * transactions. Whenever a block comes in, we count the number of transactions\n+ * in each bucket and the total amount of feerate paid in each bucket. Then we\n+ * calculate how many blocks Y it took each transaction to be mined.  We convert\n+ * from a number of blocks to a number of periods Y' each encompassing \"scale\"\n+ * blocks.  This is is tracked in 3 different data sets each up to a maximum\n+ * number of periods. Within each data set we have an array of counters in each\n+ * feerate bucket and we increment all the counters from Y' up to max periods\n+ * representing that a tx was successfullly confirmed in less than or equal to\n+ * that many periods. We want to save a history of this information, so at any\n+ * time we have a counter of the total number of transactions that happened in a\n+ * given feerate bucket and the total number that were confirmed in each of the\n+ * periods or less for any bucket.  We save this history by keeping an\n+ * exponentially decaying moving average of each one of these stats.  This is\n+ * done for a different decay in each of the 3 data sets to keep relevant data\n+ * from different time horizons.  Furthermore we also keep track of the number\n+ * unmined (in mempool or left mempool without being included in a block)\n+ * transactions in each bucket and for how many blocks they have been\n+ * outstanding and use both of these numbers to increase the number of transactions\n+ * we've seen in that feerate bucket when calculating an estimate for any number\n+ * of confirmations below the number of blocks they've been outstanding.\n  */\n \n+/* Identifier for each of the 3 different TxConfirmStats which will track\n+ * history over different time horizons. */\n enum FeeEstimateHorizon {\n     SHORT_HALFLIFE = 0,\n     MED_HALFLIFE = 1,\n     LONG_HALFLIFE = 2\n };\n \n+/* Used to return detailed information about a feerate bucket */\n struct EstimatorBucket\n {\n     double start = -1;\n@@ -77,6 +84,7 @@ struct EstimatorBucket\n     double leftMempool = 0;\n };\n \n+/* Used to return detailed information about a fee estimate calculation */\n struct EstimationResult\n {\n     EstimatorBucket pass;\n@@ -93,13 +101,13 @@ struct EstimationResult\n class CBlockPolicyEstimator\n {\n private:\n-    /** Track confirm delays up to 12 blocks medium decay */\n+    /** Track confirm delays up to 12 blocks for short horizon */\n     static constexpr unsigned int SHORT_BLOCK_PERIODS = 12;\n     static constexpr unsigned int SHORT_SCALE = 1;\n-    /** Track confirm delays up to 48 blocks medium decay */\n+    /** Track confirm delays up to 48 blocks for medium horizon */\n     static constexpr unsigned int MED_BLOCK_PERIODS = 24;\n     static constexpr unsigned int MED_SCALE = 2;\n-    /** Track confirm delays up to 1008 blocks for longer decay */\n+    /** Track confirm delays up to 1008 blocks for long horizon */\n     static constexpr unsigned int LONG_BLOCK_PERIODS = 42;\n     static constexpr unsigned int LONG_SCALE = 24;\n     /** Historical estimates that are older than this aren't valid */\n@@ -112,9 +120,11 @@ class CBlockPolicyEstimator\n     /** Decay of .9995 is a half-life of 1008 blocks or about 1 week */\n     static constexpr double LONG_DECAY = .99931;\n \n-    /** Require greater than 95% of X feerate transactions to be confirmed within Y blocks for X to be big enough */\n+    /** Require greater than 60% of X feerate transactions to be confirmed within Y/2 blocks*/\n     static constexpr double HALF_SUCCESS_PCT = .6;\n+    /** Require greater than 85% of X feerate transactions to be confirmed within Y blocks*/\n     static constexpr double SUCCESS_PCT = .85;\n+    /** Require greater than 95% of X feerate transactions to be confirmed within 2 * Y blocks*/\n     static constexpr double DOUBLE_SUCCESS_PCT = .95;\n \n     /** Require an avg of 0.1 tx in the combined feerate bucket per block to have stat significance */\n@@ -154,16 +164,19 @@ class CBlockPolicyEstimator\n     /** Remove a transaction from the mempool tracking stats*/\n     bool removeTx(uint256 hash, bool inBlock);\n \n-    /** Return a feerate estimate */\n+    /** DEPRECATED. Return a feerate estimate */\n     CFeeRate estimateFee(int confTarget) const;\n \n-    /** Estimate feerate needed to get be included in a block within\n-     *  confTarget blocks. If no answer can be given at confTarget, return an\n-     *  estimate at the lowest target where one can be given.\n+    /** Estimate feerate needed to get be included in a block within confTarget\n+     *  blocks. If no answer can be given at confTarget, return an estimate at\n+     *  the closest target where one can be given.  'conservative' estimates are\n+     *  valid over longer time horizons also.\n      */\n     CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool, bool conservative = true) const;\n \n-    /** Return a specific fee estimate calculation with a given success threshold and time horizon.\n+    /** Return a specific fee estimate calculation with a given success\n+     * threshold and time horizon, and optionally return detailed data about\n+     * calculation\n      */\n     CFeeRate estimateRawFee(int confTarget, double successThreshold, FeeEstimateHorizon horizon, EstimationResult *result = nullptr) const;\n \n@@ -208,10 +221,15 @@ class CBlockPolicyEstimator\n     /** Process a transaction confirmed in a block*/\n     bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry);\n \n+    /** Helper for estimateSmartFee */\n     double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon) const;\n+    /** Helper for estimateSmartFee */\n     double estimateConservativeFee(unsigned int doubleTarget) const;\n+    /** Number of blocks of data recorded while fee estimates have been running */\n     unsigned int BlockSpan() const;\n+    /** Number of blocks of recorded fee estimate data represented in saved data file */\n     unsigned int HistoricalBlockSpan() const;\n+    /** Calculation of highest target that reasonable estimate can be provided for */\n     unsigned int MaxUsableEstimate() const;\n };\n "
      },
      {
        "sha": "7fd95768a4387e1b79add4085036960fe054317f",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d2e17052c389948c511d2b5d41c4cc243cdc145/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d2e17052c389948c511d2b5d41c4cc243cdc145/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=2d2e17052c389948c511d2b5d41c4cc243cdc145",
        "patch": "@@ -797,6 +797,7 @@ UniValue estimatefee(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"estimatefee nblocks\\n\"\n+            \"\\nDEPRECATED. Please use estimatesmartfee for more intelligent estimates.\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n             \"confirmation within nblocks blocks. Uses virtual transaction size of transaction\\n\"\n             \"as defined in BIP 141 (witness data is discounted).\\n\"\n@@ -831,7 +832,6 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             \"estimatesmartfee nblocks (conservative)\\n\"\n-            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n             \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n             \"for which the estimate is valid. Uses virtual transaction size as defined\\n\""
      }
    ]
  },
  {
    "sha": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGJjMWVjNGE0NzNiNWJkOWI3YmJjZTdiMjBhMTFlOGVkZmU0YjRj",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-17T19:39:24Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-17T19:42:32Z"
      },
      "message": "Make more json-like output from estimaterawfee",
      "tree": {
        "sha": "2bc8ad47ab87b370901572e441d61ca0014d6708",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bc8ad47ab87b370901572e441d61ca0014d6708"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d2e17052c389948c511d2b5d41c4cc243cdc145",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d2e17052c389948c511d2b5d41c4cc243cdc145",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d2e17052c389948c511d2b5d41c4cc243cdc145"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 25,
      "deletions": 20
    },
    "files": [
      {
        "sha": "d744269df1c8b033874c35bc219449ff3e45c176",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 20,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
        "patch": "@@ -896,14 +896,15 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n             \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n             \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass.\\\"                 information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"  \\\"fail.\\\"                 information about the highest range of feerates to fail to meet the threshold\\n\"\n-            \"  \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"  \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"  \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"  \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"  \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"  \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  }\\n\"\n+            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n             \"}\\n\"\n             \"\\n\"\n             \"A negative feerate is returned if no answer can be given.\\n\"\n@@ -934,18 +935,22 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"decay\", buckets.decay));\n     result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    result.push_back(Pair(\"pass.startrange\", round(buckets.pass.start)));\n-    result.push_back(Pair(\"pass.endrange\", round(buckets.pass.end)));\n-    result.push_back(Pair(\"pass.withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass.totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass.inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass.leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail.startrange\", round(buckets.fail.start)));\n-    result.push_back(Pair(\"fail.endrange\", round(buckets.fail.end)));\n-    result.push_back(Pair(\"fail.withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail.totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail.inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail.leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+    UniValue passbucket(UniValue::VOBJ);\n+    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+    result.push_back(Pair(\"pass\", passbucket));\n+    UniValue failbucket(UniValue::VOBJ);\n+    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+    result.push_back(Pair(\"fail\", failbucket));\n     return result;\n }\n "
      }
    ]
  }
]