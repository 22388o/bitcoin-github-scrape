jonasschnelli,2017-04-13T11:58:45Z,"Great!\nConcept ACK.\n\n> The GUI needs to be updated to access the new range of estimates. I would suggest providing options for targets of: 2,4,6,12,24,48,144,504,1008\n\nI'll have a look at this soon.",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-293871720,293871720,
jonasschnelli,2017-04-19T17:03:44Z,ping @crwatkins (he presented some fee estimation overview at the wallet standards group meeting in Berlin this month).,https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-295346654,295346654,
jlopp,2017-04-19T19:23:56Z,"I'm not sure if this is a problem specific to your code, though requiring a leading 0 seems like a bug:\n\n```\nbitcoin-cli estimaterawfee 10 .85 0\nerror: Error parsing JSON:.85\n```",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-295401425,295401425,
sipa,2017-04-19T19:49:56Z,@jlopp `.85` is not valid JSON.,https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-295411118,295411118,
morcos,2017-04-20T20:10:29Z,clean rebase after #9942 was merged,https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-295887250,295887250,
crwatkins,2017-04-24T23:13:35Z,"Thanks @jonasschnelli.  In Berlin, I noted that at least 50% of the wallets listed on bitcoin.org use Core as a fee estimation source directly or through other servers based on Core and any statistical or algorithmic biases might compound over time because of the large number of clients using the single source.   I presented some anecdotal, non-scientific observations about fees and some reasons t",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-296847440,296847440,
jlopp,2017-04-25T00:33:07Z,"@crwatkins I can only speak for BitGo, but we run custom compiled versions of Core with our own half life and confidence values. We then use the output as a baseline for a more complex fee algorithm that we adjust upward and downward based upon other data sources. I'm already working on transitioning us to using the estimaterawfee functionality.",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-296858336,296858336,
morcos,2017-04-25T17:05:14Z,"@crwatkins Yes that was the basic idea of including estimaterawfee (that and it's useful for debugging).  The exact strategy you use for determining what fee you want to put on a transaction depends on so many factors that its hard to have a one size fits all solution, but thats exactly what Bitcoin Core has to try to ship.  So rather than attempt to defend why the algorithm I picked is the one al",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-297097692,297097692,
crwatkins,2017-04-25T17:08:36Z,@morcos Exclellent. Thanks!,https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-297099164,297099164,
Leviathn,2017-04-25T18:05:39Z,Reviewing,https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-297116075,297116075,
morcos,2017-05-09T17:46:50Z,Addressed the comments in fixup commmits e95eca7 ([smarterfee.ver5](https://github.com/morcos/bitcoin/commits/smarterfee.ver5)) and then squashed --> 9a34419 ([smarterfee.ver5.squash](https://github.com/morcos/bitcoin/commits/smarterfee.ver5.squash)),https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-300246808,300246808,
morcos,2017-05-10T15:54:42Z,"OK.  I think I addressed remaining comments.\nI also tried to clean up the logic of estimateCombinedFee to be a bit clearer (although still not a loop)\nI also changed the logic to be smarter about returning an answer if one can be found on any horizon, instead of returning -1.   \nFixup commits are squashed.\n\nabe88e4 ([smarterfee.ver7](https://github.com/morcos/bitcoin/commits/smarterfee.v",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-300527958,300527958,
instagibbs,2017-05-12T16:46:43Z,"re-utACK https://github.com/bitcoin/bitcoin/pull/10199/commits/2d2e17052c389948c511d2b5d41c4cc243cdc145\n\n",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-301127829,301127829,
morcos,2017-05-17T19:48:22Z,"Added an extra commit to improve JSON output as per @sipa.  Was kind of annoying to squash, so will leave it if that's ok?\n\n@laanwj I think this is reviewed enough that we'd be better off merging and getting some more experimentation with the estimates..    It takes 2 full weeks for the longest estimates to even be exposed.  \n\nThe biggest open questions are whether I should add an ability ",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302212186,302212186,
sipa,2017-05-17T19:58:56Z,utACK 38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c,https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302214753,302214753,
instagibbs,2017-05-17T20:01:16Z,utACK https://github.com/bitcoin/bitcoin/pull/10199/commits/38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c,https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302215324,302215324,
RHavar,2017-05-18T00:18:43Z,"I tried reading the description from help, and I don't really understand this:\n\n> [the rpc command also returns] the number of blocks for which the estimate is valid.\n\nbut from the actual return:\n\n>   ""blocks"" : n         (numeric) block number where estimate was found\n\n\nWithout reading the code, it's not clear what `blocks` means. Is it the block height when you called `estimate",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302266086,302266086,
instagibbs,2017-05-18T02:14:13Z,"@RHavar without actually looking at the code, I believe this refers to the ""cheapest bucket"" block which that feerate was found.",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302281492,302281492,
RHavar,2017-05-18T02:39:39Z,"@instagibbs  Yeah, you seem right. But I don't think that was inferable from the help information :P\n\nWhat's the motivation for `estimatefee` returning a different value than `estimatesmartfee` ? \n\n```\n$ bitcoin-cli estimatefee 6\n0.00254275\n```\n\n\n```\n$ bitcoin-cli estimatesmartfee 6\n{\n  ""feerate"": 0.00208824,\n  ""blocks"": 6\n}\n```\n\n\n?\n\nAnyway, fantastic work",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302284734,302284734,
RHavar,2017-05-18T02:55:06Z,"I've updated https://estimatefee.com/  to now use `estimatesmartfee $n` so if you're interested you can take a look there.\n\nThe bitcoin node has only been up a few hours, so it'll probably take a while to collect enough information.\n\nP.S. you kinda broke my domain name lol",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302286705,302286705,
morcos,2017-05-18T17:08:50Z,"@Rhavar you might be right that the description is not the clearest.\nblocks refers to the target for which you are getting an estimate, which is an expected number of blocks within which you will be confirmed.  Occasionally you ask for an estimate at one target but it returns you an estimate for a different target (b/c it is unable to give you an estimate for the target you asked for)",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302476047,302476047,
RHavar,2017-05-18T18:42:40Z,"@morcos  In that case I'd suggest renaming it from ""blocks"" to ""target"" and changing the description to what you wrote above :P",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302506157,302506157,
karelbilek,2017-09-02T20:29:58Z,"Not sure where to put it, but just FYI\n\nI made a simple tool that looks up smart fees once per 10 minutes and puts it here\n\nhttps://estimatesmartfee.com/html.html\n\nor\n\nhttps://estimatesmartfee.com/json.json\n\nIf you want to use it for testing or something",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-326767729,326767729,
jb55,2017-10-26T06:37:52Z,"also FYIs, I put together a small bash script that uses this for quickly grabbing fees from the command line: https://bitcoin.stackexchange.com/a/61348/1235 \n\nthanks!",https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-339566393,339566393,
jlopp,2017-04-19T19:22:04Z,Nit: implementation,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r112291804,112291804,src/rpc/mining.cpp
jlopp,2017-04-19T20:18:07Z,"Would prefer more explicit range bounding on the threshold with an ""Invalid threshold"" error response; it currently allows numbers < 0 and > 1 and just returns a -1 feerate.",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r112303336,112303336,src/rpc/mining.cpp
morcos,2017-04-20T00:42:57Z,The reason I didn't bother with that is I felt estimaterawfee should be a very low level feature that doesn't need all the user friendly bells and whistles..   But it could certainly be cleaned up to add that either in this PR or a follow on..,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r112344863,112344863,src/rpc/mining.cpp
TheBlueMatt,2017-04-25T18:51:19Z,"Can you update the commit message from ""Track start of new bucket range more carefully"" to something more descriptive.",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113279836,113279836,src/policy/fees.cpp
TheBlueMatt,2017-04-25T19:37:42Z,"nit: ""A negative *feerate* is returned"" (other values are zero, so might as well just specify feerate here).",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113290214,113290214,src/rpc/mining.cpp
TheBlueMatt,2017-04-25T22:58:51Z,nit: std::min/max here like you did above?,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113331719,113331719,src/policy/fees.cpp
TheBlueMatt,2017-04-25T23:10:44Z,Should probably update this comment in the commit that puts failAvg to use.,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113333417,113333417,src/policy/fees.cpp
TheBlueMatt,2017-04-27T18:03:25Z,"As discussed it'd be nice to use this chunk and tempFeeStats to just generate one fee estimate, cache that, and then start fresh (as you do) but use the cached fee estimate while our new buckets fill.",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113763559,113763559,src/policy/fees.cpp
TheBlueMatt,2017-04-27T18:08:58Z,nit: might be nice to assert that the bucketIndex is the same across all three calls here?,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113764821,113764821,src/policy/fees.cpp
TheBlueMatt,2017-04-27T18:52:56Z,nit: maybe a better name for this would be FlushFailedPreShutdown()?,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113774889,113774889,src/policy/fees.h
TheBlueMatt,2017-04-27T20:32:01Z,"nit: it seems kinda strange that the ""inBlock"" flag is always set to false, even though it is sometimes called when the transaction was, indeed, in a block. Not a bug because it is a dummy call in fees.cpp, but maybe the API should stay the same and have the flag filled in inside of fees.cpp.",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113795130,113795130,src/txmempool.cpp
TheBlueMatt,2017-04-27T23:25:06Z,"This seems strange to me. Most of our APIs will already gracefully fail if you pass in too high a conf target, I'd rather we do the same here (same in GUI).",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113824337,113824337,src/policy/fees.cpp
TheBlueMatt,2017-04-27T23:32:48Z,This seems like a sharp edge - you can restart a node and end up getting a fee estimate much higher than 30 seconds ago before you shut down. Maybe change the /2 to historicalBest more recent than OLDEST_ESTIMATE_HISTORY*3/4 or so? Would still have the issue but at least its less likely to be hit for those who regularly run a node just during the day or so?,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113825211,113825211,src/policy/fees.cpp
instagibbs,2017-05-01T12:54:00Z,Add description?,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114122396,114122396,src/policy/fees.cpp
instagibbs,2017-05-01T12:55:07Z,add description above?,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114122455,114122455,src/policy/fees.cpp
instagibbs,2017-05-01T13:45:34Z,"teeny nit: ""also"" unneeded",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114126367,114126367,src/policy/fees.h
instagibbs,2017-05-01T13:54:04Z,"I think this is impossible to hit, due to `confTarget <= 0` check and `maxUsableEstimate <= 1` check. (though this might make sense as belt and suspenders)",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114127237,114127237,src/policy/fees.cpp
instagibbs,2017-05-01T14:07:12Z,"It's not clear to me as the API reader what ""conservative"" means here, depending on if I'm worrying about over-paying or waiting too long, or being conservative in the amount of data I'm using to estimate.\n\nsuggested: ""Whether to return a possibly higher feerate estimate calculated from a longer history""",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114128685,114128685,src/rpc/mining.cpp
instagibbs,2017-05-01T14:32:53Z,perhaps mention how long each history is,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114131869,114131869,src/rpc/mining.cpp
instagibbs,2017-05-01T14:36:37Z,nit: s/first/highest/,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114132357,114132357,src/rpc/mining.cpp
instagibbs,2017-05-01T14:36:50Z,nit: s/last/lowest/,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114132378,114132378,src/rpc/mining.cpp
instagibbs,2017-05-01T14:40:20Z,s/total/that were confirmed at any point/,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114132845,114132845,src/rpc/mining.cpp
instagibbs,2017-05-01T14:42:42Z,could also do a quick check that the transitive property is true for `conservative` estimates,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114133179,114133179,test/functional/smartfees.py
instagibbs,2017-05-01T14:53:30Z,grammar nit: s/less/fewer/,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114134808,114134808,src/policy/fees.h
instagibbs,2017-05-01T15:06:46Z,missing `threshold`,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114136987,114136987,src/rpc/mining.cpp
TheBlueMatt,2017-05-01T15:47:14Z,"I believe we may want to add a check that the previous code actually got a result here. And, generally, that all of the four estimate*Fee calls here actually succeed. It seems super strange to accept only one result as fine if the rest fail (eg on startup you may get a response from short horizon on SUFFICIENT_TXS_SHORT, but not on medium/long, also @sdaftuar saw a case this morning where he had a",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114143629,114143629,src/policy/fees.cpp
morcos,2017-05-03T18:34:10Z,"After offline discussion, it appears the bigger issue is what to do when the short time horizon estimates have decayed to not being able to give you an answer.  It seems like what happens in conservative mode is probably the right thing where you take advantage of the fact that the longer time horizon estimates have not decayed yet.  We probably want the ability to utilize this as a fall back in n",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114620496,114620496,src/policy/fees.cpp
morcos,2017-05-03T18:39:51Z,"in all 3 of these replacement evaluations (also line 709 and line 722), we probably don't want to do the replacement if the new estimate is -1, should be rare.",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114621796,114621796,src/policy/fees.cpp
morcos,2017-05-04T17:10:42Z,"The design of estimateSmartFee is to be used by the wallet to intelligently as possible automatically put a fee on a transaction being sent.  In the GUI, the slider clearly indicates what target the fee is being returned for.  For the RPC call estimatesmartfee, this is also clearly returned.  The difficulty comes with automatic estimation that happens from a sendtoaddress or sendmany RPC call.  If",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114836148,114836148,src/policy/fees.cpp
morcos,2017-05-04T17:11:22Z,"After discussion, I agree that this logic could be more intelligent, but I think that can be left for a later improvement.",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114836308,114836308,src/policy/fees.cpp
morcos,2017-05-09T15:48:27Z,"leaving for a later improvement\n",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115526148,115526148,src/policy/fees.cpp
morcos,2017-05-09T16:04:04Z,This will eventually be cleaned up when fee estimation listens to CValidationInterface,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115530273,115530273,src/txmempool.cpp
sipa,2017-05-09T17:48:14Z,"Any reason to keep this number tied to client versions instead of just an independent ""fee estimates file version number""?",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115555345,115555345,src/policy/fees.cpp
sipa,2017-05-09T17:49:40Z,Convert these to std::unique_ptrs?,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115555681,115555681,src/policy/fees.h
sipa,2017-05-09T18:05:07Z,Can you add a comment to explain the relation with the CBlockPolicyEstimator::FEE_SPACE constant?,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115559654,115559654,src/policy/fees.h
sipa,2017-05-09T18:14:03Z,"@jlopp's comment hasn't been addressed yet: ""nit: Implementation"".",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115561899,115561899,src/rpc/mining.cpp
sipa,2017-05-09T18:16:47Z,Style nit: `else` on the same line as `}`,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115562631,115562631,src/rpc/mining.cpp
sipa,2017-05-09T18:18:16Z,"To make the RPC interface less dependent on the specific implementation, perhaps don't make horizon a parameter, and just return information for all applicable horizons for the given value of nblocks?",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115563021,115563021,src/rpc/mining.cpp
sipa,2017-05-09T18:25:15Z,"Can you write this function as a loop over the 3 horizons, instead of a cascaded if/then/else?",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115564827,115564827,src/policy/fees.cpp
sipa,2017-05-09T18:27:34Z,Nit: unused until 2 commits later.,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115565503,115565503,src/policy/fees.h
sipa,2017-05-09T18:38:01Z,"Nit: If you'd return which of the two BlockSpans was chosen in a pair or a bool, you wouldn't need to repeat the decision logic in the debug print statement of processBlock.",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115568045,115568045,src/policy/fees.cpp
morcos,2017-05-09T19:17:43Z,"I can take a pass at rewriting the logic to be a bit clearer, but I'm not sure a loop is the right thing.  There are basically 6 different combinations of estimates you might want to check depending on what range your target is in and whether or not you want to check shorter horizons.  But the logic might be cleaner if those are just spelled out.",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115578505,115578505,src/policy/fees.cpp
morcos,2017-05-09T19:17:59Z,ok,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115578563,115578563,src/policy/fees.cpp
morcos,2017-05-09T19:18:39Z,"no reason..., but this also seems simple enough?",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115578711,115578711,src/policy/fees.cpp
morcos,2017-05-09T19:19:34Z,"yeah, there is no relation.\nwhen I made the filter spacing, I just copied the other one arbitrarily, but then I decided if I was changing the estimate spacing, there was no reason to also make a change to the filter spacing.   I can add a comment.",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115578906,115578906,src/policy/fees.h
morcos,2017-05-09T19:21:18Z,"This was the change made in #9942, and I couldn't get unique_ptrs to work while also moving the code to the cpp file.  I now also have other ideas how to clean up the wonky design of TxConfirmStats inside CBlockPolicyEstimator, but I don't want to do it now and churn this PR.",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115579270,115579270,src/policy/fees.h
morcos,2017-05-09T19:22:16Z,"slightly prefer existing, but I could change it if prevailing opinion is otherwise..\nestimaterawfee is meant to be implementation dependent",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115579454,115579454,src/rpc/mining.cpp
morcos,2017-05-09T19:22:29Z,oops,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115579504,115579504,src/rpc/mining.cpp
morcos,2017-05-09T19:22:33Z,kk,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115579513,115579513,src/rpc/mining.cpp
morcos,2017-05-09T19:23:19Z,I wanted to get the file format change over and done with...,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115579645,115579645,src/policy/fees.h
morcos,2017-05-10T14:32:19Z,"after actually doing this, it seemed uglier, so leaving it as is",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115756853,115756853,src/policy/fees.cpp
sipa,2017-05-16T22:40:40Z,I haven't seen a '.' inside RPC output field names. Why not bundle these into a `pass` and `fail` Object? That's probably easier to parse for external libraries too.,https://github.com/bitcoin/bitcoin/pull/10199#discussion_r116875382,116875382,src/rpc/mining.cpp
sipa,2017-05-16T22:41:55Z,"The reason for asking is that while the output of this RPC may be implementation dependent, it would be nice if (to the extent possible), its arguments aren't. The specific buckets used seem much more likely to change in other revisions.\n\nJust a nit.",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r116875576,116875576,src/rpc/mining.cpp
morcos,2017-05-17T18:01:29Z,"ah, that makes sense.  i will make this change",https://github.com/bitcoin/bitcoin/pull/10199#discussion_r117071061,117071061,src/rpc/mining.cpp
