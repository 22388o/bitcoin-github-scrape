[
  {
    "sha": "77770d95e2838d7665fa8f621e9e83d79f9b3196",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Nzc3MGQ5NWUyODM4ZDc2NjVmYThmNjIxZTllODNkNzlmOWIzMTk2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-09T15:58:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-09T18:12:33Z"
      },
      "message": "test: Properly serialize BIP34 coinbase height",
      "tree": {
        "sha": "947a47f6d57eb277a4b6e396dc3e8f14414f0d8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/947a47f6d57eb277a4b6e396dc3e8f14414f0d8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77770d95e2838d7665fa8f621e9e83d79f9b3196",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj6MAv/X4i8CL5HSwAuJ8O8qOZAUGwWTtO/RHoML6LdV0lfaJ8DODYiKlQUWhMh\neTlNdkkHNUv/l/gF18Qe0EQ8yyZRUzsjTtu20AGuo5H7YTwClcPHjmI8lvpicUmu\ntQeEivt6NYb53QIkYz9jGj4JHFgSfluc08PHKWsUL/fz2lm7IJzd8PH9v4rLeYaG\nmXYUUXGZ0bN9U7DY+z1W7mUXnmHvrfIOHBV0t48kwwtACO5BvuQ4Dt+pPlDyKqID\n8kUF7fiqcFBH0iye4DBvW8Ofm6GuU938zqvygS0MuehDLOqW6VocXJ4D2cFY1QzS\nRqLP00i6vESq89kEYkKuXQHPfx5+26uJ920iguiwBJb+K/SFIfWbDRoljSCtBeB1\nbYA3lRarw87xjhmjXkX/JkdPYcmGNmNH6mfg+JQJnIaYqDFwKywKm+Kvnz9KRDWU\ndSqwvWA+q1it0WcaiM/iF6ExTKnDR+Dhg0QAsQ1/PRjYui2V3SjKydS3UO3vGo3p\n0oYoAqkY\n=Z05F\n-----END PGP SIGNATURE-----",
        "payload": "tree 947a47f6d57eb277a4b6e396dc3e8f14414f0d8c\nparent 4882040182ea1109ef9befde93c2f49a98aba391\nauthor MarcoFalke <falke.marco@gmail.com> 1562687923 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1562695953 -0400\n\ntest: Properly serialize BIP34 coinbase height\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77770d95e2838d7665fa8f621e9e83d79f9b3196",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77770d95e2838d7665fa8f621e9e83d79f9b3196",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77770d95e2838d7665fa8f621e9e83d79f9b3196/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4882040182ea1109ef9befde93c2f49a98aba391",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4882040182ea1109ef9befde93c2f49a98aba391",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4882040182ea1109ef9befde93c2f49a98aba391"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 11,
      "deletions": 17
    },
    "files": [
      {
        "sha": "d741b00ba0a712b74323b4d9c2b38335129b241f",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 11,
        "deletions": 17,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77770d95e2838d7665fa8f621e9e83d79f9b3196/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77770d95e2838d7665fa8f621e9e83d79f9b3196/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=77770d95e2838d7665fa8f621e9e83d79f9b3196",
        "patch": "@@ -22,13 +22,14 @@\n     ToHex,\n     hash256,\n     hex_str_to_bytes,\n-    ser_string,\n     ser_uint256,\n     sha256,\n     uint256_from_str,\n )\n from .script import (\n     CScript,\n+    CScriptNum,\n+    CScriptOp,\n     OP_0,\n     OP_1,\n     OP_CHECKMULTISIG,\n@@ -89,29 +90,22 @@ def add_witness_commitment(block, nonce=0):\n     block.hashMerkleRoot = block.calc_merkle_root()\n     block.rehash()\n \n-def serialize_script_num(value):\n-    r = bytearray(0)\n-    if value == 0:\n-        return r\n-    neg = value < 0\n-    absvalue = -value if neg else value\n-    while (absvalue):\n-        r.append(int(absvalue & 0xff))\n-        absvalue >>= 8\n-    if r[-1] & 0x80:\n-        r.append(0x80 if neg else 0)\n-    elif neg:\n-        r[-1] |= 0x80\n-    return r\n+\n+def script_BIP34_coinbase_height(height):\n+    if height <= 16:\n+        res = CScriptOp.encode_op_n(height)\n+        # Append dummy to increase scriptSig size above 2 (see bad-cb-length consensus rule)\n+        return CScript([res, OP_1])\n+    return CScript([CScriptNum(height)])\n+\n \n def create_coinbase(height, pubkey=None):\n     \"\"\"Create a coinbase transaction, assuming no miner fees.\n \n     If pubkey is passed in, the coinbase output will be a P2PK output;\n     otherwise an anyone-can-spend output.\"\"\"\n     coinbase = CTransaction()\n-    coinbase.vin.append(CTxIn(COutPoint(0, 0xffffffff),\n-                        ser_string(serialize_script_num(height)), 0xffffffff))\n+    coinbase.vin.append(CTxIn(COutPoint(0, 0xffffffff), script_BIP34_coinbase_height(height), 0xffffffff))\n     coinbaseoutput = CTxOut()\n     coinbaseoutput.nValue = 50 * COIN\n     halvings = int(height / 150)  # regtest"
      }
    ]
  },
  {
    "sha": "fa8489a15511f61a372473927e73c34692bbec23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTg0ODlhMTU1MTFmNjFhMzcyNDczOTI3ZTczYzM0NjkyYmJlYzIz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-09T18:17:58Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-09T18:33:07Z"
      },
      "message": "test: Add test for BIP30 duplicate tx",
      "tree": {
        "sha": "774d43ca82ebc33145908060310216d3bf1860af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/774d43ca82ebc33145908060310216d3bf1860af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa8489a15511f61a372473927e73c34692bbec23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgnvAv+KHea8bRIIvzk+8oQ6M6G0truYSItslXpneXrRS4R1BjXVJJcKrP3axXg\niZTVUg5Q/hwpwHBL4i8xBc4qqajHlfaG5gmbhGHuefTTu9FTSRO5FtKG8TB3JrpM\neY9bzhi8P6cT7VK5IRGuRPU4bet/E5LQMv1O76wAmkhXBuxazbdOkf9k/MDRR1T9\n4nuVErZfosrxzoCojVvXU6ynUGDvlwYEXF1nve7+4EI8CK9IfpqCLWbJuV/HvnMu\nrSRv5/QdcxTIsN54d/6HlA1mQYYVmL6uEMakLs/vaUEGt0fICFRViDEZby2YW4IV\nQEJNE6xH82SYN5IG1khYdpj+A5izhsqGn4Vk0lPxmeko679C6dCYfRdUlnfivZRp\nzCVQu409Evt5umg9cu5bdmfiH3S63dLLXBoSAEM9ontPxtrWUgi8LZvrEKPj2wMo\njvL/B381uYj4dRUDMjOyoMaLjLmwwbuJFFr9WAy1XI+A6zhOsOrjCK7V3RvlcwNj\ntNKIEpBp\n=pS77\n-----END PGP SIGNATURE-----",
        "payload": "tree 774d43ca82ebc33145908060310216d3bf1860af\nparent 77770d95e2838d7665fa8f621e9e83d79f9b3196\nauthor MarcoFalke <falke.marco@gmail.com> 1562696278 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1562697187 -0400\n\ntest: Add test for BIP30 duplicate tx\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8489a15511f61a372473927e73c34692bbec23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8489a15511f61a372473927e73c34692bbec23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8489a15511f61a372473927e73c34692bbec23/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77770d95e2838d7665fa8f621e9e83d79f9b3196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77770d95e2838d7665fa8f621e9e83d79f9b3196",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77770d95e2838d7665fa8f621e9e83d79f9b3196"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 67,
      "deletions": 32
    },
    "files": [
      {
        "sha": "2f57d99f7c1b2a97ef619e111ebc96822a2a8b33",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 67,
        "deletions": 32,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8489a15511f61a372473927e73c34692bbec23/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8489a15511f61a372473927e73c34692bbec23/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=fa8489a15511f61a372473927e73c34692bbec23",
        "patch": "@@ -74,6 +74,10 @@ def serialize(self, with_witness=False):\n     def normal_serialize(self):\n         return super().serialize()\n \n+\n+DUPLICATE_COINBASE_SCRIPT_SIG = b'\\x01\\x78'  # Valid for block at height 120\n+\n+\n class FullBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -96,6 +100,13 @@ def run_test(self):\n         self.spendable_outputs = []\n \n         # Create a new block\n+        b_dup_cb = self.next_block('dup_cb')\n+        b_dup_cb.vtx[0].vin[0].scriptSig = DUPLICATE_COINBASE_SCRIPT_SIG\n+        b_dup_cb.vtx[0].rehash()\n+        duplicate_tx = b_dup_cb.vtx[0]\n+        b_dup_cb = self.update_block('dup_cb', [])\n+        self.send_blocks([b_dup_cb])\n+\n         b0 = self.next_block(0)\n         self.save_spendable_output()\n         self.send_blocks([b0])\n@@ -750,7 +761,7 @@ def run_test(self):\n \n         # Test a few invalid tx types\n         #\n-        # -> b35 (10) -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17)\n+        # -> b35 (10) -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 ()\n         #                                                                                    \\-> ??? (17)\n         #\n \n@@ -776,35 +787,59 @@ def run_test(self):\n \n         # reset to good chain\n         self.move_tip(57)\n-        b60 = self.next_block(60, spend=out[17])\n+        b60 = self.next_block(60)\n         self.send_blocks([b60], True)\n         self.save_spendable_output()\n \n-        # Test BIP30\n+        # Test BIP30 (reject duplicate)\n         #\n-        # -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17)\n-        #                                                                                    \\-> b61 (18)\n+        # -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 ()\n+        #                                                                                  \\-> b61 ()\n         #\n         # Blocks are not allowed to contain a transaction whose id matches that of an earlier,\n         # not-fully-spent transaction in the same chain. To test, make identical coinbases;\n         # the second one should be rejected.\n         #\n         self.log.info(\"Reject a block with a transaction with a duplicate hash of a previous transaction (BIP30)\")\n         self.move_tip(60)\n-        b61 = self.next_block(61, spend=out[18])\n-        b61.vtx[0].vin[0].scriptSig = b60.vtx[0].vin[0].scriptSig  # Equalize the coinbases\n+        b61 = self.next_block(61)\n+        b61.vtx[0].vin[0].scriptSig = DUPLICATE_COINBASE_SCRIPT_SIG\n         b61.vtx[0].rehash()\n         b61 = self.update_block(61, [])\n-        assert_equal(b60.vtx[0].serialize(), b61.vtx[0].serialize())\n+        assert_equal(duplicate_tx.serialize(), b61.vtx[0].serialize())\n         self.send_blocks([b61], success=False, reject_reason='bad-txns-BIP30', reconnect=True)\n \n+        # Test BIP30 (allow duplicate if spent)\n+        #\n+        # -> b57 (16) -> b60 ()\n+        #            \\-> b_spend_dup_cb (b_dup_cb) -> b_dup_2 ()\n+        #\n+        self.move_tip(57)\n+        b_spend_dup_cb = self.next_block('spend_dup_cb')\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(duplicate_tx.sha256, 0)))\n+        tx.vout.append(CTxOut(0, CScript([OP_TRUE])))\n+        self.sign_tx(tx, duplicate_tx)\n+        tx.rehash()\n+        b_spend_dup_cb = self.update_block('spend_dup_cb', [tx])\n+\n+        b_dup_2 = self.next_block('dup_2')\n+        b_dup_2.vtx[0].vin[0].scriptSig = DUPLICATE_COINBASE_SCRIPT_SIG\n+        b_dup_2.vtx[0].rehash()\n+        b_dup_2 = self.update_block('dup_2', [])\n+        assert_equal(duplicate_tx.serialize(), b_dup_2.vtx[0].serialize())\n+        assert_equal(self.nodes[0].gettxout(txid=duplicate_tx.hash, n=0)['confirmations'], 119)\n+        self.send_blocks([b_spend_dup_cb, b_dup_2], success=True)\n+        # The duplicate has less confirmations\n+        assert_equal(self.nodes[0].gettxout(txid=duplicate_tx.hash, n=0)['confirmations'], 1)\n+\n         # Test tx.isFinal is properly rejected (not an exhaustive tx.isFinal test, that should be in data-driven transaction tests)\n         #\n-        #   -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17)\n-        #                                                                                     \\-> b62 (18)\n+        # -> b_spend_dup_cb (b_dup_cb) -> b_dup_2 ()\n+        #                                           \\-> b62 (18)\n         #\n         self.log.info(\"Reject a block with a transaction with a nonfinal locktime\")\n-        self.move_tip(60)\n+        self.move_tip('dup_2')\n         b62 = self.next_block(62)\n         tx = CTransaction()\n         tx.nLockTime = 0xffffffff  # this locktime is non-final\n@@ -817,11 +852,11 @@ def run_test(self):\n \n         # Test a non-final coinbase is also rejected\n         #\n-        #   -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17)\n-        #                                                                                     \\-> b63 (-)\n+        # -> b_spend_dup_cb (b_dup_cb) -> b_dup_2 ()\n+        #                                           \\-> b63 (-)\n         #\n         self.log.info(\"Reject a block with a coinbase transaction with a nonfinal locktime\")\n-        self.move_tip(60)\n+        self.move_tip('dup_2')\n         b63 = self.next_block(63)\n         b63.vtx[0].nLockTime = 0xffffffff\n         b63.vtx[0].vin[0].nSequence = 0xDEADBEEF\n@@ -837,14 +872,14 @@ def run_test(self):\n         #  What matters is that the receiving node should not reject the bloated block, and then reject the canonical\n         #  block on the basis that it's the same as an already-rejected block (which would be a consensus failure.)\n         #\n-        #  -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18)\n-        #                                                                                        \\\n-        #                                                                                         b64a (18)\n+        #  -> b_spend_dup_cb (b_dup_cb) -> b_dup_2 () -> b64 (18)\n+        #                                              \\\n+        #                                               b64a (18)\n         #  b64a is a bloated block (non-canonical varint)\n         #  b64 is a good block (same as b64 but w/ canonical varint)\n         #\n         self.log.info(\"Accept a valid block even if a bloated version of the block has previously been sent\")\n-        self.move_tip(60)\n+        self.move_tip('dup_2')\n         regular_block = self.next_block(\"64a\", spend=out[18])\n \n         # make it a \"broken_block,\" with non-canonical serialization\n@@ -870,7 +905,7 @@ def run_test(self):\n         node.disconnect_p2ps()\n         self.reconnect_p2p()\n \n-        self.move_tip(60)\n+        self.move_tip('dup_2')\n         b64 = CBlock(b64a)\n         b64.vtx = copy.deepcopy(b64a.vtx)\n         assert_equal(b64.hash, b64a.hash)\n@@ -882,7 +917,7 @@ def run_test(self):\n \n         # Spend an output created in the block itself\n         #\n-        # -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19)\n+        # -> b_dup_2 () -> b64 (18) -> b65 (19)\n         #\n         self.log.info(\"Accept a block with a transaction spending an output created in the same block\")\n         self.move_tip(64)\n@@ -895,8 +930,8 @@ def run_test(self):\n \n         # Attempt to spend an output created later in the same block\n         #\n-        # -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19)\n-        #                                                                                    \\-> b66 (20)\n+        # -> b64 (18) -> b65 (19)\n+        #                        \\-> b66 (20)\n         self.log.info(\"Reject a block with a transaction spending an output created later in the same block\")\n         self.move_tip(65)\n         b66 = self.next_block(66)\n@@ -907,8 +942,8 @@ def run_test(self):\n \n         # Attempt to double-spend a transaction created in a block\n         #\n-        # -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19)\n-        #                                                                                    \\-> b67 (20)\n+        # -> b64 (18) -> b65 (19)\n+        #                        \\-> b67 (20)\n         #\n         #\n         self.log.info(\"Reject a block with a transaction double spending a transaction created in the same block\")\n@@ -922,8 +957,8 @@ def run_test(self):\n \n         # More tests of block subsidy\n         #\n-        # -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19) -> b69 (20)\n-        #                                                                                    \\-> b68 (20)\n+        # -> b64 (18) -> b65 (19) -> b69 (20)\n+        #                        \\-> b68 (20)\n         #\n         # b68 - coinbase with an extra 10 satoshis,\n         #       creates a tx that has 9 satoshis from out[20] go to fees\n@@ -949,8 +984,8 @@ def run_test(self):\n \n         # Test spending the outpoint of a non-existent transaction\n         #\n-        # -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19) -> b69 (20)\n-        #                                                                                    \\-> b70 (21)\n+        # -> b65 (19) -> b69 (20)\n+        #                        \\-> b70 (21)\n         #\n         self.log.info(\"Reject a block containing a transaction spending from a non-existent input\")\n         self.move_tip(69)\n@@ -965,8 +1000,8 @@ def run_test(self):\n \n         # Test accepting an invalid block which has the same hash as a valid one (via merkle tree tricks)\n         #\n-        #  -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19) -> b69 (20) -> b72 (21)\n-        #                                                                                      \\-> b71 (21)\n+        #  -> b65 (19) -> b69 (20) -> b72 (21)\n+        #                          \\-> b71 (21)\n         #\n         # b72 is a good block.\n         # b71 is a copy of 72, but re-adds one of its transactions.  However, it has the same hash as b72.\n@@ -994,8 +1029,8 @@ def run_test(self):\n \n         # Test some invalid scripts and MAX_BLOCK_SIGOPS\n         #\n-        # -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19) -> b69 (20) -> b72 (21)\n-        #                                                                                    \\-> b** (22)\n+        # -> b69 (20) -> b72 (21)\n+        #                        \\-> b** (22)\n         #\n \n         # b73 - tx with excessive sigops that are placed after an excessively large script element."
      }
    ]
  }
]