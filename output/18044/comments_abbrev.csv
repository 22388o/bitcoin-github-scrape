DrahtBot,2020-01-31 17:55:39,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19556 (Remove mempool global by MarcoFalke)\n* #19498 (Tidy up ProcessOrphanTx by jnewbery)\n* #19488 (Refactor mempool.d",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-580840274,580840274,
sdaftuar,2020-02-04 14:23:39,"Wrote up a short BIP draft here: https://github.com/sdaftuar/bips/blob/2020-02-wtxid-relay/bip-wtxid-relay.mediawiki, which this PR implements. \n\nI'll wait for some concept ACKs here before I send to the mailing list.",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-581932930,581932930,
jonatack,2020-02-04 14:38:06,Nice -- will add a link to the BIP draft in the review club notes at https://bitcoincore.reviews/18044. Currently reviewing. Can someone add a `Review club` label? It helps let people know that there is a review club resource they can use.,https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-581939690,581939690,
rajarshimaitra,2020-02-04 18:27:39,Cocnept ACK. Ran standard tests. All passing. Overall agreed with the idea of using wtxid for everything. Will try to try out the huristic and report some results.   ,https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-582049318,582049318,
adamjonas,2020-02-06 19:47:38,Reference [IRC discussion](http://www.erisian.com.au/bitcoin-core-dev/log-2020-02-05.html#l-336) for further context around the VERSION/VERACK messages.,https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-583078254,583078254,
ajtowns,2020-02-09 19:36:59,"Concept ACK. First take: doing extra messages in between VERSION and VERACK sounds better to me than extending VERSION or potentially doing txid relay briefly in between VERACK and WTXIDRELAY, the code changes seem really nicely laid out, and the main thing that caught my eye looks like it's probably fixed by the WITNESS_STRIPPED addition.",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-583884102,583884102,
TheBlueMatt,2020-02-13 00:28:23,"FWIW, travis error is "" node0 2020-02-12T14:39:48.835709Z [msghand] Error: Disk space is too low! """,https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-585487309,585487309,
fjahr,2020-02-14 16:58:04,"Concept ACK on the BIP draft and the implementation of it\n\nI am not so sure about the 2-second delay, however, because it is not necessarily an improvement, it can also make matters worse afaict. Example: At least one of our `txid` peers is better connected than all of our `wtxid` peers. We get a `txid` inv first and wait for 2 seconds. Meanwhile, we receive the `wtxid` inv and request it, but",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-586375495,586375495,
instagibbs,2020-02-18 20:03:46,concept ACK,https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-587757896,587757896,
naumenkogs,2020-02-25 19:46:27,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-591034818,591034818,
sdaftuar,2020-02-26 18:57:06,"Updated to fix the comments left so far.  I also changed the 2 second delay heuristic to only delay initial request of a transaction from a txid-relay peer, and not subsequent requests -- @naumenkogs pointed out to me that the original behavior I proposed would have opened us up to an ""InvBlock"" attack if we get a bunch of inbound peers that have wtxid-relay turned on, but don't yet have any outbo",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-591585772,591585772,
sdaftuar,2020-03-05 17:18:14,"> What taproot is making worst here than current tx-relay of segwit v0 txn ?\n\nExplained this offline, but the issue is that in a normal, non-adversarial situation where new nodes are relaying segwit transactions that violate old nodes' policy, those old nodes will be wasting bandwidth repeatedly downloading such transactions, because we have no caching of acceptance failure for segwit transact",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-595345973,595345973,
ariard,2020-03-05 19:23:01,"> Explained this offline, but the issue is that in a normal, non-adversarial situation where new nodes are relaying segwit transactions that violate old nodes' policy, those old nodes will be wasting bandwidth repeatedly downloading such transactions, because we have no caching of acceptance failure for segwit transactions.\n\nYes thanks for explanation, what I didn't get was with a segwit upgra",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-595402094,595402094,
sdaftuar,2020-03-06 19:46:11,">  So Eltoo-style offchain contracts + short-bit transaction identifier is a security concern, something we should document somewhere (maybe add comment around recentRejects)\n\n@ariard This PR does not include a ""short-bit transaction identifier"" so I don't think any additional documentation is needed.",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-595931094,595931094,
ariard,2020-03-07 05:35:09,"> @ariard This PR does not include a ""short-bit transaction identifier"" so I don't think any additional documentation is needed.\n\nYeah I know it's more a safeguard against someone proposing the idea in the future and this issue not being remembered.",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-596049687,596049687,
jonatack,2020-03-10 14:52:27,"Also, I believe #18261 (the current implementation of Erlay) depends on these changes.",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-597129322,597129322,
sdaftuar,2020-03-17 20:46:48,"There are a couple review notes about comments that I still need to go back and look at but this is now rebased to get rid of the conflicts with master after the refactor done in #17997, and most of the non-comment review feedback has been incorporated.  \n\nI also still need to measure the memory usage of mapTx to see if the estimate I'm using is correct.  \n\nIf anyone feels like contributin",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-600288874,600288874,
sdaftuar,2020-03-30 19:48:27,@fjahr Thanks for starting work on a test in #18446!  Once things converge in the review there I'd be happy to include those commits here as well.,https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-606208367,606208367,
ariard,2020-04-30 06:28:01,"@amitiuttarwar follow-up on this https://github.com/bitcoin/bitcoin/pull/18038#discussion_r400569145, now 18038 has been merged it would be really kind to have a patch for mempool intial-broadcast reattempt support and avoid wtxid taking too much delay :)",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-621639288,621639288,
amitiuttarwar,2020-04-30 16:06:47,@ariard yup! thanks for flagging. already working on the patch & will post it here once its ready for review ,https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-621949476,621949476,
amitiuttarwar,2020-05-01 22:37:05,"initial attempt here: https://github.com/amitiuttarwar/bitcoin/commits/pr18044\n- rebased this branch on master, turned unbroadcast set into a map of txid -> wtxid, updated logic to play nice with changes to RelayTransaction. existing tests pass\n- can revisit and add tests as #18807 and #18446 make progress",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-622595865,622595865,
fjahr,2020-06-19 10:44:43,"> initial attempt here: [amitiuttarwar/bitcoin@`pr18044` (commits)](https://github.com/amitiuttarwar/bitcoin/commits/pr18044)\n> \n> * rebased this branch on master, turned unbroadcast set into a map of txid -> wtxid, updated logic to play nice with changes to RelayTransaction. existing tests pass\n> * can revisit and add tests as #18807 and #18446 make progress\n\nWhich progress are you look",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-646568265,646568265,
fjahr,2020-06-19 11:56:29,"@sdaftuar Sorry, I may be missing context but is this work blocked somehow? How can people help bring this closer to the finish line?",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-646595546,646595546,
sdaftuar,2020-06-19 19:08:57,"@fjahr Thanks for the reminder, I've gone ahead and rebased this.  There were quite a few merge conflicts, so I hope reviewers will try to review these changes from scratch!",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-646821659,646821659,
adamjonas,2020-06-20 01:39:20,"I'm seeing a few post-rebase build warnings that weren't on 9eb584e1ffefdcbf7db0c3ca592f914c9ff46f68 (macOS clang v10):\n\n```\nvalidation.cpp:5102:49: warning: loop variable 'elem' has type 'const std::pair<uint256, uint256> &' but is initialized with type 'std::__1::__map_iterator<std::__1::__tree_iterator<std::__1::__value_type<uint256, uint256>, std::__1::__tree_node<std::__1::__value_type<",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-646917516,646917516,
naumenkogs,2020-06-20 09:24:33,"Code review ACK a7844da61d3f9eaca9d9d35337d463c64ac541a4, I think everything looks correct.\n\n- I confirm the build warnings [above](https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-646917516), would be nice to resolve them.\n- Also would be nice to address [these two issues](https://github.com/bitcoin/bitcoin/pull/18044#discussion_r392511089) regarding outdated comments.\n- The cod",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-646968108,646968108,
sdaftuar,2020-06-22 15:28:50,"Thanks all for flagging the build warnings and the missing `LOCK(cs_main)` calls (at least 1 was lost inadvertently in the rebase).  Those should all be fixed now.\n\n@naumenkogs With regards to the outdated comments you referenced, I believe those were already addressed -- is there something else you wanted to see?\n\n@ariard \n\n> bandwidth measure to assess 9f0f480 worthiness\n\nFYI -- ",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-647592408,647592408,
ariard,2020-06-22 21:59:22,"> The BIP was already posted to the mailing list in February (https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-February/017648.html). I suppose I should get a BIP number...\n\nRight, I forgot about that. Reading about the mail again it doesn't mention the issue with wtixd-relay which may have to GETDATA(INV(MSG_TX) in case of `TX_MISSING_INPUTS` but as we agree to drop this behavior ",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-647790378,647790378,
sdaftuar,2020-06-23 11:54:12,"> Reading about the mail again it doesn't mention the issue with wtixd-relay which may have to GETDATA(INV(MSG_TX) in case of TX_MISSING_INPUTS but as we agree to drop this behavior for wtixd-relay (note: not done as of tip commit da72e51 ?)\n\nThis should have already been fixed here: https://github.com/bitcoin/bitcoin/pull/18044/commits/af8e570be4a059d254492b304f60bb0039052094#diff-eff7adeaec7",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-648097491,648097491,
sdaftuar,2020-06-28 12:02:15,"This PR has been updated to include the tests from #18446 (thank you @fjahr and @ajtowns!), and to reflect the bip number assignment.  I've also included logic from @ajtowns to ignore MSG_TX invs from wtxid-relay peers, and vice versa, to address concerns about (1) intentional misbehavior from wtxid-relay peers to interfere with relay, and (2) making the logic around what kind of data we process f",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-650742012,650742012,
ariard,2020-06-29 00:28:09,Code Review ACK 00cd6e3. Enforce inv-compliance and integrate BIP number since last review.,https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-650844702,650844702,
sdaftuar,2020-06-29 21:23:23,"Addressed @ajtowns' comments.  Note the behavior change: we now disconnect a peer if they send a wtxidrelay message after VERACK.\n\nAlso fixed the bug I introduced in the mempool unbroadcast stuff, gave in to dropping the `wtxid_exists` function, and made yet another attempt to improve the comments explaining how we use `recentRejects`.\n",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-651375317,651375317,
naumenkogs,2020-06-30 16:03:20,utACK 6787a3dc2abb04f0b75aa2f8996e4bbd6c468ddd,https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-651890399,651890399,
ajtowns,2020-07-07 06:33:11,utACK 6787a3dc2abb04f0b75aa2f8996e4bbd6c468ddd ; checked changes since previous review,https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-654632344,654632344,
sipa,2020-07-14 00:20:06,"I've been running this branch on a number of nodes, in various configurations (including one with only wtxid peers, and mixed reachable/unreachable ones).\n\nThe primary thing I wanted to know is if there was any noticable impact on the number of compact block reconstructions that need transaction requests (as this PR impacts orphan processing). At first glance everything looks fine - nearly all",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-657895276,657895276,
ajtowns,2020-07-17 23:20:46,"> Something that did surprise me, is that there doesn't seem to be a strong bias towards wtxid peers in terms of downloaded transactions. I have one wtxid peer that is connected to both a wtxid and a normal peer, but around 60% of tx bandwidth is from the txid one. This may be due to the wtxid node just being slower, or having worse latency, or just being further away from common tx sources in the",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-660377717,660377717,
adamjonas,2020-07-19 13:26:20,"To summarize the state of review before rebase of #19109 and #19474:\n\nconcept ACK - jnewbery, TheBlueMatt, rajarshimaitra\ncode review ACK - sipa, ariard, jonatack\nutACK - ajtowns, naumenkogs, instagibbs",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-660643514,660643514,
sdaftuar,2020-07-19 21:24:54,"When I rebased this, I had to think about the interaction between #19109 and wtxid-based relay.  One change I made to this PR is to add both the txid and wtxid of an announced transaction to the `filterInventoryKnown` for a peer; this prevents clogging the filter with txid entries for that were already announced via wtxid when child transactions are relayed.\n\nAlso I found a bug with insertions",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-660712195,660712195,
naumenkogs,2020-07-22 08:52:55,utACK 0a4f1422cd1c20e12a05d7ff1a2ef1d5e7c654bb,https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-662330772,662330772,
laanwj,2020-07-22 18:58:45,utACK 0a4f1422cd1c20e12a05d7ff1a2ef1d5e7c654bb,https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-662628799,662628799,
sipa,2020-07-22 19:09:18,"Posthumous re-ACK 0a4f1422cd1c20e12a05d7ff1a2ef1d5e7c654bb\n\nSome follow-ups I'd like:\n* List BIP339 support in doc/bips.md\n* Re-enable fetching of orphans from wtxid peers (e.g. https://github.com/bitcoin/bitcoin/pull/18044/files#r450687076, see https://github.com/ajtowns/bitcoin/commits/202007-wtxid-orphans).\n* Possibly streamline things a bit by having an explicit pair type (bool is_wt",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-662635401,662635401,
JeremyRubin,2020-07-22 20:21:37,Can the hashes get a typed wrapper so that the unit256's are e.g. subclassed to WTXID and TXID?,https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-662676044,662676044,
sipa,2020-07-22 20:23:14,"@JeremyRubin I think that's hard, because a portion of the code relies on the fact that the wtxid of a non-witness tx is also its txid.",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-662676831,662676831,
ariard,2020-07-23 01:04:01,"Posthumous Code Review ACK 0a4f142\n\nAnother follow-up:\n* update tracking of multiple transactions with same txid, especially `BroadcastTransaction`, see https://github.com/bitcoin/bitcoin/pull/18044#discussion_r458229569",https://github.com/bitcoin/bitcoin/pull/18044#issuecomment-662771484,662771484,
sipa,2020-02-01 00:02:11,You're dereferencing `it` here after it has been incremented (see Travis failure). I think you want to use `inv.type` instead.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r373735577,373735577,src/net_processing.cpp
sdaftuar,2020-02-01 11:37:12,"Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r373775307,373775307,src/net_processing.cpp
sdaftuar,2020-02-01 11:39:03,"I wonder if this should be sent immediately in response to a VERSION message, rather than in response to a VERACK.  It looks like the way I've done it here creates a race condition where a peer could send a txid-based inv to us before it gets this message, which I think would cause relay of that transaction to fail.\n\nhttps://travis-ci.org/bitcoin/bitcoin/jobs/644609638?utm_medium=notification&",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r373775416,373775416,src/net_processing.cpp
jonatack,2020-02-04 10:04:03,"Seeing a build warning here:\n```\nnet_processing.cpp: In member function ‘virtual bool PeerLogicValidation::SendMessages(CNode*)’:\nnet_processing.cpp:4135:42: warning: enumeral and non-enumeral type in conditional expression [-Wextra]\n             CInv inv(state.m_wtxid_relay ? MSG_WTX : (MSG_TX | GetFetchFlags(pto)), txid);\n                      ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r374576703,374576703,src/net_processing.cpp
sdaftuar,2020-02-04 14:21:25,"Yeah I saw that too, but I think the code is correct?",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r374697402,374697402,src/net_processing.cpp
jonatack,2020-02-04 14:24:25,Would it be a good idea to fetch `nNow + std::chrono::microseconds{RELAY_TX_CACHE_TIME}.count()` once and use the same value for both relay expirations?,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r374699185,374699185,src/net_processing.cpp
rajarshimaitra,2020-02-04 18:29:58,Doesn't this comment needs update in light of the changed condition? We are now accepting txs containg witness in recentRejects.  ,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r374846097,374846097,src/net_processing.cpp
ajtowns,2020-02-07 03:12:30,"I think it's treating `MSG_WTX` as `enum GetDataMsg` and `MSG_TX | GetFetchFlags()` as `uint32_t` (match `GetFetchFlags` return type). Changing `GetFetchFlags()` to return `GetDataMsg` (and casting its result correspondingly), and making it `enum GetDataMsg : uint32_t` makes the warning go away. Actually, just saying `enum GetDataMsg : uint32_t` makes the warning go away too by the looks.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r376195717,376195717,src/net_processing.cpp
TheBlueMatt,2020-02-12 23:22:17,How is  indexed_transaction_set::const_iterator different than txindex?,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r378570286,378570286,src/txmempool.h
TheBlueMatt,2020-02-12 23:30:34,"Can we rename the function, then?",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r378572903,378572903,src/net.h
TheBlueMatt,2020-02-12 23:34:54,WITNESS_TX and WTX read a little bit too close for comfort. I don't think the extra characters to write a useful name cost us much :p.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r378574214,378574214,src/protocol.h
TheBlueMatt,2020-02-12 23:58:43,"Not (this pr's) your bug, but clang complains that you're copying shared_ptrs on every iteration and you should add a &.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r378581343,378581343,src/net_processing.cpp
TheBlueMatt,2020-02-13 00:00:31,"You should probably wipe this in ~CNetProcessingCleanup() like we do the other orphan fields, but, also, why the hell is that thing even there...",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r378581882,378581882,src/net_processing.cpp
TheBlueMatt,2020-02-13 00:16:17,Would this be any different if it were *just* orphan_state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED?,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r378586250,378586250,src/net_processing.cpp
TheBlueMatt,2020-02-13 00:17:42,"s/tripped/stripped/, but, more importantly, can we? Wouldn't that allow an attacker to see an 0.19 client's inv, request the tx without delay (unlike its other peers), then spam the network with the witness-stripped version, preventing relay of that transaction. At least as long as we dont ban for TX_WITNESS_STRIPPED.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r378586654,378586654,src/net_processing.cpp
sdaftuar,2020-02-13 13:14:34,Suggestions?,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r378851243,378851243,src/protocol.h
sdaftuar,2020-02-13 13:29:39,"From a single node's perspective, as long as you have at least 1 honest wtxid-relay peer, such an attack would not work, because the wtxid for the honest version of the transaction would not be added to your filter (only the txid), and so you would eventually request the valid version of the transaction from your honest wtxid-relay peer.\n\nCurrently we preference outbound peers for transaction ",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r378858979,378858979,src/net_processing.cpp
ajtowns,2020-02-18 02:22:45,"(this is already fixed on master, so a rebase would solve it)",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r380426287,380426287,src/net_processing.cpp
sdaftuar,2020-02-26 18:52:58,"Updated with the `enum GetDataMsg : uint32_t` fix, thanks.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r384694065,384694065,src/net_processing.cpp
sdaftuar,2020-02-26 18:53:16,Fixed.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r384694231,384694231,src/txmempool.h
sdaftuar,2020-02-26 18:53:24,Done.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r384694296,384694296,src/net.h
sdaftuar,2020-02-26 18:54:06,"Fixed, thanks.\n\nNot sure exactly what you're asking but it seemed easier to add an additional map, rather than change the existing data structure to support wtxid-lookup.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r384694706,384694706,src/net_processing.cpp
sdaftuar,2020-02-26 18:54:23,"Nope, would not be different.  Fixed.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r384694860,384694860,src/net_processing.cpp
naumenkogs,2020-02-27 01:17:24,"This comment is slightly confusing to me. If you setting this expectation here, maybe you want to enforce the rule in the code? Track whether VERACK was not received or something.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r384862855,384862855,src/net_processing.cpp
ariard,2020-02-27 20:47:40,"54d58e7\n\n3 new pointers for `boost::multi_index::tag<index_by_wtxid>, mempoolentry_wtxid, SaltedTxidHasher`, not one for new `boost::multi_index::hashed_unique` ? ",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r385362270,385362270,src/txmempool.cpp
ariard,2020-02-27 23:23:19,"What would be the challenges to switch mapOrphanTransactions to wtxid-only? It's just an internal structure, do we use it to interact with our peers ? (and even you can  translate backward there)",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r385428189,385428189,src/net_processing.cpp
ariard,2020-02-27 23:54:03,"Would be okay with MSG_WTXID to mark we only deal with tx identifier not a specific new data structure, we already have a GetDataMsg for the transaction and its witness.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r385437587,385437587,src/protocol.h
ariard,2020-02-27 23:59:43,"d0f03e9\n\nIs this rule a best-effort right now? At tx reception, we may have to request parent based only on the input. If so is the BIP clear enough on the 5) ? Precise also there is no current sanction of the rule by receiver as of today",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r385439388,385439388,src/protocol.h
ariard,2020-02-28 00:06:12,"cf8c70f\n\nFor context-tracking, would be fine to even further comment, ""right now if we reject witness transactions based on their txids, relying on wtxid-based relay peers might lead to a stripped-witness tx starvation due to the low number of wtxid-relay peers at protocol deployment""\n\nAlso, once we reach a deployment meaningful enough, should we merge together TX_WITNESS_MUTATED and TX_WI",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r385441278,385441278,src/net_processing.cpp
sdaftuar,2020-03-04 18:40:53,"What to do in that case?  We could disconnect the peer for violating the spec, or ignore the message and not switch to wtxid relay, but I thought trying to do wtxid-relay was the most practical, as it should mostly work (just things that were announced earlier might not be successfully requested).  Maybe it's better to not tolerate any kind of bugs though, so that implementations get all this stuf",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r387858917,387858917,src/net_processing.cpp
sdaftuar,2020-03-05 17:23:07,"Yes, you made a good observation -- our fetching of parents of orphan transactions must be by txid, rather than wtxid.  I did try to carefully word the BIP to avoid referencing this situation:\n\n> After a node has sent and received a ""wtxidrelay"" message to/from a given peer, the node is required to use the MSG_WTX inv-type when announcing transactions to that peer, or requesting announced tran",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r388444497,388444497,src/protocol.h
sdaftuar,2020-03-05 17:24:42,"In the future, I think I'd like to eventually get rid of WITNESS_STRIPPED as a reason that validation returns, because we incur non-trivial CPU usage in order to make the determination of whether a transaction might be WITNESS_STRIPPED.\n\n",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r388445400,388445400,src/net_processing.cpp
naumenkogs,2020-03-05 18:31:29,"Disconnecting is too much, but ignoring the wtxid_relay message may be reasonable.\n\nAlternatively (and probably better), we can just make the comment more clear. Something like ""currently this is not enforced, because at most we get slight inefficiency if not following this rule"".\n\nAnd then the responsibility would be on the future developer to introduce the disconnect/ignore behavior if t",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r388481642,388481642,src/net_processing.cpp
ariard,2020-03-05 19:12:18,"I would amend the BIP to make its scope explicitly restrained. Add to 5) ""Note: this rule doesn't cover cases where a peer needs to request transaction for validation purposes but don't know its wtxid yet (e.g missing parents of a wtxid-announced child)"" ? At least to avoid someone raising same concern in the future and saying we don't commit on anything wrt to this issue.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r388504010,388504010,src/protocol.h
ariard,2020-03-05 19:13:39,"Yes that what I understood, you're thinking about the 2 `CheckInputScripts` in what is currently `PolicyScriptChecks`?",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r388504839,388504839,src/net_processing.cpp
jonatack,2020-03-06 14:18:39,"s/the filter/the recentRejects filter/ in 6e7290f to aid git grepping (in which case can drop ""reject"" in the next line).\n\nIdem for the section in `ProcessMessage()`::L2684 containing the same paragraph.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r388927279,388927279,src/net_processing.cpp
sdaftuar,2020-03-06 19:46:38,Yes that's right.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r389109682,389109682,src/net_processing.cpp
jonatack,2020-03-09 17:59:55,Curious why the `uint32_t` enum type is being added; good practice?,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r389864907,389864907,src/protocol.h
jonatack,2020-03-09 20:55:40,"s/microseconds/seconds/ in 068bf9f -- that said, there are several other static constexprs that are also described as `μs` but expressed in `s`.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r389956408,389956408,src/net_processing.cpp
jonatack,2020-03-10 00:56:40,"Perhaps update the documentation L403-404 above to mention sorting the mempool by both txid and wtxid transaction hashes (and 5 criteria rather than 4, depending on how you count it).",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r390040001,390040001,src/txmempool.h
naumenkogs,2020-03-10 14:38:57,Because of this confusion I am generally not a fan of mentioning the type in the comment. I don't see why it's useful since ``std::chrono::microseconds`` definition is clear enough.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r390362519,390362519,src/net_processing.cpp
naumenkogs,2020-03-10 14:46:01,"I think MSG_WTXID is even more confusing than MSG_WTX. The suffix here represents an object being fetched. So TX or BLOCK with some type. MSG_WTXID would mean we are fetching an ID.\nThe only thing I can thing of is MSG_TX_BY_WTXID. But I'm also fine with MSG_WTX.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r390368090,390368090,src/protocol.h
jonatack,2020-03-10 15:05:06,"Maybe I've been staring at this for too long but I agree with @naumenkogs. I confused `MSG_TX` and `MSG_WTX` once during the first pass at reviewing a few weeks ago, but then I got used to it and I like its brevity. I think it's fine for now.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r390383225,390383225,src/protocol.h
sipa,2020-03-13 20:58:15,It seems that all call sites of `get_iter_from_wtxid` hold `cs` already. Perhaps it's better to have an `AssertLockHeld` / `EXCLUSIVE_LOCKS_REQUIRED` here instead?,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r392472822,392472822,src/txmempool.h
sipa,2020-03-13 21:59:00,"Slightly more efficient and C++11ish:\n\n```suggestion\n                            auto ret2 = mapRelay.emplace(ret.first->second->GetWitnessHash(), ret.first->second);\n```",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r392505176,392505176,src/net_processing.cpp
sipa,2020-03-13 21:59:31,"```suggestion\n                                vRelayExpiration.emplace_back(nNow + std::chrono::microseconds{RELAY_TX_CACHE_TIME}.count(), ret2.first);\n```",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r392505319,392505319,src/net_processing.cpp
sipa,2020-03-13 22:01:41,"```suggestion\n    g_orphans_by_wtxid.emplace(tx->GetWitnessHash(), ret.first);\n```",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r392505963,392505963,src/net_processing.cpp
sipa,2020-03-13 22:19:59,The comment on the next line here is outdated now.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r392511089,392511089,src/net_processing.cpp
sipa,2020-03-13 22:25:30,Next line's comment is outdated here as well.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r392512606,392512606,src/net_processing.cpp
sipa,2020-03-13 22:27:43,Can you use braces and indentation here? Combination of a line ending with ';' followed by `else` on the next line may be confusing.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r392513202,392513202,src/net_processing.cpp
sipa,2020-03-13 22:55:17,The conditional seems superfluous here.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r392519821,392519821,src/net_processing.cpp
sdaftuar,2020-03-17 20:25:49,We use it to properly count the number of wtxid-relay peers.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r393948358,393948358,src/net_processing.cpp
sdaftuar,2020-03-17 20:28:57,"I see @naumenkogs's point that this is redundant, but I don't understand why @jonatack is saying this is incorrect?  TXID_RELAY_DELAY is the number of microseconds that we wait before requesting a transaction, no?",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r393950006,393950006,src/net_processing.cpp
sipa,2020-03-17 20:30:26,"Oh, of course.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r393950777,393950777,src/net_processing.cpp
sdaftuar,2020-03-17 20:41:01,Done,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r393956494,393956494,src/net_processing.cpp
sdaftuar,2020-03-17 20:41:15,"Thanks, done.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r393956622,393956622,src/net_processing.cpp
sdaftuar,2020-03-17 20:41:24,Done.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r393956704,393956704,src/net_processing.cpp
sdaftuar,2020-03-17 20:41:57,Done.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r393957003,393957003,src/net_processing.cpp
sdaftuar,2020-03-17 20:42:06,Done.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r393957074,393957074,src/txmempool.h
sdaftuar,2020-03-17 20:42:32,"Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r393957303,393957303,src/txmempool.h
sdaftuar,2020-03-17 20:43:44,This was aj's proposed fix to the build warning you reported before: https://github.com/bitcoin/bitcoin/pull/18044#discussion_r374576703,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r393957941,393957941,src/protocol.h
jonatack,2020-03-17 21:02:19,"The value in the definition is expressed in seconds (albeit with microsecond precision), e.g. a delay of 2 seconds and not 2 microseconds, unless I am confused. There are several similar cases; I think this can be ignored and addressed (or not) separately.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r393968535,393968535,src/net_processing.cpp
sipa,2020-03-18 01:34:44,"The comment is technically correct because it's referring to the `TXID_RELAY_DELAY` constant, not how it is computed. Compare it with how before it might have been `static const int TXID_RELAY_DELAY = 2 * 1000000`, where 2 was still a value in seconds.\n\nIt's a silly semantics discussion though. With the std::chrono types everywhere the comment could just be ""Duration of delay ..."".",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r394060201,394060201,src/net_processing.cpp
jonatack,2020-03-18 09:15:51,"> the comment could just be ""Duration of delay ..."".\n\nYes.\n",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r394200854,394200854,src/net_processing.cpp
jnewbery,2020-03-28 18:22:37,"Is there a reason you've added a new function here, instead of extending `exists()` with a boolean `wtxid` parameter (in the same way that you've extended `CompareDepthAndScore()` and `info()`?",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r399693214,399693214,src/txmempool.h
jnewbery,2020-03-28 18:23:21,"As above, I think it would be clearer if this was combined with `GetIter()`",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r399693288,399693288,src/txmempool.h
jnewbery,2020-03-28 18:25:32,Is there a good reason not to use `txid` and `wtxid` here instead of looking them up again?,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r399693555,399693555,src/net_processing.cpp
jnewbery,2020-03-28 19:50:14,"I don't understand how this is supposed to work. You add the parent's txid to the node's `m_tx_process_time` via `RequestTx()` here, but when we process it in `SendMessages()` getdata logic, we always construct a `CInv` with type `MSG_WTX`. The receiving node will fail to find the tx because it searches in the mempool for a tx with that wtxid.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r399702162,399702162,src/net_processing.cpp
ajtowns,2020-03-30 12:54:41,"This also happens if a buggy node sends `CInv` with `MSG_WTX` without having announced `wtxidrelay` first, or `MSG_TX` after having announced `wtxidrelay` I think.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r400167606,400167606,src/net_processing.cpp
ajtowns,2020-03-30 12:58:03,`GetHash()` and `GetWitnessHash()` are inline and just return pre-cached results anyway so it should make no practical difference. Probably clearer to use the shorter aliases though.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r400169765,400169765,src/net_processing.cpp
sdaftuar,2020-03-30 19:35:43,"This logic of requesting unconfirmed parent transactions when an orphan is received should eventually go away, in favor of some sort of package relay scheme, where orphan transactions trigger discovery of all unconfirmed ancestors -- so I think the question is what to do in the meantime.  I think wtxid-based relay is more important than optimizing this behavior when we encounter an orphan.\n\nNo",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r400444597,400444597,src/net_processing.cpp
sdaftuar,2020-03-30 19:40:57,"I think this is just a style choice, trying to balance different tradeoffs:\n- if you change a function's arguments, then you have to change all call sites, unless you use an optional argument\n- changing lots of call sites is not great as it adds noise to PR review\n- optional arguments are not great as they can make it harder to maintain code and do review in the future\n\nBut sometimes opt",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r400447324,400447324,src/txmempool.h
sdaftuar,2020-03-30 19:43:10,"Looking at the diff, I note that the code change I have here looks clearly correct if you believe the old code was correct.  Given the lack of performance sensitivity I'm not inclined to change this.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r400448519,400448519,src/net_processing.cpp
jnewbery,2020-03-30 22:35:29,"I disagree with the argument ""this was broken for a long time and we only recently fixed it, so it's ok to break it again""\n\n> it is possible to improve this by keeping extra bookkeeping ... it's a lot of additional complexity.\n\nThis doesn't seem like too much additional complexity. We store in `m_tx_process_time` whether the request should be for a txid or a wtxid, and set the GETDATA INV ",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r400535511,400535511,src/net_processing.cpp
sdaftuar,2020-03-30 23:37:02,">I disagree with the argument ""this was broken for a long time and we only recently fixed it, so it's ok to break it again""\n\nPlease, that is not the entirety of the argument; the substance of what is being ""broken"" -- and how significant it is -- is relevant too.  It's not like transaction relay was horribly broken until the last release.  \n\nFor context: fixing the behavior as we did was s",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r400557458,400557458,src/net_processing.cpp
ajtowns,2020-03-31 00:08:21,"> I don't see the downside\n\nJust my opinion, but: the p2p code is already really complicated and not really well understood, adding new behaviours and having the implementation and the spec differ in ways that matter in practice and aren't obvious seems like it makes that a fair bit worse. This makes the review burden for both this PR and future p2p changes much higher, since you can't just re",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r400567195,400567195,src/net_processing.cpp
sdaftuar,2020-03-31 14:27:37,"@ajtowns My view on this is that what goes into a BIP are the essential behaviors that all implementations should abide by in order to make an idea work, but non-essential implementation details are left for projects to individually figure out.\n\nThis makes it easier for new protocol extensions to get adopted by the whole community (the fewer requirements, the better), and for our own software ",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r400958023,400958023,src/net_processing.cpp
jnewbery,2020-03-31 15:44:37,"I find this behavior very confusing. Can you help me understand if I'm getting any of this wrong:\n\n1. We have a peer that has negotiated wtxid relay\n2. That peer relays us a transaction whose parents we don't have\n3. We want to request the parent transaction, so we put the **txid** in the `m_tx_process_time` and `m_tx_announced` for this peer (https://github.com/bitcoin/bitcoin/pull/18044/",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r401018724,401018724,src/net_processing.cpp
jnewbery,2020-03-31 20:47:44,"I also can't quite follow the logic here: https://github.com/bitcoin/bitcoin/pull/18044/files#diff-eff7adeaec73a769788bb78858815c91R4139-R4140\n\nIt looks to me like the **txid** has been added to `m_tx_process_time`, but when we call into `AlreadyHave(inv, m_mempool)`, the inv is a `MSG_WTX`, so we'll check in our mempool for a transaction with that **wtxid** (which we won't find). We'll then r",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r401205210,401205210,src/net_processing.cpp
ajtowns,2020-04-02 15:08:52,"@sdaftuar ""No one should assume, or would assume, that this is something that ought to work"" -- but... aren't we assuming that it will work when we send a WTX request with a txid instead of a wtxid?\n\nAside from any bugs, I think this adds three lots of technical debt:\n\n * we're replying to `GETDATA WTX <txid>` and `GETDATA TX <wtxid>` if the tx is still in mapRelay -- this will go away if/",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r402389444,402389444,src/net_processing.cpp
sdaftuar,2020-04-02 19:04:50,"I think I'm just going to eliminate the logic for requesting orphan parents from wtxid-relay peers, as you suggested above -- I think that is the simplest approach, and should eliminate the bugs reported by @jnewbery.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r402545909,402545909,src/net_processing.cpp
ajtowns,2020-04-06 09:31:24,"Seems okay. I think it could make sense to explicitly skip INVs offering a TX/WTX that we'd incorrectly GETDATA as a WTX/TX (respectively) as well:\n\n```diff\n--- a/src/net_processing.cpp\n+++ b/src/net_processing.cpp\n@@ -2323,6 +2323,13 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n             if (interruptMsgProc)\n                 return true;\n",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r403953004,403953004,src/net_processing.cpp
fjahr,2020-04-21 16:28:46,"> (This still leaves us with the tech debt of our functional tests mostly testing tx relay when we'll be moving towards doing wtxid relay most of the time in the real world, but that's not really avoidable)\n\nI think that should be addressed with this update: https://github.com/fjahr/bitcoin/commit/becdb68ab37fdcbc1dcf743b19ea8629f52677bb",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r412306569,412306569,src/net_processing.cpp
fjahr,2020-04-21 17:28:16,"> I think it could make sense to explicitly skip INVs offering a TX/WTX that we'd incorrectly GETDATA as a WTX/TX (respectively) as well:\n\nAnd I agree with @ajtowns , this behavior makes intuitive sense to me and it matches my interpretation of the current description in the BIP: ""After a node has sent and received a ""wtxidrelay"" message to/from a given peer, the node is required to use the MS",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r412350247,412350247,src/net_processing.cpp
ajtowns,2020-06-15 15:16:54,"`TX` (by txid, don't send witness), `WTX_TXID` (by txid, do send witness), `WTX_WTXID` (by wtxid, do send witness)` might be clearer?",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r440251893,440251893,src/protocol.h
amitiuttarwar,2020-06-20 19:41:41,"from a quick look, seems like using `const` and reference declarator together on this `std::pair<uint256,uint256>` type is causing the build warnings. I don't yet understand why. \n\nleaving `&` but removing the `const` throws an error: \n```\nnet_processing.cpp:835:39: error: non-const lvalue reference to type 'pair<uint256, [...]>' cannot bind to a value of unrelated type 'pair<const uint256",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443154957,443154957,src/net_processing.cpp
sipa,2020-06-20 20:00:23,"The reason is that the element type of `unbroadcast_txids` is `std::pair<const uint256, uint256>` which can't be converted to `std::pair<uint256, uint256>`. If you want a const reference to such a thing, it will be copied, and you'll get a reference to the copy.\n\nThe correct solution is either (`const`) `std::pair<const uint256, uint256>&`, or just `const auto&`.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443156052,443156052,src/net_processing.cpp
ariard,2020-06-22 08:21:39,"As a follow-up, I think we may scope this under a connection type, like https://github.com/bitcoin/bitcoin/pull/19316.\n\nSide-note, @amitiuttarwar, I had only a super-quick overview on connection type, it's a great move but IMO I would adopt a more fine-grained typology. Right now it sounds to confuse type of _traffic_ (block, addr, tx) and type of connection _selection_ (outbound/inbound,  nor",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443392439,443392439,src/net_processing.cpp
ariard,2020-06-22 08:36:15,"AFAICT, if we have sighash_noinput+Eltoo channel design in the future, commitment transactions are going to be _symmetric_ but witness likely _asymmetric_ (one per-party). So you would observe wtxidA != wtxidB but txidA == txidB which means in case of concurrent broadcast by different parties you will spuriously re-download transactions and only gets one version in your mempool.\n\nAssuming such",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443401103,443401103,src/net_processing.cpp
ariard,2020-06-22 08:51:50,"The trade-off bandwidth saving against tx-relay propagation latency may not be only the one. Investigating around transaction pinning (https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-April/017757.html), there is this idea that an attacker, by bypassing tx-relay delay timers will always win the propagation race and that way be first in _every_ miners full-node mempools and succeed the ",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443409934,443409934,src/net_processing.cpp
ariard,2020-06-22 09:07:12,"I think we should be really careful about including `TX_WITNESS_STRIPPED` to the rejection filter. \n\nIn LN, your channel counterparty knows your own version of the commitment transaction as it has to build it to sign it. It means a malicious counterparty would be able to broadcast a witness _stripped_ version of it at any moment and that way get it added to the rejection filters of any p2p pee",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034,443419034,src/net_processing.cpp
ajtowns,2020-06-22 09:50:32,"""spuriously re-download transactions and only gets one version in your mempool"" already happens with RBF; I don't think this is meaningfully different?\n\n(If you're just varying the witness you don't need SIGHASH_NOINPUT, though, so I think there's a good chance the txid would be different too for eltoo transactions if that comes into play)",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443443661,443443661,src/net_processing.cpp
ajtowns,2020-06-22 09:55:28,Looks like this means `cs_main` needs to be locked in `ReattemptInintialBroadcast()` (net_processing) and `BroadcastTransaction()` (node/transaction.cpp),https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443446534,443446534,src/net_processing.h
sdaftuar,2020-06-22 14:53:36,Fixed with `const auto&`.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443619023,443619023,src/net_processing.cpp
sdaftuar,2020-06-22 15:05:17,"Thanks for catching those, fixed.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443627585,443627585,src/net_processing.h
sdaftuar,2020-06-22 15:11:28,"Can you explain what you think needs to change in the code here?  \n\nI think the documentation is trying to explain a necessary (but not sufficient) condition for changing the code at some unspecified point in the future.  If you want to argue that we should never change this code because other ecosystem software might break, then that's something worthy of discussion, but I don't know that we ",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443631940,443631940,src/net_processing.cpp
sdaftuar,2020-06-22 15:16:05,"I don't understand the comment here -- are you saying wtxid-relay is somehow incompatible with a future change to the protocol?  It seems to me that (a) wtxid-relay is more likely to support the ability to relay transactions with same underlying txid but different wtxid than our existing relay protocol, and (b) whether we adopt changes to the mempool acceptance rules to allow for this is otherwise",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443635047,443635047,src/net_processing.cpp
adamjonas,2020-06-22 15:53:42,"Believe the same use of `const auto&` is needed here as used in [net_processing](https://github.com/bitcoin/bitcoin/pull/18044/commits/d5d55edb1f295711574190bf310f88171451b5cf#diff-eff7adeaec73a769788bb78858815c91R823).\n```suggestion\n        for (const auto& elem : unbroadcast_txids) {\n```",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443660713,443660713,src/validation.cpp
sdaftuar,2020-06-22 16:33:17,"Doh, thanks! Fixed.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443685918,443685918,src/validation.cpp
ariard,2020-06-22 19:22:37,"> ""spuriously re-download transactions and only gets one version in your mempool"" already happens with RBF; I don't think this is meaningfully different?\n\nI think you're right we do already have this kind of case due to single-party RBF. After thoughts, qualifying them of _spurious_ was a fallacy as a smaller valid witness may increase transaction feerate and such increase its probabilities of",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443775360,443775360,src/net_processing.cpp
ariard,2020-06-22 19:46:25,"Can you reference this comment/issue directly around the code ?\n\nI think that's a bit different than Matt's previous comment [here](https://github.com/bitcoin/bitcoin/pull/18044#discussion_r378586654) where we only considered censorship of a wtixd-relay _requester_, which should be fine if you have at least 1 honest wtxid-relay peer as you pointed.\n\nThe scenario I'm describing is I think d",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443786487,443786487,src/net_processing.cpp
sdaftuar,2020-06-23 12:04:13,"Do you mean just add a link to your github comment, or something else?  \n\nHere's the current comment, which I think captures the issue you're describing (as far as I understand, what you're talking about is fundamentally the same as the issue we flagged years ago when we first deployed segwit, see #8279):\n```\n                // Do not add txids of witness transactions or witness-stripped\",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r444170959,444170959,src/net_processing.cpp
sdaftuar,2020-06-23 12:08:34,Marking this as resolved -- nothing more to do here as far as I understand.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r444173164,444173164,src/net_processing.cpp
sdaftuar,2020-06-23 12:09:01,"Marking this as resolved, as nothing more to do here as far as I understand.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r444173382,444173382,src/net_processing.cpp
amitiuttarwar,2020-06-24 20:33:05,@ariard lets continue the conversation here: https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649054328,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r445154911,445154911,src/net_processing.cpp
ariard,2020-06-27 00:24:18,"I think you may have a slight InvBlock until wtxid-relay is double-digit deployed, a wtxid-relay-signaling inbound peer can announce a MSG_TX and thus being processed with same time priority than txid-relay outbound peers. By holding the TX and assume your victim only have txid-relay peers you block transaction propagation \n\nMaybe `CalculateTxGetDataTime` should use the inv type instead of pee",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r446459839,446459839,src/net_processing.cpp
ariard,2020-06-27 00:43:27,"Right the scenario I'm describing is leveraging the same original issue from #8279, just concerning censorship of a non-upgraded initial sender.\n\n```\n               // Note, any on-top-of-base-layer software (eg LN-node) relying on a non-upgraded to wtxid-relay full-node \n              //  would be subject to censor of its time-sensitive transactions. See https://github.com/bitcoin/bitcoin",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r446462569,446462569,src/net_processing.cpp
sdaftuar,2020-06-27 22:09:05,"I will update the comment to incorporate your suggestion somewhat, including providing a link to the comments as you request, but I have a philosophical difference of opinion about the implications here of ecosystem software that is dependent on particular p2p behavior (specifically with regard to your ""ideally you want 99% of upgrade among LN-node's full nodes"" comment).\n\nWe have anti-CPU DoS",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r446572355,446572355,src/net_processing.cpp
sdaftuar,2020-06-28 00:31:29,I don't think this is very significant but perhaps we can include the suggestion that I believe aj (or others) made of ignoring MSG_TX inv's from wtxid-relay peers (and vice versa).,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r446583177,446583177,src/net_processing.cpp
ajtowns,2020-06-29 02:05:47,"This was making a copy of the set, which could then be accessed without holding the `mempool.cs` lock; returning a const reference instead is unsafe, isn't it? (In particular, if I understand correctly, `map<uint256,uint256> x = mempool.GetUnbroadcastTxs();` will do the copy from `*(&mempool.m_unbroadcast_txids)` after releasing the lock with this code, where previously it would have either copied",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r446735110,446735110,src/txmempool.h
ajtowns,2020-06-29 02:58:11,"FWIW, I think `mempool.exists(hash, by_wtxid)` is more convenient/readable in AlreadyHave (the only place `wtxid_exists()` is used); it would let you say:\n\n```\n    const bool by_wtxid = (inv.type == MSG_WTX); \n    return mempool.exists(inv.hash, by_wtxid));\n```\n\ninstead of\n\n```\n    return (inv.type != MSG_WTX && mempool.exists(inv.hash)) ||\n           (inv.type == MSG_WTX && ",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r446746185,446746185,src/txmempool.h
ajtowns,2020-06-29 03:20:20,Might be clearer just to pass the CInv in instead of separating the hash and precomputing `inv.type==MSG_WTX` at the caller.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r446750838,446750838,src/net_processing.cpp
ajtowns,2020-06-29 03:45:39,"Disconnecting seems fine to me -- it's not like there are old peers sending wtxidrelay messages around that we need to worry about supporting, and if we disconnect immediately, that should prevent anyone creating any new peers that behave weirdly? Mildly prefer ignoring the wtxidrelay if proposed post-verack, than just trying to do what they intend.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r446755938,446755938,src/net_processing.cpp
instagibbs,2020-06-29 14:01:55,Isn't this block about tracking `witness txid` not `txid`?,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r446995091,446995091,src/net_processing.cpp
sdaftuar,2020-06-29 21:16:48,"Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r447259137,447259137,src/txmempool.h
sdaftuar,2020-06-29 21:17:26,Ok I guess recentRejects is pretty confusing.  Made one more attempt to add comments around how this works.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r447259405,447259405,src/net_processing.cpp
sdaftuar,2020-06-29 21:19:04,"I kind of don't like passing the CInv around, as it makes more places in the code have to know about the different enums that we use in there (and more places to potentially change in the code if we add new enums in the future), so leaving this as-is.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r447260135,447260135,src/net_processing.cpp
sdaftuar,2020-06-29 21:20:04,Ok made it disconnect. Failing to make any connections at all is a good way for software to get fixed I guess...,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r447260595,447260595,src/net_processing.cpp
naumenkogs,2020-06-30 13:22:04,"To other reviewers: this issue is addressed in one of the following commits.\nIt would make more sense to update it here, but it's probably fine.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r447677003,447677003,src/net_processing.cpp
naumenkogs,2020-06-30 13:49:28,"I'm not very familiar with alternative (deployed) SIGHASH flags, but I was wondering if this can possible screw us somehow... I don't have a particular attack scenario, just throwing this idea here.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r447697340,447697340,src/net_processing.cpp
sdaftuar,2020-06-30 14:07:05,"I don't know what SIGHASH flags has to do with this, can you elaborate on the scenario you have in mind?\n\nMy understanding of the logic here is that at this point in the code, we know that a parent of this orphan transaction will definitely not be accepted by our node (as it is already in our reject filter).  Since a txid is a commitment to the inputs of a transaction, this means that we can d",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r447710854,447710854,src/net_processing.cpp
instagibbs,2020-06-30 14:12:31,"I understand how they work(in master), I didn't understand why it was talking about something it's not doing. With the added comment it's clearer, thanks.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r447715043,447715043,src/net_processing.cpp
instagibbs,2020-06-30 15:57:06,why are these string checks removed? ,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r447795446,447795446,test/functional/p2p_segwit.py
naumenkogs,2020-06-30 16:03:16,"Nevermind, I was worried that something would happen to xxx | ANYONECANPAY, but now I think there are no issues there.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r447799731,447799731,src/net_processing.cpp
sipa,2020-07-06 23:20:28,"@ariard I don't understand this comment (https://github.com/bitcoin/bitcoin/pull/18044/commits/1c382b500b2b6025f9a4cf4cd37af678172c6ae1#r385362270).\n\nI think 3 pointers for an extra index is probably close to correct, but #18086 may make these kinds of heuristics unnecessary, so that's probably a better approach long term.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r450527682,450527682,src/txmempool.cpp
sipa,2020-07-06 23:28:50,"In commit ""Add wtxids of confirmed transactions to bloom filter""\n\nIt may be worth doing this only in case the txid and wtxid differ (inserting the same thing twice still counts towards expiration of old entries). In the worst case it doesn't matter (it maintains the last 24000 inserted txid/wtxid pairs always), but in the average case, as long as there are non-witness transactions doing so wou",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r450530214,450530214,src/net_processing.cpp
sipa,2020-07-06 23:31:01,"Agree with @sdaftuar. It's annoying that it adds variables in many places, but the various CInv states really don't correspond to what we need here either.\n\nIt may be useful to have an encapsulated (use_wtxid, txid_or_wtxid) pair type, but let's keep that for later (I think it would make sense for combining with #19184 as well).",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r450530868,450530868,src/net_processing.cpp
sipa,2020-07-07 02:15:26,"This will only request parents of orphan transactions when received from non-wtxid peers? What if all peers support wtxid?\n\nCan't we still request them, but with MSG_TX instead of MSG_WTX? That'd require keeping track of wtxidness per request, unfortunately.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r450573992,450573992,src/net_processing.cpp
sipa,2020-07-07 02:47:13,Nit: this comment is out of date now.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r450581797,450581797,src/protocol.h
ajtowns,2020-07-07 04:30:36,[Earlier discussion of this](https://github.com/bitcoin/bitcoin/pull/18044#discussion_r400444597) proposed handling this via package relay,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r450604619,450604619,src/net_processing.cpp
ajtowns,2020-07-07 06:31:05,"I think this will be an issue even when there's only a small number of wtxid peers -- in that case we'll delay requesting transactions from non-wtxid peers, so most of the txs (and hence most of the orphans) we receive will be from wtxid peers. I guess I'd still rather see this merged now and fixed later than further delayed though?",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r450638708,450638708,src/net_processing.cpp
sipa,2020-07-07 06:58:00,"Ok, I read back some of the history there. I see the complexity it introduces, but I'm still really uncomfortable with just breaking orphan parent-fetching. I'll instrument my node to see how frequently that actually happens.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r450649223,450649223,src/net_processing.cpp
ajtowns,2020-07-07 08:14:15,"Hmm, it just doesn't seem like a big deal to me. I think https://github.com/ajtowns/bitcoin/commits/202007-wtxid-orphans should be all that's needed to fix it.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r450687076,450687076,src/net_processing.cpp
sipa,2020-07-07 18:16:33,"@ajtowns That does not look bad at all, indeed. I guess we can move ahead with this and re-instate orphan fetching with a patch like that afterwards.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r451055578,451055578,src/net_processing.cpp
ajtowns,2020-07-08 01:18:17,"Seems like it would fit in well with the tx relay overhaul, if you stole another bit from m_sequence for the txid vs wtxid flag to me.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r451228334,451228334,src/net_processing.cpp
sipa,2020-07-08 02:47:05,"In commit ""Add support for tx-relay via wtxid""\n\nI think `RemoveUnbroadcastTx` will always take txids, not wtxids, so this should be changed to `tx->GetHash()`.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r451250911,451250911,src/net_processing.cpp
sipa,2020-07-08 02:51:36,@ajtowns Exactly!,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r451252043,451252043,src/net_processing.cpp
sipa,2020-07-08 07:57:58,"In commit ""Add a wtxid-index to the mempool""\n\nI think this would be a nice improvement.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r451354525,451354525,src/txmempool.h
sdaftuar,2020-07-08 18:40:50,"Fixed, thanks!",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r451751532,451751532,src/net_processing.cpp
sdaftuar,2020-07-18 20:25:54,"Took me forever to remember the issue here -- the first string check can stay, but the second one has to be removed because now that we cache failure of wtxid's in the recentRejects filter, the reason for failure on the second validation attempt will be different.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r456824787,456824787,test/functional/p2p_segwit.py
sdaftuar,2020-07-18 22:57:44,Reinstating this first string check (and the second line was removed in a later commit anyway).,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r456836108,456836108,test/functional/p2p_segwit.py
sdaftuar,2020-07-18 22:58:00,Done.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r456836126,456836126,src/net_processing.cpp
sdaftuar,2020-07-18 22:58:14,Fixed.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r456836147,456836147,src/protocol.h
ariard,2020-07-21 00:38:49,"We set `fRejectedParents` based on parent's _txid_ in `recentRejects`. If parent has been previously announced and rejected based on wtxid only we won't found it. So we won't add this orphan and may fetch it again. I don't see this case covered in new test ?\n",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r457768442,457768442,src/net_processing.cpp
ariard,2020-07-21 01:04:19,"Also if we fix it, and parent txA is rejected due to a mutated witness, child txB with a _valid_ witness will be pinned in `recentRejects`. If parent txA is re-announced and accepted with a new witness, propagation of child txB will still fail until next block, assuming there is a unique valid witness known. So in multi-party, competing scenario, you introduce a _slight_ delay vector. I think that",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r457775247,457775247,src/net_processing.cpp
ariard,2020-07-21 16:27:55,I think `std::map::operator[]` returns a reference to the value if the key already exists ? You might broadcast a transaction with different witnesses and ideally you should track all of them. I don't know any application relying on this behavior though so maybe not worthy to fix.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r458229569,458229569,src/txmempool.h
sdaftuar,2020-07-21 20:58:42,"Leaving this as-is.  There are a whole host of other places in our code that would need to change in order to support tracking of multiple transactions with the same txid (wallet, relay logic, etc).",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r458383811,458383811,src/txmempool.h
sdaftuar,2020-07-21 21:02:06,"> We set `fRejectedParents` based on parent's _txid_ in `recentRejects`. If parent has been previously announced and rejected based on wtxid only we won't found it. So we won't add this orphan and may fetch it again. I don't see this case covered in new test ?\n\nYes, this is an unfortunate problem, but I don't see a way to fix the redownloading of transactions with failed parent without impleme",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r458385588,458385588,src/net_processing.cpp
sipa,2020-07-21 23:15:09,"~~In theory we could distinguish whether failure is due to a definitely-not-witness-related reason, and in that case, add both the txid and wtxid to the recentRejects filter. I don't think this accomplishes much, because it won't occur in non-adverserial scenarios, and in adverserial ones, the attacker can just use invalid witnesses if he wants to cause harm with invalid transactions.~~\n\nEdit:",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r458442114,458442114,src/net_processing.cpp
sdaftuar,2020-07-22 01:43:48,"I think we could try to special case the common scenario that we expect to happen at some point: some transaction spending a segwit version 1 output is rejected by (older) software as nonstandard, and then child transactions are relayed and redownloaded from each upgraded peer that announces it because the parent transaction's txid wouldn't be found in the reject filter.  We could improve this beh",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r458484548,458484548,src/net_processing.cpp
ariard,2020-07-23 00:59:22,"This issue is only a bandwidth waste and this PR is already a huge improvement on this side, that's all good to defer this to future work, orphan parent handling is already an area known to be improved.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r459164094,459164094,src/net_processing.cpp
jnewbery,2020-07-26 08:07:36,"I don't think this change is necessary (or desirable). I guess it was prompted by this comment: https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393293074 , but storing this as a map from txid->wtxid is unnecessary and confusing, since it obfuscates the purpose of this data, which is a *set* of transactions that may need to be rebroadcast.\n\nThe only place that the wtxid is read from t",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r460495254,460495254,src/txmempool.h
jnewbery,2020-07-26 08:15:35,"We shouldn't be indiscriminately taking the address of a return value which may be `nullptr`. I know the same pattern exists in a few other places, but really we should check for existence here before dereferencing the pointer.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r460496023,460496023,src/net_processing.cpp
ariard,2020-07-26 16:23:25,"My mistake here, effectively you need to announce transactions from the unbroadcast set by wtxid to upgraded peers but as you point out it doesn't mean we need to cache them as a solution.\n\nMaybe we should precise unbroadcast set semantic wrt same txid, different wtxids, we only guarantee reattempt to the best mempool candidate known for a given txid at the time we call `ReattemptInitialBroadc",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r460546336,460546336,src/txmempool.h
jnewbery,2020-07-27 07:45:49,"I really think this ""same txid, different wtxid"" thing is a complete red herring. The mempool can only ever be aware of one witness for a transaction, so any attempt to announce the transaction via a different wtxid would fail anyway. As Suhas pointed out earlier (https://github.com/bitcoin/bitcoin/pull/18044#discussion_r458383811), to support tracking multiple witnesses we'd need to make signific",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r460704950,460704950,src/txmempool.h
sipa,2020-07-27 08:02:18,"Agree with @jnewbery. There is no real way that we can reasonable start tracking multiple witnesses for the same transaction (either in the mempool or the wallet, ...), so unless this map's storing of wtxid is needed for efficiency, it seems just a set of txid should be sufficient here.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r460713629,460713629,src/txmempool.h
amitiuttarwar,2020-07-28 05:22:49,"😮   wow that's a great point @jnewbery. thank you!!\n\nI thought during implementation I ran into something that prevented me from exclusively having txids on the set, but that evaluation is simply wrong. I've taken a first pass at reverting unbroadcast to a set here: https://github.com/amitiuttarwar/bitcoin/commit/f51cccdd6c97d1b1e45163d56ebd6b7d29a2f587. I'll need to revisit with fresh eyes an",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r461325271,461325271,src/txmempool.h
JeremyRubin,2020-07-28 05:46:30,@amitiuttarwar mapTX is a multiindex and we use a hashed index not a ordered index so it's O(1) lookup. Not sure exactly how mapTX relates to m_unboardcast_txids though...,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r461332635,461332635,src/txmempool.h
jnewbery,2020-07-28 06:56:42,"@amitiuttarwar that patch looks correct from a quick skim. I'll review fully once you open a PR.\n\nAs @JeremyRubin points out, we're using a `boost::multi_index::hashed_unique` index for the wtxid index, which has constant time search/retrieval.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r461359274,461359274,src/txmempool.h
jnewbery,2020-07-31 10:27:24,The `else if (tx.HasWitness() && RecursiveDynamicUsage(*ptx) < 100000)` block below is now dead code and should be removed (anything that doesn't go in this if branch is `TX_WITNESS_STRIPPED` and therefore doesn't have a witness),https://github.com/bitcoin/bitcoin/pull/18044#discussion_r463532611,463532611,src/net_processing.cpp
JeremyRubin,2020-07-31 20:28:40,Clarification: does moving this out of the try block have any behavior change? Is it possible that a semi-corrupt unbroadcast_txids would partially deserialize and then have only some entries?,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r463820204,463820204,src/validation.cpp
JeremyRubin,2020-07-31 20:29:22,Suggest: clearing unbroadcast_txids here in case has garbage data.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r463820479,463820479,src/validation.cpp
JeremyRubin,2020-07-31 20:32:09,Is this correct? Should this transaction get queued somewhere for rebroadcasting? Or is it a known precondition that because it failed to get into the mempool before this line it will fail again?,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r463821665,463821665,src/validation.cpp
JeremyRubin,2020-07-31 20:33:43,"I can't think of why we'd want it in the unbroadcast if it didn't make it back in the mempool, but just double checking.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r463822371,463822371,src/validation.cpp
JeremyRubin,2020-07-31 20:45:28,"This line relies on the idea that it is cryptographically hard to find a TXID such that another WTXID (for a different txid) is the same. It's not clear to me that this is provably true because there may be serialization ambiguity.\n\nMy preference would be to have two different mapRelays which have a strongly typed key.\n\nIt's probably low risk, but maybe worth documenting or at least someho",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r463827102,463827102,src/net_processing.cpp
JeremyRubin,2020-07-31 20:51:38,"Because presumably WTXID becomes the primary lookup method, someone may prefer to in the future switch the roles of mapOrphanTransactions and g_orphans_by_wtxid so that the g_orphans_by_wtxid is the owning map. This is a small performance win avoiding an extra iterator lookup.",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r463831088,463831088,src/net_processing.cpp
JeremyRubin,2020-07-31 21:20:06,"confirmed that  not exists tx tx2. txid(tx) == wtxid(tx2) && tx != tx2\n\n```\n[7/31/20 14:09] <jeremyrubin> sipa: is this proven: not exists tx tx2. txid(tx) == wtxid(tx2) && tx != tx2\n[7/31/20 14:10] <sipa> jeremyrubin: yes, assuming double-sha256 collision resistance that statement is equivalent to ser_without_witness(tx) == ser_with_witness(tx2)\n[7/31/20 14:11] <sipa> either both tx and",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r463851414,463851414,src/net_processing.cpp
instagibbs,2020-08-02 13:03:39,"I got really confused reviewing master's test. The surrounding test is dead, with incorrect comments asserting that we are checking for blinding. Seems this was deleted just to make the test pass :grimacing: ",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r464076378,464076378,test/functional/p2p_segwit.py
amitiuttarwar,2020-08-25 00:34:03,"the try block was introduced to specifically catch the error when upgrading around not having an unbroadcast set written to disk. so I think having the initialization & iteration separate actually captures that intent better. \n\nbut lmk if you think of any specific ways this logic could be problematic",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r476002698,476002698,src/validation.cpp
amitiuttarwar,2020-08-25 00:46:18,"the unbroadcast set should always be a subset of the mempool. it just maintains txids, so we don't have the capability to do much if its not found. \n\n> Should this transaction get queued somewhere for rebroadcasting?\n\ndo you mean re-attempt mempool submission? bc we def wouldn't want to broadcast or rebroadcast a transaction we don't have in our mempool!",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r476011194,476011194,src/validation.cpp
amitiuttarwar,2020-08-25 00:53:45,"looking into this- is there really a way that the CAutoFile `>>` operator could cause a silent/partial failure? as I mentioned previously the idea of this try catch is just for a smooth upgrade. To elaborate further: so we don't print `Failed to deserialize mempool data on disk: %s. Continuing anyway.""` when everything actually went fine. the current intention is to remove this in 0.22, so if ther",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r476015987,476015987,src/validation.cpp
JeremyRubin,2020-08-25 01:12:02,"Yes I believe so? Fortunately for std::map we deserialize an element and then insert it into the map, but is a possibility that we say that there should be 10 elements and there are only 5 elements, or there are 5 elements and their are actually 10. In the event the file is corrupt, we should likely treat it as if the entire thing is corrupt, rather than continuing to process.\n\nPerhaps we shou",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r476028056,476028056,src/validation.cpp
JeremyRubin,2020-08-25 01:14:51,to be clear the issue only comes up when you don't have enough elements or when you have a half element presently.,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r476029910,476029910,src/validation.cpp
JeremyRubin,2020-08-25 01:21:01,yes. it's possible that we may want to resubmit it to the mempool if it was previously in our mempool. What changed to cause it to no longer be accepted?,https://github.com/bitcoin/bitcoin/pull/18044#discussion_r476033953,476033953,src/validation.cpp
amitiuttarwar,2020-09-04 22:28:25,"addressed in https://github.com/bitcoin/bitcoin/pull/19879/commits/fc66d0a65cdc52a3b259effe0c29b5eafb1b5ff5, #19879 ",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r483868162,483868162,src/net_processing.cpp
amitiuttarwar,2020-09-04 22:29:34,"reverted to set in https://github.com/bitcoin/bitcoin/pull/19879/commits/cb79b9dbf4cd06e17c8c65b36bf15c3ea2641de4, #19879 ",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r483868419,483868419,src/txmempool.h
amitiuttarwar,2020-09-04 22:29:59,"addressed in: https://github.com/bitcoin/bitcoin/pull/19879/commits/125c0381266e0e05a408f8e1818501ab73d29110, #19879 ",https://github.com/bitcoin/bitcoin/pull/18044#discussion_r483868519,483868519,src/net_processing.cpp
