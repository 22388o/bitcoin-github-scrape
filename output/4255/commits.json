[
  {
    "sha": "1b4568cb0f00dd7a24575fe54c017e743c4e7d35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjQ1NjhjYjBmMDBkZDdhMjQ1NzVmZTU0YzAxN2U3NDNjNGU3ZDM1",
    "commit": {
      "author": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-05-29T22:54:00Z"
      },
      "committer": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-07-15T13:50:33Z"
      },
      "message": "Add vout to ListTransactions output",
      "tree": {
        "sha": "e84e0945325614794a6a016869dd04c7f7c969ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e84e0945325614794a6a016869dd04c7f7c969ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b4568cb0f00dd7a24575fe54c017e743c4e7d35",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b4568cb0f00dd7a24575fe54c017e743c4e7d35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b4568cb0f00dd7a24575fe54c017e743c4e7d35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b4568cb0f00dd7a24575fe54c017e743c4e7d35/comments",
    "author": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c0f019bfc0b9381b6dcad5960df48379b8dfe20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c0f019bfc0b9381b6dcad5960df48379b8dfe20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c0f019bfc0b9381b6dcad5960df48379b8dfe20"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 56,
      "deletions": 43
    },
    "files": [
      {
        "sha": "631f72d1a10289079d63e97d5ccb580691c01332",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 26,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4568cb0f00dd7a24575fe54c017e743c4e7d35/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4568cb0f00dd7a24575fe54c017e743c4e7d35/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=1b4568cb0f00dd7a24575fe54c017e743c4e7d35",
        "patch": "@@ -641,16 +641,16 @@ Value getbalance(const Array& params, bool fHelp)\n \n             int64_t allFee;\n             string strSentAccount;\n-            list<pair<CTxDestination, int64_t> > listReceived;\n-            list<pair<CTxDestination, int64_t> > listSent;\n+            list<COutputEntry> listReceived;\n+            list<COutputEntry> listSent;\n             wtx.GetAmounts(listReceived, listSent, allFee, strSentAccount, filter);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n-                BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& r, listReceived)\n-                    nBalance += r.second;\n+                BOOST_FOREACH(const COutputEntry& r, listReceived)\n+                    nBalance += r.amount;\n             }\n-            BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& r, listSent)\n-                nBalance -= r.second;\n+            BOOST_FOREACH(const COutputEntry& s, listSent)\n+                nBalance -= s.amount;\n             nBalance -= allFee;\n         }\n         return  ValueFromAmount(nBalance);\n@@ -1133,8 +1133,8 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n {\n     int64_t nFee;\n     string strSentAccount;\n-    list<pair<CTxDestination, int64_t> > listReceived;\n-    list<pair<CTxDestination, int64_t> > listSent;\n+    list<COutputEntry> listReceived;\n+    list<COutputEntry> listSent;\n \n     wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount, filter);\n \n@@ -1144,15 +1144,16 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)\n+        BOOST_FOREACH(const COutputEntry& s, listSent)\n         {\n             Object entry;\n-            if(involvesWatchonly || (::IsMine(*pwalletMain, s.first) & ISMINE_WATCH_ONLY))\n+            if(involvesWatchonly || (::IsMine(*pwalletMain, s.destination) & ISMINE_WATCH_ONLY))\n                 entry.push_back(Pair(\"involvesWatchonly\", true));\n             entry.push_back(Pair(\"account\", strSentAccount));\n-            MaybePushAddress(entry, s.first);\n+            MaybePushAddress(entry, s.destination);\n             entry.push_back(Pair(\"category\", \"send\"));\n-            entry.push_back(Pair(\"amount\", ValueFromAmount(-s.second)));\n+            entry.push_back(Pair(\"amount\", ValueFromAmount(-s.amount)));\n+            entry.push_back(Pair(\"vout\", s.vout));\n             entry.push_back(Pair(\"fee\", ValueFromAmount(-nFee)));\n             if (fLong)\n                 WalletTxToJSON(wtx, entry);\n@@ -1163,18 +1164,18 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Received\n     if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& r, listReceived)\n+        BOOST_FOREACH(const COutputEntry& r, listReceived)\n         {\n             string account;\n-            if (pwalletMain->mapAddressBook.count(r.first))\n-                account = pwalletMain->mapAddressBook[r.first].name;\n+            if (pwalletMain->mapAddressBook.count(r.destination))\n+                account = pwalletMain->mapAddressBook[r.destination].name;\n             if (fAllAccounts || (account == strAccount))\n             {\n                 Object entry;\n-                if(involvesWatchonly || (::IsMine(*pwalletMain, r.first) & ISMINE_WATCH_ONLY))\n+                if(involvesWatchonly || (::IsMine(*pwalletMain, r.destination) & ISMINE_WATCH_ONLY))\n                     entry.push_back(Pair(\"involvesWatchonly\", true));\n                 entry.push_back(Pair(\"account\", account));\n-                MaybePushAddress(entry, r.first);\n+                MaybePushAddress(entry, r.destination);\n                 if (wtx.IsCoinBase())\n                 {\n                     if (wtx.GetDepthInMainChain() < 1)\n@@ -1188,7 +1189,8 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n                 {\n                     entry.push_back(Pair(\"category\", \"receive\"));\n                 }\n-                entry.push_back(Pair(\"amount\", ValueFromAmount(r.second)));\n+                entry.push_back(Pair(\"amount\", ValueFromAmount(r.amount)));\n+                entry.push_back(Pair(\"vout\", r.vout));\n                 if (fLong)\n                     WalletTxToJSON(wtx, entry);\n                 ret.push_back(entry);\n@@ -1240,6 +1242,7 @@ Value listtransactions(const Array& params, bool fHelp)\n             \"    \\\"amount\\\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the\\n\"\n             \"                                         'move' category for moves outbound. It is positive for the 'receive' category,\\n\"\n             \"                                         and for the 'move' category for inbound funds.\\n\"\n+            \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n             \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in btc. This is negative and only available for the \\n\"\n             \"                                         'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \\n\"\n@@ -1375,22 +1378,22 @@ Value listaccounts(const Array& params, bool fHelp)\n         const CWalletTx& wtx = (*it).second;\n         int64_t nFee;\n         string strSentAccount;\n-        list<pair<CTxDestination, int64_t> > listReceived;\n-        list<pair<CTxDestination, int64_t> > listSent;\n+        list<COutputEntry> listReceived;\n+        list<COutputEntry> listSent;\n         int nDepth = wtx.GetDepthInMainChain();\n         if (wtx.GetBlocksToMaturity() > 0 || nDepth < 0)\n             continue;\n         wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount, includeWatchonly);\n         mapAccountBalances[strSentAccount] -= nFee;\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)\n-            mapAccountBalances[strSentAccount] -= s.second;\n+        BOOST_FOREACH(const COutputEntry& s, listSent)\n+            mapAccountBalances[strSentAccount] -= s.amount;\n         if (nDepth >= nMinDepth)\n         {\n-            BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& r, listReceived)\n-                if (pwalletMain->mapAddressBook.count(r.first))\n-                    mapAccountBalances[pwalletMain->mapAddressBook[r.first].name] += r.second;\n+            BOOST_FOREACH(const COutputEntry& r, listReceived)\n+                if (pwalletMain->mapAddressBook.count(r.destination))\n+                    mapAccountBalances[pwalletMain->mapAddressBook[r.destination].name] += r.amount;\n                 else\n-                    mapAccountBalances[\"\"] += r.second;\n+                    mapAccountBalances[\"\"] += r.amount;\n         }\n     }\n \n@@ -1424,6 +1427,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n             \"    \\\"category\\\":\\\"send|receive\\\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\\n\"\n             \"    \\\"amount\\\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n             \"                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.\\n\"\n+            \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n             \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in btc. This is negative and only available for the 'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"blockhash\\\": \\\"hashvalue\\\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n@@ -1528,6 +1532,7 @@ Value gettransaction(const Array& params, bool fHelp)\n             \"      \\\"address\\\" : \\\"bitcoinaddress\\\",   (string) The bitcoin address involved in the transaction\\n\"\n             \"      \\\"category\\\" : \\\"send|receive\\\",    (string) The category, either 'send' or 'receive'\\n\"\n             \"      \\\"amount\\\" : x.xxx                  (numeric) The amount in btc\\n\"\n+            \"      \\\"vout\\\" : n,                       (numeric) the vout value\\n\"\n             \"    }\\n\"\n             \"    ,...\\n\"\n             \"  ],\\n\""
      },
      {
        "sha": "89a260480e2bacfc5cb76fb268943e360dd14aaf",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4568cb0f00dd7a24575fe54c017e743c4e7d35/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4568cb0f00dd7a24575fe54c017e743c4e7d35/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=1b4568cb0f00dd7a24575fe54c017e743c4e7d35",
        "patch": "@@ -798,8 +798,8 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n-void CWalletTx::GetAmounts(list<pair<CTxDestination, int64_t> >& listReceived,\n-                           list<pair<CTxDestination, int64_t> >& listSent, int64_t& nFee, string& strSentAccount, const isminefilter& filter) const\n+void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,\n+                           list<COutputEntry>& listSent, int64_t& nFee, string& strSentAccount, const isminefilter& filter) const\n {\n     nFee = 0;\n     listReceived.clear();\n@@ -815,10 +815,10 @@ void CWalletTx::GetAmounts(list<pair<CTxDestination, int64_t> >& listReceived,\n     }\n \n     // Sent/received.\n-    BOOST_FOREACH(const CTxOut& txout, vout)\n+    for (int i = 0; i < vout.size(); ++i)\n     {\n+        const CTxOut& txout = vout[i];\n         isminetype fIsMine = pwallet->IsMine(txout);\n-\n         // Only need to handle txouts if AT LEAST one of these is true:\n         //   1) they debit from us (sent)\n         //   2) the output is to us (received)\n@@ -840,13 +840,15 @@ void CWalletTx::GetAmounts(list<pair<CTxDestination, int64_t> >& listReceived,\n             address = CNoDestination();\n         }\n \n+        COutputEntry output = {address, txout.nValue, i};\n+\n         // If we are debited by the transaction, add the output as a \"sent\" entry\n         if (nDebit > 0)\n-            listSent.push_back(make_pair(address, txout.nValue));\n+            listSent.push_back(output);\n \n         // If we are receiving the output, add it as a \"received\" entry\n         if (fIsMine & filter)\n-            listReceived.push_back(make_pair(address, txout.nValue));\n+            listReceived.push_back(output);\n     }\n \n }\n@@ -858,29 +860,29 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, int64_t& nReceived,\n \n     int64_t allFee;\n     string strSentAccount;\n-    list<pair<CTxDestination, int64_t> > listReceived;\n-    list<pair<CTxDestination, int64_t> > listSent;\n+    list<COutputEntry> listReceived;\n+    list<COutputEntry> listSent;\n     GetAmounts(listReceived, listSent, allFee, strSentAccount, filter);\n \n     if (strAccount == strSentAccount)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& s, listSent)\n-            nSent += s.second;\n+        BOOST_FOREACH(const COutputEntry& s, listSent)\n+            nSent += s.amount;\n         nFee = allFee;\n     }\n     {\n         LOCK(pwallet->cs_wallet);\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& r, listReceived)\n+        BOOST_FOREACH(const COutputEntry& r, listReceived)\n         {\n-            if (pwallet->mapAddressBook.count(r.first))\n+            if (pwallet->mapAddressBook.count(r.destination))\n             {\n-                map<CTxDestination, CAddressBookData>::const_iterator mi = pwallet->mapAddressBook.find(r.first);\n+                map<CTxDestination, CAddressBookData>::const_iterator mi = pwallet->mapAddressBook.find(r.destination);\n                 if (mi != pwallet->mapAddressBook.end() && (*mi).second.name == strAccount)\n-                    nReceived += r.second;\n+                    nReceived += r.amount;\n             }\n             else if (strAccount.empty())\n             {\n-                nReceived += r.second;\n+                nReceived += r.amount;\n             }\n         }\n     }"
      },
      {
        "sha": "eaf9e9630923d17e028c1e5e69d91c5be52462da",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4568cb0f00dd7a24575fe54c017e743c4e7d35/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4568cb0f00dd7a24575fe54c017e743c4e7d35/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=1b4568cb0f00dd7a24575fe54c017e743c4e7d35",
        "patch": "@@ -467,6 +467,12 @@ static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n     mapValue[\"n\"] = i64tostr(nOrderPos);\n }\n \n+struct COutputEntry\n+{\n+    CTxDestination destination;\n+    int64_t amount;\n+    int vout;\n+};\n \n /** A transaction with a bunch of additional info that only the owner cares about.\n  * It includes any unrecorded transactions needed to link it back to the block chain.\n@@ -761,8 +767,8 @@ class CWalletTx : public CMerkleTx\n         return nChangeCached;\n     }\n \n-    void GetAmounts(std::list<std::pair<CTxDestination, int64_t> >& listReceived,\n-                    std::list<std::pair<CTxDestination, int64_t> >& listSent, int64_t& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n+    void GetAmounts(std::list<COutputEntry>& listReceived,\n+                    std::list<COutputEntry>& listSent, int64_t& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n \n     void GetAccountAmounts(const std::string& strAccount, int64_t& nReceived,\n                            int64_t& nSent, int64_t& nFee, const isminefilter& filter) const;"
      }
    ]
  }
]