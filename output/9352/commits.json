[
  {
    "sha": "7017298eb2c72e262b865cd417d6844bcdd14a3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDE3Mjk4ZWIyYzcyZTI2MmI4NjVjZDQxN2Q2ODQ0YmNkZDE0YTNm",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-12-14T19:42:04Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-12-15T16:47:04Z"
      },
      "message": "Allow compactblock reconstruction when block is in flight",
      "tree": {
        "sha": "4862f7a4b1e3600f58c1d27eff7515a2998040d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4862f7a4b1e3600f58c1d27eff7515a2998040d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7017298eb2c72e262b865cd417d6844bcdd14a3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7017298eb2c72e262b865cd417d6844bcdd14a3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7017298eb2c72e262b865cd417d6844bcdd14a3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7017298eb2c72e262b865cd417d6844bcdd14a3f/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b68685a16a81729f4d10975171c23c407cd332e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b68685a16a81729f4d10975171c23c407cd332e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b68685a16a81729f4d10975171c23c407cd332e3"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 45,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8a18c886e9a6b9c7a079658ece484717d02eeb48",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7017298eb2c72e262b865cd417d6844bcdd14a3f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7017298eb2c72e262b865cd417d6844bcdd14a3f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7017298eb2c72e262b865cd417d6844bcdd14a3f",
        "patch": "@@ -1782,6 +1782,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n         }\n \n+        // Keep a CBlock for \"optimistic\" compactblock reconstructions (see\n+        // below)\n+        std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n+        bool fBlockReconstructed = false;\n+\n         LOCK(cs_main);\n         // If AcceptBlockHeader returned true, it set pindex\n         assert(pindex);\n@@ -1870,6 +1875,23 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     req.blockhash = pindex->GetBlockHash();\n                     connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETBLOCKTXN, req));\n                 }\n+            } else {\n+                // This block is either already in flight from a different\n+                // peer, or this peer has too many blocks outstanding to\n+                // download from.\n+                // Optimistically try to reconstruct anyway since we might be\n+                // able to without any round trips.\n+                PartiallyDownloadedBlock tempBlock(&mempool);\n+                ReadStatus status = tempBlock.InitData(cmpctblock);\n+                if (status != READ_STATUS_OK) {\n+                    // TODO: don't ignore failures\n+                    return true;\n+                }\n+                std::vector<CTransactionRef> dummy;\n+                status = tempBlock.FillBlock(*pblock, dummy);\n+                if (status == READ_STATUS_OK) {\n+                    fBlockReconstructed = true;\n+                }\n             }\n         } else {\n             if (fAlreadyInFlight) {\n@@ -1889,6 +1911,29 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 return ProcessMessage(pfrom, NetMsgType::HEADERS, vHeadersMsg, nTimeReceived, chainparams, connman);\n             }\n         }\n+\n+        if (fBlockReconstructed) {\n+            // If we got here, we were able to optimistically reconstruct a\n+            // block that is in flight from some other peer.\n+            {\n+                LOCK(cs_main);\n+                mapBlockSource.emplace(pblock->GetHash(), std::make_pair(pfrom->GetId(), false));\n+            }\n+            bool fNewBlock = false;\n+            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            if (fNewBlock)\n+                pfrom->nLastBlockTime = GetTime();\n+\n+            LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n+            if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n+                // Clear download state for this block, which is in\n+                // process from some other peer.  We do this after calling\n+                // ProcessNewBlock so that a malleated cmpctblock announcement\n+                // can't be used to interfere with block relay.\n+                MarkBlockAsReceived(pblock->GetHash());\n+            }\n+        }\n+\n     }\n \n     else if (strCommand == NetMsgType::BLOCKTXN && !fImporting && !fReindex) // Ignore blocks received while importing"
      }
    ]
  },
  {
    "sha": "813ede91e12dd777faee60f6286a9ed5bb72761a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTNlZGU5MWUxMmRkNzc3ZmFlZTYwZjYyODZhOWVkNWJiNzI3NjFh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-12-01T17:59:10Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-12-15T16:47:04Z"
      },
      "message": "[qa] Update compactblocks test for multi-peer reconstruction",
      "tree": {
        "sha": "bc61767b858367ae82ec938cc6c43ce5b9e3bb01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc61767b858367ae82ec938cc6c43ce5b9e3bb01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/813ede91e12dd777faee60f6286a9ed5bb72761a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/813ede91e12dd777faee60f6286a9ed5bb72761a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/813ede91e12dd777faee60f6286a9ed5bb72761a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/813ede91e12dd777faee60f6286a9ed5bb72761a/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7017298eb2c72e262b865cd417d6844bcdd14a3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7017298eb2c72e262b865cd417d6844bcdd14a3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7017298eb2c72e262b865cd417d6844bcdd14a3f"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 52,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fc1f16c6d2a05f9f10b77315b6c66c38227a8299",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/813ede91e12dd777faee60f6286a9ed5bb72761a/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/813ede91e12dd777faee60f6286a9ed5bb72761a/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=813ede91e12dd777faee60f6286a9ed5bb72761a",
        "patch": "@@ -764,6 +764,54 @@ def request_cb_announcements(self, peer, node, version):\n         msg.announce = True\n         peer.send_and_ping(msg)\n \n+    def test_compactblock_reconstruction_multiple_peers(self, node, stalling_peer, delivery_peer):\n+        assert(len(self.utxos))\n+\n+        def announce_cmpct_block(node, peer):\n+            utxo = self.utxos.pop(0)\n+            block = self.build_block_with_transactions(node, utxo, 5)\n+\n+            cmpct_block = HeaderAndShortIDs()\n+            cmpct_block.initialize_from_block(block)\n+            msg = msg_cmpctblock(cmpct_block.to_p2p())\n+            peer.send_and_ping(msg)\n+            with mininode_lock:\n+                assert(peer.last_getblocktxn is not None)\n+            return block, cmpct_block\n+\n+        block, cmpct_block = announce_cmpct_block(node, stalling_peer)\n+\n+        for tx in block.vtx[1:]:\n+            delivery_peer.send_message(msg_tx(tx))\n+        delivery_peer.sync_with_ping()\n+        mempool = node.getrawmempool()\n+        for tx in block.vtx[1:]:\n+            assert(tx.hash in mempool)\n+\n+        delivery_peer.send_and_ping(msg_cmpctblock(cmpct_block.to_p2p()))\n+        assert_equal(int(node.getbestblockhash(), 16), block.sha256)\n+\n+        self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n+\n+        # Now test that delivering an invalid compact block won't break relay\n+\n+        block, cmpct_block = announce_cmpct_block(node, stalling_peer)\n+        for tx in block.vtx[1:]:\n+            delivery_peer.send_message(msg_tx(tx))\n+        delivery_peer.sync_with_ping()\n+\n+        cmpct_block.prefilled_txn[0].tx.wit.vtxinwit = [ CTxInWitness() ]\n+        cmpct_block.prefilled_txn[0].tx.wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(0)]\n+\n+        cmpct_block.use_witness = True\n+        delivery_peer.send_and_ping(msg_cmpctblock(cmpct_block.to_p2p()))\n+        assert(int(node.getbestblockhash(), 16) != block.sha256)\n+\n+        msg = msg_blocktxn()\n+        msg.block_transactions.blockhash = block.sha256\n+        msg.block_transactions.transactions = block.vtx[1:]\n+        stalling_peer.send_and_ping(msg)\n+        assert_equal(int(node.getbestblockhash(), 16), block.sha256)\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n@@ -848,6 +896,10 @@ def run_test(self):\n         self.test_invalid_tx_in_compactblock(self.nodes[1], self.segwit_node, False)\n         self.test_invalid_tx_in_compactblock(self.nodes[1], self.old_node, False)\n \n+        print(\"\\tTesting reconstructing compact blocks from all peers...\")\n+        self.test_compactblock_reconstruction_multiple_peers(self.nodes[1], self.segwit_node, self.old_node)\n+        sync_blocks(self.nodes)\n+\n         # Advance to segwit activation\n         print (\"\\nAdvancing to segwit activation\\n\")\n         self.activate_segwit(self.nodes[1])"
      }
    ]
  }
]