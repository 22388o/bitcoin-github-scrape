[
  {
    "sha": "143a8debb2df3a8e2f21e4c0135bef5ad2fc0750",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDNhOGRlYmIyZGYzYThlMmYyMWU0YzAxMzViZWY1YWQyZmMwNzUw",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "accounts@carldong.me",
        "date": "2019-03-21T16:56:20Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "accounts@carldong.me",
        "date": "2019-03-25T16:15:21Z"
      },
      "message": "tor: pass in Tor control port rather than using globals\n\n- Return int64_t from GetListenPort to avoid wrapping\n- Validate and emit appropriate error for GetListenPort in init as it is user\n  input\n- Rather than adding to the existing unused parameters (threadGroup, scheduler),\n  remove them and their header dependencies.",
      "tree": {
        "sha": "fefd7b761299953d9684af37634c0580ffc4095d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fefd7b761299953d9684af37634c0580ffc4095d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e45b7f20e651898c5b476c2364fd9d1fd583f3af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e45b7f20e651898c5b476c2364fd9d1fd583f3af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e45b7f20e651898c5b476c2364fd9d1fd583f3af"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 30,
      "deletions": 15
    },
    "files": [
      {
        "sha": "adf36ee9c33d53846309f2682cff8a9428e475d9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=143a8debb2df3a8e2f21e4c0135bef5ad2fc0750",
        "patch": "@@ -1413,6 +1413,12 @@ bool AppInitMain(InitInterfaces& interfaces)\n     fDiscover = gArgs.GetBoolArg(\"-discover\", true);\n     fRelayTxes = !gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n \n+    int64_t listen_port = GetListenPort();\n+    // Error nicely on user input error\n+    if (!CheckListenPort(listen_port)) {\n+        return InitError(strprintf(_(\"Invalid port specified in -port: '%i'\"), listen_port));\n+    }\n+\n     for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n         CService addrLocal;\n         if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n@@ -1732,7 +1738,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);\n \n     if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n-        StartTorControl();\n+        StartTorControl(gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL), listen_port);\n \n     Discover();\n "
      },
      {
        "sha": "ad8e34682ce0a3a02df4b12ea31e686a34c2ff02",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=143a8debb2df3a8e2f21e4c0135bef5ad2fc0750",
        "patch": "@@ -91,9 +91,13 @@ void CConnman::AddOneShot(const std::string& strDest)\n     vOneShots.push_back(strDest);\n }\n \n-unsigned short GetListenPort()\n+int64_t GetListenPort()\n {\n-    return (unsigned short)(gArgs.GetArg(\"-port\", Params().GetDefaultPort()));\n+    int default_port = Params().GetDefaultPort();\n+    // A hard-coded, invalid default port is most likely a bug\n+    assert(CheckListenPort(default_port));\n+    // An int that fits in uint16_t always fits in int64_t\n+    return gArgs.GetArg(\"-port\", default_port);\n }\n \n // find 'best' local address for a particular peer"
      },
      {
        "sha": "46ee3a7c22b547e1d9d55ab1aef9b280137f7896",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=143a8debb2df3a8e2f21e4c0135bef5ad2fc0750",
        "patch": "@@ -24,6 +24,7 @@\n #include <threadinterrupt.h>\n \n #include <atomic>\n+#include <cstdint>\n #include <deque>\n #include <stdint.h>\n #include <thread>\n@@ -447,7 +448,9 @@ void Discover();\n void StartMapPort();\n void InterruptMapPort();\n void StopMapPort();\n-unsigned short GetListenPort();\n+// We don't support the reserved port 0 for system-allocated dynamic ports yet.\n+constexpr bool CheckListenPort(intmax_t port) { return 0 < port && port <= UINT16_MAX; }\n+int64_t GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n \n struct CombinerAll"
      },
      {
        "sha": "dc7022176e0d5d95e138e9f5412f53e6fa8d7933",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=143a8debb2df3a8e2f21e4c0135bef5ad2fc0750",
        "patch": "@@ -409,7 +409,7 @@ static bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n class TorController\n {\n public:\n-    TorController(struct event_base* base, const std::string& target);\n+    TorController(struct event_base* base, const std::string& target, uint16_t listen_port);\n     ~TorController();\n \n     /** Get name fo file to store private key in */\n@@ -427,6 +427,7 @@ class TorController\n     struct event *reconnect_ev;\n     float reconnect_timeout;\n     CService service;\n+    uint16_t m_listen_port;\n     /** Cookie for SAFECOOKIE auth */\n     std::vector<uint8_t> cookie;\n     /** ClientNonce for SAFECOOKIE auth */\n@@ -449,10 +450,10 @@ class TorController\n     static void reconnect_cb(evutil_socket_t fd, short what, void *arg);\n };\n \n-TorController::TorController(struct event_base* _base, const std::string& _target):\n+TorController::TorController(struct event_base* _base, const std::string& _target, uint16_t listen_port):\n     base(_base),\n     target(_target), conn(base), reconnect(true), reconnect_ev(0),\n-    reconnect_timeout(RECONNECT_TIMEOUT_START)\n+    reconnect_timeout(RECONNECT_TIMEOUT_START), m_listen_port(listen_port)\n {\n     reconnect_ev = event_new(base, -1, 0, reconnect_cb, this);\n     if (!reconnect_ev)\n@@ -500,7 +501,7 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n             }\n             return;\n         }\n-        service = LookupNumeric(std::string(service_id+\".onion\").c_str(), GetListenPort());\n+        service = LookupNumeric(std::string(service_id+\".onion\").c_str(), m_listen_port);\n         LogPrintf(\"tor: Got service ID %s, advertising service %s\\n\", service_id, service.ToString());\n         if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n             LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().string());\n@@ -536,7 +537,7 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n         // Request hidden service, redirect port.\n         // Note that the 'virtual' port doesn't have to be the same as our internal port, but this is just a convenient\n         // choice.  TODO; refactor the shutdown sequence some day.\n-        _conn.Command(strprintf(\"ADD_ONION %s Port=%i,127.0.0.1:%i\", private_key, GetListenPort(), GetListenPort()),\n+        _conn.Command(strprintf(\"ADD_ONION %s Port=%i,127.0.0.1:%i\", private_key, m_listen_port, m_listen_port),\n             std::bind(&TorController::add_onion_cb, this, std::placeholders::_1, std::placeholders::_2));\n     } else {\n         LogPrintf(\"tor: Authentication failed\\n\");\n@@ -731,14 +732,14 @@ void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)\n static struct event_base *gBase;\n static std::thread torControlThread;\n \n-static void TorControlThread()\n+static void TorControlThread(const std::string& target, uint16_t listen_port)\n {\n-    TorController ctrl(gBase, gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL));\n+    TorController ctrl(gBase, target, listen_port);\n \n     event_base_dispatch(gBase);\n }\n \n-void StartTorControl()\n+void StartTorControl(const std::string& target, uint16_t listen_port)\n {\n     assert(!gBase);\n #ifdef WIN32\n@@ -752,7 +753,7 @@ void StartTorControl()\n         return;\n     }\n \n-    torControlThread = std::thread(std::bind(&TraceThread<void (*)()>, \"torcontrol\", &TorControlThread));\n+    torControlThread = std::thread(&TraceThread<std::function<void()> >, \"torcontrol\", [target, listen_port] { TorControlThread(target, listen_port); });\n }\n \n void InterruptTorControl()"
      },
      {
        "sha": "03a340545d8d56b7d71f5a5595e292e11fcb992e",
        "filename": "src/torcontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750/src/torcontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750/src/torcontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.h?ref=143a8debb2df3a8e2f21e4c0135bef5ad2fc0750",
        "patch": "@@ -8,12 +8,13 @@\n #ifndef BITCOIN_TORCONTROL_H\n #define BITCOIN_TORCONTROL_H\n \n-#include <scheduler.h>\n+#include <stdint.h>\n+#include <string>\n \n extern const std::string DEFAULT_TOR_CONTROL;\n static const bool DEFAULT_LISTEN_ONION = true;\n \n-void StartTorControl();\n+void StartTorControl(const std::string& target, uint16_t listen_port);\n void InterruptTorControl();\n void StopTorControl();\n "
      }
    ]
  },
  {
    "sha": "e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDJlM2RkZTBkMDZlNjdkOWZjODU0MzVmNGM1NWNiNGUwYjdmNzY0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "accounts@carldong.me",
        "date": "2019-01-14T22:04:33Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "accounts@carldong.me",
        "date": "2019-03-25T16:15:21Z"
      },
      "message": "net: pass listen port into CConnman\n\nInstead of using GetListenPort(), we can now use the member passed in to\nCConnman.",
      "tree": {
        "sha": "13a5a02ae084b53c5e1d06d5d9299bdd66f291e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13a5a02ae084b53c5e1d06d5d9299bdd66f291e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "143a8debb2df3a8e2f21e4c0135bef5ad2fc0750",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/143a8debb2df3a8e2f21e4c0135bef5ad2fc0750"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 25,
      "deletions": 14
    },
    "files": [
      {
        "sha": "1933b1a0166c225e1046a5ffcbf3830ea0295a57",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764",
        "patch": "@@ -1421,7 +1421,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n \n     for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n         CService addrLocal;\n-        if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n+        if (Lookup(strAddr.c_str(), addrLocal, listen_port, fNameLookup) && addrLocal.IsValid())\n             AddLocal(addrLocal, LOCAL_MANUAL);\n         else\n             return InitError(ResolveErrMsg(\"externalip\", strAddr));\n@@ -1764,10 +1764,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n     connOptions.nMaxOutboundTimeframe = nMaxOutboundTimeframe;\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n     connOptions.m_peer_connect_timeout = peer_connect_timeout;\n+    connOptions.m_listen_port = listen_port;\n \n     for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n         CService addrBind;\n-        if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false)) {\n+        if (!Lookup(strBind.c_str(), addrBind, listen_port, false)) {\n             return InitError(ResolveErrMsg(\"bind\", strBind));\n         }\n         connOptions.vBinds.push_back(addrBind);"
      },
      {
        "sha": "0645d495229bae71aaa0fbe0092ddc77acfc67c4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764",
        "patch": "@@ -150,9 +150,9 @@ static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn\n // Otherwise, return the unroutable 0.0.0.0 but filled in with\n // the normal parameters, since the IP may be changed to a useful\n // one by discovery.\n-CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices)\n+CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices, uint16_t listen_port)\n {\n-    CAddress ret(CService(CNetAddr(),GetListenPort()), nLocalServices);\n+    CAddress ret(CService(CNetAddr(), listen_port), nLocalServices);\n     CService addr;\n     if (GetLocal(addr, paddrPeer))\n     {\n@@ -178,14 +178,14 @@ bool IsPeerAddrLocalGood(CNode *pnode)\n }\n \n // pushes our own address to a peer\n-void AdvertiseLocal(CNode *pnode)\n+void AdvertiseLocal(CNode *pnode, uint16_t listen_port)\n {\n     if (fListen && pnode->fSuccessfullyConnected)\n     {\n-        CAddress addrLocal = GetLocalAddress(&pnode->addr, pnode->GetLocalServices());\n+        CAddress addrLocal = GetLocalAddress(&pnode->addr, pnode->GetLocalServices(), listen_port);\n         if (gArgs.GetBoolArg(\"-addrmantest\", false)) {\n             // use IPv4 loopback during addrmantest\n-            addrLocal = CAddress(CService(LookupNumeric(\"127.0.0.1\", GetListenPort())), pnode->GetLocalServices());\n+            addrLocal = CAddress(CService(LookupNumeric(\"127.0.0.1\", listen_port)), pnode->GetLocalServices());\n         }\n         // If discovery is enabled, sometimes give our peer the address it\n         // tells us that it sees us as in case it has a better idea of our\n@@ -2172,8 +2172,8 @@ bool CConnman::InitBinds(const std::vector<CService>& binds, const std::vector<C\n         struct in_addr inaddr_any;\n         inaddr_any.s_addr = INADDR_ANY;\n         struct in6_addr inaddr6_any = IN6ADDR_ANY_INIT;\n-        fBound |= Bind(CService(inaddr6_any, GetListenPort()), BF_NONE);\n-        fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE);\n+        fBound |= Bind(CService(inaddr6_any, m_listen_port), BF_NONE);\n+        fBound |= Bind(CService(inaddr_any, m_listen_port), !fBound ? BF_REPORT_ERROR : BF_NONE);\n     }\n     return fBound;\n }\n@@ -2604,6 +2604,11 @@ ServiceFlags CConnman::GetLocalServices() const\n     return nLocalServices;\n }\n \n+uint16_t CConnman::GetListenPort() const\n+{\n+    return m_listen_port;\n+}\n+\n void CConnman::SetBestHeight(int height)\n {\n     nBestHeight.store(height, std::memory_order_release);"
      },
      {
        "sha": "97b2e8201c760be5b206c1a54058ff6f105427d0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764",
        "patch": "@@ -144,6 +144,7 @@ class CConnman\n         bool m_use_addrman_outgoing = true;\n         std::vector<std::string> m_specified_outgoing;\n         std::vector<std::string> m_added_nodes;\n+        uint16_t m_listen_port = 0;\n     };\n \n     void Init(const Options& connOptions) {\n@@ -170,6 +171,7 @@ class CConnman\n             LOCK(cs_vAddedNodes);\n             vAddedNodes = connOptions.m_added_nodes;\n         }\n+        m_listen_port = connOptions.m_listen_port;\n     }\n \n     CConnman(uint64_t seed0, uint64_t seed1);\n@@ -272,6 +274,7 @@ class CConnman\n     bool DisconnectNode(NodeId id);\n \n     ServiceFlags GetLocalServices() const;\n+    uint16_t GetListenPort() const;\n \n     //!set the max outbound target in bytes\n     void SetMaxOutboundTarget(uint64_t limit);\n@@ -386,6 +389,8 @@ class CConnman\n     unsigned int nSendBufferMaxSize{0};\n     unsigned int nReceiveFloodSize{0};\n \n+    uint16_t m_listen_port;\n+\n     std::vector<ListenSocket> vhListenSocket;\n     std::atomic<bool> fNetworkActive{true};\n     bool fAddressesInitialized{false};\n@@ -499,7 +504,7 @@ enum\n };\n \n bool IsPeerAddrLocalGood(CNode *pnode);\n-void AdvertiseLocal(CNode *pnode);\n+void AdvertiseLocal(CNode *pnode, uint16_t listen_port);\n \n /**\n  * Mark a network as reachable or unreachable (no automatic connects to it)\n@@ -517,7 +522,7 @@ void RemoveLocal(const CService& addr);\n bool SeenLocal(const CService& addr);\n bool IsLocal(const CService& addr);\n bool GetLocal(CService &addr, const CNetAddr *paddrPeer = nullptr);\n-CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices);\n+CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices, uint16_t listen_port);\n \n \n extern bool fDiscover;"
      },
      {
        "sha": "d77e95bf294743e8e70a700ac29b5ea1dde59627",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764",
        "patch": "@@ -1887,7 +1887,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // Advertise our address\n             if (fListen && !IsInitialBlockDownload())\n             {\n-                CAddress addr = GetLocalAddress(&pfrom->addr, pfrom->GetLocalServices());\n+                CAddress addr = GetLocalAddress(&pfrom->addr, pfrom->GetLocalServices(), connman->GetListenPort());\n                 FastRandomContext insecure_rand;\n                 if (addr.IsRoutable())\n                 {\n@@ -3449,7 +3449,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         // Address refresh broadcast\n         int64_t nNow = GetTimeMicros();\n         if (!IsInitialBlockDownload() && pto->nNextLocalAddrSend < nNow) {\n-            AdvertiseLocal(pto);\n+            AdvertiseLocal(pto, connman->GetListenPort());\n             pto->nNextLocalAddrSend = PoissonNextSend(nNow, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n         }\n "
      },
      {
        "sha": "04bb56ec76255c7b2898b234e7c91f69617b5b48",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764",
        "patch": "@@ -221,7 +221,7 @@ BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)\n     pnode->SetAddrLocal(addrLocal);\n \n     // before patch, this causes undefined behavior detectable with clang's -fsanitize=memory\n-    AdvertiseLocal(&*pnode);\n+    AdvertiseLocal(&*pnode, 7777);\n \n     // suppress no-checks-run warning; if this test fails, it's by triggering a sanitizer\n     BOOST_CHECK(1);"
      }
    ]
  },
  {
    "sha": "8a774bb474f872ed554d9438d8681e997c64976e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTc3NGJiNDc0Zjg3MmVkNTU0ZDk0MzhkODY4MWU5OTdjNjQ5NzZl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "accounts@carldong.me",
        "date": "2019-01-14T22:46:02Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "accounts@carldong.me",
        "date": "2019-03-25T16:59:01Z"
      },
      "message": "net: pass port into MapPort/Discover rather than using globals\n\nThis also allows the port-less AddLocal overload to be removed.",
      "tree": {
        "sha": "e461eae597bb46fe4c8d1eb55ad7212df17ea62d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e461eae597bb46fe4c8d1eb55ad7212df17ea62d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a774bb474f872ed554d9438d8681e997c64976e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a774bb474f872ed554d9438d8681e997c64976e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a774bb474f872ed554d9438d8681e997c64976e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a774bb474f872ed554d9438d8681e997c64976e/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e42e3dde0d06e67d9fc85435f4c55cb4e0b7f764"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 21,
      "deletions": 21
    },
    "files": [
      {
        "sha": "e36eb407e749d15130dfaadd8779416d0169c5de",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a774bb474f872ed554d9438d8681e997c64976e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a774bb474f872ed554d9438d8681e997c64976e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8a774bb474f872ed554d9438d8681e997c64976e",
        "patch": "@@ -1740,11 +1740,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n     if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n         StartTorControl(gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL), listen_port);\n \n-    Discover();\n+    Discover(listen_port);\n \n     // Map ports with UPnP\n     if (gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP)) {\n-        StartMapPort();\n+        StartMapPort(listen_port);\n     }\n \n     CConnman::Options connOptions;"
      },
      {
        "sha": "923429f6910b78674bd0d13f6ea5f8de3da97114",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a774bb474f872ed554d9438d8681e997c64976e/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a774bb474f872ed554d9438d8681e997c64976e/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=8a774bb474f872ed554d9438d8681e997c64976e",
        "patch": "@@ -84,8 +84,14 @@ class NodeImpl : public Node\n     bool shutdownRequested() override { return ShutdownRequested(); }\n     void mapPort(bool use_upnp) override\n     {\n+        // TODO: pass in CConnman and Banman into NodeImpl's constructor\n+        if (!g_connman) return;\n+\n         if (use_upnp) {\n-            StartMapPort();\n+            // The port parameter should already be sanity-checked by init.\n+            int64_t listen_port = GetListenPort();\n+            assert(CheckListenPort(listen_port));\n+            StartMapPort(listen_port);\n         } else {\n             InterruptMapPort();\n             StopMapPort();"
      },
      {
        "sha": "912fb918662acc0385db978202b75dd6e74bdc7c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 15,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a774bb474f872ed554d9438d8681e997c64976e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a774bb474f872ed554d9438d8681e997c64976e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8a774bb474f872ed554d9438d8681e997c64976e",
        "patch": "@@ -231,11 +231,6 @@ bool AddLocal(const CService& addr, int nScore)\n     return true;\n }\n \n-bool AddLocal(const CNetAddr &addr, int nScore)\n-{\n-    return AddLocal(CService(addr, GetListenPort()), nScore);\n-}\n-\n void RemoveLocal(const CService& addr)\n {\n     LOCK(cs_mapLocalHost);\n@@ -1399,9 +1394,9 @@ void CConnman::WakeMessageHandler()\n #ifdef USE_UPNP\n static CThreadInterrupt g_upnp_interrupt;\n static std::thread g_upnp_thread;\n-static void ThreadMapPort()\n+static void ThreadMapPort(uint16_t map_port)\n {\n-    std::string port = strprintf(\"%u\", GetListenPort());\n+    std::string port = strprintf(\"%u\", map_port);\n     const char * multicastif = nullptr;\n     const char * minissdpdpath = nullptr;\n     struct UPNPDev * devlist = nullptr;\n@@ -1439,7 +1434,7 @@ static void ThreadMapPort()\n                     CNetAddr resolved;\n                     if(LookupHost(externalIPAddress, resolved, false)) {\n                         LogPrintf(\"UPnP: ExternalIPAddress = %s\\n\", resolved.ToString().c_str());\n-                        AddLocal(resolved, LOCAL_UPNP);\n+                        AddLocal(CService(resolved, map_port), LOCAL_UPNP);\n                     }\n                 }\n                 else\n@@ -1480,11 +1475,11 @@ static void ThreadMapPort()\n     }\n }\n \n-void StartMapPort()\n+void StartMapPort(uint16_t port)\n {\n     if (!g_upnp_thread.joinable()) {\n         assert(!g_upnp_interrupt);\n-        g_upnp_thread = std::thread((std::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort)));\n+        g_upnp_thread = std::thread(&TraceThread<std::function<void()> >, \"upnp\", [port] { ThreadMapPort(port); });\n     }\n }\n \n@@ -1504,7 +1499,7 @@ void StopMapPort()\n }\n \n #else\n-void StartMapPort()\n+void StartMapPort(uint16_t port)\n {\n     // Intentionally left blank.\n }\n@@ -2069,7 +2064,7 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n     return true;\n }\n \n-void Discover()\n+void Discover(uint16_t port)\n {\n     if (!fDiscover)\n         return;\n@@ -2084,7 +2079,7 @@ void Discover()\n         {\n             for (const CNetAddr &addr : vaddr)\n             {\n-                if (AddLocal(addr, LOCAL_IF))\n+                if (AddLocal(CService(addr, port), LOCAL_IF))\n                     LogPrintf(\"%s: %s - %s\\n\", __func__, pszHostName, addr.ToString());\n             }\n         }\n@@ -2104,14 +2099,14 @@ void Discover()\n             {\n                 struct sockaddr_in* s4 = (struct sockaddr_in*)(ifa->ifa_addr);\n                 CNetAddr addr(s4->sin_addr);\n-                if (AddLocal(addr, LOCAL_IF))\n+                if (AddLocal(CService(addr, port), LOCAL_IF))\n                     LogPrintf(\"%s: IPv4 %s: %s\\n\", __func__, ifa->ifa_name, addr.ToString());\n             }\n             else if (ifa->ifa_addr->sa_family == AF_INET6)\n             {\n                 struct sockaddr_in6* s6 = (struct sockaddr_in6*)(ifa->ifa_addr);\n                 CNetAddr addr(s6->sin6_addr);\n-                if (AddLocal(addr, LOCAL_IF))\n+                if (AddLocal(CService(addr, port), LOCAL_IF))\n                     LogPrintf(\"%s: IPv6 %s: %s\\n\", __func__, ifa->ifa_name, addr.ToString());\n             }\n         }"
      },
      {
        "sha": "08d98ec00c6d5c150e095988c04191e3b6405bc9",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a774bb474f872ed554d9438d8681e997c64976e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a774bb474f872ed554d9438d8681e997c64976e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8a774bb474f872ed554d9438d8681e997c64976e",
        "patch": "@@ -449,8 +449,8 @@ class CConnman\n };\n extern std::unique_ptr<CConnman> g_connman;\n extern std::unique_ptr<BanMan> g_banman;\n-void Discover();\n-void StartMapPort();\n+void Discover(uint16_t port);\n+void StartMapPort(uint16_t port);\n void InterruptMapPort();\n void StopMapPort();\n // We don't support the reserved port 0 for system-allocated dynamic ports yet.\n@@ -517,7 +517,6 @@ bool IsReachable(enum Network net);\n bool IsReachable(const CNetAddr& addr);\n \n bool AddLocal(const CService& addr, int nScore = LOCAL_NONE);\n-bool AddLocal(const CNetAddr& addr, int nScore = LOCAL_NONE);\n void RemoveLocal(const CService& addr);\n bool SeenLocal(const CService& addr);\n bool IsLocal(const CService& addr);"
      }
    ]
  },
  {
    "sha": "4302c8ba37172ee365ed5d3dd380e3d025c91b0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzAyYzhiYTM3MTcyZWUzNjVlZDVkM2RkMzgwZTNkMDI1YzkxYjBk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T23:59:47Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "accounts@carldong.me",
        "date": "2019-03-25T16:59:08Z"
      },
      "message": "net: pass in default outgoing port",
      "tree": {
        "sha": "81d6960301bbcd71c887ccc92ee5f8f0923dd59d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81d6960301bbcd71c887ccc92ee5f8f0923dd59d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4302c8ba37172ee365ed5d3dd380e3d025c91b0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4302c8ba37172ee365ed5d3dd380e3d025c91b0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4302c8ba37172ee365ed5d3dd380e3d025c91b0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4302c8ba37172ee365ed5d3dd380e3d025c91b0d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a774bb474f872ed554d9438d8681e997c64976e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a774bb474f872ed554d9438d8681e997c64976e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a774bb474f872ed554d9438d8681e997c64976e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ccfaec8a859b9504245b0a948effb2d4c5551a3e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4302c8ba37172ee365ed5d3dd380e3d025c91b0d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4302c8ba37172ee365ed5d3dd380e3d025c91b0d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4302c8ba37172ee365ed5d3dd380e3d025c91b0d",
        "patch": "@@ -1765,6 +1765,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n     connOptions.m_peer_connect_timeout = peer_connect_timeout;\n     connOptions.m_listen_port = listen_port;\n+    connOptions.m_default_connect_port = chainparams.GetDefaultPort();\n \n     for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n         CService addrBind;"
      },
      {
        "sha": "25bf79fe259d2b83a4a9939177760773aa2c28f0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4302c8ba37172ee365ed5d3dd380e3d025c91b0d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4302c8ba37172ee365ed5d3dd380e3d025c91b0d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4302c8ba37172ee365ed5d3dd380e3d025c91b0d",
        "patch": "@@ -368,10 +368,9 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         pszDest ? 0.0 : (double)(GetAdjustedTime() - addrConnect.nTime)/3600.0);\n \n     // Resolve\n-    const int default_port = Params().GetDefaultPort();\n     if (pszDest) {\n         std::vector<CService> resolved;\n-        if (Lookup(pszDest, resolved,  default_port, fNameLookup && !HaveNameProxy(), 256) && !resolved.empty()) {\n+        if (Lookup(pszDest, resolved, m_default_connect_port, fNameLookup && !HaveNameProxy(), 256) && !resolved.empty()) {\n             addrConnect = CAddress(resolved[GetRand(resolved.size())], NODE_NONE);\n             if (!addrConnect.IsValid()) {\n                 LogPrint(BCLog::NET, \"Resolver returned invalid address %s for %s\\n\", addrConnect.ToString(), pszDest);\n@@ -424,7 +423,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             return nullptr;\n         }\n         std::string host;\n-        int port = default_port;\n+        int port = m_default_connect_port;\n         SplitHostPort(std::string(pszDest), port, host);\n         connected = ConnectThroughProxy(proxy, host, port, hSocket, nConnectTimeout, nullptr);\n     }\n@@ -1566,7 +1565,7 @@ void CConnman::ThreadDNSAddressSeed()\n                 for (const CNetAddr& ip : vIPs)\n                 {\n                     int nOneDay = 24*3600;\n-                    CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()), requiredServiceBits);\n+                    CAddress addr = CAddress(CService(ip, m_default_connect_port), requiredServiceBits);\n                     addr.nTime = GetTime() - 3*nOneDay - GetRand(4*nOneDay); // use a random age between 3 and 7 days old\n                     vAdd.push_back(addr);\n                     found++;\n@@ -1798,7 +1797,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             }\n \n             // do not allow non-default ports, unless after 50 invalid addresses selected already\n-            if (addr.GetPort() != Params().GetDefaultPort() && nTries < 50)\n+            if (addr.GetPort() != m_default_connect_port && nTries < 50)\n                 continue;\n \n             addrConnect = addr;\n@@ -1849,7 +1848,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n     }\n \n     for (const std::string& strAddNode : lAddresses) {\n-        CService service(LookupNumeric(strAddNode.c_str(), Params().GetDefaultPort()));\n+        CService service(LookupNumeric(strAddNode.c_str(), m_default_connect_port));\n         AddedNodeInfo addedNode{strAddNode, CService(), false, false};\n         if (service.IsValid()) {\n             // strAddNode is an IP:port"
      },
      {
        "sha": "646cf22bf1357dbc25783d20846100305e5c74cf",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4302c8ba37172ee365ed5d3dd380e3d025c91b0d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4302c8ba37172ee365ed5d3dd380e3d025c91b0d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4302c8ba37172ee365ed5d3dd380e3d025c91b0d",
        "patch": "@@ -145,6 +145,7 @@ class CConnman\n         std::vector<std::string> m_specified_outgoing;\n         std::vector<std::string> m_added_nodes;\n         uint16_t m_listen_port = 0;\n+        uint16_t m_default_connect_port = 0;\n     };\n \n     void Init(const Options& connOptions) {\n@@ -172,6 +173,7 @@ class CConnman\n             vAddedNodes = connOptions.m_added_nodes;\n         }\n         m_listen_port = connOptions.m_listen_port;\n+        m_default_connect_port = connOptions.m_default_connect_port;\n     }\n \n     CConnman(uint64_t seed0, uint64_t seed1);\n@@ -390,6 +392,7 @@ class CConnman\n     unsigned int nReceiveFloodSize{0};\n \n     uint16_t m_listen_port;\n+    uint16_t m_default_connect_port;\n \n     std::vector<ListenSocket> vhListenSocket;\n     std::atomic<bool> fNetworkActive{true};"
      }
    ]
  }
]