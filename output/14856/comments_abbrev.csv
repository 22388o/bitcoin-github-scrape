DrahtBot,2018-12-03T17:04:43Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15976](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15976.html) (refactor: move methods under CChainState (p",https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-443786672,443786672,
Empact,2018-12-04T11:00:18Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-444060571,444060571,
theuni,2018-12-06T20:14:53Z,ACK after rebasing and fixing my bugs :p,https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-445014410,445014410,
dongcarl,2019-01-03T12:57:14Z,"Rebased, fixed bugs, and added port check!",https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-451135622,451135622,
dongcarl,2019-01-03T16:40:15Z,If anyone can help with the [error here](https://travis-ci.org/bitcoin/bitcoin/jobs/474841712#L2769) it would be much appreciated. I'm not sure what the proper way is to pass `listen_port` to the `qt` modules so that it can be specified here.,https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-451200652,451200652,
ryanofsky,2019-01-03T17:26:33Z,"> If anyone can help with the error here it would be much appreciated.\n\nFrom https://travis-ci.org/bitcoin/bitcoin/jobs/474841712#L2792\n\n```\nqt/optionsmodel.cpp: In member function ‘virtual bool OptionsModel::setData(const QModelIndex&, const QVariant&, int)’:\nqt/optionsmodel.cpp:334:42: error: no matching function for call to ‘interfaces::Node::mapPort(bool)’\n             m_node.map",https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-451215446,451215446,
dongcarl,2019-01-04T00:56:13Z,"> I'd probably bring back the deleted GetListenPort() function (and nice cnode_listen_port test) and call it two places: 1) In AppInitMain to set listen_port local variable. 2) In NodeImpl::mapPort method to get rid of uint16_t port argument.\n\nThat seems acceptable to me, @theuni any thoughts?",https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-451325980,451325980,
Empact,2019-01-09T08:28:33Z,"I think I found an answer that maintains the separation here: you can pull the default listen port through `m_node` via `g_connman`. https://github.com/Empact/bitcoin/commit/3859f2aaa\nhttps://travis-ci.org/Empact/bitcoin/builds/477278546\n\nI also looked at adding a field for the port to the form but ran into some issues there:\nhttps://github.com/Empact/bitcoin/commit/77cc6218b144b3de6d9bdcd",https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-452612061,452612061,
dongcarl,2019-01-14T14:45:30Z,"> I think I found an answer that maintains the separation here: you can pull the default listen port through `m_node` via `g_connman`. [Empact@3859f2a](https://github.com/Empact/bitcoin/commit/3859f2aaa)\n> [travis-ci.org/Empact/bitcoin/builds/477278546](https://travis-ci.org/Empact/bitcoin/builds/477278546)\n> \n> I also looked at adding a field for the port to the form but ran into some issue",https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-454028821,454028821,
dongcarl,2019-01-14T23:45:59Z,"Many thanks to @Empact for his [suggestion above](https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-452612061), I've reorganized the commits to make things work.\n\nAs @theuni mentioned here: https://github.com/bitcoin/bitcoin/pull/14605#discussion_r238849008, a followup PR should pass `CConnman` and `Banman` into `NodeImpl`'s constructor so that we can stop using globals.",https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-454207179,454207179,
dongcarl,2019-02-01T15:59:49Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-459771087,459771087,
dongcarl,2019-02-04T14:26:06Z,"Addressed concerns, @ryanofsky I went with doing nothing for when `g_connman` is null.",https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-460267692,460267692,
dongcarl,2019-02-05T17:56:55Z,Addressed comments and rebased. Thank you @ryanofsky!,https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-460738353,460738353,
dongcarl,2019-02-07T15:19:58Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-461465254,461465254,
ryanofsky,2019-03-11T16:35:24Z,Let's maybe add this to the high priority https://github.com/bitcoin/bitcoin/projects/8 list. It's a pretty simple change which has been around for a while and (as I understand it) is blocking work on better connman testing.,https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-471618073,471618073,
dongcarl,2019-03-14T19:05:49Z,"Brought back deleted `GetListenPort()` function, checks port before casting.\n\n",https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-473016240,473016240,
ryanofsky,2019-03-15T22:10:14Z,"> [15:29:49] \<cfields> dongcarl / ryanofsky: there's a lot of history in 14856 about GetDefaultPort() that I can't quite follow. Maybe you could briefly explain why it's still needed?\n> [15:30:48] \<cfields> Sorry, GetListenPort()\n\nReason for adding back `GetListenPort()` was to make GUI initialization less fragile. Querying connman for the port is less reliable than just reading the config",https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-473456980,473456980,
ryanofsky,2019-03-18T16:17:48Z,"re: http://www.erisian.com.au/bitcoin-core-dev/log-2019-03-15.html#l-403\n> [15:38:27] \<cfields> Sure. As-is, the change seems like a lateral move at best :(\n\nI don't think this is true. Previously GetListenPort was called 4 different places: twice in network code, twice in init code. Now it is only called twice in init code and passed into network code. I think this is what you'd want under",https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-473985470,473985470,
practicalswift,2019-03-18T17:02:50Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-474008890,474008890,
dongcarl,2019-03-20T19:31:33Z,Removed from high-priority for review as I need some time to think about how to structure this.,https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-474995098,474995098,
DrahtBot,2019-06-05T10:21:51Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-499026867,499026867,
dongcarl,2019-08-14T19:01:48Z,"Closed, need to rethink.",https://github.com/bitcoin/bitcoin/pull/14856#issuecomment-521375941,521375941,
MarcoFalke,2018-12-03T18:51:40Z,Why is this needed?,https://github.com/bitcoin/bitcoin/pull/14856#discussion_r238392304,238392304,src/torcontrol.cpp
dongcarl,2018-12-04T02:11:08Z,Fixed. Thanks for spotting it!,https://github.com/bitcoin/bitcoin/pull/14856#discussion_r238508382,238508382,src/torcontrol.cpp
Empact,2018-12-04T10:59:31Z,"nit: how about check against <1 values here? `src/qt/optionsdialog.cpp` does so:\nhttps://github.com/bitcoin/bitcoin/blob/42653570373dad1fb431de2889764297d59ebcc0/src/qt/optionsdialog.cpp#L59",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r238615455,238615455,src/init.cpp
theuni,2018-12-06T19:58:17Z,+1. Good catch.,https://github.com/bitcoin/bitcoin/pull/14856#discussion_r239593516,239593516,src/init.cpp
theuni,2018-12-06T20:02:16Z,Format string should be %i.,https://github.com/bitcoin/bitcoin/pull/14856#discussion_r239594844,239594844,src/init.cpp
dongcarl,2019-01-03T12:57:44Z,@Empact Any reason why port 0 isn't valid?,https://github.com/bitcoin/bitcoin/pull/14856#discussion_r244991445,244991445,src/init.cpp
Empact,2019-01-09T06:43:55Z,"Not that I know of, for `proxyPort` it was disallowed in #1571.\n\n""It is defined as an invalid port number."" according to https://www.grc.com/port_0.htm\n\n> Port 0 carries special significance in network programming, particularly in the Unix OS when it comes to socket programming where the port is used for requesting system-allocated, dynamic ports. Port 0 is like a wildcard port that tells ",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r246273201,246273201,src/init.cpp
MarcoFalke,2019-02-01T16:19:22Z,"style-nit: in commit 4d0cac7be150145ec45119188458a9625f882b29\n\nAny reason to not use a lambda? It might make this easier to read.",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r253109218,253109218,src/net.cpp
MarcoFalke,2019-02-01T16:20:10Z,"style-nit: in commit 8f9062a84d01a709d9303d21f25e244a1dbd0044\n\nsame",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r253109493,253109493,src/torcontrol.cpp
ryanofsky,2019-02-01T20:12:27Z,"In commit ""tor: pass in Tor control port rather than using globals"" (8f9062a84d01a709d9303d21f25e244a1dbd0044)\n\nIt seems like you should `s/default_port/listen_port/` everywhere in this commit. If I understand correctly, the value starts off being called `listen_port` in `AppInitMain`, then is called `default_port` in `StartTorControl`, then is called `m_listen_port` again in `TorController`. ",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r253185008,253185008,src/torcontrol.cpp
ryanofsky,2019-02-01T20:20:51Z,"In commit ""net: pass listen port into CConnman"" (dcf461abdb9ad6c769aab072b7522d1e5c189b20)\n\nThroughout this commit I'm confused why `default_listen_port` and `DefaultListenPort` are used instead of just `listen_port` and `ListenPort`. It seems like these names are referring to the actual, active listening port, not the network default port.",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r253187338,253187338,src/net.h
ryanofsky,2019-02-01T20:24:17Z,"In commit ""net: pass port into MapPort/Discover rather than using globals"" (4d0cac7be150145ec45119188458a9625f882b29)\n\nI think it instead of adding `&& g_connman` here, it would make more sense to `assert(g_connman)`, or just do nothing if `g_connman` is null. Falling back to the else condition and having a `mapPort(use_upnp=true)` trigger `StopMapPort` in this case doesn't seem like it could ",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r253188244,253188244,src/interfaces/node.cpp
ryanofsky,2019-02-04T19:02:43Z,"In commit ""net: pass listen port into CConnman"" (f2ad517e131142de1d28670d759c07bdf5466b3f)\n\nShould be `port` or `listen_port`, not `default_listen_port` as far as I can tell. There are also some other uses of `default_listen_port` in this commit that look like they should be changed.",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r253600872,253600872,src/net.cpp
ryanofsky,2019-02-04T19:17:00Z,"In commit ""net: pass in default outgoing port"" (f01ebc1a8f0a1e5845c90d6a156ccc05b2c366eb):\n\nI'd maybe `s/outbound_port/connect_port/` in this commit. I could be off, but  ""outbound"" to me suggests the port connected _from_ not the port connecting _to_.",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r253606310,253606310,src/init.cpp
MarcoFalke,2019-02-05T20:17:37Z,; :eyes: ,https://github.com/bitcoin/bitcoin/pull/14856#discussion_r254030168,254030168,src/net.cpp
MarcoFalke,2019-03-11T16:51:26Z,"in commit c1595190ee6daa8f85c202e3dbdda927fc5d6067\n\nstyle-nit: Could extract into a helper `IsValidPort` or similar",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r264327974,264327974,src/init.cpp
MarcoFalke,2019-03-11T17:08:45Z,"In commit 8055e8770a4f43a6381542042d5e54d1a48f54e\n\nThis seems fragile. What happens if this interface method is called before `CConnman::Start`?",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r264335837,264335837,src/interfaces/node.cpp
MarcoFalke,2019-03-11T17:14:38Z,"style-nit: Should use `int64_t`, otherwise it might wrap with `GetArg`?\n\n```suggestion\n    int64_t listen_port = chainparams.GetDefaultPort();\n```",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r264338286,264338286,src/init.cpp
ryanofsky,2019-03-12T18:19:11Z,AppInitMain,https://github.com/bitcoin/bitcoin/pull/14856#discussion_r264820188,264820188,src/interfaces/node.cpp
ryanofsky,2019-03-12T18:30:47Z,"re: https://github.com/bitcoin/bitcoin/pull/14856#discussion_r264335837\n\nI agree with Marco, this is more fragile. It doesn't seem like it should be necessary to rely on connman here just to retrieve a static setting, and there isn't much in the current code organization that would guarantee connman is initialized with the right port number before this call. I think it'd be better to bring bac",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r264825110,264825110,src/interfaces/node.cpp
ryanofsky,2019-03-14T20:10:52Z,"In commit ""tor: pass in Tor control port rather than using globals"" (7e314526e7c4bb5bbf0e351f92cab940158eae24)\n\nIt's not a good idea to validate user input with an assert, because it causes the program to crash suddenly and different environments to display the error in confusing ways (in stderr, system logs, or popup windows, without the full context).\n\nSimplest thing to do here would be ",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r265746735,265746735,src/net.cpp
Empact,2019-04-03T06:33:45Z,~Do you want to capture `target` and `listen_port` by reference?~,https://github.com/bitcoin/bitcoin/pull/14856#discussion_r271595261,271595261,src/torcontrol.cpp
ryanofsky,2019-04-05T17:04:44Z,"re: https://github.com/bitcoin/bitcoin/pull/14856#discussion_r271595261\n\n> Do you want to capture target and listen_port by reference?\n\nDefinitely not `listen_port` because it will go out of scope. Probably not `target` because it is a reference to an object this has no control over. In C++14, the better thing would be to pass `target` by value then capture-by-move. But the current code is",https://github.com/bitcoin/bitcoin/pull/14856#discussion_r272671389,272671389,src/torcontrol.cpp
