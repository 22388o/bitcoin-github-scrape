[
  {
    "sha": "a66c0f78a941968340f030911765a84219908c4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjZjMGY3OGE5NDE5NjgzNDBmMDMwOTExNzY1YTg0MjE5OTA4YzRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-30T11:04:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-30T12:41:33Z"
      },
      "message": "util: Report parse errors in configuration file\n\nReport errors while parsing the configuration file, instead of silently\nignoring them.\n\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 22: nodebuglogfile, if you intended to specify a negated option, use nodebuglogfile=1 instead\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 22: sdafsdfafs\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 24: -nodebuglogfile=1, options in the configuration file must be specified without leading -",
      "tree": {
        "sha": "d33e6b9d55077552d28f1a74fe23ccadec513571",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d33e6b9d55077552d28f1a74fe23ccadec513571"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a66c0f78a941968340f030911765a84219908c4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a66c0f78a941968340f030911765a84219908c4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a66c0f78a941968340f030911765a84219908c4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a66c0f78a941968340f030911765a84219908c4d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be301a57777695755164bdab69c33b9e6ae0d6ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be301a57777695755164bdab69c33b9e6ae0d6ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be301a57777695755164bdab69c33b9e6ae0d6ae"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b832fd1f4043d83540ddeb1997e230c5f306b6ea",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a66c0f78a941968340f030911765a84219908c4d/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a66c0f78a941968340f030911765a84219908c4d/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=a66c0f78a941968340f030911765a84219908c4d",
        "patch": "@@ -812,11 +812,11 @@ static std::string TrimString(const std::string& str, const std::string& pattern\n     return str.substr(front, end - front + 1);\n }\n \n-static std::vector<std::pair<std::string, std::string>> GetConfigOptions(std::istream& stream)\n+static bool GetConfigOptions(std::istream& stream, std::string& error, std::vector<std::pair<std::string, std::string>> &options)\n {\n-    std::vector<std::pair<std::string, std::string>> options;\n     std::string str, prefix;\n     std::string::size_type pos;\n+    int linenr = 1;\n     while (std::getline(stream, str)) {\n         if ((pos = str.find('#')) != std::string::npos) {\n             str = str.substr(0, pos);\n@@ -826,21 +826,34 @@ static std::vector<std::pair<std::string, std::string>> GetConfigOptions(std::is\n         if (!str.empty()) {\n             if (*str.begin() == '[' && *str.rbegin() == ']') {\n                 prefix = str.substr(1, str.size() - 2) + '.';\n+            } else if (*str.begin() == '-') {\n+                error = strprintf(\"parse error on line %i: %s, options in configuration file must be specified without leading -\", linenr, str);\n+                return false;\n             } else if ((pos = str.find('=')) != std::string::npos) {\n                 std::string name = prefix + TrimString(str.substr(0, pos), pattern);\n                 std::string value = TrimString(str.substr(pos + 1), pattern);\n                 options.emplace_back(name, value);\n+            } else {\n+                error = strprintf(\"parse error on line %i: %s\", linenr, str);\n+                if (str.size() >= 2 && str.substr(0, 2) == \"no\") {\n+                    error += strprintf(\", if you intended to specify a negated option, use %s=1 instead\", str);\n+                }\n+                return false;\n             }\n         }\n+        ++linenr;\n     }\n-    return options;\n+    return true;\n }\n \n bool ArgsManager::ReadConfigStream(std::istream& stream, std::string& error, bool ignore_invalid_keys)\n {\n     LOCK(cs_args);\n-\n-    for (const std::pair<std::string, std::string>& option : GetConfigOptions(stream)) {\n+    std::vector<std::pair<std::string, std::string>> options;\n+    if (!GetConfigOptions(stream, error, options)) {\n+        return false;\n+    }\n+    for (const std::pair<std::string, std::string>& option : options) {\n         std::string strKey = std::string(\"-\") + option.first;\n         std::string strValue = option.second;\n "
      }
    ]
  },
  {
    "sha": "ed2332aeffb071a3404be9cff8f9fb8a81a9fbfb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDIzMzJhZWZmYjA3MWEzNDA0YmU5Y2ZmOGY5ZmI4YTgxYTlmYmZi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-06T09:29:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T09:29:40Z"
      },
      "message": "test: Add test for config file parsing errors",
      "tree": {
        "sha": "e8b786c02765c739dd83461e488d10b2868d0e25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8b786c02765c739dd83461e488d10b2868d0e25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed2332aeffb071a3404be9cff8f9fb8a81a9fbfb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed2332aeffb071a3404be9cff8f9fb8a81a9fbfb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed2332aeffb071a3404be9cff8f9fb8a81a9fbfb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed2332aeffb071a3404be9cff8f9fb8a81a9fbfb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a66c0f78a941968340f030911765a84219908c4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a66c0f78a941968340f030911765a84219908c4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a66c0f78a941968340f030911765a84219908c4d"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9be59b32b42ecf777c1f8be1922db3ea2b36e3c6",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed2332aeffb071a3404be9cff8f9fb8a81a9fbfb/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed2332aeffb071a3404be9cff8f9fb8a81a9fbfb/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=ed2332aeffb071a3404be9cff8f9fb8a81a9fbfb",
        "patch": "@@ -14,8 +14,29 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def test_config_file_parser(self):\n+        # Assume node is stopped\n+\n+        inc_conf_file_path = os.path.join(self.nodes[0].datadir, 'include.conf')\n+        with open(os.path.join(self.nodes[0].datadir, 'bitcoin.conf'), 'a', encoding='utf-8') as conf:\n+            conf.write('includeconf={}\\n'.format(inc_conf_file_path))\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('-dash=1\\n')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 1: -dash=1, options in configuration file must be specified without leading -')\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('nono\\n')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 1: nono, if you intended to specify a negated option, use nono=1 instead')\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('')  # clear\n+\n     def run_test(self):\n         self.stop_node(0)\n+\n+        self.test_config_file_parser()\n+\n         # Remove the -datadir argument so it doesn't override the config file\n         self.nodes[0].args = [arg for arg in self.nodes[0].args if not arg.startswith(\"-datadir\")]\n "
      }
    ]
  }
]