gavinandresen,2013-01-26T19:54:56Z,"Tested with transaction id a0d85e45c4b54e98bb7c67044a88e20b434db58f75fad9dd4dac6d5ba215296f\n\nCreated using createrawtransaction, then modified the input sequence number and lock time by tweaking the hex\n\nAttempted to send before the locktime using sendrawtransaction. RESULT: TX rejected\n\nWaited until after the locktime, sendrawtransaction again:  Success\n\nNote: since this is an IsStandard(",https://github.com/bitcoin/bitcoin/pull/2223#issuecomment-12741129,12741129,
jgarzik,2013-01-26T20:11:57Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/2223#issuecomment-12741405,12741405,
BitcoinPullTester,2013-01-26T20:15:42Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/6f8730752cf92ff8269812c01a6d9d35fff82e75 for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2223#issuecomment-12741468,12741468,
luke-jr,2013-01-26T21:06:00Z,"Doesn't this defeat the whole point of non-final transactions? Feels more like we're disabling a possibly-useful feature so that people can goof up and not be affected unless someone is trying (nothing stops them from relaying a non-final direct to the vulnerable service...).\n\nIn any case, as long as bitcoind and Bitcoin-Qt clearly expose the non-final status, I don't think this is a vulnerabili",https://github.com/bitcoin/bitcoin/pull/2223#issuecomment-12742273,12742273,
gmaxwell,2013-01-26T21:24:03Z,@luke-jr Without  TX replacement the purpose non-final transactions have is very limitâ€” the only difference this will make is that you have to transmit them out of band until they lock... which you already had to do if you wanted the ability to replace.\n\nWhat this fixes is that right now the wallet will display transactions that have no conceivable chance of confirming. Unless you have a more de,https://github.com/bitcoin/bitcoin/pull/2223#issuecomment-12742542,12742542,
schildbach,2013-01-26T21:38:51Z,@gavinandresen Do you also account for the fact that an attacker can send a timeLocked tx and then a plain normal tx that builds on the first one? The second one looks normal but in fact will also be timeLocked.\n,https://github.com/bitcoin/bitcoin/pull/2223#issuecomment-12742796,12742796,
gmaxwell,2013-01-26T21:42:00Z,"@goonie The non-final txn should not enter the memory pool, so its children should be treated as orphaned.\n",https://github.com/bitcoin/bitcoin/pull/2223#issuecomment-12742861,12742861,
luke-jr,2013-01-26T22:46:20Z,"@gmaxwell I guess that makes sense... I suppose if someone comes up with other valid use cases, this can be reconsidered in the future anyway.\n",https://github.com/bitcoin/bitcoin/pull/2223#issuecomment-12743900,12743900,
petertodd,2013-01-27T00:22:09Z,"ACK\n\nTested what Gavin did as well as tested various incoming transactions including chains. Also tested what happens with non-final tx's already in your wallet; an error ends up in your logs and they don't make it into the mempool. Re-transmission does occur, and provided that a conflict is not out there, they will eventually be re-transmitted when they are final.\n",https://github.com/bitcoin/bitcoin/pull/2223#issuecomment-12745143,12745143,
luke-jr,2013-01-27T01:06:16Z,This doesn't pass block height/time. Shouldn't transactions be standard once their lock time has passed?\n,https://github.com/bitcoin/bitcoin/pull/2223#discussion_r2785818,2785818,src/main.cpp
petertodd,2013-01-27T01:18:08Z,IsFinal() without arguments uses current adjusted time and best known block.\n,https://github.com/bitcoin/bitcoin/pull/2223#discussion_r2785841,2785841,src/main.cpp
