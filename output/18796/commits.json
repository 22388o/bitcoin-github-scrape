[
  {
    "sha": "061acf62a15ad3dbb9f055b7c2569b9832ed623a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjFhY2Y2MmExNWFkM2RiYjlmMDU1YjdjMjU2OWI5ODMyZWQ2MjNh",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-03-24T02:24:58Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T06:36:27Z"
      },
      "message": "scripts: no-longer check for 32 bit windows in security-check.py",
      "tree": {
        "sha": "a508c38fd7eee43ae7e8e92bf9deef89a14ef5b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a508c38fd7eee43ae7e8e92bf9deef89a14ef5b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/061acf62a15ad3dbb9f055b7c2569b9832ed623a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl685usACgkQLuufXMCV\nJsHDIQ//f9MDrHi300EDIxnNSrB60F/k7mxSqEztTk11PKGONmtcO6yF16R/CnPr\nUzjvxB9nWQChQj6G2HnZDobO7FIr3Kl1LW5xIm1Wu38ClCAi+KIQMZcfkIeeB7OX\ncCSreLWUwvK4JTxt0yrNe8F1nCdYH8GZPsWOuDZjTVhh/hKwVrcC0KO/VsnP2tD/\nhyWbJBEYmEkhOqqNVj2HWxwFOhGlyIUuz01zYxG8dXgR+ZmyI0jXTblUtZVu9fsB\nRwl17o13EwNzU4IYFGBizRJhtFX6/WEWqMcQjO84gK6ACE7CR6EnaXEQQVxLk2r6\n8Gerw3cffnsxUI3KMsJZQ+cvzsMZ+nCOLutYDmpjZvnJ2vijp9k1DLIFpn+/24pW\n5rXFI/DDWVuC/B7WCb8o7fN3xQEue3sbwsC08oxUq11bHr4fEBdlq/aEq88pipYo\nN0sOax/b4ygD8N4iABXrrtUmWCxFtXhszDVRvnHMod4yW09JfjFCzmlPTw2ls395\norWtQVUMhoSax3iUo0gNbiWsYYmcjplbYNP82NHpxGkkstpfTCh/PTLBW7ZEUU+w\ncIufbiJDfeojULwzMV4H5X35gGJA1NGBgsY51Hvbj34+nbWETO9lfh1JBFkfFlE7\nsG3ziFG4/1mcU0g1rki6vQ5ZfyWHjAc9So6JuNPqtoLZF5zd0H8=\n=1pt4\n-----END PGP SIGNATURE-----",
        "payload": "tree a508c38fd7eee43ae7e8e92bf9deef89a14ef5b7\nparent 04c09553d89809cf6328679d7535ecaa0070485d\nauthor fanquake <fanquake@gmail.com> 1585016698 +0800\ncommitter fanquake <fanquake@gmail.com> 1589438187 +0800\n\nscripts: no-longer check for 32 bit windows in security-check.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/061acf62a15ad3dbb9f055b7c2569b9832ed623a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/061acf62a15ad3dbb9f055b7c2569b9832ed623a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/061acf62a15ad3dbb9f055b7c2569b9832ed623a/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04c09553d89809cf6328679d7535ecaa0070485d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04c09553d89809cf6328679d7535ecaa0070485d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04c09553d89809cf6328679d7535ecaa0070485d"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 10,
      "deletions": 23
    },
    "files": [
      {
        "sha": "2171ee2e0c970b80542d67927e1036c941d48901",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 10,
        "deletions": 23,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/061acf62a15ad3dbb9f055b7c2569b9832ed623a/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/061acf62a15ad3dbb9f055b7c2569b9832ed623a/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=061acf62a15ad3dbb9f055b7c2569b9832ed623a",
        "patch": "@@ -116,47 +116,34 @@ def check_ELF_Canary(executable):\n             ok = True\n     return ok\n \n-def get_PE_dll_characteristics(executable):\n-    '''\n-    Get PE DllCharacteristics bits.\n-    Returns a tuple (arch,bits) where arch is 'i386:x86-64' or 'i386'\n-    and bits is the DllCharacteristics value.\n-    '''\n+def get_PE_dll_characteristics(executable) -> int:\n+    '''Get PE DllCharacteristics bits'''\n     p = subprocess.Popen([OBJDUMP_CMD, '-x',  executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n     (stdout, stderr) = p.communicate()\n     if p.returncode:\n         raise IOError('Error opening file')\n-    arch = ''\n     bits = 0\n     for line in stdout.splitlines():\n         tokens = line.split()\n-        if len(tokens)>=2 and tokens[0] == 'architecture:':\n-            arch = tokens[1].rstrip(',')\n         if len(tokens)>=2 and tokens[0] == 'DllCharacteristics':\n             bits = int(tokens[1],16)\n-    return (arch,bits)\n+    return bits\n \n IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA = 0x0020\n IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE    = 0x0040\n IMAGE_DLL_CHARACTERISTICS_NX_COMPAT       = 0x0100\n \n def check_PE_DYNAMIC_BASE(executable):\n     '''PIE: DllCharacteristics bit 0x40 signifies dynamicbase (ASLR)'''\n-    (arch,bits) = get_PE_dll_characteristics(executable)\n-    reqbits = IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE\n-    return (bits & reqbits) == reqbits\n+    bits = get_PE_dll_characteristics(executable)\n+    return (bits & IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE) == IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE\n \n-# On 64 bit, must support high-entropy 64-bit address space layout randomization in addition to DYNAMIC_BASE\n-# to have secure ASLR.\n+# Must support high-entropy 64-bit address space layout randomization\n+# in addition to DYNAMIC_BASE to have secure ASLR.\n def check_PE_HIGH_ENTROPY_VA(executable):\n     '''PIE: DllCharacteristics bit 0x20 signifies high-entropy ASLR'''\n-    (arch,bits) = get_PE_dll_characteristics(executable)\n-    if arch == 'i386:x86-64':\n-        reqbits = IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA\n-    else: # Unnecessary on 32-bit\n-        assert(arch == 'i386')\n-        reqbits = 0\n-    return (bits & reqbits) == reqbits\n+    bits = get_PE_dll_characteristics(executable)\n+    return (bits & IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA) == IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA\n \n def check_PE_RELOC_SECTION(executable) -> bool:\n     '''Check for a reloc section. This is required for functional ASLR.'''\n@@ -171,7 +158,7 @@ def check_PE_RELOC_SECTION(executable) -> bool:\n \n def check_PE_NX(executable):\n     '''NX: DllCharacteristics bit 0x100 signifies nxcompat (DEP)'''\n-    (arch,bits) = get_PE_dll_characteristics(executable)\n+    bits = get_PE_dll_characteristics(executable)\n     return (bits & IMAGE_DLL_CHARACTERISTICS_NX_COMPAT) == IMAGE_DLL_CHARACTERISTICS_NX_COMPAT\n \n def get_MACHO_executable_flags(executable):"
      }
    ]
  },
  {
    "sha": "13f606b4f940e5820ff21ea62fc27a5a91774b05",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2Y2MDZiNGY5NDBlNTgyMGZmMjFlYTYyZmMyN2E1YTkxNzc0YjA1",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-04-28T01:30:35Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T06:36:27Z"
      },
      "message": "scripts: remove NONFATAL from security-check.py",
      "tree": {
        "sha": "4350542b3ecb7db67cd129f22af31c15d257c4fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4350542b3ecb7db67cd129f22af31c15d257c4fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13f606b4f940e5820ff21ea62fc27a5a91774b05",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl685usACgkQLuufXMCV\nJsGW3hAAniKwp/gx3wNBcsGKbVyn+Aqv9swFek3Ql26r99y2Ea42F78fdgvb5X6p\nn+GZANsv1vw1zywoONBZkZzdE0grYMnVro+mmcKn8yD551/7onvJtlGOFNJyvb/z\n3tIVQhiROhNKtmaAF6C5FRF9I2s9AGi7BERTT6H4RPsuqUqbVycbNfzzXLzH2bf2\nwowEeIdBrjgammV9usTZmr5s5raKR6rVTJqZCv/ywKFBOQzR1t2YyRbNKHMvAo7U\n7gG8R2c+bsJQ9lu1n5vGoxlJJwb5lprfBd8KwhrCj8dVy4eUAtnIREYIfoyQtUCq\nF2ya0q3Cww9hVYqu6fHdv4OuDUsyfkDFqzrP1L5QwrmvZgkophBQ4gAeph5BRFyT\ng6nbUzH51DnbV0BndD2/HEA1+Fbnd2rDFhyVPwZvmlRmUCGsCIx9oYhHNgm82jNm\niYV6m8HGG8skjcK6ZMGmMxY+OefCAsffOiKQ9lnfiE+h7FGJQeYw+fkV8WcN5Ziz\nuHtuIscDdOBX8k/aEdg4LjOE8Q3NIbkW9Ux+m/xlhrRXeWHhb6kAKpCHUonnYNXB\nFGtxf1cUF0216M1JghpsDcQ8rj1fNADjP7Kqp/mgsj+y6xv7k1itTre6pwZZ5vGU\nkw5w/RfMWkxgGOBLS8OEuJFM9oIvaRyhNPlXKBwv4yBIeDpIWxU=\n=XQOx\n-----END PGP SIGNATURE-----",
        "payload": "tree 4350542b3ecb7db67cd129f22af31c15d257c4fb\nparent 061acf62a15ad3dbb9f055b7c2569b9832ed623a\nauthor fanquake <fanquake@gmail.com> 1588037435 +0800\ncommitter fanquake <fanquake@gmail.com> 1589438187 +0800\n\nscripts: remove NONFATAL from security-check.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f606b4f940e5820ff21ea62fc27a5a91774b05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13f606b4f940e5820ff21ea62fc27a5a91774b05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f606b4f940e5820ff21ea62fc27a5a91774b05/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "061acf62a15ad3dbb9f055b7c2569b9832ed623a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/061acf62a15ad3dbb9f055b7c2569b9832ed623a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/061acf62a15ad3dbb9f055b7c2569b9832ed623a"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 1,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5180238021669a6d012ec14a17d1cfcfc46a6cfd",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13f606b4f940e5820ff21ea62fc27a5a91774b05/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13f606b4f940e5820ff21ea62fc27a5a91774b05/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=13f606b4f940e5820ff21ea62fc27a5a91774b05",
        "patch": "@@ -15,7 +15,6 @@\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n-NONFATAL = {} # checks which are non-fatal for now but only generate a warning\n \n def check_ELF_PIE(executable):\n     '''\n@@ -279,18 +278,12 @@ def identify_executable(executable):\n                 continue\n \n             failed = []\n-            warning = []\n             for (name, func) in CHECKS[etype]:\n                 if not func(filename):\n-                    if name in NONFATAL:\n-                        warning.append(name)\n-                    else:\n-                        failed.append(name)\n+                    failed.append(name)\n             if failed:\n                 print('%s: failed %s' % (filename, ' '.join(failed)))\n                 retval = 1\n-            if warning:\n-                print('%s: warning %s' % (filename, ' '.join(warning)))\n         except IOError:\n             print('%s: cannot open' % filename)\n             retval = 1"
      }
    ]
  },
  {
    "sha": "83d063e9541cc9ea41ea86919eb9435c73efb14e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2QwNjNlOTU0MWNjOWVhNDFlYTg2OTE5ZWI5NDM1YzczZWZiMTRl",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-04-28T01:48:05Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T07:29:58Z"
      },
      "message": "scripts: add run_command to security-check.py\n\nDeduplicate all the subprocess code as mentioned in 18713.",
      "tree": {
        "sha": "a8d3ed4510a3ca666dedebdedf32ea321eb20e1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8d3ed4510a3ca666dedebdedf32ea321eb20e1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83d063e9541cc9ea41ea86919eb9435c73efb14e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl6883gACgkQLuufXMCV\nJsEHLBAAu9NBgh0o4mKoKNJlOz3rHllutBadDtOg5wXWaNqEDWJ8E9cWD8PGBKiX\nPMr0P46yvHDQ5GZQOpxRicSNMFpruvwvcNH55Bcmxakx4IjlNDPi8sZ4ZQPzb1/F\nbwBYJ9kOwlI8PRNEZQI/YKNF9JkbBMpBYyQWbKFuHzhpnZYcmC6ml23BCnZJHm5t\nu+SxlpBdm47FlXzpWbb+LbwW0lv/+iYE9Q+nZcIbEeuejrbaPNh2CTEJUlP6RqqB\nb72y2wTztypu79WJ+x3CUOvpUisduT7Vm7TXwvv12Iq1k8n7KV8ryjFwmwgU0oNn\ntQ9LRSGSrhA7qvqW6rriXn5iLd2Q+FrEF1RPZavnEftcE0fC9lKmXgP9OmFOWk+8\nEnTBt3HQsoN4QlvkDfi3q+efm+J3Ck+jxFfiCCeuT1Fwo5m7KidYfbxE3Ld/nyw5\ndQ3xG5U3eNs0Zo8hXS5bh32s9ygiC5sjQ1JjX84SdmP/H34WPZw7Xwib0pxYrTUN\n/VMF4Dbw1VEi33KPPs6BNnuqiVbAbCzJBBFdXz2rnxurbGx4qdniHFI1zhfFK0sE\nlcxYEj2Pd6xjNqWLBUO9e2YwPCc0sDzIAf9Ax6Yigl0brgPphDiseguLHS0C6tqu\nQ14Cz4cSg6gr5NZxozRKKWpmDkCQ9CSEFxDfWbbKki9q6WXvLrw=\n=oBZH\n-----END PGP SIGNATURE-----",
        "payload": "tree a8d3ed4510a3ca666dedebdedf32ea321eb20e1f\nparent 13f606b4f940e5820ff21ea62fc27a5a91774b05\nauthor fanquake <fanquake@gmail.com> 1588038485 +0800\ncommitter fanquake <fanquake@gmail.com> 1589441398 +0800\n\nscripts: add run_command to security-check.py\n\nDeduplicate all the subprocess code as mentioned in 18713.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83d063e9541cc9ea41ea86919eb9435c73efb14e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83d063e9541cc9ea41ea86919eb9435c73efb14e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83d063e9541cc9ea41ea86919eb9435c73efb14e/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13f606b4f940e5820ff21ea62fc27a5a91774b05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f606b4f940e5820ff21ea62fc27a5a91774b05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13f606b4f940e5820ff21ea62fc27a5a91774b05"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 21,
      "deletions": 37
    },
    "files": [
      {
        "sha": "c03e5d019531b4f0a3b87f420c9ff5e477d52d51",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 21,
        "deletions": 37,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83d063e9541cc9ea41ea86919eb9435c73efb14e/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83d063e9541cc9ea41ea86919eb9435c73efb14e/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=83d063e9541cc9ea41ea86919eb9435c73efb14e",
        "patch": "@@ -16,14 +16,15 @@\n OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n \n+def run_command(command):\n+    p = subprocess.run(command, stdout=subprocess.PIPE, check=True, universal_newlines=True)\n+    return p.stdout\n+\n def check_ELF_PIE(executable):\n     '''\n     Check for position independent executable (PIE), allowing for address space randomization.\n     '''\n-    p = subprocess.Popen([READELF_CMD, '-h', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([READELF_CMD, '-h', '-W', executable])\n \n     ok = False\n     for line in stdout.splitlines():\n@@ -34,10 +35,8 @@ def check_ELF_PIE(executable):\n \n def get_ELF_program_headers(executable):\n     '''Return type and flags for ELF program headers'''\n-    p = subprocess.Popen([READELF_CMD, '-l', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([READELF_CMD, '-l', '-W', executable])\n+\n     in_headers = False\n     count = 0\n     headers = []\n@@ -83,18 +82,17 @@ def check_ELF_RELRO(executable):\n     have_gnu_relro = False\n     for (typ, flags) in get_ELF_program_headers(executable):\n         # Note: not checking flags == 'R': here as linkers set the permission differently\n-        # This does not affect security: the permission flags of the GNU_RELRO program header are ignored, the PT_LOAD header determines the effective permissions.\n+        # This does not affect security: the permission flags of the GNU_RELRO program\n+        # header are ignored, the PT_LOAD header determines the effective permissions.\n         # However, the dynamic linker need to write to this area so these are RW.\n         # Glibc itself takes care of mprotecting this area R after relocations are finished.\n         # See also https://marc.info/?l=binutils&m=1498883354122353\n         if typ == 'GNU_RELRO':\n             have_gnu_relro = True\n \n     have_bindnow = False\n-    p = subprocess.Popen([READELF_CMD, '-d', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([READELF_CMD, '-d', '-W', executable])\n+\n     for line in stdout.splitlines():\n         tokens = line.split()\n         if len(tokens)>1 and tokens[1] == '(BIND_NOW)' or (len(tokens)>2 and tokens[1] == '(FLAGS)' and 'BIND_NOW' in tokens[2:]):\n@@ -105,10 +103,8 @@ def check_ELF_Canary(executable):\n     '''\n     Check for use of stack canary\n     '''\n-    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([READELF_CMD, '--dyn-syms', '-W', executable])\n+\n     ok = False\n     for line in stdout.splitlines():\n         if '__stack_chk_fail' in line:\n@@ -117,10 +113,8 @@ def check_ELF_Canary(executable):\n \n def get_PE_dll_characteristics(executable) -> int:\n     '''Get PE DllCharacteristics bits'''\n-    p = subprocess.Popen([OBJDUMP_CMD, '-x',  executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([OBJDUMP_CMD, '-x',  executable])\n+\n     bits = 0\n     for line in stdout.splitlines():\n         tokens = line.split()\n@@ -146,10 +140,8 @@ def check_PE_HIGH_ENTROPY_VA(executable):\n \n def check_PE_RELOC_SECTION(executable) -> bool:\n     '''Check for a reloc section. This is required for functional ASLR.'''\n-    p = subprocess.Popen([OBJDUMP_CMD, '-h',  executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([OBJDUMP_CMD, '-h',  executable])\n+\n     for line in stdout.splitlines():\n         if '.reloc' in line:\n             return True\n@@ -161,10 +153,7 @@ def check_PE_NX(executable):\n     return (bits & IMAGE_DLL_CHARACTERISTICS_NX_COMPAT) == IMAGE_DLL_CHARACTERISTICS_NX_COMPAT\n \n def get_MACHO_executable_flags(executable):\n-    p = subprocess.Popen([OTOOL_CMD, '-vh', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([OTOOL_CMD, '-vh', executable])\n \n     flags = []\n     for line in stdout.splitlines():\n@@ -208,10 +197,7 @@ def check_MACHO_LAZY_BINDINGS(executable) -> bool:\n     Check for no lazy bindings.\n     We don't use or check for MH_BINDATLOAD. See #18295.\n     '''\n-    p = subprocess.Popen([OTOOL_CMD, '-l', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([OTOOL_CMD, '-l', executable])\n \n     for line in stdout.splitlines():\n         tokens = line.split()\n@@ -224,10 +210,8 @@ def check_MACHO_Canary(executable) -> bool:\n     '''\n     Check for use of stack canary\n     '''\n-    p = subprocess.Popen([OTOOL_CMD, '-Iv', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([OTOOL_CMD, '-Iv', executable])\n+\n     ok = False\n     for line in stdout.splitlines():\n         if '___stack_chk_fail' in line:"
      }
    ]
  },
  {
    "sha": "eacedfb0230978748cbcfb13817fed7e7c756ba7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWNlZGZiMDIzMDk3ODc0OGNiY2ZiMTM4MTdmZWQ3ZTdjNzU2YmE3",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-04-28T02:05:45Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T07:30:52Z"
      },
      "message": "scripts: add additional type annotations to security-check.py",
      "tree": {
        "sha": "0b471a0efe4f8337b00089cea2ddd6e4df217693",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b471a0efe4f8337b00089cea2ddd6e4df217693"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eacedfb0230978748cbcfb13817fed7e7c756ba7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl68864ACgkQLuufXMCV\nJsHNSQ//aQFU4rBVEZa35P/xU7RAm3sLprMUful8Pmlq/e/DPNIoYjHBwTOY/ne4\nxVpQ78S7D2LfJcvmYj8PF7uEZcCP2SbabUfLUqMShDsEs7NiaxrEmh8A5/ykNfKj\njFZek/3dAuPlTHgHtQ4da+fKn3qGMZpcekyj05gaUvqipK5cHB9PWAfzX3JTW5pi\n9ue/YZkM5kuh6ISqrW9c4d+esCp9fmLSQatWs1CfPLwfsywhIY3Eut8MUB/NmyNE\nMfL/zGWiZbjHCav+z9cHON7dCJDD7no5wFojyL/nI8500ZNWYlEiug8cMAX0xmN/\nbWNqd8sTG0dSWDVAmHaONLGcmy1b80zAXLQwjpQTqe2bykWJxL06gAIC1Z9yf3J8\nBphC9v7nnZTE6pJ39ejs3kXf6IEQGQoMmpjDgc9QPHcdtxB0K1F9Q+SNDfxPhRt8\nWOecY2sCl0rxXtTSvMHyovDyA1RWCUT5yJFf9Wwt66E4KB5A1NbqMwOgcct5Vm7M\nNiNuH4pbsW7GIneL7lI3Gk2emgfo9tmozFiIrYS0t/PFO5lj69AaNYt+2D/4s9v6\noYTEi++sR+DQpmMh3jyUZxkHGh9+JKXQ5KshxE84md54Htk1Lw3FI++Q2NAX6TPh\nRp0FyTngqCXhEvYmPRliDH1c/re8syR6T2y4I/Jr8KP4gW/qcQI=\n=a2lV\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b471a0efe4f8337b00089cea2ddd6e4df217693\nparent 83d063e9541cc9ea41ea86919eb9435c73efb14e\nauthor fanquake <fanquake@gmail.com> 1588039545 +0800\ncommitter fanquake <fanquake@gmail.com> 1589441452 +0800\n\nscripts: add additional type annotations to security-check.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eacedfb0230978748cbcfb13817fed7e7c756ba7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eacedfb0230978748cbcfb13817fed7e7c756ba7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eacedfb0230978748cbcfb13817fed7e7c756ba7/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83d063e9541cc9ea41ea86919eb9435c73efb14e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83d063e9541cc9ea41ea86919eb9435c73efb14e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83d063e9541cc9ea41ea86919eb9435c73efb14e"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 14,
      "deletions": 12
    },
    "files": [
      {
        "sha": "ca587ca9e543a108b984299cf98f693d5fbf7f4d",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eacedfb0230978748cbcfb13817fed7e7c756ba7/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eacedfb0230978748cbcfb13817fed7e7c756ba7/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=eacedfb0230978748cbcfb13817fed7e7c756ba7",
        "patch": "@@ -12,24 +12,26 @@\n import sys\n import os\n \n+from typing import List, Optional\n+\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n \n-def run_command(command):\n+def run_command(command) -> str:\n     p = subprocess.run(command, stdout=subprocess.PIPE, check=True, universal_newlines=True)\n     return p.stdout\n \n-def check_ELF_PIE(executable):\n+def check_ELF_PIE(executable) -> bool:\n     '''\n     Check for position independent executable (PIE), allowing for address space randomization.\n     '''\n     stdout = run_command([READELF_CMD, '-h', '-W', executable])\n \n     ok = False\n     for line in stdout.splitlines():\n-        line = line.split()\n-        if len(line)>=2 and line[0] == 'Type:' and line[1] == 'DYN':\n+        tokens = line.split()\n+        if len(line)>=2 and tokens[0] == 'Type:' and tokens[1] == 'DYN':\n             ok = True\n     return ok\n \n@@ -60,7 +62,7 @@ def get_ELF_program_headers(executable):\n             count += 1\n     return headers\n \n-def check_ELF_NX(executable):\n+def check_ELF_NX(executable) -> bool:\n     '''\n     Check that no sections are writable and executable (including the stack)\n     '''\n@@ -73,7 +75,7 @@ def check_ELF_NX(executable):\n             have_wx = True\n     return have_gnu_stack and not have_wx\n \n-def check_ELF_RELRO(executable):\n+def check_ELF_RELRO(executable) -> bool:\n     '''\n     Check for read-only relocations.\n     GNU_RELRO program header must exist\n@@ -99,7 +101,7 @@ def check_ELF_RELRO(executable):\n             have_bindnow = True\n     return have_gnu_relro and have_bindnow\n \n-def check_ELF_Canary(executable):\n+def check_ELF_Canary(executable) -> bool:\n     '''\n     Check for use of stack canary\n     '''\n@@ -126,14 +128,14 @@ def get_PE_dll_characteristics(executable) -> int:\n IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE    = 0x0040\n IMAGE_DLL_CHARACTERISTICS_NX_COMPAT       = 0x0100\n \n-def check_PE_DYNAMIC_BASE(executable):\n+def check_PE_DYNAMIC_BASE(executable) -> bool:\n     '''PIE: DllCharacteristics bit 0x40 signifies dynamicbase (ASLR)'''\n     bits = get_PE_dll_characteristics(executable)\n     return (bits & IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE) == IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE\n \n # Must support high-entropy 64-bit address space layout randomization\n # in addition to DYNAMIC_BASE to have secure ASLR.\n-def check_PE_HIGH_ENTROPY_VA(executable):\n+def check_PE_HIGH_ENTROPY_VA(executable) -> bool:\n     '''PIE: DllCharacteristics bit 0x20 signifies high-entropy ASLR'''\n     bits = get_PE_dll_characteristics(executable)\n     return (bits & IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA) == IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA\n@@ -147,12 +149,12 @@ def check_PE_RELOC_SECTION(executable) -> bool:\n             return True\n     return False\n \n-def check_PE_NX(executable):\n+def check_PE_NX(executable) -> bool:\n     '''NX: DllCharacteristics bit 0x100 signifies nxcompat (DEP)'''\n     bits = get_PE_dll_characteristics(executable)\n     return (bits & IMAGE_DLL_CHARACTERISTICS_NX_COMPAT) == IMAGE_DLL_CHARACTERISTICS_NX_COMPAT\n \n-def get_MACHO_executable_flags(executable):\n+def get_MACHO_executable_flags(executable) -> List[str]:\n     stdout = run_command([OTOOL_CMD, '-vh', executable])\n \n     flags = []\n@@ -240,7 +242,7 @@ def check_MACHO_Canary(executable) -> bool:\n ]\n }\n \n-def identify_executable(executable):\n+def identify_executable(executable) -> Optional[str]:\n     with open(filename, 'rb') as f:\n         magic = f.read(4)\n     if magic.startswith(b'MZ'):"
      }
    ]
  }
]