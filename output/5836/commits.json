[
  {
    "sha": "7c9c0f164deecdf9945c14c770f0ce62cf794ac8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzljMGYxNjRkZWVjZGY5OTQ1YzE0Yzc3MGYwY2U2MmNmNzk0YWM4",
    "commit": {
      "author": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-02-27T08:44:13Z"
      },
      "committer": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-03-07T22:43:47Z"
      },
      "message": "Replace # with dnl for global comment consistency in configure.ac.\n(Don't use # as also used inside C++ interpreted strings.)",
      "tree": {
        "sha": "1ea1c0ef479461a62adf5b66b51472c376a27252",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ea1c0ef479461a62adf5b66b51472c376a27252"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c9c0f164deecdf9945c14c770f0ce62cf794ac8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c9c0f164deecdf9945c14c770f0ce62cf794ac8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c9c0f164deecdf9945c14c770f0ce62cf794ac8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c9c0f164deecdf9945c14c770f0ce62cf794ac8/comments",
    "author": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f10aa0fa122b089d8affbe725008f054a00fe46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f10aa0fa122b089d8affbe725008f054a00fe46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f10aa0fa122b089d8affbe725008f054a00fe46"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "9b967e431f11a071f602d3cc808594304a0bee28",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c9c0f164deecdf9945c14c770f0ce62cf794ac8/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c9c0f164deecdf9945c14c770f0ce62cf794ac8/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=7c9c0f164deecdf9945c14c770f0ce62cf794ac8",
        "patch": "@@ -67,7 +67,7 @@ AC_PATH_PROG(HEXDUMP,hexdump)\n dnl pkg-config check.\n PKG_PROG_PKG_CONFIG\n \n-# Enable wallet\n+dnl Enable wallet\n AC_ARG_ENABLE([wallet],\n   [AS_HELP_STRING([--enable-wallet],\n   [enable wallet (default is yes)])],\n@@ -139,7 +139,7 @@ AC_ARG_ENABLE([glibc-back-compat],\n \n AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n \n-# Enable debug \n+dnl Enable debug\n AC_ARG_ENABLE([debug],\n     [AS_HELP_STRING([--enable-debug],\n                     [use debug compiler flags and macros (default is no)])],\n@@ -156,9 +156,9 @@ if test \"x$enable_debug\" = xyes; then\n     fi\n fi \n \n-## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n-##       compatibility with the legacy buildsystem.\n-##\n+dnl TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+dnl       compatibility with the legacy buildsystem.\n+\n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter\"\n fi\n@@ -188,7 +188,7 @@ use_pkgconfig=yes\n case $host in\n   *mingw*)\n \n-     #pkgconfig does more harm than good with MinGW\n+     dnl pkgconfig does more harm than good with MinGW\n      use_pkgconfig=no\n \n      TARGET_OS=windows\n@@ -212,8 +212,8 @@ case $host in\n      AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n      AC_CHECK_LIB([crypt32],      [main],, AC_MSG_ERROR(lib missing))\n \n-     # -static is interpreted by libtool, where it has a different meaning.\n-     # In libtool-speak, it's -all-static.\n+     dnl -static is interpreted by libtool, where it has a different meaning.\n+     dnl In libtool-speak, it's -all-static.\n      AX_CHECK_LINK_FLAG([[-static]],[LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"])\n \n      AC_PATH_PROG([MAKENSIS], [makensis], none)\n@@ -356,11 +356,11 @@ AC_C_BIGENDIAN\n dnl Check for pthread compile/link requirements\n AX_PTHREAD\n \n-# The following macro will add the necessary defines to bitcoin-config.h, but\n-# they also need to be passed down to any subprojects. Pull the results out of\n-# the cache and add them to CPPFLAGS.\n+dnl The following macro will add the necessary defines to bitcoin-config.h, but\n+dnl they also need to be passed down to any subprojects. Pull the results out of\n+dnl the cache and add them to CPPFLAGS.\n AC_SYS_LARGEFILE\n-# detect POSIX or GNU variant of strerror_r\n+dnl detect POSIX or GNU variant of strerror_r\n AC_FUNC_STRERROR_R\n \n if test x$ac_cv_sys_file_offset_bits != x &&\n@@ -383,8 +383,8 @@ AX_GCC_FUNC_ATTRIBUTE([dllimport])\n \n if test x$use_glibc_compat != xno; then\n \n-  #__fdelt_chk's params and return type have changed from long unsigned int to long int.\n-  # See which one is present here.\n+  dnl __fdelt_chk's params and return type have changed from long unsigned int to long int.\n+  dnl See which one is present here.\n   AC_MSG_CHECKING(__fdelt_chk type)\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef _FORTIFY_SOURCE\n                     #undef _FORTIFY_SOURCE\n@@ -416,7 +416,7 @@ if test x$use_hardening != xno; then\n   AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"])\n \n   if test x$TARGET_OS != xwindows; then\n-    # All windows code is PIC, forcing it on just adds useless compile warnings\n+    dnl All windows code is PIC, forcing it on just adds useless compile warnings\n     AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n     AX_CHECK_LINK_FLAG([[-pie]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n   fi"
      }
    ]
  },
  {
    "sha": "13a33ef200a6f6f9bafb08899a69b5f1abdfca94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2EzM2VmMjAwYTZmNmY5YmFmYjA4ODk5YTY5YjVmMWFiZGZjYTk0",
    "commit": {
      "author": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-02-27T09:28:11Z"
      },
      "committer": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-03-07T22:43:47Z"
      },
      "message": "Group functionality with/enable, formatting, comment tidy up configure.ac.",
      "tree": {
        "sha": "7a023446906e4b435933188181d91002e74c2829",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a023446906e4b435933188181d91002e74c2829"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13a33ef200a6f6f9bafb08899a69b5f1abdfca94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13a33ef200a6f6f9bafb08899a69b5f1abdfca94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13a33ef200a6f6f9bafb08899a69b5f1abdfca94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13a33ef200a6f6f9bafb08899a69b5f1abdfca94/comments",
    "author": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c9c0f164deecdf9945c14c770f0ce62cf794ac8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c9c0f164deecdf9945c14c770f0ce62cf794ac8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c9c0f164deecdf9945c14c770f0ce62cf794ac8"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 60,
      "deletions": 51
    },
    "files": [
      {
        "sha": "881cf4e68c714a3d4f90d1fedbb6705983b36728",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 60,
        "deletions": 51,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13a33ef200a6f6f9bafb08899a69b5f1abdfca94/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13a33ef200a6f6f9bafb08899a69b5f1abdfca94/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=13a33ef200a6f6f9bafb08899a69b5f1abdfca94",
        "patch": "@@ -1,4 +1,4 @@\n-dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+dnl Require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n define(_CLIENT_VERSION_MINOR, 10)\n@@ -18,17 +18,17 @@ AH_TOP([#ifndef BITCOIN_CONFIG_H])\n AH_TOP([#define BITCOIN_CONFIG_H])\n AH_BOTTOM([#endif //BITCOIN_CONFIG_H])\n \n-dnl faketime breaks configure and is only needed for make. Disable it here.\n+dnl Faketime breaks configure and is only needed for make. Disable it here.\n unset FAKETIME\n \n dnl Automake init set-up and checks\n AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n \n-dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl Faketime messes with timestamps and causes configure to be re-run.\n dnl --disable-maintainer-mode can be used to bypass this.\n AM_MAINTAINER_MODE([enable])\n \n-dnl make the compilation flags quiet unless V=1 is used\n+dnl Make the compilation flags quiet unless V=1 is used\n m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n \n dnl Compiler checks (here before libtool).\n@@ -67,45 +67,30 @@ AC_PATH_PROG(HEXDUMP,hexdump)\n dnl pkg-config check.\n PKG_PROG_PKG_CONFIG\n \n-dnl Enable wallet\n+dnl Enable optional features:\n AC_ARG_ENABLE([wallet],\n   [AS_HELP_STRING([--enable-wallet],\n   [enable wallet (default is yes)])],\n   [enable_wallet=$enableval],\n   [enable_wallet=yes])\n \n-AC_ARG_WITH([miniupnpc],\n-  [AS_HELP_STRING([--with-miniupnpc],\n-  [enable UPNP (default is yes if libminiupnpc is found)])],\n-  [use_upnp=$withval],\n-  [use_upnp=auto])\n-\n AC_ARG_ENABLE([upnp-default],\n   [AS_HELP_STRING([--enable-upnp-default],\n   [if UPNP is enabled, turn it on at startup (default is no)])],\n   [use_upnp_default=$enableval],\n   [use_upnp_default=no])\n \n-AC_ARG_ENABLE(tests,\n-    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n-    [use_tests=$enableval],\n-    [use_tests=yes])\n-\n-AC_ARG_WITH([comparison-tool],\n-    AS_HELP_STRING([--with-comparison-tool],[path to java comparison tool (requires --enable-tests)]),\n-    [use_comparison_tool=$withval],\n-    [use_comparison_tool=no])\n+AC_ARG_ENABLE([tests],\n+  [AS_HELP_STRING([--enable-tests],\n+  [compile tests (default is yes)])],\n+  [use_tests=$enableval],\n+  [use_tests=yes])\n \n AC_ARG_ENABLE([comparison-tool-reorg-tests],\n-    AS_HELP_STRING([--enable-comparison-tool-reorg-tests],[enable expensive reorg tests in the comparison tool (default no)]),\n-    [use_comparison_tool_reorg_tests=$enableval],\n-    [use_comparison_tool_reorg_tests=no])\n-\n-AC_ARG_WITH([qrencode],\n-  [AS_HELP_STRING([--with-qrencode],\n-  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n-  [use_qr=$withval],\n-  [use_qr=auto])\n+  [AS_HELP_STRING([--enable-comparison-tool-reorg-tests],\n+  [enable expensive reorg tests in the comparison tool (default no)])],\n+  [use_comparison_tool_reorg_tests=$enableval],\n+  [use_comparison_tool_reorg_tests=no])\n \n AC_ARG_ENABLE([hardening],\n   [AS_HELP_STRING([--enable-hardening],\n@@ -137,14 +122,11 @@ AC_ARG_ENABLE([glibc-back-compat],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n-AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n-\n-dnl Enable debug\n AC_ARG_ENABLE([debug],\n-    [AS_HELP_STRING([--enable-debug],\n-                    [use debug compiler flags and macros (default is no)])],\n-    [enable_debug=$enableval],\n-    [enable_debug=no])\n+  [AS_HELP_STRING([--enable-debug],\n+  [use debug compiler flags and macros (default is no)])],\n+  [enable_debug=$enableval],\n+  [enable_debug=no])\n \n if test \"x$enable_debug\" = xyes; then\n     if test \"x$GCC\" = xyes; then\n@@ -164,24 +146,50 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n fi\n CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n-AC_ARG_WITH([utils],\n-  [AS_HELP_STRING([--with-utils],\n-  [build bitcoin-cli bitcoin-tx (default=yes)])],\n-  [build_bitcoin_utils=$withval],\n-  [build_bitcoin_utils=yes])\n-\n+dnl --with(out) optionals:\n AC_ARG_WITH([libs],\n   [AS_HELP_STRING([--with-libs],\n   [build libraries (default=yes)])],\n   [build_bitcoin_libs=$withval],\n   [build_bitcoin_libs=yes])\n \n+AC_ARG_WITH([utils],\n+  [AS_HELP_STRING([--with-utils],\n+  [build bitcoin-cli bitcoin-tx (default=yes)])],\n+  [build_bitcoin_utils=$withval],\n+  [build_bitcoin_utils=yes])\n+\n AC_ARG_WITH([daemon],\n   [AS_HELP_STRING([--with-daemon],\n   [build bitcoind daemon (default=yes)])],\n   [build_bitcoind=$withval],\n   [build_bitcoind=yes])\n \n+AC_ARG_WITH([miniupnpc],\n+  [AS_HELP_STRING([--with-miniupnpc],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$withval],\n+  [use_upnp=auto])\n+\n+AC_ARG_WITH([comparison-tool],\n+  [AS_HELP_STRING([--with-comparison-tool],\n+  [path to java comparison tool (requires --enable-tests)])],\n+  [use_comparison_tool=$withval],\n+  [use_comparison_tool=no])\n+\n+AC_ARG_WITH([qrencode],\n+  [AS_HELP_STRING([--with-qrencode],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$withval],\n+  [use_qr=auto])\n+\n+AC_ARG_WITH([protoc-bindir],\n+  [AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],\n+  [specify protoc bin path])],\n+  [protoc_bin_path=$withval],\n+  [])\n+\n+dnl Begin C++ interpreting\n AC_LANG_PUSH([C++])\n \n use_pkgconfig=yes\n@@ -254,7 +262,7 @@ case $host in\n        BUILD_OS=darwin\n        AC_CHECK_PROG([PORT],port, port)\n        if test x$PORT = xport; then\n-         dnl add default macports paths\n+         dnl Add default macports paths\n          CPPFLAGS=\"$CPPFLAGS -isystem /opt/local/include\"\n          LIBS=\"$LIBS -L/opt/local/lib\"\n          if test -d /opt/local/include/db48; then\n@@ -433,7 +441,7 @@ if test x$use_hardening != xno; then\n   OBJCXXFLAGS=\"$CXXFLAGS\"\n fi\n \n-dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+dnl This flag screws up non-darwin gcc even when the check fails. special-case it.\n if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n fi\n@@ -510,7 +518,7 @@ fi\n \n BITCOIN_QT_INIT\n \n-dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n+dnl Sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n BITCOIN_QT_CONFIGURE([$use_pkgconfig], [qt4])\n \n if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests = xnononono; then\n@@ -706,6 +714,7 @@ if test x$build_bitcoin_libs = xyes; then\n fi\n AC_MSG_RESULT($build_bitcoin_libs)\n \n+dnl End C++ interpretting\n AC_LANG_POP\n \n if test \"x$use_ccache\" != \"xno\"; then\n@@ -727,7 +736,7 @@ if test \"x$use_ccache\" = \"xyes\"; then\n     AX_CHECK_PREPROC_FLAG([-Qunused-arguments],[CPPFLAGS=\"-Qunused-arguments $CPPFLAGS\"])\n fi\n \n-dnl enable wallet\n+dnl Enable wallet\n AC_MSG_CHECKING([if wallet should be enabled])\n if test x$enable_wallet != xno; then\n   AC_MSG_RESULT(yes)\n@@ -737,7 +746,7 @@ else\n   AC_MSG_RESULT(no)\n fi\n \n-dnl enable upnp support\n+dnl Enable upnp support\n AC_MSG_CHECKING([whether to build with support for UPnP])\n if test x$have_miniupnpc = xno; then\n   if test x$use_upnp = xyes; then\n@@ -764,17 +773,17 @@ else\n   fi\n fi\n \n-dnl these are only used when qt is enabled\n+dnl These are only used when qt is enabled\n if test x$bitcoin_enable_qt != xno; then\n   BUILD_QT=qt\n-  dnl enable dbus support\n+  dnl Enable dbus support\n   AC_MSG_CHECKING([whether to build GUI with support for D-Bus])\n   if test x$bitcoin_enable_qt_dbus != xno; then\n     AC_DEFINE([USE_DBUS],[1],[Define if dbus support should be compiled in])\n   fi\n   AC_MSG_RESULT($bitcoin_enable_qt_dbus)\n \n-  dnl enable qr support\n+  dnl Enable qr support\n   AC_MSG_CHECKING([whether to build GUI with support for QR codes])\n   if test x$have_qrencode = xno; then\n     if test x$use_qr = xyes; then\n@@ -865,7 +874,7 @@ AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist src/t\n AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n AC_CONFIG_FILES([qa/pull-tester/tests-config.sh],[chmod +x qa/pull-tester/tests-config.sh])\n \n-dnl boost's m4 checks do something really nasty: they export these vars. As a\n+dnl Boost's m4 checks do something really nasty: they export these vars. As a\n dnl result, they leak into secp256k1's configure and crazy things happen.\n dnl Until this is fixed upstream and we've synced, we'll just un-export them.\n CPPFLAGS_TEMP=\"$CPPFLAGS\""
      }
    ]
  },
  {
    "sha": "b4ab7b078b2e79ff1dd723be407062fc47ab6d93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGFiN2IwNzhiMmU3OWZmMWRkNzIzYmU0MDcwNjJmYzQ3YWI2ZDkz",
    "commit": {
      "author": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-02-27T22:18:50Z"
      },
      "committer": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-03-07T22:48:00Z"
      },
      "message": "conf: formatting windows, darwin checks, AC_MSG_ERROR brackets.",
      "tree": {
        "sha": "9353ad9517db22bfe33cea09000bdac9cb4cb64f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9353ad9517db22bfe33cea09000bdac9cb4cb64f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4ab7b078b2e79ff1dd723be407062fc47ab6d93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4ab7b078b2e79ff1dd723be407062fc47ab6d93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4ab7b078b2e79ff1dd723be407062fc47ab6d93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4ab7b078b2e79ff1dd723be407062fc47ab6d93/comments",
    "author": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13a33ef200a6f6f9bafb08899a69b5f1abdfca94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13a33ef200a6f6f9bafb08899a69b5f1abdfca94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13a33ef200a6f6f9bafb08899a69b5f1abdfca94"
      }
    ],
    "stats": {
      "total": 170,
      "additions": 85,
      "deletions": 85
    },
    "files": [
      {
        "sha": "7177a3983bb414240aaf45d6c3fbbd713041badb",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 85,
        "deletions": 85,
        "changes": 170,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4ab7b078b2e79ff1dd723be407062fc47ab6d93/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4ab7b078b2e79ff1dd723be407062fc47ab6d93/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b4ab7b078b2e79ff1dd723be407062fc47ab6d93",
        "patch": "@@ -52,79 +52,79 @@ dnl Libtool init checks.\n LT_INIT([pic-only])\n \n dnl Check/return PATH for base programs.\n-AC_PATH_TOOL(AR, ar)\n-AC_PATH_TOOL(RANLIB, ranlib)\n-AC_PATH_TOOL(STRIP, strip)\n-AC_PATH_TOOL(GCOV, gcov)\n-AC_PATH_PROG(LCOV, lcov)\n-AC_PATH_PROG(JAVA, java)\n-AC_PATH_PROG(GENHTML, genhtml)\n-AC_PATH_PROG([GIT], [git])\n-AC_PATH_PROG(CCACHE,ccache)\n-AC_PATH_PROG(XGETTEXT,xgettext)\n-AC_PATH_PROG(HEXDUMP,hexdump)\n+AC_PATH_TOOL([AR],      ar)\n+AC_PATH_PROG([CCACHE],  ccache)\n+AC_PATH_TOOL([GCOV],    gcov)\n+AC_PATH_PROG([GENHTML], genhtml)\n+AC_PATH_PROG([GIT],     git)\n+AC_PATH_PROG([HEXDUMP], hexdump)\n+AC_PATH_PROG([JAVA],    java)\n+AC_PATH_PROG([LCOV],    lcov)\n+AC_PATH_TOOL([RANLIB],  ranlib)\n+AC_PATH_TOOL([STRIP],   strip)\n+AC_PATH_PROG([XGETTEXT],xgettext)\n \n dnl pkg-config check.\n PKG_PROG_PKG_CONFIG\n \n dnl Enable optional features:\n AC_ARG_ENABLE([wallet],\n   [AS_HELP_STRING([--enable-wallet],\n-  [enable wallet (default is yes)])],\n+     [enable wallet (default is yes)])],\n   [enable_wallet=$enableval],\n   [enable_wallet=yes])\n \n AC_ARG_ENABLE([upnp-default],\n   [AS_HELP_STRING([--enable-upnp-default],\n-  [if UPNP is enabled, turn it on at startup (default is no)])],\n+     [if UPNP is enabled, turn it on at startup (default is no)])],\n   [use_upnp_default=$enableval],\n   [use_upnp_default=no])\n \n AC_ARG_ENABLE([tests],\n   [AS_HELP_STRING([--enable-tests],\n-  [compile tests (default is yes)])],\n+     [compile tests (default is yes)])],\n   [use_tests=$enableval],\n   [use_tests=yes])\n \n AC_ARG_ENABLE([comparison-tool-reorg-tests],\n   [AS_HELP_STRING([--enable-comparison-tool-reorg-tests],\n-  [enable expensive reorg tests in the comparison tool (default no)])],\n+     [enable expensive reorg tests in the comparison tool (default no)])],\n   [use_comparison_tool_reorg_tests=$enableval],\n   [use_comparison_tool_reorg_tests=no])\n \n AC_ARG_ENABLE([hardening],\n   [AS_HELP_STRING([--enable-hardening],\n-  [attempt to harden the resulting executables (default is yes)])],\n+     [attempt to harden the resulting executables (default is yes)])],\n   [use_hardening=$enableval],\n   [use_hardening=yes])\n \n AC_ARG_ENABLE([reduce-exports],\n   [AS_HELP_STRING([--enable-reduce-exports],\n-  [attempt to reduce exported symbols in the resulting executables (default is no)])],\n+     [attempt to reduce exported symbols in the resulting executables (default is no)])],\n   [use_reduce_exports=$enableval],\n   [use_reduce_exports=no])\n \n AC_ARG_ENABLE([ccache],\n   [AS_HELP_STRING([--enable-ccache],\n-  [use ccache for building (default is yes if ccache is found)])],\n+     [use ccache for building (default is yes if ccache is found)])],\n   [use_ccache=$enableval],\n   [use_ccache=auto])\n \n AC_ARG_ENABLE([lcov],\n   [AS_HELP_STRING([--enable-lcov],\n-  [enable lcov testing (default is no)])],\n+     [enable lcov testing (default is no)])],\n   [use_lcov=yes],\n   [use_lcov=no])\n \n AC_ARG_ENABLE([glibc-back-compat],\n   [AS_HELP_STRING([--enable-glibc-back-compat],\n-  [enable backwards compatibility with glibc])],\n+     [enable backwards compatibility with glibc])],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n AC_ARG_ENABLE([debug],\n   [AS_HELP_STRING([--enable-debug],\n-  [use debug compiler flags and macros (default is no)])],\n+     [use debug compiler flags and macros (default is no)])],\n   [enable_debug=$enableval],\n   [enable_debug=no])\n \n@@ -149,43 +149,43 @@ CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO -D__STDC_FORMAT_\n dnl --with(out) optionals:\n AC_ARG_WITH([libs],\n   [AS_HELP_STRING([--with-libs],\n-  [build libraries (default=yes)])],\n+     [build libraries (default=yes)])],\n   [build_bitcoin_libs=$withval],\n   [build_bitcoin_libs=yes])\n \n AC_ARG_WITH([utils],\n   [AS_HELP_STRING([--with-utils],\n-  [build bitcoin-cli bitcoin-tx (default=yes)])],\n+     [build bitcoin-cli bitcoin-tx (default=yes)])],\n   [build_bitcoin_utils=$withval],\n   [build_bitcoin_utils=yes])\n \n AC_ARG_WITH([daemon],\n   [AS_HELP_STRING([--with-daemon],\n-  [build bitcoind daemon (default=yes)])],\n+     [build bitcoind daemon (default=yes)])],\n   [build_bitcoind=$withval],\n   [build_bitcoind=yes])\n \n AC_ARG_WITH([miniupnpc],\n   [AS_HELP_STRING([--with-miniupnpc],\n-  [enable UPNP (default is yes if libminiupnpc is found)])],\n+     [enable UPNP (default is yes if libminiupnpc is found)])],\n   [use_upnp=$withval],\n   [use_upnp=auto])\n \n AC_ARG_WITH([comparison-tool],\n   [AS_HELP_STRING([--with-comparison-tool],\n-  [path to java comparison tool (requires --enable-tests)])],\n+     [path to java comparison tool (requires --enable-tests)])],\n   [use_comparison_tool=$withval],\n   [use_comparison_tool=no])\n \n AC_ARG_WITH([qrencode],\n   [AS_HELP_STRING([--with-qrencode],\n-  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+     [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n   [use_qr=$withval],\n   [use_qr=auto])\n \n AC_ARG_WITH([protoc-bindir],\n   [AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],\n-  [specify protoc bin path])],\n+     [specify protoc bin path])],\n   [protoc_bin_path=$withval],\n   [])\n \n@@ -200,38 +200,38 @@ case $host in\n      use_pkgconfig=no\n \n      TARGET_OS=windows\n-     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n-     AC_CHECK_LIB([crypt32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([mingwthrd],[main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([kernel32], [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([user32],   [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([gdi32],    [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([comdlg32], [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([winspool], [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([winmm],    [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([shell32],  [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([comctl32], [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([ole32],    [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([oleaut32], [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([uuid],     [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([rpcrt4],   [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([advapi32], [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([ws2_32],   [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([mswsock],  [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([shlwapi],  [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([iphlpapi], [main],[], AC_MSG_ERROR([lib missing]))\n+     AC_CHECK_LIB([crypt32],  [main],[], AC_MSG_ERROR([lib missing]))\n \n      dnl -static is interpreted by libtool, where it has a different meaning.\n      dnl In libtool-speak, it's -all-static.\n      AX_CHECK_LINK_FLAG([[-static]],[LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"])\n \n      AC_PATH_PROG([MAKENSIS], [makensis], none)\n      if test x$MAKENSIS = xnone; then\n-       AC_MSG_WARN(\"makensis not found. Cannot create installer.\")\n+       AC_MSG_WARN([\"makensis not found. Cannot create installer.\"])\n      fi\n \n-     AC_PATH_TOOL(WINDRES, windres, none)\n+     AC_PATH_TOOL([WINDRES], [windres], none)\n      if test x$WINDRES = xnone; then\n-       AC_MSG_ERROR(\"windres not found\")\n+       AC_MSG_ERROR([\"windres not found\"])\n      fi\n \n      CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n@@ -242,9 +242,9 @@ case $host in\n      case $host in\n        i?86-*) WINDOWS_BITS=32 ;;\n        x86_64-*) WINDOWS_BITS=64 ;;\n-       *) AC_MSG_ERROR(\"Could not determine win32/win64 for installer\") ;;\n+       *) AC_MSG_ERROR([\"Could not determine win32/win64 for installer\"]) ;;\n      esac\n-     AC_SUBST(WINDOWS_BITS)\n+     AC_SUBST([WINDOWS_BITS])\n \n      dnl libtool insists upon adding -nostdlib and a list of objects/libs to link against.\n      dnl That breaks our ability to build dll's with static libgcc/libstdc++/libssp. Override\n@@ -260,7 +260,7 @@ case $host in\n      LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n      if  test x$cross_compiling != xyes; then\n        BUILD_OS=darwin\n-       AC_CHECK_PROG([PORT],port, port)\n+       AC_CHECK_PROG([PORT], [port], port)\n        if test x$PORT = xport; then\n          dnl Add default macports paths\n          CPPFLAGS=\"$CPPFLAGS -isystem /opt/local/include\"\n@@ -271,7 +271,7 @@ case $host in\n          fi\n        fi\n \n-       AC_CHECK_PROG([BREW],brew, brew)\n+       AC_CHECK_PROG([BREW], [brew], brew)\n        if test x$BREW = xbrew; then\n          dnl These Homebrew packages may be keg-only, meaning that they won't be found\n          dnl in expected paths because they may conflict with system files. Ask\n@@ -303,7 +303,7 @@ case $host in\n          *)\n            AC_PATH_TOOL([INSTALLNAMETOOL], [install_name_tool], install_name_tool)\n            AC_PATH_TOOL([OTOOL], [otool], otool)\n-           AC_PATH_PROGS([GENISOIMAGE], [genisoimage mkisofs],genisoimage)\n+           AC_PATH_PROGS([GENISOIMAGE], [genisoimage mkisofs], genisoimage)\n \n            dnl libtool will try to strip the static lib, which is a problem for\n            dnl cross-builds because strip attempts to call a hard-coded ld,\n@@ -325,12 +325,12 @@ case $host in\n esac\n \n if test x$use_comparison_tool != xno; then\n-  AC_SUBST(JAVA_COMPARISON_TOOL, $use_comparison_tool)\n+  AC_SUBST([JAVA_COMPARISON_TOOL], [$use_comparison_tool])\n fi\n \n if test x$use_comparison_tool_reorg_tests != xno; then\n   if test x$use_comparison_tool = x; then\n-    AC_MSG_ERROR(\"comparison tool reorg tests but comparison tool was not specified\")\n+    AC_MSG_ERROR([\"comparison tool reorg tests but comparison tool was not specified\"])\n   fi\n   AC_SUBST(COMPARISON_TOOL_REORG_TESTS, 1)\n else\n@@ -339,23 +339,23 @@ fi\n \n if test x$use_lcov = xyes; then\n   if test x$LCOV = x; then\n-    AC_MSG_ERROR(\"lcov testing requested but lcov not found\")\n+    AC_MSG_ERROR([\"lcov testing requested but lcov not found\"])\n   fi\n   if test x$GCOV = x; then\n-    AC_MSG_ERROR(\"lcov testing requested but gcov not found\")\n+    AC_MSG_ERROR([\"lcov testing requested but gcov not found\"])\n   fi\n   if test x$JAVA = x; then\n-    AC_MSG_ERROR(\"lcov testing requested but java not found\")\n+    AC_MSG_ERROR([\"lcov testing requested but java not found\"])\n   fi\n   if test x$GENHTML = x; then\n-    AC_MSG_ERROR(\"lcov testing requested but genhtml not found\")\n+    AC_MSG_ERROR([\"lcov testing requested but genhtml not found\"])\n   fi\n   if test x$use_comparison_tool = x; then\n-    AC_MSG_ERROR(\"lcov testing requested but comparison tool was not specified\")\n+    AC_MSG_ERROR([\"lcov testing requested but comparison tool was not specified\"])\n   fi\n   LCOV=\"$LCOV --gcov-tool=$GCOV\"\n   AX_CHECK_COMPILE_FLAG([--coverage],[CXXFLAGS=\"$CXXFLAGS --coverage\"],\n-    [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\n+    [AC_MSG_ERROR([\"lcov testing requested but --coverage flag does not work\"])])\n fi\n \n dnl Check for endianness\n@@ -431,7 +431,7 @@ if test x$use_hardening != xno; then\n \n   case $host in\n     *mingw*)\n-       AC_CHECK_LIB([ssp],      [main],, AC_MSG_ERROR(lib missing))\n+       AC_CHECK_LIB([ssp],      [main],, AC_MSG_ERROR([lib missing]))\n     ;;\n   esac\n \n@@ -441,7 +441,7 @@ if test x$use_hardening != xno; then\n   OBJCXXFLAGS=\"$CXXFLAGS\"\n fi\n \n-dnl This flag screws up non-darwin gcc even when the check fails. special-case it.\n+dnl This flag screws up non-darwin gcc even when the check fails: special-case it.\n if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n fi\n@@ -567,7 +567,7 @@ fi\n if test x$use_tests = xyes; then\n \n   if test x$HEXDUMP = x; then\n-    AC_MSG_ERROR(hexdump is required for tests)\n+    AC_MSG_ERROR([hexdump is required for tests])\n   fi\n \n \n@@ -651,35 +651,35 @@ CPPFLAGS=\"$TEMP_CPPFLAGS\"\n fi\n \n if test x$boost_sleep != xyes; then\n-  AC_MSG_ERROR(No working boost sleep implementation found.)\n+  AC_MSG_ERROR([No working boost sleep implementation found.])\n fi\n \n fi\n \n if test x$use_pkgconfig = xyes; then\n \n   if test x\"$PKG_CONFIG\" = \"x\"; then\n-    AC_MSG_ERROR(pkg-config not found.)\n+    AC_MSG_ERROR([pkg-config not found.])\n   fi\n \n   : #NOP\n   m4_ifdef(\n     [PKG_CHECK_MODULES],\n     [\n-      PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl  not found.)])\n-      PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto  not found.)])\n+      PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR([openssl  not found.])])\n+      PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR([libcrypto  not found.])])\n       BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL(libprotobuf not found)])])\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n       fi\n     ]\n   )\n else\n-  AC_CHECK_HEADER([openssl/crypto.h],,AC_MSG_ERROR(libcrypto headers missing))\n-  AC_CHECK_LIB([crypto],      [main],CRYPTO_LIBS=-lcrypto, AC_MSG_ERROR(libcrypto missing))\n+  AC_CHECK_HEADER([openssl/crypto.h],,AC_MSG_ERROR([libcrypto headers missing]))\n+  AC_CHECK_LIB([crypto],      [main],CRYPTO_LIBS=-lcrypto, AC_MSG_ERROR([libcrypto missing]))\n \n-  AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR(libssl headers missing),)\n-  AC_CHECK_LIB([ssl],         [main],SSL_LIBS=-lssl, AC_MSG_ERROR(libssl missing))\n+  AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR([libssl headers missing]),)\n+  AC_CHECK_LIB([ssl],         [main],SSL_LIBS=-lssl, AC_MSG_ERROR([libssl missing]))\n \n   BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n   if test x$use_qr != xno; then\n@@ -692,20 +692,12 @@ CFLAGS_TEMP=\"$CFLAGS\"\n LIBS_TEMP=\"$LIBS\"\n CFLAGS=\"$CFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n LIBS=\"$LIBS $SSL_LIBS $CRYPTO_LIBS\"\n-AC_CHECK_HEADER([openssl/ec.h],, AC_MSG_ERROR(OpenSSL ec header missing),)\n+AC_CHECK_HEADER([openssl/ec.h],, AC_MSG_ERROR([OpenSSL ec header missing]),)\n CFLAGS=\"$CFLAGS_TEMP\"\n LIBS=\"$LIBS_TEMP\"\n \n BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n \n-AC_MSG_CHECKING([whether to build bitcoind])\n-AM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\n-AC_MSG_RESULT($build_bitcoind)\n-\n-AC_MSG_CHECKING([whether to build utils (bitcoin-cli bitcoin-tx)])\n-AM_CONDITIONAL([BUILD_BITCOIN_UTILS], [test x$build_bitcoin_utils = xyes])\n-AC_MSG_RESULT($build_bitcoin_utils)\n-\n AC_MSG_CHECKING([whether to build libraries])\n AM_CONDITIONAL([BUILD_BITCOIN_LIBS], [test x$build_bitcoin_libs = xyes])\n if test x$build_bitcoin_libs = xyes; then\n@@ -714,6 +706,14 @@ if test x$build_bitcoin_libs = xyes; then\n fi\n AC_MSG_RESULT($build_bitcoin_libs)\n \n+AC_MSG_CHECKING([whether to build utils (bitcoin-cli bitcoin-tx)])\n+AM_CONDITIONAL([BUILD_BITCOIN_UTILS], [test x$build_bitcoin_utils = xyes])\n+AC_MSG_RESULT($build_bitcoin_utils)\n+\n+AC_MSG_CHECKING([whether to build bitcoind])\n+AM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\n+AC_MSG_RESULT($build_bitcoind)\n+\n dnl End C++ interpretting\n AC_LANG_POP\n \n@@ -750,7 +750,7 @@ dnl Enable upnp support\n AC_MSG_CHECKING([whether to build with support for UPnP])\n if test x$have_miniupnpc = xno; then\n   if test x$use_upnp = xyes; then\n-     AC_MSG_ERROR(\"UPnP requested but cannot be built. use --without-miniupnpc\")\n+     AC_MSG_ERROR([\"UPnP requested but cannot be built. use --without-miniupnpc\"])\n   fi\n   AC_MSG_RESULT(no)\n else\n@@ -787,7 +787,7 @@ if test x$bitcoin_enable_qt != xno; then\n   AC_MSG_CHECKING([whether to build GUI with support for QR codes])\n   if test x$have_qrencode = xno; then\n     if test x$use_qr = xyes; then\n-     AC_MSG_ERROR(\"QR support requested but cannot be built. use --without-qrencode\")\n+     AC_MSG_ERROR([\"QR support requested but cannot be built. use --without-qrencode\"])\n     fi\n     AC_MSG_RESULT(no)\n   else"
      }
    ]
  },
  {
    "sha": "b04d4a1d543827600b9ebd30d25ec5270aea3e5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDRkNGExZDU0MzgyNzYwMGI5ZWJkMzBkMjVlYzUyNzBhZWEzZTVi",
    "commit": {
      "author": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-02-27T23:27:34Z"
      },
      "committer": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-03-07T22:51:33Z"
      },
      "message": "conf: Formatting for compiler, build flags, base header/libs checks.",
      "tree": {
        "sha": "d0217f12579fb5155166c5ca99fb1e19403e0784",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0217f12579fb5155166c5ca99fb1e19403e0784"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b04d4a1d543827600b9ebd30d25ec5270aea3e5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b04d4a1d543827600b9ebd30d25ec5270aea3e5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b04d4a1d543827600b9ebd30d25ec5270aea3e5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b04d4a1d543827600b9ebd30d25ec5270aea3e5b/comments",
    "author": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4ab7b078b2e79ff1dd723be407062fc47ab6d93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4ab7b078b2e79ff1dd723be407062fc47ab6d93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4ab7b078b2e79ff1dd723be407062fc47ab6d93"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 37,
      "deletions": 44
    },
    "files": [
      {
        "sha": "d4472133d3e0e6f3aa6e2d7f7b9a5118e07845c8",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 37,
        "deletions": 44,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b04d4a1d543827600b9ebd30d25ec5270aea3e5b/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b04d4a1d543827600b9ebd30d25ec5270aea3e5b/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b04d4a1d543827600b9ebd30d25ec5270aea3e5b",
        "patch": "@@ -332,9 +332,9 @@ if test x$use_comparison_tool_reorg_tests != xno; then\n   if test x$use_comparison_tool = x; then\n     AC_MSG_ERROR([\"comparison tool reorg tests but comparison tool was not specified\"])\n   fi\n-  AC_SUBST(COMPARISON_TOOL_REORG_TESTS, 1)\n+  AC_SUBST([COMPARISON_TOOL_REORG_TESTS], 1)\n else\n-  AC_SUBST(COMPARISON_TOOL_REORG_TESTS, 0)\n+  AC_SUBST([COMPARISON_TOOL_REORG_TESTS], 0)\n fi\n \n if test x$use_lcov = xyes; then\n@@ -354,7 +354,7 @@ if test x$use_lcov = xyes; then\n     AC_MSG_ERROR([\"lcov testing requested but comparison tool was not specified\"])\n   fi\n   LCOV=\"$LCOV --gcov-tool=$GCOV\"\n-  AX_CHECK_COMPILE_FLAG([--coverage],[CXXFLAGS=\"$CXXFLAGS --coverage\"],\n+  AX_CHECK_COMPILE_FLAG([--coverage], [CXXFLAGS=\"$CXXFLAGS --coverage\"],\n     [AC_MSG_ERROR([\"lcov testing requested but --coverage flag does not work\"])])\n fi\n \n@@ -393,7 +393,7 @@ if test x$use_glibc_compat != xno; then\n \n   dnl __fdelt_chk's params and return type have changed from long unsigned int to long int.\n   dnl See which one is present here.\n-  AC_MSG_CHECKING(__fdelt_chk type)\n+  AC_MSG_CHECKING([__fdelt_chk type])\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef _FORTIFY_SOURCE\n                     #undef _FORTIFY_SOURCE\n                   #endif\n@@ -402,21 +402,18 @@ if test x$use_glibc_compat != xno; then\n      extern \"C\" long unsigned int __fdelt_warn(long unsigned int);]],[[]])],\n     [ fdelt_type=\"long unsigned int\"],\n     [ fdelt_type=\"long int\"])\n-  AC_MSG_RESULT($fdelt_type)\n-  AC_DEFINE_UNQUOTED(FDELT_TYPE, $fdelt_type,[parameter and return value type for __fdelt_chk])\n+  AC_MSG_RESULT([$fdelt_type])\n+  AC_DEFINE_UNQUOTED([FDELT_TYPE], [$fdelt_type], [parameter and return value type for __fdelt_chk])\n \n fi\n \n if test x$use_hardening != xno; then\n-  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n-  AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n-\n-  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[\n-    AX_CHECK_PREPROC_FLAG([-U_FORTIFY_SOURCE],[\n-      HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -U_FORTIFY_SOURCE\"\n-    ])\n-    HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"\n-  ])\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector], [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fstack-protector-all], [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+\n+  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],\n+    [AX_CHECK_PREPROC_FLAG([-U_FORTIFY_SOURCE], [HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -U_FORTIFY_SOURCE\"])]\n+    [HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"])\n \n   AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n   AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n@@ -425,13 +422,13 @@ if test x$use_hardening != xno; then\n \n   if test x$TARGET_OS != xwindows; then\n     dnl All windows code is PIC, forcing it on just adds useless compile warnings\n-    AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+    AX_CHECK_COMPILE_FLAG([-fPIE], [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n     AX_CHECK_LINK_FLAG([[-pie]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n   fi\n \n   case $host in\n     *mingw*)\n-       AC_CHECK_LIB([ssp],      [main],, AC_MSG_ERROR([lib missing]))\n+       AC_CHECK_LIB([ssp], [main], [], AC_MSG_ERROR([lib missing]))\n     ;;\n   esac\n \n@@ -447,48 +444,44 @@ if test x$TARGET_OS = xdarwin; then\n fi\n \n AC_CHECK_HEADERS([endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n-AC_SEARCH_LIBS([getaddrinfo_a], [anl], [AC_DEFINE(HAVE_GETADDRINFO_A, 1, [Define this symbol if you have getaddrinfo_a])])\n-AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE(HAVE_INET_PTON, 1, [Define this symbol if you have inet_pton])])\n+\n+AC_SEARCH_LIBS([getaddrinfo_a], [anl], [AC_DEFINE([HAVE_GETADDRINFO_A], [1], [Define this symbol if you have getaddrinfo_a])])\n+AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE([HAVE_INET_PTON], [1], [Define this symbol if you have inet_pton])])\n \n AC_CHECK_DECLS([strnlen])\n \n-AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n-\t\t[#if HAVE_ENDIAN_H\n-                 #include <endian.h>\n-                 #endif])\n+AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],[],[],\n+  [#if HAVE_ENDIAN_H\n+  #include <endian.h>\n+  #endif])\n \n AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n \t\t[#if HAVE_BYTESWAP_H\n                  #include <byteswap.h>\n                  #endif])\n \n dnl Check for MSG_NOSIGNAL\n-AC_MSG_CHECKING(for MSG_NOSIGNAL)\n+AC_MSG_CHECKING([for MSG_NOSIGNAL])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],\n- [[ int f = MSG_NOSIGNAL; ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n- [ AC_MSG_RESULT(no)]\n-)\n+                       [[ int f = MSG_NOSIGNAL; ]])],\n+  [AC_DEFINE([HAVE_MSG_NOSIGNAL], [1], [Define this symbol if you have MSG_NOSIGNAL])\n+   AC_MSG_RESULT(yes)],\n+  [AC_MSG_RESULT(no)])\n \n-AC_SEARCH_LIBS([clock_gettime],[rt])\n+AC_SEARCH_LIBS([clock_gettime], [rt])\n \n AC_MSG_CHECKING([for visibility attribute])\n AC_LINK_IFELSE([AC_LANG_SOURCE([\n-  int foo_def( void ) __attribute__((visibility(\"default\")));\n-  int main(){}\n-  ])],\n-  [\n-    AC_DEFINE(HAVE_VISIBILITY_ATTRIBUTE,1,[Define if the visibility attribute is supported.])\n-    AC_MSG_RESULT(yes)\n-  ],\n-  [\n-    AC_MSG_RESULT(no)\n-    if test x$use_reduce_exports = xyes; then\n-      AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduce-exports.])\n-    fi\n-  ]\n-)\n-\n+                    int foo_def( void ) __attribute__((visibility(\"default\")));\n+                    int main(){}\n+                    ])],\n+  [AC_DEFINE([HAVE_VISIBILITY_ATTRIBUTE], [1], [Define if the visibility attribute is supported.])\n+   AC_MSG_RESULT(yes)],\n+  [AC_MSG_RESULT(no)\n+   if test x$use_reduce_exports = xyes; then\n+     AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduce-exports.])\n+   fi\n+  ])\n if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n   [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])"
      }
    ]
  },
  {
    "sha": "79d40bf58f7dc66b49f777c34c2f7dbbce66930c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OWQ0MGJmNThmN2RjNjZiNDlmNzc3YzM0YzJmN2RiYmNlNjY5MzBj",
    "commit": {
      "author": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-03-02T09:45:58Z"
      },
      "committer": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-03-07T22:53:26Z"
      },
      "message": "conf: formatting for sys header/libs, bdb, miniupnpc, boost check logic.",
      "tree": {
        "sha": "b27700c1bacbcd773cd92fde9af414e3245ef885",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b27700c1bacbcd773cd92fde9af414e3245ef885"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79d40bf58f7dc66b49f777c34c2f7dbbce66930c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79d40bf58f7dc66b49f777c34c2f7dbbce66930c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79d40bf58f7dc66b49f777c34c2f7dbbce66930c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79d40bf58f7dc66b49f777c34c2f7dbbce66930c/comments",
    "author": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b04d4a1d543827600b9ebd30d25ec5270aea3e5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b04d4a1d543827600b9ebd30d25ec5270aea3e5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b04d4a1d543827600b9ebd30d25ec5270aea3e5b"
      }
    ],
    "stats": {
      "total": 228,
      "additions": 111,
      "deletions": 117
    },
    "files": [
      {
        "sha": "771bbc907e8c87fd32dc6a84184248d407e4e6e9",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 111,
        "deletions": 117,
        "changes": 228,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79d40bf58f7dc66b49f777c34c2f7dbbce66930c/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79d40bf58f7dc66b49f777c34c2f7dbbce66930c/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=79d40bf58f7dc66b49f777c34c2f7dbbce66930c",
        "patch": "@@ -447,9 +447,9 @@ AC_CHECK_HEADERS([endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/ty\n \n AC_SEARCH_LIBS([getaddrinfo_a], [anl], [AC_DEFINE([HAVE_GETADDRINFO_A], [1], [Define this symbol if you have getaddrinfo_a])])\n AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE([HAVE_INET_PTON], [1], [Define this symbol if you have inet_pton])])\n+AC_SEARCH_LIBS([clock_gettime], [rt])\n \n AC_CHECK_DECLS([strnlen])\n-\n AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],[],[],\n   [#if HAVE_ENDIAN_H\n   #include <endian.h>\n@@ -468,8 +468,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],\n    AC_MSG_RESULT(yes)],\n   [AC_MSG_RESULT(no)])\n \n-AC_SEARCH_LIBS([clock_gettime], [rt])\n-\n+dnl Checks for symbol visibility/reduced exports\n AC_MSG_CHECKING([for visibility attribute])\n AC_LINK_IFELSE([AC_LANG_SOURCE([\n                     int foo_def( void ) __attribute__((visibility(\"default\")));\n@@ -491,22 +490,21 @@ LEVELDB_CPPFLAGS=\n LIBLEVELDB=\n LIBMEMENV=\n AM_CONDITIONAL([EMBEDDED_LEVELDB],[true])\n-AC_SUBST(LEVELDB_CPPFLAGS)\n-AC_SUBST(LIBLEVELDB)\n-AC_SUBST(LIBMEMENV)\n+AC_SUBST([LEVELDB_CPPFLAGS])\n+AC_SUBST([LIBLEVELDB])\n+AC_SUBST([LIBMEMENV])\n \n if test x$enable_wallet != xno; then\n-    dnl Check for libdb_cxx only if wallet enabled\n-    BITCOIN_FIND_BDB48\n+  dnl Check for libdb_cxx only if wallet enabled\n+  BITCOIN_FIND_BDB48\n fi\n \n dnl Check for libminiupnpc (optional)\n if test x$use_upnp != xno; then\n   AC_CHECK_HEADERS(\n     [miniupnpc/miniwget.h miniupnpc/miniupnpc.h miniupnpc/upnpcommands.h miniupnpc/upnperrors.h],\n-    [AC_CHECK_LIB([miniupnpc], [main],[MINIUPNPC_LIBS=-lminiupnpc], [have_miniupnpc=no])],\n-    [have_miniupnpc=no]\n-  )\n+    [AC_CHECK_LIB([miniupnpc], [main], [MINIUPNPC_LIBS=-lminiupnpc], [have_miniupnpc=no])],\n+    [have_miniupnpc=no])\n fi\n \n BITCOIN_QT_INIT\n@@ -515,41 +513,39 @@ dnl Sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n BITCOIN_QT_CONFIGURE([$use_pkgconfig], [qt4])\n \n if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests = xnononono; then\n-    use_boost=no\n+  use_boost=no\n else\n-    use_boost=yes\n+  use_boost=yes\n fi\n \n if test x$use_boost = xyes; then\n-\n-dnl Check for boost libs\n-AX_BOOST_BASE\n-AX_BOOST_SYSTEM\n-AX_BOOST_FILESYSTEM\n-AX_BOOST_PROGRAM_OPTIONS\n-AX_BOOST_THREAD\n-AX_BOOST_CHRONO\n-\n-\n-if test x$use_reduce_exports = xyes; then\n-  AC_MSG_CHECKING([for working boost reduced exports])\n-  TEMP_CPPFLAGS=\"$CPPFLAGS\"\n-  CPPFLAGS=\"$BOOST_CPPFLAGS $CPPFLAGS\"\n-  AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[\n-      @%:@include <boost/version.hpp>\n-    ]], [[\n-      #if BOOST_VERSION >= 104900\n-      // Everything is okay\n-      #else\n-      #  error Boost version is too old\n-      #endif\n-    ]])],[\n-      AC_MSG_RESULT(yes)\n-    ],[\n-    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduce-exports.])\n-  ])\n-  CPPFLAGS=\"$TEMP_CPPFLAGS\"\n-fi\n+  dnl Check for boost libs\n+  AX_BOOST_BASE\n+  AX_BOOST_SYSTEM\n+  AX_BOOST_FILESYSTEM\n+  AX_BOOST_PROGRAM_OPTIONS\n+  AX_BOOST_THREAD\n+  AX_BOOST_CHRONO\n+\n+  if test x$use_reduce_exports = xyes; then\n+    AC_MSG_CHECKING([for working boost reduced exports])\n+    TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+    CPPFLAGS=\"$BOOST_CPPFLAGS $CPPFLAGS\"\n+    AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[\n+                           @%:@include <boost/version.hpp>]],\n+                           [[\n+                           #if BOOST_VERSION >= 104900\n+                           // Everything is okay\n+                           #else\n+                           #  error Boost version is too old\n+                           #endif\n+                           ]])],\n+      [AC_MSG_RESULT(yes)],\n+      [\n+       AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduce-exports.])\n+      ])\n+    CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+  fi\n fi\n \n if test x$use_reduce_exports = xyes; then\n@@ -563,90 +559,88 @@ if test x$use_tests = xyes; then\n     AC_MSG_ERROR([hexdump is required for tests])\n   fi\n \n-\n   if test x$use_boost = xyes; then\n \n-  AX_BOOST_UNIT_TEST_FRAMEWORK\n-\n-  dnl Determine if -DBOOST_TEST_DYN_LINK is needed\n-  AC_MSG_CHECKING([for dynamic linked boost test])\n-  TEMP_LIBS=\"$LIBS\"\n-  LIBS=\"$LIBS $BOOST_LDFLAGS $BOOST_UNIT_TEST_FRAMEWORK_LIB\"\n-  TEMP_CPPFLAGS=\"$CPPFLAGS\"\n-  CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-  AC_LINK_IFELSE([AC_LANG_SOURCE([\n-       #define BOOST_TEST_DYN_LINK\n-       #define BOOST_TEST_MAIN\n-        #include <boost/test/unit_test.hpp>\n-\n-       ])],\n-    [AC_MSG_RESULT(yes)]\n-    [TESTDEFS=\"$TESTDEFS -DBOOST_TEST_DYN_LINK\"],\n-    [AC_MSG_RESULT(no)])\n-  LIBS=\"$TEMP_LIBS\"\n-  CPPFLAGS=\"$TEMP_CPPFLAGS\"\n-\n+    AX_BOOST_UNIT_TEST_FRAMEWORK\n+\n+    dnl Determine if -DBOOST_TEST_DYN_LINK is needed\n+    AC_MSG_CHECKING([for dynamic linked boost test])\n+    TEMP_LIBS=\"$LIBS\"\n+    LIBS=\"$LIBS $BOOST_LDFLAGS $BOOST_UNIT_TEST_FRAMEWORK_LIB\"\n+    TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+    CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+    AC_LINK_IFELSE([AC_LANG_SOURCE([\n+                       #define BOOST_TEST_DYN_LINK\n+                       #define BOOST_TEST_MAIN\n+                       #include <boost/test/unit_test.hpp>\n+                       ])],\n+      [AC_MSG_RESULT(yes)]\n+      [TESTDEFS=\"$TESTDEFS -DBOOST_TEST_DYN_LINK\"],\n+      [AC_MSG_RESULT(no)])\n+    LIBS=\"$TEMP_LIBS\"\n+    CPPFLAGS=\"$TEMP_CPPFLAGS\"\n   fi\n fi\n \n if test x$use_boost = xyes; then\n \n-BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB\"\n-\n-dnl Boost >= 1.50 uses sleep_for rather than the now-deprecated sleep, however\n-dnl it was broken from 1.50 to 1.52 when backed by nanosleep. Use sleep_for if\n-dnl a working version is available, else fall back to sleep. sleep was removed\n-dnl after 1.56.\n-dnl If neither is available, abort.\n-dnl If sleep_for is used, boost_chrono becomes a requirement.\n-if test x$ax_cv_boost_chrono = xyes; then\n-TEMP_LIBS=\"$LIBS\"\n-LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB $LIBS\"\n-TEMP_CPPFLAGS=\"$CPPFLAGS\"\n-CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n-  #include <boost/thread/thread.hpp>\n-  #include <boost/version.hpp>\n-  ]],[[\n-  #if BOOST_VERSION >= 105000 && (!defined(BOOST_HAS_NANOSLEEP) || BOOST_VERSION >= 105200)\n-      boost::this_thread::sleep_for(boost::chrono::milliseconds(0));\n-  #else\n-   choke me\n-  #endif\n-  ]])],\n-  [boost_sleep=yes; BOOST_LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB\";\n-     AC_DEFINE(HAVE_WORKING_BOOST_SLEEP_FOR, 1, [Define this symbol if boost sleep_for works])],\n-  [boost_sleep=no])\n-LIBS=\"$TEMP_LIBS\"\n-CPPFLAGS=\"$TEMP_CPPFLAGS\"\n-fi\n-\n-if test x$boost_sleep != xyes; then\n-TEMP_LIBS=\"$LIBS\"\n-LIBS=\"$BOOST_LIBS $LIBS\"\n-TEMP_CPPFLAGS=\"$CPPFLAGS\"\n-CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n-  #include <boost/version.hpp>\n-  #include <boost/thread.hpp>\n-  #include <boost/date_time/posix_time/posix_time_types.hpp>\n-  ]],[[\n-  #if BOOST_VERSION <= 105600\n-      boost::this_thread::sleep(boost::posix_time::milliseconds(0));\n-  #else\n-   choke me\n-  #endif\n-  ]])],\n-  [boost_sleep=yes; AC_DEFINE(HAVE_WORKING_BOOST_SLEEP, 1, [Define this symbol if boost sleep works])],\n-  [boost_sleep=no])\n-LIBS=\"$TEMP_LIBS\"\n-CPPFLAGS=\"$TEMP_CPPFLAGS\"\n-fi\n+  BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB\"\n+\n+  dnl Boost >= 1.50 uses sleep_for rather than the now-deprecated sleep, however\n+  dnl it was broken from 1.50 to 1.52 when backed by nanosleep. Use sleep_for if\n+  dnl a working version is available, else fall back to sleep. sleep was removed\n+  dnl after 1.56.\n+  dnl If neither is available, abort.\n+  dnl If sleep_for is used, boost_chrono becomes a requirement.\n+  if test x$ax_cv_boost_chrono = xyes; then\n+    TEMP_LIBS=\"$LIBS\"\n+    LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB $LIBS\"\n+    TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+    CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+    AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n+                        #include <boost/thread/thread.hpp>\n+                        #include <boost/version.hpp>]],\n+                        [[\n+                        #if BOOST_VERSION >= 105000 && (!defined(BOOST_HAS_NANOSLEEP) || BOOST_VERSION >= 105200)\n+                            boost::this_thread::sleep_for(boost::chrono::milliseconds(0));\n+                        #else\n+                         choke me\n+                        #endif\n+                        ]])],\n+      [boost_sleep=yes\n+      BOOST_LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB\"\n+      AC_DEFINE([HAVE_WORKING_BOOST_SLEEP_FOR], [1], [Define this symbol if boost sleep_for works])],\n+      [boost_sleep=no])\n+    LIBS=\"$TEMP_LIBS\"\n+    CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+  fi\n \n-if test x$boost_sleep != xyes; then\n-  AC_MSG_ERROR([No working boost sleep implementation found.])\n-fi\n+  if test x$boost_sleep != xyes; then\n+    TEMP_LIBS=\"$LIBS\"\n+    LIBS=\"$BOOST_LIBS $LIBS\"\n+    TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+    CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+    AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n+                        #include <boost/version.hpp>\n+                        #include <boost/thread.hpp>\n+                        #include <boost/date_time/posix_time/posix_time_types.hpp>]],\n+                        [[\n+                        #if BOOST_VERSION <= 105600\n+                            boost::this_thread::sleep(boost::posix_time::milliseconds(0));\n+                        #else\n+                         choke me\n+                        #endif\n+                        ]])],\n+      [boost_sleep=yes\n+      AC_DEFINE([HAVE_WORKING_BOOST_SLEEP], [1], [Define this symbol if boost sleep works])],\n+      [boost_sleep=no])\n+    LIBS=\"$TEMP_LIBS\"\n+    CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+  fi\n \n+  if test x$boost_sleep != xyes; then\n+    AC_MSG_ERROR([No working boost sleep implementation found.])\n+  fi\n fi\n \n if test x$use_pkgconfig = xyes; then"
      }
    ]
  },
  {
    "sha": "7644e69ab2b5218a2ff1dd01fe15e09be55cfeb0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjQ0ZTY5YWIyYjUyMThhMmZmMWRkMDFmZTE1ZTA5YmU1NWNmZWIw",
    "commit": {
      "author": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-03-02T10:35:34Z"
      },
      "committer": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-03-07T22:53:26Z"
      },
      "message": "conf: formatting ssl/crypto checks, build options checks and outputs.",
      "tree": {
        "sha": "f8181b0d8778ee5e1b9ed3e307b187fb14111226",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8181b0d8778ee5e1b9ed3e307b187fb14111226"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7644e69ab2b5218a2ff1dd01fe15e09be55cfeb0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7644e69ab2b5218a2ff1dd01fe15e09be55cfeb0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7644e69ab2b5218a2ff1dd01fe15e09be55cfeb0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7644e69ab2b5218a2ff1dd01fe15e09be55cfeb0/comments",
    "author": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79d40bf58f7dc66b49f777c34c2f7dbbce66930c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79d40bf58f7dc66b49f777c34c2f7dbbce66930c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79d40bf58f7dc66b49f777c34c2f7dbbce66930c"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 75,
      "deletions": 67
    },
    "files": [
      {
        "sha": "aee2f9aeeed9efda7e73a6055dde6270b3e89ef9",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 75,
        "deletions": 67,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7644e69ab2b5218a2ff1dd01fe15e09be55cfeb0/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7644e69ab2b5218a2ff1dd01fe15e09be55cfeb0/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=7644e69ab2b5218a2ff1dd01fe15e09be55cfeb0",
        "patch": "@@ -653,42 +653,41 @@ if test x$use_pkgconfig = xyes; then\n   m4_ifdef(\n     [PKG_CHECK_MODULES],\n     [\n-      PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR([openssl  not found.])])\n-      PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR([libcrypto  not found.])])\n-      BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL(libprotobuf not found)])])\n+      PKG_CHECK_MODULES([SSL], [libssl], [], [AC_MSG_ERROR([openssl  not found.])])\n+      PKG_CHECK_MODULES([CRYPTO], [libcrypto], [], [AC_MSG_ERROR([libcrypto  not found.])])\n+      BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL([libprotobuf not found])])])\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n       fi\n-    ]\n-  )\n+    ])\n else\n-  AC_CHECK_HEADER([openssl/crypto.h],,AC_MSG_ERROR([libcrypto headers missing]))\n-  AC_CHECK_LIB([crypto],      [main],CRYPTO_LIBS=-lcrypto, AC_MSG_ERROR([libcrypto missing]))\n+  AC_CHECK_HEADER([openssl/crypto.h], [], [AC_MSG_ERROR([libcrypto headers missing])])\n+  AC_CHECK_LIB([crypto], [main], [CRYPTO_LIBS=-lcrypto], [AC_MSG_ERROR([libcrypto missing])])\n \n-  AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR([libssl headers missing]),)\n-  AC_CHECK_LIB([ssl],         [main],SSL_LIBS=-lssl, AC_MSG_ERROR([libssl missing]))\n+  AC_CHECK_HEADER([openssl/ssl.h], [], [AC_MSG_ERROR([libssl headers missing])])\n+  AC_CHECK_LIB([ssl], [main], [SSL_LIBS=-lssl], [AC_MSG_ERROR([libssl missing])])\n \n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n+  BITCOIN_QT_CHECK([AC_CHECK_LIB([protobuf] ,[main], [PROTOBUF_LIBS=-lprotobuf], [BITCOIN_QT_FAIL([libprotobuf not found])])])\n   if test x$use_qr != xno; then\n-    BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])\n-    BITCOIN_QT_CHECK([AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)])\n+    BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main], [QR_LIBS=-lqrencode], [have_qrencode=no])])\n+    BITCOIN_QT_CHECK([AC_CHECK_HEADER([qrencode.h], [], [have_qrencode=no])])\n   fi\n fi\n \n CFLAGS_TEMP=\"$CFLAGS\"\n LIBS_TEMP=\"$LIBS\"\n CFLAGS=\"$CFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n LIBS=\"$LIBS $SSL_LIBS $CRYPTO_LIBS\"\n-AC_CHECK_HEADER([openssl/ec.h],, AC_MSG_ERROR([OpenSSL ec header missing]),)\n+AC_CHECK_HEADER([openssl/ec.h], [], [AC_MSG_ERROR([OpenSSL ec header missing])])\n CFLAGS=\"$CFLAGS_TEMP\"\n LIBS=\"$LIBS_TEMP\"\n \n-BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n+BITCOIN_QT_PATH_PROGS([PROTOC], [protoc], [$protoc_bin_path])\n \n AC_MSG_CHECKING([whether to build libraries])\n AM_CONDITIONAL([BUILD_BITCOIN_LIBS], [test x$build_bitcoin_libs = xyes])\n if test x$build_bitcoin_libs = xyes; then\n-  AC_DEFINE(HAVE_CONSENSUS_LIB, 1, [Define this symbol if the consensus lib has been built])\n+  AC_DEFINE([HAVE_CONSENSUS_LIB], [1], [Define this symbol if the consensus lib has been built])\n   AC_CONFIG_FILES([libbitcoinconsensus.pc:libbitcoinconsensus.pc.in])\n fi\n AC_MSG_RESULT($build_bitcoin_libs)\n@@ -704,8 +703,9 @@ AC_MSG_RESULT($build_bitcoind)\n dnl End C++ interpretting\n AC_LANG_POP\n \n+dnl Use ccache build check\n if test \"x$use_ccache\" != \"xno\"; then\n-  AC_MSG_CHECKING(if ccache should be used)\n+  AC_MSG_CHECKING([if ccache should be used])\n   if test x$CCACHE = x; then\n     if test \"x$use_ccache\" = \"xyes\"; then\n       AC_MSG_ERROR([ccache not found.]);\n@@ -720,24 +720,23 @@ if test \"x$use_ccache\" != \"xno\"; then\n   AC_MSG_RESULT($use_ccache)\n fi\n if test \"x$use_ccache\" = \"xyes\"; then\n-    AX_CHECK_PREPROC_FLAG([-Qunused-arguments],[CPPFLAGS=\"-Qunused-arguments $CPPFLAGS\"])\n+    AX_CHECK_PREPROC_FLAG([-Qunused-arguments], [CPPFLAGS=\"-Qunused-arguments $CPPFLAGS\"])\n fi\n \n-dnl Enable wallet\n+dnl Enable wallet build check\n AC_MSG_CHECKING([if wallet should be enabled])\n if test x$enable_wallet != xno; then\n   AC_MSG_RESULT(yes)\n-  AC_DEFINE_UNQUOTED([ENABLE_WALLET],[1],[Define to 1 to enable wallet functions])\n-\n+  AC_DEFINE_UNQUOTED([ENABLE_WALLET], [1], [Define to 1 to enable wallet functions])\n else\n   AC_MSG_RESULT(no)\n fi\n \n-dnl Enable upnp support\n+dnl Enable upnp support check\n AC_MSG_CHECKING([whether to build with support for UPnP])\n if test x$have_miniupnpc = xno; then\n   if test x$use_upnp = xyes; then\n-     AC_MSG_ERROR([\"UPnP requested but cannot be built. use --without-miniupnpc\"])\n+    AC_MSG_ERROR([\"UPnP requested but cannot be built: use --without-miniupnpc\"])\n   fi\n   AC_MSG_RESULT(no)\n else\n@@ -751,7 +750,8 @@ else\n       upnp_setting=1\n     fi\n     AC_MSG_RESULT($use_upnp_default)\n-    AC_DEFINE_UNQUOTED([USE_UPNP],[$upnp_setting],[UPnP support not compiled if undefined, otherwise value (0 or 1) determines default state])\n+    AC_DEFINE_UNQUOTED([USE_UPNP], [$upnp_setting],\n+      [UPnP support not compiled if undefined, otherwise value (0 or 1) determines default state])\n     if test x$TARGET_OS = xwindows; then\n       MINIUPNPC_CPPFLAGS=\"-DSTATICLIB -DMINIUPNP_STATICLIB\"\n     fi\n@@ -766,29 +766,29 @@ if test x$bitcoin_enable_qt != xno; then\n   dnl Enable dbus support\n   AC_MSG_CHECKING([whether to build GUI with support for D-Bus])\n   if test x$bitcoin_enable_qt_dbus != xno; then\n-    AC_DEFINE([USE_DBUS],[1],[Define if dbus support should be compiled in])\n+    AC_DEFINE([USE_DBUS], [1], [Define if dbus support should be compiled in])\n   fi\n   AC_MSG_RESULT($bitcoin_enable_qt_dbus)\n \n   dnl Enable qr support\n   AC_MSG_CHECKING([whether to build GUI with support for QR codes])\n   if test x$have_qrencode = xno; then\n     if test x$use_qr = xyes; then\n-     AC_MSG_ERROR([\"QR support requested but cannot be built. use --without-qrencode\"])\n+      AC_MSG_ERROR([\"QR support requested but cannot be built. use --without-qrencode\"])\n     fi\n     AC_MSG_RESULT(no)\n   else\n     if test x$use_qr != xno; then\n       AC_MSG_RESULT(yes)\n-      AC_DEFINE([USE_QRCODE],[1],[Define if QR support should be compiled in])\n+      AC_DEFINE([USE_QRCODE], [1], [Define if QR support should be compiled in])\n       use_qr=yes\n     else\n       AC_MSG_RESULT(no)\n     fi\n   fi\n \n   if test x$XGETTEXT = x; then\n-    AC_MSG_WARN(\"xgettext is required to update qt translations\")\n+    AC_MSG_WARN([\"xgettext is required to update qt translations\"])\n   fi\n \n   AC_MSG_CHECKING([whether to build test_bitcoin-qt])\n@@ -815,51 +815,59 @@ else\n   AC_MSG_RESULT([no])\n fi\n \n+dnl Global build sanity check\n if test x$build_bitcoin_utils$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_tests = xnonononono; then\n   AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui or --enable-tests])\n fi\n \n-AM_CONDITIONAL([TARGET_DARWIN], [test x$TARGET_OS = xdarwin])\n-AM_CONDITIONAL([BUILD_DARWIN], [test x$BUILD_OS = xdarwin])\n-AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\n-AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n-AM_CONDITIONAL([ENABLE_TESTS],[test x$use_tests = xyes])\n-AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n-AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$use_tests$bitcoin_enable_qt_test = xyesyes])\n-AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n-AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n-AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])\n+AM_CONDITIONAL([TARGET_DARWIN],                  [test x$TARGET_OS = xdarwin])\n+AM_CONDITIONAL([BUILD_DARWIN],                   [test x$BUILD_OS = xdarwin])\n+AM_CONDITIONAL([TARGET_WINDOWS],                 [test x$TARGET_OS = xwindows])\n+AM_CONDITIONAL([ENABLE_WALLET],                  [test x$enable_wallet = xyes])\n+AM_CONDITIONAL([ENABLE_TESTS],                   [test x$use_tests = xyes])\n+AM_CONDITIONAL([ENABLE_QT],                      [test x$bitcoin_enable_qt = xyes])\n+AM_CONDITIONAL([ENABLE_QT_TESTS],                [test x$use_tests$bitcoin_enable_qt_test = xyesyes])\n+AM_CONDITIONAL([USE_QRCODE],                     [test x$use_qr = xyes])\n+AM_CONDITIONAL([USE_LCOV],                       [test x$use_lcov = xyes])\n+AM_CONDITIONAL([USE_COMPARISON_TOOL],            [test x$use_comparison_tool != xno])\n AM_CONDITIONAL([USE_COMPARISON_TOOL_REORG_TESTS],[test x$use_comparison_tool_reorg_test != xno])\n-AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n-\n-AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n-AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])\n-AC_DEFINE(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION, [Build revision])\n-AC_DEFINE(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD, [Version Build])\n-AC_DEFINE(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE, [Version is release])\n-AC_DEFINE(COPYRIGHT_YEAR, _COPYRIGHT_YEAR, [Version is release])\n-AC_SUBST(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR)\n-AC_SUBST(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR)\n-AC_SUBST(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION)\n-AC_SUBST(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD)\n-AC_SUBST(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE)\n-AC_SUBST(COPYRIGHT_YEAR, _COPYRIGHT_YEAR)\n-\n-AC_SUBST(RELDFLAGS)\n-AC_SUBST(LIBTOOL_APP_LDFLAGS)\n-AC_SUBST(USE_UPNP)\n-AC_SUBST(USE_QRCODE)\n-AC_SUBST(BOOST_LIBS)\n-AC_SUBST(TESTDEFS)\n-AC_SUBST(LEVELDB_TARGET_FLAGS)\n-AC_SUBST(BUILD_TEST)\n-AC_SUBST(BUILD_QT)\n-AC_SUBST(BUILD_TEST_QT)\n-AC_SUBST(MINIUPNPC_CPPFLAGS)\n-AC_SUBST(MINIUPNPC_LIBS)\n-AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n-AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n-AC_CONFIG_FILES([qa/pull-tester/tests-config.sh],[chmod +x qa/pull-tester/tests-config.sh])\n+AM_CONDITIONAL([GLIBC_BACK_COMPAT],              [test x$use_glibc_compat = xyes])\n+\n+AC_DEFINE([CLIENT_VERSION_MAJOR],     [_CLIENT_VERSION_MAJOR],     [Major version])\n+AC_DEFINE([CLIENT_VERSION_MINOR],     [_CLIENT_VERSION_MINOR],     [Minor version])\n+AC_DEFINE([CLIENT_VERSION_REVISION],  [_CLIENT_VERSION_REVISION],  [Build revision])\n+AC_DEFINE([CLIENT_VERSION_BUILD],     [_CLIENT_VERSION_BUILD],     [Version Build])\n+AC_DEFINE([CLIENT_VERSION_IS_RELEASE],[_CLIENT_VERSION_IS_RELEASE],[Version is release])\n+AC_DEFINE([COPYRIGHT_YEAR],           [_COPYRIGHT_YEAR],           [Version is release])\n+\n+AC_SUBST([CLIENT_VERSION_MAJOR],      [_CLIENT_VERSION_MAJOR])\n+AC_SUBST([CLIENT_VERSION_MINOR],      [_CLIENT_VERSION_MINOR])\n+AC_SUBST([CLIENT_VERSION_REVISION],   [_CLIENT_VERSION_REVISION])\n+AC_SUBST([CLIENT_VERSION_BUILD],      [_CLIENT_VERSION_BUILD])\n+AC_SUBST([CLIENT_VERSION_IS_RELEASE], [_CLIENT_VERSION_IS_RELEASE])\n+AC_SUBST([COPYRIGHT_YEAR],            [_COPYRIGHT_YEAR])\n+\n+AC_SUBST([BOOST_LIBS])\n+AC_SUBST([LEVELDB_TARGET_FLAGS])\n+AC_SUBST([MINIUPNPC_CPPFLAGS])\n+AC_SUBST([MINIUPNPC_LIBS])\n+AC_SUBST([RELDFLAGS])\n+AC_SUBST([LIBTOOL_APP_LDFLAGS])\n+AC_SUBST([TESTDEFS])\n+AC_SUBST([USE_UPNP])\n+AC_SUBST([USE_QRCODE])\n+AC_SUBST([BUILD_TEST])\n+AC_SUBST([BUILD_QT])\n+AC_SUBST([BUILD_TEST_QT])\n+\n+AC_CONFIG_FILES([Makefile\n+                    src/Makefile\n+                    share/setup.nsi\n+                    share/qt/Info.plist\n+                    src/test/buildenv.py])\n+\n+AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh], [chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n+AC_CONFIG_FILES([qa/pull-tester/tests-config.sh], [chmod +x qa/pull-tester/tests-config.sh])\n \n dnl Boost's m4 checks do something really nasty: they export these vars. As a\n dnl result, they leak into secp256k1's configure and crazy things happen."
      }
    ]
  },
  {
    "sha": "bb7fdd5a4c2f8f45773c75ac38d2db778108da66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjdmZGQ1YTRjMmY4ZjQ1NzczYzc1YWMzOGQyZGI3NzgxMDhkYTY2",
    "commit": {
      "author": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-03-02T10:58:24Z"
      },
      "committer": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-03-07T22:53:26Z"
      },
      "message": "conf: formatting final pass, wrap extra wide lines.",
      "tree": {
        "sha": "2b6dea44df5d1ebca6659f19ab602b286b7d5c12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b6dea44df5d1ebca6659f19ab602b286b7d5c12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb7fdd5a4c2f8f45773c75ac38d2db778108da66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb7fdd5a4c2f8f45773c75ac38d2db778108da66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb7fdd5a4c2f8f45773c75ac38d2db778108da66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb7fdd5a4c2f8f45773c75ac38d2db778108da66/comments",
    "author": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7644e69ab2b5218a2ff1dd01fe15e09be55cfeb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7644e69ab2b5218a2ff1dd01fe15e09be55cfeb0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7644e69ab2b5218a2ff1dd01fe15e09be55cfeb0"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 17,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a84a843b016e3c8e4a3b140e87e7a3daf7f6b60f",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 17,
        "deletions": 9,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb7fdd5a4c2f8f45773c75ac38d2db778108da66/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb7fdd5a4c2f8f45773c75ac38d2db778108da66/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=bb7fdd5a4c2f8f45773c75ac38d2db778108da66",
        "patch": "@@ -6,7 +6,8 @@ define(_CLIENT_VERSION_REVISION, 99)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, false)\n define(_COPYRIGHT_YEAR, 2015)\n-AC_INIT([Bitcoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_INIT([Bitcoin Core], [_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],\n+  [info@bitcoin.org], [bitcoin])\n AC_CONFIG_SRCDIR([src/main.cpp])\n AC_CONFIG_HEADERS([src/config/bitcoin-config.h])\n AC_CONFIG_AUX_DIR([build-aux])\n@@ -38,7 +39,7 @@ else\n   CXXFLAGS_overridden=no\n fi\n AC_PROG_CXX\n-m4_ifdef([AC_PROG_OBJCXX],[AC_PROG_OBJCXX])\n+m4_ifdef([AC_PROG_OBJCXX], [AC_PROG_OBJCXX])\n \n dnl By default, libtool for mingw refuses to link static libs into a dll for\n dnl fear of mixing pic/non-pic objects, and import/export complications. Since\n@@ -314,7 +315,8 @@ case $host in\n        esac\n      fi\n \n-     AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"])\n+     AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]],\n+       [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"])\n      CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n      ;;\n    *linux*)\n@@ -408,8 +410,10 @@ if test x$use_glibc_compat != xno; then\n fi\n \n if test x$use_hardening != xno; then\n-  AX_CHECK_COMPILE_FLAG([-Wstack-protector], [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n-  AX_CHECK_COMPILE_FLAG([-fstack-protector-all], [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector],\n+    [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fstack-protector-all],\n+    [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n \n   AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],\n     [AX_CHECK_PREPROC_FLAG([-U_FORTIFY_SOURCE], [HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -U_FORTIFY_SOURCE\"])]\n@@ -445,8 +449,10 @@ fi\n \n AC_CHECK_HEADERS([endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n \n-AC_SEARCH_LIBS([getaddrinfo_a], [anl], [AC_DEFINE([HAVE_GETADDRINFO_A], [1], [Define this symbol if you have getaddrinfo_a])])\n-AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE([HAVE_INET_PTON], [1], [Define this symbol if you have inet_pton])])\n+AC_SEARCH_LIBS([getaddrinfo_a], [anl],\n+  [AC_DEFINE([HAVE_GETADDRINFO_A], [1], [Define this symbol if you have getaddrinfo_a])])\n+AC_SEARCH_LIBS([inet_pton], [nsl resolv],\n+  [AC_DEFINE([HAVE_INET_PTON], [1], [Define this symbol if you have inet_pton])])\n AC_SEARCH_LIBS([clock_gettime], [rt])\n \n AC_CHECK_DECLS([strnlen])\n@@ -655,7 +661,8 @@ if test x$use_pkgconfig = xyes; then\n     [\n       PKG_CHECK_MODULES([SSL], [libssl], [], [AC_MSG_ERROR([openssl  not found.])])\n       PKG_CHECK_MODULES([CRYPTO], [libcrypto], [], [AC_MSG_ERROR([libcrypto  not found.])])\n-      BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL([libprotobuf not found])])])\n+      BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes],\n+                           [BITCOIN_QT_FAIL([libprotobuf not found])])])\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n       fi\n@@ -667,7 +674,8 @@ else\n   AC_CHECK_HEADER([openssl/ssl.h], [], [AC_MSG_ERROR([libssl headers missing])])\n   AC_CHECK_LIB([ssl], [main], [SSL_LIBS=-lssl], [AC_MSG_ERROR([libssl missing])])\n \n-  BITCOIN_QT_CHECK([AC_CHECK_LIB([protobuf] ,[main], [PROTOBUF_LIBS=-lprotobuf], [BITCOIN_QT_FAIL([libprotobuf not found])])])\n+  BITCOIN_QT_CHECK([AC_CHECK_LIB([protobuf] ,[main], [PROTOBUF_LIBS=-lprotobuf],\n+                      [BITCOIN_QT_FAIL([libprotobuf not found])])])\n   if test x$use_qr != xno; then\n     BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main], [QR_LIBS=-lqrencode], [have_qrencode=no])])\n     BITCOIN_QT_CHECK([AC_CHECK_HEADER([qrencode.h], [], [have_qrencode=no])])"
      }
    ]
  },
  {
    "sha": "38c0798f8aba8337b39abff497b4b3ff23810ed5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGMwNzk4ZjhhYmE4MzM3YjM5YWJmZjQ5N2I0YjNmZjIzODEwZWQ1",
    "commit": {
      "author": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-03-02T22:14:24Z"
      },
      "committer": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-03-07T22:53:26Z"
      },
      "message": "conf: formatting minor \"if\" alignments.",
      "tree": {
        "sha": "8083735527494b615c57b395bd8d3dc27e36f80e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8083735527494b615c57b395bd8d3dc27e36f80e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38c0798f8aba8337b39abff497b4b3ff23810ed5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c0798f8aba8337b39abff497b4b3ff23810ed5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38c0798f8aba8337b39abff497b4b3ff23810ed5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c0798f8aba8337b39abff497b4b3ff23810ed5/comments",
    "author": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb7fdd5a4c2f8f45773c75ac38d2db778108da66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb7fdd5a4c2f8f45773c75ac38d2db778108da66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb7fdd5a4c2f8f45773c75ac38d2db778108da66"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "de278f3ea6e5e6697b90cfab9af9ebb5d646d3b9",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38c0798f8aba8337b39abff497b4b3ff23810ed5/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38c0798f8aba8337b39abff497b4b3ff23810ed5/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=38c0798f8aba8337b39abff497b4b3ff23810ed5",
        "patch": "@@ -130,13 +130,13 @@ AC_ARG_ENABLE([debug],\n   [enable_debug=no])\n \n if test \"x$enable_debug\" = xyes; then\n-    if test \"x$GCC\" = xyes; then\n-        CFLAGS=\"-g3 -O0 -DDEBUG\"\n-    fi\n+  if test \"x$GCC\" = xyes; then\n+    CFLAGS=\"-g3 -O0 -DDEBUG\"\n+  fi\n     \n-    if test \"x$GXX\" = xyes; then\n-        CXXFLAGS=\"-g3 -O0 -DDEBUG\"\n-    fi\n+  if test \"x$GXX\" = xyes; then\n+    CXXFLAGS=\"-g3 -O0 -DDEBUG\"\n+  fi\n fi \n \n dnl TODO: Remove these hard-coded paths and flags. They are here for the sake of\n@@ -259,7 +259,7 @@ case $host in\n   *darwin*)\n      TARGET_OS=darwin\n      LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n-     if  test x$cross_compiling != xyes; then\n+     if test x$cross_compiling != xyes; then\n        BUILD_OS=darwin\n        AC_CHECK_PROG([PORT], [port], port)\n        if test x$PORT = xport; then\n@@ -406,7 +406,6 @@ if test x$use_glibc_compat != xno; then\n     [ fdelt_type=\"long int\"])\n   AC_MSG_RESULT([$fdelt_type])\n   AC_DEFINE_UNQUOTED([FDELT_TYPE], [$fdelt_type], [parameter and return value type for __fdelt_chk])\n-\n fi\n \n if test x$use_hardening != xno; then\n@@ -728,7 +727,7 @@ if test \"x$use_ccache\" != \"xno\"; then\n   AC_MSG_RESULT($use_ccache)\n fi\n if test \"x$use_ccache\" = \"xyes\"; then\n-    AX_CHECK_PREPROC_FLAG([-Qunused-arguments], [CPPFLAGS=\"-Qunused-arguments $CPPFLAGS\"])\n+  AX_CHECK_PREPROC_FLAG([-Qunused-arguments], [CPPFLAGS=\"-Qunused-arguments $CPPFLAGS\"])\n fi\n \n dnl Enable wallet build check"
      }
    ]
  }
]