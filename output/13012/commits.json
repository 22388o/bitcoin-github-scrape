[
  {
    "sha": "18326ae2a7bff8b8e1b5493ad7cd6fc11b575ab2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODMyNmFlMmE3YmZmOGI4ZTFiNTQ5M2FkN2NkNmZjMTFiNTc1YWIy",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-04-17T21:15:20Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-04-17T21:15:20Z"
      },
      "message": "[doc] Add comments for chainparams.h, validation.cpp",
      "tree": {
        "sha": "d2aa907998a92fa36d91db9f6cebc48db03cbfc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2aa907998a92fa36d91db9f6cebc48db03cbfc3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18326ae2a7bff8b8e1b5493ad7cd6fc11b575ab2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18326ae2a7bff8b8e1b5493ad7cd6fc11b575ab2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18326ae2a7bff8b8e1b5493ad7cd6fc11b575ab2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18326ae2a7bff8b8e1b5493ad7cd6fc11b575ab2/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d6992168c2bda85b18fda8f6dea08da433a0dc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d6992168c2bda85b18fda8f6dea08da433a0dc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d6992168c2bda85b18fda8f6dea08da433a0dc9"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd029b9d5b8e76bfcbc1fa298fa25d32743cfdc8",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18326ae2a7bff8b8e1b5493ad7cd6fc11b575ab2/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18326ae2a7bff8b8e1b5493ad7cd6fc11b575ab2/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=18326ae2a7bff8b8e1b5493ad7cd6fc11b575ab2",
        "patch": "@@ -25,6 +25,12 @@ struct CCheckpointData {\n     MapCheckpoints mapCheckpoints;\n };\n \n+/**\n+ * Holds various statistics on transactions within a chain. Used to estimate\n+ * verification progress during chain sync.\n+ *\n+ * See also: CChainParams::TxData, GuessVerificationProgress.\n+ */\n struct ChainTxData {\n     int64_t nTime;\n     int64_t nTxCount;"
      },
      {
        "sha": "8eec66286ab396b170c4f87df2d1f0d75b6ac519",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18326ae2a7bff8b8e1b5493ad7cd6fc11b575ab2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18326ae2a7bff8b8e1b5493ad7cd6fc11b575ab2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=18326ae2a7bff8b8e1b5493ad7cd6fc11b575ab2",
        "patch": "@@ -154,6 +154,10 @@ class CChainState {\n \n     bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n \n+    /**\n+     * If a block header hasn't already been seen, call CheckBlockHeader on it, ensure\n+     * that it doesn't descend from an invalid block, and then add it to mapBlockIndex.\n+     */\n     bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex);\n     bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock);\n \n@@ -185,6 +189,11 @@ class CChainState {\n     CBlockIndex* AddToBlockIndex(const CBlockHeader& block);\n     /** Create a new block index entry for a given block hash */\n     CBlockIndex * InsertBlockIndex(const uint256& hash);\n+    /**\n+     * Make various assertions about the state of the block index.\n+     *\n+     * By default this only executes fully when using the Regtest chain; see: fCheckBlockIndex.\n+     */\n     void CheckBlockIndex(const Consensus::Params& consensusParams);\n \n     void InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state);\n@@ -2625,6 +2634,10 @@ static void NotifyHeaderTip() {\n  * Make the best chain active, in multiple steps. The result is either failure\n  * or an activated best chain. pblock is either nullptr or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n+ *\n+ * ActivateBestChain is split into steps (see ActivateBestChainStep) so that\n+ * we avoid holding cs_main for an extended period of time; the length of this\n+ * call may be quite long during reindexing or a substantial reorg.\n  */\n bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n     // Note that while we're often called here from ProcessNewBlock, this is\n@@ -3323,6 +3336,9 @@ bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState&\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n \n+        // If the previous block index isn't valid, determine if it descends from any block which\n+        // has been found invalid (g_failed_blocks), then mark pindexPrev and any blocks\n+        // between them as failed.\n         if (!pindexPrev->IsValid(BLOCK_VALID_SCRIPTS)) {\n             for (const CBlockIndex* failedit : g_failed_blocks) {\n                 if (pindexPrev->GetAncestor(failedit->nHeight) == failedit) {"
      }
    ]
  }
]