[
  {
    "sha": "fac942ca57dce6cfa5655a3ac8664d6a051bc01f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWM5NDJjYTU3ZGNlNmNmYTU2NTVhM2FjODY2NGQ2YTA1MWJjMDFm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-13T21:25:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-14T15:56:57Z"
      },
      "message": "test: Remove fragile assert_memory_usage_stable",
      "tree": {
        "sha": "95a4a04e8fd5fdfb360bf657b867749b03375285",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95a4a04e8fd5fdfb360bf657b867749b03375285"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac942ca57dce6cfa5655a3ac8664d6a051bc01f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiZUQwAiJSo7BiMt2g325o32nDKMjnqE6QLaqWyxXbXsDeTAllLdhpN8DMeKeeV\nTEvlBxqZdhV0GLwfHDJVx6qBFWTVBlfOG6dSEp6R1idtuPdhXC4MQ18VM2DLmp5j\nBj5lrLVkQPbgHZEGatvVlmB3jmATURylAv2bqFuQwppAaqG6bEFn8N+5E0skgyO5\nYN5u1BsqhmF2daij1cPKzQATMO71a6rAaQehtRMVd3nz1YTML6n2VekdXe3VnU3T\noqa+5ltvf0Zjy/e7D24/Ccz73cEpucNHpgMxyYmlrgononMr4wFKDodLsE12ejsf\nlTYoBa5LZAbxhCZdEfJUUp8B/yKjTDWoyVJQBKPhtcXDEtMneEwV2PDoVun8+wc8\n/F2wliJ0ZppsHhoVAI2GvF5BR8IkNTDcAAomKlQE2lBr1948FpU8NZ8z93HLvGvO\nTw0njt3Up8l21Ss9LDFK0o94BI8cO0OaEFw8tpCYkNY/TawTXPCTw+GygWUtTgR/\nSkuPaegh\n=JMZb\n-----END PGP SIGNATURE-----",
        "payload": "tree 95a4a04e8fd5fdfb360bf657b867749b03375285\nparent 8237889e8d0fb7542669a9098516c96da91913f0\nauthor MarcoFalke <falke.marco@gmail.com> 1573680350 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1573747017 -0500\n\ntest: Remove fragile assert_memory_usage_stable\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac942ca57dce6cfa5655a3ac8664d6a051bc01f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac942ca57dce6cfa5655a3ac8664d6a051bc01f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac942ca57dce6cfa5655a3ac8664d6a051bc01f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8237889e8d0fb7542669a9098516c96da91913f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8237889e8d0fb7542669a9098516c96da91913f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8237889e8d0fb7542669a9098516c96da91913f0"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 15,
      "deletions": 68
    },
    "files": [
      {
        "sha": "20864881c1658eedd12ad79b5cedeb69dcc0cdb0",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 15,
        "deletions": 22,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac942ca57dce6cfa5655a3ac8664d6a051bc01f/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac942ca57dce6cfa5655a3ac8664d6a051bc01f/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=fac942ca57dce6cfa5655a3ac8664d6a051bc01f",
        "patch": "@@ -4,7 +4,6 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid network messages.\"\"\"\n import asyncio\n-import os\n import struct\n import sys\n \n@@ -66,27 +65,21 @@ def run_test(self):\n         msg_at_size = msg_unrecognized(str_data=\"b\" * valid_data_limit)\n         assert len(msg_at_size.serialize()) == msg_limit\n \n-        increase_allowed = 0.5\n-        if [s for s in os.environ.get(\"BITCOIN_CONFIG\", \"\").split(\" \") if \"--with-sanitizers\" in s and \"address\" in s]:\n-            increase_allowed = 3.5\n-        with node.assert_memory_usage_stable(increase_allowed=increase_allowed):\n-            self.log.info(\n-                \"Sending a bunch of large, junk messages to test \"\n-                \"memory exhaustion. May take a bit...\")\n-\n-            # Run a bunch of times to test for memory exhaustion.\n-            for _ in range(80):\n-                node.p2p.send_message(msg_at_size)\n-\n-            # Check that, even though the node is being hammered by nonsense from one\n-            # connection, it can still service other peers in a timely way.\n-            for _ in range(20):\n-                conn2.sync_with_ping(timeout=2)\n-\n-            # Peer 1, despite serving up a bunch of nonsense, should still be connected.\n-            self.log.info(\"Waiting for node to drop junk messages.\")\n-            node.p2p.sync_with_ping(timeout=320)\n-            assert node.p2p.is_connected\n+        self.log.info(\"Sending a bunch of large, junk messages to test memory exhaustion. May take a bit...\")\n+\n+        # Run a bunch of times to test for memory exhaustion.\n+        for _ in range(80):\n+            node.p2p.send_message(msg_at_size)\n+\n+        # Check that, even though the node is being hammered by nonsense from one\n+        # connection, it can still service other peers in a timely way.\n+        for _ in range(20):\n+            conn2.sync_with_ping(timeout=2)\n+\n+        # Peer 1, despite serving up a bunch of nonsense, should still be connected.\n+        self.log.info(\"Waiting for node to drop junk messages.\")\n+        node.p2p.sync_with_ping(timeout=320)\n+        assert node.p2p.is_connected\n \n         #\n         # 1."
      },
      {
        "sha": "1c9628264f391ae73870e6a4596e976c39b77af8",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 0,
        "deletions": 46,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac942ca57dce6cfa5655a3ac8664d6a051bc01f/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac942ca57dce6cfa5655a3ac8664d6a051bc01f/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fac942ca57dce6cfa5655a3ac8664d6a051bc01f",
        "patch": "@@ -135,25 +135,6 @@ def get_deterministic_priv_key(self):\n         assert len(self.PRIV_KEYS) == MAX_NODES\n         return self.PRIV_KEYS[self.index]\n \n-    def get_mem_rss_kilobytes(self):\n-        \"\"\"Get the memory usage (RSS) per `ps`.\n-\n-        Returns None if `ps` is unavailable.\n-        \"\"\"\n-        assert self.running\n-\n-        try:\n-            return int(subprocess.check_output(\n-                [\"ps\", \"h\", \"-o\", \"rss\", \"{}\".format(self.process.pid)],\n-                stderr=subprocess.DEVNULL).split()[-1])\n-\n-        # Avoid failing on platforms where ps isn't installed.\n-        #\n-        # We could later use something like `psutils` to work across platforms.\n-        except (FileNotFoundError, subprocess.SubprocessError):\n-            self.log.exception(\"Unable to get memory usage\")\n-            return None\n-\n     def _node_msg(self, msg: str) -> str:\n         \"\"\"Return a modified msg that identifies this node by its index as a debugging aid.\"\"\"\n         return \"[node %d] %s\" % (self.index, msg)\n@@ -332,33 +313,6 @@ def assert_debug_log(self, expected_msgs, timeout=2):\n             time.sleep(0.05)\n         self._raise_assertion_error('Expected messages \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(str(expected_msgs), print_log))\n \n-    @contextlib.contextmanager\n-    def assert_memory_usage_stable(self, *, increase_allowed=0.03):\n-        \"\"\"Context manager that allows the user to assert that a node's memory usage (RSS)\n-        hasn't increased beyond some threshold percentage.\n-\n-        Args:\n-            increase_allowed (float): the fractional increase in memory allowed until failure;\n-                e.g. `0.12` for up to 12% increase allowed.\n-        \"\"\"\n-        before_memory_usage = self.get_mem_rss_kilobytes()\n-\n-        yield\n-\n-        after_memory_usage = self.get_mem_rss_kilobytes()\n-\n-        if not (before_memory_usage and after_memory_usage):\n-            self.log.warning(\"Unable to detect memory usage (RSS) - skipping memory check.\")\n-            return\n-\n-        perc_increase_memory_usage = (after_memory_usage / before_memory_usage) - 1\n-\n-        if perc_increase_memory_usage > increase_allowed:\n-            self._raise_assertion_error(\n-                \"Memory usage increased over threshold of {:.3f}% from {} to {} ({:.3f}%)\".format(\n-                    increase_allowed * 100, before_memory_usage, after_memory_usage,\n-                    perc_increase_memory_usage * 100))\n-\n     @contextlib.contextmanager\n     def profile_with_perf(self, profile_name):\n         \"\"\""
      }
    ]
  }
]