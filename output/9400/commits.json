[
  {
    "sha": "d4781ac6c26399d316a2b25f656d9a4c0990c419",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDc4MWFjNmMyNjM5OWQzMTZhMmIyNWY2NTZkOWE0YzA5OTBjNDE5",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2016-12-20T01:50:47Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2016-12-30T19:05:13Z"
      },
      "message": "Set peers as HB peers upon full block validation",
      "tree": {
        "sha": "a58912d8a821b3551fe60d98bd47ec654e9dee8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a58912d8a821b3551fe60d98bd47ec654e9dee8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4781ac6c26399d316a2b25f656d9a4c0990c419",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4781ac6c26399d316a2b25f656d9a4c0990c419",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4781ac6c26399d316a2b25f656d9a4c0990c419",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4781ac6c26399d316a2b25f656d9a4c0990c419/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f921e6a0492c4e9f037a9ed91f474885032d68c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f921e6a0492c4e9f037a9ed91f474885032d68c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f921e6a0492c4e9f037a9ed91f474885032d68c"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 28,
      "deletions": 27
    },
    "files": [
      {
        "sha": "42c46b738448b33bd4e6f1e33c75c78cc2fd6b1f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 27,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4781ac6c26399d316a2b25f656d9a4c0990c419/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4781ac6c26399d316a2b25f656d9a4c0990c419/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d4781ac6c26399d316a2b25f656d9a4c0990c419",
        "patch": "@@ -395,33 +395,38 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n     }\n }\n \n-void MaybeSetPeerAsAnnouncingHeaderAndIDs(const CNodeState* nodestate, CNode* pfrom, CConnman& connman) {\n-    if (!nodestate->fSupportsDesiredCmpctVersion) {\n+void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman& connman) {\n+    AssertLockHeld(cs_main);\n+    CNodeState* nodestate = State(nodeid);\n+    if (!nodestate || !nodestate->fSupportsDesiredCmpctVersion) {\n         // Never ask from peers who can't provide witnesses.\n         return;\n     }\n     if (nodestate->fProvidesHeaderAndIDs) {\n         for (std::list<NodeId>::iterator it = lNodesAnnouncingHeaderAndIDs.begin(); it != lNodesAnnouncingHeaderAndIDs.end(); it++) {\n-            if (*it == pfrom->GetId()) {\n+            if (*it == nodeid) {\n                 lNodesAnnouncingHeaderAndIDs.erase(it);\n-                lNodesAnnouncingHeaderAndIDs.push_back(pfrom->GetId());\n+                lNodesAnnouncingHeaderAndIDs.push_back(nodeid);\n                 return;\n             }\n         }\n-        bool fAnnounceUsingCMPCTBLOCK = false;\n-        uint64_t nCMPCTBLOCKVersion = (pfrom->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\n-        if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\n-            // As per BIP152, we only get 3 of our peers to announce\n-            // blocks using compact encodings.\n-            connman.ForNode(lNodesAnnouncingHeaderAndIDs.front(), [&connman, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion](CNode* pnodeStop){\n-                connman.PushMessage(pnodeStop, CNetMsgMaker(pnodeStop->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n-                return true;\n-            });\n-            lNodesAnnouncingHeaderAndIDs.pop_front();\n-        }\n-        fAnnounceUsingCMPCTBLOCK = true;\n-        connman.PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n-        lNodesAnnouncingHeaderAndIDs.push_back(pfrom->GetId());\n+        connman.ForNode(nodeid, [&connman](CNode* pfrom){\n+            bool fAnnounceUsingCMPCTBLOCK = false;\n+            uint64_t nCMPCTBLOCKVersion = (pfrom->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\n+            if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\n+                // As per BIP152, we only get 3 of our peers to announce\n+                // blocks using compact encodings.\n+                connman.ForNode(lNodesAnnouncingHeaderAndIDs.front(), [&connman, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion](CNode* pnodeStop){\n+                    connman.PushMessage(pnodeStop, CNetMsgMaker(pnodeStop->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+                    return true;\n+                });\n+                lNodesAnnouncingHeaderAndIDs.pop_front();\n+            }\n+            fAnnounceUsingCMPCTBLOCK = true;\n+            connman.PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+            lNodesAnnouncingHeaderAndIDs.push_back(pfrom->GetId());\n+            return true;\n+        });\n     }\n }\n \n@@ -798,6 +803,11 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationSta\n                 Misbehaving(it->second.first, nDoS);\n         }\n     }\n+    else if (state.IsValid() && !IsInitialBlockDownload() && mapBlocksInFlight.count(hash) == mapBlocksInFlight.size()) {\n+        if (it != mapBlockSource.end()) {\n+            MaybeSetPeerAsAnnouncingHeaderAndIDs(it->second.first, *connman);\n+        }\n+    }\n     if (it != mapBlockSource.end())\n         mapBlockSource.erase(it);\n }\n@@ -1853,12 +1863,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     return true;\n                 }\n \n-                if (!fAlreadyInFlight && mapBlocksInFlight.size() == 1 && pindex->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n-                    // We seem to be rather well-synced, so it appears pfrom was the first to provide us\n-                    // with this block! Let's get them to announce using compact blocks in the future.\n-                    MaybeSetPeerAsAnnouncingHeaderAndIDs(nodestate, pfrom, connman);\n-                }\n-\n                 BlockTransactionsRequest req;\n                 for (size_t i = 0; i < cmpctblock.BlockTxCount(); i++) {\n                     if (!partialBlock.IsTxAvailable(i))\n@@ -2143,9 +2147,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 }\n                 if (vGetData.size() > 0) {\n                     if (nodestate->fSupportsDesiredCmpctVersion && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n-                        // We seem to be rather well-synced, so it appears pfrom was the first to provide us\n-                        // with this block! Let's get them to announce using compact blocks in the future.\n-                        MaybeSetPeerAsAnnouncingHeaderAndIDs(nodestate, pfrom, connman);\n                         // In any case, we want to download using a compact block, not a regular one\n                         vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n                     }"
      }
    ]
  }
]