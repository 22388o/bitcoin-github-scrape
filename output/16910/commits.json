[
  {
    "sha": "76bd5b05dccdadd07d96fa026980efa09f9a815f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmJkNWIwNWRjY2RhZGQwN2Q5NmZhMDI2OTgwZWZhMDlmOWE4MTVm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-17T21:02:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-02T14:58:18Z"
      },
      "message": "Move SaltedTxidHasher and SaltedOutPointHasher to saltedhash.{cpp/h}",
      "tree": {
        "sha": "aeb470809ed7dbee779abc331c1e2644f7402b43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aeb470809ed7dbee779abc331c1e2644f7402b43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76bd5b05dccdadd07d96fa026980efa09f9a815f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76bd5b05dccdadd07d96fa026980efa09f9a815f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76bd5b05dccdadd07d96fa026980efa09f9a815f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76bd5b05dccdadd07d96fa026980efa09f9a815f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2af56d6d5c387c3208d3d5aae8d428a3d610446f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2af56d6d5c387c3208d3d5aae8d428a3d610446f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2af56d6d5c387c3208d3d5aae8d428a3d610446f"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 68,
      "deletions": 47
    },
    "files": [
      {
        "sha": "0a334fd9809689ad835cf077a01fdbf7b6ba012e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76bd5b05dccdadd07d96fa026980efa09f9a815f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76bd5b05dccdadd07d96fa026980efa09f9a815f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=76bd5b05dccdadd07d96fa026980efa09f9a815f",
        "patch": "@@ -191,6 +191,7 @@ BITCOIN_CORE_H = \\\n   rpc/request.h \\\n   rpc/server.h \\\n   rpc/util.h \\\n+  saltedhash.h \\\n   scheduler.h \\\n   script/descriptor.h \\\n   script/keyorigin.h \\\n@@ -490,6 +491,7 @@ libbitcoin_common_a_SOURCES = \\\n   psbt.cpp \\\n   rpc/rawtransaction_util.cpp \\\n   rpc/util.cpp \\\n+  saltedhash.cpp \\\n   scheduler.cpp \\\n   script/descriptor.cpp \\\n   script/sign.cpp \\"
      },
      {
        "sha": "ac075c0ce04547ed832b0463bc79971c0a893e0b",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76bd5b05dccdadd07d96fa026980efa09f9a815f/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76bd5b05dccdadd07d96fa026980efa09f9a815f/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=76bd5b05dccdadd07d96fa026980efa09f9a815f",
        "patch": "@@ -31,8 +31,6 @@ bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock)\n CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n size_t CCoinsViewBacked::EstimateSize() const { return base->EstimateSize(); }\n \n-SaltedOutpointHasher::SaltedOutpointHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n-\n CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), cachedCoinsUsage(0) {}\n \n size_t CCoinsViewCache::DynamicMemoryUsage() const {"
      },
      {
        "sha": "9f5176feeb2bd36e9bebcf717dea1b143b4137ca",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 1,
        "deletions": 28,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76bd5b05dccdadd07d96fa026980efa09f9a815f/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76bd5b05dccdadd07d96fa026980efa09f9a815f/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=76bd5b05dccdadd07d96fa026980efa09f9a815f",
        "patch": "@@ -8,9 +8,9 @@\n \n #include <compressor.h>\n #include <core_memusage.h>\n-#include <crypto/siphash.h>\n #include <memusage.h>\n #include <primitives/transaction.h>\n+#include <saltedhash.h>\n #include <serialize.h>\n #include <uint256.h>\n \n@@ -82,33 +82,6 @@ class Coin\n     }\n };\n \n-class SaltedOutpointHasher\n-{\n-private:\n-    /** Salt */\n-    const uint64_t k0, k1;\n-\n-public:\n-    SaltedOutpointHasher();\n-\n-    /**\n-     * This *must* return size_t. With Boost 1.46 on 32-bit systems the\n-     * unordered_map will behave unpredictably if the custom hasher returns a\n-     * uint64_t, resulting in failures when syncing the chain (#4634).\n-     *\n-     * Having the hash noexcept allows libstdc++'s unordered_map to recalculate\n-     * the hash during rehash, so it does not have to cache the value. This\n-     * reduces node's memory by sizeof(size_t). The required recalculation has\n-     * a slight performance penalty (around 1.6%), but this is compensated by\n-     * memory savings of about 9% which allow for a larger dbcache setting.\n-     *\n-     * @see https://gcc.gnu.org/onlinedocs/gcc-9.2.0/libstdc++/manual/manual/unordered_associative.html\n-     */\n-    size_t operator()(const COutPoint& id) const noexcept {\n-        return SipHashUint256Extra(k0, k1, id.hash, id.n);\n-    }\n-};\n-\n /**\n  * A Coin in one level of the coins database caching hierarchy.\n  *"
      },
      {
        "sha": "7e3ddfc56d5683f74ccbf731f630088546d36d38",
        "filename": "src/saltedhash.cpp",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76bd5b05dccdadd07d96fa026980efa09f9a815f/src/saltedhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76bd5b05dccdadd07d96fa026980efa09f9a815f/src/saltedhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/saltedhash.cpp?ref=76bd5b05dccdadd07d96fa026980efa09f9a815f",
        "patch": "@@ -0,0 +1,12 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <random.h>\n+#include <saltedhash.h>\n+\n+#include <limits>\n+\n+SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+\n+SaltedOutpointHasher::SaltedOutpointHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}"
      },
      {
        "sha": "ffca63f935d5f7bd521b2473ec855e6bd72892e6",
        "filename": "src/saltedhash.h",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76bd5b05dccdadd07d96fa026980efa09f9a815f/src/saltedhash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76bd5b05dccdadd07d96fa026980efa09f9a815f/src/saltedhash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/saltedhash.h?ref=76bd5b05dccdadd07d96fa026980efa09f9a815f",
        "patch": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SALTEDHASH_H\n+#define BITCOIN_SALTEDHASH_H\n+\n+#include <crypto/siphash.h>\n+#include <primitives/transaction.h>\n+#include <uint256.h>\n+\n+class SaltedTxidHasher\n+{\n+private:\n+    /** Salt */\n+    const uint64_t k0, k1;\n+\n+public:\n+    SaltedTxidHasher();\n+\n+    size_t operator()(const uint256& txid) const {\n+        return SipHashUint256(k0, k1, txid);\n+    }\n+};\n+\n+class SaltedOutpointHasher\n+{\n+private:\n+    /** Salt */\n+    const uint64_t k0, k1;\n+\n+public:\n+    SaltedOutpointHasher();\n+\n+    /**\n+     * This *must* return size_t. With Boost 1.46 on 32-bit systems the\n+     * unordered_map will behave unpredictably if the custom hasher returns a\n+     * uint64_t, resulting in failures when syncing the chain (#4634).\n+     *\n+     * Having the hash noexcept allows libstdc++'s unordered_map to recalculate\n+     * the hash during rehash, so it does not have to cache the value. This\n+     * reduces node's memory by sizeof(size_t). The required recalculation has\n+     * a slight performance penalty (around 1.6%), but this is compensated by\n+     * memory savings of about 9% which allow for a larger dbcache setting.\n+     *\n+     * @see https://gcc.gnu.org/onlinedocs/gcc-9.2.0/libstdc++/manual/manual/unordered_associative.html\n+     */\n+    size_t operator()(const COutPoint& id) const noexcept {\n+        return SipHashUint256Extra(k0, k1, id.hash, id.n);\n+    }\n+};\n+\n+#endif // BITCOIN_SALTEDHASH_H"
      },
      {
        "sha": "654cc9037a7f33bf81f0cdda5d41a7e6935542ff",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76bd5b05dccdadd07d96fa026980efa09f9a815f/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76bd5b05dccdadd07d96fa026980efa09f9a815f/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=76bd5b05dccdadd07d96fa026980efa09f9a815f",
        "patch": "@@ -1137,5 +1137,3 @@ CTxMemPool::EpochGuard::~EpochGuard()\n     ++pool.m_epoch;\n     pool.m_has_epoch_guard = false;\n }\n-\n-SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}"
      },
      {
        "sha": "a74e568e5237ec91339cbfbd97a1447669f42ddb",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76bd5b05dccdadd07d96fa026980efa09f9a815f/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76bd5b05dccdadd07d96fa026980efa09f9a815f/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=76bd5b05dccdadd07d96fa026980efa09f9a815f",
        "patch": "@@ -15,7 +15,6 @@\n \n #include <amount.h>\n #include <coins.h>\n-#include <crypto/siphash.h>\n #include <indirectmap.h>\n #include <optional.h>\n #include <policy/feerate.h>\n@@ -354,20 +353,6 @@ enum class MemPoolRemovalReason {\n     REPLACED,    //!< Removed for replacement\n };\n \n-class SaltedTxidHasher\n-{\n-private:\n-    /** Salt */\n-    const uint64_t k0, k1;\n-\n-public:\n-    SaltedTxidHasher();\n-\n-    size_t operator()(const uint256& txid) const {\n-        return SipHashUint256(k0, k1, txid);\n-    }\n-};\n-\n /**\n  * CTxMemPool stores valid-according-to-the-current-best-chain transactions\n  * that may be included in the next block."
      }
    ]
  },
  {
    "sha": "23eb02c7555f37ffc6a510a87666f0d48cb21739",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2ViMDJjNzU1NWYzN2ZmYzZhNTEwYTg3NjY2ZjBkNDhjYjIxNzM5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-17T23:44:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-02T14:58:21Z"
      },
      "message": "Change getWalletTxs to return a set instead of a vector",
      "tree": {
        "sha": "b4150d6908b7bdc9b2dcc355562a99b67ef59d55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4150d6908b7bdc9b2dcc355562a99b67ef59d55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23eb02c7555f37ffc6a510a87666f0d48cb21739",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23eb02c7555f37ffc6a510a87666f0d48cb21739",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23eb02c7555f37ffc6a510a87666f0d48cb21739",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23eb02c7555f37ffc6a510a87666f0d48cb21739/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76bd5b05dccdadd07d96fa026980efa09f9a815f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76bd5b05dccdadd07d96fa026980efa09f9a815f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76bd5b05dccdadd07d96fa026980efa09f9a815f"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "dc9f3caec2e16aecf91393cdd9e7ebf109d9dc53",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23eb02c7555f37ffc6a510a87666f0d48cb21739/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23eb02c7555f37ffc6a510a87666f0d48cb21739/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=23eb02c7555f37ffc6a510a87666f0d48cb21739",
        "patch": "@@ -285,13 +285,12 @@ class WalletImpl : public Wallet\n         }\n         return {};\n     }\n-    std::vector<WalletTx> getWalletTxs() override\n+    std::set<WalletTx> getWalletTxs() override\n     {\n         LOCK(m_wallet->cs_wallet);\n-        std::vector<WalletTx> result;\n-        result.reserve(m_wallet->mapWallet.size());\n+        std::set<WalletTx> result;\n         for (const auto& entry : m_wallet->mapWallet) {\n-            result.emplace_back(MakeWalletTx(*m_wallet, entry.second));\n+            result.emplace(MakeWalletTx(*m_wallet, entry.second));\n         }\n         return result;\n     }"
      },
      {
        "sha": "e83c666dedd244826e2e3d967effb38142e3005b",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23eb02c7555f37ffc6a510a87666f0d48cb21739/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23eb02c7555f37ffc6a510a87666f0d48cb21739/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=23eb02c7555f37ffc6a510a87666f0d48cb21739",
        "patch": "@@ -177,7 +177,7 @@ class Wallet\n     virtual WalletTx getWalletTx(const uint256& txid) = 0;\n \n     //! Get list of all wallet transactions.\n-    virtual std::vector<WalletTx> getWalletTxs() = 0;\n+    virtual std::set<WalletTx> getWalletTxs() = 0;\n \n     //! Try to get updated status for a particular transaction, if possible without blocking.\n     virtual bool tryGetTxStatus(const uint256& txid,\n@@ -352,6 +352,8 @@ struct WalletTx\n     int64_t time;\n     std::map<std::string, std::string> value_map;\n     bool is_coinbase;\n+\n+    bool operator<(const WalletTx& a) const { return tx->GetHash() < a.tx->GetHash(); }\n };\n \n //! Updated transaction status."
      }
    ]
  },
  {
    "sha": "864bc3bfdad32f5ab16a79ccc4ed227deb38ad40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjRiYzNiZmRhZDMyZjVhYjE2YTc5Y2NjNGVkMjI3ZGViMzhhZDQw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-17T21:04:43Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-02T14:58:21Z"
      },
      "message": "Change mapWallet to be a std::unordered_map",
      "tree": {
        "sha": "64cdfc7d7275208645b7dbe90cb707350f1dd0a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64cdfc7d7275208645b7dbe90cb707350f1dd0a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/864bc3bfdad32f5ab16a79ccc4ed227deb38ad40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/864bc3bfdad32f5ab16a79ccc4ed227deb38ad40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/864bc3bfdad32f5ab16a79ccc4ed227deb38ad40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/864bc3bfdad32f5ab16a79ccc4ed227deb38ad40/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23eb02c7555f37ffc6a510a87666f0d48cb21739",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23eb02c7555f37ffc6a510a87666f0d48cb21739",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23eb02c7555f37ffc6a510a87666f0d48cb21739"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 11,
      "deletions": 9
    },
    "files": [
      {
        "sha": "be5a06366271df2e6740edde8577f0c733114770",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/864bc3bfdad32f5ab16a79ccc4ed227deb38ad40/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/864bc3bfdad32f5ab16a79ccc4ed227deb38ad40/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=864bc3bfdad32f5ab16a79ccc4ed227deb38ad40",
        "patch": "@@ -277,7 +277,7 @@ std::string COutput::ToString() const\n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n {\n     LOCK(cs_wallet);\n-    std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(hash);\n+    const auto it = mapWallet.find(hash);\n     if (it == mapWallet.end())\n         return nullptr;\n     return &(it->second);\n@@ -414,7 +414,7 @@ std::set<uint256> CWallet::GetConflicts(const uint256& txid) const\n     std::set<uint256> result;\n     AssertLockHeld(cs_wallet);\n \n-    std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(txid);\n+    const auto it = mapWallet.find(txid);\n     if (it == mapWallet.end())\n         return result;\n     const CWalletTx& wtx = it->second;\n@@ -496,7 +496,7 @@ bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n     for (TxSpends::const_iterator it = range.first; it != range.second; ++it)\n     {\n         const uint256& wtxid = it->second;\n-        std::map<uint256, CWalletTx>::const_iterator mit = mapWallet.find(wtxid);\n+        const auto mit = mapWallet.find(wtxid);\n         if (mit != mapWallet.end()) {\n             int depth = mit->second.GetDepthInMainChain();\n             if (depth > 0  || (depth == 0 && !mit->second.isAbandoned()))\n@@ -1207,7 +1207,7 @@ isminetype CWallet::IsMine(const CTxIn &txin) const\n {\n     {\n         LOCK(cs_wallet);\n-        std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(txin.prevout.hash);\n+        const auto mi = mapWallet.find(txin.prevout.hash);\n         if (mi != mapWallet.end())\n         {\n             const CWalletTx& prev = (*mi).second;\n@@ -1224,7 +1224,7 @@ CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n {\n     {\n         LOCK(cs_wallet);\n-        std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(txin.prevout.hash);\n+        const auto mi = mapWallet.find(txin.prevout.hash);\n         if (mi != mapWallet.end())\n         {\n             const CWalletTx& prev = (*mi).second;\n@@ -2372,7 +2372,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     coin_control.ListSelected(vPresetInputs);\n     for (const COutPoint& outpoint : vPresetInputs)\n     {\n-        std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\n+        const auto it = mapWallet.find(outpoint.hash);\n         if (it != mapWallet.end())\n         {\n             const CWalletTx& wtx = it->second;\n@@ -2449,7 +2449,7 @@ bool CWallet::SignTransaction(CMutableTransaction& tx) const\n     // Build coins map\n     std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n-        std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n+        const auto mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n@@ -4029,7 +4029,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             for (const CWalletTx& wtxOld : vWtx)\n             {\n                 uint256 hash = wtxOld.GetHash();\n-                std::map<uint256, CWalletTx>::iterator mi = walletInstance->mapWallet.find(hash);\n+                const auto mi = walletInstance->mapWallet.find(hash);\n                 if (mi != walletInstance->mapWallet.end())\n                 {\n                     const CWalletTx* copyFrom = &wtxOld;"
      },
      {
        "sha": "b44ade8c4bbb911695590f7bce90aeb86194090f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/864bc3bfdad32f5ab16a79ccc4ed227deb38ad40/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/864bc3bfdad32f5ab16a79ccc4ed227deb38ad40/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=864bc3bfdad32f5ab16a79ccc4ed227deb38ad40",
        "patch": "@@ -12,6 +12,7 @@\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <psbt.h>\n+#include <saltedhash.h>\n #include <tinyformat.h>\n #include <ui_interface.h>\n #include <util/message.h>\n@@ -34,6 +35,7 @@\n #include <stdint.h>\n #include <string>\n #include <utility>\n+#include <unordered_map>\n #include <vector>\n \n #include <boost/signals2/signal.hpp>\n@@ -777,7 +779,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     /** Interface to assert chain access */\n     bool HaveChain() const { return m_chain ? true : false; }\n \n-    std::map<uint256, CWalletTx> mapWallet GUARDED_BY(cs_wallet);\n+    std::unordered_map<uint256, CWalletTx, SaltedTxidHasher> mapWallet GUARDED_BY(cs_wallet);\n \n     typedef std::multimap<int64_t, CWalletTx*> TxItems;\n     TxItems wtxOrdered;"
      }
    ]
  },
  {
    "sha": "dec73a3188ecec25ec2bbfc51683af7ea7464db1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWM3M2EzMTg4ZWNlYzI1ZWMyYmJmYzUxNjgzYWY3ZWE3NDY0ZGIx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-17T22:56:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-02T14:58:21Z"
      },
      "message": "Change mapTxSpends to be a std::unordered_multimap",
      "tree": {
        "sha": "3f836aedb3a394212e0c341c7bd93e534b794f12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f836aedb3a394212e0c341c7bd93e534b794f12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dec73a3188ecec25ec2bbfc51683af7ea7464db1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec73a3188ecec25ec2bbfc51683af7ea7464db1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dec73a3188ecec25ec2bbfc51683af7ea7464db1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec73a3188ecec25ec2bbfc51683af7ea7464db1/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "864bc3bfdad32f5ab16a79ccc4ed227deb38ad40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/864bc3bfdad32f5ab16a79ccc4ed227deb38ad40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/864bc3bfdad32f5ab16a79ccc4ed227deb38ad40"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 25,
      "deletions": 17
    },
    "files": [
      {
        "sha": "4956d099c99ad95929139e153991c46f2f0e1bdd",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dec73a3188ecec25ec2bbfc51683af7ea7464db1/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dec73a3188ecec25ec2bbfc51683af7ea7464db1/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=dec73a3188ecec25ec2bbfc51683af7ea7464db1",
        "patch": "@@ -18,7 +18,7 @@\n //! mined, or conflicts with a mined transaction. Return a feebumper::Result.\n static feebumper::Result PreconditionChecks(const CWallet& wallet, const CWalletTx& wtx, std::vector<bilingual_str>& errors) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n {\n-    if (wallet.HasWalletSpend(wtx.GetHash())) {\n+    if (wallet.HasWalletSpend(wtx.tx)) {\n         errors.push_back(Untranslated(\"Transaction has descendants in the wallet\"));\n         return feebumper::Result::INVALID_PARAMETER;\n     }"
      },
      {
        "sha": "03e1e3e6ae355df978ec0568de1f9f8fb3be2142",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 14,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dec73a3188ecec25ec2bbfc51683af7ea7464db1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dec73a3188ecec25ec2bbfc51683af7ea7464db1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=dec73a3188ecec25ec2bbfc51683af7ea7464db1",
        "patch": "@@ -432,11 +432,17 @@ std::set<uint256> CWallet::GetConflicts(const uint256& txid) const\n     return result;\n }\n \n-bool CWallet::HasWalletSpend(const uint256& txid) const\n+bool CWallet::HasWalletSpend(const CTransactionRef& tx) const\n {\n     AssertLockHeld(cs_wallet);\n-    auto iter = mapTxSpends.lower_bound(COutPoint(txid, 0));\n-    return (iter != mapTxSpends.end() && iter->first.hash == txid);\n+    const uint256& txid = tx->GetHash();\n+    for (unsigned int i = 0; i < tx->vout.size(); ++i) {\n+        auto iter = mapTxSpends.find(COutPoint(txid, i));\n+        if (iter != mapTxSpends.end()) {\n+            return true;\n+        }\n+    }\n+    return false;\n }\n \n void CWallet::Flush(bool shutdown)\n@@ -1031,12 +1037,13 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n             batch.WriteTx(wtx);\n             NotifyTransactionChanged(this, wtx.GetHash(), CT_UPDATED);\n             // Iterate over all its outputs, and mark transactions in the wallet that spend them abandoned too\n-            TxSpends::const_iterator iter = mapTxSpends.lower_bound(COutPoint(now, 0));\n-            while (iter != mapTxSpends.end() && iter->first.hash == now) {\n-                if (!done.count(iter->second)) {\n-                    todo.insert(iter->second);\n+            for (unsigned int i = 0; i < wtx.tx->vout.size(); ++i) {\n+                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(COutPoint(now, i));\n+                for (TxSpends::const_iterator iter = range.first; iter != range.second; ++iter) {\n+                    if (!done.count(iter->second)) {\n+                        todo.insert(iter->second);\n+                    }\n                 }\n-                iter++;\n             }\n             // If a transaction changes 'conflicted' state, that changes the balance\n             // available of the outputs it spends. So force those to be recomputed\n@@ -1085,12 +1092,13 @@ void CWallet::MarkConflicted(const uint256& hashBlock, int conflicting_height, c\n             wtx.MarkDirty();\n             batch.WriteTx(wtx);\n             // Iterate over all its outputs, and mark transactions in the wallet that spend them conflicted too\n-            TxSpends::const_iterator iter = mapTxSpends.lower_bound(COutPoint(now, 0));\n-            while (iter != mapTxSpends.end() && iter->first.hash == now) {\n-                 if (!done.count(iter->second)) {\n-                     todo.insert(iter->second);\n-                 }\n-                 iter++;\n+            for (unsigned int i = 0; i < wtx.tx->vout.size(); ++i) {\n+                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(COutPoint(now, i));\n+                for (TxSpends::const_iterator iter = range.first; iter != range.second; ++iter) {\n+                    if (!done.count(iter->second)) {\n+                        todo.insert(iter->second);\n+                    }\n+                }\n             }\n             // If a transaction changes 'conflicted' state, that changes the balance\n             // available of the outputs it spends. So force those to be recomputed"
      },
      {
        "sha": "8b63843a2ab9e22e8e923ca73f5e910735e47d1e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dec73a3188ecec25ec2bbfc51683af7ea7464db1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dec73a3188ecec25ec2bbfc51683af7ea7464db1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=dec73a3188ecec25ec2bbfc51683af7ea7464db1",
        "patch": "@@ -650,7 +650,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      * detect and report conflicts (double-spends or\n      * mutated transactions where the mutant gets mined).\n      */\n-    typedef std::multimap<COutPoint, uint256> TxSpends;\n+    typedef std::unordered_multimap<COutPoint, uint256, SaltedOutpointHasher> TxSpends;\n     TxSpends mapTxSpends GUARDED_BY(cs_wallet);\n     void AddToSpends(const COutPoint& outpoint, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void AddToSpends(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -1083,7 +1083,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     std::set<uint256> GetConflicts(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Check if a given transaction has any of its outputs spent by another transaction in the wallet\n-    bool HasWalletSpend(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool HasWalletSpend(const CTransactionRef& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Flush wallet (bitdb flush)\n     void Flush(bool shutdown=false);"
      }
    ]
  },
  {
    "sha": "11d172ca4130522241f2aec0015f7000c5441ac9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWQxNzJjYTQxMzA1MjIyNDFmMmFlYzAwMTVmNzAwMGM1NDQxYWM5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-17T23:29:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-02T14:58:21Z"
      },
      "message": "Add SaltedHashers for CKeyID, CScriptID, CPubKey, and CScript\n\nSaltedKeyIDHasher uses CSipHasher for hashing CKeyIDs\nSaltedScriptIDHasher uses CSipHasher for hashing CScriptIDs\nSaltedPubkeyasher uses CSipHasher for hashing CPubKeys\nSaltedScriptHasher uses CSipHasher for hashing CScripts",
      "tree": {
        "sha": "59542885611d59d569ee2f9b0af3de5c73578549",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59542885611d59d569ee2f9b0af3de5c73578549"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11d172ca4130522241f2aec0015f7000c5441ac9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11d172ca4130522241f2aec0015f7000c5441ac9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11d172ca4130522241f2aec0015f7000c5441ac9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11d172ca4130522241f2aec0015f7000c5441ac9/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dec73a3188ecec25ec2bbfc51683af7ea7464db1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec73a3188ecec25ec2bbfc51683af7ea7464db1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dec73a3188ecec25ec2bbfc51683af7ea7464db1"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 78,
      "deletions": 0
    },
    "files": [
      {
        "sha": "573c43a3671ebb6e56532c7a878c5a4835a49f86",
        "filename": "src/saltedhash.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d172ca4130522241f2aec0015f7000c5441ac9/src/saltedhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d172ca4130522241f2aec0015f7000c5441ac9/src/saltedhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/saltedhash.cpp?ref=11d172ca4130522241f2aec0015f7000c5441ac9",
        "patch": "@@ -10,3 +10,31 @@\n SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n \n SaltedOutpointHasher::SaltedOutpointHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+\n+SaltedKeyIDHasher::SaltedKeyIDHasher() : m_k0(GetRand(std::numeric_limits<uint64_t>::max())), m_k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+\n+size_t SaltedKeyIDHasher::operator()(const CKeyID& id) const\n+{\n+    return CSipHasher(m_k0, m_k1).Write(id.begin(), id.size()).Finalize();\n+}\n+\n+SaltedScriptIDHasher::SaltedScriptIDHasher() : m_k0(GetRand(std::numeric_limits<uint64_t>::max())), m_k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+\n+size_t SaltedScriptIDHasher::operator()(const CScriptID& id) const\n+{\n+    return CSipHasher(m_k0, m_k1).Write(id.begin(), id.size()).Finalize();\n+}\n+\n+SaltedScriptHasher::SaltedScriptHasher() : m_k0(GetRand(std::numeric_limits<uint64_t>::max())), m_k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+\n+size_t SaltedScriptHasher::operator()(const CScript& script) const\n+{\n+    return CSipHasher(m_k0, m_k1).Write(script.data(), script.size()).Finalize();\n+}\n+\n+SaltedPubkeyHasher::SaltedPubkeyHasher() : m_k0(GetRand(std::numeric_limits<uint64_t>::max())), m_k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+\n+size_t SaltedPubkeyHasher::operator()(const CPubKey& script) const\n+{\n+    return CSipHasher(m_k0, m_k1).Write(script.data(), script.size()).Finalize();\n+}"
      },
      {
        "sha": "0b31dd662772225dc58f026bdb319357163d54e8",
        "filename": "src/saltedhash.h",
        "status": "modified",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d172ca4130522241f2aec0015f7000c5441ac9/src/saltedhash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d172ca4130522241f2aec0015f7000c5441ac9/src/saltedhash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/saltedhash.h?ref=11d172ca4130522241f2aec0015f7000c5441ac9",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <crypto/siphash.h>\n #include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n #include <uint256.h>\n \n class SaltedTxidHasher\n@@ -50,4 +52,52 @@ class SaltedOutpointHasher\n     }\n };\n \n+class SaltedKeyIDHasher\n+{\n+private:\n+    /** Salt */\n+    uint64_t m_k0, m_k1;\n+\n+public:\n+    SaltedKeyIDHasher();\n+\n+    size_t operator()(const CKeyID& id) const;\n+};\n+\n+class SaltedScriptIDHasher\n+{\n+private:\n+    /** Salt */\n+    const uint64_t m_k0, m_k1;\n+\n+public:\n+    SaltedScriptIDHasher();\n+\n+    size_t operator()(const CScriptID& id) const;\n+};\n+\n+class SaltedScriptHasher\n+{\n+private:\n+    /** Salt */\n+    const uint64_t m_k0, m_k1;\n+\n+public:\n+    SaltedScriptHasher();\n+\n+    size_t operator()(const CScript& script) const;\n+};\n+\n+class SaltedPubkeyHasher\n+{\n+private:\n+    /** Salt */\n+    const uint64_t m_k0, m_k1;\n+\n+public:\n+    SaltedPubkeyHasher();\n+\n+    size_t operator()(const CPubKey& pubkey) const;\n+};\n+\n #endif // BITCOIN_SALTEDHASH_H"
      }
    ]
  },
  {
    "sha": "8e3d1e73cdc560c42349989e9a41e71485a873c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTNkMWU3M2NkYzU2MGM0MjM0OTk4OWU5YTQxZTcxNDg1YTg3M2M5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-17T23:33:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-02T14:58:21Z"
      },
      "message": "Use std::unordered_map and std::unordered_set in various places in the wallet\n\nChange mapKeys, mapScripts, mapCryptedKeys, mapKeyMetadata, m_script_metadata, mapWatchKeys\nto use std::unordered_map.\n\nChange setWatchOnly to use std::unordered_set",
      "tree": {
        "sha": "c2a27516ee2bcc1b4504f6ddd2cd92e6984b7210",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2a27516ee2bcc1b4504f6ddd2cd92e6984b7210"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e3d1e73cdc560c42349989e9a41e71485a873c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e3d1e73cdc560c42349989e9a41e71485a873c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e3d1e73cdc560c42349989e9a41e71485a873c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e3d1e73cdc560c42349989e9a41e71485a873c9/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11d172ca4130522241f2aec0015f7000c5441ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11d172ca4130522241f2aec0015f7000c5441ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11d172ca4130522241f2aec0015f7000c5441ac9"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 20,
      "deletions": 14
    },
    "files": [
      {
        "sha": "6469015cd4760f6ce31f928e1d1e70c558f28527",
        "filename": "src/script/signingprovider.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e3d1e73cdc560c42349989e9a41e71485a873c9/src/script/signingprovider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e3d1e73cdc560c42349989e9a41e71485a873c9/src/script/signingprovider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.h?ref=8e3d1e73cdc560c42349989e9a41e71485a873c9",
        "patch": "@@ -8,10 +8,13 @@\n \n #include <key.h>\n #include <pubkey.h>\n+#include <saltedhash.h>\n #include <script/script.h>\n #include <script/standard.h>\n #include <sync.h>\n \n+#include <unordered_map>\n+\n struct KeyOriginInfo;\n \n /** An interface to be implemented by keystores that support signing. */\n@@ -63,8 +66,8 @@ FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvide\n class FillableSigningProvider : public SigningProvider\n {\n protected:\n-    using KeyMap = std::map<CKeyID, CKey>;\n-    using ScriptMap = std::map<CScriptID, CScript>;\n+    using KeyMap = std::unordered_map<CKeyID, CKey, SaltedKeyIDHasher>;\n+    using ScriptMap = std::unordered_map<CScriptID, CScript, SaltedScriptIDHasher>;\n \n     /**\n      * Map of key id to unencrypted private keys known by the signing provider."
      },
      {
        "sha": "509abd0c5dbf67ff1ec63be1e66594dd456f9406",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e3d1e73cdc560c42349989e9a41e71485a873c9/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e3d1e73cdc560c42349989e9a41e71485a873c9/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=8e3d1e73cdc560c42349989e9a41e71485a873c9",
        "patch": "@@ -1717,7 +1717,7 @@ void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal,\n     NotifyCanGetAddressesChanged();\n }\n \n-std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+DescriptorScriptPubKeyMan::KeyMap DescriptorScriptPubKeyMan::GetKeys() const\n {\n     AssertLockHeld(cs_desc_man);\n     if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n@@ -1755,7 +1755,8 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n     }\n \n     FlatSigningProvider provider;\n-    provider.keys = GetKeys();\n+    KeyMap keys = GetKeys();\n+    provider.keys.insert(keys.begin(), keys.end());\n \n     WalletBatch batch(m_storage.GetDatabase());\n     uint256 id = GetID();\n@@ -2024,7 +2025,8 @@ std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvid\n \n     if (HavePrivateKeys() && include_private) {\n         FlatSigningProvider master_provider;\n-        master_provider.keys = GetKeys();\n+        KeyMap keys = GetKeys();\n+        master_provider.keys.insert(keys.begin(), keys.end());\n         m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n     }\n "
      },
      {
        "sha": "b12c2b735a274396a3b26d83f5dac179c35c2f2e",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e3d1e73cdc560c42349989e9a41e71485a873c9/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e3d1e73cdc560c42349989e9a41e71485a873c9/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=8e3d1e73cdc560c42349989e9a41e71485a873c9",
        "patch": "@@ -19,6 +19,7 @@\n #include <boost/signals2/signal.hpp>\n \n #include <unordered_map>\n+#include <unordered_set>\n \n enum class OutputType;\n struct bilingual_str;\n@@ -259,12 +260,12 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! keeps track of whether Unlock has run a thorough check before\n     bool fDecryptionThoroughlyChecked = true;\n \n-    using WatchOnlySet = std::set<CScript>;\n-    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n+    using WatchOnlySet = std::unordered_set<CScript, SaltedScriptHasher>;\n+    using WatchKeyMap = std::unordered_map<CKeyID, CPubKey, SaltedKeyIDHasher>;\n \n     WalletBatch *encrypted_batch GUARDED_BY(cs_KeyStore) = nullptr;\n \n-    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using CryptedKeyMap = std::unordered_map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>, SaltedKeyIDHasher>;\n \n     CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n     WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n@@ -400,10 +401,10 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     void SetInternal(bool internal) override;\n \n     // Map from Key ID to key metadata.\n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n+    std::unordered_map<CKeyID, CKeyMetadata, SaltedKeyIDHasher> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n \n     // Map from Script ID to key metadata (for watch-only keys).\n-    std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_KeyStore);\n+    std::unordered_map<CScriptID, CKeyMetadata, SaltedScriptIDHasher> m_script_metadata GUARDED_BY(cs_KeyStore);\n \n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n@@ -516,10 +517,10 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n private:\n     WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n \n-    using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n-    using PubKeyMap = std::map<CPubKey, int32_t>; // Map of pubkeys involved in scripts to descriptor range index\n-    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n-    using KeyMap = std::map<CKeyID, CKey>;\n+    using ScriptPubKeyMap = std::unordered_map<CScript, int32_t, SaltedScriptHasher>; // Map of scripts to descriptor range index\n+    using PubKeyMap = std::unordered_map<CPubKey, int32_t, SaltedPubkeyHasher>; // Map of pubkeys involved in scripts to descriptor range index\n+    using CryptedKeyMap = std::unordered_map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>, SaltedKeyIDHasher>;\n+    using KeyMap = std::unordered_map<CKeyID, CKey, SaltedKeyIDHasher>;\n \n     ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n     PubKeyMap m_map_pubkeys GUARDED_BY(cs_desc_man);"
      }
    ]
  }
]