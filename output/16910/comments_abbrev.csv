achow101,2019-09-18 21:36:55,Shuffled some things around to get rid of the circular dependency. Also fixed a typo,https://github.com/bitcoin/bitcoin/pull/16910#issuecomment-532876861,532876861,
promag,2019-09-18 21:47:55,"Concept ACK, especially improvements targeting big wallets (either lots of keys or lots of transactions).",https://github.com/bitcoin/bitcoin/pull/16910#issuecomment-532880343,532880343,
achow101,2019-09-18 22:09:12,"To benchmark this, I applied this commit: https://github.com/achow101/bitcoin/commit/16ebe1362eb8b35c42b61f73bf844bb29b29fdf5. It adds logging of the load time and also stops bitcoind after the wallet has been loaded in order to get more consistent results.\n\nHere are a couple graphs that may be interesting to people.\n\nFlame graph (svg hosted on my website, couldn't inline in this comment) ",https://github.com/bitcoin/bitcoin/pull/16910#issuecomment-532886444,532886444,
DrahtBot,2019-09-19 00:55:41,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19671 (wallet: Remove -zapwallettxes by achow101)\n* #19653 (wallet: Replace -zapwallettxes with zapwallettxes RPC by ach",https://github.com/bitcoin/bitcoin/pull/16910#issuecomment-532921001,532921001,
achow101,2019-09-19 22:11:20,"I did 1000 runs of my wallet loading benchmark. The mean loading time on master was 18408.14423 ms and the mean loading time on with this PR was 17498.71984. This is ~1 second faster, which is a ~5% performance increase with this PR. I also did a 2 sample t-test to check that these results are statistically significant, and it appears that they are.",https://github.com/bitcoin/bitcoin/pull/16910#issuecomment-533328148,533328148,
elichai,2019-12-15 17:43:03,"Concept ACK.\nI'm just playing with replacing a couple `std::set` with `std::unordered_set` and `std::map` with `std::unordered_map` and I also need access to a more public `SaltedOutpointHasher`.\n",https://github.com/bitcoin/bitcoin/pull/16910#issuecomment-565830356,565830356,
hebasto,2020-06-27 14:33:39,Concept ACK on using hashed containers.,https://github.com/bitcoin/bitcoin/pull/16910#issuecomment-650568478,650568478,
achow101,2020-06-29 18:15:39,"> Why not using `auto` for iterators type? It could improve readability a bit :)\n\nDone",https://github.com/bitcoin/bitcoin/pull/16910#issuecomment-651280326,651280326,
achow101,2020-06-29 19:04:25,Had to rebase onto master to pick up the uint160 changes to CKeyID and CScriptID,https://github.com/bitcoin/bitcoin/pull/16910#issuecomment-651303043,651303043,
achow101,2020-07-02 14:56:29,"> Why are `operator()` definitions not placed in the header, that could imply inlining?\n\nI'm not sure that it matters since we never call `operator()` directly ourselves.",https://github.com/bitcoin/bitcoin/pull/16910#issuecomment-653055721,653055721,
achow101,2020-08-10 16:00:01,"This has been open for a while without much review. Closing for now, I'll try to integrate some of these changes the next time I touch the relevant places (e.g. `mapWallet` when I get around to changing how transactions are stored).",https://github.com/bitcoin/bitcoin/pull/16910#issuecomment-671441852,671441852,
ryanofsky,2019-09-18 23:27:34,"Looks like a bug here. Previously it would return true if any output was spent, now it will only return true if the first output was spent. Could fix pretty easily by passing const CTransaction& instead of txid, and looping over the outputs.",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r325934557,325934557,src/wallet/wallet.cpp
achow101,2019-09-19 00:31:48,Done,https://github.com/bitcoin/bitcoin/pull/16910#discussion_r325947568,325947568,src/wallet/wallet.cpp
hebasto,2020-06-27 14:52:45,"28dddb91b9744987125cd2248577f38c0b2e77c7\n```suggestion\n    const uint64_t m_k0, m_k1;\n```",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r446534409,446534409,src/saltedhash.h
hebasto,2020-06-27 14:53:24,"28dddb91b9744987125cd2248577f38c0b2e77c7\n```suggestion\n    const uint64_t m_k0, m_k1;\n```",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r446534470,446534470,src/saltedhash.h
hebasto,2020-06-27 14:57:58,"42bc524e82e627909ef4d4825728cd0f30ac740f\n\nThis comment could be dropped as all available reference docs refer to the `size_t` return type for a hasher `operator()`.",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r446534866,446534866,src/saltedhash.h
achow101,2020-06-29 18:14:55,Done,https://github.com/bitcoin/bitcoin/pull/16910#discussion_r447161259,447161259,src/saltedhash.h
achow101,2020-06-29 18:15:00,Done,https://github.com/bitcoin/bitcoin/pull/16910#discussion_r447161318,447161318,src/saltedhash.h
achow101,2020-06-29 18:15:19,"Since this is just moved code, I'm going to leave as is.",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r447161485,447161485,src/saltedhash.h
hebasto,2020-06-29 18:25:16,"This should be moved to the next commit, no?",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r447166987,447166987,src/wallet/wallet.h
hebasto,2020-06-29 18:31:18,"f9304b6da3237f4a5eb4ee40a149f125cfa12e1d\n\n```\n#include <unordered_map>\n```",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r447170711,447170711,src/script/signingprovider.h
hebasto,2020-06-29 18:32:04,"f9304b6da3237f4a5eb4ee40a149f125cfa12e1d\n```suggestion\n#include <unordered_map>\n#include <unordered_set>\n```",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r447171121,447171121,src/wallet/scriptpubkeyman.h
achow101,2020-06-29 19:03:38,Turns out this can't be const as it causes the `swap` in `LegacyScriptPubKeyMan::EncryptKeys` to not compile.,https://github.com/bitcoin/bitcoin/pull/16910#discussion_r447189010,447189010,src/saltedhash.h
achow101,2020-06-29 19:03:44,Done,https://github.com/bitcoin/bitcoin/pull/16910#discussion_r447189072,447189072,src/wallet/wallet.h
achow101,2020-06-29 19:03:48,Done,https://github.com/bitcoin/bitcoin/pull/16910#discussion_r447189111,447189111,src/script/signingprovider.h
achow101,2020-06-29 19:03:51,Done,https://github.com/bitcoin/bitcoin/pull/16910#discussion_r447189128,447189128,src/wallet/scriptpubkeyman.h
hebasto,2020-07-02 09:08:14,"Agree.\n\n> Turns out this can't be const as it causes the `swap` in `LegacyScriptPubKeyMan::EncryptKeys` to not compile.\n\nYou mean `LegacyScriptPubKeyMan::Encrypt()` ?",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r448860020,448860020,src/saltedhash.h
hebasto,2020-07-02 09:45:58,"2ba96b0438fe734b788e56ba881303c84a3f249d\nWhy this header added?",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r448882252,448882252,src/primitives/transaction.h
hebasto,2020-07-02 09:47:07,"2ba96b0438fe734b788e56ba881303c84a3f249d\nnit:\n```suggestion\n#include <saltedhash.h>\n\n#include <random.h>\n\n#include <limits>\n```",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r448882949,448882949,src/saltedhash.cpp
hebasto,2020-07-02 09:59:53,"> Looks like a bug here. Previously it would return true if any output was spent, now it will only return true if the first output was spent. Could fix pretty easily by passing const CTransaction& instead of txid, and looping over the outputs.\n\nA suggestion for a followup: it could be useful to add a test for it to prevent regressions in the future.",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r448890247,448890247,src/wallet/wallet.cpp
achow101,2020-07-02 15:10:01,"Oops, that's from a previous iteration of this PR. Removed.",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r449071572,449071572,src/primitives/transaction.h
achow101,2020-07-02 15:10:48,"Added `#include <limits>`. `random.h` is one of our headers, so it should be grouped with `saltedhash.h`.",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r449072078,449072078,src/saltedhash.cpp
hebasto,2020-07-02 15:23:17,"I mean the common pattern in the repo for `somefeature.cpp`:\n```\n// Copyright...\n\n#include <somefeature.h>\n\n#include <anotherheader.h>\n#include <otherheader.h>\n//...\n```\n\nnm, this is not documented :)",https://github.com/bitcoin/bitcoin/pull/16910#discussion_r449080314,449080314,src/saltedhash.cpp
