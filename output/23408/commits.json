[
  {
    "sha": "fa4baf0756c792630391ed456aaa15285ad6eb52",
    "node_id": "C_kwDOABII59oAKGZhNGJhZjA3NTZjNzkyNjMwMzkxZWQ0NTZhYWExNTI4NWFkNmViNTI",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-27T10:39:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-01T11:25:29Z"
      },
      "message": "fuzz: Rework ConsumeScript\n\nThis should make it easier for the fuzz engine to explore multisig code\npaths. See discussion in https://github.com/bitcoin/bitcoin/issues/23105\n\nThe downside is that all fuzz inputs that use ConsumeScript are now\ninvalidated and need to be re-generated.\n\nAnother downside may be that most multisig scripts from ConsumeScript are\nusing likely not fully valid pubkeys.",
      "tree": {
        "sha": "dbc5d78fbcbfb48cade2043c5cd6f9238205babe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbc5d78fbcbfb48cade2043c5cd6f9238205babe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4baf0756c792630391ed456aaa15285ad6eb52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhBAQv/Uy4n3d5K2XQHMBup7DTsZSZm6/Bz9lx9WHe1IVKU19FLeaMJL9cbDOGb\ntbd9ExyWNBThj/rpVQNfm7VGvINscyHBUBua3iGVgqNskCEE9JlDzTfFSdGZLstC\nwTW+vt3MMVQFggtpbNYeUlHkipACaZLFqkLkN7DjsTeNfJ9RrDwXo0hn4YNj+KX8\nClsv345YgtFk+Xt4aXUe33ELlZStq2kAR+rfLlrvjU2tJgB1tQaeXiYg3hpu5Ey8\nxBbuor/NbuCeNd8924o4cI8a5ZJqv2+50nDUtnpe7xKB6h/4aQuWu5jnvMf5C9Ec\nDl8I3XQ8sBNALGnjz9nw9pkL5Lky3cqvpvrxcq1QgoBCyJkSoYM779n7AWIVr1xa\nT0oPo1HErzFsfW0kAc/J7/oM/vhlE9g075PzWpCHYYdFvJ4Mj4jYgCkfkP9duXzV\nDP8BfKA/bZtVbCsbyXczsn1vgORqjmVjZ0zgyUlTeh9TrYhtx8LYYPJ72Bontk20\n2pX941NY\n=Di7p\n-----END PGP SIGNATURE-----",
        "payload": "tree dbc5d78fbcbfb48cade2043c5cd6f9238205babe\nparent 077e98c6c20609bff7ecf1c7c9cdb3f4b31bc139\nauthor MarcoFalke <falke.marco@gmail.com> 1632739157 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1635765929 +0100\n\nfuzz: Rework ConsumeScript\n\nThis should make it easier for the fuzz engine to explore multisig code\npaths. See discussion in https://github.com/bitcoin/bitcoin/issues/23105\n\nThe downside is that all fuzz inputs that use ConsumeScript are now\ninvalidated and need to be re-generated.\n\nAnother downside may be that most multisig scripts from ConsumeScript are\nusing likely not fully valid pubkeys.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4baf0756c792630391ed456aaa15285ad6eb52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4baf0756c792630391ed456aaa15285ad6eb52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4baf0756c792630391ed456aaa15285ad6eb52/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "077e98c6c20609bff7ecf1c7c9cdb3f4b31bc139",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/077e98c6c20609bff7ecf1c7c9cdb3f4b31bc139",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/077e98c6c20609bff7ecf1c7c9cdb3f4b31bc139"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 61,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0979967384d9a3d80f64c2179e9ac91c6385d93f",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4baf0756c792630391ed456aaa15285ad6eb52/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4baf0756c792630391ed456aaa15285ad6eb52/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=fa4baf0756c792630391ed456aaa15285ad6eb52",
        "patch": "@@ -41,9 +41,7 @@ void initialize_script()\n FUZZ_TARGET_INIT(script, initialize_script)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    const std::optional<CScript> script_opt = ConsumeDeserializable<CScript>(fuzzed_data_provider);\n-    if (!script_opt) return;\n-    const CScript script{*script_opt};\n+    const CScript script{ConsumeScript(fuzzed_data_provider)};\n \n     CompressedScript compressed;\n     if (CompressScript(script, compressed)) {"
      },
      {
        "sha": "c3f416632dc1d7e54f3aac5421581d138495885e",
        "filename": "src/test/fuzz/signature_checker.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4baf0756c792630391ed456aaa15285ad6eb52/src/test/fuzz/signature_checker.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4baf0756c792630391ed456aaa15285ad6eb52/src/test/fuzz/signature_checker.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/signature_checker.cpp?ref=fa4baf0756c792630391ed456aaa15285ad6eb52",
        "patch": "@@ -58,8 +58,8 @@ FUZZ_TARGET_INIT(signature_checker, initialize_signature_checker)\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n     const unsigned int flags = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n     const SigVersion sig_version = fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0});\n-    const auto script_1 = ConsumeScript(fuzzed_data_provider, 65536);\n-    const auto script_2 = ConsumeScript(fuzzed_data_provider, 65536);\n+    const auto script_1{ConsumeScript(fuzzed_data_provider)};\n+    const auto script_2{ConsumeScript(fuzzed_data_provider)};\n     std::vector<std::vector<unsigned char>> stack;\n     (void)EvalScript(stack, script_1, flags, FuzzedSignatureChecker(fuzzed_data_provider), sig_version, nullptr);\n     if (!IsValidFlagCombination(flags)) {"
      },
      {
        "sha": "ae5f7a379e0998ddb4fdc434f55fc2ecc51e3c57",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 4,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4baf0756c792630391ed456aaa15285ad6eb52/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4baf0756c792630391ed456aaa15285ad6eb52/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=fa4baf0756c792630391ed456aaa15285ad6eb52",
        "patch": "@@ -267,7 +267,7 @@ CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider,\n         const auto amount = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-10, 50 * COIN + 10);\n         const auto script_pk = p2wsh_op_true ?\n                                    P2WSH_OP_TRUE :\n-                                   ConsumeScript(fuzzed_data_provider, /* max_length */ 128, /* maybe_p2wsh */ true);\n+                                   ConsumeScript(fuzzed_data_provider, /*maybe_p2wsh=*/true);\n         tx_mut.vout.emplace_back(amount, script_pk);\n     }\n     return tx_mut;\n@@ -283,10 +283,63 @@ CScriptWitness ConsumeScriptWitness(FuzzedDataProvider& fuzzed_data_provider, co\n     return ret;\n }\n \n-CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider, const std::optional<size_t>& max_length, const bool maybe_p2wsh) noexcept\n+CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider, const bool maybe_p2wsh) noexcept\n {\n-    const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider, max_length);\n-    CScript r_script{b.begin(), b.end()};\n+    CScript r_script{};\n+    {\n+        // Keep a buffer of bytes to allow the fuzz engine to produce smaller\n+        // inputs to generate CScripts with repeated data.\n+        static constexpr unsigned MAX_BUFFER_SZ{128};\n+        std::vector<uint8_t> buffer(MAX_BUFFER_SZ, uint8_t{'a'});\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            CallOneOf(\n+                fuzzed_data_provider,\n+                [&] {\n+                    // Insert byte vector directly to allow malformed or unparsable scripts\n+                    r_script.insert(r_script.end(), buffer.begin(), buffer.begin() + fuzzed_data_provider.ConsumeIntegralInRange(0U, MAX_BUFFER_SZ));\n+                },\n+                [&] {\n+                    // Push a byte vector from the buffer\n+                    r_script << std::vector<uint8_t>{buffer.begin(), buffer.begin() + fuzzed_data_provider.ConsumeIntegralInRange(0U, MAX_BUFFER_SZ)};\n+                },\n+                [&] {\n+                    // Push multisig\n+                    // There is a special case for this to aid the fuzz engine\n+                    // navigate the highly structured multisig format.\n+                    r_script << fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 22);\n+                    int num_data{fuzzed_data_provider.ConsumeIntegralInRange(1, 22)};\n+                    std::vector<uint8_t> pubkey_comp{buffer.begin(), buffer.begin() + CPubKey::COMPRESSED_SIZE};\n+                    pubkey_comp.front() = fuzzed_data_provider.ConsumeIntegralInRange(2, 3); // Set first byte for GetLen() to pass\n+                    std::vector<uint8_t> pubkey_uncomp{buffer.begin(), buffer.begin() + CPubKey::SIZE};\n+                    pubkey_uncomp.front() = fuzzed_data_provider.ConsumeIntegralInRange(4, 7); // Set first byte for GetLen() to pass\n+                    while (num_data--) {\n+                        auto& pubkey{fuzzed_data_provider.ConsumeBool() ? pubkey_uncomp : pubkey_comp};\n+                        if (fuzzed_data_provider.ConsumeBool()) {\n+                            pubkey.back() = num_data; // Make each pubkey different\n+                        }\n+                        r_script << pubkey;\n+                    }\n+                    r_script << fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 22);\n+                },\n+                [&] {\n+                    // Mutate the buffer\n+                    const auto vec{ConsumeRandomLengthByteVector(fuzzed_data_provider, /*max_length=*/MAX_BUFFER_SZ)};\n+                    std::copy(vec.begin(), vec.end(), buffer.begin());\n+                },\n+                [&] {\n+                    // Push an integral\n+                    r_script << fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+                },\n+                [&] {\n+                    // Push an opcode\n+                    r_script << ConsumeOpcodeType(fuzzed_data_provider);\n+                },\n+                [&] {\n+                    // Push a scriptnum\n+                    r_script << ConsumeScriptNum(fuzzed_data_provider);\n+                });\n+        }\n+    }\n     if (maybe_p2wsh && fuzzed_data_provider.ConsumeBool()) {\n         uint256 script_hash;\n         CSHA256().Write(r_script.data(), r_script.size()).Finalize(script_hash.begin());"
      },
      {
        "sha": "40aaeac63f2b36fbda0ea3474fbc1b19f8a6579a",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4baf0756c792630391ed456aaa15285ad6eb52/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4baf0756c792630391ed456aaa15285ad6eb52/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=fa4baf0756c792630391ed456aaa15285ad6eb52",
        "patch": "@@ -132,7 +132,7 @@ template <typename WeakEnumType, size_t size>\n \n [[nodiscard]] CScriptWitness ConsumeScriptWitness(FuzzedDataProvider& fuzzed_data_provider, const size_t max_stack_elem_size = 32) noexcept;\n \n-[[nodiscard]] CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider, const std::optional<size_t>& max_length = std::nullopt, const bool maybe_p2wsh = false) noexcept;\n+[[nodiscard]] CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider, const bool maybe_p2wsh = false) noexcept;\n \n [[nodiscard]] uint32_t ConsumeSequence(FuzzedDataProvider& fuzzed_data_provider) noexcept;\n "
      }
    ]
  }
]