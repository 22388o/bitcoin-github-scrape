[
  {
    "sha": "074d584a04ee80123001728ad63d4fd7e9adb828",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzRkNTg0YTA0ZWU4MDEyMzAwMTcyOGFkNjNkNGZkN2U5YWRiODI4",
    "commit": {
      "author": {
        "name": "Forrest Voight",
        "email": "forrest@forre.st",
        "date": "2011-09-06T22:15:46Z"
      },
      "committer": {
        "name": "Forrest Voight",
        "email": "forrest@forre.st",
        "date": "2011-10-01T18:42:54Z"
      },
      "message": "Added RPC call 'getmemorypool' that provides everything needed to construct a block with a custom generation transaction and submit a solution\n\ngetmemorypool [data]\nIf [data] is not specified, returns data needed to construct a block to work on:\n  \"version\" : block version\n  \"previousblockhash\" : hash of current highest block\n  \"transactions\" : contents of non-coinbase transactions that should be included in the next block\n  \"coinbasevalue\" : maximum allowable input to coinbase transaction, including the generation award and transaction fees\n  \"time\" : timestamp appropriate for next block\n  \"bits\" : compressed target of next block\nIf [data] is specified, tries to solve the block and returns true if it was successful.",
      "tree": {
        "sha": "65dd48771c3b9c89346475897c06d701550ceffc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65dd48771c3b9c89346475897c06d701550ceffc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/074d584a04ee80123001728ad63d4fd7e9adb828",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/074d584a04ee80123001728ad63d4fd7e9adb828",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/074d584a04ee80123001728ad63d4fd7e9adb828",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/074d584a04ee80123001728ad63d4fd7e9adb828/comments",
    "author": {
      "login": "forrestv",
      "id": 59872,
      "node_id": "MDQ6VXNlcjU5ODcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/59872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/forrestv",
      "html_url": "https://github.com/forrestv",
      "followers_url": "https://api.github.com/users/forrestv/followers",
      "following_url": "https://api.github.com/users/forrestv/following{/other_user}",
      "gists_url": "https://api.github.com/users/forrestv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/forrestv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/forrestv/subscriptions",
      "organizations_url": "https://api.github.com/users/forrestv/orgs",
      "repos_url": "https://api.github.com/users/forrestv/repos",
      "events_url": "https://api.github.com/users/forrestv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/forrestv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "forrestv",
      "id": 59872,
      "node_id": "MDQ6VXNlcjU5ODcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/59872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/forrestv",
      "html_url": "https://github.com/forrestv",
      "followers_url": "https://api.github.com/users/forrestv/followers",
      "following_url": "https://api.github.com/users/forrestv/following{/other_user}",
      "gists_url": "https://api.github.com/users/forrestv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/forrestv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/forrestv/subscriptions",
      "organizations_url": "https://api.github.com/users/forrestv/orgs",
      "repos_url": "https://api.github.com/users/forrestv/repos",
      "events_url": "https://api.github.com/users/forrestv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/forrestv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4769e44a326f61bdf47fa39346e1293b97e31c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4769e44a326f61bdf47fa39346e1293b97e31c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4769e44a326f61bdf47fa39346e1293b97e31c4"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 85,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cd546abde8828ad1c28dc1690c73ca9afb013cc5",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 1,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/074d584a04ee80123001728ad63d4fd7e9adb828/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/074d584a04ee80123001728ad63d4fd7e9adb828/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=074d584a04ee80123001728ad63d4fd7e9adb828",
        "patch": "@@ -1645,6 +1645,86 @@ Value getwork(const Array& params, bool fHelp)\n }\n \n \n+Value getmemorypool(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"getmemorypool [data]\\n\"\n+            \"If [data] is not specified, returns data needed to construct a block to work on:\\n\"\n+            \"  \\\"version\\\" : block version\\n\"\n+            \"  \\\"previousblockhash\\\" : hash of current highest block\\n\"\n+            \"  \\\"transactions\\\" : contents of non-coinbase transactions that should be included in the next block\\n\"\n+            \"  \\\"coinbasevalue\\\" : maximum allowable input to coinbase transaction, including the generation award and transaction fees\\n\"\n+            \"  \\\"time\\\" : timestamp appropriate for next block\\n\"\n+            \"  \\\"bits\\\" : compressed target of next block\\n\"\n+            \"If [data] is specified, tries to solve the block and returns true if it was successful.\");\n+\n+    if (params.size() == 0)\n+    {\n+        if (vNodes.empty())\n+            throw JSONRPCError(-9, \"Bitcoin is not connected!\");\n+\n+        if (IsInitialBlockDownload())\n+            throw JSONRPCError(-10, \"Bitcoin is downloading blocks...\");\n+\n+        static CReserveKey reservekey(pwalletMain);\n+\n+        // Update block\n+        static unsigned int nTransactionsUpdatedLast;\n+        static CBlockIndex* pindexPrev;\n+        static int64 nStart;\n+        static CBlock* pblock;\n+        if (pindexPrev != pindexBest ||\n+            (nTransactionsUpdated != nTransactionsUpdatedLast && GetTime() - nStart > 5))\n+        {\n+            nTransactionsUpdatedLast = nTransactionsUpdated;\n+            pindexPrev = pindexBest;\n+            nStart = GetTime();\n+\n+            // Create new block\n+            if(pblock)\n+                delete pblock;\n+            pblock = CreateNewBlock(reservekey);\n+            if (!pblock)\n+                throw JSONRPCError(-7, \"Out of memory\");\n+        }\n+\n+        // Update nTime\n+        pblock->nTime = max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n+        pblock->nNonce = 0;\n+\n+        Array transactions;\n+        BOOST_FOREACH(CTransaction tx, pblock->vtx) {\n+            if(tx.IsCoinBase())\n+                continue;\n+\n+            CDataStream ssTx;\n+            ssTx << tx;\n+\n+            transactions.push_back(HexStr(ssTx.begin(), ssTx.end()));\n+        }\n+\n+        Object result;\n+        result.push_back(Pair(\"version\", pblock->nVersion));\n+        result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n+        result.push_back(Pair(\"transactions\", transactions));\n+        result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n+        result.push_back(Pair(\"time\", (int64_t)pblock->nTime));\n+        result.push_back(Pair(\"bits\", (int64_t)pblock->nBits));\n+        return result;\n+    }\n+    else\n+    {\n+        // Parse parameters\n+        CDataStream ssBlock(ParseHex(params[0].get_str()));\n+        CBlock pblock;\n+        ssBlock >> pblock;\n+\n+        return ProcessBlock(NULL, &pblock);\n+    }\n+}\n+\n+\n \n \n \n@@ -1698,6 +1778,7 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"getwork\",                &getwork),\n     make_pair(\"listaccounts\",           &listaccounts),\n     make_pair(\"settxfee\",               &settxfee),\n+    make_pair(\"getmemorypool\",          &getmemorypool),\n };\n map<string, rpcfn_type> mapCallTable(pCallTable, pCallTable + sizeof(pCallTable)/sizeof(pCallTable[0]));\n \n@@ -1723,6 +1804,7 @@ string pAllowInSafeMode[] =\n     \"walletlock\",\n     \"validateaddress\",\n     \"getwork\",\n+    \"getmemorypool\",\n };\n set<string> setAllowInSafeMode(pAllowInSafeMode, pAllowInSafeMode + sizeof(pAllowInSafeMode)/sizeof(pAllowInSafeMode[0]));\n \n@@ -2138,7 +2220,7 @@ void ThreadRPCServer2(void* parg)\n             if (valMethod.type() != str_type)\n                 throw JSONRPCError(-32600, \"Method must be a string\");\n             string strMethod = valMethod.get_str();\n-            if (strMethod != \"getwork\")\n+            if (strMethod != \"getwork\" && strMethod != \"getmemorypool\")\n                 printf(\"ThreadRPCServer method=%s\\n\", strMethod.c_str());\n \n             // Parse params"
      },
      {
        "sha": "750290ccc5c8f51ae1808645f6a3832e73a5cf8a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/074d584a04ee80123001728ad63d4fd7e9adb828/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/074d584a04ee80123001728ad63d4fd7e9adb828/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=074d584a04ee80123001728ad63d4fd7e9adb828",
        "patch": "@@ -1338,7 +1338,7 @@ bool CBlock::AcceptBlock()\n     return true;\n }\n \n-bool static ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n {\n     // Check for duplicate\n     uint256 hash = pblock->GetHash();"
      },
      {
        "sha": "329035dc5a1f1b73025b461ee04a706aee5443a9",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/074d584a04ee80123001728ad63d4fd7e9adb828/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/074d584a04ee80123001728ad63d4fd7e9adb828/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=074d584a04ee80123001728ad63d4fd7e9adb828",
        "patch": "@@ -85,6 +85,7 @@ class CTxIndex;\n \n void RegisterWallet(CWallet* pwalletIn);\n void UnregisterWallet(CWallet* pwalletIn);\n+bool ProcessBlock(CNode* pfrom, CBlock* pblock);\n bool CheckDiskSpace(uint64 nAdditionalBytes=0);\n FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszMode=\"rb\");\n FILE* AppendBlockFile(unsigned int& nFileRet);"
      }
    ]
  }
]