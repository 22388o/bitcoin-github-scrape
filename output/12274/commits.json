[
  {
    "sha": "5f5099ac57375bdf345df0f6ebcb6efdd698f4f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjUwOTlhYzU3Mzc1YmRmMzQ1ZGYwZjZlYmNiNmVmZGQ2OThmNGYw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-11-03T02:13:59Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-01-25T22:49:13Z"
      },
      "message": "http: respond to errors immediately rather than scheduling\n\nResponses are usually added to the response queue by worker threads. As an\noptimization, and in order to close connections as quickly as possible, allow\nfor immediate replies (bypassing the queue) when there is no need for a worker\nto service the request.",
      "tree": {
        "sha": "3c3841a8a2f0e9a9db99ecd7e37da28911c00852",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c3841a8a2f0e9a9db99ecd7e37da28911c00852"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f5099ac57375bdf345df0f6ebcb6efdd698f4f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f5099ac57375bdf345df0f6ebcb6efdd698f4f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f5099ac57375bdf345df0f6ebcb6efdd698f4f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f5099ac57375bdf345df0f6ebcb6efdd698f4f0/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ae7cf8ef5be67e085abc1b1dc71bc44865a71b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ae7cf8ef5be67e085abc1b1dc71bc44865a71b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ae7cf8ef5be67e085abc1b1dc71bc44865a71b3"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 36,
      "deletions": 16
    },
    "files": [
      {
        "sha": "9278c555c433ade33f822bc1041c8b5e764d189c",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 16,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f5099ac57375bdf345df0f6ebcb6efdd698f4f0/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f5099ac57375bdf345df0f6ebcb6efdd698f4f0/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=5f5099ac57375bdf345df0f6ebcb6efdd698f4f0",
        "patch": "@@ -240,30 +240,20 @@ static std::string RequestMethodString(HTTPRequest::RequestMethod m)\n /** HTTP request callback */\n static void http_request_cb(struct evhttp_request* req, void* arg)\n {\n-    // Disable reading to work around a libevent bug, fixed in 2.2.0.\n-    if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02020001) {\n-        evhttp_connection* conn = evhttp_request_get_connection(req);\n-        if (conn) {\n-            bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n-            if (bev) {\n-                bufferevent_disable(bev, EV_READ);\n-            }\n-        }\n-    }\n     std::unique_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n \n     LogPrint(BCLog::HTTP, \"Received a %s request for %s from %s\\n\",\n              RequestMethodString(hreq->GetRequestMethod()), hreq->GetURI(), hreq->GetPeer().ToString());\n \n     // Early address-based allow check\n     if (!ClientAllowed(hreq->GetPeer())) {\n-        hreq->WriteReply(HTTP_FORBIDDEN);\n+        hreq->WriteReplyImmediate(HTTP_FORBIDDEN);\n         return;\n     }\n \n     // Early reject unknown HTTP methods\n     if (hreq->GetRequestMethod() == HTTPRequest::UNKNOWN) {\n-        hreq->WriteReply(HTTP_BADMETHOD);\n+        hreq->WriteReplyImmediate(HTTP_BADMETHOD);\n         return;\n     }\n \n@@ -288,14 +278,24 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     if (i != iend) {\n         std::unique_ptr<HTTPWorkItem> item(new HTTPWorkItem(std::move(hreq), path, i->handler));\n         assert(workQueue);\n-        if (workQueue->Enqueue(item.get()))\n+        if (workQueue->Enqueue(item.get())) {\n+            // Disable reading to work around a libevent bug, fixed in 2.2.0.\n+            if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02020001) {\n+                evhttp_connection* conn = evhttp_request_get_connection(req);\n+                if (conn) {\n+                    bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n+                    if (bev) {\n+                        bufferevent_disable(bev, EV_READ);\n+                    }\n+                }\n+            }\n             item.release(); /* if true, queue took ownership */\n-        else {\n+        } else {\n             LogPrintf(\"WARNING: request rejected because http work queue depth exceeded, it can be increased with the -rpcworkqueue= setting\\n\");\n-            item->req->WriteReply(HTTP_INTERNAL, \"Work queue depth exceeded\");\n+            item->req->WriteReplyImmediate(HTTP_INTERNAL, \"Work queue depth exceeded\");\n         }\n     } else {\n-        hreq->WriteReply(HTTP_NOTFOUND);\n+        hreq->WriteReplyImmediate(HTTP_NOTFOUND);\n     }\n }\n \n@@ -632,6 +632,17 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n     req = nullptr; // transferred back to main thread\n }\n \n+void HTTPRequest::WriteReplyImmediate(int nStatus, const std::string& strReply)\n+{\n+    assert(!replySent && req);\n+    struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n+    assert(evb);\n+    evbuffer_add(evb, strReply.data(), strReply.size());\n+    evhttp_send_reply(req, nStatus, nullptr, nullptr);\n+    replySent = true;\n+    req = nullptr;\n+}\n+\n CService HTTPRequest::GetPeer()\n {\n     evhttp_connection* con = evhttp_request_get_connection(req);"
      },
      {
        "sha": "6def0cee4879747d58cfa702c63ebc70ccbe7b89",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f5099ac57375bdf345df0f6ebcb6efdd698f4f0/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f5099ac57375bdf345df0f6ebcb6efdd698f4f0/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=5f5099ac57375bdf345df0f6ebcb6efdd698f4f0",
        "patch": "@@ -114,6 +114,15 @@ class HTTPRequest\n      * main thread, do not call any other HTTPRequest methods after calling this.\n      */\n     void WriteReply(int nStatus, const std::string& strReply = \"\");\n+\n+    /**\n+     * Write HTTP reply from the callback thread\n+     *\n+     * @note Behavior is exactly the same as WriteReply, except that the send queue\n+     * is bypassed. This should _only_ be called from inside the request\n+     * callback, the from any other thread is undefined.\n+     */\n+    void WriteReplyImmediate(int nStatus, const std::string& strReply = \"\");\n };\n \n /** Event handler closure."
      }
    ]
  },
  {
    "sha": "dc53bec3c514a990729d53c3098501e5af0f78a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzUzYmVjM2M1MTRhOTkwNzI5ZDUzYzMwOTg1MDFlNWFmMGY3OGEx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-12-02T03:43:57Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-01-25T22:51:14Z"
      },
      "message": "http: return initialized listeners\n\nNo functional change, just preparation for the next commits.",
      "tree": {
        "sha": "017bb24ce10becd081eb2af1b5a3fd48f4c0dda0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/017bb24ce10becd081eb2af1b5a3fd48f4c0dda0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc53bec3c514a990729d53c3098501e5af0f78a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc53bec3c514a990729d53c3098501e5af0f78a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc53bec3c514a990729d53c3098501e5af0f78a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc53bec3c514a990729d53c3098501e5af0f78a1/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f5099ac57375bdf345df0f6ebcb6efdd698f4f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f5099ac57375bdf345df0f6ebcb6efdd698f4f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f5099ac57375bdf345df0f6ebcb6efdd698f4f0"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b7ecd63f34c0c9ef27f3447db26d1ccd7dd18c5f",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc53bec3c514a990729d53c3098501e5af0f78a1/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc53bec3c514a990729d53c3098501e5af0f78a1/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=dc53bec3c514a990729d53c3098501e5af0f78a1",
        "patch": "@@ -318,7 +318,7 @@ static bool ThreadHTTP(struct event_base* base, struct evhttp* http)\n }\n \n /** Bind HTTP server to specified addresses */\n-static bool HTTPBindAddresses(struct evhttp* http)\n+static std::vector<evhttp_bound_socket*> HTTPBindAddresses(struct evhttp* http)\n {\n     int defaultPort = gArgs.GetArg(\"-rpcport\", BaseParams().RPCPort());\n     std::vector<std::pair<std::string, uint16_t> > endpoints;\n@@ -342,17 +342,18 @@ static bool HTTPBindAddresses(struct evhttp* http)\n         endpoints.push_back(std::make_pair(\"0.0.0.0\", defaultPort));\n     }\n \n+    std::vector<evhttp_bound_socket*> bound_sockets;\n     // Bind addresses\n     for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n         LogPrint(BCLog::HTTP, \"Binding RPC on address %s port %i\\n\", i->first, i->second);\n         evhttp_bound_socket *bind_handle = evhttp_bind_socket_with_handle(http, i->first.empty() ? nullptr : i->first.c_str(), i->second);\n         if (bind_handle) {\n-            boundSockets.push_back(bind_handle);\n+            bound_sockets.push_back(bind_handle);\n         } else {\n             LogPrintf(\"Binding RPC on address %s port %i failed.\\n\", i->first, i->second);\n         }\n     }\n-    return !boundSockets.empty();\n+    return bound_sockets;\n }\n \n /** Simple wrapper to set thread name and run work queue */\n@@ -417,7 +418,8 @@ bool InitHTTPServer()\n     evhttp_set_max_body_size(http, MAX_SIZE);\n     evhttp_set_gencb(http, http_request_cb, nullptr);\n \n-    if (!HTTPBindAddresses(http)) {\n+    boundSockets = HTTPBindAddresses(http);\n+    if (boundSockets.empty()) {\n         LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n         return false;\n     }"
      }
    ]
  },
  {
    "sha": "c56cf1a88e27a3c48bd226fe8ecc12eb072ba36f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTZjZjFhODhlMjdhM2M0OGJkMjI2ZmU4ZWNjMTJlYjA3MmJhMzZm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-12-02T04:46:09Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-01-26T04:06:57Z"
      },
      "message": "http: add a connection limiter\n\nRather than potentially accepting an unbounded number of connections, give them\na ceiling of twice the size of the processing queue.\n\nOnce the ceiling is reached, new connections will not be accepted until the\ncount has fallen back under the limit.\n\nNote that file descriptors are removed from the limiter in the request's\nclose callback.",
      "tree": {
        "sha": "72dd697a64a1fd350f942bef3cee733fbaa82749",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72dd697a64a1fd350f942bef3cee733fbaa82749"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c56cf1a88e27a3c48bd226fe8ecc12eb072ba36f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c56cf1a88e27a3c48bd226fe8ecc12eb072ba36f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c56cf1a88e27a3c48bd226fe8ecc12eb072ba36f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c56cf1a88e27a3c48bd226fe8ecc12eb072ba36f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc53bec3c514a990729d53c3098501e5af0f78a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc53bec3c514a990729d53c3098501e5af0f78a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc53bec3c514a990729d53c3098501e5af0f78a1"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 94,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8d53705194cd273f67b5d7a8f6e415a198765118",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 94,
        "deletions": 9,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c56cf1a88e27a3c48bd226fe8ecc12eb072ba36f/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c56cf1a88e27a3c48bd226fe8ecc12eb072ba36f/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=c56cf1a88e27a3c48bd226fe8ecc12eb072ba36f",
        "patch": "@@ -26,6 +26,7 @@\n #include <event2/buffer.h>\n #include <event2/bufferevent.h>\n #include <event2/util.h>\n+#include <event2/listener.h>\n #include <event2/keyvalq_struct.h>\n \n #include <support/events.h>\n@@ -40,6 +41,55 @@\n /** Maximum size of http request (request line + headers) */\n static const size_t MAX_HEADERS_SIZE = 8192;\n \n+class ConnectionLimiter\n+{\n+public:\n+    ConnectionLimiter(std::vector<evconnlistener*> listeners, unsigned int limit) : m_limit(limit), m_listeners(std::move(listeners))\n+    {\n+        assert(m_limit > 0);\n+    }\n+    void AddConnection(evutil_socket_t fd)\n+    {\n+        // Disable socket accepting if adding this connection puts us equal to the limit\n+        if (!Interrupted() && m_sockets.insert(fd).second && m_sockets.size() == m_limit) {\n+            LogPrint(BCLog::HTTP, \"Suspending new connections\");\n+            for (const auto& listener : m_listeners) {\n+                evconnlistener_disable(listener);\n+            }\n+        }\n+    }\n+    void RemoveConnection(evutil_socket_t fd)\n+    {\n+        // Re-enable socket accepting if removing this connection brings us\n+        // back down under the limit\n+        if (m_sockets.erase(fd) && m_sockets.size() + 1 == m_limit && !Interrupted()) {\n+            LogPrint(BCLog::HTTP, \"Resuming new connections\\n\");\n+            for (const auto& listener : m_listeners) {\n+                evconnlistener_enable(listener);\n+            }\n+        }\n+    }\n+    bool IsReady() const\n+    {\n+        return m_sockets.size() < m_limit && !Interrupted();\n+    }\n+    void Interrupt()\n+    {\n+        m_interrupted.store(true, std::memory_order_release);\n+    }\n+private:\n+\n+    inline bool Interrupted() const\n+    {\n+        return m_interrupted.load(std::memory_order_acquire);\n+    }\n+\n+    const unsigned int m_limit;\n+    std::vector<evconnlistener*> m_listeners;\n+    std::set<evutil_socket_t> m_sockets;\n+    std::atomic<bool> m_interrupted{false};\n+};\n+\n /** HTTP request work item */\n class HTTPWorkItem final : public HTTPClosure\n {\n@@ -237,14 +287,44 @@ static std::string RequestMethodString(HTTPRequest::RequestMethod m)\n     }\n }\n \n+std::unique_ptr<ConnectionLimiter> g_limiter;\n+\n+static void connection_close_cb(evhttp_connection* conn, void *arg)\n+{\n+    ConnectionLimiter* limiter = static_cast<ConnectionLimiter*>(arg);\n+    assert(limiter);\n+    auto* bev = evhttp_connection_get_bufferevent(conn);\n+    if (bev) {\n+        evutil_socket_t fd = bufferevent_getfd(bev);\n+        limiter->RemoveConnection(fd);\n+    }\n+}\n+\n /** HTTP request callback */\n static void http_request_cb(struct evhttp_request* req, void* arg)\n {\n     std::unique_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n-\n     LogPrint(BCLog::HTTP, \"Received a %s request for %s from %s\\n\",\n              RequestMethodString(hreq->GetRequestMethod()), hreq->GetURI(), hreq->GetPeer().ToString());\n \n+    bufferevent* bev = nullptr;\n+    evhttp_connection* conn = evhttp_request_get_connection(req);\n+    if (conn) {\n+        bev = evhttp_connection_get_bufferevent(conn);\n+    }\n+    if (!bev) {\n+        hreq->WriteReplyImmediate(HTTP_INTERNAL, \"Unknown error\\n\");\n+        return;\n+    }\n+    ConnectionLimiter* limiter = static_cast<ConnectionLimiter*>(arg);\n+    assert(limiter);\n+    evhttp_connection_set_closecb(conn, connection_close_cb, limiter);\n+    limiter->AddConnection(bufferevent_getfd(bev));\n+    if (!limiter->IsReady()) {\n+        hreq->WriteReplyImmediate(HTTP_SERVUNAVAIL, \"No connection slots available\\n\");\n+        return;\n+    }\n+\n     // Early address-based allow check\n     if (!ClientAllowed(hreq->GetPeer())) {\n         hreq->WriteReplyImmediate(HTTP_FORBIDDEN);\n@@ -281,13 +361,7 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n         if (workQueue->Enqueue(item.get())) {\n             // Disable reading to work around a libevent bug, fixed in 2.2.0.\n             if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02020001) {\n-                evhttp_connection* conn = evhttp_request_get_connection(req);\n-                if (conn) {\n-                    bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n-                    if (bev) {\n-                        bufferevent_disable(bev, EV_READ);\n-                    }\n-                }\n+                bufferevent_disable(bev, EV_READ);\n             }\n             item.release(); /* if true, queue took ownership */\n         } else {\n@@ -416,7 +490,6 @@ bool InitHTTPServer()\n     evhttp_set_timeout(http, gArgs.GetArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n     evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n     evhttp_set_max_body_size(http, MAX_SIZE);\n-    evhttp_set_gencb(http, http_request_cb, nullptr);\n \n     boundSockets = HTTPBindAddresses(http);\n     if (boundSockets.empty()) {\n@@ -428,6 +501,14 @@ bool InitHTTPServer()\n     int workQueueDepth = std::max((long)gArgs.GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n     LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n \n+    std::vector<evconnlistener*> listeners;\n+    for (const auto& bind_handle : boundSockets) {\n+        evconnlistener* listener = evhttp_bound_socket_get_listener(bind_handle);\n+        listeners.push_back(listener);\n+    }\n+    g_limiter = MakeUnique<ConnectionLimiter>(std::move(listeners), workQueueDepth * 2);\n+    evhttp_set_gencb(http, http_request_cb, g_limiter.get());\n+\n     workQueue = new WorkQueue<HTTPClosure>(workQueueDepth);\n     // transfer ownership to eventBase/HTTP via .release()\n     eventBase = base_ctr.release();\n@@ -473,6 +554,9 @@ void InterruptHTTPServer()\n     LogPrint(BCLog::HTTP, \"Interrupting HTTP server\\n\");\n     if (eventHTTP) {\n         // Unlisten sockets\n+        if (g_limiter) {\n+            g_limiter->Interrupt();\n+        }\n         for (evhttp_bound_socket *socket : boundSockets) {\n             evhttp_del_accept_socket(eventHTTP, socket);\n         }\n@@ -512,6 +596,7 @@ void StopHTTPServer()\n         evhttp_free(eventHTTP);\n         eventHTTP = nullptr;\n     }\n+    g_limiter.reset();\n     if (eventBase) {\n         event_base_free(eventBase);\n         eventBase = nullptr;"
      }
    ]
  },
  {
    "sha": "3b0ebb3578e89e3c4b5c0003d159cb0b04c2e86c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjBlYmIzNTc4ZTg5ZTNjNGI1YzAwMDNkMTU5Y2IwYjA0YzJlODZj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-12-02T04:56:43Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-01-26T04:06:57Z"
      },
      "message": "http: don't re-use connections when slots are full\n\nIf we're unable to service a request, close the connection rather than\npotentially keeping it alive longer. This helps to be slightly more fair to new\nconnections.",
      "tree": {
        "sha": "46287bcb026af24f10c73cc93405fdbd81e7fee6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46287bcb026af24f10c73cc93405fdbd81e7fee6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b0ebb3578e89e3c4b5c0003d159cb0b04c2e86c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b0ebb3578e89e3c4b5c0003d159cb0b04c2e86c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b0ebb3578e89e3c4b5c0003d159cb0b04c2e86c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b0ebb3578e89e3c4b5c0003d159cb0b04c2e86c/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c56cf1a88e27a3c48bd226fe8ecc12eb072ba36f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c56cf1a88e27a3c48bd226fe8ecc12eb072ba36f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c56cf1a88e27a3c48bd226fe8ecc12eb072ba36f"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "15f3092f126b01a48e37a8affd35bc5219c9f222",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b0ebb3578e89e3c4b5c0003d159cb0b04c2e86c/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b0ebb3578e89e3c4b5c0003d159cb0b04c2e86c/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=3b0ebb3578e89e3c4b5c0003d159cb0b04c2e86c",
        "patch": "@@ -313,6 +313,7 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n         bev = evhttp_connection_get_bufferevent(conn);\n     }\n     if (!bev) {\n+        hreq->WriteHeader(\"Connection\", \"close\");\n         hreq->WriteReplyImmediate(HTTP_INTERNAL, \"Unknown error\\n\");\n         return;\n     }\n@@ -321,6 +322,7 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     evhttp_connection_set_closecb(conn, connection_close_cb, limiter);\n     limiter->AddConnection(bufferevent_getfd(bev));\n     if (!limiter->IsReady()) {\n+        hreq->WriteHeader(\"Connection\", \"close\");\n         hreq->WriteReplyImmediate(HTTP_SERVUNAVAIL, \"No connection slots available\\n\");\n         return;\n     }\n@@ -366,6 +368,7 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n             item.release(); /* if true, queue took ownership */\n         } else {\n             LogPrintf(\"WARNING: request rejected because http work queue depth exceeded, it can be increased with the -rpcworkqueue= setting\\n\");\n+            item->req->WriteHeader(\"Connection\", \"close\");\n             item->req->WriteReplyImmediate(HTTP_INTERNAL, \"Work queue depth exceeded\");\n         }\n     } else {"
      }
    ]
  },
  {
    "sha": "de6cfceafba33feb77c169135c5ed70bd9d09ca4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTZjZmNlYWZiYTMzZmViNzdjMTY5MTM1YzVlZDcwYmQ5ZDA5Y2E0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-12-02T05:10:47Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-01-26T04:06:57Z"
      },
      "message": "http: defer accepting until there's data to read\n\nThis avoids assigning file descriptors faster than we can close them.\n\nIt is the same as using an evconnlistener with the LEV_OPT_DEFERRED_ACCEPT\nflag, which is only available with libevent 2.1+.",
      "tree": {
        "sha": "c36df8a162e1193c9ebc8ae55758085ad3aea011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c36df8a162e1193c9ebc8ae55758085ad3aea011"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de6cfceafba33feb77c169135c5ed70bd9d09ca4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de6cfceafba33feb77c169135c5ed70bd9d09ca4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de6cfceafba33feb77c169135c5ed70bd9d09ca4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de6cfceafba33feb77c169135c5ed70bd9d09ca4/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b0ebb3578e89e3c4b5c0003d159cb0b04c2e86c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b0ebb3578e89e3c4b5c0003d159cb0b04c2e86c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b0ebb3578e89e3c4b5c0003d159cb0b04c2e86c"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5d2acf655fbd681e3bc7eba1dd4a1f98626450ab",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de6cfceafba33feb77c169135c5ed70bd9d09ca4/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de6cfceafba33feb77c169135c5ed70bd9d09ca4/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=de6cfceafba33feb77c169135c5ed70bd9d09ca4",
        "patch": "@@ -507,6 +507,8 @@ bool InitHTTPServer()\n     std::vector<evconnlistener*> listeners;\n     for (const auto& bind_handle : boundSockets) {\n         evconnlistener* listener = evhttp_bound_socket_get_listener(bind_handle);\n+        evutil_socket_t sock = evhttp_bound_socket_get_fd(bind_handle);\n+        SetListenSocketDeferred(sock);\n         listeners.push_back(listener);\n     }\n     g_limiter = MakeUnique<ConnectionLimiter>(std::move(listeners), workQueueDepth * 2);"
      },
      {
        "sha": "2f78c092aba4eae2e4fe2c3ae7ff877e02e6ea2f",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de6cfceafba33feb77c169135c5ed70bd9d09ca4/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de6cfceafba33feb77c169135c5ed70bd9d09ca4/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=de6cfceafba33feb77c169135c5ed70bd9d09ca4",
        "patch": "@@ -724,3 +724,13 @@ void InterruptSocks5(bool interrupt)\n {\n     interruptSocks5Recv = interrupt;\n }\n+\n+bool SetListenSocketDeferred(const SOCKET& sock)\n+{\n+    bool ret = false;\n+#ifdef TCP_DEFER_ACCEPT\n+    static constexpr int set = 1;\n+    ret = setsockopt(sock, IPPROTO_TCP, TCP_DEFER_ACCEPT, &set, sizeof(set)) == 0;\n+#endif\n+    return ret;\n+}"
      },
      {
        "sha": "b9c357bcfe87a60a1c7372964ddc7c624e489127",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de6cfceafba33feb77c169135c5ed70bd9d09ca4/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de6cfceafba33feb77c169135c5ed70bd9d09ca4/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=de6cfceafba33feb77c169135c5ed70bd9d09ca4",
        "patch": "@@ -62,6 +62,7 @@ bool CloseSocket(SOCKET& hSocket);\n bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking);\n /** Set the TCP_NODELAY flag on a socket */\n bool SetSocketNoDelay(const SOCKET& hSocket);\n+bool SetListenSocketDeferred(const SOCKET& sock);\n /**\n  * Convert milliseconds to a struct timeval for e.g. select.\n  */"
      }
    ]
  },
  {
    "sha": "cdcc0ed01195bf88532a9afc905593833a7af43c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGNjMGVkMDExOTViZjg4NTMyYTlhZmM5MDU1OTM4MzNhN2FmNDNj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-01-25T22:05:15Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-01-26T04:06:58Z"
      },
      "message": "http: use new libevent callback to drop connections quickly\n\nLibevent 2.2 adds a callback allowing us to drop connections as they come in.\nUse it when possible.",
      "tree": {
        "sha": "99f24688696c4e211871477e3eee596e4a843cc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99f24688696c4e211871477e3eee596e4a843cc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cdcc0ed01195bf88532a9afc905593833a7af43c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdcc0ed01195bf88532a9afc905593833a7af43c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cdcc0ed01195bf88532a9afc905593833a7af43c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdcc0ed01195bf88532a9afc905593833a7af43c/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de6cfceafba33feb77c169135c5ed70bd9d09ca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de6cfceafba33feb77c169135c5ed70bd9d09ca4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de6cfceafba33feb77c169135c5ed70bd9d09ca4"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 31,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3f642e60d9aa82a5e7a356b3b381b404003eb1a7",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdcc0ed01195bf88532a9afc905593833a7af43c/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdcc0ed01195bf88532a9afc905593833a7af43c/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=cdcc0ed01195bf88532a9afc905593833a7af43c",
        "patch": "@@ -300,6 +300,22 @@ static void connection_close_cb(evhttp_connection* conn, void *arg)\n     }\n }\n \n+#if LIBEVENT_VERSION_NUMBER >= 0x02020001\n+static int http_newreq_cb(evhttp_request* req, void *arg)\n+{\n+    /*\n+        A return value of -1 here forces the connection to close immediately.\n+        Otherwise, the connection's fd will be added to the limiter in the\n+        normal request callback.\n+    */\n+    ConnectionLimiter* limiter = static_cast<ConnectionLimiter*>(arg);\n+    if (limiter && !limiter->IsReady()) {\n+        return -1;\n+    }\n+    return 0;\n+}\n+#endif\n+\n /** HTTP request callback */\n static void http_request_cb(struct evhttp_request* req, void* arg)\n {\n@@ -514,6 +530,16 @@ bool InitHTTPServer()\n     g_limiter = MakeUnique<ConnectionLimiter>(std::move(listeners), workQueueDepth * 2);\n     evhttp_set_gencb(http, http_request_cb, g_limiter.get());\n \n+#if LIBEVENT_VERSION_NUMBER >= 0x02020001\n+    /*  If the runtime libevent is new enough to have evhttp_set_newreqcb, use\n+        it. http_newreq_cb will be called for each new request, and allows us to\n+        reject the request (which closes the connection) immediately.\n+    */\n+    if (event_get_version_number() >= 0x02020001) {\n+        evhttp_set_newreqcb(http, http_newreq_cb, g_limiter.get());\n+    }\n+#endif\n+\n     workQueue = new WorkQueue<HTTPClosure>(workQueueDepth);\n     // transfer ownership to eventBase/HTTP via .release()\n     eventBase = base_ctr.release();\n@@ -559,6 +585,11 @@ void InterruptHTTPServer()\n     LogPrint(BCLog::HTTP, \"Interrupting HTTP server\\n\");\n     if (eventHTTP) {\n         // Unlisten sockets\n+#if LIBEVENT_VERSION_NUMBER >= 0x02020001\n+        if (event_get_version_number() >= 0x02020001) {\n+            evhttp_set_newreqcb(http, nullptr, nullptr);\n+        }\n+#endif\n         if (g_limiter) {\n             g_limiter->Interrupt();\n         }"
      }
    ]
  }
]