practicalswift,2021-04-26 20:33:13,"Concept ACK: preconditions should be checked where possible\n\nI take it you have started fuzzing Bitcoin Core again @guidovranken? That's very good news for Bitcoin :)\n\nDon't forget to any fuzzing trophies to https://github.com/bitcoin-core/bitcoin-devwiki/wiki/Fuzz-Trophies :)",https://github.com/bitcoin/bitcoin/pull/21781#issuecomment-827128543,827128543,
practicalswift,2021-04-27 10:50:05,"> I wonder if this is better done with a scripted-diff\n\nIf anyone wants to tackle `&vch[0]`-to-`vch.data()` using a scripted-diff then this could be used as a starting point (untested beyond `make check`: careful manual review of the changes will be required obviously):\n\n```\nsed -i 's%&\([a-zA-Z0-9_]\+\)\[0\]%\1.data()%g' $(git grep -lE '&([a-zA-Z0-9_]+)\[0\]' -- build_msvc/testconsensus",https://github.com/bitcoin/bitcoin/pull/21781#issuecomment-827510103,827510103,
DrahtBot,2021-05-01 02:18:59,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21817 (refactor: Replace &foo[0] with foo.data() by MarcoFalke)\n\nIf you consider this pull request important, please al",https://github.com/bitcoin/bitcoin/pull/21781#issuecomment-830491608,830491608,
laanwj,2021-05-04 14:51:55,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21781#issuecomment-832003410,832003410,
DrahtBot,2021-05-05 17:01:21,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/21781#issuecomment-832857237,832857237,
MarcoFalke,2021-05-06 08:08:43,Are there steps to reproduce the `ChaCha20` issue?,https://github.com/bitcoin/bitcoin/pull/21781#issuecomment-833323257,833323257,
MarcoFalke,2021-05-21 08:30:33,@guidovranken Are you still working on this?,https://github.com/bitcoin/bitcoin/pull/21781#issuecomment-845779330,845779330,
guidovranken,2021-05-21 23:58:29,"> PR description should be updated: Add a check to ChaCha20::SetKey which ~validates the size of the specified key, and throws an exception if it is invalid~ asserts that the specified key size is valid.\n\nPR desc updated.\n\n> Are there steps to reproduce the `ChaCha20` issue?\n\nShould I add a test?\n\n> @guidovranken Are you still working on this?\n\nI've addressed the outstanding is",https://github.com/bitcoin/bitcoin/pull/21781#issuecomment-846314237,846314237,
MarcoFalke,2021-05-22 04:28:28,See https://github.com/bitcoin/bitcoin/pull/21781#issuecomment-832857237,https://github.com/bitcoin/bitcoin/pull/21781#issuecomment-846347715,846347715,
MarcoFalke,2021-05-22 04:30:38,"> Should I add a test?\n\nFor example. Any other way to first observe the bug and then to observe the fix is also welcome.",https://github.com/bitcoin/bitcoin/pull/21781#issuecomment-846347933,846347933,
guidovranken,2021-05-25 00:17:50,"> > Should I add a test?\n> \n> For example. Any other way to first observe the bug and then to observe the fix is also welcome.\n\nHow can I test if an assertion failure occurs in the tests?",https://github.com/bitcoin/bitcoin/pull/21781#issuecomment-847438942,847438942,
MarcoFalke,2021-05-25 05:31:38,I was wondering how you've found the bug on master. Code review or some other way?,https://github.com/bitcoin/bitcoin/pull/21781#issuecomment-847546257,847546257,
guidovranken,2021-05-25 20:49:41,"> I was wondering how you've found the bug on master. Code review or some other way?\n\nI found the bug with Cryptofuzz, which is now running on OSS-Fuzz as part of the `bitcoin-core` project.\n\nIn Cryptofuzz, I work around the bug by not passing an invalid key size: https://github.com/guidovranken/cryptofuzz/blob/61f27a0afa28942a8bdb8de49775cb734acf0121/modules/bitcoin/module.cpp#L252-L254\",https://github.com/bitcoin/bitcoin/pull/21781#issuecomment-848253838,848253838,
MarcoFalke,2021-04-27 06:56:20,"Why is this changed here, but the other 55 instances are left as is? Including the one in this line and another one in this file?\n\nSee also commit 592404f03\n\nAnd our developer notes:\n\n```\n- Watch out for out-of-bounds vector access. `&vch[vch.size()]` is illegal,\n  including `&vch[0]` for an empty vector. Use `vch.data()` and `vch.data() +\n  vch.size()` instead.\n\n",https://github.com/bitcoin/bitcoin/pull/21781#discussion_r620917589,620917589,src/script/sigcache.cpp
MarcoFalke,2021-04-27 07:17:01,"Also, it could make sense to open two pull requests for the changes here, since they seem unrelated? (One of them is also failing the fuzz task, btw)",https://github.com/bitcoin/bitcoin/pull/21781#discussion_r620930073,620930073,src/script/sigcache.cpp
guidovranken,2021-04-27 08:35:10,"> Why is this changed here, but the other 55 instances are left as is? Including the one in this line and another one in this file?\n\nI didn't change the two instances of `&pubkey[0]` in this file because the [CPubkey subscript operator](https://github.com/bitcoin/bitcoin/blob/19a56d1519fb493c3e1bd5cad55360b6b80fa52b/src/pubkey.h#L114) returns a reference to a [regular array](https://github.com",https://github.com/bitcoin/bitcoin/pull/21781#discussion_r620987297,620987297,src/script/sigcache.cpp
practicalswift,2021-04-27 11:01:02,"> I didn't change any other instances of `&vch[0]` because this instance specifically was the only one which came up with fuzzing (so far) with `-D_GLIBCXX_DEBUG`.\n\n`-D_GLIBCXX_DEBUG` is great! :)\n\n@guidovranken, you don't happen to have any notes saved on any tweaks you had to make to get a full `-D_GLIBCXX_DEBUG` compile including dependencies for Bitcoin Core? IIRC our Boost dependencie",https://github.com/bitcoin/bitcoin/pull/21781#discussion_r621100537,621100537,src/script/sigcache.cpp
fanquake,2021-04-27 11:14:59,"> tweaks you had to make to get a full -D_GLIBCXX_DEBUG compile including dependencies for Bitcoin Core?\n> IIRC our Boost dependencies were a bit cumbersome to get compiled with -D_GLIBCXX_DEBUG at least historically.\n\nNote that depends builds with `DEBUG=1` have always used [`-D_GLIBCXX_DEBUG` && `D_GLIBCXX_DEBUG_PEDANTIC`](https://github.com/bitcoin/bitcoin/blob/master/depends/hosts/linux.",https://github.com/bitcoin/bitcoin/pull/21781#discussion_r621109431,621109431,src/script/sigcache.cpp
MarcoFalke,2021-04-29 09:35:09,"Thanks @guidovranken and @fanquake for suggesting both `-D_GLIBCXX_DEBUG` and `-D_GLIBCXX_DEBUG_PEDANTIC`\n\nLooks like there are more issues than this one. I've reported them here:\n* https://github.com/boostorg/date_time/issues/190\n* https://github.com/bitcoin/bitcoin/pull/21802\n",https://github.com/bitcoin/bitcoin/pull/21781#discussion_r622887251,622887251,src/script/sigcache.cpp
MarcoFalke,2021-04-29 10:00:55,"Is there a downside splitting this into two pulls? I'd still prefer that to make it easier to review, because both commits can be reviewed independently. Also, it makes a cleaner history and discussion because two unrelated threads aren't intertwined.",https://github.com/bitcoin/bitcoin/pull/21781#discussion_r622905203,622905203,src/script/sigcache.cpp
MarcoFalke,2021-04-30 18:26:19,"I went ahead and split the raw data pointer commit into a separate pull (#21817). I hope this is ok. The commit hash needed to be changed, but the author information is fully preserved.",https://github.com/bitcoin/bitcoin/pull/21781#discussion_r624079523,624079523,src/script/sigcache.cpp
MarcoFalke,2021-05-01 06:52:19,Wouldn't it be better to make this an assert? This would allow to compile the crypto code with `noexcept`,https://github.com/bitcoin/bitcoin/pull/21781#discussion_r624433161,624433161,src/crypto/chacha20.cpp
laanwj,2021-05-04 14:51:38,"I too think an assert would be more appropriate here.  It's unclear how an exception will be handled. Also the caller is responsible that a valid key is passed. When this doesn't happen it is a coding bug, it makes more sense to immediately terminate the process.",https://github.com/bitcoin/bitcoin/pull/21781#discussion_r625851680,625851680,src/crypto/chacha20.cpp
jnewbery,2021-05-06 08:04:10,"This function's declaration is commented:\n\n```\n    void SetKey(const unsigned char* key, size_t keylen); //!< set key with flexible keylength; 256bit recommended */\n```\n\nThat should be updated to say that `keylen` is in bytes, and that only 16 and 32 are valid.",https://github.com/bitcoin/bitcoin/pull/21781#discussion_r627175341,627175341,src/crypto/chacha20.cpp
jnewbery,2021-05-06 08:07:04,The ctor which takes a keylen should also be commented to document assumptions.,https://github.com/bitcoin/bitcoin/pull/21781#discussion_r627177055,627177055,src/crypto/chacha20.cpp
guidovranken,2021-05-21 23:50:39,Replaced with assert.,https://github.com/bitcoin/bitcoin/pull/21781#discussion_r637301387,637301387,src/crypto/chacha20.cpp
guidovranken,2021-05-21 23:54:39,Done.,https://github.com/bitcoin/bitcoin/pull/21781#discussion_r637302072,637302072,src/crypto/chacha20.cpp
