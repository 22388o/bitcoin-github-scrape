[
  {
    "sha": "be22b3da1df15757ef15e4c4963507bcdff6a872",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTIyYjNkYTFkZjE1NzU3ZWYxNWU0YzQ5NjM1MDdiY2RmZjZhODcy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-12-23T16:43:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-05T16:23:23Z"
      },
      "message": "Update seed IPs, based on bitcoin.sipa.be crawler data",
      "tree": {
        "sha": "4a38c44dd7af11514402d6104e6d085ccc44f365",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a38c44dd7af11514402d6104e6d085ccc44f365"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be22b3da1df15757ef15e4c4963507bcdff6a872",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be22b3da1df15757ef15e4c4963507bcdff6a872",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be22b3da1df15757ef15e4c4963507bcdff6a872",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be22b3da1df15757ef15e4c4963507bcdff6a872/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a043facf5a8b75eb15547ed788296b6c3df2c586",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a043facf5a8b75eb15547ed788296b6c3df2c586",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a043facf5a8b75eb15547ed788296b6c3df2c586"
      }
    ],
    "stats": {
      "total": 2340,
      "additions": 1123,
      "deletions": 1217
    },
    "files": [
      {
        "sha": "bc88201f0faec76552908fbe26b61f2de80aa8e2",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be22b3da1df15757ef15e4c4963507bcdff6a872/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be22b3da1df15757ef15e4c4963507bcdff6a872/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=be22b3da1df15757ef15e4c4963507bcdff6a872",
        "patch": "@@ -1,11 +1,8 @@\n ### Seeds ###\n \n-Utility to generate the pnSeed[] array that is compiled into the client\n-(see [src/net.cpp](/src/net.cpp)).\n+Utility to generate the seeds.txt list that is compiled into the client\n+(see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and [share/seeds](/share/seeds)).\n \n-The 600 seeds compiled into the 0.8 release were created from sipa's DNS seed data, like this:\n+The 512 seeds compiled into the 0.10 release were created from sipa's DNS seed data, like this:\n \n-\tcurl -s http://bitcoin.sipa.be/seeds.txt | head -1000 | makeseeds.py\n-\n-The input to makeseeds.py is assumed to be approximately sorted from most-reliable to least-reliable,\n-with IP:port first on each line (lines that don't match IPv4:port are ignored).\n+\tcurl -s http://bitcoin.sipa.be/seeds.txt | makeseeds.py"
      },
      {
        "sha": "b831395f2c717d0ec8245a6dae1268f16c31372b",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 104,
        "deletions": 18,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be22b3da1df15757ef15e4c4963507bcdff6a872/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be22b3da1df15757ef15e4c4963507bcdff6a872/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=be22b3da1df15757ef15e4c4963507bcdff6a872",
        "patch": "@@ -1,32 +1,118 @@\n #!/usr/bin/env python\n #\n-# Generate pnSeed[] from Pieter's DNS seeder\n+# Generate seeds.txt from Pieter's DNS seeder\n #\n \n-NSEEDS=600\n+NSEEDS=512\n+\n+MAX_SEEDS_PER_ASN=2\n+\n+MIN_BLOCKS = 337600\n+\n+# These are hosts that have been observed to be behaving strangely (e.g.\n+# aggressively connecting to every node).\n+SUSPICIOUS_HOSTS = set([\n+    \"130.211.129.106\", \"178.63.107.226\",\n+    \"83.81.130.26\", \"88.198.17.7\", \"148.251.238.178\", \"176.9.46.6\",\n+    \"54.173.72.127\", \"54.174.10.182\", \"54.183.64.54\", \"54.194.231.211\",\n+    \"54.66.214.167\", \"54.66.220.137\", \"54.67.33.14\", \"54.77.251.214\",\n+    \"54.94.195.96\", \"54.94.200.247\"\n+])\n \n import re\n import sys\n-from subprocess import check_output\n+import dns.resolver\n+\n+PATTERN_IPV4 = re.compile(r\"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):8333$\")\n+PATTERN_AGENT = re.compile(r\"^(\\/Satoshi:0.8.6\\/|\\/Satoshi:0.9.(2|3)\\/|\\/Satoshi:0.10.\\d{1,2}\\/)$\")\n+\n+def parseline(line):\n+    sline = line.split()\n+    if len(sline) < 11:\n+       return None\n+    # Match only IPv4\n+    m = PATTERN_IPV4.match(sline[0])\n+    if m is None:\n+        return None\n+    # Do IPv4 sanity check\n+    ip = 0\n+    for i in range(0,4):\n+        if int(m.group(i+2)) < 0 or int(m.group(i+2)) > 255:\n+            return None\n+        ip = ip + (int(m.group(i+2)) << (8*(3-i)))\n+    if ip == 0:\n+        return None\n+    # Skip bad results.\n+    if sline[1] == 0:\n+        return None\n+    # Extract uptime %.\n+    uptime30 = float(sline[7][:-1])\n+    # Extract Unix timestamp of last success.\n+    lastsuccess = int(sline[2])\n+    # Extract protocol version.\n+    version = int(sline[10])\n+    # Extract user agent.\n+    agent = sline[11][1:-1]\n+    # Extract service flags.\n+    service = int(sline[9], 16)\n+    # Extract blocks.\n+    blocks = int(sline[8])\n+    # Construct result.\n+    return {\n+        'ip': m.group(1),\n+        'ipnum': ip,\n+        'uptime': uptime30,\n+        'lastsuccess': lastsuccess,\n+        'version': version,\n+        'agent': agent,\n+        'service': service,\n+        'blocks': blocks,\n+    }\n+\n+# Based on Greg Maxwell's seed_filter.py\n+def filterbyasn(ips, max_per_asn, max_total):\n+    result = []\n+    asn_count = {}\n+    for ip in ips:\n+        if len(result) == max_total:\n+            break\n+        try:\n+            asn = int([x.to_text() for x in dns.resolver.query('.'.join(reversed(ip['ip'].split('.'))) + '.origin.asn.cymru.com', 'TXT').response.answer][0].split('\\\"')[1].split(' ')[0])\n+            if asn not in asn_count:\n+                asn_count[asn] = 0\n+            if asn_count[asn] == max_per_asn:\n+                continue\n+            asn_count[asn] += 1\n+            result.append(ip)\n+        except:\n+            sys.stderr.write('ERR: Could not resolve ASN for \"' + ip['ip'] + '\"\\n')\n+    return result\n \n def main():\n     lines = sys.stdin.readlines()\n+    ips = [parseline(line) for line in lines]\n+\n+    # Skip entries with valid IPv4 address.\n+    ips = [ip for ip in ips if ip is not None]\n+    # Skip entries from suspicious hosts.\n+    ips = [ip for ip in ips if ip['ip'] not in SUSPICIOUS_HOSTS]\n+    # Enforce minimal number of blocks.\n+    ips = [ip for ip in ips if ip['blocks'] >= MIN_BLOCKS]\n+    # Require service bit 1.\n+    ips = [ip for ip in ips if (ip['service'] & 1) == 1]\n+    # Require at least 50% 30-day uptime.\n+    ips = [ip for ip in ips if ip['uptime'] > 50]\n+    # Require a known and recent user agent.\n+    ips = [ip for ip in ips if PATTERN_AGENT.match(ip['agent'])]\n+    # Sort by availability (and use last success as tie breaker)\n+    ips.sort(key=lambda x: (x['uptime'], x['lastsuccess'], x['ip']), reverse=True)\n+    # Look up ASNs and limit results, both per ASN and globally.\n+    ips = filterbyasn(ips, MAX_SEEDS_PER_ASN, NSEEDS)\n+    # Sort the results by IP address (for deterministic output).\n+    ips.sort(key=lambda x: (x['ipnum']))\n \n-    ips = []\n-    pattern = re.compile(r\"^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}):8333\")\n-    for line in lines:\n-        m = pattern.match(line)\n-        if m is None:\n-            continue\n-        ip = 0\n-        for i in range(0,4):\n-            ip = ip + (int(m.group(i+1)) << (8*(i)))\n-        if ip == 0:\n-            continue\n-        ips.append(ip)\n-\n-    for row in range(0, min(NSEEDS,len(ips)), 8):\n-        print \"    \" + \", \".join([ \"0x%08x\"%i for i in ips[row:row+8] ]) + \",\"\n+    for ip in ips:\n+        print ip['ip']\n \n if __name__ == '__main__':\n     main()"
      },
      {
        "sha": "3dba6d8a6482996b4e9fc9cd4c134b41aecae080",
        "filename": "share/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 513,
        "deletions": 602,
        "changes": 1115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be22b3da1df15757ef15e4c4963507bcdff6a872/share/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be22b3da1df15757ef15e4c4963507bcdff6a872/share/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/seeds/nodes_main.txt?ref=be22b3da1df15757ef15e4c4963507bcdff6a872",
        "patch": "@@ -1,607 +1,518 @@\n # List of fixed seed nodes for main network\n \n-# IPv4 nodes (in old chainparams.cpp 0xDDCCBBAA format)\n-#  n.b. when importing a new list, there is no need to use this format, just use IPv4 dotted addresses directly\n-0x7e6a692e # 46.105.106.126\n-0x7d04d1a2 # 162.209.4.125\n-0x6c0c17d9 # 217.23.12.108\n-0xdb330ab9 # 185.10.51.219\n-0xc649c7c6 # 198.199.73.198\n-0x7895484d # 77.72.149.120\n-0x047109b0 # 176.9.113.4\n-0xb90ca5bc # 188.165.12.185\n-0xd130805f # 95.128.48.209\n-0xbd074ea6 # 166.78.7.189\n-0x578ff1c0 # 192.241.143.87\n-0x286e09b0 # 176.9.110.40\n-0xd4dcaf42 # 66.175.220.212\n-0x529b6bb8 # 184.107.155.82\n-0x635cc6c0 # 192.198.92.99\n-0xedde892e # 46.137.222.237\n-0xa976d9c7 # 199.217.118.169\n-0xea91a4b8 # 184.164.145.234\n-0x03fa4eb2 # 178.78.250.3\n-0x6ca9008d # 141.0.169.108\n-0xaf62c825 # 37.200.98.175\n-0x93f3ba51 # 81.186.243.147\n-0xc2c9efd5 # 213.239.201.194\n-0x0ed5175e # 94.23.213.14\n-0x487028bc # 188.40.112.72\n-0x7297c225 # 37.194.151.114\n-0x8af0c658 # 88.198.240.138\n-0x2e57ba1f # 31.186.87.46\n-0xd0098abc # 188.138.9.208\n-0x46a8853e # 62.133.168.70\n-0xcc92dc3e # 62.220.146.204\n-0xeb6f1955 # 85.25.111.235\n-0x8cce175e # 94.23.206.140\n-0x237281ae # 174.129.114.35\n-0x9d42795b # 91.121.66.157\n-0x4f4f0905 # 5.9.79.79\n-0xc50151d0 # 208.81.1.197\n-0xb1ba90c6 # 198.144.186.177\n-0xaed7175e # 94.23.215.174\n-0x204de55b # 91.229.77.32\n-0x4bb03245 # 69.50.176.75\n-0x932b28bc # 188.40.43.147\n-0x2dcce65b # 91.230.204.45\n-0xe2708abc # 188.138.112.226\n-0x1b08b8d5 # 213.184.8.27\n-0x12a3dc5b # 91.220.163.18\n-0x8a884c90 # 144.76.136.138\n-0xa386a8b8 # 184.168.134.163\n-0x18e417c6 # 198.23.228.24\n-0x2e709ac3 # 195.154.112.46\n-0xeb62e925 # 37.233.98.235\n-0x6f6503ae # 174.3.101.111\n-0x05d0814e # 78.129.208.5\n-0x8a9ac545 # 69.197.154.138\n-0x946fd65e # 94.214.111.148\n-0x3f57495d # 93.73.87.63\n-0x4a29c658 # 88.198.41.74\n-0xad454c90 # 144.76.69.173\n-0x15340905 # 5.9.52.21\n-0x4c3f3b25 # 37.59.63.76\n-0x01fe19b9 # 185.25.254.1\n-0x5620595b # 91.89.32.86\n-0x443c795b # 91.121.60.68\n-0x44f24ac8 # 200.74.242.68\n-0x0442464e # 78.70.66.4\n-0xc8665882 # 130.88.102.200\n-0xed3f3ec3 # 195.62.63.237\n-0xf585bf5d # 93.191.133.245\n-0x5dd141da # 218.65.209.93\n-0xf93a084e # 78.8.58.249\n-0x1264dd52 # 82.221.100.18\n-0x0711c658 # 88.198.17.7\n-0xf12e7bbe # 190.123.46.241\n-0x5b02b740 # 64.183.2.91\n-0x7d526dd5 # 213.109.82.125\n-0x0cb04c90 # 144.76.176.12\n-0x2abe1132 # 50.17.190.42\n-0x61a39f58 # 88.159.163.97\n-0x044a0618 # 24.6.74.4\n-0xf3af7dce # 206.125.175.243\n-0xb994c96d # 109.201.148.185\n-0x361c5058 # 88.80.28.54\n-0xca735d53 # 83.93.115.202\n-0xeca743b0 # 176.67.167.236\n-0xec790905 # 5.9.121.236\n-0xc4d37845 # 69.120.211.196\n-0xa1c4a2b2 # 178.162.196.161\n-0x726fd453 # 83.212.111.114\n-0x625cc6c0 # 192.198.92.98\n-0x6c20132e # 46.19.32.108\n-0xb7aa0c79 # 121.12.170.183\n-0xc6ed983d # 61.152.237.198\n-0x47e4cbc0 # 192.203.228.71\n-0xa4ac75d4 # 212.117.172.164\n-0xe2e59345 # 69.147.229.226\n-0x4d784ad0 # 208.74.120.77\n-0x18a5ec5e # 94.236.165.24\n-0x481cc85b # 91.200.28.72\n-0x7c6c2fd5 # 213.47.108.124\n-0x5e4d6018 # 24.96.77.94\n-0x5b4b6c18 # 24.108.75.91\n-0xd99b4c90 # 144.76.155.217\n-0xe63987dc # 220.135.57.230\n-0xb817bb25 # 37.187.23.184\n-0x141cfeb2 # 178.254.28.20\n-0x5f005058 # 88.80.0.95\n-0x0d987f47 # 71.127.152.13\n-0x242a496d # 109.73.42.36\n-0x3e519bc0 # 192.155.81.62\n-0x02b2454b # 75.69.178.2\n-0xdfaf3dc6 # 198.61.175.223\n-0x888128bc # 188.40.129.136\n-0x1165bb25 # 37.187.101.17\n-0xabfeca5b # 91.202.254.171\n-0x2ef63540 # 64.53.246.46\n-0x5773c7c6 # 198.199.115.87\n-0x1280dd52 # 82.221.128.18\n-0x8ebcacd9 # 217.172.188.142\n-0x81c439c6 # 198.57.196.129\n-0x39fcfa45 # 69.250.252.57\n-0x62177d41 # 65.125.23.98\n-0xc975ed62 # 98.237.117.201\n-0x05cff476 # 118.244.207.5\n-0xdabda743 # 67.167.189.218\n-0xaa1ac24e # 78.194.26.170\n-0xe255a22e # 46.162.85.226\n-0x88aac705 # 5.199.170.136\n-0xe707c658 # 88.198.7.231\n-0xa9e94b5e # 94.75.233.169\n-0x2893484b # 75.72.147.40\n-0x99512705 # 5.39.81.153\n-0xd63970ca # 202.112.57.214\n-0x45994f32 # 50.79.153.69\n-0xe519a8ad # 173.168.25.229\n-0x92e25f5d # 93.95.226.146\n-0x8b84a9c1 # 193.169.132.139\n-0x5eaa0a05 # 5.10.170.94\n-0xa74de55b # 91.229.77.167\n-0xb090ff62 # 98.255.144.176\n-0x5eee326c # 108.50.238.94\n-0xc331a679 # 121.166.49.195\n-0xc1d9b72e # 46.183.217.193\n-0x0c6ab982 # 130.185.106.12\n-0x7362bb25 # 37.187.98.115\n-0x4cfedd42 # 66.221.254.76\n-0x1e09a032 # 50.160.9.30\n-0xa4c34c5e # 94.76.195.164\n-0x3777d9c7 # 199.217.119.55\n-0x5edcf260 # 96.242.220.94\n-0x3ce2b548 # 72.181.226.60\n-0xd2ac0360 # 96.3.172.210\n-0x2f80b992 # 146.185.128.47\n-0x3e4cbb25 # 37.187.76.62\n-0x3995e236 # 54.226.149.57\n-0xd03977ae # 174.119.57.208\n-0x953cf054 # 84.240.60.149\n-0x3c654ed0 # 208.78.101.60\n-0x74024c90 # 144.76.2.116\n-0xa14f1155 # 85.17.79.161\n-0x14ce0125 # 37.1.206.20\n-0xc15ebb6a # 106.187.94.193\n-0x2c08c452 # 82.196.8.44\n-0xc7fd0652 # 82.6.253.199\n-0x7604f8ce # 206.248.4.118\n-0xffb38332 # 50.131.179.255\n-0xa4c2efd5 # 213.239.194.164\n-0xe9614018 # 24.64.97.233\n-0xab49e557 # 87.229.73.171\n-0x1648c052 # 82.192.72.22\n-0x36024047 # 71.64.2.54\n-0x0e8cffad # 173.255.140.14\n-0x21918953 # 83.137.145.33\n-0xb61f50ad # 173.80.31.182\n-0x9b406b59 # 89.107.64.155\n-0xaf282218 # 24.34.40.175\n-0x7f1d164e # 78.22.29.127\n-0x1f560da2 # 162.13.86.31\n-0xe237be58 # 88.190.55.226\n-0xbdeb1955 # 85.25.235.189\n-0x6c0717d9 # 217.23.7.108\n-0xdaf8ce62 # 98.206.248.218\n-0x0f74246c # 108.36.116.15\n-0xdee95243 # 67.82.233.222\n-0xf23f1a56 # 86.26.63.242\n-0x61bdf867 # 103.248.189.97\n-0xd254c854 # 84.200.84.210\n-0xc4422e4e # 78.46.66.196\n-0xae0563c0 # 192.99.5.174\n-0xbdb9a95f # 95.169.185.189\n-0xa9eb32c6 # 198.50.235.169\n-0xd9943950 # 80.57.148.217\n-0x116add52 # 82.221.106.17\n-0x73a54c90 # 144.76.165.115\n-0xb36b525e # 94.82.107.179\n-0xd734175e # 94.23.52.215\n-0x333d7f76 # 118.127.61.51\n-0x51431bc6 # 198.27.67.81\n-0x084ae5cf # 207.229.74.8\n-0xa60a236c # 108.35.10.166\n-0x5c67692e # 46.105.103.92\n-0x0177cf45 # 69.207.119.1\n-0xa6683ac6 # 198.58.104.166\n-0x7ff4ea47 # 71.234.244.127\n-0x2192fab2 # 178.250.146.33\n-0xa03a0f46 # 70.15.58.160\n-0xfe3e39ae # 174.57.62.254\n-0x2cce5fc1 # 193.95.206.44\n-0xc8a6c148 # 72.193.166.200\n-0x96fb7e4c # 76.126.251.150\n-0x0a66c752 # 82.199.102.10\n-0x6b4d2705 # 5.39.77.107\n-0xeba0c118 # 24.193.160.235\n-0x3ba0795b # 91.121.160.59\n-0x1dccd23e # 62.210.204.29\n-0x6912f3a2 # 162.243.18.105\n-0x22f23c41 # 65.60.242.34\n-0x65646b4a # 74.107.100.101\n-0x8b9f8705 # 5.135.159.139\n-0xeb9b9a95 # 149.154.155.235\n-0x79fe6b4e # 78.107.254.121\n-0x0536f447 # 71.244.54.5\n-0x23224d61 # 97.77.34.35\n-0x5d952ec6 # 198.46.149.93\n-0x0cb4f736 # 54.247.180.12\n-0xdc14be6d # 109.190.20.220\n-0xb24609b0 # 176.9.70.178\n-0xd3f79b62 # 98.155.247.211\n-0x6518c836 # 54.200.24.101\n-0x83a3cf42 # 66.207.163.131\n-0x9b641fb0 # 176.31.100.155\n-0x17fef1c0 # 192.241.254.23\n-0xd508cc82 # 130.204.8.213\n-0x91a4369b # 155.54.164.145\n-0x39cb4a4c # 76.74.203.57\n-0xbbc9536c # 108.83.201.187\n-0xaf64c44a # 74.196.100.175\n-0x605eca50 # 80.202.94.96\n-0x0c6a6805 # 5.104.106.12\n-0xd07e9d4e # 78.157.126.208\n-0x78e6d3a2 # 162.211.230.120\n-0x1b31eb6d # 109.235.49.27\n-0xaa01feb2 # 178.254.1.170\n-0x4603c236 # 54.194.3.70\n-0x1ecba3b6 # 182.163.203.30\n-0x0effe336 # 54.227.255.14\n-0xc3fdcb36 # 54.203.253.195\n-0xc290036f # 111.3.144.194\n-0x4464692e # 46.105.100.68\n-0x1aca7589 # 137.117.202.26\n-0x59a9e52e # 46.229.169.89\n-0x19aa7489 # 137.116.170.25\n-0x2622c85e # 94.200.34.38\n-0xa598d318 # 24.211.152.165\n-0x438ec345 # 69.195.142.67\n-0xc79619b9 # 185.25.150.199\n-0xaf570360 # 96.3.87.175\n-0x5098e289 # 137.226.152.80\n-0x36add862 # 98.216.173.54\n-0x83c1a2b2 # 178.162.193.131\n-0x969d0905 # 5.9.157.150\n-0xcf3d156c # 108.21.61.207\n-0x49c1a445 # 69.164.193.73\n-0xbd0b7562 # 98.117.11.189\n-0x8fff1955 # 85.25.255.143\n-0x1e51fe53 # 83.254.81.30\n-0x28d6efd5 # 213.239.214.40\n-0x2837cc62 # 98.204.55.40\n-0x02f42d42 # 66.45.244.2\n-0x070e3fb2 # 178.63.14.7\n-0xbcb18705 # 5.135.177.188\n-0x14a4e15b # 91.225.164.20\n-0x82096844 # 68.104.9.130\n-0xcfcb1c2e # 46.28.203.207\n-0x37e27fc7 # 199.127.226.55\n-0x07923748 # 72.55.146.7\n-0x0c14bc2e # 46.188.20.12\n-0x26100905 # 5.9.16.38\n-0xcb7cd93e # 62.217.124.203\n-0x3bc0d2c0 # 192.210.192.59\n-0x97131b4c # 76.27.19.151\n-0x6f1e5c17 # 23.92.30.111\n-0xa7939f43 # 67.159.147.167\n-0xb7a0bf58 # 88.191.160.183\n-0xafa83a47 # 71.58.168.175\n-0xcbb83f32 # 50.63.184.203\n-0x5f321cb0 # 176.28.50.95\n-0x52d6c3c7 # 199.195.214.82\n-0xdeac5bc7 # 199.91.172.222\n-0x2cf310cc # 204.16.243.44\n-0x108a2bc3 # 195.43.138.16\n-0x726fa14f # 79.161.111.114\n-0x85bad2cc # 204.210.186.133\n-0x459e4c90 # 144.76.158.69\n-0x1a08b8d8 # 216.184.8.26\n-0xcd7048c6 # 198.72.112.205\n-0x6d5b4c90 # 144.76.91.109\n-0xa66cfe7b # 123.254.108.166\n-0xad730905 # 5.9.115.173\n-0xdaac5bc7 # 199.91.172.218\n-0x8417fd9f # 159.253.23.132\n-0x41377432 # 50.116.55.65\n-0x1f138632 # 50.134.19.31\n-0x295a12b2 # 178.18.90.41\n-0x7ac031b2 # 178.49.192.122\n-0x3a87d295 # 149.210.135.58\n-0xe219bc2e # 46.188.25.226\n-0xf485d295 # 149.210.133.244\n-0x137b6405 # 5.100.123.19\n-0xcfffd9ad # 173.217.255.207\n-0xafe20844 # 68.8.226.175\n-0x32679a5f # 95.154.103.50\n-0xa431c644 # 68.198.49.164\n-0x0e5fce8c # 140.206.95.14\n-0x305ef853 # 83.248.94.48\n-0xad26ca32 # 50.202.38.173\n-0xd9d21a54 # 84.26.210.217\n-0xddd0d736 # 54.215.208.221\n-0xc24ec0c7 # 199.192.78.194\n-0x4aadcd5b # 91.205.173.74\n-0x49109852 # 82.152.16.73\n-0x9d6b3ac6 # 198.58.107.157\n-0xf0aa1e8b # 139.30.170.240\n-0xf1bfa343 # 67.163.191.241\n-0x8a30c0ad # 173.192.48.138\n-0x260f93d4 # 212.147.15.38\n-0x2339e760 # 96.231.57.35\n-0x8869959f # 159.149.105.136\n-0xc207216c # 108.33.7.194\n-0x29453448 # 72.52.69.41\n-0xb651ec36 # 54.236.81.182\n-0x45496259 # 89.98.73.69\n-0xa23d1bcc # 204.27.61.162\n-0xb39bcf43 # 67.207.155.179\n-0xa1d29432 # 50.148.210.161\n-0x3507c658 # 88.198.7.53\n-0x4a88dd62 # 98.221.136.74\n-0x27aff363 # 99.243.175.39\n-0x7498ea6d # 109.234.152.116\n-0x4a6785d5 # 213.133.103.74\n-0x5e6d47c2 # 194.71.109.94\n-0x3baba542 # 66.165.171.59\n-0x045a37ae # 174.55.90.4\n-0xa24dc0c7 # 199.192.77.162\n-0xe981ea4d # 77.234.129.233\n-0xed6ce217 # 23.226.108.237\n-0x857214c6 # 198.20.114.133\n-0x6b6c0464 # 100.4.108.107\n-0x5a4945b8 # 184.69.73.90\n-0x12f24742 # 66.71.242.18\n-0xf35f42ad # 173.66.95.243\n-0xfd0f5a4e # 78.90.15.253\n-0xfb081556 # 86.21.8.251\n-0xb24b5861 # 97.88.75.178\n-0x2e114146 # 70.65.17.46\n-0xb7780905 # 5.9.120.183\n-0x33bb0e48 # 72.14.187.51\n-0x39e26556 # 86.101.226.57\n-0xa794484d # 77.72.148.167\n-0x4225424d # 77.66.37.66\n-0x3003795b # 91.121.3.48\n-0x31c8cf44 # 68.207.200.49\n-0xd65bad59 # 89.173.91.214\n-0x127bc648 # 72.198.123.18\n-0xf2bc4d4c # 76.77.188.242\n-0x0273dc50 # 80.220.115.2\n-0x4572d736 # 54.215.114.69\n-0x064bf653 # 83.246.75.6\n-0xcdcd126c # 108.18.205.205\n-0x608281ae # 174.129.130.96\n-0x4d130087 # 135.0.19.77\n-0x1016f725 # 37.247.22.16\n-0xba185fc0 # 192.95.24.186\n-0x16c1a84f # 79.168.193.22\n-0xfb697252 # 82.114.105.251\n-0xa2942360 # 96.35.148.162\n-0x53083b6c # 108.59.8.83\n-0x0583f1c0 # 192.241.131.5\n-0x2d5a2441 # 65.36.90.45\n-0xc172aa43 # 67.170.114.193\n-0xcd11cf36 # 54.207.17.205\n-0x7b14ed62 # 98.237.20.123\n-0x5c94f1c0 # 192.241.148.92\n-0x7c23132e # 46.19.35.124\n-0x39965a6f # 111.90.150.57\n-0x7890e24e # 78.226.144.120\n-0xa38ec447 # 71.196.142.163\n-0xc187f1c0 # 192.241.135.193\n-0xef80b647 # 71.182.128.239\n-0xf20a7432 # 50.116.10.242\n-0x7ad1d8d2 # 210.216.209.122\n-0x869e2ec6 # 198.46.158.134\n-0xccdb5c5d # 93.92.219.204\n-0x9d11f636 # 54.246.17.157\n-0x2161bb25 # 37.187.97.33\n-0x7599f889 # 137.248.153.117\n-0x2265ecad # 173.236.101.34\n-0x0f4f0e55 # 85.14.79.15\n-0x7d25854a # 74.133.37.125\n-0xf857e360 # 96.227.87.248\n-0xf83f3d6c # 108.61.63.248\n-0x9cc93bb8 # 184.59.201.156\n-0x02716857 # 87.104.113.2\n-0x5dd8a177 # 119.161.216.93\n-0x8adc6cd4 # 212.108.220.138\n-0xe5613d46 # 70.61.97.229\n-0x6a734f50 # 80.79.115.106\n-0x2a5c3bae # 174.59.92.42\n-0x4a04c3d1 # 209.195.4.74\n-0xe4613d46 # 70.61.97.228\n-0x8426f4bc # 188.244.38.132\n-0x3e1b5fc0 # 192.95.27.62\n-0x0d5a3c18 # 24.60.90.13\n-0xd0f6d154 # 84.209.246.208\n-0x21c7ff5e # 94.255.199.33\n-0xeb3f3d6c # 108.61.63.235\n-0x9da5edc0 # 192.237.165.157\n-0x5d753b81 # 129.59.117.93\n-0x0d8d53d4 # 212.83.141.13\n-0x2613f018 # 24.240.19.38\n-0x4443698d # 141.105.67.68\n-0x8ca1edcd # 205.237.161.140\n-0x10ed3f4e # 78.63.237.16\n-0x789b403a # 58.64.155.120\n-0x7b984a4b # 75.74.152.123\n-0x964ebc25 # 37.188.78.150\n-0x7520ee60 # 96.238.32.117\n-0x4f4828bc # 188.40.72.79\n-0x115c407d # 125.64.92.17\n-0x32dd0667 # 103.6.221.50\n-0xa741715e # 94.113.65.167\n-0x1d3f3532 # 50.53.63.29\n-0x817d1f56 # 86.31.125.129\n-0x2f99a552 # 82.165.153.47\n-0x6b2a5956 # 86.89.42.107\n-0x8d4f4f05 # 5.79.79.141\n-0xd23c1e17 # 23.30.60.210\n-0x98993748 # 72.55.153.152\n-0x2c92e536 # 54.229.146.44\n-0x237ebdc3 # 195.189.126.35\n-0xa762fb43 # 67.251.98.167\n-0x32016b71 # 113.107.1.50\n-0xd0e7cf79 # 121.207.231.208\n-0x7d35bdd5 # 213.189.53.125\n-0x53dac3d2 # 210.195.218.83\n-0x31016b71 # 113.107.1.49\n-0x7fb8f8ce # 206.248.184.127\n-0x9a38c232 # 50.194.56.154\n-0xefaa42ad # 173.66.170.239\n-0x876b823d # 61.130.107.135\n-0x18175347 # 71.83.23.24\n-0xdb46597d # 125.89.70.219\n-0xd2c168da # 218.104.193.210\n-0xcd6fe9dc # 220.233.111.205\n-0x45272e4e # 78.46.39.69\n-0x8d4bca5b # 91.202.75.141\n-0xa4043d47 # 71.61.4.164\n-0xaab7aa47 # 71.170.183.170\n-0x202881ae # 174.129.40.32\n-0xa4aef160 # 96.241.174.164\n-0xecd7e6bc # 188.230.215.236\n-0x391359ad # 173.89.19.57\n-0xd8cc9318 # 24.147.204.216\n-0xbbeee52e # 46.229.238.187\n-0x077067b0 # 176.103.112.7\n-0xebd39d62 # 98.157.211.235\n-0x0cedc547 # 71.197.237.12\n-0x23d3e15e # 94.225.211.35\n-0xa5a81318 # 24.19.168.165\n-0x179a32c6 # 198.50.154.23\n-0xe4d3483d # 61.72.211.228\n-0x03680905 # 5.9.104.3\n-0xe8018abc # 188.138.1.232\n-0xdde9ef5b # 91.239.233.221\n-0x438b8705 # 5.135.139.67\n-0xb48224a0 # 160.36.130.180\n-0xcbd69218 # 24.146.214.203\n-0x9075795b # 91.121.117.144\n-0xc6411c3e # 62.28.65.198\n-0x03833f5c # 92.63.131.3\n-0xf33f8b5e # 94.139.63.243\n-0x495e464b # 75.70.94.73\n-0x83c8e65b # 91.230.200.131\n-0xac09cd25 # 37.205.9.172\n-0xdaabc547 # 71.197.171.218\n-0x7665a553 # 83.165.101.118\n-0xc5263718 # 24.55.38.197\n-0x2fd0c5cd # 205.197.208.47\n-0x22224d61 # 97.77.34.34\n-0x3e954048 # 72.64.149.62\n-0xfaa37557 # 87.117.163.250\n-0x36dbc658 # 88.198.219.54\n-0xa81453d0 # 208.83.20.168\n-0x5a941f5d # 93.31.148.90\n-0xa598ea60 # 96.234.152.165\n-0x65384ac6 # 198.74.56.101\n-0x10aaa545 # 69.165.170.16\n-0xaaab795b # 91.121.171.170\n-0xdda7024c # 76.2.167.221\n-0x0966f4c6 # 198.244.102.9\n-0x68571c08 # 8.28.87.104\n-0x8b40ee59 # 89.238.64.139\n-0x33ac096c # 108.9.172.51\n-0x844b4c4b # 75.76.75.132\n-0xd392254d # 77.37.146.211\n-0xba4d5a46 # 70.90.77.186\n-0x63029653 # 83.150.2.99\n-0xf655f636 # 54.246.85.246\n-0xbe4c4bb1 # 177.75.76.190\n-0x45dad036 # 54.208.218.69\n-0x204bc052 # 82.192.75.32\n-0x06c3a2b2 # 178.162.195.6\n-0xf31fba6a # 106.186.31.243\n-0xb21f09b0 # 176.9.31.178\n-0x540d0751 # 81.7.13.84\n-0xc7b46a57 # 87.106.180.199\n-0x6a11795b # 91.121.17.106\n-0x3d514045 # 69.64.81.61\n-0x0318aa6d # 109.170.24.3\n-0x30306ec3 # 195.110.48.48\n-0x5c077432 # 50.116.7.92\n-0x259ae46d # 109.228.154.37\n-0x82bbd35f # 95.211.187.130\n-0xae4222c0 # 192.34.66.174\n-0x254415d4 # 212.21.68.37\n-0xbd5f574b # 75.87.95.189\n-0xd8fd175e # 94.23.253.216\n-0x0a3f38c3 # 195.56.63.10\n-0x2dce6bb8 # 184.107.206.45\n-0xc201d058 # 88.208.1.194\n-0x17fca5bc # 188.165.252.23\n-0xe8453cca # 202.60.69.232\n-0xd361f636 # 54.246.97.211\n-0xa0d9edc0 # 192.237.217.160\n-0x2f232e4e # 78.46.35.47\n-0x134e116c # 108.17.78.19\n-0x61ddc058 # 88.192.221.97\n-0x05ba7283 # 131.114.186.5\n-0xe1f7ed5b # 91.237.247.225\n-0x040ec452 # 82.196.14.4\n-0x4b672e4e # 78.46.103.75\n-0xe4efa36d # 109.163.239.228\n-0x47dca52e # 46.165.220.71\n-0xe9332e4e # 78.46.51.233\n-0xa3acb992 # 146.185.172.163\n-0x24714c90 # 144.76.113.36\n-0xa8cc8632 # 50.134.204.168\n-0x26b1ce6d # 109.206.177.38\n-0x264e53d4 # 212.83.78.38\n-0xd3d2718c # 140.113.210.211\n-0x225534ad # 173.52.85.34\n-0xe289f3a2 # 162.243.137.226\n-0x87341717 # 23.23.52.135\n-0x9255ad4f # 79.173.85.146\n-0x184bbb25 # 37.187.75.24\n-0x885c7abc # 188.122.92.136\n-0x3a6e9ac6 # 198.154.110.58\n-0x1924185e # 94.24.36.25\n-0xb73d4c90 # 144.76.61.183\n-0x946d807a # 122.128.109.148\n-0xa0d78e3f # 63.142.215.160\n-0x5a16bb25 # 37.187.22.90\n-0xcb09795b # 91.121.9.203\n-0x8d0de657 # 87.230.13.141\n-0x630b8b25 # 37.139.11.99\n-0xe572c6cf # 207.198.114.229\n-0x2b3f1118 # 24.17.63.43\n-0x4242a91f # 31.169.66.66\n-0x32990905 # 5.9.153.50\n-0x058b0905 # 5.9.139.5\n-0xe266fc60 # 96.252.102.226\n-0xbe66c5b0 # 176.197.102.190\n-0xcc98e46d # 109.228.152.204\n-0x698c943e # 62.148.140.105\n-0x44bd0cc3 # 195.12.189.68\n-0x865c7abc # 188.122.92.134\n-0x771764d3 # 211.100.23.119\n-0x4675d655 # 85.214.117.70\n-0x354e4826 # 38.72.78.53\n-0xb67ac152 # 82.193.122.182\n-0xaeccf285 # 133.242.204.174\n-0xea625b4e # 78.91.98.234\n-0xbcd6031f # 31.3.214.188\n-0x5e81eb18 # 24.235.129.94\n-0x74b347ce # 206.71.179.116\n-0x3ca56ac1 # 193.106.165.60\n-0x54ee4546 # 70.69.238.84\n-0x38a8175e # 94.23.168.56\n-0xa3c21155 # 85.17.194.163\n-0x2f01576d # 109.87.1.47\n-0x5d7ade50 # 80.222.122.93\n-0xa003ae48 # 72.174.3.160\n-0x2bc1d31f # 31.211.193.43\n-0x13f5094c # 76.9.245.19\n-0x7ab32648 # 72.38.179.122\n-0x542e9fd5 # 213.159.46.84\n-0x53136bc1 # 193.107.19.83\n-0x7fdf51c0 # 192.81.223.127\n-0x802197b2 # 178.151.33.128\n-0xa2d2cc5b # 91.204.210.162\n-0x6b5f4bc0 # 192.75.95.107\n+# IPv4 nodes (generated using contrib/seeds/makeseeds.py)\n+1.33.197.110\n+1.34.180.245\n+1.202.128.218\n+2.35.195.25\n+5.100.123.19\n+5.175.145.169\n+5.199.133.193\n+5.199.151.10\n+5.228.1.230\n+14.200.200.145\n+18.228.0.188\n+18.228.0.200\n+23.30.243.153\n+23.88.232.49\n+23.99.105.9\n+23.226.137.208\n+23.227.177.161\n+23.227.191.50\n+23.229.45.32\n+23.236.144.69\n+23.253.148.113\n+23.253.241.22\n+23.255.227.231\n+24.20.205.222\n+24.23.120.252\n+24.94.98.96\n+24.98.95.201\n+24.111.90.55\n+24.119.119.105\n+24.138.25.149\n+31.3.214.45\n+31.186.87.46\n+31.186.101.98\n+31.186.250.186\n+31.204.153.107\n+37.44.16.231\n+37.44.44.11\n+37.120.168.204\n+37.143.86.26\n+37.187.75.24\n+37.188.68.169\n+37.192.95.150\n+37.201.246.116\n+37.205.10.140\n+46.10.210.17\n+46.19.138.154\n+46.28.204.123\n+46.28.205.67\n+46.38.235.229\n+46.163.76.230\n+46.166.162.91\n+46.173.190.50\n+46.227.66.132\n+46.229.238.187\n+46.236.116.209\n+47.55.14.65\n+50.7.252.229\n+50.46.159.91\n+50.78.49.181\n+50.78.231.57\n+50.79.153.65\n+50.116.34.44\n+50.126.86.253\n+50.142.41.23\n+50.199.113.193\n+50.200.78.107\n+50.206.138.177\n+50.252.52.49\n+54.165.25.75\n+54.169.107.40\n+54.179.190.56\n+54.187.82.121\n+54.246.85.246\n+58.74.7.205\n+58.96.183.121\n+61.62.58.38\n+61.63.91.72\n+61.63.91.112\n+61.72.211.228\n+62.43.40.154\n+62.43.130.178\n+62.80.185.213\n+62.109.49.26\n+62.173.139.58\n+62.181.238.186\n+62.210.114.127\n+63.141.228.138\n+63.153.213.78\n+63.223.84.145\n+63.251.88.112\n+64.31.110.50\n+64.34.121.45\n+64.114.6.42\n+64.140.125.98\n+64.156.193.100\n+65.30.47.116\n+65.35.132.177\n+65.96.193.165\n+65.111.189.26\n+66.68.10.30\n+66.114.33.250\n+66.130.46.63\n+66.175.215.135\n+66.190.253.165\n+66.194.38.254\n+66.244.98.111\n+67.162.238.30\n+67.169.255.17\n+67.183.173.25\n+67.219.233.140\n+67.227.240.115\n+67.247.222.71\n+68.43.114.66\n+68.52.33.36\n+68.198.245.241\n+69.12.226.165\n+69.13.198.188\n+69.15.179.62\n+69.39.239.47\n+69.47.45.87\n+69.62.217.206\n+69.64.42.31\n+69.64.81.61\n+69.67.219.200\n+69.90.132.157\n+69.94.30.177\n+69.136.175.241\n+70.61.97.228\n+70.123.118.132\n+71.59.152.182\n+71.198.248.151\n+71.200.242.89\n+71.225.179.157\n+72.14.187.51\n+72.38.34.180\n+72.52.72.187\n+72.91.144.182\n+72.167.49.217\n+72.201.243.55\n+72.223.60.249\n+72.228.153.102\n+73.26.101.228\n+73.50.158.200\n+73.181.204.170\n+74.57.199.180\n+74.63.222.226\n+74.81.231.21\n+74.193.126.82\n+74.207.235.164\n+75.83.197.114\n+75.144.114.9\n+76.112.5.247\n+76.174.20.247\n+77.37.240.142\n+77.57.202.107\n+77.172.123.53\n+77.221.91.253\n+77.235.48.48\n+77.245.78.2\n+78.8.58.249\n+78.27.191.182\n+78.129.236.141\n+78.131.88.47\n+78.157.205.6\n+79.132.230.144\n+79.143.188.155\n+79.160.221.140\n+79.161.111.114\n+80.100.189.3\n+80.147.140.121\n+80.203.75.133\n+80.220.99.227\n+80.222.20.169\n+80.241.1.7\n+81.23.191.243\n+81.38.11.202\n+81.80.9.71\n+81.110.213.165\n+81.133.155.237\n+81.171.34.37\n+81.181.155.180\n+82.39.156.137\n+82.73.161.95\n+82.130.45.40\n+82.165.153.47\n+82.168.128.133\n+82.179.225.118\n+82.194.245.158\n+82.199.102.10\n+82.211.30.243\n+82.217.133.145\n+82.221.128.35\n+82.221.131.177\n+82.233.225.205\n+83.0.249.146\n+83.89.31.249\n+83.128.29.231\n+83.128.253.142\n+83.143.130.56\n+83.150.2.99\n+83.150.9.196\n+83.161.64.45\n+83.212.103.212\n+83.212.111.114\n+83.246.75.8\n+83.254.81.31\n+83.254.150.54\n+84.2.34.104\n+84.15.61.60\n+84.17.25.135\n+84.42.144.19\n+84.212.210.135\n+84.215.165.231\n+84.238.140.176\n+84.240.31.184\n+85.25.214.137\n+85.139.163.132\n+85.199.4.228\n+85.214.61.209\n+85.214.108.77\n+86.123.16.17\n+87.48.42.199\n+87.104.168.104\n+87.229.73.171\n+87.236.196.77\n+88.97.56.98\n+88.134.178.89\n+88.150.233.19\n+88.168.133.3\n+88.208.18.246\n+88.208.33.202\n+89.18.28.21\n+89.85.220.84\n+89.163.227.28\n+89.184.83.60\n+89.231.96.83\n+89.236.49.117\n+91.90.66.209\n+91.106.194.97\n+91.134.75.115\n+91.152.193.36\n+91.152.219.35\n+91.197.10.234\n+91.209.77.101\n+91.210.106.147\n+91.214.200.205\n+91.223.115.38\n+91.234.48.232\n+91.250.86.18\n+92.27.7.209\n+92.255.207.73\n+93.74.163.234\n+93.84.114.106\n+93.152.166.29\n+93.171.216.221\n+93.185.177.71\n+94.19.12.244\n+94.42.115.50\n+94.79.177.206\n+94.136.147.119\n+94.143.245.5\n+94.188.50.39\n+94.190.227.112\n+94.198.135.29\n+94.226.107.86\n+94.242.219.90\n+94.242.229.168\n+94.244.160.84\n+95.31.10.209\n+95.85.25.41\n+95.105.161.136\n+95.154.165.45\n+95.154.200.216\n+95.167.109.125\n+95.211.125.231\n+95.211.216.235\n+96.33.25.17\n+96.43.130.178\n+97.118.8.236\n+98.102.6.125\n+98.202.20.45\n+98.217.125.225\n+98.234.210.111\n+98.237.20.123\n+98.255.144.176\n+99.113.64.43\n+99.229.22.8\n+103.1.212.19\n+103.30.42.189\n+103.224.165.48\n+103.243.94.140\n+104.131.107.107\n+104.131.116.184\n+104.143.0.156\n+104.219.184.9\n+106.185.38.174\n+107.6.4.145\n+107.150.8.27\n+107.150.33.20\n+107.170.228.129\n+107.170.240.173\n+108.51.20.86\n+108.61.149.222\n+108.61.151.172\n+108.161.129.247\n+108.170.140.21\n+109.60.211.216\n+109.73.42.36\n+109.73.172.138\n+109.163.235.239\n+109.190.196.220\n+109.201.135.216\n+109.228.152.2\n+109.228.154.81\n+109.230.220.125\n+109.234.156.218\n+109.235.49.27\n+109.235.69.84\n+112.124.71.0\n+113.146.68.251\n+115.29.17.82\n+115.70.176.17\n+117.41.162.184\n+118.27.8.170\n+119.230.7.211\n+119.246.71.52\n+121.172.8.100\n+122.128.109.148\n+123.231.224.63\n+128.175.195.31\n+128.199.164.96\n+128.199.254.244\n+129.97.69.76\n+129.123.7.7\n+129.123.7.39\n+129.186.17.17\n+131.247.169.190\n+133.242.209.63\n+134.102.94.38\n+134.119.17.145\n+137.116.160.176\n+137.226.34.42\n+138.210.217.170\n+141.255.166.194\n+143.215.129.126\n+144.76.244.19\n+146.148.52.162\n+146.148.80.57\n+146.185.19.30\n+146.185.142.86\n+146.185.253.51\n+148.251.6.214\n+149.154.155.235\n+149.210.133.244\n+151.224.248.252\n+153.121.75.229\n+153.127.251.67\n+154.20.2.139\n+157.13.61.5\n+158.58.173.48\n+159.253.23.132\n+162.209.110.218\n+162.213.254.205\n+162.239.254.100\n+162.242.150.39\n+162.243.81.138\n+162.243.235.56\n+162.244.79.16\n+162.245.217.119\n+162.248.102.117\n+162.251.108.53\n+162.254.149.139\n+162.255.116.78\n+166.70.94.106\n+167.88.45.124\n+167.88.120.210\n+173.26.49.43\n+173.30.14.6\n+173.80.114.197\n+173.167.214.243\n+173.208.219.108\n+173.220.67.156\n+173.236.101.34\n+173.246.107.34\n+173.255.237.241\n+174.2.213.209\n+174.51.23.224\n+174.51.123.159\n+174.57.212.121\n+174.109.33.28\n+175.126.124.91\n+175.126.124.92\n+176.10.116.242\n+176.36.35.126\n+176.36.99.222\n+176.124.110.47\n+176.194.33.44\n+176.223.201.198\n+178.62.26.83\n+178.62.36.48\n+178.62.212.141\n+178.62.254.59\n+178.78.250.3\n+178.155.86.226\n+178.175.134.35\n+178.248.111.4\n+178.254.1.170\n+178.254.34.161\n+179.43.114.14\n+182.213.208.28\n+184.68.2.46\n+184.72.238.42\n+184.94.226.34\n+184.94.227.58\n+184.107.139.58\n+184.107.206.45\n+185.10.48.117\n+185.21.216.156\n+185.38.47.224\n+185.45.192.129\n+185.53.129.230\n+185.53.131.114\n+185.55.53.61\n+185.55.53.63\n+185.61.119.2\n+185.61.148.203\n+186.2.167.23\n+188.92.75.178\n+188.122.92.134\n+188.138.9.208\n+188.165.209.148\n+188.226.206.239\n+190.10.8.124\n+190.10.10.147\n+192.0.130.142\n+192.3.89.159\n+192.73.234.138\n+192.75.95.107\n+192.95.100.102\n+192.155.84.181\n+192.169.233.206\n+192.198.93.86\n+192.227.135.216\n+193.0.109.3\n+193.77.50.208\n+193.109.68.62\n+193.150.121.37\n+193.224.69.98\n+194.79.8.37\n+194.141.86.10\n+195.12.180.94\n+195.56.63.10\n+195.116.93.93\n+195.154.174.226\n+195.159.111.98\n+195.169.138.2\n+195.189.126.35\n+195.197.175.190\n+197.242.93.82\n+198.11.214.147\n+198.49.41.21\n+199.33.124.186\n+199.204.186.146\n+199.233.238.115\n+199.241.189.66\n+202.60.68.242\n+202.60.69.232\n+203.183.151.39\n+203.219.14.204\n+204.44.123.109\n+204.44.123.162\n+204.45.120.178\n+206.190.134.44\n+206.248.184.127\n+207.244.73.8\n+208.66.30.27\n+209.81.9.223\n+209.105.243.229\n+209.126.70.159\n+209.140.30.169\n+209.165.128.235\n+209.190.2.242\n+210.66.254.236\n+210.73.27.33\n+211.72.66.229\n+212.25.37.124\n+212.71.235.114\n+212.71.252.109\n+212.114.48.31\n+212.174.151.118\n+213.66.205.194\n+213.129.248.139\n+213.136.87.34\n+213.165.82.133\n+213.167.17.6\n+213.179.158.253\n+213.189.53.125\n+213.222.208.93\n+216.49.158.161\n+216.55.143.154\n+216.131.91.100\n+216.245.206.181\n+216.250.138.230\n+217.11.225.189\n+217.23.6.133\n+217.75.88.178\n+217.172.143.140\n+217.195.169.209\n+217.196.248.106\n+219.138.161.162\n+222.167.248.90\n+223.18.254.55\n \n # Onion nodes\n bitcoinostk4e4re.onion:8333"
      },
      {
        "sha": "6b6e5103f5fddce3439046d4ec0006a865730f53",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 502,
        "deletions": 590,
        "changes": 1092,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be22b3da1df15757ef15e4c4963507bcdff6a872/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be22b3da1df15757ef15e4c4963507bcdff6a872/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=be22b3da1df15757ef15e4c4963507bcdff6a872"
      }
    ]
  },
  {
    "sha": "e179eb3d9bfec7e67908242c71c87b716a41c97c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTc5ZWIzZDliZmVjN2U2NzkwODI0MmM3MWM4N2I3MTZhNDFjOTdj",
    "commit": {
      "author": {
        "name": "Thomas Zander",
        "email": "thomas@thomaszander.se",
        "date": "2014-12-28T23:25:18Z"
      },
      "committer": {
        "name": "Thomas Zander",
        "email": "thomas@thomaszander.se",
        "date": "2015-01-05T20:17:45Z"
      },
      "message": "Make the command-line-args dialog better\n\nInstead of using a fixed-width font in a label, which virtually\nguarentees a horizontal scrollbar, use a proper text-document\nthat can re-layout based on user input.",
      "tree": {
        "sha": "d6ddc1348c12f009559ab104fddfad134b05c62e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6ddc1348c12f009559ab104fddfad134b05c62e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e179eb3d9bfec7e67908242c71c87b716a41c97c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e179eb3d9bfec7e67908242c71c87b716a41c97c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e179eb3d9bfec7e67908242c71c87b716a41c97c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e179eb3d9bfec7e67908242c71c87b716a41c97c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e5153095ea410dd07770c0327447856488bfd137",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5153095ea410dd07770c0327447856488bfd137",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5153095ea410dd07770c0327447856488bfd137"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 87,
      "deletions": 21
    },
    "files": [
      {
        "sha": "9ace9afd7933b3367753f45f7bac32e17a6ffa88",
        "filename": "src/qt/forms/helpmessagedialog.ui",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e179eb3d9bfec7e67908242c71c87b716a41c97c/src/qt/forms/helpmessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e179eb3d9bfec7e67908242c71c87b716a41c97c/src/qt/forms/helpmessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/helpmessagedialog.ui?ref=e179eb3d9bfec7e67908242c71c87b716a41c97c",
        "patch": "@@ -6,8 +6,8 @@\n    <rect>\n     <x>0</x>\n     <y>0</y>\n-    <width>800</width>\n-    <height>400</height>\n+    <width>585</width>\n+    <height>225</height>\n    </rect>\n   </property>\n   <property name=\"font\">\n@@ -34,6 +34,13 @@\n    </item>\n    <item>\n     <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n+     <item>\n+      <widget class=\"QTextEdit\" name=\"helpMessage\">\n+       <property name=\"readOnly\">\n+        <bool>true</bool>\n+       </property>\n+      </widget>\n+     </item>\n      <item>\n       <widget class=\"QScrollArea\" name=\"scrollArea\">\n        <property name=\"verticalScrollBarPolicy\">\n@@ -47,19 +54,22 @@\n          <rect>\n           <x>0</x>\n           <y>0</y>\n-          <width>659</width>\n-          <height>348</height>\n+          <width>447</width>\n+          <height>68</height>\n          </rect>\n         </property>\n         <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\">\n          <item>\n-          <widget class=\"QLabel\" name=\"helpMessageLabel\">\n+          <widget class=\"QLabel\" name=\"aboutMessage\">\n            <property name=\"cursor\">\n             <cursorShape>IBeamCursor</cursorShape>\n            </property>\n            <property name=\"textFormat\">\n             <enum>Qt::PlainText</enum>\n            </property>\n+           <property name=\"alignment\">\n+            <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>\n+           </property>\n            <property name=\"openExternalLinks\">\n             <bool>true</bool>\n            </property>"
      },
      {
        "sha": "9ee408179d0fd11f212d34b150aadf731d609810",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 16,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e179eb3d9bfec7e67908242c71c87b716a41c97c/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e179eb3d9bfec7e67908242c71c87b716a41c97c/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=e179eb3d9bfec7e67908242c71c87b716a41c97c",
        "patch": "@@ -18,6 +18,8 @@\n #include <QCloseEvent>\n #include <QLabel>\n #include <QRegExp>\n+#include <QTextTable>\n+#include <QTextCursor>\n #include <QVBoxLayout>\n \n /** \"Help message\" or \"About\" dialog box */\n@@ -52,28 +54,82 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         // Replace newlines with HTML breaks\n         licenseInfoHTML.replace(\"\\n\\n\", \"<br><br>\");\n \n-        ui->helpMessageLabel->setTextFormat(Qt::RichText);\n+        ui->aboutMessage->setTextFormat(Qt::RichText);\n         ui->scrollArea->setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);\n         text = version + \"\\n\" + licenseInfo;\n-        ui->helpMessageLabel->setText(version + \"<br><br>\" + licenseInfoHTML);\n-        ui->helpMessageLabel->setWordWrap(true);\n+        ui->aboutMessage->setText(version + \"<br><br>\" + licenseInfoHTML);\n+        ui->aboutMessage->setWordWrap(true);\n+        ui->helpMessage->setVisible(false);\n     } else {\n         setWindowTitle(tr(\"Command-line options\"));\n-        QString header = tr(\"Usage:\") + \"\\n\" +\n-            \"  bitcoin-qt [\" + tr(\"command-line options\") + \"]                     \" + \"\\n\";\n+        QTextCursor cursor(ui->helpMessage->document());\n+        cursor.insertText(version);\n+        cursor.insertBlock();\n+        cursor.insertText(tr(\"Usage:\") + '\\n' +\n+            \"  bitcoin-qt [\" + tr(\"command-line options\") + \"]\\n\");\n+\n+        cursor.insertBlock();\n+        QTextTableFormat tf;\n+        tf.setBorderStyle(QTextFrameFormat::BorderStyle_None);\n+        tf.setCellPadding(2);\n+        QVector<QTextLength> widths;\n+        widths << QTextLength(QTextLength::PercentageLength, 20);\n+        widths << QTextLength(QTextLength::PercentageLength, 80);\n+        tf.setColumnWidthConstraints(widths);\n+        QTextTable *table = cursor.insertTable(2, 2, tf);\n \n         QString coreOptions = QString::fromStdString(HelpMessage(HMM_BITCOIN_QT));\n-\n-        QString uiOptions = tr(\"UI options\") + \":\\n\" +\n-            \"  -choosedatadir            \" + tr(\"Choose data directory on startup (default: 0)\") + \"\\n\" +\n-            \"  -lang=<lang>              \" + tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\") + \"\\n\" +\n-            \"  -min                      \" + tr(\"Start minimized\") + \"\\n\" +\n-            \"  -rootcertificates=<file>  \" + tr(\"Set SSL root certificates for payment request (default: -system-)\") + \"\\n\" +\n-            \"  -splash                   \" + tr(\"Show splash screen on startup (default: 1)\");\n-\n-        ui->helpMessageLabel->setFont(GUIUtil::bitcoinAddressFont());\n-        text = version + \"\\n\" + header + \"\\n\" + coreOptions + \"\\n\" + uiOptions;\n-        ui->helpMessageLabel->setText(text);\n+        bool first = true;\n+        QTextCharFormat bold;\n+        bold.setFontWeight(QFont::Bold);\n+        // note that coreOptions is not translated.\n+        foreach (const QString &line, coreOptions.split('\\n')) {\n+            if (!first) {\n+                table->appendRows(1);\n+                cursor.movePosition(QTextCursor::NextRow);\n+            }\n+            first = false;\n+\n+            if (line.startsWith(\"  \")) {\n+                int index = line.indexOf(' ', 3);\n+                if (index > 0) {\n+                    cursor.insertText(line.left(index).trimmed());\n+                    cursor.movePosition(QTextCursor::NextCell);\n+                    cursor.insertText(line.mid(index).trimmed());\n+                    continue;\n+                }\n+            }\n+            cursor.movePosition(QTextCursor::NextCell, QTextCursor::KeepAnchor);\n+            table->mergeCells(cursor);\n+            cursor.insertText(line.trimmed(), bold);\n+        }\n+\n+        table->appendRows(6);\n+        cursor.movePosition(QTextCursor::NextRow);\n+        cursor.insertText(tr(\"UI options\") + \":\", bold);\n+        cursor.movePosition(QTextCursor::NextRow);\n+        cursor.insertText(\"-choosedatadir\");\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(tr(\"Choose data directory on startup (default: 0)\"));\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(\"-lang=<lang>\");\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(\"-min\");\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(tr(\"Start minimized\"));\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(\"-rootcertificates=<file>\");\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(tr(\"Set SSL root certificates for payment request (default: -system-)\"));\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(\"-splash\");\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(tr(\"Show splash screen on startup (default: 1)\"));\n+\n+        ui->helpMessage->moveCursor(QTextCursor::Start);\n+        ui->scrollArea->setVisible(false);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "1a9576de9dbb1910cb8462e513938d45ef7b5a23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTk1NzZkZTlkYmIxOTEwY2I4NDYyZTUxMzkzOGQ0NWVmN2I1YTIz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-12-18T13:49:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-05T23:28:44Z"
      },
      "message": "Use libsecp256k1's RFC6979 implementation",
      "tree": {
        "sha": "ad075be51862d5612f3f2957a9bf3ce576b699e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad075be51862d5612f3f2957a9bf3ce576b699e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a9576de9dbb1910cb8462e513938d45ef7b5a23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a9576de9dbb1910cb8462e513938d45ef7b5a23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a9576de9dbb1910cb8462e513938d45ef7b5a23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a9576de9dbb1910cb8462e513938d45ef7b5a23/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec20fd74b89272a4f53337ccdf7683a7f52bab11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec20fd74b89272a4f53337ccdf7683a7f52bab11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec20fd74b89272a4f53337ccdf7683a7f52bab11"
      }
    ],
    "stats": {
      "total": 165,
      "additions": 21,
      "deletions": 144
    },
    "files": [
      {
        "sha": "5a5b9cc3d8c77ac59770aa00ee60827ff082c326",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a9576de9dbb1910cb8462e513938d45ef7b5a23/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a9576de9dbb1910cb8462e513938d45ef7b5a23/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1a9576de9dbb1910cb8462e513938d45ef7b5a23",
        "patch": "@@ -209,14 +209,12 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha256.cpp \\\n   crypto/sha512.cpp \\\n   crypto/hmac_sha256.cpp \\\n-  crypto/rfc6979_hmac_sha256.cpp \\\n   crypto/hmac_sha512.cpp \\\n   crypto/ripemd160.cpp \\\n   crypto/common.h \\\n   crypto/sha256.h \\\n   crypto/sha512.h \\\n   crypto/hmac_sha256.h \\\n-  crypto/rfc6979_hmac_sha256.h \\\n   crypto/hmac_sha512.h \\\n   crypto/sha1.h \\\n   crypto/ripemd160.h"
      },
      {
        "sha": "a8c971c3ba98d7ef8ddc99359a948b434470d52a",
        "filename": "src/crypto/rfc6979_hmac_sha256.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 47,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec20fd74b89272a4f53337ccdf7683a7f52bab11/src/crypto/rfc6979_hmac_sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec20fd74b89272a4f53337ccdf7683a7f52bab11/src/crypto/rfc6979_hmac_sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/rfc6979_hmac_sha256.cpp?ref=ec20fd74b89272a4f53337ccdf7683a7f52bab11",
        "patch": "@@ -1,47 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"crypto/rfc6979_hmac_sha256.h\"\n-\n-#include <string.h>\n-\n-#include <algorithm>\n-\n-static const unsigned char zero[1] = {0x00};\n-static const unsigned char one[1] = {0x01};\n-\n-RFC6979_HMAC_SHA256::RFC6979_HMAC_SHA256(const unsigned char* key, size_t keylen, const unsigned char* msg, size_t msglen) : retry(false)\n-{\n-    memset(V, 0x01, sizeof(V));\n-    memset(K, 0x00, sizeof(K));\n-\n-    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Write(zero, sizeof(zero)).Write(key, keylen).Write(msg, msglen).Finalize(K);\n-    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n-    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Write(one, sizeof(one)).Write(key, keylen).Write(msg, msglen).Finalize(K);\n-    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n-}\n-\n-RFC6979_HMAC_SHA256::~RFC6979_HMAC_SHA256()\n-{\n-    memset(V, 0x01, sizeof(V));\n-    memset(K, 0x00, sizeof(K));\n-}\n-\n-void RFC6979_HMAC_SHA256::Generate(unsigned char* output, size_t outputlen)\n-{\n-    if (retry) {\n-        CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Write(zero, sizeof(zero)).Finalize(K);\n-        CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n-    }\n-\n-    while (outputlen > 0) {\n-        CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n-        size_t len = std::min(outputlen, sizeof(V));\n-        memcpy(output, V, len);\n-        output += len;\n-        outputlen -= len;\n-    }\n-\n-    retry = true;\n-}"
      },
      {
        "sha": "f3a54a5d1188929784f16737279dfc3119dacbb7",
        "filename": "src/crypto/rfc6979_hmac_sha256.h",
        "status": "removed",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec20fd74b89272a4f53337ccdf7683a7f52bab11/src/crypto/rfc6979_hmac_sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec20fd74b89272a4f53337ccdf7683a7f52bab11/src/crypto/rfc6979_hmac_sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/rfc6979_hmac_sha256.h?ref=ec20fd74b89272a4f53337ccdf7683a7f52bab11",
        "patch": "@@ -1,36 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_RFC6979_HMAC_SHA256_H\n-#define BITCOIN_RFC6979_HMAC_SHA256_H\n-\n-#include \"crypto/hmac_sha256.h\"\n-\n-#include <stdint.h>\n-#include <stdlib.h>\n-\n-/** The RFC 6979 PRNG using HMAC-SHA256. */\n-class RFC6979_HMAC_SHA256\n-{\n-private:\n-    unsigned char V[CHMAC_SHA256::OUTPUT_SIZE];\n-    unsigned char K[CHMAC_SHA256::OUTPUT_SIZE];\n-    bool retry;\n-\n-public:\n-    /**\n-     * Construct a new RFC6979 PRNG, using the given key and message.\n-     * The message is assumed to be already hashed.\n-     */\n-    RFC6979_HMAC_SHA256(const unsigned char* key, size_t keylen, const unsigned char* msg, size_t msglen);\n-\n-    /**\n-     * Generate a byte array.\n-     */\n-    void Generate(unsigned char* output, size_t outputlen);\n-\n-    ~RFC6979_HMAC_SHA256();\n-};\n-\n-#endif // BITCOIN_RFC6979_HMAC_SHA256_H"
      },
      {
        "sha": "d8319db1a35d89b3e9818d03cdbf3b2f396e008b",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 24,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a9576de9dbb1910cb8462e513938d45ef7b5a23/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a9576de9dbb1910cb8462e513938d45ef7b5a23/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=1a9576de9dbb1910cb8462e513938d45ef7b5a23",
        "patch": "@@ -6,7 +6,6 @@\n \n #include \"arith_uint256.h\"\n #include \"crypto/hmac_sha512.h\"\n-#include \"crypto/rfc6979_hmac_sha256.h\"\n #include \"eccryptoverify.h\"\n #include \"pubkey.h\"\n #include \"random.h\"\n@@ -74,23 +73,28 @@ CPubKey CKey::GetPubKey() const {\n     return result;\n }\n \n+extern \"C\"\n+{\n+static int secp256k1_nonce_function_test_case(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int attempt, const void *data)\n+{\n+    const uint32_t *test_case = static_cast<const uint32_t*>(data);\n+    uint256 nonce;\n+    secp256k1_nonce_function_rfc6979(nonce.begin(), msg32, key32, attempt, NULL);\n+    nonce = ArithToUint256(UintToArith256(nonce) + *test_case);\n+    memcpy(nonce32, nonce.begin(), 32);\n+    return 1;\n+}\n+}\n+\n bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {\n     if (!fValid)\n         return false;\n     vchSig.resize(72);\n-    RFC6979_HMAC_SHA256 prng(begin(), 32, (unsigned char*)&hash, 32);\n-    do {\n-        uint256 nonce;\n-        prng.Generate((unsigned char*)&nonce, 32);\n-        nonce = ArithToUint256(UintToArith256(nonce) + test_case);\n-        int nSigLen = 72;\n-        int ret = secp256k1_ecdsa_sign((const unsigned char*)&hash, (unsigned char*)&vchSig[0], &nSigLen, begin(), (unsigned char*)&nonce);\n-        nonce = uint256();\n-        if (ret) {\n-            vchSig.resize(nSigLen);\n-            return true;\n-        }\n-    } while(true);\n+    int nSigLen = 72;\n+    int ret = secp256k1_ecdsa_sign(hash.begin(), (unsigned char*)&vchSig[0], &nSigLen, begin(), test_case == 0 ? secp256k1_nonce_function_rfc6979 : secp256k1_nonce_function_test_case, test_case == 0 ? NULL : &test_case);\n+    assert(ret);\n+    vchSig.resize(nSigLen);\n+    return true;\n }\n \n bool CKey::VerifyPubKey(const CPubKey& pubkey) const {\n@@ -101,7 +105,7 @@ bool CKey::VerifyPubKey(const CPubKey& pubkey) const {\n     std::string str = \"Bitcoin key verification\\n\";\n     GetRandBytes(rnd, sizeof(rnd));\n     uint256 hash;\n-    CHash256().Write((unsigned char*)str.data(), str.size()).Write(rnd, sizeof(rnd)).Finalize((unsigned char*)&hash);\n+    CHash256().Write((unsigned char*)str.data(), str.size()).Write(rnd, sizeof(rnd)).Finalize(hash.begin());\n     std::vector<unsigned char> vchSig;\n     Sign(hash, vchSig);\n     return pubkey.Verify(hash, vchSig);\n@@ -112,15 +116,8 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n         return false;\n     vchSig.resize(65);\n     int rec = -1;\n-    RFC6979_HMAC_SHA256 prng(begin(), 32, (unsigned char*)&hash, 32);\n-    do {\n-        uint256 nonce;\n-        prng.Generate((unsigned char*)&nonce, 32);\n-        int ret = secp256k1_ecdsa_sign_compact((const unsigned char*)&hash, &vchSig[1], begin(), (unsigned char*)&nonce, &rec);\n-        nonce = uint256();\n-        if (ret)\n-            break;\n-    } while(true);\n+    int ret = secp256k1_ecdsa_sign_compact(hash.begin(), &vchSig[1], begin(), secp256k1_nonce_function_rfc6979, NULL, &rec);\n+    assert(ret);\n     assert(rec != -1);\n     vchSig[0] = 27 + rec + (fCompressed ? 4 : 0);\n     return true;"
      },
      {
        "sha": "d5e595cd8ad65231ad3a007035ec895434b216a3",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a9576de9dbb1910cb8462e513938d45ef7b5a23/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a9576de9dbb1910cb8462e513938d45ef7b5a23/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=1a9576de9dbb1910cb8462e513938d45ef7b5a23",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/rfc6979_hmac_sha256.h\"\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha256.h\"\n@@ -248,38 +247,4 @@ BOOST_AUTO_TEST_CASE(hmac_sha512_testvectors) {\n                    \"b6022cac3c4982b10d5eeb55c3e4de15134676fb6de0446065c97440fa8c6a58\");\n }\n \n-void TestRFC6979(const std::string& hexkey, const std::string& hexmsg, const std::vector<std::string>& hexout)\n-{\n-    std::vector<unsigned char> key = ParseHex(hexkey);\n-    std::vector<unsigned char> msg = ParseHex(hexmsg);\n-    RFC6979_HMAC_SHA256 rng(&key[0], key.size(), &msg[0], msg.size());\n-\n-    for (unsigned int i = 0; i < hexout.size(); i++) {\n-        std::vector<unsigned char> out = ParseHex(hexout[i]);\n-        std::vector<unsigned char> gen;\n-        gen.resize(out.size());\n-        rng.Generate(&gen[0], gen.size());\n-        BOOST_CHECK(out == gen);\n-    }\n-}\n-\n-BOOST_AUTO_TEST_CASE(rfc6979_hmac_sha256)\n-{\n-    TestRFC6979(\n-        \"0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f00\",\n-        \"4bf5122f344554c53bde2ebb8cd2b7e3d1600ad631c385a5d7cce23c7785459a\",\n-        boost::assign::list_of\n-            (\"4fe29525b2086809159acdf0506efb86b0ec932c7ba44256ab321e421e67e9fb\")\n-            (\"2bf0fff1d3c378a22dc5de1d856522325c65b504491a0cbd01cb8f3aa67ffd4a\")\n-            (\"f528b410cb541f77000d7afb6c5b53c5c471eab43e466d9ac5190c39c82fd82e\"));\n-\n-    TestRFC6979(\n-        \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n-        \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n-        boost::assign::list_of\n-            (\"9c236c165b82ae0cd590659e100b6bab3036e7ba8b06749baf6981e16f1a2b95\")\n-            (\"df471061625bc0ea14b682feee2c9c02f235da04204c1d62a1536c6e17aed7a9\")\n-            (\"7597887cbd76321f32e30440679a22cf7f8d9d2eac390e581fea091ce202ba94\"));\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "7873633b5752621548b8d38fc175f5a5f2f1e5d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODczNjMzYjU3NTI2MjE1NDhiOGQzOGZjMTc1ZjVhNWYyZjFlNWQ2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-05T23:28:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-05T23:28:47Z"
      },
      "message": "Squashed 'src/secp256k1/' changes from bccaf86..50cc6ab\n\n50cc6ab Merge pull request #178\n941e221 Add tests for handling of the nonce function in signing.\n10c81ff Merge pull request #177\n7688e34 Add magnitude limits to secp256k1_fe_verify to ensure that it's own tests function correctly.\n4ee4f7a Merge pull request #176\n70ae0d2 Use secp256k1_fe_equal_var in secp256k1_fe_sqrt_var.\n7767b4d Merge pull request #175\n9ab9335 Add a reference consistency test to ge_tests.\n60571c6 Rework group tests\nd26e26f Avoid constructing an invalid signature with probability 1:2^256.\nb450c34 Merge pull request #163\nd57cae9 Merge pull request #154\n49ee0db Add _normalizes_to_zero_var variant\need599d Add _fe_normalizes_to_zero method\nd7174ed Weak normalization for secp256k1_fe_equal\n0295f0a weak normalization\nbbd5ba7 Use rfc6979 as default nonce generation function\nb37fbc2 Implement SHA256 / HMAC-SHA256 / RFC6979.\nc6e7f4e [API BREAK] Use a nonce-generation function instead of a nonce\ncf0c48b Merge pull request #169\n603c33b Make signing fail if a too small buffer is passed.\n6d16606 Merge pull request #168\n7277fd7 Remove GMP field implementation\ne99c4c4 Merge pull request #123\n13278f6 Add explanation about how inversion can be avoided\nce7eb6f Optimize verification: avoid field inverse\na098f78 Merge pull request #160\n38acd01 Merge pull request #165\n6a59012 Make git ignore bench_recover when configured with benchmark enabled\n1ba4a60 Configure options reorganization\n3c0f246 Merge pull request #157\n808dd9b Merge pull request #156\n8dc75e9 Merge pull request #158\n28ade27 build: nuke bashisms\n5190079 build: use subdir-objects for automake\n8336040 build: disable benchmark by default\n\ngit-subtree-dir: src/secp256k1\ngit-subtree-split: 50cc6ab0625efda6dddf1dc86c1e2671f069b0d8",
      "tree": {
        "sha": "3b675a638355f8ccad0474900fed0bffcda8e62a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b675a638355f8ccad0474900fed0bffcda8e62a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7873633b5752621548b8d38fc175f5a5f2f1e5d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7873633b5752621548b8d38fc175f5a5f2f1e5d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7873633b5752621548b8d38fc175f5a5f2f1e5d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7873633b5752621548b8d38fc175f5a5f2f1e5d6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ecae2acb06d44509425a9cdad38ed9a5bce15cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecae2acb06d44509425a9cdad38ed9a5bce15cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ecae2acb06d44509425a9cdad38ed9a5bce15cbe"
      }
    ],
    "stats": {
      "total": 1701,
      "additions": 1172,
      "deletions": 529
    },
    "files": [
      {
        "sha": "b9f7d243ecb491acad0f9493c160bfdd1b636df7",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -1,6 +1,7 @@\n bench_inv\n bench_sign\n bench_verify\n+bench_recover\n tests\n *.exe\n *.so"
      },
      {
        "sha": "40f8dae23f8b97ffca212bf96391d879f169275e",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -4,24 +4,22 @@ compiler:\n   - gcc\n install:\n   - sudo apt-get install -qq libssl-dev\n-  - if [ \"$BIGNUM\" = \"gmp\" -o \"$BIGNUM\" = \"auto\" -o \"$FIELD\" = \"gmp\" ]; then sudo apt-get install --no-install-recommends --no-upgrade -qq libgmp-dev; fi\n+  - if [ \"$BIGNUM\" = \"gmp\" -o \"$BIGNUM\" = \"auto\" ]; then sudo apt-get install --no-install-recommends --no-upgrade -qq libgmp-dev; fi\n   - if [ -n \"$EXTRAPACKAGES\" ]; then sudo apt-get update && sudo apt-get install --no-install-recommends --no-upgrade $EXTRAPACKAGES; fi\n env:\n   global:\n-    - FIELD=auto  BIGNUM=auto  SCALAR=auto  ENDOMORPHISM=no  BUILD=check  EXTRAFLAGS= HOST= EXTRAPACKAGES=\n+    - FIELD=auto  BIGNUM=auto  SCALAR=auto  ENDOMORPHISM=no  ASM=no  BUILD=check  EXTRAFLAGS= HOST= EXTRAPACKAGES=\n   matrix:\n     - SCALAR=32bit\n     - SCALAR=64bit\n-    - FIELD=gmp\n-    - FIELD=gmp       ENDOMORPHISM=yes\n-    - FIELD=64bit_asm\n-    - FIELD=64bit_asm ENDOMORPHISM=yes\n     - FIELD=64bit\n     - FIELD=64bit     ENDOMORPHISM=yes\n+    - FIELD=64bit                       ASM=x86_64\n+    - FIELD=64bit     ENDOMORPHISM=yes  ASM=x86_64\n     - FIELD=32bit\n     - FIELD=32bit     ENDOMORPHISM=yes\n-    - BIGNUM=none\n-    - BIGNUM=none     ENDOMORPHISM=yes\n+    - BIGNUM=no\n+    - BIGNUM=no       ENDOMORPHISM=yes\n     - BUILD=distcheck\n     - EXTRAFLAGS=CFLAGS=-DDETERMINISTIC\n     - HOST=i686-linux-gnu EXTRAPACKAGES=\"gcc-multilib\""
      },
      {
        "sha": "985c172eba29e1f89c514d2724c71520d9eafbc0",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -33,8 +33,8 @@ noinst_HEADERS += src/java/org_bitcoin_NativeSecp256k1.h\n noinst_HEADERS += src/util.h\n noinst_HEADERS += src/testrand.h\n noinst_HEADERS += src/testrand_impl.h\n-noinst_HEADERS += src/field_gmp.h\n-noinst_HEADERS += src/field_gmp_impl.h\n+noinst_HEADERS += src/hash.h\n+noinst_HEADERS += src/hash_impl.h\n noinst_HEADERS += src/field.h\n noinst_HEADERS += src/field_impl.h\n noinst_HEADERS += src/bench.h"
      },
      {
        "sha": "4a398d6c93a58745e16959ba3b237a282fc4aa5b",
        "filename": "build-aux/m4/bitcoin_secp.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 19,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/build-aux/m4/bitcoin_secp.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/build-aux/m4/bitcoin_secp.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_secp.m4?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -1,12 +1,6 @@\n dnl libsecp25k1 helper checks\n AC_DEFUN([SECP_INT128_CHECK],[\n has_int128=$ac_cv_type___int128\n-if test x\"$has_int128\" != x\"yes\" && test x\"$set_field\" = x\"64bit\"; then\n-  AC_MSG_ERROR([$set_field field support explicitly requested but is not compatible with this host])\n-fi\n-if test x\"$has_int128\" != x\"yes\" && test x\"$set_scalar\" = x\"64bit\"; then\n-  AC_MSG_ERROR([$set_scalar scalar support explicitly requested but is not compatible with this host])\n-fi\n ])\n \n dnl \n@@ -18,11 +12,6 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n   __asm__ __volatile__(\"movq $0x100000000,%1; mulq %%rsi\" : \"+a\"(a) : \"S\"(tmp) : \"cc\", \"%rdx\");\n   ]])],[has_64bit_asm=yes],[has_64bit_asm=no])\n AC_MSG_RESULT([$has_64bit_asm])\n-if test x\"$set_field\" == x\"64bit_asm\"; then\n-  if test x\"$has_64bit_asm\" == x\"no\"; then\n-    AC_MSG_ERROR([$set_field field support explicitly requested but no x86_64 assembly available])\n-  fi\n-fi\n ])\n \n dnl\n@@ -43,7 +32,7 @@ else\n )])\n   LIBS=\n fi\n-if test x\"$has_libcrypto\" == x\"yes\" && test x\"$has_openssl_ec\" = x; then\n+if test x\"$has_libcrypto\" = x\"yes\" && test x\"$has_openssl_ec\" = x; then\n   AC_MSG_CHECKING(for EC functions in libcrypto)\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <openssl/ec.h>\n@@ -69,11 +58,4 @@ if test x\"$has_gmp\" != x\"yes\"; then\n   CPPFLAGS=\"$CPPFLAGS_TEMP\"\n   LIBS=\"$LIBS_TEMP\"\n fi\n-if test x\"$set_field\" = x\"gmp\" && test x\"$has_gmp\" != x\"yes\"; then\n-    AC_MSG_ERROR([$set_field field support explicitly requested but libgmp was not found])\n-fi\n-if test x\"$set_bignum\" = x\"gmp\" && test x\"$has_gmp\" != x\"yes\"; then\n-    AC_MSG_ERROR([$set_bignum field support explicitly requested but libgmp was not found])\n-fi\n ])\n-"
      },
      {
        "sha": "f691156ff748b24228ecd44ed928a6b278bbe229",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 69,
        "deletions": 44,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -6,7 +6,7 @@ AC_CANONICAL_HOST\n AH_TOP([#ifndef LIBSECP256K1_CONFIG_H])\n AH_TOP([#define LIBSECP256K1_CONFIG_H])\n AH_BOTTOM([#endif //LIBSECP256K1_CONFIG_H])\n-AM_INIT_AUTOMAKE([foreign])\n+AM_INIT_AUTOMAKE([foreign subdir-objects])\n LT_INIT\n \n dnl make the compilation flags quiet unless V=1 is used\n@@ -23,7 +23,7 @@ if test \"x$CFLAGS\" = \"x\"; then\n fi\n \n AC_PROG_CC_C99\n-if test x\"$ac_cv_prog_cc_c99\" == x\"no\"; then\n+if test x\"$ac_cv_prog_cc_c99\" = x\"no\"; then\n   AC_MSG_ERROR([c99 compiler support required])\n fi\n \n@@ -82,9 +82,9 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([[char foo;]])],\n \n \n AC_ARG_ENABLE(benchmark,\n-    AS_HELP_STRING([--enable-benchmark],[compile benchmark (default is yes)]),\n+    AS_HELP_STRING([--enable-benchmark],[compile benchmark (default is no)]),\n     [use_benchmark=$enableval],\n-    [use_benchmark=yes])\n+    [use_benchmark=no])\n \n AC_ARG_ENABLE(tests,\n     AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n@@ -96,15 +96,18 @@ AC_ARG_ENABLE(endomorphism,\n     [use_endomorphism=$enableval],\n     [use_endomorphism=no])\n \n-AC_ARG_WITH([field], [AS_HELP_STRING([--with-field=gmp|64bit|64bit_asm|32bit|auto],\n+AC_ARG_WITH([field], [AS_HELP_STRING([--with-field=64bit|32bit|auto],\n [Specify Field Implementation. Default is auto])],[req_field=$withval], [req_field=auto])\n \n-AC_ARG_WITH([bignum], [AS_HELP_STRING([--with-bignum=gmp|none|auto],\n+AC_ARG_WITH([bignum], [AS_HELP_STRING([--with-bignum=gmp|no|auto],\n [Specify Bignum Implementation. Default is auto])],[req_bignum=$withval], [req_bignum=auto])\n \n AC_ARG_WITH([scalar], [AS_HELP_STRING([--with-scalar=64bit|32bit|auto],\n [Specify scalar implementation. Default is auto])],[req_scalar=$withval], [req_scalar=auto])\n \n+AC_ARG_WITH([asm], [AS_HELP_STRING([--with-asm=x86_64|no|auto]\n+[Specify assembly optimizations to use. Default is auto])],[req_asm=$withval], [req_asm=auto])\n+\n AC_CHECK_TYPES([__int128])\n \n AC_MSG_CHECKING([for __builtin_expect])\n@@ -113,40 +116,54 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([[void myfunc() {__builtin_expect(0,0);}]])],\n     [ AC_MSG_RESULT([no])\n     ])\n \n-if test x\"$req_field\" = x\"auto\"; then\n+if test x\"$req_asm\" = x\"auto\"; then\n   SECP_64BIT_ASM_CHECK\n   if test x\"$has_64bit_asm\" = x\"yes\"; then\n-    set_field=64bit_asm\n+    set_asm=x86_64\n+  fi\n+  if test x\"$set_asm\" = x; then\n+    set_asm=no\n   fi\n+else\n+  set_asm=$req_asm\n+  case $set_asm in\n+  x86_64)\n+    SECP_64BIT_ASM_CHECK\n+    if test x\"$has_64bit_asm\" != x\"yes\"; then\n+      AC_MSG_ERROR([x86_64 assembly optimization requested but not available])\n+    fi\n+    ;;\n+  no)\n+    ;;\n+  *)\n+    AC_MSG_ERROR([invalid assembly optimization selection])\n+    ;;\n+  esac\n+fi\n \n+if test x\"$req_field\" = x\"auto\"; then\n+  if test x\"set_asm\" = x\"x86_64\"; then\n+    set_field=64bit\n+  fi\n   if test x\"$set_field\" = x; then\n     SECP_INT128_CHECK\n     if test x\"$has_int128\" = x\"yes\"; then\n       set_field=64bit\n     fi\n   fi\n-\n-  if test x\"$set_field\" = x; then\n-    SECP_GMP_CHECK\n-    if test x\"$has_gmp\" = x\"yes\"; then\n-      set_field=gmp\n-    fi\n-  fi\n-\n   if test x\"$set_field\" = x; then\n     set_field=32bit\n   fi\n else\n   set_field=$req_field\n   case $set_field in\n-  64bit_asm)\n-    SECP_64BIT_ASM_CHECK\n-    ;;\n   64bit)\n-    SECP_INT128_CHECK\n-    ;;\n-  gmp)\n-    SECP_GMP_CHECK\n+    if test x\"$set_asm\" != x\"x86_64\"; then\n+      SECP_INT128_CHECK\n+      if test x\"$has_int128\" != x\"yes\"; then\n+        AC_MSG_ERROR([64bit field explicitly requested but neither __int128 support or x86_64 assembly available])\n+      fi\n+    fi\n     ;;\n   32bit)\n     ;;\n@@ -157,11 +174,9 @@ else\n fi\n \n if test x\"$req_scalar\" = x\"auto\"; then\n-  if test x\"$set_scalar\" = x; then\n-    SECP_INT128_CHECK\n-    if test x\"$has_int128\" = x\"yes\"; then\n-      set_scalar=64bit\n-    fi\n+  SECP_INT128_CHECK\n+  if test x\"$has_int128\" = x\"yes\"; then\n+    set_scalar=64bit\n   fi\n   if test x\"$set_scalar\" = x; then\n     set_scalar=32bit\n@@ -171,6 +186,9 @@ else\n   case $set_scalar in\n   64bit)\n     SECP_INT128_CHECK\n+    if test x\"$has_int128\" != x\"yes\"; then\n+      AC_MSG_ERROR([64bit scalar explicitly requested but __int128 support not available])\n+    fi\n     ;;\n   32bit)\n     ;;\n@@ -187,36 +205,42 @@ if test x\"$req_bignum\" = x\"auto\"; then\n   fi\n \n   if test x\"$set_bignum\" = x; then\n-    set_bignum=none\n+    set_bignum=no\n   fi\n else\n   set_bignum=$req_bignum\n   case $set_bignum in\n   gmp)\n     SECP_GMP_CHECK\n+    if test x\"$has_gmp\" != x\"yes\"; then\n+      AC_MSG_ERROR([gmp bignum explicitly requested but libgmp not available])\n+    fi\n     ;;\n-  none)\n+  no)\n     ;;\n   *)\n     AC_MSG_ERROR([invalid bignum implementation selection])\n     ;;\n   esac\n fi\n \n+# select assembly optimization\n+case $set_asm in\n+x86_64)\n+  AC_DEFINE(USE_ASM_X86_64, 1, [Define this symbol to enable x86_64 assembly optimizations])\n+  ;;\n+no)\n+  ;;\n+*)\n+  AC_MSG_ERROR([invalid assembly optimizations])\n+  ;;\n+esac\n+\n # select field implementation\n case $set_field in\n-64bit_asm)\n-  AC_DEFINE(USE_FIELD_5X52_ASM, 1, [Define this symbol to use the assembly version for the 5x52 field implementation])\n-  AC_DEFINE(USE_FIELD_5X52, 1, [Define this symbol to use the FIELD_5X52 implementation])\n-  ;;\n 64bit)\n-  AC_DEFINE(USE_FIELD_5X52_INT128, 1, [Define this symbol to use the __int128 version for the 5x52 field implementation])\n   AC_DEFINE(USE_FIELD_5X52, 1, [Define this symbol to use the FIELD_5X52 implementation])\n   ;;\n-gmp)\n-  AC_DEFINE(HAVE_LIBGMP,1,[Define this symbol if libgmp is installed])\n-  AC_DEFINE(USE_FIELD_GMP, 1, [Define this symbol to use the FIELD_GMP implementation])\n-  ;;\n 32bit)\n   AC_DEFINE(USE_FIELD_10X26, 1, [Define this symbol to use the FIELD_10X26 implementation])\n   ;;\n@@ -233,7 +257,7 @@ gmp)\n   AC_DEFINE(USE_FIELD_INV_NUM, 1, [Define this symbol to use the num-based field inverse implementation])\n   AC_DEFINE(USE_SCALAR_INV_NUM, 1, [Define this symbol to use the num-based scalar inverse implementation])\n   ;;\n-none)\n+no)\n   AC_DEFINE(USE_NUM_NONE, 1, [Define this symbol to use no num implementation])\n   AC_DEFINE(USE_FIELD_INV_BUILTIN, 1, [Define this symbol to use the native field inverse implementation])\n   AC_DEFINE(USE_SCALAR_INV_BUILTIN, 1, [Define this symbol to use the native scalar inverse implementation])\n@@ -258,7 +282,7 @@ esac\n \n if test x\"$use_tests\" = x\"yes\"; then\n   SECP_OPENSSL_CHECK\n-  if test x\"$has_openssl_ec\" == x\"yes\"; then\n+  if test x\"$has_openssl_ec\" = x\"yes\"; then\n     AC_DEFINE(ENABLE_OPENSSL_TESTS, 1, [Define this symbol if OpenSSL EC functions are available])\n     SECP_TEST_INCLUDES=\"$SSL_CFLAGS $CRYPTO_CFLAGS\"\n     SECP_TEST_LIBS=\"$CRYPTO_LIBS\"\n@@ -272,7 +296,7 @@ if test x\"$use_tests\" = x\"yes\"; then\n   fi\n fi\n \n-if test x\"$set_field\" = x\"gmp\" || test x\"$set_bignum\" = x\"gmp\"; then\n+if test x\"$set_bignum\" = x\"gmp\"; then\n   SECP_LIBS=\"$SECP_LIBS $GMP_LIBS\"\n   SECP_INCLUDES=\"$SECP_INCLUDES $GMP_CPPFLAGS\"\n fi\n@@ -281,19 +305,20 @@ if test x\"$use_endomorphism\" = x\"yes\"; then\n   AC_DEFINE(USE_ENDOMORPHISM, 1, [Define this symbol to use endomorphism optimization])\n fi\n \n+AC_MSG_NOTICE([Using assembly optimizations: $set_asm])\n AC_MSG_NOTICE([Using field implementation: $set_field])\n AC_MSG_NOTICE([Using bignum implementation: $set_bignum])\n AC_MSG_NOTICE([Using scalar implementation: $set_scalar])\n+AC_MSG_NOTICE([Using endomorphism optimizations: $use_endomorphism])\n \n AC_CONFIG_HEADERS([src/libsecp256k1-config.h])\n AC_CONFIG_FILES([Makefile libsecp256k1.pc])\n AC_SUBST(SECP_INCLUDES)\n AC_SUBST(SECP_LIBS)\n AC_SUBST(SECP_TEST_LIBS)\n AC_SUBST(SECP_TEST_INCLUDES)\n-AM_CONDITIONAL([USE_ASM], [test x\"$set_field\" == x\"64bit_asm\"])\n AM_CONDITIONAL([USE_TESTS], [test x\"$use_tests\" != x\"no\"])\n-AM_CONDITIONAL([USE_BENCHMARK], [test x\"$use_benchmark\" != x\"no\"])\n+AM_CONDITIONAL([USE_BENCHMARK], [test x\"$use_benchmark\" = x\"yes\"])\n \n dnl make sure nothing new is exported so that we don't break the cache\n PKGCONFIG_PATH_TEMP=\"$PKG_CONFIG_PATH\""
      },
      {
        "sha": "cfdae31eaf87fe73a0de3ed45b202bb1e719f7f6",
        "filename": "include/secp256k1.h",
        "status": "modified",
        "additions": 41,
        "deletions": 10,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/include/secp256k1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/include/secp256k1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/secp256k1.h?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -77,42 +77,73 @@ SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_verify(\n   int pubkeylen\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(4);\n \n+/** A pointer to a function to deterministically generate a nonce.\n+ * Returns: 1 if a nonce was succesfully generated. 0 will cause signing to fail.\n+ * In:      msg32:     the 32-byte message hash being verified (will not be NULL)\n+ *          key32:     pointer to a 32-byte secret key (will not be NULL)\n+ *          attempt:   how many iterations we have tried to find a nonce.\n+ *                     This will almost always be 0, but different attempt values\n+ *                     are required to result in a different nonce.\n+ *          data:      Arbitrary data pointer that is passed through.\n+ * Out:     nonce32:   pointer to a 32-byte array to be filled by the function.\n+ * Except for test cases, this function should compute some cryptographic hash of\n+ * the message, the key and the attempt.\n+ */\n+typedef int (*secp256k1_nonce_function_t)(\n+  unsigned char *nonce32,\n+  const unsigned char *msg32,\n+  const unsigned char *key32,\n+  unsigned int attempt,\n+  const void *data\n+);\n+\n+/** An implementation of RFC6979 (using HMAC-SHA256) as nonce generation function. */\n+extern const secp256k1_nonce_function_t secp256k1_nonce_function_rfc6979;\n+\n+/** A default safe nonce generation function (currently equal to secp256k1_nonce_function_rfc6979). */\n+extern const secp256k1_nonce_function_t secp256k1_nonce_function_default;\n+\n+\n /** Create an ECDSA signature.\n  *  Returns: 1: signature created\n- *           0: nonce invalid, try another one\n+ *           0: the nonce generation function failed\n  *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n  *           seckey: pointer to a 32-byte secret key (cannot be NULL, assumed to be valid)\n- *           nonce:  pointer to a 32-byte nonce (cannot be NULL, generated with a cryptographic PRNG)\n+ *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n  *  Out:     sig:    pointer to an array where the signature will be placed (cannot be NULL)\n  *  In/Out:  siglen: pointer to an int with the length of sig, which will be updated\n  *                   to contain the actual signature length (<=72).\n  * Requires starting using SECP256K1_START_SIGN.\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_sign(\n+int secp256k1_ecdsa_sign(\n   const unsigned char *msg32,\n   unsigned char *sig,\n   int *siglen,\n   const unsigned char *seckey,\n-  const unsigned char *nonce\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4) SECP256K1_ARG_NONNULL(5);\n+  secp256k1_nonce_function_t noncefp,\n+  const void *ndata\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n /** Create a compact ECDSA signature (64 byte + recovery id).\n  *  Returns: 1: signature created\n- *           0: nonce invalid, try another one\n+ *           0: the nonce generation function failed\n  *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n  *           seckey: pointer to a 32-byte secret key (cannot be NULL, assumed to be valid)\n- *           nonce:  pointer to a 32-byte nonce (cannot be NULL, generated with a cryptographic PRNG)\n+ *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n  *  Out:     sig:    pointer to a 64-byte array where the signature will be placed (cannot be NULL)\n  *           recid:  pointer to an int, which will be updated to contain the recovery id (can be NULL)\n  * Requires starting using SECP256K1_START_SIGN.\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_sign_compact(\n+int secp256k1_ecdsa_sign_compact(\n   const unsigned char *msg32,\n   unsigned char *sig64,\n   const unsigned char *seckey,\n-  const unsigned char *nonce,\n+  secp256k1_nonce_function_t noncefp,\n+  const void *ndata,\n   int *recid\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n /** Recover an ECDSA public key from a compact signature.\n  *  Returns: 1: public key successfully recovered (which guarantees a correct signature)."
      },
      {
        "sha": "2276f00b9a683b7c10144e7b31406f09b9c1d5ea",
        "filename": "src/bench_sign.c",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/bench_sign.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/bench_sign.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench_sign.c?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -10,15 +10,13 @@\n \n typedef struct {\n     unsigned char msg[32];\n-    unsigned char nonce[32];\n     unsigned char key[32];\n } bench_sign_t;\n \n static void bench_sign_setup(void* arg) {\n     bench_sign_t *data = (bench_sign_t*)arg;\n \n     for (int i = 0; i < 32; i++) data->msg[i] = i + 1;\n-    for (int i = 0; i < 32; i++) data->nonce[i] = i + 33;\n     for (int i = 0; i < 32; i++) data->key[i] = i + 65;\n }\n \n@@ -28,9 +26,8 @@ static void bench_sign(void* arg) {\n     unsigned char sig[64];\n     for (int i=0; i<20000; i++) {\n         int recid = 0;\n-        CHECK(secp256k1_ecdsa_sign_compact(data->msg, sig, data->key, data->nonce, &recid));\n+        CHECK(secp256k1_ecdsa_sign_compact(data->msg, sig, data->key, NULL, NULL, &recid));\n         for (int j = 0; j < 32; j++) {\n-            data->nonce[j] = data->key[j];     /* Move former key to nonce  */\n             data->msg[j] = sig[j];             /* Move former R to message. */\n             data->key[j] = sig[j + 32];        /* Move former S to key.     */\n         }"
      },
      {
        "sha": "a58ca84347b5a172d9a37ab1b13f43c889592300",
        "filename": "src/bench_verify.c",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/bench_verify.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/bench_verify.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench_verify.c?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -14,7 +14,6 @@\n typedef struct {\n     unsigned char msg[32];\n     unsigned char key[32];\n-    unsigned char nonce[32];\n     unsigned char sig[72];\n     int siglen;\n     unsigned char pubkey[33];\n@@ -42,9 +41,8 @@ int main(void) {\n \n     for (int i = 0; i < 32; i++) data.msg[i] = 1 + i;\n     for (int i = 0; i < 32; i++) data.key[i] = 33 + i;\n-    for (int i = 0; i < 32; i++) data.nonce[i] = 65 + i;\n     data.siglen = 72;\n-    CHECK(secp256k1_ecdsa_sign(data.msg, data.sig, &data.siglen, data.key, data.nonce));\n+    secp256k1_ecdsa_sign(data.msg, data.sig, &data.siglen, data.key, NULL, NULL);\n     data.pubkeylen = 33;\n     CHECK(secp256k1_ec_pubkey_create(data.pubkey, &data.pubkeylen, data.key, 1));\n "
      },
      {
        "sha": "674650c1e9f04d3fc8d7e73d73b4c500f08849f4",
        "filename": "src/ecdsa_impl.h",
        "status": "modified",
        "additions": 43,
        "deletions": 16,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/ecdsa_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/ecdsa_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecdsa_impl.h?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -109,25 +109,53 @@ static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, int *size, const se\n     return 1;\n }\n \n-static int secp256k1_ecdsa_sig_recompute(secp256k1_scalar_t *r2, const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {\n+static int secp256k1_ecdsa_sig_verify(const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {\n     if (secp256k1_scalar_is_zero(&sig->r) || secp256k1_scalar_is_zero(&sig->s))\n         return 0;\n \n-    int ret = 0;\n     secp256k1_scalar_t sn, u1, u2;\n     secp256k1_scalar_inverse_var(&sn, &sig->s);\n     secp256k1_scalar_mul(&u1, &sn, message);\n     secp256k1_scalar_mul(&u2, &sn, &sig->r);\n     secp256k1_gej_t pubkeyj; secp256k1_gej_set_ge(&pubkeyj, pubkey);\n     secp256k1_gej_t pr; secp256k1_ecmult(&pr, &pubkeyj, &u2, &u1);\n-    if (!secp256k1_gej_is_infinity(&pr)) {\n-        secp256k1_fe_t xr; secp256k1_gej_get_x_var(&xr, &pr);\n-        secp256k1_fe_normalize_var(&xr);\n-        unsigned char xrb[32]; secp256k1_fe_get_b32(xrb, &xr);\n-        secp256k1_scalar_set_b32(r2, xrb, NULL);\n-        ret = 1;\n+    if (secp256k1_gej_is_infinity(&pr)) {\n+        return 0;\n+    }\n+    unsigned char c[32];\n+    secp256k1_scalar_get_b32(c, &sig->r);\n+    secp256k1_fe_t xr;\n+    secp256k1_fe_set_b32(&xr, c);\n+\n+    // We now have the recomputed R point in pr, and its claimed x coordinate (modulo n)\n+    // in xr. Naively, we would extract the x coordinate from pr (requiring a inversion modulo p),\n+    // compute the remainder modulo n, and compare it to xr. However:\n+    //\n+    //       xr == X(pr) mod n\n+    //   <=> exists h. (xr + h * n < p && xr + h * n == X(pr))\n+    //   [Since 2 * n > p, h can only be 0 or 1]\n+    //   <=> (xr == X(pr)) || (xr + n < p && xr + n == X(pr))\n+    //   [In Jacobian coordinates, X(pr) is pr.x / pr.z^2 mod p]\n+    //   <=> (xr == pr.x / pr.z^2 mod p) || (xr + n < p && xr + n == pr.x / pr.z^2 mod p)\n+    //   [Multiplying both sides of the equations by pr.z^2 mod p]\n+    //   <=> (xr * pr.z^2 mod p == pr.x) || (xr + n < p && (xr + n) * pr.z^2 mod p == pr.x)\n+    //\n+    // Thus, we can avoid the inversion, but we have to check both cases separately.\n+    // secp256k1_gej_eq_x implements the (xr * pr.z^2 mod p == pr.x) test.\n+    if (secp256k1_gej_eq_x_var(&xr, &pr)) {\n+        // xr.x == xr * xr.z^2 mod p, so the signature is valid.\n+        return 1;\n+    }\n+    if (secp256k1_fe_cmp_var(&xr, &secp256k1_ecdsa_consts->p_minus_order) >= 0) {\n+        // xr + p >= n, so we can skip testing the second case.\n+        return 0;\n+    }\n+    secp256k1_fe_add(&xr, &secp256k1_ecdsa_consts->order_as_fe);\n+    if (secp256k1_gej_eq_x_var(&xr, &pr)) {\n+        // (xr + n) * pr.z^2 mod p == pr.x, so the signature is valid.\n+        return 1;\n     }\n-    return ret;\n+    return 0;\n }\n \n static int secp256k1_ecdsa_sig_recover(const secp256k1_ecdsa_sig_t *sig, secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message, int recid) {\n@@ -159,13 +187,6 @@ static int secp256k1_ecdsa_sig_recover(const secp256k1_ecdsa_sig_t *sig, secp256\n     return !secp256k1_gej_is_infinity(&qj);\n }\n \n-static int secp256k1_ecdsa_sig_verify(const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {\n-    secp256k1_scalar_t r2;\n-    int ret = 0;\n-    ret = secp256k1_ecdsa_sig_recompute(&r2, sig, pubkey, message) && secp256k1_scalar_eq(&sig->r, &r2);\n-    return ret;\n-}\n-\n static int secp256k1_ecdsa_sig_sign(secp256k1_ecdsa_sig_t *sig, const secp256k1_scalar_t *seckey, const secp256k1_scalar_t *message, const secp256k1_scalar_t *nonce, int *recid) {\n     secp256k1_gej_t rp;\n     secp256k1_ecmult_gen(&rp, nonce);\n@@ -177,6 +198,12 @@ static int secp256k1_ecdsa_sig_sign(secp256k1_ecdsa_sig_t *sig, const secp256k1_\n     secp256k1_fe_get_b32(b, &r.x);\n     int overflow = 0;\n     secp256k1_scalar_set_b32(&sig->r, b, &overflow);\n+    if (secp256k1_scalar_is_zero(&sig->r)) {\n+        /* P.x = order is on the curve, so technically sig->r could end up zero, which would be an invalid signature. */\n+        secp256k1_gej_clear(&rp);\n+        secp256k1_ge_clear(&r);\n+        return 0;\n+    }\n     if (recid)\n         *recid = (overflow ? 2 : 0) | (secp256k1_fe_is_odd(&r.y) ? 1 : 0);\n     secp256k1_scalar_t n;"
      },
      {
        "sha": "48436316e12ba5c665ba4653b16c435b7210814b",
        "filename": "src/ecmult_gen_impl.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/ecmult_gen_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/ecmult_gen_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecmult_gen_impl.h?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -73,7 +73,7 @@ static void secp256k1_ecmult_gen_start(void) {\n             secp256k1_gej_double_var(&numsbase, &numsbase);\n             if (j == 62) {\n                 /* In the last iteration, numsbase is (1 - 2^j) * nums instead. */\n-                secp256k1_gej_neg_var(&numsbase, &numsbase);\n+                secp256k1_gej_neg(&numsbase, &numsbase);\n                 secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej);\n             }\n         }"
      },
      {
        "sha": "345cfae73328c9db2fe759256cdcb6a025186ae9",
        "filename": "src/ecmult_impl.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/ecmult_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/ecmult_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecmult_impl.h?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -70,8 +70,8 @@ static void secp256k1_ecmult_table_precomp_ge_var(secp256k1_ge_t *pre, const sec\n         (neg)((r), &(pre)[(-(n)-1)/2]); \\\n } while(0)\n \n-#define ECMULT_TABLE_GET_GEJ(r,pre,n,w) ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_gej_neg_var)\n-#define ECMULT_TABLE_GET_GE(r,pre,n,w)  ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_ge_neg_var)\n+#define ECMULT_TABLE_GET_GEJ(r,pre,n,w) ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_gej_neg)\n+#define ECMULT_TABLE_GET_GE(r,pre,n,w)  ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_ge_neg)\n \n typedef struct {\n     /* For accelerating the computation of a*P + b*G: */"
      },
      {
        "sha": "14e2b813c17ba3a6a0999e58f1c8b2d0f3a7d93b",
        "filename": "src/field.h",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/field.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/field.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/field.h?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -22,9 +22,7 @@\n #include \"libsecp256k1-config.h\"\n #endif\n \n-#if defined(USE_FIELD_GMP)\n-#include \"field_gmp.h\"\n-#elif defined(USE_FIELD_10X26)\n+#if defined(USE_FIELD_10X26)\n #include \"field_10x26.h\"\n #elif defined(USE_FIELD_5X52)\n #include \"field_5x52.h\"\n@@ -50,9 +48,20 @@ static void secp256k1_fe_stop(void);\n /** Normalize a field element. */\n static void secp256k1_fe_normalize(secp256k1_fe_t *r);\n \n+/** Weakly normalize a field element: reduce it magnitude to 1, but don't fully normalize. */\n+static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r);\n+\n /** Normalize a field element, without constant-time guarantee. */\n static void secp256k1_fe_normalize_var(secp256k1_fe_t *r);\n \n+/** Verify whether a field element represents zero i.e. would normalize to a zero value. The field\n+ *  implementation may optionally normalize the input, but this should not be relied upon. */\n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r);\n+\n+/** Verify whether a field element represents zero i.e. would normalize to a zero value. The field\n+ *  implementation may optionally normalize the input, but this should not be relied upon. */\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r);\n+\n /** Set a field element equal to a small integer. Resulting field element is normalized. */\n static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a);\n \n@@ -62,8 +71,8 @@ static int secp256k1_fe_is_zero(const secp256k1_fe_t *a);\n /** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n static int secp256k1_fe_is_odd(const secp256k1_fe_t *a);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n-static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b);\n+/** Compare two field elements. Requires magnitude-1 inputs. */\n+static int secp256k1_fe_equal_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b);\n \n /** Compare two field elements. Requires both inputs to be normalized */\n static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b);"
      },
      {
        "sha": "9ef60a807ace651660c0ae031557eda65622f7b8",
        "filename": "src/field_10x26_impl.h",
        "status": "modified",
        "additions": 99,
        "deletions": 12,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/field_10x26_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/field_10x26_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/field_10x26_impl.h?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -31,6 +31,7 @@ static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n     r &= (d[8] <= 0x3FFFFFFUL * m);\n     r &= (d[9] <= 0x03FFFFFUL * m);\n     r &= (a->magnitude >= 0);\n+    r &= (a->magnitude <= 32);\n     if (a->normalized) {\n         r &= (a->magnitude <= 1);\n         if (r && (d[9] == 0x03FFFFFUL)) {\n@@ -103,6 +104,37 @@ static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n #endif\n }\n \n+static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r) {\n+    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n+             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n+\n+    /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n+    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x3D1UL; t1 += (x << 6);\n+    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL;\n+    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL;\n+    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL;\n+    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL;\n+    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL;\n+    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL;\n+    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL;\n+    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL;\n+    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL;\n+\n+    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t9 >> 23 == 0);\n+\n+    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;\n+    r->n[5] = t5; r->n[6] = t6; r->n[7] = t7; r->n[8] = t8; r->n[9] = t9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n     uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n              t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n@@ -159,6 +191,73 @@ static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n #endif\n }\n \n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n+    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n+             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n+\n+    /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n+    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint32_t z0, z1;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x3D1UL; t1 += (x << 6);\n+    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL; z0  = t0; z1  = t0 ^ 0x3D0UL;\n+    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL; z0 |= t1; z1 &= t1 ^ 0x40UL;\n+    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; z0 |= t3; z1 &= t3;\n+    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; z0 |= t4; z1 &= t4;\n+    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; z0 |= t5; z1 &= t5;\n+    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; z0 |= t6; z1 &= t6;\n+    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; z0 |= t7; z1 &= t7;\n+    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; z0 |= t8; z1 &= t8;\n+                                         z0 |= t9; z1 &= t9 ^ 0x3C00000UL;\n+\n+    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t9 >> 23 == 0);\n+\n+    return (z0 == 0) | (z1 == 0x3FFFFFFUL);\n+}\n+\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n+    uint32_t t0 = r->n[0], t9 = r->n[9];\n+\n+    /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n+    uint32_t x = t9 >> 22;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x3D1UL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint32_t z0 = t0 & 0x3FFFFFFUL, z1 = z0 ^ 0x3D0UL;\n+\n+    /* Fast return path should catch the majority of cases */\n+    if ((z0 != 0UL) & (z1 != 0x3FFFFFFUL))\n+        return 0;\n+\n+    uint32_t t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n+             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8];\n+    t9 &= 0x03FFFFFUL;\n+    t1 += (x << 6);\n+\n+    t1 += (t0 >> 26); t0  = z0;\n+    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL; z0 |= t1; z1 &= t1 ^ 0x40UL;\n+    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; z0 |= t3; z1 &= t3;\n+    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; z0 |= t4; z1 &= t4;\n+    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; z0 |= t5; z1 &= t5;\n+    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; z0 |= t6; z1 &= t6;\n+    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; z0 |= t7; z1 &= t7;\n+    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; z0 |= t8; z1 &= t8;\n+                                         z0 |= t9; z1 &= t9 ^ 0x3C00000UL;\n+\n+    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t9 >> 23 == 0);\n+\n+    return (z0 == 0) | (z1 == 0x3FFFFFFUL);\n+}\n+\n SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n     r->n[0] = a;\n     r->n[1] = r->n[2] = r->n[3] = r->n[4] = r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;\n@@ -196,18 +295,6 @@ SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {\n     }\n }\n \n-SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-#ifdef VERIFY\n-    VERIFY_CHECK(a->normalized);\n-    VERIFY_CHECK(b->normalized);\n-    secp256k1_fe_verify(a);\n-    secp256k1_fe_verify(b);\n-#endif\n-    const uint32_t *t = a->n, *u = b->n;\n-    return ((t[0]^u[0]) | (t[1]^u[1]) | (t[2]^u[2]) | (t[3]^u[3]) | (t[4]^u[4])\n-          | (t[5]^u[5]) | (t[6]^u[6]) | (t[7]^u[7]) | (t[8]^u[8]) | (t[9]^u[9])) == 0;\n-}\n-\n static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);"
      },
      {
        "sha": "4db9e6f5ff5bc5d8c7b8492575d50d497b6259da",
        "filename": "src/field_5x52_impl.h",
        "status": "modified",
        "additions": 81,
        "deletions": 15,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/field_5x52_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/field_5x52_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/field_5x52_impl.h?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -16,12 +16,10 @@\n #include \"num.h\"\n #include \"field.h\"\n \n-#if defined(USE_FIELD_5X52_ASM)\n+#if defined(USE_ASM_X86_64)\n #include \"field_5x52_asm_impl.h\"\n-#elif defined(USE_FIELD_5X52_INT128)\n-#include \"field_5x52_int128_impl.h\"\n #else\n-#error \"Please select field_5x52 implementation\"\n+#include \"field_5x52_int128_impl.h\"\n #endif\n \n /** Implements arithmetic modulo FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F,\n@@ -45,6 +43,7 @@ static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n     r &= (d[3] <= 0xFFFFFFFFFFFFFULL * m);\n     r &= (d[4] <= 0x0FFFFFFFFFFFFULL * m);\n     r &= (a->magnitude >= 0);\n+    r &= (a->magnitude <= 2048);\n     if (a->normalized) {\n         r &= (a->magnitude <= 1);\n         if (r && (d[4] == 0x0FFFFFFFFFFFFULL) && ((d[3] & d[2] & d[1]) == 0xFFFFFFFFFFFFFULL)) {\n@@ -102,6 +101,30 @@ static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n #endif\n }\n \n+static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r) {\n+    uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n+\n+    /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n+    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x1000003D1ULL;\n+    t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL;\n+    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL;\n+    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL;\n+    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL;\n+\n+    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t4 >> 49 == 0);\n+\n+    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n     uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n \n@@ -146,6 +169,60 @@ static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n #endif\n }\n \n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n+    uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n+\n+    /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n+    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint64_t z0, z1;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x1000003D1ULL;\n+    t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL; z0  = t0; z1  = t0 ^ 0x1000003D0ULL;\n+    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL; z0 |= t1; z1 &= t1;\n+    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL; z0 |= t3; z1 &= t3;\n+                                                z0 |= t4; z1 &= t4 ^ 0xF000000000000ULL;\n+\n+    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t4 >> 49 == 0);\n+\n+    return (z0 == 0) | (z1 == 0xFFFFFFFFFFFFFULL);\n+}\n+\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n+    uint64_t t0 = r->n[0], t4 = r->n[4];\n+\n+    /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n+    uint64_t x = t4 >> 48;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x1000003D1ULL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint64_t z0 = t0 & 0xFFFFFFFFFFFFFULL, z1 = z0 ^ 0x1000003D0ULL;\n+\n+    /* Fast return path should catch the majority of cases */\n+    if ((z0 != 0ULL) & (z1 != 0xFFFFFFFFFFFFFULL))\n+        return 0;\n+\n+    uint64_t t1 = r->n[1], t2 = r->n[2], t3 = r->n[3];\n+    t4 &= 0x0FFFFFFFFFFFFULL;\n+\n+    t1 += (t0 >> 52); t0  = z0;\n+    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL; z0 |= t1; z1 &= t1;\n+    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL; z0 |= t3; z1 &= t3;\n+                                                z0 |= t4; z1 &= t4 ^ 0xF000000000000ULL;\n+\n+    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t4 >> 49 == 0);\n+\n+    return (z0 == 0) | (z1 == 0xFFFFFFFFFFFFFULL);\n+}\n+\n SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n     r->n[0] = a;\n     r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;\n@@ -183,17 +260,6 @@ SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {\n     }\n }\n \n-SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-#ifdef VERIFY\n-    VERIFY_CHECK(a->normalized);\n-    VERIFY_CHECK(b->normalized);\n-    secp256k1_fe_verify(a);\n-    secp256k1_fe_verify(b);\n-#endif\n-    const uint64_t *t = a->n, *u = b->n;\n-    return ((t[0]^u[0]) | (t[1]^u[1]) | (t[2]^u[2]) | (t[3]^u[3]) | (t[4]^u[4])) == 0;\n-}\n-\n static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);"
      },
      {
        "sha": "b390fd9de8d4801a9cad8d2a55debf52ceff2f52",
        "filename": "src/field_gmp.h",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecae2acb06d44509425a9cdad38ed9a5bce15cbe/src/field_gmp.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecae2acb06d44509425a9cdad38ed9a5bce15cbe/src/field_gmp.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/field_gmp.h?ref=ecae2acb06d44509425a9cdad38ed9a5bce15cbe",
        "patch": "@@ -1,18 +0,0 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n-\n-#ifndef _SECP256K1_FIELD_REPR_\n-#define _SECP256K1_FIELD_REPR_\n-\n-#include <gmp.h>\n-\n-#define FIELD_LIMBS ((256 + GMP_NUMB_BITS - 1) / GMP_NUMB_BITS)\n-\n-typedef struct {\n-    mp_limb_t n[FIELD_LIMBS+1];\n-} secp256k1_fe_t;\n-\n-#endif"
      },
      {
        "sha": "73a55c4f00d4523f5851daa9c45ffd5f9ca6dd2e",
        "filename": "src/field_gmp_impl.h",
        "status": "removed",
        "additions": 0,
        "deletions": 184,
        "changes": 184,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecae2acb06d44509425a9cdad38ed9a5bce15cbe/src/field_gmp_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecae2acb06d44509425a9cdad38ed9a5bce15cbe/src/field_gmp_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/field_gmp_impl.h?ref=ecae2acb06d44509425a9cdad38ed9a5bce15cbe",
        "patch": "@@ -1,184 +0,0 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n-\n-#ifndef _SECP256K1_FIELD_REPR_IMPL_H_\n-#define _SECP256K1_FIELD_REPR_IMPL_H_\n-\n-#include <stdio.h>\n-#include <string.h>\n-#include \"num.h\"\n-#include \"field.h\"\n-\n-static mp_limb_t secp256k1_field_p[FIELD_LIMBS];\n-static mp_limb_t secp256k1_field_pc[(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS];\n-\n-static void secp256k1_fe_inner_start(void) {\n-    for (int i=0; i<(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS; i++)\n-        secp256k1_field_pc[i] = 0;\n-    secp256k1_field_pc[0] += 0x3D1UL;\n-    secp256k1_field_pc[32/GMP_NUMB_BITS] += (((mp_limb_t)1) << (32 % GMP_NUMB_BITS));\n-    for (int i=0; i<FIELD_LIMBS; i++) {\n-        secp256k1_field_p[i] = 0;\n-    }\n-    mpn_sub(secp256k1_field_p, secp256k1_field_p, FIELD_LIMBS, secp256k1_field_pc, (33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS);\n-}\n-\n-static void secp256k1_fe_inner_stop(void) {\n-}\n-\n-static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n-    if (r->n[FIELD_LIMBS] != 0) {\n-#if (GMP_NUMB_BITS >= 40)\n-        mp_limb_t carry = mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x1000003D1ULL * r->n[FIELD_LIMBS]);\n-        mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x1000003D1ULL * carry);\n-#else\n-        mp_limb_t carry = mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x3D1UL * r->n[FIELD_LIMBS]) +\n-                          mpn_add_1(r->n+(32/GMP_NUMB_BITS), r->n+(32/GMP_NUMB_BITS), FIELD_LIMBS-(32/GMP_NUMB_BITS), r->n[FIELD_LIMBS] << (32 % GMP_NUMB_BITS));\n-        mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x3D1UL * carry);\n-        mpn_add_1(r->n+(32/GMP_NUMB_BITS), r->n+(32/GMP_NUMB_BITS), FIELD_LIMBS-(32/GMP_NUMB_BITS), carry << (32%GMP_NUMB_BITS));\n-#endif\n-        r->n[FIELD_LIMBS] = 0;\n-    }\n-    if (mpn_cmp(r->n, secp256k1_field_p, FIELD_LIMBS) >= 0)\n-        mpn_sub(r->n, r->n, FIELD_LIMBS, secp256k1_field_p, FIELD_LIMBS);\n-}\n-\n-static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n-    secp256k1_fe_normalize(r);\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n-    r->n[0] = a;\n-    for (int i=1; i<FIELD_LIMBS+1; i++)\n-        r->n[i] = 0;\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *r) {\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        r->n[i] = 0;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe_t *a) {\n-    int ret = 1;\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        ret &= (a->n[i] == 0);\n-    return ret;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe_t *a) {\n-    return a->n[0] & 1;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-    int ret = 1;\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        ret &= (a->n[i] == b->n[i]);\n-    return ret;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-    for (int i=FIELD_LIMBS; i>=0; i--) {\n-        if (a->n[i] > b->n[i]) return 1;\n-        if (a->n[i] < b->n[i]) return -1;\n-    }\n-    return 0;\n-}\n-\n-static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a) {\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        r->n[i] = 0;\n-    for (int i=0; i<256; i++) {\n-        int limb = i/GMP_NUMB_BITS;\n-        int shift = i%GMP_NUMB_BITS;\n-        r->n[limb] |= (mp_limb_t)((a[31-i/8] >> (i%8)) & 0x1) << shift;\n-    }\n-    return (mpn_cmp(r->n, secp256k1_field_p, FIELD_LIMBS) < 0);\n-}\n-\n-/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n-static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe_t *a) {\n-    for (int i=0; i<32; i++) {\n-        int c = 0;\n-        for (int j=0; j<8; j++) {\n-            int limb = (8*i+j)/GMP_NUMB_BITS;\n-            int shift = (8*i+j)%GMP_NUMB_BITS;\n-            c |= ((a->n[limb] >> shift) & 0x1) << j;\n-        }\n-        r[31-i] = c;\n-    }\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe_t *r, const secp256k1_fe_t *a, int m) {\n-    (void)m;\n-    *r = *a;\n-    secp256k1_fe_normalize(r);\n-    for (int i=0; i<FIELD_LIMBS; i++)\n-        r->n[i] = ~(r->n[i]);\n-#if (GMP_NUMB_BITS >= 33)\n-    mpn_sub_1(r->n, r->n, FIELD_LIMBS, 0x1000003D0ULL);\n-#else\n-    mpn_sub_1(r->n, r->n, FIELD_LIMBS, 0x3D0UL);\n-    mpn_sub_1(r->n+(32/GMP_NUMB_BITS), r->n+(32/GMP_NUMB_BITS), FIELD_LIMBS-(32/GMP_NUMB_BITS), 0x1UL << (32%GMP_NUMB_BITS));\n-#endif\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe_t *r, int a) {\n-    mpn_mul_1(r->n, r->n, FIELD_LIMBS+1, a);\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n-    mpn_add(r->n, r->n, FIELD_LIMBS+1, a->n, FIELD_LIMBS+1);\n-}\n-\n-static void secp256k1_fe_reduce(secp256k1_fe_t *r, mp_limb_t *tmp) {\n-    /** <A1 A2 A3 A4> <B1 B2 B3 B4>\n-     *        B1 B2 B3 B4\n-     *  + C * A1 A2 A3 A4\n-     *  +  A1 A2 A3 A4\n-     */\n-\n-#if (GMP_NUMB_BITS >= 33)\n-    mp_limb_t o = mpn_addmul_1(tmp, tmp+FIELD_LIMBS, FIELD_LIMBS, 0x1000003D1ULL);\n-#else\n-    mp_limb_t o = mpn_addmul_1(tmp, tmp+FIELD_LIMBS, FIELD_LIMBS, 0x3D1UL) +\n-                  mpn_addmul_1(tmp+(32/GMP_NUMB_BITS), tmp+FIELD_LIMBS, FIELD_LIMBS-(32/GMP_NUMB_BITS), 0x1UL << (32%GMP_NUMB_BITS));\n-#endif\n-    mp_limb_t q[1+(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS];\n-    q[(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS] = mpn_mul_1(q, secp256k1_field_pc, (33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS, o);\n-#if (GMP_NUMB_BITS <= 32)\n-    mp_limb_t o2 = tmp[2*FIELD_LIMBS-(32/GMP_NUMB_BITS)] << (32%GMP_NUMB_BITS);\n-    q[(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS] += mpn_addmul_1(q, secp256k1_field_pc, (33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS, o2);\n-#endif\n-    r->n[FIELD_LIMBS] = mpn_add(r->n, tmp, FIELD_LIMBS, q, 1+(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS);\n-}\n-\n-static void secp256k1_fe_mul(secp256k1_fe_t *r, const secp256k1_fe_t *a, const secp256k1_fe_t * SECP256K1_RESTRICT b) {\n-    VERIFY_CHECK(r != b);\n-    secp256k1_fe_t ac = *a;\n-    secp256k1_fe_t bc = *b;\n-    secp256k1_fe_normalize(&ac);\n-    secp256k1_fe_normalize(&bc);\n-    mp_limb_t tmp[2*FIELD_LIMBS];\n-    mpn_mul_n(tmp, ac.n, bc.n, FIELD_LIMBS);\n-    secp256k1_fe_reduce(r, tmp);\n-}\n-\n-static void secp256k1_fe_sqr(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n-    secp256k1_fe_t ac = *a;\n-    secp256k1_fe_normalize(&ac);\n-    mp_limb_t tmp[2*FIELD_LIMBS];\n-    mpn_sqr(tmp, ac.n, FIELD_LIMBS);\n-    secp256k1_fe_reduce(r, tmp);\n-}\n-\n-static void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k1_fe_t *a, int flag) {\n-    mp_limb_t mask0 = flag + ~((mp_limb_t)0), mask1 = ~mask0;\n-    for (int i = 0; i <= FIELD_LIMBS; i++) {\n-        r->n[i] = (r->n[i] & mask0) | (a->n[i] & mask1);\n-    }\n-}\n-\n-#endif"
      },
      {
        "sha": "4e2c24aa153541ed754106c31eb77eb3fcfbe670",
        "filename": "src/field_impl.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/field_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/field_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/field_impl.h?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -13,9 +13,7 @@\n \n #include \"util.h\"\n \n-#if defined(USE_FIELD_GMP)\n-#include \"field_gmp_impl.h\"\n-#elif defined(USE_FIELD_10X26)\n+#if defined(USE_FIELD_10X26)\n #include \"field_10x26_impl.h\"\n #elif defined(USE_FIELD_5X52)\n #include \"field_5x52_impl.h\"\n@@ -66,6 +64,13 @@ static int secp256k1_fe_set_hex(secp256k1_fe_t *r, const char *a, int alen) {\n     return secp256k1_fe_set_b32(r, tmp);\n }\n \n+SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n+    secp256k1_fe_t na;\n+    secp256k1_fe_negate(&na, a, 1);\n+    secp256k1_fe_add(&na, b);\n+    return secp256k1_fe_normalizes_to_zero_var(&na);\n+}\n+\n static int secp256k1_fe_sqrt_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n \n     /** The binary representation of (p + 1)/4 has 3 blocks of 1s, with lengths in\n@@ -130,10 +135,7 @@ static int secp256k1_fe_sqrt_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n     /* Check that a square root was actually calculated */\n \n     secp256k1_fe_sqr(&t1, r);\n-    secp256k1_fe_negate(&t1, &t1, 1);\n-    secp256k1_fe_add(&t1, a);\n-    secp256k1_fe_normalize_var(&t1);\n-    return secp256k1_fe_is_zero(&t1);\n+    return secp256k1_fe_equal_var(&t1, a);\n }\n \n static void secp256k1_fe_inv(secp256k1_fe_t *r, const secp256k1_fe_t *a) {"
      },
      {
        "sha": "6dea6bb5acb8047326147d9d54b413ccfc1f2e31",
        "filename": "src/group.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/group.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/group.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/group.h?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -60,7 +60,6 @@ static int secp256k1_ge_is_infinity(const secp256k1_ge_t *a);\n static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a);\n \n static void secp256k1_ge_neg(secp256k1_ge_t *r, const secp256k1_ge_t *a);\n-static void secp256k1_ge_neg_var(secp256k1_ge_t *r, const secp256k1_ge_t *a);\n \n /** Get a hex representation of a point. *rlen will be overwritten with the real length. */\n static void secp256k1_ge_get_hex(char *r, int *rlen, const secp256k1_ge_t *a);\n@@ -81,11 +80,11 @@ static void secp256k1_gej_set_xy(secp256k1_gej_t *r, const secp256k1_fe_t *x, co\n /** Set a group element (jacobian) equal to another which is given in affine coordinates. */\n static void secp256k1_gej_set_ge(secp256k1_gej_t *r, const secp256k1_ge_t *a);\n \n-/** Get the X coordinate of a group element (jacobian). */\n-static void secp256k1_gej_get_x_var(secp256k1_fe_t *r, const secp256k1_gej_t *a);\n+/** Compare the X coordinate of a group element (jacobian). */\n+static int secp256k1_gej_eq_x_var(const secp256k1_fe_t *x, const secp256k1_gej_t *a);\n \n /** Set r equal to the inverse of a (i.e., mirrored around the X axis) */\n-static void secp256k1_gej_neg_var(secp256k1_gej_t *r, const secp256k1_gej_t *a);\n+static void secp256k1_gej_neg(secp256k1_gej_t *r, const secp256k1_gej_t *a);\n \n /** Check whether a group element is the point at infinity. */\n static int secp256k1_gej_is_infinity(const secp256k1_gej_t *a);"
      },
      {
        "sha": "fef06df2892d1a5f4372d4028c8dea42efce96fc",
        "filename": "src/group_impl.h",
        "status": "modified",
        "additions": 26,
        "deletions": 40,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/group_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/group_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/group_impl.h?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -29,13 +29,7 @@ static int secp256k1_ge_is_infinity(const secp256k1_ge_t *a) {\n \n static void secp256k1_ge_neg(secp256k1_ge_t *r, const secp256k1_ge_t *a) {\n     *r = *a;\n-    secp256k1_fe_normalize(&r->y);\n-    secp256k1_fe_negate(&r->y, &r->y, 1);\n-}\n-\n-static void secp256k1_ge_neg_var(secp256k1_ge_t *r, const secp256k1_ge_t *a) {\n-    *r = *a;\n-    secp256k1_fe_normalize_var(&r->y);\n+    secp256k1_fe_normalize_weak(&r->y);\n     secp256k1_fe_negate(&r->y, &r->y, 1);\n }\n \n@@ -163,17 +157,19 @@ static void secp256k1_gej_set_ge(secp256k1_gej_t *r, const secp256k1_ge_t *a) {\n    secp256k1_fe_set_int(&r->z, 1);\n }\n \n-static void secp256k1_gej_get_x_var(secp256k1_fe_t *r, const secp256k1_gej_t *a) {\n-    secp256k1_fe_t zi2; secp256k1_fe_inv_var(&zi2, &a->z); secp256k1_fe_sqr(&zi2, &zi2);\n-    secp256k1_fe_mul(r, &a->x, &zi2);\n+static int secp256k1_gej_eq_x_var(const secp256k1_fe_t *x, const secp256k1_gej_t *a) {\n+    VERIFY_CHECK(!a->infinity);\n+    secp256k1_fe_t r; secp256k1_fe_sqr(&r, &a->z); secp256k1_fe_mul(&r, &r, x);\n+    secp256k1_fe_t r2 = a->x; secp256k1_fe_normalize_weak(&r2);\n+    return secp256k1_fe_equal_var(&r, &r2);\n }\n \n-static void secp256k1_gej_neg_var(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n+static void secp256k1_gej_neg(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n     r->infinity = a->infinity;\n     r->x = a->x;\n     r->y = a->y;\n     r->z = a->z;\n-    secp256k1_fe_normalize_var(&r->y);\n+    secp256k1_fe_normalize_weak(&r->y);\n     secp256k1_fe_negate(&r->y, &r->y, 1);\n }\n \n@@ -195,9 +191,8 @@ static int secp256k1_gej_is_valid_var(const secp256k1_gej_t *a) {\n     secp256k1_fe_t z6; secp256k1_fe_sqr(&z6, &z2); secp256k1_fe_mul(&z6, &z6, &z2);\n     secp256k1_fe_mul_int(&z6, 7);\n     secp256k1_fe_add(&x3, &z6);\n-    secp256k1_fe_normalize_var(&y2);\n-    secp256k1_fe_normalize_var(&x3);\n-    return secp256k1_fe_equal(&y2, &x3);\n+    secp256k1_fe_normalize_weak(&x3);\n+    return secp256k1_fe_equal_var(&y2, &x3);\n }\n \n static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a) {\n@@ -208,9 +203,8 @@ static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a) {\n     secp256k1_fe_t x3; secp256k1_fe_sqr(&x3, &a->x); secp256k1_fe_mul(&x3, &x3, &a->x);\n     secp256k1_fe_t c; secp256k1_fe_set_int(&c, 7);\n     secp256k1_fe_add(&x3, &c);\n-    secp256k1_fe_normalize_var(&y2);\n-    secp256k1_fe_normalize_var(&x3);\n-    return secp256k1_fe_equal(&y2, &x3);\n+    secp256k1_fe_normalize_weak(&x3);\n+    return secp256k1_fe_equal_var(&y2, &x3);\n }\n \n static void secp256k1_gej_double_var(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n@@ -261,20 +255,16 @@ static void secp256k1_gej_add_var(secp256k1_gej_t *r, const secp256k1_gej_t *a,\n     secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &z12);\n     secp256k1_fe_t s1; secp256k1_fe_mul(&s1, &a->y, &z22); secp256k1_fe_mul(&s1, &s1, &b->z);\n     secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);\n-    secp256k1_fe_normalize_var(&u1);\n-    secp256k1_fe_normalize_var(&u2);\n-    if (secp256k1_fe_equal(&u1, &u2)) {\n-        secp256k1_fe_normalize_var(&s1);\n-        secp256k1_fe_normalize_var(&s2);\n-        if (secp256k1_fe_equal(&s1, &s2)) {\n+    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n+    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n+    if (secp256k1_fe_normalizes_to_zero_var(&h)) {\n+        if (secp256k1_fe_normalizes_to_zero_var(&i)) {\n             secp256k1_gej_double_var(r, a);\n         } else {\n             r->infinity = 1;\n         }\n         return;\n     }\n-    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n-    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n     secp256k1_fe_t i2; secp256k1_fe_sqr(&i2, &i);\n     secp256k1_fe_t h2; secp256k1_fe_sqr(&h2, &h);\n     secp256k1_fe_t h3; secp256k1_fe_mul(&h3, &h, &h2);\n@@ -300,23 +290,20 @@ static void secp256k1_gej_add_ge_var(secp256k1_gej_t *r, const secp256k1_gej_t *\n     }\n     r->infinity = 0;\n     secp256k1_fe_t z12; secp256k1_fe_sqr(&z12, &a->z);\n-    secp256k1_fe_t u1 = a->x;\n+    secp256k1_fe_t u1 = a->x; secp256k1_fe_normalize_weak(&u1);\n     secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &z12);\n-    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize_var(&s1);\n+    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize_weak(&s1);\n     secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);\n-    secp256k1_fe_normalize_var(&u1);\n-    secp256k1_fe_normalize_var(&u2);\n-    if (secp256k1_fe_equal(&u1, &u2)) {\n-        secp256k1_fe_normalize_var(&s2);\n-        if (secp256k1_fe_equal(&s1, &s2)) {\n+    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n+    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n+    if (secp256k1_fe_normalizes_to_zero_var(&h)) {\n+        if (secp256k1_fe_normalizes_to_zero_var(&i)) {\n             secp256k1_gej_double_var(r, a);\n         } else {\n             r->infinity = 1;\n         }\n         return;\n     }\n-    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n-    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n     secp256k1_fe_t i2; secp256k1_fe_sqr(&i2, &i);\n     secp256k1_fe_t h2; secp256k1_fe_sqr(&h2, &h);\n     secp256k1_fe_t h3; secp256k1_fe_mul(&h3, &h, &h2);\n@@ -355,9 +342,9 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n      */\n \n     secp256k1_fe_t zz; secp256k1_fe_sqr(&zz, &a->z);                /* z = Z1^2 */\n-    secp256k1_fe_t u1 = a->x; secp256k1_fe_normalize(&u1);          /* u1 = U1 = X1*Z2^2 (1) */\n+    secp256k1_fe_t u1 = a->x; secp256k1_fe_normalize_weak(&u1);     /* u1 = U1 = X1*Z2^2 (1) */\n     secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &zz);           /* u2 = U2 = X2*Z1^2 (1) */\n-    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize(&s1);          /* s1 = S1 = Y1*Z2^3 (1) */\n+    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize_weak(&s1);     /* s1 = S1 = Y1*Z2^3 (1) */\n     secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &zz);           /* s2 = Y2*Z2^2 (1) */\n     secp256k1_fe_mul(&s2, &s2, &a->z);                              /* s2 = S2 = Y2*Z1^3 (1) */\n     secp256k1_fe_t z = a->z;                                        /* z = Z = Z1*Z2 (8) */\n@@ -371,8 +358,7 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n     secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n     secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n-    secp256k1_fe_normalize(&r->z);\n-    int infinity = secp256k1_fe_is_zero(&r->z) * (1 - a->infinity);\n+    int infinity = secp256k1_fe_normalizes_to_zero(&r->z) * (1 - a->infinity);\n     secp256k1_fe_mul_int(&r->z, 2 * (1 - a->infinity)); /* r->z = Z3 = 2*M*Z (2) */\n     r->x = t;                                           /* r->x = R^2 (1) */\n     secp256k1_fe_negate(&q, &q, 1);                     /* q = -Q (2) */\n@@ -384,7 +370,7 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     secp256k1_fe_mul(&t, &t, &rr);                      /* t = R*(2*R^2-3*Q) (1) */\n     secp256k1_fe_add(&t, &n);                           /* t = R*(2*R^2-3*Q)+M^4 (2) */\n     secp256k1_fe_negate(&r->y, &t, 2);                  /* r->y = R*(3*Q-2*R^2)-M^4 (3) */\n-    secp256k1_fe_normalize(&r->y);\n+    secp256k1_fe_normalize_weak(&r->y);\n     secp256k1_fe_mul_int(&r->x, 4 * (1 - a->infinity)); /* r->x = X3 = 4*(R^2-Q) */\n     secp256k1_fe_mul_int(&r->y, 4 * (1 - a->infinity)); /* r->y = Y3 = 4*R*(3*Q-2*R^2)-4*M^4 (4) */\n "
      },
      {
        "sha": "d1e65b968a9e5d44578bb1d0a051f499ea4f5e30",
        "filename": "src/hash.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -0,0 +1,41 @@\n+/**********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_HASH_\n+#define _SECP256K1_HASH_\n+\n+#include <stdlib.h>\n+#include <stdint.h>\n+\n+typedef struct {\n+    uint32_t s[32];\n+    unsigned char buf[64];\n+    size_t bytes;\n+} secp256k1_sha256_t;\n+\n+static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash);\n+static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t size);\n+static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32);\n+\n+typedef struct {\n+    secp256k1_sha256_t inner, outer;\n+} secp256k1_hmac_sha256_t;\n+\n+static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t size);\n+static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size);\n+static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32);\n+\n+typedef struct {\n+    unsigned char v[32];\n+    unsigned char k[32];\n+    int retry;\n+} secp256k1_rfc6979_hmac_sha256_t;\n+\n+static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen);\n+static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen);\n+static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng);\n+\n+#endif"
      },
      {
        "sha": "f35c5f7a8219d46a623b94a48b794d4ea51a7207",
        "filename": "src/hash_impl.h",
        "status": "added",
        "additions": 291,
        "deletions": 0,
        "changes": 291,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/hash_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/hash_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash_impl.h?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -0,0 +1,291 @@\n+/**********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_HASH_IMPL_H_\n+#define _SECP256K1_HASH_IMPL_H_\n+\n+#include \"hash.h\"\n+\n+#include <stdlib.h>\n+#include <stdint.h>\n+\n+#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))\n+#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))\n+#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))\n+#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))\n+#define sigma0(x) (((x) >> 7 | (x) << 25) ^ ((x) >> 18 | (x) << 14) ^ ((x) >> 3))\n+#define sigma1(x) (((x) >> 17 | (x) << 15) ^ ((x) >> 19 | (x) << 13) ^ ((x) >> 10))\n+\n+#define Round(a,b,c,d,e,f,g,h,k,w) do { \\\n+    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \\\n+    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \\\n+    (d) += t1; \\\n+    (h) = t1 + t2; \\\n+} while(0)\n+\n+#define ReadBE32(p) (((uint32_t)((p)[0])) << 24 | ((uint32_t)((p)[1])) << 16 | ((uint32_t)((p)[2])) << 8 | ((uint32_t)((p)[3])))\n+#define WriteBE32(p, v) do { (p)[0] = (v) >> 24; (p)[1] = (v) >> 16; (p)[2] = (v) >> 8; (p)[3] = (v); } while(0)\n+\n+static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash) {\n+    hash->s[0] = 0x6a09e667ul;\n+    hash->s[1] = 0xbb67ae85ul;\n+    hash->s[2] = 0x3c6ef372ul;\n+    hash->s[3] = 0xa54ff53aul;\n+    hash->s[4] = 0x510e527ful;\n+    hash->s[5] = 0x9b05688cul;\n+    hash->s[6] = 0x1f83d9abul;\n+    hash->s[7] = 0x5be0cd19ul;\n+    hash->bytes = 0;\n+}\n+\n+/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n+static void secp256k1_sha256_transform(uint32_t* s, const unsigned char* chunk) {\n+    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n+    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n+    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+\n+    s[0] += a;\n+    s[1] += b;\n+    s[2] += c;\n+    s[3] += d;\n+    s[4] += e;\n+    s[5] += f;\n+    s[6] += g;\n+    s[7] += h;\n+}\n+\n+static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t len) {\n+    const unsigned char* end = data + len;\n+    size_t bufsize = hash->bytes % 64;\n+    if (bufsize && bufsize + len >= 64) {\n+        // Fill the buffer, and process it.\n+        memcpy(hash->buf + bufsize, data, 64 - bufsize);\n+        hash->bytes += 64 - bufsize;\n+        data += 64 - bufsize;\n+        secp256k1_sha256_transform(hash->s, hash->buf);\n+        bufsize = 0;\n+    }\n+    while (end >= data + 64) {\n+        // Process full chunks directly from the source.\n+        secp256k1_sha256_transform(hash->s, data);\n+        hash->bytes += 64;\n+        data += 64;\n+    }\n+    if (end > data) {\n+        // Fill the buffer with what remains.\n+        memcpy(hash->buf + bufsize, data, end - data);\n+        hash->bytes += end - data;\n+    }\n+}\n+\n+static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32) {\n+    static const unsigned char pad[64] = {0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n+    unsigned char sizedesc[8];\n+    WriteBE32(sizedesc, hash->bytes >> 29);\n+    WriteBE32(sizedesc + 4, hash->bytes << 3);\n+    secp256k1_sha256_write(hash, pad, 1 + ((119 - (hash->bytes % 64)) % 64));\n+    secp256k1_sha256_write(hash, sizedesc, 8);\n+    WriteBE32(out32, hash->s[0]);\n+    hash->s[0] = 0;\n+    WriteBE32(out32 + 4, hash->s[1]);\n+    hash->s[1] = 0;\n+    WriteBE32(out32 + 8, hash->s[2]);\n+    hash->s[2] = 0;\n+    WriteBE32(out32 + 12, hash->s[3]);\n+    hash->s[3] = 0;\n+    WriteBE32(out32 + 16, hash->s[4]);\n+    hash->s[4] = 0;\n+    WriteBE32(out32 + 20, hash->s[5]);\n+    hash->s[5] = 0;\n+    WriteBE32(out32 + 24, hash->s[6]);\n+    hash->s[6] = 0;\n+    WriteBE32(out32 + 28, hash->s[7]);\n+    hash->s[7] = 0;\n+}\n+\n+static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t keylen) {\n+    unsigned char rkey[64];\n+    if (keylen <= 64) {\n+        memcpy(rkey, key, keylen);\n+        memset(rkey + keylen, 0, 64 - keylen);\n+    } else {\n+        secp256k1_sha256_t sha256;\n+        secp256k1_sha256_initialize(&sha256);\n+        secp256k1_sha256_write(&sha256, key, keylen);\n+        secp256k1_sha256_finalize(&sha256, rkey);\n+        memset(rkey + 32, 0, 32);\n+    }\n+\n+    secp256k1_sha256_initialize(&hash->outer);\n+    for (int n = 0; n < 64; n++)\n+        rkey[n] ^= 0x5c;\n+    secp256k1_sha256_write(&hash->outer, rkey, 64);\n+\n+    secp256k1_sha256_initialize(&hash->inner);\n+    for (int n = 0; n < 64; n++)\n+        rkey[n] ^= 0x5c ^ 0x36;\n+    secp256k1_sha256_write(&hash->inner, rkey, 64);\n+    memset(rkey, 0, 64);\n+}\n+\n+static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size) {\n+    secp256k1_sha256_write(&hash->inner, data, size);\n+}\n+\n+static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32) {\n+    unsigned char temp[32];\n+    secp256k1_sha256_finalize(&hash->inner, temp);\n+    secp256k1_sha256_write(&hash->outer, temp, 32);\n+    memset(temp, 0, 32);\n+    secp256k1_sha256_finalize(&hash->outer, out32);\n+}\n+\n+\n+static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen) {\n+    static const unsigned char zero[1] = {0x00};\n+    static const unsigned char one[1] = {0x01};\n+\n+    memset(rng->v, 0x01, 32);\n+    memset(rng->k, 0x00, 32);\n+\n+    secp256k1_hmac_sha256_t hmac;\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_write(&hmac, zero, 1);\n+    secp256k1_hmac_sha256_write(&hmac, key, keylen);\n+    secp256k1_hmac_sha256_write(&hmac, msg, msglen);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_write(&hmac, one, 1);\n+    secp256k1_hmac_sha256_write(&hmac, key, keylen);\n+    secp256k1_hmac_sha256_write(&hmac, msg, msglen);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+    rng->retry = 0;\n+}\n+\n+static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen) {\n+    static const unsigned char zero[1] = {0x00};\n+    if (rng->retry) {\n+        secp256k1_hmac_sha256_t hmac;\n+        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+        secp256k1_hmac_sha256_write(&hmac, zero, 1);\n+        secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n+        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+        secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+    }\n+\n+    while (outlen > 0) {\n+        secp256k1_hmac_sha256_t hmac;\n+        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+        secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+        int now = outlen;\n+        if (now > 32) {\n+            now = 32;\n+        }\n+        memcpy(out, rng->v, now);\n+        out += now;\n+        outlen -= now;\n+    }\n+\n+    rng->retry = 1;\n+}\n+\n+static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng) {\n+    memset(rng->k, 0, 32);\n+    memset(rng->v, 0, 32);\n+    rng->retry = 0;\n+}\n+\n+\n+#undef Round\n+#undef sigma0\n+#undef sigma1\n+#undef Sigma0\n+#undef Sigma1\n+#undef Ch\n+#undef Maj\n+#undef ReadBE32\n+#undef WriteBE32\n+\n+#endif"
      },
      {
        "sha": "58bcd8d009e9156f8516e5f466a417003154e8ab",
        "filename": "src/secp256k1.c",
        "status": "modified",
        "additions": 58,
        "deletions": 15,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/secp256k1.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/secp256k1.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1.c?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -17,6 +17,7 @@\n #include \"ecmult_gen_impl.h\"\n #include \"ecdsa_impl.h\"\n #include \"eckey_impl.h\"\n+#include \"hash_impl.h\"\n \n void secp256k1_start(unsigned int flags) {\n     secp256k1_fe_start();\n@@ -69,49 +70,91 @@ int secp256k1_ecdsa_verify(const unsigned char *msg32, const unsigned char *sig,\n     return ret;\n }\n \n-int secp256k1_ecdsa_sign(const unsigned char *msg32, unsigned char *signature, int *signaturelen, const unsigned char *seckey, const unsigned char *nonce) {\n+static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+   (void)data;\n+   secp256k1_rfc6979_hmac_sha256_t rng;\n+   secp256k1_rfc6979_hmac_sha256_initialize(&rng, key32, 32, msg32, 32);\n+   for (unsigned int i = 0; i <= counter; i++) {\n+       secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);\n+   }\n+   secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+   return 1;\n+}\n+\n+const secp256k1_nonce_function_t secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;\n+const secp256k1_nonce_function_t secp256k1_nonce_function_default = nonce_function_rfc6979;\n+\n+int secp256k1_ecdsa_sign(const unsigned char *msg32, unsigned char *signature, int *signaturelen, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata) {\n     DEBUG_CHECK(secp256k1_ecmult_gen_consts != NULL);\n     DEBUG_CHECK(msg32 != NULL);\n     DEBUG_CHECK(signature != NULL);\n     DEBUG_CHECK(signaturelen != NULL);\n     DEBUG_CHECK(seckey != NULL);\n-    DEBUG_CHECK(nonce != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n \n     secp256k1_scalar_t sec, non, msg;\n     secp256k1_scalar_set_b32(&sec, seckey, NULL);\n-    int overflow = 0;\n-    secp256k1_scalar_set_b32(&non, nonce, &overflow);\n     secp256k1_scalar_set_b32(&msg, msg32, NULL);\n-    int ret = !secp256k1_scalar_is_zero(&non) && !overflow;\n+    int overflow = 0;\n+    int ret = 0;\n+    unsigned int count = 0;\n     secp256k1_ecdsa_sig_t sig;\n-    if (ret) {\n-        ret = secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, NULL);\n+    while (1) {\n+        unsigned char nonce32[32];\n+        ret = noncefp(nonce32, msg32, seckey, count, noncedata);\n+        if (!ret) {\n+            break;\n+        }\n+        secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+        memset(nonce32, 0, 32);\n+        if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n+            if (secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, NULL)) {\n+                break;\n+            }\n+        }\n+        count++;\n     }\n     if (ret) {\n-        secp256k1_ecdsa_sig_serialize(signature, signaturelen, &sig);\n+        ret = secp256k1_ecdsa_sig_serialize(signature, signaturelen, &sig);\n     }\n     secp256k1_scalar_clear(&msg);\n     secp256k1_scalar_clear(&non);\n     secp256k1_scalar_clear(&sec);\n     return ret;\n }\n \n-int secp256k1_ecdsa_sign_compact(const unsigned char *msg32, unsigned char *sig64, const unsigned char *seckey, const unsigned char *nonce, int *recid) {\n+int secp256k1_ecdsa_sign_compact(const unsigned char *msg32, unsigned char *sig64, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata, int *recid) {\n     DEBUG_CHECK(secp256k1_ecmult_gen_consts != NULL);\n     DEBUG_CHECK(msg32 != NULL);\n     DEBUG_CHECK(sig64 != NULL);\n     DEBUG_CHECK(seckey != NULL);\n-    DEBUG_CHECK(nonce != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n \n     secp256k1_scalar_t sec, non, msg;\n     secp256k1_scalar_set_b32(&sec, seckey, NULL);\n-    int overflow = 0;\n-    secp256k1_scalar_set_b32(&non, nonce, &overflow);\n     secp256k1_scalar_set_b32(&msg, msg32, NULL);\n-    int ret = !secp256k1_scalar_is_zero(&non) && !overflow;\n+    int overflow = 0;\n+    int ret = 0;\n+    unsigned int count = 0;\n     secp256k1_ecdsa_sig_t sig;\n-    if (ret) {\n-        ret = secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, recid);\n+    while (1) {\n+        unsigned char nonce32[32];\n+        ret = noncefp(nonce32, msg32, seckey, count, noncedata);\n+        if (!ret) {\n+            break;\n+        }\n+        secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+        memset(nonce32, 0, 32);\n+        if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n+            if (secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, recid)) {\n+                break;\n+            }\n+        }\n+        count++;\n     }\n     if (ret) {\n         secp256k1_scalar_get_b32(sig64, &sig.r);"
      },
      {
        "sha": "cff32f1d06872a41b135de5766d4590b37d84388",
        "filename": "src/tests.c",
        "status": "modified",
        "additions": 382,
        "deletions": 120,
        "changes": 502,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/tests.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7873633b5752621548b8d38fc175f5a5f2f1e5d6/src/tests.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tests.c?ref=7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "patch": "@@ -36,12 +36,19 @@ void random_field_element_test(secp256k1_fe_t *fe) {\n }\n \n void random_field_element_magnitude(secp256k1_fe_t *fe) {\n+    int n = secp256k1_rand32() % 9;\n     secp256k1_fe_normalize(fe);\n-    int n = secp256k1_rand32() % 4;\n-    for (int i = 0; i < n; i++) {\n-        secp256k1_fe_negate(fe, fe, 1 + 2*i);\n-        secp256k1_fe_negate(fe, fe, 2 + 2*i);\n+    if (n == 0) {\n+        return;\n     }\n+    secp256k1_fe_t zero;\n+    secp256k1_fe_clear(&zero);\n+    secp256k1_fe_negate(&zero, &zero, 0);\n+    secp256k1_fe_mul_int(&zero, n - 1);\n+    secp256k1_fe_add(fe, &zero);\n+#ifdef VERIFY\n+    CHECK(fe->magnitude == n);\n+#endif\n }\n \n void random_group_element_test(secp256k1_ge_t *ge) {\n@@ -91,6 +98,121 @@ void random_scalar_order(secp256k1_scalar_t *num) {\n     } while(1);\n }\n \n+/***** HASH TESTS *****/\n+\n+void run_sha256_tests(void) {\n+    static const char *inputs[8] = {\n+        \"\", \"abc\", \"message digest\", \"secure hash algorithm\", \"SHA256 is considered to be safe\",\n+        \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",\n+        \"For this sample, this 63-byte string will be used as input data\",\n+        \"This is exactly 64 bytes long, not counting the terminating byte\"\n+    };\n+    static const unsigned char outputs[8][32] = {\n+        {0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55},\n+        {0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea, 0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23, 0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c, 0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad},\n+        {0xf7, 0x84, 0x6f, 0x55, 0xcf, 0x23, 0xe1, 0x4e, 0xeb, 0xea, 0xb5, 0xb4, 0xe1, 0x55, 0x0c, 0xad, 0x5b, 0x50, 0x9e, 0x33, 0x48, 0xfb, 0xc4, 0xef, 0xa3, 0xa1, 0x41, 0x3d, 0x39, 0x3c, 0xb6, 0x50},\n+        {0xf3, 0x0c, 0xeb, 0x2b, 0xb2, 0x82, 0x9e, 0x79, 0xe4, 0xca, 0x97, 0x53, 0xd3, 0x5a, 0x8e, 0xcc, 0x00, 0x26, 0x2d, 0x16, 0x4c, 0xc0, 0x77, 0x08, 0x02, 0x95, 0x38, 0x1c, 0xbd, 0x64, 0x3f, 0x0d},\n+        {0x68, 0x19, 0xd9, 0x15, 0xc7, 0x3f, 0x4d, 0x1e, 0x77, 0xe4, 0xe1, 0xb5, 0x2d, 0x1f, 0xa0, 0xf9, 0xcf, 0x9b, 0xea, 0xea, 0xd3, 0x93, 0x9f, 0x15, 0x87, 0x4b, 0xd9, 0x88, 0xe2, 0xa2, 0x36, 0x30},\n+        {0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39, 0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1},\n+        {0xf0, 0x8a, 0x78, 0xcb, 0xba, 0xee, 0x08, 0x2b, 0x05, 0x2a, 0xe0, 0x70, 0x8f, 0x32, 0xfa, 0x1e, 0x50, 0xc5, 0xc4, 0x21, 0xaa, 0x77, 0x2b, 0xa5, 0xdb, 0xb4, 0x06, 0xa2, 0xea, 0x6b, 0xe3, 0x42},\n+        {0xab, 0x64, 0xef, 0xf7, 0xe8, 0x8e, 0x2e, 0x46, 0x16, 0x5e, 0x29, 0xf2, 0xbc, 0xe4, 0x18, 0x26, 0xbd, 0x4c, 0x7b, 0x35, 0x52, 0xf6, 0xb3, 0x82, 0xa9, 0xe7, 0xd3, 0xaf, 0x47, 0xc2, 0x45, 0xf8}\n+    };\n+    for (int i = 0; i < 8; i++) {\n+        secp256k1_sha256_t hasher;\n+        secp256k1_sha256_initialize(&hasher);\n+        secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i]), strlen(inputs[i]));\n+        unsigned char out[32];\n+        secp256k1_sha256_finalize(&hasher, out);\n+        CHECK(memcmp(out, outputs[i], 32) == 0);\n+        if (strlen(inputs[i]) > 0) {\n+            secp256k1_sha256_initialize(&hasher);\n+            int split = secp256k1_rand32() % strlen(inputs[i]);\n+            secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i]), split);\n+            secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i] + split), strlen(inputs[i]) - split);\n+            secp256k1_sha256_finalize(&hasher, out);\n+            CHECK(memcmp(out, outputs[i], 32) == 0);\n+        }\n+    }\n+}\n+\n+void run_hmac_sha256_tests(void) {\n+    static const char *keys[6] = {\n+        \"\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\",\n+        \"\\x4a\\x65\\x66\\x65\",\n+        \"\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\",\n+        \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\",\n+        \"\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\",\n+        \"\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\"\n+    };\n+    static const char *inputs[6] = {\n+        \"\\x48\\x69\\x20\\x54\\x68\\x65\\x72\\x65\",\n+        \"\\x77\\x68\\x61\\x74\\x20\\x64\\x6f\\x20\\x79\\x61\\x20\\x77\\x61\\x6e\\x74\\x20\\x66\\x6f\\x72\\x20\\x6e\\x6f\\x74\\x68\\x69\\x6e\\x67\\x3f\",\n+        \"\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\",\n+        \"\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\",\n+        \"\\x54\\x65\\x73\\x74\\x20\\x55\\x73\\x69\\x6e\\x67\\x20\\x4c\\x61\\x72\\x67\\x65\\x72\\x20\\x54\\x68\\x61\\x6e\\x20\\x42\\x6c\\x6f\\x63\\x6b\\x2d\\x53\\x69\\x7a\\x65\\x20\\x4b\\x65\\x79\\x20\\x2d\\x20\\x48\\x61\\x73\\x68\\x20\\x4b\\x65\\x79\\x20\\x46\\x69\\x72\\x73\\x74\",\n+        \"\\x54\\x68\\x69\\x73\\x20\\x69\\x73\\x20\\x61\\x20\\x74\\x65\\x73\\x74\\x20\\x75\\x73\\x69\\x6e\\x67\\x20\\x61\\x20\\x6c\\x61\\x72\\x67\\x65\\x72\\x20\\x74\\x68\\x61\\x6e\\x20\\x62\\x6c\\x6f\\x63\\x6b\\x2d\\x73\\x69\\x7a\\x65\\x20\\x6b\\x65\\x79\\x20\\x61\\x6e\\x64\\x20\\x61\\x20\\x6c\\x61\\x72\\x67\\x65\\x72\\x20\\x74\\x68\\x61\\x6e\\x20\\x62\\x6c\\x6f\\x63\\x6b\\x2d\\x73\\x69\\x7a\\x65\\x20\\x64\\x61\\x74\\x61\\x2e\\x20\\x54\\x68\\x65\\x20\\x6b\\x65\\x79\\x20\\x6e\\x65\\x65\\x64\\x73\\x20\\x74\\x6f\\x20\\x62\\x65\\x20\\x68\\x61\\x73\\x68\\x65\\x64\\x20\\x62\\x65\\x66\\x6f\\x72\\x65\\x20\\x62\\x65\\x69\\x6e\\x67\\x20\\x75\\x73\\x65\\x64\\x20\\x62\\x79\\x20\\x74\\x68\\x65\\x20\\x48\\x4d\\x41\\x43\\x20\\x61\\x6c\\x67\\x6f\\x72\\x69\\x74\\x68\\x6d\\x2e\"\n+    };\n+    static const unsigned char outputs[6][32] = {\n+        {0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53, 0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b, 0xf1, 0x2b, 0x88, 0x1d, 0xc2, 0x00, 0xc9, 0x83, 0x3d, 0xa7, 0x26, 0xe9, 0x37, 0x6c, 0x2e, 0x32, 0xcf, 0xf7},\n+        {0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e, 0x6a, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75, 0xc7, 0x5a, 0x00, 0x3f, 0x08, 0x9d, 0x27, 0x39, 0x83, 0x9d, 0xec, 0x58, 0xb9, 0x64, 0xec, 0x38, 0x43},\n+        {0x77, 0x3e, 0xa9, 0x1e, 0x36, 0x80, 0x0e, 0x46, 0x85, 0x4d, 0xb8, 0xeb, 0xd0, 0x91, 0x81, 0xa7, 0x29, 0x59, 0x09, 0x8b, 0x3e, 0xf8, 0xc1, 0x22, 0xd9, 0x63, 0x55, 0x14, 0xce, 0xd5, 0x65, 0xfe},\n+        {0x82, 0x55, 0x8a, 0x38, 0x9a, 0x44, 0x3c, 0x0e, 0xa4, 0xcc, 0x81, 0x98, 0x99, 0xf2, 0x08, 0x3a, 0x85, 0xf0, 0xfa, 0xa3, 0xe5, 0x78, 0xf8, 0x07, 0x7a, 0x2e, 0x3f, 0xf4, 0x67, 0x29, 0x66, 0x5b},\n+        {0x60, 0xe4, 0x31, 0x59, 0x1e, 0xe0, 0xb6, 0x7f, 0x0d, 0x8a, 0x26, 0xaa, 0xcb, 0xf5, 0xb7, 0x7f, 0x8e, 0x0b, 0xc6, 0x21, 0x37, 0x28, 0xc5, 0x14, 0x05, 0x46, 0x04, 0x0f, 0x0e, 0xe3, 0x7f, 0x54},\n+        {0x9b, 0x09, 0xff, 0xa7, 0x1b, 0x94, 0x2f, 0xcb, 0x27, 0x63, 0x5f, 0xbc, 0xd5, 0xb0, 0xe9, 0x44, 0xbf, 0xdc, 0x63, 0x64, 0x4f, 0x07, 0x13, 0x93, 0x8a, 0x7f, 0x51, 0x53, 0x5c, 0x3a, 0x35, 0xe2}\n+    };\n+    for (int i = 0; i < 6; i++) {\n+        secp256k1_hmac_sha256_t hasher;\n+        secp256k1_hmac_sha256_initialize(&hasher, (const unsigned char*)(keys[i]), strlen(keys[i]));\n+        secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i]), strlen(inputs[i]));\n+        unsigned char out[32];\n+        secp256k1_hmac_sha256_finalize(&hasher, out);\n+        CHECK(memcmp(out, outputs[i], 32) == 0);\n+        if (strlen(inputs[i]) > 0) {\n+            secp256k1_hmac_sha256_initialize(&hasher, (const unsigned char*)(keys[i]), strlen(keys[i]));\n+            int split = secp256k1_rand32() % strlen(inputs[i]);\n+            secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i]), split);\n+            secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i] + split), strlen(inputs[i]) - split);\n+            secp256k1_hmac_sha256_finalize(&hasher, out);\n+            CHECK(memcmp(out, outputs[i], 32) == 0);\n+        }\n+    }\n+}\n+\n+void run_rfc6979_hmac_sha256_tests(void) {\n+    static const unsigned char key1[32] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x00};\n+    static const unsigned char msg1[32] = {0x4b, 0xf5, 0x12, 0x2f, 0x34, 0x45, 0x54, 0xc5, 0x3b, 0xde, 0x2e, 0xbb, 0x8c, 0xd2, 0xb7, 0xe3, 0xd1, 0x60, 0x0a, 0xd6, 0x31, 0xc3, 0x85, 0xa5, 0xd7, 0xcc, 0xe2, 0x3c, 0x77, 0x85, 0x45, 0x9a};\n+    static const unsigned char out1[3][32] = {\n+        {0x4f, 0xe2, 0x95, 0x25, 0xb2, 0x08, 0x68, 0x09, 0x15, 0x9a, 0xcd, 0xf0, 0x50, 0x6e, 0xfb, 0x86, 0xb0, 0xec, 0x93, 0x2c, 0x7b, 0xa4, 0x42, 0x56, 0xab, 0x32, 0x1e, 0x42, 0x1e, 0x67, 0xe9, 0xfb},\n+        {0x2b, 0xf0, 0xff, 0xf1, 0xd3, 0xc3, 0x78, 0xa2, 0x2d, 0xc5, 0xde, 0x1d, 0x85, 0x65, 0x22, 0x32, 0x5c, 0x65, 0xb5, 0x04, 0x49, 0x1a, 0x0c, 0xbd, 0x01, 0xcb, 0x8f, 0x3a, 0xa6, 0x7f, 0xfd, 0x4a},\n+        {0xf5, 0x28, 0xb4, 0x10, 0xcb, 0x54, 0x1f, 0x77, 0x00, 0x0d, 0x7a, 0xfb, 0x6c, 0x5b, 0x53, 0xc5, 0xc4, 0x71, 0xea, 0xb4, 0x3e, 0x46, 0x6d, 0x9a, 0xc5, 0x19, 0x0c, 0x39, 0xc8, 0x2f, 0xd8, 0x2e}\n+    };\n+\n+    static const unsigned char key2[32] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};\n+    static const unsigned char msg2[32] = {0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};\n+    static const unsigned char out2[3][32] = {\n+        {0x9c, 0x23, 0x6c, 0x16, 0x5b, 0x82, 0xae, 0x0c, 0xd5, 0x90, 0x65, 0x9e, 0x10, 0x0b, 0x6b, 0xab, 0x30, 0x36, 0xe7, 0xba, 0x8b, 0x06, 0x74, 0x9b, 0xaf, 0x69, 0x81, 0xe1, 0x6f, 0x1a, 0x2b, 0x95},\n+        {0xdf, 0x47, 0x10, 0x61, 0x62, 0x5b, 0xc0, 0xea, 0x14, 0xb6, 0x82, 0xfe, 0xee, 0x2c, 0x9c, 0x02, 0xf2, 0x35, 0xda, 0x04, 0x20, 0x4c, 0x1d, 0x62, 0xa1, 0x53, 0x6c, 0x6e, 0x17, 0xae, 0xd7, 0xa9},\n+        {0x75, 0x97, 0x88, 0x7c, 0xbd, 0x76, 0x32, 0x1f, 0x32, 0xe3, 0x04, 0x40, 0x67, 0x9a, 0x22, 0xcf, 0x7f, 0x8d, 0x9d, 0x2e, 0xac, 0x39, 0x0e, 0x58, 0x1f, 0xea, 0x09, 0x1c, 0xe2, 0x02, 0xba, 0x94}\n+    };\n+\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+    unsigned char out[32];\n+\n+    secp256k1_rfc6979_hmac_sha256_initialize(&rng, key1, 32, msg1, 32);\n+    for (int i = 0; i < 3; i++) {\n+        secp256k1_rfc6979_hmac_sha256_generate(&rng, out, 32);\n+        CHECK(memcmp(out, out1[i], 32) == 0);\n+    }\n+    secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+\n+    secp256k1_rfc6979_hmac_sha256_initialize(&rng, key2, 32, msg2, 32);\n+    for (int i = 0; i < 3; i++) {\n+        secp256k1_rfc6979_hmac_sha256_generate(&rng, out, 32);\n+        CHECK(memcmp(out, out2[i], 32) == 0);\n+    }\n+    secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+}\n+\n /***** NUM TESTS *****/\n \n #ifndef USE_NUM_NONE\n@@ -494,9 +616,9 @@ void random_fe_non_square(secp256k1_fe_t *ns) {\n }\n \n int check_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-    secp256k1_fe_t an = *a; secp256k1_fe_normalize(&an);\n+    secp256k1_fe_t an = *a; secp256k1_fe_normalize_weak(&an);\n     secp256k1_fe_t bn = *b; secp256k1_fe_normalize_var(&bn);\n-    return secp256k1_fe_equal(&an, &bn);\n+    return secp256k1_fe_equal_var(&an, &bn);\n }\n \n int check_fe_inverse(const secp256k1_fe_t *a, const secp256k1_fe_t *ai) {\n@@ -523,16 +645,16 @@ void run_field_misc(void) {\n         random_fe_non_zero(&y);\n         /* Test the fe equality and comparison operations. */\n         CHECK(secp256k1_fe_cmp_var(&x, &x) == 0);\n-        CHECK(secp256k1_fe_equal(&x, &x));\n+        CHECK(secp256k1_fe_equal_var(&x, &x));\n         z = x;\n         secp256k1_fe_add(&z,&y);\n         secp256k1_fe_normalize(&z);\n         /* Test the conditional move. */\n         secp256k1_fe_cmov(&z, &x, 0);\n-        CHECK(secp256k1_fe_equal(&x, &z) == 0);\n+        CHECK(secp256k1_fe_equal_var(&x, &z) == 0);\n         CHECK(secp256k1_fe_cmp_var(&x, &z) != 0);\n         secp256k1_fe_cmov(&y, &x, 1);\n-        CHECK(secp256k1_fe_equal(&x, &y));\n+        CHECK(secp256k1_fe_equal_var(&x, &y));\n         /* Test that mul_int, mul, and add agree. */\n         secp256k1_fe_add(&y, &x);\n         secp256k1_fe_add(&y, &x);\n@@ -656,108 +778,148 @@ void run_sqrt(void) {\n \n /***** GROUP TESTS *****/\n \n-int ge_equals_ge(const secp256k1_ge_t *a, const secp256k1_ge_t *b) {\n-    if (a->infinity && b->infinity)\n-        return 1;\n-    return check_fe_equal(&a->x, &b->x) && check_fe_equal(&a->y, &b->y);\n+void ge_equals_ge(const secp256k1_ge_t *a, const secp256k1_ge_t *b) {\n+    CHECK(a->infinity == b->infinity);\n+    if (a->infinity)\n+        return;\n+    CHECK(secp256k1_fe_equal_var(&a->x, &b->x));\n+    CHECK(secp256k1_fe_equal_var(&b->y, &b->y));\n }\n \n void ge_equals_gej(const secp256k1_ge_t *a, const secp256k1_gej_t *b) {\n-    secp256k1_ge_t bb;\n-    secp256k1_gej_t bj = *b;\n-    secp256k1_ge_set_gej_var(&bb, &bj);\n-    CHECK(ge_equals_ge(a, &bb));\n-}\n-\n-void gej_equals_gej(const secp256k1_gej_t *a, const secp256k1_gej_t *b) {\n-    secp256k1_ge_t aa, bb;\n-    secp256k1_gej_t aj = *a, bj = *b;\n-    secp256k1_ge_set_gej_var(&aa, &aj);\n-    secp256k1_ge_set_gej_var(&bb, &bj);\n-    CHECK(ge_equals_ge(&aa, &bb));\n+    CHECK(a->infinity == b->infinity);\n+    if (a->infinity)\n+        return;\n+    /* Check a.x * b.z^2 == b.x && a.y * b.z^3 == b.y, to avoid inverses. */\n+    secp256k1_fe_t z2s;\n+    secp256k1_fe_sqr(&z2s, &b->z);\n+    secp256k1_fe_t u1, u2, s1, s2;\n+    secp256k1_fe_mul(&u1, &a->x, &z2s);\n+    u2 = b->x; secp256k1_fe_normalize_weak(&u2);\n+    secp256k1_fe_mul(&s1, &a->y, &z2s); secp256k1_fe_mul(&s1, &s1, &b->z);\n+    s2 = b->y; secp256k1_fe_normalize_weak(&s2);\n+    CHECK(secp256k1_fe_equal_var(&u1, &u2));\n+    CHECK(secp256k1_fe_equal_var(&s1, &s2));\n }\n \n void test_ge(void) {\n-    char ca[135];\n-    char cb[68];\n-    int rlen;\n-    secp256k1_ge_t a, b, i, n;\n-    random_group_element_test(&a);\n-    random_group_element_test(&b);\n-    rlen = sizeof(ca);\n-    secp256k1_ge_get_hex(ca,&rlen,&a);\n-    CHECK(rlen > 4 && rlen <= (int)sizeof(ca));\n-    rlen = sizeof(cb);\n-    secp256k1_ge_get_hex(cb,&rlen,&b); /* Intentionally undersized buffer. */\n-    n = a;\n-    secp256k1_fe_normalize(&a.y);\n-    secp256k1_fe_negate(&n.y, &a.y, 1);\n-    secp256k1_ge_set_infinity(&i);\n-    random_field_element_magnitude(&a.x);\n-    random_field_element_magnitude(&a.y);\n-    random_field_element_magnitude(&b.x);\n-    random_field_element_magnitude(&b.y);\n-    random_field_element_magnitude(&n.x);\n-    random_field_element_magnitude(&n.y);\n-\n-    secp256k1_gej_t aj, bj, ij, nj;\n-    random_group_element_jacobian_test(&aj, &a);\n-    random_group_element_jacobian_test(&bj, &b);\n-    secp256k1_gej_set_infinity(&ij);\n-    random_group_element_jacobian_test(&nj, &n);\n-    random_field_element_magnitude(&aj.x);\n-    random_field_element_magnitude(&aj.y);\n-    random_field_element_magnitude(&aj.z);\n-    random_field_element_magnitude(&bj.x);\n-    random_field_element_magnitude(&bj.y);\n-    random_field_element_magnitude(&bj.z);\n-    random_field_element_magnitude(&nj.x);\n-    random_field_element_magnitude(&nj.y);\n-    random_field_element_magnitude(&nj.z);\n-\n-    /* gej + gej adds */\n-    secp256k1_gej_t aaj; secp256k1_gej_add_var(&aaj, &aj, &aj);\n-    secp256k1_gej_t abj; secp256k1_gej_add_var(&abj, &aj, &bj);\n-    secp256k1_gej_t aij; secp256k1_gej_add_var(&aij, &aj, &ij);\n-    secp256k1_gej_t anj; secp256k1_gej_add_var(&anj, &aj, &nj);\n-    secp256k1_gej_t iaj; secp256k1_gej_add_var(&iaj, &ij, &aj);\n-    secp256k1_gej_t iij; secp256k1_gej_add_var(&iij, &ij, &ij);\n-\n-    /* gej + ge adds */\n-    secp256k1_gej_t aa; secp256k1_gej_add_ge_var(&aa, &aj, &a);\n-    secp256k1_gej_t ab; secp256k1_gej_add_ge_var(&ab, &aj, &b);\n-    secp256k1_gej_t ai; secp256k1_gej_add_ge_var(&ai, &aj, &i);\n-    secp256k1_gej_t an; secp256k1_gej_add_ge_var(&an, &aj, &n);\n-    secp256k1_gej_t ia; secp256k1_gej_add_ge_var(&ia, &ij, &a);\n-    secp256k1_gej_t ii; secp256k1_gej_add_ge_var(&ii, &ij, &i);\n-\n-    /* const gej + ge adds */\n-    secp256k1_gej_t aac; secp256k1_gej_add_ge(&aac, &aj, &a);\n-    secp256k1_gej_t abc; secp256k1_gej_add_ge(&abc, &aj, &b);\n-    secp256k1_gej_t anc; secp256k1_gej_add_ge(&anc, &aj, &n);\n-    secp256k1_gej_t iac; secp256k1_gej_add_ge(&iac, &ij, &a);\n-\n-    CHECK(secp256k1_gej_is_infinity(&an));\n-    CHECK(secp256k1_gej_is_infinity(&anj));\n-    CHECK(secp256k1_gej_is_infinity(&anc));\n-    gej_equals_gej(&aa, &aaj);\n-    gej_equals_gej(&aa, &aac);\n-    gej_equals_gej(&ab, &abj);\n-    gej_equals_gej(&ab, &abc);\n-    gej_equals_gej(&an, &anj);\n-    gej_equals_gej(&an, &anc);\n-    gej_equals_gej(&ia, &iaj);\n-    gej_equals_gej(&ai, &aij);\n-    gej_equals_gej(&ii, &iij);\n-    ge_equals_gej(&a, &ai);\n-    ge_equals_gej(&a, &ai);\n-    ge_equals_gej(&a, &iaj);\n-    ge_equals_gej(&a, &iaj);\n-    ge_equals_gej(&a, &iac);\n+    int runs = 4;\n+    /* Points: (infinity, p1, p1, -p1, -p1, p2, p2, -p2, -p2, p3, p3, -p3, -p3, p4, p4, -p4, -p4).\n+     * The second in each pair of identical points uses a random Z coordinate in the Jacobian form.\n+     * All magnitudes are randomized.\n+     * All 17*17 combinations of points are added to eachother, using all applicable methods.\n+     */\n+    secp256k1_ge_t *ge = malloc(sizeof(secp256k1_ge_t) * (1 + 4 * runs));\n+    secp256k1_gej_t *gej = malloc(sizeof(secp256k1_gej_t) * (1 + 4 * runs));\n+    secp256k1_gej_set_infinity(&gej[0]);\n+    secp256k1_ge_clear(&ge[0]);\n+    secp256k1_ge_set_gej_var(&ge[0], &gej[0]);\n+    for (int i = 0; i < runs; i++) {\n+        secp256k1_ge_t g;\n+        random_group_element_test(&g);\n+        ge[1 + 4 * i] = g;\n+        ge[2 + 4 * i] = g;\n+        secp256k1_ge_neg(&ge[3 + 4 * i], &g);\n+        secp256k1_ge_neg(&ge[4 + 4 * i], &g);\n+        secp256k1_gej_set_ge(&gej[1 + 4 * i], &ge[1 + 4 * i]);\n+        random_group_element_jacobian_test(&gej[2 + 4 * i], &ge[2 + 4 * i]);\n+        secp256k1_gej_set_ge(&gej[3 + 4 * i], &ge[3 + 4 * i]);\n+        random_group_element_jacobian_test(&gej[4 + 4 * i], &ge[4 + 4 * i]);\n+        for (int j = 0; j < 4; j++) {\n+            random_field_element_magnitude(&ge[1 + j + 4 * i].x);\n+            random_field_element_magnitude(&ge[1 + j + 4 * i].y);\n+            random_field_element_magnitude(&gej[1 + j + 4 * i].x);\n+            random_field_element_magnitude(&gej[1 + j + 4 * i].y);\n+            random_field_element_magnitude(&gej[1 + j + 4 * i].z);\n+        }\n+    }\n+\n+    for (int i1 = 0; i1 < 1 + 4 * runs; i1++) {\n+        for (int i2 = 0; i2 < 1 + 4 * runs; i2++) {\n+            /* Compute reference result using gej + gej (var). */\n+            secp256k1_gej_t refj, resj;\n+            secp256k1_ge_t ref;\n+            secp256k1_gej_add_var(&refj, &gej[i1], &gej[i2]);\n+            secp256k1_ge_set_gej_var(&ref, &refj);\n+\n+            /* Test gej + ge (var). */\n+            secp256k1_gej_add_ge_var(&resj, &gej[i1], &ge[i2]);\n+            ge_equals_gej(&ref, &resj);\n+\n+            /* Test gej + ge (const). */\n+            if (i2 != 0) {\n+                /* secp256k1_gej_add_ge does not support its second argument being infinity. */\n+                secp256k1_gej_add_ge(&resj, &gej[i1], &ge[i2]);\n+                ge_equals_gej(&ref, &resj);\n+            }\n+\n+            /* Test doubling (var). */\n+            if ((i1 == 0 && i2 == 0) || ((i1 + 3)/4 == (i2 + 3)/4 && ((i1 + 3)%4)/2 == ((i2 + 3)%4)/2)) {\n+                /* Normal doubling. */\n+                secp256k1_gej_double_var(&resj, &gej[i1]);\n+                ge_equals_gej(&ref, &resj);\n+                secp256k1_gej_double_var(&resj, &gej[i2]);\n+                ge_equals_gej(&ref, &resj);\n+            }\n+\n+            /* Test adding opposites. */\n+            if ((i1 == 0 && i2 == 0) || ((i1 + 3)/4 == (i2 + 3)/4 && ((i1 + 3)%4)/2 != ((i2 + 3)%4)/2)) {\n+                CHECK(secp256k1_ge_is_infinity(&ref));\n+            }\n+\n+            /* Test adding infinity. */\n+            if (i1 == 0) {\n+                CHECK(secp256k1_ge_is_infinity(&ge[i1]));\n+                CHECK(secp256k1_gej_is_infinity(&gej[i1]));\n+                ge_equals_gej(&ref, &gej[i2]);\n+            }\n+            if (i2 == 0) {\n+                CHECK(secp256k1_ge_is_infinity(&ge[i2]));\n+                CHECK(secp256k1_gej_is_infinity(&gej[i2]));\n+                ge_equals_gej(&ref, &gej[i1]);\n+            }\n+        }\n+    }\n+\n+    /* Test adding all points together in random order equals infinity. */\n+    {\n+        secp256k1_gej_t *gej_shuffled = malloc((4 * runs + 1) * sizeof(secp256k1_gej_t));\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            gej_shuffled[i] = gej[i];\n+        }\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            int swap = i + secp256k1_rand32() % (4 * runs + 1 - i);\n+            if (swap != i) {\n+                secp256k1_gej_t t = gej_shuffled[i];\n+                gej_shuffled[i] = gej_shuffled[swap];\n+                gej_shuffled[swap] = t;\n+            }\n+        }\n+        secp256k1_gej_t sum;\n+        secp256k1_gej_set_infinity(&sum);\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            secp256k1_gej_add_var(&sum, &sum, &gej_shuffled[i]);\n+        }\n+        CHECK(secp256k1_gej_is_infinity(&sum));\n+        free(gej_shuffled);\n+    }\n+\n+    /* Test batch gej -> ge conversion. */\n+    {\n+        secp256k1_ge_t *ge_set_all = malloc((4 * runs + 1) * sizeof(secp256k1_ge_t));\n+        secp256k1_ge_set_all_gej_var(4 * runs + 1, ge_set_all, gej);\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            ge_equals_gej(&ge_set_all[i], &gej[i]);\n+        }\n+        free(ge_set_all);\n+    }\n+\n+    free(ge);\n+    free(gej);\n }\n \n void run_ge(void) {\n-    for (int i = 0; i < 2000*count; i++) {\n+    for (int i = 0; i < count * 32; i++) {\n         test_ge();\n     }\n }\n@@ -949,6 +1111,44 @@ void run_ecdsa_sign_verify(void) {\n     }\n }\n \n+/** Dummy nonce generation function that just uses a precomputed nonce, and fails if it is not accepted. Use only for testing. */\n+static int precomputed_nonce_function(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+    (void)msg32;\n+    (void)key32;\n+    memcpy(nonce32, data, 32);\n+    return (counter == 0);\n+}\n+\n+static int nonce_function_test_fail(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+   /* Dummy nonce generator that has a fatal error on the first counter value. */\n+   if (counter == 0) return 0;\n+   return nonce_function_rfc6979(nonce32, msg32, key32, counter - 1, data);\n+}\n+\n+static int nonce_function_test_retry(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+   /* Dummy nonce generator that produces unacceptable nonces for the first several counter values. */\n+   if (counter < 3) {\n+       memset(nonce32, counter==0 ? 0 : 255, 32);\n+       if (counter == 2) nonce32[31]--;\n+       return 1;\n+   }\n+   if (counter < 5) {\n+       static const unsigned char order[] = {\n+           0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+           0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n+           0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n+           0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x41\n+       };\n+       memcpy(nonce32, order, 32);\n+       if (counter == 4) nonce32[31]++;\n+       return 1;\n+   }\n+   /* Retry rate of 6979 is negligible esp. as we only call this in determinstic tests. */\n+   /* If someone does fine a case where it retries for secp256k1, we'd like to know. */\n+   if (counter > 5) return 0;\n+   return nonce_function_rfc6979(nonce32, msg32, key32, counter - 5, data);\n+}\n+\n void test_ecdsa_end_to_end(void) {\n     unsigned char privkey[32];\n     unsigned char message[32];\n@@ -1006,13 +1206,7 @@ void test_ecdsa_end_to_end(void) {\n \n     /* Sign. */\n     unsigned char signature[72]; int signaturelen = 72;\n-    while(1) {\n-        unsigned char rnd[32];\n-        secp256k1_rand256_test(rnd);\n-        if (secp256k1_ecdsa_sign(message, signature, &signaturelen, privkey, rnd) == 1) {\n-            break;\n-        }\n-    }\n+    CHECK(secp256k1_ecdsa_sign(message, signature, &signaturelen, privkey, NULL, NULL) == 1);\n     /* Verify. */\n     CHECK(secp256k1_ecdsa_verify(message, signature, signaturelen, pubkey, pubkeylen) == 1);\n     /* Destroy signature and verify again. */\n@@ -1021,13 +1215,7 @@ void test_ecdsa_end_to_end(void) {\n \n     /* Compact sign. */\n     unsigned char csignature[64]; int recid = 0;\n-    while(1) {\n-        unsigned char rnd[32];\n-        secp256k1_rand256_test(rnd);\n-        if (secp256k1_ecdsa_sign_compact(message, csignature, privkey, rnd, &recid) == 1) {\n-            break;\n-        }\n-    }\n+    CHECK(secp256k1_ecdsa_sign_compact(message, csignature, privkey, NULL, NULL, &recid) == 1);\n     /* Recover. */\n     unsigned char recpubkey[65]; int recpubkeylen = 0;\n     CHECK(secp256k1_ecdsa_recover_compact(message, csignature, recpubkey, &recpubkeylen, pubkeylen == 33, recid) == 1);\n@@ -1077,7 +1265,7 @@ void test_random_pubkeys(void) {\n         CHECK(secp256k1_eckey_pubkey_serialize(&elem, in, &size, 0));\n         CHECK(size == 65);\n         CHECK(secp256k1_eckey_pubkey_parse(&elem2, in, size));\n-        CHECK(ge_equals_ge(&elem,&elem2));\n+        ge_equals_ge(&elem,&elem2);\n         /* Check that the X9.62 hybrid type is checked. */\n         in[0] = (r & 1) ? 6 : 7;\n         res = secp256k1_eckey_pubkey_parse(&elem2, in, size);\n@@ -1086,7 +1274,7 @@ void test_random_pubkeys(void) {\n             else CHECK(!res);\n         }\n         if (res) {\n-            CHECK(ge_equals_ge(&elem,&elem2));\n+            ge_equals_ge(&elem,&elem2);\n             CHECK(secp256k1_eckey_pubkey_serialize(&elem, out, &size, 0));\n             CHECK(memcmp(&in[1], &out[1], 64) == 0);\n         }\n@@ -1280,6 +1468,12 @@ void test_ecdsa_edge_cases(void) {\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n         };\n+        static const unsigned char nonce2[32] = {\n+            0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n+            0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n+            0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x40\n+        };\n         const unsigned char key[32] = {\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n@@ -1294,10 +1488,74 @@ void test_ecdsa_edge_cases(void) {\n         };\n         unsigned char sig[72];\n         int siglen = 72;\n-        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce) == 0);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) == 0);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce2) == 0);\n         msg[31] = 0xaa;\n         siglen = 72;\n-        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce2) == 1);\n+        siglen = 10;\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) != 1);\n+    }\n+\n+    /* Nonce function corner cases. */\n+    {\n+        unsigned char key[32];\n+        unsigned char msg[32];\n+        unsigned char sig[72];\n+        memset(key, 0, 32);\n+        memset(msg, 0, 32);\n+        key[31] = 1;\n+        msg[31] = 1;\n+        int siglen = 72;\n+        int recid;\n+        /* Nonce function failure results in signature failure. */\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce_function_test_fail, NULL) == 0);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, nonce_function_test_fail, NULL, &recid) == 0);\n+        /* The retry loop successfully makes its way to the first good value. */\n+        unsigned char sig2[72];\n+        int siglen2 = 72;\n+        siglen = 72;\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce_function_test_retry, NULL) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, nonce_function_rfc6979, NULL) == 1);\n+        CHECK((siglen == siglen2) && (memcmp(sig, sig2, siglen) == 0));\n+        int recid2;\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, nonce_function_test_retry, NULL, &recid) == 1);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig2, key, nonce_function_rfc6979, NULL, &recid2) == 1);\n+        CHECK((recid == recid2) && (memcmp(sig, sig2, 64) == 0));\n+        /* The default nonce function is determinstic. */\n+        siglen = 72;\n+        siglen2 = 72;\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, NULL, NULL) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+        CHECK((siglen == siglen2) && (memcmp(sig, sig2, siglen) == 0));\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, NULL, NULL, &recid) == 1);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig2, key, NULL, NULL, &recid2) == 1);\n+        CHECK((recid == recid2) && (memcmp(sig, sig2, 64) == 0));\n+        /* The default nonce function changes output with different messages. */\n+        secp256k1_ecdsa_sig_t s[512];\n+        for(int i=0; i<256; i++) {\n+            siglen2 = 72;\n+            msg[0] = i;\n+            CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+            CHECK(secp256k1_ecdsa_sig_parse(&s[i], sig2, siglen2));\n+            for (int j=0; j<i; j++) {\n+                CHECK(!secp256k1_scalar_eq(&s[i].r, &s[j].r));\n+            }\n+        }\n+        msg[0] = 0;\n+        msg[31] = 2;\n+        /* The default nonce function changes output with different keys. */\n+        for(int i=256; i<512; i++) {\n+            siglen2 = 72;\n+            key[0] = i - 256;\n+            CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+            CHECK(secp256k1_ecdsa_sig_parse(&s[i], sig2, siglen2));\n+            for (int j=0; j<i; j++) {\n+                CHECK(!secp256k1_scalar_eq(&s[i].r, &s[j].r));\n+            }\n+        }\n+        key[0] = 0;\n     }\n \n     /* Privkey export where pubkey is the point at infinity. */\n@@ -1405,6 +1663,10 @@ int main(int argc, char **argv) {\n     secp256k1_scalar_start();\n     secp256k1_ecdsa_start();\n \n+    run_sha256_tests();\n+    run_hmac_sha256_tests();\n+    run_rfc6979_hmac_sha256_tests();\n+\n #ifndef USE_NUM_NONE\n     /* num tests */\n     run_num_smalltests();"
      }
    ]
  },
  {
    "sha": "602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDJlYmY1Mjc5ZDczZjEzZmIxYjJhM2M0ZTc1MDhlYWQ2YWY5MDUx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-05T23:28:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-05T23:28:47Z"
      },
      "message": "Update libsecp256k1",
      "tree": {
        "sha": "91dfccaac67023e6d150e75d9fe260b17731e02f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91dfccaac67023e6d150e75d9fe260b17731e02f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a9576de9dbb1910cb8462e513938d45ef7b5a23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a9576de9dbb1910cb8462e513938d45ef7b5a23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a9576de9dbb1910cb8462e513938d45ef7b5a23"
      },
      {
        "sha": "7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7873633b5752621548b8d38fc175f5a5f2f1e5d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7873633b5752621548b8d38fc175f5a5f2f1e5d6"
      }
    ],
    "stats": {
      "total": 1701,
      "additions": 1172,
      "deletions": 529
    },
    "files": [
      {
        "sha": "b9f7d243ecb491acad0f9493c160bfdd1b636df7",
        "filename": "src/secp256k1/.gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/.gitignore?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -1,6 +1,7 @@\n bench_inv\n bench_sign\n bench_verify\n+bench_recover\n tests\n *.exe\n *.so"
      },
      {
        "sha": "40f8dae23f8b97ffca212bf96391d879f169275e",
        "filename": "src/secp256k1/.travis.yml",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/.travis.yml?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -4,24 +4,22 @@ compiler:\n   - gcc\n install:\n   - sudo apt-get install -qq libssl-dev\n-  - if [ \"$BIGNUM\" = \"gmp\" -o \"$BIGNUM\" = \"auto\" -o \"$FIELD\" = \"gmp\" ]; then sudo apt-get install --no-install-recommends --no-upgrade -qq libgmp-dev; fi\n+  - if [ \"$BIGNUM\" = \"gmp\" -o \"$BIGNUM\" = \"auto\" ]; then sudo apt-get install --no-install-recommends --no-upgrade -qq libgmp-dev; fi\n   - if [ -n \"$EXTRAPACKAGES\" ]; then sudo apt-get update && sudo apt-get install --no-install-recommends --no-upgrade $EXTRAPACKAGES; fi\n env:\n   global:\n-    - FIELD=auto  BIGNUM=auto  SCALAR=auto  ENDOMORPHISM=no  BUILD=check  EXTRAFLAGS= HOST= EXTRAPACKAGES=\n+    - FIELD=auto  BIGNUM=auto  SCALAR=auto  ENDOMORPHISM=no  ASM=no  BUILD=check  EXTRAFLAGS= HOST= EXTRAPACKAGES=\n   matrix:\n     - SCALAR=32bit\n     - SCALAR=64bit\n-    - FIELD=gmp\n-    - FIELD=gmp       ENDOMORPHISM=yes\n-    - FIELD=64bit_asm\n-    - FIELD=64bit_asm ENDOMORPHISM=yes\n     - FIELD=64bit\n     - FIELD=64bit     ENDOMORPHISM=yes\n+    - FIELD=64bit                       ASM=x86_64\n+    - FIELD=64bit     ENDOMORPHISM=yes  ASM=x86_64\n     - FIELD=32bit\n     - FIELD=32bit     ENDOMORPHISM=yes\n-    - BIGNUM=none\n-    - BIGNUM=none     ENDOMORPHISM=yes\n+    - BIGNUM=no\n+    - BIGNUM=no       ENDOMORPHISM=yes\n     - BUILD=distcheck\n     - EXTRAFLAGS=CFLAGS=-DDETERMINISTIC\n     - HOST=i686-linux-gnu EXTRAPACKAGES=\"gcc-multilib\""
      },
      {
        "sha": "985c172eba29e1f89c514d2724c71520d9eafbc0",
        "filename": "src/secp256k1/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/Makefile.am?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -33,8 +33,8 @@ noinst_HEADERS += src/java/org_bitcoin_NativeSecp256k1.h\n noinst_HEADERS += src/util.h\n noinst_HEADERS += src/testrand.h\n noinst_HEADERS += src/testrand_impl.h\n-noinst_HEADERS += src/field_gmp.h\n-noinst_HEADERS += src/field_gmp_impl.h\n+noinst_HEADERS += src/hash.h\n+noinst_HEADERS += src/hash_impl.h\n noinst_HEADERS += src/field.h\n noinst_HEADERS += src/field_impl.h\n noinst_HEADERS += src/bench.h"
      },
      {
        "sha": "4a398d6c93a58745e16959ba3b237a282fc4aa5b",
        "filename": "src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 19,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/build-aux/m4/bitcoin_secp.m4?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -1,12 +1,6 @@\n dnl libsecp25k1 helper checks\n AC_DEFUN([SECP_INT128_CHECK],[\n has_int128=$ac_cv_type___int128\n-if test x\"$has_int128\" != x\"yes\" && test x\"$set_field\" = x\"64bit\"; then\n-  AC_MSG_ERROR([$set_field field support explicitly requested but is not compatible with this host])\n-fi\n-if test x\"$has_int128\" != x\"yes\" && test x\"$set_scalar\" = x\"64bit\"; then\n-  AC_MSG_ERROR([$set_scalar scalar support explicitly requested but is not compatible with this host])\n-fi\n ])\n \n dnl \n@@ -18,11 +12,6 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n   __asm__ __volatile__(\"movq $0x100000000,%1; mulq %%rsi\" : \"+a\"(a) : \"S\"(tmp) : \"cc\", \"%rdx\");\n   ]])],[has_64bit_asm=yes],[has_64bit_asm=no])\n AC_MSG_RESULT([$has_64bit_asm])\n-if test x\"$set_field\" == x\"64bit_asm\"; then\n-  if test x\"$has_64bit_asm\" == x\"no\"; then\n-    AC_MSG_ERROR([$set_field field support explicitly requested but no x86_64 assembly available])\n-  fi\n-fi\n ])\n \n dnl\n@@ -43,7 +32,7 @@ else\n )])\n   LIBS=\n fi\n-if test x\"$has_libcrypto\" == x\"yes\" && test x\"$has_openssl_ec\" = x; then\n+if test x\"$has_libcrypto\" = x\"yes\" && test x\"$has_openssl_ec\" = x; then\n   AC_MSG_CHECKING(for EC functions in libcrypto)\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <openssl/ec.h>\n@@ -69,11 +58,4 @@ if test x\"$has_gmp\" != x\"yes\"; then\n   CPPFLAGS=\"$CPPFLAGS_TEMP\"\n   LIBS=\"$LIBS_TEMP\"\n fi\n-if test x\"$set_field\" = x\"gmp\" && test x\"$has_gmp\" != x\"yes\"; then\n-    AC_MSG_ERROR([$set_field field support explicitly requested but libgmp was not found])\n-fi\n-if test x\"$set_bignum\" = x\"gmp\" && test x\"$has_gmp\" != x\"yes\"; then\n-    AC_MSG_ERROR([$set_bignum field support explicitly requested but libgmp was not found])\n-fi\n ])\n-"
      },
      {
        "sha": "f691156ff748b24228ecd44ed928a6b278bbe229",
        "filename": "src/secp256k1/configure.ac",
        "status": "modified",
        "additions": 69,
        "deletions": 44,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/configure.ac?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -6,7 +6,7 @@ AC_CANONICAL_HOST\n AH_TOP([#ifndef LIBSECP256K1_CONFIG_H])\n AH_TOP([#define LIBSECP256K1_CONFIG_H])\n AH_BOTTOM([#endif //LIBSECP256K1_CONFIG_H])\n-AM_INIT_AUTOMAKE([foreign])\n+AM_INIT_AUTOMAKE([foreign subdir-objects])\n LT_INIT\n \n dnl make the compilation flags quiet unless V=1 is used\n@@ -23,7 +23,7 @@ if test \"x$CFLAGS\" = \"x\"; then\n fi\n \n AC_PROG_CC_C99\n-if test x\"$ac_cv_prog_cc_c99\" == x\"no\"; then\n+if test x\"$ac_cv_prog_cc_c99\" = x\"no\"; then\n   AC_MSG_ERROR([c99 compiler support required])\n fi\n \n@@ -82,9 +82,9 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([[char foo;]])],\n \n \n AC_ARG_ENABLE(benchmark,\n-    AS_HELP_STRING([--enable-benchmark],[compile benchmark (default is yes)]),\n+    AS_HELP_STRING([--enable-benchmark],[compile benchmark (default is no)]),\n     [use_benchmark=$enableval],\n-    [use_benchmark=yes])\n+    [use_benchmark=no])\n \n AC_ARG_ENABLE(tests,\n     AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n@@ -96,15 +96,18 @@ AC_ARG_ENABLE(endomorphism,\n     [use_endomorphism=$enableval],\n     [use_endomorphism=no])\n \n-AC_ARG_WITH([field], [AS_HELP_STRING([--with-field=gmp|64bit|64bit_asm|32bit|auto],\n+AC_ARG_WITH([field], [AS_HELP_STRING([--with-field=64bit|32bit|auto],\n [Specify Field Implementation. Default is auto])],[req_field=$withval], [req_field=auto])\n \n-AC_ARG_WITH([bignum], [AS_HELP_STRING([--with-bignum=gmp|none|auto],\n+AC_ARG_WITH([bignum], [AS_HELP_STRING([--with-bignum=gmp|no|auto],\n [Specify Bignum Implementation. Default is auto])],[req_bignum=$withval], [req_bignum=auto])\n \n AC_ARG_WITH([scalar], [AS_HELP_STRING([--with-scalar=64bit|32bit|auto],\n [Specify scalar implementation. Default is auto])],[req_scalar=$withval], [req_scalar=auto])\n \n+AC_ARG_WITH([asm], [AS_HELP_STRING([--with-asm=x86_64|no|auto]\n+[Specify assembly optimizations to use. Default is auto])],[req_asm=$withval], [req_asm=auto])\n+\n AC_CHECK_TYPES([__int128])\n \n AC_MSG_CHECKING([for __builtin_expect])\n@@ -113,40 +116,54 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([[void myfunc() {__builtin_expect(0,0);}]])],\n     [ AC_MSG_RESULT([no])\n     ])\n \n-if test x\"$req_field\" = x\"auto\"; then\n+if test x\"$req_asm\" = x\"auto\"; then\n   SECP_64BIT_ASM_CHECK\n   if test x\"$has_64bit_asm\" = x\"yes\"; then\n-    set_field=64bit_asm\n+    set_asm=x86_64\n+  fi\n+  if test x\"$set_asm\" = x; then\n+    set_asm=no\n   fi\n+else\n+  set_asm=$req_asm\n+  case $set_asm in\n+  x86_64)\n+    SECP_64BIT_ASM_CHECK\n+    if test x\"$has_64bit_asm\" != x\"yes\"; then\n+      AC_MSG_ERROR([x86_64 assembly optimization requested but not available])\n+    fi\n+    ;;\n+  no)\n+    ;;\n+  *)\n+    AC_MSG_ERROR([invalid assembly optimization selection])\n+    ;;\n+  esac\n+fi\n \n+if test x\"$req_field\" = x\"auto\"; then\n+  if test x\"set_asm\" = x\"x86_64\"; then\n+    set_field=64bit\n+  fi\n   if test x\"$set_field\" = x; then\n     SECP_INT128_CHECK\n     if test x\"$has_int128\" = x\"yes\"; then\n       set_field=64bit\n     fi\n   fi\n-\n-  if test x\"$set_field\" = x; then\n-    SECP_GMP_CHECK\n-    if test x\"$has_gmp\" = x\"yes\"; then\n-      set_field=gmp\n-    fi\n-  fi\n-\n   if test x\"$set_field\" = x; then\n     set_field=32bit\n   fi\n else\n   set_field=$req_field\n   case $set_field in\n-  64bit_asm)\n-    SECP_64BIT_ASM_CHECK\n-    ;;\n   64bit)\n-    SECP_INT128_CHECK\n-    ;;\n-  gmp)\n-    SECP_GMP_CHECK\n+    if test x\"$set_asm\" != x\"x86_64\"; then\n+      SECP_INT128_CHECK\n+      if test x\"$has_int128\" != x\"yes\"; then\n+        AC_MSG_ERROR([64bit field explicitly requested but neither __int128 support or x86_64 assembly available])\n+      fi\n+    fi\n     ;;\n   32bit)\n     ;;\n@@ -157,11 +174,9 @@ else\n fi\n \n if test x\"$req_scalar\" = x\"auto\"; then\n-  if test x\"$set_scalar\" = x; then\n-    SECP_INT128_CHECK\n-    if test x\"$has_int128\" = x\"yes\"; then\n-      set_scalar=64bit\n-    fi\n+  SECP_INT128_CHECK\n+  if test x\"$has_int128\" = x\"yes\"; then\n+    set_scalar=64bit\n   fi\n   if test x\"$set_scalar\" = x; then\n     set_scalar=32bit\n@@ -171,6 +186,9 @@ else\n   case $set_scalar in\n   64bit)\n     SECP_INT128_CHECK\n+    if test x\"$has_int128\" != x\"yes\"; then\n+      AC_MSG_ERROR([64bit scalar explicitly requested but __int128 support not available])\n+    fi\n     ;;\n   32bit)\n     ;;\n@@ -187,36 +205,42 @@ if test x\"$req_bignum\" = x\"auto\"; then\n   fi\n \n   if test x\"$set_bignum\" = x; then\n-    set_bignum=none\n+    set_bignum=no\n   fi\n else\n   set_bignum=$req_bignum\n   case $set_bignum in\n   gmp)\n     SECP_GMP_CHECK\n+    if test x\"$has_gmp\" != x\"yes\"; then\n+      AC_MSG_ERROR([gmp bignum explicitly requested but libgmp not available])\n+    fi\n     ;;\n-  none)\n+  no)\n     ;;\n   *)\n     AC_MSG_ERROR([invalid bignum implementation selection])\n     ;;\n   esac\n fi\n \n+# select assembly optimization\n+case $set_asm in\n+x86_64)\n+  AC_DEFINE(USE_ASM_X86_64, 1, [Define this symbol to enable x86_64 assembly optimizations])\n+  ;;\n+no)\n+  ;;\n+*)\n+  AC_MSG_ERROR([invalid assembly optimizations])\n+  ;;\n+esac\n+\n # select field implementation\n case $set_field in\n-64bit_asm)\n-  AC_DEFINE(USE_FIELD_5X52_ASM, 1, [Define this symbol to use the assembly version for the 5x52 field implementation])\n-  AC_DEFINE(USE_FIELD_5X52, 1, [Define this symbol to use the FIELD_5X52 implementation])\n-  ;;\n 64bit)\n-  AC_DEFINE(USE_FIELD_5X52_INT128, 1, [Define this symbol to use the __int128 version for the 5x52 field implementation])\n   AC_DEFINE(USE_FIELD_5X52, 1, [Define this symbol to use the FIELD_5X52 implementation])\n   ;;\n-gmp)\n-  AC_DEFINE(HAVE_LIBGMP,1,[Define this symbol if libgmp is installed])\n-  AC_DEFINE(USE_FIELD_GMP, 1, [Define this symbol to use the FIELD_GMP implementation])\n-  ;;\n 32bit)\n   AC_DEFINE(USE_FIELD_10X26, 1, [Define this symbol to use the FIELD_10X26 implementation])\n   ;;\n@@ -233,7 +257,7 @@ gmp)\n   AC_DEFINE(USE_FIELD_INV_NUM, 1, [Define this symbol to use the num-based field inverse implementation])\n   AC_DEFINE(USE_SCALAR_INV_NUM, 1, [Define this symbol to use the num-based scalar inverse implementation])\n   ;;\n-none)\n+no)\n   AC_DEFINE(USE_NUM_NONE, 1, [Define this symbol to use no num implementation])\n   AC_DEFINE(USE_FIELD_INV_BUILTIN, 1, [Define this symbol to use the native field inverse implementation])\n   AC_DEFINE(USE_SCALAR_INV_BUILTIN, 1, [Define this symbol to use the native scalar inverse implementation])\n@@ -258,7 +282,7 @@ esac\n \n if test x\"$use_tests\" = x\"yes\"; then\n   SECP_OPENSSL_CHECK\n-  if test x\"$has_openssl_ec\" == x\"yes\"; then\n+  if test x\"$has_openssl_ec\" = x\"yes\"; then\n     AC_DEFINE(ENABLE_OPENSSL_TESTS, 1, [Define this symbol if OpenSSL EC functions are available])\n     SECP_TEST_INCLUDES=\"$SSL_CFLAGS $CRYPTO_CFLAGS\"\n     SECP_TEST_LIBS=\"$CRYPTO_LIBS\"\n@@ -272,7 +296,7 @@ if test x\"$use_tests\" = x\"yes\"; then\n   fi\n fi\n \n-if test x\"$set_field\" = x\"gmp\" || test x\"$set_bignum\" = x\"gmp\"; then\n+if test x\"$set_bignum\" = x\"gmp\"; then\n   SECP_LIBS=\"$SECP_LIBS $GMP_LIBS\"\n   SECP_INCLUDES=\"$SECP_INCLUDES $GMP_CPPFLAGS\"\n fi\n@@ -281,19 +305,20 @@ if test x\"$use_endomorphism\" = x\"yes\"; then\n   AC_DEFINE(USE_ENDOMORPHISM, 1, [Define this symbol to use endomorphism optimization])\n fi\n \n+AC_MSG_NOTICE([Using assembly optimizations: $set_asm])\n AC_MSG_NOTICE([Using field implementation: $set_field])\n AC_MSG_NOTICE([Using bignum implementation: $set_bignum])\n AC_MSG_NOTICE([Using scalar implementation: $set_scalar])\n+AC_MSG_NOTICE([Using endomorphism optimizations: $use_endomorphism])\n \n AC_CONFIG_HEADERS([src/libsecp256k1-config.h])\n AC_CONFIG_FILES([Makefile libsecp256k1.pc])\n AC_SUBST(SECP_INCLUDES)\n AC_SUBST(SECP_LIBS)\n AC_SUBST(SECP_TEST_LIBS)\n AC_SUBST(SECP_TEST_INCLUDES)\n-AM_CONDITIONAL([USE_ASM], [test x\"$set_field\" == x\"64bit_asm\"])\n AM_CONDITIONAL([USE_TESTS], [test x\"$use_tests\" != x\"no\"])\n-AM_CONDITIONAL([USE_BENCHMARK], [test x\"$use_benchmark\" != x\"no\"])\n+AM_CONDITIONAL([USE_BENCHMARK], [test x\"$use_benchmark\" = x\"yes\"])\n \n dnl make sure nothing new is exported so that we don't break the cache\n PKGCONFIG_PATH_TEMP=\"$PKG_CONFIG_PATH\""
      },
      {
        "sha": "cfdae31eaf87fe73a0de3ed45b202bb1e719f7f6",
        "filename": "src/secp256k1/include/secp256k1.h",
        "status": "modified",
        "additions": 41,
        "deletions": 10,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/include/secp256k1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/include/secp256k1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1.h?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -77,42 +77,73 @@ SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_verify(\n   int pubkeylen\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(4);\n \n+/** A pointer to a function to deterministically generate a nonce.\n+ * Returns: 1 if a nonce was succesfully generated. 0 will cause signing to fail.\n+ * In:      msg32:     the 32-byte message hash being verified (will not be NULL)\n+ *          key32:     pointer to a 32-byte secret key (will not be NULL)\n+ *          attempt:   how many iterations we have tried to find a nonce.\n+ *                     This will almost always be 0, but different attempt values\n+ *                     are required to result in a different nonce.\n+ *          data:      Arbitrary data pointer that is passed through.\n+ * Out:     nonce32:   pointer to a 32-byte array to be filled by the function.\n+ * Except for test cases, this function should compute some cryptographic hash of\n+ * the message, the key and the attempt.\n+ */\n+typedef int (*secp256k1_nonce_function_t)(\n+  unsigned char *nonce32,\n+  const unsigned char *msg32,\n+  const unsigned char *key32,\n+  unsigned int attempt,\n+  const void *data\n+);\n+\n+/** An implementation of RFC6979 (using HMAC-SHA256) as nonce generation function. */\n+extern const secp256k1_nonce_function_t secp256k1_nonce_function_rfc6979;\n+\n+/** A default safe nonce generation function (currently equal to secp256k1_nonce_function_rfc6979). */\n+extern const secp256k1_nonce_function_t secp256k1_nonce_function_default;\n+\n+\n /** Create an ECDSA signature.\n  *  Returns: 1: signature created\n- *           0: nonce invalid, try another one\n+ *           0: the nonce generation function failed\n  *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n  *           seckey: pointer to a 32-byte secret key (cannot be NULL, assumed to be valid)\n- *           nonce:  pointer to a 32-byte nonce (cannot be NULL, generated with a cryptographic PRNG)\n+ *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n  *  Out:     sig:    pointer to an array where the signature will be placed (cannot be NULL)\n  *  In/Out:  siglen: pointer to an int with the length of sig, which will be updated\n  *                   to contain the actual signature length (<=72).\n  * Requires starting using SECP256K1_START_SIGN.\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_sign(\n+int secp256k1_ecdsa_sign(\n   const unsigned char *msg32,\n   unsigned char *sig,\n   int *siglen,\n   const unsigned char *seckey,\n-  const unsigned char *nonce\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4) SECP256K1_ARG_NONNULL(5);\n+  secp256k1_nonce_function_t noncefp,\n+  const void *ndata\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n /** Create a compact ECDSA signature (64 byte + recovery id).\n  *  Returns: 1: signature created\n- *           0: nonce invalid, try another one\n+ *           0: the nonce generation function failed\n  *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n  *           seckey: pointer to a 32-byte secret key (cannot be NULL, assumed to be valid)\n- *           nonce:  pointer to a 32-byte nonce (cannot be NULL, generated with a cryptographic PRNG)\n+ *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n  *  Out:     sig:    pointer to a 64-byte array where the signature will be placed (cannot be NULL)\n  *           recid:  pointer to an int, which will be updated to contain the recovery id (can be NULL)\n  * Requires starting using SECP256K1_START_SIGN.\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_sign_compact(\n+int secp256k1_ecdsa_sign_compact(\n   const unsigned char *msg32,\n   unsigned char *sig64,\n   const unsigned char *seckey,\n-  const unsigned char *nonce,\n+  secp256k1_nonce_function_t noncefp,\n+  const void *ndata,\n   int *recid\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n /** Recover an ECDSA public key from a compact signature.\n  *  Returns: 1: public key successfully recovered (which guarantees a correct signature)."
      },
      {
        "sha": "2276f00b9a683b7c10144e7b31406f09b9c1d5ea",
        "filename": "src/secp256k1/src/bench_sign.c",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/bench_sign.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/bench_sign.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_sign.c?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -10,15 +10,13 @@\n \n typedef struct {\n     unsigned char msg[32];\n-    unsigned char nonce[32];\n     unsigned char key[32];\n } bench_sign_t;\n \n static void bench_sign_setup(void* arg) {\n     bench_sign_t *data = (bench_sign_t*)arg;\n \n     for (int i = 0; i < 32; i++) data->msg[i] = i + 1;\n-    for (int i = 0; i < 32; i++) data->nonce[i] = i + 33;\n     for (int i = 0; i < 32; i++) data->key[i] = i + 65;\n }\n \n@@ -28,9 +26,8 @@ static void bench_sign(void* arg) {\n     unsigned char sig[64];\n     for (int i=0; i<20000; i++) {\n         int recid = 0;\n-        CHECK(secp256k1_ecdsa_sign_compact(data->msg, sig, data->key, data->nonce, &recid));\n+        CHECK(secp256k1_ecdsa_sign_compact(data->msg, sig, data->key, NULL, NULL, &recid));\n         for (int j = 0; j < 32; j++) {\n-            data->nonce[j] = data->key[j];     /* Move former key to nonce  */\n             data->msg[j] = sig[j];             /* Move former R to message. */\n             data->key[j] = sig[j + 32];        /* Move former S to key.     */\n         }"
      },
      {
        "sha": "a58ca84347b5a172d9a37ab1b13f43c889592300",
        "filename": "src/secp256k1/src/bench_verify.c",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/bench_verify.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/bench_verify.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_verify.c?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -14,7 +14,6 @@\n typedef struct {\n     unsigned char msg[32];\n     unsigned char key[32];\n-    unsigned char nonce[32];\n     unsigned char sig[72];\n     int siglen;\n     unsigned char pubkey[33];\n@@ -42,9 +41,8 @@ int main(void) {\n \n     for (int i = 0; i < 32; i++) data.msg[i] = 1 + i;\n     for (int i = 0; i < 32; i++) data.key[i] = 33 + i;\n-    for (int i = 0; i < 32; i++) data.nonce[i] = 65 + i;\n     data.siglen = 72;\n-    CHECK(secp256k1_ecdsa_sign(data.msg, data.sig, &data.siglen, data.key, data.nonce));\n+    secp256k1_ecdsa_sign(data.msg, data.sig, &data.siglen, data.key, NULL, NULL);\n     data.pubkeylen = 33;\n     CHECK(secp256k1_ec_pubkey_create(data.pubkey, &data.pubkeylen, data.key, 1));\n "
      },
      {
        "sha": "674650c1e9f04d3fc8d7e73d73b4c500f08849f4",
        "filename": "src/secp256k1/src/ecdsa_impl.h",
        "status": "modified",
        "additions": 43,
        "deletions": 16,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/ecdsa_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/ecdsa_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecdsa_impl.h?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -109,25 +109,53 @@ static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, int *size, const se\n     return 1;\n }\n \n-static int secp256k1_ecdsa_sig_recompute(secp256k1_scalar_t *r2, const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {\n+static int secp256k1_ecdsa_sig_verify(const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {\n     if (secp256k1_scalar_is_zero(&sig->r) || secp256k1_scalar_is_zero(&sig->s))\n         return 0;\n \n-    int ret = 0;\n     secp256k1_scalar_t sn, u1, u2;\n     secp256k1_scalar_inverse_var(&sn, &sig->s);\n     secp256k1_scalar_mul(&u1, &sn, message);\n     secp256k1_scalar_mul(&u2, &sn, &sig->r);\n     secp256k1_gej_t pubkeyj; secp256k1_gej_set_ge(&pubkeyj, pubkey);\n     secp256k1_gej_t pr; secp256k1_ecmult(&pr, &pubkeyj, &u2, &u1);\n-    if (!secp256k1_gej_is_infinity(&pr)) {\n-        secp256k1_fe_t xr; secp256k1_gej_get_x_var(&xr, &pr);\n-        secp256k1_fe_normalize_var(&xr);\n-        unsigned char xrb[32]; secp256k1_fe_get_b32(xrb, &xr);\n-        secp256k1_scalar_set_b32(r2, xrb, NULL);\n-        ret = 1;\n+    if (secp256k1_gej_is_infinity(&pr)) {\n+        return 0;\n+    }\n+    unsigned char c[32];\n+    secp256k1_scalar_get_b32(c, &sig->r);\n+    secp256k1_fe_t xr;\n+    secp256k1_fe_set_b32(&xr, c);\n+\n+    // We now have the recomputed R point in pr, and its claimed x coordinate (modulo n)\n+    // in xr. Naively, we would extract the x coordinate from pr (requiring a inversion modulo p),\n+    // compute the remainder modulo n, and compare it to xr. However:\n+    //\n+    //       xr == X(pr) mod n\n+    //   <=> exists h. (xr + h * n < p && xr + h * n == X(pr))\n+    //   [Since 2 * n > p, h can only be 0 or 1]\n+    //   <=> (xr == X(pr)) || (xr + n < p && xr + n == X(pr))\n+    //   [In Jacobian coordinates, X(pr) is pr.x / pr.z^2 mod p]\n+    //   <=> (xr == pr.x / pr.z^2 mod p) || (xr + n < p && xr + n == pr.x / pr.z^2 mod p)\n+    //   [Multiplying both sides of the equations by pr.z^2 mod p]\n+    //   <=> (xr * pr.z^2 mod p == pr.x) || (xr + n < p && (xr + n) * pr.z^2 mod p == pr.x)\n+    //\n+    // Thus, we can avoid the inversion, but we have to check both cases separately.\n+    // secp256k1_gej_eq_x implements the (xr * pr.z^2 mod p == pr.x) test.\n+    if (secp256k1_gej_eq_x_var(&xr, &pr)) {\n+        // xr.x == xr * xr.z^2 mod p, so the signature is valid.\n+        return 1;\n+    }\n+    if (secp256k1_fe_cmp_var(&xr, &secp256k1_ecdsa_consts->p_minus_order) >= 0) {\n+        // xr + p >= n, so we can skip testing the second case.\n+        return 0;\n+    }\n+    secp256k1_fe_add(&xr, &secp256k1_ecdsa_consts->order_as_fe);\n+    if (secp256k1_gej_eq_x_var(&xr, &pr)) {\n+        // (xr + n) * pr.z^2 mod p == pr.x, so the signature is valid.\n+        return 1;\n     }\n-    return ret;\n+    return 0;\n }\n \n static int secp256k1_ecdsa_sig_recover(const secp256k1_ecdsa_sig_t *sig, secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message, int recid) {\n@@ -159,13 +187,6 @@ static int secp256k1_ecdsa_sig_recover(const secp256k1_ecdsa_sig_t *sig, secp256\n     return !secp256k1_gej_is_infinity(&qj);\n }\n \n-static int secp256k1_ecdsa_sig_verify(const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {\n-    secp256k1_scalar_t r2;\n-    int ret = 0;\n-    ret = secp256k1_ecdsa_sig_recompute(&r2, sig, pubkey, message) && secp256k1_scalar_eq(&sig->r, &r2);\n-    return ret;\n-}\n-\n static int secp256k1_ecdsa_sig_sign(secp256k1_ecdsa_sig_t *sig, const secp256k1_scalar_t *seckey, const secp256k1_scalar_t *message, const secp256k1_scalar_t *nonce, int *recid) {\n     secp256k1_gej_t rp;\n     secp256k1_ecmult_gen(&rp, nonce);\n@@ -177,6 +198,12 @@ static int secp256k1_ecdsa_sig_sign(secp256k1_ecdsa_sig_t *sig, const secp256k1_\n     secp256k1_fe_get_b32(b, &r.x);\n     int overflow = 0;\n     secp256k1_scalar_set_b32(&sig->r, b, &overflow);\n+    if (secp256k1_scalar_is_zero(&sig->r)) {\n+        /* P.x = order is on the curve, so technically sig->r could end up zero, which would be an invalid signature. */\n+        secp256k1_gej_clear(&rp);\n+        secp256k1_ge_clear(&r);\n+        return 0;\n+    }\n     if (recid)\n         *recid = (overflow ? 2 : 0) | (secp256k1_fe_is_odd(&r.y) ? 1 : 0);\n     secp256k1_scalar_t n;"
      },
      {
        "sha": "48436316e12ba5c665ba4653b16c435b7210814b",
        "filename": "src/secp256k1/src/ecmult_gen_impl.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/ecmult_gen_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/ecmult_gen_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_gen_impl.h?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -73,7 +73,7 @@ static void secp256k1_ecmult_gen_start(void) {\n             secp256k1_gej_double_var(&numsbase, &numsbase);\n             if (j == 62) {\n                 /* In the last iteration, numsbase is (1 - 2^j) * nums instead. */\n-                secp256k1_gej_neg_var(&numsbase, &numsbase);\n+                secp256k1_gej_neg(&numsbase, &numsbase);\n                 secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej);\n             }\n         }"
      },
      {
        "sha": "345cfae73328c9db2fe759256cdcb6a025186ae9",
        "filename": "src/secp256k1/src/ecmult_impl.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/ecmult_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/ecmult_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_impl.h?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -70,8 +70,8 @@ static void secp256k1_ecmult_table_precomp_ge_var(secp256k1_ge_t *pre, const sec\n         (neg)((r), &(pre)[(-(n)-1)/2]); \\\n } while(0)\n \n-#define ECMULT_TABLE_GET_GEJ(r,pre,n,w) ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_gej_neg_var)\n-#define ECMULT_TABLE_GET_GE(r,pre,n,w)  ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_ge_neg_var)\n+#define ECMULT_TABLE_GET_GEJ(r,pre,n,w) ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_gej_neg)\n+#define ECMULT_TABLE_GET_GE(r,pre,n,w)  ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_ge_neg)\n \n typedef struct {\n     /* For accelerating the computation of a*P + b*G: */"
      },
      {
        "sha": "14e2b813c17ba3a6a0999e58f1c8b2d0f3a7d93b",
        "filename": "src/secp256k1/src/field.h",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/field.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/field.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field.h?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -22,9 +22,7 @@\n #include \"libsecp256k1-config.h\"\n #endif\n \n-#if defined(USE_FIELD_GMP)\n-#include \"field_gmp.h\"\n-#elif defined(USE_FIELD_10X26)\n+#if defined(USE_FIELD_10X26)\n #include \"field_10x26.h\"\n #elif defined(USE_FIELD_5X52)\n #include \"field_5x52.h\"\n@@ -50,9 +48,20 @@ static void secp256k1_fe_stop(void);\n /** Normalize a field element. */\n static void secp256k1_fe_normalize(secp256k1_fe_t *r);\n \n+/** Weakly normalize a field element: reduce it magnitude to 1, but don't fully normalize. */\n+static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r);\n+\n /** Normalize a field element, without constant-time guarantee. */\n static void secp256k1_fe_normalize_var(secp256k1_fe_t *r);\n \n+/** Verify whether a field element represents zero i.e. would normalize to a zero value. The field\n+ *  implementation may optionally normalize the input, but this should not be relied upon. */\n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r);\n+\n+/** Verify whether a field element represents zero i.e. would normalize to a zero value. The field\n+ *  implementation may optionally normalize the input, but this should not be relied upon. */\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r);\n+\n /** Set a field element equal to a small integer. Resulting field element is normalized. */\n static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a);\n \n@@ -62,8 +71,8 @@ static int secp256k1_fe_is_zero(const secp256k1_fe_t *a);\n /** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n static int secp256k1_fe_is_odd(const secp256k1_fe_t *a);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n-static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b);\n+/** Compare two field elements. Requires magnitude-1 inputs. */\n+static int secp256k1_fe_equal_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b);\n \n /** Compare two field elements. Requires both inputs to be normalized */\n static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b);"
      },
      {
        "sha": "9ef60a807ace651660c0ae031557eda65622f7b8",
        "filename": "src/secp256k1/src/field_10x26_impl.h",
        "status": "modified",
        "additions": 99,
        "deletions": 12,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/field_10x26_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/field_10x26_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_10x26_impl.h?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -31,6 +31,7 @@ static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n     r &= (d[8] <= 0x3FFFFFFUL * m);\n     r &= (d[9] <= 0x03FFFFFUL * m);\n     r &= (a->magnitude >= 0);\n+    r &= (a->magnitude <= 32);\n     if (a->normalized) {\n         r &= (a->magnitude <= 1);\n         if (r && (d[9] == 0x03FFFFFUL)) {\n@@ -103,6 +104,37 @@ static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n #endif\n }\n \n+static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r) {\n+    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n+             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n+\n+    /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n+    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x3D1UL; t1 += (x << 6);\n+    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL;\n+    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL;\n+    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL;\n+    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL;\n+    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL;\n+    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL;\n+    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL;\n+    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL;\n+    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL;\n+\n+    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t9 >> 23 == 0);\n+\n+    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;\n+    r->n[5] = t5; r->n[6] = t6; r->n[7] = t7; r->n[8] = t8; r->n[9] = t9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n     uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n              t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n@@ -159,6 +191,73 @@ static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n #endif\n }\n \n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n+    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n+             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n+\n+    /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n+    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint32_t z0, z1;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x3D1UL; t1 += (x << 6);\n+    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL; z0  = t0; z1  = t0 ^ 0x3D0UL;\n+    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL; z0 |= t1; z1 &= t1 ^ 0x40UL;\n+    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; z0 |= t3; z1 &= t3;\n+    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; z0 |= t4; z1 &= t4;\n+    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; z0 |= t5; z1 &= t5;\n+    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; z0 |= t6; z1 &= t6;\n+    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; z0 |= t7; z1 &= t7;\n+    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; z0 |= t8; z1 &= t8;\n+                                         z0 |= t9; z1 &= t9 ^ 0x3C00000UL;\n+\n+    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t9 >> 23 == 0);\n+\n+    return (z0 == 0) | (z1 == 0x3FFFFFFUL);\n+}\n+\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n+    uint32_t t0 = r->n[0], t9 = r->n[9];\n+\n+    /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n+    uint32_t x = t9 >> 22;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x3D1UL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint32_t z0 = t0 & 0x3FFFFFFUL, z1 = z0 ^ 0x3D0UL;\n+\n+    /* Fast return path should catch the majority of cases */\n+    if ((z0 != 0UL) & (z1 != 0x3FFFFFFUL))\n+        return 0;\n+\n+    uint32_t t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n+             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8];\n+    t9 &= 0x03FFFFFUL;\n+    t1 += (x << 6);\n+\n+    t1 += (t0 >> 26); t0  = z0;\n+    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL; z0 |= t1; z1 &= t1 ^ 0x40UL;\n+    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; z0 |= t3; z1 &= t3;\n+    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; z0 |= t4; z1 &= t4;\n+    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; z0 |= t5; z1 &= t5;\n+    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; z0 |= t6; z1 &= t6;\n+    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; z0 |= t7; z1 &= t7;\n+    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; z0 |= t8; z1 &= t8;\n+                                         z0 |= t9; z1 &= t9 ^ 0x3C00000UL;\n+\n+    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t9 >> 23 == 0);\n+\n+    return (z0 == 0) | (z1 == 0x3FFFFFFUL);\n+}\n+\n SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n     r->n[0] = a;\n     r->n[1] = r->n[2] = r->n[3] = r->n[4] = r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;\n@@ -196,18 +295,6 @@ SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {\n     }\n }\n \n-SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-#ifdef VERIFY\n-    VERIFY_CHECK(a->normalized);\n-    VERIFY_CHECK(b->normalized);\n-    secp256k1_fe_verify(a);\n-    secp256k1_fe_verify(b);\n-#endif\n-    const uint32_t *t = a->n, *u = b->n;\n-    return ((t[0]^u[0]) | (t[1]^u[1]) | (t[2]^u[2]) | (t[3]^u[3]) | (t[4]^u[4])\n-          | (t[5]^u[5]) | (t[6]^u[6]) | (t[7]^u[7]) | (t[8]^u[8]) | (t[9]^u[9])) == 0;\n-}\n-\n static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);"
      },
      {
        "sha": "4db9e6f5ff5bc5d8c7b8492575d50d497b6259da",
        "filename": "src/secp256k1/src/field_5x52_impl.h",
        "status": "modified",
        "additions": 81,
        "deletions": 15,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/field_5x52_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/field_5x52_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_impl.h?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -16,12 +16,10 @@\n #include \"num.h\"\n #include \"field.h\"\n \n-#if defined(USE_FIELD_5X52_ASM)\n+#if defined(USE_ASM_X86_64)\n #include \"field_5x52_asm_impl.h\"\n-#elif defined(USE_FIELD_5X52_INT128)\n-#include \"field_5x52_int128_impl.h\"\n #else\n-#error \"Please select field_5x52 implementation\"\n+#include \"field_5x52_int128_impl.h\"\n #endif\n \n /** Implements arithmetic modulo FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F,\n@@ -45,6 +43,7 @@ static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n     r &= (d[3] <= 0xFFFFFFFFFFFFFULL * m);\n     r &= (d[4] <= 0x0FFFFFFFFFFFFULL * m);\n     r &= (a->magnitude >= 0);\n+    r &= (a->magnitude <= 2048);\n     if (a->normalized) {\n         r &= (a->magnitude <= 1);\n         if (r && (d[4] == 0x0FFFFFFFFFFFFULL) && ((d[3] & d[2] & d[1]) == 0xFFFFFFFFFFFFFULL)) {\n@@ -102,6 +101,30 @@ static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n #endif\n }\n \n+static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r) {\n+    uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n+\n+    /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n+    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x1000003D1ULL;\n+    t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL;\n+    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL;\n+    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL;\n+    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL;\n+\n+    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t4 >> 49 == 0);\n+\n+    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n     uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n \n@@ -146,6 +169,60 @@ static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n #endif\n }\n \n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n+    uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n+\n+    /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n+    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint64_t z0, z1;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x1000003D1ULL;\n+    t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL; z0  = t0; z1  = t0 ^ 0x1000003D0ULL;\n+    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL; z0 |= t1; z1 &= t1;\n+    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL; z0 |= t3; z1 &= t3;\n+                                                z0 |= t4; z1 &= t4 ^ 0xF000000000000ULL;\n+\n+    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t4 >> 49 == 0);\n+\n+    return (z0 == 0) | (z1 == 0xFFFFFFFFFFFFFULL);\n+}\n+\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n+    uint64_t t0 = r->n[0], t4 = r->n[4];\n+\n+    /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n+    uint64_t x = t4 >> 48;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x1000003D1ULL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint64_t z0 = t0 & 0xFFFFFFFFFFFFFULL, z1 = z0 ^ 0x1000003D0ULL;\n+\n+    /* Fast return path should catch the majority of cases */\n+    if ((z0 != 0ULL) & (z1 != 0xFFFFFFFFFFFFFULL))\n+        return 0;\n+\n+    uint64_t t1 = r->n[1], t2 = r->n[2], t3 = r->n[3];\n+    t4 &= 0x0FFFFFFFFFFFFULL;\n+\n+    t1 += (t0 >> 52); t0  = z0;\n+    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL; z0 |= t1; z1 &= t1;\n+    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL; z0 |= t3; z1 &= t3;\n+                                                z0 |= t4; z1 &= t4 ^ 0xF000000000000ULL;\n+\n+    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t4 >> 49 == 0);\n+\n+    return (z0 == 0) | (z1 == 0xFFFFFFFFFFFFFULL);\n+}\n+\n SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n     r->n[0] = a;\n     r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;\n@@ -183,17 +260,6 @@ SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {\n     }\n }\n \n-SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-#ifdef VERIFY\n-    VERIFY_CHECK(a->normalized);\n-    VERIFY_CHECK(b->normalized);\n-    secp256k1_fe_verify(a);\n-    secp256k1_fe_verify(b);\n-#endif\n-    const uint64_t *t = a->n, *u = b->n;\n-    return ((t[0]^u[0]) | (t[1]^u[1]) | (t[2]^u[2]) | (t[3]^u[3]) | (t[4]^u[4])) == 0;\n-}\n-\n static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);"
      },
      {
        "sha": "b390fd9de8d4801a9cad8d2a55debf52ceff2f52",
        "filename": "src/secp256k1/src/field_gmp.h",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a9576de9dbb1910cb8462e513938d45ef7b5a23/src/secp256k1/src/field_gmp.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a9576de9dbb1910cb8462e513938d45ef7b5a23/src/secp256k1/src/field_gmp.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_gmp.h?ref=1a9576de9dbb1910cb8462e513938d45ef7b5a23",
        "patch": "@@ -1,18 +0,0 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n-\n-#ifndef _SECP256K1_FIELD_REPR_\n-#define _SECP256K1_FIELD_REPR_\n-\n-#include <gmp.h>\n-\n-#define FIELD_LIMBS ((256 + GMP_NUMB_BITS - 1) / GMP_NUMB_BITS)\n-\n-typedef struct {\n-    mp_limb_t n[FIELD_LIMBS+1];\n-} secp256k1_fe_t;\n-\n-#endif"
      },
      {
        "sha": "73a55c4f00d4523f5851daa9c45ffd5f9ca6dd2e",
        "filename": "src/secp256k1/src/field_gmp_impl.h",
        "status": "removed",
        "additions": 0,
        "deletions": 184,
        "changes": 184,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a9576de9dbb1910cb8462e513938d45ef7b5a23/src/secp256k1/src/field_gmp_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a9576de9dbb1910cb8462e513938d45ef7b5a23/src/secp256k1/src/field_gmp_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_gmp_impl.h?ref=1a9576de9dbb1910cb8462e513938d45ef7b5a23",
        "patch": "@@ -1,184 +0,0 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n-\n-#ifndef _SECP256K1_FIELD_REPR_IMPL_H_\n-#define _SECP256K1_FIELD_REPR_IMPL_H_\n-\n-#include <stdio.h>\n-#include <string.h>\n-#include \"num.h\"\n-#include \"field.h\"\n-\n-static mp_limb_t secp256k1_field_p[FIELD_LIMBS];\n-static mp_limb_t secp256k1_field_pc[(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS];\n-\n-static void secp256k1_fe_inner_start(void) {\n-    for (int i=0; i<(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS; i++)\n-        secp256k1_field_pc[i] = 0;\n-    secp256k1_field_pc[0] += 0x3D1UL;\n-    secp256k1_field_pc[32/GMP_NUMB_BITS] += (((mp_limb_t)1) << (32 % GMP_NUMB_BITS));\n-    for (int i=0; i<FIELD_LIMBS; i++) {\n-        secp256k1_field_p[i] = 0;\n-    }\n-    mpn_sub(secp256k1_field_p, secp256k1_field_p, FIELD_LIMBS, secp256k1_field_pc, (33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS);\n-}\n-\n-static void secp256k1_fe_inner_stop(void) {\n-}\n-\n-static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n-    if (r->n[FIELD_LIMBS] != 0) {\n-#if (GMP_NUMB_BITS >= 40)\n-        mp_limb_t carry = mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x1000003D1ULL * r->n[FIELD_LIMBS]);\n-        mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x1000003D1ULL * carry);\n-#else\n-        mp_limb_t carry = mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x3D1UL * r->n[FIELD_LIMBS]) +\n-                          mpn_add_1(r->n+(32/GMP_NUMB_BITS), r->n+(32/GMP_NUMB_BITS), FIELD_LIMBS-(32/GMP_NUMB_BITS), r->n[FIELD_LIMBS] << (32 % GMP_NUMB_BITS));\n-        mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x3D1UL * carry);\n-        mpn_add_1(r->n+(32/GMP_NUMB_BITS), r->n+(32/GMP_NUMB_BITS), FIELD_LIMBS-(32/GMP_NUMB_BITS), carry << (32%GMP_NUMB_BITS));\n-#endif\n-        r->n[FIELD_LIMBS] = 0;\n-    }\n-    if (mpn_cmp(r->n, secp256k1_field_p, FIELD_LIMBS) >= 0)\n-        mpn_sub(r->n, r->n, FIELD_LIMBS, secp256k1_field_p, FIELD_LIMBS);\n-}\n-\n-static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n-    secp256k1_fe_normalize(r);\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n-    r->n[0] = a;\n-    for (int i=1; i<FIELD_LIMBS+1; i++)\n-        r->n[i] = 0;\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *r) {\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        r->n[i] = 0;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe_t *a) {\n-    int ret = 1;\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        ret &= (a->n[i] == 0);\n-    return ret;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe_t *a) {\n-    return a->n[0] & 1;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-    int ret = 1;\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        ret &= (a->n[i] == b->n[i]);\n-    return ret;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-    for (int i=FIELD_LIMBS; i>=0; i--) {\n-        if (a->n[i] > b->n[i]) return 1;\n-        if (a->n[i] < b->n[i]) return -1;\n-    }\n-    return 0;\n-}\n-\n-static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a) {\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        r->n[i] = 0;\n-    for (int i=0; i<256; i++) {\n-        int limb = i/GMP_NUMB_BITS;\n-        int shift = i%GMP_NUMB_BITS;\n-        r->n[limb] |= (mp_limb_t)((a[31-i/8] >> (i%8)) & 0x1) << shift;\n-    }\n-    return (mpn_cmp(r->n, secp256k1_field_p, FIELD_LIMBS) < 0);\n-}\n-\n-/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n-static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe_t *a) {\n-    for (int i=0; i<32; i++) {\n-        int c = 0;\n-        for (int j=0; j<8; j++) {\n-            int limb = (8*i+j)/GMP_NUMB_BITS;\n-            int shift = (8*i+j)%GMP_NUMB_BITS;\n-            c |= ((a->n[limb] >> shift) & 0x1) << j;\n-        }\n-        r[31-i] = c;\n-    }\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe_t *r, const secp256k1_fe_t *a, int m) {\n-    (void)m;\n-    *r = *a;\n-    secp256k1_fe_normalize(r);\n-    for (int i=0; i<FIELD_LIMBS; i++)\n-        r->n[i] = ~(r->n[i]);\n-#if (GMP_NUMB_BITS >= 33)\n-    mpn_sub_1(r->n, r->n, FIELD_LIMBS, 0x1000003D0ULL);\n-#else\n-    mpn_sub_1(r->n, r->n, FIELD_LIMBS, 0x3D0UL);\n-    mpn_sub_1(r->n+(32/GMP_NUMB_BITS), r->n+(32/GMP_NUMB_BITS), FIELD_LIMBS-(32/GMP_NUMB_BITS), 0x1UL << (32%GMP_NUMB_BITS));\n-#endif\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe_t *r, int a) {\n-    mpn_mul_1(r->n, r->n, FIELD_LIMBS+1, a);\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n-    mpn_add(r->n, r->n, FIELD_LIMBS+1, a->n, FIELD_LIMBS+1);\n-}\n-\n-static void secp256k1_fe_reduce(secp256k1_fe_t *r, mp_limb_t *tmp) {\n-    /** <A1 A2 A3 A4> <B1 B2 B3 B4>\n-     *        B1 B2 B3 B4\n-     *  + C * A1 A2 A3 A4\n-     *  +  A1 A2 A3 A4\n-     */\n-\n-#if (GMP_NUMB_BITS >= 33)\n-    mp_limb_t o = mpn_addmul_1(tmp, tmp+FIELD_LIMBS, FIELD_LIMBS, 0x1000003D1ULL);\n-#else\n-    mp_limb_t o = mpn_addmul_1(tmp, tmp+FIELD_LIMBS, FIELD_LIMBS, 0x3D1UL) +\n-                  mpn_addmul_1(tmp+(32/GMP_NUMB_BITS), tmp+FIELD_LIMBS, FIELD_LIMBS-(32/GMP_NUMB_BITS), 0x1UL << (32%GMP_NUMB_BITS));\n-#endif\n-    mp_limb_t q[1+(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS];\n-    q[(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS] = mpn_mul_1(q, secp256k1_field_pc, (33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS, o);\n-#if (GMP_NUMB_BITS <= 32)\n-    mp_limb_t o2 = tmp[2*FIELD_LIMBS-(32/GMP_NUMB_BITS)] << (32%GMP_NUMB_BITS);\n-    q[(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS] += mpn_addmul_1(q, secp256k1_field_pc, (33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS, o2);\n-#endif\n-    r->n[FIELD_LIMBS] = mpn_add(r->n, tmp, FIELD_LIMBS, q, 1+(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS);\n-}\n-\n-static void secp256k1_fe_mul(secp256k1_fe_t *r, const secp256k1_fe_t *a, const secp256k1_fe_t * SECP256K1_RESTRICT b) {\n-    VERIFY_CHECK(r != b);\n-    secp256k1_fe_t ac = *a;\n-    secp256k1_fe_t bc = *b;\n-    secp256k1_fe_normalize(&ac);\n-    secp256k1_fe_normalize(&bc);\n-    mp_limb_t tmp[2*FIELD_LIMBS];\n-    mpn_mul_n(tmp, ac.n, bc.n, FIELD_LIMBS);\n-    secp256k1_fe_reduce(r, tmp);\n-}\n-\n-static void secp256k1_fe_sqr(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n-    secp256k1_fe_t ac = *a;\n-    secp256k1_fe_normalize(&ac);\n-    mp_limb_t tmp[2*FIELD_LIMBS];\n-    mpn_sqr(tmp, ac.n, FIELD_LIMBS);\n-    secp256k1_fe_reduce(r, tmp);\n-}\n-\n-static void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k1_fe_t *a, int flag) {\n-    mp_limb_t mask0 = flag + ~((mp_limb_t)0), mask1 = ~mask0;\n-    for (int i = 0; i <= FIELD_LIMBS; i++) {\n-        r->n[i] = (r->n[i] & mask0) | (a->n[i] & mask1);\n-    }\n-}\n-\n-#endif"
      },
      {
        "sha": "4e2c24aa153541ed754106c31eb77eb3fcfbe670",
        "filename": "src/secp256k1/src/field_impl.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/field_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/field_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_impl.h?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -13,9 +13,7 @@\n \n #include \"util.h\"\n \n-#if defined(USE_FIELD_GMP)\n-#include \"field_gmp_impl.h\"\n-#elif defined(USE_FIELD_10X26)\n+#if defined(USE_FIELD_10X26)\n #include \"field_10x26_impl.h\"\n #elif defined(USE_FIELD_5X52)\n #include \"field_5x52_impl.h\"\n@@ -66,6 +64,13 @@ static int secp256k1_fe_set_hex(secp256k1_fe_t *r, const char *a, int alen) {\n     return secp256k1_fe_set_b32(r, tmp);\n }\n \n+SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n+    secp256k1_fe_t na;\n+    secp256k1_fe_negate(&na, a, 1);\n+    secp256k1_fe_add(&na, b);\n+    return secp256k1_fe_normalizes_to_zero_var(&na);\n+}\n+\n static int secp256k1_fe_sqrt_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n \n     /** The binary representation of (p + 1)/4 has 3 blocks of 1s, with lengths in\n@@ -130,10 +135,7 @@ static int secp256k1_fe_sqrt_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n     /* Check that a square root was actually calculated */\n \n     secp256k1_fe_sqr(&t1, r);\n-    secp256k1_fe_negate(&t1, &t1, 1);\n-    secp256k1_fe_add(&t1, a);\n-    secp256k1_fe_normalize_var(&t1);\n-    return secp256k1_fe_is_zero(&t1);\n+    return secp256k1_fe_equal_var(&t1, a);\n }\n \n static void secp256k1_fe_inv(secp256k1_fe_t *r, const secp256k1_fe_t *a) {"
      },
      {
        "sha": "6dea6bb5acb8047326147d9d54b413ccfc1f2e31",
        "filename": "src/secp256k1/src/group.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/group.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/group.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group.h?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -60,7 +60,6 @@ static int secp256k1_ge_is_infinity(const secp256k1_ge_t *a);\n static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a);\n \n static void secp256k1_ge_neg(secp256k1_ge_t *r, const secp256k1_ge_t *a);\n-static void secp256k1_ge_neg_var(secp256k1_ge_t *r, const secp256k1_ge_t *a);\n \n /** Get a hex representation of a point. *rlen will be overwritten with the real length. */\n static void secp256k1_ge_get_hex(char *r, int *rlen, const secp256k1_ge_t *a);\n@@ -81,11 +80,11 @@ static void secp256k1_gej_set_xy(secp256k1_gej_t *r, const secp256k1_fe_t *x, co\n /** Set a group element (jacobian) equal to another which is given in affine coordinates. */\n static void secp256k1_gej_set_ge(secp256k1_gej_t *r, const secp256k1_ge_t *a);\n \n-/** Get the X coordinate of a group element (jacobian). */\n-static void secp256k1_gej_get_x_var(secp256k1_fe_t *r, const secp256k1_gej_t *a);\n+/** Compare the X coordinate of a group element (jacobian). */\n+static int secp256k1_gej_eq_x_var(const secp256k1_fe_t *x, const secp256k1_gej_t *a);\n \n /** Set r equal to the inverse of a (i.e., mirrored around the X axis) */\n-static void secp256k1_gej_neg_var(secp256k1_gej_t *r, const secp256k1_gej_t *a);\n+static void secp256k1_gej_neg(secp256k1_gej_t *r, const secp256k1_gej_t *a);\n \n /** Check whether a group element is the point at infinity. */\n static int secp256k1_gej_is_infinity(const secp256k1_gej_t *a);"
      },
      {
        "sha": "fef06df2892d1a5f4372d4028c8dea42efce96fc",
        "filename": "src/secp256k1/src/group_impl.h",
        "status": "modified",
        "additions": 26,
        "deletions": 40,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/group_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/group_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group_impl.h?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -29,13 +29,7 @@ static int secp256k1_ge_is_infinity(const secp256k1_ge_t *a) {\n \n static void secp256k1_ge_neg(secp256k1_ge_t *r, const secp256k1_ge_t *a) {\n     *r = *a;\n-    secp256k1_fe_normalize(&r->y);\n-    secp256k1_fe_negate(&r->y, &r->y, 1);\n-}\n-\n-static void secp256k1_ge_neg_var(secp256k1_ge_t *r, const secp256k1_ge_t *a) {\n-    *r = *a;\n-    secp256k1_fe_normalize_var(&r->y);\n+    secp256k1_fe_normalize_weak(&r->y);\n     secp256k1_fe_negate(&r->y, &r->y, 1);\n }\n \n@@ -163,17 +157,19 @@ static void secp256k1_gej_set_ge(secp256k1_gej_t *r, const secp256k1_ge_t *a) {\n    secp256k1_fe_set_int(&r->z, 1);\n }\n \n-static void secp256k1_gej_get_x_var(secp256k1_fe_t *r, const secp256k1_gej_t *a) {\n-    secp256k1_fe_t zi2; secp256k1_fe_inv_var(&zi2, &a->z); secp256k1_fe_sqr(&zi2, &zi2);\n-    secp256k1_fe_mul(r, &a->x, &zi2);\n+static int secp256k1_gej_eq_x_var(const secp256k1_fe_t *x, const secp256k1_gej_t *a) {\n+    VERIFY_CHECK(!a->infinity);\n+    secp256k1_fe_t r; secp256k1_fe_sqr(&r, &a->z); secp256k1_fe_mul(&r, &r, x);\n+    secp256k1_fe_t r2 = a->x; secp256k1_fe_normalize_weak(&r2);\n+    return secp256k1_fe_equal_var(&r, &r2);\n }\n \n-static void secp256k1_gej_neg_var(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n+static void secp256k1_gej_neg(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n     r->infinity = a->infinity;\n     r->x = a->x;\n     r->y = a->y;\n     r->z = a->z;\n-    secp256k1_fe_normalize_var(&r->y);\n+    secp256k1_fe_normalize_weak(&r->y);\n     secp256k1_fe_negate(&r->y, &r->y, 1);\n }\n \n@@ -195,9 +191,8 @@ static int secp256k1_gej_is_valid_var(const secp256k1_gej_t *a) {\n     secp256k1_fe_t z6; secp256k1_fe_sqr(&z6, &z2); secp256k1_fe_mul(&z6, &z6, &z2);\n     secp256k1_fe_mul_int(&z6, 7);\n     secp256k1_fe_add(&x3, &z6);\n-    secp256k1_fe_normalize_var(&y2);\n-    secp256k1_fe_normalize_var(&x3);\n-    return secp256k1_fe_equal(&y2, &x3);\n+    secp256k1_fe_normalize_weak(&x3);\n+    return secp256k1_fe_equal_var(&y2, &x3);\n }\n \n static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a) {\n@@ -208,9 +203,8 @@ static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a) {\n     secp256k1_fe_t x3; secp256k1_fe_sqr(&x3, &a->x); secp256k1_fe_mul(&x3, &x3, &a->x);\n     secp256k1_fe_t c; secp256k1_fe_set_int(&c, 7);\n     secp256k1_fe_add(&x3, &c);\n-    secp256k1_fe_normalize_var(&y2);\n-    secp256k1_fe_normalize_var(&x3);\n-    return secp256k1_fe_equal(&y2, &x3);\n+    secp256k1_fe_normalize_weak(&x3);\n+    return secp256k1_fe_equal_var(&y2, &x3);\n }\n \n static void secp256k1_gej_double_var(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n@@ -261,20 +255,16 @@ static void secp256k1_gej_add_var(secp256k1_gej_t *r, const secp256k1_gej_t *a,\n     secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &z12);\n     secp256k1_fe_t s1; secp256k1_fe_mul(&s1, &a->y, &z22); secp256k1_fe_mul(&s1, &s1, &b->z);\n     secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);\n-    secp256k1_fe_normalize_var(&u1);\n-    secp256k1_fe_normalize_var(&u2);\n-    if (secp256k1_fe_equal(&u1, &u2)) {\n-        secp256k1_fe_normalize_var(&s1);\n-        secp256k1_fe_normalize_var(&s2);\n-        if (secp256k1_fe_equal(&s1, &s2)) {\n+    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n+    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n+    if (secp256k1_fe_normalizes_to_zero_var(&h)) {\n+        if (secp256k1_fe_normalizes_to_zero_var(&i)) {\n             secp256k1_gej_double_var(r, a);\n         } else {\n             r->infinity = 1;\n         }\n         return;\n     }\n-    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n-    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n     secp256k1_fe_t i2; secp256k1_fe_sqr(&i2, &i);\n     secp256k1_fe_t h2; secp256k1_fe_sqr(&h2, &h);\n     secp256k1_fe_t h3; secp256k1_fe_mul(&h3, &h, &h2);\n@@ -300,23 +290,20 @@ static void secp256k1_gej_add_ge_var(secp256k1_gej_t *r, const secp256k1_gej_t *\n     }\n     r->infinity = 0;\n     secp256k1_fe_t z12; secp256k1_fe_sqr(&z12, &a->z);\n-    secp256k1_fe_t u1 = a->x;\n+    secp256k1_fe_t u1 = a->x; secp256k1_fe_normalize_weak(&u1);\n     secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &z12);\n-    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize_var(&s1);\n+    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize_weak(&s1);\n     secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);\n-    secp256k1_fe_normalize_var(&u1);\n-    secp256k1_fe_normalize_var(&u2);\n-    if (secp256k1_fe_equal(&u1, &u2)) {\n-        secp256k1_fe_normalize_var(&s2);\n-        if (secp256k1_fe_equal(&s1, &s2)) {\n+    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n+    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n+    if (secp256k1_fe_normalizes_to_zero_var(&h)) {\n+        if (secp256k1_fe_normalizes_to_zero_var(&i)) {\n             secp256k1_gej_double_var(r, a);\n         } else {\n             r->infinity = 1;\n         }\n         return;\n     }\n-    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n-    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n     secp256k1_fe_t i2; secp256k1_fe_sqr(&i2, &i);\n     secp256k1_fe_t h2; secp256k1_fe_sqr(&h2, &h);\n     secp256k1_fe_t h3; secp256k1_fe_mul(&h3, &h, &h2);\n@@ -355,9 +342,9 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n      */\n \n     secp256k1_fe_t zz; secp256k1_fe_sqr(&zz, &a->z);                /* z = Z1^2 */\n-    secp256k1_fe_t u1 = a->x; secp256k1_fe_normalize(&u1);          /* u1 = U1 = X1*Z2^2 (1) */\n+    secp256k1_fe_t u1 = a->x; secp256k1_fe_normalize_weak(&u1);     /* u1 = U1 = X1*Z2^2 (1) */\n     secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &zz);           /* u2 = U2 = X2*Z1^2 (1) */\n-    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize(&s1);          /* s1 = S1 = Y1*Z2^3 (1) */\n+    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize_weak(&s1);     /* s1 = S1 = Y1*Z2^3 (1) */\n     secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &zz);           /* s2 = Y2*Z2^2 (1) */\n     secp256k1_fe_mul(&s2, &s2, &a->z);                              /* s2 = S2 = Y2*Z1^3 (1) */\n     secp256k1_fe_t z = a->z;                                        /* z = Z = Z1*Z2 (8) */\n@@ -371,8 +358,7 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n     secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n     secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n-    secp256k1_fe_normalize(&r->z);\n-    int infinity = secp256k1_fe_is_zero(&r->z) * (1 - a->infinity);\n+    int infinity = secp256k1_fe_normalizes_to_zero(&r->z) * (1 - a->infinity);\n     secp256k1_fe_mul_int(&r->z, 2 * (1 - a->infinity)); /* r->z = Z3 = 2*M*Z (2) */\n     r->x = t;                                           /* r->x = R^2 (1) */\n     secp256k1_fe_negate(&q, &q, 1);                     /* q = -Q (2) */\n@@ -384,7 +370,7 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     secp256k1_fe_mul(&t, &t, &rr);                      /* t = R*(2*R^2-3*Q) (1) */\n     secp256k1_fe_add(&t, &n);                           /* t = R*(2*R^2-3*Q)+M^4 (2) */\n     secp256k1_fe_negate(&r->y, &t, 2);                  /* r->y = R*(3*Q-2*R^2)-M^4 (3) */\n-    secp256k1_fe_normalize(&r->y);\n+    secp256k1_fe_normalize_weak(&r->y);\n     secp256k1_fe_mul_int(&r->x, 4 * (1 - a->infinity)); /* r->x = X3 = 4*(R^2-Q) */\n     secp256k1_fe_mul_int(&r->y, 4 * (1 - a->infinity)); /* r->y = Y3 = 4*R*(3*Q-2*R^2)-4*M^4 (4) */\n "
      },
      {
        "sha": "d1e65b968a9e5d44578bb1d0a051f499ea4f5e30",
        "filename": "src/secp256k1/src/hash.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash.h?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -0,0 +1,41 @@\n+/**********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_HASH_\n+#define _SECP256K1_HASH_\n+\n+#include <stdlib.h>\n+#include <stdint.h>\n+\n+typedef struct {\n+    uint32_t s[32];\n+    unsigned char buf[64];\n+    size_t bytes;\n+} secp256k1_sha256_t;\n+\n+static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash);\n+static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t size);\n+static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32);\n+\n+typedef struct {\n+    secp256k1_sha256_t inner, outer;\n+} secp256k1_hmac_sha256_t;\n+\n+static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t size);\n+static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size);\n+static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32);\n+\n+typedef struct {\n+    unsigned char v[32];\n+    unsigned char k[32];\n+    int retry;\n+} secp256k1_rfc6979_hmac_sha256_t;\n+\n+static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen);\n+static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen);\n+static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng);\n+\n+#endif"
      },
      {
        "sha": "f35c5f7a8219d46a623b94a48b794d4ea51a7207",
        "filename": "src/secp256k1/src/hash_impl.h",
        "status": "added",
        "additions": 291,
        "deletions": 0,
        "changes": 291,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/hash_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/hash_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash_impl.h?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -0,0 +1,291 @@\n+/**********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_HASH_IMPL_H_\n+#define _SECP256K1_HASH_IMPL_H_\n+\n+#include \"hash.h\"\n+\n+#include <stdlib.h>\n+#include <stdint.h>\n+\n+#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))\n+#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))\n+#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))\n+#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))\n+#define sigma0(x) (((x) >> 7 | (x) << 25) ^ ((x) >> 18 | (x) << 14) ^ ((x) >> 3))\n+#define sigma1(x) (((x) >> 17 | (x) << 15) ^ ((x) >> 19 | (x) << 13) ^ ((x) >> 10))\n+\n+#define Round(a,b,c,d,e,f,g,h,k,w) do { \\\n+    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \\\n+    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \\\n+    (d) += t1; \\\n+    (h) = t1 + t2; \\\n+} while(0)\n+\n+#define ReadBE32(p) (((uint32_t)((p)[0])) << 24 | ((uint32_t)((p)[1])) << 16 | ((uint32_t)((p)[2])) << 8 | ((uint32_t)((p)[3])))\n+#define WriteBE32(p, v) do { (p)[0] = (v) >> 24; (p)[1] = (v) >> 16; (p)[2] = (v) >> 8; (p)[3] = (v); } while(0)\n+\n+static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash) {\n+    hash->s[0] = 0x6a09e667ul;\n+    hash->s[1] = 0xbb67ae85ul;\n+    hash->s[2] = 0x3c6ef372ul;\n+    hash->s[3] = 0xa54ff53aul;\n+    hash->s[4] = 0x510e527ful;\n+    hash->s[5] = 0x9b05688cul;\n+    hash->s[6] = 0x1f83d9abul;\n+    hash->s[7] = 0x5be0cd19ul;\n+    hash->bytes = 0;\n+}\n+\n+/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n+static void secp256k1_sha256_transform(uint32_t* s, const unsigned char* chunk) {\n+    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n+    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n+    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+\n+    s[0] += a;\n+    s[1] += b;\n+    s[2] += c;\n+    s[3] += d;\n+    s[4] += e;\n+    s[5] += f;\n+    s[6] += g;\n+    s[7] += h;\n+}\n+\n+static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t len) {\n+    const unsigned char* end = data + len;\n+    size_t bufsize = hash->bytes % 64;\n+    if (bufsize && bufsize + len >= 64) {\n+        // Fill the buffer, and process it.\n+        memcpy(hash->buf + bufsize, data, 64 - bufsize);\n+        hash->bytes += 64 - bufsize;\n+        data += 64 - bufsize;\n+        secp256k1_sha256_transform(hash->s, hash->buf);\n+        bufsize = 0;\n+    }\n+    while (end >= data + 64) {\n+        // Process full chunks directly from the source.\n+        secp256k1_sha256_transform(hash->s, data);\n+        hash->bytes += 64;\n+        data += 64;\n+    }\n+    if (end > data) {\n+        // Fill the buffer with what remains.\n+        memcpy(hash->buf + bufsize, data, end - data);\n+        hash->bytes += end - data;\n+    }\n+}\n+\n+static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32) {\n+    static const unsigned char pad[64] = {0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n+    unsigned char sizedesc[8];\n+    WriteBE32(sizedesc, hash->bytes >> 29);\n+    WriteBE32(sizedesc + 4, hash->bytes << 3);\n+    secp256k1_sha256_write(hash, pad, 1 + ((119 - (hash->bytes % 64)) % 64));\n+    secp256k1_sha256_write(hash, sizedesc, 8);\n+    WriteBE32(out32, hash->s[0]);\n+    hash->s[0] = 0;\n+    WriteBE32(out32 + 4, hash->s[1]);\n+    hash->s[1] = 0;\n+    WriteBE32(out32 + 8, hash->s[2]);\n+    hash->s[2] = 0;\n+    WriteBE32(out32 + 12, hash->s[3]);\n+    hash->s[3] = 0;\n+    WriteBE32(out32 + 16, hash->s[4]);\n+    hash->s[4] = 0;\n+    WriteBE32(out32 + 20, hash->s[5]);\n+    hash->s[5] = 0;\n+    WriteBE32(out32 + 24, hash->s[6]);\n+    hash->s[6] = 0;\n+    WriteBE32(out32 + 28, hash->s[7]);\n+    hash->s[7] = 0;\n+}\n+\n+static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t keylen) {\n+    unsigned char rkey[64];\n+    if (keylen <= 64) {\n+        memcpy(rkey, key, keylen);\n+        memset(rkey + keylen, 0, 64 - keylen);\n+    } else {\n+        secp256k1_sha256_t sha256;\n+        secp256k1_sha256_initialize(&sha256);\n+        secp256k1_sha256_write(&sha256, key, keylen);\n+        secp256k1_sha256_finalize(&sha256, rkey);\n+        memset(rkey + 32, 0, 32);\n+    }\n+\n+    secp256k1_sha256_initialize(&hash->outer);\n+    for (int n = 0; n < 64; n++)\n+        rkey[n] ^= 0x5c;\n+    secp256k1_sha256_write(&hash->outer, rkey, 64);\n+\n+    secp256k1_sha256_initialize(&hash->inner);\n+    for (int n = 0; n < 64; n++)\n+        rkey[n] ^= 0x5c ^ 0x36;\n+    secp256k1_sha256_write(&hash->inner, rkey, 64);\n+    memset(rkey, 0, 64);\n+}\n+\n+static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size) {\n+    secp256k1_sha256_write(&hash->inner, data, size);\n+}\n+\n+static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32) {\n+    unsigned char temp[32];\n+    secp256k1_sha256_finalize(&hash->inner, temp);\n+    secp256k1_sha256_write(&hash->outer, temp, 32);\n+    memset(temp, 0, 32);\n+    secp256k1_sha256_finalize(&hash->outer, out32);\n+}\n+\n+\n+static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen) {\n+    static const unsigned char zero[1] = {0x00};\n+    static const unsigned char one[1] = {0x01};\n+\n+    memset(rng->v, 0x01, 32);\n+    memset(rng->k, 0x00, 32);\n+\n+    secp256k1_hmac_sha256_t hmac;\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_write(&hmac, zero, 1);\n+    secp256k1_hmac_sha256_write(&hmac, key, keylen);\n+    secp256k1_hmac_sha256_write(&hmac, msg, msglen);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_write(&hmac, one, 1);\n+    secp256k1_hmac_sha256_write(&hmac, key, keylen);\n+    secp256k1_hmac_sha256_write(&hmac, msg, msglen);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+    rng->retry = 0;\n+}\n+\n+static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen) {\n+    static const unsigned char zero[1] = {0x00};\n+    if (rng->retry) {\n+        secp256k1_hmac_sha256_t hmac;\n+        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+        secp256k1_hmac_sha256_write(&hmac, zero, 1);\n+        secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n+        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+        secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+    }\n+\n+    while (outlen > 0) {\n+        secp256k1_hmac_sha256_t hmac;\n+        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+        secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+        int now = outlen;\n+        if (now > 32) {\n+            now = 32;\n+        }\n+        memcpy(out, rng->v, now);\n+        out += now;\n+        outlen -= now;\n+    }\n+\n+    rng->retry = 1;\n+}\n+\n+static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng) {\n+    memset(rng->k, 0, 32);\n+    memset(rng->v, 0, 32);\n+    rng->retry = 0;\n+}\n+\n+\n+#undef Round\n+#undef sigma0\n+#undef sigma1\n+#undef Sigma0\n+#undef Sigma1\n+#undef Ch\n+#undef Maj\n+#undef ReadBE32\n+#undef WriteBE32\n+\n+#endif"
      },
      {
        "sha": "58bcd8d009e9156f8516e5f466a417003154e8ab",
        "filename": "src/secp256k1/src/secp256k1.c",
        "status": "modified",
        "additions": 58,
        "deletions": 15,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/secp256k1.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/secp256k1.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/secp256k1.c?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -17,6 +17,7 @@\n #include \"ecmult_gen_impl.h\"\n #include \"ecdsa_impl.h\"\n #include \"eckey_impl.h\"\n+#include \"hash_impl.h\"\n \n void secp256k1_start(unsigned int flags) {\n     secp256k1_fe_start();\n@@ -69,49 +70,91 @@ int secp256k1_ecdsa_verify(const unsigned char *msg32, const unsigned char *sig,\n     return ret;\n }\n \n-int secp256k1_ecdsa_sign(const unsigned char *msg32, unsigned char *signature, int *signaturelen, const unsigned char *seckey, const unsigned char *nonce) {\n+static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+   (void)data;\n+   secp256k1_rfc6979_hmac_sha256_t rng;\n+   secp256k1_rfc6979_hmac_sha256_initialize(&rng, key32, 32, msg32, 32);\n+   for (unsigned int i = 0; i <= counter; i++) {\n+       secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);\n+   }\n+   secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+   return 1;\n+}\n+\n+const secp256k1_nonce_function_t secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;\n+const secp256k1_nonce_function_t secp256k1_nonce_function_default = nonce_function_rfc6979;\n+\n+int secp256k1_ecdsa_sign(const unsigned char *msg32, unsigned char *signature, int *signaturelen, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata) {\n     DEBUG_CHECK(secp256k1_ecmult_gen_consts != NULL);\n     DEBUG_CHECK(msg32 != NULL);\n     DEBUG_CHECK(signature != NULL);\n     DEBUG_CHECK(signaturelen != NULL);\n     DEBUG_CHECK(seckey != NULL);\n-    DEBUG_CHECK(nonce != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n \n     secp256k1_scalar_t sec, non, msg;\n     secp256k1_scalar_set_b32(&sec, seckey, NULL);\n-    int overflow = 0;\n-    secp256k1_scalar_set_b32(&non, nonce, &overflow);\n     secp256k1_scalar_set_b32(&msg, msg32, NULL);\n-    int ret = !secp256k1_scalar_is_zero(&non) && !overflow;\n+    int overflow = 0;\n+    int ret = 0;\n+    unsigned int count = 0;\n     secp256k1_ecdsa_sig_t sig;\n-    if (ret) {\n-        ret = secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, NULL);\n+    while (1) {\n+        unsigned char nonce32[32];\n+        ret = noncefp(nonce32, msg32, seckey, count, noncedata);\n+        if (!ret) {\n+            break;\n+        }\n+        secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+        memset(nonce32, 0, 32);\n+        if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n+            if (secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, NULL)) {\n+                break;\n+            }\n+        }\n+        count++;\n     }\n     if (ret) {\n-        secp256k1_ecdsa_sig_serialize(signature, signaturelen, &sig);\n+        ret = secp256k1_ecdsa_sig_serialize(signature, signaturelen, &sig);\n     }\n     secp256k1_scalar_clear(&msg);\n     secp256k1_scalar_clear(&non);\n     secp256k1_scalar_clear(&sec);\n     return ret;\n }\n \n-int secp256k1_ecdsa_sign_compact(const unsigned char *msg32, unsigned char *sig64, const unsigned char *seckey, const unsigned char *nonce, int *recid) {\n+int secp256k1_ecdsa_sign_compact(const unsigned char *msg32, unsigned char *sig64, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata, int *recid) {\n     DEBUG_CHECK(secp256k1_ecmult_gen_consts != NULL);\n     DEBUG_CHECK(msg32 != NULL);\n     DEBUG_CHECK(sig64 != NULL);\n     DEBUG_CHECK(seckey != NULL);\n-    DEBUG_CHECK(nonce != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n \n     secp256k1_scalar_t sec, non, msg;\n     secp256k1_scalar_set_b32(&sec, seckey, NULL);\n-    int overflow = 0;\n-    secp256k1_scalar_set_b32(&non, nonce, &overflow);\n     secp256k1_scalar_set_b32(&msg, msg32, NULL);\n-    int ret = !secp256k1_scalar_is_zero(&non) && !overflow;\n+    int overflow = 0;\n+    int ret = 0;\n+    unsigned int count = 0;\n     secp256k1_ecdsa_sig_t sig;\n-    if (ret) {\n-        ret = secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, recid);\n+    while (1) {\n+        unsigned char nonce32[32];\n+        ret = noncefp(nonce32, msg32, seckey, count, noncedata);\n+        if (!ret) {\n+            break;\n+        }\n+        secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+        memset(nonce32, 0, 32);\n+        if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n+            if (secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, recid)) {\n+                break;\n+            }\n+        }\n+        count++;\n     }\n     if (ret) {\n         secp256k1_scalar_get_b32(sig64, &sig.r);"
      },
      {
        "sha": "cff32f1d06872a41b135de5766d4590b37d84388",
        "filename": "src/secp256k1/src/tests.c",
        "status": "modified",
        "additions": 382,
        "deletions": 120,
        "changes": 502,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/tests.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602ebf5279d73f13fb1b2a3c4e7508ead6af9051/src/secp256k1/src/tests.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/tests.c?ref=602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "patch": "@@ -36,12 +36,19 @@ void random_field_element_test(secp256k1_fe_t *fe) {\n }\n \n void random_field_element_magnitude(secp256k1_fe_t *fe) {\n+    int n = secp256k1_rand32() % 9;\n     secp256k1_fe_normalize(fe);\n-    int n = secp256k1_rand32() % 4;\n-    for (int i = 0; i < n; i++) {\n-        secp256k1_fe_negate(fe, fe, 1 + 2*i);\n-        secp256k1_fe_negate(fe, fe, 2 + 2*i);\n+    if (n == 0) {\n+        return;\n     }\n+    secp256k1_fe_t zero;\n+    secp256k1_fe_clear(&zero);\n+    secp256k1_fe_negate(&zero, &zero, 0);\n+    secp256k1_fe_mul_int(&zero, n - 1);\n+    secp256k1_fe_add(fe, &zero);\n+#ifdef VERIFY\n+    CHECK(fe->magnitude == n);\n+#endif\n }\n \n void random_group_element_test(secp256k1_ge_t *ge) {\n@@ -91,6 +98,121 @@ void random_scalar_order(secp256k1_scalar_t *num) {\n     } while(1);\n }\n \n+/***** HASH TESTS *****/\n+\n+void run_sha256_tests(void) {\n+    static const char *inputs[8] = {\n+        \"\", \"abc\", \"message digest\", \"secure hash algorithm\", \"SHA256 is considered to be safe\",\n+        \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",\n+        \"For this sample, this 63-byte string will be used as input data\",\n+        \"This is exactly 64 bytes long, not counting the terminating byte\"\n+    };\n+    static const unsigned char outputs[8][32] = {\n+        {0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55},\n+        {0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea, 0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23, 0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c, 0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad},\n+        {0xf7, 0x84, 0x6f, 0x55, 0xcf, 0x23, 0xe1, 0x4e, 0xeb, 0xea, 0xb5, 0xb4, 0xe1, 0x55, 0x0c, 0xad, 0x5b, 0x50, 0x9e, 0x33, 0x48, 0xfb, 0xc4, 0xef, 0xa3, 0xa1, 0x41, 0x3d, 0x39, 0x3c, 0xb6, 0x50},\n+        {0xf3, 0x0c, 0xeb, 0x2b, 0xb2, 0x82, 0x9e, 0x79, 0xe4, 0xca, 0x97, 0x53, 0xd3, 0x5a, 0x8e, 0xcc, 0x00, 0x26, 0x2d, 0x16, 0x4c, 0xc0, 0x77, 0x08, 0x02, 0x95, 0x38, 0x1c, 0xbd, 0x64, 0x3f, 0x0d},\n+        {0x68, 0x19, 0xd9, 0x15, 0xc7, 0x3f, 0x4d, 0x1e, 0x77, 0xe4, 0xe1, 0xb5, 0x2d, 0x1f, 0xa0, 0xf9, 0xcf, 0x9b, 0xea, 0xea, 0xd3, 0x93, 0x9f, 0x15, 0x87, 0x4b, 0xd9, 0x88, 0xe2, 0xa2, 0x36, 0x30},\n+        {0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39, 0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1},\n+        {0xf0, 0x8a, 0x78, 0xcb, 0xba, 0xee, 0x08, 0x2b, 0x05, 0x2a, 0xe0, 0x70, 0x8f, 0x32, 0xfa, 0x1e, 0x50, 0xc5, 0xc4, 0x21, 0xaa, 0x77, 0x2b, 0xa5, 0xdb, 0xb4, 0x06, 0xa2, 0xea, 0x6b, 0xe3, 0x42},\n+        {0xab, 0x64, 0xef, 0xf7, 0xe8, 0x8e, 0x2e, 0x46, 0x16, 0x5e, 0x29, 0xf2, 0xbc, 0xe4, 0x18, 0x26, 0xbd, 0x4c, 0x7b, 0x35, 0x52, 0xf6, 0xb3, 0x82, 0xa9, 0xe7, 0xd3, 0xaf, 0x47, 0xc2, 0x45, 0xf8}\n+    };\n+    for (int i = 0; i < 8; i++) {\n+        secp256k1_sha256_t hasher;\n+        secp256k1_sha256_initialize(&hasher);\n+        secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i]), strlen(inputs[i]));\n+        unsigned char out[32];\n+        secp256k1_sha256_finalize(&hasher, out);\n+        CHECK(memcmp(out, outputs[i], 32) == 0);\n+        if (strlen(inputs[i]) > 0) {\n+            secp256k1_sha256_initialize(&hasher);\n+            int split = secp256k1_rand32() % strlen(inputs[i]);\n+            secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i]), split);\n+            secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i] + split), strlen(inputs[i]) - split);\n+            secp256k1_sha256_finalize(&hasher, out);\n+            CHECK(memcmp(out, outputs[i], 32) == 0);\n+        }\n+    }\n+}\n+\n+void run_hmac_sha256_tests(void) {\n+    static const char *keys[6] = {\n+        \"\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\",\n+        \"\\x4a\\x65\\x66\\x65\",\n+        \"\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\",\n+        \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\",\n+        \"\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\",\n+        \"\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\"\n+    };\n+    static const char *inputs[6] = {\n+        \"\\x48\\x69\\x20\\x54\\x68\\x65\\x72\\x65\",\n+        \"\\x77\\x68\\x61\\x74\\x20\\x64\\x6f\\x20\\x79\\x61\\x20\\x77\\x61\\x6e\\x74\\x20\\x66\\x6f\\x72\\x20\\x6e\\x6f\\x74\\x68\\x69\\x6e\\x67\\x3f\",\n+        \"\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\",\n+        \"\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\",\n+        \"\\x54\\x65\\x73\\x74\\x20\\x55\\x73\\x69\\x6e\\x67\\x20\\x4c\\x61\\x72\\x67\\x65\\x72\\x20\\x54\\x68\\x61\\x6e\\x20\\x42\\x6c\\x6f\\x63\\x6b\\x2d\\x53\\x69\\x7a\\x65\\x20\\x4b\\x65\\x79\\x20\\x2d\\x20\\x48\\x61\\x73\\x68\\x20\\x4b\\x65\\x79\\x20\\x46\\x69\\x72\\x73\\x74\",\n+        \"\\x54\\x68\\x69\\x73\\x20\\x69\\x73\\x20\\x61\\x20\\x74\\x65\\x73\\x74\\x20\\x75\\x73\\x69\\x6e\\x67\\x20\\x61\\x20\\x6c\\x61\\x72\\x67\\x65\\x72\\x20\\x74\\x68\\x61\\x6e\\x20\\x62\\x6c\\x6f\\x63\\x6b\\x2d\\x73\\x69\\x7a\\x65\\x20\\x6b\\x65\\x79\\x20\\x61\\x6e\\x64\\x20\\x61\\x20\\x6c\\x61\\x72\\x67\\x65\\x72\\x20\\x74\\x68\\x61\\x6e\\x20\\x62\\x6c\\x6f\\x63\\x6b\\x2d\\x73\\x69\\x7a\\x65\\x20\\x64\\x61\\x74\\x61\\x2e\\x20\\x54\\x68\\x65\\x20\\x6b\\x65\\x79\\x20\\x6e\\x65\\x65\\x64\\x73\\x20\\x74\\x6f\\x20\\x62\\x65\\x20\\x68\\x61\\x73\\x68\\x65\\x64\\x20\\x62\\x65\\x66\\x6f\\x72\\x65\\x20\\x62\\x65\\x69\\x6e\\x67\\x20\\x75\\x73\\x65\\x64\\x20\\x62\\x79\\x20\\x74\\x68\\x65\\x20\\x48\\x4d\\x41\\x43\\x20\\x61\\x6c\\x67\\x6f\\x72\\x69\\x74\\x68\\x6d\\x2e\"\n+    };\n+    static const unsigned char outputs[6][32] = {\n+        {0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53, 0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b, 0xf1, 0x2b, 0x88, 0x1d, 0xc2, 0x00, 0xc9, 0x83, 0x3d, 0xa7, 0x26, 0xe9, 0x37, 0x6c, 0x2e, 0x32, 0xcf, 0xf7},\n+        {0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e, 0x6a, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75, 0xc7, 0x5a, 0x00, 0x3f, 0x08, 0x9d, 0x27, 0x39, 0x83, 0x9d, 0xec, 0x58, 0xb9, 0x64, 0xec, 0x38, 0x43},\n+        {0x77, 0x3e, 0xa9, 0x1e, 0x36, 0x80, 0x0e, 0x46, 0x85, 0x4d, 0xb8, 0xeb, 0xd0, 0x91, 0x81, 0xa7, 0x29, 0x59, 0x09, 0x8b, 0x3e, 0xf8, 0xc1, 0x22, 0xd9, 0x63, 0x55, 0x14, 0xce, 0xd5, 0x65, 0xfe},\n+        {0x82, 0x55, 0x8a, 0x38, 0x9a, 0x44, 0x3c, 0x0e, 0xa4, 0xcc, 0x81, 0x98, 0x99, 0xf2, 0x08, 0x3a, 0x85, 0xf0, 0xfa, 0xa3, 0xe5, 0x78, 0xf8, 0x07, 0x7a, 0x2e, 0x3f, 0xf4, 0x67, 0x29, 0x66, 0x5b},\n+        {0x60, 0xe4, 0x31, 0x59, 0x1e, 0xe0, 0xb6, 0x7f, 0x0d, 0x8a, 0x26, 0xaa, 0xcb, 0xf5, 0xb7, 0x7f, 0x8e, 0x0b, 0xc6, 0x21, 0x37, 0x28, 0xc5, 0x14, 0x05, 0x46, 0x04, 0x0f, 0x0e, 0xe3, 0x7f, 0x54},\n+        {0x9b, 0x09, 0xff, 0xa7, 0x1b, 0x94, 0x2f, 0xcb, 0x27, 0x63, 0x5f, 0xbc, 0xd5, 0xb0, 0xe9, 0x44, 0xbf, 0xdc, 0x63, 0x64, 0x4f, 0x07, 0x13, 0x93, 0x8a, 0x7f, 0x51, 0x53, 0x5c, 0x3a, 0x35, 0xe2}\n+    };\n+    for (int i = 0; i < 6; i++) {\n+        secp256k1_hmac_sha256_t hasher;\n+        secp256k1_hmac_sha256_initialize(&hasher, (const unsigned char*)(keys[i]), strlen(keys[i]));\n+        secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i]), strlen(inputs[i]));\n+        unsigned char out[32];\n+        secp256k1_hmac_sha256_finalize(&hasher, out);\n+        CHECK(memcmp(out, outputs[i], 32) == 0);\n+        if (strlen(inputs[i]) > 0) {\n+            secp256k1_hmac_sha256_initialize(&hasher, (const unsigned char*)(keys[i]), strlen(keys[i]));\n+            int split = secp256k1_rand32() % strlen(inputs[i]);\n+            secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i]), split);\n+            secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i] + split), strlen(inputs[i]) - split);\n+            secp256k1_hmac_sha256_finalize(&hasher, out);\n+            CHECK(memcmp(out, outputs[i], 32) == 0);\n+        }\n+    }\n+}\n+\n+void run_rfc6979_hmac_sha256_tests(void) {\n+    static const unsigned char key1[32] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x00};\n+    static const unsigned char msg1[32] = {0x4b, 0xf5, 0x12, 0x2f, 0x34, 0x45, 0x54, 0xc5, 0x3b, 0xde, 0x2e, 0xbb, 0x8c, 0xd2, 0xb7, 0xe3, 0xd1, 0x60, 0x0a, 0xd6, 0x31, 0xc3, 0x85, 0xa5, 0xd7, 0xcc, 0xe2, 0x3c, 0x77, 0x85, 0x45, 0x9a};\n+    static const unsigned char out1[3][32] = {\n+        {0x4f, 0xe2, 0x95, 0x25, 0xb2, 0x08, 0x68, 0x09, 0x15, 0x9a, 0xcd, 0xf0, 0x50, 0x6e, 0xfb, 0x86, 0xb0, 0xec, 0x93, 0x2c, 0x7b, 0xa4, 0x42, 0x56, 0xab, 0x32, 0x1e, 0x42, 0x1e, 0x67, 0xe9, 0xfb},\n+        {0x2b, 0xf0, 0xff, 0xf1, 0xd3, 0xc3, 0x78, 0xa2, 0x2d, 0xc5, 0xde, 0x1d, 0x85, 0x65, 0x22, 0x32, 0x5c, 0x65, 0xb5, 0x04, 0x49, 0x1a, 0x0c, 0xbd, 0x01, 0xcb, 0x8f, 0x3a, 0xa6, 0x7f, 0xfd, 0x4a},\n+        {0xf5, 0x28, 0xb4, 0x10, 0xcb, 0x54, 0x1f, 0x77, 0x00, 0x0d, 0x7a, 0xfb, 0x6c, 0x5b, 0x53, 0xc5, 0xc4, 0x71, 0xea, 0xb4, 0x3e, 0x46, 0x6d, 0x9a, 0xc5, 0x19, 0x0c, 0x39, 0xc8, 0x2f, 0xd8, 0x2e}\n+    };\n+\n+    static const unsigned char key2[32] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};\n+    static const unsigned char msg2[32] = {0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};\n+    static const unsigned char out2[3][32] = {\n+        {0x9c, 0x23, 0x6c, 0x16, 0x5b, 0x82, 0xae, 0x0c, 0xd5, 0x90, 0x65, 0x9e, 0x10, 0x0b, 0x6b, 0xab, 0x30, 0x36, 0xe7, 0xba, 0x8b, 0x06, 0x74, 0x9b, 0xaf, 0x69, 0x81, 0xe1, 0x6f, 0x1a, 0x2b, 0x95},\n+        {0xdf, 0x47, 0x10, 0x61, 0x62, 0x5b, 0xc0, 0xea, 0x14, 0xb6, 0x82, 0xfe, 0xee, 0x2c, 0x9c, 0x02, 0xf2, 0x35, 0xda, 0x04, 0x20, 0x4c, 0x1d, 0x62, 0xa1, 0x53, 0x6c, 0x6e, 0x17, 0xae, 0xd7, 0xa9},\n+        {0x75, 0x97, 0x88, 0x7c, 0xbd, 0x76, 0x32, 0x1f, 0x32, 0xe3, 0x04, 0x40, 0x67, 0x9a, 0x22, 0xcf, 0x7f, 0x8d, 0x9d, 0x2e, 0xac, 0x39, 0x0e, 0x58, 0x1f, 0xea, 0x09, 0x1c, 0xe2, 0x02, 0xba, 0x94}\n+    };\n+\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+    unsigned char out[32];\n+\n+    secp256k1_rfc6979_hmac_sha256_initialize(&rng, key1, 32, msg1, 32);\n+    for (int i = 0; i < 3; i++) {\n+        secp256k1_rfc6979_hmac_sha256_generate(&rng, out, 32);\n+        CHECK(memcmp(out, out1[i], 32) == 0);\n+    }\n+    secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+\n+    secp256k1_rfc6979_hmac_sha256_initialize(&rng, key2, 32, msg2, 32);\n+    for (int i = 0; i < 3; i++) {\n+        secp256k1_rfc6979_hmac_sha256_generate(&rng, out, 32);\n+        CHECK(memcmp(out, out2[i], 32) == 0);\n+    }\n+    secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+}\n+\n /***** NUM TESTS *****/\n \n #ifndef USE_NUM_NONE\n@@ -494,9 +616,9 @@ void random_fe_non_square(secp256k1_fe_t *ns) {\n }\n \n int check_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-    secp256k1_fe_t an = *a; secp256k1_fe_normalize(&an);\n+    secp256k1_fe_t an = *a; secp256k1_fe_normalize_weak(&an);\n     secp256k1_fe_t bn = *b; secp256k1_fe_normalize_var(&bn);\n-    return secp256k1_fe_equal(&an, &bn);\n+    return secp256k1_fe_equal_var(&an, &bn);\n }\n \n int check_fe_inverse(const secp256k1_fe_t *a, const secp256k1_fe_t *ai) {\n@@ -523,16 +645,16 @@ void run_field_misc(void) {\n         random_fe_non_zero(&y);\n         /* Test the fe equality and comparison operations. */\n         CHECK(secp256k1_fe_cmp_var(&x, &x) == 0);\n-        CHECK(secp256k1_fe_equal(&x, &x));\n+        CHECK(secp256k1_fe_equal_var(&x, &x));\n         z = x;\n         secp256k1_fe_add(&z,&y);\n         secp256k1_fe_normalize(&z);\n         /* Test the conditional move. */\n         secp256k1_fe_cmov(&z, &x, 0);\n-        CHECK(secp256k1_fe_equal(&x, &z) == 0);\n+        CHECK(secp256k1_fe_equal_var(&x, &z) == 0);\n         CHECK(secp256k1_fe_cmp_var(&x, &z) != 0);\n         secp256k1_fe_cmov(&y, &x, 1);\n-        CHECK(secp256k1_fe_equal(&x, &y));\n+        CHECK(secp256k1_fe_equal_var(&x, &y));\n         /* Test that mul_int, mul, and add agree. */\n         secp256k1_fe_add(&y, &x);\n         secp256k1_fe_add(&y, &x);\n@@ -656,108 +778,148 @@ void run_sqrt(void) {\n \n /***** GROUP TESTS *****/\n \n-int ge_equals_ge(const secp256k1_ge_t *a, const secp256k1_ge_t *b) {\n-    if (a->infinity && b->infinity)\n-        return 1;\n-    return check_fe_equal(&a->x, &b->x) && check_fe_equal(&a->y, &b->y);\n+void ge_equals_ge(const secp256k1_ge_t *a, const secp256k1_ge_t *b) {\n+    CHECK(a->infinity == b->infinity);\n+    if (a->infinity)\n+        return;\n+    CHECK(secp256k1_fe_equal_var(&a->x, &b->x));\n+    CHECK(secp256k1_fe_equal_var(&b->y, &b->y));\n }\n \n void ge_equals_gej(const secp256k1_ge_t *a, const secp256k1_gej_t *b) {\n-    secp256k1_ge_t bb;\n-    secp256k1_gej_t bj = *b;\n-    secp256k1_ge_set_gej_var(&bb, &bj);\n-    CHECK(ge_equals_ge(a, &bb));\n-}\n-\n-void gej_equals_gej(const secp256k1_gej_t *a, const secp256k1_gej_t *b) {\n-    secp256k1_ge_t aa, bb;\n-    secp256k1_gej_t aj = *a, bj = *b;\n-    secp256k1_ge_set_gej_var(&aa, &aj);\n-    secp256k1_ge_set_gej_var(&bb, &bj);\n-    CHECK(ge_equals_ge(&aa, &bb));\n+    CHECK(a->infinity == b->infinity);\n+    if (a->infinity)\n+        return;\n+    /* Check a.x * b.z^2 == b.x && a.y * b.z^3 == b.y, to avoid inverses. */\n+    secp256k1_fe_t z2s;\n+    secp256k1_fe_sqr(&z2s, &b->z);\n+    secp256k1_fe_t u1, u2, s1, s2;\n+    secp256k1_fe_mul(&u1, &a->x, &z2s);\n+    u2 = b->x; secp256k1_fe_normalize_weak(&u2);\n+    secp256k1_fe_mul(&s1, &a->y, &z2s); secp256k1_fe_mul(&s1, &s1, &b->z);\n+    s2 = b->y; secp256k1_fe_normalize_weak(&s2);\n+    CHECK(secp256k1_fe_equal_var(&u1, &u2));\n+    CHECK(secp256k1_fe_equal_var(&s1, &s2));\n }\n \n void test_ge(void) {\n-    char ca[135];\n-    char cb[68];\n-    int rlen;\n-    secp256k1_ge_t a, b, i, n;\n-    random_group_element_test(&a);\n-    random_group_element_test(&b);\n-    rlen = sizeof(ca);\n-    secp256k1_ge_get_hex(ca,&rlen,&a);\n-    CHECK(rlen > 4 && rlen <= (int)sizeof(ca));\n-    rlen = sizeof(cb);\n-    secp256k1_ge_get_hex(cb,&rlen,&b); /* Intentionally undersized buffer. */\n-    n = a;\n-    secp256k1_fe_normalize(&a.y);\n-    secp256k1_fe_negate(&n.y, &a.y, 1);\n-    secp256k1_ge_set_infinity(&i);\n-    random_field_element_magnitude(&a.x);\n-    random_field_element_magnitude(&a.y);\n-    random_field_element_magnitude(&b.x);\n-    random_field_element_magnitude(&b.y);\n-    random_field_element_magnitude(&n.x);\n-    random_field_element_magnitude(&n.y);\n-\n-    secp256k1_gej_t aj, bj, ij, nj;\n-    random_group_element_jacobian_test(&aj, &a);\n-    random_group_element_jacobian_test(&bj, &b);\n-    secp256k1_gej_set_infinity(&ij);\n-    random_group_element_jacobian_test(&nj, &n);\n-    random_field_element_magnitude(&aj.x);\n-    random_field_element_magnitude(&aj.y);\n-    random_field_element_magnitude(&aj.z);\n-    random_field_element_magnitude(&bj.x);\n-    random_field_element_magnitude(&bj.y);\n-    random_field_element_magnitude(&bj.z);\n-    random_field_element_magnitude(&nj.x);\n-    random_field_element_magnitude(&nj.y);\n-    random_field_element_magnitude(&nj.z);\n-\n-    /* gej + gej adds */\n-    secp256k1_gej_t aaj; secp256k1_gej_add_var(&aaj, &aj, &aj);\n-    secp256k1_gej_t abj; secp256k1_gej_add_var(&abj, &aj, &bj);\n-    secp256k1_gej_t aij; secp256k1_gej_add_var(&aij, &aj, &ij);\n-    secp256k1_gej_t anj; secp256k1_gej_add_var(&anj, &aj, &nj);\n-    secp256k1_gej_t iaj; secp256k1_gej_add_var(&iaj, &ij, &aj);\n-    secp256k1_gej_t iij; secp256k1_gej_add_var(&iij, &ij, &ij);\n-\n-    /* gej + ge adds */\n-    secp256k1_gej_t aa; secp256k1_gej_add_ge_var(&aa, &aj, &a);\n-    secp256k1_gej_t ab; secp256k1_gej_add_ge_var(&ab, &aj, &b);\n-    secp256k1_gej_t ai; secp256k1_gej_add_ge_var(&ai, &aj, &i);\n-    secp256k1_gej_t an; secp256k1_gej_add_ge_var(&an, &aj, &n);\n-    secp256k1_gej_t ia; secp256k1_gej_add_ge_var(&ia, &ij, &a);\n-    secp256k1_gej_t ii; secp256k1_gej_add_ge_var(&ii, &ij, &i);\n-\n-    /* const gej + ge adds */\n-    secp256k1_gej_t aac; secp256k1_gej_add_ge(&aac, &aj, &a);\n-    secp256k1_gej_t abc; secp256k1_gej_add_ge(&abc, &aj, &b);\n-    secp256k1_gej_t anc; secp256k1_gej_add_ge(&anc, &aj, &n);\n-    secp256k1_gej_t iac; secp256k1_gej_add_ge(&iac, &ij, &a);\n-\n-    CHECK(secp256k1_gej_is_infinity(&an));\n-    CHECK(secp256k1_gej_is_infinity(&anj));\n-    CHECK(secp256k1_gej_is_infinity(&anc));\n-    gej_equals_gej(&aa, &aaj);\n-    gej_equals_gej(&aa, &aac);\n-    gej_equals_gej(&ab, &abj);\n-    gej_equals_gej(&ab, &abc);\n-    gej_equals_gej(&an, &anj);\n-    gej_equals_gej(&an, &anc);\n-    gej_equals_gej(&ia, &iaj);\n-    gej_equals_gej(&ai, &aij);\n-    gej_equals_gej(&ii, &iij);\n-    ge_equals_gej(&a, &ai);\n-    ge_equals_gej(&a, &ai);\n-    ge_equals_gej(&a, &iaj);\n-    ge_equals_gej(&a, &iaj);\n-    ge_equals_gej(&a, &iac);\n+    int runs = 4;\n+    /* Points: (infinity, p1, p1, -p1, -p1, p2, p2, -p2, -p2, p3, p3, -p3, -p3, p4, p4, -p4, -p4).\n+     * The second in each pair of identical points uses a random Z coordinate in the Jacobian form.\n+     * All magnitudes are randomized.\n+     * All 17*17 combinations of points are added to eachother, using all applicable methods.\n+     */\n+    secp256k1_ge_t *ge = malloc(sizeof(secp256k1_ge_t) * (1 + 4 * runs));\n+    secp256k1_gej_t *gej = malloc(sizeof(secp256k1_gej_t) * (1 + 4 * runs));\n+    secp256k1_gej_set_infinity(&gej[0]);\n+    secp256k1_ge_clear(&ge[0]);\n+    secp256k1_ge_set_gej_var(&ge[0], &gej[0]);\n+    for (int i = 0; i < runs; i++) {\n+        secp256k1_ge_t g;\n+        random_group_element_test(&g);\n+        ge[1 + 4 * i] = g;\n+        ge[2 + 4 * i] = g;\n+        secp256k1_ge_neg(&ge[3 + 4 * i], &g);\n+        secp256k1_ge_neg(&ge[4 + 4 * i], &g);\n+        secp256k1_gej_set_ge(&gej[1 + 4 * i], &ge[1 + 4 * i]);\n+        random_group_element_jacobian_test(&gej[2 + 4 * i], &ge[2 + 4 * i]);\n+        secp256k1_gej_set_ge(&gej[3 + 4 * i], &ge[3 + 4 * i]);\n+        random_group_element_jacobian_test(&gej[4 + 4 * i], &ge[4 + 4 * i]);\n+        for (int j = 0; j < 4; j++) {\n+            random_field_element_magnitude(&ge[1 + j + 4 * i].x);\n+            random_field_element_magnitude(&ge[1 + j + 4 * i].y);\n+            random_field_element_magnitude(&gej[1 + j + 4 * i].x);\n+            random_field_element_magnitude(&gej[1 + j + 4 * i].y);\n+            random_field_element_magnitude(&gej[1 + j + 4 * i].z);\n+        }\n+    }\n+\n+    for (int i1 = 0; i1 < 1 + 4 * runs; i1++) {\n+        for (int i2 = 0; i2 < 1 + 4 * runs; i2++) {\n+            /* Compute reference result using gej + gej (var). */\n+            secp256k1_gej_t refj, resj;\n+            secp256k1_ge_t ref;\n+            secp256k1_gej_add_var(&refj, &gej[i1], &gej[i2]);\n+            secp256k1_ge_set_gej_var(&ref, &refj);\n+\n+            /* Test gej + ge (var). */\n+            secp256k1_gej_add_ge_var(&resj, &gej[i1], &ge[i2]);\n+            ge_equals_gej(&ref, &resj);\n+\n+            /* Test gej + ge (const). */\n+            if (i2 != 0) {\n+                /* secp256k1_gej_add_ge does not support its second argument being infinity. */\n+                secp256k1_gej_add_ge(&resj, &gej[i1], &ge[i2]);\n+                ge_equals_gej(&ref, &resj);\n+            }\n+\n+            /* Test doubling (var). */\n+            if ((i1 == 0 && i2 == 0) || ((i1 + 3)/4 == (i2 + 3)/4 && ((i1 + 3)%4)/2 == ((i2 + 3)%4)/2)) {\n+                /* Normal doubling. */\n+                secp256k1_gej_double_var(&resj, &gej[i1]);\n+                ge_equals_gej(&ref, &resj);\n+                secp256k1_gej_double_var(&resj, &gej[i2]);\n+                ge_equals_gej(&ref, &resj);\n+            }\n+\n+            /* Test adding opposites. */\n+            if ((i1 == 0 && i2 == 0) || ((i1 + 3)/4 == (i2 + 3)/4 && ((i1 + 3)%4)/2 != ((i2 + 3)%4)/2)) {\n+                CHECK(secp256k1_ge_is_infinity(&ref));\n+            }\n+\n+            /* Test adding infinity. */\n+            if (i1 == 0) {\n+                CHECK(secp256k1_ge_is_infinity(&ge[i1]));\n+                CHECK(secp256k1_gej_is_infinity(&gej[i1]));\n+                ge_equals_gej(&ref, &gej[i2]);\n+            }\n+            if (i2 == 0) {\n+                CHECK(secp256k1_ge_is_infinity(&ge[i2]));\n+                CHECK(secp256k1_gej_is_infinity(&gej[i2]));\n+                ge_equals_gej(&ref, &gej[i1]);\n+            }\n+        }\n+    }\n+\n+    /* Test adding all points together in random order equals infinity. */\n+    {\n+        secp256k1_gej_t *gej_shuffled = malloc((4 * runs + 1) * sizeof(secp256k1_gej_t));\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            gej_shuffled[i] = gej[i];\n+        }\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            int swap = i + secp256k1_rand32() % (4 * runs + 1 - i);\n+            if (swap != i) {\n+                secp256k1_gej_t t = gej_shuffled[i];\n+                gej_shuffled[i] = gej_shuffled[swap];\n+                gej_shuffled[swap] = t;\n+            }\n+        }\n+        secp256k1_gej_t sum;\n+        secp256k1_gej_set_infinity(&sum);\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            secp256k1_gej_add_var(&sum, &sum, &gej_shuffled[i]);\n+        }\n+        CHECK(secp256k1_gej_is_infinity(&sum));\n+        free(gej_shuffled);\n+    }\n+\n+    /* Test batch gej -> ge conversion. */\n+    {\n+        secp256k1_ge_t *ge_set_all = malloc((4 * runs + 1) * sizeof(secp256k1_ge_t));\n+        secp256k1_ge_set_all_gej_var(4 * runs + 1, ge_set_all, gej);\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            ge_equals_gej(&ge_set_all[i], &gej[i]);\n+        }\n+        free(ge_set_all);\n+    }\n+\n+    free(ge);\n+    free(gej);\n }\n \n void run_ge(void) {\n-    for (int i = 0; i < 2000*count; i++) {\n+    for (int i = 0; i < count * 32; i++) {\n         test_ge();\n     }\n }\n@@ -949,6 +1111,44 @@ void run_ecdsa_sign_verify(void) {\n     }\n }\n \n+/** Dummy nonce generation function that just uses a precomputed nonce, and fails if it is not accepted. Use only for testing. */\n+static int precomputed_nonce_function(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+    (void)msg32;\n+    (void)key32;\n+    memcpy(nonce32, data, 32);\n+    return (counter == 0);\n+}\n+\n+static int nonce_function_test_fail(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+   /* Dummy nonce generator that has a fatal error on the first counter value. */\n+   if (counter == 0) return 0;\n+   return nonce_function_rfc6979(nonce32, msg32, key32, counter - 1, data);\n+}\n+\n+static int nonce_function_test_retry(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+   /* Dummy nonce generator that produces unacceptable nonces for the first several counter values. */\n+   if (counter < 3) {\n+       memset(nonce32, counter==0 ? 0 : 255, 32);\n+       if (counter == 2) nonce32[31]--;\n+       return 1;\n+   }\n+   if (counter < 5) {\n+       static const unsigned char order[] = {\n+           0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+           0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n+           0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n+           0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x41\n+       };\n+       memcpy(nonce32, order, 32);\n+       if (counter == 4) nonce32[31]++;\n+       return 1;\n+   }\n+   /* Retry rate of 6979 is negligible esp. as we only call this in determinstic tests. */\n+   /* If someone does fine a case where it retries for secp256k1, we'd like to know. */\n+   if (counter > 5) return 0;\n+   return nonce_function_rfc6979(nonce32, msg32, key32, counter - 5, data);\n+}\n+\n void test_ecdsa_end_to_end(void) {\n     unsigned char privkey[32];\n     unsigned char message[32];\n@@ -1006,13 +1206,7 @@ void test_ecdsa_end_to_end(void) {\n \n     /* Sign. */\n     unsigned char signature[72]; int signaturelen = 72;\n-    while(1) {\n-        unsigned char rnd[32];\n-        secp256k1_rand256_test(rnd);\n-        if (secp256k1_ecdsa_sign(message, signature, &signaturelen, privkey, rnd) == 1) {\n-            break;\n-        }\n-    }\n+    CHECK(secp256k1_ecdsa_sign(message, signature, &signaturelen, privkey, NULL, NULL) == 1);\n     /* Verify. */\n     CHECK(secp256k1_ecdsa_verify(message, signature, signaturelen, pubkey, pubkeylen) == 1);\n     /* Destroy signature and verify again. */\n@@ -1021,13 +1215,7 @@ void test_ecdsa_end_to_end(void) {\n \n     /* Compact sign. */\n     unsigned char csignature[64]; int recid = 0;\n-    while(1) {\n-        unsigned char rnd[32];\n-        secp256k1_rand256_test(rnd);\n-        if (secp256k1_ecdsa_sign_compact(message, csignature, privkey, rnd, &recid) == 1) {\n-            break;\n-        }\n-    }\n+    CHECK(secp256k1_ecdsa_sign_compact(message, csignature, privkey, NULL, NULL, &recid) == 1);\n     /* Recover. */\n     unsigned char recpubkey[65]; int recpubkeylen = 0;\n     CHECK(secp256k1_ecdsa_recover_compact(message, csignature, recpubkey, &recpubkeylen, pubkeylen == 33, recid) == 1);\n@@ -1077,7 +1265,7 @@ void test_random_pubkeys(void) {\n         CHECK(secp256k1_eckey_pubkey_serialize(&elem, in, &size, 0));\n         CHECK(size == 65);\n         CHECK(secp256k1_eckey_pubkey_parse(&elem2, in, size));\n-        CHECK(ge_equals_ge(&elem,&elem2));\n+        ge_equals_ge(&elem,&elem2);\n         /* Check that the X9.62 hybrid type is checked. */\n         in[0] = (r & 1) ? 6 : 7;\n         res = secp256k1_eckey_pubkey_parse(&elem2, in, size);\n@@ -1086,7 +1274,7 @@ void test_random_pubkeys(void) {\n             else CHECK(!res);\n         }\n         if (res) {\n-            CHECK(ge_equals_ge(&elem,&elem2));\n+            ge_equals_ge(&elem,&elem2);\n             CHECK(secp256k1_eckey_pubkey_serialize(&elem, out, &size, 0));\n             CHECK(memcmp(&in[1], &out[1], 64) == 0);\n         }\n@@ -1280,6 +1468,12 @@ void test_ecdsa_edge_cases(void) {\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n         };\n+        static const unsigned char nonce2[32] = {\n+            0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n+            0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n+            0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x40\n+        };\n         const unsigned char key[32] = {\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n@@ -1294,10 +1488,74 @@ void test_ecdsa_edge_cases(void) {\n         };\n         unsigned char sig[72];\n         int siglen = 72;\n-        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce) == 0);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) == 0);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce2) == 0);\n         msg[31] = 0xaa;\n         siglen = 72;\n-        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce2) == 1);\n+        siglen = 10;\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) != 1);\n+    }\n+\n+    /* Nonce function corner cases. */\n+    {\n+        unsigned char key[32];\n+        unsigned char msg[32];\n+        unsigned char sig[72];\n+        memset(key, 0, 32);\n+        memset(msg, 0, 32);\n+        key[31] = 1;\n+        msg[31] = 1;\n+        int siglen = 72;\n+        int recid;\n+        /* Nonce function failure results in signature failure. */\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce_function_test_fail, NULL) == 0);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, nonce_function_test_fail, NULL, &recid) == 0);\n+        /* The retry loop successfully makes its way to the first good value. */\n+        unsigned char sig2[72];\n+        int siglen2 = 72;\n+        siglen = 72;\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce_function_test_retry, NULL) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, nonce_function_rfc6979, NULL) == 1);\n+        CHECK((siglen == siglen2) && (memcmp(sig, sig2, siglen) == 0));\n+        int recid2;\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, nonce_function_test_retry, NULL, &recid) == 1);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig2, key, nonce_function_rfc6979, NULL, &recid2) == 1);\n+        CHECK((recid == recid2) && (memcmp(sig, sig2, 64) == 0));\n+        /* The default nonce function is determinstic. */\n+        siglen = 72;\n+        siglen2 = 72;\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, NULL, NULL) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+        CHECK((siglen == siglen2) && (memcmp(sig, sig2, siglen) == 0));\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, NULL, NULL, &recid) == 1);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig2, key, NULL, NULL, &recid2) == 1);\n+        CHECK((recid == recid2) && (memcmp(sig, sig2, 64) == 0));\n+        /* The default nonce function changes output with different messages. */\n+        secp256k1_ecdsa_sig_t s[512];\n+        for(int i=0; i<256; i++) {\n+            siglen2 = 72;\n+            msg[0] = i;\n+            CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+            CHECK(secp256k1_ecdsa_sig_parse(&s[i], sig2, siglen2));\n+            for (int j=0; j<i; j++) {\n+                CHECK(!secp256k1_scalar_eq(&s[i].r, &s[j].r));\n+            }\n+        }\n+        msg[0] = 0;\n+        msg[31] = 2;\n+        /* The default nonce function changes output with different keys. */\n+        for(int i=256; i<512; i++) {\n+            siglen2 = 72;\n+            key[0] = i - 256;\n+            CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+            CHECK(secp256k1_ecdsa_sig_parse(&s[i], sig2, siglen2));\n+            for (int j=0; j<i; j++) {\n+                CHECK(!secp256k1_scalar_eq(&s[i].r, &s[j].r));\n+            }\n+        }\n+        key[0] = 0;\n     }\n \n     /* Privkey export where pubkey is the point at infinity. */\n@@ -1405,6 +1663,10 @@ int main(int argc, char **argv) {\n     secp256k1_scalar_start();\n     secp256k1_ecdsa_start();\n \n+    run_sha256_tests();\n+    run_hmac_sha256_tests();\n+    run_rfc6979_hmac_sha256_tests();\n+\n #ifndef USE_NUM_NONE\n     /* num tests */\n     run_num_smalltests();"
      }
    ]
  },
  {
    "sha": "7268f7b120327f26cec43006b7b04b9036cdb2aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjY4ZjdiMTIwMzI3ZjI2Y2VjNDMwMDZiN2IwNGI5MDM2Y2RiMmFh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-05T23:42:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-05T23:42:27Z"
      },
      "message": "Move arith_uint256 out of consensus and util",
      "tree": {
        "sha": "4df5e2afe04d3bc5486c52b999ce5046995383f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4df5e2afe04d3bc5486c52b999ce5046995383f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7268f7b120327f26cec43006b7b04b9036cdb2aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7268f7b120327f26cec43006b7b04b9036cdb2aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7268f7b120327f26cec43006b7b04b9036cdb2aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7268f7b120327f26cec43006b7b04b9036cdb2aa/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec20fd74b89272a4f53337ccdf7683a7f52bab11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec20fd74b89272a4f53337ccdf7683a7f52bab11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec20fd74b89272a4f53337ccdf7683a7f52bab11"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1ef88f0680792f50d2d6873e9f14cb285fb3af4d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7268f7b120327f26cec43006b7b04b9036cdb2aa/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7268f7b120327f26cec43006b7b04b9036cdb2aa/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7268f7b120327f26cec43006b7b04b9036cdb2aa",
        "patch": "@@ -233,6 +233,7 @@ univalue_libbitcoin_univalue_a_SOURCES = \\\n libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_common_a_SOURCES = \\\n   allocators.cpp \\\n+  arith_uint256.cpp \\\n   amount.cpp \\\n   base58.cpp \\\n   chainparams.cpp \\\n@@ -262,7 +263,6 @@ libbitcoin_common_a_SOURCES = \\\n # backward-compatibility objects and their sanity checks are linked.\n libbitcoin_util_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_util_a_SOURCES = \\\n-  arith_uint256.cpp \\\n   chainparamsbase.cpp \\\n   clientversion.cpp \\\n   compat/glibc_sanity.cpp \\\n@@ -354,7 +354,6 @@ bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n libbitcoinconsensus_la_SOURCES = \\\n-  arith_uint256.cpp \\\n   crypto/hmac_sha512.cpp \\\n   crypto/ripemd160.cpp \\\n   crypto/sha1.cpp \\"
      }
    ]
  },
  {
    "sha": "d58c5d6f21fd2421bc8cbb224849e8c38b617775",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNThjNWQ2ZjIxZmQyNDIxYmM4Y2JiMjI0ODQ5ZThjMzhiNjE3Nzc1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-06T02:39:40Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-06T03:34:47Z"
      },
      "message": "tests: run sanity checks in tests too\n\nIf these are going to fail in bitcoind, they should fail in the tests as well.",
      "tree": {
        "sha": "6ff3b11f7d469be4e6663867804ac7578f778bf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ff3b11f7d469be4e6663867804ac7578f778bf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d58c5d6f21fd2421bc8cbb224849e8c38b617775",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d58c5d6f21fd2421bc8cbb224849e8c38b617775",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d58c5d6f21fd2421bc8cbb224849e8c38b617775",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d58c5d6f21fd2421bc8cbb224849e8c38b617775/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec20fd74b89272a4f53337ccdf7683a7f52bab11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec20fd74b89272a4f53337ccdf7683a7f52bab11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec20fd74b89272a4f53337ccdf7683a7f52bab11"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "710956a72bea109d07b87d7e012b97156c07b52e",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d58c5d6f21fd2421bc8cbb224849e8c38b617775/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d58c5d6f21fd2421bc8cbb224849e8c38b617775/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=d58c5d6f21fd2421bc8cbb224849e8c38b617775",
        "patch": "@@ -58,6 +58,7 @@ BITCOIN_TESTS =\\\n   test/netbase_tests.cpp \\\n   test/pmt_tests.cpp \\\n   test/rpc_tests.cpp \\\n+  test/sanity_tests.cpp \\\n   test/script_P2SH_tests.cpp \\\n   test/script_tests.cpp \\\n   test/scriptnum_tests.cpp \\"
      },
      {
        "sha": "464a8fbb8cfb740b82623a7df11d4d0ffc6de5cc",
        "filename": "src/test/sanity_tests.cpp",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d58c5d6f21fd2421bc8cbb224849e8c38b617775/src/test/sanity_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d58c5d6f21fd2421bc8cbb224849e8c38b617775/src/test/sanity_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sanity_tests.cpp?ref=d58c5d6f21fd2421bc8cbb224849e8c38b617775",
        "patch": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2012-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"compat/sanity.h\"\n+#include \"key.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+BOOST_AUTO_TEST_SUITE(sanity_tests)\n+\n+BOOST_AUTO_TEST_CASE(basic_sanity)\n+{\n+  BOOST_CHECK_MESSAGE(glibc_sanity_test() == true, \"libc sanity test\");\n+  BOOST_CHECK_MESSAGE(glibcxx_sanity_test() == true, \"stdlib sanity test\");\n+  BOOST_CHECK_MESSAGE(ECC_InitSanityCheck() == true, \"openssl ECC test\");\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "b93b49b52237cf3d7203464cd2d67ed69a829691",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTNiNDliNTIyMzdjZjNkNzIwMzQ2NGNkMmQ2N2VkNjlhODI5Njkx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-06T07:18:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-06T07:19:01Z"
      },
      "message": "Merge pull request #5603\n\n7268f7b Move arith_uint256 out of consensus and util (Pieter Wuille)",
      "tree": {
        "sha": "4df5e2afe04d3bc5486c52b999ce5046995383f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4df5e2afe04d3bc5486c52b999ce5046995383f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b93b49b52237cf3d7203464cd2d67ed69a829691",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUq4xlAAoJEHSBCwEjRsmmnFIH/iucjfAPBgMzjiaImMYntc7L\ng6JkINjs4eDgTbdn+BfAJWFxY26t5qusNWi0Ql3J6LUMcOJVSFkO0k/C2L+J02+t\ngmhSYK0RgLS2ongtnbYvgrY2kzpjEkJv2iEpDbwgs5e5RSzGgKxL3DdIXRDiYCE5\nWmYT+kohcxCrTm896iyGor6wwusPoxedcTU8OJ+7M7zLTUs1YqeDMds56ppeEJc1\nb57tv08/bTslHHfUwX+CoNEJeukLS0qx/ZGPKTkzepmySqze9et5M0i0xi54fCHB\nkCDkqITiOe79j28qkxKNFXyx0Wo0jAdvhl1UXQL0IKPTPmLUVmHOAL5Q50AUSto=\n=L7vy\n-----END PGP SIGNATURE-----",
        "payload": "tree 4df5e2afe04d3bc5486c52b999ce5046995383f6\nparent ec20fd74b89272a4f53337ccdf7683a7f52bab11\nparent 7268f7b120327f26cec43006b7b04b9036cdb2aa\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420528718 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420528741 +0100\n\nMerge pull request #5603\n\n7268f7b Move arith_uint256 out of consensus and util (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b93b49b52237cf3d7203464cd2d67ed69a829691",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b93b49b52237cf3d7203464cd2d67ed69a829691",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b93b49b52237cf3d7203464cd2d67ed69a829691/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec20fd74b89272a4f53337ccdf7683a7f52bab11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec20fd74b89272a4f53337ccdf7683a7f52bab11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec20fd74b89272a4f53337ccdf7683a7f52bab11"
      },
      {
        "sha": "7268f7b120327f26cec43006b7b04b9036cdb2aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7268f7b120327f26cec43006b7b04b9036cdb2aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7268f7b120327f26cec43006b7b04b9036cdb2aa"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1ef88f0680792f50d2d6873e9f14cb285fb3af4d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b93b49b52237cf3d7203464cd2d67ed69a829691/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b93b49b52237cf3d7203464cd2d67ed69a829691/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b93b49b52237cf3d7203464cd2d67ed69a829691",
        "patch": "@@ -233,6 +233,7 @@ univalue_libbitcoin_univalue_a_SOURCES = \\\n libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_common_a_SOURCES = \\\n   allocators.cpp \\\n+  arith_uint256.cpp \\\n   amount.cpp \\\n   base58.cpp \\\n   chainparams.cpp \\\n@@ -262,7 +263,6 @@ libbitcoin_common_a_SOURCES = \\\n # backward-compatibility objects and their sanity checks are linked.\n libbitcoin_util_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_util_a_SOURCES = \\\n-  arith_uint256.cpp \\\n   chainparamsbase.cpp \\\n   clientversion.cpp \\\n   compat/glibc_sanity.cpp \\\n@@ -354,7 +354,6 @@ bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n libbitcoinconsensus_la_SOURCES = \\\n-  arith_uint256.cpp \\\n   crypto/hmac_sha512.cpp \\\n   crypto/ripemd160.cpp \\\n   crypto/sha1.cpp \\"
      }
    ]
  },
  {
    "sha": "7b879d3493e5b51c60522f71657941bd62e29334",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Yjg3OWQzNDkzZTViNTFjNjA1MjJmNzE2NTc5NDFiZDYyZTI5MzM0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-06T09:40:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-06T10:00:02Z"
      },
      "message": "Merge pull request #5532\n\nbe22b3d Update seed IPs, based on bitcoin.sipa.be crawler data (Pieter Wuille)",
      "tree": {
        "sha": "032cf49f6d1a4aeadd2257c808fb6e7661808cf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/032cf49f6d1a4aeadd2257c808fb6e7661808cf5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b879d3493e5b51c60522f71657941bd62e29334",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUq7IiAAoJEHSBCwEjRsmmV4wH/3ZClCOvMSmqTs1KEcaoo3W/\nOTWK4ikUycClA57d7s0JWUb/pTvvvDVEjGRHx3itRcBQqSEUJMJ91USPLL6jHDgP\nCB39T5oLhbZqKnJi+sFxTxB7p7B4TdoJ0AG8JfuTJcpw3wsFVtdPiQVoVO2o1Usb\nvLIHtmpXYFmcaEKDqRtCOGpQCWRJFpWkjOz5TBKQUFsUzJK1QAvE+fRD/j1ayugR\nqFOf7fy/sf19v+UAD/wzp82XC5W7kNk9stJTWZMVV6MeP57nWpEBFAE7vQX3y1SG\nFgPBt8SfuKOL3Iq5gWJHQG7QuXiGbrH7vb+45d5tumULg0eTzOmSdmGm4EKiRBU=\n=/FSC\n-----END PGP SIGNATURE-----",
        "payload": "tree 032cf49f6d1a4aeadd2257c808fb6e7661808cf5\nparent b93b49b52237cf3d7203464cd2d67ed69a829691\nparent be22b3da1df15757ef15e4c4963507bcdff6a872\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420537259 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420538402 +0100\n\nMerge pull request #5532\n\nbe22b3d Update seed IPs, based on bitcoin.sipa.be crawler data (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b879d3493e5b51c60522f71657941bd62e29334",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b879d3493e5b51c60522f71657941bd62e29334",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b879d3493e5b51c60522f71657941bd62e29334/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b93b49b52237cf3d7203464cd2d67ed69a829691",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b93b49b52237cf3d7203464cd2d67ed69a829691",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b93b49b52237cf3d7203464cd2d67ed69a829691"
      },
      {
        "sha": "be22b3da1df15757ef15e4c4963507bcdff6a872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be22b3da1df15757ef15e4c4963507bcdff6a872",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be22b3da1df15757ef15e4c4963507bcdff6a872"
      }
    ],
    "stats": {
      "total": 2340,
      "additions": 1123,
      "deletions": 1217
    },
    "files": [
      {
        "sha": "bc88201f0faec76552908fbe26b61f2de80aa8e2",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b879d3493e5b51c60522f71657941bd62e29334/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b879d3493e5b51c60522f71657941bd62e29334/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=7b879d3493e5b51c60522f71657941bd62e29334",
        "patch": "@@ -1,11 +1,8 @@\n ### Seeds ###\n \n-Utility to generate the pnSeed[] array that is compiled into the client\n-(see [src/net.cpp](/src/net.cpp)).\n+Utility to generate the seeds.txt list that is compiled into the client\n+(see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and [share/seeds](/share/seeds)).\n \n-The 600 seeds compiled into the 0.8 release were created from sipa's DNS seed data, like this:\n+The 512 seeds compiled into the 0.10 release were created from sipa's DNS seed data, like this:\n \n-\tcurl -s http://bitcoin.sipa.be/seeds.txt | head -1000 | makeseeds.py\n-\n-The input to makeseeds.py is assumed to be approximately sorted from most-reliable to least-reliable,\n-with IP:port first on each line (lines that don't match IPv4:port are ignored).\n+\tcurl -s http://bitcoin.sipa.be/seeds.txt | makeseeds.py"
      },
      {
        "sha": "b831395f2c717d0ec8245a6dae1268f16c31372b",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 104,
        "deletions": 18,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b879d3493e5b51c60522f71657941bd62e29334/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b879d3493e5b51c60522f71657941bd62e29334/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=7b879d3493e5b51c60522f71657941bd62e29334",
        "patch": "@@ -1,32 +1,118 @@\n #!/usr/bin/env python\n #\n-# Generate pnSeed[] from Pieter's DNS seeder\n+# Generate seeds.txt from Pieter's DNS seeder\n #\n \n-NSEEDS=600\n+NSEEDS=512\n+\n+MAX_SEEDS_PER_ASN=2\n+\n+MIN_BLOCKS = 337600\n+\n+# These are hosts that have been observed to be behaving strangely (e.g.\n+# aggressively connecting to every node).\n+SUSPICIOUS_HOSTS = set([\n+    \"130.211.129.106\", \"178.63.107.226\",\n+    \"83.81.130.26\", \"88.198.17.7\", \"148.251.238.178\", \"176.9.46.6\",\n+    \"54.173.72.127\", \"54.174.10.182\", \"54.183.64.54\", \"54.194.231.211\",\n+    \"54.66.214.167\", \"54.66.220.137\", \"54.67.33.14\", \"54.77.251.214\",\n+    \"54.94.195.96\", \"54.94.200.247\"\n+])\n \n import re\n import sys\n-from subprocess import check_output\n+import dns.resolver\n+\n+PATTERN_IPV4 = re.compile(r\"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):8333$\")\n+PATTERN_AGENT = re.compile(r\"^(\\/Satoshi:0.8.6\\/|\\/Satoshi:0.9.(2|3)\\/|\\/Satoshi:0.10.\\d{1,2}\\/)$\")\n+\n+def parseline(line):\n+    sline = line.split()\n+    if len(sline) < 11:\n+       return None\n+    # Match only IPv4\n+    m = PATTERN_IPV4.match(sline[0])\n+    if m is None:\n+        return None\n+    # Do IPv4 sanity check\n+    ip = 0\n+    for i in range(0,4):\n+        if int(m.group(i+2)) < 0 or int(m.group(i+2)) > 255:\n+            return None\n+        ip = ip + (int(m.group(i+2)) << (8*(3-i)))\n+    if ip == 0:\n+        return None\n+    # Skip bad results.\n+    if sline[1] == 0:\n+        return None\n+    # Extract uptime %.\n+    uptime30 = float(sline[7][:-1])\n+    # Extract Unix timestamp of last success.\n+    lastsuccess = int(sline[2])\n+    # Extract protocol version.\n+    version = int(sline[10])\n+    # Extract user agent.\n+    agent = sline[11][1:-1]\n+    # Extract service flags.\n+    service = int(sline[9], 16)\n+    # Extract blocks.\n+    blocks = int(sline[8])\n+    # Construct result.\n+    return {\n+        'ip': m.group(1),\n+        'ipnum': ip,\n+        'uptime': uptime30,\n+        'lastsuccess': lastsuccess,\n+        'version': version,\n+        'agent': agent,\n+        'service': service,\n+        'blocks': blocks,\n+    }\n+\n+# Based on Greg Maxwell's seed_filter.py\n+def filterbyasn(ips, max_per_asn, max_total):\n+    result = []\n+    asn_count = {}\n+    for ip in ips:\n+        if len(result) == max_total:\n+            break\n+        try:\n+            asn = int([x.to_text() for x in dns.resolver.query('.'.join(reversed(ip['ip'].split('.'))) + '.origin.asn.cymru.com', 'TXT').response.answer][0].split('\\\"')[1].split(' ')[0])\n+            if asn not in asn_count:\n+                asn_count[asn] = 0\n+            if asn_count[asn] == max_per_asn:\n+                continue\n+            asn_count[asn] += 1\n+            result.append(ip)\n+        except:\n+            sys.stderr.write('ERR: Could not resolve ASN for \"' + ip['ip'] + '\"\\n')\n+    return result\n \n def main():\n     lines = sys.stdin.readlines()\n+    ips = [parseline(line) for line in lines]\n+\n+    # Skip entries with valid IPv4 address.\n+    ips = [ip for ip in ips if ip is not None]\n+    # Skip entries from suspicious hosts.\n+    ips = [ip for ip in ips if ip['ip'] not in SUSPICIOUS_HOSTS]\n+    # Enforce minimal number of blocks.\n+    ips = [ip for ip in ips if ip['blocks'] >= MIN_BLOCKS]\n+    # Require service bit 1.\n+    ips = [ip for ip in ips if (ip['service'] & 1) == 1]\n+    # Require at least 50% 30-day uptime.\n+    ips = [ip for ip in ips if ip['uptime'] > 50]\n+    # Require a known and recent user agent.\n+    ips = [ip for ip in ips if PATTERN_AGENT.match(ip['agent'])]\n+    # Sort by availability (and use last success as tie breaker)\n+    ips.sort(key=lambda x: (x['uptime'], x['lastsuccess'], x['ip']), reverse=True)\n+    # Look up ASNs and limit results, both per ASN and globally.\n+    ips = filterbyasn(ips, MAX_SEEDS_PER_ASN, NSEEDS)\n+    # Sort the results by IP address (for deterministic output).\n+    ips.sort(key=lambda x: (x['ipnum']))\n \n-    ips = []\n-    pattern = re.compile(r\"^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}):8333\")\n-    for line in lines:\n-        m = pattern.match(line)\n-        if m is None:\n-            continue\n-        ip = 0\n-        for i in range(0,4):\n-            ip = ip + (int(m.group(i+1)) << (8*(i)))\n-        if ip == 0:\n-            continue\n-        ips.append(ip)\n-\n-    for row in range(0, min(NSEEDS,len(ips)), 8):\n-        print \"    \" + \", \".join([ \"0x%08x\"%i for i in ips[row:row+8] ]) + \",\"\n+    for ip in ips:\n+        print ip['ip']\n \n if __name__ == '__main__':\n     main()"
      },
      {
        "sha": "3dba6d8a6482996b4e9fc9cd4c134b41aecae080",
        "filename": "share/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 513,
        "deletions": 602,
        "changes": 1115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b879d3493e5b51c60522f71657941bd62e29334/share/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b879d3493e5b51c60522f71657941bd62e29334/share/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/seeds/nodes_main.txt?ref=7b879d3493e5b51c60522f71657941bd62e29334",
        "patch": "@@ -1,607 +1,518 @@\n # List of fixed seed nodes for main network\n \n-# IPv4 nodes (in old chainparams.cpp 0xDDCCBBAA format)\n-#  n.b. when importing a new list, there is no need to use this format, just use IPv4 dotted addresses directly\n-0x7e6a692e # 46.105.106.126\n-0x7d04d1a2 # 162.209.4.125\n-0x6c0c17d9 # 217.23.12.108\n-0xdb330ab9 # 185.10.51.219\n-0xc649c7c6 # 198.199.73.198\n-0x7895484d # 77.72.149.120\n-0x047109b0 # 176.9.113.4\n-0xb90ca5bc # 188.165.12.185\n-0xd130805f # 95.128.48.209\n-0xbd074ea6 # 166.78.7.189\n-0x578ff1c0 # 192.241.143.87\n-0x286e09b0 # 176.9.110.40\n-0xd4dcaf42 # 66.175.220.212\n-0x529b6bb8 # 184.107.155.82\n-0x635cc6c0 # 192.198.92.99\n-0xedde892e # 46.137.222.237\n-0xa976d9c7 # 199.217.118.169\n-0xea91a4b8 # 184.164.145.234\n-0x03fa4eb2 # 178.78.250.3\n-0x6ca9008d # 141.0.169.108\n-0xaf62c825 # 37.200.98.175\n-0x93f3ba51 # 81.186.243.147\n-0xc2c9efd5 # 213.239.201.194\n-0x0ed5175e # 94.23.213.14\n-0x487028bc # 188.40.112.72\n-0x7297c225 # 37.194.151.114\n-0x8af0c658 # 88.198.240.138\n-0x2e57ba1f # 31.186.87.46\n-0xd0098abc # 188.138.9.208\n-0x46a8853e # 62.133.168.70\n-0xcc92dc3e # 62.220.146.204\n-0xeb6f1955 # 85.25.111.235\n-0x8cce175e # 94.23.206.140\n-0x237281ae # 174.129.114.35\n-0x9d42795b # 91.121.66.157\n-0x4f4f0905 # 5.9.79.79\n-0xc50151d0 # 208.81.1.197\n-0xb1ba90c6 # 198.144.186.177\n-0xaed7175e # 94.23.215.174\n-0x204de55b # 91.229.77.32\n-0x4bb03245 # 69.50.176.75\n-0x932b28bc # 188.40.43.147\n-0x2dcce65b # 91.230.204.45\n-0xe2708abc # 188.138.112.226\n-0x1b08b8d5 # 213.184.8.27\n-0x12a3dc5b # 91.220.163.18\n-0x8a884c90 # 144.76.136.138\n-0xa386a8b8 # 184.168.134.163\n-0x18e417c6 # 198.23.228.24\n-0x2e709ac3 # 195.154.112.46\n-0xeb62e925 # 37.233.98.235\n-0x6f6503ae # 174.3.101.111\n-0x05d0814e # 78.129.208.5\n-0x8a9ac545 # 69.197.154.138\n-0x946fd65e # 94.214.111.148\n-0x3f57495d # 93.73.87.63\n-0x4a29c658 # 88.198.41.74\n-0xad454c90 # 144.76.69.173\n-0x15340905 # 5.9.52.21\n-0x4c3f3b25 # 37.59.63.76\n-0x01fe19b9 # 185.25.254.1\n-0x5620595b # 91.89.32.86\n-0x443c795b # 91.121.60.68\n-0x44f24ac8 # 200.74.242.68\n-0x0442464e # 78.70.66.4\n-0xc8665882 # 130.88.102.200\n-0xed3f3ec3 # 195.62.63.237\n-0xf585bf5d # 93.191.133.245\n-0x5dd141da # 218.65.209.93\n-0xf93a084e # 78.8.58.249\n-0x1264dd52 # 82.221.100.18\n-0x0711c658 # 88.198.17.7\n-0xf12e7bbe # 190.123.46.241\n-0x5b02b740 # 64.183.2.91\n-0x7d526dd5 # 213.109.82.125\n-0x0cb04c90 # 144.76.176.12\n-0x2abe1132 # 50.17.190.42\n-0x61a39f58 # 88.159.163.97\n-0x044a0618 # 24.6.74.4\n-0xf3af7dce # 206.125.175.243\n-0xb994c96d # 109.201.148.185\n-0x361c5058 # 88.80.28.54\n-0xca735d53 # 83.93.115.202\n-0xeca743b0 # 176.67.167.236\n-0xec790905 # 5.9.121.236\n-0xc4d37845 # 69.120.211.196\n-0xa1c4a2b2 # 178.162.196.161\n-0x726fd453 # 83.212.111.114\n-0x625cc6c0 # 192.198.92.98\n-0x6c20132e # 46.19.32.108\n-0xb7aa0c79 # 121.12.170.183\n-0xc6ed983d # 61.152.237.198\n-0x47e4cbc0 # 192.203.228.71\n-0xa4ac75d4 # 212.117.172.164\n-0xe2e59345 # 69.147.229.226\n-0x4d784ad0 # 208.74.120.77\n-0x18a5ec5e # 94.236.165.24\n-0x481cc85b # 91.200.28.72\n-0x7c6c2fd5 # 213.47.108.124\n-0x5e4d6018 # 24.96.77.94\n-0x5b4b6c18 # 24.108.75.91\n-0xd99b4c90 # 144.76.155.217\n-0xe63987dc # 220.135.57.230\n-0xb817bb25 # 37.187.23.184\n-0x141cfeb2 # 178.254.28.20\n-0x5f005058 # 88.80.0.95\n-0x0d987f47 # 71.127.152.13\n-0x242a496d # 109.73.42.36\n-0x3e519bc0 # 192.155.81.62\n-0x02b2454b # 75.69.178.2\n-0xdfaf3dc6 # 198.61.175.223\n-0x888128bc # 188.40.129.136\n-0x1165bb25 # 37.187.101.17\n-0xabfeca5b # 91.202.254.171\n-0x2ef63540 # 64.53.246.46\n-0x5773c7c6 # 198.199.115.87\n-0x1280dd52 # 82.221.128.18\n-0x8ebcacd9 # 217.172.188.142\n-0x81c439c6 # 198.57.196.129\n-0x39fcfa45 # 69.250.252.57\n-0x62177d41 # 65.125.23.98\n-0xc975ed62 # 98.237.117.201\n-0x05cff476 # 118.244.207.5\n-0xdabda743 # 67.167.189.218\n-0xaa1ac24e # 78.194.26.170\n-0xe255a22e # 46.162.85.226\n-0x88aac705 # 5.199.170.136\n-0xe707c658 # 88.198.7.231\n-0xa9e94b5e # 94.75.233.169\n-0x2893484b # 75.72.147.40\n-0x99512705 # 5.39.81.153\n-0xd63970ca # 202.112.57.214\n-0x45994f32 # 50.79.153.69\n-0xe519a8ad # 173.168.25.229\n-0x92e25f5d # 93.95.226.146\n-0x8b84a9c1 # 193.169.132.139\n-0x5eaa0a05 # 5.10.170.94\n-0xa74de55b # 91.229.77.167\n-0xb090ff62 # 98.255.144.176\n-0x5eee326c # 108.50.238.94\n-0xc331a679 # 121.166.49.195\n-0xc1d9b72e # 46.183.217.193\n-0x0c6ab982 # 130.185.106.12\n-0x7362bb25 # 37.187.98.115\n-0x4cfedd42 # 66.221.254.76\n-0x1e09a032 # 50.160.9.30\n-0xa4c34c5e # 94.76.195.164\n-0x3777d9c7 # 199.217.119.55\n-0x5edcf260 # 96.242.220.94\n-0x3ce2b548 # 72.181.226.60\n-0xd2ac0360 # 96.3.172.210\n-0x2f80b992 # 146.185.128.47\n-0x3e4cbb25 # 37.187.76.62\n-0x3995e236 # 54.226.149.57\n-0xd03977ae # 174.119.57.208\n-0x953cf054 # 84.240.60.149\n-0x3c654ed0 # 208.78.101.60\n-0x74024c90 # 144.76.2.116\n-0xa14f1155 # 85.17.79.161\n-0x14ce0125 # 37.1.206.20\n-0xc15ebb6a # 106.187.94.193\n-0x2c08c452 # 82.196.8.44\n-0xc7fd0652 # 82.6.253.199\n-0x7604f8ce # 206.248.4.118\n-0xffb38332 # 50.131.179.255\n-0xa4c2efd5 # 213.239.194.164\n-0xe9614018 # 24.64.97.233\n-0xab49e557 # 87.229.73.171\n-0x1648c052 # 82.192.72.22\n-0x36024047 # 71.64.2.54\n-0x0e8cffad # 173.255.140.14\n-0x21918953 # 83.137.145.33\n-0xb61f50ad # 173.80.31.182\n-0x9b406b59 # 89.107.64.155\n-0xaf282218 # 24.34.40.175\n-0x7f1d164e # 78.22.29.127\n-0x1f560da2 # 162.13.86.31\n-0xe237be58 # 88.190.55.226\n-0xbdeb1955 # 85.25.235.189\n-0x6c0717d9 # 217.23.7.108\n-0xdaf8ce62 # 98.206.248.218\n-0x0f74246c # 108.36.116.15\n-0xdee95243 # 67.82.233.222\n-0xf23f1a56 # 86.26.63.242\n-0x61bdf867 # 103.248.189.97\n-0xd254c854 # 84.200.84.210\n-0xc4422e4e # 78.46.66.196\n-0xae0563c0 # 192.99.5.174\n-0xbdb9a95f # 95.169.185.189\n-0xa9eb32c6 # 198.50.235.169\n-0xd9943950 # 80.57.148.217\n-0x116add52 # 82.221.106.17\n-0x73a54c90 # 144.76.165.115\n-0xb36b525e # 94.82.107.179\n-0xd734175e # 94.23.52.215\n-0x333d7f76 # 118.127.61.51\n-0x51431bc6 # 198.27.67.81\n-0x084ae5cf # 207.229.74.8\n-0xa60a236c # 108.35.10.166\n-0x5c67692e # 46.105.103.92\n-0x0177cf45 # 69.207.119.1\n-0xa6683ac6 # 198.58.104.166\n-0x7ff4ea47 # 71.234.244.127\n-0x2192fab2 # 178.250.146.33\n-0xa03a0f46 # 70.15.58.160\n-0xfe3e39ae # 174.57.62.254\n-0x2cce5fc1 # 193.95.206.44\n-0xc8a6c148 # 72.193.166.200\n-0x96fb7e4c # 76.126.251.150\n-0x0a66c752 # 82.199.102.10\n-0x6b4d2705 # 5.39.77.107\n-0xeba0c118 # 24.193.160.235\n-0x3ba0795b # 91.121.160.59\n-0x1dccd23e # 62.210.204.29\n-0x6912f3a2 # 162.243.18.105\n-0x22f23c41 # 65.60.242.34\n-0x65646b4a # 74.107.100.101\n-0x8b9f8705 # 5.135.159.139\n-0xeb9b9a95 # 149.154.155.235\n-0x79fe6b4e # 78.107.254.121\n-0x0536f447 # 71.244.54.5\n-0x23224d61 # 97.77.34.35\n-0x5d952ec6 # 198.46.149.93\n-0x0cb4f736 # 54.247.180.12\n-0xdc14be6d # 109.190.20.220\n-0xb24609b0 # 176.9.70.178\n-0xd3f79b62 # 98.155.247.211\n-0x6518c836 # 54.200.24.101\n-0x83a3cf42 # 66.207.163.131\n-0x9b641fb0 # 176.31.100.155\n-0x17fef1c0 # 192.241.254.23\n-0xd508cc82 # 130.204.8.213\n-0x91a4369b # 155.54.164.145\n-0x39cb4a4c # 76.74.203.57\n-0xbbc9536c # 108.83.201.187\n-0xaf64c44a # 74.196.100.175\n-0x605eca50 # 80.202.94.96\n-0x0c6a6805 # 5.104.106.12\n-0xd07e9d4e # 78.157.126.208\n-0x78e6d3a2 # 162.211.230.120\n-0x1b31eb6d # 109.235.49.27\n-0xaa01feb2 # 178.254.1.170\n-0x4603c236 # 54.194.3.70\n-0x1ecba3b6 # 182.163.203.30\n-0x0effe336 # 54.227.255.14\n-0xc3fdcb36 # 54.203.253.195\n-0xc290036f # 111.3.144.194\n-0x4464692e # 46.105.100.68\n-0x1aca7589 # 137.117.202.26\n-0x59a9e52e # 46.229.169.89\n-0x19aa7489 # 137.116.170.25\n-0x2622c85e # 94.200.34.38\n-0xa598d318 # 24.211.152.165\n-0x438ec345 # 69.195.142.67\n-0xc79619b9 # 185.25.150.199\n-0xaf570360 # 96.3.87.175\n-0x5098e289 # 137.226.152.80\n-0x36add862 # 98.216.173.54\n-0x83c1a2b2 # 178.162.193.131\n-0x969d0905 # 5.9.157.150\n-0xcf3d156c # 108.21.61.207\n-0x49c1a445 # 69.164.193.73\n-0xbd0b7562 # 98.117.11.189\n-0x8fff1955 # 85.25.255.143\n-0x1e51fe53 # 83.254.81.30\n-0x28d6efd5 # 213.239.214.40\n-0x2837cc62 # 98.204.55.40\n-0x02f42d42 # 66.45.244.2\n-0x070e3fb2 # 178.63.14.7\n-0xbcb18705 # 5.135.177.188\n-0x14a4e15b # 91.225.164.20\n-0x82096844 # 68.104.9.130\n-0xcfcb1c2e # 46.28.203.207\n-0x37e27fc7 # 199.127.226.55\n-0x07923748 # 72.55.146.7\n-0x0c14bc2e # 46.188.20.12\n-0x26100905 # 5.9.16.38\n-0xcb7cd93e # 62.217.124.203\n-0x3bc0d2c0 # 192.210.192.59\n-0x97131b4c # 76.27.19.151\n-0x6f1e5c17 # 23.92.30.111\n-0xa7939f43 # 67.159.147.167\n-0xb7a0bf58 # 88.191.160.183\n-0xafa83a47 # 71.58.168.175\n-0xcbb83f32 # 50.63.184.203\n-0x5f321cb0 # 176.28.50.95\n-0x52d6c3c7 # 199.195.214.82\n-0xdeac5bc7 # 199.91.172.222\n-0x2cf310cc # 204.16.243.44\n-0x108a2bc3 # 195.43.138.16\n-0x726fa14f # 79.161.111.114\n-0x85bad2cc # 204.210.186.133\n-0x459e4c90 # 144.76.158.69\n-0x1a08b8d8 # 216.184.8.26\n-0xcd7048c6 # 198.72.112.205\n-0x6d5b4c90 # 144.76.91.109\n-0xa66cfe7b # 123.254.108.166\n-0xad730905 # 5.9.115.173\n-0xdaac5bc7 # 199.91.172.218\n-0x8417fd9f # 159.253.23.132\n-0x41377432 # 50.116.55.65\n-0x1f138632 # 50.134.19.31\n-0x295a12b2 # 178.18.90.41\n-0x7ac031b2 # 178.49.192.122\n-0x3a87d295 # 149.210.135.58\n-0xe219bc2e # 46.188.25.226\n-0xf485d295 # 149.210.133.244\n-0x137b6405 # 5.100.123.19\n-0xcfffd9ad # 173.217.255.207\n-0xafe20844 # 68.8.226.175\n-0x32679a5f # 95.154.103.50\n-0xa431c644 # 68.198.49.164\n-0x0e5fce8c # 140.206.95.14\n-0x305ef853 # 83.248.94.48\n-0xad26ca32 # 50.202.38.173\n-0xd9d21a54 # 84.26.210.217\n-0xddd0d736 # 54.215.208.221\n-0xc24ec0c7 # 199.192.78.194\n-0x4aadcd5b # 91.205.173.74\n-0x49109852 # 82.152.16.73\n-0x9d6b3ac6 # 198.58.107.157\n-0xf0aa1e8b # 139.30.170.240\n-0xf1bfa343 # 67.163.191.241\n-0x8a30c0ad # 173.192.48.138\n-0x260f93d4 # 212.147.15.38\n-0x2339e760 # 96.231.57.35\n-0x8869959f # 159.149.105.136\n-0xc207216c # 108.33.7.194\n-0x29453448 # 72.52.69.41\n-0xb651ec36 # 54.236.81.182\n-0x45496259 # 89.98.73.69\n-0xa23d1bcc # 204.27.61.162\n-0xb39bcf43 # 67.207.155.179\n-0xa1d29432 # 50.148.210.161\n-0x3507c658 # 88.198.7.53\n-0x4a88dd62 # 98.221.136.74\n-0x27aff363 # 99.243.175.39\n-0x7498ea6d # 109.234.152.116\n-0x4a6785d5 # 213.133.103.74\n-0x5e6d47c2 # 194.71.109.94\n-0x3baba542 # 66.165.171.59\n-0x045a37ae # 174.55.90.4\n-0xa24dc0c7 # 199.192.77.162\n-0xe981ea4d # 77.234.129.233\n-0xed6ce217 # 23.226.108.237\n-0x857214c6 # 198.20.114.133\n-0x6b6c0464 # 100.4.108.107\n-0x5a4945b8 # 184.69.73.90\n-0x12f24742 # 66.71.242.18\n-0xf35f42ad # 173.66.95.243\n-0xfd0f5a4e # 78.90.15.253\n-0xfb081556 # 86.21.8.251\n-0xb24b5861 # 97.88.75.178\n-0x2e114146 # 70.65.17.46\n-0xb7780905 # 5.9.120.183\n-0x33bb0e48 # 72.14.187.51\n-0x39e26556 # 86.101.226.57\n-0xa794484d # 77.72.148.167\n-0x4225424d # 77.66.37.66\n-0x3003795b # 91.121.3.48\n-0x31c8cf44 # 68.207.200.49\n-0xd65bad59 # 89.173.91.214\n-0x127bc648 # 72.198.123.18\n-0xf2bc4d4c # 76.77.188.242\n-0x0273dc50 # 80.220.115.2\n-0x4572d736 # 54.215.114.69\n-0x064bf653 # 83.246.75.6\n-0xcdcd126c # 108.18.205.205\n-0x608281ae # 174.129.130.96\n-0x4d130087 # 135.0.19.77\n-0x1016f725 # 37.247.22.16\n-0xba185fc0 # 192.95.24.186\n-0x16c1a84f # 79.168.193.22\n-0xfb697252 # 82.114.105.251\n-0xa2942360 # 96.35.148.162\n-0x53083b6c # 108.59.8.83\n-0x0583f1c0 # 192.241.131.5\n-0x2d5a2441 # 65.36.90.45\n-0xc172aa43 # 67.170.114.193\n-0xcd11cf36 # 54.207.17.205\n-0x7b14ed62 # 98.237.20.123\n-0x5c94f1c0 # 192.241.148.92\n-0x7c23132e # 46.19.35.124\n-0x39965a6f # 111.90.150.57\n-0x7890e24e # 78.226.144.120\n-0xa38ec447 # 71.196.142.163\n-0xc187f1c0 # 192.241.135.193\n-0xef80b647 # 71.182.128.239\n-0xf20a7432 # 50.116.10.242\n-0x7ad1d8d2 # 210.216.209.122\n-0x869e2ec6 # 198.46.158.134\n-0xccdb5c5d # 93.92.219.204\n-0x9d11f636 # 54.246.17.157\n-0x2161bb25 # 37.187.97.33\n-0x7599f889 # 137.248.153.117\n-0x2265ecad # 173.236.101.34\n-0x0f4f0e55 # 85.14.79.15\n-0x7d25854a # 74.133.37.125\n-0xf857e360 # 96.227.87.248\n-0xf83f3d6c # 108.61.63.248\n-0x9cc93bb8 # 184.59.201.156\n-0x02716857 # 87.104.113.2\n-0x5dd8a177 # 119.161.216.93\n-0x8adc6cd4 # 212.108.220.138\n-0xe5613d46 # 70.61.97.229\n-0x6a734f50 # 80.79.115.106\n-0x2a5c3bae # 174.59.92.42\n-0x4a04c3d1 # 209.195.4.74\n-0xe4613d46 # 70.61.97.228\n-0x8426f4bc # 188.244.38.132\n-0x3e1b5fc0 # 192.95.27.62\n-0x0d5a3c18 # 24.60.90.13\n-0xd0f6d154 # 84.209.246.208\n-0x21c7ff5e # 94.255.199.33\n-0xeb3f3d6c # 108.61.63.235\n-0x9da5edc0 # 192.237.165.157\n-0x5d753b81 # 129.59.117.93\n-0x0d8d53d4 # 212.83.141.13\n-0x2613f018 # 24.240.19.38\n-0x4443698d # 141.105.67.68\n-0x8ca1edcd # 205.237.161.140\n-0x10ed3f4e # 78.63.237.16\n-0x789b403a # 58.64.155.120\n-0x7b984a4b # 75.74.152.123\n-0x964ebc25 # 37.188.78.150\n-0x7520ee60 # 96.238.32.117\n-0x4f4828bc # 188.40.72.79\n-0x115c407d # 125.64.92.17\n-0x32dd0667 # 103.6.221.50\n-0xa741715e # 94.113.65.167\n-0x1d3f3532 # 50.53.63.29\n-0x817d1f56 # 86.31.125.129\n-0x2f99a552 # 82.165.153.47\n-0x6b2a5956 # 86.89.42.107\n-0x8d4f4f05 # 5.79.79.141\n-0xd23c1e17 # 23.30.60.210\n-0x98993748 # 72.55.153.152\n-0x2c92e536 # 54.229.146.44\n-0x237ebdc3 # 195.189.126.35\n-0xa762fb43 # 67.251.98.167\n-0x32016b71 # 113.107.1.50\n-0xd0e7cf79 # 121.207.231.208\n-0x7d35bdd5 # 213.189.53.125\n-0x53dac3d2 # 210.195.218.83\n-0x31016b71 # 113.107.1.49\n-0x7fb8f8ce # 206.248.184.127\n-0x9a38c232 # 50.194.56.154\n-0xefaa42ad # 173.66.170.239\n-0x876b823d # 61.130.107.135\n-0x18175347 # 71.83.23.24\n-0xdb46597d # 125.89.70.219\n-0xd2c168da # 218.104.193.210\n-0xcd6fe9dc # 220.233.111.205\n-0x45272e4e # 78.46.39.69\n-0x8d4bca5b # 91.202.75.141\n-0xa4043d47 # 71.61.4.164\n-0xaab7aa47 # 71.170.183.170\n-0x202881ae # 174.129.40.32\n-0xa4aef160 # 96.241.174.164\n-0xecd7e6bc # 188.230.215.236\n-0x391359ad # 173.89.19.57\n-0xd8cc9318 # 24.147.204.216\n-0xbbeee52e # 46.229.238.187\n-0x077067b0 # 176.103.112.7\n-0xebd39d62 # 98.157.211.235\n-0x0cedc547 # 71.197.237.12\n-0x23d3e15e # 94.225.211.35\n-0xa5a81318 # 24.19.168.165\n-0x179a32c6 # 198.50.154.23\n-0xe4d3483d # 61.72.211.228\n-0x03680905 # 5.9.104.3\n-0xe8018abc # 188.138.1.232\n-0xdde9ef5b # 91.239.233.221\n-0x438b8705 # 5.135.139.67\n-0xb48224a0 # 160.36.130.180\n-0xcbd69218 # 24.146.214.203\n-0x9075795b # 91.121.117.144\n-0xc6411c3e # 62.28.65.198\n-0x03833f5c # 92.63.131.3\n-0xf33f8b5e # 94.139.63.243\n-0x495e464b # 75.70.94.73\n-0x83c8e65b # 91.230.200.131\n-0xac09cd25 # 37.205.9.172\n-0xdaabc547 # 71.197.171.218\n-0x7665a553 # 83.165.101.118\n-0xc5263718 # 24.55.38.197\n-0x2fd0c5cd # 205.197.208.47\n-0x22224d61 # 97.77.34.34\n-0x3e954048 # 72.64.149.62\n-0xfaa37557 # 87.117.163.250\n-0x36dbc658 # 88.198.219.54\n-0xa81453d0 # 208.83.20.168\n-0x5a941f5d # 93.31.148.90\n-0xa598ea60 # 96.234.152.165\n-0x65384ac6 # 198.74.56.101\n-0x10aaa545 # 69.165.170.16\n-0xaaab795b # 91.121.171.170\n-0xdda7024c # 76.2.167.221\n-0x0966f4c6 # 198.244.102.9\n-0x68571c08 # 8.28.87.104\n-0x8b40ee59 # 89.238.64.139\n-0x33ac096c # 108.9.172.51\n-0x844b4c4b # 75.76.75.132\n-0xd392254d # 77.37.146.211\n-0xba4d5a46 # 70.90.77.186\n-0x63029653 # 83.150.2.99\n-0xf655f636 # 54.246.85.246\n-0xbe4c4bb1 # 177.75.76.190\n-0x45dad036 # 54.208.218.69\n-0x204bc052 # 82.192.75.32\n-0x06c3a2b2 # 178.162.195.6\n-0xf31fba6a # 106.186.31.243\n-0xb21f09b0 # 176.9.31.178\n-0x540d0751 # 81.7.13.84\n-0xc7b46a57 # 87.106.180.199\n-0x6a11795b # 91.121.17.106\n-0x3d514045 # 69.64.81.61\n-0x0318aa6d # 109.170.24.3\n-0x30306ec3 # 195.110.48.48\n-0x5c077432 # 50.116.7.92\n-0x259ae46d # 109.228.154.37\n-0x82bbd35f # 95.211.187.130\n-0xae4222c0 # 192.34.66.174\n-0x254415d4 # 212.21.68.37\n-0xbd5f574b # 75.87.95.189\n-0xd8fd175e # 94.23.253.216\n-0x0a3f38c3 # 195.56.63.10\n-0x2dce6bb8 # 184.107.206.45\n-0xc201d058 # 88.208.1.194\n-0x17fca5bc # 188.165.252.23\n-0xe8453cca # 202.60.69.232\n-0xd361f636 # 54.246.97.211\n-0xa0d9edc0 # 192.237.217.160\n-0x2f232e4e # 78.46.35.47\n-0x134e116c # 108.17.78.19\n-0x61ddc058 # 88.192.221.97\n-0x05ba7283 # 131.114.186.5\n-0xe1f7ed5b # 91.237.247.225\n-0x040ec452 # 82.196.14.4\n-0x4b672e4e # 78.46.103.75\n-0xe4efa36d # 109.163.239.228\n-0x47dca52e # 46.165.220.71\n-0xe9332e4e # 78.46.51.233\n-0xa3acb992 # 146.185.172.163\n-0x24714c90 # 144.76.113.36\n-0xa8cc8632 # 50.134.204.168\n-0x26b1ce6d # 109.206.177.38\n-0x264e53d4 # 212.83.78.38\n-0xd3d2718c # 140.113.210.211\n-0x225534ad # 173.52.85.34\n-0xe289f3a2 # 162.243.137.226\n-0x87341717 # 23.23.52.135\n-0x9255ad4f # 79.173.85.146\n-0x184bbb25 # 37.187.75.24\n-0x885c7abc # 188.122.92.136\n-0x3a6e9ac6 # 198.154.110.58\n-0x1924185e # 94.24.36.25\n-0xb73d4c90 # 144.76.61.183\n-0x946d807a # 122.128.109.148\n-0xa0d78e3f # 63.142.215.160\n-0x5a16bb25 # 37.187.22.90\n-0xcb09795b # 91.121.9.203\n-0x8d0de657 # 87.230.13.141\n-0x630b8b25 # 37.139.11.99\n-0xe572c6cf # 207.198.114.229\n-0x2b3f1118 # 24.17.63.43\n-0x4242a91f # 31.169.66.66\n-0x32990905 # 5.9.153.50\n-0x058b0905 # 5.9.139.5\n-0xe266fc60 # 96.252.102.226\n-0xbe66c5b0 # 176.197.102.190\n-0xcc98e46d # 109.228.152.204\n-0x698c943e # 62.148.140.105\n-0x44bd0cc3 # 195.12.189.68\n-0x865c7abc # 188.122.92.134\n-0x771764d3 # 211.100.23.119\n-0x4675d655 # 85.214.117.70\n-0x354e4826 # 38.72.78.53\n-0xb67ac152 # 82.193.122.182\n-0xaeccf285 # 133.242.204.174\n-0xea625b4e # 78.91.98.234\n-0xbcd6031f # 31.3.214.188\n-0x5e81eb18 # 24.235.129.94\n-0x74b347ce # 206.71.179.116\n-0x3ca56ac1 # 193.106.165.60\n-0x54ee4546 # 70.69.238.84\n-0x38a8175e # 94.23.168.56\n-0xa3c21155 # 85.17.194.163\n-0x2f01576d # 109.87.1.47\n-0x5d7ade50 # 80.222.122.93\n-0xa003ae48 # 72.174.3.160\n-0x2bc1d31f # 31.211.193.43\n-0x13f5094c # 76.9.245.19\n-0x7ab32648 # 72.38.179.122\n-0x542e9fd5 # 213.159.46.84\n-0x53136bc1 # 193.107.19.83\n-0x7fdf51c0 # 192.81.223.127\n-0x802197b2 # 178.151.33.128\n-0xa2d2cc5b # 91.204.210.162\n-0x6b5f4bc0 # 192.75.95.107\n+# IPv4 nodes (generated using contrib/seeds/makeseeds.py)\n+1.33.197.110\n+1.34.180.245\n+1.202.128.218\n+2.35.195.25\n+5.100.123.19\n+5.175.145.169\n+5.199.133.193\n+5.199.151.10\n+5.228.1.230\n+14.200.200.145\n+18.228.0.188\n+18.228.0.200\n+23.30.243.153\n+23.88.232.49\n+23.99.105.9\n+23.226.137.208\n+23.227.177.161\n+23.227.191.50\n+23.229.45.32\n+23.236.144.69\n+23.253.148.113\n+23.253.241.22\n+23.255.227.231\n+24.20.205.222\n+24.23.120.252\n+24.94.98.96\n+24.98.95.201\n+24.111.90.55\n+24.119.119.105\n+24.138.25.149\n+31.3.214.45\n+31.186.87.46\n+31.186.101.98\n+31.186.250.186\n+31.204.153.107\n+37.44.16.231\n+37.44.44.11\n+37.120.168.204\n+37.143.86.26\n+37.187.75.24\n+37.188.68.169\n+37.192.95.150\n+37.201.246.116\n+37.205.10.140\n+46.10.210.17\n+46.19.138.154\n+46.28.204.123\n+46.28.205.67\n+46.38.235.229\n+46.163.76.230\n+46.166.162.91\n+46.173.190.50\n+46.227.66.132\n+46.229.238.187\n+46.236.116.209\n+47.55.14.65\n+50.7.252.229\n+50.46.159.91\n+50.78.49.181\n+50.78.231.57\n+50.79.153.65\n+50.116.34.44\n+50.126.86.253\n+50.142.41.23\n+50.199.113.193\n+50.200.78.107\n+50.206.138.177\n+50.252.52.49\n+54.165.25.75\n+54.169.107.40\n+54.179.190.56\n+54.187.82.121\n+54.246.85.246\n+58.74.7.205\n+58.96.183.121\n+61.62.58.38\n+61.63.91.72\n+61.63.91.112\n+61.72.211.228\n+62.43.40.154\n+62.43.130.178\n+62.80.185.213\n+62.109.49.26\n+62.173.139.58\n+62.181.238.186\n+62.210.114.127\n+63.141.228.138\n+63.153.213.78\n+63.223.84.145\n+63.251.88.112\n+64.31.110.50\n+64.34.121.45\n+64.114.6.42\n+64.140.125.98\n+64.156.193.100\n+65.30.47.116\n+65.35.132.177\n+65.96.193.165\n+65.111.189.26\n+66.68.10.30\n+66.114.33.250\n+66.130.46.63\n+66.175.215.135\n+66.190.253.165\n+66.194.38.254\n+66.244.98.111\n+67.162.238.30\n+67.169.255.17\n+67.183.173.25\n+67.219.233.140\n+67.227.240.115\n+67.247.222.71\n+68.43.114.66\n+68.52.33.36\n+68.198.245.241\n+69.12.226.165\n+69.13.198.188\n+69.15.179.62\n+69.39.239.47\n+69.47.45.87\n+69.62.217.206\n+69.64.42.31\n+69.64.81.61\n+69.67.219.200\n+69.90.132.157\n+69.94.30.177\n+69.136.175.241\n+70.61.97.228\n+70.123.118.132\n+71.59.152.182\n+71.198.248.151\n+71.200.242.89\n+71.225.179.157\n+72.14.187.51\n+72.38.34.180\n+72.52.72.187\n+72.91.144.182\n+72.167.49.217\n+72.201.243.55\n+72.223.60.249\n+72.228.153.102\n+73.26.101.228\n+73.50.158.200\n+73.181.204.170\n+74.57.199.180\n+74.63.222.226\n+74.81.231.21\n+74.193.126.82\n+74.207.235.164\n+75.83.197.114\n+75.144.114.9\n+76.112.5.247\n+76.174.20.247\n+77.37.240.142\n+77.57.202.107\n+77.172.123.53\n+77.221.91.253\n+77.235.48.48\n+77.245.78.2\n+78.8.58.249\n+78.27.191.182\n+78.129.236.141\n+78.131.88.47\n+78.157.205.6\n+79.132.230.144\n+79.143.188.155\n+79.160.221.140\n+79.161.111.114\n+80.100.189.3\n+80.147.140.121\n+80.203.75.133\n+80.220.99.227\n+80.222.20.169\n+80.241.1.7\n+81.23.191.243\n+81.38.11.202\n+81.80.9.71\n+81.110.213.165\n+81.133.155.237\n+81.171.34.37\n+81.181.155.180\n+82.39.156.137\n+82.73.161.95\n+82.130.45.40\n+82.165.153.47\n+82.168.128.133\n+82.179.225.118\n+82.194.245.158\n+82.199.102.10\n+82.211.30.243\n+82.217.133.145\n+82.221.128.35\n+82.221.131.177\n+82.233.225.205\n+83.0.249.146\n+83.89.31.249\n+83.128.29.231\n+83.128.253.142\n+83.143.130.56\n+83.150.2.99\n+83.150.9.196\n+83.161.64.45\n+83.212.103.212\n+83.212.111.114\n+83.246.75.8\n+83.254.81.31\n+83.254.150.54\n+84.2.34.104\n+84.15.61.60\n+84.17.25.135\n+84.42.144.19\n+84.212.210.135\n+84.215.165.231\n+84.238.140.176\n+84.240.31.184\n+85.25.214.137\n+85.139.163.132\n+85.199.4.228\n+85.214.61.209\n+85.214.108.77\n+86.123.16.17\n+87.48.42.199\n+87.104.168.104\n+87.229.73.171\n+87.236.196.77\n+88.97.56.98\n+88.134.178.89\n+88.150.233.19\n+88.168.133.3\n+88.208.18.246\n+88.208.33.202\n+89.18.28.21\n+89.85.220.84\n+89.163.227.28\n+89.184.83.60\n+89.231.96.83\n+89.236.49.117\n+91.90.66.209\n+91.106.194.97\n+91.134.75.115\n+91.152.193.36\n+91.152.219.35\n+91.197.10.234\n+91.209.77.101\n+91.210.106.147\n+91.214.200.205\n+91.223.115.38\n+91.234.48.232\n+91.250.86.18\n+92.27.7.209\n+92.255.207.73\n+93.74.163.234\n+93.84.114.106\n+93.152.166.29\n+93.171.216.221\n+93.185.177.71\n+94.19.12.244\n+94.42.115.50\n+94.79.177.206\n+94.136.147.119\n+94.143.245.5\n+94.188.50.39\n+94.190.227.112\n+94.198.135.29\n+94.226.107.86\n+94.242.219.90\n+94.242.229.168\n+94.244.160.84\n+95.31.10.209\n+95.85.25.41\n+95.105.161.136\n+95.154.165.45\n+95.154.200.216\n+95.167.109.125\n+95.211.125.231\n+95.211.216.235\n+96.33.25.17\n+96.43.130.178\n+97.118.8.236\n+98.102.6.125\n+98.202.20.45\n+98.217.125.225\n+98.234.210.111\n+98.237.20.123\n+98.255.144.176\n+99.113.64.43\n+99.229.22.8\n+103.1.212.19\n+103.30.42.189\n+103.224.165.48\n+103.243.94.140\n+104.131.107.107\n+104.131.116.184\n+104.143.0.156\n+104.219.184.9\n+106.185.38.174\n+107.6.4.145\n+107.150.8.27\n+107.150.33.20\n+107.170.228.129\n+107.170.240.173\n+108.51.20.86\n+108.61.149.222\n+108.61.151.172\n+108.161.129.247\n+108.170.140.21\n+109.60.211.216\n+109.73.42.36\n+109.73.172.138\n+109.163.235.239\n+109.190.196.220\n+109.201.135.216\n+109.228.152.2\n+109.228.154.81\n+109.230.220.125\n+109.234.156.218\n+109.235.49.27\n+109.235.69.84\n+112.124.71.0\n+113.146.68.251\n+115.29.17.82\n+115.70.176.17\n+117.41.162.184\n+118.27.8.170\n+119.230.7.211\n+119.246.71.52\n+121.172.8.100\n+122.128.109.148\n+123.231.224.63\n+128.175.195.31\n+128.199.164.96\n+128.199.254.244\n+129.97.69.76\n+129.123.7.7\n+129.123.7.39\n+129.186.17.17\n+131.247.169.190\n+133.242.209.63\n+134.102.94.38\n+134.119.17.145\n+137.116.160.176\n+137.226.34.42\n+138.210.217.170\n+141.255.166.194\n+143.215.129.126\n+144.76.244.19\n+146.148.52.162\n+146.148.80.57\n+146.185.19.30\n+146.185.142.86\n+146.185.253.51\n+148.251.6.214\n+149.154.155.235\n+149.210.133.244\n+151.224.248.252\n+153.121.75.229\n+153.127.251.67\n+154.20.2.139\n+157.13.61.5\n+158.58.173.48\n+159.253.23.132\n+162.209.110.218\n+162.213.254.205\n+162.239.254.100\n+162.242.150.39\n+162.243.81.138\n+162.243.235.56\n+162.244.79.16\n+162.245.217.119\n+162.248.102.117\n+162.251.108.53\n+162.254.149.139\n+162.255.116.78\n+166.70.94.106\n+167.88.45.124\n+167.88.120.210\n+173.26.49.43\n+173.30.14.6\n+173.80.114.197\n+173.167.214.243\n+173.208.219.108\n+173.220.67.156\n+173.236.101.34\n+173.246.107.34\n+173.255.237.241\n+174.2.213.209\n+174.51.23.224\n+174.51.123.159\n+174.57.212.121\n+174.109.33.28\n+175.126.124.91\n+175.126.124.92\n+176.10.116.242\n+176.36.35.126\n+176.36.99.222\n+176.124.110.47\n+176.194.33.44\n+176.223.201.198\n+178.62.26.83\n+178.62.36.48\n+178.62.212.141\n+178.62.254.59\n+178.78.250.3\n+178.155.86.226\n+178.175.134.35\n+178.248.111.4\n+178.254.1.170\n+178.254.34.161\n+179.43.114.14\n+182.213.208.28\n+184.68.2.46\n+184.72.238.42\n+184.94.226.34\n+184.94.227.58\n+184.107.139.58\n+184.107.206.45\n+185.10.48.117\n+185.21.216.156\n+185.38.47.224\n+185.45.192.129\n+185.53.129.230\n+185.53.131.114\n+185.55.53.61\n+185.55.53.63\n+185.61.119.2\n+185.61.148.203\n+186.2.167.23\n+188.92.75.178\n+188.122.92.134\n+188.138.9.208\n+188.165.209.148\n+188.226.206.239\n+190.10.8.124\n+190.10.10.147\n+192.0.130.142\n+192.3.89.159\n+192.73.234.138\n+192.75.95.107\n+192.95.100.102\n+192.155.84.181\n+192.169.233.206\n+192.198.93.86\n+192.227.135.216\n+193.0.109.3\n+193.77.50.208\n+193.109.68.62\n+193.150.121.37\n+193.224.69.98\n+194.79.8.37\n+194.141.86.10\n+195.12.180.94\n+195.56.63.10\n+195.116.93.93\n+195.154.174.226\n+195.159.111.98\n+195.169.138.2\n+195.189.126.35\n+195.197.175.190\n+197.242.93.82\n+198.11.214.147\n+198.49.41.21\n+199.33.124.186\n+199.204.186.146\n+199.233.238.115\n+199.241.189.66\n+202.60.68.242\n+202.60.69.232\n+203.183.151.39\n+203.219.14.204\n+204.44.123.109\n+204.44.123.162\n+204.45.120.178\n+206.190.134.44\n+206.248.184.127\n+207.244.73.8\n+208.66.30.27\n+209.81.9.223\n+209.105.243.229\n+209.126.70.159\n+209.140.30.169\n+209.165.128.235\n+209.190.2.242\n+210.66.254.236\n+210.73.27.33\n+211.72.66.229\n+212.25.37.124\n+212.71.235.114\n+212.71.252.109\n+212.114.48.31\n+212.174.151.118\n+213.66.205.194\n+213.129.248.139\n+213.136.87.34\n+213.165.82.133\n+213.167.17.6\n+213.179.158.253\n+213.189.53.125\n+213.222.208.93\n+216.49.158.161\n+216.55.143.154\n+216.131.91.100\n+216.245.206.181\n+216.250.138.230\n+217.11.225.189\n+217.23.6.133\n+217.75.88.178\n+217.172.143.140\n+217.195.169.209\n+217.196.248.106\n+219.138.161.162\n+222.167.248.90\n+223.18.254.55\n \n # Onion nodes\n bitcoinostk4e4re.onion:8333"
      },
      {
        "sha": "6b6e5103f5fddce3439046d4ec0006a865730f53",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 502,
        "deletions": 590,
        "changes": 1092,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b879d3493e5b51c60522f71657941bd62e29334/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b879d3493e5b51c60522f71657941bd62e29334/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=7b879d3493e5b51c60522f71657941bd62e29334"
      }
    ]
  },
  {
    "sha": "a89b8371d6243242c2bb75a6005e7b4584ea6e6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODliODM3MWQ2MjQzMjQyYzJiYjc1YTYwMDVlN2I0NTg0ZWE2ZTZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-06T10:51:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-06T10:51:18Z"
      },
      "message": "Merge pull request #5564\n\nde236f5 clarify obscure uses of EvalScript() (Pavel Vasin)",
      "tree": {
        "sha": "03636b2daccca221a553ef26b8f5b61fe6d7a5b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03636b2daccca221a553ef26b8f5b61fe6d7a5b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a89b8371d6243242c2bb75a6005e7b4584ea6e6d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUq74mAAoJEHSBCwEjRsmmPuIIAKxtekcC6icTr2lCUeIBg0Cr\ndnRk2iZ7zhXfjfAYiho0wi8kcTX4dWA1XFg2EZyW/22cqXV8Fbrt6LZkrJZd/qq0\nWgKBdvPTxFaz5YtS9trvTbs+iesoV29nNrb40Kh1nnlqFAZh8gWaRseFdr5C5oPv\nl9Fu/GJqNaQYkCGNivNOb8FgkZTaEIjXPOWTkypVvoLRNVdFNyrfgHRGgba96akO\nSb1VYG4qvQyrRSSaqlTXrHOoCWnqiyO0rE5/MzAKY458PG/fWWOjKbNRwzvq/00E\nPKFk0NcFhXoYO5WZuQllZsTo2UZRSiwnU/+KYoE6KuW1/WCDo4r/HEeZxbqjkwQ=\n=OqCl\n-----END PGP SIGNATURE-----",
        "payload": "tree 03636b2daccca221a553ef26b8f5b61fe6d7a5b9\nparent 7b879d3493e5b51c60522f71657941bd62e29334\nparent de236f57c68c2c29d148a2df9e019f431cee3cb7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420541469 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420541478 +0100\n\nMerge pull request #5564\n\nde236f5 clarify obscure uses of EvalScript() (Pavel Vasin)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a89b8371d6243242c2bb75a6005e7b4584ea6e6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a89b8371d6243242c2bb75a6005e7b4584ea6e6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a89b8371d6243242c2bb75a6005e7b4584ea6e6d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b879d3493e5b51c60522f71657941bd62e29334",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b879d3493e5b51c60522f71657941bd62e29334",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b879d3493e5b51c60522f71657941bd62e29334"
      },
      {
        "sha": "de236f57c68c2c29d148a2df9e019f431cee3cb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de236f57c68c2c29d148a2df9e019f431cee3cb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de236f57c68c2c29d148a2df9e019f431cee3cb7"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "dd25f649dcba47659063f9c70e0337c5e9ca8cd0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a89b8371d6243242c2bb75a6005e7b4584ea6e6d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a89b8371d6243242c2bb75a6005e7b4584ea6e6d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a89b8371d6243242c2bb75a6005e7b4584ea6e6d",
        "patch": "@@ -764,7 +764,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // IsStandard() will have already returned false\n         // and this method isn't called.\n         vector<vector<unsigned char> > stack;\n-        if (!EvalScript(stack, tx.vin[i].scriptSig, false, BaseSignatureChecker()))\n+        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n             return false;\n \n         if (whichType == TX_SCRIPTHASH)"
      },
      {
        "sha": "458b033131f5a57f2176473270a6c5f70f57d6dd",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a89b8371d6243242c2bb75a6005e7b4584ea6e6d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a89b8371d6243242c2bb75a6005e7b4584ea6e6d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=a89b8371d6243242c2bb75a6005e7b4584ea6e6d",
        "patch": "@@ -607,21 +607,21 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n \n     ScriptError err;\n     vector<vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), true, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), true, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n     BOOST_CHECK(pushdata1Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), true, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n     BOOST_CHECK(pushdata2Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), true, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n     BOOST_CHECK(pushdata4Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n }"
      }
    ]
  },
  {
    "sha": "de70dd4904aef3884612bf1410c63543a7adca80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTcwZGQ0OTA0YWVmMzg4NDYxMmJmMTQxMGM2MzU0M2E3YWRjYTgw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-06T17:12:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-06T17:12:58Z"
      },
      "message": "Merge pull request #5598\n\neb0d34b Remove unused chainparam networkID (jtimon)",
      "tree": {
        "sha": "bd6f740c341f5c4e7e8ea53b67a9d5c472a03c34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd6f740c341f5c4e7e8ea53b67a9d5c472a03c34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de70dd4904aef3884612bf1410c63543a7adca80",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrBeaAAoJEHSBCwEjRsmmkdcIAL0RIRf2fVMUSgg1OjzlQ/uH\nYMbE/AX/9oIXjXtOHHzG9g9dEMZKyZStEBVpZWU6iuIMiFteHrAiNyUJMqt/QqcT\n3KuByD7GxCwNO8RRO13hAS0DAcGSySAYuOMEmGHC+5GvWt6QSiRJvIMv85vTCQRY\nZVc2OlCo9dgKXpvONTGHm8cic1uUNWxdYkpzYU/UUNrdgh5nb1zXeaUFdPSm06S5\nRfj4vmRJNNiHpREQY5BBQkmyYfChPy3P4HistlvJ1SVVSJcM8Pbp6FDh8qSV7ZPE\n2mZUnluIJC6j7X0/F/Zecw7+BgWxHmJOcFIbaY9jne8PutZ2FTWc7kS9c7wEQ4k=\n=zalX\n-----END PGP SIGNATURE-----",
        "payload": "tree bd6f740c341f5c4e7e8ea53b67a9d5c472a03c34\nparent a89b8371d6243242c2bb75a6005e7b4584ea6e6d\nparent eb0d34b494e36af01d4636c69e6570943fb30f1c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420564371 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420564378 +0100\n\nMerge pull request #5598\n\neb0d34b Remove unused chainparam networkID (jtimon)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de70dd4904aef3884612bf1410c63543a7adca80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de70dd4904aef3884612bf1410c63543a7adca80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de70dd4904aef3884612bf1410c63543a7adca80/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a89b8371d6243242c2bb75a6005e7b4584ea6e6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a89b8371d6243242c2bb75a6005e7b4584ea6e6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a89b8371d6243242c2bb75a6005e7b4584ea6e6d"
      },
      {
        "sha": "eb0d34b494e36af01d4636c69e6570943fb30f1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb0d34b494e36af01d4636c69e6570943fb30f1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb0d34b494e36af01d4636c69e6570943fb30f1c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 0,
      "deletions": 10
    },
    "files": [
      {
        "sha": "32100f4777828367a8954ff3cad3a06cdb280bc9",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de70dd4904aef3884612bf1410c63543a7adca80/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de70dd4904aef3884612bf1410c63543a7adca80/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=de70dd4904aef3884612bf1410c63543a7adca80",
        "patch": "@@ -101,7 +101,6 @@ static const Checkpoints::CCheckpointData dataRegtest = {\n class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n-        networkID = CBaseChainParams::MAIN;\n         strNetworkID = \"main\";\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -189,7 +188,6 @@ static CMainParams mainParams;\n class CTestNetParams : public CMainParams {\n public:\n     CTestNetParams() {\n-        networkID = CBaseChainParams::TESTNET;\n         strNetworkID = \"test\";\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n@@ -246,7 +244,6 @@ static CTestNetParams testNetParams;\n class CRegTestParams : public CTestNetParams {\n public:\n     CRegTestParams() {\n-        networkID = CBaseChainParams::REGTEST;\n         strNetworkID = \"regtest\";\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n@@ -291,7 +288,6 @@ static CRegTestParams regTestParams;\n class CUnitTestParams : public CMainParams, public CModifiableParams {\n public:\n     CUnitTestParams() {\n-        networkID = CBaseChainParams::UNITTEST;\n         strNetworkID = \"unittest\";\n         nDefaultPort = 18445;\n         vFixedSeeds.clear(); //! Unit test mode doesn't have any fixed seeds."
      },
      {
        "sha": "f52bf4e55fae8f7b9d95a911cbc3738ff7abae84",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de70dd4904aef3884612bf1410c63543a7adca80/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de70dd4904aef3884612bf1410c63543a7adca80/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=de70dd4904aef3884612bf1410c63543a7adca80",
        "patch": "@@ -97,7 +97,6 @@ class CChainParams\n     int nMinerThreads;\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n-    CBaseChainParams::Network networkID;\n     std::string strNetworkID;\n     CBlock genesis;\n     std::vector<CAddress> vFixedSeeds;"
      },
      {
        "sha": "61c8f5021e41a8635752db6e8081aac1c7f1a8e0",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de70dd4904aef3884612bf1410c63543a7adca80/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de70dd4904aef3884612bf1410c63543a7adca80/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=de70dd4904aef3884612bf1410c63543a7adca80",
        "patch": "@@ -21,7 +21,6 @@ class CBaseMainParams : public CBaseChainParams\n public:\n     CBaseMainParams()\n     {\n-        networkID = CBaseChainParams::MAIN;\n         nRPCPort = 8332;\n     }\n };\n@@ -35,7 +34,6 @@ class CBaseTestNetParams : public CBaseMainParams\n public:\n     CBaseTestNetParams()\n     {\n-        networkID = CBaseChainParams::TESTNET;\n         nRPCPort = 18332;\n         strDataDir = \"testnet3\";\n     }\n@@ -50,7 +48,6 @@ class CBaseRegTestParams : public CBaseTestNetParams\n public:\n     CBaseRegTestParams()\n     {\n-        networkID = CBaseChainParams::REGTEST;\n         strDataDir = \"regtest\";\n     }\n };\n@@ -64,7 +61,6 @@ class CBaseUnitTestParams : public CBaseMainParams\n public:\n     CBaseUnitTestParams()\n     {\n-        networkID = CBaseChainParams::UNITTEST;\n         strDataDir = \"unittest\";\n     }\n };"
      },
      {
        "sha": "cebe7aa01a93688f0195e26716f2dd1a684016d2",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de70dd4904aef3884612bf1410c63543a7adca80/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de70dd4904aef3884612bf1410c63543a7adca80/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=de70dd4904aef3884612bf1410c63543a7adca80",
        "patch": "@@ -32,7 +32,6 @@ class CBaseChainParams\n \n     int nRPCPort;\n     std::string strDataDir;\n-    Network networkID;\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "3b95808428c16b2276cf1a6416d0c01ae515e81a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjk1ODA4NDI4YzE2YjIyNzZjZjFhNjQxNmQwYzAxYWU1MTVlODFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-06T19:00:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-06T19:01:00Z"
      },
      "message": "Merge pull request #5520\n\nbdb6a71 IsNull doesn't change CBlockLocator, add const hint (Pavel Jan\u00edk)\n1b37333 Remove no longer needed declaration of CBlockLocator (Pavel Jan\u00edk)",
      "tree": {
        "sha": "deb7557265867c7016dd82612194951527f64438",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/deb7557265867c7016dd82612194951527f64438"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b95808428c16b2276cf1a6416d0c01ae515e81a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrDDsAAoJEHSBCwEjRsmmXX0IAJUVO0ha7qLi8iIeqeVI8tBI\n2QwMfb2nWoLcep27MsIumEv3oF+Ip3cUd9r5TAjdB7tgI9iwmFi5g+Q8l9FMzNyx\n2QtoU9ZgancpSe9kpDeyrgYcSqE/vJ6OM4cdpW4zWXpXxW65m7s6qetXFLHaShyb\nEtGaVqEz3Eu+IKKB34t1Tl0rvPQ0C6eRtGnzYxqPcZ0DmEWK/d5Nzp3BAz2gw1W9\nXcHBpKkDoGiHUdsFsbsmfRLSTyW5An3UAhqJlgMaSwOrcvE+zD/Zw+hWHkryu4N0\nB3jaJJpPm57lBmsMECYT+9mnQM6Iq9jMN5TEswe2CD5H4iC+03o5RqEVlkwvdgY=\n=YHIm\n-----END PGP SIGNATURE-----",
        "payload": "tree deb7557265867c7016dd82612194951527f64438\nparent de70dd4904aef3884612bf1410c63543a7adca80\nparent bdb6a71d3d4173b02d24f302af2c2707df85e95b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420570845 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420570860 +0100\n\nMerge pull request #5520\n\nbdb6a71 IsNull doesn't change CBlockLocator, add const hint (Pavel Jan\u00edk)\n1b37333 Remove no longer needed declaration of CBlockLocator (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b95808428c16b2276cf1a6416d0c01ae515e81a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b95808428c16b2276cf1a6416d0c01ae515e81a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b95808428c16b2276cf1a6416d0c01ae515e81a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de70dd4904aef3884612bf1410c63543a7adca80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de70dd4904aef3884612bf1410c63543a7adca80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de70dd4904aef3884612bf1410c63543a7adca80"
      },
      {
        "sha": "bdb6a71d3d4173b02d24f302af2c2707df85e95b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdb6a71d3d4173b02d24f302af2c2707df85e95b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdb6a71d3d4173b02d24f302af2c2707df85e95b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "393978633f3f34a84ce8088a07583ad50da1d6da",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b95808428c16b2276cf1a6416d0c01ae515e81a/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b95808428c16b2276cf1a6416d0c01ae515e81a/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=3b95808428c16b2276cf1a6416d0c01ae515e81a",
        "patch": "@@ -23,8 +23,6 @@\n class CDiskBlockIndex;\n class COutPoint;\n \n-struct CBlockLocator;\n-\n extern unsigned int nWalletDBUpdated;\n \n void ThreadFlushWalletDB(const std::string& strWalletFile);"
      },
      {
        "sha": "d77ab162e021ffc227a5059ad12e4a5c258fcc97",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b95808428c16b2276cf1a6416d0c01ae515e81a/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b95808428c16b2276cf1a6416d0c01ae515e81a/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=3b95808428c16b2276cf1a6416d0c01ae515e81a",
        "patch": "@@ -162,7 +162,7 @@ struct CBlockLocator\n         vHave.clear();\n     }\n \n-    bool IsNull()\n+    bool IsNull() const\n     {\n         return vHave.empty();\n     }"
      }
    ]
  },
  {
    "sha": "729ba317498bf644c62975dbde07da5ab9ef0043",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjliYTMxNzQ5OGJmNjQ0YzYyOTc1ZGJkZTA3ZGE1YWI5ZWYwMDQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-06T19:16:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-06T19:32:45Z"
      },
      "message": "Merge pull request #5513\n\n856e862 namespace: drop most boost namespaces and a few header cleanups (Cory Fields)\n9b1ab86 namespace: drop boost::assign altogether here (Cory Fields)\na324199 namespace: remove boost namespace pollution (Cory Fields)",
      "tree": {
        "sha": "84076d547fd499ff98cffac6a9343bccfb451081",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84076d547fd499ff98cffac6a9343bccfb451081"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/729ba317498bf644c62975dbde07da5ab9ef0043",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrDhdAAoJEHSBCwEjRsmmu+EH/2Tv+Ij2/IgT8Vja58AsNXp0\nLKVvzzioTTULoptDjfT2IA+qWqZvDD633YDM1wm7L8oMbWJSCjwS1/W93erPvTzi\nozUBnGG2E2xg+pZ7FIObvOvTtilrZxCFaV6LnG4IPGNqP32zDkgW3mUqIT0jZ23Q\nkn9ZDys0b4vqMnFIs7dXmPSz/3Lt0JRGgToqGnrY8ArrQM43k6pxP2h6WJlIEyT1\nYyXLpBBXhPvBDkV7+T2iz1xyIvt9vawKg1OykrxKpX15hkH6hvW57p+4WMnGcgM5\nkPg4s7pq+45CYqQArDOj2GzO1GFxlAUirdorfa3Qp/1QzYXQcIqkDGPvPaVZHCk=\n=UloQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 84076d547fd499ff98cffac6a9343bccfb451081\nparent 3b95808428c16b2276cf1a6416d0c01ae515e81a\nparent 856e862f4a736fbdc38daae3b7f0fa34e1da317c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420571816 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420572765 +0100\n\nMerge pull request #5513\n\n856e862 namespace: drop most boost namespaces and a few header cleanups (Cory Fields)\n9b1ab86 namespace: drop boost::assign altogether here (Cory Fields)\na324199 namespace: remove boost namespace pollution (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729ba317498bf644c62975dbde07da5ab9ef0043",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/729ba317498bf644c62975dbde07da5ab9ef0043",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729ba317498bf644c62975dbde07da5ab9ef0043/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b95808428c16b2276cf1a6416d0c01ae515e81a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b95808428c16b2276cf1a6416d0c01ae515e81a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b95808428c16b2276cf1a6416d0c01ae515e81a"
      },
      {
        "sha": "856e862f4a736fbdc38daae3b7f0fa34e1da317c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/856e862f4a736fbdc38daae3b7f0fa34e1da317c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/856e862f4a736fbdc38daae3b7f0fa34e1da317c"
      }
    ],
    "stats": {
      "total": 218,
      "additions": 90,
      "deletions": 128
    },
    "files": [
      {
        "sha": "f273a15713f8702bd618524638dadd86b8e19ee2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -15,8 +15,6 @@\n #define _(x) std::string(x) /* Keep the _() around in case gettext or such will be used later to translate non-UI */\n \n using namespace std;\n-using namespace boost;\n-using namespace boost::asio;\n using namespace json_spirit;\n \n std::string HelpMessageCli()\n@@ -108,12 +106,12 @@ Object CallRPC(const string& strMethod, const Array& params)\n \n     // Connect to localhost\n     bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n-    asio::io_service io_service;\n-    ssl::context context(io_service, ssl::context::sslv23);\n-    context.set_options(ssl::context::no_sslv2 | ssl::context::no_sslv3);\n-    asio::ssl::stream<asio::ip::tcp::socket> sslStream(io_service, context);\n-    SSLIOStreamDevice<asio::ip::tcp> d(sslStream, fUseSSL);\n-    iostreams::stream< SSLIOStreamDevice<asio::ip::tcp> > stream(d);\n+    boost::asio::io_service io_service;\n+    boost::asio::ssl::context context(io_service, boost::asio::ssl::context::sslv23);\n+    context.set_options(boost::asio::ssl::context::no_sslv2 | boost::asio::ssl::context::no_sslv3);\n+    boost::asio::ssl::stream<boost::asio::ip::tcp::socket> sslStream(io_service, context);\n+    SSLIOStreamDevice<boost::asio::ip::tcp> d(sslStream, fUseSSL);\n+    boost::iostreams::stream< SSLIOStreamDevice<boost::asio::ip::tcp> > stream(d);\n \n     const bool fConnected = d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(BaseParams().RPCPort())));\n     if (!fConnected)"
      },
      {
        "sha": "01ace1e2b2c498cb81a6647cc70244187b96f2b3",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -22,7 +22,6 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/assign/list_of.hpp>\n \n-using namespace boost::assign;\n using namespace std;\n \n static bool fCreateBlank;\n@@ -375,7 +374,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n             if (!prevOut.isObject())\n                 throw runtime_error(\"expected prevtxs internal object\");\n \n-            map<string,UniValue::VType> types = map_list_of(\"txid\", UniValue::VSTR)(\"vout\",UniValue::VNUM)(\"scriptPubKey\",UniValue::VSTR);\n+            map<string,UniValue::VType> types = boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\",UniValue::VNUM)(\"scriptPubKey\",UniValue::VSTR);\n             if (!prevOut.checkObject(types))\n                 throw runtime_error(\"prevtxs internal object typecheck fail\");\n "
      },
      {
        "sha": "d32d96c56bdc2cf7b21731497addb0ea0646e4c0",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -14,7 +14,6 @@\n #include <boost/assign/list_of.hpp>\n \n using namespace std;\n-using namespace boost::assign;\n \n struct SeedSpec6 {\n     uint8_t addr[16];\n@@ -157,11 +156,11 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\"));\n         vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = list_of(0);\n-        base58Prefixes[SCRIPT_ADDRESS] = list_of(5);\n-        base58Prefixes[SECRET_KEY] =     list_of(128);\n-        base58Prefixes[EXT_PUBLIC_KEY] = list_of(0x04)(0x88)(0xB2)(0x1E);\n-        base58Prefixes[EXT_SECRET_KEY] = list_of(0x04)(0x88)(0xAD)(0xE4);\n+        base58Prefixes[PUBKEY_ADDRESS] = boost::assign::list_of(0);\n+        base58Prefixes[SCRIPT_ADDRESS] = boost::assign::list_of(5);\n+        base58Prefixes[SECRET_KEY] =     boost::assign::list_of(128);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E);\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4);\n \n         convertSeed6(vFixedSeeds, pnSeed6_main, ARRAYLEN(pnSeed6_main));\n \n@@ -215,11 +214,11 @@ class CTestNetParams : public CMainParams {\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.schildbach.de\", \"testnet-seed.bitcoin.schildbach.de\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = list_of(111);\n-        base58Prefixes[SCRIPT_ADDRESS] = list_of(196);\n-        base58Prefixes[SECRET_KEY]     = list_of(239);\n-        base58Prefixes[EXT_PUBLIC_KEY] = list_of(0x04)(0x35)(0x87)(0xCF);\n-        base58Prefixes[EXT_SECRET_KEY] = list_of(0x04)(0x35)(0x83)(0x94);\n+        base58Prefixes[PUBKEY_ADDRESS] = boost::assign::list_of(111);\n+        base58Prefixes[SCRIPT_ADDRESS] = boost::assign::list_of(196);\n+        base58Prefixes[SECRET_KEY]     = boost::assign::list_of(239);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF);\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94);\n \n         convertSeed6(vFixedSeeds, pnSeed6_test, ARRAYLEN(pnSeed6_test));\n "
      },
      {
        "sha": "c42fd106bec0a52fe33b0345bee480039c8277b0",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -9,10 +9,6 @@\n \n #include <assert.h>\n \n-#include <boost/assign/list_of.hpp>\n-\n-using namespace boost::assign;\n-\n /**\n  * Main network\n  */"
      },
      {
        "sha": "e064955ff0297813e485ef93dba8268156a423e3",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -20,8 +20,6 @@\n #include <boost/algorithm/string/split.hpp>\n #include <boost/assign/list_of.hpp>\n \n-using namespace boost;\n-using namespace boost::algorithm;\n using namespace std;\n \n CScript ParseScript(std::string s)\n@@ -44,34 +42,34 @@ CScript ParseScript(std::string s)\n             string strName(name);\n             mapOpNames[strName] = (opcodetype)op;\n             // Convenience: OP_ADD and just ADD are both recognized:\n-            replace_first(strName, \"OP_\", \"\");\n+            boost::algorithm::replace_first(strName, \"OP_\", \"\");\n             mapOpNames[strName] = (opcodetype)op;\n         }\n     }\n \n     vector<string> words;\n-    split(words, s, is_any_of(\" \\t\\n\"), token_compress_on);\n+    boost::algorithm::split(words, s, boost::algorithm::is_any_of(\" \\t\\n\"), boost::algorithm::token_compress_on);\n \n     for (std::vector<std::string>::const_iterator w = words.begin(); w != words.end(); ++w)\n     {\n         if (w->empty())\n         {\n             // Empty string, ignore. (boost::split given '' will return one word)\n         }\n-        else if (all(*w, is_digit()) ||\n-            (starts_with(*w, \"-\") && all(string(w->begin()+1, w->end()), is_digit())))\n+        else if (all(*w, boost::algorithm::is_digit()) ||\n+            (boost::algorithm::starts_with(*w, \"-\") && all(string(w->begin()+1, w->end()), boost::algorithm::is_digit())))\n         {\n             // Number\n             int64_t n = atoi64(*w);\n             result << n;\n         }\n-        else if (starts_with(*w, \"0x\") && (w->begin()+2 != w->end()) && IsHex(string(w->begin()+2, w->end())))\n+        else if (boost::algorithm::starts_with(*w, \"0x\") && (w->begin()+2 != w->end()) && IsHex(string(w->begin()+2, w->end())))\n         {\n             // Raw hex data, inserted NOT pushed onto stack:\n             std::vector<unsigned char> raw = ParseHex(string(w->begin()+2, w->end()));\n             result.insert(result.end(), raw.begin(), raw.end());\n         }\n-        else if (w->size() >= 2 && starts_with(*w, \"'\") && ends_with(*w, \"'\"))\n+        else if (w->size() >= 2 && boost::algorithm::starts_with(*w, \"'\") && boost::algorithm::ends_with(*w, \"'\"))\n         {\n             // Single-quoted string, pushed as data. NOTE: this is poor-man's\n             // parsing, spaces/tabs/newlines in single-quoted strings won't work."
      },
      {
        "sha": "fcc177f1ccde0782579036f3f1acc54af95ba279",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -24,7 +24,6 @@\n #include <openssl/rand.h>\n \n using namespace std;\n-using namespace boost;\n \n \n unsigned int nWalletDBUpdated;\n@@ -73,9 +72,9 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     boost::this_thread::interruption_point();\n \n     path = pathIn;\n-    filesystem::path pathLogDir = path / \"database\";\n+    boost::filesystem::path pathLogDir = path / \"database\";\n     TryCreateDirectory(pathLogDir);\n-    filesystem::path pathErrorFile = path / \"db.log\";\n+    boost::filesystem::path pathErrorFile = path / \"db.log\";\n     LogPrintf(\"CDBEnv::Open : LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;"
      },
      {
        "sha": "1b0c909b962b0a6edd1cae2f161dbca1eb684c74",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -43,7 +43,6 @@\n #include <boost/thread.hpp>\n #include <openssl/crypto.h>\n \n-using namespace boost;\n using namespace std;\n \n #ifdef ENABLE_WALLET\n@@ -427,12 +426,12 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     }\n \n     // hardcoded $DATADIR/bootstrap.dat\n-    filesystem::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n-    if (filesystem::exists(pathBootstrap)) {\n+    boost::filesystem::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n+    if (boost::filesystem::exists(pathBootstrap)) {\n         FILE *file = fopen(pathBootstrap.string().c_str(), \"rb\");\n         if (file) {\n             CImportingNow imp;\n-            filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n+            boost::filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n             LoadExternalBlockFile(file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n@@ -816,7 +815,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 return false;\n         }\n \n-        if (filesystem::exists(GetDataDir() / strWalletFile))\n+        if (boost::filesystem::exists(GetDataDir() / strWalletFile))\n         {\n             CDBEnv::VerifyResult r = bitdb.Verify(strWalletFile, CWalletDB::Recover);\n             if (r == CDBEnv::RECOVER_OK)\n@@ -937,20 +936,20 @@ bool AppInit2(boost::thread_group& threadGroup)\n     fReindex = GetBoolArg(\"-reindex\", false);\n \n     // Upgrading to 0.8; hard-link the old blknnnn.dat files into /blocks/\n-    filesystem::path blocksDir = GetDataDir() / \"blocks\";\n-    if (!filesystem::exists(blocksDir))\n+    boost::filesystem::path blocksDir = GetDataDir() / \"blocks\";\n+    if (!boost::filesystem::exists(blocksDir))\n     {\n-        filesystem::create_directories(blocksDir);\n+        boost::filesystem::create_directories(blocksDir);\n         bool linked = false;\n         for (unsigned int i = 1; i < 10000; i++) {\n-            filesystem::path source = GetDataDir() / strprintf(\"blk%04u.dat\", i);\n-            if (!filesystem::exists(source)) break;\n-            filesystem::path dest = blocksDir / strprintf(\"blk%05u.dat\", i-1);\n+            boost::filesystem::path source = GetDataDir() / strprintf(\"blk%04u.dat\", i);\n+            if (!boost::filesystem::exists(source)) break;\n+            boost::filesystem::path dest = blocksDir / strprintf(\"blk%05u.dat\", i-1);\n             try {\n-                filesystem::create_hard_link(source, dest);\n+                boost::filesystem::create_hard_link(source, dest);\n                 LogPrintf(\"Hardlinked %s -> %s\\n\", source.string(), dest.string());\n                 linked = true;\n-            } catch (const filesystem::filesystem_error& e) {\n+            } catch (const boost::filesystem::filesystem_error& e) {\n                 // Note: hardlink creation failing is not a disaster, it just means\n                 // blocks will get re-downloaded from peers.\n                 LogPrintf(\"Error hardlinking blk%04u.dat : %s\\n\", i, e.what());"
      },
      {
        "sha": "0067e9a2b26cc55db5ca0d3b2e002643b6defd14",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -29,7 +29,6 @@\n #include <boost/filesystem/fstream.hpp>\n #include <boost/thread.hpp>\n \n-using namespace boost;\n using namespace std;\n \n #if defined(NDEBUG)\n@@ -2789,7 +2788,7 @@ bool AbortNode(const std::string &strMessage, const std::string &userMessage) {\n \n bool CheckDiskSpace(uint64_t nAdditionalBytes)\n {\n-    uint64_t nFreeBytesAvailable = filesystem::space(GetDataDir()).available;\n+    uint64_t nFreeBytesAvailable = boost::filesystem::space(GetDataDir()).available;\n \n     // Check for nMinDiskSpace bytes (currently 50MB)\n     if (nFreeBytesAvailable < nMinDiskSpace + nAdditionalBytes)"
      },
      {
        "sha": "8cf2d0ffec8df7bfaa955d699fa62dab37fecddc",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -49,7 +49,6 @@\n #endif\n #endif\n \n-using namespace boost;\n using namespace std;\n \n namespace {"
      },
      {
        "sha": "66331ee4b4c9f82da24fda4ddb693f1193a48b60",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -46,7 +46,6 @@\n #include <QUrlQuery>\n #endif\n \n-using namespace boost;\n using namespace std;\n \n const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; // milliseconds"
      },
      {
        "sha": "184aacf5a8817afee04566128b0624cc90c32236",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -23,8 +23,6 @@\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n-using namespace boost;\n-using namespace boost::assign;\n using namespace json_spirit;\n using namespace std;\n "
      },
      {
        "sha": "95d6b9e5317a8ef0fb6e140b8bbede8275bcea17",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -26,8 +26,6 @@\n #include \"json/json_spirit_writer_template.h\"\n \n using namespace std;\n-using namespace boost;\n-using namespace boost::asio;\n using namespace json_spirit;\n \n //! Number of bytes to allocate and read at most at once in post data"
      },
      {
        "sha": "9bd82339928dd78557ad91379e58281d001b8313",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -25,8 +25,6 @@\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n-using namespace boost;\n-using namespace boost::assign;\n using namespace json_spirit;\n using namespace std;\n \n@@ -232,7 +230,7 @@ Value listunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(int_type)(int_type)(array_type));\n+    RPCTypeCheck(params, boost::assign::list_of(int_type)(int_type)(array_type));\n \n     int nMinDepth = 1;\n     if (params.size() > 0)\n@@ -336,7 +334,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(array_type)(obj_type));\n+    RPCTypeCheck(params, boost::assign::list_of(array_type)(obj_type));\n \n     Array inputs = params[0].get_array();\n     Object sendTo = params[1].get_obj();\n@@ -430,7 +428,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type));\n+    RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     CTransaction tx;\n \n@@ -468,7 +466,7 @@ Value decodescript(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type));\n+    RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     Object r;\n     CScript script;\n@@ -534,7 +532,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type)(array_type)(array_type)(str_type), true);\n+    RPCTypeCheck(params, boost::assign::list_of(str_type)(array_type)(array_type)(str_type), true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n@@ -606,7 +604,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n             Object prevOut = p.get_obj();\n \n-            RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type));\n+            RPCTypeCheck(prevOut, boost::assign::map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type));\n \n             uint256 txid = ParseHashO(prevOut, \"txid\");\n \n@@ -634,7 +632,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             // if redeemScript given and not using the local wallet (private keys\n             // given), add redeemScript to the tempKeystore so it can be signed:\n             if (fGivenKeys && scriptPubKey.IsPayToScriptHash()) {\n-                RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type)(\"redeemScript\",str_type));\n+                RPCTypeCheck(prevOut, boost::assign::map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type)(\"redeemScript\",str_type));\n                 Value v = find_value(prevOut, \"redeemScript\");\n                 if (!(v == Value::null)) {\n                     vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n@@ -724,7 +722,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type)(bool_type));\n+    RPCTypeCheck(params, boost::assign::list_of(str_type)(bool_type));\n \n     // parse hex string from parameter\n     CTransaction tx;"
      },
      {
        "sha": "a070ab5bbe7e7f29f25bc67fe16e105fa7453d21",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 27,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -26,7 +26,6 @@\n #include <boost/thread.hpp>\n #include \"json/json_spirit_writer_template.h\"\n \n-using namespace boost;\n using namespace boost::asio;\n using namespace json_spirit;\n using namespace std;\n@@ -39,7 +38,7 @@ static std::string rpcWarmupStatus(\"RPC server started\");\n static CCriticalSection cs_rpcWarmup;\n \n //! These are created by StartRPCThreads, destroyed in StopRPCThreads\n-static asio::io_service* rpc_io_service = NULL;\n+static boost::asio::io_service* rpc_io_service = NULL;\n static map<string, boost::shared_ptr<deadline_timer> > deadlineTimers;\n static ssl::context* rpc_ssl_context = NULL;\n static boost::thread_group* rpc_worker_group = NULL;\n@@ -428,7 +427,7 @@ class AcceptedConnectionImpl : public AcceptedConnection\n {\n public:\n     AcceptedConnectionImpl(\n-            asio::io_service& io_service,\n+            boost::asio::io_service& io_service,\n             ssl::context &context,\n             bool fUseSSL) :\n         sslStream(io_service, context),\n@@ -453,11 +452,11 @@ class AcceptedConnectionImpl : public AcceptedConnection\n     }\n \n     typename Protocol::endpoint peer;\n-    asio::ssl::stream<typename Protocol::socket> sslStream;\n+    boost::asio::ssl::stream<typename Protocol::socket> sslStream;\n \n private:\n     SSLIOStreamDevice<Protocol> _d;\n-    iostreams::stream< SSLIOStreamDevice<Protocol> > _stream;\n+    boost::iostreams::stream< SSLIOStreamDevice<Protocol> > _stream;\n };\n \n void ServiceConnection(AcceptedConnection *conn);\n@@ -504,7 +503,7 @@ static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol,\n                              const boost::system::error_code& error)\n {\n     // Immediately start accepting new connections, except when we're cancelled or our socket is closed.\n-    if (error != asio::error::operation_aborted && acceptor->is_open())\n+    if (error != boost::asio::error::operation_aborted && acceptor->is_open())\n         RPCListen(acceptor, context, fUseSSL);\n \n     AcceptedConnectionImpl<ip::tcp>* tcp_conn = dynamic_cast< AcceptedConnectionImpl<ip::tcp>* >(conn.get());\n@@ -535,7 +534,7 @@ static ip::tcp::endpoint ParseEndpoint(const std::string &strEndpoint, int defau\n     std::string addr;\n     int port = defaultPort;\n     SplitHostPort(strEndpoint, port, addr);\n-    return ip::tcp::endpoint(asio::ip::address::from_string(addr), port);\n+    return ip::tcp::endpoint(boost::asio::ip::address::from_string(addr), port);\n }\n \n void StartRPCThreads()\n@@ -590,7 +589,7 @@ void StartRPCThreads()\n     }\n \n     assert(rpc_io_service == NULL);\n-    rpc_io_service = new asio::io_service();\n+    rpc_io_service = new boost::asio::io_service();\n     rpc_ssl_context = new ssl::context(*rpc_io_service, ssl::context::sslv23);\n \n     const bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n@@ -599,14 +598,14 @@ void StartRPCThreads()\n     {\n         rpc_ssl_context->set_options(ssl::context::no_sslv2 | ssl::context::no_sslv3);\n \n-        filesystem::path pathCertFile(GetArg(\"-rpcsslcertificatechainfile\", \"server.cert\"));\n-        if (!pathCertFile.is_complete()) pathCertFile = filesystem::path(GetDataDir()) / pathCertFile;\n-        if (filesystem::exists(pathCertFile)) rpc_ssl_context->use_certificate_chain_file(pathCertFile.string());\n+        boost::filesystem::path pathCertFile(GetArg(\"-rpcsslcertificatechainfile\", \"server.cert\"));\n+        if (!pathCertFile.is_complete()) pathCertFile = boost::filesystem::path(GetDataDir()) / pathCertFile;\n+        if (boost::filesystem::exists(pathCertFile)) rpc_ssl_context->use_certificate_chain_file(pathCertFile.string());\n         else LogPrintf(\"ThreadRPCServer ERROR: missing server certificate file %s\\n\", pathCertFile.string());\n \n-        filesystem::path pathPKFile(GetArg(\"-rpcsslprivatekeyfile\", \"server.pem\"));\n-        if (!pathPKFile.is_complete()) pathPKFile = filesystem::path(GetDataDir()) / pathPKFile;\n-        if (filesystem::exists(pathPKFile)) rpc_ssl_context->use_private_key_file(pathPKFile.string(), ssl::context::pem);\n+        boost::filesystem::path pathPKFile(GetArg(\"-rpcsslprivatekeyfile\", \"server.pem\"));\n+        if (!pathPKFile.is_complete()) pathPKFile = boost::filesystem::path(GetDataDir()) / pathPKFile;\n+        if (boost::filesystem::exists(pathPKFile)) rpc_ssl_context->use_private_key_file(pathPKFile.string(), ssl::context::pem);\n         else LogPrintf(\"ThreadRPCServer ERROR: missing server private key file %s\\n\", pathPKFile.string());\n \n         string strCiphers = GetArg(\"-rpcsslciphers\", \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\");\n@@ -618,8 +617,8 @@ void StartRPCThreads()\n     int defaultPort = GetArg(\"-rpcport\", BaseParams().RPCPort());\n     if (!mapArgs.count(\"-rpcallowip\")) // Default to loopback if not allowing external IPs\n     {\n-        vEndpoints.push_back(ip::tcp::endpoint(asio::ip::address_v6::loopback(), defaultPort));\n-        vEndpoints.push_back(ip::tcp::endpoint(asio::ip::address_v4::loopback(), defaultPort));\n+        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v6::loopback(), defaultPort));\n+        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v4::loopback(), defaultPort));\n         if (mapArgs.count(\"-rpcbind\"))\n         {\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n@@ -641,8 +640,8 @@ void StartRPCThreads()\n             }\n         }\n     } else { // No specific bind address specified, bind to any\n-        vEndpoints.push_back(ip::tcp::endpoint(asio::ip::address_v6::any(), defaultPort));\n-        vEndpoints.push_back(ip::tcp::endpoint(asio::ip::address_v4::any(), defaultPort));\n+        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v6::any(), defaultPort));\n+        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v4::any(), defaultPort));\n         // Prefer making the socket dual IPv6/IPv4 instead of binding\n         // to both addresses seperately.\n         bBindAny = true;\n@@ -654,7 +653,7 @@ void StartRPCThreads()\n     BOOST_FOREACH(const ip::tcp::endpoint &endpoint, vEndpoints)\n     {\n         try {\n-            asio::ip::address bindAddress = endpoint.address();\n+            boost::asio::ip::address bindAddress = endpoint.address();\n             straddress = bindAddress.to_string();\n             LogPrintf(\"Binding RPC on address %s port %i (IPv4+IPv6 bind any: %i)\\n\", straddress, endpoint.port(), bBindAny);\n             boost::system::error_code v6_only_error;\n@@ -665,7 +664,7 @@ void StartRPCThreads()\n \n             // Try making the socket dual IPv6/IPv4 when listening on the IPv6 \"any\" address\n             acceptor->set_option(boost::asio::ip::v6_only(\n-                !bBindAny || bindAddress != asio::ip::address_v6::any()), v6_only_error);\n+                !bBindAny || bindAddress != boost::asio::ip::address_v6::any()), v6_only_error);\n \n             acceptor->bind(endpoint);\n             acceptor->listen(socket_base::max_connections);\n@@ -675,7 +674,7 @@ void StartRPCThreads()\n             fListening = true;\n             rpc_acceptors.push_back(acceptor);\n             // If dual IPv6/IPv4 bind successful, skip binding to IPv4 separately\n-            if(bBindAny && bindAddress == asio::ip::address_v6::any() && !v6_only_error)\n+            if(bBindAny && bindAddress == boost::asio::ip::address_v6::any() && !v6_only_error)\n                 break;\n         }\n         catch (const boost::system::system_error& e)\n@@ -693,20 +692,20 @@ void StartRPCThreads()\n \n     rpc_worker_group = new boost::thread_group();\n     for (int i = 0; i < GetArg(\"-rpcthreads\", 4); i++)\n-        rpc_worker_group->create_thread(boost::bind(&asio::io_service::run, rpc_io_service));\n+        rpc_worker_group->create_thread(boost::bind(&boost::asio::io_service::run, rpc_io_service));\n     fRPCRunning = true;\n }\n \n void StartDummyRPCThread()\n {\n     if(rpc_io_service == NULL)\n     {\n-        rpc_io_service = new asio::io_service();\n+        rpc_io_service = new boost::asio::io_service();\n         /* Create dummy \"work\" to keep the thread from exiting when no timeouts active,\n          * see http://www.boost.org/doc/libs/1_51_0/doc/html/boost_asio/reference/io_service.html#boost_asio.reference.io_service.stopping_the_io_service_from_running_out_of_work */\n-        rpc_dummy_work = new asio::io_service::work(*rpc_io_service);\n+        rpc_dummy_work = new boost::asio::io_service::work(*rpc_io_service);\n         rpc_worker_group = new boost::thread_group();\n-        rpc_worker_group->create_thread(boost::bind(&asio::io_service::run, rpc_io_service));\n+        rpc_worker_group->create_thread(boost::bind(&boost::asio::io_service::run, rpc_io_service));\n         fRPCRunning = true;\n     }\n }\n@@ -719,7 +718,7 @@ void StopRPCThreads()\n \n     // First, cancel all timers and acceptors\n     // This is not done automatically by ->stop(), and in some cases the destructor of\n-    // asio::io_service can hang if this is skipped.\n+    // boost::asio::io_service can hang if this is skipped.\n     boost::system::error_code ec;\n     BOOST_FOREACH(const boost::shared_ptr<ip::tcp::acceptor> &acceptor, rpc_acceptors)\n     {\n@@ -787,7 +786,7 @@ void RPCRunLater(const std::string& name, boost::function<void(void)> func, int6\n         deadlineTimers.insert(make_pair(name,\n                                         boost::shared_ptr<deadline_timer>(new deadline_timer(*rpc_io_service))));\n     }\n-    deadlineTimers[name]->expires_from_now(posix_time::seconds(nSeconds));\n+    deadlineTimers[name]->expires_from_now(boost::posix_time::seconds(nSeconds));\n     deadlineTimers[name]->async_wait(boost::bind(RPCRunHandler, _1, func));\n }\n "
      },
      {
        "sha": "7a4d685717699347367b7144153924edf50aaee2",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -23,8 +23,6 @@\n #include \"json/json_spirit_value.h\"\n \n using namespace std;\n-using namespace boost;\n-using namespace boost::assign;\n using namespace json_spirit;\n \n int64_t nWalletUnlockTime;\n@@ -1873,9 +1871,9 @@ Value lockunspent(const Array& params, bool fHelp)\n         );\n \n     if (params.size() == 1)\n-        RPCTypeCheck(params, list_of(bool_type));\n+        RPCTypeCheck(params, boost::assign::list_of(bool_type));\n     else\n-        RPCTypeCheck(params, list_of(bool_type)(array_type));\n+        RPCTypeCheck(params, boost::assign::list_of(bool_type)(array_type));\n \n     bool fUnlock = params[0].get_bool();\n \n@@ -1892,7 +1890,7 @@ Value lockunspent(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected object\");\n         const Object& o = output.get_obj();\n \n-        RPCTypeCheck(o, map_list_of(\"txid\", str_type)(\"vout\", int_type));\n+        RPCTypeCheck(o, boost::assign::map_list_of(\"txid\", str_type)(\"vout\", int_type));\n \n         string txid = find_value(o, \"txid\").get_str();\n         if (!IsHex(txid))"
      },
      {
        "sha": "64d9909b9875167063e4389987aaa3f946729132",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -20,7 +20,6 @@\n #include <boost/tuple/tuple.hpp>\n \n using namespace std;\n-using namespace boost::tuples;\n \n BOOST_AUTO_TEST_SUITE(bloom_tests)\n "
      },
      {
        "sha": "69d8522188190b6783b495ee4333bebcc4c1075f",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -15,12 +15,10 @@\n #include \"wallet_ismine.h\"\n #endif\n \n-#include <boost/assign/std/vector.hpp>\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n-using namespace boost::assign;\n \n typedef vector<unsigned char> valtype;\n \n@@ -81,22 +79,21 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     CScript s;\n \n     // Test a AND b:\n-    keys.clear();\n-    keys += key[0],key[1]; // magic operator+= from boost.assign\n+    keys.assign(1,key[0]);\n+    keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n     BOOST_CHECK(VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n-        keys.clear();\n-        keys += key[i];\n+        keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n         BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n-        keys.clear();\n-        keys += key[1],key[i];\n+        keys.assign(1,key[1]);\n+        keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n         BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n@@ -105,8 +102,7 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     // Test a OR b:\n     for (int i = 0; i < 4; i++)\n     {\n-        keys.clear();\n-        keys += key[i];\n+        keys.assign(1,key[i]);\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n         {\n@@ -132,8 +128,8 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     for (int i = 0; i < 4; i++)\n         for (int j = 0; j < 4; j++)\n         {\n-            keys.clear();\n-            keys += key[i],key[j];\n+            keys.assign(1,key[i]);\n+            keys.push_back(key[j]);\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n             {"
      },
      {
        "sha": "9a7f40820a13452e86d6e9ed5fdf98548922239e",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -23,12 +23,6 @@\n #include <string>\n #include <vector>\n \n-#include <boost/algorithm/string/classification.hpp>\n-#include <boost/algorithm/string/predicate.hpp>\n-#include <boost/algorithm/string/replace.hpp>\n-#include <boost/algorithm/string/split.hpp>\n-#include <boost/filesystem/operations.hpp>\n-#include <boost/filesystem/path.hpp>\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n #include \"json/json_spirit_reader_template.h\"\n@@ -37,7 +31,6 @@\n \n using namespace std;\n using namespace json_spirit;\n-using namespace boost::algorithm;\n \n // Uncomment if you want to output updated JSON tests.\n // #define UPDATE_JSON_TESTS"
      },
      {
        "sha": "bc32d504ecc1e16eef82d883d224c0949633d9c2",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -24,7 +24,6 @@\n \n using namespace std;\n using namespace json_spirit;\n-using namespace boost::algorithm;\n \n // In script_tests.cpp\n extern Array read_json(const std::string& jsondata);\n@@ -47,7 +46,7 @@ unsigned int ParseScriptFlags(string strFlags)\n     }\n     unsigned int flags = 0;\n     vector<string> words;\n-    split(words, strFlags, is_any_of(\",\"));\n+    boost::algorithm::split(words, strFlags, boost::algorithm::is_any_of(\",\"));\n \n     BOOST_FOREACH(string word, words)\n     {"
      },
      {
        "sha": "054473e7cc18649d4437008be3943a164abc8a17",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -18,7 +18,6 @@\n #include <boost/scoped_ptr.hpp>\n #include <boost/thread.hpp>\n \n-using namespace boost;\n using namespace std;\n \n static uint64_t nAccountingEntryNumber = 0;\n@@ -865,20 +864,20 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n                 bitdb.mapFileUseCount.erase(wallet.strWalletFile);\n \n                 // Copy wallet.dat\n-                filesystem::path pathSrc = GetDataDir() / wallet.strWalletFile;\n-                filesystem::path pathDest(strDest);\n-                if (filesystem::is_directory(pathDest))\n+                boost::filesystem::path pathSrc = GetDataDir() / wallet.strWalletFile;\n+                boost::filesystem::path pathDest(strDest);\n+                if (boost::filesystem::is_directory(pathDest))\n                     pathDest /= wallet.strWalletFile;\n \n                 try {\n #if BOOST_VERSION >= 104000\n-                    filesystem::copy_file(pathSrc, pathDest, filesystem::copy_option::overwrite_if_exists);\n+                    boost::filesystem::copy_file(pathSrc, pathDest, boost::filesystem::copy_option::overwrite_if_exists);\n #else\n-                    filesystem::copy_file(pathSrc, pathDest);\n+                    boost::filesystem::copy_file(pathSrc, pathDest);\n #endif\n                     LogPrintf(\"copied wallet.dat to %s\\n\", pathDest.string());\n                     return true;\n-                } catch (const filesystem::filesystem_error& e) {\n+                } catch (const boost::filesystem::filesystem_error& e) {\n                     LogPrintf(\"error copying wallet.dat to %s - %s\\n\", pathDest.string(), e.what());\n                     return false;\n                 }"
      }
    ]
  },
  {
    "sha": "fe925e221ffcde1c810830a8985fa984254ca328",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTkyNWUyMjFmZmNkZTFjODEwODMwYTg5ODVmYTk4NDI1NGNhMzI4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-05T20:34:00Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-01-06T20:00:25Z"
      },
      "message": "Use EXTRA_LIBRARIES instead of noinst_LIBRARIES so we can avoid building unused code",
      "tree": {
        "sha": "9816d0321d567d70e6f2183f0651a5f7cba38ee9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9816d0321d567d70e6f2183f0651a5f7cba38ee9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe925e221ffcde1c810830a8985fa984254ca328",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe925e221ffcde1c810830a8985fa984254ca328",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe925e221ffcde1c810830a8985fa984254ca328",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe925e221ffcde1c810830a8985fa984254ca328/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41cced21063a89992ef393dda4fffc44ff60c7c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41cced21063a89992ef393dda4fffc44ff60c7c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41cced21063a89992ef393dda4fffc44ff60c7c3"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "81b16d1ea9a1decbc4d785585ad9f0899ffe9eb3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe925e221ffcde1c810830a8985fa984254ca328/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe925e221ffcde1c810830a8985fa984254ca328/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fe925e221ffcde1c810830a8985fa984254ca328",
        "patch": "@@ -37,7 +37,7 @@ $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:\n-noinst_LIBRARIES = \\\n+EXTRA_LIBRARIES = \\\n   crypto/libbitcoin_crypto.a \\\n   libbitcoin_util.a \\\n   libbitcoin_common.a \\\n@@ -46,7 +46,7 @@ noinst_LIBRARIES = \\\n   libbitcoin_cli.a\n if ENABLE_WALLET\n BITCOIN_INCLUDES += $(BDB_CPPFLAGS)\n-noinst_LIBRARIES += libbitcoin_wallet.a\n+EXTRA_LIBRARIES += libbitcoin_wallet.a\n endif\n \n if BUILD_BITCOIN_LIBS"
      },
      {
        "sha": "5812f9aff0b875da27a1c225fa8c564fcd60dc16",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe925e221ffcde1c810830a8985fa984254ca328/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe925e221ffcde1c810830a8985fa984254ca328/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=fe925e221ffcde1c810830a8985fa984254ca328",
        "patch": "@@ -1,5 +1,5 @@\n bin_PROGRAMS += qt/bitcoin-qt\n-noinst_LIBRARIES += qt/libbitcoinqt.a\n+EXTRA_LIBRARIES += qt/libbitcoinqt.a\n \n # bitcoin qt core #\n QT_TS = \\"
      }
    ]
  },
  {
    "sha": "f0b8afc88ba47a442c7493a3bf190acf9275fb60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGI4YWZjODhiYTQ3YTQ0MmM3NDkzYTNiZjE5MGFjZjkyNzVmYjYw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-07T01:11:16Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-07T01:18:12Z"
      },
      "message": "tests: fix spurious windows test failures after 012598880c\n\non rare occasions, rand() was returning duped values, causing duplicate\ntransactions.\n\nBuildMerkleTree happily used these, but CPartialMerkleTree caught them and\nreturned a null merkle root.\n\nRather than taking changes with rand(), use the loop counter to guarantee\nunique values.\n\nAt sipa's request, also remove the remaining uses of rand().",
      "tree": {
        "sha": "fa84cd2f1808d2c7e1eb08b95439a17694ffb7ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa84cd2f1808d2c7e1eb08b95439a17694ffb7ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0b8afc88ba47a442c7493a3bf190acf9275fb60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0b8afc88ba47a442c7493a3bf190acf9275fb60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0b8afc88ba47a442c7493a3bf190acf9275fb60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0b8afc88ba47a442c7493a3bf190acf9275fb60/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b95808428c16b2276cf1a6416d0c01ae515e81a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b95808428c16b2276cf1a6416d0c01ae515e81a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b95808428c16b2276cf1a6416d0c01ae515e81a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4406b08e5692c75260494690e0f42fcfdc496d46",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0b8afc88ba47a442c7493a3bf190acf9275fb60/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0b8afc88ba47a442c7493a3bf190acf9275fb60/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=f0b8afc88ba47a442c7493a3bf190acf9275fb60",
        "patch": "@@ -8,6 +8,7 @@\n #include \"uint256.h\"\n #include \"arith_uint256.h\"\n #include \"version.h\"\n+#include \"random.h\"\n \n #include <vector>\n \n@@ -21,8 +22,8 @@ class CPartialMerkleTreeTester : public CPartialMerkleTree\n public:\n     // flip one bit in one of the hashes - this should break the authentication\n     void Damage() {\n-        unsigned int n = rand() % vHash.size();\n-        int bit = rand() % 256;\n+        unsigned int n = insecure_rand() % vHash.size();\n+        int bit = insecure_rand() % 256;\n         *(vHash[n].begin() + (bit>>3)) ^= 1<<(bit&7);\n     }\n };\n@@ -31,6 +32,7 @@ BOOST_AUTO_TEST_SUITE(pmt_tests)\n \n BOOST_AUTO_TEST_CASE(pmt_test1)\n {\n+    seed_insecure_rand(false);\n     static const unsigned int nTxCounts[] = {1, 4, 7, 17, 56, 100, 127, 256, 312, 513, 1000, 4095};\n \n     for (int n = 0; n < 12; n++) {\n@@ -40,7 +42,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n         CBlock block;\n         for (unsigned int j=0; j<nTx; j++) {\n             CMutableTransaction tx;\n-            tx.nLockTime = rand(); // actual transaction data doesn't matter; just make the nLockTime's unique\n+            tx.nLockTime = j; // actual transaction data doesn't matter; just make the nLockTime's unique\n             block.vtx.push_back(CTransaction(tx));\n         }\n \n@@ -61,7 +63,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n             std::vector<bool> vMatch(nTx, false);\n             std::vector<uint256> vMatchTxid1;\n             for (unsigned int j=0; j<nTx; j++) {\n-                bool fInclude = (rand() & ((1 << (att/2)) - 1)) == 0;\n+                bool fInclude = (insecure_rand() & ((1 << (att/2)) - 1)) == 0;\n                 vMatch[j] = fInclude;\n                 if (fInclude)\n                     vMatchTxid1.push_back(vTxid[j]);"
      }
    ]
  },
  {
    "sha": "d79adc1ab18f897ab02da93e48c74ee2f44dce7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzlhZGMxYWIxOGY4OTdhYjAyZGE5M2U0OGM3NGVlMmY0NGRjZTdh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-07T12:01:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-07T12:01:56Z"
      },
      "message": "Merge pull request #5535\n\n1c52aad Require sufficent priority for relay of free transactions (Pieter Wuille)",
      "tree": {
        "sha": "11fe5030abbe0ce8bb50756bafb70691c1390ce6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11fe5030abbe0ce8bb50756bafb70691c1390ce6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d79adc1ab18f897ab02da93e48c74ee2f44dce7a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrSA0AAoJEHSBCwEjRsmmN9UH/R8ipKUgN3IUb0igjcDggC7J\nghaYIOJdgsioz7I/mE5zS+B/hyMOUG6nujNCDh8JDnVY6yjY97ZY9jpN6sWyptA4\niOYPotntcbyMxfY8GLzqs2baqkEMhTHcJUrzwS570pow8pCwsFz20JJgXvg6zGr/\nf5PP0KSg8WilyQLkAKFZv3ZrmpGtl7327YHydtg+Bvhkpi7PQtFNYEkbVQme3ggB\n5ovubBcPGaS6zWNkbhI+Onmyit1e+hDwMZMQGB5cVhJ9bjDXtrX7qG5f0cR+mwJI\ndGjB9YiynAGCJHY0buuxtRUmZK7iJAKn+iSKBo6ODz73q/tUt6Cm91PYGW0GrUk=\n=jIzX\n-----END PGP SIGNATURE-----",
        "payload": "tree 11fe5030abbe0ce8bb50756bafb70691c1390ce6\nparent 729ba317498bf644c62975dbde07da5ab9ef0043\nparent 1c52aad540ec1370db60fd68fc3485413e3cb8e1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420632090 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420632116 +0100\n\nMerge pull request #5535\n\n1c52aad Require sufficent priority for relay of free transactions (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d79adc1ab18f897ab02da93e48c74ee2f44dce7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d79adc1ab18f897ab02da93e48c74ee2f44dce7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d79adc1ab18f897ab02da93e48c74ee2f44dce7a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "729ba317498bf644c62975dbde07da5ab9ef0043",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729ba317498bf644c62975dbde07da5ab9ef0043",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/729ba317498bf644c62975dbde07da5ab9ef0043"
      },
      {
        "sha": "1c52aad540ec1370db60fd68fc3485413e3cb8e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c52aad540ec1370db60fd68fc3485413e3cb8e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c52aad540ec1370db60fd68fc3485413e3cb8e1"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "14ae08e4e58f0a0eb36dcf22dc86ad73bb34c5fb",
        "filename": "qa/pull-tester/run-bitcoind-for-test.sh.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d79adc1ab18f897ab02da93e48c74ee2f44dce7a/qa/pull-tester/run-bitcoind-for-test.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d79adc1ab18f897ab02da93e48c74ee2f44dce7a/qa/pull-tester/run-bitcoind-for-test.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/run-bitcoind-for-test.sh.in?ref=d79adc1ab18f897ab02da93e48c74ee2f44dce7a",
        "patch": "@@ -10,7 +10,7 @@ touch \"$DATADIR/regtest/debug.log\"\n tail -q -n 1 -F \"$DATADIR/regtest/debug.log\" | grep -m 1 -q \"Done loading\" &\n WAITER=$!\n PORT=`expr 10000 + $$ % 55536`\n-\"@abs_top_builddir@/src/bitcoind@EXEEXT@\" -connect=0.0.0.0 -datadir=\"$DATADIR\" -rpcuser=user -rpcpassword=pass -listen -keypool=3 -debug -debug=net -logtimestamps -checkmempool=0 -port=$PORT -whitelist=127.0.0.1 -regtest -rpcport=`expr $PORT + 1` &\n+\"@abs_top_builddir@/src/bitcoind@EXEEXT@\" -connect=0.0.0.0 -datadir=\"$DATADIR\" -rpcuser=user -rpcpassword=pass -listen -keypool=3 -debug -debug=net -logtimestamps -checkmempool=0 -relaypriority=0 -port=$PORT -whitelist=127.0.0.1 -regtest -rpcport=`expr $PORT + 1` &\n BITCOIND=$!\n \n #Install a watchdog."
      },
      {
        "sha": "03d67f0aa31c23b8557b88b6966a34293739804e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d79adc1ab18f897ab02da93e48c74ee2f44dce7a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d79adc1ab18f897ab02da93e48c74ee2f44dce7a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d79adc1ab18f897ab02da93e48c74ee2f44dce7a",
        "patch": "@@ -323,6 +323,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n         strUsage += \"  -limitfreerelay=<n>    \" + strprintf(_(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:%u)\"), 15) + \"\\n\";\n+        strUsage += \"  -relaypriority         \" + strprintf(_(\"Require high priority for relaying free or low-fee transactions (default:%u)\"), 1) + \"\\n\";\n         strUsage += \"  -maxsigcachesize=<n>   \" + strprintf(_(\"Limit size of signature cache to <n> entries (default: %u)\"), 50000) + \"\\n\";\n     }\n     strUsage += \"  -minrelaytxfee=<amt>   \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())) + \"\\n\";"
      },
      {
        "sha": "fa2b561489a1d0fccf3f56a1080ada9932dcbba9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d79adc1ab18f897ab02da93e48c74ee2f44dce7a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d79adc1ab18f897ab02da93e48c74ee2f44dce7a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d79adc1ab18f897ab02da93e48c74ee2f44dce7a",
        "patch": "@@ -1030,6 +1030,11 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                                       hash.ToString(), nFees, txMinFee),\n                              REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n \n+        // Require that free transactions have sufficient priority to be mined in the next block.\n+        if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n+        }\n+\n         // Continuously rate-limit free (really, very-low-fee) transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n         // be annoying or make others' transactions take longer to confirm.\n@@ -1049,7 +1054,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             // At default rate it would take over a month to fill 1GB\n             if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n                 return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n+                                 REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n         }"
      }
    ]
  },
  {
    "sha": "7625f7ff943807288eec37c0a54334b21a98d84c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjI1ZjdmZjk0MzgwNzI4OGVlYzM3YzBhNTQzMzRiMjFhOThkODRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-07T12:03:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-07T12:03:41Z"
      },
      "message": "Merge pull request #5597\n\ne413457 Catch LevelDB errors during flush (Pieter Wuille)\n02bced1 Bugfix: only track UTXO modification after lookup (Pieter Wuille)",
      "tree": {
        "sha": "b6c34a7968b1dd4834cd4a5be87eda13d392ecd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6c34a7968b1dd4834cd4a5be87eda13d392ecd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7625f7ff943807288eec37c0a54334b21a98d84c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrSCdAAoJEHSBCwEjRsmm3I8H/2AbPSLSqLP9O7XWZSDt2VUW\nGS/WDQ2GUsFBTqQzAPJvscuDDYHqJyzjwPfB0D+cJxOQHfcTDq4+BmLNsEHj7P1y\nlVX2Hciq1KsL3HkSP6Xif9Dgun1RWP56N7RkQFZaaDbsbkM3Q54qOKJQDFJtj5yc\ng17TvNSWwPCJMqRPt7ZzvBygbHEkWbfomDKA/SsxLGNSglJvbVIMc3dNr8IQVTXh\nDDFqCMqsgGB0JARtSO8yWv5liCPS/cjxab5DiUMvSjKMJDnnS7aWaq9jUnUOKpDA\ngoyni4SoYHKFlFxS5QEB112v7fq07wujiINCpVN5tKdBQDuUiWaNA4A3jC+mlnI=\n=7pVC\n-----END PGP SIGNATURE-----",
        "payload": "tree b6c34a7968b1dd4834cd4a5be87eda13d392ecd6\nparent d79adc1ab18f897ab02da93e48c74ee2f44dce7a\nparent e41345790f1041f5c5e5605d73a0af174769aa55\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420632201 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420632221 +0100\n\nMerge pull request #5597\n\ne413457 Catch LevelDB errors during flush (Pieter Wuille)\n02bced1 Bugfix: only track UTXO modification after lookup (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7625f7ff943807288eec37c0a54334b21a98d84c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7625f7ff943807288eec37c0a54334b21a98d84c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7625f7ff943807288eec37c0a54334b21a98d84c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d79adc1ab18f897ab02da93e48c74ee2f44dce7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d79adc1ab18f897ab02da93e48c74ee2f44dce7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d79adc1ab18f897ab02da93e48c74ee2f44dce7a"
      },
      {
        "sha": "e41345790f1041f5c5e5605d73a0af174769aa55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e41345790f1041f5c5e5605d73a0af174769aa55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e41345790f1041f5c5e5605d73a0af174769aa55"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d79e29951b16509d7bdefc98abd44c97208974af",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7625f7ff943807288eec37c0a54334b21a98d84c/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7625f7ff943807288eec37c0a54334b21a98d84c/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=7625f7ff943807288eec37c0a54334b21a98d84c",
        "patch": "@@ -92,7 +92,6 @@ bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n \n CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n     assert(!hasModifier);\n-    hasModifier = true;\n     std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n     if (ret.second) {\n         if (!base->GetCoins(txid, ret.first->second.coins)) {\n@@ -233,7 +232,10 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n     return tx.ComputePriority(dResult);\n }\n \n-CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_) : cache(cache_), it(it_) {}\n+CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_) : cache(cache_), it(it_) {\n+    assert(!cache.hasModifier);\n+    cache.hasModifier = true;\n+}\n \n CCoinsModifier::~CCoinsModifier()\n {"
      },
      {
        "sha": "ca2734b766e45992eac30e6cf6f7c394f9366a21",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7625f7ff943807288eec37c0a54334b21a98d84c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7625f7ff943807288eec37c0a54334b21a98d84c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7625f7ff943807288eec37c0a54334b21a98d84c",
        "patch": "@@ -1887,6 +1887,7 @@ enum FlushStateMode {\n bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n     LOCK(cs_main);\n     static int64_t nLastWrite = 0;\n+    try {\n     if ((mode == FLUSH_STATE_ALWAYS) ||\n         ((mode == FLUSH_STATE_PERIODIC || mode == FLUSH_STATE_IF_NEEDED) && pcoinsTip->GetCacheSize() > nCoinCacheSize) ||\n         (mode == FLUSH_STATE_PERIODIC && GetTimeMicros() > nLastWrite + DATABASE_WRITE_INTERVAL * 1000000)) {\n@@ -1926,6 +1927,9 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n         }\n         nLastWrite = GetTimeMicros();\n     }\n+    } catch (const std::runtime_error& e) {\n+        return state.Abort(std::string(\"System error while flushing: \") + e.what());\n+    }\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "37b185c4af77081732060193fd80a2c6ef50a787",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2IxODVjNGFmNzcwODE3MzIwNjAxOTNmZDgwYTJjNmVmNTBhNzg3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-07T13:57:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-07T14:02:52Z"
      },
      "message": "Merge pull request #5611\n\nf0b8afc tests: fix spurious windows test failures after 012598880c (Cory Fields)",
      "tree": {
        "sha": "c7401810e340dbc3805a2398b767ce11a1fe13e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7401810e340dbc3805a2398b767ce11a1fe13e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37b185c4af77081732060193fd80a2c6ef50a787",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrTyMAAoJEHSBCwEjRsmmNRAH/2i/nYVGnWWbaaLTI1kBlexh\nZew6xUTAaYXdlfdcl9t28R2XVtnJbnmpDDnFmyr2WgxvR8kfz3sPFJ1s1JVasbTP\nrFiiufr8D7X+gZhqYzxFS1HgRGm6tAWgIcaoEsYFqX54DvN3+sMqkjCQ4WzQg3vT\n4I7+xpraCkpEBXw0Jy+lipEkdp912qFVVqTeeMif64Y/T3Eevj0QSL9Q5C05Dpql\nhwCiWAG6xAqnA7tWwJp3NUAqwza62eKm2TTZC+PP0Fx817FGuwfdE5OjNannionF\nu4yT9+lxtQ00uuzSO9W8IyvtDsVj1d/iVNqFexIyZlTe0BoJe2cUxRcmTCUqEYk=\n=x3j6\n-----END PGP SIGNATURE-----",
        "payload": "tree c7401810e340dbc3805a2398b767ce11a1fe13e5\nparent 7625f7ff943807288eec37c0a54334b21a98d84c\nparent f0b8afc88ba47a442c7493a3bf190acf9275fb60\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420639078 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420639372 +0100\n\nMerge pull request #5611\n\nf0b8afc tests: fix spurious windows test failures after 012598880c (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37b185c4af77081732060193fd80a2c6ef50a787",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37b185c4af77081732060193fd80a2c6ef50a787",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37b185c4af77081732060193fd80a2c6ef50a787/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7625f7ff943807288eec37c0a54334b21a98d84c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7625f7ff943807288eec37c0a54334b21a98d84c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7625f7ff943807288eec37c0a54334b21a98d84c"
      },
      {
        "sha": "f0b8afc88ba47a442c7493a3bf190acf9275fb60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0b8afc88ba47a442c7493a3bf190acf9275fb60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0b8afc88ba47a442c7493a3bf190acf9275fb60"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4406b08e5692c75260494690e0f42fcfdc496d46",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37b185c4af77081732060193fd80a2c6ef50a787/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37b185c4af77081732060193fd80a2c6ef50a787/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=37b185c4af77081732060193fd80a2c6ef50a787",
        "patch": "@@ -8,6 +8,7 @@\n #include \"uint256.h\"\n #include \"arith_uint256.h\"\n #include \"version.h\"\n+#include \"random.h\"\n \n #include <vector>\n \n@@ -21,8 +22,8 @@ class CPartialMerkleTreeTester : public CPartialMerkleTree\n public:\n     // flip one bit in one of the hashes - this should break the authentication\n     void Damage() {\n-        unsigned int n = rand() % vHash.size();\n-        int bit = rand() % 256;\n+        unsigned int n = insecure_rand() % vHash.size();\n+        int bit = insecure_rand() % 256;\n         *(vHash[n].begin() + (bit>>3)) ^= 1<<(bit&7);\n     }\n };\n@@ -31,6 +32,7 @@ BOOST_AUTO_TEST_SUITE(pmt_tests)\n \n BOOST_AUTO_TEST_CASE(pmt_test1)\n {\n+    seed_insecure_rand(false);\n     static const unsigned int nTxCounts[] = {1, 4, 7, 17, 56, 100, 127, 256, 312, 513, 1000, 4095};\n \n     for (int n = 0; n < 12; n++) {\n@@ -40,7 +42,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n         CBlock block;\n         for (unsigned int j=0; j<nTx; j++) {\n             CMutableTransaction tx;\n-            tx.nLockTime = rand(); // actual transaction data doesn't matter; just make the nLockTime's unique\n+            tx.nLockTime = j; // actual transaction data doesn't matter; just make the nLockTime's unique\n             block.vtx.push_back(CTransaction(tx));\n         }\n \n@@ -61,7 +63,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n             std::vector<bool> vMatch(nTx, false);\n             std::vector<uint256> vMatchTxid1;\n             for (unsigned int j=0; j<nTx; j++) {\n-                bool fInclude = (rand() & ((1 << (att/2)) - 1)) == 0;\n+                bool fInclude = (insecure_rand() & ((1 << (att/2)) - 1)) == 0;\n                 vMatch[j] = fInclude;\n                 if (fInclude)\n                     vMatchTxid1.push_back(vTxid[j]);"
      }
    ]
  },
  {
    "sha": "1eb1e65f092dc2b6e1067d2018440fbbd997fa5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWIxZTY1ZjA5MmRjMmI2ZTEwNjdkMjAxODQ0MGZiYmQ5OTdmYTVj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-01-07T15:11:23Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-01-07T15:11:23Z"
      },
      "message": "Fix smartfees test for change to relay policy",
      "tree": {
        "sha": "0ae761078f702578e2cfb7ad5083ff8ddfaea8c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ae761078f702578e2cfb7ad5083ff8ddfaea8c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1eb1e65f092dc2b6e1067d2018440fbbd997fa5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1eb1e65f092dc2b6e1067d2018440fbbd997fa5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1eb1e65f092dc2b6e1067d2018440fbbd997fa5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1eb1e65f092dc2b6e1067d2018440fbbd997fa5c/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37b185c4af77081732060193fd80a2c6ef50a787",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37b185c4af77081732060193fd80a2c6ef50a787",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37b185c4af77081732060193fd80a2c6ef50a787"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0c07ef8a53d8aa18e2eb250befcf81d3e34f82bb",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1eb1e65f092dc2b6e1067d2018440fbbd997fa5c/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1eb1e65f092dc2b6e1067d2018440fbbd997fa5c/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=1eb1e65f092dc2b6e1067d2018440fbbd997fa5c",
        "patch": "@@ -16,20 +16,20 @@ class EstimateFeeTest(BitcoinTestFramework):\n     def setup_network(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir,\n-                            [\"-debug=mempool\", \"-debug=estimatefee\"]))\n+                            [\"-debug=mempool\", \"-debug=estimatefee\", \"-relaypriority=0\"]))\n         # Node1 mines small-but-not-tiny blocks, and allows free transactions.\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n         # so blockmaxsize of 2,000 is really just 1,000 bytes (room enough for\n         # 6 or 7 transactions)\n         self.nodes.append(start_node(1, self.options.tmpdir,\n                                 [\"-blockprioritysize=1500\", \"-blockmaxsize=2000\",\n-                                 \"-debug=mempool\", \"-debug=estimatefee\"]))\n+                                 \"-debug=mempool\", \"-debug=estimatefee\", \"-relaypriority=0\"]))\n         connect_nodes(self.nodes[1], 0)\n \n         # Node2 is a stingy miner, that\n         # produces very small blocks (room for only 3 or so transactions)\n         node2args = [ \"-blockprioritysize=0\", \"-blockmaxsize=1500\",\n-                      \"-debug=mempool\", \"-debug=estimatefee\"]\n+                      \"-debug=mempool\", \"-debug=estimatefee\", \"-relaypriority=0\"]\n         self.nodes.append(start_node(2, self.options.tmpdir, node2args))\n         connect_nodes(self.nodes[2], 0)\n "
      }
    ]
  },
  {
    "sha": "8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTQ1NzhhZjBmYzM5NDRiZmYzYzc3ZjkzYjZhYWZlM2E3N2U2Zjhh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-07T15:24:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-07T15:27:33Z"
      },
      "message": "Merge pull request #5521\n\n0ea28ba Reject non-final txs even in testnet/regtest (Peter Todd)",
      "tree": {
        "sha": "27e4c9b36791586c0363fd4ef912b7a79039fa9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27e4c9b36791586c0363fd4ef912b7a79039fa9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrVBlAAoJEHSBCwEjRsmmBe0IAKhEhWYGLgBhaDcoG9ANWXgq\nVO6U48ydcCQviq7Wi6kbSrwuQyC4FZRqdoYbuwnMG1A9V/FU4goh5u4FGkuej0z1\nfn0Lmlr6NAglFk27AbnTU8ZyyuYDJSHAjaBmCnTQbFtLRc57IneurdDQjEV7qXKs\nuyuluLIdYwwt7zdoLMAnDNtg6gkrDNJDoRdFfCiRpWQeuujTWM/hGZADM3xB6IpK\n1FnYfoV5RL+SEPA0PxzYDhly4wVgvAbMfLs+teD7LDUcfh3FrimEkCZ6Lj2KLkfd\nklwy3OeyqMqE8OuYfKSqe3nimhgiIGPyj2Hk7oA6rXgJ5H38+2RUrAeuOqhcnlE=\n=8dR2\n-----END PGP SIGNATURE-----",
        "payload": "tree 27e4c9b36791586c0363fd4ef912b7a79039fa9d\nparent 37b185c4af77081732060193fd80a2c6ef50a787\nparent 0ea28baeb8e83a1cc7870090ac20eed9d7ca8539\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420644280 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420644453 +0100\n\nMerge pull request #5521\n\n0ea28ba Reject non-final txs even in testnet/regtest (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37b185c4af77081732060193fd80a2c6ef50a787",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37b185c4af77081732060193fd80a2c6ef50a787",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37b185c4af77081732060193fd80a2c6ef50a787"
      },
      {
        "sha": "0ea28baeb8e83a1cc7870090ac20eed9d7ca8539",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ea28baeb8e83a1cc7870090ac20eed9d7ca8539",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ea28baeb8e83a1cc7870090ac20eed9d7ca8539"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 20,
      "deletions": 23
    },
    "files": [
      {
        "sha": "e1a09733528345290f18743e950e74915ffbef18",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 23,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a",
        "patch": "@@ -625,34 +625,11 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n \n bool IsStandardTx(const CTransaction& tx, string& reason)\n {\n-    AssertLockHeld(cs_main);\n     if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n         return false;\n     }\n \n-    // Treat non-final transactions as non-standard to prevent a specific type\n-    // of double-spend attack, as well as DoS attacks. (if the transaction\n-    // can't be mined, the attacker isn't expending resources broadcasting it)\n-    // Basically we don't want to propagate transactions that can't be included in\n-    // the next block.\n-    //\n-    // However, IsFinalTx() is confusing... Without arguments, it uses\n-    // chainActive.Height() to evaluate nLockTime; when a block is accepted, chainActive.Height()\n-    // is set to the value of nHeight in the block. However, when IsFinalTx()\n-    // is called within CBlock::AcceptBlock(), the height of the block *being*\n-    // evaluated is what is used. Thus if we want to know if a transaction can\n-    // be part of the *next* block, we need to call IsFinalTx() with one more\n-    // than chainActive.Height().\n-    //\n-    // Timestamps on the other hand don't get any special treatment, because we\n-    // can't know what timestamp the next block will have, and there aren't\n-    // timestamp applications where it matters.\n-    if (!IsFinalTx(tx, chainActive.Height() + 1)) {\n-        reason = \"non-final\";\n-        return false;\n-    }\n-\n     // Extremely large transactions with lots of inputs can cost the network\n     // almost as much to process as they cost the sender in fees, because\n     // computing signature hashes is O(ninputs*txsize). Limiting transactions\n@@ -941,6 +918,26 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                          error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason),\n                          REJECT_NONSTANDARD, reason);\n \n+    // Only accept nLockTime-using transactions that can be mined in the next\n+    // block; we don't want our mempool filled up with transactions that can't\n+    // be mined yet.\n+    //\n+    // However, IsFinalTx() is confusing... Without arguments, it uses\n+    // chainActive.Height() to evaluate nLockTime; when a block is accepted,\n+    // chainActive.Height() is set to the value of nHeight in the block.\n+    // However, when IsFinalTx() is called within CBlock::AcceptBlock(), the\n+    // height of the block *being* evaluated is what is used. Thus if we want\n+    // to know if a transaction can be part of the *next* block, we need to\n+    // call IsFinalTx() with one more than chainActive.Height().\n+    //\n+    // Timestamps on the other hand don't get any special treatment, because we\n+    // can't know what timestamp the next block will have, and there aren't\n+    // timestamp applications where it matters.\n+    if (!IsFinalTx(tx, chainActive.Height() + 1))\n+        return state.DoS(0,\n+                         error(\"AcceptToMemoryPool : non-final\"),\n+                         REJECT_NONSTANDARD, \"non-final\");\n+\n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();\n     if (pool.exists(hash))"
      }
    ]
  },
  {
    "sha": "84d919974bfa22c9332faa36768d52cbbcc594f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGQ5MTk5NzRiZmEyMmM5MzMyZmFhMzY3NjhkNTJjYmJjYzU5NGY1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-07T10:21:53Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-07T15:41:12Z"
      },
      "message": "[QA] fix zapwallettxes test\n\n- remove shell test script and add a python equivalent",
      "tree": {
        "sha": "60c4684f334c1c6daf202a82e52e936fe15a7fcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60c4684f334c1c6daf202a82e52e936fe15a7fcd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84d919974bfa22c9332faa36768d52cbbcc594f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84d919974bfa22c9332faa36768d52cbbcc594f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84d919974bfa22c9332faa36768d52cbbcc594f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84d919974bfa22c9332faa36768d52cbbcc594f5/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "729ba317498bf644c62975dbde07da5ab9ef0043",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729ba317498bf644c62975dbde07da5ab9ef0043",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/729ba317498bf644c62975dbde07da5ab9ef0043"
      }
    ],
    "stats": {
      "total": 250,
      "additions": 84,
      "deletions": 166
    },
    "files": [
      {
        "sha": "efeee4553065bbd60b42e274111853d0441a3698",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84d919974bfa22c9332faa36768d52cbbcc594f5/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84d919974bfa22c9332faa36768d52cbbcc594f5/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=84d919974bfa22c9332faa36768d52cbbcc594f5",
        "patch": "@@ -26,14 +26,15 @@ testScripts=(\n     'mempool_spendcoinbase.py'\n     'mempool_coinbase_spends.py'\n     'httpbasics.py'\n+    'zapwallettxes.py'\n #    'forknotify.py'\n );\n if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n     for (( i = 0; i < ${#testScripts[@]}; i++ ))\n     do\n         if [ -z \"$1\" ] || [ \"$1\" == \"${testScripts[$i]}\" ] || [ \"$1.py\" == \"${testScripts[$i]}\" ]\n         then\n-            echo -e \"running testscript \\033[1m${testScripts[$i]}...\\033[0m\"\n+            echo -e \"Running testscript \\033[1m${testScripts[$i]}...\\033[0m\"\n             ${BUILDDIR}/qa/rpc-tests/${testScripts[$i]} --srcdir \"${BUILDDIR}/src\"\n         fi\n     done"
      },
      {
        "sha": "a773575906fb103900c2bb732c4762062c347cbc",
        "filename": "qa/rpc-tests/zapwallettxes.py",
        "status": "added",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84d919974bfa22c9332faa36768d52cbbcc594f5/qa/rpc-tests/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84d919974bfa22c9332faa36768d52cbbcc594f5/qa/rpc-tests/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.py?ref=84d919974bfa22c9332faa36768d52cbbcc594f5",
        "patch": "@@ -0,0 +1,82 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework import BitcoinTestFramework\n+from util import *\n+\n+\n+class ZapWalletTXesTest (BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir)\n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def run_test (self):\n+        print \"Mining blocks...\"\n+        self.nodes[0].setgenerate(True, 1)\n+        self.sync_all()\n+        self.nodes[1].setgenerate(True, 101)\n+        self.sync_all()\n+        \n+        assert_equal(self.nodes[0].getbalance(), 50)\n+        \n+        txid0 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n+        txid1 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n+        self.sync_all()\n+        self.nodes[0].setgenerate(True, 1)\n+        self.sync_all()\n+        \n+        txid2 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n+        txid3 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n+        \n+        tx0 = self.nodes[0].gettransaction(txid0)\n+        assert_equal(tx0['txid'], txid0) #tx0 must be available (confirmed)\n+        \n+        tx1 = self.nodes[0].gettransaction(txid1)\n+        assert_equal(tx1['txid'], txid1) #tx1 must be available (confirmed)\n+        \n+        tx2 = self.nodes[0].gettransaction(txid2)\n+        assert_equal(tx2['txid'], txid2) #tx2 must be available (unconfirmed)\n+        \n+        tx3 = self.nodes[0].gettransaction(txid3)\n+        assert_equal(tx3['txid'], txid3) #tx3 must be available (unconfirmed)\n+        \n+        #restart bitcoind\n+        self.nodes[0].stop()\n+        bitcoind_processes[0].wait()\n+        self.nodes[0] = start_node(0,self.options.tmpdir)\n+        \n+        tx3 = self.nodes[0].gettransaction(txid3)\n+        assert_equal(tx3['txid'], txid3) #tx must be available (unconfirmed)\n+        \n+        self.nodes[0].stop()\n+        bitcoind_processes[0].wait()\n+        \n+        #restart bitcoind with zapwallettxes\n+        self.nodes[0] = start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n+        \n+        aException = False\n+        try:\n+            tx3 = self.nodes[0].gettransaction(txid3)\n+        except JSONRPCException,e:\n+            print e\n+            aException = True\n+        \n+        assert_equal(aException, True) #there must be a expection because the unconfirmed wallettx0 must be gone by now\n+\n+        tx0 = self.nodes[0].gettransaction(txid0)\n+        assert_equal(tx0['txid'], txid0) #tx0 (confirmed) must still be available because it was confirmed\n+\n+\n+if __name__ == '__main__':\n+    ZapWalletTXesTest ().main ()"
      },
      {
        "sha": "4312d84e944623fa54af1e48824c808f51b1b2ae",
        "filename": "qa/rpc-tests/zapwallettxes.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 165,
        "changes": 165,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/qa/rpc-tests/zapwallettxes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/qa/rpc-tests/zapwallettxes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.sh?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -1,165 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test -zapwallettxes=<mode>\n-\n-if [ $# -lt 1 ]; then\n-        echo \"Usage: $0 path_to_binaries\"\n-        echo \"e.g. $0 ../../src\"\n-        echo \"Env vars BITCOIND and BITCOINCLI may be used to specify the exact binaries used\"\n-        exit 1\n-fi\n-\n-set -f\n-\n-BITCOIND=${BITCOIND:-${1}/bitcoind}\n-CLI=${BITCOINCLI:-${1}/bitcoin-cli}\n-\n-DIR=\"${BASH_SOURCE%/*}\"\n-SENDANDWAIT=\"${DIR}/send.sh\"\n-if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n-. \"$DIR/util.sh\"\n-\n-D=$(mktemp -d test.XXXXX)\n-\n-D1=${D}/node1\n-CreateDataDir \"$D1\" port=11000 rpcport=11001\n-B1ARGS=\"-datadir=$D1\"\n-$BITCOIND $B1ARGS &\n-B1PID=$!\n-\n-D2=${D}/node2\n-CreateDataDir \"$D2\" port=11010 rpcport=11011\n-B2ARGS=\"-datadir=$D2\"\n-$BITCOIND $B2ARGS &\n-B2PID=$!\n-\n-function CleanUp {\n-$CLI $B2ARGS stop > /dev/null 2>&1\n-wait $B2PID\n-$CLI $B1ARGS stop > /dev/null 2>&1\n-wait $B1PID\n-\n-rm -rf $D\n-}\n-\n-# 110 blocks, 10 mature == 500 XBT\n-$CLI $B1ARGS setgenerate true 110\n-$CLI $B2ARGS setgenerate true 110\n-\n-CheckBalance \"$B1ARGS\" 500\n-CheckBalance \"$B2ARGS\" 500\n-\n-# Send 10 XBT\n-TXID1_DEFAULT=$($CLI $B1ARGS sendtoaddress \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 10)\n-TXID2_DEFAULT=$($CLI $B2ARGS sendtoaddress \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 10)\n-\n-CheckBalance $B1ARGS 490\n-CheckBalance $B2ARGS 490\n-\n-# Move 10 XBT to testaccount\n-TMP=$($CLI $B1ARGS move \"\" \"testaccount\" 10)\n-TMP=$($CLI $B2ARGS move \"\" \"testaccount\" 10)\n-\n-CheckBalance $B1ARGS 10 \"testaccount\"\n-CheckBalance $B2ARGS 10 \"testaccount\"\n-\n-# Send 1 XBT from testaccount\n-TXID1_TESTACCOUNT=$($CLI $B1ARGS sendfrom \"testaccount\" \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 1)\n-TXID2_TESTACCOUNT=$($CLI $B2ARGS sendfrom \"testaccount\" \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 1)\n-\n-CheckBalance $B1ARGS 9 \"testaccount\"\n-CheckBalance $B2ARGS 9 \"testaccount\"\n-\n-CheckBalance $B1ARGS 489\n-CheckBalance $B2ARGS 489\n-\n-# Confirm transactions\n-$CLI $B1ARGS setgenerate true 1\n-$CLI $B2ARGS setgenerate true 1\n-\n-# Create unconfirmed transaction\n-TXID1_UNCONFIRMED=$($CLI $B1ARGS sendtoaddress \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 1)\n-TXID2_UNCONFIRMED=$($CLI $B2ARGS sendtoaddress \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 1)\n-\n-# check balance (we created another 50 and spent 1 in the meantime)\n-CheckBalance $B1ARGS 538\n-CheckBalance $B2ARGS 538\n-\n-# Safety check, if unconfirmed transactions are there\n-$CLI $B1ARGS gettransaction $TXID1_UNCONFIRMED > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"gettransaction1_1: $TXID1_UNCONFIRMED failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B2ARGS gettransaction $TXID2_UNCONFIRMED > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"gettransaction2_1: $TXID2_UNCONFIRMED failed\"\n-    CleanUp\n-    exit 1\n-fi\n-\n-# stop nodes\n-$CLI $B2ARGS stop > /dev/null 2>&1\n-wait $B2PID\n-$CLI $B1ARGS stop > /dev/null 2>&1\n-wait $B1PID\n-\n-# restart nodes with -zapwallettxes\n-$BITCOIND -zapwallettxes=1 $B1ARGS &\n-B1PID=$!\n-$BITCOIND -zapwallettxes=2 $B2ARGS &\n-B2PID=$!\n-\n-# check if confirmed transactions are there\n-$CLI $B1ARGS gettransaction $TXID1_DEFAULT > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"check confirmed transaction 1: $TXID1_DEFAULT failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B2ARGS gettransaction $TXID2_DEFAULT > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"check confirmed transaction 2: $TXID2_DEFAULT failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B1ARGS gettransaction $TXID1_TESTACCOUNT > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"check confirmed transaction 3: $TXID1_TESTACCOUNT failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B2ARGS gettransaction $TXID2_TESTACCOUNT > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"check confirmed transaction 4: $TXID2_TESTACCOUNT failed\"\n-    CleanUp\n-    exit 1\n-fi\n-\n-# check if unconfirmed transaction is gone\n-$CLI $B1ARGS gettransaction $TXID1_UNCONFIRMED > /dev/null 2>&1\n-if [[ $? -eq 0 ]] ; then\n-    echoerr \"check unconfirmed transaction 1: $TXID1_UNCONFIRMED failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B2ARGS gettransaction $TXID2_UNCONFIRMED > /dev/null 2>&1\n-if [[ $? -eq 0 ]] ; then\n-    echoerr \"check unconfirmed transaction 2: $TXID2_UNCONFIRMED failed\"\n-    CleanUp\n-    exit 1\n-fi\n-\n-# check zapwallet mode 1, testaccount balance must be 9 (keeping transaction metadata)\n-CheckBalance $B1ARGS 9 \"testaccount\"\n-\n-# check zapwallet mode 2, testaccount balance must be 10 (dropping transaction metadata)\n-CheckBalance $B2ARGS 10 \"testaccount\"\n-\n-echo \"Tests successful, cleaning up\"\n-CleanUp\n-exit 0"
      }
    ]
  },
  {
    "sha": "a19eeaced85cfff3faab19f532b1a0d97b637705",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTllZWFjZWQ4NWNmZmYzZmFhYjE5ZjUzMmIxYTBkOTdiNjM3NzA1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-01-06T13:24:13Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-01-07T15:59:54Z"
      },
      "message": "Bugfix: configure: Check for openssl/ec.h",
      "tree": {
        "sha": "1d74405164119ba60dddd0b08a67a8bf6ca730ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d74405164119ba60dddd0b08a67a8bf6ca730ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a19eeaced85cfff3faab19f532b1a0d97b637705",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a19eeaced85cfff3faab19f532b1a0d97b637705",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a19eeaced85cfff3faab19f532b1a0d97b637705",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a19eeaced85cfff3faab19f532b1a0d97b637705/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe925e221ffcde1c810830a8985fa984254ca328",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe925e221ffcde1c810830a8985fa984254ca328",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe925e221ffcde1c810830a8985fa984254ca328"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2abfd0d419fdefa6da8d28a24704ac03c497dda2",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a19eeaced85cfff3faab19f532b1a0d97b637705/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a19eeaced85cfff3faab19f532b1a0d97b637705/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a19eeaced85cfff3faab19f532b1a0d97b637705",
        "patch": "@@ -678,6 +678,14 @@ else\n   fi\n fi\n \n+CFLAGS_TEMP=\"$CFLAGS\"\n+LIBS_TEMP=\"$LIBS\"\n+CFLAGS=\"$CFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n+LIBS=\"$LIBS $SSL_LIBS $CRYPTO_LIBS\"\n+AC_CHECK_HEADER([openssl/ec.h],, AC_MSG_ERROR(OpenSSL ec header missing),)\n+CFLAGS=\"$CFLAGS_TEMP\"\n+LIBS=\"$LIBS_TEMP\"\n+\n BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n \n AC_MSG_CHECKING([whether to build bitcoind])"
      }
    ]
  },
  {
    "sha": "916130348ca803d762db912307b247f60f9aacd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTYxMzAzNDhjYTgwM2Q3NjJkYjkxMjMwN2IyNDdmNjBmOWFhY2Q2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-06T16:05:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-07T16:09:24Z"
      },
      "message": "Introduce 10 minute block download timeout\n\nThis will disconnect peers that do not transfer a block in 10 minutes, plus\n5 minutes for every previously queued block with validated headers\n(accomodating downstream bandwidth down to a few kilobytes per second - below\nthat the node would have trouble staying synchronized anyway).",
      "tree": {
        "sha": "ba6b52fd0360d12df757eeebcaa23ecf85839d8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba6b52fd0360d12df757eeebcaa23ecf85839d8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/916130348ca803d762db912307b247f60f9aacd6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/916130348ca803d762db912307b247f60f9aacd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/916130348ca803d762db912307b247f60f9aacd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/916130348ca803d762db912307b247f60f9aacd6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e7a339296600ae452e0558c1820ad2a76b33ea70",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916130348ca803d762db912307b247f60f9aacd6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916130348ca803d762db912307b247f60f9aacd6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=916130348ca803d762db912307b247f60f9aacd6",
        "patch": "@@ -139,9 +139,14 @@ namespace {\n         uint256 hash;\n         CBlockIndex *pindex;  //! Optional.\n         int64_t nTime;  //! Time of \"getdata\" request in microseconds.\n+        int nValidatedQueuedBefore;  //! Number of blocks queued with validated headers (globally) at the time this one is requested.\n+        bool fValidatedHeaders;  //! Whether this block has validated headers at the time of request.\n     };\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n \n+    /** Number of blocks in flight with validated headers. */\n+    int nQueuedValidatedHeaders = 0;\n+\n     /** Number of preferable block download peers. */\n     int nPreferredDownload = 0;\n \n@@ -323,6 +328,7 @@ void MarkBlockAsReceived(const uint256& hash) {\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n+        nQueuedValidatedHeaders -= itInFlight->second.second->fValidatedHeaders;\n         state->vBlocksInFlight.erase(itInFlight->second.second);\n         state->nBlocksInFlight--;\n         state->nStallingSince = 0;\n@@ -338,7 +344,8 @@ void MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, CBlockIndex *pindex\n     // Make sure it's not listed somewhere already.\n     MarkBlockAsReceived(hash);\n \n-    QueuedBlock newentry = {hash, pindex, GetTimeMicros()};\n+    QueuedBlock newentry = {hash, pindex, GetTimeMicros(), nQueuedValidatedHeaders, pindex != NULL};\n+    nQueuedValidatedHeaders += newentry.fValidatedHeaders;\n     list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(), newentry);\n     state->nBlocksInFlight++;\n     mapBlocksInFlight[hash] = std::make_pair(nodeid, it);\n@@ -4527,6 +4534,15 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->id);\n             pto->fDisconnect = true;\n         }\n+        // In case there is a block that has been in flight from this peer for (1 + 0.5 * N) times the block interval\n+        // (with N the number of validated blocks that were in flight at the time it was requested), disconnect due to\n+        // timeout. We compensate for in-flight blocks to prevent killing off peers due to our own downstream link\n+        // being saturated. We only count validated in-flight blocks so peers can't advertize nonexisting block hashes\n+        // to unreasonably increase our timeout.\n+        if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0 && state.vBlocksInFlight.front().nTime < nNow - 500000 * Params().TargetSpacing() * (2 + state.vBlocksInFlight.front().nValidatedQueuedBefore)) {\n+            LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", state.vBlocksInFlight.front().hash.ToString(), pto->id);\n+            pto->fDisconnect = true;\n+        }\n \n         //\n         // Message: getdata (blocks)"
      }
    ]
  },
  {
    "sha": "b7a4ecc1535e4e154b2ca5da16afecc096e152e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2E0ZWNjMTUzNWU0ZTE1NGIyY2E1ZGExNmFmZWNjMDk2ZTE1MmU4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-01-06T13:12:39Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-01-07T20:19:05Z"
      },
      "message": "Bugfix: Only check for boost when building code that requires it",
      "tree": {
        "sha": "f6028537f721ce789413931d01ae6dee1f9e92cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6028537f721ce789413931d01ae6dee1f9e92cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7a4ecc1535e4e154b2ca5da16afecc096e152e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7a4ecc1535e4e154b2ca5da16afecc096e152e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7a4ecc1535e4e154b2ca5da16afecc096e152e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7a4ecc1535e4e154b2ca5da16afecc096e152e8/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a19eeaced85cfff3faab19f532b1a0d97b637705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a19eeaced85cfff3faab19f532b1a0d97b637705",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a19eeaced85cfff3faab19f532b1a0d97b637705"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 42,
      "deletions": 22
    },
    "files": [
      {
        "sha": "740f7e8e0d672add979181f227660d9ad79240e9",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 42,
        "deletions": 22,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a4ecc1535e4e154b2ca5da16afecc096e152e8/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a4ecc1535e4e154b2ca5da16afecc096e152e8/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b7a4ecc1535e4e154b2ca5da16afecc096e152e8",
        "patch": "@@ -171,6 +171,24 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n fi\n CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n+AC_ARG_WITH([utils],\n+  [AS_HELP_STRING([--with-utils],\n+  [build bitcoin-cli bitcoin-tx (default=yes)])],\n+  [build_bitcoin_utils=$withval],\n+  [build_bitcoin_utils=yes])\n+\n+AC_ARG_WITH([libs],\n+  [AS_HELP_STRING([--with-libs],\n+  [build libraries (default=yes)])],\n+  [build_bitcoin_libs=$withval],\n+  [build_bitcoin_libs=yes])\n+\n+AC_ARG_WITH([daemon],\n+  [AS_HELP_STRING([--with-daemon],\n+  [build bitcoind daemon (default=yes)])],\n+  [build_bitcoind=$withval],\n+  [build_bitcoind=yes])\n+\n AC_LANG_PUSH([C++])\n \n use_pkgconfig=yes\n@@ -500,6 +518,19 @@ if test x$use_upnp != xno; then\n   )\n fi\n \n+BITCOIN_QT_INIT\n+\n+dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n+BITCOIN_QT_CONFIGURE([$use_pkgconfig], [qt4])\n+\n+if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests = xnononono; then\n+    use_boost=no\n+else\n+    use_boost=yes\n+fi\n+\n+if test x$use_boost = xyes; then\n+\n dnl Check for boost libs\n AX_BOOST_BASE\n AX_BOOST_SYSTEM\n@@ -537,6 +568,10 @@ if test x$use_reduce_exports != xno; then\n   CPPFLAGS=\"$TEMP_CPPFLAGS\"\n fi\n \n+elif test x$use_reduce_exports = xauto; then\n+    use_reduce_exports=yes\n+fi\n+\n if test x$use_reduce_exports != xno; then\n     CXXFLAGS=\"$CXXFLAGS $RE_CXXFLAGS\"\n     AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"])\n@@ -549,6 +584,8 @@ if test x$use_tests = xyes; then\n   fi\n \n \n+  if test x$use_boost = xyes; then\n+\n   AX_BOOST_UNIT_TEST_FRAMEWORK\n \n   dnl Determine if -DBOOST_TEST_DYN_LINK is needed\n@@ -568,8 +605,12 @@ if test x$use_tests = xyes; then\n     [AC_MSG_RESULT(no)])\n   LIBS=\"$TEMP_LIBS\"\n   CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+\n+  fi\n fi\n \n+if test x$use_boost = xyes; then\n+\n BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB\"\n \n dnl Boost >= 1.50 uses sleep_for rather than the now-deprecated sleep, however\n@@ -626,25 +667,7 @@ if test x$boost_sleep != xyes; then\n   AC_MSG_ERROR(No working boost sleep implementation found.)\n fi\n \n-AC_ARG_WITH([utils],\n-  [AS_HELP_STRING([--with-utils],\n-  [build bitcoin-cli bitcoin-tx (default=yes)])],\n-  [build_bitcoin_utils=$withval],\n-  [build_bitcoin_utils=yes])\n-\n-AC_ARG_WITH([libs],\n-  [AS_HELP_STRING([--with-libs],\n-  [build libraries (default=yes)])],\n-  [build_bitcoin_libs=$withval],\n-  [build_bitcoin_libs=yes])\n-\n-AC_ARG_WITH([daemon],\n-  [AS_HELP_STRING([--with-daemon],\n-  [build bitcoind daemon (default=yes)])],\n-  [build_bitcoind=$withval],\n-  [build_bitcoind=yes])\n-\n-BITCOIN_QT_INIT\n+fi\n \n if test x$use_pkgconfig = xyes; then\n \n@@ -703,9 +726,6 @@ if test x$build_bitcoin_libs = xyes; then\n fi\n AC_MSG_RESULT($build_bitcoin_libs)\n \n-dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n-BITCOIN_QT_CONFIGURE([$use_pkgconfig], [qt4])\n-\n AC_LANG_POP\n \n if test \"x$use_ccache\" != \"xno\"; then"
      }
    ]
  },
  {
    "sha": "2ecd2941edc8d07090b6b4aeaae7bc4c9c333066",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWNkMjk0MWVkYzhkMDcwOTBiNmI0YWVhYWU3YmM0YzljMzMzMDY2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-01-07T20:19:56Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-01-07T20:19:56Z"
      },
      "message": "Bugfix: configure: Correctly detect \"nothing to build\" condition",
      "tree": {
        "sha": "4d5dc13bf51ed093da665fd6ca50f5b1ce340d82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d5dc13bf51ed093da665fd6ca50f5b1ce340d82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ecd2941edc8d07090b6b4aeaae7bc4c9c333066",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ecd2941edc8d07090b6b4aeaae7bc4c9c333066",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ecd2941edc8d07090b6b4aeaae7bc4c9c333066",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ecd2941edc8d07090b6b4aeaae7bc4c9c333066/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7a4ecc1535e4e154b2ca5da16afecc096e152e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7a4ecc1535e4e154b2ca5da16afecc096e152e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7a4ecc1535e4e154b2ca5da16afecc096e152e8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "173c93c538e069be2391cbcda0ea3d508c2039a1",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecd2941edc8d07090b6b4aeaae7bc4c9c333066/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecd2941edc8d07090b6b4aeaae7bc4c9c333066/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=2ecd2941edc8d07090b6b4aeaae7bc4c9c333066",
        "patch": "@@ -839,7 +839,7 @@ else\n   AC_MSG_RESULT([no])\n fi\n \n-if test x$build_bitcoin_utils$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_tests = xnononono; then\n+if test x$build_bitcoin_utils$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_tests = xnonononono; then\n   AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui or --enable-tests])\n fi\n "
      }
    ]
  },
  {
    "sha": "204d41a8210525686daf1d79ed77f8e989db4537",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDRkNDFhODIxMDUyNTY4NmRhZjFkNzllZDc3ZjhlOTg5ZGI0NTM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T08:32:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T08:32:36Z"
      },
      "message": "Merge pull request #5542\n\n2ecd294 Bugfix: configure: Correctly detect \"nothing to build\" condition (Luke Dashjr)\nb7a4ecc Bugfix: Only check for boost when building code that requires it (Luke Dashjr)\na19eeac Bugfix: configure: Check for openssl/ec.h (Luke Dashjr)\nfe925e2 Use EXTRA_LIBRARIES instead of noinst_LIBRARIES so we can avoid building unused code (Cory Fields)",
      "tree": {
        "sha": "a9e71901344a69185b59b07e690d53e0a4bafe9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9e71901344a69185b59b07e690d53e0a4bafe9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/204d41a8210525686daf1d79ed77f8e989db4537",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrkCkAAoJEHSBCwEjRsmm3FsH/2M0O+qa7LlS1gtFGALxAQ/k\nds+E/MmJAITx0ln03dVbjXCT1C4MXaNXQJtEM/dJOwNtNDiIpR03p2/TrVEA6zsF\noDQa3xBa+bJRhtPwm8vKcrq6U29oJwZr9aqPnu3SAvXSv3PZB9FSof0GvJnDJk3M\n+rT2YKoV9kVsSd698E/NopyD6XT/gtMrA6ozh/4omef3gRD88LtpfUrUusy/moSp\naHm9nxSCxvL0Vy5wsC9PiB0Uk4H+1x6AlZU6+l3vjh7perJN1ytREkqZBCyIEGql\n1bNL1Cck699WH/Ih/DYMcIX4nS4pmR71azTP7SKgTbUBXTI/wBpXyjOXWhe3p3w=\n=8bQC\n-----END PGP SIGNATURE-----",
        "payload": "tree a9e71901344a69185b59b07e690d53e0a4bafe9e\nparent 8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a\nparent 2ecd2941edc8d07090b6b4aeaae7bc4c9c333066\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420705949 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420705956 +0100\n\nMerge pull request #5542\n\n2ecd294 Bugfix: configure: Correctly detect \"nothing to build\" condition (Luke Dashjr)\nb7a4ecc Bugfix: Only check for boost when building code that requires it (Luke Dashjr)\na19eeac Bugfix: configure: Check for openssl/ec.h (Luke Dashjr)\nfe925e2 Use EXTRA_LIBRARIES instead of noinst_LIBRARIES so we can avoid building unused code (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/204d41a8210525686daf1d79ed77f8e989db4537",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/204d41a8210525686daf1d79ed77f8e989db4537",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/204d41a8210525686daf1d79ed77f8e989db4537/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a"
      },
      {
        "sha": "2ecd2941edc8d07090b6b4aeaae7bc4c9c333066",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ecd2941edc8d07090b6b4aeaae7bc4c9c333066",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ecd2941edc8d07090b6b4aeaae7bc4c9c333066"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 54,
      "deletions": 26
    },
    "files": [
      {
        "sha": "9ca2f19bf983b630e0a052b6a6d0ae430ba7b6f6",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 51,
        "deletions": 23,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/204d41a8210525686daf1d79ed77f8e989db4537/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/204d41a8210525686daf1d79ed77f8e989db4537/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=204d41a8210525686daf1d79ed77f8e989db4537",
        "patch": "@@ -171,6 +171,24 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n fi\n CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n+AC_ARG_WITH([utils],\n+  [AS_HELP_STRING([--with-utils],\n+  [build bitcoin-cli bitcoin-tx (default=yes)])],\n+  [build_bitcoin_utils=$withval],\n+  [build_bitcoin_utils=yes])\n+\n+AC_ARG_WITH([libs],\n+  [AS_HELP_STRING([--with-libs],\n+  [build libraries (default=yes)])],\n+  [build_bitcoin_libs=$withval],\n+  [build_bitcoin_libs=yes])\n+\n+AC_ARG_WITH([daemon],\n+  [AS_HELP_STRING([--with-daemon],\n+  [build bitcoind daemon (default=yes)])],\n+  [build_bitcoind=$withval],\n+  [build_bitcoind=yes])\n+\n AC_LANG_PUSH([C++])\n \n use_pkgconfig=yes\n@@ -500,6 +518,19 @@ if test x$use_upnp != xno; then\n   )\n fi\n \n+BITCOIN_QT_INIT\n+\n+dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n+BITCOIN_QT_CONFIGURE([$use_pkgconfig], [qt4])\n+\n+if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests = xnononono; then\n+    use_boost=no\n+else\n+    use_boost=yes\n+fi\n+\n+if test x$use_boost = xyes; then\n+\n dnl Check for boost libs\n AX_BOOST_BASE\n AX_BOOST_SYSTEM\n@@ -537,6 +568,10 @@ if test x$use_reduce_exports != xno; then\n   CPPFLAGS=\"$TEMP_CPPFLAGS\"\n fi\n \n+elif test x$use_reduce_exports = xauto; then\n+    use_reduce_exports=yes\n+fi\n+\n if test x$use_reduce_exports != xno; then\n     CXXFLAGS=\"$CXXFLAGS $RE_CXXFLAGS\"\n     AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"])\n@@ -549,6 +584,8 @@ if test x$use_tests = xyes; then\n   fi\n \n \n+  if test x$use_boost = xyes; then\n+\n   AX_BOOST_UNIT_TEST_FRAMEWORK\n \n   dnl Determine if -DBOOST_TEST_DYN_LINK is needed\n@@ -568,8 +605,12 @@ if test x$use_tests = xyes; then\n     [AC_MSG_RESULT(no)])\n   LIBS=\"$TEMP_LIBS\"\n   CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+\n+  fi\n fi\n \n+if test x$use_boost = xyes; then\n+\n BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB\"\n \n dnl Boost >= 1.50 uses sleep_for rather than the now-deprecated sleep, however\n@@ -626,25 +667,7 @@ if test x$boost_sleep != xyes; then\n   AC_MSG_ERROR(No working boost sleep implementation found.)\n fi\n \n-AC_ARG_WITH([utils],\n-  [AS_HELP_STRING([--with-utils],\n-  [build bitcoin-cli bitcoin-tx (default=yes)])],\n-  [build_bitcoin_utils=$withval],\n-  [build_bitcoin_utils=yes])\n-\n-AC_ARG_WITH([libs],\n-  [AS_HELP_STRING([--with-libs],\n-  [build libraries (default=yes)])],\n-  [build_bitcoin_libs=$withval],\n-  [build_bitcoin_libs=yes])\n-\n-AC_ARG_WITH([daemon],\n-  [AS_HELP_STRING([--with-daemon],\n-  [build bitcoind daemon (default=yes)])],\n-  [build_bitcoind=$withval],\n-  [build_bitcoind=yes])\n-\n-BITCOIN_QT_INIT\n+fi\n \n if test x$use_pkgconfig = xyes; then\n \n@@ -678,6 +701,14 @@ else\n   fi\n fi\n \n+CFLAGS_TEMP=\"$CFLAGS\"\n+LIBS_TEMP=\"$LIBS\"\n+CFLAGS=\"$CFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n+LIBS=\"$LIBS $SSL_LIBS $CRYPTO_LIBS\"\n+AC_CHECK_HEADER([openssl/ec.h],, AC_MSG_ERROR(OpenSSL ec header missing),)\n+CFLAGS=\"$CFLAGS_TEMP\"\n+LIBS=\"$LIBS_TEMP\"\n+\n BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n \n AC_MSG_CHECKING([whether to build bitcoind])\n@@ -696,9 +727,6 @@ if test x$build_bitcoin_libs = xyes; then\n fi\n AC_MSG_RESULT($build_bitcoin_libs)\n \n-dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n-BITCOIN_QT_CONFIGURE([$use_pkgconfig], [qt4])\n-\n AC_LANG_POP\n \n if test \"x$use_ccache\" != \"xno\"; then\n@@ -812,7 +840,7 @@ else\n   AC_MSG_RESULT([no])\n fi\n \n-if test x$build_bitcoin_utils$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_tests = xnononono; then\n+if test x$build_bitcoin_utils$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_tests = xnonononono; then\n   AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui or --enable-tests])\n fi\n "
      },
      {
        "sha": "1f9a1621a751eab5ed8e1b11102758e3ca05095d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/204d41a8210525686daf1d79ed77f8e989db4537/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/204d41a8210525686daf1d79ed77f8e989db4537/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=204d41a8210525686daf1d79ed77f8e989db4537",
        "patch": "@@ -37,7 +37,7 @@ $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:\n-noinst_LIBRARIES = \\\n+EXTRA_LIBRARIES = \\\n   crypto/libbitcoin_crypto.a \\\n   libbitcoin_util.a \\\n   libbitcoin_common.a \\\n@@ -46,7 +46,7 @@ noinst_LIBRARIES = \\\n   libbitcoin_cli.a\n if ENABLE_WALLET\n BITCOIN_INCLUDES += $(BDB_CPPFLAGS)\n-noinst_LIBRARIES += libbitcoin_wallet.a\n+EXTRA_LIBRARIES += libbitcoin_wallet.a\n endif\n \n if BUILD_BITCOIN_LIBS"
      },
      {
        "sha": "cdd8f8d08d15c28fe4f53b9cb1758490af7c54be",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/204d41a8210525686daf1d79ed77f8e989db4537/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/204d41a8210525686daf1d79ed77f8e989db4537/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=204d41a8210525686daf1d79ed77f8e989db4537",
        "patch": "@@ -1,5 +1,5 @@\n bin_PROGRAMS += qt/bitcoin-qt\n-noinst_LIBRARIES += qt/libbitcoinqt.a\n+EXTRA_LIBRARIES += qt/libbitcoinqt.a\n \n # bitcoin qt core #\n QT_TS = \\"
      }
    ]
  },
  {
    "sha": "83be8fda6da1054004dfb6ece124cab2a02f9796",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2JlOGZkYTZkYTEwNTQwMDRkZmI2ZWNlMTI0Y2FiMmEwMmY5Nzk2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T08:48:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T09:04:15Z"
      },
      "message": "Merge pull request #5559\n\ne179eb3 Make the command-line-args dialog better (Thomas Zander)",
      "tree": {
        "sha": "d29ea842fe26688f26abd1e04248eb9258636b75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d29ea842fe26688f26abd1e04248eb9258636b75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83be8fda6da1054004dfb6ece124cab2a02f9796",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrkgPAAoJEHSBCwEjRsmmDWkIAKBeeZuasjS4DsYQzMFmGnK1\nyapLL+MfNjUv0inOExZ7fSqx2vpN0GSb6pbu3e/Xh9p3nhFVC0uPnaNzhCi+5aJJ\n9dE0xe90SPUToioUCY6U6ti1v19wOxbYjLpbAL2toYAKrTREirtOmNl0SAH6vtxp\nBoVphIdCwGxJcxyAB11VcJbm7vBDcjvYqWa1+/923YUSRpMVIoRaO6xMqlYsIDoK\n1IBSJjYw2zdvvHzq90KUfrAH/DPfOxJwrBiQQt0DV/ZOd5fmBtQBjPxJfrYCILMt\nCAQnVJI2sCP9OP9lVUW3C2BIvb9HdN1ucmEOdFUFEhRD7rYBPinp0WHXfFZQToc=\n=AkFA\n-----END PGP SIGNATURE-----",
        "payload": "tree d29ea842fe26688f26abd1e04248eb9258636b75\nparent 204d41a8210525686daf1d79ed77f8e989db4537\nparent e179eb3d9bfec7e67908242c71c87b716a41c97c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420706898 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420707855 +0100\n\nMerge pull request #5559\n\ne179eb3 Make the command-line-args dialog better (Thomas Zander)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83be8fda6da1054004dfb6ece124cab2a02f9796",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83be8fda6da1054004dfb6ece124cab2a02f9796",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83be8fda6da1054004dfb6ece124cab2a02f9796/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "204d41a8210525686daf1d79ed77f8e989db4537",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/204d41a8210525686daf1d79ed77f8e989db4537",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/204d41a8210525686daf1d79ed77f8e989db4537"
      },
      {
        "sha": "e179eb3d9bfec7e67908242c71c87b716a41c97c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e179eb3d9bfec7e67908242c71c87b716a41c97c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e179eb3d9bfec7e67908242c71c87b716a41c97c"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 87,
      "deletions": 21
    },
    "files": [
      {
        "sha": "9ace9afd7933b3367753f45f7bac32e17a6ffa88",
        "filename": "src/qt/forms/helpmessagedialog.ui",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83be8fda6da1054004dfb6ece124cab2a02f9796/src/qt/forms/helpmessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83be8fda6da1054004dfb6ece124cab2a02f9796/src/qt/forms/helpmessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/helpmessagedialog.ui?ref=83be8fda6da1054004dfb6ece124cab2a02f9796",
        "patch": "@@ -6,8 +6,8 @@\n    <rect>\n     <x>0</x>\n     <y>0</y>\n-    <width>800</width>\n-    <height>400</height>\n+    <width>585</width>\n+    <height>225</height>\n    </rect>\n   </property>\n   <property name=\"font\">\n@@ -34,6 +34,13 @@\n    </item>\n    <item>\n     <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n+     <item>\n+      <widget class=\"QTextEdit\" name=\"helpMessage\">\n+       <property name=\"readOnly\">\n+        <bool>true</bool>\n+       </property>\n+      </widget>\n+     </item>\n      <item>\n       <widget class=\"QScrollArea\" name=\"scrollArea\">\n        <property name=\"verticalScrollBarPolicy\">\n@@ -47,19 +54,22 @@\n          <rect>\n           <x>0</x>\n           <y>0</y>\n-          <width>659</width>\n-          <height>348</height>\n+          <width>447</width>\n+          <height>68</height>\n          </rect>\n         </property>\n         <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\">\n          <item>\n-          <widget class=\"QLabel\" name=\"helpMessageLabel\">\n+          <widget class=\"QLabel\" name=\"aboutMessage\">\n            <property name=\"cursor\">\n             <cursorShape>IBeamCursor</cursorShape>\n            </property>\n            <property name=\"textFormat\">\n             <enum>Qt::PlainText</enum>\n            </property>\n+           <property name=\"alignment\">\n+            <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>\n+           </property>\n            <property name=\"openExternalLinks\">\n             <bool>true</bool>\n            </property>"
      },
      {
        "sha": "9ee408179d0fd11f212d34b150aadf731d609810",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 16,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83be8fda6da1054004dfb6ece124cab2a02f9796/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83be8fda6da1054004dfb6ece124cab2a02f9796/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=83be8fda6da1054004dfb6ece124cab2a02f9796",
        "patch": "@@ -18,6 +18,8 @@\n #include <QCloseEvent>\n #include <QLabel>\n #include <QRegExp>\n+#include <QTextTable>\n+#include <QTextCursor>\n #include <QVBoxLayout>\n \n /** \"Help message\" or \"About\" dialog box */\n@@ -52,28 +54,82 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         // Replace newlines with HTML breaks\n         licenseInfoHTML.replace(\"\\n\\n\", \"<br><br>\");\n \n-        ui->helpMessageLabel->setTextFormat(Qt::RichText);\n+        ui->aboutMessage->setTextFormat(Qt::RichText);\n         ui->scrollArea->setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);\n         text = version + \"\\n\" + licenseInfo;\n-        ui->helpMessageLabel->setText(version + \"<br><br>\" + licenseInfoHTML);\n-        ui->helpMessageLabel->setWordWrap(true);\n+        ui->aboutMessage->setText(version + \"<br><br>\" + licenseInfoHTML);\n+        ui->aboutMessage->setWordWrap(true);\n+        ui->helpMessage->setVisible(false);\n     } else {\n         setWindowTitle(tr(\"Command-line options\"));\n-        QString header = tr(\"Usage:\") + \"\\n\" +\n-            \"  bitcoin-qt [\" + tr(\"command-line options\") + \"]                     \" + \"\\n\";\n+        QTextCursor cursor(ui->helpMessage->document());\n+        cursor.insertText(version);\n+        cursor.insertBlock();\n+        cursor.insertText(tr(\"Usage:\") + '\\n' +\n+            \"  bitcoin-qt [\" + tr(\"command-line options\") + \"]\\n\");\n+\n+        cursor.insertBlock();\n+        QTextTableFormat tf;\n+        tf.setBorderStyle(QTextFrameFormat::BorderStyle_None);\n+        tf.setCellPadding(2);\n+        QVector<QTextLength> widths;\n+        widths << QTextLength(QTextLength::PercentageLength, 20);\n+        widths << QTextLength(QTextLength::PercentageLength, 80);\n+        tf.setColumnWidthConstraints(widths);\n+        QTextTable *table = cursor.insertTable(2, 2, tf);\n \n         QString coreOptions = QString::fromStdString(HelpMessage(HMM_BITCOIN_QT));\n-\n-        QString uiOptions = tr(\"UI options\") + \":\\n\" +\n-            \"  -choosedatadir            \" + tr(\"Choose data directory on startup (default: 0)\") + \"\\n\" +\n-            \"  -lang=<lang>              \" + tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\") + \"\\n\" +\n-            \"  -min                      \" + tr(\"Start minimized\") + \"\\n\" +\n-            \"  -rootcertificates=<file>  \" + tr(\"Set SSL root certificates for payment request (default: -system-)\") + \"\\n\" +\n-            \"  -splash                   \" + tr(\"Show splash screen on startup (default: 1)\");\n-\n-        ui->helpMessageLabel->setFont(GUIUtil::bitcoinAddressFont());\n-        text = version + \"\\n\" + header + \"\\n\" + coreOptions + \"\\n\" + uiOptions;\n-        ui->helpMessageLabel->setText(text);\n+        bool first = true;\n+        QTextCharFormat bold;\n+        bold.setFontWeight(QFont::Bold);\n+        // note that coreOptions is not translated.\n+        foreach (const QString &line, coreOptions.split('\\n')) {\n+            if (!first) {\n+                table->appendRows(1);\n+                cursor.movePosition(QTextCursor::NextRow);\n+            }\n+            first = false;\n+\n+            if (line.startsWith(\"  \")) {\n+                int index = line.indexOf(' ', 3);\n+                if (index > 0) {\n+                    cursor.insertText(line.left(index).trimmed());\n+                    cursor.movePosition(QTextCursor::NextCell);\n+                    cursor.insertText(line.mid(index).trimmed());\n+                    continue;\n+                }\n+            }\n+            cursor.movePosition(QTextCursor::NextCell, QTextCursor::KeepAnchor);\n+            table->mergeCells(cursor);\n+            cursor.insertText(line.trimmed(), bold);\n+        }\n+\n+        table->appendRows(6);\n+        cursor.movePosition(QTextCursor::NextRow);\n+        cursor.insertText(tr(\"UI options\") + \":\", bold);\n+        cursor.movePosition(QTextCursor::NextRow);\n+        cursor.insertText(\"-choosedatadir\");\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(tr(\"Choose data directory on startup (default: 0)\"));\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(\"-lang=<lang>\");\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(\"-min\");\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(tr(\"Start minimized\"));\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(\"-rootcertificates=<file>\");\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(tr(\"Set SSL root certificates for payment request (default: -system-)\"));\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(\"-splash\");\n+        cursor.movePosition(QTextCursor::NextCell);\n+        cursor.insertText(tr(\"Show splash screen on startup (default: 1)\"));\n+\n+        ui->helpMessage->moveCursor(QTextCursor::Start);\n+        ui->scrollArea->setVisible(false);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "2eda47bc37bee37e409346e4c396d59925c06250",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWRhNDdiYzM3YmVlMzdlNDA5MzQ2ZTRjMzk2ZDU5OTI1YzA2MjUw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T10:41:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T10:42:16Z"
      },
      "message": "Merge pull request #5613\n\n1eb1e65 Fix smartfees test for change to relay policy (Suhas Daftuar)",
      "tree": {
        "sha": "fd88cd5ac1ab7a525b32590801c76a6c6d539e43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd88cd5ac1ab7a525b32590801c76a6c6d539e43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2eda47bc37bee37e409346e4c396d59925c06250",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrl8IAAoJEHSBCwEjRsmmQSgH/1C5Eb6jVTjnvHr+NE8Glf06\nG/bpOKkif3VpaqmhGayKarwiHrj+JwZIQfzU5OX8Ch2KhPIUeQt8HIYTXzYTKMHm\nUZR/inAcdOYHLs2OcuEH7pIBixmJ0sdT86IKYr6oP6r4j8tM8+sRNvD+WjCCzWZ3\ncZmJU1/8GprCyH8btqvfbmGkOoiX9NgDQsXomxC9Hx2SpqUQ9ixonEBrMraLGITC\nKgBNoIPkTE3/JTbwhrWOqDUTSy9gAToXyhkVsWeQ3Ld55o44DLJH8hQUUQ1Ibtn7\ny5Ww5jODFOroszGaVNSDvNNJKiFDJaEKYlme6p1/TgqobrWaDKwPB4U41iUdO5Y=\n=qNH3\n-----END PGP SIGNATURE-----",
        "payload": "tree fd88cd5ac1ab7a525b32590801c76a6c6d539e43\nparent 83be8fda6da1054004dfb6ece124cab2a02f9796\nparent 1eb1e65f092dc2b6e1067d2018440fbbd997fa5c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420713703 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420713736 +0100\n\nMerge pull request #5613\n\n1eb1e65 Fix smartfees test for change to relay policy (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eda47bc37bee37e409346e4c396d59925c06250",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2eda47bc37bee37e409346e4c396d59925c06250",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eda47bc37bee37e409346e4c396d59925c06250/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83be8fda6da1054004dfb6ece124cab2a02f9796",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83be8fda6da1054004dfb6ece124cab2a02f9796",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83be8fda6da1054004dfb6ece124cab2a02f9796"
      },
      {
        "sha": "1eb1e65f092dc2b6e1067d2018440fbbd997fa5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1eb1e65f092dc2b6e1067d2018440fbbd997fa5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1eb1e65f092dc2b6e1067d2018440fbbd997fa5c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0c07ef8a53d8aa18e2eb250befcf81d3e34f82bb",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eda47bc37bee37e409346e4c396d59925c06250/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eda47bc37bee37e409346e4c396d59925c06250/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=2eda47bc37bee37e409346e4c396d59925c06250",
        "patch": "@@ -16,20 +16,20 @@ class EstimateFeeTest(BitcoinTestFramework):\n     def setup_network(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir,\n-                            [\"-debug=mempool\", \"-debug=estimatefee\"]))\n+                            [\"-debug=mempool\", \"-debug=estimatefee\", \"-relaypriority=0\"]))\n         # Node1 mines small-but-not-tiny blocks, and allows free transactions.\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n         # so blockmaxsize of 2,000 is really just 1,000 bytes (room enough for\n         # 6 or 7 transactions)\n         self.nodes.append(start_node(1, self.options.tmpdir,\n                                 [\"-blockprioritysize=1500\", \"-blockmaxsize=2000\",\n-                                 \"-debug=mempool\", \"-debug=estimatefee\"]))\n+                                 \"-debug=mempool\", \"-debug=estimatefee\", \"-relaypriority=0\"]))\n         connect_nodes(self.nodes[1], 0)\n \n         # Node2 is a stingy miner, that\n         # produces very small blocks (room for only 3 or so transactions)\n         node2args = [ \"-blockprioritysize=0\", \"-blockmaxsize=1500\",\n-                      \"-debug=mempool\", \"-debug=estimatefee\"]\n+                      \"-debug=mempool\", \"-debug=estimatefee\", \"-relaypriority=0\"]\n         self.nodes.append(start_node(2, self.options.tmpdir, node2args))\n         connect_nodes(self.nodes[2], 0)\n "
      }
    ]
  },
  {
    "sha": "e3f5727590f5a2bb65f1fc7688305fe440ef404d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2Y1NzI3NTkwZjVhMmJiNjVmMWZjNzY4ODMwNWZlNDQwZWY0MDRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T10:51:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T10:51:51Z"
      },
      "message": "Merge pull request #5612\n\n84d9199 [QA] fix zapwallettxes test (Jonas Schnelli)",
      "tree": {
        "sha": "17c4741b7971fab66c748173313a45b48a3893df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17c4741b7971fab66c748173313a45b48a3893df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3f5727590f5a2bb65f1fc7688305fe440ef404d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrmFHAAoJEHSBCwEjRsmm60cIAMbySczbMu3HltRjlxY9bRKv\nelog6K49WNi0Miq1BFJIz/f2n7o2ofuG2CIM2LD0KahDRTqLmZpe+iQtpq4m8IyO\nH6p6+gU7yI1BgxUdE2BmTPOwBHzlPOcHU9iZ6Erxx4D6mOF9MWfZoCXD055Wn8Y+\nlIEvRS21UPCSgYsiuPKehZYIhaszCHL4gq4Qbjk+vZA29X1RkKZmhZefC8GZ6que\nW33iu3AURcF+pGA+Pbm6JIg9DtF+nyx3SpnMNG2fApagK4TFDSAyjS/dm0SOZxVP\nAQpU8b8DioLreKEYGU1fwud7ixxKywLIr9Bn9nqIcDhXRgOtCiYD+u1HIo99cWs=\n=H3jV\n-----END PGP SIGNATURE-----",
        "payload": "tree 17c4741b7971fab66c748173313a45b48a3893df\nparent 2eda47bc37bee37e409346e4c396d59925c06250\nparent 84d919974bfa22c9332faa36768d52cbbcc594f5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420714304 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420714311 +0100\n\nMerge pull request #5612\n\n84d9199 [QA] fix zapwallettxes test (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f5727590f5a2bb65f1fc7688305fe440ef404d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3f5727590f5a2bb65f1fc7688305fe440ef404d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f5727590f5a2bb65f1fc7688305fe440ef404d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2eda47bc37bee37e409346e4c396d59925c06250",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eda47bc37bee37e409346e4c396d59925c06250",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2eda47bc37bee37e409346e4c396d59925c06250"
      },
      {
        "sha": "84d919974bfa22c9332faa36768d52cbbcc594f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84d919974bfa22c9332faa36768d52cbbcc594f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84d919974bfa22c9332faa36768d52cbbcc594f5"
      }
    ],
    "stats": {
      "total": 250,
      "additions": 84,
      "deletions": 166
    },
    "files": [
      {
        "sha": "efeee4553065bbd60b42e274111853d0441a3698",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3f5727590f5a2bb65f1fc7688305fe440ef404d/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3f5727590f5a2bb65f1fc7688305fe440ef404d/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=e3f5727590f5a2bb65f1fc7688305fe440ef404d",
        "patch": "@@ -26,14 +26,15 @@ testScripts=(\n     'mempool_spendcoinbase.py'\n     'mempool_coinbase_spends.py'\n     'httpbasics.py'\n+    'zapwallettxes.py'\n #    'forknotify.py'\n );\n if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n     for (( i = 0; i < ${#testScripts[@]}; i++ ))\n     do\n         if [ -z \"$1\" ] || [ \"$1\" == \"${testScripts[$i]}\" ] || [ \"$1.py\" == \"${testScripts[$i]}\" ]\n         then\n-            echo -e \"running testscript \\033[1m${testScripts[$i]}...\\033[0m\"\n+            echo -e \"Running testscript \\033[1m${testScripts[$i]}...\\033[0m\"\n             ${BUILDDIR}/qa/rpc-tests/${testScripts[$i]} --srcdir \"${BUILDDIR}/src\"\n         fi\n     done"
      },
      {
        "sha": "a773575906fb103900c2bb732c4762062c347cbc",
        "filename": "qa/rpc-tests/zapwallettxes.py",
        "status": "added",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3f5727590f5a2bb65f1fc7688305fe440ef404d/qa/rpc-tests/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3f5727590f5a2bb65f1fc7688305fe440ef404d/qa/rpc-tests/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.py?ref=e3f5727590f5a2bb65f1fc7688305fe440ef404d",
        "patch": "@@ -0,0 +1,82 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework import BitcoinTestFramework\n+from util import *\n+\n+\n+class ZapWalletTXesTest (BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir)\n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def run_test (self):\n+        print \"Mining blocks...\"\n+        self.nodes[0].setgenerate(True, 1)\n+        self.sync_all()\n+        self.nodes[1].setgenerate(True, 101)\n+        self.sync_all()\n+        \n+        assert_equal(self.nodes[0].getbalance(), 50)\n+        \n+        txid0 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n+        txid1 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n+        self.sync_all()\n+        self.nodes[0].setgenerate(True, 1)\n+        self.sync_all()\n+        \n+        txid2 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n+        txid3 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n+        \n+        tx0 = self.nodes[0].gettransaction(txid0)\n+        assert_equal(tx0['txid'], txid0) #tx0 must be available (confirmed)\n+        \n+        tx1 = self.nodes[0].gettransaction(txid1)\n+        assert_equal(tx1['txid'], txid1) #tx1 must be available (confirmed)\n+        \n+        tx2 = self.nodes[0].gettransaction(txid2)\n+        assert_equal(tx2['txid'], txid2) #tx2 must be available (unconfirmed)\n+        \n+        tx3 = self.nodes[0].gettransaction(txid3)\n+        assert_equal(tx3['txid'], txid3) #tx3 must be available (unconfirmed)\n+        \n+        #restart bitcoind\n+        self.nodes[0].stop()\n+        bitcoind_processes[0].wait()\n+        self.nodes[0] = start_node(0,self.options.tmpdir)\n+        \n+        tx3 = self.nodes[0].gettransaction(txid3)\n+        assert_equal(tx3['txid'], txid3) #tx must be available (unconfirmed)\n+        \n+        self.nodes[0].stop()\n+        bitcoind_processes[0].wait()\n+        \n+        #restart bitcoind with zapwallettxes\n+        self.nodes[0] = start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n+        \n+        aException = False\n+        try:\n+            tx3 = self.nodes[0].gettransaction(txid3)\n+        except JSONRPCException,e:\n+            print e\n+            aException = True\n+        \n+        assert_equal(aException, True) #there must be a expection because the unconfirmed wallettx0 must be gone by now\n+\n+        tx0 = self.nodes[0].gettransaction(txid0)\n+        assert_equal(tx0['txid'], txid0) #tx0 (confirmed) must still be available because it was confirmed\n+\n+\n+if __name__ == '__main__':\n+    ZapWalletTXesTest ().main ()"
      },
      {
        "sha": "4312d84e944623fa54af1e48824c808f51b1b2ae",
        "filename": "qa/rpc-tests/zapwallettxes.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 165,
        "changes": 165,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eda47bc37bee37e409346e4c396d59925c06250/qa/rpc-tests/zapwallettxes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eda47bc37bee37e409346e4c396d59925c06250/qa/rpc-tests/zapwallettxes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.sh?ref=2eda47bc37bee37e409346e4c396d59925c06250",
        "patch": "@@ -1,165 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test -zapwallettxes=<mode>\n-\n-if [ $# -lt 1 ]; then\n-        echo \"Usage: $0 path_to_binaries\"\n-        echo \"e.g. $0 ../../src\"\n-        echo \"Env vars BITCOIND and BITCOINCLI may be used to specify the exact binaries used\"\n-        exit 1\n-fi\n-\n-set -f\n-\n-BITCOIND=${BITCOIND:-${1}/bitcoind}\n-CLI=${BITCOINCLI:-${1}/bitcoin-cli}\n-\n-DIR=\"${BASH_SOURCE%/*}\"\n-SENDANDWAIT=\"${DIR}/send.sh\"\n-if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n-. \"$DIR/util.sh\"\n-\n-D=$(mktemp -d test.XXXXX)\n-\n-D1=${D}/node1\n-CreateDataDir \"$D1\" port=11000 rpcport=11001\n-B1ARGS=\"-datadir=$D1\"\n-$BITCOIND $B1ARGS &\n-B1PID=$!\n-\n-D2=${D}/node2\n-CreateDataDir \"$D2\" port=11010 rpcport=11011\n-B2ARGS=\"-datadir=$D2\"\n-$BITCOIND $B2ARGS &\n-B2PID=$!\n-\n-function CleanUp {\n-$CLI $B2ARGS stop > /dev/null 2>&1\n-wait $B2PID\n-$CLI $B1ARGS stop > /dev/null 2>&1\n-wait $B1PID\n-\n-rm -rf $D\n-}\n-\n-# 110 blocks, 10 mature == 500 XBT\n-$CLI $B1ARGS setgenerate true 110\n-$CLI $B2ARGS setgenerate true 110\n-\n-CheckBalance \"$B1ARGS\" 500\n-CheckBalance \"$B2ARGS\" 500\n-\n-# Send 10 XBT\n-TXID1_DEFAULT=$($CLI $B1ARGS sendtoaddress \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 10)\n-TXID2_DEFAULT=$($CLI $B2ARGS sendtoaddress \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 10)\n-\n-CheckBalance $B1ARGS 490\n-CheckBalance $B2ARGS 490\n-\n-# Move 10 XBT to testaccount\n-TMP=$($CLI $B1ARGS move \"\" \"testaccount\" 10)\n-TMP=$($CLI $B2ARGS move \"\" \"testaccount\" 10)\n-\n-CheckBalance $B1ARGS 10 \"testaccount\"\n-CheckBalance $B2ARGS 10 \"testaccount\"\n-\n-# Send 1 XBT from testaccount\n-TXID1_TESTACCOUNT=$($CLI $B1ARGS sendfrom \"testaccount\" \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 1)\n-TXID2_TESTACCOUNT=$($CLI $B2ARGS sendfrom \"testaccount\" \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 1)\n-\n-CheckBalance $B1ARGS 9 \"testaccount\"\n-CheckBalance $B2ARGS 9 \"testaccount\"\n-\n-CheckBalance $B1ARGS 489\n-CheckBalance $B2ARGS 489\n-\n-# Confirm transactions\n-$CLI $B1ARGS setgenerate true 1\n-$CLI $B2ARGS setgenerate true 1\n-\n-# Create unconfirmed transaction\n-TXID1_UNCONFIRMED=$($CLI $B1ARGS sendtoaddress \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 1)\n-TXID2_UNCONFIRMED=$($CLI $B2ARGS sendtoaddress \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 1)\n-\n-# check balance (we created another 50 and spent 1 in the meantime)\n-CheckBalance $B1ARGS 538\n-CheckBalance $B2ARGS 538\n-\n-# Safety check, if unconfirmed transactions are there\n-$CLI $B1ARGS gettransaction $TXID1_UNCONFIRMED > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"gettransaction1_1: $TXID1_UNCONFIRMED failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B2ARGS gettransaction $TXID2_UNCONFIRMED > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"gettransaction2_1: $TXID2_UNCONFIRMED failed\"\n-    CleanUp\n-    exit 1\n-fi\n-\n-# stop nodes\n-$CLI $B2ARGS stop > /dev/null 2>&1\n-wait $B2PID\n-$CLI $B1ARGS stop > /dev/null 2>&1\n-wait $B1PID\n-\n-# restart nodes with -zapwallettxes\n-$BITCOIND -zapwallettxes=1 $B1ARGS &\n-B1PID=$!\n-$BITCOIND -zapwallettxes=2 $B2ARGS &\n-B2PID=$!\n-\n-# check if confirmed transactions are there\n-$CLI $B1ARGS gettransaction $TXID1_DEFAULT > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"check confirmed transaction 1: $TXID1_DEFAULT failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B2ARGS gettransaction $TXID2_DEFAULT > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"check confirmed transaction 2: $TXID2_DEFAULT failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B1ARGS gettransaction $TXID1_TESTACCOUNT > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"check confirmed transaction 3: $TXID1_TESTACCOUNT failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B2ARGS gettransaction $TXID2_TESTACCOUNT > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"check confirmed transaction 4: $TXID2_TESTACCOUNT failed\"\n-    CleanUp\n-    exit 1\n-fi\n-\n-# check if unconfirmed transaction is gone\n-$CLI $B1ARGS gettransaction $TXID1_UNCONFIRMED > /dev/null 2>&1\n-if [[ $? -eq 0 ]] ; then\n-    echoerr \"check unconfirmed transaction 1: $TXID1_UNCONFIRMED failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B2ARGS gettransaction $TXID2_UNCONFIRMED > /dev/null 2>&1\n-if [[ $? -eq 0 ]] ; then\n-    echoerr \"check unconfirmed transaction 2: $TXID2_UNCONFIRMED failed\"\n-    CleanUp\n-    exit 1\n-fi\n-\n-# check zapwallet mode 1, testaccount balance must be 9 (keeping transaction metadata)\n-CheckBalance $B1ARGS 9 \"testaccount\"\n-\n-# check zapwallet mode 2, testaccount balance must be 10 (dropping transaction metadata)\n-CheckBalance $B2ARGS 10 \"testaccount\"\n-\n-echo \"Tests successful, cleaning up\"\n-CleanUp\n-exit 0"
      }
    ]
  },
  {
    "sha": "48e1765e2781541c0f8b0893b26d02f27eb5c444",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGUxNzY1ZTI3ODE1NDFjMGY4YjA4OTNiMjZkMDJmMjdlYjVjNDQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T11:00:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T11:01:22Z"
      },
      "message": "Merge pull request #5143\n\nda918ac Make SCRIPT_VERIFY_CLEANSTACK a standardness requirement (Pieter Wuille)\nb6e03cc Add SCRIPT_VERIFY_CLEANSTACK (BIP62 rule 6) (Pieter Wuille)\nae4151b No semantic change: reuse stack variable in P2SH evaluation (Pieter Wuille)",
      "tree": {
        "sha": "112a2d69a7b1bd0f60d088e90696e294a9a84861",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/112a2d69a7b1bd0f60d088e90696e294a9a84861"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48e1765e2781541c0f8b0893b26d02f27eb5c444",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrmOCAAoJEHSBCwEjRsmmpAYH/jkolc3YNOqHrpCwdQZ4f0uT\n5129uKpNaGI0MR7x+B9Xssg5VIrVmK6vZcEmYo7tzCjI0XFoK3M4W+6JC6h5WJUL\nmJI6Mc0FK/ytvzMZFGS7oh5akg7OoyUjd585Hh5SoVmsaPK46/r0vQbun5DwKX8J\nBHn4lFQ7onG7+ZCqEQxFicsL9MAEc/KAayY5UBj1B+TfEpSK03oppR6/HBlIoFiH\nfZzl/kosU5AwVVrmtTAdbogt2f6daOJ0mUyx2NgM8ypGy99wuqRygupawSlUxdcj\n/ASAgHc4f9OxXZ7WzIjaKOcZh56gbZEMs2B+RLJ7nvSWbmfu1yHlSlk01ZjlTNo=\n=q2Z3\n-----END PGP SIGNATURE-----",
        "payload": "tree 112a2d69a7b1bd0f60d088e90696e294a9a84861\nparent e3f5727590f5a2bb65f1fc7688305fe440ef404d\nparent da918ac06e0d064e9584959ab3d241d03500e972\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420714819 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420714882 +0100\n\nMerge pull request #5143\n\nda918ac Make SCRIPT_VERIFY_CLEANSTACK a standardness requirement (Pieter Wuille)\nb6e03cc Add SCRIPT_VERIFY_CLEANSTACK (BIP62 rule 6) (Pieter Wuille)\nae4151b No semantic change: reuse stack variable in P2SH evaluation (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48e1765e2781541c0f8b0893b26d02f27eb5c444",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48e1765e2781541c0f8b0893b26d02f27eb5c444",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48e1765e2781541c0f8b0893b26d02f27eb5c444/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3f5727590f5a2bb65f1fc7688305fe440ef404d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f5727590f5a2bb65f1fc7688305fe440ef404d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3f5727590f5a2bb65f1fc7688305fe440ef404d"
      },
      {
        "sha": "da918ac06e0d064e9584959ab3d241d03500e972",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da918ac06e0d064e9584959ab3d241d03500e972",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da918ac06e0d064e9584959ab3d241d03500e972"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 81,
      "deletions": 14
    },
    "files": [
      {
        "sha": "d0f75ab672e7bb30ca67958e8f389f61278042de",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 10,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=48e1765e2781541c0f8b0893b26d02f27eb5c444",
        "patch": "@@ -1098,7 +1098,6 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigne\n         return false;\n     if (stack.empty())\n         return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n-\n     if (CastToBool(stack.back()) == false)\n         return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n \n@@ -1109,24 +1108,37 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigne\n         if (!scriptSig.IsPushOnly())\n             return set_error(serror, SCRIPT_ERR_SIG_PUSHONLY);\n \n-        // stackCopy cannot be empty here, because if it was the\n+        // Restore stack.\n+        swap(stack, stackCopy);\n+\n+        // stack cannot be empty here, because if it was the\n         // P2SH  HASH <> EQUAL  scriptPubKey would be evaluated with\n         // an empty stack and the EvalScript above would return false.\n-        assert(!stackCopy.empty());\n+        assert(!stack.empty());\n \n-        const valtype& pubKeySerialized = stackCopy.back();\n+        const valtype& pubKeySerialized = stack.back();\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n-        popstack(stackCopy);\n+        popstack(stack);\n \n-        if (!EvalScript(stackCopy, pubKey2, flags, checker, serror))\n+        if (!EvalScript(stack, pubKey2, flags, checker, serror))\n             // serror is set\n             return false;\n-        if (stackCopy.empty())\n+        if (stack.empty())\n             return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n-        if (!CastToBool(stackCopy.back()))\n+        if (!CastToBool(stack.back()))\n             return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n-        else\n-            return set_success(serror);\n+    }\n+\n+    // The CLEANSTACK check is only performed after potential P2SH evaluation,\n+    // as the non-P2SH evaluation of a P2SH script will obviously not result in\n+    // a clean stack (the P2SH inputs remain).\n+    if ((flags & SCRIPT_VERIFY_CLEANSTACK) != 0) {\n+        // Disallow CLEANSTACK without P2SH, as otherwise a switch CLEANSTACK->P2SH+CLEANSTACK\n+        // would be possible, which is not a softfork (and P2SH should be one).\n+        assert((flags & SCRIPT_VERIFY_P2SH) != 0);\n+        if (stack.size() != 1) {\n+            return set_error(serror, SCRIPT_ERR_CLEANSTACK);\n+        }\n     }\n \n     return set_success(serror);"
      },
      {
        "sha": "8bf379ed895dbfd59622f8f78b009443b0b8385c",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=48e1765e2781541c0f8b0893b26d02f27eb5c444",
        "patch": "@@ -67,8 +67,14 @@ enum\n     // discouraged NOPs fails the script. This verification flag will never be\n     // a mandatory flag applied to scripts in a block. NOPs that are not\n     // executed, e.g.  within an unexecuted IF ENDIF block, are *not* rejected.\n-    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS  = (1U << 7)\n-\n+    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS  = (1U << 7),\n+\n+    // Require that only a single stack element remains after evaluation. This changes the success criterion from\n+    // \"At least one stack element must remain, and when interpreted as a boolean, it must be true\" to\n+    // \"Exactly one stack element must remain, and when interpreted as a boolean, it must be true\".\n+    // (softfork safe, BIP62 rule 6)\n+    // Note: CLEANSTACK should never be used without P2SH.\n+    SCRIPT_VERIFY_CLEANSTACK = (1U << 8),\n };\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);"
      },
      {
        "sha": "6365680b2981aef3d7740219a366f0d4b5a7b398",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=48e1765e2781541c0f8b0893b26d02f27eb5c444",
        "patch": "@@ -43,6 +43,7 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_SIG_HIGH_S,\n     SCRIPT_ERR_SIG_NULLDUMMY,\n     SCRIPT_ERR_PUBKEYTYPE,\n+    SCRIPT_ERR_CLEANSTACK,\n \n     /* softfork safeness */\n     SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS,"
      },
      {
        "sha": "ac801937739f964ef571ae34a063dbab1cc410a7",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=48e1765e2781541c0f8b0893b26d02f27eb5c444",
        "patch": "@@ -48,7 +48,8 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_STRICTENC |\n                                                          SCRIPT_VERIFY_MINIMALDATA |\n                                                          SCRIPT_VERIFY_NULLDUMMY |\n-                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS;\n+                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n+                                                         SCRIPT_VERIFY_CLEANSTACK;\n \n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;"
      },
      {
        "sha": "bae750b79fc24afdddd4c4ad15d6ba21c8cac11c",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=48e1765e2781541c0f8b0893b26d02f27eb5c444",
        "patch": "@@ -667,6 +667,18 @@\n     \"SIGPUSHONLY\",\n     \"P2SH(P2PK) with non-push scriptSig\"\n ],\n+[\n+    \"11 0x47 0x3044022057c4ba463d3b8e6848b3896be14c6953caf0528cd390ad15104a109c94b558ba02206fa3922154e1d0bfca92ce5f9adbe4991be33f3f5b7f6bf501e895b7e37fd72f01\",\n+    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"CLEANSTACK,P2SH\",\n+    \"P2PK with unnecessary input\"\n+],\n+[\n+    \"11 0x47 0x304402203407c26745ea95ee31fbb5074e730ff9be235d5a8d8e0a2c868358bf6a04797402205cc0e594dfd275583472168298d448be59c2530a4ea4d7c37311b82108f9f8bc01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+    \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n+    \"CLEANSTACK,P2SH\",\n+    \"P2SH with unnecessary input\"\n+],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "4889c96d2cde6149cf69c3da2b4a59e296fb38fa",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=48e1765e2781541c0f8b0893b26d02f27eb5c444",
        "patch": "@@ -816,6 +816,24 @@\n     \"SIGPUSHONLY\",\n     \"2-of-2 with two identical keys and sigs pushed\"\n ],\n+[\n+    \"11 0x47 0x304402204ba8b04dfe8657608427b996bd7c151ff8cd8579b3316c7314549a6c59f6bfb7022058cf052927fbc5e51e26dd4711c470bbf7f3adc8aaaf7bfa304eff6bb6e6399e01\",\n+    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"P2SH\",\n+    \"P2PK with unnecessary input but no CLEANSTACK\"\n+],\n+[\n+    \"11 0x47 0x304402202beaa2f6a4ec783091643797f9819b5ae39a03dfcf3b934746e96dd6b2ad5f7202200650a618fb2ce08b4edd160351172e016a041c81622d806390420d15cc6cece401 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+    \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n+    \"P2SH\",\n+    \"P2SH with unnecessary input but no CLEANSTACK\"\n+],\n+[\n+    \"0x47 0x3044022048505fd42afde400932558ea7fa76a52c2fff3130fa820a6a05647f64d5d780e022056a6bc823c95cedf68f6f67ad036533b48b9f3f706355a71f9f6e647e889f79201 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+    \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n+    \"CLEANSTACK,P2SH\",\n+    \"P2SH with CLEANSTACK\"\n+],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "4db8942fa15a06d422bc218560590d998d1ed21d",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=48e1765e2781541c0f8b0893b26d02f27eb5c444",
        "patch": "@@ -483,6 +483,22 @@ BOOST_AUTO_TEST_CASE(script_build)\n                                \"2-of-2 with two identical keys and sigs pushed\", SCRIPT_VERIFY_SIGPUSHONLY\n                               ).Num(0).PushSig(keys.key1).PushSig(keys.key1));\n \n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                               \"P2PK with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH\n+                              ).Num(11).PushSig(keys.key0));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                              \"P2PK with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH\n+                             ).Num(11).PushSig(keys.key0));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                               \"P2SH with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH, true\n+                              ).Num(11).PushSig(keys.key0).PushRedeem());\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                              \"P2SH with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n+                             ).Num(11).PushSig(keys.key0).PushRedeem());\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                               \"P2SH with CLEANSTACK\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n+                              ).PushSig(keys.key0).PushRedeem());\n+\n \n     std::set<std::string> tests_good;\n     std::set<std::string> tests_bad;"
      },
      {
        "sha": "96134cd72e0b7ef11ca2666603a11133c47ee662",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48e1765e2781541c0f8b0893b26d02f27eb5c444/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=48e1765e2781541c0f8b0893b26d02f27eb5c444",
        "patch": "@@ -37,7 +37,8 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"SIGPUSHONLY\"), (unsigned int)SCRIPT_VERIFY_SIGPUSHONLY)\n     (string(\"MINIMALDATA\"), (unsigned int)SCRIPT_VERIFY_MINIMALDATA)\n     (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY)\n-    (string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS);\n+    (string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n+    (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK);\n \n unsigned int ParseScriptFlags(string strFlags)\n {"
      }
    ]
  },
  {
    "sha": "c5e0aef5c4a6beaf9869b942e0671dfb31196533",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWUwYWVmNWM0YTZiZWFmOTg2OWI5NDJlMDY3MWRmYjMxMTk2NTMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T11:06:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T11:07:06Z"
      },
      "message": "Merge pull request #5604\n\nd58c5d6 tests: run sanity checks in tests too (Cory Fields)",
      "tree": {
        "sha": "79c467bd27a6e546da79a7a4789181a6925585c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79c467bd27a6e546da79a7a4789181a6925585c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5e0aef5c4a6beaf9869b942e0671dfb31196533",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrmTaAAoJEHSBCwEjRsmmt+gH/024DbTN8ZFt/9qw+mpkaSu3\nma5LKPiYo//36eumZzJZ4Gbd3jdKdSb9Cx3Ex4MKn1e8IhC+JRsuwjpgQ87uxi8A\n0LWXHGPI5roiqfq7c4sRuv/nAH2S+nhhz389RtbT2rggzMZw0ZvoAMdgS2i+uhhO\nYjtUNsz8k+ZzPh7yb/mkyDjoij33TaPgv5ByL5SYR/jAh+GtfmqwP2K7gPX7T6ke\nNoq+9PY72aQE8DzUTzJbVMgcCxgZZwvN/Mbv6g9VwnnCThRFVCTN7HZ+AbbncHcm\nyAOxPGje06TpmMDLNYCY4dPrrAJ4kl0zAAUa3t2ssPmTNp/cdB7712a6Qd5uCqg=\n=Bg1Y\n-----END PGP SIGNATURE-----",
        "payload": "tree 79c467bd27a6e546da79a7a4789181a6925585c9\nparent 48e1765e2781541c0f8b0893b26d02f27eb5c444\nparent d58c5d6f21fd2421bc8cbb224849e8c38b617775\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420715199 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420715226 +0100\n\nMerge pull request #5604\n\nd58c5d6 tests: run sanity checks in tests too (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5e0aef5c4a6beaf9869b942e0671dfb31196533",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5e0aef5c4a6beaf9869b942e0671dfb31196533",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5e0aef5c4a6beaf9869b942e0671dfb31196533/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48e1765e2781541c0f8b0893b26d02f27eb5c444",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48e1765e2781541c0f8b0893b26d02f27eb5c444",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48e1765e2781541c0f8b0893b26d02f27eb5c444"
      },
      {
        "sha": "d58c5d6f21fd2421bc8cbb224849e8c38b617775",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d58c5d6f21fd2421bc8cbb224849e8c38b617775",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d58c5d6f21fd2421bc8cbb224849e8c38b617775"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "710956a72bea109d07b87d7e012b97156c07b52e",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5e0aef5c4a6beaf9869b942e0671dfb31196533/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5e0aef5c4a6beaf9869b942e0671dfb31196533/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=c5e0aef5c4a6beaf9869b942e0671dfb31196533",
        "patch": "@@ -58,6 +58,7 @@ BITCOIN_TESTS =\\\n   test/netbase_tests.cpp \\\n   test/pmt_tests.cpp \\\n   test/rpc_tests.cpp \\\n+  test/sanity_tests.cpp \\\n   test/script_P2SH_tests.cpp \\\n   test/script_tests.cpp \\\n   test/scriptnum_tests.cpp \\"
      },
      {
        "sha": "464a8fbb8cfb740b82623a7df11d4d0ffc6de5cc",
        "filename": "src/test/sanity_tests.cpp",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5e0aef5c4a6beaf9869b942e0671dfb31196533/src/test/sanity_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5e0aef5c4a6beaf9869b942e0671dfb31196533/src/test/sanity_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sanity_tests.cpp?ref=c5e0aef5c4a6beaf9869b942e0671dfb31196533",
        "patch": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2012-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"compat/sanity.h\"\n+#include \"key.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+BOOST_AUTO_TEST_SUITE(sanity_tests)\n+\n+BOOST_AUTO_TEST_CASE(basic_sanity)\n+{\n+  BOOST_CHECK_MESSAGE(glibc_sanity_test() == true, \"libc sanity test\");\n+  BOOST_CHECK_MESSAGE(glibcxx_sanity_test() == true, \"stdlib sanity test\");\n+  BOOST_CHECK_MESSAGE(ECC_InitSanityCheck() == true, \"openssl ECC test\");\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "c8183bf8ea75608987a00c7c8a1450d89e9ca43a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODE4M2JmOGVhNzU2MDg5ODdhMDBjN2M4YTE0NTBkODllOWNhNDNh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T11:37:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T11:38:10Z"
      },
      "message": "Merge pull request #5589\n\n23f3435 Rename MAX_TX_SIGOPS to MAX_STANDARD_TX_SIGOPS to match similar policy constant MAX_STANDARD_TX_SIZE (Luke Dashjr)",
      "tree": {
        "sha": "a2114829d9aea7c4da4432f3b6b049f8a2c1cde3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2114829d9aea7c4da4432f3b6b049f8a2c1cde3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8183bf8ea75608987a00c7c8a1450d89e9ca43a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrmwiAAoJEHSBCwEjRsmmfukIAKgla+3Twu/bxFwCTPe6dQWs\nbug/ggLIs6wPih5cXkvGhhTZ+6d9GbnwjpLWx2/7VTfVwhuNIPww/vji9pyKXVIL\nWCUkbQGzK26uT7qGXtT+NiMBQxXA2MvXz9WUNc6zg9tvujO67+WjJ34OH/nXe6wP\nBJ0796HKyMSy61Z5lQvQ8ZvnA28nP5vWgzWeXjPfMZ+cFNnHfn3xBPSdrkAc3juu\noZt7k/bP3YxiLP8XJ56t72WA44NYJAhG/RLzFo/LKbBNQ3WQIy0ovz9Dmg3R1M0S\nmU2fcEzhnAHJajwBKXYLa/B9d3qdemn8bf0EDX9nM+77gK14MOz1Vlz83cA+4fw=\n=RmNd\n-----END PGP SIGNATURE-----",
        "payload": "tree a2114829d9aea7c4da4432f3b6b049f8a2c1cde3\nparent c5e0aef5c4a6beaf9869b942e0671dfb31196533\nparent 23f3435962f0cfa57a95b293094fe9d0fe9d968c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420717076 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420717090 +0100\n\nMerge pull request #5589\n\n23f3435 Rename MAX_TX_SIGOPS to MAX_STANDARD_TX_SIGOPS to match similar policy constant MAX_STANDARD_TX_SIZE (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8183bf8ea75608987a00c7c8a1450d89e9ca43a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8183bf8ea75608987a00c7c8a1450d89e9ca43a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8183bf8ea75608987a00c7c8a1450d89e9ca43a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5e0aef5c4a6beaf9869b942e0671dfb31196533",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5e0aef5c4a6beaf9869b942e0671dfb31196533",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5e0aef5c4a6beaf9869b942e0671dfb31196533"
      },
      {
        "sha": "23f3435962f0cfa57a95b293094fe9d0fe9d968c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23f3435962f0cfa57a95b293094fe9d0fe9d968c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23f3435962f0cfa57a95b293094fe9d0fe9d968c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2e9d95445800b0e0237b62de081080bc240ae925",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8183bf8ea75608987a00c7c8a1450d89e9ca43a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8183bf8ea75608987a00c7c8a1450d89e9ca43a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c8183bf8ea75608987a00c7c8a1450d89e9ca43a",
        "patch": "@@ -1002,15 +1002,15 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Check that the transaction doesn't have an excessive number of\n         // sigops, making it impossible to mine. Since the coinbase transaction\n-        // itself can contain sigops MAX_TX_SIGOPS is less than\n+        // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n         // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n         // merely non-standard transaction.\n         unsigned int nSigOps = GetLegacySigOpCount(tx);\n         nSigOps += GetP2SHSigOpCount(tx, view);\n-        if (nSigOps > MAX_TX_SIGOPS)\n+        if (nSigOps > MAX_STANDARD_TX_SIGOPS)\n             return state.DoS(0,\n                              error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",\n-                                   hash.ToString(), nSigOps, MAX_TX_SIGOPS),\n+                                   hash.ToString(), nSigOps, MAX_STANDARD_TX_SIGOPS),\n                              REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n \n         CAmount nValueOut = tx.GetValueOut();"
      },
      {
        "sha": "2b260a665bded7f0ac09c3bf17cd93bd965eb2da",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8183bf8ea75608987a00c7c8a1450d89e9ca43a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8183bf8ea75608987a00c7c8a1450d89e9ca43a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c8183bf8ea75608987a00c7c8a1450d89e9ca43a",
        "patch": "@@ -60,7 +60,7 @@ static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n-static const unsigned int MAX_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n+static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** The maximum size of a blk?????.dat file (since 0.8) */"
      }
    ]
  },
  {
    "sha": "c6a5ad481975c482f33a7f7ecd210f15e2667b62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmE1YWQ0ODE5NzVjNDgyZjMzYTdmN2VjZDIxMGYxNWUyNjY3YjYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T11:49:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T11:53:05Z"
      },
      "message": "Fix tests after #5413\n\nPull #5413 was not rebased after deterministic signing was merged\n(#5227), so the testcases had to be regenerated using UPDATE_JSON_TESTS.",
      "tree": {
        "sha": "a375bf5caa5932a0ddbc8606ef110fac32fca335",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a375bf5caa5932a0ddbc8606ef110fac32fca335"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6a5ad481975c482f33a7f7ecd210f15e2667b62",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrm+iAAoJEHSBCwEjRsmmKNIH/iWuz/rIJTMCY0tcKrLgV/kY\nzHos3zGIF7VdJ0TXZOMbJiNJIR1b4rTLqg0LAbCpaMfeETAB4skx8Kzo0EvgRv5y\n+KtvGEjgBvqht/s6loagQun+ZSLkNDu9aP46EBQIPKmuFWiICgOTjN1HxPsB3DRc\nq+H9JiOBnL/r4S+EchCuR2Nv5LEJoEiI/9Ur/BwlaAYjYIdxzi56WjlqjVBeO06i\nJGTAu5fhYW6ymCvyKhpHzsniTVtCSvEtb88t8EX4pEXaKtKLrqlfcPQTvFtWbseq\nut/Y/hUOSVTYkE1wQuloTC91VZ9R1SaPiJcHbbo91VQ7cNiMaypgBsRda7AvTKI=\n=9zYQ\n-----END PGP SIGNATURE-----",
        "payload": "tree a375bf5caa5932a0ddbc8606ef110fac32fca335\nparent c8183bf8ea75608987a00c7c8a1450d89e9ca43a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420717772 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420717985 +0100\n\nFix tests after #5413\n\nPull #5413 was not rebased after deterministic signing was merged\n(#5227), so the testcases had to be regenerated using UPDATE_JSON_TESTS.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6a5ad481975c482f33a7f7ecd210f15e2667b62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6a5ad481975c482f33a7f7ecd210f15e2667b62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6a5ad481975c482f33a7f7ecd210f15e2667b62/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8183bf8ea75608987a00c7c8a1450d89e9ca43a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8183bf8ea75608987a00c7c8a1450d89e9ca43a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8183bf8ea75608987a00c7c8a1450d89e9ca43a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "42b79e7470e114e1bf63bbec04e9c473aa00fae5",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6a5ad481975c482f33a7f7ecd210f15e2667b62/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6a5ad481975c482f33a7f7ecd210f15e2667b62/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=c6a5ad481975c482f33a7f7ecd210f15e2667b62",
        "patch": "@@ -668,13 +668,13 @@\n     \"P2SH(P2PK) with non-push scriptSig\"\n ],\n [\n-    \"11 0x47 0x3044022057c4ba463d3b8e6848b3896be14c6953caf0528cd390ad15104a109c94b558ba02206fa3922154e1d0bfca92ce5f9adbe4991be33f3f5b7f6bf501e895b7e37fd72f01\",\n+    \"11 0x47 0x3044022053205076a7bb13d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\",\n     \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n     \"CLEANSTACK,P2SH\",\n     \"P2PK with unnecessary input\"\n ],\n [\n-    \"11 0x47 0x304402203407c26745ea95ee31fbb5074e730ff9be235d5a8d8e0a2c868358bf6a04797402205cc0e594dfd275583472168298d448be59c2530a4ea4d7c37311b82108f9f8bc01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+    \"11 0x47 0x304402202f7505132be14872581f35d74b759212d9da40482653f1ffa3116c3294a4a51702206adbf347a2240ca41c66522b1a22a41693610b76a8e7770645dc721d1635854f01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n     \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n     \"CLEANSTACK,P2SH\",\n     \"P2SH with unnecessary input\""
      },
      {
        "sha": "5253d5e39ebed00450275eda4bc73577206dad43",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6a5ad481975c482f33a7f7ecd210f15e2667b62/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6a5ad481975c482f33a7f7ecd210f15e2667b62/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=c6a5ad481975c482f33a7f7ecd210f15e2667b62",
        "patch": "@@ -817,19 +817,19 @@\n     \"2-of-2 with two identical keys and sigs pushed\"\n ],\n [\n-    \"11 0x47 0x304402204ba8b04dfe8657608427b996bd7c151ff8cd8579b3316c7314549a6c59f6bfb7022058cf052927fbc5e51e26dd4711c470bbf7f3adc8aaaf7bfa304eff6bb6e6399e01\",\n+    \"11 0x47 0x3044022053205076a7bb13d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\",\n     \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n     \"P2SH\",\n     \"P2PK with unnecessary input but no CLEANSTACK\"\n ],\n [\n-    \"11 0x47 0x304402202beaa2f6a4ec783091643797f9819b5ae39a03dfcf3b934746e96dd6b2ad5f7202200650a618fb2ce08b4edd160351172e016a041c81622d806390420d15cc6cece401 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+    \"11 0x47 0x304402202f7505132be14872581f35d74b759212d9da40482653f1ffa3116c3294a4a51702206adbf347a2240ca41c66522b1a22a41693610b76a8e7770645dc721d1635854f01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n     \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n     \"P2SH\",\n     \"P2SH with unnecessary input but no CLEANSTACK\"\n ],\n [\n-    \"0x47 0x3044022048505fd42afde400932558ea7fa76a52c2fff3130fa820a6a05647f64d5d780e022056a6bc823c95cedf68f6f67ad036533b48b9f3f706355a71f9f6e647e889f79201 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+    \"0x47 0x304402202f7505132be14872581f35d74b759212d9da40482653f1ffa3116c3294a4a51702206adbf347a2240ca41c66522b1a22a41693610b76a8e7770645dc721d1635854f01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n     \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n     \"CLEANSTACK,P2SH\",\n     \"P2SH with CLEANSTACK\""
      }
    ]
  },
  {
    "sha": "d0c97bbe70a6876dadedfbf672387371c9c849d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGM5N2JiZTcwYTY4NzZkYWRlZGZiZjY3MjM4NzM3MWM5Yzg0OWQx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T12:54:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-08T12:54:17Z"
      },
      "message": "Merge pull request #5617\n\nc6a5ad4 Fix tests after #5413 (Wladimir J. van der Laan)",
      "tree": {
        "sha": "a375bf5caa5932a0ddbc8606ef110fac32fca335",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a375bf5caa5932a0ddbc8606ef110fac32fca335"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0c97bbe70a6876dadedfbf672387371c9c849d1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUrn35AAoJEHSBCwEjRsmmH/YIAMwuypS6Iq3wLfqLiIRIcr+6\naf4c9OcCen/eUOsBjxThrmKulM+zmNdxULdMO6w1AzrlNeGMET9cOhPkw4HitWx+\nIsroJoBPXlvpIQKDlm1C8jBaB17MDxBeLOWoHcH2boidvzqAk/aqdgXXPzaJTW9l\ntb2FbiFnj9IFSu+LPqaEsu3jZQLUpVdjDdm0y3bZqxdlmaSaW4z7D27yidCz+wr5\nacQFX5iNuVz2tUJFUF8ksXbNWL78mnHuHcpVwpLa8I7HnZho42i+WCcjF3Audwfb\nBqvlLjMUrGjmI25QjESFHjc0PqtXSa8HMkmW/wnNePo7VFm2zYx4AXcORvLlgJw=\n=M8uW\n-----END PGP SIGNATURE-----",
        "payload": "tree a375bf5caa5932a0ddbc8606ef110fac32fca335\nparent c8183bf8ea75608987a00c7c8a1450d89e9ca43a\nparent c6a5ad481975c482f33a7f7ecd210f15e2667b62\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1420721650 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1420721657 +0100\n\nMerge pull request #5617\n\nc6a5ad4 Fix tests after #5413 (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c97bbe70a6876dadedfbf672387371c9c849d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c97bbe70a6876dadedfbf672387371c9c849d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c97bbe70a6876dadedfbf672387371c9c849d1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8183bf8ea75608987a00c7c8a1450d89e9ca43a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8183bf8ea75608987a00c7c8a1450d89e9ca43a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8183bf8ea75608987a00c7c8a1450d89e9ca43a"
      },
      {
        "sha": "c6a5ad481975c482f33a7f7ecd210f15e2667b62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6a5ad481975c482f33a7f7ecd210f15e2667b62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6a5ad481975c482f33a7f7ecd210f15e2667b62"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "42b79e7470e114e1bf63bbec04e9c473aa00fae5",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0c97bbe70a6876dadedfbf672387371c9c849d1/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0c97bbe70a6876dadedfbf672387371c9c849d1/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "patch": "@@ -668,13 +668,13 @@\n     \"P2SH(P2PK) with non-push scriptSig\"\n ],\n [\n-    \"11 0x47 0x3044022057c4ba463d3b8e6848b3896be14c6953caf0528cd390ad15104a109c94b558ba02206fa3922154e1d0bfca92ce5f9adbe4991be33f3f5b7f6bf501e895b7e37fd72f01\",\n+    \"11 0x47 0x3044022053205076a7bb13d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\",\n     \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n     \"CLEANSTACK,P2SH\",\n     \"P2PK with unnecessary input\"\n ],\n [\n-    \"11 0x47 0x304402203407c26745ea95ee31fbb5074e730ff9be235d5a8d8e0a2c868358bf6a04797402205cc0e594dfd275583472168298d448be59c2530a4ea4d7c37311b82108f9f8bc01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+    \"11 0x47 0x304402202f7505132be14872581f35d74b759212d9da40482653f1ffa3116c3294a4a51702206adbf347a2240ca41c66522b1a22a41693610b76a8e7770645dc721d1635854f01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n     \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n     \"CLEANSTACK,P2SH\",\n     \"P2SH with unnecessary input\""
      },
      {
        "sha": "5253d5e39ebed00450275eda4bc73577206dad43",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0c97bbe70a6876dadedfbf672387371c9c849d1/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0c97bbe70a6876dadedfbf672387371c9c849d1/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "patch": "@@ -817,19 +817,19 @@\n     \"2-of-2 with two identical keys and sigs pushed\"\n ],\n [\n-    \"11 0x47 0x304402204ba8b04dfe8657608427b996bd7c151ff8cd8579b3316c7314549a6c59f6bfb7022058cf052927fbc5e51e26dd4711c470bbf7f3adc8aaaf7bfa304eff6bb6e6399e01\",\n+    \"11 0x47 0x3044022053205076a7bb13d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\",\n     \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n     \"P2SH\",\n     \"P2PK with unnecessary input but no CLEANSTACK\"\n ],\n [\n-    \"11 0x47 0x304402202beaa2f6a4ec783091643797f9819b5ae39a03dfcf3b934746e96dd6b2ad5f7202200650a618fb2ce08b4edd160351172e016a041c81622d806390420d15cc6cece401 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+    \"11 0x47 0x304402202f7505132be14872581f35d74b759212d9da40482653f1ffa3116c3294a4a51702206adbf347a2240ca41c66522b1a22a41693610b76a8e7770645dc721d1635854f01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n     \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n     \"P2SH\",\n     \"P2SH with unnecessary input but no CLEANSTACK\"\n ],\n [\n-    \"0x47 0x3044022048505fd42afde400932558ea7fa76a52c2fff3130fa820a6a05647f64d5d780e022056a6bc823c95cedf68f6f67ad036533b48b9f3f706355a71f9f6e647e889f79201 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+    \"0x47 0x304402202f7505132be14872581f35d74b759212d9da40482653f1ffa3116c3294a4a51702206adbf347a2240ca41c66522b1a22a41693610b76a8e7770645dc721d1635854f01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n     \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n     \"CLEANSTACK,P2SH\",\n     \"P2SH with CLEANSTACK\""
      }
    ]
  },
  {
    "sha": "13cdce4336818d0f6cefe6b3e61c45762d97d7c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2NkY2U0MzM2ODE4ZDBmNmNlZmU2YjNlNjFjNDU3NjJkOTdkN2M2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-08T13:38:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-08T14:51:15Z"
      },
      "message": "Catch UTXO set read errors and shutdown",
      "tree": {
        "sha": "9d49d6bf7b61801aa9b4e17202034e22344c1f9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d49d6bf7b61801aa9b4e17202034e22344c1f9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13cdce4336818d0f6cefe6b3e61c45762d97d7c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13cdce4336818d0f6cefe6b3e61c45762d97d7c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13cdce4336818d0f6cefe6b3e61c45762d97d7c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13cdce4336818d0f6cefe6b3e61c45762d97d7c6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c97bbe70a6876dadedfbf672387371c9c849d1"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 26,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d6f1e1cb9f9a8d34d06a6ce665bd6552115b7b00",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13cdce4336818d0f6cefe6b3e61c45762d97d7c6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13cdce4336818d0f6cefe6b3e61c45762d97d7c6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=13cdce4336818d0f6cefe6b3e61c45762d97d7c6",
        "patch": "@@ -111,7 +111,28 @@ bool ShutdownRequested()\n     return fRequestShutdown;\n }\n \n+class CCoinsViewErrorCatcher : public CCoinsViewBacked\n+{\n+public:\n+    CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}\n+    bool GetCoins(const uint256 &txid, CCoins &coins) const {\n+        try {\n+            return CCoinsViewBacked::GetCoins(txid, coins);\n+        } catch(const std::runtime_error& e) {\n+            uiInterface.ThreadSafeMessageBox(_(\"Error reading from database, shutting down.\"), \"\", CClientUIInterface::MSG_ERROR);\n+            LogPrintf(\"Error reading from database: %s\\n\", e.what());\n+            // Starting the shutdown sequence and returning false to the caller would be\n+            // interpreted as 'entry not found' (as opposed to unable to read data), and\n+            // could lead to invalid interpration. Just exit immediately, as we can't\n+            // continue anyway, and all writes should be atomic.\n+            abort();\n+        }\n+    }\n+    // Writes do not need similar protection, as failure to write is handled by the caller.\n+};\n+\n static CCoinsViewDB *pcoinsdbview = NULL;\n+static CCoinsViewErrorCatcher *pcoinscatcher = NULL;\n \n void Shutdown()\n {\n@@ -154,6 +175,8 @@ void Shutdown()\n         }\n         delete pcoinsTip;\n         pcoinsTip = NULL;\n+        delete pcoinscatcher;\n+        pcoinscatcher = NULL;\n         delete pcoinsdbview;\n         pcoinsdbview = NULL;\n         delete pblocktree;\n@@ -990,11 +1013,13 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 UnloadBlockIndex();\n                 delete pcoinsTip;\n                 delete pcoinsdbview;\n+                delete pcoinscatcher;\n                 delete pblocktree;\n \n                 pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n                 pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex);\n-                pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n+                pcoinscatcher = new CCoinsViewErrorCatcher(pcoinsdbview);\n+                pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n \n                 if (fReindex)\n                     pblocktree->WriteReindexing(true);"
      }
    ]
  },
  {
    "sha": "2fa9a8ec86033b809a1c48f0396c3482c0d5d33c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmE5YThlYzg2MDMzYjgwOWExYzQ4ZjAzOTZjMzQ4MmMwZDVkMzNj",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-01-09T10:52:57Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-01-09T11:03:22Z"
      },
      "message": "Make empty byte arrays pass CheckSignatureEncoding()\n\nMakes it possible to compactly provide a delibrately invalid signature\nfor use with CHECK(MULTI)SIG. For instance with BIP19 if m != n invalid\nsignatures need to be provided in the scriptSig; prior to this change\nthose invalid signatures would need to be large DER-encoded signatures.\n\nNote that we may want to further expand on this change in the future by\nsaying that only OP_0 is a \"valid\" invalid signature; BIP19 even with\nthis change is inherently malleable as the invalid signatures can be any\nvalidly encoded DER signature.",
      "tree": {
        "sha": "4cd6abf6979cf22bc9962accb7472083e6daa830",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cd6abf6979cf22bc9962accb7472083e6daa830"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJUr7V7XhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwZTg0OTBjMmQyMGFjMTY0Y2I4MmMzMzAzYzlmZDZiODc5\nNDU2OWU5ZTBmYTk4Y2YvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkful1gf9E42QZPHRi15xZNSrvvpWpJFN\n62AF6U+K5wuKPSKHw397k/diljDO18cjgjy77Vg+gvQGZ0TN0TPRXlsBqq+LtCjB\njD3SII84/id71IldgQwYwOqmhbReJou6WC4ENRGUjgs4Wnt7NYWcblirOktL83Q2\n1KTZQ7i9hXBSILQIz+lJqD2me2JenleKPpOqpBMAbCjxOHCMHDtbFzOvy4tuNcBo\nkuTPvE7DAKtO1q51ZIb5vpkiVW2SzA2jssaJB8Xb/bEZ/E+2feGT7zbDJ+3wWGDt\nvL10Os3oD3GhngBTGhdJBqhE42DZd3zb/2gUssEKuYrQggrUF24AHBZAFJkP1Q==\n=vvEg\n-----END PGP SIGNATURE-----",
        "payload": "tree 4cd6abf6979cf22bc9962accb7472083e6daa830\nparent d0c97bbe70a6876dadedfbf672387371c9c849d1\nauthor Peter Todd <pete@petertodd.org> 1420800777 -0500\ncommitter Peter Todd <pete@petertodd.org> 1420801402 -0500\n\nMake empty byte arrays pass CheckSignatureEncoding()\n\nMakes it possible to compactly provide a delibrately invalid signature\nfor use with CHECK(MULTI)SIG. For instance with BIP19 if m != n invalid\nsignatures need to be provided in the scriptSig; prior to this change\nthose invalid signatures would need to be large DER-encoded signatures.\n\nNote that we may want to further expand on this change in the future by\nsaying that only OP_0 is a \"valid\" invalid signature; BIP19 even with\nthis change is inherently malleable as the invalid signatures can be any\nvalidly encoded DER signature.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c97bbe70a6876dadedfbf672387371c9c849d1"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8a06f3d1187827fc994a7f62ab7e3ad7b7d12909",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=2fa9a8ec86033b809a1c48f0396c3482c0d5d33c",
        "patch": "@@ -189,6 +189,11 @@ bool static IsDefinedHashtypeSignature(const valtype &vchSig) {\n }\n \n bool static CheckSignatureEncoding(const valtype &vchSig, unsigned int flags, ScriptError* serror) {\n+    // Empty signature. Not strictly DER encoded, but allowed to provide a\n+    // compact way to provide an invalid signature for use with CHECK(MULTI)SIG\n+    if (vchSig.size() == 0) {\n+        return true;\n+    }\n     if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsDERSignature(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     } else if ((flags & SCRIPT_VERIFY_LOW_S) != 0 && !IsLowDERSignature(vchSig, serror)) {"
      },
      {
        "sha": "9a8fe1ee889e5e59bf2ebc53ae35cac84fd2a169",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=2fa9a8ec86033b809a1c48f0396c3482c0d5d33c",
        "patch": "@@ -504,7 +504,7 @@\n     \"2-of-2 CHECKMULTISIG NOT with the first pubkey invalid, and both signatures validly encoded.\"\n ],\n [\n-    \"0 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501 0\",\n+    \"0 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501 1\",\n     \"2 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 2 CHECKMULTISIG NOT\",\n     \"STRICTENC\",\n     \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but first signature invalid.\""
      },
      {
        "sha": "a187401cd4aafd66fa84d1e53b34326b73ee0ca7",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=2fa9a8ec86033b809a1c48f0396c3482c0d5d33c",
        "patch": "@@ -662,6 +662,11 @@\n [\"0 0 0x02 0x0000\", \"CHECKMULTISIGVERIFY 1\", \"\"],\n [\"0 0x02 0x0000 0\", \"CHECKMULTISIGVERIFY 1\", \"\"],\n \n+[\"While not really correctly DER encoded, the empty signature is allowed by\"],\n+[\"STRICTENC to provide a compact way to provide a delibrately invalid signature.\"],\n+[\"0\", \"0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 CHECKSIG NOT\", \"STRICTENC\"],\n+[\"0 0\", \"1 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 1 CHECKMULTISIG NOT\", \"STRICTENC\"],\n+\n [\"CHECKMULTISIG evaluation order tests. CHECKMULTISIG evaluates signatures and\"],\n [\"pubkeys in a specific order, and will exit early if the number of signatures\"],\n [\"left to check is greater than the number of keys left. As STRICTENC fails the\"],"
      },
      {
        "sha": "9501169943d97d0c007e0ffe7159ae8d382d525c",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=2fa9a8ec86033b809a1c48f0396c3482c0d5d33c",
        "patch": "@@ -116,10 +116,6 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         }\n     }\n     s.clear();\n-    s << OP_0 << OP_0;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err));\n-    BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n-    s.clear();\n     s << OP_0 << OP_1;\n     BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));"
      }
    ]
  },
  {
    "sha": "98c222b5aa94543fce683b989356b0d8ad1f1d22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OGMyMjJiNWFhOTQ1NDNmY2U2ODNiOTg5MzU2YjBkOGFkMWYxZDIy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-09T19:57:17Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-09T20:11:47Z"
      },
      "message": "[Qt] optimize helpmessage dialog\n\n- enlarge standard size\n- remove fixed 10px font\n- remove left mood image\n- ensure that table has no ugly line-breaks on OSX, Linux",
      "tree": {
        "sha": "0866c6e941a50e117b982aadc460e7dec64a30de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0866c6e941a50e117b982aadc460e7dec64a30de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98c222b5aa94543fce683b989356b0d8ad1f1d22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98c222b5aa94543fce683b989356b0d8ad1f1d22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98c222b5aa94543fce683b989356b0d8ad1f1d22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98c222b5aa94543fce683b989356b0d8ad1f1d22/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c97bbe70a6876dadedfbf672387371c9c849d1"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 5,
      "deletions": 35
    },
    "files": [
      {
        "sha": "31fe3a9f691d0fee2659ca6a334e5c6915619fd7",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98c222b5aa94543fce683b989356b0d8ad1f1d22/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98c222b5aa94543fce683b989356b0d8ad1f1d22/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=98c222b5aa94543fce683b989356b0d8ad1f1d22",
        "patch": "@@ -314,8 +314,7 @@ BITCOIN_QT_CPP += \\\n   qt/walletview.cpp\n endif\n \n-RES_IMAGES = \\\n-  qt/res/images/about.png\n+RES_IMAGES = \n \n RES_MOVIES = $(wildcard qt/res/movies/spinner-*.png)\n "
      },
      {
        "sha": "63af146fd02e8260cd67589e114c0599add60fed",
        "filename": "src/qt/bitcoin.qrc",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98c222b5aa94543fce683b989356b0d8ad1f1d22/src/qt/bitcoin.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98c222b5aa94543fce683b989356b0d8ad1f1d22/src/qt/bitcoin.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.qrc?ref=98c222b5aa94543fce683b989356b0d8ad1f1d22",
        "patch": "@@ -46,9 +46,6 @@\n         <file alias=\"about_qt\">res/icons/about_qt.png</file>\n         <file alias=\"verify\">res/icons/verify.png</file>\n     </qresource>\n-    <qresource prefix=\"/images\">\n-        <file alias=\"about\">res/images/about.png</file>\n-    </qresource>\n     <qresource prefix=\"/movies\">\n         <file alias=\"spinner-000\">res/movies/spinner-000.png</file>\n         <file alias=\"spinner-001\">res/movies/spinner-001.png</file>"
      },
      {
        "sha": "37008f047e9cd3a80205aadb4678ce9f658381f6",
        "filename": "src/qt/forms/helpmessagedialog.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 28,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98c222b5aa94543fce683b989356b0d8ad1f1d22/src/qt/forms/helpmessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98c222b5aa94543fce683b989356b0d8ad1f1d22/src/qt/forms/helpmessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/helpmessagedialog.ui?ref=98c222b5aa94543fce683b989356b0d8ad1f1d22",
        "patch": "@@ -6,32 +6,14 @@\n    <rect>\n     <x>0</x>\n     <y>0</y>\n-    <width>585</width>\n-    <height>225</height>\n+    <width>780</width>\n+    <height>400</height>\n    </rect>\n   </property>\n-  <property name=\"font\">\n-   <font>\n-    <pointsize>10</pointsize>\n-   </font>\n-  </property>\n   <property name=\"windowTitle\">\n    <string notr=\"true\">Bitcoin Core - Command-line options</string>\n   </property>\n   <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2\">\n-   <item>\n-    <widget class=\"QLabel\" name=\"graphic\">\n-     <property name=\"sizePolicy\">\n-      <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Ignored\">\n-       <horstretch>0</horstretch>\n-       <verstretch>0</verstretch>\n-      </sizepolicy>\n-     </property>\n-     <property name=\"pixmap\">\n-      <pixmap resource=\"../bitcoin.qrc\">:/images/about</pixmap>\n-     </property>\n-    </widget>\n-   </item>\n    <item>\n     <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n      <item>\n@@ -50,14 +32,6 @@\n         <bool>true</bool>\n        </property>\n        <widget class=\"QWidget\" name=\"scrollAreaWidgetContents\">\n-        <property name=\"geometry\">\n-         <rect>\n-          <x>0</x>\n-          <y>0</y>\n-          <width>447</width>\n-          <height>68</height>\n-         </rect>\n-        </property>\n         <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\">\n          <item>\n           <widget class=\"QLabel\" name=\"aboutMessage\">"
      },
      {
        "sha": "fdede6617264cbb3ffec888fc35679c192344aaf",
        "filename": "src/qt/res/images/about.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0c97bbe70a6876dadedfbf672387371c9c849d1/src/qt/res/images/about.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0c97bbe70a6876dadedfbf672387371c9c849d1/src/qt/res/images/about.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/images/about.png?ref=d0c97bbe70a6876dadedfbf672387371c9c849d1"
      },
      {
        "sha": "06560627f2d3272146e6da9afedfafa9e7b369d9",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98c222b5aa94543fce683b989356b0d8ad1f1d22/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98c222b5aa94543fce683b989356b0d8ad1f1d22/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=98c222b5aa94543fce683b989356b0d8ad1f1d22",
        "patch": "@@ -73,8 +73,8 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         tf.setBorderStyle(QTextFrameFormat::BorderStyle_None);\n         tf.setCellPadding(2);\n         QVector<QTextLength> widths;\n-        widths << QTextLength(QTextLength::PercentageLength, 20);\n-        widths << QTextLength(QTextLength::PercentageLength, 80);\n+        widths << QTextLength(QTextLength::PercentageLength, 35);\n+        widths << QTextLength(QTextLength::PercentageLength, 65);\n         tf.setColumnWidthConstraints(widths);\n         QTextTable *table = cursor.insertTable(2, 2, tf);\n "
      }
    ]
  },
  {
    "sha": "488ed32f2ada1d1dd108fc245d025c4d5f252783",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODhlZDMyZjJhZGExZDFkZDEwOGZjMjQ1ZDAyNWM0ZDVmMjUyNzgz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-09T21:39:12Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-10T02:31:31Z"
      },
      "message": "consensus: guard against openssl's new strict DER checks\n\nNew versions of OpenSSL will reject non-canonical DER signatures. However,\nit'll happily decode them. Decode then re-encode before verification in order\nto ensure that it is properly consumed.",
      "tree": {
        "sha": "8fa890506b4568b7a5d25f3117cbdb7d6d6517ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fa890506b4568b7a5d25f3117cbdb7d6d6517ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/488ed32f2ada1d1dd108fc245d025c4d5f252783",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/488ed32f2ada1d1dd108fc245d025c4d5f252783",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/488ed32f2ada1d1dd108fc245d025c4d5f252783",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/488ed32f2ada1d1dd108fc245d025c4d5f252783/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c97bbe70a6876dadedfbf672387371c9c849d1"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 13,
      "deletions": 3
    },
    "files": [
      {
        "sha": "33dd9a9a2939a325fbac4859170043587027b761",
        "filename": "src/ecwrapper.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/488ed32f2ada1d1dd108fc245d025c4d5f252783/src/ecwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/488ed32f2ada1d1dd108fc245d025c4d5f252783/src/ecwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.cpp?ref=488ed32f2ada1d1dd108fc245d025c4d5f252783",
        "patch": "@@ -117,10 +117,20 @@ bool CECKey::SetPubKey(const unsigned char* pubkey, size_t size) {\n }\n \n bool CECKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) {\n-    // -1 = error, 0 = bad sig, 1 = good\n-    if (ECDSA_verify(0, (unsigned char*)&hash, sizeof(hash), &vchSig[0], vchSig.size(), pkey) != 1)\n+    // New versions of OpenSSL will reject non-canonical DER signatures. de/re-serialize first.\n+    unsigned char *norm_der = NULL;\n+    ECDSA_SIG *norm_sig = ECDSA_SIG_new();\n+    const unsigned char* sigptr = &vchSig[0];\n+    d2i_ECDSA_SIG(&norm_sig, &sigptr, vchSig.size());\n+    int derlen = i2d_ECDSA_SIG(norm_sig, &norm_der);\n+    ECDSA_SIG_free(norm_sig);\n+    if (derlen <= 0)\n         return false;\n-    return true;\n+\n+    // -1 = error, 0 = bad sig, 1 = good\n+    bool ret = ECDSA_verify(0, (unsigned char*)&hash, sizeof(hash), norm_der, derlen, pkey) == 1;\n+    OPENSSL_free(norm_der);\n+    return ret;\n }\n \n bool CECKey::Recover(const uint256 &hash, const unsigned char *p64, int rec)"
      }
    ]
  },
  {
    "sha": "dad7764a9dedb1143b6ea8bfd37f71f7ff72f518",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWQ3NzY0YTlkZWRiMTE0M2I2ZWE4YmZkMzdmNzFmN2ZmNzJmNTE4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-10T01:52:55Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-10T02:31:38Z"
      },
      "message": "depends: bump openssl to 1.0.1k",
      "tree": {
        "sha": "cfbb28ebbf1fd6069db0c4c1eabef8a8ea40c116",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfbb28ebbf1fd6069db0c4c1eabef8a8ea40c116"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dad7764a9dedb1143b6ea8bfd37f71f7ff72f518",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dad7764a9dedb1143b6ea8bfd37f71f7ff72f518",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dad7764a9dedb1143b6ea8bfd37f71f7ff72f518",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dad7764a9dedb1143b6ea8bfd37f71f7ff72f518/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "488ed32f2ada1d1dd108fc245d025c4d5f252783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/488ed32f2ada1d1dd108fc245d025c4d5f252783",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/488ed32f2ada1d1dd108fc245d025c4d5f252783"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "32eb1e65395d1f0df3951df0501044d2c605f68c",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad7764a9dedb1143b6ea8bfd37f71f7ff72f518/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad7764a9dedb1143b6ea8bfd37f71f7ff72f518/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=dad7764a9dedb1143b6ea8bfd37f71f7ff72f518",
        "patch": "@@ -1,8 +1,8 @@\n package=openssl\n-$(package)_version=1.0.1j\n+$(package)_version=1.0.1k\n $(package)_download_path=https://www.openssl.org/source\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=1b60ca8789ba6f03e8ef20da2293b8dc131c39d83814e775069f02d26354edf3\n+$(package)_sha256_hash=8f9faeaebad088e772f4ef5e38252d472be4d878c6b3a2718c10a4fcebe7a41c\n \n define $(package)_set_vars\n $(package)_config_env=AR=\"$($(package)_ar)\" RANLIB=\"$($(package)_ranlib)\" CC=\"$($(package)_cc)\""
      }
    ]
  },
  {
    "sha": "8dccba6a45db0466370726ed462b9da2eae43bce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGNjYmE2YTQ1ZGIwNDY2MzcwNzI2ZWQ0NjJiOWRhMmVhZTQzYmNl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-10T03:06:08Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-10T03:06:55Z"
      },
      "message": "fail immediately on an empty signature",
      "tree": {
        "sha": "44083128b139ad0171401972140430fd99cb4d32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44083128b139ad0171401972140430fd99cb4d32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8dccba6a45db0466370726ed462b9da2eae43bce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dccba6a45db0466370726ed462b9da2eae43bce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8dccba6a45db0466370726ed462b9da2eae43bce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dccba6a45db0466370726ed462b9da2eae43bce/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dad7764a9dedb1143b6ea8bfd37f71f7ff72f518",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dad7764a9dedb1143b6ea8bfd37f71f7ff72f518",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dad7764a9dedb1143b6ea8bfd37f71f7ff72f518"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0236e90c166e6c57f45b419f1051d6b00bc02b47",
        "filename": "src/ecwrapper.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dccba6a45db0466370726ed462b9da2eae43bce/src/ecwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dccba6a45db0466370726ed462b9da2eae43bce/src/ecwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.cpp?ref=8dccba6a45db0466370726ed462b9da2eae43bce",
        "patch": "@@ -117,6 +117,9 @@ bool CECKey::SetPubKey(const unsigned char* pubkey, size_t size) {\n }\n \n bool CECKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) {\n+    if (vchSig.empty())\n+        return false;\n+\n     // New versions of OpenSSL will reject non-canonical DER signatures. de/re-serialize first.\n     unsigned char *norm_der = NULL;\n     ECDSA_SIG *norm_sig = ECDSA_SIG_new();"
      }
    ]
  },
  {
    "sha": "4f73a8f64d1555b4053f2a0a5c79083e50a0ce21",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjczYThmNjRkMTU1NWI0MDUzZjJhMGE1Yzc5MDgzZTUwYTBjZTIx",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-01-10T03:56:28Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-01-10T04:21:19Z"
      },
      "message": "Merge pull request #5634\n\n8dccba6 fail immediately on an empty signature (Cory Fields)\ndad7764 depends: bump openssl to 1.0.1k (Cory Fields)\n488ed32 consensus: guard against openssl's new strict DER checks (Cory Fields)",
      "tree": {
        "sha": "44083128b139ad0171401972140430fd99cb4d32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44083128b139ad0171401972140430fd99cb4d32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJUsKi/AAoJEOq1r5TZ6avnn+oQAJTJb0d7my+2NMA9o3K0++OT\n8eLE4DqQHgzLkxgIW8PKM/B2n0qsxla2msNfzmTwT7zRaGNZbwX3eaLcmVDQKfsU\nMiuYFbMRYMR155hXgZJ2gIPUSJiZqw27WVgRCyZLgeNLQYIkA2MHEncD+YTsTI+4\n55gQJw1nudQ6CkK0a1vltCAjQ85MniIcmQtsEg07Ri1UAyKWRIdqf1vsBW2enJSh\nEH9ERCm3V2xm54A9vG3Yjk48K0qFiy+rWiEmYhT16/MjpA2ZSNfKgEwSZwqUmir5\ni13mtoO9sVAaBFAecxdGZRvr0FB7frAK7HGJzROBCN7tZhsB8KJ9cT2YHkfdykOZ\nXhWobg9M/zLlAkuKVL8FdgQ2nuMjU7gcKNTD2OtPng7aqLIrjYWKo9A0J/MCMjEt\nSwpCnVR11NMpZrCXh5bIa9XYmtn87mn0AG0mq/IaoFG+XP54iP9sEiH0+Y6rbsoA\nWNqhvOV9JTpNjHOZv8QMyYYXj4yLNxuaPG3PlgFkHXmYKukaKOk1EAiQpCSV0XG7\nwscb2bmJQ6e6p72qNRT4XBqSFH7om5MvNZNGhW20PydnZxiaCZeVAUIsXHjJDBzW\n/C7wkvBCR34IbjjwbJCigAk0c9IUsUTBaOnXK2kwISxV0+Mo23JoTIjOOGlsVZBA\nR2RMBqB+LehiU3dJ0zJa\n=7k+0\n-----END PGP SIGNATURE-----",
        "payload": "tree 44083128b139ad0171401972140430fd99cb4d32\nparent d0c97bbe70a6876dadedfbf672387371c9c849d1\nparent 8dccba6a45db0466370726ed462b9da2eae43bce\nauthor Gregory Maxwell <greg@xiph.org> 1420862188 -0800\ncommitter Gregory Maxwell <greg@xiph.org> 1420863679 -0800\n\nMerge pull request #5634\n\n8dccba6 fail immediately on an empty signature (Cory Fields)\ndad7764 depends: bump openssl to 1.0.1k (Cory Fields)\n488ed32 consensus: guard against openssl's new strict DER checks (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c97bbe70a6876dadedfbf672387371c9c849d1"
      },
      {
        "sha": "8dccba6a45db0466370726ed462b9da2eae43bce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dccba6a45db0466370726ed462b9da2eae43bce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8dccba6a45db0466370726ed462b9da2eae43bce"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "32eb1e65395d1f0df3951df0501044d2c605f68c",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=4f73a8f64d1555b4053f2a0a5c79083e50a0ce21",
        "patch": "@@ -1,8 +1,8 @@\n package=openssl\n-$(package)_version=1.0.1j\n+$(package)_version=1.0.1k\n $(package)_download_path=https://www.openssl.org/source\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=1b60ca8789ba6f03e8ef20da2293b8dc131c39d83814e775069f02d26354edf3\n+$(package)_sha256_hash=8f9faeaebad088e772f4ef5e38252d472be4d878c6b3a2718c10a4fcebe7a41c\n \n define $(package)_set_vars\n $(package)_config_env=AR=\"$($(package)_ar)\" RANLIB=\"$($(package)_ranlib)\" CC=\"$($(package)_cc)\""
      },
      {
        "sha": "0236e90c166e6c57f45b419f1051d6b00bc02b47",
        "filename": "src/ecwrapper.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21/src/ecwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21/src/ecwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.cpp?ref=4f73a8f64d1555b4053f2a0a5c79083e50a0ce21",
        "patch": "@@ -117,10 +117,23 @@ bool CECKey::SetPubKey(const unsigned char* pubkey, size_t size) {\n }\n \n bool CECKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) {\n-    // -1 = error, 0 = bad sig, 1 = good\n-    if (ECDSA_verify(0, (unsigned char*)&hash, sizeof(hash), &vchSig[0], vchSig.size(), pkey) != 1)\n+    if (vchSig.empty())\n         return false;\n-    return true;\n+\n+    // New versions of OpenSSL will reject non-canonical DER signatures. de/re-serialize first.\n+    unsigned char *norm_der = NULL;\n+    ECDSA_SIG *norm_sig = ECDSA_SIG_new();\n+    const unsigned char* sigptr = &vchSig[0];\n+    d2i_ECDSA_SIG(&norm_sig, &sigptr, vchSig.size());\n+    int derlen = i2d_ECDSA_SIG(norm_sig, &norm_der);\n+    ECDSA_SIG_free(norm_sig);\n+    if (derlen <= 0)\n+        return false;\n+\n+    // -1 = error, 0 = bad sig, 1 = good\n+    bool ret = ECDSA_verify(0, (unsigned char*)&hash, sizeof(hash), norm_der, derlen, pkey) == 1;\n+    OPENSSL_free(norm_der);\n+    return ret;\n }\n \n bool CECKey::Recover(const uint256 &hash, const unsigned char *p64, int rec)"
      }
    ]
  },
  {
    "sha": "0fd9e2bf43d217d9a76003476661c8ab53606548",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmQ5ZTJiZjQzZDIxN2Q5YTc2MDAzNDc2NjYxYzhhYjUzNjA2NTQ4",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-10T14:02:12Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-10T14:02:12Z"
      },
      "message": "[Qt] don't allow amount changes when AmountSpinBox is read-only\n\n- before it was possible to use the steps to change e.g. amouns of\n  authenticated or unauthenticated payment requests (AmountSpinBox is\n  already set to read-only here) - this is now fixed\n- also move the reimplemented stepEnabled() function to the\n  protected section of our class, where it belongs (see Qt doc)",
      "tree": {
        "sha": "a243e1438970ac6666c9547647898ef1b0fe6094",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a243e1438970ac6666c9547647898ef1b0fe6094"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fd9e2bf43d217d9a76003476661c8ab53606548",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fd9e2bf43d217d9a76003476661c8ab53606548",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fd9e2bf43d217d9a76003476661c8ab53606548",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fd9e2bf43d217d9a76003476661c8ab53606548/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "4f73a8f64d1555b4053f2a0a5c79083e50a0ce21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 21,
      "deletions": 17
    },
    "files": [
      {
        "sha": "3e0ca0282bd36de0fdd17115d93ad28e869fb9e8",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 17,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fd9e2bf43d217d9a76003476661c8ab53606548/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fd9e2bf43d217d9a76003476661c8ab53606548/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=0fd9e2bf43d217d9a76003476661c8ab53606548",
        "patch": "@@ -20,6 +20,7 @@\n class AmountSpinBox: public QAbstractSpinBox\n {\n     Q_OBJECT\n+\n public:\n     explicit AmountSpinBox(QWidget *parent):\n         QAbstractSpinBox(parent),\n@@ -72,23 +73,6 @@ class AmountSpinBox: public QAbstractSpinBox\n         setValue(val);\n     }\n \n-    StepEnabled stepEnabled() const\n-    {\n-        StepEnabled rv = 0;\n-        if(text().isEmpty()) // Allow step-up with empty field\n-            return StepUpEnabled;\n-        bool valid = false;\n-        CAmount val = value(&valid);\n-        if(valid)\n-        {\n-            if(val > 0)\n-                rv |= StepDownEnabled;\n-            if(val < BitcoinUnits::maxMoney())\n-                rv |= StepUpEnabled;\n-        }\n-        return rv;\n-    }\n-\n     void setDisplayUnit(int unit)\n     {\n         bool valid = false;\n@@ -139,6 +123,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         }\n         return cachedMinimumSizeHint;\n     }\n+\n private:\n     int currentUnit;\n     CAmount singleStep;\n@@ -179,6 +164,25 @@ class AmountSpinBox: public QAbstractSpinBox\n         return QAbstractSpinBox::event(event);\n     }\n \n+    StepEnabled stepEnabled() const\n+    {\n+        StepEnabled rv = 0;\n+        if (isReadOnly()) // Disable steps when AmountSpinBox is read-only\n+            return StepNone;\n+        if(text().isEmpty()) // Allow step-up with empty field\n+            return StepUpEnabled;\n+        bool valid = false;\n+        CAmount val = value(&valid);\n+        if(valid)\n+        {\n+            if(val > 0)\n+                rv |= StepDownEnabled;\n+            if(val < BitcoinUnits::maxMoney())\n+                rv |= StepUpEnabled;\n+        }\n+        return rv;\n+    }\n+\n signals:\n     void valueChanged();\n };"
      }
    ]
  },
  {
    "sha": "1078fb08851442bcd7750c3d5015dc1fe7e4d927",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDc4ZmIwODg1MTQ0MmJjZDc3NTBjM2Q1MDE1ZGMxZmU3ZTRkOTI3",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2015-01-08T19:45:56Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2015-01-11T09:12:40Z"
      },
      "message": "Make nicer pull request merge messages",
      "tree": {
        "sha": "2c09142fdf61381a3f56e83ad3257cbeb5850ef8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c09142fdf61381a3f56e83ad3257cbeb5850ef8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1078fb08851442bcd7750c3d5015dc1fe7e4d927",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABCAAGBQJUsj6JAAoJEKwQnRXqhFHxYNUL/iBbqI5KH5a896+UMbrevZB7\ntX9TCPzKouuBNjj3t6GI50fGfrIThqzpP7qnve/SXPJv51cS52YNI5pKontRJWq4\nZE8BRfvSpm7S1oAXl1XXxCl5iixv9/Xz599fHUFeWPfHH4Q+4izydblrI0UCnI2F\nJ5KrW/W4181v7yDvf2z0QV8glbMbP9tg6Rk+Py1e0EuRKgQGF0VAyz2t5r3s7PXc\noAhqNpx0/myECMdeHjPMfa2aB0agfR3SW6duIa87E40GUVRf1OxCDcUOKFjHcaPl\nsKWbgXZN0mGR1DIARfCTygKgZVn3H6YIQRlV50bilX+3vx/FqRaP3Wczp/RCQqjP\nN1c4lxUezxYHzruCh6dS3x2xsoT2zvpWcqk+794DnDO0X968fNr6oDNcss73dKzR\n7kDHrH8PVUGlu5DtNOyIxcQnH9ofF0Mt1s3BGhXewHt8lte9m4QyI3oywOpOE3G7\n86WrQdOMOYDV4pFhOdjjVO0shsbzt4WpGfHSDiO5Ug==\n=p5Ie\n-----END PGP SIGNATURE-----",
        "payload": "tree 2c09142fdf61381a3f56e83ad3257cbeb5850ef8\nparent d0c97bbe70a6876dadedfbf672387371c9c849d1\nauthor BtcDrak <btcdrak@gmail.com> 1420746356 +0000\ncommitter BtcDrak <btcdrak@gmail.com> 1420967560 +0000\n\nMake nicer pull request merge messages\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1078fb08851442bcd7750c3d5015dc1fe7e4d927",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1078fb08851442bcd7750c3d5015dc1fe7e4d927",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1078fb08851442bcd7750c3d5015dc1fe7e4d927/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c97bbe70a6876dadedfbf672387371c9c849d1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7e3dad49d2edbf3f7aebafd81cad9d6cb4fac2be",
        "filename": "contrib/devtools/github-merge.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1078fb08851442bcd7750c3d5015dc1fe7e4d927/contrib/devtools/github-merge.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1078fb08851442bcd7750c3d5015dc1fe7e4d927/contrib/devtools/github-merge.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.sh?ref=1078fb08851442bcd7750c3d5015dc1fe7e4d927",
        "patch": "@@ -82,13 +82,15 @@ function cleanup() {\n }\n \n # Create unsigned merge commit.\n+PRTITLE=`curl -s https://api.github.com/repos/$REPO/pulls/$PULL | grep -e '  \"title\": \".*\",'| awk -F'\"' '{print $4}'`\n+MERGEMESSAGE=\"Merge #$PULL: $PRTITLE\"\n (\n-  echo \"Merge pull request #$PULL\"\n+  echo $MERGEMESSAGE\n   echo \"\"\n   git log --no-merges --topo-order --pretty='format:%h %s (%an)' pull/\"$PULL\"/base..pull/\"$PULL\"/head\n )>\"$TMPDIR/message\"\n if git merge -q --commit --no-edit --no-ff -m \"$(<\"$TMPDIR/message\")\" pull/\"$PULL\"/head; then\n-  if [ \"d$(git log --pretty='format:%s' -n 1)\" != \"dMerge pull request #$PULL\" ]; then\n+  if [ \"d$(git log --pretty='format:%s' -n 1)\" != \"d$MERGEMESSAGE\" ]; then\n     echo \"ERROR: Creating merge failed (already merged?).\" >&2\n     cleanup\n     exit 4"
      }
    ]
  },
  {
    "sha": "851296a72fc6930404abb94f4175acc1b1aab859",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTEyOTZhNzJmYzY5MzA0MDRhYmI5NGY0MTc1YWNjMWIxYWFiODU5",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-10T13:48:55Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-11T18:16:57Z"
      },
      "message": "[Qt] add option to allow self signed root certs (for testing)\n\n- it is helpful to be able to test and verify payment request processing\n  by allowing self signed root certificates (e.g. generated by Gavins\n  \"certificate authority in a box\")\n- This option is just shown in the UI options, if -help-debug is enabled.",
      "tree": {
        "sha": "e264ef12eb4b0b8991d04f71504df1a11d54bf93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e264ef12eb4b0b8991d04f71504df1a11d54bf93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/851296a72fc6930404abb94f4175acc1b1aab859",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/851296a72fc6930404abb94f4175acc1b1aab859",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/851296a72fc6930404abb94f4175acc1b1aab859",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/851296a72fc6930404abb94f4175acc1b1aab859/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "4f73a8f64d1555b4053f2a0a5c79083e50a0ce21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 16,
      "deletions": 1
    },
    "files": [
      {
        "sha": "39171c89eb5fa2e04afde48ae74acd3d3279a1b7",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/851296a72fc6930404abb94f4175acc1b1aab859/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/851296a72fc6930404abb94f4175acc1b1aab859/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=851296a72fc6930404abb94f4175acc1b1aab859",
        "patch": "@@ -9,6 +9,8 @@\n \n #include \"paymentrequestplus.h\"\n \n+#include \"util.h\"\n+\n #include <stdexcept>\n \n #include <openssl/x509.h>\n@@ -150,7 +152,13 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         int result = X509_verify_cert(store_ctx);\n         if (result != 1) {\n             int error = X509_STORE_CTX_get_error(store_ctx);\n-            throw SSLVerifyError(X509_verify_cert_error_string(error));\n+            // For testing payment requests, we allow self signed root certs!\n+            // This option is just shown in the UI options, if -help-debug is enabled.\n+            if (!(error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT && GetBoolArg(\"-allowselfsignedrootcertificates\", false))) {\n+                throw SSLVerifyError(X509_verify_cert_error_string(error));\n+            } else {\n+               qDebug() << \"PaymentRequestPlus::getMerchant: Allowing self signed root certificate, because -allowselfsignedrootcertificates is true.\";\n+            }\n         }\n         X509_NAME *certname = X509_get_subject_name(signing_cert);\n "
      },
      {
        "sha": "1e1583fb19051855b361b08c30ce54899a16eb24",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/851296a72fc6930404abb94f4175acc1b1aab859/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/851296a72fc6930404abb94f4175acc1b1aab859/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=851296a72fc6930404abb94f4175acc1b1aab859",
        "patch": "@@ -12,6 +12,7 @@\n \n #include \"clientversion.h\"\n #include \"init.h\"\n+#include \"util.h\"\n \n #include <stdio.h>\n \n@@ -108,6 +109,12 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         cursor.movePosition(QTextCursor::NextRow);\n         cursor.insertText(tr(\"UI options\") + \":\", bold);\n         cursor.movePosition(QTextCursor::NextRow);\n+        if (GetBoolArg(\"-help-debug\", false)) {\n+            cursor.insertText(\"-allowselfsignedrootcertificates\");\n+            cursor.movePosition(QTextCursor::NextCell);\n+            cursor.insertText(tr(\"Allow self signed root certificates (default: 0)\"));\n+            cursor.movePosition(QTextCursor::NextCell);\n+        }\n         cursor.insertText(\"-choosedatadir\");\n         cursor.movePosition(QTextCursor::NextCell);\n         cursor.insertText(tr(\"Choose data directory on startup (default: 0)\"));"
      }
    ]
  },
  {
    "sha": "c6b7b29f232c651f898eeffb93f36c8f537c56d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmI3YjI5ZjIzMmM2NTFmODk4ZWVmZmI5M2YzNmM4ZjUzN2M1NmQy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-11T10:08:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-12T07:59:03Z"
      },
      "message": "Improve robustness of DER recoding code\n\nAdd some defensive programming on top of #5634.\n\nThis copies the respective OpenSSL code in ECDSA_verify in\nOpenSSL pre-1.0.1k (e.g. https://github.com/openssl/openssl/blob/OpenSSL_1_0_1j/crypto/ecdsa/ecs_vrf.c#L89)\nmore closely.\n\nAs reported by @sergiodemianlerner.",
      "tree": {
        "sha": "23fd890755438012c9a2eb460a022842dcbe7105",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23fd890755438012c9a2eb460a022842dcbe7105"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6b7b29f232c651f898eeffb93f36c8f537c56d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b7b29f232c651f898eeffb93f36c8f537c56d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6b7b29f232c651f898eeffb93f36c8f537c56d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b7b29f232c651f898eeffb93f36c8f537c56d2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f73a8f64d1555b4053f2a0a5c79083e50a0ce21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5e3aec25baf70f7478f99aaa4747be300ab1b83d",
        "filename": "src/ecwrapper.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6b7b29f232c651f898eeffb93f36c8f537c56d2/src/ecwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6b7b29f232c651f898eeffb93f36c8f537c56d2/src/ecwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.cpp?ref=c6b7b29f232c651f898eeffb93f36c8f537c56d2",
        "patch": "@@ -124,7 +124,18 @@ bool CECKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSi\n     unsigned char *norm_der = NULL;\n     ECDSA_SIG *norm_sig = ECDSA_SIG_new();\n     const unsigned char* sigptr = &vchSig[0];\n-    d2i_ECDSA_SIG(&norm_sig, &sigptr, vchSig.size());\n+    assert(norm_sig);\n+    if (d2i_ECDSA_SIG(&norm_sig, &sigptr, vchSig.size()) == NULL)\n+    {\n+        /* As of OpenSSL 1.0.0p d2i_ECDSA_SIG frees and nulls the pointer on\n+         * error. But OpenSSL's own use of this function redundantly frees the\n+         * result. As ECDSA_SIG_free(NULL) is a no-op, and in the absence of a\n+         * clear contract for the function behaving the same way is more\n+         * conservative.\n+         */\n+        ECDSA_SIG_free(norm_sig);\n+        return false;\n+    }\n     int derlen = i2d_ECDSA_SIG(norm_sig, &norm_der);\n     ECDSA_SIG_free(norm_sig);\n     if (derlen <= 0)"
      }
    ]
  },
  {
    "sha": "8d0fd4646099132f0a68d6c3d0da3a6a10ab9631",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDBmZDQ2NDYwOTkxMzJmMGE2OGQ2YzNkMGRhM2E2YTEwYWI5NjMx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-12T08:09:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-12T08:09:56Z"
      },
      "message": "Merge pull request #5640\n\nc6b7b29 Improve robustness of DER recoding code (Wladimir J. van der Laan)",
      "tree": {
        "sha": "23fd890755438012c9a2eb460a022842dcbe7105",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23fd890755438012c9a2eb460a022842dcbe7105"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d0fd4646099132f0a68d6c3d0da3a6a10ab9631",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUs4FUAAoJEHSBCwEjRsmmo5kIAIV+/DJ8zm8P/SYydDaaAcPS\nyGnNs0hMNzcbG+OAOLFjLeE5A5KijZthYSUtaGY2tP4t4IB9VOxBqzAdRag5SJEP\nHy4ELhDogiuGBh96Gzo4DRmw8AVpGFPf0XQ97Zt8i1Nhi2TzV7kzszm+6QQOjop3\nd4bn7qJa0e0SJvEjRz4NerpJLYjhkQOwt6V3r2eq6tI1A78uPsdwmDYZD4LXGzaY\nAejBWOgoHAgyXyxXFaZU9pKMrPfAvLfcJJsnVy+/XeB0vAM9vDtLUdLyJjyVDXct\nszavktESEuo70Upi4RdVU85yd5bL4bNNXv0CzkcY84NK/I8jYFTpMu8OZOJnXBA=\n=gC0E\n-----END PGP SIGNATURE-----",
        "payload": "tree 23fd890755438012c9a2eb460a022842dcbe7105\nparent 4f73a8f64d1555b4053f2a0a5c79083e50a0ce21\nparent c6b7b29f232c651f898eeffb93f36c8f537c56d2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421050173 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421050196 +0100\n\nMerge pull request #5640\n\nc6b7b29 Improve robustness of DER recoding code (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0fd4646099132f0a68d6c3d0da3a6a10ab9631",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0fd4646099132f0a68d6c3d0da3a6a10ab9631",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0fd4646099132f0a68d6c3d0da3a6a10ab9631/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f73a8f64d1555b4053f2a0a5c79083e50a0ce21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f73a8f64d1555b4053f2a0a5c79083e50a0ce21"
      },
      {
        "sha": "c6b7b29f232c651f898eeffb93f36c8f537c56d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b7b29f232c651f898eeffb93f36c8f537c56d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6b7b29f232c651f898eeffb93f36c8f537c56d2"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5e3aec25baf70f7478f99aaa4747be300ab1b83d",
        "filename": "src/ecwrapper.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0fd4646099132f0a68d6c3d0da3a6a10ab9631/src/ecwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0fd4646099132f0a68d6c3d0da3a6a10ab9631/src/ecwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.cpp?ref=8d0fd4646099132f0a68d6c3d0da3a6a10ab9631",
        "patch": "@@ -124,7 +124,18 @@ bool CECKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSi\n     unsigned char *norm_der = NULL;\n     ECDSA_SIG *norm_sig = ECDSA_SIG_new();\n     const unsigned char* sigptr = &vchSig[0];\n-    d2i_ECDSA_SIG(&norm_sig, &sigptr, vchSig.size());\n+    assert(norm_sig);\n+    if (d2i_ECDSA_SIG(&norm_sig, &sigptr, vchSig.size()) == NULL)\n+    {\n+        /* As of OpenSSL 1.0.0p d2i_ECDSA_SIG frees and nulls the pointer on\n+         * error. But OpenSSL's own use of this function redundantly frees the\n+         * result. As ECDSA_SIG_free(NULL) is a no-op, and in the absence of a\n+         * clear contract for the function behaving the same way is more\n+         * conservative.\n+         */\n+        ECDSA_SIG_free(norm_sig);\n+        return false;\n+    }\n     int derlen = i2d_ECDSA_SIG(norm_sig, &norm_der);\n     ECDSA_SIG_free(norm_sig);\n     if (derlen <= 0)"
      }
    ]
  },
  {
    "sha": "de8b9ab75718ef7663d5e8cc2f2135b8118730e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZThiOWFiNzU3MThlZjc2NjNkNWU4Y2MyZjIxMzViODExODczMGU3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-12T10:22:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-12T10:24:47Z"
      },
      "message": "Merge pull request #5608\n\n9161303 Introduce 10 minute block download timeout (Pieter Wuille)",
      "tree": {
        "sha": "4791ac3760459275390a215277edf1986ba8803a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4791ac3760459275390a215277edf1986ba8803a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de8b9ab75718ef7663d5e8cc2f2135b8118730e7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUs6DvAAoJEHSBCwEjRsmmfm4H/0dCIohU1tngFCFWNIOTqAq7\n1h2jvh9cmh/NaMtYpeX32QNfews5Sl2h8BCzgYgpTbZ7ScI1xEBMTMr4B0wH/ufX\nKttVjrHvxSnAHmR8LXQf+gd2WV4OzbVr57xSn4dIPbro4qCU/8cvbV7ybIPQcowz\nZshMT3mI0K9gAfUDJu6MK5oJn28wXQqHXDAk4puBoa/RWhtirulZGpjQUW9bXZEB\nCQvZaJg+ePUMFLtBR4AhxrIszWGtHiAUG3Wm2Deo1tb7NKiL269/56yfS1doz+XE\nDa4XlyCMhueLFLSwMu/Hzy6q/vVNc8Tb+gVxTgnc1FjKZwL23/utLDVsk3RXMV4=\n=GiMu\n-----END PGP SIGNATURE-----",
        "payload": "tree 4791ac3760459275390a215277edf1986ba8803a\nparent 8d0fd4646099132f0a68d6c3d0da3a6a10ab9631\nparent 916130348ca803d762db912307b247f60f9aacd6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421058129 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421058287 +0100\n\nMerge pull request #5608\n\n9161303 Introduce 10 minute block download timeout (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de8b9ab75718ef7663d5e8cc2f2135b8118730e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de8b9ab75718ef7663d5e8cc2f2135b8118730e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de8b9ab75718ef7663d5e8cc2f2135b8118730e7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d0fd4646099132f0a68d6c3d0da3a6a10ab9631",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0fd4646099132f0a68d6c3d0da3a6a10ab9631",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0fd4646099132f0a68d6c3d0da3a6a10ab9631"
      },
      {
        "sha": "916130348ca803d762db912307b247f60f9aacd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/916130348ca803d762db912307b247f60f9aacd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/916130348ca803d762db912307b247f60f9aacd6"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7cc69c318b1a7449b4469664ad781bc9aa7633ef",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de8b9ab75718ef7663d5e8cc2f2135b8118730e7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de8b9ab75718ef7663d5e8cc2f2135b8118730e7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=de8b9ab75718ef7663d5e8cc2f2135b8118730e7",
        "patch": "@@ -139,9 +139,14 @@ namespace {\n         uint256 hash;\n         CBlockIndex *pindex;  //! Optional.\n         int64_t nTime;  //! Time of \"getdata\" request in microseconds.\n+        int nValidatedQueuedBefore;  //! Number of blocks queued with validated headers (globally) at the time this one is requested.\n+        bool fValidatedHeaders;  //! Whether this block has validated headers at the time of request.\n     };\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n \n+    /** Number of blocks in flight with validated headers. */\n+    int nQueuedValidatedHeaders = 0;\n+\n     /** Number of preferable block download peers. */\n     int nPreferredDownload = 0;\n \n@@ -323,6 +328,7 @@ void MarkBlockAsReceived(const uint256& hash) {\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n+        nQueuedValidatedHeaders -= itInFlight->second.second->fValidatedHeaders;\n         state->vBlocksInFlight.erase(itInFlight->second.second);\n         state->nBlocksInFlight--;\n         state->nStallingSince = 0;\n@@ -338,7 +344,8 @@ void MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, CBlockIndex *pindex\n     // Make sure it's not listed somewhere already.\n     MarkBlockAsReceived(hash);\n \n-    QueuedBlock newentry = {hash, pindex, GetTimeMicros()};\n+    QueuedBlock newentry = {hash, pindex, GetTimeMicros(), nQueuedValidatedHeaders, pindex != NULL};\n+    nQueuedValidatedHeaders += newentry.fValidatedHeaders;\n     list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(), newentry);\n     state->nBlocksInFlight++;\n     mapBlocksInFlight[hash] = std::make_pair(nodeid, it);\n@@ -4527,6 +4534,15 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->id);\n             pto->fDisconnect = true;\n         }\n+        // In case there is a block that has been in flight from this peer for (1 + 0.5 * N) times the block interval\n+        // (with N the number of validated blocks that were in flight at the time it was requested), disconnect due to\n+        // timeout. We compensate for in-flight blocks to prevent killing off peers due to our own downstream link\n+        // being saturated. We only count validated in-flight blocks so peers can't advertize nonexisting block hashes\n+        // to unreasonably increase our timeout.\n+        if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0 && state.vBlocksInFlight.front().nTime < nNow - 500000 * Params().TargetSpacing() * (2 + state.vBlocksInFlight.front().nValidatedQueuedBefore)) {\n+            LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", state.vBlocksInFlight.front().hash.ToString(), pto->id);\n+            pto->fDisconnect = true;\n+        }\n \n         //\n         // Message: getdata (blocks)"
      }
    ]
  },
  {
    "sha": "868da0f40a48ce12665da2d97d1fe7a3e1e72bf7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjhkYTBmNDBhNDhjZTEyNjY1ZGEyZDk3ZDFmZTdhM2UxZTcyYmY3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-12T10:26:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-12T10:26:41Z"
      },
      "message": "Merge pull request #5619\n\n13cdce4 Catch UTXO set read errors and shutdown (Pieter Wuille)",
      "tree": {
        "sha": "65a3d7850ea9853267542e61cd843b5cbe158e05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65a3d7850ea9853267542e61cd843b5cbe158e05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/868da0f40a48ce12665da2d97d1fe7a3e1e72bf7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUs6FhAAoJEHSBCwEjRsmmUfIH/jQQh+vPOMlPF3dbRtekGYrn\nebr2MNSZDrOWGngB4qgvQYd5AbxDW3au4u9iu3ptcYuaNoMMJDj/vin2LgOfbUL6\noZ0IVJedOTM1T8UD7u3ON6K9tR4Q9wvZ2tGYRcZytqapDKbKxO0hSKRXsClFOvgT\n6LWyROBto16MY7h+VEZT1u0iOJSHPfi7fSXtxseSSpoHwdzV+i8XQEpKOAfGGG4Z\n8rylRx93i21T0R+czEuULricUAQgvacVqocrD9PGSgbj9L8q8tsTHWKH8YZmEF+K\nYSp0Aj0vf7FV1bscxgRJRGO8HBEFJD9UHAlyqSqNerbamohfr5f/kdZLS8CHlnc=\n=fdCd\n-----END PGP SIGNATURE-----",
        "payload": "tree 65a3d7850ea9853267542e61cd843b5cbe158e05\nparent de8b9ab75718ef7663d5e8cc2f2135b8118730e7\nparent 13cdce4336818d0f6cefe6b3e61c45762d97d7c6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421058363 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421058401 +0100\n\nMerge pull request #5619\n\n13cdce4 Catch UTXO set read errors and shutdown (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/868da0f40a48ce12665da2d97d1fe7a3e1e72bf7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/868da0f40a48ce12665da2d97d1fe7a3e1e72bf7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/868da0f40a48ce12665da2d97d1fe7a3e1e72bf7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de8b9ab75718ef7663d5e8cc2f2135b8118730e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de8b9ab75718ef7663d5e8cc2f2135b8118730e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de8b9ab75718ef7663d5e8cc2f2135b8118730e7"
      },
      {
        "sha": "13cdce4336818d0f6cefe6b3e61c45762d97d7c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13cdce4336818d0f6cefe6b3e61c45762d97d7c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13cdce4336818d0f6cefe6b3e61c45762d97d7c6"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 26,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d6f1e1cb9f9a8d34d06a6ce665bd6552115b7b00",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/868da0f40a48ce12665da2d97d1fe7a3e1e72bf7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/868da0f40a48ce12665da2d97d1fe7a3e1e72bf7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=868da0f40a48ce12665da2d97d1fe7a3e1e72bf7",
        "patch": "@@ -111,7 +111,28 @@ bool ShutdownRequested()\n     return fRequestShutdown;\n }\n \n+class CCoinsViewErrorCatcher : public CCoinsViewBacked\n+{\n+public:\n+    CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}\n+    bool GetCoins(const uint256 &txid, CCoins &coins) const {\n+        try {\n+            return CCoinsViewBacked::GetCoins(txid, coins);\n+        } catch(const std::runtime_error& e) {\n+            uiInterface.ThreadSafeMessageBox(_(\"Error reading from database, shutting down.\"), \"\", CClientUIInterface::MSG_ERROR);\n+            LogPrintf(\"Error reading from database: %s\\n\", e.what());\n+            // Starting the shutdown sequence and returning false to the caller would be\n+            // interpreted as 'entry not found' (as opposed to unable to read data), and\n+            // could lead to invalid interpration. Just exit immediately, as we can't\n+            // continue anyway, and all writes should be atomic.\n+            abort();\n+        }\n+    }\n+    // Writes do not need similar protection, as failure to write is handled by the caller.\n+};\n+\n static CCoinsViewDB *pcoinsdbview = NULL;\n+static CCoinsViewErrorCatcher *pcoinscatcher = NULL;\n \n void Shutdown()\n {\n@@ -154,6 +175,8 @@ void Shutdown()\n         }\n         delete pcoinsTip;\n         pcoinsTip = NULL;\n+        delete pcoinscatcher;\n+        pcoinscatcher = NULL;\n         delete pcoinsdbview;\n         pcoinsdbview = NULL;\n         delete pblocktree;\n@@ -990,11 +1013,13 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 UnloadBlockIndex();\n                 delete pcoinsTip;\n                 delete pcoinsdbview;\n+                delete pcoinscatcher;\n                 delete pblocktree;\n \n                 pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n                 pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex);\n-                pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n+                pcoinscatcher = new CCoinsViewErrorCatcher(pcoinsdbview);\n+                pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n \n                 if (fReindex)\n                     pblocktree->WriteReindexing(true);"
      }
    ]
  },
  {
    "sha": "90c71548c795787b008bc337cb9332f75d1bccdb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGM3MTU0OGM3OTU3ODdiMDA4YmMzMzdjYjkzMzJmNzVkMWJjY2Ri",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-12T14:29:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-12T15:19:24Z"
      },
      "message": "depends: remove embedded OpenSSL timestamp for determinism\n\nChery-picked from 0.10 branch.\n\nRebased-From: c3200bcd1e7116e079aebabed3a01dc5385bfc9e",
      "tree": {
        "sha": "35bc5f74472120b8f2b22b338fbbd9b502ad0e3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35bc5f74472120b8f2b22b338fbbd9b502ad0e3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90c71548c795787b008bc337cb9332f75d1bccdb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUs+ZXAAoJEHSBCwEjRsmm96oIAJBcRSWBVIIB7aN5JM1YbP+T\nJNR8mX9a5WEE+EEv23g0F3ACHfYqHXTK/oUgdjaBm6QPwSzAuEhgoac86iB8fVZw\nlkpWndqzpUZwk1i2izkNaHcncZWF44dVh6DOsc8cAyLtdtmAnmOaazWYu1eoSl5r\nXYkRlEEqgNisZNnFETrY9SOaRUyXJcFrH/r6Ko1uZMPYxc8FEdt2KiDW1pqEhnSB\nPrIxcV8qnH6Y1UlRtRTwZR3fXSy8ck1SS/zEWLTpDhHdoxlGzDGQ/BMqyCH+6OaB\nzQyWqt/f/VWEtrC6m5Vj7dV53QD8GTEUfjVi9OED39io3sQubQuNZnwuma12Eis=\n=xaQK\n-----END PGP SIGNATURE-----",
        "payload": "tree 35bc5f74472120b8f2b22b338fbbd9b502ad0e3e\nparent 868da0f40a48ce12665da2d97d1fe7a3e1e72bf7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421072991 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421075964 +0100\n\ndepends: remove embedded OpenSSL timestamp for determinism\n\nChery-picked from 0.10 branch.\n\nRebased-From: c3200bcd1e7116e079aebabed3a01dc5385bfc9e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c71548c795787b008bc337cb9332f75d1bccdb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90c71548c795787b008bc337cb9332f75d1bccdb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c71548c795787b008bc337cb9332f75d1bccdb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "868da0f40a48ce12665da2d97d1fe7a3e1e72bf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/868da0f40a48ce12665da2d97d1fe7a3e1e72bf7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/868da0f40a48ce12665da2d97d1fe7a3e1e72bf7"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "22b1017ffccc0adb78e69fdc3835bf3df1554fd0",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c71548c795787b008bc337cb9332f75d1bccdb/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c71548c795787b008bc337cb9332f75d1bccdb/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=90c71548c795787b008bc337cb9332f75d1bccdb",
        "patch": "@@ -23,7 +23,7 @@ $(package)_config_opts_i686_mingw32=mingw\n endef\n \n define $(package)_preprocess_cmds\n-  sed -i.old \"/define DATE/d\" crypto/Makefile && \\\n+  sed -i.old \"/define DATE/d\" util/mkbuildinf.pl && \\\n   sed -i.old \"s|engines apps test|engines|\" Makefile.org\n endef\n "
      }
    ]
  },
  {
    "sha": "2ce63d395fe3d71e921ecd9f4263031b25efa14e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2U2M2QzOTVmZTNkNzFlOTIxZWNkOWY0MjYzMDMxYjI1ZWZhMTRl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-12T03:26:42Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-12T19:47:44Z"
      },
      "message": "MOVEONLY: Move struct CBlockTemplate to miner.h (from main.h)",
      "tree": {
        "sha": "1aed1ef597e19f8ec0efcef917c59f152e8890f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1aed1ef597e19f8ec0efcef917c59f152e8890f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ce63d395fe3d71e921ecd9f4263031b25efa14e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce63d395fe3d71e921ecd9f4263031b25efa14e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ce63d395fe3d71e921ecd9f4263031b25efa14e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce63d395fe3d71e921ecd9f4263031b25efa14e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 8,
      "deletions": 16
    },
    "files": [
      {
        "sha": "a8346d1b8f4add6f1251bbfbfc2e827ae6445c9a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce63d395fe3d71e921ecd9f4263031b25efa14e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce63d395fe3d71e921ecd9f4263031b25efa14e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2ce63d395fe3d71e921ecd9f4263031b25efa14e",
        "patch": "@@ -45,7 +45,6 @@ class CScriptCheck;\n class CValidationInterface;\n class CValidationState;\n \n-struct CBlockTemplate;\n struct CNodeStateStats;\n \n /** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n@@ -513,17 +512,6 @@ extern CCoinsViewCache *pcoinsTip;\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern CBlockTreeDB *pblocktree;\n \n-struct CBlockTemplate\n-{\n-    CBlock block;\n-    std::vector<CAmount> vTxFees;\n-    std::vector<int64_t> vTxSigOps;\n-};\n-\n-\n-\n-\n-\n \n class CValidationInterface {\n protected:"
      },
      {
        "sha": "cc97d16f0fe953ed1acfe38d84a946433af30803",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce63d395fe3d71e921ecd9f4263031b25efa14e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce63d395fe3d71e921ecd9f4263031b25efa14e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2ce63d395fe3d71e921ecd9f4263031b25efa14e",
        "patch": "@@ -6,7 +6,6 @@\n #include \"miner.h\"\n \n #include \"amount.h\"\n-#include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"hash.h\"\n #include \"main.h\""
      },
      {
        "sha": "593ddcd3716624a30e4fc4448a770c4f71aaa316",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce63d395fe3d71e921ecd9f4263031b25efa14e/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce63d395fe3d71e921ecd9f4263031b25efa14e/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=2ce63d395fe3d71e921ecd9f4263031b25efa14e",
        "patch": "@@ -6,16 +6,21 @@\n #ifndef BITCOIN_MINER_H\n #define BITCOIN_MINER_H\n \n+#include \"primitives/block.h\"\n+\n #include <stdint.h>\n \n-class CBlock;\n-class CBlockHeader;\n class CBlockIndex;\n class CReserveKey;\n class CScript;\n class CWallet;\n \n-struct CBlockTemplate;\n+struct CBlockTemplate\n+{\n+    CBlock block;\n+    std::vector<CAmount> vTxFees;\n+    std::vector<int64_t> vTxSigOps;\n+};\n \n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads);"
      }
    ]
  },
  {
    "sha": "3ff735c99ae75c21397079f49859b81e89a2f5f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmY3MzVjOTlhZTc1YzIxMzk3MDc5ZjQ5ODU5YjgxZTg5YTJmNWY4",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-01-12T17:53:10Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-01-12T19:58:17Z"
      },
      "message": "Increase block download timeout base from 10 to 20 minutes.\n\nThis harmonizes the block fetch timeout with the existing ping timeout\n and eliminates a guaranteed eventual failure from congestion collapse\n for a network operating right at its limit.\n\nIt's unlikely that we wouldn't suffer other failures if we were really\n anywhere near the network's limit, and a complete avoidance of congestion\n collapse risk requires (I think) an exponential back-off. So this isn't\n a major concern, but I think it's also useful for reducing the complexity\n of understanding out timeouts.",
      "tree": {
        "sha": "b25c414bbd034b0d82f4ae9dd12c5df4f59f1150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b25c414bbd034b0d82f4ae9dd12c5df4f59f1150"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ff735c99ae75c21397079f49859b81e89a2f5f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ff735c99ae75c21397079f49859b81e89a2f5f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ff735c99ae75c21397079f49859b81e89a2f5f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ff735c99ae75c21397079f49859b81e89a2f5f8/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90c71548c795787b008bc337cb9332f75d1bccdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c71548c795787b008bc337cb9332f75d1bccdb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90c71548c795787b008bc337cb9332f75d1bccdb"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0f536cbc6bbf85442546769dbcf71b5afe8822a5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ff735c99ae75c21397079f49859b81e89a2f5f8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ff735c99ae75c21397079f49859b81e89a2f5f8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3ff735c99ae75c21397079f49859b81e89a2f5f8",
        "patch": "@@ -4534,12 +4534,12 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->id);\n             pto->fDisconnect = true;\n         }\n-        // In case there is a block that has been in flight from this peer for (1 + 0.5 * N) times the block interval\n+        // In case there is a block that has been in flight from this peer for (2 + 0.5 * N) times the block interval\n         // (with N the number of validated blocks that were in flight at the time it was requested), disconnect due to\n         // timeout. We compensate for in-flight blocks to prevent killing off peers due to our own downstream link\n         // being saturated. We only count validated in-flight blocks so peers can't advertize nonexisting block hashes\n         // to unreasonably increase our timeout.\n-        if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0 && state.vBlocksInFlight.front().nTime < nNow - 500000 * Params().TargetSpacing() * (2 + state.vBlocksInFlight.front().nValidatedQueuedBefore)) {\n+        if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0 && state.vBlocksInFlight.front().nTime < nNow - 500000 * Params().TargetSpacing() * (4 + state.vBlocksInFlight.front().nValidatedQueuedBefore)) {\n             LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", state.vBlocksInFlight.front().hash.ToString(), pto->id);\n             pto->fDisconnect = true;\n         }"
      }
    ]
  },
  {
    "sha": "1d84aead218e075b21d545f35e6a8efdae8e0169",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDg0YWVhZDIxOGUwNzViMjFkNTQ1ZjM1ZTZhOGVmZGFlOGUwMTY5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-01-12T22:26:29Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-01-12T22:26:29Z"
      },
      "message": "Coin Control: Use U+2248 \"ALMOST EQUAL TO\" rather than a simple tilde (which may be mistaken for a negative sign)",
      "tree": {
        "sha": "944001e41eb20ed1a85bc96e6396e36be3b8ded5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/944001e41eb20ed1a85bc96e6396e36be3b8ded5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d84aead218e075b21d545f35e6a8efdae8e0169",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d84aead218e075b21d545f35e6a8efdae8e0169",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d84aead218e075b21d545f35e6a8efdae8e0169",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d84aead218e075b21d545f35e6a8efdae8e0169/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90c71548c795787b008bc337cb9332f75d1bccdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c71548c795787b008bc337cb9332f75d1bccdb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90c71548c795787b008bc337cb9332f75d1bccdb"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 14,
      "deletions": 12
    },
    "files": [
      {
        "sha": "f597eeeaf394fee8e7f29c9419d926d17cf482dc",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d84aead218e075b21d545f35e6a8efdae8e0169/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d84aead218e075b21d545f35e6a8efdae8e0169/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=1d84aead218e075b21d545f35e6a8efdae8e0169",
        "patch": "@@ -304,19 +304,19 @@ void CoinControlDialog::clipboardAmount()\n // copy label \"Fee\" to clipboard\n void CoinControlDialog::clipboardFee()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlFee->text().left(ui->labelCoinControlFee->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlFee->text().left(ui->labelCoinControlFee->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // copy label \"After fee\" to clipboard\n void CoinControlDialog::clipboardAfterFee()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlAfterFee->text().left(ui->labelCoinControlAfterFee->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlAfterFee->text().left(ui->labelCoinControlAfterFee->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // copy label \"Bytes\" to clipboard\n void CoinControlDialog::clipboardBytes()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlBytes->text().replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlBytes->text().replace(ASYMP_UTF8, \"\"));\n }\n \n // copy label \"Priority\" to clipboard\n@@ -334,7 +334,7 @@ void CoinControlDialog::clipboardLowOutput()\n // copy label \"Change\" to clipboard\n void CoinControlDialog::clipboardChange()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlChange->text().left(ui->labelCoinControlChange->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlChange->text().left(ui->labelCoinControlChange->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // treeview: sort\n@@ -600,16 +600,16 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     l2->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nAmount));        // Amount\n     l3->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nPayFee));        // Fee\n     l4->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nAfterFee));      // After Fee\n-    l5->setText(((nBytes > 0) ? \"~\" : \"\") + QString::number(nBytes));        // Bytes\n+    l5->setText(((nBytes > 0) ? ASYMP_UTF8 : \"\") + QString::number(nBytes));        // Bytes\n     l6->setText(sPriorityLabel);                                             // Priority\n     l7->setText(fDust ? tr(\"yes\") : tr(\"no\"));                               // Dust\n     l8->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nChange));        // Change\n     if (nPayFee > 0 && !(payTxFee.GetFeePerK() > 0 && fPayAtLeastCustomFee && nBytes < 1000))\n     {\n-        l3->setText(\"~\" + l3->text());\n-        l4->setText(\"~\" + l4->text());\n+        l3->setText(ASYMP_UTF8 + l3->text());\n+        l4->setText(ASYMP_UTF8 + l4->text());\n         if (nChange > 0)\n-            l8->setText(\"~\" + l8->text());\n+            l8->setText(ASYMP_UTF8 + l8->text());\n     }\n \n     // turn labels \"red\""
      },
      {
        "sha": "5a91876f1f9fd13cf13ee7057426cad9bdf63073",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d84aead218e075b21d545f35e6a8efdae8e0169/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d84aead218e075b21d545f35e6a8efdae8e0169/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=1d84aead218e075b21d545f35e6a8efdae8e0169",
        "patch": "@@ -25,6 +25,8 @@ namespace Ui {\n     class CoinControlDialog;\n }\n \n+#define ASYMP_UTF8 \"\\xE2\\x89\\x88\"\n+\n class CoinControlDialog : public QDialog\n {\n     Q_OBJECT"
      },
      {
        "sha": "1f9bd575453be4072b80e18f618030868d8ada12",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d84aead218e075b21d545f35e6a8efdae8e0169/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d84aead218e075b21d545f35e6a8efdae8e0169/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=1d84aead218e075b21d545f35e6a8efdae8e0169",
        "patch": "@@ -657,19 +657,19 @@ void SendCoinsDialog::coinControlClipboardAmount()\n // Coin Control: copy label \"Fee\" to clipboard\n void SendCoinsDialog::coinControlClipboardFee()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlFee->text().left(ui->labelCoinControlFee->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlFee->text().left(ui->labelCoinControlFee->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // Coin Control: copy label \"After fee\" to clipboard\n void SendCoinsDialog::coinControlClipboardAfterFee()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlAfterFee->text().left(ui->labelCoinControlAfterFee->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlAfterFee->text().left(ui->labelCoinControlAfterFee->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // Coin Control: copy label \"Bytes\" to clipboard\n void SendCoinsDialog::coinControlClipboardBytes()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlBytes->text().replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlBytes->text().replace(ASYMP_UTF8, \"\"));\n }\n \n // Coin Control: copy label \"Priority\" to clipboard\n@@ -687,7 +687,7 @@ void SendCoinsDialog::coinControlClipboardLowOutput()\n // Coin Control: copy label \"Change\" to clipboard\n void SendCoinsDialog::coinControlClipboardChange()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlChange->text().left(ui->labelCoinControlChange->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlChange->text().left(ui->labelCoinControlChange->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // Coin Control: settings menu - coin control enabled/disabled by user"
      }
    ]
  },
  {
    "sha": "785bb81c6bc672b55ca20910d2d9599986903753",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODViYjgxYzZiYzY3MmI1NWNhMjA5MTBkMmQ5NTk5OTg2OTAzNzUz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-13T07:38:57Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-13T07:38:57Z"
      },
      "message": "[Qt] remove size grip to get rid of the right margin\n\nIMO nobody needs a size grip and it looks bad",
      "tree": {
        "sha": "6edb1a8f8aa719c678c807278d153fe34ca7ed26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6edb1a8f8aa719c678c807278d153fe34ca7ed26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/785bb81c6bc672b55ca20910d2d9599986903753",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/785bb81c6bc672b55ca20910d2d9599986903753",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/785bb81c6bc672b55ca20910d2d9599986903753",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/785bb81c6bc672b55ca20910d2d9599986903753/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d0fd4646099132f0a68d6c3d0da3a6a10ab9631",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0fd4646099132f0a68d6c3d0da3a6a10ab9631",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0fd4646099132f0a68d6c3d0da3a6a10ab9631"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1e4eecc10d533c860d5db256b6e6a7b0d15216c7",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/785bb81c6bc672b55ca20910d2d9599986903753/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/785bb81c6bc672b55ca20910d2d9599986903753/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=785bb81c6bc672b55ca20910d2d9599986903753",
        "patch": "@@ -162,6 +162,9 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n \n     // Create status bar\n     statusBar();\n+    \n+    // Disable size grip because it looks ugly and nobody needs it\n+    statusBar()->setSizeGripEnabled(false);\n \n     // Status bar notification icons\n     QFrame *frameBlocks = new QFrame();"
      }
    ]
  },
  {
    "sha": "c5380a90454dbd8ea342d5b3de90c913d9664b0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTM4MGE5MDQ1NGRiZDhlYTM0MmQ1YjNkZTkwYzkxM2Q5NjY0YjBi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-13T09:01:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-13T09:02:35Z"
      },
      "message": "Merge pull request #5144\n\nb468e81 Qt: Clarify sign/verify dialog text to specifically state that these messages only prove one receives with the address in question, and makes no claim to sender of transactions (Luke Dashjr)",
      "tree": {
        "sha": "ba30fd3a492e542142e35f5044b556133132c515",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba30fd3a492e542142e35f5044b556133132c515"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5380a90454dbd8ea342d5b3de90c913d9664b0b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUtN8rAAoJEHSBCwEjRsmmh80H/isVd5fa/RyJ9tq8bqPEsFkl\nkNkKa9zGhqGLUQhhjcUXPgdI5ZCDSHUDnRTqNLJbBHosbiHMo/FsHZV8tUK5ojOO\nROrJJ1VEmus8T91Y51NgHr401czQs9jH4k/304R9eeBnLDbXPFQQ591Ip4Zw3dbd\nID/WXp8bIagQlF7I8HPVTTgKpwj3PbWrDZfo4xLCr+R/bJA/aBJ1l7i0WF0hwRen\ngtwPNHIdC9s9Ww4Q9P612ASGkv0pk0BPhqWw7pzW5+f17OEdTSjgcMUOyO3qdXaz\nPdHoe7aXIfOMOxQpWXjLlnrmhVuuQbMNgRmpJ5ZigLZwgfFUhdES1N8/UJ6mK4s=\n=0F2A\n-----END PGP SIGNATURE-----",
        "payload": "tree ba30fd3a492e542142e35f5044b556133132c515\nparent 90c71548c795787b008bc337cb9332f75d1bccdb\nparent b468e81443b95ab31384bc7f2d7bc927ce86d838\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421139696 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421139755 +0100\n\nMerge pull request #5144\n\nb468e81 Qt: Clarify sign/verify dialog text to specifically state that these messages only prove one receives with the address in question, and makes no claim to sender of transactions (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5380a90454dbd8ea342d5b3de90c913d9664b0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5380a90454dbd8ea342d5b3de90c913d9664b0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5380a90454dbd8ea342d5b3de90c913d9664b0b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90c71548c795787b008bc337cb9332f75d1bccdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c71548c795787b008bc337cb9332f75d1bccdb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90c71548c795787b008bc337cb9332f75d1bccdb"
      },
      {
        "sha": "b468e81443b95ab31384bc7f2d7bc927ce86d838",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b468e81443b95ab31384bc7f2d7bc927ce86d838",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b468e81443b95ab31384bc7f2d7bc927ce86d838"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "92f6430c51a93a99ddb422c3decab0254cab5252",
        "filename": "src/qt/forms/signverifymessagedialog.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5380a90454dbd8ea342d5b3de90c913d9664b0b/src/qt/forms/signverifymessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5380a90454dbd8ea342d5b3de90c913d9664b0b/src/qt/forms/signverifymessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/signverifymessagedialog.ui?ref=c5380a90454dbd8ea342d5b3de90c913d9664b0b",
        "patch": "@@ -30,7 +30,7 @@\n        <item>\n         <widget class=\"QLabel\" name=\"infoLabel_SM\">\n          <property name=\"text\">\n-          <string>You can sign messages with your addresses to prove you own them. Be careful not to sign anything vague, as phishing attacks may try to trick you into signing your identity over to them. Only sign fully-detailed statements you agree to.</string>\n+          <string>You can sign messages/agreements with your addresses to prove you can receive bitcoins sent to them. Be careful not to sign anything vague or random, as phishing attacks may try to trick you into signing your identity over to them. Only sign fully-detailed statements you agree to.</string>\n          </property>\n          <property name=\"textFormat\">\n           <enum>Qt::PlainText</enum>\n@@ -237,7 +237,7 @@\n        <item>\n         <widget class=\"QLabel\" name=\"infoLabel_VM\">\n          <property name=\"text\">\n-          <string>Enter the signing address, message (ensure you copy line breaks, spaces, tabs, etc. exactly) and signature below to verify the message. Be careful not to read more into the signature than what is in the signed message itself, to avoid being tricked by a man-in-the-middle attack.</string>\n+          <string>Enter the receiver's address, message (ensure you copy line breaks, spaces, tabs, etc. exactly) and signature below to verify the message. Be careful not to read more into the signature than what is in the signed message itself, to avoid being tricked by a man-in-the-middle attack. Note that this only proves the signing party receives with the address, it cannot prove sendership of any transaction!</string>\n          </property>\n          <property name=\"textFormat\">\n           <enum>Qt::PlainText</enum>"
      }
    ]
  },
  {
    "sha": "80dd50ccba97fc7cd0d005f51622d6a2ad8dad84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGRkNTBjY2JhOTdmYzdjZDBkMDA1ZjUxNjIyZDZhMmFkOGRhZDg0",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-13T10:51:45Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-13T10:51:45Z"
      },
      "message": "[Qt] group variables below initial if-clauses in AmountSpinBox::stepEnabled",
      "tree": {
        "sha": "c1c0839610fc7bde1f8a5110d841de0a8923d7dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1c0839610fc7bde1f8a5110d841de0a8923d7dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80dd50ccba97fc7cd0d005f51622d6a2ad8dad84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80dd50ccba97fc7cd0d005f51622d6a2ad8dad84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80dd50ccba97fc7cd0d005f51622d6a2ad8dad84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80dd50ccba97fc7cd0d005f51622d6a2ad8dad84/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "0fd9e2bf43d217d9a76003476661c8ab53606548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fd9e2bf43d217d9a76003476661c8ab53606548",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fd9e2bf43d217d9a76003476661c8ab53606548"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4c00aca9858fcb3057b0b7670ae741c737d769f7",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80dd50ccba97fc7cd0d005f51622d6a2ad8dad84/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80dd50ccba97fc7cd0d005f51622d6a2ad8dad84/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=80dd50ccba97fc7cd0d005f51622d6a2ad8dad84",
        "patch": "@@ -166,11 +166,12 @@ class AmountSpinBox: public QAbstractSpinBox\n \n     StepEnabled stepEnabled() const\n     {\n-        StepEnabled rv = 0;\n         if (isReadOnly()) // Disable steps when AmountSpinBox is read-only\n             return StepNone;\n-        if(text().isEmpty()) // Allow step-up with empty field\n+        if (text().isEmpty()) // Allow step-up with empty field\n             return StepUpEnabled;\n+\n+        StepEnabled rv = 0;\n         bool valid = false;\n         CAmount val = value(&valid);\n         if(valid)"
      }
    ]
  },
  {
    "sha": "080da96c7c2c89bdf96ba4c0058f6ebba102610f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODBkYTk2YzdjMmM4OWJkZjk2YmE0YzAwNThmNmViYmExMDI2MTBm",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-11T18:42:47Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-13T14:46:27Z"
      },
      "message": "[Qt] prepare paymentservertests for new unit tests\n\n- add a second PaymentRequest Test CA certificate to paymentrequestdata.h\n  (serial number f0:da:97:e4:38:d7:64:16) as caCert2_BASE64\n- rename existing Test CA certificate to caCert1_BASE64\n- rename existing payment request data to know they belong to\n  caCert1_BASE64\n- update comments to reflect the changes and add a missing comment to one\n  of the payment requests",
      "tree": {
        "sha": "47239124cae624a4a2a711818066a2a378313c6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47239124cae624a4a2a711818066a2a378313c6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/080da96c7c2c89bdf96ba4c0058f6ebba102610f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/080da96c7c2c89bdf96ba4c0058f6ebba102610f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/080da96c7c2c89bdf96ba4c0058f6ebba102610f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/080da96c7c2c89bdf96ba4c0058f6ebba102610f/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c5380a90454dbd8ea342d5b3de90c913d9664b0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5380a90454dbd8ea342d5b3de90c913d9664b0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5380a90454dbd8ea342d5b3de90c913d9664b0b"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 57,
      "deletions": 23
    },
    "files": [
      {
        "sha": "9caff462f75f52eedf074f562b1ba6c26e9ea8a1",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "modified",
        "additions": 40,
        "deletions": 12,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/080da96c7c2c89bdf96ba4c0058f6ebba102610f/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/080da96c7c2c89bdf96ba4c0058f6ebba102610f/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=080da96c7c2c89bdf96ba4c0058f6ebba102610f",
        "patch": "@@ -6,16 +6,16 @@\n // Data for paymentservertests.cpp\n //\n \n-// Base64/DER-encoded fake certificate authority certificate.\n+// Base64/DER-encoded fake certificate authority certificates.\n // Convert pem to base64/der with:\n-// cat file.pem | openssl x509 -inform PEM -outform DER | openssl enc -base64\n-//\n+// openssl x509 -in cert.pem -inform PEM -outform DER | openssl enc -base64\n+\n // Serial Number: 10302349811211485352 (0x8ef94c91b112c0a8)\n // Issuer: CN=PaymentRequest Test CA\n // Subject: CN=PaymentRequest Test CA\n // Not Valid After : Dec  8 16:37:24 2022 GMT\n //\n-const char* caCert_BASE64 =\n+const char* caCert1_BASE64 =\n \"\\\n MIIB0DCCATmgAwIBAgIJAI75TJGxEsCoMA0GCSqGSIb3DQEBCwUAMCExHzAdBgNV\\\n BAMTFlBheW1lbnRSZXF1ZXN0IFRlc3QgQ0EwHhcNMTIxMjEwMTYzNzI0WhcNMjIx\\\n@@ -29,11 +29,36 @@ RtQcf0AJ9olzUMY4syehxbzUJP6aeXhZEYiMvdvcv9D55clq6+WLLlNT3jBgAaVn\\\n p3waRjPD4bUX3nv+ojz5s4puw7Qq5QUZlhGsMzPvwDGCmZkL\\\n \";\n \n+// Serial Number: f0:da:97:e4:38:d7:64:16\n+// Issuer: CN=PaymentRequest Test CA\n+// Subject: CN=PaymentRequest Test CA\n+// Not Valid After : Jan  8 18:21:06 2025 GMT\n+//\n+const char* caCert2_BASE64 =\n+\"\\\n+MIIC1TCCAb2gAwIBAgIJAPDal+Q412QWMA0GCSqGSIb3DQEBCwUAMCExHzAdBgNV\\\n+BAMMFlBheW1lbnRSZXF1ZXN0IFRlc3QgQ0EwHhcNMTUwMTExMTgyMTA2WhcNMjUw\\\n+MTA4MTgyMTA2WjAhMR8wHQYDVQQDDBZQYXltZW50UmVxdWVzdCBUZXN0IENBMIIB\\\n+IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1S9wVLfTplJuT/1OaaBgl/Mb\\\n+I392v8S9kHbzYz7B4OTMslaO7piz0v3SO3TKMh0dswjiRdHrIgpO7XdIUQiU/ugg\\\n+xDw0kuNehfz1ycaGedlFFtFHTNXqLyIUF3dlwHhQwaomM6RXoJmxLny5BhYHEcmk\\\n+yWwr3Cdjd9gAZpblugVJB9C1e40uyL8ao4PHdLzOqO27iSe6riP8SwwisJZEbMaz\\\n+AZpgNEEMbIXPJEFvm5HTRXSMtQCOTSZYMFF0M2yrtmlECnz7hWP19b9bcoDzZQB4\\\n+ylIsFG/7q2jV7MC/e2STZv+niJiHL08RUdoFpAgzaxMgqj63C7B55HgNDNHJYQID\\\n+AQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBGejPxLxj9\\\n++crv6gUeEBMZPiUx7pUgcI22Wm5yymP96B4fwI3Y0DBehq20d76vbWGPN17Z6pH3\\\n+ge7PVY1SYqXtS6hXTo4olCm/BZADli+2Bs2xCiaa+Ltve4ufVej+bKJXN/YnrhvO\\\n+Kq+klQkuuHywU+GJV/NQeBqToIrSOBgi477NgLFCCCmmx2QWsxHoCFGfuRCBVseT\\\n+z2k/tMuALCDXGeZBRPTsGHu1y4cj84swAeoDK5QSQcI+Ub7GKc+zkoj02sdDLiMo\\\n+3wokYPcIy47oclhmb4xubHc+y7nF610yZBoC/zgbhbawnZ65hDDWkdQ/SVAnWZD7\\\n+9PFfmNnYPTQH\\\n+\";\n+\n //\n // This payment request validates directly against the\n-// above certificate authority.\n+// caCert1 certificate authority.\n //\n-const char* paymentrequest1_BASE64 =\n+const char* paymentrequest1_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1NhrxAwruAzCCAeowggFToAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMjEyMTAx\\\n@@ -55,7 +80,7 @@ SiWVbw0tX/68iSQEGGfh9n6ee/8Myb3ICdw=\\\n //\n // Signed, but expired, merchant cert in the request\n //\n-const char* paymentrequest2_BASE64 =\n+const char* paymentrequest2_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1NhrsAwrpAzCCAeUwggFOoAMCAQICAQMwDQYJKoZIhvcNAQEL\\\n BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMzAyMjMy\\\n@@ -75,9 +100,9 @@ tejrSPOBNSJ3Mi/q5u2Yl4gJZY2b\\\n \";\n \n //\n-// 10-long chain, all intermediates valid\n+// 10-long certificate chain, all intermediates valid\n //\n-const char* paymentrequest3_BASE64 =\n+const char* paymentrequest3_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1Nhq8JAr/AzCCAfswggFkoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n BQAwPzEUMBIGA1UEAwwLdGVzdGNhOC5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVx\\\n@@ -184,9 +209,9 @@ chhR/aHOuEMTxmc12K4rNlgYtHCsxLP9zd+6u0cva3TucZ6EzS8PKEib/+r12/52\\\n \";\n \n //\n-// Long chain, with an invalid (expired) cert in the middle\n+// Long certificate chain, with an expired certificate in the middle\n //\n-const char* paymentrequest4_BASE64 =\n+const char* paymentrequest4_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1NhqeJAr/AzCCAfswggFkoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n BQAwPzEUMBIGA1UEAwwLdGVzdGNhOC5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVx\\\n@@ -291,7 +316,10 @@ HXQjsfdR58qZQS9CS5DAtRUf0R8+43/wijO/hb49VNaNXmY+/cPHMkahP2aV3tZi\\\n FAyZblLik9A7ZvF+UsjeFQiHB5wzWQvbqk5wQ4yabHIXoYv/E0q+eQ==\\\n \";\n \n-const char* paymentrequest5_BASE64 =\n+//\n+// Validly signed, but by a CA not in our root CA list\n+//\n+const char* paymentrequest5_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1NhrxAwruAzCCAeowggFToAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMzA0MTkx\\"
      },
      {
        "sha": "684d21958788f644037098487558aa28b127e845",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 11,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/080da96c7c2c89bdf96ba4c0058f6ebba102610f/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/080da96c7c2c89bdf96ba4c0058f6ebba102610f/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=080da96c7c2c89bdf96ba4c0058f6ebba102610f",
        "patch": "@@ -65,46 +65,52 @@ void PaymentServerTests::paymentServerTests()\n     OptionsModel optionsModel;\n     PaymentServer* server = new PaymentServer(NULL, false);\n     X509_STORE* caStore = X509_STORE_new();\n-    X509_STORE_add_cert(caStore, parse_b64der_cert(caCert_BASE64));\n+    X509_STORE_add_cert(caStore, parse_b64der_cert(caCert1_BASE64));\n     PaymentServer::LoadRootCAs(caStore);\n     server->setOptionsModel(&optionsModel);\n     server->uiReady();\n \n-    // Now feed PaymentRequests to server, and observe signals it produces:\n-    std::vector<unsigned char> data = DecodeBase64(paymentrequest1_BASE64);\n-    SendCoinsRecipient r = handleRequest(server, data);\n+    std::vector<unsigned char> data;\n+    SendCoinsRecipient r;\n     QString merchant;\n+\n+    // Now feed PaymentRequests to server, and observe signals it produces\n+\n+    // This payment request validates directly against the\n+    // caCert1 certificate authority:\n+    data = DecodeBase64(paymentrequest1_cert1_BASE64);\n+    r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"testmerchant.org\"));\n \n-    // Version of the above, with an expired certificate:\n-    data = DecodeBase64(paymentrequest2_BASE64);\n+    // Signed, but expired, merchant cert in the request:\n+    data = DecodeBase64(paymentrequest2_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"\"));\n \n-    // Long certificate chain:\n-    data = DecodeBase64(paymentrequest3_BASE64);\n+    // 10-long certificate chain, all intermediates valid:\n+    data = DecodeBase64(paymentrequest3_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"testmerchant8.org\"));\n \n     // Long certificate chain, with an expired certificate in the middle:\n-    data = DecodeBase64(paymentrequest4_BASE64);\n+    data = DecodeBase64(paymentrequest4_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"\"));\n \n     // Validly signed, but by a CA not in our root CA list:\n-    data = DecodeBase64(paymentrequest5_BASE64);\n+    data = DecodeBase64(paymentrequest5_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"\"));\n \n     // Try again with no root CA's, verifiedMerchant should be empty:\n     caStore = X509_STORE_new();\n     PaymentServer::LoadRootCAs(caStore);\n-    data = DecodeBase64(paymentrequest1_BASE64);\n+    data = DecodeBase64(paymentrequest1_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"\"));"
      }
    ]
  },
  {
    "sha": "324f64d148516357a548323d308243205e47695c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjRmNjRkMTQ4NTE2MzU3YTU0ODMyM2QzMDgyNDMyMDVlNDc2OTVj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-13T20:30:01Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-13T20:30:01Z"
      },
      "message": "jonasschnelli's GPG key",
      "tree": {
        "sha": "d7531a53aae09c92b08413f9b976e906786c3437",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7531a53aae09c92b08413f9b976e906786c3437"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/324f64d148516357a548323d308243205e47695c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/324f64d148516357a548323d308243205e47695c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/324f64d148516357a548323d308243205e47695c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/324f64d148516357a548323d308243205e47695c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5380a90454dbd8ea342d5b3de90c913d9664b0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5380a90454dbd8ea342d5b3de90c913d9664b0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5380a90454dbd8ea342d5b3de90c913d9664b0b"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "96140fe171651577d56ce75c3ce50b81026dadac",
        "filename": "contrib/gitian-downloader/jonasschnelli.pgp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324f64d148516357a548323d308243205e47695c/contrib/gitian-downloader/jonasschnelli.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324f64d148516357a548323d308243205e47695c/contrib/gitian-downloader/jonasschnelli.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/jonasschnelli.pgp?ref=324f64d148516357a548323d308243205e47695c"
      }
    ]
  },
  {
    "sha": "a8f897514cb9a01108858139ed5679e11585ae50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGY4OTc1MTRjYjlhMDExMDg4NTgxMzllZDU2NzllMTE1ODVhZTUw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T07:30:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T07:36:08Z"
      },
      "message": "Merge pull request #5654\n\n324f64d jonasschnelli's GPG key (Jonas Schnelli)",
      "tree": {
        "sha": "d7531a53aae09c92b08413f9b976e906786c3437",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7531a53aae09c92b08413f9b976e906786c3437"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8f897514cb9a01108858139ed5679e11585ae50",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUthxoAAoJEHSBCwEjRsmm9FQH/ReUL5/WPt9ci/oCtaVym5TN\nbStolDgsmFWPRM3pFUSMM0C5Uu1STlcR4GTaVO5GAXm+gpZrql36+FlaZMYpO8cA\nOdjEmnL7UfEGJ9eGHgIC0V+PWGUeFKp71UpbaUX+vglBhXvzo+Ta4khN3T9e3V57\nLV3S2ayrAIL7EOQ0h6sijLloj3oWKZ93nSqkdNDbQm/eaQvrG2t1ti2Z4y1GNv7O\noe7peNe89a/mqw087dmoqXd/GjhTtW7qO4NQN1saljusn74MCSzKcnWvzMXqtFwA\nL6w6hG7Q+Nl4kpwNpjiYfHGczjMOmrDq7343C085YZ/mabGOlB3RkTZRgeLQng0=\n=SnVO\n-----END PGP SIGNATURE-----",
        "payload": "tree d7531a53aae09c92b08413f9b976e906786c3437\nparent c5380a90454dbd8ea342d5b3de90c913d9664b0b\nparent 324f64d148516357a548323d308243205e47695c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421220654 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421220968 +0100\n\nMerge pull request #5654\n\n324f64d jonasschnelli's GPG key (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8f897514cb9a01108858139ed5679e11585ae50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8f897514cb9a01108858139ed5679e11585ae50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8f897514cb9a01108858139ed5679e11585ae50/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5380a90454dbd8ea342d5b3de90c913d9664b0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5380a90454dbd8ea342d5b3de90c913d9664b0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5380a90454dbd8ea342d5b3de90c913d9664b0b"
      },
      {
        "sha": "324f64d148516357a548323d308243205e47695c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/324f64d148516357a548323d308243205e47695c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/324f64d148516357a548323d308243205e47695c"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "96140fe171651577d56ce75c3ce50b81026dadac",
        "filename": "contrib/gitian-downloader/jonasschnelli.pgp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8f897514cb9a01108858139ed5679e11585ae50/contrib/gitian-downloader/jonasschnelli.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8f897514cb9a01108858139ed5679e11585ae50/contrib/gitian-downloader/jonasschnelli.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/jonasschnelli.pgp?ref=a8f897514cb9a01108858139ed5679e11585ae50"
      }
    ]
  },
  {
    "sha": "17005bc0fcc1e1b5e3d17e58080af952202723af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzAwNWJjMGZjYzFlMWI1ZTNkMTdlNTgwODBhZjk1MjIwMjcyM2Fm",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-12T07:43:08Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-14T12:15:26Z"
      },
      "message": "[Qt] add payment request unit test for non matching networks\n\n- verify that payment request network matches client network\n- add static verifyNetwork() function to PaymentServer to be able to use\n  the same validation code in GUI and unit-testing code",
      "tree": {
        "sha": "6c5a4ebf42b8e5112d0e4ebdb27067b3c9da8d21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c5a4ebf42b8e5112d0e4ebdb27067b3c9da8d21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17005bc0fcc1e1b5e3d17e58080af952202723af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17005bc0fcc1e1b5e3d17e58080af952202723af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17005bc0fcc1e1b5e3d17e58080af952202723af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17005bc0fcc1e1b5e3d17e58080af952202723af/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "080da96c7c2c89bdf96ba4c0058f6ebba102610f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/080da96c7c2c89bdf96ba4c0058f6ebba102610f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/080da96c7c2c89bdf96ba4c0058f6ebba102610f"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 68,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8703966606aab7c127bc6a8cb7558a879c10007e",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=17005bc0fcc1e1b5e3d17e58080af952202723af",
        "patch": "@@ -521,8 +521,7 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n         const payments::PaymentDetails& details = request.getDetails();\n \n         // Payment request network matches client network?\n-        if (details.network() != Params().NetworkIDString())\n-        {\n+        if (!verifyNetwork(request.getDetails())) {\n             emit message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n@@ -745,3 +744,15 @@ void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n     // currently we don't futher process or store the paymentACK message\n     emit message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n }\n+\n+bool PaymentServer::verifyNetwork(const payments::PaymentDetails& requestDetails)\n+{\n+    bool fVerified = requestDetails.network() == Params().NetworkIDString();\n+    if (!fVerified) {\n+        qWarning() << QString(\"PaymentServer::%1: Payment request network \\\"%2\\\" doesn't match client network \\\"%3\\\".\")\n+            .arg(__func__)\n+            .arg(QString::fromStdString(requestDetails.network()))\n+            .arg(QString::fromStdString(Params().NetworkIDString()));\n+    }\n+    return fVerified;\n+}"
      },
      {
        "sha": "9330e9a89cfa1976481b4016e1fd54b0d2f63d3c",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=17005bc0fcc1e1b5e3d17e58080af952202723af",
        "patch": "@@ -91,6 +91,9 @@ class PaymentServer : public QObject\n     // This is now public, because we use it in paymentservertests.cpp\n     static bool readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request);\n \n+    // Verify that the payment request network matches the client network\n+    static bool verifyNetwork(const payments::PaymentDetails& requestDetails);\n+\n signals:\n     // Fired when a valid payment request is received\n     void receivedPaymentRequest(SendCoinsRecipient);"
      },
      {
        "sha": "67c9a41e6104048c7f8d42010ad98ef846e508c4",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=17005bc0fcc1e1b5e3d17e58080af952202723af",
        "patch": "@@ -337,3 +337,27 @@ ssymvca1S/1KeM3n8Ydi2fi1JUzAAr59xPvNJRUeqCLP9upHn5z7br3P12Oz9A20\\\n 5/4wL4ClPRPVnOHgij0bEg+y0tGESqmF1rfOfXDszlo2U92wCxS07kq79YAZJ1Zo\\\n XYh860/Q4wvc7lfiTe+dXBzPKAKhMy91yETY\\\n \";\n+\n+//\n+// Contains a testnet paytoaddress, so payment request network doesn't match client network\n+//\n+const char* paymentrequest1_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iPQoEdGVzdBIhCIDWwowE\\\n+Ehl2qRQErGqUUwSsaMpDvWIaGnJGNQqi8oisGNeMy6UFKgxKdXN0IFRlc3Rpbmcq\\\n+gAFwThsozZxkZxzCn4R8WxNiLFV6m0ye9fEtSbolfaW+EjBMpO03lr/dwNnrclhg\\\n+ew+A05xfZztrAt16XKEY7qKJ/eY2nLd0fVAIu/nIt+7/VYVXT83zLrWc150aRS7W\\\n+AdJbL3JOJLs6Eyp5zrPbfI8faRttFAdONKDrJgIpuW1E3g==\\\n+\";"
      },
      {
        "sha": "e6cdb58ef5d823efa4ba500ae980db6d7b36de7c",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17005bc0fcc1e1b5e3d17e58080af952202723af/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=17005bc0fcc1e1b5e3d17e58080af952202723af",
        "patch": "@@ -115,6 +115,34 @@ void PaymentServerTests::paymentServerTests()\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"\"));\n \n+    // Load second root certificate\n+    caStore = X509_STORE_new();\n+    X509_STORE_add_cert(caStore, parse_b64der_cert(caCert2_BASE64));\n+    PaymentServer::LoadRootCAs(caStore);\n+\n+    QByteArray byteArray;\n+\n+    // For the tests below we just need the payment request data from\n+    // paymentrequestdata.h parsed + stored in r.paymentRequest.\n+    //\n+    // These tests require us to bypass the following normal client execution flow\n+    // shown below to be able to explicitly just trigger a certain condition!\n+    //\n+    // handleRequest()\n+    // -> PaymentServer::eventFilter()\n+    //   -> PaymentServer::handleURIOrFile()\n+    //     -> PaymentServer::readPaymentRequestFromFile()\n+    //       -> PaymentServer::processPaymentRequest()\n+\n+    // Contains a testnet paytoaddress, so payment request network doesn't match client network:\n+    data = DecodeBase64(paymentrequest1_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized, because network \"main\" is default, even for\n+    // uninizialized payment requests and that will fail our test here.\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    QCOMPARE(PaymentServer::verifyNetwork(r.paymentRequest.getDetails()), false);\n+\n     // Just get some random data big enough to trigger BIP70 DoS protection\n     unsigned char randData[BIP70_MAX_PAYMENTREQUEST_SIZE + 1];\n     GetRandBytes(randData, sizeof(randData));"
      }
    ]
  },
  {
    "sha": "06b24240cdd37c3df1d476fe93bd0f1bf9dd0dd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmIyNDI0MGNkZDM3YzNkZjFkNDc2ZmU5M2JkMGYxYmY5ZGQwZGQ4",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-01-14T02:10:39Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-01-14T12:47:33Z"
      },
      "message": "Update OS X build instructions to use Qt 5",
      "tree": {
        "sha": "7860d4d878365781c9ec879b9ad1491881b81939",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7860d4d878365781c9ec879b9ad1491881b81939"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06b24240cdd37c3df1d476fe93bd0f1bf9dd0dd8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06b24240cdd37c3df1d476fe93bd0f1bf9dd0dd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06b24240cdd37c3df1d476fe93bd0f1bf9dd0dd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06b24240cdd37c3df1d476fe93bd0f1bf9dd0dd8/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d0fd4646099132f0a68d6c3d0da3a6a10ab9631",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0fd4646099132f0a68d6c3d0da3a6a10ab9631",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0fd4646099132f0a68d6c3d0da3a6a10ab9631"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 6,
      "deletions": 10
    },
    "files": [
      {
        "sha": "d6e93cb23d1483295448ab5034e42570a30a6ee7",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06b24240cdd37c3df1d476fe93bd0f1bf9dd0dd8/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06b24240cdd37c3df1d476fe93bd0f1bf9dd0dd8/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=06b24240cdd37c3df1d476fe93bd0f1bf9dd0dd8",
        "patch": "@@ -21,12 +21,6 @@ Xcode 4.3 or later, you'll need to install its command line tools. This can\n be done in `Xcode > Preferences > Downloads > Components` and generally must\n be re-done or updated every time Xcode is updated.\n \n-There's also an assumption that you already have `git` installed. If\n-not, it's the path of least resistance to install [Github for Mac](https://mac.github.com/)\n-(OS X 10.7+) or\n-[Git for OS X](https://code.google.com/p/git-osx-installer/). It is also\n-available via Homebrew.\n-\n You will also need to install [Homebrew](http://brew.sh) in order to install library\n dependencies.\n \n@@ -38,15 +32,17 @@ Instructions: Homebrew\n \n #### Install dependencies using Homebrew\n \n-        brew install autoconf automake libtool boost miniupnpc openssl pkg-config protobuf qt\n+        brew install autoconf automake libtool boost miniupnpc openssl pkg-config protobuf qt5\n+\n+NOTE: Building with Qt4 is still supported, however, could result in a broken UI. As such, building with Qt5 is recommended.\n \n #### Installing berkeley-db4 using Homebrew\n \n The homebrew package for berkeley-db4 has been broken for some time.  It will install without Java though.\n \n Running this command takes you into brew's interactive mode, which allows you to configure, make, and install by hand:\n ```\n-$ brew install https://raw.github.com/mxcl/homebrew/master/Library/Formula/berkeley-db4.rb -\u2013without-java \n+$ brew install https://raw.github.com/homebrew/homebrew/master/Library/Formula/berkeley-db4.rb -\u2013without-java \n ```\n \n The rest of these commands are run inside brew interactive mode:\n@@ -73,7 +69,7 @@ After exiting, you'll get a warning that the install is keg-only, which means it\n 2.  Build bitcoind:\n \n         ./autogen.sh\n-        ./configure\n+        ./configure --with-gui=qt5\n         make\n \n 3.  It is also a good idea to build and run the unit tests:\n@@ -115,7 +111,7 @@ All dependencies should be compiled with these flags:\n  -arch x86_64\n  -isysroot $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk\n \n-Once dependencies are compiled, see release-process.md for how the Bitcoin-Qt.app\n+Once dependencies are compiled, see [doc/release-process.md](release-process.md) for how the Bitcoin-Qt.app\n bundle is packaged and signed to create the .dmg disk image that is distributed.\n \n Running"
      }
    ]
  },
  {
    "sha": "30a5b5fa7a3baac7958ff073b993aecd41ab4132",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGE1YjVmYTdhM2JhYWM3OTU4ZmYwNzNiOTkzYWVjZDQxYWI0MTMy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T13:16:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T13:18:34Z"
      },
      "message": "Merge pull request #5642\n\n17005bc [Qt] add payment request unit test for non matching networks (Philip Kaufmann)\n080da96 [Qt] prepare paymentservertests for new unit tests (Philip Kaufmann)",
      "tree": {
        "sha": "fe76d5e95f6ae0be6e8b564ac52ceed4d87f5adb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe76d5e95f6ae0be6e8b564ac52ceed4d87f5adb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30a5b5fa7a3baac7958ff073b993aecd41ab4132",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUtmyqAAoJEHSBCwEjRsmmyBkH/iR85fogVedo7oT2nvNMD77D\n39+8s65UIsG3sPd1R9Q8BbE/IviU844/u1zoLT5h8ZUCyygzh/O3H2dRuGE5DVja\nE21YGjjcrX5wtJa0JsLwVGTMh2OrYBN0gH4sIafwRrE++wOC12lTIkEOYiV65dhk\nTkpFOPdg8xA/4SlxS4wTv6zKXmxAVHb+GhXvPF1DPoSjdds/uvJSWVfvWGs/w0IA\nnU1Xim5FpCIynO4YedTyyZcPJyWGBxyl/UeNvmVITPM3lBRfQc0nO5AHfamyhloz\nQY1W8YR/VaCtgo0tvVN/uIc2k+CqQKe1sm2PCqeKfJVRL+QAolHkfvCZOfLP3Xw=\n=bk+Z\n-----END PGP SIGNATURE-----",
        "payload": "tree fe76d5e95f6ae0be6e8b564ac52ceed4d87f5adb\nparent a8f897514cb9a01108858139ed5679e11585ae50\nparent 17005bc0fcc1e1b5e3d17e58080af952202723af\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421241389 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421241514 +0100\n\nMerge pull request #5642\n\n17005bc [Qt] add payment request unit test for non matching networks (Philip Kaufmann)\n080da96 [Qt] prepare paymentservertests for new unit tests (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30a5b5fa7a3baac7958ff073b993aecd41ab4132",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30a5b5fa7a3baac7958ff073b993aecd41ab4132",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30a5b5fa7a3baac7958ff073b993aecd41ab4132/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8f897514cb9a01108858139ed5679e11585ae50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8f897514cb9a01108858139ed5679e11585ae50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8f897514cb9a01108858139ed5679e11585ae50"
      },
      {
        "sha": "17005bc0fcc1e1b5e3d17e58080af952202723af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17005bc0fcc1e1b5e3d17e58080af952202723af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17005bc0fcc1e1b5e3d17e58080af952202723af"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 125,
      "deletions": 25
    },
    "files": [
      {
        "sha": "8703966606aab7c127bc6a8cb7558a879c10007e",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30a5b5fa7a3baac7958ff073b993aecd41ab4132/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30a5b5fa7a3baac7958ff073b993aecd41ab4132/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=30a5b5fa7a3baac7958ff073b993aecd41ab4132",
        "patch": "@@ -521,8 +521,7 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n         const payments::PaymentDetails& details = request.getDetails();\n \n         // Payment request network matches client network?\n-        if (details.network() != Params().NetworkIDString())\n-        {\n+        if (!verifyNetwork(request.getDetails())) {\n             emit message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n@@ -745,3 +744,15 @@ void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n     // currently we don't futher process or store the paymentACK message\n     emit message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n }\n+\n+bool PaymentServer::verifyNetwork(const payments::PaymentDetails& requestDetails)\n+{\n+    bool fVerified = requestDetails.network() == Params().NetworkIDString();\n+    if (!fVerified) {\n+        qWarning() << QString(\"PaymentServer::%1: Payment request network \\\"%2\\\" doesn't match client network \\\"%3\\\".\")\n+            .arg(__func__)\n+            .arg(QString::fromStdString(requestDetails.network()))\n+            .arg(QString::fromStdString(Params().NetworkIDString()));\n+    }\n+    return fVerified;\n+}"
      },
      {
        "sha": "9330e9a89cfa1976481b4016e1fd54b0d2f63d3c",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30a5b5fa7a3baac7958ff073b993aecd41ab4132/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30a5b5fa7a3baac7958ff073b993aecd41ab4132/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=30a5b5fa7a3baac7958ff073b993aecd41ab4132",
        "patch": "@@ -91,6 +91,9 @@ class PaymentServer : public QObject\n     // This is now public, because we use it in paymentservertests.cpp\n     static bool readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request);\n \n+    // Verify that the payment request network matches the client network\n+    static bool verifyNetwork(const payments::PaymentDetails& requestDetails);\n+\n signals:\n     // Fired when a valid payment request is received\n     void receivedPaymentRequest(SendCoinsRecipient);"
      },
      {
        "sha": "67c9a41e6104048c7f8d42010ad98ef846e508c4",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "modified",
        "additions": 64,
        "deletions": 12,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30a5b5fa7a3baac7958ff073b993aecd41ab4132/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30a5b5fa7a3baac7958ff073b993aecd41ab4132/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=30a5b5fa7a3baac7958ff073b993aecd41ab4132",
        "patch": "@@ -6,16 +6,16 @@\n // Data for paymentservertests.cpp\n //\n \n-// Base64/DER-encoded fake certificate authority certificate.\n+// Base64/DER-encoded fake certificate authority certificates.\n // Convert pem to base64/der with:\n-// cat file.pem | openssl x509 -inform PEM -outform DER | openssl enc -base64\n-//\n+// openssl x509 -in cert.pem -inform PEM -outform DER | openssl enc -base64\n+\n // Serial Number: 10302349811211485352 (0x8ef94c91b112c0a8)\n // Issuer: CN=PaymentRequest Test CA\n // Subject: CN=PaymentRequest Test CA\n // Not Valid After : Dec  8 16:37:24 2022 GMT\n //\n-const char* caCert_BASE64 =\n+const char* caCert1_BASE64 =\n \"\\\n MIIB0DCCATmgAwIBAgIJAI75TJGxEsCoMA0GCSqGSIb3DQEBCwUAMCExHzAdBgNV\\\n BAMTFlBheW1lbnRSZXF1ZXN0IFRlc3QgQ0EwHhcNMTIxMjEwMTYzNzI0WhcNMjIx\\\n@@ -29,11 +29,36 @@ RtQcf0AJ9olzUMY4syehxbzUJP6aeXhZEYiMvdvcv9D55clq6+WLLlNT3jBgAaVn\\\n p3waRjPD4bUX3nv+ojz5s4puw7Qq5QUZlhGsMzPvwDGCmZkL\\\n \";\n \n+// Serial Number: f0:da:97:e4:38:d7:64:16\n+// Issuer: CN=PaymentRequest Test CA\n+// Subject: CN=PaymentRequest Test CA\n+// Not Valid After : Jan  8 18:21:06 2025 GMT\n+//\n+const char* caCert2_BASE64 =\n+\"\\\n+MIIC1TCCAb2gAwIBAgIJAPDal+Q412QWMA0GCSqGSIb3DQEBCwUAMCExHzAdBgNV\\\n+BAMMFlBheW1lbnRSZXF1ZXN0IFRlc3QgQ0EwHhcNMTUwMTExMTgyMTA2WhcNMjUw\\\n+MTA4MTgyMTA2WjAhMR8wHQYDVQQDDBZQYXltZW50UmVxdWVzdCBUZXN0IENBMIIB\\\n+IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1S9wVLfTplJuT/1OaaBgl/Mb\\\n+I392v8S9kHbzYz7B4OTMslaO7piz0v3SO3TKMh0dswjiRdHrIgpO7XdIUQiU/ugg\\\n+xDw0kuNehfz1ycaGedlFFtFHTNXqLyIUF3dlwHhQwaomM6RXoJmxLny5BhYHEcmk\\\n+yWwr3Cdjd9gAZpblugVJB9C1e40uyL8ao4PHdLzOqO27iSe6riP8SwwisJZEbMaz\\\n+AZpgNEEMbIXPJEFvm5HTRXSMtQCOTSZYMFF0M2yrtmlECnz7hWP19b9bcoDzZQB4\\\n+ylIsFG/7q2jV7MC/e2STZv+niJiHL08RUdoFpAgzaxMgqj63C7B55HgNDNHJYQID\\\n+AQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBGejPxLxj9\\\n++crv6gUeEBMZPiUx7pUgcI22Wm5yymP96B4fwI3Y0DBehq20d76vbWGPN17Z6pH3\\\n+ge7PVY1SYqXtS6hXTo4olCm/BZADli+2Bs2xCiaa+Ltve4ufVej+bKJXN/YnrhvO\\\n+Kq+klQkuuHywU+GJV/NQeBqToIrSOBgi477NgLFCCCmmx2QWsxHoCFGfuRCBVseT\\\n+z2k/tMuALCDXGeZBRPTsGHu1y4cj84swAeoDK5QSQcI+Ub7GKc+zkoj02sdDLiMo\\\n+3wokYPcIy47oclhmb4xubHc+y7nF610yZBoC/zgbhbawnZ65hDDWkdQ/SVAnWZD7\\\n+9PFfmNnYPTQH\\\n+\";\n+\n //\n // This payment request validates directly against the\n-// above certificate authority.\n+// caCert1 certificate authority.\n //\n-const char* paymentrequest1_BASE64 =\n+const char* paymentrequest1_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1NhrxAwruAzCCAeowggFToAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMjEyMTAx\\\n@@ -55,7 +80,7 @@ SiWVbw0tX/68iSQEGGfh9n6ee/8Myb3ICdw=\\\n //\n // Signed, but expired, merchant cert in the request\n //\n-const char* paymentrequest2_BASE64 =\n+const char* paymentrequest2_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1NhrsAwrpAzCCAeUwggFOoAMCAQICAQMwDQYJKoZIhvcNAQEL\\\n BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMzAyMjMy\\\n@@ -75,9 +100,9 @@ tejrSPOBNSJ3Mi/q5u2Yl4gJZY2b\\\n \";\n \n //\n-// 10-long chain, all intermediates valid\n+// 10-long certificate chain, all intermediates valid\n //\n-const char* paymentrequest3_BASE64 =\n+const char* paymentrequest3_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1Nhq8JAr/AzCCAfswggFkoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n BQAwPzEUMBIGA1UEAwwLdGVzdGNhOC5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVx\\\n@@ -184,9 +209,9 @@ chhR/aHOuEMTxmc12K4rNlgYtHCsxLP9zd+6u0cva3TucZ6EzS8PKEib/+r12/52\\\n \";\n \n //\n-// Long chain, with an invalid (expired) cert in the middle\n+// Long certificate chain, with an expired certificate in the middle\n //\n-const char* paymentrequest4_BASE64 =\n+const char* paymentrequest4_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1NhqeJAr/AzCCAfswggFkoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n BQAwPzEUMBIGA1UEAwwLdGVzdGNhOC5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVx\\\n@@ -291,7 +316,10 @@ HXQjsfdR58qZQS9CS5DAtRUf0R8+43/wijO/hb49VNaNXmY+/cPHMkahP2aV3tZi\\\n FAyZblLik9A7ZvF+UsjeFQiHB5wzWQvbqk5wQ4yabHIXoYv/E0q+eQ==\\\n \";\n \n-const char* paymentrequest5_BASE64 =\n+//\n+// Validly signed, but by a CA not in our root CA list\n+//\n+const char* paymentrequest5_cert1_BASE64 =\n \"\\\n Egt4NTA5K3NoYTI1NhrxAwruAzCCAeowggFToAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMzA0MTkx\\\n@@ -309,3 +337,27 @@ ssymvca1S/1KeM3n8Ydi2fi1JUzAAr59xPvNJRUeqCLP9upHn5z7br3P12Oz9A20\\\n 5/4wL4ClPRPVnOHgij0bEg+y0tGESqmF1rfOfXDszlo2U92wCxS07kq79YAZJ1Zo\\\n XYh860/Q4wvc7lfiTe+dXBzPKAKhMy91yETY\\\n \";\n+\n+//\n+// Contains a testnet paytoaddress, so payment request network doesn't match client network\n+//\n+const char* paymentrequest1_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iPQoEdGVzdBIhCIDWwowE\\\n+Ehl2qRQErGqUUwSsaMpDvWIaGnJGNQqi8oisGNeMy6UFKgxKdXN0IFRlc3Rpbmcq\\\n+gAFwThsozZxkZxzCn4R8WxNiLFV6m0ye9fEtSbolfaW+EjBMpO03lr/dwNnrclhg\\\n+ew+A05xfZztrAt16XKEY7qKJ/eY2nLd0fVAIu/nIt+7/VYVXT83zLrWc150aRS7W\\\n+AdJbL3JOJLs6Eyp5zrPbfI8faRttFAdONKDrJgIpuW1E3g==\\\n+\";"
      },
      {
        "sha": "e6cdb58ef5d823efa4ba500ae980db6d7b36de7c",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 11,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30a5b5fa7a3baac7958ff073b993aecd41ab4132/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30a5b5fa7a3baac7958ff073b993aecd41ab4132/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=30a5b5fa7a3baac7958ff073b993aecd41ab4132",
        "patch": "@@ -65,50 +65,84 @@ void PaymentServerTests::paymentServerTests()\n     OptionsModel optionsModel;\n     PaymentServer* server = new PaymentServer(NULL, false);\n     X509_STORE* caStore = X509_STORE_new();\n-    X509_STORE_add_cert(caStore, parse_b64der_cert(caCert_BASE64));\n+    X509_STORE_add_cert(caStore, parse_b64der_cert(caCert1_BASE64));\n     PaymentServer::LoadRootCAs(caStore);\n     server->setOptionsModel(&optionsModel);\n     server->uiReady();\n \n-    // Now feed PaymentRequests to server, and observe signals it produces:\n-    std::vector<unsigned char> data = DecodeBase64(paymentrequest1_BASE64);\n-    SendCoinsRecipient r = handleRequest(server, data);\n+    std::vector<unsigned char> data;\n+    SendCoinsRecipient r;\n     QString merchant;\n+\n+    // Now feed PaymentRequests to server, and observe signals it produces\n+\n+    // This payment request validates directly against the\n+    // caCert1 certificate authority:\n+    data = DecodeBase64(paymentrequest1_cert1_BASE64);\n+    r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"testmerchant.org\"));\n \n-    // Version of the above, with an expired certificate:\n-    data = DecodeBase64(paymentrequest2_BASE64);\n+    // Signed, but expired, merchant cert in the request:\n+    data = DecodeBase64(paymentrequest2_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"\"));\n \n-    // Long certificate chain:\n-    data = DecodeBase64(paymentrequest3_BASE64);\n+    // 10-long certificate chain, all intermediates valid:\n+    data = DecodeBase64(paymentrequest3_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"testmerchant8.org\"));\n \n     // Long certificate chain, with an expired certificate in the middle:\n-    data = DecodeBase64(paymentrequest4_BASE64);\n+    data = DecodeBase64(paymentrequest4_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"\"));\n \n     // Validly signed, but by a CA not in our root CA list:\n-    data = DecodeBase64(paymentrequest5_BASE64);\n+    data = DecodeBase64(paymentrequest5_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"\"));\n \n     // Try again with no root CA's, verifiedMerchant should be empty:\n     caStore = X509_STORE_new();\n     PaymentServer::LoadRootCAs(caStore);\n-    data = DecodeBase64(paymentrequest1_BASE64);\n+    data = DecodeBase64(paymentrequest1_cert1_BASE64);\n     r = handleRequest(server, data);\n     r.paymentRequest.getMerchant(caStore, merchant);\n     QCOMPARE(merchant, QString(\"\"));\n \n+    // Load second root certificate\n+    caStore = X509_STORE_new();\n+    X509_STORE_add_cert(caStore, parse_b64der_cert(caCert2_BASE64));\n+    PaymentServer::LoadRootCAs(caStore);\n+\n+    QByteArray byteArray;\n+\n+    // For the tests below we just need the payment request data from\n+    // paymentrequestdata.h parsed + stored in r.paymentRequest.\n+    //\n+    // These tests require us to bypass the following normal client execution flow\n+    // shown below to be able to explicitly just trigger a certain condition!\n+    //\n+    // handleRequest()\n+    // -> PaymentServer::eventFilter()\n+    //   -> PaymentServer::handleURIOrFile()\n+    //     -> PaymentServer::readPaymentRequestFromFile()\n+    //       -> PaymentServer::processPaymentRequest()\n+\n+    // Contains a testnet paytoaddress, so payment request network doesn't match client network:\n+    data = DecodeBase64(paymentrequest1_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized, because network \"main\" is default, even for\n+    // uninizialized payment requests and that will fail our test here.\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    QCOMPARE(PaymentServer::verifyNetwork(r.paymentRequest.getDetails()), false);\n+\n     // Just get some random data big enough to trigger BIP70 DoS protection\n     unsigned char randData[BIP70_MAX_PAYMENTREQUEST_SIZE + 1];\n     GetRandBytes(randData, sizeof(randData));"
      }
    ]
  },
  {
    "sha": "ddb512a3212ba5b473fe1db0beb4d9032c449252",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGI1MTJhMzIxMmJhNWI0NzNmZTFkYjBiZWI0ZDkwMzJjNDQ5MjUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T13:19:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T13:20:04Z"
      },
      "message": "Merge pull request #5656\n\n06b2424 Update OS X build instructions to use Qt 5 (Michael Ford)",
      "tree": {
        "sha": "80f39a35f495c93893d9d4f8526b3e2c8ee4ced5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80f39a35f495c93893d9d4f8526b3e2c8ee4ced5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddb512a3212ba5b473fe1db0beb4d9032c449252",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUtm0EAAoJEHSBCwEjRsmmxPcH/1bWu/aAw4ySdZR7h8aU4bPL\nanPo/tVlKZBq5mrGjIMAm6ehy3o6LCw7T8f+GWnHtpW7MBsQkRG+5n3VPF1X9oup\nCS8eTjjJVeIXYn6Lou5+xLDH1eXJHF2SCQO5nJHjLIQ1uJ9Ys7gqfSV0fzkI2Z6q\nvs0/wfPs3cWQdsHDoWT/Z2w52hGtXsFMbYKazCn0xMH5CgNKBPt9G+jWZdquR1Q4\ne9DJGx0WtmGl7JCa/Kx6URZr8MmJu59Xsx/OncuStszqVRaZW/9Mq77WmfRr7YX/\n43AAexGtPh0pDmSmzUIBwWFUQmPKrle6HbFyAwx3IzRWeci8pNqhLnzP9RmIKZo=\n=OAQj\n-----END PGP SIGNATURE-----",
        "payload": "tree 80f39a35f495c93893d9d4f8526b3e2c8ee4ced5\nparent 30a5b5fa7a3baac7958ff073b993aecd41ab4132\nparent 06b24240cdd37c3df1d476fe93bd0f1bf9dd0dd8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421241562 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421241604 +0100\n\nMerge pull request #5656\n\n06b2424 Update OS X build instructions to use Qt 5 (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddb512a3212ba5b473fe1db0beb4d9032c449252",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddb512a3212ba5b473fe1db0beb4d9032c449252",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddb512a3212ba5b473fe1db0beb4d9032c449252/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30a5b5fa7a3baac7958ff073b993aecd41ab4132",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30a5b5fa7a3baac7958ff073b993aecd41ab4132",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30a5b5fa7a3baac7958ff073b993aecd41ab4132"
      },
      {
        "sha": "06b24240cdd37c3df1d476fe93bd0f1bf9dd0dd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06b24240cdd37c3df1d476fe93bd0f1bf9dd0dd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06b24240cdd37c3df1d476fe93bd0f1bf9dd0dd8"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 6,
      "deletions": 10
    },
    "files": [
      {
        "sha": "d6e93cb23d1483295448ab5034e42570a30a6ee7",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddb512a3212ba5b473fe1db0beb4d9032c449252/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddb512a3212ba5b473fe1db0beb4d9032c449252/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=ddb512a3212ba5b473fe1db0beb4d9032c449252",
        "patch": "@@ -21,12 +21,6 @@ Xcode 4.3 or later, you'll need to install its command line tools. This can\n be done in `Xcode > Preferences > Downloads > Components` and generally must\n be re-done or updated every time Xcode is updated.\n \n-There's also an assumption that you already have `git` installed. If\n-not, it's the path of least resistance to install [Github for Mac](https://mac.github.com/)\n-(OS X 10.7+) or\n-[Git for OS X](https://code.google.com/p/git-osx-installer/). It is also\n-available via Homebrew.\n-\n You will also need to install [Homebrew](http://brew.sh) in order to install library\n dependencies.\n \n@@ -38,15 +32,17 @@ Instructions: Homebrew\n \n #### Install dependencies using Homebrew\n \n-        brew install autoconf automake libtool boost miniupnpc openssl pkg-config protobuf qt\n+        brew install autoconf automake libtool boost miniupnpc openssl pkg-config protobuf qt5\n+\n+NOTE: Building with Qt4 is still supported, however, could result in a broken UI. As such, building with Qt5 is recommended.\n \n #### Installing berkeley-db4 using Homebrew\n \n The homebrew package for berkeley-db4 has been broken for some time.  It will install without Java though.\n \n Running this command takes you into brew's interactive mode, which allows you to configure, make, and install by hand:\n ```\n-$ brew install https://raw.github.com/mxcl/homebrew/master/Library/Formula/berkeley-db4.rb -\u2013without-java \n+$ brew install https://raw.github.com/homebrew/homebrew/master/Library/Formula/berkeley-db4.rb -\u2013without-java \n ```\n \n The rest of these commands are run inside brew interactive mode:\n@@ -73,7 +69,7 @@ After exiting, you'll get a warning that the install is keg-only, which means it\n 2.  Build bitcoind:\n \n         ./autogen.sh\n-        ./configure\n+        ./configure --with-gui=qt5\n         make\n \n 3.  It is also a good idea to build and run the unit tests:\n@@ -115,7 +111,7 @@ All dependencies should be compiled with these flags:\n  -arch x86_64\n  -isysroot $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk\n \n-Once dependencies are compiled, see release-process.md for how the Bitcoin-Qt.app\n+Once dependencies are compiled, see [doc/release-process.md](release-process.md) for how the Bitcoin-Qt.app\n bundle is packaged and signed to create the .dmg disk image that is distributed.\n \n Running"
      }
    ]
  },
  {
    "sha": "eec81cbb8045eb880973c948252b2407865c0c24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWM4MWNiYjgwNDVlYjg4MDk3M2M5NDgyNTJiMjQwNzg2NWMwYzI0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T15:54:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T15:54:28Z"
      },
      "message": "Merge pull request #5637\n\n80dd50c [Qt] group variables below initial if-clauses in AmountSpinBox::stepEnabled (Philip Kaufmann)\n0fd9e2b [Qt] don't allow amount changes when AmountSpinBox is read-only (Philip Kaufmann)",
      "tree": {
        "sha": "1d0b0762bc9ab726a9f70458939afb748b7b8df0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d0b0762bc9ab726a9f70458939afb748b7b8df0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eec81cbb8045eb880973c948252b2407865c0c24",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUtpE1AAoJEHSBCwEjRsmm/roH/1fRCfvKLVttMWTId1ZI0Es5\nO+zavJ3CwGIMK1NUhA7igaRbOgri/M8miBpNNvks5k1ObYCtOqm2XovVva7Ei3hO\no8WgY5EdHFwDFryOsazP3k9NxOI/3WuifP2Whr3SZuMxpPkCWWoBfVn/2uGhTo02\nInbWIjmMhwrS9aYfIMO0yHB+cxWRpkitVjILCRj54FPYgozgyLbiqTlbeBuyHokf\nCOeGpZL6da8vfUHJOaiMaRIxrANJil887+hUYg9tRl12o21sEbu2r+6j7EgEug1R\n069EJRMRMV8nyg6EXP17LuOtwt0bFpQn4ee/6PgVAlLBU8sxh2kxiLpTPdxUTfQ=\n=8qZG\n-----END PGP SIGNATURE-----",
        "payload": "tree 1d0b0762bc9ab726a9f70458939afb748b7b8df0\nparent ddb512a3212ba5b473fe1db0beb4d9032c449252\nparent 80dd50ccba97fc7cd0d005f51622d6a2ad8dad84\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421250856 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421250868 +0100\n\nMerge pull request #5637\n\n80dd50c [Qt] group variables below initial if-clauses in AmountSpinBox::stepEnabled (Philip Kaufmann)\n0fd9e2b [Qt] don't allow amount changes when AmountSpinBox is read-only (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec81cbb8045eb880973c948252b2407865c0c24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eec81cbb8045eb880973c948252b2407865c0c24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec81cbb8045eb880973c948252b2407865c0c24/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddb512a3212ba5b473fe1db0beb4d9032c449252",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddb512a3212ba5b473fe1db0beb4d9032c449252",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddb512a3212ba5b473fe1db0beb4d9032c449252"
      },
      {
        "sha": "80dd50ccba97fc7cd0d005f51622d6a2ad8dad84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80dd50ccba97fc7cd0d005f51622d6a2ad8dad84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80dd50ccba97fc7cd0d005f51622d6a2ad8dad84"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 22,
      "deletions": 17
    },
    "files": [
      {
        "sha": "4c00aca9858fcb3057b0b7670ae741c737d769f7",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 17,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec81cbb8045eb880973c948252b2407865c0c24/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec81cbb8045eb880973c948252b2407865c0c24/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=eec81cbb8045eb880973c948252b2407865c0c24",
        "patch": "@@ -20,6 +20,7 @@\n class AmountSpinBox: public QAbstractSpinBox\n {\n     Q_OBJECT\n+\n public:\n     explicit AmountSpinBox(QWidget *parent):\n         QAbstractSpinBox(parent),\n@@ -72,23 +73,6 @@ class AmountSpinBox: public QAbstractSpinBox\n         setValue(val);\n     }\n \n-    StepEnabled stepEnabled() const\n-    {\n-        StepEnabled rv = 0;\n-        if(text().isEmpty()) // Allow step-up with empty field\n-            return StepUpEnabled;\n-        bool valid = false;\n-        CAmount val = value(&valid);\n-        if(valid)\n-        {\n-            if(val > 0)\n-                rv |= StepDownEnabled;\n-            if(val < BitcoinUnits::maxMoney())\n-                rv |= StepUpEnabled;\n-        }\n-        return rv;\n-    }\n-\n     void setDisplayUnit(int unit)\n     {\n         bool valid = false;\n@@ -139,6 +123,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         }\n         return cachedMinimumSizeHint;\n     }\n+\n private:\n     int currentUnit;\n     CAmount singleStep;\n@@ -179,6 +164,26 @@ class AmountSpinBox: public QAbstractSpinBox\n         return QAbstractSpinBox::event(event);\n     }\n \n+    StepEnabled stepEnabled() const\n+    {\n+        if (isReadOnly()) // Disable steps when AmountSpinBox is read-only\n+            return StepNone;\n+        if (text().isEmpty()) // Allow step-up with empty field\n+            return StepUpEnabled;\n+\n+        StepEnabled rv = 0;\n+        bool valid = false;\n+        CAmount val = value(&valid);\n+        if(valid)\n+        {\n+            if(val > 0)\n+                rv |= StepDownEnabled;\n+            if(val < BitcoinUnits::maxMoney())\n+                rv |= StepUpEnabled;\n+        }\n+        return rv;\n+    }\n+\n signals:\n     void valueChanged();\n };"
      }
    ]
  },
  {
    "sha": "42f6a0c2b946af2cce86b721b349d35c4e21ce88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmY2YTBjMmI5NDZhZjJjY2U4NmI3MjFiMzQ5ZDM1YzRlMjFjZTg4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-12-17T08:00:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T16:18:48Z"
      },
      "message": "[Qt] optimize PNG files\n\n- provide a python script\n- add optimized png files",
      "tree": {
        "sha": "bad447cd33ec9eef69b04409f3fbc3e7a8c5b6da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bad447cd33ec9eef69b04409f3fbc3e7a8c5b6da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42f6a0c2b946af2cce86b721b349d35c4e21ce88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42f6a0c2b946af2cce86b721b349d35c4e21ce88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42f6a0c2b946af2cce86b721b349d35c4e21ce88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42f6a0c2b946af2cce86b721b349d35c4e21ce88/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c97bbe70a6876dadedfbf672387371c9c849d1"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "774968fc088d6a4de192239ee524a7fe3f8bdbc8",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "added",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88",
        "patch": "@@ -0,0 +1,49 @@\n+#!/usr/bin/env python\n+\n+import os\n+import sys\n+import subprocess\n+\n+#optimize png, remove various color profiles, remove ancillary chunks (alla) and text chunks (text)\n+#pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text\n+\n+folders = [\"src/qt/res/movies\", \"src/qt/res/icons\", \"src/qt/res/images\"]\n+basePath = subprocess.check_output(\"git rev-parse --show-toplevel\", shell=True).rstrip('\\n')\n+totalSaveBytes = 0\n+\n+outputArray = []\n+for folder in folders:\n+    absFolder=os.path.join(basePath, folder)\n+    for file in os.listdir(absFolder):\n+        extension = os.path.splitext(file)[1]\n+        if extension.lower() == '.png':\n+            print(\"optimizing \"+file+\"...\"),\n+            file_path = os.path.join(absFolder, file)\n+            fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : subprocess.check_output(\"openssl dgst -sha256 \"+file_path, shell=True).rstrip('\\n')};\n+        \n+            pngCrushOutput = \"\"\n+            try:\n+                pngCrushOutput = subprocess.check_output(\"pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text \"+file_path+\" >/dev/null 2>&1\", shell=True).rstrip('\\n')\n+            except:\n+                print \"pngcrush is not installed, aborting...\"\n+                sys.exit(0)\n+        \n+            #verify\n+            if \"Not a PNG file\" in subprocess.check_output(\"pngcrush -n -v \"+file_path+\" >/dev/null 2>&1\", shell=True):\n+                print \"PNG file \"+file+\" is corrupted after crushing, check out pngcursh version\"\n+                sys.exit(1)\n+            \n+        \n+            fileMetaMap['sha256New'] = subprocess.check_output(\"openssl dgst -sha256 \"+file_path, shell=True).rstrip('\\n')\n+            fileMetaMap['psize'] = os.path.getsize(file_path)\n+            outputArray.append(fileMetaMap)\n+            print(\"done\\n\"),\n+\n+print \"summary:\\n+++++++++++++++++\"\n+for fileDict in outputArray:\n+    oldHash = fileDict['sha256Old'].split(\"= \")[1]\n+    newHash = fileDict['sha256New'].split(\"= \")[1]\n+    totalSaveBytes += fileDict['osize'] - fileDict['psize']\n+    print fileDict['file']+\"\\n  size diff from: \"+str(fileDict['osize'])+\" to: \"+str(fileDict['psize'])+\"\\n  old sha256: \"+oldHash+\"\\n  new sha256: \"+newHash+\"\\n\"\n+    \n+print \"completed. Total reduction: \"+str(totalSaveBytes)+\" bytes\"\n\\ No newline at end of file"
      },
      {
        "sha": "83eb3c07ee560450b04816fe3713a4203e3b6213",
        "filename": "src/qt/res/icons/about.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/about.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/about.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/about.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "dd27a99d0a7e48c332e0c2750ef98a0d5e100c17",
        "filename": "src/qt/res/icons/about_qt.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/about_qt.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/about_qt.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/about_qt.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "7e46672f2dfb20f3e168b5394550b39ccb1e8dff",
        "filename": "src/qt/res/icons/add.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/add.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/add.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/add.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "b11c7d5356926d29f615e09607356230c4494344",
        "filename": "src/qt/res/icons/address-book.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/address-book.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/address-book.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/address-book.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "435621af23b440792cd26ccfc419379613d10586",
        "filename": "src/qt/res/icons/bitcoin.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/bitcoin.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/bitcoin.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/bitcoin.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "ceae5ed0d9fad2e94cfb167a5771c38d0af5e865",
        "filename": "src/qt/res/icons/clock1.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/clock1.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/clock1.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock1.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "159f69a8fce8a3a77c6dbc7a40cb2022c538392c",
        "filename": "src/qt/res/icons/clock2.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/clock2.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/clock2.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock2.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "d668e35ffc05949bee8efaaa43ede1f411efd382",
        "filename": "src/qt/res/icons/clock3.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/clock3.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/clock3.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock3.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "5ebf8ed7ac72db67262d2275e7b31d49e6e2aee1",
        "filename": "src/qt/res/icons/clock4.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/clock4.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/clock4.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock4.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "96f15ef7d9507feb506e640daec0c5c1d6345288",
        "filename": "src/qt/res/icons/clock5.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/clock5.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/clock5.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock5.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "5333c83d5eb2f63f0df2e4f6980e4a8395f8b23d",
        "filename": "src/qt/res/icons/configure.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/configure.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/configure.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/configure.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "58e2c3e965ae34fbc553bf3be05269eaf27dd200",
        "filename": "src/qt/res/icons/connect0.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/connect0.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/connect0.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect0.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "949e7a922d5fffe69214a2b9ac083ab55224d5e5",
        "filename": "src/qt/res/icons/connect1.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/connect1.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/connect1.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect1.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "143b2054fb648d6e227ab84672a01d38faa376d7",
        "filename": "src/qt/res/icons/connect2.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/connect2.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/connect2.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect2.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "143b2054fb648d6e227ab84672a01d38faa376d7",
        "filename": "src/qt/res/icons/connect3.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/connect3.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/connect3.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect3.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "f96e3455ceead529fee2371c3e5509e2d51cb8e4",
        "filename": "src/qt/res/icons/connect4.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/connect4.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/connect4.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect4.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "290fe608642285ece313bbaf78641216846d848a",
        "filename": "src/qt/res/icons/debugwindow.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/debugwindow.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/debugwindow.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/debugwindow.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "46582716ef43197805a5096d32b30164029fd25c",
        "filename": "src/qt/res/icons/edit.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/edit.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/edit.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/edit.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "74ac8b277428c45fb6bdd1329437bf07b92122ae",
        "filename": "src/qt/res/icons/editcopy.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/editcopy.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/editcopy.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/editcopy.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "7b47f4d52bcf6eb75356bc179ec42847bb99978b",
        "filename": "src/qt/res/icons/editpaste.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/editpaste.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/editpaste.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/editpaste.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "ac76cc1effca6e42666e20c0509a548527d61702",
        "filename": "src/qt/res/icons/export.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/export.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/export.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/export.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "f2f139dbb2f5b7f8b3b7c0fd59378d6ec68b7f63",
        "filename": "src/qt/res/icons/eye.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/eye.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/eye.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/eye.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "795bf6436a47745229b6d8fe3c96569ce30c50e8",
        "filename": "src/qt/res/icons/eye_minus.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/eye_minus.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/eye_minus.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/eye_minus.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "eaab69297a672bc213e1e5041d949f648a7eff3c",
        "filename": "src/qt/res/icons/eye_plus.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/eye_plus.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/eye_plus.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/eye_plus.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "f4e6f58d05b8b507b3681be0db55e2121231f71f",
        "filename": "src/qt/res/icons/filesave.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/filesave.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/filesave.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/filesave.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "68d841fa859e0e9506401d470ab9669f54f746ba",
        "filename": "src/qt/res/icons/history.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/history.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/history.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/history.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "692b50c2a94eae5c6574ec4c11ee571441888554",
        "filename": "src/qt/res/icons/info.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/info.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/info.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/info.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "f301c4f38ca109163bab373167eeb83ed67f894c",
        "filename": "src/qt/res/icons/key.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/key.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/key.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/key.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "1bd98b21a6d641c833a26af7a20f701dbd47529d",
        "filename": "src/qt/res/icons/lock_closed.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/lock_closed.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/lock_closed.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/lock_closed.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "a7045133b167f7a372af60cbadab5629de26d4af",
        "filename": "src/qt/res/icons/lock_open.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/lock_open.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/lock_open.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/lock_open.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "4d958f0e18d42d7902b42a4f7562539eeb696405",
        "filename": "src/qt/res/icons/open.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/open.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/open.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/open.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "411595413d6bb8b8b35f888a81d63469bf0182fc",
        "filename": "src/qt/res/icons/overview.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/overview.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/overview.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/overview.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "55e34de4b8cbbab55e369eb954c5c2be72ade49e",
        "filename": "src/qt/res/icons/quit.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/quit.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/quit.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/quit.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "f4e6f58d05b8b507b3681be0db55e2121231f71f",
        "filename": "src/qt/res/icons/receive.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/receive.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/receive.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/receive.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "8e738d6301fe8666a4de6495fc1bdda87c2dcce0",
        "filename": "src/qt/res/icons/remove.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/remove.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/remove.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/remove.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "ac76cc1effca6e42666e20c0509a548527d61702",
        "filename": "src/qt/res/icons/send.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/send.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/send.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/send.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "5ac28d36a39f62252745a5005d60b4677994facf",
        "filename": "src/qt/res/icons/synced.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/synced.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/synced.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/synced.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "1091b86e68864c2a8c5c50e1aed9902b5eadd791",
        "filename": "src/qt/res/icons/transaction0.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/transaction0.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/transaction0.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/transaction0.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "5ac28d36a39f62252745a5005d60b4677994facf",
        "filename": "src/qt/res/icons/transaction2.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/transaction2.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/transaction2.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/transaction2.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "55e34de4b8cbbab55e369eb954c5c2be72ade49e",
        "filename": "src/qt/res/icons/transaction_conflicted.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/transaction_conflicted.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/transaction_conflicted.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/transaction_conflicted.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "0a6e72a898966855e4c8ffa565c2298370e5ba8b",
        "filename": "src/qt/res/icons/tx_inout.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/tx_inout.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/tx_inout.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/tx_inout.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "9e9ee92932c47eec1e34719cc090f2a76f28964e",
        "filename": "src/qt/res/icons/tx_input.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/tx_input.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/tx_input.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/tx_input.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "5a6ef521c074eda28f87eda1d7e97213cd0d1b88",
        "filename": "src/qt/res/icons/tx_mined.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/tx_mined.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/tx_mined.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/tx_mined.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "6f66ab654791acecf1f24d5b95335155dfbd7852",
        "filename": "src/qt/res/icons/tx_output.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/tx_output.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/tx_output.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/tx_output.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "8e2cb2cc14436b0f3e303b0b00bf5750f55c9656",
        "filename": "src/qt/res/icons/verify.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/verify.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/icons/verify.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/verify.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "1e92d859da1cf8345beb4a07b714cf4dc89a3eb8",
        "filename": "src/qt/res/movies/spinner-000.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-000.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-000.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-000.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "d167f20541f8a33511136d109a9ff016f6ea338b",
        "filename": "src/qt/res/movies/spinner-001.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-001.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-001.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-001.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "4a1f1f8e5660abc5ed3675da7bc26233888a0e75",
        "filename": "src/qt/res/movies/spinner-002.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-002.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-002.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-002.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "fb1c2cd4adc8e274eeb91605bda52b970f7f96db",
        "filename": "src/qt/res/movies/spinner-003.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-003.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-003.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-003.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "4df2132344fb240bf6b4a97e4ea48b3e167d519c",
        "filename": "src/qt/res/movies/spinner-004.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-004.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-004.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-004.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "5d6f41e0dc04e99328c248c45e16ec8f391128bb",
        "filename": "src/qt/res/movies/spinner-005.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-005.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-005.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-005.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "c1f7d18899b406723aa1320256b4f687bbaa60c8",
        "filename": "src/qt/res/movies/spinner-006.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-006.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-006.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-006.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "1e794b26262243c76c05f068c47a3c4d10bff53c",
        "filename": "src/qt/res/movies/spinner-007.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-007.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-007.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-007.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "df12ea87197bc910dfd50c1d118feea665d5bb5f",
        "filename": "src/qt/res/movies/spinner-008.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-008.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-008.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-008.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "18fc3a7d16d21f082aabac4db2b4dcb0fe8e56e6",
        "filename": "src/qt/res/movies/spinner-009.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-009.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-009.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-009.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "a79c845fe828742ad38f8418179b6e2987a968ba",
        "filename": "src/qt/res/movies/spinner-010.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-010.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-010.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-010.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "57baf66895fd37dc05524402200845b504d9646d",
        "filename": "src/qt/res/movies/spinner-011.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-011.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-011.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-011.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "9deae7853a77be114675325338015003f0df20d4",
        "filename": "src/qt/res/movies/spinner-012.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-012.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-012.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-012.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "0659d48decf354c0e224c2903526b64bf1757eec",
        "filename": "src/qt/res/movies/spinner-013.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-013.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-013.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-013.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "bc1ef51bdedb23b098fd79db1b5f47bd2b3ff97b",
        "filename": "src/qt/res/movies/spinner-014.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-014.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-014.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-014.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "24b57b62c2cd8ca0a3c4b0f261daef7c6d4f6de2",
        "filename": "src/qt/res/movies/spinner-015.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-015.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-015.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-015.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "d622872651aa8276442fd6edf5460ed5d0c7ea56",
        "filename": "src/qt/res/movies/spinner-016.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-016.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-016.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-016.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "f48f688db204ee4cc9b8b68cf02b36fb15ccf0ac",
        "filename": "src/qt/res/movies/spinner-017.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-017.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-017.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-017.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "a2c8f38b1d82090ac38a2a06066b6e1301c74aba",
        "filename": "src/qt/res/movies/spinner-018.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-018.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-018.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-018.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "9d7cc35d8283f9b4d3b9a6be044c67f514ecc191",
        "filename": "src/qt/res/movies/spinner-019.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-019.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-019.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-019.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "1a07acc454029a36ac5fdd556e1811bae62c2a27",
        "filename": "src/qt/res/movies/spinner-020.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-020.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-020.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-020.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "9cea8f25433a8284bd1e90110ef18a4f952b40cc",
        "filename": "src/qt/res/movies/spinner-021.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-021.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-021.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-021.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "60250f6dea8d9a55d72810f13282374d389a461c",
        "filename": "src/qt/res/movies/spinner-022.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-022.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-022.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-022.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "fc290a0cf245ab3fbf98a465d4703a4bdfd97506",
        "filename": "src/qt/res/movies/spinner-023.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-023.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-023.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-023.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "c5dcf1eae90f61ddac48d4f9dd432e820aecc0be",
        "filename": "src/qt/res/movies/spinner-024.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-024.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-024.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-024.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "7f3577a4de2c60562ff6d70faef45382588038cc",
        "filename": "src/qt/res/movies/spinner-025.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-025.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-025.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-025.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "1663ddf44c07535034a7280d005318bd39bf254c",
        "filename": "src/qt/res/movies/spinner-026.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-026.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-026.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-026.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "d0e6da4503848d90bd587325535ef4bdbd571fc5",
        "filename": "src/qt/res/movies/spinner-027.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-027.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-027.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-027.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "2a7aba50e2cfdc275f790b6fffbc989267590c6f",
        "filename": "src/qt/res/movies/spinner-028.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-028.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-028.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-028.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "c8ca15c1e1c24156c70573cdc1dc83d37746234d",
        "filename": "src/qt/res/movies/spinner-029.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-029.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-029.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-029.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "c847c99a93e55b2de39c2f089c0c9edc1f4c6bcf",
        "filename": "src/qt/res/movies/spinner-030.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-030.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-030.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-030.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "403443144ebe1f99e8ba286f5a906bf4ce2e8ea4",
        "filename": "src/qt/res/movies/spinner-031.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-031.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-031.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-031.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "f9db080567c3f8101f3b541c7e1b5b0a5599d8e8",
        "filename": "src/qt/res/movies/spinner-032.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-032.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-032.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-032.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "43f57719e7fc607fc0152da01246c9f95f80905d",
        "filename": "src/qt/res/movies/spinner-033.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-033.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-033.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-033.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "c26656ff17a5afb2a3051b075737f8f2bb062dab",
        "filename": "src/qt/res/movies/spinner-034.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-034.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-034.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-034.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      },
      {
        "sha": "e471f950a3e75bcaf83e38a85303360d718bbbed",
        "filename": "src/qt/res/movies/spinner-035.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-035.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f6a0c2b946af2cce86b721b349d35c4e21ce88/src/qt/res/movies/spinner-035.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-035.png?ref=42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      }
    ]
  },
  {
    "sha": "905711f0a1ee3a656af350917783d6472b3c2aab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDU3MTFmMGExZWUzYTY1NmFmMzUwOTE3NzgzZDY0NzJiM2MyYWFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T12:49:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T16:19:04Z"
      },
      "message": "contrib: improve optimize-pngs.py\n\n- Check that image contents match pre- and post- crushing.\n- Also remove use of external tool to compute sha256 in favor of hashlib.\n- contrib: remove all use of shell=True in strip_pngs.py\n  Using `shell=True` can be a security hazard. See e.g.\n  https://docs.python.org/2/library/subprocess.html#subprocess.check_output",
      "tree": {
        "sha": "12f73e3406e5a0e81b573cec50cc078783a1e095",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12f73e3406e5a0e81b573cec50cc078783a1e095"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/905711f0a1ee3a656af350917783d6472b3c2aab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/905711f0a1ee3a656af350917783d6472b3c2aab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/905711f0a1ee3a656af350917783d6472b3c2aab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/905711f0a1ee3a656af350917783d6472b3c2aab/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42f6a0c2b946af2cce86b721b349d35c4e21ce88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42f6a0c2b946af2cce86b721b349d35c4e21ce88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42f6a0c2b946af2cce86b721b349d35c4e21ce88"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 33,
      "deletions": 9
    },
    "files": [
      {
        "sha": "38aaa00f3128cccc552f9913d7cb0c0f4fe4ec68",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 33,
        "deletions": 9,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/905711f0a1ee3a656af350917783d6472b3c2aab/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/905711f0a1ee3a656af350917783d6472b3c2aab/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=905711f0a1ee3a656af350917783d6472b3c2aab",
        "patch": "@@ -3,12 +3,28 @@\n import os\n import sys\n import subprocess\n+import hashlib\n+from PIL import Image\n+\n+def file_hash(filename):\n+    '''Return hash of raw file contents'''\n+    with open(filename, 'rb') as f:\n+        return hashlib.sha256(f.read()).hexdigest()\n+\n+def content_hash(filename):\n+    '''Return hash of RGBA contents of image'''\n+    i = Image.open(filename)\n+    i = i.convert('RGBA')\n+    data = i.tostring()\n+    return hashlib.sha256(data).hexdigest()\n \n #optimize png, remove various color profiles, remove ancillary chunks (alla) and text chunks (text)\n #pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text\n \n+pngcrush = 'pngcrush'\n+git = 'git'\n folders = [\"src/qt/res/movies\", \"src/qt/res/icons\", \"src/qt/res/images\"]\n-basePath = subprocess.check_output(\"git rev-parse --show-toplevel\", shell=True).rstrip('\\n')\n+basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel']).rstrip('\\n')\n totalSaveBytes = 0\n \n outputArray = []\n@@ -19,31 +35,39 @@\n         if extension.lower() == '.png':\n             print(\"optimizing \"+file+\"...\"),\n             file_path = os.path.join(absFolder, file)\n-            fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : subprocess.check_output(\"openssl dgst -sha256 \"+file_path, shell=True).rstrip('\\n')};\n+            fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : file_hash(file_path)};\n+            fileMetaMap['contentHashPre'] = content_hash(file_path)\n         \n             pngCrushOutput = \"\"\n             try:\n-                pngCrushOutput = subprocess.check_output(\"pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text \"+file_path+\" >/dev/null 2>&1\", shell=True).rstrip('\\n')\n+                pngCrushOutput = subprocess.check_output(\n+                        [pngcrush, \"-brute\", \"-ow\", \"-rem\", \"gAMA\", \"-rem\", \"cHRM\", \"-rem\", \"iCCP\", \"-rem\", \"sRGB\", \"-rem\", \"alla\", \"-rem\", \"text\", file_path],\n+                        stderr=subprocess.STDOUT).rstrip('\\n')\n             except:\n                 print \"pngcrush is not installed, aborting...\"\n                 sys.exit(0)\n         \n             #verify\n-            if \"Not a PNG file\" in subprocess.check_output(\"pngcrush -n -v \"+file_path+\" >/dev/null 2>&1\", shell=True):\n+            if \"Not a PNG file\" in subprocess.check_output([pngcrush, \"-n\", \"-v\", file_path], stderr=subprocess.STDOUT):\n                 print \"PNG file \"+file+\" is corrupted after crushing, check out pngcursh version\"\n                 sys.exit(1)\n             \n-        \n-            fileMetaMap['sha256New'] = subprocess.check_output(\"openssl dgst -sha256 \"+file_path, shell=True).rstrip('\\n')\n+            fileMetaMap['sha256New'] = file_hash(file_path)\n+            fileMetaMap['contentHashPost'] = content_hash(file_path)\n+\n+            if fileMetaMap['contentHashPre'] != fileMetaMap['contentHashPost']:\n+                print \"Image contents of PNG file \"+file+\" before and after crushing don't match\"\n+                sys.exit(1)\n+\n             fileMetaMap['psize'] = os.path.getsize(file_path)\n             outputArray.append(fileMetaMap)\n             print(\"done\\n\"),\n \n print \"summary:\\n+++++++++++++++++\"\n for fileDict in outputArray:\n-    oldHash = fileDict['sha256Old'].split(\"= \")[1]\n-    newHash = fileDict['sha256New'].split(\"= \")[1]\n+    oldHash = fileDict['sha256Old']\n+    newHash = fileDict['sha256New']\n     totalSaveBytes += fileDict['osize'] - fileDict['psize']\n     print fileDict['file']+\"\\n  size diff from: \"+str(fileDict['osize'])+\" to: \"+str(fileDict['psize'])+\"\\n  old sha256: \"+oldHash+\"\\n  new sha256: \"+newHash+\"\\n\"\n     \n-print \"completed. Total reduction: \"+str(totalSaveBytes)+\" bytes\"\n\\ No newline at end of file\n+print \"completed. Total reduction: \"+str(totalSaveBytes)+\" bytes\""
      }
    ]
  },
  {
    "sha": "d1aa3c67f027fd1fc6993bcc52c83c68715edcc5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWFhM2M2N2YwMjdmZDFmYzY5OTNiY2M1MmM4M2M2ODcxNWVkY2M1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T16:22:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T16:22:37Z"
      },
      "message": "Merge pull request #5489\n\n905711f contrib: improve optimize-pngs.py (Wladimir J. van der Laan)\n42f6a0c [Qt] optimize PNG files (Jonas Schnelli)",
      "tree": {
        "sha": "7ef0e68f10b612f7eebe90c760b72b29459e02ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ef0e68f10b612f7eebe90c760b72b29459e02ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUtpfNAAoJEHSBCwEjRsmmrU4H/RJDMPOpbK0KDFG4EPOw1+z2\n3UhIchSJ28yVQVPdHRXQ6oPS2t5ctZpNTvpG00lFg3ltPzSW1dmaoCfTNImqS0V6\nfQ6odOVpBkVjIB/s6ThCCFVYX4waWyxg8AFf/NqIBMS7ZvtXcWIh3LgeknRjQU/R\njfuoCUzIZv00s60Oka2vdT4bIDYCLEuNhObzat2SC8CaFunzBAy8S1+ihLlMyoKv\ns9/FoShSpd08dsyN34OiGEki8uFAQpCgc62WTC3XLLHKya0ovNT38zKYIAIjVFxg\nyRSAo9pLX9Fy4IIn0wbpe1356GUI22ptyWFNc+BEkZ9nmJoYyXINNsm7ZQaAbYU=\n=SKXy\n-----END PGP SIGNATURE-----",
        "payload": "tree 7ef0e68f10b612f7eebe90c760b72b29459e02ef\nparent eec81cbb8045eb880973c948252b2407865c0c24\nparent 905711f0a1ee3a656af350917783d6472b3c2aab\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421252554 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421252557 +0100\n\nMerge pull request #5489\n\n905711f contrib: improve optimize-pngs.py (Wladimir J. van der Laan)\n42f6a0c [Qt] optimize PNG files (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eec81cbb8045eb880973c948252b2407865c0c24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec81cbb8045eb880973c948252b2407865c0c24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eec81cbb8045eb880973c948252b2407865c0c24"
      },
      {
        "sha": "905711f0a1ee3a656af350917783d6472b3c2aab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/905711f0a1ee3a656af350917783d6472b3c2aab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/905711f0a1ee3a656af350917783d6472b3c2aab"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 73,
      "deletions": 0
    },
    "files": [
      {
        "sha": "38aaa00f3128cccc552f9913d7cb0c0f4fe4ec68",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "added",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5",
        "patch": "@@ -0,0 +1,73 @@\n+#!/usr/bin/env python\n+\n+import os\n+import sys\n+import subprocess\n+import hashlib\n+from PIL import Image\n+\n+def file_hash(filename):\n+    '''Return hash of raw file contents'''\n+    with open(filename, 'rb') as f:\n+        return hashlib.sha256(f.read()).hexdigest()\n+\n+def content_hash(filename):\n+    '''Return hash of RGBA contents of image'''\n+    i = Image.open(filename)\n+    i = i.convert('RGBA')\n+    data = i.tostring()\n+    return hashlib.sha256(data).hexdigest()\n+\n+#optimize png, remove various color profiles, remove ancillary chunks (alla) and text chunks (text)\n+#pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text\n+\n+pngcrush = 'pngcrush'\n+git = 'git'\n+folders = [\"src/qt/res/movies\", \"src/qt/res/icons\", \"src/qt/res/images\"]\n+basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel']).rstrip('\\n')\n+totalSaveBytes = 0\n+\n+outputArray = []\n+for folder in folders:\n+    absFolder=os.path.join(basePath, folder)\n+    for file in os.listdir(absFolder):\n+        extension = os.path.splitext(file)[1]\n+        if extension.lower() == '.png':\n+            print(\"optimizing \"+file+\"...\"),\n+            file_path = os.path.join(absFolder, file)\n+            fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : file_hash(file_path)};\n+            fileMetaMap['contentHashPre'] = content_hash(file_path)\n+        \n+            pngCrushOutput = \"\"\n+            try:\n+                pngCrushOutput = subprocess.check_output(\n+                        [pngcrush, \"-brute\", \"-ow\", \"-rem\", \"gAMA\", \"-rem\", \"cHRM\", \"-rem\", \"iCCP\", \"-rem\", \"sRGB\", \"-rem\", \"alla\", \"-rem\", \"text\", file_path],\n+                        stderr=subprocess.STDOUT).rstrip('\\n')\n+            except:\n+                print \"pngcrush is not installed, aborting...\"\n+                sys.exit(0)\n+        \n+            #verify\n+            if \"Not a PNG file\" in subprocess.check_output([pngcrush, \"-n\", \"-v\", file_path], stderr=subprocess.STDOUT):\n+                print \"PNG file \"+file+\" is corrupted after crushing, check out pngcursh version\"\n+                sys.exit(1)\n+            \n+            fileMetaMap['sha256New'] = file_hash(file_path)\n+            fileMetaMap['contentHashPost'] = content_hash(file_path)\n+\n+            if fileMetaMap['contentHashPre'] != fileMetaMap['contentHashPost']:\n+                print \"Image contents of PNG file \"+file+\" before and after crushing don't match\"\n+                sys.exit(1)\n+\n+            fileMetaMap['psize'] = os.path.getsize(file_path)\n+            outputArray.append(fileMetaMap)\n+            print(\"done\\n\"),\n+\n+print \"summary:\\n+++++++++++++++++\"\n+for fileDict in outputArray:\n+    oldHash = fileDict['sha256Old']\n+    newHash = fileDict['sha256New']\n+    totalSaveBytes += fileDict['osize'] - fileDict['psize']\n+    print fileDict['file']+\"\\n  size diff from: \"+str(fileDict['osize'])+\" to: \"+str(fileDict['psize'])+\"\\n  old sha256: \"+oldHash+\"\\n  new sha256: \"+newHash+\"\\n\"\n+    \n+print \"completed. Total reduction: \"+str(totalSaveBytes)+\" bytes\""
      },
      {
        "sha": "83eb3c07ee560450b04816fe3713a4203e3b6213",
        "filename": "src/qt/res/icons/about.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/about.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/about.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/about.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "dd27a99d0a7e48c332e0c2750ef98a0d5e100c17",
        "filename": "src/qt/res/icons/about_qt.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/about_qt.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/about_qt.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/about_qt.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "7e46672f2dfb20f3e168b5394550b39ccb1e8dff",
        "filename": "src/qt/res/icons/add.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/add.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/add.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/add.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "b11c7d5356926d29f615e09607356230c4494344",
        "filename": "src/qt/res/icons/address-book.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/address-book.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/address-book.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/address-book.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "435621af23b440792cd26ccfc419379613d10586",
        "filename": "src/qt/res/icons/bitcoin.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/bitcoin.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/bitcoin.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/bitcoin.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "ceae5ed0d9fad2e94cfb167a5771c38d0af5e865",
        "filename": "src/qt/res/icons/clock1.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/clock1.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/clock1.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock1.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "159f69a8fce8a3a77c6dbc7a40cb2022c538392c",
        "filename": "src/qt/res/icons/clock2.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/clock2.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/clock2.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock2.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "d668e35ffc05949bee8efaaa43ede1f411efd382",
        "filename": "src/qt/res/icons/clock3.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/clock3.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/clock3.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock3.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "5ebf8ed7ac72db67262d2275e7b31d49e6e2aee1",
        "filename": "src/qt/res/icons/clock4.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/clock4.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/clock4.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock4.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "96f15ef7d9507feb506e640daec0c5c1d6345288",
        "filename": "src/qt/res/icons/clock5.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/clock5.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/clock5.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock5.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "5333c83d5eb2f63f0df2e4f6980e4a8395f8b23d",
        "filename": "src/qt/res/icons/configure.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/configure.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/configure.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/configure.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "58e2c3e965ae34fbc553bf3be05269eaf27dd200",
        "filename": "src/qt/res/icons/connect0.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/connect0.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/connect0.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect0.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "949e7a922d5fffe69214a2b9ac083ab55224d5e5",
        "filename": "src/qt/res/icons/connect1.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/connect1.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/connect1.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect1.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "143b2054fb648d6e227ab84672a01d38faa376d7",
        "filename": "src/qt/res/icons/connect2.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/connect2.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/connect2.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect2.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "143b2054fb648d6e227ab84672a01d38faa376d7",
        "filename": "src/qt/res/icons/connect3.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/connect3.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/connect3.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect3.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "f96e3455ceead529fee2371c3e5509e2d51cb8e4",
        "filename": "src/qt/res/icons/connect4.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/connect4.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/connect4.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect4.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "290fe608642285ece313bbaf78641216846d848a",
        "filename": "src/qt/res/icons/debugwindow.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/debugwindow.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/debugwindow.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/debugwindow.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "46582716ef43197805a5096d32b30164029fd25c",
        "filename": "src/qt/res/icons/edit.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/edit.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/edit.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/edit.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "74ac8b277428c45fb6bdd1329437bf07b92122ae",
        "filename": "src/qt/res/icons/editcopy.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/editcopy.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/editcopy.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/editcopy.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "7b47f4d52bcf6eb75356bc179ec42847bb99978b",
        "filename": "src/qt/res/icons/editpaste.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/editpaste.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/editpaste.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/editpaste.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "ac76cc1effca6e42666e20c0509a548527d61702",
        "filename": "src/qt/res/icons/export.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/export.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/export.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/export.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "f2f139dbb2f5b7f8b3b7c0fd59378d6ec68b7f63",
        "filename": "src/qt/res/icons/eye.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/eye.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/eye.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/eye.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "795bf6436a47745229b6d8fe3c96569ce30c50e8",
        "filename": "src/qt/res/icons/eye_minus.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/eye_minus.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/eye_minus.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/eye_minus.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "eaab69297a672bc213e1e5041d949f648a7eff3c",
        "filename": "src/qt/res/icons/eye_plus.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/eye_plus.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/eye_plus.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/eye_plus.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "f4e6f58d05b8b507b3681be0db55e2121231f71f",
        "filename": "src/qt/res/icons/filesave.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/filesave.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/filesave.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/filesave.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "68d841fa859e0e9506401d470ab9669f54f746ba",
        "filename": "src/qt/res/icons/history.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/history.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/history.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/history.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "692b50c2a94eae5c6574ec4c11ee571441888554",
        "filename": "src/qt/res/icons/info.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/info.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/info.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/info.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "f301c4f38ca109163bab373167eeb83ed67f894c",
        "filename": "src/qt/res/icons/key.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/key.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/key.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/key.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "1bd98b21a6d641c833a26af7a20f701dbd47529d",
        "filename": "src/qt/res/icons/lock_closed.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/lock_closed.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/lock_closed.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/lock_closed.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "a7045133b167f7a372af60cbadab5629de26d4af",
        "filename": "src/qt/res/icons/lock_open.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/lock_open.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/lock_open.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/lock_open.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "4d958f0e18d42d7902b42a4f7562539eeb696405",
        "filename": "src/qt/res/icons/open.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/open.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/open.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/open.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "411595413d6bb8b8b35f888a81d63469bf0182fc",
        "filename": "src/qt/res/icons/overview.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/overview.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/overview.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/overview.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "55e34de4b8cbbab55e369eb954c5c2be72ade49e",
        "filename": "src/qt/res/icons/quit.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/quit.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/quit.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/quit.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "f4e6f58d05b8b507b3681be0db55e2121231f71f",
        "filename": "src/qt/res/icons/receive.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/receive.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/receive.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/receive.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "8e738d6301fe8666a4de6495fc1bdda87c2dcce0",
        "filename": "src/qt/res/icons/remove.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/remove.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/remove.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/remove.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "ac76cc1effca6e42666e20c0509a548527d61702",
        "filename": "src/qt/res/icons/send.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/send.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/send.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/send.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "5ac28d36a39f62252745a5005d60b4677994facf",
        "filename": "src/qt/res/icons/synced.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/synced.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/synced.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/synced.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "1091b86e68864c2a8c5c50e1aed9902b5eadd791",
        "filename": "src/qt/res/icons/transaction0.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/transaction0.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/transaction0.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/transaction0.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "5ac28d36a39f62252745a5005d60b4677994facf",
        "filename": "src/qt/res/icons/transaction2.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/transaction2.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/transaction2.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/transaction2.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "55e34de4b8cbbab55e369eb954c5c2be72ade49e",
        "filename": "src/qt/res/icons/transaction_conflicted.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/transaction_conflicted.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/transaction_conflicted.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/transaction_conflicted.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "0a6e72a898966855e4c8ffa565c2298370e5ba8b",
        "filename": "src/qt/res/icons/tx_inout.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/tx_inout.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/tx_inout.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/tx_inout.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "9e9ee92932c47eec1e34719cc090f2a76f28964e",
        "filename": "src/qt/res/icons/tx_input.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/tx_input.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/tx_input.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/tx_input.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "5a6ef521c074eda28f87eda1d7e97213cd0d1b88",
        "filename": "src/qt/res/icons/tx_mined.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/tx_mined.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/tx_mined.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/tx_mined.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "6f66ab654791acecf1f24d5b95335155dfbd7852",
        "filename": "src/qt/res/icons/tx_output.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/tx_output.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/tx_output.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/tx_output.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "8e2cb2cc14436b0f3e303b0b00bf5750f55c9656",
        "filename": "src/qt/res/icons/verify.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/verify.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/icons/verify.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/verify.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "1e92d859da1cf8345beb4a07b714cf4dc89a3eb8",
        "filename": "src/qt/res/movies/spinner-000.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-000.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-000.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-000.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "d167f20541f8a33511136d109a9ff016f6ea338b",
        "filename": "src/qt/res/movies/spinner-001.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-001.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-001.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-001.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "4a1f1f8e5660abc5ed3675da7bc26233888a0e75",
        "filename": "src/qt/res/movies/spinner-002.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-002.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-002.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-002.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "fb1c2cd4adc8e274eeb91605bda52b970f7f96db",
        "filename": "src/qt/res/movies/spinner-003.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-003.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-003.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-003.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "4df2132344fb240bf6b4a97e4ea48b3e167d519c",
        "filename": "src/qt/res/movies/spinner-004.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-004.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-004.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-004.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "5d6f41e0dc04e99328c248c45e16ec8f391128bb",
        "filename": "src/qt/res/movies/spinner-005.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-005.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-005.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-005.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "c1f7d18899b406723aa1320256b4f687bbaa60c8",
        "filename": "src/qt/res/movies/spinner-006.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-006.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-006.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-006.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "1e794b26262243c76c05f068c47a3c4d10bff53c",
        "filename": "src/qt/res/movies/spinner-007.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-007.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-007.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-007.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "df12ea87197bc910dfd50c1d118feea665d5bb5f",
        "filename": "src/qt/res/movies/spinner-008.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-008.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-008.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-008.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "18fc3a7d16d21f082aabac4db2b4dcb0fe8e56e6",
        "filename": "src/qt/res/movies/spinner-009.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-009.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-009.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-009.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "a79c845fe828742ad38f8418179b6e2987a968ba",
        "filename": "src/qt/res/movies/spinner-010.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-010.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-010.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-010.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "57baf66895fd37dc05524402200845b504d9646d",
        "filename": "src/qt/res/movies/spinner-011.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-011.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-011.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-011.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "9deae7853a77be114675325338015003f0df20d4",
        "filename": "src/qt/res/movies/spinner-012.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-012.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-012.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-012.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "0659d48decf354c0e224c2903526b64bf1757eec",
        "filename": "src/qt/res/movies/spinner-013.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-013.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-013.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-013.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "bc1ef51bdedb23b098fd79db1b5f47bd2b3ff97b",
        "filename": "src/qt/res/movies/spinner-014.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-014.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-014.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-014.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "24b57b62c2cd8ca0a3c4b0f261daef7c6d4f6de2",
        "filename": "src/qt/res/movies/spinner-015.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-015.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-015.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-015.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "d622872651aa8276442fd6edf5460ed5d0c7ea56",
        "filename": "src/qt/res/movies/spinner-016.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-016.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-016.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-016.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "f48f688db204ee4cc9b8b68cf02b36fb15ccf0ac",
        "filename": "src/qt/res/movies/spinner-017.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-017.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-017.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-017.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "a2c8f38b1d82090ac38a2a06066b6e1301c74aba",
        "filename": "src/qt/res/movies/spinner-018.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-018.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-018.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-018.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "9d7cc35d8283f9b4d3b9a6be044c67f514ecc191",
        "filename": "src/qt/res/movies/spinner-019.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-019.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-019.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-019.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "1a07acc454029a36ac5fdd556e1811bae62c2a27",
        "filename": "src/qt/res/movies/spinner-020.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-020.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-020.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-020.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "9cea8f25433a8284bd1e90110ef18a4f952b40cc",
        "filename": "src/qt/res/movies/spinner-021.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-021.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-021.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-021.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "60250f6dea8d9a55d72810f13282374d389a461c",
        "filename": "src/qt/res/movies/spinner-022.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-022.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-022.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-022.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "fc290a0cf245ab3fbf98a465d4703a4bdfd97506",
        "filename": "src/qt/res/movies/spinner-023.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-023.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-023.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-023.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "c5dcf1eae90f61ddac48d4f9dd432e820aecc0be",
        "filename": "src/qt/res/movies/spinner-024.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-024.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-024.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-024.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "7f3577a4de2c60562ff6d70faef45382588038cc",
        "filename": "src/qt/res/movies/spinner-025.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-025.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-025.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-025.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "1663ddf44c07535034a7280d005318bd39bf254c",
        "filename": "src/qt/res/movies/spinner-026.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-026.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-026.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-026.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "d0e6da4503848d90bd587325535ef4bdbd571fc5",
        "filename": "src/qt/res/movies/spinner-027.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-027.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-027.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-027.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "2a7aba50e2cfdc275f790b6fffbc989267590c6f",
        "filename": "src/qt/res/movies/spinner-028.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-028.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-028.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-028.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "c8ca15c1e1c24156c70573cdc1dc83d37746234d",
        "filename": "src/qt/res/movies/spinner-029.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-029.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-029.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-029.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "c847c99a93e55b2de39c2f089c0c9edc1f4c6bcf",
        "filename": "src/qt/res/movies/spinner-030.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-030.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-030.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-030.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "403443144ebe1f99e8ba286f5a906bf4ce2e8ea4",
        "filename": "src/qt/res/movies/spinner-031.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-031.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-031.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-031.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "f9db080567c3f8101f3b541c7e1b5b0a5599d8e8",
        "filename": "src/qt/res/movies/spinner-032.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-032.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-032.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-032.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "43f57719e7fc607fc0152da01246c9f95f80905d",
        "filename": "src/qt/res/movies/spinner-033.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-033.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-033.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-033.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "c26656ff17a5afb2a3051b075737f8f2bb062dab",
        "filename": "src/qt/res/movies/spinner-034.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-034.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-034.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-034.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "e471f950a3e75bcaf83e38a85303360d718bbbed",
        "filename": "src/qt/res/movies/spinner-035.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-035.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5/src/qt/res/movies/spinner-035.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/spinner-035.png?ref=d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      }
    ]
  },
  {
    "sha": "301cd2a3a96a3a16384bdc862858734f4aee1df6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDFjZDJhM2E5NmEzYTE2Mzg0YmRjODYyODU4NzM0ZjRhZWUxZGY2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-01-12T20:59:58Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-01-14T17:01:00Z"
      },
      "message": "Use text-color icons for system tray Send/Receive menu entries",
      "tree": {
        "sha": "2c8765837f443c56e0a8c9c676151d809dc52416",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c8765837f443c56e0a8c9c676151d809dc52416"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/301cd2a3a96a3a16384bdc862858734f4aee1df6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/301cd2a3a96a3a16384bdc862858734f4aee1df6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/301cd2a3a96a3a16384bdc862858734f4aee1df6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/301cd2a3a96a3a16384bdc862858734f4aee1df6/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90c71548c795787b008bc337cb9332f75d1bccdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c71548c795787b008bc337cb9332f75d1bccdb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90c71548c795787b008bc337cb9332f75d1bccdb"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 20,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3d41dc89f1f89b5eb4642bf651b15ed254ea9e5c",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301cd2a3a96a3a16384bdc862858734f4aee1df6/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301cd2a3a96a3a16384bdc862858734f4aee1df6/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=301cd2a3a96a3a16384bdc862858734f4aee1df6",
        "patch": "@@ -76,12 +76,14 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     historyAction(0),\n     quitAction(0),\n     sendCoinsAction(0),\n+    sendCoinsMenuAction(0),\n     usedSendingAddressesAction(0),\n     usedReceivingAddressesAction(0),\n     signMessageAction(0),\n     verifyMessageAction(0),\n     aboutAction(0),\n     receiveCoinsAction(0),\n+    receiveCoinsMenuAction(0),\n     optionsAction(0),\n     toggleHideAction(0),\n     encryptWalletAction(0),\n@@ -256,13 +258,21 @@ void BitcoinGUI::createActions(const NetworkStyle *networkStyle)\n     sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));\n     tabGroup->addAction(sendCoinsAction);\n \n+    sendCoinsMenuAction = new QAction(TextColorIcon(\":/icons/send\"), sendCoinsAction->text(), this);\n+    sendCoinsMenuAction->setStatusTip(sendCoinsAction->statusTip());\n+    sendCoinsMenuAction->setToolTip(sendCoinsMenuAction->statusTip());\n+\n     receiveCoinsAction = new QAction(SingleColorIcon(\":/icons/receiving_addresses\"), tr(\"&Receive\"), this);\n     receiveCoinsAction->setStatusTip(tr(\"Request payments (generates QR codes and bitcoin: URIs)\"));\n     receiveCoinsAction->setToolTip(receiveCoinsAction->statusTip());\n     receiveCoinsAction->setCheckable(true);\n     receiveCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_3));\n     tabGroup->addAction(receiveCoinsAction);\n \n+    receiveCoinsMenuAction = new QAction(TextColorIcon(\":/icons/receiving_addresses\"), receiveCoinsAction->text(), this);\n+    receiveCoinsMenuAction->setStatusTip(receiveCoinsAction->statusTip());\n+    receiveCoinsMenuAction->setToolTip(receiveCoinsMenuAction->statusTip());\n+\n     historyAction = new QAction(SingleColorIcon(\":/icons/history\"), tr(\"&Transactions\"), this);\n     historyAction->setStatusTip(tr(\"Browse transaction history\"));\n     historyAction->setToolTip(historyAction->statusTip());\n@@ -277,8 +287,12 @@ void BitcoinGUI::createActions(const NetworkStyle *networkStyle)\n     connect(overviewAction, SIGNAL(triggered()), this, SLOT(gotoOverviewPage()));\n     connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n     connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));\n+    connect(sendCoinsMenuAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n+    connect(sendCoinsMenuAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));\n     connect(receiveCoinsAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n     connect(receiveCoinsAction, SIGNAL(triggered()), this, SLOT(gotoReceiveCoinsPage()));\n+    connect(receiveCoinsMenuAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n+    connect(receiveCoinsMenuAction, SIGNAL(triggered()), this, SLOT(gotoReceiveCoinsPage()));\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));\n #endif // ENABLE_WALLET\n@@ -475,7 +489,9 @@ void BitcoinGUI::setWalletActionsEnabled(bool enabled)\n {\n     overviewAction->setEnabled(enabled);\n     sendCoinsAction->setEnabled(enabled);\n+    sendCoinsMenuAction->setEnabled(enabled);\n     receiveCoinsAction->setEnabled(enabled);\n+    receiveCoinsMenuAction->setEnabled(enabled);\n     historyAction->setEnabled(enabled);\n     encryptWalletAction->setEnabled(enabled);\n     backupWalletAction->setEnabled(enabled);\n@@ -522,8 +538,8 @@ void BitcoinGUI::createTrayIconMenu()\n     // Configuration of the tray icon (or dock icon) icon menu\n     trayIconMenu->addAction(toggleHideAction);\n     trayIconMenu->addSeparator();\n-    trayIconMenu->addAction(sendCoinsAction);\n-    trayIconMenu->addAction(receiveCoinsAction);\n+    trayIconMenu->addAction(sendCoinsMenuAction);\n+    trayIconMenu->addAction(receiveCoinsMenuAction);\n     trayIconMenu->addSeparator();\n     trayIconMenu->addAction(signMessageAction);\n     trayIconMenu->addAction(verifyMessageAction);"
      },
      {
        "sha": "3216a7398ed9bfc72877e730a7cf4d2b22b0b9fc",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301cd2a3a96a3a16384bdc862858734f4aee1df6/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301cd2a3a96a3a16384bdc862858734f4aee1df6/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=301cd2a3a96a3a16384bdc862858734f4aee1df6",
        "patch": "@@ -90,12 +90,14 @@ class BitcoinGUI : public QMainWindow\n     QAction *historyAction;\n     QAction *quitAction;\n     QAction *sendCoinsAction;\n+    QAction *sendCoinsMenuAction;\n     QAction *usedSendingAddressesAction;\n     QAction *usedReceivingAddressesAction;\n     QAction *signMessageAction;\n     QAction *verifyMessageAction;\n     QAction *aboutAction;\n     QAction *receiveCoinsAction;\n+    QAction *receiveCoinsMenuAction;\n     QAction *optionsAction;\n     QAction *toggleHideAction;\n     QAction *encryptWalletAction;"
      }
    ]
  },
  {
    "sha": "e0cd2f55233d10476b75ac75df95a079735921ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGNkMmY1NTIzM2QxMDQ3NmI3NWFjNzVkZjk1YTA3OTczNTkyMWVj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T17:08:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T17:11:11Z"
      },
      "message": "Merge pull request #5649\n\n301cd2a Use text-color icons for system tray Send/Receive menu entries (Luke Dashjr)",
      "tree": {
        "sha": "0bf9fc59a9d41a650da231251db6918f05b21121",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bf9fc59a9d41a650da231251db6918f05b21121"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0cd2f55233d10476b75ac75df95a079735921ec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUtqMvAAoJEHSBCwEjRsmmAN8IAM2Cyppwtn31SnycNyN/kbU7\n67EXHL3g8lrszkkadXngwi/q0sUjcDbmE2XdK4N9h7PXGRwy0S56ezFRNo24386N\nPA5m/SoZJvaycrHWhmEZEANlQ/rGpj/JhcIOHmZf3LZepH2gAjazjfUucWfciMdq\nAqGe5erX1rntmP8PaeGtpXfaLoQzUXtBc5tPJhWiatnuJhBQmfK22pPeLrRKKGNE\nkb2h9QM2cd+1YbQYH7NTUn66MTFECjBQoGBBW31VTv54TezJc1wy0PL9n5sw0P3m\n7Bri479hgZ2EPXqzXDhG74yT2U3D5AwEL/FtNY+vosFMQrQmCQguIUE7evU04sQ=\n=aTzR\n-----END PGP SIGNATURE-----",
        "payload": "tree 0bf9fc59a9d41a650da231251db6918f05b21121\nparent d1aa3c67f027fd1fc6993bcc52c83c68715edcc5\nparent 301cd2a3a96a3a16384bdc862858734f4aee1df6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421255292 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421255471 +0100\n\nMerge pull request #5649\n\n301cd2a Use text-color icons for system tray Send/Receive menu entries (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0cd2f55233d10476b75ac75df95a079735921ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0cd2f55233d10476b75ac75df95a079735921ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0cd2f55233d10476b75ac75df95a079735921ec/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1aa3c67f027fd1fc6993bcc52c83c68715edcc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      },
      {
        "sha": "301cd2a3a96a3a16384bdc862858734f4aee1df6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/301cd2a3a96a3a16384bdc862858734f4aee1df6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/301cd2a3a96a3a16384bdc862858734f4aee1df6"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 20,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3d41dc89f1f89b5eb4642bf651b15ed254ea9e5c",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0cd2f55233d10476b75ac75df95a079735921ec/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0cd2f55233d10476b75ac75df95a079735921ec/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=e0cd2f55233d10476b75ac75df95a079735921ec",
        "patch": "@@ -76,12 +76,14 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     historyAction(0),\n     quitAction(0),\n     sendCoinsAction(0),\n+    sendCoinsMenuAction(0),\n     usedSendingAddressesAction(0),\n     usedReceivingAddressesAction(0),\n     signMessageAction(0),\n     verifyMessageAction(0),\n     aboutAction(0),\n     receiveCoinsAction(0),\n+    receiveCoinsMenuAction(0),\n     optionsAction(0),\n     toggleHideAction(0),\n     encryptWalletAction(0),\n@@ -256,13 +258,21 @@ void BitcoinGUI::createActions(const NetworkStyle *networkStyle)\n     sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));\n     tabGroup->addAction(sendCoinsAction);\n \n+    sendCoinsMenuAction = new QAction(TextColorIcon(\":/icons/send\"), sendCoinsAction->text(), this);\n+    sendCoinsMenuAction->setStatusTip(sendCoinsAction->statusTip());\n+    sendCoinsMenuAction->setToolTip(sendCoinsMenuAction->statusTip());\n+\n     receiveCoinsAction = new QAction(SingleColorIcon(\":/icons/receiving_addresses\"), tr(\"&Receive\"), this);\n     receiveCoinsAction->setStatusTip(tr(\"Request payments (generates QR codes and bitcoin: URIs)\"));\n     receiveCoinsAction->setToolTip(receiveCoinsAction->statusTip());\n     receiveCoinsAction->setCheckable(true);\n     receiveCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_3));\n     tabGroup->addAction(receiveCoinsAction);\n \n+    receiveCoinsMenuAction = new QAction(TextColorIcon(\":/icons/receiving_addresses\"), receiveCoinsAction->text(), this);\n+    receiveCoinsMenuAction->setStatusTip(receiveCoinsAction->statusTip());\n+    receiveCoinsMenuAction->setToolTip(receiveCoinsMenuAction->statusTip());\n+\n     historyAction = new QAction(SingleColorIcon(\":/icons/history\"), tr(\"&Transactions\"), this);\n     historyAction->setStatusTip(tr(\"Browse transaction history\"));\n     historyAction->setToolTip(historyAction->statusTip());\n@@ -277,8 +287,12 @@ void BitcoinGUI::createActions(const NetworkStyle *networkStyle)\n     connect(overviewAction, SIGNAL(triggered()), this, SLOT(gotoOverviewPage()));\n     connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n     connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));\n+    connect(sendCoinsMenuAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n+    connect(sendCoinsMenuAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));\n     connect(receiveCoinsAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n     connect(receiveCoinsAction, SIGNAL(triggered()), this, SLOT(gotoReceiveCoinsPage()));\n+    connect(receiveCoinsMenuAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n+    connect(receiveCoinsMenuAction, SIGNAL(triggered()), this, SLOT(gotoReceiveCoinsPage()));\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));\n #endif // ENABLE_WALLET\n@@ -475,7 +489,9 @@ void BitcoinGUI::setWalletActionsEnabled(bool enabled)\n {\n     overviewAction->setEnabled(enabled);\n     sendCoinsAction->setEnabled(enabled);\n+    sendCoinsMenuAction->setEnabled(enabled);\n     receiveCoinsAction->setEnabled(enabled);\n+    receiveCoinsMenuAction->setEnabled(enabled);\n     historyAction->setEnabled(enabled);\n     encryptWalletAction->setEnabled(enabled);\n     backupWalletAction->setEnabled(enabled);\n@@ -522,8 +538,8 @@ void BitcoinGUI::createTrayIconMenu()\n     // Configuration of the tray icon (or dock icon) icon menu\n     trayIconMenu->addAction(toggleHideAction);\n     trayIconMenu->addSeparator();\n-    trayIconMenu->addAction(sendCoinsAction);\n-    trayIconMenu->addAction(receiveCoinsAction);\n+    trayIconMenu->addAction(sendCoinsMenuAction);\n+    trayIconMenu->addAction(receiveCoinsMenuAction);\n     trayIconMenu->addSeparator();\n     trayIconMenu->addAction(signMessageAction);\n     trayIconMenu->addAction(verifyMessageAction);"
      },
      {
        "sha": "3216a7398ed9bfc72877e730a7cf4d2b22b0b9fc",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0cd2f55233d10476b75ac75df95a079735921ec/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0cd2f55233d10476b75ac75df95a079735921ec/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=e0cd2f55233d10476b75ac75df95a079735921ec",
        "patch": "@@ -90,12 +90,14 @@ class BitcoinGUI : public QMainWindow\n     QAction *historyAction;\n     QAction *quitAction;\n     QAction *sendCoinsAction;\n+    QAction *sendCoinsMenuAction;\n     QAction *usedSendingAddressesAction;\n     QAction *usedReceivingAddressesAction;\n     QAction *signMessageAction;\n     QAction *verifyMessageAction;\n     QAction *aboutAction;\n     QAction *receiveCoinsAction;\n+    QAction *receiveCoinsMenuAction;\n     QAction *optionsAction;\n     QAction *toggleHideAction;\n     QAction *encryptWalletAction;"
      }
    ]
  },
  {
    "sha": "16a5c18cea7330bd68dc9d2f768eb518af88795b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmE1YzE4Y2VhNzMzMGJkNjhkYzlkMmY3NjhlYjUxOGFmODg3OTVi",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-01-14T01:43:39Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-01-14T17:49:57Z"
      },
      "message": "Add a -rpckeepalive and disable RPC use of HTTP persistent connections.\n\nIt turns out that some miners have been staying with old versions of\n Bitcoin Core because their software  behaves poorly with persistent\n connections and the Bitcoin Core thread and connection limits.\n\nWhat happens is that underlying  HTTP libraries leave connections open\n invisibly to their users and then the user runs into the default four\n thread limit.  This looks like Bitcoin Core is unresponsive to RPC.\n\nThere are many things that should be improved in Bitcoin Core's behavior\n here, e.g. supporting more concurrent connections, not tying up threads\n for idle connections, disconnecting kept-alive  connections when limits\n are reached, etc. All are fairly big, risky changes.\n\nDisabling keep-alive is a simple workaround. It's often not easy to turn\n off the keep-alive support in the client where it may be buried in some\n platform library.\n\nIf you are one of the few who really needs persistent connections you\n probably know that you want them and can find a switch; while if you\n don't and the misbehavior is hitting you it is hard to discover the\n source of your problems is keepalive related.  Given that it is best\n to default to off until they're handled better.",
      "tree": {
        "sha": "338fef59c36dfd4141a2782b7e045ab5a72220ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/338fef59c36dfd4141a2782b7e045ab5a72220ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16a5c18cea7330bd68dc9d2f768eb518af88795b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16a5c18cea7330bd68dc9d2f768eb518af88795b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16a5c18cea7330bd68dc9d2f768eb518af88795b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16a5c18cea7330bd68dc9d2f768eb518af88795b/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1aa3c67f027fd1fc6993bcc52c83c68715edcc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1aa3c67f027fd1fc6993bcc52c83c68715edcc5"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f851fcbbca420767dcbc1b7b14601e2e9beb4c31",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16a5c18cea7330bd68dc9d2f768eb518af88795b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16a5c18cea7330bd68dc9d2f768eb518af88795b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=16a5c18cea7330bd68dc9d2f768eb518af88795b",
        "patch": "@@ -380,6 +380,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n     strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\") + \"\\n\";\n     strUsage += \"  -rpcthreads=<n>        \" + strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4) + \"\\n\";\n+    strUsage += \"  -rpckeepalive          \" + strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 0) + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n     strUsage += \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";"
      },
      {
        "sha": "9ebacdbe2e0c6cbe6febd36dc8052b7f5c00e6f5",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16a5c18cea7330bd68dc9d2f768eb518af88795b/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16a5c18cea7330bd68dc9d2f768eb518af88795b/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=16a5c18cea7330bd68dc9d2f768eb518af88795b",
        "patch": "@@ -953,7 +953,7 @@ void ServiceConnection(AcceptedConnection *conn)\n         ReadHTTPMessage(conn->stream(), mapHeaders, strRequest, nProto, MAX_SIZE);\n \n         // HTTP Keep-Alive is false; close connection immediately\n-        if (mapHeaders[\"connection\"] == \"close\")\n+        if ((mapHeaders[\"connection\"] == \"close\") || (!GetBoolArg(\"-rpckeepalive\", false)))\n             fRun = false;\n \n         // Process via JSON-RPC API"
      }
    ]
  },
  {
    "sha": "56c1093dae0c523f9f643f00c67414691272a983",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NmMxMDkzZGFlMGM1MjNmOWY2NDNmMDBjNjc0MTQ2OTEyNzJhOTgz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T11:45:11Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-01-14T17:50:00Z"
      },
      "message": "fix tests for #5655",
      "tree": {
        "sha": "a24e15e6cb98f4283d12c54720a9785149dc3c91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a24e15e6cb98f4283d12c54720a9785149dc3c91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56c1093dae0c523f9f643f00c67414691272a983",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56c1093dae0c523f9f643f00c67414691272a983",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56c1093dae0c523f9f643f00c67414691272a983",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56c1093dae0c523f9f643f00c67414691272a983/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16a5c18cea7330bd68dc9d2f768eb518af88795b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16a5c18cea7330bd68dc9d2f768eb518af88795b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16a5c18cea7330bd68dc9d2f768eb518af88795b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7a9857a77102a6231ce71676da8095bfe6b6c955",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56c1093dae0c523f9f643f00c67414691272a983/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56c1093dae0c523f9f643f00c67414691272a983/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=56c1093dae0c523f9f643f00c67414691272a983",
        "patch": "@@ -21,6 +21,9 @@\n     import urlparse\n \n class HTTPBasicsTest (BitcoinTestFramework):        \n+    def setup_nodes(self):\n+        return start_nodes(4, self.options.tmpdir, extra_args=[['-rpckeepalive']]*4)\n+\n     def run_test(self):        \n         \n         #################################################"
      },
      {
        "sha": "4c8a11b821d4af21e870a5d3e21e494b8a15857f",
        "filename": "qa/rpc-tests/test_framework.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56c1093dae0c523f9f643f00c67414691272a983/qa/rpc-tests/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56c1093dae0c523f9f643f00c67414691272a983/qa/rpc-tests/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework.py?ref=56c1093dae0c523f9f643f00c67414691272a983",
        "patch": "@@ -33,8 +33,11 @@ def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain(self.options.tmpdir)\n \n+    def setup_nodes(self):\n+        return start_nodes(4, self.options.tmpdir)\n+\n     def setup_network(self, split = False):\n-        self.nodes = start_nodes(4, self.options.tmpdir)\n+        self.nodes = self.setup_nodes()\n \n         # Connect the nodes as a \"chain\".  This allows us\n         # to split the network between nodes 1 and 2 to get"
      }
    ]
  },
  {
    "sha": "1dd8ee72afc26191da51d8d3a5590eab7c9368f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZGQ4ZWU3MmFmYzI2MTkxZGE1MWQ4ZDNhNTU5MGVhYjdjOTM2OGY2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-14T15:36:48Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-01-14T17:50:00Z"
      },
      "message": "improve tests for #5655",
      "tree": {
        "sha": "624089594c54cf63ba6f2aea0195b2cfe2790e65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/624089594c54cf63ba6f2aea0195b2cfe2790e65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1dd8ee72afc26191da51d8d3a5590eab7c9368f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1dd8ee72afc26191da51d8d3a5590eab7c9368f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1dd8ee72afc26191da51d8d3a5590eab7c9368f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1dd8ee72afc26191da51d8d3a5590eab7c9368f6/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56c1093dae0c523f9f643f00c67414691272a983",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56c1093dae0c523f9f643f00c67414691272a983",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56c1093dae0c523f9f643f00c67414691272a983"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 24,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8cbf1d7f4c457e244801712f288e02d805203078",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1dd8ee72afc26191da51d8d3a5590eab7c9368f6/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1dd8ee72afc26191da51d8d3a5590eab7c9368f6/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=1dd8ee72afc26191da51d8d3a5590eab7c9368f6",
        "patch": "@@ -22,7 +22,7 @@\n \n class HTTPBasicsTest (BitcoinTestFramework):        \n     def setup_nodes(self):\n-        return start_nodes(4, self.options.tmpdir, extra_args=[['-rpckeepalive']]*4)\n+        return start_nodes(4, self.options.tmpdir, extra_args=[['-rpckeepalive=1'], ['-rpckeepalive=0'], [], []])\n \n     def run_test(self):        \n         \n@@ -74,6 +74,29 @@ def run_test(self):\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, False) #now the connection must be closed after the response        \n         \n+        #node1 (2nd node) is running with disabled keep-alive option\n+        urlNode1 = urlparse.urlparse(self.nodes[1].url)\n+        authpair = urlNode1.username + ':' + urlNode1.password\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+                \n+        conn = httplib.HTTPConnection(urlNode1.hostname, urlNode1.port)\n+        conn.connect()\n+        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        out1 = conn.getresponse().read();\n+        assert_equal('\"error\":null' in out1, True)\n+        assert_equal(conn.sock!=None, False) #connection must be closed because keep-alive was set to false\n+        \n+        #node2 (third node) is running with standard keep-alive parameters which means keep-alive is off\n+        urlNode2 = urlparse.urlparse(self.nodes[2].url)\n+        authpair = urlNode2.username + ':' + urlNode2.password\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+                \n+        conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        out1 = conn.getresponse().read();\n+        assert_equal('\"error\":null' in out1, True)\n+        assert_equal(conn.sock!=None, False) #connection must be closed because bitcoind should use keep-alive by default\n         \n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      }
    ]
  },
  {
    "sha": "6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzE1ZWZiOWNhNWNhYmViMDdhZTRiYTgzOTBhNmUxYjc2MzhmNjZj",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-08T13:42:04Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-15T08:08:22Z"
      },
      "message": "[Qt] Payment request expiration bug fix (re-done)\n\n- this is based on #4122 (which can be closed)\n\nCurrently a payment request is only checked for expiration upon receipt.\nIt should be checked again immediately before sending coins to prevent\nthe user from paying to an expired invoice which would then require a\ncustomer service interaction.\n\n- add static verifyExpired() function to PaymentServer to be able to use\n  the same validation code in GUI and unit-testing code\n- extend unit tests to use that function and also add an unit test which\n  overflows, because payment requests allow expires as uint64, whereas we\n  use int64_t for verification of expired payment requests",
      "tree": {
        "sha": "a6a984a35af1053209e0cd884ee90eff1d87797a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6a984a35af1053209e0cd884ee90eff1d87797a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e0cd2f55233d10476b75ac75df95a079735921ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0cd2f55233d10476b75ac75df95a079735921ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0cd2f55233d10476b75ac75df95a079735921ec"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 137,
      "deletions": 13
    },
    "files": [
      {
        "sha": "0187e4c2299fca04d6e1bc7cc5934227c23d4d54",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
        "patch": "@@ -518,8 +518,6 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n         return false;\n \n     if (request.IsInitialized()) {\n-        const payments::PaymentDetails& details = request.getDetails();\n-\n         // Payment request network matches client network?\n         if (!verifyNetwork(request.getDetails())) {\n             emit message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n@@ -528,16 +526,15 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n             return false;\n         }\n \n-        // Expired payment request?\n-        if (details.has_expires() && (int64_t)details.expires() < GetTime())\n-        {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Payment request has expired.\"),\n+        // Make sure any payment requests involved are still valid.\n+        // This is re-checked just before sending coins in WalletModel::sendCoins().\n+        if (verifyExpired(request.getDetails())) {\n+            emit message(tr(\"Payment request rejected\"), tr(\"Payment request expired.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n             return false;\n         }\n-    }\n-    else {\n+    } else {\n         emit message(tr(\"Payment request error\"), tr(\"Payment request is not initialized.\"),\n             CClientUIInterface::MSG_ERROR);\n \n@@ -756,3 +753,15 @@ bool PaymentServer::verifyNetwork(const payments::PaymentDetails& requestDetails\n     }\n     return fVerified;\n }\n+\n+bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails)\n+{\n+    bool fVerified = (requestDetails.has_expires() && (int64_t)requestDetails.expires() < GetTime());\n+    if (fVerified) {\n+        const QString requestExpires = QString::fromStdString(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", (int64_t)requestDetails.expires()));\n+        qWarning() << QString(\"PaymentServer::%1: Payment request expired \\\"%2\\\".\")\n+            .arg(__func__)\n+            .arg(requestExpires);\n+    }\n+    return fVerified;\n+}"
      },
      {
        "sha": "db5f44ff1dfd8e5a444e4a2cec1058d4639df3fb",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
        "patch": "@@ -93,6 +93,8 @@ class PaymentServer : public QObject\n \n     // Verify that the payment request network matches the client network\n     static bool verifyNetwork(const payments::PaymentDetails& requestDetails);\n+    // Verify if the payment request is expired\n+    static bool verifyExpired(const payments::PaymentDetails& requestDetails);\n \n signals:\n     // Fired when a valid payment request is received"
      },
      {
        "sha": "ce4a62d1b0761bd8ab5e6b7797ebf30444bb73ce",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
        "patch": "@@ -529,6 +529,10 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n     case WalletModel::InsaneFee:\n         msgParams.first = tr(\"A fee higher than %1 is considered an insanely high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), 10000000));\n         break;\n+    case WalletModel::PaymentRequestExpired:\n+        msgParams.first = tr(\"Payment request expired!\");\n+        msgParams.second = CClientUIInterface::MSG_ERROR;\n+        break;\n     // included to prevent a compiler warning.\n     case WalletModel::OK:\n     default:"
      },
      {
        "sha": "50636d7c67f770132c5591a68aa44995d2a8f100",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
        "patch": "@@ -361,3 +361,75 @@ gAFwThsozZxkZxzCn4R8WxNiLFV6m0ye9fEtSbolfaW+EjBMpO03lr/dwNnrclhg\\\n ew+A05xfZztrAt16XKEY7qKJ/eY2nLd0fVAIu/nIt+7/VYVXT83zLrWc150aRS7W\\\n AdJbL3JOJLs6Eyp5zrPbfI8faRttFAdONKDrJgIpuW1E3g==\\\n \";\n+\n+//\n+// Expired payment request (expires is set to 1 = 1970-01-01 00:00:01)\n+//\n+const char* paymentrequest2_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iQgoEdGVzdBIgCICt4gQS\\\n+GXapFASsapRTBKxoykO9YhoackY1CqLyiKwYiNLUpQUgASoQVGVzdGluZyB0ZXN0\\\n+bmV0ISqAATXq9A5nmJgtmee/bQTeHeif4w1YYFPBlKghwx6qbVgXTWnwBJtOQhhV\\\n+sZdzbTl95ENR7/Y7VJupW9kDWobCK7zUUhLAzUlwmLlcx6itHw8LTUF5HK+AwsZm\\\n+Zs85lISGvOS0NZW/ENa6l+oQRnL87oqVZr/EDGiuqjz6T0ThQi0l\\\n+\";\n+\n+//\n+// Unexpired payment request (expires is set to 0x7FFFFFFFFFFFFFFF = max. int64_t)\n+//\n+const char* paymentrequest3_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iSgoEdGVzdBIgCICt4gQS\\\n+GXapFASsapRTBKxoykO9YhoackY1CqLyiKwYyNfZpQUg//////////9/KhBUZXN0\\\n+aW5nIHRlc3RuZXQhKoABNwi8WnMW4aMvbmvorTiiWJLFhofLFnsoWCJnj3rWLnLh\\\n+n3w6q/fZ26p50ERL/noxdTUfeFsKnlECkUu/fOcOrqyYDiwvxI0SZ034DleVyFU1\\\n+Z3T+X0zcL8oe7bX01Yf+s2V+5JXQXarKnKBrZCGgv2ARjFNSZe7E7vGg5K4Q6Q8=\\\n+\";\n+\n+//\n+// Unexpired payment request (expires is set to 0x8000000000000000 > max. int64_t, allowed uint64)\n+//\n+const char* paymentrequest4_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iSwoEdGVzdBIgCICt4gQS\\\n+GXapFASsapRTBKxoykO9YhoackY1CqLyiKwYt+HZpQUggICAgICAgICAASoQVGVz\\\n+dGluZyB0ZXN0bmV0ISqAAXSQG8+GFA18VaKarlYrOz293rNMIub0swKGcQm8jAGX\\\n+HSLaRgHfUDeEPr4hydy4dtfu59KNwe2xsHOHu/SpO4L8SrA4Dm9A7SlNBVWdcLbw\\\n+d2hj739GDLz0b5KuJ2SG6VknMRQM976w/m2qlq0ccVGaaZ2zMIGfpzL3p6adwx/5\\\n+\";"
      },
      {
        "sha": "04935192c85fa97bb51b445686903d9d895b9063",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 2,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
        "patch": "@@ -143,15 +143,45 @@ void PaymentServerTests::paymentServerTests()\n     QVERIFY(r.paymentRequest.IsInitialized());\n     QCOMPARE(PaymentServer::verifyNetwork(r.paymentRequest.getDetails()), false);\n \n-    // Just get some random data big enough to trigger BIP70 DoS protection\n+    // Expired payment request (expires is set to 1 = 1970-01-01 00:00:01):\n+    data = DecodeBase64(paymentrequest2_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    // compares 1 < GetTime() == false (treated as expired payment request)\n+    QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), true);\n+\n+    // Unexpired payment request (expires is set to 0x7FFFFFFFFFFFFFFF = max. int64_t):\n+    // 9223372036854775807 (uint64), 9223372036854775807 (int64_t) and -1 (int32_t)\n+    // -1 is 1969-12-31 23:59:59 (for a 32 bit time values)\n+    data = DecodeBase64(paymentrequest3_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    // compares 9223372036854775807 < GetTime() == false (treated as unexpired payment request)\n+    QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), false);\n+\n+    // Unexpired payment request (expires is set to 0x8000000000000000 > max. int64_t, allowed uint64):\n+    // 9223372036854775808 (uint64), -9223372036854775808 (int64_t) and 0 (int32_t)\n+    // 0 is 1970-01-01 00:00:00 (for a 32 bit time values)\n+    data = DecodeBase64(paymentrequest4_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    // compares -9223372036854775808 < GetTime() == true (treated as expired payment request)\n+    QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), true);\n+\n+    // Test BIP70 DoS protection:\n     unsigned char randData[BIP70_MAX_PAYMENTREQUEST_SIZE + 1];\n     GetRandBytes(randData, sizeof(randData));\n     // Write data to a temp file:\n     QTemporaryFile tempFile;\n     tempFile.open();\n     tempFile.write((const char*)randData, sizeof(randData));\n     tempFile.close();\n-    // Trigger BIP70 DoS protection\n     QCOMPARE(PaymentServer::readPaymentRequestFromFile(tempFile.fileName(), r.paymentRequest), false);\n \n     delete server;"
      },
      {
        "sha": "57596b77bd771eb6443b92e780ed75b60de2200d",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"addresstablemodel.h\"\n #include \"guiconstants.h\"\n+#include \"paymentserver.h\"\n #include \"recentrequeststablemodel.h\"\n #include \"transactiontablemodel.h\"\n \n@@ -294,11 +295,16 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         LOCK2(cs_main, wallet->cs_wallet);\n         CWalletTx *newTx = transaction.getTransaction();\n \n-        // Store PaymentRequests in wtx.vOrderForm in wallet.\n         foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n         {\n             if (rcp.paymentRequest.IsInitialized())\n             {\n+                // Make sure any payment requests involved are still valid.\n+                if (PaymentServer::verifyExpired(rcp.paymentRequest.getDetails())) {\n+                    return PaymentRequestExpired;\n+                }\n+\n+                // Store PaymentRequests in wtx.vOrderForm in wallet.\n                 std::string key(\"PaymentRequest\");\n                 std::string value;\n                 rcp.paymentRequest.SerializeToString(&value);"
      },
      {
        "sha": "9916d11f93995175632ad456db4400e2088a6102",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
        "patch": "@@ -40,7 +40,7 @@ class SendCoinsRecipient\n     explicit SendCoinsRecipient(const QString &addr, const QString &label, const CAmount& amount, const QString &message):\n         address(addr), label(label), amount(amount), message(message), nVersion(SendCoinsRecipient::CURRENT_VERSION) {}\n \n-    // If from an insecure payment request, this is used for storing\n+    // If from an unauthenticated payment request, this is used for storing\n     // the addresses, e.g. address-A<br />address-B<br />address-C.\n     // Info: As we don't need to process addresses in here when using\n     // payment requests, we can abuse it for displaying an address list.\n@@ -111,7 +111,8 @@ class WalletModel : public QObject\n         DuplicateAddress,\n         TransactionCreationFailed, // Error returned when wallet is still locked\n         TransactionCommitFailed,\n-        InsaneFee\n+        InsaneFee,\n+        PaymentRequestExpired\n     };\n \n     enum EncryptionStatus"
      }
    ]
  },
  {
    "sha": "9ca6e047907fec88167e1a2b9bc9c40faa824600",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2E2ZTA0NzkwN2ZlYzg4MTY3ZTFhMmI5YmM5YzQwZmFhODI0NjAw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-15T08:25:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-15T08:27:21Z"
      },
      "message": "Merge pull request #5655\n\n1dd8ee7 improve tests for #5655 (Jonas Schnelli)\n56c1093 fix tests for #5655 (Wladimir J. van der Laan)\n16a5c18 Add a -rpckeepalive and disable RPC use of HTTP persistent connections. (Gregory Maxwell)",
      "tree": {
        "sha": "4f849f582ecd0e54887fcf4c0fea7780e5a43b33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f849f582ecd0e54887fcf4c0fea7780e5a43b33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ca6e047907fec88167e1a2b9bc9c40faa824600",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUt3npAAoJEHSBCwEjRsmmFEwIAJMock1C2DijabdsWR5OKTC/\nPnNnKSJaY9smBR/OGTcZ3R4zDkE74pOEkUcYTA7yE59pgm9lg7S85SFMb8wqOlzQ\nGkCizMghiIy91xplIrLgX+3xxOWCK8/EiliQZDsNZuaCA6qnfZrsjt8Mm0YdJ1wq\ncQ+4IQP6j2FAaRgdCJYniAFZx18e690E4nQkg9hPoHqJwhcv7KZQJY0DUnIW4hv8\n2Iz1wWoG5mpRi6k8ZzZOGz9Qwv+P+S2OqsN/T31+ozce/nfnCTWRzdlxTIXxIPIV\nSpQnfF0zKYV0ywMtxo8L6vPDhQ4bODJKA9avloryZqOfgyTyUYAfU6WgdF7f74M=\n=pz7I\n-----END PGP SIGNATURE-----",
        "payload": "tree 4f849f582ecd0e54887fcf4c0fea7780e5a43b33\nparent e0cd2f55233d10476b75ac75df95a079735921ec\nparent 1dd8ee72afc26191da51d8d3a5590eab7c9368f6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421310319 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421310441 +0100\n\nMerge pull request #5655\n\n1dd8ee7 improve tests for #5655 (Jonas Schnelli)\n56c1093 fix tests for #5655 (Wladimir J. van der Laan)\n16a5c18 Add a -rpckeepalive and disable RPC use of HTTP persistent connections. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ca6e047907fec88167e1a2b9bc9c40faa824600",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ca6e047907fec88167e1a2b9bc9c40faa824600",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ca6e047907fec88167e1a2b9bc9c40faa824600/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0cd2f55233d10476b75ac75df95a079735921ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0cd2f55233d10476b75ac75df95a079735921ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0cd2f55233d10476b75ac75df95a079735921ec"
      },
      {
        "sha": "1dd8ee72afc26191da51d8d3a5590eab7c9368f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1dd8ee72afc26191da51d8d3a5590eab7c9368f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1dd8ee72afc26191da51d8d3a5590eab7c9368f6"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 32,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8cbf1d7f4c457e244801712f288e02d805203078",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca6e047907fec88167e1a2b9bc9c40faa824600/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca6e047907fec88167e1a2b9bc9c40faa824600/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=9ca6e047907fec88167e1a2b9bc9c40faa824600",
        "patch": "@@ -21,6 +21,9 @@\n     import urlparse\n \n class HTTPBasicsTest (BitcoinTestFramework):        \n+    def setup_nodes(self):\n+        return start_nodes(4, self.options.tmpdir, extra_args=[['-rpckeepalive=1'], ['-rpckeepalive=0'], [], []])\n+\n     def run_test(self):        \n         \n         #################################################\n@@ -71,6 +74,29 @@ def run_test(self):\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, False) #now the connection must be closed after the response        \n         \n+        #node1 (2nd node) is running with disabled keep-alive option\n+        urlNode1 = urlparse.urlparse(self.nodes[1].url)\n+        authpair = urlNode1.username + ':' + urlNode1.password\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+                \n+        conn = httplib.HTTPConnection(urlNode1.hostname, urlNode1.port)\n+        conn.connect()\n+        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        out1 = conn.getresponse().read();\n+        assert_equal('\"error\":null' in out1, True)\n+        assert_equal(conn.sock!=None, False) #connection must be closed because keep-alive was set to false\n+        \n+        #node2 (third node) is running with standard keep-alive parameters which means keep-alive is off\n+        urlNode2 = urlparse.urlparse(self.nodes[2].url)\n+        authpair = urlNode2.username + ':' + urlNode2.password\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+                \n+        conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        out1 = conn.getresponse().read();\n+        assert_equal('\"error\":null' in out1, True)\n+        assert_equal(conn.sock!=None, False) #connection must be closed because bitcoind should use keep-alive by default\n         \n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      },
      {
        "sha": "4c8a11b821d4af21e870a5d3e21e494b8a15857f",
        "filename": "qa/rpc-tests/test_framework.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca6e047907fec88167e1a2b9bc9c40faa824600/qa/rpc-tests/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca6e047907fec88167e1a2b9bc9c40faa824600/qa/rpc-tests/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework.py?ref=9ca6e047907fec88167e1a2b9bc9c40faa824600",
        "patch": "@@ -33,8 +33,11 @@ def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain(self.options.tmpdir)\n \n+    def setup_nodes(self):\n+        return start_nodes(4, self.options.tmpdir)\n+\n     def setup_network(self, split = False):\n-        self.nodes = start_nodes(4, self.options.tmpdir)\n+        self.nodes = self.setup_nodes()\n \n         # Connect the nodes as a \"chain\".  This allows us\n         # to split the network between nodes 1 and 2 to get"
      },
      {
        "sha": "f851fcbbca420767dcbc1b7b14601e2e9beb4c31",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca6e047907fec88167e1a2b9bc9c40faa824600/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca6e047907fec88167e1a2b9bc9c40faa824600/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9ca6e047907fec88167e1a2b9bc9c40faa824600",
        "patch": "@@ -380,6 +380,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n     strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\") + \"\\n\";\n     strUsage += \"  -rpcthreads=<n>        \" + strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4) + \"\\n\";\n+    strUsage += \"  -rpckeepalive          \" + strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 0) + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n     strUsage += \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";"
      },
      {
        "sha": "9ebacdbe2e0c6cbe6febd36dc8052b7f5c00e6f5",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca6e047907fec88167e1a2b9bc9c40faa824600/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca6e047907fec88167e1a2b9bc9c40faa824600/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=9ca6e047907fec88167e1a2b9bc9c40faa824600",
        "patch": "@@ -953,7 +953,7 @@ void ServiceConnection(AcceptedConnection *conn)\n         ReadHTTPMessage(conn->stream(), mapHeaders, strRequest, nProto, MAX_SIZE);\n \n         // HTTP Keep-Alive is false; close connection immediately\n-        if (mapHeaders[\"connection\"] == \"close\")\n+        if ((mapHeaders[\"connection\"] == \"close\") || (!GetBoolArg(\"-rpckeepalive\", false)))\n             fRun = false;\n \n         // Process via JSON-RPC API"
      }
    ]
  },
  {
    "sha": "0c03a93e70c9491fde7c4ee283bb4b729212d3b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzAzYTkzZTcwYzk0OTFmZGU3YzRlZTI4M2JiNGI3MjkyMTJkM2Iw",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-15T13:30:44Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-15T13:30:44Z"
      },
      "message": "[Qt] add debug logging for -rootcertificates option\n\n- now logs if -rootcertificates=\"\" was used to disable payment request\n  authentication via X.509 certificates\n- also logs which file is used as trusted root cert, if -rootcertificates\n  is set",
      "tree": {
        "sha": "d977a4e8c972291b8d71f69a6b90d9dc05b66a94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d977a4e8c972291b8d71f69a6b90d9dc05b66a94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c03a93e70c9491fde7c4ee283bb4b729212d3b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c03a93e70c9491fde7c4ee283bb4b729212d3b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c03a93e70c9491fde7c4ee283bb4b729212d3b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c03a93e70c9491fde7c4ee283bb4b729212d3b0/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e0cd2f55233d10476b75ac75df95a079735921ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0cd2f55233d10476b75ac75df95a079735921ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0cd2f55233d10476b75ac75df95a079735921ec"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 10,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d642fdae363fabaf0d956f0eb8e7c0056ced089d",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c03a93e70c9491fde7c4ee283bb4b729212d3b0/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c03a93e70c9491fde7c4ee283bb4b729212d3b0/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=0c03a93e70c9491fde7c4ee283bb4b729212d3b0",
        "patch": "@@ -124,19 +124,22 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n     // and get 'I don't like X.509 certificates, don't trust anybody' behavior:\n     QString certFile = QString::fromStdString(GetArg(\"-rootcertificates\", \"-system-\"));\n \n-    if (certFile.isEmpty())\n-        return; // Empty store\n+    // Empty store\n+    if (certFile.isEmpty()) {\n+        qDebug() << QString(\"PaymentServer::%1: Payment request authentication via X.509 certificates disabled.\").arg(__func__);\n+        return;\n+    }\n \n     QList<QSslCertificate> certList;\n \n-    if (certFile != \"-system-\")\n-    {\n+    if (certFile != \"-system-\") {\n+            qDebug() << QString(\"PaymentServer::%1: Using \\\"%2\\\" as trusted root certificate.\").arg(__func__).arg(certFile);\n+\n         certList = QSslCertificate::fromPath(certFile);\n         // Use those certificates when fetching payment requests, too:\n         QSslSocket::setDefaultCaCertificates(certList);\n-    }\n-    else\n-        certList = QSslSocket::systemCaCertificates ();\n+    } else\n+        certList = QSslSocket::systemCaCertificates();\n \n     int nRootCerts = 0;\n     const QDateTime currentTime = QDateTime::currentDateTime();"
      }
    ]
  },
  {
    "sha": "c29568a68624bc2987637d601879fbbcd5be3b9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjk1NjhhNjg2MjRiYzI5ODc2MzdkNjAxODc5ZmJiY2Q1YmUzYjlk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-16T09:53:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-16T09:53:31Z"
      },
      "message": "Merge pull request #5666\n\n0c03a93 [Qt] add debug logging for -rootcertificates option (Philip Kaufmann)",
      "tree": {
        "sha": "e8fc7204bd055b33e671c187f5031532f4198a09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8fc7204bd055b33e671c187f5031532f4198a09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c29568a68624bc2987637d601879fbbcd5be3b9d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUuN+bAAoJEHSBCwEjRsmm88MH/iwfdD/9yh2iXqNWjZGJujjK\nydEb7JpLzbNiiOVuyMzR753KtPkS6ePWwvB1XSMH8O0MImIgyElbdlCPoRHHmEUc\nI/TX4EZfrPXuGFxI4zaIZxI+IHWUhI7oFoPIWTiD39Uc0xERpRFjIcjDUmx2llQL\nINsN7VhqRUvcfjADjvywUv6r6vxAClAzmw5qk3lNmoL/DvXim2enZezV/tO3H26H\ntRQ+ThlVcLhAHhhZV/lDeAGnTB3c2G9cul2bX43z/zxODKlL4xpjbTS2vjMwk1I3\ndcGPWEdAnfrh1adfIlzE69nbSkhS3OjckAGdI8Bgh1G88dLRjuqaYqAmNG0Vx0U=\n=K/Oi\n-----END PGP SIGNATURE-----",
        "payload": "tree e8fc7204bd055b33e671c187f5031532f4198a09\nparent 9ca6e047907fec88167e1a2b9bc9c40faa824600\nparent 0c03a93e70c9491fde7c4ee283bb4b729212d3b0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421401982 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421402011 +0100\n\nMerge pull request #5666\n\n0c03a93 [Qt] add debug logging for -rootcertificates option (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c29568a68624bc2987637d601879fbbcd5be3b9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c29568a68624bc2987637d601879fbbcd5be3b9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c29568a68624bc2987637d601879fbbcd5be3b9d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ca6e047907fec88167e1a2b9bc9c40faa824600",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ca6e047907fec88167e1a2b9bc9c40faa824600",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ca6e047907fec88167e1a2b9bc9c40faa824600"
      },
      {
        "sha": "0c03a93e70c9491fde7c4ee283bb4b729212d3b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c03a93e70c9491fde7c4ee283bb4b729212d3b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c03a93e70c9491fde7c4ee283bb4b729212d3b0"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 10,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d642fdae363fabaf0d956f0eb8e7c0056ced089d",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c29568a68624bc2987637d601879fbbcd5be3b9d/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c29568a68624bc2987637d601879fbbcd5be3b9d/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=c29568a68624bc2987637d601879fbbcd5be3b9d",
        "patch": "@@ -124,19 +124,22 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n     // and get 'I don't like X.509 certificates, don't trust anybody' behavior:\n     QString certFile = QString::fromStdString(GetArg(\"-rootcertificates\", \"-system-\"));\n \n-    if (certFile.isEmpty())\n-        return; // Empty store\n+    // Empty store\n+    if (certFile.isEmpty()) {\n+        qDebug() << QString(\"PaymentServer::%1: Payment request authentication via X.509 certificates disabled.\").arg(__func__);\n+        return;\n+    }\n \n     QList<QSslCertificate> certList;\n \n-    if (certFile != \"-system-\")\n-    {\n+    if (certFile != \"-system-\") {\n+            qDebug() << QString(\"PaymentServer::%1: Using \\\"%2\\\" as trusted root certificate.\").arg(__func__).arg(certFile);\n+\n         certList = QSslCertificate::fromPath(certFile);\n         // Use those certificates when fetching payment requests, too:\n         QSslSocket::setDefaultCaCertificates(certList);\n-    }\n-    else\n-        certList = QSslSocket::systemCaCertificates ();\n+    } else\n+        certList = QSslSocket::systemCaCertificates();\n \n     int nRootCerts = 0;\n     const QDateTime currentTime = QDateTime::currentDateTime();"
      }
    ]
  },
  {
    "sha": "a353ad4cdb085c23e4c157063c5540326eacb4e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzUzYWQ0Y2RiMDg1YzIzZTRjMTU3MDYzYzU1NDAzMjZlYWNiNGUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-16T10:18:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-16T10:19:07Z"
      },
      "message": "Merge pull request #5636\n\n851296a [Qt] add option to allow self signed root certs (for testing) (Philip Kaufmann)",
      "tree": {
        "sha": "c4dd6c44f69932c0a01b50e7cd107d758fc1fd13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4dd6c44f69932c0a01b50e7cd107d758fc1fd13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a353ad4cdb085c23e4c157063c5540326eacb4e2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUuOWbAAoJEHSBCwEjRsmmZ90H/22K1e6NcFmppFw43jEc3api\n0wNzAsE7DYo/wCHNW7HU3ivqb1CtNUxKZvIJewuw/VEvGFYfuyxRn2ru9IhKQzUO\nSHjoOk/4GhPysJubu3c2ftJAHMLkXJkFN5hl7BZ8RccDmBtOgGx+bJgV9ztwTyRF\npa6gffxCVoIj1bhbZjSewUKlow2rCzOmYpkTIqPjyd7QWGVS34evoPAkU51NOH4X\n6ns1O73H0+86hnlvgWN6XKwiyqW/1dJvP0YbNxj3/JFQ+5jLus/2+iC09skpGlbP\nQ62TCJzjb645sADfiGIBTzt+ucOn8mytgueZWRkZnu6pa/GxwJaPPFQxHMjrSLU=\n=j/CG\n-----END PGP SIGNATURE-----",
        "payload": "tree c4dd6c44f69932c0a01b50e7cd107d758fc1fd13\nparent c29568a68624bc2987637d601879fbbcd5be3b9d\nparent 851296a72fc6930404abb94f4175acc1b1aab859\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421403525 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421403547 +0100\n\nMerge pull request #5636\n\n851296a [Qt] add option to allow self signed root certs (for testing) (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a353ad4cdb085c23e4c157063c5540326eacb4e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a353ad4cdb085c23e4c157063c5540326eacb4e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a353ad4cdb085c23e4c157063c5540326eacb4e2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c29568a68624bc2987637d601879fbbcd5be3b9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c29568a68624bc2987637d601879fbbcd5be3b9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c29568a68624bc2987637d601879fbbcd5be3b9d"
      },
      {
        "sha": "851296a72fc6930404abb94f4175acc1b1aab859",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/851296a72fc6930404abb94f4175acc1b1aab859",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/851296a72fc6930404abb94f4175acc1b1aab859"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 16,
      "deletions": 1
    },
    "files": [
      {
        "sha": "39171c89eb5fa2e04afde48ae74acd3d3279a1b7",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a353ad4cdb085c23e4c157063c5540326eacb4e2/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a353ad4cdb085c23e4c157063c5540326eacb4e2/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=a353ad4cdb085c23e4c157063c5540326eacb4e2",
        "patch": "@@ -9,6 +9,8 @@\n \n #include \"paymentrequestplus.h\"\n \n+#include \"util.h\"\n+\n #include <stdexcept>\n \n #include <openssl/x509.h>\n@@ -150,7 +152,13 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         int result = X509_verify_cert(store_ctx);\n         if (result != 1) {\n             int error = X509_STORE_CTX_get_error(store_ctx);\n-            throw SSLVerifyError(X509_verify_cert_error_string(error));\n+            // For testing payment requests, we allow self signed root certs!\n+            // This option is just shown in the UI options, if -help-debug is enabled.\n+            if (!(error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT && GetBoolArg(\"-allowselfsignedrootcertificates\", false))) {\n+                throw SSLVerifyError(X509_verify_cert_error_string(error));\n+            } else {\n+               qDebug() << \"PaymentRequestPlus::getMerchant: Allowing self signed root certificate, because -allowselfsignedrootcertificates is true.\";\n+            }\n         }\n         X509_NAME *certname = X509_get_subject_name(signing_cert);\n "
      },
      {
        "sha": "1e1583fb19051855b361b08c30ce54899a16eb24",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a353ad4cdb085c23e4c157063c5540326eacb4e2/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a353ad4cdb085c23e4c157063c5540326eacb4e2/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=a353ad4cdb085c23e4c157063c5540326eacb4e2",
        "patch": "@@ -12,6 +12,7 @@\n \n #include \"clientversion.h\"\n #include \"init.h\"\n+#include \"util.h\"\n \n #include <stdio.h>\n \n@@ -108,6 +109,12 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         cursor.movePosition(QTextCursor::NextRow);\n         cursor.insertText(tr(\"UI options\") + \":\", bold);\n         cursor.movePosition(QTextCursor::NextRow);\n+        if (GetBoolArg(\"-help-debug\", false)) {\n+            cursor.insertText(\"-allowselfsignedrootcertificates\");\n+            cursor.movePosition(QTextCursor::NextCell);\n+            cursor.insertText(tr(\"Allow self signed root certificates (default: 0)\"));\n+            cursor.movePosition(QTextCursor::NextCell);\n+        }\n         cursor.insertText(\"-choosedatadir\");\n         cursor.movePosition(QTextCursor::NextCell);\n         cursor.insertText(tr(\"Choose data directory on startup (default: 0)\"));"
      }
    ]
  },
  {
    "sha": "af95b17d0da91a9a1bd92bb1e0428c72ec52ebbb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjk1YjE3ZDBkYTkxYTlhMWJkOTJiYjFlMDQyOGM3MmVjNTJlYmJi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-09T10:39:45Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-16T10:47:41Z"
      },
      "message": "[Qt] resize oversized icons",
      "tree": {
        "sha": "990450d993a921a5c6dd95fbd6bfe7f757abed55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/990450d993a921a5c6dd95fbd6bfe7f757abed55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af95b17d0da91a9a1bd92bb1e0428c72ec52ebbb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af95b17d0da91a9a1bd92bb1e0428c72ec52ebbb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af95b17d0da91a9a1bd92bb1e0428c72ec52ebbb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af95b17d0da91a9a1bd92bb1e0428c72ec52ebbb/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a353ad4cdb085c23e4c157063c5540326eacb4e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a353ad4cdb085c23e4c157063c5540326eacb4e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a353ad4cdb085c23e4c157063c5540326eacb4e2"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "791822dc24777f308ff9e361ae6ca1d9c2ef8740",
        "filename": "src/qt/res/icons/add.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af95b17d0da91a9a1bd92bb1e0428c72ec52ebbb/src/qt/res/icons/add.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af95b17d0da91a9a1bd92bb1e0428c72ec52ebbb/src/qt/res/icons/add.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/add.png?ref=af95b17d0da91a9a1bd92bb1e0428c72ec52ebbb"
      },
      {
        "sha": "e94870163cfbc1da86766476bc0c89c1c7d66667",
        "filename": "src/qt/res/icons/filesave.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af95b17d0da91a9a1bd92bb1e0428c72ec52ebbb/src/qt/res/icons/filesave.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af95b17d0da91a9a1bd92bb1e0428c72ec52ebbb/src/qt/res/icons/filesave.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/filesave.png?ref=af95b17d0da91a9a1bd92bb1e0428c72ec52ebbb"
      }
    ]
  },
  {
    "sha": "652eb904df301efff271274624faba16b7539311",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTJlYjkwNGRmMzAxZWZmZjI3MTI3NDYyNGZhYmExNmI3NTM5MzEx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-09T10:46:30Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-16T10:47:41Z"
      },
      "message": "[Qt] change transaction table column width\n\nmake enought space for the new icons",
      "tree": {
        "sha": "c70b771f1645912d6a8b48e77c4f3545ddc59e80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c70b771f1645912d6a8b48e77c4f3545ddc59e80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/652eb904df301efff271274624faba16b7539311",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/652eb904df301efff271274624faba16b7539311",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/652eb904df301efff271274624faba16b7539311",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/652eb904df301efff271274624faba16b7539311/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af95b17d0da91a9a1bd92bb1e0428c72ec52ebbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af95b17d0da91a9a1bd92bb1e0428c72ec52ebbb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af95b17d0da91a9a1bd92bb1e0428c72ec52ebbb"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1442b4e85e99d1d716c6baa611991b68d701c3ac",
        "filename": "src/qt/res/icons/add.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/652eb904df301efff271274624faba16b7539311/src/qt/res/icons/add.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/652eb904df301efff271274624faba16b7539311/src/qt/res/icons/add.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/add.png?ref=652eb904df301efff271274624faba16b7539311"
      },
      {
        "sha": "779cca1d52043c8b92a65b13e55319053260e7ec",
        "filename": "src/qt/res/icons/filesave.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/652eb904df301efff271274624faba16b7539311/src/qt/res/icons/filesave.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/652eb904df301efff271274624faba16b7539311/src/qt/res/icons/filesave.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/filesave.png?ref=652eb904df301efff271274624faba16b7539311"
      },
      {
        "sha": "092d919042691cc5d50ef724a140aca2deff571f",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/652eb904df301efff271274624faba16b7539311/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/652eb904df301efff271274624faba16b7539311/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=652eb904df301efff271274624faba16b7539311",
        "patch": "@@ -49,10 +49,10 @@ class TransactionView : public QWidget\n     };\n \n     enum ColumnWidths {\n-        STATUS_COLUMN_WIDTH = 23,\n+        STATUS_COLUMN_WIDTH = 30,\n         WATCHONLY_COLUMN_WIDTH = 23,\n         DATE_COLUMN_WIDTH = 120,\n-        TYPE_COLUMN_WIDTH = 120,\n+        TYPE_COLUMN_WIDTH = 113,\n         AMOUNT_MINIMUM_COLUMN_WIDTH = 120,\n         MINIMUM_COLUMN_WIDTH = 23\n     };"
      }
    ]
  },
  {
    "sha": "9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmU1M2E4NWUwZTUwY2E4MmUzNjliN2QyOTQ4NWEwYTZmMGY4ZGJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-16T10:44:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-16T10:53:45Z"
      },
      "message": "Merge pull request #5632\n\n98c222b [Qt] optimize helpmessage dialog (Jonas Schnelli)",
      "tree": {
        "sha": "251042d2e35f823ae06abafc4aa61ef721c538ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/251042d2e35f823ae06abafc4aa61ef721c538ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUuO25AAoJEHSBCwEjRsmm6t8IALSHDo8ri6eJf/+WLEqGJGx5\nfMtppB3MsJg8E40iRqBjF6xfFjxEKvg1TNQMYLEO42gERlg04aaME+pqv+sdzCV6\nRlPwbVWagmU27saA0K4hUgzkYKRnVivSc34d+Ew4UdlfsFNP62rKmcV8/gRra9D4\nAx0TpfLGSzQI5864Mi3EvPXbTkGePWxqLLcx9GO9TAkKYAkPI0xuZCVw0U4TCiWk\n734CxeDuvZ4iOP9jdKjlb7q/+kMIHgjqBoxieKUHid7nHogsMHMALS9gEHqtFRI3\nC0N3f3rwv3QkrneXEAKLXAhJbGBEAHDFAPUt67P+tt6Bh8dL8S9XIQfhEsZ1uVg=\n=iObG\n-----END PGP SIGNATURE-----",
        "payload": "tree 251042d2e35f823ae06abafc4aa61ef721c538ef\nparent a353ad4cdb085c23e4c157063c5540326eacb4e2\nparent 98c222b5aa94543fce683b989356b0d8ad1f1d22\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421405046 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421405625 +0100\n\nMerge pull request #5632\n\n98c222b [Qt] optimize helpmessage dialog (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a353ad4cdb085c23e4c157063c5540326eacb4e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a353ad4cdb085c23e4c157063c5540326eacb4e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a353ad4cdb085c23e4c157063c5540326eacb4e2"
      },
      {
        "sha": "98c222b5aa94543fce683b989356b0d8ad1f1d22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98c222b5aa94543fce683b989356b0d8ad1f1d22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98c222b5aa94543fce683b989356b0d8ad1f1d22"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 5,
      "deletions": 35
    },
    "files": [
      {
        "sha": "31fe3a9f691d0fee2659ca6a334e5c6915619fd7",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
        "patch": "@@ -314,8 +314,7 @@ BITCOIN_QT_CPP += \\\n   qt/walletview.cpp\n endif\n \n-RES_IMAGES = \\\n-  qt/res/images/about.png\n+RES_IMAGES = \n \n RES_MOVIES = $(wildcard qt/res/movies/spinner-*.png)\n "
      },
      {
        "sha": "63af146fd02e8260cd67589e114c0599add60fed",
        "filename": "src/qt/bitcoin.qrc",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf/src/qt/bitcoin.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf/src/qt/bitcoin.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.qrc?ref=9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
        "patch": "@@ -46,9 +46,6 @@\n         <file alias=\"about_qt\">res/icons/about_qt.png</file>\n         <file alias=\"verify\">res/icons/verify.png</file>\n     </qresource>\n-    <qresource prefix=\"/images\">\n-        <file alias=\"about\">res/images/about.png</file>\n-    </qresource>\n     <qresource prefix=\"/movies\">\n         <file alias=\"spinner-000\">res/movies/spinner-000.png</file>\n         <file alias=\"spinner-001\">res/movies/spinner-001.png</file>"
      },
      {
        "sha": "37008f047e9cd3a80205aadb4678ce9f658381f6",
        "filename": "src/qt/forms/helpmessagedialog.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 28,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf/src/qt/forms/helpmessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf/src/qt/forms/helpmessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/helpmessagedialog.ui?ref=9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
        "patch": "@@ -6,32 +6,14 @@\n    <rect>\n     <x>0</x>\n     <y>0</y>\n-    <width>585</width>\n-    <height>225</height>\n+    <width>780</width>\n+    <height>400</height>\n    </rect>\n   </property>\n-  <property name=\"font\">\n-   <font>\n-    <pointsize>10</pointsize>\n-   </font>\n-  </property>\n   <property name=\"windowTitle\">\n    <string notr=\"true\">Bitcoin Core - Command-line options</string>\n   </property>\n   <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2\">\n-   <item>\n-    <widget class=\"QLabel\" name=\"graphic\">\n-     <property name=\"sizePolicy\">\n-      <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Ignored\">\n-       <horstretch>0</horstretch>\n-       <verstretch>0</verstretch>\n-      </sizepolicy>\n-     </property>\n-     <property name=\"pixmap\">\n-      <pixmap resource=\"../bitcoin.qrc\">:/images/about</pixmap>\n-     </property>\n-    </widget>\n-   </item>\n    <item>\n     <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n      <item>\n@@ -50,14 +32,6 @@\n         <bool>true</bool>\n        </property>\n        <widget class=\"QWidget\" name=\"scrollAreaWidgetContents\">\n-        <property name=\"geometry\">\n-         <rect>\n-          <x>0</x>\n-          <y>0</y>\n-          <width>447</width>\n-          <height>68</height>\n-         </rect>\n-        </property>\n         <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\">\n          <item>\n           <widget class=\"QLabel\" name=\"aboutMessage\">"
      },
      {
        "sha": "fdede6617264cbb3ffec888fc35679c192344aaf",
        "filename": "src/qt/res/images/about.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a353ad4cdb085c23e4c157063c5540326eacb4e2/src/qt/res/images/about.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a353ad4cdb085c23e4c157063c5540326eacb4e2/src/qt/res/images/about.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/images/about.png?ref=a353ad4cdb085c23e4c157063c5540326eacb4e2"
      },
      {
        "sha": "4ef42b927eec1f45435351617a9fc8d5de8b6d2e",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
        "patch": "@@ -74,8 +74,8 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         tf.setBorderStyle(QTextFrameFormat::BorderStyle_None);\n         tf.setCellPadding(2);\n         QVector<QTextLength> widths;\n-        widths << QTextLength(QTextLength::PercentageLength, 20);\n-        widths << QTextLength(QTextLength::PercentageLength, 80);\n+        widths << QTextLength(QTextLength::PercentageLength, 35);\n+        widths << QTextLength(QTextLength::PercentageLength, 65);\n         tf.setColumnWidthConstraints(widths);\n         QTextTable *table = cursor.insertTable(2, 2, tf);\n "
      }
    ]
  },
  {
    "sha": "7d2cb485116636595250fce4ea4eab16a877479b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDJjYjQ4NTExNjYzNjU5NTI1MGZjZTRlYTRlYWIxNmE4Nzc0Nzli",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-01-16T13:59:36Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-01-16T13:59:36Z"
      },
      "message": "Restore RPC HTTP keepalives to default.\n\nThis avoids a regression for issues like #334 where high speed\n repeated connections eventually run the HTTP client out of\n sockets because all of theirs end up in time_wait.\n\nMaybe the trade-off here is suboptimal, but if both choices will\n fail then we prefer fewer changes until the root cause is solved.",
      "tree": {
        "sha": "f11efc3600433245b3755dc3e874face70f8238c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f11efc3600433245b3755dc3e874face70f8238c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d2cb485116636595250fce4ea4eab16a877479b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d2cb485116636595250fce4ea4eab16a877479b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d2cb485116636595250fce4ea4eab16a877479b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d2cb485116636595250fce4ea4eab16a877479b/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b58d1746e8bd0ad6959698509a8b1ae43bf94b9c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d2cb485116636595250fce4ea4eab16a877479b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d2cb485116636595250fce4ea4eab16a877479b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7d2cb485116636595250fce4ea4eab16a877479b",
        "patch": "@@ -380,7 +380,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n     strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\") + \"\\n\";\n     strUsage += \"  -rpcthreads=<n>        \" + strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4) + \"\\n\";\n-    strUsage += \"  -rpckeepalive          \" + strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 0) + \"\\n\";\n+    strUsage += \"  -rpckeepalive          \" + strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1) + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n     strUsage += \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";"
      },
      {
        "sha": "cb87142902d4642045646eee74cdee770d4e1e95",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d2cb485116636595250fce4ea4eab16a877479b/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d2cb485116636595250fce4ea4eab16a877479b/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=7d2cb485116636595250fce4ea4eab16a877479b",
        "patch": "@@ -953,7 +953,7 @@ void ServiceConnection(AcceptedConnection *conn)\n         ReadHTTPMessage(conn->stream(), mapHeaders, strRequest, nProto, MAX_SIZE);\n \n         // HTTP Keep-Alive is false; close connection immediately\n-        if ((mapHeaders[\"connection\"] == \"close\") || (!GetBoolArg(\"-rpckeepalive\", false)))\n+        if ((mapHeaders[\"connection\"] == \"close\") || (!GetBoolArg(\"-rpckeepalive\", true)))\n             fRun = false;\n \n         // Process via JSON-RPC API"
      }
    ]
  },
  {
    "sha": "2d9b0b7f03a268e557c6dce1dfa29401b5c9178b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDliMGI3ZjAzYTI2OGU1NTdjNmRjZTFkZmEyOTQwMWI1YzkxNzhi",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-01-16T17:17:57Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-01-16T17:17:57Z"
      },
      "message": "Fix priority calculation in CreateTransaction\n\nMake this projection of priority in 1 block match the calculation in the low priority reject code.",
      "tree": {
        "sha": "760c4a41b8e948e64c0dc72643d3d2ab5f7b2bbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/760c4a41b8e948e64c0dc72643d3d2ab5f7b2bbb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d9b0b7f03a268e557c6dce1dfa29401b5c9178b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d9b0b7f03a268e557c6dce1dfa29401b5c9178b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d9b0b7f03a268e557c6dce1dfa29401b5c9178b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d9b0b7f03a268e557c6dce1dfa29401b5c9178b/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6c24faf61c88bba29486b0dae431143973567d2e",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d9b0b7f03a268e557c6dce1dfa29401b5c9178b/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d9b0b7f03a268e557c6dce1dfa29401b5c9178b/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=2d9b0b7f03a268e557c6dce1dfa29401b5c9178b",
        "patch": "@@ -1439,10 +1439,14 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                 BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n                 {\n                     CAmount nCredit = pcoin.first->vout[pcoin.second].nValue;\n-                    //The priority after the next block (depth+1) is used instead of the current,\n+                    //The coin age after the next block (depth+1) is used instead of the current,\n                     //reflecting an assumption the user would accept a bit more delay for\n                     //a chance at a free transaction.\n-                    dPriority += (double)nCredit * (pcoin.first->GetDepthInMainChain()+1);\n+                    //But mempool inputs might still be in the mempool, so their age stays 0\n+                    int age = pcoin.first->GetDepthInMainChain();\n+                    if (age != 0)\n+                        age += 1;\n+                    dPriority += (double)nCredit * age;\n                 }\n \n                 CAmount nChange = nValueIn - nValue - nFeeRet;"
      }
    ]
  },
  {
    "sha": "f5ad78b34af8f50e12fab63b331768b96ec2c779",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWFkNzhiMzRhZjhmNTBlMTJmYWI2M2IzMzE3NjhiOTZlYzJjNzc5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-16T21:03:48Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-16T21:11:01Z"
      },
      "message": "qt: fonts: allow SubstituteFonts to filter based on user's language\n\nSubstituteFonts() has been moved to after app identification so that QSettings\nare accessible.",
      "tree": {
        "sha": "8c05b12cd3cac1690c733406a5785dd9c387ff03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c05b12cd3cac1690c733406a5785dd9c387ff03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5ad78b34af8f50e12fab63b331768b96ec2c779",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ad78b34af8f50e12fab63b331768b96ec2c779",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5ad78b34af8f50e12fab63b331768b96ec2c779",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ad78b34af8f50e12fab63b331768b96ec2c779/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 19,
      "deletions": 12
    },
    "files": [
      {
        "sha": "73c684e4893fc0fd9180be544ecd1b4ad02d45f3",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad78b34af8f50e12fab63b331768b96ec2c779/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad78b34af8f50e12fab63b331768b96ec2c779/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f5ad78b34af8f50e12fab63b331768b96ec2c779",
        "patch": "@@ -89,10 +89,24 @@ static std::string Translate(const char* psz)\n     return QCoreApplication::translate(\"bitcoin-core\", psz).toStdString();\n }\n \n+static QString GetLangTerritory()\n+{\n+    QSettings settings;\n+    // Get desired locale (e.g. \"de_DE\")\n+    // 1) System default language\n+    QString lang_territory = QLocale::system().name();\n+    // 2) Language from QSettings\n+    QString lang_territory_qsettings = settings.value(\"language\", \"\").toString();\n+    if(!lang_territory_qsettings.isEmpty())\n+        lang_territory = lang_territory_qsettings;\n+    // 3) -lang command line argument\n+    lang_territory = QString::fromStdString(GetArg(\"-lang\", lang_territory.toStdString()));\n+    return lang_territory;\n+}\n+\n /** Set up translations */\n static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTranslator, QTranslator &translatorBase, QTranslator &translator)\n {\n-    QSettings settings;\n \n     // Remove old translators\n     QApplication::removeTranslator(&qtTranslatorBase);\n@@ -102,13 +116,7 @@ static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTrans\n \n     // Get desired locale (e.g. \"de_DE\")\n     // 1) System default language\n-    QString lang_territory = QLocale::system().name();\n-    // 2) Language from QSettings\n-    QString lang_territory_qsettings = settings.value(\"language\", \"\").toString();\n-    if(!lang_territory_qsettings.isEmpty())\n-        lang_territory = lang_territory_qsettings;\n-    // 3) -lang command line argument\n-    lang_territory = QString::fromStdString(GetArg(\"-lang\", lang_territory.toStdString()));\n+    QString lang_territory = GetLangTerritory();\n \n     // Convert to \"de\" only by truncating \"_DE\"\n     QString lang = lang_territory;\n@@ -498,8 +506,6 @@ int main(int argc, char *argv[])\n     Q_INIT_RESOURCE(bitcoin);\n     Q_INIT_RESOURCE(bitcoin_locale);\n \n-    GUIUtil::SubstituteFonts();\n-\n     BitcoinApplication app(argc, argv);\n #if QT_VERSION > 0x050100\n     // Generate high-dpi pixmaps\n@@ -521,6 +527,7 @@ int main(int argc, char *argv[])\n     QApplication::setOrganizationName(QAPP_ORG_NAME);\n     QApplication::setOrganizationDomain(QAPP_ORG_DOMAIN);\n     QApplication::setApplicationName(QAPP_APP_NAME_DEFAULT);\n+    GUIUtil::SubstituteFonts(GetLangTerritory());\n \n     /// 4. Initialization of translations, so that intro dialog is in user's language\n     // Now that QSettings are accessible, initialize translations"
      },
      {
        "sha": "b57025857e7b3a5390d6189be348a0fc84d03ecc",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad78b34af8f50e12fab63b331768b96ec2c779/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad78b34af8f50e12fab63b331768b96ec2c779/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=f5ad78b34af8f50e12fab63b331768b96ec2c779",
        "patch": "@@ -383,7 +383,7 @@ void openDebugLogfile()\n         QDesktopServices::openUrl(QUrl::fromLocalFile(boostPathToQString(pathDebug)));\n }\n \n-void SubstituteFonts()\n+void SubstituteFonts(const QString& language)\n {\n #if defined(Q_OS_MAC)\n // Background:"
      },
      {
        "sha": "bcbb540c37e4f20cc1dfe9f755b1b3e4bc510c02",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad78b34af8f50e12fab63b331768b96ec2c779/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad78b34af8f50e12fab63b331768b96ec2c779/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=f5ad78b34af8f50e12fab63b331768b96ec2c779",
        "patch": "@@ -107,7 +107,7 @@ namespace GUIUtil\n     void openDebugLogfile();\n \n     // Replace invalid default fonts with known good ones\n-    void SubstituteFonts();\n+    void SubstituteFonts(const QString& language);\n \n     /** Qt event filter that intercepts ToolTipChange events, and replaces the tooltip with a rich text\n       representation if needed. This assures that Qt can word-wrap long tooltip messages."
      }
    ]
  },
  {
    "sha": "52954e6efd373c14736237c4c79769bf00f5dfb8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Mjk1NGU2ZWZkMzczYzE0NzM2MjM3YzRjNzk3NjliZjAwZjVkZmI4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-14T20:26:40Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-17T08:31:27Z"
      },
      "message": "qt: fix broken unicode chars on osx 10.10\n\nThe default font changed again.\n\nThe real fix is to compile qt against a >= 10.8 sdk, but this is simple enough\nto backport to 0.10 to avoid having to do that there.\n\nNote: NSAppKitVersionNumber is a double and there's no official value for\nNSAppKitVersionNumber10_10. Since == isn't reliable for doubles, use Apple's\nguidelines for testing versions here:\nhttps://developer.apple.com/library/mac/releasenotes/AppKit/RN-AppKit/\n\nChinese and Japanese fonts have been hard-coded as well, otherwise they fail to\nshow up at all.",
      "tree": {
        "sha": "20e9b71b88bb85c2c223a17dcc83da5b688fe710",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20e9b71b88bb85c2c223a17dcc83da5b688fe710"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52954e6efd373c14736237c4c79769bf00f5dfb8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52954e6efd373c14736237c4c79769bf00f5dfb8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52954e6efd373c14736237c4c79769bf00f5dfb8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52954e6efd373c14736237c4c79769bf00f5dfb8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5ad78b34af8f50e12fab63b331768b96ec2c779",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ad78b34af8f50e12fab63b331768b96ec2c779",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5ad78b34af8f50e12fab63b331768b96ec2c779"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 21,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8ad9b30624b60267714efdeefe5189ad88de605a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52954e6efd373c14736237c4c79769bf00f5dfb8/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52954e6efd373c14736237c4c79769bf00f5dfb8/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=52954e6efd373c14736237c4c79769bf00f5dfb8",
        "patch": "@@ -67,6 +67,9 @@ static boost::filesystem::detail::utf8_codecvt_facet utf8;\n \n #if defined(Q_OS_MAC)\n extern double NSAppKitVersionNumber;\n+#if !defined(NSAppKitVersionNumber10_8)\n+#define NSAppKitVersionNumber10_8 1187\n+#endif\n #if !defined(NSAppKitVersionNumber10_9)\n #define NSAppKitVersionNumber10_9 1265\n #endif\n@@ -393,12 +396,28 @@ void SubstituteFonts(const QString& language)\n // If this fallback is not properly loaded, some characters may fail to\n // render correctly.\n //\n+// The same thing happened with 10.10. .Helvetica Neue DeskInterface is now default.\n+//\n // Solution: If building with the 10.7 SDK or lower and the user's platform\n // is 10.9 or higher at runtime, substitute the correct font. This needs to\n // happen before the QApplication is created.\n #if defined(MAC_OS_X_VERSION_MAX_ALLOWED) && MAC_OS_X_VERSION_MAX_ALLOWED < MAC_OS_X_VERSION_10_8\n-    if (floor(NSAppKitVersionNumber) >= NSAppKitVersionNumber10_9)\n-        QFont::insertSubstitution(\".Lucida Grande UI\", \"Lucida Grande\");\n+    if (floor(NSAppKitVersionNumber) > NSAppKitVersionNumber10_8)\n+    {\n+        if (floor(NSAppKitVersionNumber) <= NSAppKitVersionNumber10_9)\n+            /* On a 10.9 - 10.9.x system */\n+            QFont::insertSubstitution(\".Lucida Grande UI\", \"Lucida Grande\");\n+        else\n+        {\n+            /* 10.10 or later system */\n+            if (language == \"zh_CN\" || language == \"zh_TW\" || language == \"zh_HK\") // traditional or simplified Chinese\n+              QFont::insertSubstitution(\".Helvetica Neue DeskInterface\", \"Heiti SC\");\n+            else if (language == \"ja\") // Japanesee\n+              QFont::insertSubstitution(\".Helvetica Neue DeskInterface\", \"Songti SC\");\n+            else\n+              QFont::insertSubstitution(\".Helvetica Neue DeskInterface\", \"Lucida Grande\");\n+        }\n+    }\n #endif\n #endif\n }"
      }
    ]
  },
  {
    "sha": "73cd4edb4f1ff98c20549a609e96fa40834f5e73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2NkNGVkYjRmMWZmOThjMjA1NDlhNjA5ZTk2ZmE0MDgzNGY1ZTcz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-16T21:27:12Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-17T08:31:27Z"
      },
      "message": "qt: avoid hard-coding font names\n\nThey may not contain all necessary characters for a language",
      "tree": {
        "sha": "1f120418e2549434bdc419fd21fe1e2c0163486e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f120418e2549434bdc419fd21fe1e2c0163486e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73cd4edb4f1ff98c20549a609e96fa40834f5e73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73cd4edb4f1ff98c20549a609e96fa40834f5e73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73cd4edb4f1ff98c20549a609e96fa40834f5e73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73cd4edb4f1ff98c20549a609e96fa40834f5e73/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52954e6efd373c14736237c4c79769bf00f5dfb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52954e6efd373c14736237c4c79769bf00f5dfb8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52954e6efd373c14736237c4c79769bf00f5dfb8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e6a7fcaec5db2bfb4a06b2812f35bb9f5719deb9",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73cd4edb4f1ff98c20549a609e96fa40834f5e73/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73cd4edb4f1ff98c20549a609e96fa40834f5e73/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=73cd4edb4f1ff98c20549a609e96fa40834f5e73",
        "patch": "@@ -42,7 +42,7 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n     QString copyrightText   = QChar(0xA9)+QString(\" 2009-%1 \").arg(COPYRIGHT_YEAR) + QString(tr(\"The Bitcoin Core developers\"));\n     QString titleAddText    = networkStyle->getTitleAddText();\n \n-    QString font            = \"Arial\";\n+    QString font            = QApplication::font().toString();\n \n     // create a bitmap according to device pixelratio\n     QSize splashSize(480*devicePixelRatio,320*devicePixelRatio);"
      }
    ]
  },
  {
    "sha": "1a25a7edf82706c3152e2d978d320ec465a34de1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTI1YTdlZGY4MjcwNmMzMTUyZTJkOTc4ZDMyMGVjNDY1YTM0ZGUx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-17T15:34:27Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-01-17T16:56:55Z"
      },
      "message": "[QA] fix httpbasic keep-alive test",
      "tree": {
        "sha": "6bcd8ca74125377e42f38d11044cb784c9f15a44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bcd8ca74125377e42f38d11044cb784c9f15a44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a25a7edf82706c3152e2d978d320ec465a34de1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a25a7edf82706c3152e2d978d320ec465a34de1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a25a7edf82706c3152e2d978d320ec465a34de1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a25a7edf82706c3152e2d978d320ec465a34de1/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d2cb485116636595250fce4ea4eab16a877479b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d2cb485116636595250fce4ea4eab16a877479b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d2cb485116636595250fce4ea4eab16a877479b"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "24533741e55375d53625ccf897adbf5d31dd536e",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a25a7edf82706c3152e2d978d320ec465a34de1/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a25a7edf82706c3152e2d978d320ec465a34de1/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=1a25a7edf82706c3152e2d978d320ec465a34de1",
        "patch": "@@ -35,13 +35,13 @@ def run_test(self):\n         \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         \n         #send 2nd request without closing connection\n-        conn.request('GET', '/', '{\"method\": \"getchaintips\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n@@ -52,13 +52,13 @@ def run_test(self):\n         \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         \n         #send 2nd request without closing connection\n-        conn.request('GET', '/', '{\"method\": \"getchaintips\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n@@ -69,7 +69,7 @@ def run_test(self):\n         \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, False) #now the connection must be closed after the response        \n@@ -81,7 +81,7 @@ def run_test(self):\n                 \n         conn = httplib.HTTPConnection(urlNode1.hostname, urlNode1.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, False) #connection must be closed because keep-alive was set to false\n@@ -93,10 +93,10 @@ def run_test(self):\n                 \n         conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, False) #connection must be closed because bitcoind should use keep-alive by default\n+        assert_equal(conn.sock!=None, True) #connection must be closed because bitcoind should use keep-alive by default\n         \n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      }
    ]
  },
  {
    "sha": "a0abff2755d17b5ff36f977a894a8128c75b4445",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGFiZmYyNzU1ZDE3YjVmZjM2Zjk3N2E4OTRhODEyOGM3NWI0NDQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-19T11:12:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-19T11:12:25Z"
      },
      "message": "Merge pull request #5674\n\n1a25a7e [QA] fix httpbasic keep-alive test (Jonas Schnelli)\n7d2cb48 Restore RPC HTTP keepalives to default. (Gregory Maxwell)",
      "tree": {
        "sha": "6bcd8ca74125377e42f38d11044cb784c9f15a44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bcd8ca74125377e42f38d11044cb784c9f15a44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0abff2755d17b5ff36f977a894a8128c75b4445",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUvOaZAAoJEHSBCwEjRsmmassH/jkD5LcpbLz6Ye0Bq+rWVfhW\ngqnXlVK4AI380Y+9ZadKUu7lE0MSvUxSvcI/cL8O1lHQBe22XxkcshbH38ccRz3R\n4z1x0xbhSmd+bEjACZM19lhxoUH16nk/+GarTm8EzKwhCtXSs0zfXU3Gznyoz2bA\n4sIZN7bntf15M1ZCitmQjc9GkmJqHHIBIbnmPgtsQjQe2xKn8RInuHW78vl98BKH\nemXCsadOphaq37O68YXAps+R2OFtowXGO6ENM0L3vhiBGsUBAKeV5T/WIGZDmES5\nhg63VkleYeucMT3pWXhmgoWSmtwZfwNWgYaiDENV4PhlQQPYGw3f5mZKZ8EAYLk=\n=OSDm\n-----END PGP SIGNATURE-----",
        "payload": "tree 6bcd8ca74125377e42f38d11044cb784c9f15a44\nparent 9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf\nparent 1a25a7edf82706c3152e2d978d320ec465a34de1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421665932 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421665945 +0100\n\nMerge pull request #5674\n\n1a25a7e [QA] fix httpbasic keep-alive test (Jonas Schnelli)\n7d2cb48 Restore RPC HTTP keepalives to default. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0abff2755d17b5ff36f977a894a8128c75b4445",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0abff2755d17b5ff36f977a894a8128c75b4445",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0abff2755d17b5ff36f977a894a8128c75b4445/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fe53a85e0e50ca82e369b7d29485a0a6f0f8dbf"
      },
      {
        "sha": "1a25a7edf82706c3152e2d978d320ec465a34de1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a25a7edf82706c3152e2d978d320ec465a34de1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a25a7edf82706c3152e2d978d320ec465a34de1"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "24533741e55375d53625ccf897adbf5d31dd536e",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0abff2755d17b5ff36f977a894a8128c75b4445/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0abff2755d17b5ff36f977a894a8128c75b4445/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=a0abff2755d17b5ff36f977a894a8128c75b4445",
        "patch": "@@ -35,13 +35,13 @@ def run_test(self):\n         \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         \n         #send 2nd request without closing connection\n-        conn.request('GET', '/', '{\"method\": \"getchaintips\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n@@ -52,13 +52,13 @@ def run_test(self):\n         \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         \n         #send 2nd request without closing connection\n-        conn.request('GET', '/', '{\"method\": \"getchaintips\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n@@ -69,7 +69,7 @@ def run_test(self):\n         \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, False) #now the connection must be closed after the response        \n@@ -81,7 +81,7 @@ def run_test(self):\n                 \n         conn = httplib.HTTPConnection(urlNode1.hostname, urlNode1.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, False) #connection must be closed because keep-alive was set to false\n@@ -93,10 +93,10 @@ def run_test(self):\n                 \n         conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n-        conn.request('GET', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, False) #connection must be closed because bitcoind should use keep-alive by default\n+        assert_equal(conn.sock!=None, True) #connection must be closed because bitcoind should use keep-alive by default\n         \n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      },
      {
        "sha": "b58d1746e8bd0ad6959698509a8b1ae43bf94b9c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0abff2755d17b5ff36f977a894a8128c75b4445/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0abff2755d17b5ff36f977a894a8128c75b4445/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a0abff2755d17b5ff36f977a894a8128c75b4445",
        "patch": "@@ -380,7 +380,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n     strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\") + \"\\n\";\n     strUsage += \"  -rpcthreads=<n>        \" + strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4) + \"\\n\";\n-    strUsage += \"  -rpckeepalive          \" + strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 0) + \"\\n\";\n+    strUsage += \"  -rpckeepalive          \" + strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1) + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n     strUsage += \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";"
      },
      {
        "sha": "cb87142902d4642045646eee74cdee770d4e1e95",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0abff2755d17b5ff36f977a894a8128c75b4445/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0abff2755d17b5ff36f977a894a8128c75b4445/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a0abff2755d17b5ff36f977a894a8128c75b4445",
        "patch": "@@ -953,7 +953,7 @@ void ServiceConnection(AcceptedConnection *conn)\n         ReadHTTPMessage(conn->stream(), mapHeaders, strRequest, nProto, MAX_SIZE);\n \n         // HTTP Keep-Alive is false; close connection immediately\n-        if ((mapHeaders[\"connection\"] == \"close\") || (!GetBoolArg(\"-rpckeepalive\", false)))\n+        if ((mapHeaders[\"connection\"] == \"close\") || (!GetBoolArg(\"-rpckeepalive\", true)))\n             fRun = false;\n \n         // Process via JSON-RPC API"
      }
    ]
  },
  {
    "sha": "e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWFlY2FlMzNhNjcyYjAwZmFjMzFiNmMzY2M0YzJmNmE4MzNlYmZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-19T11:21:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-19T11:31:54Z"
      },
      "message": "Merge pull request #5671\n\n73cd4ed qt: avoid hard-coding font names (Cory Fields)\n52954e6 qt: fix broken unicode chars on osx 10.10 (Cory Fields)\nf5ad78b qt: fonts: allow SubstituteFonts to filter based on user's language (Cory Fields)",
      "tree": {
        "sha": "ad29e17291e6e138d5f68bfa37550c2b0e3476e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad29e17291e6e138d5f68bfa37550c2b0e3476e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUvOsqAAoJEHSBCwEjRsmmNJYH+wc3YdMqDNb6rSJB781tL7b+\n8gs8mNgzLM1XRhk25FoXYnkxQ5cfIcwCL1wkIYT7l203y9c0OrenRXcvgH8yGM46\nMhebxKK3dKBcEbEtZUmytsJPLwvjql6LMrfgsiD5qThiUKPOnKjZb24poQxvaDDJ\nZ7fC9LG8ydlJH+nRqoto0JGZylsiljZwWyI3ZB5qtcusTZPCaU7/OKFlw29IEuNk\nc2ewa6tFaJh7wOLj1XDVVQXPTiku5+/rYKKn6F9IMUNu5bGvVhl90p7/nG+k7m50\nYHS7SBFcZjYoXA6ysLnByegqtAqsckQSHCESFDFejUhfGFq33RrntUsBdmXuCg0=\n=AYp/\n-----END PGP SIGNATURE-----",
        "payload": "tree ad29e17291e6e138d5f68bfa37550c2b0e3476e5\nparent a0abff2755d17b5ff36f977a894a8128c75b4445\nparent 73cd4edb4f1ff98c20549a609e96fa40834f5e73\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421666477 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421667114 +0100\n\nMerge pull request #5671\n\n73cd4ed qt: avoid hard-coding font names (Cory Fields)\n52954e6 qt: fix broken unicode chars on osx 10.10 (Cory Fields)\nf5ad78b qt: fonts: allow SubstituteFonts to filter based on user's language (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0abff2755d17b5ff36f977a894a8128c75b4445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0abff2755d17b5ff36f977a894a8128c75b4445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0abff2755d17b5ff36f977a894a8128c75b4445"
      },
      {
        "sha": "73cd4edb4f1ff98c20549a609e96fa40834f5e73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73cd4edb4f1ff98c20549a609e96fa40834f5e73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73cd4edb4f1ff98c20549a609e96fa40834f5e73"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 41,
      "deletions": 15
    },
    "files": [
      {
        "sha": "73c684e4893fc0fd9180be544ecd1b4ad02d45f3",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "patch": "@@ -89,10 +89,24 @@ static std::string Translate(const char* psz)\n     return QCoreApplication::translate(\"bitcoin-core\", psz).toStdString();\n }\n \n+static QString GetLangTerritory()\n+{\n+    QSettings settings;\n+    // Get desired locale (e.g. \"de_DE\")\n+    // 1) System default language\n+    QString lang_territory = QLocale::system().name();\n+    // 2) Language from QSettings\n+    QString lang_territory_qsettings = settings.value(\"language\", \"\").toString();\n+    if(!lang_territory_qsettings.isEmpty())\n+        lang_territory = lang_territory_qsettings;\n+    // 3) -lang command line argument\n+    lang_territory = QString::fromStdString(GetArg(\"-lang\", lang_territory.toStdString()));\n+    return lang_territory;\n+}\n+\n /** Set up translations */\n static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTranslator, QTranslator &translatorBase, QTranslator &translator)\n {\n-    QSettings settings;\n \n     // Remove old translators\n     QApplication::removeTranslator(&qtTranslatorBase);\n@@ -102,13 +116,7 @@ static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTrans\n \n     // Get desired locale (e.g. \"de_DE\")\n     // 1) System default language\n-    QString lang_territory = QLocale::system().name();\n-    // 2) Language from QSettings\n-    QString lang_territory_qsettings = settings.value(\"language\", \"\").toString();\n-    if(!lang_territory_qsettings.isEmpty())\n-        lang_territory = lang_territory_qsettings;\n-    // 3) -lang command line argument\n-    lang_territory = QString::fromStdString(GetArg(\"-lang\", lang_territory.toStdString()));\n+    QString lang_territory = GetLangTerritory();\n \n     // Convert to \"de\" only by truncating \"_DE\"\n     QString lang = lang_territory;\n@@ -498,8 +506,6 @@ int main(int argc, char *argv[])\n     Q_INIT_RESOURCE(bitcoin);\n     Q_INIT_RESOURCE(bitcoin_locale);\n \n-    GUIUtil::SubstituteFonts();\n-\n     BitcoinApplication app(argc, argv);\n #if QT_VERSION > 0x050100\n     // Generate high-dpi pixmaps\n@@ -521,6 +527,7 @@ int main(int argc, char *argv[])\n     QApplication::setOrganizationName(QAPP_ORG_NAME);\n     QApplication::setOrganizationDomain(QAPP_ORG_DOMAIN);\n     QApplication::setApplicationName(QAPP_APP_NAME_DEFAULT);\n+    GUIUtil::SubstituteFonts(GetLangTerritory());\n \n     /// 4. Initialization of translations, so that intro dialog is in user's language\n     // Now that QSettings are accessible, initialize translations"
      },
      {
        "sha": "8ad9b30624b60267714efdeefe5189ad88de605a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 3,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "patch": "@@ -67,6 +67,9 @@ static boost::filesystem::detail::utf8_codecvt_facet utf8;\n \n #if defined(Q_OS_MAC)\n extern double NSAppKitVersionNumber;\n+#if !defined(NSAppKitVersionNumber10_8)\n+#define NSAppKitVersionNumber10_8 1187\n+#endif\n #if !defined(NSAppKitVersionNumber10_9)\n #define NSAppKitVersionNumber10_9 1265\n #endif\n@@ -383,7 +386,7 @@ void openDebugLogfile()\n         QDesktopServices::openUrl(QUrl::fromLocalFile(boostPathToQString(pathDebug)));\n }\n \n-void SubstituteFonts()\n+void SubstituteFonts(const QString& language)\n {\n #if defined(Q_OS_MAC)\n // Background:\n@@ -393,12 +396,28 @@ void SubstituteFonts()\n // If this fallback is not properly loaded, some characters may fail to\n // render correctly.\n //\n+// The same thing happened with 10.10. .Helvetica Neue DeskInterface is now default.\n+//\n // Solution: If building with the 10.7 SDK or lower and the user's platform\n // is 10.9 or higher at runtime, substitute the correct font. This needs to\n // happen before the QApplication is created.\n #if defined(MAC_OS_X_VERSION_MAX_ALLOWED) && MAC_OS_X_VERSION_MAX_ALLOWED < MAC_OS_X_VERSION_10_8\n-    if (floor(NSAppKitVersionNumber) >= NSAppKitVersionNumber10_9)\n-        QFont::insertSubstitution(\".Lucida Grande UI\", \"Lucida Grande\");\n+    if (floor(NSAppKitVersionNumber) > NSAppKitVersionNumber10_8)\n+    {\n+        if (floor(NSAppKitVersionNumber) <= NSAppKitVersionNumber10_9)\n+            /* On a 10.9 - 10.9.x system */\n+            QFont::insertSubstitution(\".Lucida Grande UI\", \"Lucida Grande\");\n+        else\n+        {\n+            /* 10.10 or later system */\n+            if (language == \"zh_CN\" || language == \"zh_TW\" || language == \"zh_HK\") // traditional or simplified Chinese\n+              QFont::insertSubstitution(\".Helvetica Neue DeskInterface\", \"Heiti SC\");\n+            else if (language == \"ja\") // Japanesee\n+              QFont::insertSubstitution(\".Helvetica Neue DeskInterface\", \"Songti SC\");\n+            else\n+              QFont::insertSubstitution(\".Helvetica Neue DeskInterface\", \"Lucida Grande\");\n+        }\n+    }\n #endif\n #endif\n }"
      },
      {
        "sha": "bcbb540c37e4f20cc1dfe9f755b1b3e4bc510c02",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "patch": "@@ -107,7 +107,7 @@ namespace GUIUtil\n     void openDebugLogfile();\n \n     // Replace invalid default fonts with known good ones\n-    void SubstituteFonts();\n+    void SubstituteFonts(const QString& language);\n \n     /** Qt event filter that intercepts ToolTipChange events, and replaces the tooltip with a rich text\n       representation if needed. This assures that Qt can word-wrap long tooltip messages."
      },
      {
        "sha": "e6a7fcaec5db2bfb4a06b2812f35bb9f5719deb9",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "patch": "@@ -42,7 +42,7 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n     QString copyrightText   = QChar(0xA9)+QString(\" 2009-%1 \").arg(COPYRIGHT_YEAR) + QString(tr(\"The Bitcoin Core developers\"));\n     QString titleAddText    = networkStyle->getTitleAddText();\n \n-    QString font            = \"Arial\";\n+    QString font            = QApplication::font().toString();\n \n     // create a bitmap according to device pixelratio\n     QSize splashSize(480*devicePixelRatio,320*devicePixelRatio);"
      }
    ]
  },
  {
    "sha": "28ee7e8b8c658bab4a5e13a13254950e226453a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGVlN2U4YjhjNjU4YmFiNGE1ZTEzYTEzMjU0OTUwZTIyNjQ1M2E3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-19T14:33:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-19T14:37:48Z"
      },
      "message": "Get rid of DetectShutdownThread\n\nThe main thread spends time waiting for the DetectShutdownThread.\nSo why not just run this waiting loop function in the main thread?\n\nOne thread-stack less saves 4MB of virtual memory on 32-bit, and 8MB on\n64-bit.",
      "tree": {
        "sha": "2f2af0781de370ce41c05455d2a987e6038d3d76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f2af0781de370ce41c05455d2a987e6038d3d76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28ee7e8b8c658bab4a5e13a13254950e226453a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28ee7e8b8c658bab4a5e13a13254950e226453a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28ee7e8b8c658bab4a5e13a13254950e226453a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28ee7e8b8c658bab4a5e13a13254950e226453a7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 3,
      "deletions": 13
    },
    "files": [
      {
        "sha": "a0a96c2dfa61750d9c8764852a11591940b10953",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28ee7e8b8c658bab4a5e13a13254950e226453a7/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28ee7e8b8c658bab4a5e13a13254950e226453a7/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=28ee7e8b8c658bab4a5e13a13254950e226453a7",
        "patch": "@@ -33,7 +33,7 @@\n \n static bool fDaemon;\n \n-void DetectShutdownThread(boost::thread_group* threadGroup)\n+void WaitForShutdown(boost::thread_group* threadGroup)\n {\n     bool fShutdown = ShutdownRequested();\n     // Tell the main threads to shutdown.\n@@ -56,7 +56,6 @@ void DetectShutdownThread(boost::thread_group* threadGroup)\n bool AppInit(int argc, char* argv[])\n {\n     boost::thread_group threadGroup;\n-    boost::thread* detectShutdownThread = NULL;\n \n     bool fRet = false;\n \n@@ -144,7 +143,6 @@ bool AppInit(int argc, char* argv[])\n #endif\n         SoftSetBoolArg(\"-server\", true);\n \n-        detectShutdownThread = new boost::thread(boost::bind(&DetectShutdownThread, &threadGroup));\n         fRet = AppInit2(threadGroup);\n     }\n     catch (const std::exception& e) {\n@@ -155,20 +153,12 @@ bool AppInit(int argc, char* argv[])\n \n     if (!fRet)\n     {\n-        if (detectShutdownThread)\n-            detectShutdownThread->interrupt();\n-\n         threadGroup.interrupt_all();\n         // threadGroup.join_all(); was left out intentionally here, because we didn't re-test all of\n         // the startup-failure cases to make sure they don't result in a hang due to some\n         // thread-blocking-waiting-for-another-thread-during-startup case\n-    }\n-\n-    if (detectShutdownThread)\n-    {\n-        detectShutdownThread->join();\n-        delete detectShutdownThread;\n-        detectShutdownThread = NULL;\n+    } else {\n+        WaitForShutdown(&threadGroup);\n     }\n     Shutdown();\n "
      }
    ]
  },
  {
    "sha": "f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDE3MmJmOTFlZjUyMWEwMTU1Y2YxZjBhZTlmZGUxYWIwMjE1N2Iz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-20T05:20:44Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-20T06:49:20Z"
      },
      "message": "osx: bump build sdk to 10.9",
      "tree": {
        "sha": "f6a53c9a6c0cbd63d78bc4db095fe807891b0fb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6a53c9a6c0cbd63d78bc4db095fe807891b0fb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 13,
      "deletions": 12
    },
    "files": [
      {
        "sha": "3c995be9a53522dae22ae9eb2bfb5b03c6a7b86d",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
        "patch": "@@ -33,7 +33,7 @@ matrix:\n     - compiler: \": 32-bit + dash\"\n       env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Cross-Mac\"\n-      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.7 GOAL=\"deploy\"\n+      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.9 GOAL=\"deploy\"\n     - compiler: \": Win64\"\n       env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui\" MAKEJOBS=\"-j2\"\n     - compiler: \": Win32\""
      },
      {
        "sha": "3ca42248d4e303e50cc82b18a05067212cfadb8a",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
        "patch": "@@ -23,7 +23,7 @@ remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files:\n-- \"MacOSX10.7.sdk.tar.gz\"\n+- \"MacOSX10.9.sdk.tar.gz\"\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin11\"\n@@ -72,7 +72,7 @@ script: |\n   BASEPREFIX=`pwd`/depends\n \n   mkdir -p ${BASEPREFIX}/SDKs\n-  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.7.sdk.tar.gz\n+  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.9.sdk.tar.gz\n \n   # Build dependencies for each host\n   for i in $HOSTS; do"
      },
      {
        "sha": "2958dc50cc8dc2995bfe81a3ab67050a63488001",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
        "patch": "@@ -1,5 +1,5 @@\n-OSX_MIN_VERSION=10.6\n-OSX_SDK_VERSION=10.7\n+OSX_MIN_VERSION=10.7\n+OSX_SDK_VERSION=10.9\n OSX_SDK=$(SDK_PATH)/MacOSX$(OSX_SDK_VERSION).sdk\n LD64_VERSION=241.9\n darwin_CC=clang -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION)"
      },
      {
        "sha": "6c0c21c190bcd50703ecb741e51ec61d173e5b23",
        "filename": "doc/README_osx.txt",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/doc/README_osx.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/doc/README_osx.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.txt?ref=f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
        "patch": "@@ -29,14 +29,15 @@ originally done in toolchain4.\n \n To complicate things further, all builds must target an Apple SDK. These SDKs\n are free to download, but not redistributable.\n-To obtain it, register for a developer account, then download xcode4630916281a.dmg:\n-https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_4.6.3/xcode4630916281a.dmg\n+To obtain it, register for a developer account, then download the XCode 6.1.1 dmg:\n+https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n+\n This file is several gigabytes in size, but only a single directory inside is\n-needed: Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk\n+needed: Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk\n \n Unfortunately, the usual linux tools (7zip, hpmount, loopback mount) are incapable of opening this file.\n To create a tarball suitable for gitian input, mount the dmg in OSX, then create it with:\n-  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.7.sdk.tar.gz MacOSX10.7.sdk\n+  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n \n \n The gitian descriptors build 2 sets of files: Linux tools, then Apple binaries"
      },
      {
        "sha": "363465d827ec1af713b70420cd6bdf26c94052d2",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
        "patch": "@@ -44,11 +44,11 @@ Release Process\n \n  Register and download the Apple SDK: (see OSX Readme for details)\n  \n- https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_4.6.3/xcode4630916281a.dmg\n+ https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n  \n- Using a Mac, create a tarball for the 10.7 SDK and copy it to the inputs directory:\n+ Using a Mac, create a tarball for the 10.9 SDK and copy it to the inputs directory:\n  \n-\ttar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.7.sdk.tar.gz MacOSX10.7.sdk\n+\ttar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n \n ###Optional: Seed the Gitian sources cache\n "
      }
    ]
  },
  {
    "sha": "88a797320ad0234c71e25e3aeffb3fb95563e1de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGE3OTczMjBhZDAyMzRjNzFlMjVlM2FlZmZiM2ZiOTU1NjNlMWRl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-20T00:08:05Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-20T08:32:54Z"
      },
      "message": "osx packaging: move background image to .background to match gitian builds\n\nAlso increase temp dmg filesize to account for a bigger background image",
      "tree": {
        "sha": "4e78ab69ce090f9352bf0949bbde4d15c98b216e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e78ab69ce090f9352bf0949bbde4d15c98b216e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88a797320ad0234c71e25e3aeffb3fb95563e1de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88a797320ad0234c71e25e3aeffb3fb95563e1de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88a797320ad0234c71e25e3aeffb3fb95563e1de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88a797320ad0234c71e25e3aeffb3fb95563e1de/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0eb6b2c84ddf51d5832564f9b7f5b86c1a95f1b3",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88a797320ad0234c71e25e3aeffb3fb95563e1de/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88a797320ad0234c71e25e3aeffb3fb95563e1de/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=88a797320ad0234c71e25e3aeffb3fb95563e1de",
        "patch": "@@ -767,7 +767,7 @@ if config.dmg is not None:\n         for path, dirs, files in os.walk(\"dist\"):\n             for file in files:\n                 size += os.path.getsize(os.path.join(path, file))\n-        size += int(size * 0.1)\n+        size += int(size * 0.15)\n         \n         if verbose >= 3:\n             print \"Creating temp image for modification...\"\n@@ -791,7 +791,8 @@ if config.dmg is not None:\n             print \"+ Applying fancy settings +\"\n         \n         if fancy.has_key(\"background_picture\"):\n-            bg_path = os.path.join(disk_root, os.path.basename(fancy[\"background_picture\"]))\n+            bg_path = os.path.join(disk_root, \".background\", os.path.basename(fancy[\"background_picture\"]))\n+            os.mkdir(os.path.dirname(bg_path))\n             if verbose >= 3:\n                 print fancy[\"background_picture\"], \"->\", bg_path\n             shutil.copy2(fancy[\"background_picture\"], bg_path)\n@@ -849,8 +850,8 @@ if config.dmg is not None:\n         if bg_path is not None:\n             # Set background file, then call SetFile to make it invisible.\n             # (note: making it invisible first makes set background picture fail)\n-            bgscript = Template(\"\"\"set background picture of theViewOptions to file \"$bgpic\"\n-                   do shell script \"SetFile -a V /Volumes/$disk/$bgpic\" \"\"\")\n+            bgscript = Template(\"\"\"set background picture of theViewOptions to file \".background:$bgpic\"\n+                   do shell script \"SetFile -a V /Volumes/$disk/.background/$bgpic\" \"\"\")\n             params[\"background_commands\"] = bgscript.substitute({\"bgpic\" : os.path.basename(bg_path), \"disk\" : params[\"disk\"]})\n \n         s = appscript.substitute(params)"
      }
    ]
  },
  {
    "sha": "997cab78cb47ac52973c734031f69a2f74fa257b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTdjYWI3OGNiNDdhYzUyOTczYzczNDAzMWY2OWEyZjc0ZmEyNTdi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-20T00:10:44Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-20T08:32:54Z"
      },
      "message": "osx packaging: switch background image to background.tiff\n\nAlso do a bit of cleanup:\n - Make the background name a variable so it's easier to change\n - Add proper make dependencies",
      "tree": {
        "sha": "15e73b2d5fedb3a8bedf3c1cadc7a7ad0e3f1286",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15e73b2d5fedb3a8bedf3c1cadc7a7ad0e3f1286"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/997cab78cb47ac52973c734031f69a2f74fa257b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/997cab78cb47ac52973c734031f69a2f74fa257b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/997cab78cb47ac52973c734031f69a2f74fa257b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/997cab78cb47ac52973c734031f69a2f74fa257b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88a797320ad0234c71e25e3aeffb3fb95563e1de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88a797320ad0234c71e25e3aeffb3fb95563e1de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88a797320ad0234c71e25e3aeffb3fb95563e1de"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c59648fd02d46db7fa15fbf256e1281a3558b2a3",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/997cab78cb47ac52973c734031f69a2f74fa257b/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/997cab78cb47ac52973c734031f69a2f74fa257b/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=997cab78cb47ac52973c734031f69a2f74fa257b",
        "patch": "@@ -16,6 +16,7 @@ BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win$(WINDOWS_BITS)-setup$(EX\n \n OSX_APP=Bitcoin-Qt.app\n OSX_DMG=Bitcoin-Qt.dmg\n+OSX_BACKGROUND_IMAGE=background.tiff\n OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n@@ -30,7 +31,7 @@ WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n   $(top_srcdir)/doc/README_windows.txt\n \n OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n-  $(top_srcdir)/contrib/macdeploy/background.png \\\n+  $(top_srcdir)/contrib/macdeploy/$(OSX_BACKGROUND_IMAGE) \\\n   $(top_srcdir)/contrib/macdeploy/DS_Store \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-apply.sh \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-create.sh\n@@ -95,7 +96,7 @@ $(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING)\n deploydir: $(OSX_DMG)\n else\n APP_DIST_DIR=$(top_builddir)/dist\n-APP_DIST_EXTRAS=$(APP_DIST_DIR)/.background/background.png $(APP_DIST_DIR)/.DS_Store $(APP_DIST_DIR)/Applications\n+APP_DIST_EXTRAS=$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE) $(APP_DIST_DIR)/.DS_Store $(APP_DIST_DIR)/Applications\n \n $(APP_DIST_DIR)/Applications:\n \t@rm -f $@\n@@ -106,11 +107,11 @@ $(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt\n $(OSX_DMG): $(APP_DIST_EXTRAS)\n \t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"Bitcoin-Qt\" -no-pad -r -apple -o $@ dist\n \n-$(APP_DIST_DIR)/.background/background.png:\n+$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_IMAGE)\n \t$(MKDIR_P) $(@D)\n-\t$(INSTALL) $(top_srcdir)/contrib/macdeploy/background.png $@\n-$(APP_DIST_DIR)/.DS_Store:\n-\t$(INSTALL) $(top_srcdir)/contrib/macdeploy/DS_Store $@\n+\t$(INSTALL) $< $@\n+$(APP_DIST_DIR)/.DS_Store: contrib/macdeploy/DS_Store\n+\t$(INSTALL) $< $@\n \n $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n \tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -add-qt-tr $(OSX_QT_TRANSLATIONS) -verbose 2"
      }
    ]
  },
  {
    "sha": "48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGJlYmNjYTc5ZjMxNzkzZTZjYTVhYjlhMTc4OGNjM2ZhM2NhNTlk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-20T00:13:55Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-20T08:32:54Z"
      },
      "message": "osx packaging: update DS_Store after background changes",
      "tree": {
        "sha": "d1640bb7c3be2e0f4df60f54c674e0db40978268",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1640bb7c3be2e0f4df60f54c674e0db40978268"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "997cab78cb47ac52973c734031f69a2f74fa257b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/997cab78cb47ac52973c734031f69a2f74fa257b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/997cab78cb47ac52973c734031f69a2f74fa257b"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "099960712af26791175d9f0cdd3d52c251ea9ee4",
        "filename": "contrib/macdeploy/DS_Store",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d/contrib/macdeploy/DS_Store",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d/contrib/macdeploy/DS_Store",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/DS_Store?ref=48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d"
      }
    ]
  },
  {
    "sha": "95ef87c75ee879181c71bcd1933d8cc01f9d0fa3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWVmODdjNzVlZTg3OTE4MWM3MWJjZDE5MzNkOGNjMDFmOWQwZmEz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-19T21:02:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-20T08:33:38Z"
      },
      "message": "add new osx dmg background picture",
      "tree": {
        "sha": "8f6bc6d1ef0ea93520c450de167248ff0833c223",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f6bc6d1ef0ea93520c450de167248ff0833c223"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48bebcca79f31793e6ca5ab9a1788cc3fa3ca59d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f88a2ae74bdb33afc2806b6403ea8c0191b096ca",
        "filename": "contrib/macdeploy/background.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.png?ref=95ef87c75ee879181c71bcd1933d8cc01f9d0fa3"
      },
      {
        "sha": "fdc4f4ca4a07ea4c6082ee1357b6ec7e8db99d72",
        "filename": "contrib/macdeploy/background.psd",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background.psd",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background.psd",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.psd?ref=95ef87c75ee879181c71bcd1933d8cc01f9d0fa3"
      },
      {
        "sha": "4b44ac672e627be82bb9b74dac0016057b11c126",
        "filename": "contrib/macdeploy/background.tiff",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background.tiff",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background.tiff",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.tiff?ref=95ef87c75ee879181c71bcd1933d8cc01f9d0fa3"
      },
      {
        "sha": "4858183f75c382a9b8d75ae4fb8a74abd830615f",
        "filename": "contrib/macdeploy/background@2x.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background@2x.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/background@2x.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background@2x.png?ref=95ef87c75ee879181c71bcd1933d8cc01f9d0fa3"
      },
      {
        "sha": "ef277a7f14ad66ecdb8597a865a54b9506fd0ff9",
        "filename": "contrib/macdeploy/fancy.plist",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/fancy.plist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3/contrib/macdeploy/fancy.plist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/fancy.plist?ref=95ef87c75ee879181c71bcd1933d8cc01f9d0fa3",
        "patch": "@@ -10,7 +10,7 @@\n \t\t<integer>620</integer>\n \t</array>\n \t<key>background_picture</key>\n-\t<string>background.png</string>\n+\t<string>background.tiff</string>\n \t<key>icon_size</key>\n \t<integer>96</integer>\n \t<key>applications_symlink</key>"
      }
    ]
  },
  {
    "sha": "ab64022d54e528f51b578289354bf5abaa12049b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjY0MDIyZDU0ZTUyOGY1MWI1NzgyODkzNTRiZjVhYmFhMTIwNDli",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T11:11:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T11:11:40Z"
      },
      "message": "Merge pull request #5684\n\nf0172bf osx: bump build sdk to 10.9 (Cory Fields)",
      "tree": {
        "sha": "f6a53c9a6c0cbd63d78bc4db095fe807891b0fb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6a53c9a6c0cbd63d78bc4db095fe807891b0fb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab64022d54e528f51b578289354bf5abaa12049b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUvjfsAAoJEHSBCwEjRsmmHQEH/jEU78DAFpHP+/xewrJWdnt6\n9+6AkbyOE1jfq7cVoSMeypN86kPPxnW+xWDVO0U4PL8eRQwqvdHmORE441RV6zPy\na0gH3jPgySjywBpFu1Nj/ByaesS+5tfwbZq0/kV35qzxmGyGIVOTTs5cIpD9HcI/\nilVDqteUzVBEzHGPjavu4WrRuLLkmg80ewj36UmQ4XaiCn27oVDN4F/dkuhdFJfN\nnR4KCmheAG7CYvRCNPoa16ajVSS9zfv4lGY+yjZq28urq+ZRl69iXMn+nsd4Psvb\nC7wFRyoycFaDd6P2jfA+lUH+NlAjPBpKk5oy+PUZCbGqki9vflCcfe/tLBOLmJM=\n=FpMe\n-----END PGP SIGNATURE-----",
        "payload": "tree f6a53c9a6c0cbd63d78bc4db095fe807891b0fb0\nparent e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb\nparent f0172bf91ef521a0155cf1f0ae9fde1ab02157b3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421752274 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421752300 +0100\n\nMerge pull request #5684\n\nf0172bf osx: bump build sdk to 10.9 (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab64022d54e528f51b578289354bf5abaa12049b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab64022d54e528f51b578289354bf5abaa12049b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab64022d54e528f51b578289354bf5abaa12049b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1aecae33a672b00fac31b6c3cc4c2f6a833ebfb"
      },
      {
        "sha": "f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0172bf91ef521a0155cf1f0ae9fde1ab02157b3"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 13,
      "deletions": 12
    },
    "files": [
      {
        "sha": "3c995be9a53522dae22ae9eb2bfb5b03c6a7b86d",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab64022d54e528f51b578289354bf5abaa12049b/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab64022d54e528f51b578289354bf5abaa12049b/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=ab64022d54e528f51b578289354bf5abaa12049b",
        "patch": "@@ -33,7 +33,7 @@ matrix:\n     - compiler: \": 32-bit + dash\"\n       env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Cross-Mac\"\n-      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.7 GOAL=\"deploy\"\n+      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.9 GOAL=\"deploy\"\n     - compiler: \": Win64\"\n       env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui\" MAKEJOBS=\"-j2\"\n     - compiler: \": Win32\""
      },
      {
        "sha": "3ca42248d4e303e50cc82b18a05067212cfadb8a",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab64022d54e528f51b578289354bf5abaa12049b/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab64022d54e528f51b578289354bf5abaa12049b/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=ab64022d54e528f51b578289354bf5abaa12049b",
        "patch": "@@ -23,7 +23,7 @@ remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files:\n-- \"MacOSX10.7.sdk.tar.gz\"\n+- \"MacOSX10.9.sdk.tar.gz\"\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin11\"\n@@ -72,7 +72,7 @@ script: |\n   BASEPREFIX=`pwd`/depends\n \n   mkdir -p ${BASEPREFIX}/SDKs\n-  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.7.sdk.tar.gz\n+  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.9.sdk.tar.gz\n \n   # Build dependencies for each host\n   for i in $HOSTS; do"
      },
      {
        "sha": "2958dc50cc8dc2995bfe81a3ab67050a63488001",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab64022d54e528f51b578289354bf5abaa12049b/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab64022d54e528f51b578289354bf5abaa12049b/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=ab64022d54e528f51b578289354bf5abaa12049b",
        "patch": "@@ -1,5 +1,5 @@\n-OSX_MIN_VERSION=10.6\n-OSX_SDK_VERSION=10.7\n+OSX_MIN_VERSION=10.7\n+OSX_SDK_VERSION=10.9\n OSX_SDK=$(SDK_PATH)/MacOSX$(OSX_SDK_VERSION).sdk\n LD64_VERSION=241.9\n darwin_CC=clang -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION)"
      },
      {
        "sha": "6c0c21c190bcd50703ecb741e51ec61d173e5b23",
        "filename": "doc/README_osx.txt",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab64022d54e528f51b578289354bf5abaa12049b/doc/README_osx.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab64022d54e528f51b578289354bf5abaa12049b/doc/README_osx.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.txt?ref=ab64022d54e528f51b578289354bf5abaa12049b",
        "patch": "@@ -29,14 +29,15 @@ originally done in toolchain4.\n \n To complicate things further, all builds must target an Apple SDK. These SDKs\n are free to download, but not redistributable.\n-To obtain it, register for a developer account, then download xcode4630916281a.dmg:\n-https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_4.6.3/xcode4630916281a.dmg\n+To obtain it, register for a developer account, then download the XCode 6.1.1 dmg:\n+https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n+\n This file is several gigabytes in size, but only a single directory inside is\n-needed: Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk\n+needed: Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk\n \n Unfortunately, the usual linux tools (7zip, hpmount, loopback mount) are incapable of opening this file.\n To create a tarball suitable for gitian input, mount the dmg in OSX, then create it with:\n-  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.7.sdk.tar.gz MacOSX10.7.sdk\n+  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n \n \n The gitian descriptors build 2 sets of files: Linux tools, then Apple binaries"
      },
      {
        "sha": "363465d827ec1af713b70420cd6bdf26c94052d2",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab64022d54e528f51b578289354bf5abaa12049b/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab64022d54e528f51b578289354bf5abaa12049b/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=ab64022d54e528f51b578289354bf5abaa12049b",
        "patch": "@@ -44,11 +44,11 @@ Release Process\n \n  Register and download the Apple SDK: (see OSX Readme for details)\n  \n- https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_4.6.3/xcode4630916281a.dmg\n+ https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n  \n- Using a Mac, create a tarball for the 10.7 SDK and copy it to the inputs directory:\n+ Using a Mac, create a tarball for the 10.9 SDK and copy it to the inputs directory:\n  \n-\ttar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.7.sdk.tar.gz MacOSX10.7.sdk\n+\ttar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n \n ###Optional: Seed the Gitian sources cache\n "
      }
    ]
  },
  {
    "sha": "848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDhmNTVkNTJmZTJmNzE0M2Y5Y2NmYTVhYjhiZDgyYzA5OGE3YjZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T15:22:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T15:28:10Z"
      },
      "message": "Merge pull request #5651\n\n1d84aea Coin Control: Use U+2248 \"ALMOST EQUAL TO\" rather than a simple tilde (which may be mistaken for a negative sign) (Luke Dashjr)",
      "tree": {
        "sha": "689439b2a7a6df4f662197a7f452a0ca173cd4db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/689439b2a7a6df4f662197a7f452a0ca173cd4db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUvnQKAAoJEHSBCwEjRsmmHMgH/jFg3h4RBdVzGK2gKdBk3vx7\njwpp1VVpmumik6EYWKnwIBEVr8oEBvQwsWVvztWgYtGbIXHrjMNjjm4Y60P/V5mV\n53NfHYK/eqZ+dnv/Kd7I+E+xdUVnEXbRm3Zv6/I6xSHOlH1/HXUtXCzGXR5H4Dnu\npkBgGt49/sWN8kZoBvyXGf7B2UuI8hc++scn4N9syZf7c1/UNHYcc9HfxTDucIm+\nXyKae6UDwd71EZV49xumckvYDb7XKpBnPqLvwVwaIpTKOvVy+G81U7II3QrdK51z\njQsgRxYLZ6SVhtuFbsCSayfF5MghC+qPUu5PJdTZYLAaU09+qn3wqYFbU0V6b8A=\n=VRzg\n-----END PGP SIGNATURE-----",
        "payload": "tree 689439b2a7a6df4f662197a7f452a0ca173cd4db\nparent ab64022d54e528f51b578289354bf5abaa12049b\nparent 1d84aead218e075b21d545f35e6a8efdae8e0169\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421767341 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421767690 +0100\n\nMerge pull request #5651\n\n1d84aea Coin Control: Use U+2248 \"ALMOST EQUAL TO\" rather than a simple tilde (which may be mistaken for a negative sign) (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab64022d54e528f51b578289354bf5abaa12049b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab64022d54e528f51b578289354bf5abaa12049b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab64022d54e528f51b578289354bf5abaa12049b"
      },
      {
        "sha": "1d84aead218e075b21d545f35e6a8efdae8e0169",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d84aead218e075b21d545f35e6a8efdae8e0169",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d84aead218e075b21d545f35e6a8efdae8e0169"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 14,
      "deletions": 12
    },
    "files": [
      {
        "sha": "f597eeeaf394fee8e7f29c9419d926d17cf482dc",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
        "patch": "@@ -304,19 +304,19 @@ void CoinControlDialog::clipboardAmount()\n // copy label \"Fee\" to clipboard\n void CoinControlDialog::clipboardFee()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlFee->text().left(ui->labelCoinControlFee->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlFee->text().left(ui->labelCoinControlFee->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // copy label \"After fee\" to clipboard\n void CoinControlDialog::clipboardAfterFee()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlAfterFee->text().left(ui->labelCoinControlAfterFee->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlAfterFee->text().left(ui->labelCoinControlAfterFee->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // copy label \"Bytes\" to clipboard\n void CoinControlDialog::clipboardBytes()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlBytes->text().replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlBytes->text().replace(ASYMP_UTF8, \"\"));\n }\n \n // copy label \"Priority\" to clipboard\n@@ -334,7 +334,7 @@ void CoinControlDialog::clipboardLowOutput()\n // copy label \"Change\" to clipboard\n void CoinControlDialog::clipboardChange()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlChange->text().left(ui->labelCoinControlChange->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlChange->text().left(ui->labelCoinControlChange->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // treeview: sort\n@@ -600,16 +600,16 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     l2->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nAmount));        // Amount\n     l3->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nPayFee));        // Fee\n     l4->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nAfterFee));      // After Fee\n-    l5->setText(((nBytes > 0) ? \"~\" : \"\") + QString::number(nBytes));        // Bytes\n+    l5->setText(((nBytes > 0) ? ASYMP_UTF8 : \"\") + QString::number(nBytes));        // Bytes\n     l6->setText(sPriorityLabel);                                             // Priority\n     l7->setText(fDust ? tr(\"yes\") : tr(\"no\"));                               // Dust\n     l8->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nChange));        // Change\n     if (nPayFee > 0 && !(payTxFee.GetFeePerK() > 0 && fPayAtLeastCustomFee && nBytes < 1000))\n     {\n-        l3->setText(\"~\" + l3->text());\n-        l4->setText(\"~\" + l4->text());\n+        l3->setText(ASYMP_UTF8 + l3->text());\n+        l4->setText(ASYMP_UTF8 + l4->text());\n         if (nChange > 0)\n-            l8->setText(\"~\" + l8->text());\n+            l8->setText(ASYMP_UTF8 + l8->text());\n     }\n \n     // turn labels \"red\""
      },
      {
        "sha": "5a91876f1f9fd13cf13ee7057426cad9bdf63073",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
        "patch": "@@ -25,6 +25,8 @@ namespace Ui {\n     class CoinControlDialog;\n }\n \n+#define ASYMP_UTF8 \"\\xE2\\x89\\x88\"\n+\n class CoinControlDialog : public QDialog\n {\n     Q_OBJECT"
      },
      {
        "sha": "1f9bd575453be4072b80e18f618030868d8ada12",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
        "patch": "@@ -657,19 +657,19 @@ void SendCoinsDialog::coinControlClipboardAmount()\n // Coin Control: copy label \"Fee\" to clipboard\n void SendCoinsDialog::coinControlClipboardFee()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlFee->text().left(ui->labelCoinControlFee->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlFee->text().left(ui->labelCoinControlFee->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // Coin Control: copy label \"After fee\" to clipboard\n void SendCoinsDialog::coinControlClipboardAfterFee()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlAfterFee->text().left(ui->labelCoinControlAfterFee->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlAfterFee->text().left(ui->labelCoinControlAfterFee->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // Coin Control: copy label \"Bytes\" to clipboard\n void SendCoinsDialog::coinControlClipboardBytes()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlBytes->text().replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlBytes->text().replace(ASYMP_UTF8, \"\"));\n }\n \n // Coin Control: copy label \"Priority\" to clipboard\n@@ -687,7 +687,7 @@ void SendCoinsDialog::coinControlClipboardLowOutput()\n // Coin Control: copy label \"Change\" to clipboard\n void SendCoinsDialog::coinControlClipboardChange()\n {\n-    GUIUtil::setClipboard(ui->labelCoinControlChange->text().left(ui->labelCoinControlChange->text().indexOf(\" \")).replace(\"~\", \"\"));\n+    GUIUtil::setClipboard(ui->labelCoinControlChange->text().left(ui->labelCoinControlChange->text().indexOf(\" \")).replace(ASYMP_UTF8, \"\"));\n }\n \n // Coin Control: settings menu - coin control enabled/disabled by user"
      }
    ]
  },
  {
    "sha": "7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODEwYTBhMWU2ZmM0MDg4Njk0YTQ1YjVjODY0OTNhNDdkNWM3Yzhh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T16:34:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T16:34:43Z"
      },
      "message": "Merge pull request #5648\n\n2ce63d3 MOVEONLY: Move struct CBlockTemplate to miner.h (from main.h) (Luke Dashjr)",
      "tree": {
        "sha": "b8f8ce111e156e728d22eee8d56ae32fa8cc89a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8f8ce111e156e728d22eee8d56ae32fa8cc89a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUvoOjAAoJEHSBCwEjRsmmqdIH/2RZNsY8wCNmVC3k+AoByewV\nO3JWZCTkRGRfoHCOBx7yGv5xMNuon4/nXIdew9z/DtRgygvRJjbfMPNsvzFiKbW/\nMusFaEAor5pZgpHk7eDThJfZpKHe66G375epTpUMQUxTeRo6evr307vLIB0Yinmv\nyn/QneZMd9Zy6muyy9SmpoFLE2mql5PNChVXZ0HvgkI9gEXHwiim1JvKLoCeVoQn\nhYtKludal0tu86vCB2YdPglRQZ+aCYeUvwb4z7ssD0ay+K1kKUQJGTTuoeQoz02b\nYZfonLHwpP1hulyeknZbMkyfRiwfcnUHm9Nmv7vpaS6WoDdQRw7+UfY8rbvbka8=\n=BZNt\n-----END PGP SIGNATURE-----",
        "payload": "tree b8f8ce111e156e728d22eee8d56ae32fa8cc89a9\nparent 848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d\nparent 2ce63d395fe3d71e921ecd9f4263031b25efa14e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421771670 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421771683 +0100\n\nMerge pull request #5648\n\n2ce63d3 MOVEONLY: Move struct CBlockTemplate to miner.h (from main.h) (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/848f55d52fe2f7143f9ccfa5ab8bd82c098a7b6d"
      },
      {
        "sha": "2ce63d395fe3d71e921ecd9f4263031b25efa14e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce63d395fe3d71e921ecd9f4263031b25efa14e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ce63d395fe3d71e921ecd9f4263031b25efa14e"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 8,
      "deletions": 16
    },
    "files": [
      {
        "sha": "a7360d2f700a1463a2cb7dafca3f439d30cd27a8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
        "patch": "@@ -45,7 +45,6 @@ class CScriptCheck;\n class CValidationInterface;\n class CValidationState;\n \n-struct CBlockTemplate;\n struct CNodeStateStats;\n \n /** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n@@ -513,17 +512,6 @@ extern CCoinsViewCache *pcoinsTip;\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern CBlockTreeDB *pblocktree;\n \n-struct CBlockTemplate\n-{\n-    CBlock block;\n-    std::vector<CAmount> vTxFees;\n-    std::vector<int64_t> vTxSigOps;\n-};\n-\n-\n-\n-\n-\n \n class CValidationInterface {\n protected:"
      },
      {
        "sha": "cc97d16f0fe953ed1acfe38d84a946433af30803",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
        "patch": "@@ -6,7 +6,6 @@\n #include \"miner.h\"\n \n #include \"amount.h\"\n-#include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"hash.h\"\n #include \"main.h\""
      },
      {
        "sha": "593ddcd3716624a30e4fc4448a770c4f71aaa316",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
        "patch": "@@ -6,16 +6,21 @@\n #ifndef BITCOIN_MINER_H\n #define BITCOIN_MINER_H\n \n+#include \"primitives/block.h\"\n+\n #include <stdint.h>\n \n-class CBlock;\n-class CBlockHeader;\n class CBlockIndex;\n class CReserveKey;\n class CScript;\n class CWallet;\n \n-struct CBlockTemplate;\n+struct CBlockTemplate\n+{\n+    CBlock block;\n+    std::vector<CAmount> vTxFees;\n+    std::vector<int64_t> vTxSigOps;\n+};\n \n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads);"
      }
    ]
  },
  {
    "sha": "66b473457bc94adcd3d277462f9d619f5a198d96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmI0NzM0NTdiYzk0YWRjZDNkMjc3NDYyZjlkNjE5ZjVhMTk4ZDk2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T17:02:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T17:03:20Z"
      },
      "message": "Delete RecvLine function\n\nNo longer necessary since #5161 / 845c86d128fb97d55d125e63653def38729bd2ed.",
      "tree": {
        "sha": "cc62e927be208e2f764c41c06f620b249aec52a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc62e927be208e2f764c41c06f620b249aec52a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66b473457bc94adcd3d277462f9d619f5a198d96",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUvopZAAoJEHSBCwEjRsmmRKIIAIe8z1Obu+k+8cyknlwBlrqk\n17TVkkwkxR7d/huH1yM1Wbu0XmgKEGaChZEDrKddBw2N2tZ8JNCTYAQHc3ouqdAk\n0BwwLpEeHyc6Qka6gzM0YbLh0L09nwK+jHqePFU/eVXyAdL4iKOdS2vAsKqY7EXS\nmkwGJw7gYStiC+Onyt5NUGEq8rx4LH6HObEMcZl7wIdSzgpIeYI47IxzedSUIRl2\njT7dLyqA14aSzaujjDhQYXxOSbxeSuSiyL+EEnQMNpXsWvHKjsWGP3ebfOd3my2Y\ntAeDrbm8o5jzz4Rgi44Qj2yAKaC8KalXKc4DCKdtrlRmfznLcWNCkTY8tmjYU5M=\n=4mFF\n-----END PGP SIGNATURE-----",
        "payload": "tree cc62e927be208e2f764c41c06f620b249aec52a5\nparent 7810a0a1e6fc4088694a45b5c86493a47d5c7c8a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421773365 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421773400 +0100\n\nDelete RecvLine function\n\nNo longer necessary since #5161 / 845c86d128fb97d55d125e63653def38729bd2ed.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b473457bc94adcd3d277462f9d619f5a198d96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66b473457bc94adcd3d277462f9d619f5a198d96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b473457bc94adcd3d277462f9d619f5a198d96/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7810a0a1e6fc4088694a45b5c86493a47d5c7c8a"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 0,
      "deletions": 51
    },
    "files": [
      {
        "sha": "bba80535e5f85957668e128515caac419a375722",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 50,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b473457bc94adcd3d277462f9d619f5a198d96/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b473457bc94adcd3d277462f9d619f5a198d96/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=66b473457bc94adcd3d277462f9d619f5a198d96",
        "patch": "@@ -157,56 +157,6 @@ CAddress GetLocalAddress(const CNetAddr *paddrPeer)\n     return ret;\n }\n \n-bool RecvLine(SOCKET hSocket, string& strLine)\n-{\n-    strLine = \"\";\n-    while (true)\n-    {\n-        char c;\n-        int nBytes = recv(hSocket, &c, 1, 0);\n-        if (nBytes > 0)\n-        {\n-            if (c == '\\n')\n-                continue;\n-            if (c == '\\r')\n-                return true;\n-            strLine += c;\n-            if (strLine.size() >= 9000)\n-                return true;\n-        }\n-        else if (nBytes <= 0)\n-        {\n-            boost::this_thread::interruption_point();\n-            if (nBytes < 0)\n-            {\n-                int nErr = WSAGetLastError();\n-                if (nErr == WSAEMSGSIZE)\n-                    continue;\n-                if (nErr == WSAEWOULDBLOCK || nErr == WSAEINTR || nErr == WSAEINPROGRESS)\n-                {\n-                    MilliSleep(10);\n-                    continue;\n-                }\n-            }\n-            if (!strLine.empty())\n-                return true;\n-            if (nBytes == 0)\n-            {\n-                // socket closed\n-                LogPrint(\"net\", \"socket closed\\n\");\n-                return false;\n-            }\n-            else\n-            {\n-                // socket error\n-                int nErr = WSAGetLastError();\n-                LogPrint(\"net\", \"recv failed: %s\\n\", NetworkErrorString(nErr));\n-                return false;\n-            }\n-        }\n-    }\n-}\n-\n int GetnScore(const CService& addr)\n {\n     LOCK(cs_mapLocalHost);"
      },
      {
        "sha": "b78665b5c62fab1f389d3cacc7c5dd021a0df7e1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b473457bc94adcd3d277462f9d619f5a198d96/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b473457bc94adcd3d277462f9d619f5a198d96/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=66b473457bc94adcd3d277462f9d619f5a198d96",
        "patch": "@@ -61,7 +61,6 @@ unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();\n \n void AddOneShot(std::string strDest);\n-bool RecvLine(SOCKET hSocket, std::string& strLine);\n void AddressCurrentlyConnected(const CService& addr);\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const std::string& addrName);"
      }
    ]
  },
  {
    "sha": "e7cfcc8f7e7053391bf53b1e291246857aab87a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2NmY2M4ZjdlNzA1MzM5MWJmNTNiMWUyOTEyNDY4NTdhYWI4N2E1",
    "commit": {
      "author": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-01-20T23:10:35Z"
      },
      "committer": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-01-20T23:10:35Z"
      },
      "message": "Remove custom pkg.m4 script.",
      "tree": {
        "sha": "00b03ef86b0a774b28642baef15e7fe72e14a3b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00b03ef86b0a774b28642baef15e7fe72e14a3b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7cfcc8f7e7053391bf53b1e291246857aab87a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7cfcc8f7e7053391bf53b1e291246857aab87a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7cfcc8f7e7053391bf53b1e291246857aab87a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7cfcc8f7e7053391bf53b1e291246857aab87a5/comments",
    "author": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66b473457bc94adcd3d277462f9d619f5a198d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b473457bc94adcd3d277462f9d619f5a198d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66b473457bc94adcd3d277462f9d619f5a198d96"
      }
    ],
    "stats": {
      "total": 221,
      "additions": 0,
      "deletions": 221
    },
    "files": [
      {
        "sha": "85e3d1d669b040369e03a7d69ca8cd0627e1d3f4",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7cfcc8f7e7053391bf53b1e291246857aab87a5/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7cfcc8f7e7053391bf53b1e291246857aab87a5/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=e7cfcc8f7e7053391bf53b1e291246857aab87a5",
        "patch": "@@ -64,13 +64,6 @@ AC_PATH_PROG(CCACHE,ccache)\n AC_PATH_PROG(XGETTEXT,xgettext)\n AC_PATH_PROG(HEXDUMP,hexdump)\n \n-# This m4 will only be used if a system copy cannot be found. This is helpful\n-# on systems where autotools are installed but the pkg-config macros are not in\n-# a default location. It is currently used for building on OSX where autotools\n-# are preinstalled but pkg-config comes from macports or homebrew. It should\n-# probably be removed when building on <= 10.6 is no longer supported.\n-m4_include([pkg.m4])\n-\n dnl pkg-config check.\n PKG_PROG_PKG_CONFIG\n "
      },
      {
        "sha": "c5b26b52e6cdb5891332f7e87addae9306ba7107",
        "filename": "pkg.m4",
        "status": "removed",
        "additions": 0,
        "deletions": 214,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b473457bc94adcd3d277462f9d619f5a198d96/pkg.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b473457bc94adcd3d277462f9d619f5a198d96/pkg.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/pkg.m4?ref=66b473457bc94adcd3d277462f9d619f5a198d96",
        "patch": "@@ -1,214 +0,0 @@\n-# pkg.m4 - Macros to locate and utilise pkg-config.            -*- Autoconf -*-\n-# serial 1 (pkg-config-0.24)\n-# \n-# Copyright \u00a9 2004 Scott James Remnant <scott@netsplit.com>.\n-#\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2 of the License, or\n-# (at your option) any later version.\n-#\n-# This program is distributed in the hope that it will be useful, but\n-# WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n-#\n-# As a special exception to the GNU General Public License, if you\n-# distribute this file as part of a program that contains a\n-# configuration script generated by Autoconf, you may include it under\n-# the same distribution terms that you use for the rest of that program.\n-\n-# PKG_PROG_PKG_CONFIG([MIN-VERSION])\n-# ----------------------------------\n-AC_DEFUN([PKG_PROG_PKG_CONFIG],\n-[m4_pattern_forbid([^_?PKG_[A-Z_]+$])\n-m4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])\n-m4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])\n-AC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])\n-AC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])\n-AC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's built-in search path])\n-\n-if test \"x$ac_cv_env_PKG_CONFIG_set\" != \"xset\"; then\n-\tAC_PATH_TOOL([PKG_CONFIG], [pkg-config])\n-fi\n-if test -n \"$PKG_CONFIG\"; then\n-\t_pkg_min_version=m4_default([$1], [0.9.0])\n-\tAC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])\n-\tif $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then\n-\t\tAC_MSG_RESULT([yes])\n-\telse\n-\t\tAC_MSG_RESULT([no])\n-\t\tPKG_CONFIG=\"\"\n-\tfi\n-fi[]dnl\n-])# PKG_PROG_PKG_CONFIG\n-\n-# PKG_CHECK_EXISTS(MODULES, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n-#\n-# Check to see whether a particular set of modules exists.  Similar\n-# to PKG_CHECK_MODULES(), but does not set variables or print errors.\n-#\n-# Please remember that m4 expands AC_REQUIRE([PKG_PROG_PKG_CONFIG])\n-# only at the first occurence in configure.ac, so if the first place\n-# it's called might be skipped (such as if it is within an \"if\", you\n-# have to call PKG_CHECK_EXISTS manually\n-# --------------------------------------------------------------\n-AC_DEFUN([PKG_CHECK_EXISTS],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n-if test -n \"$PKG_CONFIG\" && \\\n-    AC_RUN_LOG([$PKG_CONFIG --exists --print-errors \"$1\"]); then\n-  m4_default([$2], [:])\n-m4_ifvaln([$3], [else\n-  $3])dnl\n-fi])\n-\n-# _PKG_CONFIG([VARIABLE], [COMMAND], [MODULES])\n-# ---------------------------------------------\n-m4_define([_PKG_CONFIG],\n-[if test -n \"$$1\"; then\n-    pkg_cv_[]$1=\"$$1\"\n- elif test -n \"$PKG_CONFIG\"; then\n-    PKG_CHECK_EXISTS([$3],\n-                     [pkg_cv_[]$1=`$PKG_CONFIG --[]$2 \"$3\" 2>/dev/null`\n-\t\t      test \"x$?\" != \"x0\" && pkg_failed=yes ],\n-\t\t     [pkg_failed=yes])\n- else\n-    pkg_failed=untried\n-fi[]dnl\n-])# _PKG_CONFIG\n-\n-# _PKG_SHORT_ERRORS_SUPPORTED\n-# -----------------------------\n-AC_DEFUN([_PKG_SHORT_ERRORS_SUPPORTED],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])\n-if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then\n-        _pkg_short_errors_supported=yes\n-else\n-        _pkg_short_errors_supported=no\n-fi[]dnl\n-])# _PKG_SHORT_ERRORS_SUPPORTED\n-\n-\n-# PKG_CHECK_MODULES(VARIABLE-PREFIX, MODULES, [ACTION-IF-FOUND],\n-# [ACTION-IF-NOT-FOUND])\n-#\n-#\n-# Note that if there is a possibility the first call to\n-# PKG_CHECK_MODULES might not happen, you should be sure to include an\n-# explicit call to PKG_PROG_PKG_CONFIG in your configure.ac\n-#\n-#\n-# --------------------------------------------------------------\n-AC_DEFUN([PKG_CHECK_MODULES],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n-AC_ARG_VAR([$1][_CFLAGS], [C compiler flags for $1, overriding pkg-config])dnl\n-AC_ARG_VAR([$1][_LIBS], [linker flags for $1, overriding pkg-config])dnl\n-\n-pkg_failed=no\n-AC_MSG_CHECKING([for $1])\n-\n-_PKG_CONFIG([$1][_CFLAGS], [cflags], [$2])\n-_PKG_CONFIG([$1][_LIBS], [libs], [$2])\n-\n-m4_define([_PKG_TEXT], [Alternatively, you may set the environment variables $1[]_CFLAGS\n-and $1[]_LIBS to avoid the need to call pkg-config.\n-See the pkg-config man page for more details.])\n-\n-if test $pkg_failed = yes; then\n-   \tAC_MSG_RESULT([no])\n-        _PKG_SHORT_ERRORS_SUPPORTED\n-        if test $_pkg_short_errors_supported = yes; then\n-\t        $1[]_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors --cflags --libs \"$2\" 2>&1`\n-        else \n-\t        $1[]_PKG_ERRORS=`$PKG_CONFIG --print-errors --cflags --libs \"$2\" 2>&1`\n-        fi\n-\t# Put the nasty error message in config.log where it belongs\n-\techo \"$$1[]_PKG_ERRORS\" >&AS_MESSAGE_LOG_FD\n-\n-\tm4_default([$4], [AC_MSG_ERROR(\n-[Package requirements ($2) were not met:\n-\n-$$1_PKG_ERRORS\n-\n-Consider adjusting the PKG_CONFIG_PATH environment variable if you\n-installed software in a non-standard prefix.\n-\n-_PKG_TEXT])[]dnl\n-        ])\n-elif test $pkg_failed = untried; then\n-     \tAC_MSG_RESULT([no])\n-\tm4_default([$4], [AC_MSG_FAILURE(\n-[The pkg-config script could not be found or is too old.  Make sure it\n-is in your PATH or set the PKG_CONFIG environment variable to the full\n-path to pkg-config.\n-\n-_PKG_TEXT\n-\n-To get pkg-config, see <http://pkg-config.freedesktop.org/>.])[]dnl\n-        ])\n-else\n-\t$1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS\n-\t$1[]_LIBS=$pkg_cv_[]$1[]_LIBS\n-        AC_MSG_RESULT([yes])\n-\t$3\n-fi[]dnl\n-])# PKG_CHECK_MODULES\n-\n-\n-# PKG_INSTALLDIR(DIRECTORY)\n-# -------------------------\n-# Substitutes the variable pkgconfigdir as the location where a module\n-# should install pkg-config .pc files. By default the directory is\n-# $libdir/pkgconfig, but the default can be changed by passing\n-# DIRECTORY. The user can override through the --with-pkgconfigdir\n-# parameter.\n-AC_DEFUN([PKG_INSTALLDIR],\n-[m4_pushdef([pkg_default], [m4_default([$1], ['${libdir}/pkgconfig'])])\n-m4_pushdef([pkg_description],\n-    [pkg-config installation directory @<:@]pkg_default[@:>@])\n-AC_ARG_WITH([pkgconfigdir],\n-    [AS_HELP_STRING([--with-pkgconfigdir], pkg_description)],,\n-    [with_pkgconfigdir=]pkg_default)\n-AC_SUBST([pkgconfigdir], [$with_pkgconfigdir])\n-m4_popdef([pkg_default])\n-m4_popdef([pkg_description])\n-]) dnl PKG_INSTALLDIR\n-\n-\n-# PKG_NOARCH_INSTALLDIR(DIRECTORY)\n-# -------------------------\n-# Substitutes the variable noarch_pkgconfigdir as the location where a\n-# module should install arch-independent pkg-config .pc files. By\n-# default the directory is $datadir/pkgconfig, but the default can be\n-# changed by passing DIRECTORY. The user can override through the\n-# --with-noarch-pkgconfigdir parameter.\n-AC_DEFUN([PKG_NOARCH_INSTALLDIR],\n-[m4_pushdef([pkg_default], [m4_default([$1], ['${datadir}/pkgconfig'])])\n-m4_pushdef([pkg_description],\n-    [pkg-config arch-independent installation directory @<:@]pkg_default[@:>@])\n-AC_ARG_WITH([noarch-pkgconfigdir],\n-    [AS_HELP_STRING([--with-noarch-pkgconfigdir], pkg_description)],,\n-    [with_noarch_pkgconfigdir=]pkg_default)\n-AC_SUBST([noarch_pkgconfigdir], [$with_noarch_pkgconfigdir])\n-m4_popdef([pkg_default])\n-m4_popdef([pkg_description])\n-]) dnl PKG_NOARCH_INSTALLDIR\n-\n-\n-# PKG_CHECK_VAR(VARIABLE, MODULE, CONFIG-VARIABLE,\n-# [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n-# -------------------------------------------\n-# Retrieves the value of the pkg-config variable for the given module.\n-AC_DEFUN([PKG_CHECK_VAR],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n-AC_ARG_VAR([$1], [value of $3 for $2, overriding pkg-config])dnl\n-\n-_PKG_CONFIG([$1], [variable=\"][$3][\"], [$2])\n-AS_VAR_COPY([$1], [pkg_cv_][$1])\n-\n-AS_VAR_IF([$1], [\"\"], [$5], [$4])dnl\n-])# PKG_CHECK_VAR"
      }
    ]
  },
  {
    "sha": "5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmRjNWIwOGU3ZTI3ZDlkMWQ4MDVjZWEwNzQyMzJiMWM3ZjA1ZDQ3",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-01-21T07:48:27Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-01-21T07:48:27Z"
      },
      "message": "depends: latest config.guess and config.sub",
      "tree": {
        "sha": "1c7518a21fdb86c58deb63f2c5f35bb7d296006b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c7518a21fdb86c58deb63f2c5f35bb7d296006b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66b473457bc94adcd3d277462f9d619f5a198d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b473457bc94adcd3d277462f9d619f5a198d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66b473457bc94adcd3d277462f9d619f5a198d96"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 27,
      "deletions": 13
    },
    "files": [
      {
        "sha": "dbfb9786cb6f9b8003367505d49dcadb2145610a",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Attempt to guess a canonical system name.\n-#   Copyright 1992-2014 Free Software Foundation, Inc.\n+#   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2014-03-23'\n+timestamp='2015-01-01'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -24,12 +24,12 @@ timestamp='2014-03-23'\n # program.  This Exception is an additional permission under section 7\n # of the GNU General Public License, version 3 (\"GPLv3\").\n #\n-# Originally written by Per Bothner.\n+# Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n #\n # You can get the latest version of this script from:\n # http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD\n #\n-# Please send patches with a ChangeLog entry to config-patches@gnu.org.\n+# Please send patches to <config-patches@gnu.org>.\n \n \n me=`echo \"$0\" | sed -e 's,.*/,,'`\n@@ -50,7 +50,7 @@ version=\"\\\n GNU config.guess ($timestamp)\n \n Originally written by Per Bothner.\n-Copyright 1992-2014 Free Software Foundation, Inc.\n+Copyright 1992-2015 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -579,8 +579,9 @@ EOF\n \telse\n \t\tIBM_ARCH=powerpc\n \tfi\n-\tif [ -x /usr/bin/oslevel ] ; then\n-\t\tIBM_REV=`/usr/bin/oslevel`\n+\tif [ -x /usr/bin/lslpp ] ; then\n+\t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc |\n+\t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n \telse\n \t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n \tfi"
      },
      {
        "sha": "6d2e94c8bf9ea6925b96846aade1fd64074985d3",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 19,
        "deletions": 6,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Configuration validation subroutine script.\n-#   Copyright 1992-2014 Free Software Foundation, Inc.\n+#   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2014-05-01'\n+timestamp='2015-01-01'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -25,7 +25,7 @@ timestamp='2014-05-01'\n # of the GNU General Public License, version 3 (\"GPLv3\").\n \n \n-# Please send patches with a ChangeLog entry to config-patches@gnu.org.\n+# Please send patches to <config-patches@gnu.org>.\n #\n # Configuration subroutine to validate and canonicalize a configuration type.\n # Supply the specified configuration type as an argument.\n@@ -68,7 +68,7 @@ Report bugs and patches to <config-patches@gnu.org>.\"\n version=\"\\\n GNU config.sub ($timestamp)\n \n-Copyright 1992-2014 Free Software Foundation, Inc.\n+Copyright 1992-2015 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -260,7 +260,7 @@ case $basic_machine in\n \t| c4x | c8051 | clipper \\\n \t| d10v | d30v | dlx | dsp16xx \\\n \t| epiphany \\\n-\t| fido | fr30 | frv \\\n+\t| fido | fr30 | frv | ft32 \\\n \t| h8300 | h8500 | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \\\n \t| hexagon \\\n \t| i370 | i860 | i960 | ia64 \\\n@@ -302,6 +302,7 @@ case $basic_machine in\n \t| pdp10 | pdp11 | pj | pjl \\\n \t| powerpc | powerpc64 | powerpc64le | powerpcle \\\n \t| pyramid \\\n+\t| riscv32 | riscv64 \\\n \t| rl78 | rx \\\n \t| score \\\n \t| sh | sh[1234] | sh[24]a | sh[24]aeb | sh[23]e | sh[34]eb | sheb | shbe | shle | sh[1234]le | sh3ele \\\n@@ -312,6 +313,7 @@ case $basic_machine in\n \t| tahoe | tic4x | tic54x | tic55x | tic6x | tic80 | tron \\\n \t| ubicom32 \\\n \t| v850 | v850e | v850e1 | v850e2 | v850es | v850e2v3 \\\n+\t| visium \\\n \t| we32k \\\n \t| x86 | xc16x | xstormy16 | xtensa \\\n \t| z8k | z80)\n@@ -326,6 +328,9 @@ case $basic_machine in\n \tc6x)\n \t\tbasic_machine=tic6x-unknown\n \t\t;;\n+\tleon|leon[3-9])\n+\t\tbasic_machine=sparc-$basic_machine\n+\t\t;;\n \tm6811 | m68hc11 | m6812 | m68hc12 | m68hcs12x | nvptx | picochip)\n \t\tbasic_machine=$basic_machine-unknown\n \t\tos=-none\n@@ -436,6 +441,7 @@ case $basic_machine in\n \t| ubicom32-* \\\n \t| v850-* | v850e-* | v850e1-* | v850es-* | v850e2-* | v850e2v3-* \\\n \t| vax-* \\\n+\t| visium-* \\\n \t| we32k-* \\\n \t| x86-* | x86_64-* | xc16x-* | xps100-* \\\n \t| xstormy16-* | xtensa*-* \\\n@@ -773,6 +779,9 @@ case $basic_machine in\n \t\tbasic_machine=m68k-isi\n \t\tos=-sysv\n \t\t;;\n+\tleon-*|leon[3-9]-*)\n+\t\tbasic_machine=sparc-`echo $basic_machine | sed 's/-.*//'`\n+\t\t;;\n \tm68knommu)\n \t\tbasic_machine=m68k-unknown\n \t\tos=-linux\n@@ -828,6 +837,10 @@ case $basic_machine in\n \t\tbasic_machine=powerpc-unknown\n \t\tos=-morphos\n \t\t;;\n+\tmoxiebox)\n+\t\tbasic_machine=moxie-unknown\n+\t\tos=-moxiebox\n+\t\t;;\n \tmsdos)\n \t\tbasic_machine=i386-pc\n \t\tos=-msdos\n@@ -1373,7 +1386,7 @@ case $os in\n \t      | -cygwin* | -msys* | -pe* | -psos* | -moss* | -proelf* | -rtems* \\\n \t      | -mingw32* | -mingw64* | -linux-gnu* | -linux-android* \\\n \t      | -linux-newlib* | -linux-musl* | -linux-uclibc* \\\n-\t      | -uxpv* | -beos* | -mpeix* | -udk* \\\n+\t      | -uxpv* | -beos* | -mpeix* | -udk* | -moxiebox* \\\n \t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \\\n \t      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \\\n \t      | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \\"
      }
    ]
  },
  {
    "sha": "944c256741b260bd8b758be4a0543af1cb080943",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDRjMjU2NzQxYjI2MGJkOGI3NThiZTRhMDU0M2FmMWNiMDgwOTQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-21T17:28:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-21T18:01:21Z"
      },
      "message": "Merge pull request #5688\n\ne7cfcc8 Remove custom pkg.m4 script. (randy-waterhouse)",
      "tree": {
        "sha": "00b03ef86b0a774b28642baef15e7fe72e14a3b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00b03ef86b0a774b28642baef15e7fe72e14a3b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/944c256741b260bd8b758be4a0543af1cb080943",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUv+lxAAoJEHSBCwEjRsmmy3kIALSTCkvaHuz7ArG5OTVfIleL\nzg75shZCU6ZCsH/RhbX0qjaDl6rs2ag2lReDN9bfLxLM5BsbF+colYoAKS3yPlTG\nDaCFBFNgEGIgsI6x2RHuP23CRR80cvpkC5E7LBRfIs7T3J5yQl8fJ70rACpHuGuB\nB/PjkaJeL2G6BePZSyOydX2bQTm5pxK2vBgptVh9jzl9rOesMTBobJWbrov/Jqrz\nroHrymz6d1g7VMQOJ7u/FSV1CH3vPNaNu4OgV7ZnO8GXsDCF2zoxRbrjlC9C0aN1\nul0NZIyNDSw5kBdpqB6dY+UEbjihsY4e7zllo1iP4MKR3OjbdfTiEjy+B4C+FmY=\n=6bd6\n-----END PGP SIGNATURE-----",
        "payload": "tree 00b03ef86b0a774b28642baef15e7fe72e14a3b2\nparent 66b473457bc94adcd3d277462f9d619f5a198d96\nparent e7cfcc8f7e7053391bf53b1e291246857aab87a5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1421861311 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1421863281 +0100\n\nMerge pull request #5688\n\ne7cfcc8 Remove custom pkg.m4 script. (randy-waterhouse)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/944c256741b260bd8b758be4a0543af1cb080943",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/944c256741b260bd8b758be4a0543af1cb080943",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/944c256741b260bd8b758be4a0543af1cb080943/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66b473457bc94adcd3d277462f9d619f5a198d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b473457bc94adcd3d277462f9d619f5a198d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66b473457bc94adcd3d277462f9d619f5a198d96"
      },
      {
        "sha": "e7cfcc8f7e7053391bf53b1e291246857aab87a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7cfcc8f7e7053391bf53b1e291246857aab87a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7cfcc8f7e7053391bf53b1e291246857aab87a5"
      }
    ],
    "stats": {
      "total": 221,
      "additions": 0,
      "deletions": 221
    },
    "files": [
      {
        "sha": "85e3d1d669b040369e03a7d69ca8cd0627e1d3f4",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/944c256741b260bd8b758be4a0543af1cb080943/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/944c256741b260bd8b758be4a0543af1cb080943/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=944c256741b260bd8b758be4a0543af1cb080943",
        "patch": "@@ -64,13 +64,6 @@ AC_PATH_PROG(CCACHE,ccache)\n AC_PATH_PROG(XGETTEXT,xgettext)\n AC_PATH_PROG(HEXDUMP,hexdump)\n \n-# This m4 will only be used if a system copy cannot be found. This is helpful\n-# on systems where autotools are installed but the pkg-config macros are not in\n-# a default location. It is currently used for building on OSX where autotools\n-# are preinstalled but pkg-config comes from macports or homebrew. It should\n-# probably be removed when building on <= 10.6 is no longer supported.\n-m4_include([pkg.m4])\n-\n dnl pkg-config check.\n PKG_PROG_PKG_CONFIG\n "
      },
      {
        "sha": "c5b26b52e6cdb5891332f7e87addae9306ba7107",
        "filename": "pkg.m4",
        "status": "removed",
        "additions": 0,
        "deletions": 214,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b473457bc94adcd3d277462f9d619f5a198d96/pkg.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b473457bc94adcd3d277462f9d619f5a198d96/pkg.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/pkg.m4?ref=66b473457bc94adcd3d277462f9d619f5a198d96",
        "patch": "@@ -1,214 +0,0 @@\n-# pkg.m4 - Macros to locate and utilise pkg-config.            -*- Autoconf -*-\n-# serial 1 (pkg-config-0.24)\n-# \n-# Copyright \u00a9 2004 Scott James Remnant <scott@netsplit.com>.\n-#\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2 of the License, or\n-# (at your option) any later version.\n-#\n-# This program is distributed in the hope that it will be useful, but\n-# WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n-#\n-# As a special exception to the GNU General Public License, if you\n-# distribute this file as part of a program that contains a\n-# configuration script generated by Autoconf, you may include it under\n-# the same distribution terms that you use for the rest of that program.\n-\n-# PKG_PROG_PKG_CONFIG([MIN-VERSION])\n-# ----------------------------------\n-AC_DEFUN([PKG_PROG_PKG_CONFIG],\n-[m4_pattern_forbid([^_?PKG_[A-Z_]+$])\n-m4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])\n-m4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])\n-AC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])\n-AC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])\n-AC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's built-in search path])\n-\n-if test \"x$ac_cv_env_PKG_CONFIG_set\" != \"xset\"; then\n-\tAC_PATH_TOOL([PKG_CONFIG], [pkg-config])\n-fi\n-if test -n \"$PKG_CONFIG\"; then\n-\t_pkg_min_version=m4_default([$1], [0.9.0])\n-\tAC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])\n-\tif $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then\n-\t\tAC_MSG_RESULT([yes])\n-\telse\n-\t\tAC_MSG_RESULT([no])\n-\t\tPKG_CONFIG=\"\"\n-\tfi\n-fi[]dnl\n-])# PKG_PROG_PKG_CONFIG\n-\n-# PKG_CHECK_EXISTS(MODULES, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n-#\n-# Check to see whether a particular set of modules exists.  Similar\n-# to PKG_CHECK_MODULES(), but does not set variables or print errors.\n-#\n-# Please remember that m4 expands AC_REQUIRE([PKG_PROG_PKG_CONFIG])\n-# only at the first occurence in configure.ac, so if the first place\n-# it's called might be skipped (such as if it is within an \"if\", you\n-# have to call PKG_CHECK_EXISTS manually\n-# --------------------------------------------------------------\n-AC_DEFUN([PKG_CHECK_EXISTS],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n-if test -n \"$PKG_CONFIG\" && \\\n-    AC_RUN_LOG([$PKG_CONFIG --exists --print-errors \"$1\"]); then\n-  m4_default([$2], [:])\n-m4_ifvaln([$3], [else\n-  $3])dnl\n-fi])\n-\n-# _PKG_CONFIG([VARIABLE], [COMMAND], [MODULES])\n-# ---------------------------------------------\n-m4_define([_PKG_CONFIG],\n-[if test -n \"$$1\"; then\n-    pkg_cv_[]$1=\"$$1\"\n- elif test -n \"$PKG_CONFIG\"; then\n-    PKG_CHECK_EXISTS([$3],\n-                     [pkg_cv_[]$1=`$PKG_CONFIG --[]$2 \"$3\" 2>/dev/null`\n-\t\t      test \"x$?\" != \"x0\" && pkg_failed=yes ],\n-\t\t     [pkg_failed=yes])\n- else\n-    pkg_failed=untried\n-fi[]dnl\n-])# _PKG_CONFIG\n-\n-# _PKG_SHORT_ERRORS_SUPPORTED\n-# -----------------------------\n-AC_DEFUN([_PKG_SHORT_ERRORS_SUPPORTED],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])\n-if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then\n-        _pkg_short_errors_supported=yes\n-else\n-        _pkg_short_errors_supported=no\n-fi[]dnl\n-])# _PKG_SHORT_ERRORS_SUPPORTED\n-\n-\n-# PKG_CHECK_MODULES(VARIABLE-PREFIX, MODULES, [ACTION-IF-FOUND],\n-# [ACTION-IF-NOT-FOUND])\n-#\n-#\n-# Note that if there is a possibility the first call to\n-# PKG_CHECK_MODULES might not happen, you should be sure to include an\n-# explicit call to PKG_PROG_PKG_CONFIG in your configure.ac\n-#\n-#\n-# --------------------------------------------------------------\n-AC_DEFUN([PKG_CHECK_MODULES],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n-AC_ARG_VAR([$1][_CFLAGS], [C compiler flags for $1, overriding pkg-config])dnl\n-AC_ARG_VAR([$1][_LIBS], [linker flags for $1, overriding pkg-config])dnl\n-\n-pkg_failed=no\n-AC_MSG_CHECKING([for $1])\n-\n-_PKG_CONFIG([$1][_CFLAGS], [cflags], [$2])\n-_PKG_CONFIG([$1][_LIBS], [libs], [$2])\n-\n-m4_define([_PKG_TEXT], [Alternatively, you may set the environment variables $1[]_CFLAGS\n-and $1[]_LIBS to avoid the need to call pkg-config.\n-See the pkg-config man page for more details.])\n-\n-if test $pkg_failed = yes; then\n-   \tAC_MSG_RESULT([no])\n-        _PKG_SHORT_ERRORS_SUPPORTED\n-        if test $_pkg_short_errors_supported = yes; then\n-\t        $1[]_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors --cflags --libs \"$2\" 2>&1`\n-        else \n-\t        $1[]_PKG_ERRORS=`$PKG_CONFIG --print-errors --cflags --libs \"$2\" 2>&1`\n-        fi\n-\t# Put the nasty error message in config.log where it belongs\n-\techo \"$$1[]_PKG_ERRORS\" >&AS_MESSAGE_LOG_FD\n-\n-\tm4_default([$4], [AC_MSG_ERROR(\n-[Package requirements ($2) were not met:\n-\n-$$1_PKG_ERRORS\n-\n-Consider adjusting the PKG_CONFIG_PATH environment variable if you\n-installed software in a non-standard prefix.\n-\n-_PKG_TEXT])[]dnl\n-        ])\n-elif test $pkg_failed = untried; then\n-     \tAC_MSG_RESULT([no])\n-\tm4_default([$4], [AC_MSG_FAILURE(\n-[The pkg-config script could not be found or is too old.  Make sure it\n-is in your PATH or set the PKG_CONFIG environment variable to the full\n-path to pkg-config.\n-\n-_PKG_TEXT\n-\n-To get pkg-config, see <http://pkg-config.freedesktop.org/>.])[]dnl\n-        ])\n-else\n-\t$1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS\n-\t$1[]_LIBS=$pkg_cv_[]$1[]_LIBS\n-        AC_MSG_RESULT([yes])\n-\t$3\n-fi[]dnl\n-])# PKG_CHECK_MODULES\n-\n-\n-# PKG_INSTALLDIR(DIRECTORY)\n-# -------------------------\n-# Substitutes the variable pkgconfigdir as the location where a module\n-# should install pkg-config .pc files. By default the directory is\n-# $libdir/pkgconfig, but the default can be changed by passing\n-# DIRECTORY. The user can override through the --with-pkgconfigdir\n-# parameter.\n-AC_DEFUN([PKG_INSTALLDIR],\n-[m4_pushdef([pkg_default], [m4_default([$1], ['${libdir}/pkgconfig'])])\n-m4_pushdef([pkg_description],\n-    [pkg-config installation directory @<:@]pkg_default[@:>@])\n-AC_ARG_WITH([pkgconfigdir],\n-    [AS_HELP_STRING([--with-pkgconfigdir], pkg_description)],,\n-    [with_pkgconfigdir=]pkg_default)\n-AC_SUBST([pkgconfigdir], [$with_pkgconfigdir])\n-m4_popdef([pkg_default])\n-m4_popdef([pkg_description])\n-]) dnl PKG_INSTALLDIR\n-\n-\n-# PKG_NOARCH_INSTALLDIR(DIRECTORY)\n-# -------------------------\n-# Substitutes the variable noarch_pkgconfigdir as the location where a\n-# module should install arch-independent pkg-config .pc files. By\n-# default the directory is $datadir/pkgconfig, but the default can be\n-# changed by passing DIRECTORY. The user can override through the\n-# --with-noarch-pkgconfigdir parameter.\n-AC_DEFUN([PKG_NOARCH_INSTALLDIR],\n-[m4_pushdef([pkg_default], [m4_default([$1], ['${datadir}/pkgconfig'])])\n-m4_pushdef([pkg_description],\n-    [pkg-config arch-independent installation directory @<:@]pkg_default[@:>@])\n-AC_ARG_WITH([noarch-pkgconfigdir],\n-    [AS_HELP_STRING([--with-noarch-pkgconfigdir], pkg_description)],,\n-    [with_noarch_pkgconfigdir=]pkg_default)\n-AC_SUBST([noarch_pkgconfigdir], [$with_noarch_pkgconfigdir])\n-m4_popdef([pkg_default])\n-m4_popdef([pkg_description])\n-]) dnl PKG_NOARCH_INSTALLDIR\n-\n-\n-# PKG_CHECK_VAR(VARIABLE, MODULE, CONFIG-VARIABLE,\n-# [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n-# -------------------------------------------\n-# Retrieves the value of the pkg-config variable for the given module.\n-AC_DEFUN([PKG_CHECK_VAR],\n-[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n-AC_ARG_VAR([$1], [value of $3 for $2, overriding pkg-config])dnl\n-\n-_PKG_CONFIG([$1], [variable=\"][$3][\"], [$2])\n-AS_VAR_COPY([$1], [pkg_cv_][$1])\n-\n-AS_VAR_IF([$1], [\"\"], [$5], [$4])dnl\n-])# PKG_CHECK_VAR"
      }
    ]
  },
  {
    "sha": "6bbca99baa50eee50d1559335a66f1b2189d456d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmJjYTk5YmFhNTBlZWU1MGQxNTU5MzM1YTY2ZjFiMjE4OWQ0NTZk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-21T06:49:14Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-01-21T18:07:28Z"
      },
      "message": "LSSharedFileListItemResolve() was deprecated in Mac OS X 10.10, use LSSharedFileListItemCopyResolvedURL() instead",
      "tree": {
        "sha": "88b3a55c3407e1767e1b56c242fc7353d1f73113",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88b3a55c3407e1767e1b56c242fc7353d1f73113"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bbca99baa50eee50d1559335a66f1b2189d456d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bbca99baa50eee50d1559335a66f1b2189d456d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bbca99baa50eee50d1559335a66f1b2189d456d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bbca99baa50eee50d1559335a66f1b2189d456d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2eda47bc37bee37e409346e4c396d59925c06250",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eda47bc37bee37e409346e4c396d59925c06250",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2eda47bc37bee37e409346e4c396d59925c06250"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "149e0da4421eb4f369ca0c552e5fdf9a26a373e8",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bbca99baa50eee50d1559335a66f1b2189d456d/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bbca99baa50eee50d1559335a66f1b2189d456d/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=6bbca99baa50eee50d1559335a66f1b2189d456d",
        "patch": "@@ -696,7 +696,18 @@ LSSharedFileListItemRef findStartupItemInList(LSSharedFileListRef list, CFURLRef\n         LSSharedFileListItemRef item = (LSSharedFileListItemRef)CFArrayGetValueAtIndex(listSnapshot, i);\n         UInt32 resolutionFlags = kLSSharedFileListNoUserInteraction | kLSSharedFileListDoNotMountVolumes;\n         CFURLRef currentItemURL = NULL;\n-        LSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, NULL);\n+\n+#if defined(MAC_OS_X_VERSION_MAX_ALLOWED) && MAC_OS_X_VERSION_MAX_ALLOWED >= 10100\n+\tif(&LSSharedFileListItemCopyResolvedURL)\n+\t    currentItemURL = LSSharedFileListItemCopyResolvedURL(item, resolutionFlags, NULL);\n+#if defined(MAC_OS_X_VERSION_MIN_REQUIRED) && MAC_OS_X_VERSION_MIN_REQUIRED < 10100\n+\telse\n+\t    LSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, NULL);\n+#endif\n+#else\n+\tLSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, NULL);\n+#endif\n+\n         if(currentItemURL && CFEqual(currentItemURL, findUrl)) {\n             // found\n             CFRelease(currentItemURL);"
      }
    ]
  },
  {
    "sha": "0eade74c783f670cb69ab982f5a828f7ff5ee0db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWFkZTc0Yzc4M2Y2NzBjYjY5YWI5ODJmNWE4MjhmN2ZmNWVlMGRi",
    "commit": {
      "author": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2015-01-23T14:01:07Z"
      },
      "committer": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2015-01-23T14:01:07Z"
      },
      "message": "fix crash: CoinControl \"space\" bug\n\nJust like https://github.com/novacoin-project/novacoin/commit/baf80c26a2e7f1ba6061d63d174eff0a09111e6f",
      "tree": {
        "sha": "5276ccd1d770a2db71838396dbb370823096555e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5276ccd1d770a2db71838396dbb370823096555e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0eade74c783f670cb69ab982f5a828f7ff5ee0db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eade74c783f670cb69ab982f5a828f7ff5ee0db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0eade74c783f670cb69ab982f5a828f7ff5ee0db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eade74c783f670cb69ab982f5a828f7ff5ee0db/comments",
    "author": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "944c256741b260bd8b758be4a0543af1cb080943",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/944c256741b260bd8b758be4a0543af1cb080943",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/944c256741b260bd8b758be4a0543af1cb080943"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5dcbf0c3f17e33c6d162b886728af46dab7b9cbc",
        "filename": "src/qt/coincontroltreewidget.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eade74c783f670cb69ab982f5a828f7ff5ee0db/src/qt/coincontroltreewidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eade74c783f670cb69ab982f5a828f7ff5ee0db/src/qt/coincontroltreewidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroltreewidget.cpp?ref=0eade74c783f670cb69ab982f5a828f7ff5ee0db",
        "patch": "@@ -17,7 +17,8 @@ void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)\n     {\n         event->ignore();\n         int COLUMN_CHECKBOX = 0;\n-        this->currentItem()->setCheckState(COLUMN_CHECKBOX, ((this->currentItem()->checkState(COLUMN_CHECKBOX) == Qt::Checked) ? Qt::Unchecked : Qt::Checked));\n+        if(this->currentItem())\n+            this->currentItem()->setCheckState(COLUMN_CHECKBOX, ((this->currentItem()->checkState(COLUMN_CHECKBOX) == Qt::Checked) ? Qt::Unchecked : Qt::Checked));\n     }\n     else if (event->key() == Qt::Key_Escape) // press esc -> close dialog\n     {\n@@ -29,4 +30,4 @@ void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)\n     {\n         this->QTreeWidget::keyPressEvent(event);\n     }\n-}\n\\ No newline at end of file\n+}"
      }
    ]
  },
  {
    "sha": "b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmFjZDQ1NjNkM2I5NmIyNDRlNjFiODdiOWYwOGMwZWI2MWVjYWE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-23T15:07:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-23T15:22:20Z"
      },
      "message": "Merge pull request #5700\n\n0eade74 fix crash: CoinControl \"space\" bug (fsb4000)",
      "tree": {
        "sha": "5276ccd1d770a2db71838396dbb370823096555e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5276ccd1d770a2db71838396dbb370823096555e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUwmcsAAoJEHSBCwEjRsmm8/UH/RS+Wal/5S0uNtAv8QcQvgSE\nrKQunix/3wV1cPMbGFEnwfZbw2ee6vwX87/VxNnjHWGTLfhLpGWVKJX9gRT4xTG7\nS0xizwtxRgYMGLVxCwE93GE78nvAE539DBm9HE8Bj/f3dpwXpHOyT0mpWL5sE1p9\n2Mw1+TIHd/9epmjZt9U4otgd2McZ2Ht22xqSeAORGisJz4+4xF4LRNc/QJuso4YX\nm0SmdVot1Uk21XO1ssYQpeDuu2F7loPxsj1/3yAHlr+1Ox81e9Gb/HaS3w0/ZUrr\nRfHG/GeZEGBRFaalsZLcOwVD/yWu3QWYyLJ54lMRoTsPniyUw1xyvQ6p2fuIIaQ=\n=BXFA\n-----END PGP SIGNATURE-----",
        "payload": "tree 5276ccd1d770a2db71838396dbb370823096555e\nparent 944c256741b260bd8b758be4a0543af1cb080943\nparent 0eade74c783f670cb69ab982f5a828f7ff5ee0db\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422025678 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422026540 +0100\n\nMerge pull request #5700\n\n0eade74 fix crash: CoinControl \"space\" bug (fsb4000)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "944c256741b260bd8b758be4a0543af1cb080943",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/944c256741b260bd8b758be4a0543af1cb080943",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/944c256741b260bd8b758be4a0543af1cb080943"
      },
      {
        "sha": "0eade74c783f670cb69ab982f5a828f7ff5ee0db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eade74c783f670cb69ab982f5a828f7ff5ee0db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0eade74c783f670cb69ab982f5a828f7ff5ee0db"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5dcbf0c3f17e33c6d162b886728af46dab7b9cbc",
        "filename": "src/qt/coincontroltreewidget.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6/src/qt/coincontroltreewidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6/src/qt/coincontroltreewidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroltreewidget.cpp?ref=b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
        "patch": "@@ -17,7 +17,8 @@ void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)\n     {\n         event->ignore();\n         int COLUMN_CHECKBOX = 0;\n-        this->currentItem()->setCheckState(COLUMN_CHECKBOX, ((this->currentItem()->checkState(COLUMN_CHECKBOX) == Qt::Checked) ? Qt::Unchecked : Qt::Checked));\n+        if(this->currentItem())\n+            this->currentItem()->setCheckState(COLUMN_CHECKBOX, ((this->currentItem()->checkState(COLUMN_CHECKBOX) == Qt::Checked) ? Qt::Unchecked : Qt::Checked));\n     }\n     else if (event->key() == Qt::Key_Escape) // press esc -> close dialog\n     {\n@@ -29,4 +30,4 @@ void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)\n     {\n         this->QTreeWidget::keyPressEvent(event);\n     }\n-}\n\\ No newline at end of file\n+}"
      }
    ]
  },
  {
    "sha": "40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGU5NmEzMDE2MGRkYzJjYjM5YmM5Yjg2ZWMxMDNhYzg5MmUwOWFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-24T14:58:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-24T15:00:40Z"
      },
      "message": "Merge pull request #5599\n\n0cc0d8d Get rid of the internal miner's hashmeter (jtimon)",
      "tree": {
        "sha": "2a8e0334553b49b83f5d908d4ede86c177e8bbcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a8e0334553b49b83f5d908d4ede86c177e8bbcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUw7OYAAoJEHSBCwEjRsmmMlkH/jrB4eRqlydsu8rcNQWr6W60\nljxZp8gerg3cxzWRgBRmbvNYouDp570cneD8A//4kW0EU5OjEcyMuuJKImDNxrI4\nxrSVJojh9W/WQbvOBGCAcWSDRPdGSZwj2j0y0Z+xFLEgHyg+DgEXDzF3PlFLCunf\nQ42Ea1acYM9NtdLaxBi7gwCUiqMi9ytUdRqAGBLMRGRbrSf57mQtCnWbGG5DX6B6\ndzCsWfwzNDaBE7JV1QIYOHF80ojZeH7Hi9y+t8LBt0Y/ZCekfeiLif3az6uSmfdN\n8kNJzwHNBCmVTZ5NDnwDsTiGYzLQf5oEhZcsaGu7hJf8b/1uU+97KB8EGkxFjv8=\n=VQ2/\n-----END PGP SIGNATURE-----",
        "payload": "tree 2a8e0334553b49b83f5d908d4ede86c177e8bbcf\nparent b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6\nparent 0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422111496 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422111640 +0100\n\nMerge pull request #5599\n\n0cc0d8d Get rid of the internal miner's hashmeter (jtimon)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6"
      },
      {
        "sha": "0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 2,
      "deletions": 65
    },
    "files": [
      {
        "sha": "5cc4a92791d556231c858825d161bc02950e5ca3",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 40,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "patch": "@@ -362,8 +362,6 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n //\n // Internal miner\n //\n-double dHashesPerSec = 0.0;\n-int64_t nHPSTimerStart = 0;\n \n //\n // ScanHash scans nonces looking for a hash with at least some zero bits.\n@@ -393,10 +391,8 @@ bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phas\n             return true;\n \n         // If nothing found after trying for a while, return -1\n-        if ((nNonce & 0xffff) == 0)\n-            return false;\n         if ((nNonce & 0xfff) == 0)\n-            boost::this_thread::interruption_point();\n+            return false;\n     }\n }\n \n@@ -483,14 +479,9 @@ void static BitcoinMiner(CWallet *pwallet)\n             arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n             uint256 hash;\n             uint32_t nNonce = 0;\n-            uint32_t nOldNonce = 0;\n             while (true) {\n-                bool fFound = ScanHash(pblock, nNonce, &hash);\n-                uint32_t nHashesDone = nNonce - nOldNonce;\n-                nOldNonce = nNonce;\n-\n                 // Check if something found\n-                if (fFound)\n+                if (ScanHash(pblock, nNonce, &hash))\n                 {\n                     if (UintToArith256(hash) <= hashTarget)\n                     {\n@@ -512,35 +503,6 @@ void static BitcoinMiner(CWallet *pwallet)\n                     }\n                 }\n \n-                // Meter hashes/sec\n-                static int64_t nHashCounter;\n-                if (nHPSTimerStart == 0)\n-                {\n-                    nHPSTimerStart = GetTimeMillis();\n-                    nHashCounter = 0;\n-                }\n-                else\n-                    nHashCounter += nHashesDone;\n-                if (GetTimeMillis() - nHPSTimerStart > 4000)\n-                {\n-                    static CCriticalSection cs;\n-                    {\n-                        LOCK(cs);\n-                        if (GetTimeMillis() - nHPSTimerStart > 4000)\n-                        {\n-                            dHashesPerSec = 1000.0 * nHashCounter / (GetTimeMillis() - nHPSTimerStart);\n-                            nHPSTimerStart = GetTimeMillis();\n-                            nHashCounter = 0;\n-                            static int64_t nLogTime;\n-                            if (GetTime() - nLogTime > 30 * 60)\n-                            {\n-                                nLogTime = GetTime();\n-                                LogPrintf(\"hashmeter %6.0f khash/s\\n\", dHashesPerSec/1000.0);\n-                            }\n-                        }\n-                    }\n-                }\n-\n                 // Check for stop or if block needs to be rebuilt\n                 boost::this_thread::interruption_point();\n                 // Regtest mode doesn't require peers"
      },
      {
        "sha": "5d5c9c86c7cc5022512745709cf925045cbfbab2",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "patch": "@@ -31,7 +31,4 @@ CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n void UpdateTime(CBlockHeader* block, const CBlockIndex* pindexPrev);\n \n-extern double dHashesPerSec;\n-extern int64_t nHPSTimerStart;\n-\n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "5df5de66d9416534012322a8e8256b1d2afb02da",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "patch": "@@ -201,24 +201,6 @@ Value setgenerate(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n-Value gethashespersec(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() != 0)\n-        throw runtime_error(\n-            \"gethashespersec\\n\"\n-            \"\\nReturns a recent hashes per second performance measurement while generating.\\n\"\n-            \"See the getgenerate and setgenerate calls to turn generation on and off.\\n\"\n-            \"\\nResult:\\n\"\n-            \"n            (numeric) The recent hashes per second when generation is on (will return 0 if generation is off)\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"gethashespersec\", \"\")\n-            + HelpExampleRpc(\"gethashespersec\", \"\")\n-        );\n-\n-    if (GetTimeMillis() - nHPSTimerStart > 8000)\n-        return (int64_t)0;\n-    return (int64_t)dHashesPerSec;\n-}\n #endif\n \n \n@@ -237,7 +219,6 @@ Value getmininginfo(const Array& params, bool fHelp)\n             \"  \\\"errors\\\": \\\"...\\\"          (string) Current errors\\n\"\n             \"  \\\"generate\\\": true|false     (boolean) If the generation is on or off (see getgenerate or setgenerate calls)\\n\"\n             \"  \\\"genproclimit\\\": n          (numeric) The processor limit for generation. -1 if no generation. (see getgenerate or setgenerate calls)\\n\"\n-            \"  \\\"hashespersec\\\": n          (numeric) The hashes per second of the generation, or 0 if no generation.\\n\"\n             \"  \\\"pooledtx\\\": n              (numeric) The size of the mem pool\\n\"\n             \"  \\\"testnet\\\": true|false      (boolean) If using testnet or not\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",         (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n@@ -260,7 +241,6 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n #ifdef ENABLE_WALLET\n     obj.push_back(Pair(\"generate\",         getgenerate(params, false)));\n-    obj.push_back(Pair(\"hashespersec\",     gethashespersec(params, false)));\n #endif\n     return obj;\n }"
      },
      {
        "sha": "e4f23d56d246968942fc02ea15228138e7a1e552",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "patch": "@@ -281,7 +281,6 @@ static const CRPCCommand vRPCCommands[] =\n #ifdef ENABLE_WALLET\n     /* Coin generation */\n     { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false,      false },\n-    { \"generating\",         \"gethashespersec\",        &gethashespersec,        true,      false,      false },\n     { \"generating\",         \"setgenerate\",            &setgenerate,            true,      true,       false },\n #endif\n "
      },
      {
        "sha": "1b94b758f243886cb6604a92b0ad92cc5b45c552",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40e96a30160ddc2cb39bc9b86ec103ac892e09ab/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "patch": "@@ -154,7 +154,6 @@ extern json_spirit::Value importwallet(const json_spirit::Array& params, bool fH\n extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getnetworkhashps(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gethashespersec(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getmininginfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value prioritisetransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getblocktemplate(const json_spirit::Array& params, bool fHelp);"
      }
    ]
  },
  {
    "sha": "e5d9d77df2de715d24638e3bab78750b7ad3e1fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWQ5ZDc3ZGYyZGU3MTVkMjQ2MzhlM2JhYjc4NzUwYjdhZDNlMWZk",
    "commit": {
      "author": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2015-01-25T12:11:57Z"
      },
      "committer": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2015-01-25T12:11:57Z"
      },
      "message": "fix crash: createmultisig and addmultisigaddress",
      "tree": {
        "sha": "5454f871108c5185d0fcfcca17afcf7a9212f931",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5454f871108c5185d0fcfcca17afcf7a9212f931"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5d9d77df2de715d24638e3bab78750b7ad3e1fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5d9d77df2de715d24638e3bab78750b7ad3e1fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5d9d77df2de715d24638e3bab78750b7ad3e1fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5d9d77df2de715d24638e3bab78750b7ad3e1fd/comments",
    "author": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40e96a30160ddc2cb39bc9b86ec103ac892e09ab"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c54b92cc962780b7625e0639c89ca14de8ff46b9",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d9d77df2de715d24638e3bab78750b7ad3e1fd/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d9d77df2de715d24638e3bab78750b7ad3e1fd/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=e5d9d77df2de715d24638e3bab78750b7ad3e1fd",
        "patch": "@@ -216,6 +216,8 @@ CScript _createmultisig_redeemScript(const Array& params)\n         throw runtime_error(\n             strprintf(\"not enough keys supplied \"\n                       \"(got %u keys, but need at least %d to redeem)\", keys.size(), nRequired));\n+    if (keys.size() > 16)\n+        throw runtime_error(\"Number of addresses involved in the multisignature address creation > 16\\nReduce the number\");\n     std::vector<CPubKey> pubkeys;\n     pubkeys.resize(keys.size());\n     for (unsigned int i = 0; i < keys.size(); i++)"
      }
    ]
  },
  {
    "sha": "14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGQwMjNmMWFlYjRmMjVhYzBmNDI3NDViM2EyOWMzZGNkNjNjODM0",
    "commit": {
      "author": {
        "name": "Earlz",
        "email": "earlz@earlz.net",
        "date": "2015-01-25T15:27:54Z"
      },
      "committer": {
        "name": "Earlz",
        "email": "earlz@earlz.net",
        "date": "2015-01-25T15:56:30Z"
      },
      "message": "change hardcoded character constants to a set of descriptive named constants for database keys",
      "tree": {
        "sha": "b4a4c16c3c4087b6fa3e611b0a167da63e0f2346",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4a4c16c3c4087b6fa3e611b0a167da63e0f2346"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834/comments",
    "author": {
      "login": "Earlz",
      "id": 371222,
      "node_id": "MDQ6VXNlcjM3MTIyMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/371222?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Earlz",
      "html_url": "https://github.com/Earlz",
      "followers_url": "https://api.github.com/users/Earlz/followers",
      "following_url": "https://api.github.com/users/Earlz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Earlz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Earlz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Earlz/subscriptions",
      "organizations_url": "https://api.github.com/users/Earlz/orgs",
      "repos_url": "https://api.github.com/users/Earlz/repos",
      "events_url": "https://api.github.com/users/Earlz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Earlz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Earlz",
      "id": 371222,
      "node_id": "MDQ6VXNlcjM3MTIyMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/371222?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Earlz",
      "html_url": "https://github.com/Earlz",
      "followers_url": "https://api.github.com/users/Earlz/followers",
      "following_url": "https://api.github.com/users/Earlz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Earlz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Earlz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Earlz/subscriptions",
      "organizations_url": "https://api.github.com/users/Earlz/orgs",
      "repos_url": "https://api.github.com/users/Earlz/repos",
      "events_url": "https://api.github.com/users/Earlz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Earlz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40e96a30160ddc2cb39bc9b86ec103ac892e09ab"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 32,
      "deletions": 21
    },
    "files": [
      {
        "sha": "f9326e5e2ea12864bb708242dc19a3087adf080c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 21,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
        "patch": "@@ -14,31 +14,42 @@\n \n using namespace std;\n \n+static const char DB_COINS = 'c';\n+static const char DB_BLOCK_FILES = 'f';\n+static const char DB_TXINDEX = 't';\n+static const char DB_BLOCK_INDEX = 'b';\n+\n+static const char DB_BEST_BLOCK = 'B';\n+static const char DB_FLAG = 'F';\n+static const char DB_REINDEX_FLAG = 'R';\n+static const char DB_LAST_BLOCK = 'l';\n+\n+\n void static BatchWriteCoins(CLevelDBBatch &batch, const uint256 &hash, const CCoins &coins) {\n     if (coins.IsPruned())\n-        batch.Erase(make_pair('c', hash));\n+        batch.Erase(make_pair(DB_COINS, hash));\n     else\n-        batch.Write(make_pair('c', hash), coins);\n+        batch.Write(make_pair(DB_COINS, hash), coins);\n }\n \n void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {\n-    batch.Write('B', hash);\n+    batch.Write(DB_BEST_BLOCK, hash);\n }\n \n CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe) {\n }\n \n bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    return db.Read(make_pair('c', txid), coins);\n+    return db.Read(make_pair(DB_COINS, txid), coins);\n }\n \n bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n-    return db.Exists(make_pair('c', txid));\n+    return db.Exists(make_pair(DB_COINS, txid));\n }\n \n uint256 CCoinsViewDB::GetBestBlock() const {\n     uint256 hashBestChain;\n-    if (!db.Read('B', hashBestChain))\n+    if (!db.Read(DB_BEST_BLOCK, hashBestChain))\n         return uint256();\n     return hashBestChain;\n }\n@@ -67,23 +78,23 @@ CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CLevel\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n-    return Read(make_pair('f', nFile), info);\n+    return Read(make_pair(DB_BLOCK_FILES, nFile), info);\n }\n \n bool CBlockTreeDB::WriteReindexing(bool fReindexing) {\n     if (fReindexing)\n-        return Write('R', '1');\n+        return Write(DB_REINDEX_FLAG, '1');\n     else\n-        return Erase('R');\n+        return Erase(DB_REINDEX_FLAG);\n }\n \n bool CBlockTreeDB::ReadReindexing(bool &fReindexing) {\n-    fReindexing = Exists('R');\n+    fReindexing = Exists(DB_REINDEX_FLAG);\n     return true;\n }\n \n bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n-    return Read('l', nFile);\n+    return Read(DB_LAST_BLOCK, nFile);\n }\n \n bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n@@ -104,7 +115,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n             CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n             char chType;\n             ssKey >> chType;\n-            if (chType == 'c') {\n+            if (chType == DB_COINS) {\n                 leveldb::Slice slValue = pcursor->value();\n                 CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n                 CCoins coins;\n@@ -142,33 +153,33 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n     CLevelDBBatch batch;\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n-        batch.Write(make_pair('f', it->first), *it->second);\n+        batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n-    batch.Write('l', nLastFile);\n+    batch.Write(DB_LAST_BLOCK, nLastFile);\n     for (std::vector<const CBlockIndex*>::const_iterator it=blockinfo.begin(); it != blockinfo.end(); it++) {\n-        batch.Write(make_pair('b', (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n+        batch.Write(make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n     }\n     return WriteBatch(batch, true);\n }\n \n bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n-    return Read(make_pair('t', txid), pos);\n+    return Read(make_pair(DB_TXINDEX, txid), pos);\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n     CLevelDBBatch batch;\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n-        batch.Write(make_pair('t', it->first), it->second);\n+        batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);\n }\n \n bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n-    return Write(std::make_pair('F', name), fValue ? '1' : '0');\n+    return Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n }\n \n bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n     char ch;\n-    if (!Read(std::make_pair('F', name), ch))\n+    if (!Read(std::make_pair(DB_FLAG, name), ch))\n         return false;\n     fValue = ch == '1';\n     return true;\n@@ -179,7 +190,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n     boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n \n     CDataStream ssKeySet(SER_DISK, CLIENT_VERSION);\n-    ssKeySet << make_pair('b', uint256());\n+    ssKeySet << make_pair(DB_BLOCK_INDEX, uint256());\n     pcursor->Seek(ssKeySet.str());\n \n     // Load mapBlockIndex\n@@ -190,7 +201,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n             CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n             char chType;\n             ssKey >> chType;\n-            if (chType == 'b') {\n+            if (chType == DB_BLOCK_INDEX) {\n                 leveldb::Slice slValue = pcursor->value();\n                 CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n                 CDiskBlockIndex diskindex;"
      }
    ]
  },
  {
    "sha": "b01a435c34f0669affece2b3d90f92c347588d69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDFhNDM1YzM0ZjA2NjlhZmZlY2UyYjNkOTBmOTJjMzQ3NTg4ZDY5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:08:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:09:11Z"
      },
      "message": "Merge pull request #5627\n\n2fa9a8e Make empty byte arrays pass CheckSignatureEncoding() (Peter Todd)",
      "tree": {
        "sha": "c552af9882211c9805a3d258e7f494560b3ab225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c552af9882211c9805a3d258e7f494560b3ab225"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b01a435c34f0669affece2b3d90f92c347588d69",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxiBXAAoJEHSBCwEjRsmmHhAIAId8vGA7WACcxK2J13yQ5XpI\nmQaYLoAFC01kpQmMSVcCXBz5nYO5A8JQBAwVpUcnjuFmo+yfMEzLbUGhQ6btV5Lr\n4tlv2+pnEbS72p4jnlCXkpEQp0M5y3DBGu51b7FUbgrm7tVZIglIWlalWJLokZAP\n17rGqjE3kdWUT4bux4wb8QXjXpyWWJESjE1s3UWyybwZET/vkfKK7VVZYQfIsHJe\nAAPnrbWwduBkwzM0/15A8z13A63m1nMCYM3nssJ4NHHM9ywbCXnRrlZbugH6SEwt\nE8tLw+gff2auy7TxCCBh6Ng0dfNGigLHLWX+afEq8uYuNDHxwpY/2igRNfDctkY=\n=Swsw\n-----END PGP SIGNATURE-----",
        "payload": "tree c552af9882211c9805a3d258e7f494560b3ab225\nparent 40e96a30160ddc2cb39bc9b86ec103ac892e09ab\nparent 2fa9a8ec86033b809a1c48f0396c3482c0d5d33c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422270491 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422270551 +0100\n\nMerge pull request #5627\n\n2fa9a8e Make empty byte arrays pass CheckSignatureEncoding() (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b01a435c34f0669affece2b3d90f92c347588d69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b01a435c34f0669affece2b3d90f92c347588d69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b01a435c34f0669affece2b3d90f92c347588d69/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40e96a30160ddc2cb39bc9b86ec103ac892e09ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40e96a30160ddc2cb39bc9b86ec103ac892e09ab"
      },
      {
        "sha": "2fa9a8ec86033b809a1c48f0396c3482c0d5d33c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fa9a8ec86033b809a1c48f0396c3482c0d5d33c"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8a06f3d1187827fc994a7f62ab7e3ad7b7d12909",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b01a435c34f0669affece2b3d90f92c347588d69/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b01a435c34f0669affece2b3d90f92c347588d69/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=b01a435c34f0669affece2b3d90f92c347588d69",
        "patch": "@@ -189,6 +189,11 @@ bool static IsDefinedHashtypeSignature(const valtype &vchSig) {\n }\n \n bool static CheckSignatureEncoding(const valtype &vchSig, unsigned int flags, ScriptError* serror) {\n+    // Empty signature. Not strictly DER encoded, but allowed to provide a\n+    // compact way to provide an invalid signature for use with CHECK(MULTI)SIG\n+    if (vchSig.size() == 0) {\n+        return true;\n+    }\n     if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsDERSignature(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     } else if ((flags & SCRIPT_VERIFY_LOW_S) != 0 && !IsLowDERSignature(vchSig, serror)) {"
      },
      {
        "sha": "9a8fe1ee889e5e59bf2ebc53ae35cac84fd2a169",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b01a435c34f0669affece2b3d90f92c347588d69/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b01a435c34f0669affece2b3d90f92c347588d69/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=b01a435c34f0669affece2b3d90f92c347588d69",
        "patch": "@@ -504,7 +504,7 @@\n     \"2-of-2 CHECKMULTISIG NOT with the first pubkey invalid, and both signatures validly encoded.\"\n ],\n [\n-    \"0 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501 0\",\n+    \"0 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501 1\",\n     \"2 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 2 CHECKMULTISIG NOT\",\n     \"STRICTENC\",\n     \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but first signature invalid.\""
      },
      {
        "sha": "a187401cd4aafd66fa84d1e53b34326b73ee0ca7",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b01a435c34f0669affece2b3d90f92c347588d69/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b01a435c34f0669affece2b3d90f92c347588d69/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=b01a435c34f0669affece2b3d90f92c347588d69",
        "patch": "@@ -662,6 +662,11 @@\n [\"0 0 0x02 0x0000\", \"CHECKMULTISIGVERIFY 1\", \"\"],\n [\"0 0x02 0x0000 0\", \"CHECKMULTISIGVERIFY 1\", \"\"],\n \n+[\"While not really correctly DER encoded, the empty signature is allowed by\"],\n+[\"STRICTENC to provide a compact way to provide a delibrately invalid signature.\"],\n+[\"0\", \"0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 CHECKSIG NOT\", \"STRICTENC\"],\n+[\"0 0\", \"1 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 1 CHECKMULTISIG NOT\", \"STRICTENC\"],\n+\n [\"CHECKMULTISIG evaluation order tests. CHECKMULTISIG evaluates signatures and\"],\n [\"pubkeys in a specific order, and will exit early if the number of signatures\"],\n [\"left to check is greater than the number of keys left. As STRICTENC fails the\"],"
      },
      {
        "sha": "9501169943d97d0c007e0ffe7159ae8d382d525c",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b01a435c34f0669affece2b3d90f92c347588d69/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b01a435c34f0669affece2b3d90f92c347588d69/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=b01a435c34f0669affece2b3d90f92c347588d69",
        "patch": "@@ -116,10 +116,6 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         }\n     }\n     s.clear();\n-    s << OP_0 << OP_0;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err));\n-    BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n-    s.clear();\n     s << OP_0 << OP_1;\n     BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));"
      }
    ]
  },
  {
    "sha": "8204e19abed6c6ee8dca4a00943abfc52ea68fab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjA0ZTE5YWJlZDZjNmVlOGRjYTRhMDA5NDNhYmZjNTJlYTY4ZmFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:18:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:19:12Z"
      },
      "message": "Merge pull request #4805\n\n44bc988 [Wallet] Do not flush the wallet in AddToWalletIfInvolvingMe(..) (Cozz Lovan)",
      "tree": {
        "sha": "630099e9f695ed98b34cc0f4be992bb581c98a19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/630099e9f695ed98b34cc0f4be992bb581c98a19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8204e19abed6c6ee8dca4a00943abfc52ea68fab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxiKwAAoJEHSBCwEjRsmmRZMH/iK//QAAkqf0vnuEYILORm6R\n0ur9EjBAo8hJTUx7myW+zuxke/kGfflE8RAjgHFhoDO0j3QAyKWIriHlP94VqNy0\n8RTbwp0XSivFKwkYOBunJkS1P8Nehh5stNUSYcaeJASeVzH9wn+luLa+7gBKzS2/\nJTO2HSyqY7hhPr9ErGyzwm5fq2YY+0U7N+KNE7qO6TOnkCKiKyi7YC0PjF7GwCyc\nkhVIErCHO5WHAH9B5rZHiLrVJS94LtjT7xwJTZGeI1YcGAshmTYbmfurwhhtMIm4\nJO6o0XqWZhHrQLCYj7TFxrBlptoNAWoAah55vn7d2wt4VbpOMLNH8JrlCbv/jBk=\n=DrPv\n-----END PGP SIGNATURE-----",
        "payload": "tree 630099e9f695ed98b34cc0f4be992bb581c98a19\nparent b01a435c34f0669affece2b3d90f92c347588d69\nparent 44bc988e7becb492a78ed92ea1052f4789012534\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422271122 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422271152 +0100\n\nMerge pull request #4805\n\n44bc988 [Wallet] Do not flush the wallet in AddToWalletIfInvolvingMe(..) (Cozz Lovan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8204e19abed6c6ee8dca4a00943abfc52ea68fab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8204e19abed6c6ee8dca4a00943abfc52ea68fab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8204e19abed6c6ee8dca4a00943abfc52ea68fab/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b01a435c34f0669affece2b3d90f92c347588d69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b01a435c34f0669affece2b3d90f92c347588d69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b01a435c34f0669affece2b3d90f92c347588d69"
      },
      {
        "sha": "44bc988e7becb492a78ed92ea1052f4789012534",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44bc988e7becb492a78ed92ea1052f4789012534",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44bc988e7becb492a78ed92ea1052f4789012534"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 30,
      "deletions": 19
    },
    "files": [
      {
        "sha": "7b51707f60430fe88b6dfdad2284358cbf756dc4",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -217,10 +217,11 @@ void CDBEnv::CheckpointLSN(const std::string& strFile)\n }\n \n \n-CDB::CDB(const std::string& strFilename, const char* pszMode) : pdb(NULL), activeTxn(NULL)\n+CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnCloseIn) : pdb(NULL), activeTxn(NULL)\n {\n     int ret;\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n+    fFlushOnClose = fFlushOnCloseIn;\n     if (strFilename.empty())\n         return;\n \n@@ -297,7 +298,8 @@ void CDB::Close()\n     activeTxn = NULL;\n     pdb = NULL;\n \n-    Flush();\n+    if (fFlushOnClose)\n+        Flush();\n \n     {\n         LOCK(bitdb.cs_db);"
      },
      {
        "sha": "d208907c89618a85936dd640333d378ca2a9c14b",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -97,8 +97,9 @@ class CDB\n     std::string strFile;\n     DbTxn* activeTxn;\n     bool fReadOnly;\n+    bool fFlushOnClose;\n \n-    explicit CDB(const std::string& strFilename, const char* pszMode = \"r+\");\n+    explicit CDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n     ~CDB() { Close(); }\n \n public:"
      },
      {
        "sha": "828c525dcbb1d702e2c6c27d870e10116e75c744",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -1211,6 +1211,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n             // Restore wallet transaction metadata after -zapwallettxes=1\n             if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n             {\n+                CWalletDB walletdb(strWalletFile);\n+\n                 BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n                 {\n                     uint256 hash = wtxOld.GetHash();\n@@ -1226,7 +1228,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n                         copyTo->fFromMe = copyFrom->fFromMe;\n                         copyTo->strFromAccount = copyFrom->strFromAccount;\n                         copyTo->nOrderPos = copyFrom->nOrderPos;\n-                        copyTo->WriteToDisk();\n+                        copyTo->WriteToDisk(&walletdb);\n                     }\n                 }\n             }"
      },
      {
        "sha": "da07b8c7a64094a2d2f18eb8a284744d974b97e7",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -46,7 +46,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     walletdb.WriteAccountingEntry(ae);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n-    pwalletMain->AddToWallet(wtx);\n+    pwalletMain->AddToWallet(wtx, false, &walletdb);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n@@ -88,7 +88,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx);\n+    pwalletMain->AddToWallet(wtx, false, &walletdb);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n@@ -98,7 +98,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx);\n+    pwalletMain->AddToWallet(wtx, false, &walletdb);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;"
      },
      {
        "sha": "1fe05521093aab4cb688298a79b2450a23c554e3",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -555,7 +555,7 @@ void CWallet::MarkDirty()\n     }\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n+bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb)\n {\n     uint256 hash = wtxIn.GetHash();\n \n@@ -576,7 +576,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n         if (fInsertedNew)\n         {\n             wtx.nTimeReceived = GetAdjustedTime();\n-            wtx.nOrderPos = IncOrderPosNext();\n+            wtx.nOrderPos = IncOrderPosNext(pwalletdb);\n \n             wtx.nTimeSmart = wtx.nTimeReceived;\n             if (!wtxIn.hashBlock.IsNull())\n@@ -653,7 +653,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n \n         // Write to disk\n         if (fInsertedNew || fUpdated)\n-            if (!wtx.WriteToDisk())\n+            if (!wtx.WriteToDisk(pwalletdb))\n                 return false;\n \n         // Break debit/credit balance caches:\n@@ -689,10 +689,16 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n             CWalletTx wtx(this,tx);\n+\n             // Get merkle branch if transaction was found in a block\n             if (pblock)\n                 wtx.SetMerkleBranch(*pblock);\n-            return AddToWallet(wtx);\n+\n+            // Do not flush the wallet here for performance reasons\n+            // this is safe, as in case of a crash, we rescan the necessary blocks on startup through our SetBestChain-mechanism\n+            CWalletDB walletdb(strWalletFile, \"r+\", false);\n+\n+            return AddToWallet(wtx, false, &walletdb);\n         }\n     }\n     return false;\n@@ -916,9 +922,9 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, CAmount& nReceived,\n }\n \n \n-bool CWalletTx::WriteToDisk()\n+bool CWalletTx::WriteToDisk(CWalletDB *pwalletdb)\n {\n-    return CWalletDB(pwallet->strWalletFile).WriteTx(GetHash(), *this);\n+    return pwalletdb->WriteTx(GetHash(), *this);\n }\n \n /**\n@@ -1581,14 +1587,14 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n             // This is only to keep the database open to defeat the auto-flush for the\n             // duration of this scope.  This is the only place where this optimization\n             // maybe makes sense; please don't do it anywhere else.\n-            CWalletDB* pwalletdb = fFileBacked ? new CWalletDB(strWalletFile,\"r\") : NULL;\n+            CWalletDB* pwalletdb = fFileBacked ? new CWalletDB(strWalletFile,\"r+\") : NULL;\n \n             // Take key pair from key pool so it won't be used again\n             reservekey.KeepKey();\n \n             // Add tx to wallet, because if it has change it's also ours,\n             // otherwise just for transaction history.\n-            AddToWallet(wtxNew);\n+            AddToWallet(wtxNew, false, pwalletdb);\n \n             // Notify that old coins are spent\n             set<CWalletTx*> setCoins;"
      },
      {
        "sha": "f9cbd3a849ba6eec41d24dd14097ad456e321eb9",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -275,7 +275,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     TxItems OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount = \"\");\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet=false);\n+    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n     void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     void EraseFromWallet(const uint256 &hash);\n@@ -903,7 +903,7 @@ class CWalletTx : public CMerkleTx\n         return true;\n     }\n \n-    bool WriteToDisk();\n+    bool WriteToDisk(CWalletDB *pwalletdb);\n \n     int64_t GetTxTime() const;\n     int GetRequestCount() const;"
      },
      {
        "sha": "d4d2e1674053d5858cc82de61e761802ca965eab",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -395,7 +395,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             if (wtx.nOrderPos == -1)\n                 wss.fAnyUnordered = true;\n \n-            pwallet->AddToWallet(wtx, true);\n+            pwallet->AddToWallet(wtx, true, NULL);\n         }\n         else if (strType == \"acentry\")\n         {"
      },
      {
        "sha": "2627ef71a607fdf232b95073a2e5f4d84c081db1",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8204e19abed6c6ee8dca4a00943abfc52ea68fab/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "patch": "@@ -76,7 +76,7 @@ class CKeyMetadata\n class CWalletDB : public CDB\n {\n public:\n-    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\") : CDB(strFilename, pszMode)\n+    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnClose = true) : CDB(strFilename, pszMode, fFlushOnClose)\n     {\n     }\n "
      }
    ]
  },
  {
    "sha": "2fae1875ea9e44c46d6cc3e679b5500f4c783ea4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmFlMTg3NWVhOWU0NGM0NmQ2Y2MzZTY3OWI1NTAwZjRjNzgzZWE0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:29:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:29:15Z"
      },
      "message": "Merge pull request #5243\n\nff09e31 sleep-wait on genesis block during init with -reindex (Matt Corallo)",
      "tree": {
        "sha": "806a5fedc0cd300b82e6e4bb3dfac9dbfa8afc67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/806a5fedc0cd300b82e6e4bb3dfac9dbfa8afc67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxiULAAoJEHSBCwEjRsmmXv0H/1byAZTbL1IRc6qdt6fJNmrg\nstEF6k3fJhc3MpXx93CLaGw+hrpuE9vknqzK6MFQyXBk6wASIuXZfR6lqoluQvUq\n9dmdXXN4H4AZtBt6aawKZY1MEgqiZFt95DRZj4bgX2kwd71XyvQMIyEoL0r0qAHu\nCBzuokKJ4h47L0zRDClay1bTgHIbwqrv4mCrhcLTgR6mol/VbRIhh5LcURnlVcMn\nRtZBtj4ibIhlgZCEMh/w6CK7M1vEZq8PgdNq2/BH1iOdlq2zV1Mo0BUiUBovI+RJ\nrkbz8Q2jhbwBAYBrfoRNuV/xrcE2rwQKsPA2ayWbnJOnaXmc+mrNZIFExo/vksc=\n=s9SD\n-----END PGP SIGNATURE-----",
        "payload": "tree 806a5fedc0cd300b82e6e4bb3dfac9dbfa8afc67\nparent 8204e19abed6c6ee8dca4a00943abfc52ea68fab\nparent ff09e31a51dcee404c9c037c7c5f50c522e67ea8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422271746 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422271755 +0100\n\nMerge pull request #5243\n\nff09e31 sleep-wait on genesis block during init with -reindex (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8204e19abed6c6ee8dca4a00943abfc52ea68fab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8204e19abed6c6ee8dca4a00943abfc52ea68fab"
      },
      {
        "sha": "ff09e31a51dcee404c9c037c7c5f50c522e67ea8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff09e31a51dcee404c9c037c7c5f50c522e67ea8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff09e31a51dcee404c9c037c7c5f50c522e67ea8"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "aaa5f06c7523e206183c004a0f4a5d1cc24ec85c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2fae1875ea9e44c46d6cc3e679b5500f4c783ea4",
        "patch": "@@ -1254,6 +1254,11 @@ bool AppInit2(boost::thread_group& threadGroup)\n             vImportFiles.push_back(strFile);\n     }\n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n+    if (chainActive.Tip() == NULL) {\n+        LogPrintf(\"Waiting for genesis block to be imported...\\n\");\n+        while (!fRequestShutdown && chainActive.Tip() == NULL)\n+            MilliSleep(10);\n+    }\n \n     // ********************************************************* Step 10: start node\n "
      }
    ]
  },
  {
    "sha": "ca7880358c2be56935e861f2212967ecb1123c05",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTc4ODAzNThjMmJlNTY5MzVlODYxZjIyMTI5NjdlY2IxMTIzYzA1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:35:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:35:32Z"
      },
      "message": "Merge pull request #5628\n\n785bb81 [Qt] remove size grip to get rid of the right margin (Jonas Schnelli)",
      "tree": {
        "sha": "b5844a49292b916043786801aaf4ca52abd95f8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5844a49292b916043786801aaf4ca52abd95f8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca7880358c2be56935e861f2212967ecb1123c05",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxiaEAAoJEHSBCwEjRsmmDOcIAJaMVfGeg/mj4o3rHfmJYS8a\nhaKsHKBFqnFn9wwvtKIfPLdHHTrx313nEKsEpxTmRMCv1DfustlIvOYS9W//Xb5z\nNu4Pe+COIhi6EaLUmdDJwtw7n8AmTcYY2HWLBPXDelM8UgzAv6w2Bv8aVnNi7z8h\nxd2SD7OIfc6TIgbiG2MZKIbiH2y6Ue6hec+dBxMVAemaspfMbW1j6OLKIt3Ka6JE\n+6CrFRaU2wRCfaMFqyNM1QfuRWlhrYYC+UaJwHFRP9PXPzj7SLLlCZNXdTNNucGp\nWZo9YvgSfJNfcJ4kprbJOMzAwOw5KAIFQrjiZNda21OQdrj+j0QBq2AhyOAt5Co=\n=PHpQ\n-----END PGP SIGNATURE-----",
        "payload": "tree b5844a49292b916043786801aaf4ca52abd95f8b\nparent 2fae1875ea9e44c46d6cc3e679b5500f4c783ea4\nparent 785bb81c6bc672b55ca20910d2d9599986903753\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422272123 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422272132 +0100\n\nMerge pull request #5628\n\n785bb81 [Qt] remove size grip to get rid of the right margin (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca7880358c2be56935e861f2212967ecb1123c05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca7880358c2be56935e861f2212967ecb1123c05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca7880358c2be56935e861f2212967ecb1123c05/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fae1875ea9e44c46d6cc3e679b5500f4c783ea4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fae1875ea9e44c46d6cc3e679b5500f4c783ea4"
      },
      {
        "sha": "785bb81c6bc672b55ca20910d2d9599986903753",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/785bb81c6bc672b55ca20910d2d9599986903753",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/785bb81c6bc672b55ca20910d2d9599986903753"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "09f784387ea78315937fb58e77f8d3a3bd7ccf27",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7880358c2be56935e861f2212967ecb1123c05/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7880358c2be56935e861f2212967ecb1123c05/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=ca7880358c2be56935e861f2212967ecb1123c05",
        "patch": "@@ -164,6 +164,9 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n \n     // Create status bar\n     statusBar();\n+    \n+    // Disable size grip because it looks ugly and nobody needs it\n+    statusBar()->setSizeGripEnabled(false);\n \n     // Status bar notification icons\n     QFrame *frameBlocks = new QFrame();"
      }
    ]
  },
  {
    "sha": "ab0d7987c0f928436c1ba32411a2199938cb8325",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjBkNzk4N2MwZjkyODQzNmMxYmEzMjQxMWEyMTk5OTM4Y2I4MzI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:36:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:36:41Z"
      },
      "message": "Merge pull request #5626\n\n652eb90 [Qt] change transaction table column width (Jonas Schnelli)\naf95b17 [Qt] resize oversized icons (Jonas Schnelli)",
      "tree": {
        "sha": "3c39221847b097275ec465d6a39c159c02305330",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c39221847b097275ec465d6a39c159c02305330"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab0d7987c0f928436c1ba32411a2199938cb8325",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxibJAAoJEHSBCwEjRsmmmSUH/RuN6qIPnTeKOLtmRy7WbBBd\nZ2YNdOZ+rVgSymFo93ZdlnKbCChhJBx+QXPEMKvmq18bkmlqhkGbcDIWMS+ZL2aS\nEqdGRc4O7b+vXGYomR61Vmlv6TetXBHsNMbceyzFA7BSISjyxLrO/9IHjyDXO8Bz\nF7w6r2q0YFH88K1BDrFJja/1uFgj5IeSttPEVOxQRUYestUN3SUhjvyPE32/c7qv\nTis3vfvtsRfRswxUqOa9pFBzwJZjBil/qseuf68DrJKxzxGhD+hiT+gtd6dsO98c\n5s42qEOSOXGamK5Dd4UPNtA1FFFWW5NQvBuay8VbtTGzCwWbvvjs1rzdXUzB/YI=\n=V+SB\n-----END PGP SIGNATURE-----",
        "payload": "tree 3c39221847b097275ec465d6a39c159c02305330\nparent ca7880358c2be56935e861f2212967ecb1123c05\nparent 652eb904df301efff271274624faba16b7539311\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422272196 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422272201 +0100\n\nMerge pull request #5626\n\n652eb90 [Qt] change transaction table column width (Jonas Schnelli)\naf95b17 [Qt] resize oversized icons (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab0d7987c0f928436c1ba32411a2199938cb8325",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab0d7987c0f928436c1ba32411a2199938cb8325",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab0d7987c0f928436c1ba32411a2199938cb8325/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca7880358c2be56935e861f2212967ecb1123c05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca7880358c2be56935e861f2212967ecb1123c05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca7880358c2be56935e861f2212967ecb1123c05"
      },
      {
        "sha": "652eb904df301efff271274624faba16b7539311",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/652eb904df301efff271274624faba16b7539311",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/652eb904df301efff271274624faba16b7539311"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1442b4e85e99d1d716c6baa611991b68d701c3ac",
        "filename": "src/qt/res/icons/add.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab0d7987c0f928436c1ba32411a2199938cb8325/src/qt/res/icons/add.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab0d7987c0f928436c1ba32411a2199938cb8325/src/qt/res/icons/add.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/add.png?ref=ab0d7987c0f928436c1ba32411a2199938cb8325"
      },
      {
        "sha": "779cca1d52043c8b92a65b13e55319053260e7ec",
        "filename": "src/qt/res/icons/filesave.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab0d7987c0f928436c1ba32411a2199938cb8325/src/qt/res/icons/filesave.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab0d7987c0f928436c1ba32411a2199938cb8325/src/qt/res/icons/filesave.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/filesave.png?ref=ab0d7987c0f928436c1ba32411a2199938cb8325"
      },
      {
        "sha": "092d919042691cc5d50ef724a140aca2deff571f",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab0d7987c0f928436c1ba32411a2199938cb8325/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab0d7987c0f928436c1ba32411a2199938cb8325/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=ab0d7987c0f928436c1ba32411a2199938cb8325",
        "patch": "@@ -49,10 +49,10 @@ class TransactionView : public QWidget\n     };\n \n     enum ColumnWidths {\n-        STATUS_COLUMN_WIDTH = 23,\n+        STATUS_COLUMN_WIDTH = 30,\n         WATCHONLY_COLUMN_WIDTH = 23,\n         DATE_COLUMN_WIDTH = 120,\n-        TYPE_COLUMN_WIDTH = 120,\n+        TYPE_COLUMN_WIDTH = 113,\n         AMOUNT_MINIMUM_COLUMN_WIDTH = 120,\n         MINIMUM_COLUMN_WIDTH = 23\n     };"
      }
    ]
  },
  {
    "sha": "2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTExYTM5Y2NhNzhjM2NhMjgxYWQ2ZmU2ZDM4MWNiYjFmNjZjODQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:38:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:38:22Z"
      },
      "message": "Merge pull request #5575\n\n7b782f5 RPCWallet: Notate all account stuff as deprecated (Luke Dashjr)",
      "tree": {
        "sha": "42de04688ad1d5cfa796d2af317582e99576e7a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42de04688ad1d5cfa796d2af317582e99576e7a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxicuAAoJEHSBCwEjRsmmXyAH/2mnGetcOMAvcROrv8R9TyjS\nomOiXYvF0F8MX7TxxaAdEG6zFgUrBpdrzdslsZTsJjqplOebfTRE4BcPl4ajGjxm\nDekuK+x58bddFzm3QmtIkbhsvdH8u9XpsHVXfL4nMUQrJR8K+s4mdi0EBzHvZpAW\nAsMHQYrhoRK1nUJOwzyrIgaJ4nRs04HJ+J7BiEEIN4sGU6pb+NCYpjcfMcMkWWT/\nhz7H6lTete5We8sCbaO+n/NR0qjns7u5h6BG1xPx+7J4Nw5IRtzaHxpN7WTccd38\ndLyHBxTRNL6vf/COX59fGWuhJYPitAFq4dQtncvOdInbBnoyJupY/8S6ZwvT//E=\n=ithW\n-----END PGP SIGNATURE-----",
        "payload": "tree 42de04688ad1d5cfa796d2af317582e99576e7a8\nparent ab0d7987c0f928436c1ba32411a2199938cb8325\nparent 7b782f5b01f4c2d906a28800d01ffd05ad257cbe\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422272290 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422272302 +0100\n\nMerge pull request #5575\n\n7b782f5 RPCWallet: Notate all account stuff as deprecated (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab0d7987c0f928436c1ba32411a2199938cb8325",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab0d7987c0f928436c1ba32411a2199938cb8325",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab0d7987c0f928436c1ba32411a2199938cb8325"
      },
      {
        "sha": "7b782f5b01f4c2d906a28800d01ffd05ad257cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b782f5b01f4c2d906a28800d01ffd05ad257cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b782f5b01f4c2d906a28800d01ffd05ad257cbe"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 46,
      "deletions": 55
    },
    "files": [
      {
        "sha": "c225b9f3e95f4772097992439c53f7dc96e57ee5",
        "filename": "contrib/debian/manpages/bitcoind.1",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/contrib/debian/manpages/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/contrib/debian/manpages/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoind.1?ref=2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
        "patch": "@@ -85,19 +85,19 @@ This help message\n Safely copies *wallet.dat* to 'destination', which can be a directory or a path with filename.\n .TP\n \\fBgetaccount 'bitcoinaddress'\\fR\n-Returns the account associated with the given address.\n+DEPRECATED. Returns the account associated with the given address.\n .TP\n \\fBsetaccount 'bitcoinaddress' ['account']\\fR\n-Sets the ['account'] associated with the given address. ['account'] may be omitted to remove an address from ['account'].\n+DEPRECATED. Sets the ['account'] associated with the given address. ['account'] may be omitted to remove an address from ['account'].\n .TP\n \\fBgetaccountaddress 'account'\\fR\n-Returns a new bitcoin address for 'account'.\n+DEPRECATED. Returns a new bitcoin address for 'account'.\n .TP\n \\fBgetaddressesbyaccount 'account'\\fR\n-Returns the list of addresses associated with the given 'account'.\n+DEPRECATED. Returns the list of addresses associated with the given 'account'.\n .TP\n \\fBgetbalance 'account'\\fR\n-Returns the server's available balance, or the balance for 'account'.\n+Returns the server's available balance, or the balance for 'account' (accounts are deprecated).\n .TP\n \\fBgetblockcount\\fR\n Returns the number of blocks in the longest block chain.\n@@ -124,10 +124,10 @@ Returns a recent hashes per second performance measurement while generating.\n Returns an object containing server information.\n .TP\n \\fBgetnewaddress 'account'\\fR\n-Returns a new bitcoin address for receiving payments. If 'account' is specified (recommended), it is added to the address book so payments received with the address will be credited to 'account'.\n+Returns a new bitcoin address for receiving payments. If 'account' is specified (deprecated), it is added to the address book so payments received with the address will be credited to 'account'.\n .TP\n \\fBgetreceivedbyaccount 'account' ['minconf=1']\\fR\n-Returns the total amount received by addresses associated with 'account' in transactions with at least ['minconf'] confirmations.\n+DEPRECATED. Returns the total amount received by addresses associated with 'account' in transactions with at least ['minconf'] confirmations.\n .TP\n \\fBgetreceivedbyaddress 'bitcoinaddress' ['minconf=1']\\fR\n Returns the total amount received by 'bitcoinaddress' in transactions with at least ['minconf'] confirmations.\n@@ -147,21 +147,21 @@ If 'data' is specified, tries to solve the block and returns true if it was succ\n List commands, or get help for a command.\n .TP\n \\fBlistaccounts ['minconf=1']\\fR\n-List accounts and their current balances.\n+DEPRECATED. List accounts and their current balances.\n      *note: requires bitcoin 0.3.20 or later.\n .TP\n \\fBlistreceivedbyaccount ['minconf=1'] ['includeempty=false']\\fR\n ['minconf'] is the minimum number of confirmations before payments are included. ['includeempty'] whether to include addresses that haven't received any payments. Returns an array of objects containing:\n \n-    \"account\"       : the account of the receiving address.\n+    \"account\"       : DEPRECATED. the account of the receiving address.\n     \"amount\"        : total amount received by the address.\n     \"confirmations\" : number of confirmations of the most recent transaction included.\n .TP\n \\fBlistreceivedbyaddress ['minconf=1'] ['includeempty=false']\\fR\n ['minconf'] is the minimum number of confirmations before payments are included. ['includeempty'] whether to include addresses that haven't received any payments. Returns an array of objects containing:\n \n     \"address\"       : receiving address.\n-    \"account\"       : the account of the receiving address.\n+    \"account\"       : DEPRECATED. the account of the receiving address.\n     \"amount\"        : total amount received by the address.\n     \"confirmations\" : number of confirmations of the most recent transaction included.\n .TP\n@@ -180,10 +180,10 @@ Returns a list of the last ['count'] transactions for 'account' \\- for all accou\n     *note: requires bitcoin 0.3.20 or later.\n .TP\n \\fBmove <'fromaccount'> <'toaccount'> <'amount'> ['minconf=1'] ['comment']\\fR\n-Moves funds between accounts.\n+DEPRECATED. Moves funds between accounts.\n .TP\n \\fBsendfrom* <'account'> <'bitcoinaddress'> <'amount'> ['minconf=1'] ['comment'] ['comment-to']\\fR\n-Sends amount from account's balance to 'bitcoinaddress'. This method will fail if there is less than amount bitcoins with ['minconf'] confirmations in the account's balance (unless account is the empty-string-named default account; it behaves like the *sendtoaddress* method). Returns transaction ID on success.\n+DEPRECATED. Sends amount from account's balance to 'bitcoinaddress'. This method will fail if there is less than amount bitcoins with ['minconf'] confirmations in the account's balance (unless account is the empty-string-named default account; it behaves like the *sendtoaddress* method). Returns transaction ID on success.\n .TP     \n \\fBsendtoaddress 'bitcoinaddress' 'amount' ['comment'] ['comment-to']\\fR\n Sends amount from the server's available balance to 'bitcoinaddress'. amount is a real and is rounded to the nearest 0.01. Returns transaction id on success."
      },
      {
        "sha": "3d647a0d2d13114350294925e1b74cfcc43c9f1e",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
        "patch": "@@ -165,7 +165,7 @@ Value validateaddress(const Array& params, bool fHelp)\n             \"  \\\"isscript\\\" : true|false,        (boolean) If the key is a script\\n\"\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n             \"  \\\"iscompressed\\\" : true|false,    (boolean) If the address is compressed\\n\"\n-            \"  \\\"account\\\" : \\\"account\\\"         (string) The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")"
      },
      {
        "sha": "2b108bf588826297e0f0636c8f5f9d133c528e68",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
        "patch": "@@ -216,7 +216,7 @@ Value listunspent(const Array& params, bool fHelp)\n             \"    \\\"txid\\\" : \\\"txid\\\",        (string) the transaction id \\n\"\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n             \"    \\\"address\\\" : \\\"address\\\",  (string) the bitcoin address\\n\"\n-            \"    \\\"account\\\" : \\\"account\\\",  (string) The associated account, or \\\"\\\" for the default account\\n\"\n+            \"    \\\"account\\\" : \\\"account\\\",  (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\", (string) the script key\\n\"\n             \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in btc\\n\"\n             \"    \\\"confirmations\\\" : n       (numeric) The number of confirmations\\n\""
      },
      {
        "sha": "6ad3ee54d564ec9b33fd5213466fcb3e46152bf7",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 41,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2511a39cca78c3ca281ad6fe6d381cbb1f66c843/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
        "patch": "@@ -79,17 +79,15 @@ Value getnewaddress(const Array& params, bool fHelp)\n         throw runtime_error(\n             \"getnewaddress ( \\\"account\\\" )\\n\"\n             \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n-            \"If 'account' is specified (recommended), it is added to the address book \\n\"\n+            \"If 'account' is specified (DEPRECATED), it is added to the address book \\n\"\n             \"so payments received with the address will be credited to 'account'.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"        (string, optional) The account name for the address to be linked to. if not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n+            \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. if not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"bitcoinaddress\\\"    (string) The new bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getnewaddress\", \"\")\n-            + HelpExampleCli(\"getnewaddress\", \"\\\"\\\"\")\n-            + HelpExampleCli(\"getnewaddress\", \"\\\"myaccount\\\"\")\n-            + HelpExampleRpc(\"getnewaddress\", \"\\\"myaccount\\\"\")\n+            + HelpExampleRpc(\"getnewaddress\", \"\")\n         );\n \n     // Parse the account first so we don't generate a key if there's an error\n@@ -154,7 +152,7 @@ Value getaccountaddress(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"getaccountaddress \\\"account\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this account.\\n\"\n+            \"\\nDEPRECATED. Returns the current Bitcoin address for receiving payments to this account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"       (string, required) The account name for the address. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n@@ -212,7 +210,7 @@ Value setaccount(const Array& params, bool fHelp)\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n             \"setaccount \\\"bitcoinaddress\\\" \\\"account\\\"\\n\"\n-            \"\\nSets the account associated with the given address.\\n\"\n+            \"\\nDEPRECATED. Sets the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an account.\\n\"\n             \"2. \\\"account\\\"         (string, required) The account to assign the address to.\\n\"\n@@ -254,7 +252,7 @@ Value getaccount(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"getaccount \\\"bitcoinaddress\\\"\\n\"\n-            \"\\nReturns the account associated with the given address.\\n\"\n+            \"\\nDEPRECATED. Returns the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for account lookup.\\n\"\n             \"\\nResult:\\n\"\n@@ -281,7 +279,7 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"getaddressesbyaccount \\\"account\\\"\\n\"\n-            \"\\nReturns the list of addresses for the given account.\\n\"\n+            \"\\nDEPRECATED. Returns the list of addresses for the given account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"  (string, required) The account name.\\n\"\n             \"\\nResult:\\n\"\n@@ -400,7 +398,7 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n             \"    [\\n\"\n             \"      \\\"bitcoinaddress\\\",     (string) The bitcoin address\\n\"\n             \"      amount,                 (numeric) The amount in btc\\n\"\n-            \"      \\\"account\\\"             (string, optional) The account\\n\"\n+            \"      \\\"account\\\"             (string, optional) The account (DEPRECATED)\\n\"\n             \"    ]\\n\"\n             \"    ,...\\n\"\n             \"  ]\\n\"\n@@ -542,7 +540,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n             \"getreceivedbyaccount \\\"account\\\" ( minconf )\\n\"\n-            \"\\nReturns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.\\n\"\n+            \"\\nDEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"      (string, required) The selected account, may be the default account using \\\"\\\".\\n\"\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n@@ -627,26 +625,22 @@ Value getbalance(const Array& params, bool fHelp)\n         throw runtime_error(\n             \"getbalance ( \\\"account\\\" minconf includeWatchonly )\\n\"\n             \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n-            \"If account is specified, returns the balance in the account.\\n\"\n+            \"If account is specified (DEPRECATED), returns the balance in the account.\\n\"\n             \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n             \"The server total may be different to the balance in the default \\\"\\\" account.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"      (string, optional) The selected account, or \\\"*\\\" for entire wallet. It may be the default account using \\\"\\\".\\n\"\n+            \"1. \\\"account\\\"      (string, optional) DEPRECATED. The selected account, or \\\"*\\\" for entire wallet. It may be the default account using \\\"\\\".\\n\"\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in btc received for this account.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nThe total amount in the server across all accounts\\n\"\n+            \"\\nThe total amount in the wallet\\n\"\n             + HelpExampleCli(\"getbalance\", \"\") +\n-            \"\\nThe total amount in the server across all accounts, with at least 5 confirmations\\n\"\n+            \"\\nThe total amount in the wallet at least 5 blocks confirmed\\n\"\n             + HelpExampleCli(\"getbalance\", \"\\\"*\\\" 6\") +\n-            \"\\nThe total amount in the default account with at least 1 confirmation\\n\"\n-            + HelpExampleCli(\"getbalance\", \"\\\"\\\"\") +\n-            \"\\nThe total amount in the account named tabby with at least 6 confirmations\\n\"\n-            + HelpExampleCli(\"getbalance\", \"\\\"tabby\\\" 6\") +\n             \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"getbalance\", \"\\\"tabby\\\", 6\")\n+            + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n         );\n \n     if (params.size() == 0)\n@@ -710,7 +704,7 @@ Value movecmd(const Array& params, bool fHelp)\n     if (fHelp || params.size() < 3 || params.size() > 5)\n         throw runtime_error(\n             \"move \\\"fromaccount\\\" \\\"toaccount\\\" amount ( minconf \\\"comment\\\" )\\n\"\n-            \"\\nMove a specified amount from one account in your wallet to another.\\n\"\n+            \"\\nDEPRECATED. Move a specified amount from one account in your wallet to another.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"   (string, required) The name of the account to move funds from. May be the default account using \\\"\\\".\\n\"\n             \"2. \\\"toaccount\\\"     (string, required) The name of the account to move funds to. May be the default account using \\\"\\\".\\n\"\n@@ -775,7 +769,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     if (fHelp || params.size() < 3 || params.size() > 6)\n         throw runtime_error(\n             \"sendfrom \\\"fromaccount\\\" \\\"tobitcoinaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment-to\\\" )\\n\"\n-            \"\\nSent an amount from an account to a bitcoin address.\\n\"\n+            \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.\\n\"\n             \"The amount is a real and is rounded to the nearest 0.00000001.\"\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n@@ -836,7 +830,7 @@ Value sendmany(const Array& params, bool fHelp)\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"fromaccount\\\"         (string, required) The account to send the funds from, can be \\\"\\\" for the default account\\n\"\n+            \"1. \\\"fromaccount\\\"         (string, required) DEPRECATED. The account to send the funds from. Should be \\\"\\\" for the default account\\n\"\n             \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n             \"    {\\n\"\n             \"      \\\"address\\\":amount   (numeric) The bitcoin address is the key, the numeric amount in btc is the value\\n\"\n@@ -849,11 +843,11 @@ Value sendmany(const Array& params, bool fHelp)\n             \"                                    the number of addresses.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nSend two amounts to two different addresses:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"tabby\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\"\") +\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\"\") +\n             \"\\nSend two amounts to two different addresses setting the confirmation and comment:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"tabby\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"sendmany\", \"\\\"tabby\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n+            + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n         );\n \n     string strAccount = AccountFromValue(params[0]);\n@@ -918,7 +912,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n         string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( \\\"account\\\" )\\n\"\n             \"\\nAdd a nrequired-to-sign multisignature address to the wallet.\\n\"\n             \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n-            \"If 'account' is specified, assign address to that account.\\n\"\n+            \"If 'account' is specified (DEPRECATED), assign address to that account.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n@@ -927,7 +921,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n             \"       \\\"address\\\"  (string) bitcoin address or hex-encoded public key\\n\"\n             \"       ...,\\n\"\n             \"     ]\\n\"\n-            \"3. \\\"account\\\"      (string, optional) An account to assign the addresses to.\\n\"\n+            \"3. \\\"account\\\"      (string, optional) DEPRECATED. An account to assign the addresses to.\\n\"\n \n             \"\\nResult:\\n\"\n             \"\\\"bitcoinaddress\\\"  (string) A bitcoin address associated with the keys.\\n\"\n@@ -1103,7 +1097,7 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n             \"  {\\n\"\n             \"    \\\"involvesWatchonly\\\" : true,        (bool) Only returned if imported addresses were involved in transaction\\n\"\n             \"    \\\"address\\\" : \\\"receivingaddress\\\",  (string) The receiving address\\n\"\n-            \"    \\\"account\\\" : \\\"accountname\\\",       (string) The account of the receiving address. The default account is \\\"\\\".\\n\"\n+            \"    \\\"account\\\" : \\\"accountname\\\",       (string) DEPRECATED. The account of the receiving address. The default account is \\\"\\\".\\n\"\n             \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in btc received by the address\\n\"\n             \"    \\\"confirmations\\\" : n                (numeric) The number of confirmations of the most recent transaction included\\n\"\n             \"  }\\n\"\n@@ -1124,7 +1118,7 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n             \"listreceivedbyaccount ( minconf includeempty includeWatchonly)\\n\"\n-            \"\\nList balances by account.\\n\"\n+            \"\\nDEPRECATED. List balances by account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf      (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n             \"2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments.\\n\"\n@@ -1251,15 +1245,14 @@ Value listtransactions(const Array& params, bool fHelp)\n             \"listtransactions ( \\\"account\\\" count from includeWatchonly)\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"    (string, optional) The account name. If not included, it will list all transactions for all accounts.\\n\"\n-            \"                                     If \\\"\\\" is set, it will list transactions for the default account.\\n\"\n+            \"1. \\\"account\\\"    (string, optional) DEPRECATED. The account name. Should be \\\"*\\\".\\n\"\n             \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n             \"3. from           (numeric, optional, default=0) The number of transactions to skip\\n\"\n             \"4. includeWatchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"account\\\":\\\"accountname\\\",       (string) The account name associated with the transaction. \\n\"\n+            \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. \\n\"\n             \"                                                It will be \\\"\\\" for the default account.\\n\"\n             \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The bitcoin address of the transaction. Not present for \\n\"\n             \"                                                move transactions (category = move).\\n\"\n@@ -1293,12 +1286,10 @@ Value listtransactions(const Array& params, bool fHelp)\n             \"\\nExamples:\\n\"\n             \"\\nList the most recent 10 transactions in the systems\\n\"\n             + HelpExampleCli(\"listtransactions\", \"\") +\n-            \"\\nList the most recent 10 transactions for the tabby account\\n\"\n-            + HelpExampleCli(\"listtransactions\", \"\\\"tabby\\\"\") +\n-            \"\\nList transactions 100 to 120 from the tabby account\\n\"\n-            + HelpExampleCli(\"listtransactions\", \"\\\"tabby\\\" 20 100\") +\n+            \"\\nList transactions 100 to 120\\n\"\n+            + HelpExampleCli(\"listtransactions\", \"\\\"*\\\" 20 100\") +\n             \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"listtransactions\", \"\\\"tabby\\\", 20, 100\")\n+            + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n         );\n \n     string strAccount = \"*\";\n@@ -1361,7 +1352,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n             \"listaccounts ( minconf includeWatchonly)\\n\"\n-            \"\\nReturns Object that has account names as keys, account balances as values.\\n\"\n+            \"\\nDEPRECATED. Returns Object that has account names as keys, account balances as values.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf          (numeric, optional, default=1) Only include transactions with at least this many confirmations\\n\"\n             \"2. includeWatchonly (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')\\n\"\n@@ -1444,7 +1435,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"transactions\\\": [\\n\"\n-            \"    \\\"account\\\":\\\"accountname\\\",       (string) The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n+            \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n             \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).\\n\"\n             \"    \\\"category\\\":\\\"send|receive\\\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\\n\"\n             \"    \\\"amount\\\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n@@ -1538,7 +1529,7 @@ Value gettransaction(const Array& params, bool fHelp)\n             \"  \\\"timereceived\\\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"details\\\" : [\\n\"\n             \"    {\\n\"\n-            \"      \\\"account\\\" : \\\"accountname\\\",  (string) The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n+            \"      \\\"account\\\" : \\\"accountname\\\",  (string) DEPRECATED. The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n             \"      \\\"address\\\" : \\\"bitcoinaddress\\\",   (string) The bitcoin address involved in the transaction\\n\"\n             \"      \\\"category\\\" : \\\"send|receive\\\",    (string) The category, either 'send' or 'receive'\\n\"\n             \"      \\\"amount\\\" : x.xxx                  (numeric) The amount in btc\\n\""
      }
    ]
  },
  {
    "sha": "23ef5b77a4222a628d18219ba656be545810832d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2VmNWI3N2E0MjIyYTYyOGQxODIxOWJhNjU2YmU1NDU4MTA4MzJk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:39:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T11:39:54Z"
      },
      "message": "Merge pull request #5695\n\n5fdc5b0 depends: latest config.guess and config.sub (Michael Ford)",
      "tree": {
        "sha": "e28ebedb41e6f810eb72fb982a9c40d63ce3432d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e28ebedb41e6f810eb72fb982a9c40d63ce3432d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23ef5b77a4222a628d18219ba656be545810832d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxieKAAoJEHSBCwEjRsmmSRgH/2SJzy6z7LyUipVFNUV51rZl\nwqy5Gr8cGSletQFaTD/Ko1SQoTYCaIzFmo0pXBML/bFe9W/FKPKcpiEv3TOwBcXj\nfimNQvIroeqTEZrC2NRnkVHFEo0EVtJ7I1MyhS9DhVuyyo7lD2J7EaKtaG0BkTHt\n8SdB1a3zxh+VSZYamYtOcC/0PrK/AQrx51JJrJ7CS/nne+gDw5toN7VK2ccWoMvd\ntC98MqLCfHCr/GXqc6dXrfRVe71D60y4I46rLMbYbGoPneq0ZAX03e52LuhCLEjT\nd4lvlriKkPI828vbbzmL2cpGP6/N3qM6Q3WfZroKB5hhBAe4h9oxzFGhPaBd9VM=\n=CXTU\n-----END PGP SIGNATURE-----",
        "payload": "tree e28ebedb41e6f810eb72fb982a9c40d63ce3432d\nparent 2511a39cca78c3ca281ad6fe6d381cbb1f66c843\nparent 5fdc5b08e7e27d9d1d805cea074232b1c7f05d47\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422272349 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422272394 +0100\n\nMerge pull request #5695\n\n5fdc5b0 depends: latest config.guess and config.sub (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23ef5b77a4222a628d18219ba656be545810832d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23ef5b77a4222a628d18219ba656be545810832d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23ef5b77a4222a628d18219ba656be545810832d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2511a39cca78c3ca281ad6fe6d381cbb1f66c843",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2511a39cca78c3ca281ad6fe6d381cbb1f66c843"
      },
      {
        "sha": "5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fdc5b08e7e27d9d1d805cea074232b1c7f05d47"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 27,
      "deletions": 13
    },
    "files": [
      {
        "sha": "dbfb9786cb6f9b8003367505d49dcadb2145610a",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23ef5b77a4222a628d18219ba656be545810832d/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23ef5b77a4222a628d18219ba656be545810832d/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=23ef5b77a4222a628d18219ba656be545810832d",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Attempt to guess a canonical system name.\n-#   Copyright 1992-2014 Free Software Foundation, Inc.\n+#   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2014-03-23'\n+timestamp='2015-01-01'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -24,12 +24,12 @@ timestamp='2014-03-23'\n # program.  This Exception is an additional permission under section 7\n # of the GNU General Public License, version 3 (\"GPLv3\").\n #\n-# Originally written by Per Bothner.\n+# Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n #\n # You can get the latest version of this script from:\n # http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD\n #\n-# Please send patches with a ChangeLog entry to config-patches@gnu.org.\n+# Please send patches to <config-patches@gnu.org>.\n \n \n me=`echo \"$0\" | sed -e 's,.*/,,'`\n@@ -50,7 +50,7 @@ version=\"\\\n GNU config.guess ($timestamp)\n \n Originally written by Per Bothner.\n-Copyright 1992-2014 Free Software Foundation, Inc.\n+Copyright 1992-2015 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -579,8 +579,9 @@ EOF\n \telse\n \t\tIBM_ARCH=powerpc\n \tfi\n-\tif [ -x /usr/bin/oslevel ] ; then\n-\t\tIBM_REV=`/usr/bin/oslevel`\n+\tif [ -x /usr/bin/lslpp ] ; then\n+\t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc |\n+\t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n \telse\n \t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n \tfi"
      },
      {
        "sha": "6d2e94c8bf9ea6925b96846aade1fd64074985d3",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 19,
        "deletions": 6,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23ef5b77a4222a628d18219ba656be545810832d/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23ef5b77a4222a628d18219ba656be545810832d/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=23ef5b77a4222a628d18219ba656be545810832d",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Configuration validation subroutine script.\n-#   Copyright 1992-2014 Free Software Foundation, Inc.\n+#   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2014-05-01'\n+timestamp='2015-01-01'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -25,7 +25,7 @@ timestamp='2014-05-01'\n # of the GNU General Public License, version 3 (\"GPLv3\").\n \n \n-# Please send patches with a ChangeLog entry to config-patches@gnu.org.\n+# Please send patches to <config-patches@gnu.org>.\n #\n # Configuration subroutine to validate and canonicalize a configuration type.\n # Supply the specified configuration type as an argument.\n@@ -68,7 +68,7 @@ Report bugs and patches to <config-patches@gnu.org>.\"\n version=\"\\\n GNU config.sub ($timestamp)\n \n-Copyright 1992-2014 Free Software Foundation, Inc.\n+Copyright 1992-2015 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -260,7 +260,7 @@ case $basic_machine in\n \t| c4x | c8051 | clipper \\\n \t| d10v | d30v | dlx | dsp16xx \\\n \t| epiphany \\\n-\t| fido | fr30 | frv \\\n+\t| fido | fr30 | frv | ft32 \\\n \t| h8300 | h8500 | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \\\n \t| hexagon \\\n \t| i370 | i860 | i960 | ia64 \\\n@@ -302,6 +302,7 @@ case $basic_machine in\n \t| pdp10 | pdp11 | pj | pjl \\\n \t| powerpc | powerpc64 | powerpc64le | powerpcle \\\n \t| pyramid \\\n+\t| riscv32 | riscv64 \\\n \t| rl78 | rx \\\n \t| score \\\n \t| sh | sh[1234] | sh[24]a | sh[24]aeb | sh[23]e | sh[34]eb | sheb | shbe | shle | sh[1234]le | sh3ele \\\n@@ -312,6 +313,7 @@ case $basic_machine in\n \t| tahoe | tic4x | tic54x | tic55x | tic6x | tic80 | tron \\\n \t| ubicom32 \\\n \t| v850 | v850e | v850e1 | v850e2 | v850es | v850e2v3 \\\n+\t| visium \\\n \t| we32k \\\n \t| x86 | xc16x | xstormy16 | xtensa \\\n \t| z8k | z80)\n@@ -326,6 +328,9 @@ case $basic_machine in\n \tc6x)\n \t\tbasic_machine=tic6x-unknown\n \t\t;;\n+\tleon|leon[3-9])\n+\t\tbasic_machine=sparc-$basic_machine\n+\t\t;;\n \tm6811 | m68hc11 | m6812 | m68hc12 | m68hcs12x | nvptx | picochip)\n \t\tbasic_machine=$basic_machine-unknown\n \t\tos=-none\n@@ -436,6 +441,7 @@ case $basic_machine in\n \t| ubicom32-* \\\n \t| v850-* | v850e-* | v850e1-* | v850es-* | v850e2-* | v850e2v3-* \\\n \t| vax-* \\\n+\t| visium-* \\\n \t| we32k-* \\\n \t| x86-* | x86_64-* | xc16x-* | xps100-* \\\n \t| xstormy16-* | xtensa*-* \\\n@@ -773,6 +779,9 @@ case $basic_machine in\n \t\tbasic_machine=m68k-isi\n \t\tos=-sysv\n \t\t;;\n+\tleon-*|leon[3-9]-*)\n+\t\tbasic_machine=sparc-`echo $basic_machine | sed 's/-.*//'`\n+\t\t;;\n \tm68knommu)\n \t\tbasic_machine=m68k-unknown\n \t\tos=-linux\n@@ -828,6 +837,10 @@ case $basic_machine in\n \t\tbasic_machine=powerpc-unknown\n \t\tos=-morphos\n \t\t;;\n+\tmoxiebox)\n+\t\tbasic_machine=moxie-unknown\n+\t\tos=-moxiebox\n+\t\t;;\n \tmsdos)\n \t\tbasic_machine=i386-pc\n \t\tos=-msdos\n@@ -1373,7 +1386,7 @@ case $os in\n \t      | -cygwin* | -msys* | -pe* | -psos* | -moss* | -proelf* | -rtems* \\\n \t      | -mingw32* | -mingw64* | -linux-gnu* | -linux-android* \\\n \t      | -linux-newlib* | -linux-musl* | -linux-uclibc* \\\n-\t      | -uxpv* | -beos* | -mpeix* | -udk* \\\n+\t      | -uxpv* | -beos* | -mpeix* | -udk* | -moxiebox* \\\n \t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \\\n \t      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \\\n \t      | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \\"
      }
    ]
  },
  {
    "sha": "6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjVmNTI5NGJiYTA0NDhjMDM0OWFkNDFjZDBlN2UxMDdhNTAwYjlk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T12:04:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T12:04:29Z"
      },
      "message": "Merge pull request #5506\n\n7873633 Squashed 'src/secp256k1/' changes from bccaf86..50cc6ab (Pieter Wuille)\n1a9576d Use libsecp256k1's RFC6979 implementation (Pieter Wuille)",
      "tree": {
        "sha": "eed1f949a4a1d72b1a2266debcea2637291b080c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eed1f949a4a1d72b1a2266debcea2637291b080c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUxi1NAAoJEHSBCwEjRsmmrOgH/0qQ1ZhMKCsrP0R3ewA7CTJQ\nSaJdVvv48vWhhsnY0euwvM2mjw5tZN6YcQCoqunrSlUrCZG+XrkaggNx0Gr234bM\ng9EXtljfWAc3hqdQYe6U0QS9P88Pfmma8bLrR1OhGoQugrjeACE3t8Zy+v1Cie3q\nQvGhCyKPykI2nptxWsJFYPPX3k5rF6boIjlb8tzVEqWA1kUapiQ5q6qQEuYJWOfj\nHHyY6Wg/7WDRq9m3f7ip6K+pbS0Gok+x7n8scqQEE3mTanoxwbZI/HN8itsCVbd/\ncsgwWtR/ggVpUL7mT+loiWTnaGXVAziAjj0W+OXTAJFY4AADJTc13cnpuRLRzNo=\n=aZH0\n-----END PGP SIGNATURE-----",
        "payload": "tree eed1f949a4a1d72b1a2266debcea2637291b080c\nparent 23ef5b77a4222a628d18219ba656be545810832d\nparent 602ebf5279d73f13fb1b2a3c4e7508ead6af9051\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422273840 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422273869 +0100\n\nMerge pull request #5506\n\n7873633 Squashed 'src/secp256k1/' changes from bccaf86..50cc6ab (Pieter Wuille)\n1a9576d Use libsecp256k1's RFC6979 implementation (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23ef5b77a4222a628d18219ba656be545810832d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23ef5b77a4222a628d18219ba656be545810832d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23ef5b77a4222a628d18219ba656be545810832d"
      },
      {
        "sha": "602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/602ebf5279d73f13fb1b2a3c4e7508ead6af9051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/602ebf5279d73f13fb1b2a3c4e7508ead6af9051"
      }
    ],
    "stats": {
      "total": 1866,
      "additions": 1193,
      "deletions": 673
    },
    "files": [
      {
        "sha": "e2ba191e3ab2eb003d5ffdcc6001a3a563354af8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -209,14 +209,12 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha256.cpp \\\n   crypto/sha512.cpp \\\n   crypto/hmac_sha256.cpp \\\n-  crypto/rfc6979_hmac_sha256.cpp \\\n   crypto/hmac_sha512.cpp \\\n   crypto/ripemd160.cpp \\\n   crypto/common.h \\\n   crypto/sha256.h \\\n   crypto/sha512.h \\\n   crypto/hmac_sha256.h \\\n-  crypto/rfc6979_hmac_sha256.h \\\n   crypto/hmac_sha512.h \\\n   crypto/sha1.h \\\n   crypto/ripemd160.h"
      },
      {
        "sha": "a8c971c3ba98d7ef8ddc99359a948b434470d52a",
        "filename": "src/crypto/rfc6979_hmac_sha256.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 47,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23ef5b77a4222a628d18219ba656be545810832d/src/crypto/rfc6979_hmac_sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23ef5b77a4222a628d18219ba656be545810832d/src/crypto/rfc6979_hmac_sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/rfc6979_hmac_sha256.cpp?ref=23ef5b77a4222a628d18219ba656be545810832d",
        "patch": "@@ -1,47 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"crypto/rfc6979_hmac_sha256.h\"\n-\n-#include <string.h>\n-\n-#include <algorithm>\n-\n-static const unsigned char zero[1] = {0x00};\n-static const unsigned char one[1] = {0x01};\n-\n-RFC6979_HMAC_SHA256::RFC6979_HMAC_SHA256(const unsigned char* key, size_t keylen, const unsigned char* msg, size_t msglen) : retry(false)\n-{\n-    memset(V, 0x01, sizeof(V));\n-    memset(K, 0x00, sizeof(K));\n-\n-    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Write(zero, sizeof(zero)).Write(key, keylen).Write(msg, msglen).Finalize(K);\n-    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n-    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Write(one, sizeof(one)).Write(key, keylen).Write(msg, msglen).Finalize(K);\n-    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n-}\n-\n-RFC6979_HMAC_SHA256::~RFC6979_HMAC_SHA256()\n-{\n-    memset(V, 0x01, sizeof(V));\n-    memset(K, 0x00, sizeof(K));\n-}\n-\n-void RFC6979_HMAC_SHA256::Generate(unsigned char* output, size_t outputlen)\n-{\n-    if (retry) {\n-        CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Write(zero, sizeof(zero)).Finalize(K);\n-        CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n-    }\n-\n-    while (outputlen > 0) {\n-        CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n-        size_t len = std::min(outputlen, sizeof(V));\n-        memcpy(output, V, len);\n-        output += len;\n-        outputlen -= len;\n-    }\n-\n-    retry = true;\n-}"
      },
      {
        "sha": "f3a54a5d1188929784f16737279dfc3119dacbb7",
        "filename": "src/crypto/rfc6979_hmac_sha256.h",
        "status": "removed",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23ef5b77a4222a628d18219ba656be545810832d/src/crypto/rfc6979_hmac_sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23ef5b77a4222a628d18219ba656be545810832d/src/crypto/rfc6979_hmac_sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/rfc6979_hmac_sha256.h?ref=23ef5b77a4222a628d18219ba656be545810832d",
        "patch": "@@ -1,36 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_RFC6979_HMAC_SHA256_H\n-#define BITCOIN_RFC6979_HMAC_SHA256_H\n-\n-#include \"crypto/hmac_sha256.h\"\n-\n-#include <stdint.h>\n-#include <stdlib.h>\n-\n-/** The RFC 6979 PRNG using HMAC-SHA256. */\n-class RFC6979_HMAC_SHA256\n-{\n-private:\n-    unsigned char V[CHMAC_SHA256::OUTPUT_SIZE];\n-    unsigned char K[CHMAC_SHA256::OUTPUT_SIZE];\n-    bool retry;\n-\n-public:\n-    /**\n-     * Construct a new RFC6979 PRNG, using the given key and message.\n-     * The message is assumed to be already hashed.\n-     */\n-    RFC6979_HMAC_SHA256(const unsigned char* key, size_t keylen, const unsigned char* msg, size_t msglen);\n-\n-    /**\n-     * Generate a byte array.\n-     */\n-    void Generate(unsigned char* output, size_t outputlen);\n-\n-    ~RFC6979_HMAC_SHA256();\n-};\n-\n-#endif // BITCOIN_RFC6979_HMAC_SHA256_H"
      },
      {
        "sha": "d8319db1a35d89b3e9818d03cdbf3b2f396e008b",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 24,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -6,7 +6,6 @@\n \n #include \"arith_uint256.h\"\n #include \"crypto/hmac_sha512.h\"\n-#include \"crypto/rfc6979_hmac_sha256.h\"\n #include \"eccryptoverify.h\"\n #include \"pubkey.h\"\n #include \"random.h\"\n@@ -74,23 +73,28 @@ CPubKey CKey::GetPubKey() const {\n     return result;\n }\n \n+extern \"C\"\n+{\n+static int secp256k1_nonce_function_test_case(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int attempt, const void *data)\n+{\n+    const uint32_t *test_case = static_cast<const uint32_t*>(data);\n+    uint256 nonce;\n+    secp256k1_nonce_function_rfc6979(nonce.begin(), msg32, key32, attempt, NULL);\n+    nonce = ArithToUint256(UintToArith256(nonce) + *test_case);\n+    memcpy(nonce32, nonce.begin(), 32);\n+    return 1;\n+}\n+}\n+\n bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {\n     if (!fValid)\n         return false;\n     vchSig.resize(72);\n-    RFC6979_HMAC_SHA256 prng(begin(), 32, (unsigned char*)&hash, 32);\n-    do {\n-        uint256 nonce;\n-        prng.Generate((unsigned char*)&nonce, 32);\n-        nonce = ArithToUint256(UintToArith256(nonce) + test_case);\n-        int nSigLen = 72;\n-        int ret = secp256k1_ecdsa_sign((const unsigned char*)&hash, (unsigned char*)&vchSig[0], &nSigLen, begin(), (unsigned char*)&nonce);\n-        nonce = uint256();\n-        if (ret) {\n-            vchSig.resize(nSigLen);\n-            return true;\n-        }\n-    } while(true);\n+    int nSigLen = 72;\n+    int ret = secp256k1_ecdsa_sign(hash.begin(), (unsigned char*)&vchSig[0], &nSigLen, begin(), test_case == 0 ? secp256k1_nonce_function_rfc6979 : secp256k1_nonce_function_test_case, test_case == 0 ? NULL : &test_case);\n+    assert(ret);\n+    vchSig.resize(nSigLen);\n+    return true;\n }\n \n bool CKey::VerifyPubKey(const CPubKey& pubkey) const {\n@@ -101,7 +105,7 @@ bool CKey::VerifyPubKey(const CPubKey& pubkey) const {\n     std::string str = \"Bitcoin key verification\\n\";\n     GetRandBytes(rnd, sizeof(rnd));\n     uint256 hash;\n-    CHash256().Write((unsigned char*)str.data(), str.size()).Write(rnd, sizeof(rnd)).Finalize((unsigned char*)&hash);\n+    CHash256().Write((unsigned char*)str.data(), str.size()).Write(rnd, sizeof(rnd)).Finalize(hash.begin());\n     std::vector<unsigned char> vchSig;\n     Sign(hash, vchSig);\n     return pubkey.Verify(hash, vchSig);\n@@ -112,15 +116,8 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n         return false;\n     vchSig.resize(65);\n     int rec = -1;\n-    RFC6979_HMAC_SHA256 prng(begin(), 32, (unsigned char*)&hash, 32);\n-    do {\n-        uint256 nonce;\n-        prng.Generate((unsigned char*)&nonce, 32);\n-        int ret = secp256k1_ecdsa_sign_compact((const unsigned char*)&hash, &vchSig[1], begin(), (unsigned char*)&nonce, &rec);\n-        nonce = uint256();\n-        if (ret)\n-            break;\n-    } while(true);\n+    int ret = secp256k1_ecdsa_sign_compact(hash.begin(), &vchSig[1], begin(), secp256k1_nonce_function_rfc6979, NULL, &rec);\n+    assert(ret);\n     assert(rec != -1);\n     vchSig[0] = 27 + rec + (fCompressed ? 4 : 0);\n     return true;"
      },
      {
        "sha": "b9f7d243ecb491acad0f9493c160bfdd1b636df7",
        "filename": "src/secp256k1/.gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/.gitignore?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -1,6 +1,7 @@\n bench_inv\n bench_sign\n bench_verify\n+bench_recover\n tests\n *.exe\n *.so"
      },
      {
        "sha": "40f8dae23f8b97ffca212bf96391d879f169275e",
        "filename": "src/secp256k1/.travis.yml",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/.travis.yml?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -4,24 +4,22 @@ compiler:\n   - gcc\n install:\n   - sudo apt-get install -qq libssl-dev\n-  - if [ \"$BIGNUM\" = \"gmp\" -o \"$BIGNUM\" = \"auto\" -o \"$FIELD\" = \"gmp\" ]; then sudo apt-get install --no-install-recommends --no-upgrade -qq libgmp-dev; fi\n+  - if [ \"$BIGNUM\" = \"gmp\" -o \"$BIGNUM\" = \"auto\" ]; then sudo apt-get install --no-install-recommends --no-upgrade -qq libgmp-dev; fi\n   - if [ -n \"$EXTRAPACKAGES\" ]; then sudo apt-get update && sudo apt-get install --no-install-recommends --no-upgrade $EXTRAPACKAGES; fi\n env:\n   global:\n-    - FIELD=auto  BIGNUM=auto  SCALAR=auto  ENDOMORPHISM=no  BUILD=check  EXTRAFLAGS= HOST= EXTRAPACKAGES=\n+    - FIELD=auto  BIGNUM=auto  SCALAR=auto  ENDOMORPHISM=no  ASM=no  BUILD=check  EXTRAFLAGS= HOST= EXTRAPACKAGES=\n   matrix:\n     - SCALAR=32bit\n     - SCALAR=64bit\n-    - FIELD=gmp\n-    - FIELD=gmp       ENDOMORPHISM=yes\n-    - FIELD=64bit_asm\n-    - FIELD=64bit_asm ENDOMORPHISM=yes\n     - FIELD=64bit\n     - FIELD=64bit     ENDOMORPHISM=yes\n+    - FIELD=64bit                       ASM=x86_64\n+    - FIELD=64bit     ENDOMORPHISM=yes  ASM=x86_64\n     - FIELD=32bit\n     - FIELD=32bit     ENDOMORPHISM=yes\n-    - BIGNUM=none\n-    - BIGNUM=none     ENDOMORPHISM=yes\n+    - BIGNUM=no\n+    - BIGNUM=no       ENDOMORPHISM=yes\n     - BUILD=distcheck\n     - EXTRAFLAGS=CFLAGS=-DDETERMINISTIC\n     - HOST=i686-linux-gnu EXTRAPACKAGES=\"gcc-multilib\""
      },
      {
        "sha": "985c172eba29e1f89c514d2724c71520d9eafbc0",
        "filename": "src/secp256k1/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/Makefile.am?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -33,8 +33,8 @@ noinst_HEADERS += src/java/org_bitcoin_NativeSecp256k1.h\n noinst_HEADERS += src/util.h\n noinst_HEADERS += src/testrand.h\n noinst_HEADERS += src/testrand_impl.h\n-noinst_HEADERS += src/field_gmp.h\n-noinst_HEADERS += src/field_gmp_impl.h\n+noinst_HEADERS += src/hash.h\n+noinst_HEADERS += src/hash_impl.h\n noinst_HEADERS += src/field.h\n noinst_HEADERS += src/field_impl.h\n noinst_HEADERS += src/bench.h"
      },
      {
        "sha": "4a398d6c93a58745e16959ba3b237a282fc4aa5b",
        "filename": "src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 19,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/build-aux/m4/bitcoin_secp.m4?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -1,12 +1,6 @@\n dnl libsecp25k1 helper checks\n AC_DEFUN([SECP_INT128_CHECK],[\n has_int128=$ac_cv_type___int128\n-if test x\"$has_int128\" != x\"yes\" && test x\"$set_field\" = x\"64bit\"; then\n-  AC_MSG_ERROR([$set_field field support explicitly requested but is not compatible with this host])\n-fi\n-if test x\"$has_int128\" != x\"yes\" && test x\"$set_scalar\" = x\"64bit\"; then\n-  AC_MSG_ERROR([$set_scalar scalar support explicitly requested but is not compatible with this host])\n-fi\n ])\n \n dnl \n@@ -18,11 +12,6 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n   __asm__ __volatile__(\"movq $0x100000000,%1; mulq %%rsi\" : \"+a\"(a) : \"S\"(tmp) : \"cc\", \"%rdx\");\n   ]])],[has_64bit_asm=yes],[has_64bit_asm=no])\n AC_MSG_RESULT([$has_64bit_asm])\n-if test x\"$set_field\" == x\"64bit_asm\"; then\n-  if test x\"$has_64bit_asm\" == x\"no\"; then\n-    AC_MSG_ERROR([$set_field field support explicitly requested but no x86_64 assembly available])\n-  fi\n-fi\n ])\n \n dnl\n@@ -43,7 +32,7 @@ else\n )])\n   LIBS=\n fi\n-if test x\"$has_libcrypto\" == x\"yes\" && test x\"$has_openssl_ec\" = x; then\n+if test x\"$has_libcrypto\" = x\"yes\" && test x\"$has_openssl_ec\" = x; then\n   AC_MSG_CHECKING(for EC functions in libcrypto)\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <openssl/ec.h>\n@@ -69,11 +58,4 @@ if test x\"$has_gmp\" != x\"yes\"; then\n   CPPFLAGS=\"$CPPFLAGS_TEMP\"\n   LIBS=\"$LIBS_TEMP\"\n fi\n-if test x\"$set_field\" = x\"gmp\" && test x\"$has_gmp\" != x\"yes\"; then\n-    AC_MSG_ERROR([$set_field field support explicitly requested but libgmp was not found])\n-fi\n-if test x\"$set_bignum\" = x\"gmp\" && test x\"$has_gmp\" != x\"yes\"; then\n-    AC_MSG_ERROR([$set_bignum field support explicitly requested but libgmp was not found])\n-fi\n ])\n-"
      },
      {
        "sha": "f691156ff748b24228ecd44ed928a6b278bbe229",
        "filename": "src/secp256k1/configure.ac",
        "status": "modified",
        "additions": 69,
        "deletions": 44,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/configure.ac?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -6,7 +6,7 @@ AC_CANONICAL_HOST\n AH_TOP([#ifndef LIBSECP256K1_CONFIG_H])\n AH_TOP([#define LIBSECP256K1_CONFIG_H])\n AH_BOTTOM([#endif //LIBSECP256K1_CONFIG_H])\n-AM_INIT_AUTOMAKE([foreign])\n+AM_INIT_AUTOMAKE([foreign subdir-objects])\n LT_INIT\n \n dnl make the compilation flags quiet unless V=1 is used\n@@ -23,7 +23,7 @@ if test \"x$CFLAGS\" = \"x\"; then\n fi\n \n AC_PROG_CC_C99\n-if test x\"$ac_cv_prog_cc_c99\" == x\"no\"; then\n+if test x\"$ac_cv_prog_cc_c99\" = x\"no\"; then\n   AC_MSG_ERROR([c99 compiler support required])\n fi\n \n@@ -82,9 +82,9 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([[char foo;]])],\n \n \n AC_ARG_ENABLE(benchmark,\n-    AS_HELP_STRING([--enable-benchmark],[compile benchmark (default is yes)]),\n+    AS_HELP_STRING([--enable-benchmark],[compile benchmark (default is no)]),\n     [use_benchmark=$enableval],\n-    [use_benchmark=yes])\n+    [use_benchmark=no])\n \n AC_ARG_ENABLE(tests,\n     AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n@@ -96,15 +96,18 @@ AC_ARG_ENABLE(endomorphism,\n     [use_endomorphism=$enableval],\n     [use_endomorphism=no])\n \n-AC_ARG_WITH([field], [AS_HELP_STRING([--with-field=gmp|64bit|64bit_asm|32bit|auto],\n+AC_ARG_WITH([field], [AS_HELP_STRING([--with-field=64bit|32bit|auto],\n [Specify Field Implementation. Default is auto])],[req_field=$withval], [req_field=auto])\n \n-AC_ARG_WITH([bignum], [AS_HELP_STRING([--with-bignum=gmp|none|auto],\n+AC_ARG_WITH([bignum], [AS_HELP_STRING([--with-bignum=gmp|no|auto],\n [Specify Bignum Implementation. Default is auto])],[req_bignum=$withval], [req_bignum=auto])\n \n AC_ARG_WITH([scalar], [AS_HELP_STRING([--with-scalar=64bit|32bit|auto],\n [Specify scalar implementation. Default is auto])],[req_scalar=$withval], [req_scalar=auto])\n \n+AC_ARG_WITH([asm], [AS_HELP_STRING([--with-asm=x86_64|no|auto]\n+[Specify assembly optimizations to use. Default is auto])],[req_asm=$withval], [req_asm=auto])\n+\n AC_CHECK_TYPES([__int128])\n \n AC_MSG_CHECKING([for __builtin_expect])\n@@ -113,40 +116,54 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([[void myfunc() {__builtin_expect(0,0);}]])],\n     [ AC_MSG_RESULT([no])\n     ])\n \n-if test x\"$req_field\" = x\"auto\"; then\n+if test x\"$req_asm\" = x\"auto\"; then\n   SECP_64BIT_ASM_CHECK\n   if test x\"$has_64bit_asm\" = x\"yes\"; then\n-    set_field=64bit_asm\n+    set_asm=x86_64\n+  fi\n+  if test x\"$set_asm\" = x; then\n+    set_asm=no\n   fi\n+else\n+  set_asm=$req_asm\n+  case $set_asm in\n+  x86_64)\n+    SECP_64BIT_ASM_CHECK\n+    if test x\"$has_64bit_asm\" != x\"yes\"; then\n+      AC_MSG_ERROR([x86_64 assembly optimization requested but not available])\n+    fi\n+    ;;\n+  no)\n+    ;;\n+  *)\n+    AC_MSG_ERROR([invalid assembly optimization selection])\n+    ;;\n+  esac\n+fi\n \n+if test x\"$req_field\" = x\"auto\"; then\n+  if test x\"set_asm\" = x\"x86_64\"; then\n+    set_field=64bit\n+  fi\n   if test x\"$set_field\" = x; then\n     SECP_INT128_CHECK\n     if test x\"$has_int128\" = x\"yes\"; then\n       set_field=64bit\n     fi\n   fi\n-\n-  if test x\"$set_field\" = x; then\n-    SECP_GMP_CHECK\n-    if test x\"$has_gmp\" = x\"yes\"; then\n-      set_field=gmp\n-    fi\n-  fi\n-\n   if test x\"$set_field\" = x; then\n     set_field=32bit\n   fi\n else\n   set_field=$req_field\n   case $set_field in\n-  64bit_asm)\n-    SECP_64BIT_ASM_CHECK\n-    ;;\n   64bit)\n-    SECP_INT128_CHECK\n-    ;;\n-  gmp)\n-    SECP_GMP_CHECK\n+    if test x\"$set_asm\" != x\"x86_64\"; then\n+      SECP_INT128_CHECK\n+      if test x\"$has_int128\" != x\"yes\"; then\n+        AC_MSG_ERROR([64bit field explicitly requested but neither __int128 support or x86_64 assembly available])\n+      fi\n+    fi\n     ;;\n   32bit)\n     ;;\n@@ -157,11 +174,9 @@ else\n fi\n \n if test x\"$req_scalar\" = x\"auto\"; then\n-  if test x\"$set_scalar\" = x; then\n-    SECP_INT128_CHECK\n-    if test x\"$has_int128\" = x\"yes\"; then\n-      set_scalar=64bit\n-    fi\n+  SECP_INT128_CHECK\n+  if test x\"$has_int128\" = x\"yes\"; then\n+    set_scalar=64bit\n   fi\n   if test x\"$set_scalar\" = x; then\n     set_scalar=32bit\n@@ -171,6 +186,9 @@ else\n   case $set_scalar in\n   64bit)\n     SECP_INT128_CHECK\n+    if test x\"$has_int128\" != x\"yes\"; then\n+      AC_MSG_ERROR([64bit scalar explicitly requested but __int128 support not available])\n+    fi\n     ;;\n   32bit)\n     ;;\n@@ -187,36 +205,42 @@ if test x\"$req_bignum\" = x\"auto\"; then\n   fi\n \n   if test x\"$set_bignum\" = x; then\n-    set_bignum=none\n+    set_bignum=no\n   fi\n else\n   set_bignum=$req_bignum\n   case $set_bignum in\n   gmp)\n     SECP_GMP_CHECK\n+    if test x\"$has_gmp\" != x\"yes\"; then\n+      AC_MSG_ERROR([gmp bignum explicitly requested but libgmp not available])\n+    fi\n     ;;\n-  none)\n+  no)\n     ;;\n   *)\n     AC_MSG_ERROR([invalid bignum implementation selection])\n     ;;\n   esac\n fi\n \n+# select assembly optimization\n+case $set_asm in\n+x86_64)\n+  AC_DEFINE(USE_ASM_X86_64, 1, [Define this symbol to enable x86_64 assembly optimizations])\n+  ;;\n+no)\n+  ;;\n+*)\n+  AC_MSG_ERROR([invalid assembly optimizations])\n+  ;;\n+esac\n+\n # select field implementation\n case $set_field in\n-64bit_asm)\n-  AC_DEFINE(USE_FIELD_5X52_ASM, 1, [Define this symbol to use the assembly version for the 5x52 field implementation])\n-  AC_DEFINE(USE_FIELD_5X52, 1, [Define this symbol to use the FIELD_5X52 implementation])\n-  ;;\n 64bit)\n-  AC_DEFINE(USE_FIELD_5X52_INT128, 1, [Define this symbol to use the __int128 version for the 5x52 field implementation])\n   AC_DEFINE(USE_FIELD_5X52, 1, [Define this symbol to use the FIELD_5X52 implementation])\n   ;;\n-gmp)\n-  AC_DEFINE(HAVE_LIBGMP,1,[Define this symbol if libgmp is installed])\n-  AC_DEFINE(USE_FIELD_GMP, 1, [Define this symbol to use the FIELD_GMP implementation])\n-  ;;\n 32bit)\n   AC_DEFINE(USE_FIELD_10X26, 1, [Define this symbol to use the FIELD_10X26 implementation])\n   ;;\n@@ -233,7 +257,7 @@ gmp)\n   AC_DEFINE(USE_FIELD_INV_NUM, 1, [Define this symbol to use the num-based field inverse implementation])\n   AC_DEFINE(USE_SCALAR_INV_NUM, 1, [Define this symbol to use the num-based scalar inverse implementation])\n   ;;\n-none)\n+no)\n   AC_DEFINE(USE_NUM_NONE, 1, [Define this symbol to use no num implementation])\n   AC_DEFINE(USE_FIELD_INV_BUILTIN, 1, [Define this symbol to use the native field inverse implementation])\n   AC_DEFINE(USE_SCALAR_INV_BUILTIN, 1, [Define this symbol to use the native scalar inverse implementation])\n@@ -258,7 +282,7 @@ esac\n \n if test x\"$use_tests\" = x\"yes\"; then\n   SECP_OPENSSL_CHECK\n-  if test x\"$has_openssl_ec\" == x\"yes\"; then\n+  if test x\"$has_openssl_ec\" = x\"yes\"; then\n     AC_DEFINE(ENABLE_OPENSSL_TESTS, 1, [Define this symbol if OpenSSL EC functions are available])\n     SECP_TEST_INCLUDES=\"$SSL_CFLAGS $CRYPTO_CFLAGS\"\n     SECP_TEST_LIBS=\"$CRYPTO_LIBS\"\n@@ -272,7 +296,7 @@ if test x\"$use_tests\" = x\"yes\"; then\n   fi\n fi\n \n-if test x\"$set_field\" = x\"gmp\" || test x\"$set_bignum\" = x\"gmp\"; then\n+if test x\"$set_bignum\" = x\"gmp\"; then\n   SECP_LIBS=\"$SECP_LIBS $GMP_LIBS\"\n   SECP_INCLUDES=\"$SECP_INCLUDES $GMP_CPPFLAGS\"\n fi\n@@ -281,19 +305,20 @@ if test x\"$use_endomorphism\" = x\"yes\"; then\n   AC_DEFINE(USE_ENDOMORPHISM, 1, [Define this symbol to use endomorphism optimization])\n fi\n \n+AC_MSG_NOTICE([Using assembly optimizations: $set_asm])\n AC_MSG_NOTICE([Using field implementation: $set_field])\n AC_MSG_NOTICE([Using bignum implementation: $set_bignum])\n AC_MSG_NOTICE([Using scalar implementation: $set_scalar])\n+AC_MSG_NOTICE([Using endomorphism optimizations: $use_endomorphism])\n \n AC_CONFIG_HEADERS([src/libsecp256k1-config.h])\n AC_CONFIG_FILES([Makefile libsecp256k1.pc])\n AC_SUBST(SECP_INCLUDES)\n AC_SUBST(SECP_LIBS)\n AC_SUBST(SECP_TEST_LIBS)\n AC_SUBST(SECP_TEST_INCLUDES)\n-AM_CONDITIONAL([USE_ASM], [test x\"$set_field\" == x\"64bit_asm\"])\n AM_CONDITIONAL([USE_TESTS], [test x\"$use_tests\" != x\"no\"])\n-AM_CONDITIONAL([USE_BENCHMARK], [test x\"$use_benchmark\" != x\"no\"])\n+AM_CONDITIONAL([USE_BENCHMARK], [test x\"$use_benchmark\" = x\"yes\"])\n \n dnl make sure nothing new is exported so that we don't break the cache\n PKGCONFIG_PATH_TEMP=\"$PKG_CONFIG_PATH\""
      },
      {
        "sha": "cfdae31eaf87fe73a0de3ed45b202bb1e719f7f6",
        "filename": "src/secp256k1/include/secp256k1.h",
        "status": "modified",
        "additions": 41,
        "deletions": 10,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/include/secp256k1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/include/secp256k1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -77,42 +77,73 @@ SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_verify(\n   int pubkeylen\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(4);\n \n+/** A pointer to a function to deterministically generate a nonce.\n+ * Returns: 1 if a nonce was succesfully generated. 0 will cause signing to fail.\n+ * In:      msg32:     the 32-byte message hash being verified (will not be NULL)\n+ *          key32:     pointer to a 32-byte secret key (will not be NULL)\n+ *          attempt:   how many iterations we have tried to find a nonce.\n+ *                     This will almost always be 0, but different attempt values\n+ *                     are required to result in a different nonce.\n+ *          data:      Arbitrary data pointer that is passed through.\n+ * Out:     nonce32:   pointer to a 32-byte array to be filled by the function.\n+ * Except for test cases, this function should compute some cryptographic hash of\n+ * the message, the key and the attempt.\n+ */\n+typedef int (*secp256k1_nonce_function_t)(\n+  unsigned char *nonce32,\n+  const unsigned char *msg32,\n+  const unsigned char *key32,\n+  unsigned int attempt,\n+  const void *data\n+);\n+\n+/** An implementation of RFC6979 (using HMAC-SHA256) as nonce generation function. */\n+extern const secp256k1_nonce_function_t secp256k1_nonce_function_rfc6979;\n+\n+/** A default safe nonce generation function (currently equal to secp256k1_nonce_function_rfc6979). */\n+extern const secp256k1_nonce_function_t secp256k1_nonce_function_default;\n+\n+\n /** Create an ECDSA signature.\n  *  Returns: 1: signature created\n- *           0: nonce invalid, try another one\n+ *           0: the nonce generation function failed\n  *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n  *           seckey: pointer to a 32-byte secret key (cannot be NULL, assumed to be valid)\n- *           nonce:  pointer to a 32-byte nonce (cannot be NULL, generated with a cryptographic PRNG)\n+ *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n  *  Out:     sig:    pointer to an array where the signature will be placed (cannot be NULL)\n  *  In/Out:  siglen: pointer to an int with the length of sig, which will be updated\n  *                   to contain the actual signature length (<=72).\n  * Requires starting using SECP256K1_START_SIGN.\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_sign(\n+int secp256k1_ecdsa_sign(\n   const unsigned char *msg32,\n   unsigned char *sig,\n   int *siglen,\n   const unsigned char *seckey,\n-  const unsigned char *nonce\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4) SECP256K1_ARG_NONNULL(5);\n+  secp256k1_nonce_function_t noncefp,\n+  const void *ndata\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n /** Create a compact ECDSA signature (64 byte + recovery id).\n  *  Returns: 1: signature created\n- *           0: nonce invalid, try another one\n+ *           0: the nonce generation function failed\n  *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n  *           seckey: pointer to a 32-byte secret key (cannot be NULL, assumed to be valid)\n- *           nonce:  pointer to a 32-byte nonce (cannot be NULL, generated with a cryptographic PRNG)\n+ *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n  *  Out:     sig:    pointer to a 64-byte array where the signature will be placed (cannot be NULL)\n  *           recid:  pointer to an int, which will be updated to contain the recovery id (can be NULL)\n  * Requires starting using SECP256K1_START_SIGN.\n  */\n-SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_sign_compact(\n+int secp256k1_ecdsa_sign_compact(\n   const unsigned char *msg32,\n   unsigned char *sig64,\n   const unsigned char *seckey,\n-  const unsigned char *nonce,\n+  secp256k1_nonce_function_t noncefp,\n+  const void *ndata,\n   int *recid\n-) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n /** Recover an ECDSA public key from a compact signature.\n  *  Returns: 1: public key successfully recovered (which guarantees a correct signature)."
      },
      {
        "sha": "2276f00b9a683b7c10144e7b31406f09b9c1d5ea",
        "filename": "src/secp256k1/src/bench_sign.c",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/bench_sign.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/bench_sign.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_sign.c?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -10,15 +10,13 @@\n \n typedef struct {\n     unsigned char msg[32];\n-    unsigned char nonce[32];\n     unsigned char key[32];\n } bench_sign_t;\n \n static void bench_sign_setup(void* arg) {\n     bench_sign_t *data = (bench_sign_t*)arg;\n \n     for (int i = 0; i < 32; i++) data->msg[i] = i + 1;\n-    for (int i = 0; i < 32; i++) data->nonce[i] = i + 33;\n     for (int i = 0; i < 32; i++) data->key[i] = i + 65;\n }\n \n@@ -28,9 +26,8 @@ static void bench_sign(void* arg) {\n     unsigned char sig[64];\n     for (int i=0; i<20000; i++) {\n         int recid = 0;\n-        CHECK(secp256k1_ecdsa_sign_compact(data->msg, sig, data->key, data->nonce, &recid));\n+        CHECK(secp256k1_ecdsa_sign_compact(data->msg, sig, data->key, NULL, NULL, &recid));\n         for (int j = 0; j < 32; j++) {\n-            data->nonce[j] = data->key[j];     /* Move former key to nonce  */\n             data->msg[j] = sig[j];             /* Move former R to message. */\n             data->key[j] = sig[j + 32];        /* Move former S to key.     */\n         }"
      },
      {
        "sha": "a58ca84347b5a172d9a37ab1b13f43c889592300",
        "filename": "src/secp256k1/src/bench_verify.c",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/bench_verify.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/bench_verify.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_verify.c?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -14,7 +14,6 @@\n typedef struct {\n     unsigned char msg[32];\n     unsigned char key[32];\n-    unsigned char nonce[32];\n     unsigned char sig[72];\n     int siglen;\n     unsigned char pubkey[33];\n@@ -42,9 +41,8 @@ int main(void) {\n \n     for (int i = 0; i < 32; i++) data.msg[i] = 1 + i;\n     for (int i = 0; i < 32; i++) data.key[i] = 33 + i;\n-    for (int i = 0; i < 32; i++) data.nonce[i] = 65 + i;\n     data.siglen = 72;\n-    CHECK(secp256k1_ecdsa_sign(data.msg, data.sig, &data.siglen, data.key, data.nonce));\n+    secp256k1_ecdsa_sign(data.msg, data.sig, &data.siglen, data.key, NULL, NULL);\n     data.pubkeylen = 33;\n     CHECK(secp256k1_ec_pubkey_create(data.pubkey, &data.pubkeylen, data.key, 1));\n "
      },
      {
        "sha": "674650c1e9f04d3fc8d7e73d73b4c500f08849f4",
        "filename": "src/secp256k1/src/ecdsa_impl.h",
        "status": "modified",
        "additions": 43,
        "deletions": 16,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/ecdsa_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/ecdsa_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecdsa_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -109,25 +109,53 @@ static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, int *size, const se\n     return 1;\n }\n \n-static int secp256k1_ecdsa_sig_recompute(secp256k1_scalar_t *r2, const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {\n+static int secp256k1_ecdsa_sig_verify(const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {\n     if (secp256k1_scalar_is_zero(&sig->r) || secp256k1_scalar_is_zero(&sig->s))\n         return 0;\n \n-    int ret = 0;\n     secp256k1_scalar_t sn, u1, u2;\n     secp256k1_scalar_inverse_var(&sn, &sig->s);\n     secp256k1_scalar_mul(&u1, &sn, message);\n     secp256k1_scalar_mul(&u2, &sn, &sig->r);\n     secp256k1_gej_t pubkeyj; secp256k1_gej_set_ge(&pubkeyj, pubkey);\n     secp256k1_gej_t pr; secp256k1_ecmult(&pr, &pubkeyj, &u2, &u1);\n-    if (!secp256k1_gej_is_infinity(&pr)) {\n-        secp256k1_fe_t xr; secp256k1_gej_get_x_var(&xr, &pr);\n-        secp256k1_fe_normalize_var(&xr);\n-        unsigned char xrb[32]; secp256k1_fe_get_b32(xrb, &xr);\n-        secp256k1_scalar_set_b32(r2, xrb, NULL);\n-        ret = 1;\n+    if (secp256k1_gej_is_infinity(&pr)) {\n+        return 0;\n+    }\n+    unsigned char c[32];\n+    secp256k1_scalar_get_b32(c, &sig->r);\n+    secp256k1_fe_t xr;\n+    secp256k1_fe_set_b32(&xr, c);\n+\n+    // We now have the recomputed R point in pr, and its claimed x coordinate (modulo n)\n+    // in xr. Naively, we would extract the x coordinate from pr (requiring a inversion modulo p),\n+    // compute the remainder modulo n, and compare it to xr. However:\n+    //\n+    //       xr == X(pr) mod n\n+    //   <=> exists h. (xr + h * n < p && xr + h * n == X(pr))\n+    //   [Since 2 * n > p, h can only be 0 or 1]\n+    //   <=> (xr == X(pr)) || (xr + n < p && xr + n == X(pr))\n+    //   [In Jacobian coordinates, X(pr) is pr.x / pr.z^2 mod p]\n+    //   <=> (xr == pr.x / pr.z^2 mod p) || (xr + n < p && xr + n == pr.x / pr.z^2 mod p)\n+    //   [Multiplying both sides of the equations by pr.z^2 mod p]\n+    //   <=> (xr * pr.z^2 mod p == pr.x) || (xr + n < p && (xr + n) * pr.z^2 mod p == pr.x)\n+    //\n+    // Thus, we can avoid the inversion, but we have to check both cases separately.\n+    // secp256k1_gej_eq_x implements the (xr * pr.z^2 mod p == pr.x) test.\n+    if (secp256k1_gej_eq_x_var(&xr, &pr)) {\n+        // xr.x == xr * xr.z^2 mod p, so the signature is valid.\n+        return 1;\n+    }\n+    if (secp256k1_fe_cmp_var(&xr, &secp256k1_ecdsa_consts->p_minus_order) >= 0) {\n+        // xr + p >= n, so we can skip testing the second case.\n+        return 0;\n+    }\n+    secp256k1_fe_add(&xr, &secp256k1_ecdsa_consts->order_as_fe);\n+    if (secp256k1_gej_eq_x_var(&xr, &pr)) {\n+        // (xr + n) * pr.z^2 mod p == pr.x, so the signature is valid.\n+        return 1;\n     }\n-    return ret;\n+    return 0;\n }\n \n static int secp256k1_ecdsa_sig_recover(const secp256k1_ecdsa_sig_t *sig, secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message, int recid) {\n@@ -159,13 +187,6 @@ static int secp256k1_ecdsa_sig_recover(const secp256k1_ecdsa_sig_t *sig, secp256\n     return !secp256k1_gej_is_infinity(&qj);\n }\n \n-static int secp256k1_ecdsa_sig_verify(const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {\n-    secp256k1_scalar_t r2;\n-    int ret = 0;\n-    ret = secp256k1_ecdsa_sig_recompute(&r2, sig, pubkey, message) && secp256k1_scalar_eq(&sig->r, &r2);\n-    return ret;\n-}\n-\n static int secp256k1_ecdsa_sig_sign(secp256k1_ecdsa_sig_t *sig, const secp256k1_scalar_t *seckey, const secp256k1_scalar_t *message, const secp256k1_scalar_t *nonce, int *recid) {\n     secp256k1_gej_t rp;\n     secp256k1_ecmult_gen(&rp, nonce);\n@@ -177,6 +198,12 @@ static int secp256k1_ecdsa_sig_sign(secp256k1_ecdsa_sig_t *sig, const secp256k1_\n     secp256k1_fe_get_b32(b, &r.x);\n     int overflow = 0;\n     secp256k1_scalar_set_b32(&sig->r, b, &overflow);\n+    if (secp256k1_scalar_is_zero(&sig->r)) {\n+        /* P.x = order is on the curve, so technically sig->r could end up zero, which would be an invalid signature. */\n+        secp256k1_gej_clear(&rp);\n+        secp256k1_ge_clear(&r);\n+        return 0;\n+    }\n     if (recid)\n         *recid = (overflow ? 2 : 0) | (secp256k1_fe_is_odd(&r.y) ? 1 : 0);\n     secp256k1_scalar_t n;"
      },
      {
        "sha": "48436316e12ba5c665ba4653b16c435b7210814b",
        "filename": "src/secp256k1/src/ecmult_gen_impl.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/ecmult_gen_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/ecmult_gen_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_gen_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -73,7 +73,7 @@ static void secp256k1_ecmult_gen_start(void) {\n             secp256k1_gej_double_var(&numsbase, &numsbase);\n             if (j == 62) {\n                 /* In the last iteration, numsbase is (1 - 2^j) * nums instead. */\n-                secp256k1_gej_neg_var(&numsbase, &numsbase);\n+                secp256k1_gej_neg(&numsbase, &numsbase);\n                 secp256k1_gej_add_var(&numsbase, &numsbase, &nums_gej);\n             }\n         }"
      },
      {
        "sha": "345cfae73328c9db2fe759256cdcb6a025186ae9",
        "filename": "src/secp256k1/src/ecmult_impl.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/ecmult_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/ecmult_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -70,8 +70,8 @@ static void secp256k1_ecmult_table_precomp_ge_var(secp256k1_ge_t *pre, const sec\n         (neg)((r), &(pre)[(-(n)-1)/2]); \\\n } while(0)\n \n-#define ECMULT_TABLE_GET_GEJ(r,pre,n,w) ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_gej_neg_var)\n-#define ECMULT_TABLE_GET_GE(r,pre,n,w)  ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_ge_neg_var)\n+#define ECMULT_TABLE_GET_GEJ(r,pre,n,w) ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_gej_neg)\n+#define ECMULT_TABLE_GET_GE(r,pre,n,w)  ECMULT_TABLE_GET((r),(pre),(n),(w),secp256k1_ge_neg)\n \n typedef struct {\n     /* For accelerating the computation of a*P + b*G: */"
      },
      {
        "sha": "14e2b813c17ba3a6a0999e58f1c8b2d0f3a7d93b",
        "filename": "src/secp256k1/src/field.h",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -22,9 +22,7 @@\n #include \"libsecp256k1-config.h\"\n #endif\n \n-#if defined(USE_FIELD_GMP)\n-#include \"field_gmp.h\"\n-#elif defined(USE_FIELD_10X26)\n+#if defined(USE_FIELD_10X26)\n #include \"field_10x26.h\"\n #elif defined(USE_FIELD_5X52)\n #include \"field_5x52.h\"\n@@ -50,9 +48,20 @@ static void secp256k1_fe_stop(void);\n /** Normalize a field element. */\n static void secp256k1_fe_normalize(secp256k1_fe_t *r);\n \n+/** Weakly normalize a field element: reduce it magnitude to 1, but don't fully normalize. */\n+static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r);\n+\n /** Normalize a field element, without constant-time guarantee. */\n static void secp256k1_fe_normalize_var(secp256k1_fe_t *r);\n \n+/** Verify whether a field element represents zero i.e. would normalize to a zero value. The field\n+ *  implementation may optionally normalize the input, but this should not be relied upon. */\n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r);\n+\n+/** Verify whether a field element represents zero i.e. would normalize to a zero value. The field\n+ *  implementation may optionally normalize the input, but this should not be relied upon. */\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r);\n+\n /** Set a field element equal to a small integer. Resulting field element is normalized. */\n static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a);\n \n@@ -62,8 +71,8 @@ static int secp256k1_fe_is_zero(const secp256k1_fe_t *a);\n /** Check the \"oddness\" of a field element. Requires the input to be normalized. */\n static int secp256k1_fe_is_odd(const secp256k1_fe_t *a);\n \n-/** Compare two field elements. Requires both inputs to be normalized */\n-static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b);\n+/** Compare two field elements. Requires magnitude-1 inputs. */\n+static int secp256k1_fe_equal_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b);\n \n /** Compare two field elements. Requires both inputs to be normalized */\n static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b);"
      },
      {
        "sha": "9ef60a807ace651660c0ae031557eda65622f7b8",
        "filename": "src/secp256k1/src/field_10x26_impl.h",
        "status": "modified",
        "additions": 99,
        "deletions": 12,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field_10x26_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field_10x26_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_10x26_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -31,6 +31,7 @@ static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n     r &= (d[8] <= 0x3FFFFFFUL * m);\n     r &= (d[9] <= 0x03FFFFFUL * m);\n     r &= (a->magnitude >= 0);\n+    r &= (a->magnitude <= 32);\n     if (a->normalized) {\n         r &= (a->magnitude <= 1);\n         if (r && (d[9] == 0x03FFFFFUL)) {\n@@ -103,6 +104,37 @@ static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n #endif\n }\n \n+static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r) {\n+    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n+             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n+\n+    /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n+    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x3D1UL; t1 += (x << 6);\n+    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL;\n+    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL;\n+    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL;\n+    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL;\n+    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL;\n+    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL;\n+    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL;\n+    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL;\n+    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL;\n+\n+    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t9 >> 23 == 0);\n+\n+    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;\n+    r->n[5] = t5; r->n[6] = t6; r->n[7] = t7; r->n[8] = t8; r->n[9] = t9;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n     uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n              t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n@@ -159,6 +191,73 @@ static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n #endif\n }\n \n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n+    uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n+             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n+\n+    /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n+    uint32_t x = t9 >> 22; t9 &= 0x03FFFFFUL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint32_t z0, z1;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x3D1UL; t1 += (x << 6);\n+    t1 += (t0 >> 26); t0 &= 0x3FFFFFFUL; z0  = t0; z1  = t0 ^ 0x3D0UL;\n+    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL; z0 |= t1; z1 &= t1 ^ 0x40UL;\n+    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; z0 |= t3; z1 &= t3;\n+    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; z0 |= t4; z1 &= t4;\n+    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; z0 |= t5; z1 &= t5;\n+    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; z0 |= t6; z1 &= t6;\n+    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; z0 |= t7; z1 &= t7;\n+    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; z0 |= t8; z1 &= t8;\n+                                         z0 |= t9; z1 &= t9 ^ 0x3C00000UL;\n+\n+    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t9 >> 23 == 0);\n+\n+    return (z0 == 0) | (z1 == 0x3FFFFFFUL);\n+}\n+\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n+    uint32_t t0 = r->n[0], t9 = r->n[9];\n+\n+    /* Reduce t9 at the start so there will be at most a single carry from the first pass */\n+    uint32_t x = t9 >> 22;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x3D1UL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint32_t z0 = t0 & 0x3FFFFFFUL, z1 = z0 ^ 0x3D0UL;\n+\n+    /* Fast return path should catch the majority of cases */\n+    if ((z0 != 0UL) & (z1 != 0x3FFFFFFUL))\n+        return 0;\n+\n+    uint32_t t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n+             t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8];\n+    t9 &= 0x03FFFFFUL;\n+    t1 += (x << 6);\n+\n+    t1 += (t0 >> 26); t0  = z0;\n+    t2 += (t1 >> 26); t1 &= 0x3FFFFFFUL; z0 |= t1; z1 &= t1 ^ 0x40UL;\n+    t3 += (t2 >> 26); t2 &= 0x3FFFFFFUL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 26); t3 &= 0x3FFFFFFUL; z0 |= t3; z1 &= t3;\n+    t5 += (t4 >> 26); t4 &= 0x3FFFFFFUL; z0 |= t4; z1 &= t4;\n+    t6 += (t5 >> 26); t5 &= 0x3FFFFFFUL; z0 |= t5; z1 &= t5;\n+    t7 += (t6 >> 26); t6 &= 0x3FFFFFFUL; z0 |= t6; z1 &= t6;\n+    t8 += (t7 >> 26); t7 &= 0x3FFFFFFUL; z0 |= t7; z1 &= t7;\n+    t9 += (t8 >> 26); t8 &= 0x3FFFFFFUL; z0 |= t8; z1 &= t8;\n+                                         z0 |= t9; z1 &= t9 ^ 0x3C00000UL;\n+\n+    /* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t9 >> 23 == 0);\n+\n+    return (z0 == 0) | (z1 == 0x3FFFFFFUL);\n+}\n+\n SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n     r->n[0] = a;\n     r->n[1] = r->n[2] = r->n[3] = r->n[4] = r->n[5] = r->n[6] = r->n[7] = r->n[8] = r->n[9] = 0;\n@@ -196,18 +295,6 @@ SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {\n     }\n }\n \n-SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-#ifdef VERIFY\n-    VERIFY_CHECK(a->normalized);\n-    VERIFY_CHECK(b->normalized);\n-    secp256k1_fe_verify(a);\n-    secp256k1_fe_verify(b);\n-#endif\n-    const uint32_t *t = a->n, *u = b->n;\n-    return ((t[0]^u[0]) | (t[1]^u[1]) | (t[2]^u[2]) | (t[3]^u[3]) | (t[4]^u[4])\n-          | (t[5]^u[5]) | (t[6]^u[6]) | (t[7]^u[7]) | (t[8]^u[8]) | (t[9]^u[9])) == 0;\n-}\n-\n static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);"
      },
      {
        "sha": "4db9e6f5ff5bc5d8c7b8492575d50d497b6259da",
        "filename": "src/secp256k1/src/field_5x52_impl.h",
        "status": "modified",
        "additions": 81,
        "deletions": 15,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field_5x52_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field_5x52_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -16,12 +16,10 @@\n #include \"num.h\"\n #include \"field.h\"\n \n-#if defined(USE_FIELD_5X52_ASM)\n+#if defined(USE_ASM_X86_64)\n #include \"field_5x52_asm_impl.h\"\n-#elif defined(USE_FIELD_5X52_INT128)\n-#include \"field_5x52_int128_impl.h\"\n #else\n-#error \"Please select field_5x52 implementation\"\n+#include \"field_5x52_int128_impl.h\"\n #endif\n \n /** Implements arithmetic modulo FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F,\n@@ -45,6 +43,7 @@ static void secp256k1_fe_verify(const secp256k1_fe_t *a) {\n     r &= (d[3] <= 0xFFFFFFFFFFFFFULL * m);\n     r &= (d[4] <= 0x0FFFFFFFFFFFFULL * m);\n     r &= (a->magnitude >= 0);\n+    r &= (a->magnitude <= 2048);\n     if (a->normalized) {\n         r &= (a->magnitude <= 1);\n         if (r && (d[4] == 0x0FFFFFFFFFFFFULL) && ((d[3] & d[2] & d[1]) == 0xFFFFFFFFFFFFFULL)) {\n@@ -102,6 +101,30 @@ static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n #endif\n }\n \n+static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r) {\n+    uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n+\n+    /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n+    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x1000003D1ULL;\n+    t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL;\n+    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL;\n+    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL;\n+    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL;\n+\n+    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t4 >> 49 == 0);\n+\n+    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n     uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n \n@@ -146,6 +169,60 @@ static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n #endif\n }\n \n+static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {\n+    uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n+\n+    /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n+    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint64_t z0, z1;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x1000003D1ULL;\n+    t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL; z0  = t0; z1  = t0 ^ 0x1000003D0ULL;\n+    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL; z0 |= t1; z1 &= t1;\n+    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL; z0 |= t3; z1 &= t3;\n+                                                z0 |= t4; z1 &= t4 ^ 0xF000000000000ULL;\n+\n+    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t4 >> 49 == 0);\n+\n+    return (z0 == 0) | (z1 == 0xFFFFFFFFFFFFFULL);\n+}\n+\n+static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {\n+    uint64_t t0 = r->n[0], t4 = r->n[4];\n+\n+    /* Reduce t4 at the start so there will be at most a single carry from the first pass */\n+    uint64_t x = t4 >> 48;\n+\n+    /* The first pass ensures the magnitude is 1, ... */\n+    t0 += x * 0x1000003D1ULL;\n+\n+    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n+    uint64_t z0 = t0 & 0xFFFFFFFFFFFFFULL, z1 = z0 ^ 0x1000003D0ULL;\n+\n+    /* Fast return path should catch the majority of cases */\n+    if ((z0 != 0ULL) & (z1 != 0xFFFFFFFFFFFFFULL))\n+        return 0;\n+\n+    uint64_t t1 = r->n[1], t2 = r->n[2], t3 = r->n[3];\n+    t4 &= 0x0FFFFFFFFFFFFULL;\n+\n+    t1 += (t0 >> 52); t0  = z0;\n+    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL; z0 |= t1; z1 &= t1;\n+    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL; z0 |= t2; z1 &= t2;\n+    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL; z0 |= t3; z1 &= t3;\n+                                                z0 |= t4; z1 &= t4 ^ 0xF000000000000ULL;\n+\n+    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */\n+    VERIFY_CHECK(t4 >> 49 == 0);\n+\n+    return (z0 == 0) | (z1 == 0xFFFFFFFFFFFFFULL);\n+}\n+\n SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n     r->n[0] = a;\n     r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;\n@@ -183,17 +260,6 @@ SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {\n     }\n }\n \n-SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-#ifdef VERIFY\n-    VERIFY_CHECK(a->normalized);\n-    VERIFY_CHECK(b->normalized);\n-    secp256k1_fe_verify(a);\n-    secp256k1_fe_verify(b);\n-#endif\n-    const uint64_t *t = a->n, *u = b->n;\n-    return ((t[0]^u[0]) | (t[1]^u[1]) | (t[2]^u[2]) | (t[3]^u[3]) | (t[4]^u[4])) == 0;\n-}\n-\n static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n #ifdef VERIFY\n     VERIFY_CHECK(a->normalized);"
      },
      {
        "sha": "b390fd9de8d4801a9cad8d2a55debf52ceff2f52",
        "filename": "src/secp256k1/src/field_gmp.h",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23ef5b77a4222a628d18219ba656be545810832d/src/secp256k1/src/field_gmp.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23ef5b77a4222a628d18219ba656be545810832d/src/secp256k1/src/field_gmp.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_gmp.h?ref=23ef5b77a4222a628d18219ba656be545810832d",
        "patch": "@@ -1,18 +0,0 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n-\n-#ifndef _SECP256K1_FIELD_REPR_\n-#define _SECP256K1_FIELD_REPR_\n-\n-#include <gmp.h>\n-\n-#define FIELD_LIMBS ((256 + GMP_NUMB_BITS - 1) / GMP_NUMB_BITS)\n-\n-typedef struct {\n-    mp_limb_t n[FIELD_LIMBS+1];\n-} secp256k1_fe_t;\n-\n-#endif"
      },
      {
        "sha": "73a55c4f00d4523f5851daa9c45ffd5f9ca6dd2e",
        "filename": "src/secp256k1/src/field_gmp_impl.h",
        "status": "removed",
        "additions": 0,
        "deletions": 184,
        "changes": 184,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23ef5b77a4222a628d18219ba656be545810832d/src/secp256k1/src/field_gmp_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23ef5b77a4222a628d18219ba656be545810832d/src/secp256k1/src/field_gmp_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_gmp_impl.h?ref=23ef5b77a4222a628d18219ba656be545810832d",
        "patch": "@@ -1,184 +0,0 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n-\n-#ifndef _SECP256K1_FIELD_REPR_IMPL_H_\n-#define _SECP256K1_FIELD_REPR_IMPL_H_\n-\n-#include <stdio.h>\n-#include <string.h>\n-#include \"num.h\"\n-#include \"field.h\"\n-\n-static mp_limb_t secp256k1_field_p[FIELD_LIMBS];\n-static mp_limb_t secp256k1_field_pc[(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS];\n-\n-static void secp256k1_fe_inner_start(void) {\n-    for (int i=0; i<(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS; i++)\n-        secp256k1_field_pc[i] = 0;\n-    secp256k1_field_pc[0] += 0x3D1UL;\n-    secp256k1_field_pc[32/GMP_NUMB_BITS] += (((mp_limb_t)1) << (32 % GMP_NUMB_BITS));\n-    for (int i=0; i<FIELD_LIMBS; i++) {\n-        secp256k1_field_p[i] = 0;\n-    }\n-    mpn_sub(secp256k1_field_p, secp256k1_field_p, FIELD_LIMBS, secp256k1_field_pc, (33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS);\n-}\n-\n-static void secp256k1_fe_inner_stop(void) {\n-}\n-\n-static void secp256k1_fe_normalize(secp256k1_fe_t *r) {\n-    if (r->n[FIELD_LIMBS] != 0) {\n-#if (GMP_NUMB_BITS >= 40)\n-        mp_limb_t carry = mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x1000003D1ULL * r->n[FIELD_LIMBS]);\n-        mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x1000003D1ULL * carry);\n-#else\n-        mp_limb_t carry = mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x3D1UL * r->n[FIELD_LIMBS]) +\n-                          mpn_add_1(r->n+(32/GMP_NUMB_BITS), r->n+(32/GMP_NUMB_BITS), FIELD_LIMBS-(32/GMP_NUMB_BITS), r->n[FIELD_LIMBS] << (32 % GMP_NUMB_BITS));\n-        mpn_add_1(r->n, r->n, FIELD_LIMBS, 0x3D1UL * carry);\n-        mpn_add_1(r->n+(32/GMP_NUMB_BITS), r->n+(32/GMP_NUMB_BITS), FIELD_LIMBS-(32/GMP_NUMB_BITS), carry << (32%GMP_NUMB_BITS));\n-#endif\n-        r->n[FIELD_LIMBS] = 0;\n-    }\n-    if (mpn_cmp(r->n, secp256k1_field_p, FIELD_LIMBS) >= 0)\n-        mpn_sub(r->n, r->n, FIELD_LIMBS, secp256k1_field_p, FIELD_LIMBS);\n-}\n-\n-static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {\n-    secp256k1_fe_normalize(r);\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {\n-    r->n[0] = a;\n-    for (int i=1; i<FIELD_LIMBS+1; i++)\n-        r->n[i] = 0;\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *r) {\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        r->n[i] = 0;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe_t *a) {\n-    int ret = 1;\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        ret &= (a->n[i] == 0);\n-    return ret;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe_t *a) {\n-    return a->n[0] & 1;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-    int ret = 1;\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        ret &= (a->n[i] == b->n[i]);\n-    return ret;\n-}\n-\n-SECP256K1_INLINE static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-    for (int i=FIELD_LIMBS; i>=0; i--) {\n-        if (a->n[i] > b->n[i]) return 1;\n-        if (a->n[i] < b->n[i]) return -1;\n-    }\n-    return 0;\n-}\n-\n-static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a) {\n-    for (int i=0; i<FIELD_LIMBS+1; i++)\n-        r->n[i] = 0;\n-    for (int i=0; i<256; i++) {\n-        int limb = i/GMP_NUMB_BITS;\n-        int shift = i%GMP_NUMB_BITS;\n-        r->n[limb] |= (mp_limb_t)((a[31-i/8] >> (i%8)) & 0x1) << shift;\n-    }\n-    return (mpn_cmp(r->n, secp256k1_field_p, FIELD_LIMBS) < 0);\n-}\n-\n-/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */\n-static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe_t *a) {\n-    for (int i=0; i<32; i++) {\n-        int c = 0;\n-        for (int j=0; j<8; j++) {\n-            int limb = (8*i+j)/GMP_NUMB_BITS;\n-            int shift = (8*i+j)%GMP_NUMB_BITS;\n-            c |= ((a->n[limb] >> shift) & 0x1) << j;\n-        }\n-        r[31-i] = c;\n-    }\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe_t *r, const secp256k1_fe_t *a, int m) {\n-    (void)m;\n-    *r = *a;\n-    secp256k1_fe_normalize(r);\n-    for (int i=0; i<FIELD_LIMBS; i++)\n-        r->n[i] = ~(r->n[i]);\n-#if (GMP_NUMB_BITS >= 33)\n-    mpn_sub_1(r->n, r->n, FIELD_LIMBS, 0x1000003D0ULL);\n-#else\n-    mpn_sub_1(r->n, r->n, FIELD_LIMBS, 0x3D0UL);\n-    mpn_sub_1(r->n+(32/GMP_NUMB_BITS), r->n+(32/GMP_NUMB_BITS), FIELD_LIMBS-(32/GMP_NUMB_BITS), 0x1UL << (32%GMP_NUMB_BITS));\n-#endif\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe_t *r, int a) {\n-    mpn_mul_1(r->n, r->n, FIELD_LIMBS+1, a);\n-}\n-\n-SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n-    mpn_add(r->n, r->n, FIELD_LIMBS+1, a->n, FIELD_LIMBS+1);\n-}\n-\n-static void secp256k1_fe_reduce(secp256k1_fe_t *r, mp_limb_t *tmp) {\n-    /** <A1 A2 A3 A4> <B1 B2 B3 B4>\n-     *        B1 B2 B3 B4\n-     *  + C * A1 A2 A3 A4\n-     *  +  A1 A2 A3 A4\n-     */\n-\n-#if (GMP_NUMB_BITS >= 33)\n-    mp_limb_t o = mpn_addmul_1(tmp, tmp+FIELD_LIMBS, FIELD_LIMBS, 0x1000003D1ULL);\n-#else\n-    mp_limb_t o = mpn_addmul_1(tmp, tmp+FIELD_LIMBS, FIELD_LIMBS, 0x3D1UL) +\n-                  mpn_addmul_1(tmp+(32/GMP_NUMB_BITS), tmp+FIELD_LIMBS, FIELD_LIMBS-(32/GMP_NUMB_BITS), 0x1UL << (32%GMP_NUMB_BITS));\n-#endif\n-    mp_limb_t q[1+(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS];\n-    q[(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS] = mpn_mul_1(q, secp256k1_field_pc, (33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS, o);\n-#if (GMP_NUMB_BITS <= 32)\n-    mp_limb_t o2 = tmp[2*FIELD_LIMBS-(32/GMP_NUMB_BITS)] << (32%GMP_NUMB_BITS);\n-    q[(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS] += mpn_addmul_1(q, secp256k1_field_pc, (33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS, o2);\n-#endif\n-    r->n[FIELD_LIMBS] = mpn_add(r->n, tmp, FIELD_LIMBS, q, 1+(33+GMP_NUMB_BITS-1)/GMP_NUMB_BITS);\n-}\n-\n-static void secp256k1_fe_mul(secp256k1_fe_t *r, const secp256k1_fe_t *a, const secp256k1_fe_t * SECP256K1_RESTRICT b) {\n-    VERIFY_CHECK(r != b);\n-    secp256k1_fe_t ac = *a;\n-    secp256k1_fe_t bc = *b;\n-    secp256k1_fe_normalize(&ac);\n-    secp256k1_fe_normalize(&bc);\n-    mp_limb_t tmp[2*FIELD_LIMBS];\n-    mpn_mul_n(tmp, ac.n, bc.n, FIELD_LIMBS);\n-    secp256k1_fe_reduce(r, tmp);\n-}\n-\n-static void secp256k1_fe_sqr(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n-    secp256k1_fe_t ac = *a;\n-    secp256k1_fe_normalize(&ac);\n-    mp_limb_t tmp[2*FIELD_LIMBS];\n-    mpn_sqr(tmp, ac.n, FIELD_LIMBS);\n-    secp256k1_fe_reduce(r, tmp);\n-}\n-\n-static void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k1_fe_t *a, int flag) {\n-    mp_limb_t mask0 = flag + ~((mp_limb_t)0), mask1 = ~mask0;\n-    for (int i = 0; i <= FIELD_LIMBS; i++) {\n-        r->n[i] = (r->n[i] & mask0) | (a->n[i] & mask1);\n-    }\n-}\n-\n-#endif"
      },
      {
        "sha": "4e2c24aa153541ed754106c31eb77eb3fcfbe670",
        "filename": "src/secp256k1/src/field_impl.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/field_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -13,9 +13,7 @@\n \n #include \"util.h\"\n \n-#if defined(USE_FIELD_GMP)\n-#include \"field_gmp_impl.h\"\n-#elif defined(USE_FIELD_10X26)\n+#if defined(USE_FIELD_10X26)\n #include \"field_10x26_impl.h\"\n #elif defined(USE_FIELD_5X52)\n #include \"field_5x52_impl.h\"\n@@ -66,6 +64,13 @@ static int secp256k1_fe_set_hex(secp256k1_fe_t *r, const char *a, int alen) {\n     return secp256k1_fe_set_b32(r, tmp);\n }\n \n+SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n+    secp256k1_fe_t na;\n+    secp256k1_fe_negate(&na, a, 1);\n+    secp256k1_fe_add(&na, b);\n+    return secp256k1_fe_normalizes_to_zero_var(&na);\n+}\n+\n static int secp256k1_fe_sqrt_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n \n     /** The binary representation of (p + 1)/4 has 3 blocks of 1s, with lengths in\n@@ -130,10 +135,7 @@ static int secp256k1_fe_sqrt_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {\n     /* Check that a square root was actually calculated */\n \n     secp256k1_fe_sqr(&t1, r);\n-    secp256k1_fe_negate(&t1, &t1, 1);\n-    secp256k1_fe_add(&t1, a);\n-    secp256k1_fe_normalize_var(&t1);\n-    return secp256k1_fe_is_zero(&t1);\n+    return secp256k1_fe_equal_var(&t1, a);\n }\n \n static void secp256k1_fe_inv(secp256k1_fe_t *r, const secp256k1_fe_t *a) {"
      },
      {
        "sha": "6dea6bb5acb8047326147d9d54b413ccfc1f2e31",
        "filename": "src/secp256k1/src/group.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/group.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/group.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -60,7 +60,6 @@ static int secp256k1_ge_is_infinity(const secp256k1_ge_t *a);\n static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a);\n \n static void secp256k1_ge_neg(secp256k1_ge_t *r, const secp256k1_ge_t *a);\n-static void secp256k1_ge_neg_var(secp256k1_ge_t *r, const secp256k1_ge_t *a);\n \n /** Get a hex representation of a point. *rlen will be overwritten with the real length. */\n static void secp256k1_ge_get_hex(char *r, int *rlen, const secp256k1_ge_t *a);\n@@ -81,11 +80,11 @@ static void secp256k1_gej_set_xy(secp256k1_gej_t *r, const secp256k1_fe_t *x, co\n /** Set a group element (jacobian) equal to another which is given in affine coordinates. */\n static void secp256k1_gej_set_ge(secp256k1_gej_t *r, const secp256k1_ge_t *a);\n \n-/** Get the X coordinate of a group element (jacobian). */\n-static void secp256k1_gej_get_x_var(secp256k1_fe_t *r, const secp256k1_gej_t *a);\n+/** Compare the X coordinate of a group element (jacobian). */\n+static int secp256k1_gej_eq_x_var(const secp256k1_fe_t *x, const secp256k1_gej_t *a);\n \n /** Set r equal to the inverse of a (i.e., mirrored around the X axis) */\n-static void secp256k1_gej_neg_var(secp256k1_gej_t *r, const secp256k1_gej_t *a);\n+static void secp256k1_gej_neg(secp256k1_gej_t *r, const secp256k1_gej_t *a);\n \n /** Check whether a group element is the point at infinity. */\n static int secp256k1_gej_is_infinity(const secp256k1_gej_t *a);"
      },
      {
        "sha": "fef06df2892d1a5f4372d4028c8dea42efce96fc",
        "filename": "src/secp256k1/src/group_impl.h",
        "status": "modified",
        "additions": 26,
        "deletions": 40,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/group_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/group_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -29,13 +29,7 @@ static int secp256k1_ge_is_infinity(const secp256k1_ge_t *a) {\n \n static void secp256k1_ge_neg(secp256k1_ge_t *r, const secp256k1_ge_t *a) {\n     *r = *a;\n-    secp256k1_fe_normalize(&r->y);\n-    secp256k1_fe_negate(&r->y, &r->y, 1);\n-}\n-\n-static void secp256k1_ge_neg_var(secp256k1_ge_t *r, const secp256k1_ge_t *a) {\n-    *r = *a;\n-    secp256k1_fe_normalize_var(&r->y);\n+    secp256k1_fe_normalize_weak(&r->y);\n     secp256k1_fe_negate(&r->y, &r->y, 1);\n }\n \n@@ -163,17 +157,19 @@ static void secp256k1_gej_set_ge(secp256k1_gej_t *r, const secp256k1_ge_t *a) {\n    secp256k1_fe_set_int(&r->z, 1);\n }\n \n-static void secp256k1_gej_get_x_var(secp256k1_fe_t *r, const secp256k1_gej_t *a) {\n-    secp256k1_fe_t zi2; secp256k1_fe_inv_var(&zi2, &a->z); secp256k1_fe_sqr(&zi2, &zi2);\n-    secp256k1_fe_mul(r, &a->x, &zi2);\n+static int secp256k1_gej_eq_x_var(const secp256k1_fe_t *x, const secp256k1_gej_t *a) {\n+    VERIFY_CHECK(!a->infinity);\n+    secp256k1_fe_t r; secp256k1_fe_sqr(&r, &a->z); secp256k1_fe_mul(&r, &r, x);\n+    secp256k1_fe_t r2 = a->x; secp256k1_fe_normalize_weak(&r2);\n+    return secp256k1_fe_equal_var(&r, &r2);\n }\n \n-static void secp256k1_gej_neg_var(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n+static void secp256k1_gej_neg(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n     r->infinity = a->infinity;\n     r->x = a->x;\n     r->y = a->y;\n     r->z = a->z;\n-    secp256k1_fe_normalize_var(&r->y);\n+    secp256k1_fe_normalize_weak(&r->y);\n     secp256k1_fe_negate(&r->y, &r->y, 1);\n }\n \n@@ -195,9 +191,8 @@ static int secp256k1_gej_is_valid_var(const secp256k1_gej_t *a) {\n     secp256k1_fe_t z6; secp256k1_fe_sqr(&z6, &z2); secp256k1_fe_mul(&z6, &z6, &z2);\n     secp256k1_fe_mul_int(&z6, 7);\n     secp256k1_fe_add(&x3, &z6);\n-    secp256k1_fe_normalize_var(&y2);\n-    secp256k1_fe_normalize_var(&x3);\n-    return secp256k1_fe_equal(&y2, &x3);\n+    secp256k1_fe_normalize_weak(&x3);\n+    return secp256k1_fe_equal_var(&y2, &x3);\n }\n \n static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a) {\n@@ -208,9 +203,8 @@ static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a) {\n     secp256k1_fe_t x3; secp256k1_fe_sqr(&x3, &a->x); secp256k1_fe_mul(&x3, &x3, &a->x);\n     secp256k1_fe_t c; secp256k1_fe_set_int(&c, 7);\n     secp256k1_fe_add(&x3, &c);\n-    secp256k1_fe_normalize_var(&y2);\n-    secp256k1_fe_normalize_var(&x3);\n-    return secp256k1_fe_equal(&y2, &x3);\n+    secp256k1_fe_normalize_weak(&x3);\n+    return secp256k1_fe_equal_var(&y2, &x3);\n }\n \n static void secp256k1_gej_double_var(secp256k1_gej_t *r, const secp256k1_gej_t *a) {\n@@ -261,20 +255,16 @@ static void secp256k1_gej_add_var(secp256k1_gej_t *r, const secp256k1_gej_t *a,\n     secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &z12);\n     secp256k1_fe_t s1; secp256k1_fe_mul(&s1, &a->y, &z22); secp256k1_fe_mul(&s1, &s1, &b->z);\n     secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);\n-    secp256k1_fe_normalize_var(&u1);\n-    secp256k1_fe_normalize_var(&u2);\n-    if (secp256k1_fe_equal(&u1, &u2)) {\n-        secp256k1_fe_normalize_var(&s1);\n-        secp256k1_fe_normalize_var(&s2);\n-        if (secp256k1_fe_equal(&s1, &s2)) {\n+    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n+    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n+    if (secp256k1_fe_normalizes_to_zero_var(&h)) {\n+        if (secp256k1_fe_normalizes_to_zero_var(&i)) {\n             secp256k1_gej_double_var(r, a);\n         } else {\n             r->infinity = 1;\n         }\n         return;\n     }\n-    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n-    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n     secp256k1_fe_t i2; secp256k1_fe_sqr(&i2, &i);\n     secp256k1_fe_t h2; secp256k1_fe_sqr(&h2, &h);\n     secp256k1_fe_t h3; secp256k1_fe_mul(&h3, &h, &h2);\n@@ -300,23 +290,20 @@ static void secp256k1_gej_add_ge_var(secp256k1_gej_t *r, const secp256k1_gej_t *\n     }\n     r->infinity = 0;\n     secp256k1_fe_t z12; secp256k1_fe_sqr(&z12, &a->z);\n-    secp256k1_fe_t u1 = a->x;\n+    secp256k1_fe_t u1 = a->x; secp256k1_fe_normalize_weak(&u1);\n     secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &z12);\n-    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize_var(&s1);\n+    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize_weak(&s1);\n     secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);\n-    secp256k1_fe_normalize_var(&u1);\n-    secp256k1_fe_normalize_var(&u2);\n-    if (secp256k1_fe_equal(&u1, &u2)) {\n-        secp256k1_fe_normalize_var(&s2);\n-        if (secp256k1_fe_equal(&s1, &s2)) {\n+    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n+    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n+    if (secp256k1_fe_normalizes_to_zero_var(&h)) {\n+        if (secp256k1_fe_normalizes_to_zero_var(&i)) {\n             secp256k1_gej_double_var(r, a);\n         } else {\n             r->infinity = 1;\n         }\n         return;\n     }\n-    secp256k1_fe_t h; secp256k1_fe_negate(&h, &u1, 1); secp256k1_fe_add(&h, &u2);\n-    secp256k1_fe_t i; secp256k1_fe_negate(&i, &s1, 1); secp256k1_fe_add(&i, &s2);\n     secp256k1_fe_t i2; secp256k1_fe_sqr(&i2, &i);\n     secp256k1_fe_t h2; secp256k1_fe_sqr(&h2, &h);\n     secp256k1_fe_t h3; secp256k1_fe_mul(&h3, &h, &h2);\n@@ -355,9 +342,9 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n      */\n \n     secp256k1_fe_t zz; secp256k1_fe_sqr(&zz, &a->z);                /* z = Z1^2 */\n-    secp256k1_fe_t u1 = a->x; secp256k1_fe_normalize(&u1);          /* u1 = U1 = X1*Z2^2 (1) */\n+    secp256k1_fe_t u1 = a->x; secp256k1_fe_normalize_weak(&u1);     /* u1 = U1 = X1*Z2^2 (1) */\n     secp256k1_fe_t u2; secp256k1_fe_mul(&u2, &b->x, &zz);           /* u2 = U2 = X2*Z1^2 (1) */\n-    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize(&s1);          /* s1 = S1 = Y1*Z2^3 (1) */\n+    secp256k1_fe_t s1 = a->y; secp256k1_fe_normalize_weak(&s1);     /* s1 = S1 = Y1*Z2^3 (1) */\n     secp256k1_fe_t s2; secp256k1_fe_mul(&s2, &b->y, &zz);           /* s2 = Y2*Z2^2 (1) */\n     secp256k1_fe_mul(&s2, &s2, &a->z);                              /* s2 = S2 = Y2*Z1^3 (1) */\n     secp256k1_fe_t z = a->z;                                        /* z = Z = Z1*Z2 (8) */\n@@ -371,8 +358,7 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     secp256k1_fe_add(&rr, &t);                                      /* rr = R = T^2-U1*U2 (3) */\n     secp256k1_fe_sqr(&t, &rr);                                      /* t = R^2 (1) */\n     secp256k1_fe_mul(&r->z, &m, &z);                                /* r->z = M*Z (1) */\n-    secp256k1_fe_normalize(&r->z);\n-    int infinity = secp256k1_fe_is_zero(&r->z) * (1 - a->infinity);\n+    int infinity = secp256k1_fe_normalizes_to_zero(&r->z) * (1 - a->infinity);\n     secp256k1_fe_mul_int(&r->z, 2 * (1 - a->infinity)); /* r->z = Z3 = 2*M*Z (2) */\n     r->x = t;                                           /* r->x = R^2 (1) */\n     secp256k1_fe_negate(&q, &q, 1);                     /* q = -Q (2) */\n@@ -384,7 +370,7 @@ static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, c\n     secp256k1_fe_mul(&t, &t, &rr);                      /* t = R*(2*R^2-3*Q) (1) */\n     secp256k1_fe_add(&t, &n);                           /* t = R*(2*R^2-3*Q)+M^4 (2) */\n     secp256k1_fe_negate(&r->y, &t, 2);                  /* r->y = R*(3*Q-2*R^2)-M^4 (3) */\n-    secp256k1_fe_normalize(&r->y);\n+    secp256k1_fe_normalize_weak(&r->y);\n     secp256k1_fe_mul_int(&r->x, 4 * (1 - a->infinity)); /* r->x = X3 = 4*(R^2-Q) */\n     secp256k1_fe_mul_int(&r->y, 4 * (1 - a->infinity)); /* r->y = Y3 = 4*R*(3*Q-2*R^2)-4*M^4 (4) */\n "
      },
      {
        "sha": "d1e65b968a9e5d44578bb1d0a051f499ea4f5e30",
        "filename": "src/secp256k1/src/hash.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -0,0 +1,41 @@\n+/**********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_HASH_\n+#define _SECP256K1_HASH_\n+\n+#include <stdlib.h>\n+#include <stdint.h>\n+\n+typedef struct {\n+    uint32_t s[32];\n+    unsigned char buf[64];\n+    size_t bytes;\n+} secp256k1_sha256_t;\n+\n+static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash);\n+static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t size);\n+static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32);\n+\n+typedef struct {\n+    secp256k1_sha256_t inner, outer;\n+} secp256k1_hmac_sha256_t;\n+\n+static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t size);\n+static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size);\n+static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32);\n+\n+typedef struct {\n+    unsigned char v[32];\n+    unsigned char k[32];\n+    int retry;\n+} secp256k1_rfc6979_hmac_sha256_t;\n+\n+static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen);\n+static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen);\n+static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng);\n+\n+#endif"
      },
      {
        "sha": "f35c5f7a8219d46a623b94a48b794d4ea51a7207",
        "filename": "src/secp256k1/src/hash_impl.h",
        "status": "added",
        "additions": 291,
        "deletions": 0,
        "changes": 291,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/hash_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/hash_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash_impl.h?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -0,0 +1,291 @@\n+/**********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                   *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef _SECP256K1_HASH_IMPL_H_\n+#define _SECP256K1_HASH_IMPL_H_\n+\n+#include \"hash.h\"\n+\n+#include <stdlib.h>\n+#include <stdint.h>\n+\n+#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))\n+#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))\n+#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))\n+#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))\n+#define sigma0(x) (((x) >> 7 | (x) << 25) ^ ((x) >> 18 | (x) << 14) ^ ((x) >> 3))\n+#define sigma1(x) (((x) >> 17 | (x) << 15) ^ ((x) >> 19 | (x) << 13) ^ ((x) >> 10))\n+\n+#define Round(a,b,c,d,e,f,g,h,k,w) do { \\\n+    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \\\n+    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \\\n+    (d) += t1; \\\n+    (h) = t1 + t2; \\\n+} while(0)\n+\n+#define ReadBE32(p) (((uint32_t)((p)[0])) << 24 | ((uint32_t)((p)[1])) << 16 | ((uint32_t)((p)[2])) << 8 | ((uint32_t)((p)[3])))\n+#define WriteBE32(p, v) do { (p)[0] = (v) >> 24; (p)[1] = (v) >> 16; (p)[2] = (v) >> 8; (p)[3] = (v); } while(0)\n+\n+static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash) {\n+    hash->s[0] = 0x6a09e667ul;\n+    hash->s[1] = 0xbb67ae85ul;\n+    hash->s[2] = 0x3c6ef372ul;\n+    hash->s[3] = 0xa54ff53aul;\n+    hash->s[4] = 0x510e527ful;\n+    hash->s[5] = 0x9b05688cul;\n+    hash->s[6] = 0x1f83d9abul;\n+    hash->s[7] = 0x5be0cd19ul;\n+    hash->bytes = 0;\n+}\n+\n+/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n+static void secp256k1_sha256_transform(uint32_t* s, const unsigned char* chunk) {\n+    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n+    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n+    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+\n+    s[0] += a;\n+    s[1] += b;\n+    s[2] += c;\n+    s[3] += d;\n+    s[4] += e;\n+    s[5] += f;\n+    s[6] += g;\n+    s[7] += h;\n+}\n+\n+static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t len) {\n+    const unsigned char* end = data + len;\n+    size_t bufsize = hash->bytes % 64;\n+    if (bufsize && bufsize + len >= 64) {\n+        // Fill the buffer, and process it.\n+        memcpy(hash->buf + bufsize, data, 64 - bufsize);\n+        hash->bytes += 64 - bufsize;\n+        data += 64 - bufsize;\n+        secp256k1_sha256_transform(hash->s, hash->buf);\n+        bufsize = 0;\n+    }\n+    while (end >= data + 64) {\n+        // Process full chunks directly from the source.\n+        secp256k1_sha256_transform(hash->s, data);\n+        hash->bytes += 64;\n+        data += 64;\n+    }\n+    if (end > data) {\n+        // Fill the buffer with what remains.\n+        memcpy(hash->buf + bufsize, data, end - data);\n+        hash->bytes += end - data;\n+    }\n+}\n+\n+static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32) {\n+    static const unsigned char pad[64] = {0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n+    unsigned char sizedesc[8];\n+    WriteBE32(sizedesc, hash->bytes >> 29);\n+    WriteBE32(sizedesc + 4, hash->bytes << 3);\n+    secp256k1_sha256_write(hash, pad, 1 + ((119 - (hash->bytes % 64)) % 64));\n+    secp256k1_sha256_write(hash, sizedesc, 8);\n+    WriteBE32(out32, hash->s[0]);\n+    hash->s[0] = 0;\n+    WriteBE32(out32 + 4, hash->s[1]);\n+    hash->s[1] = 0;\n+    WriteBE32(out32 + 8, hash->s[2]);\n+    hash->s[2] = 0;\n+    WriteBE32(out32 + 12, hash->s[3]);\n+    hash->s[3] = 0;\n+    WriteBE32(out32 + 16, hash->s[4]);\n+    hash->s[4] = 0;\n+    WriteBE32(out32 + 20, hash->s[5]);\n+    hash->s[5] = 0;\n+    WriteBE32(out32 + 24, hash->s[6]);\n+    hash->s[6] = 0;\n+    WriteBE32(out32 + 28, hash->s[7]);\n+    hash->s[7] = 0;\n+}\n+\n+static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t keylen) {\n+    unsigned char rkey[64];\n+    if (keylen <= 64) {\n+        memcpy(rkey, key, keylen);\n+        memset(rkey + keylen, 0, 64 - keylen);\n+    } else {\n+        secp256k1_sha256_t sha256;\n+        secp256k1_sha256_initialize(&sha256);\n+        secp256k1_sha256_write(&sha256, key, keylen);\n+        secp256k1_sha256_finalize(&sha256, rkey);\n+        memset(rkey + 32, 0, 32);\n+    }\n+\n+    secp256k1_sha256_initialize(&hash->outer);\n+    for (int n = 0; n < 64; n++)\n+        rkey[n] ^= 0x5c;\n+    secp256k1_sha256_write(&hash->outer, rkey, 64);\n+\n+    secp256k1_sha256_initialize(&hash->inner);\n+    for (int n = 0; n < 64; n++)\n+        rkey[n] ^= 0x5c ^ 0x36;\n+    secp256k1_sha256_write(&hash->inner, rkey, 64);\n+    memset(rkey, 0, 64);\n+}\n+\n+static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size) {\n+    secp256k1_sha256_write(&hash->inner, data, size);\n+}\n+\n+static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32) {\n+    unsigned char temp[32];\n+    secp256k1_sha256_finalize(&hash->inner, temp);\n+    secp256k1_sha256_write(&hash->outer, temp, 32);\n+    memset(temp, 0, 32);\n+    secp256k1_sha256_finalize(&hash->outer, out32);\n+}\n+\n+\n+static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen) {\n+    static const unsigned char zero[1] = {0x00};\n+    static const unsigned char one[1] = {0x01};\n+\n+    memset(rng->v, 0x01, 32);\n+    memset(rng->k, 0x00, 32);\n+\n+    secp256k1_hmac_sha256_t hmac;\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_write(&hmac, zero, 1);\n+    secp256k1_hmac_sha256_write(&hmac, key, keylen);\n+    secp256k1_hmac_sha256_write(&hmac, msg, msglen);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_write(&hmac, one, 1);\n+    secp256k1_hmac_sha256_write(&hmac, key, keylen);\n+    secp256k1_hmac_sha256_write(&hmac, msg, msglen);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n+    secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+    secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+    secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+    rng->retry = 0;\n+}\n+\n+static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen) {\n+    static const unsigned char zero[1] = {0x00};\n+    if (rng->retry) {\n+        secp256k1_hmac_sha256_t hmac;\n+        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+        secp256k1_hmac_sha256_write(&hmac, zero, 1);\n+        secp256k1_hmac_sha256_finalize(&hmac, rng->k);\n+        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+        secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+    }\n+\n+    while (outlen > 0) {\n+        secp256k1_hmac_sha256_t hmac;\n+        secp256k1_hmac_sha256_initialize(&hmac, rng->k, 32);\n+        secp256k1_hmac_sha256_write(&hmac, rng->v, 32);\n+        secp256k1_hmac_sha256_finalize(&hmac, rng->v);\n+        int now = outlen;\n+        if (now > 32) {\n+            now = 32;\n+        }\n+        memcpy(out, rng->v, now);\n+        out += now;\n+        outlen -= now;\n+    }\n+\n+    rng->retry = 1;\n+}\n+\n+static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng) {\n+    memset(rng->k, 0, 32);\n+    memset(rng->v, 0, 32);\n+    rng->retry = 0;\n+}\n+\n+\n+#undef Round\n+#undef sigma0\n+#undef sigma1\n+#undef Sigma0\n+#undef Sigma1\n+#undef Ch\n+#undef Maj\n+#undef ReadBE32\n+#undef WriteBE32\n+\n+#endif"
      },
      {
        "sha": "58bcd8d009e9156f8516e5f466a417003154e8ab",
        "filename": "src/secp256k1/src/secp256k1.c",
        "status": "modified",
        "additions": 58,
        "deletions": 15,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/secp256k1.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/secp256k1.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/secp256k1.c?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -17,6 +17,7 @@\n #include \"ecmult_gen_impl.h\"\n #include \"ecdsa_impl.h\"\n #include \"eckey_impl.h\"\n+#include \"hash_impl.h\"\n \n void secp256k1_start(unsigned int flags) {\n     secp256k1_fe_start();\n@@ -69,49 +70,91 @@ int secp256k1_ecdsa_verify(const unsigned char *msg32, const unsigned char *sig,\n     return ret;\n }\n \n-int secp256k1_ecdsa_sign(const unsigned char *msg32, unsigned char *signature, int *signaturelen, const unsigned char *seckey, const unsigned char *nonce) {\n+static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+   (void)data;\n+   secp256k1_rfc6979_hmac_sha256_t rng;\n+   secp256k1_rfc6979_hmac_sha256_initialize(&rng, key32, 32, msg32, 32);\n+   for (unsigned int i = 0; i <= counter; i++) {\n+       secp256k1_rfc6979_hmac_sha256_generate(&rng, nonce32, 32);\n+   }\n+   secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+   return 1;\n+}\n+\n+const secp256k1_nonce_function_t secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;\n+const secp256k1_nonce_function_t secp256k1_nonce_function_default = nonce_function_rfc6979;\n+\n+int secp256k1_ecdsa_sign(const unsigned char *msg32, unsigned char *signature, int *signaturelen, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata) {\n     DEBUG_CHECK(secp256k1_ecmult_gen_consts != NULL);\n     DEBUG_CHECK(msg32 != NULL);\n     DEBUG_CHECK(signature != NULL);\n     DEBUG_CHECK(signaturelen != NULL);\n     DEBUG_CHECK(seckey != NULL);\n-    DEBUG_CHECK(nonce != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n \n     secp256k1_scalar_t sec, non, msg;\n     secp256k1_scalar_set_b32(&sec, seckey, NULL);\n-    int overflow = 0;\n-    secp256k1_scalar_set_b32(&non, nonce, &overflow);\n     secp256k1_scalar_set_b32(&msg, msg32, NULL);\n-    int ret = !secp256k1_scalar_is_zero(&non) && !overflow;\n+    int overflow = 0;\n+    int ret = 0;\n+    unsigned int count = 0;\n     secp256k1_ecdsa_sig_t sig;\n-    if (ret) {\n-        ret = secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, NULL);\n+    while (1) {\n+        unsigned char nonce32[32];\n+        ret = noncefp(nonce32, msg32, seckey, count, noncedata);\n+        if (!ret) {\n+            break;\n+        }\n+        secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+        memset(nonce32, 0, 32);\n+        if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n+            if (secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, NULL)) {\n+                break;\n+            }\n+        }\n+        count++;\n     }\n     if (ret) {\n-        secp256k1_ecdsa_sig_serialize(signature, signaturelen, &sig);\n+        ret = secp256k1_ecdsa_sig_serialize(signature, signaturelen, &sig);\n     }\n     secp256k1_scalar_clear(&msg);\n     secp256k1_scalar_clear(&non);\n     secp256k1_scalar_clear(&sec);\n     return ret;\n }\n \n-int secp256k1_ecdsa_sign_compact(const unsigned char *msg32, unsigned char *sig64, const unsigned char *seckey, const unsigned char *nonce, int *recid) {\n+int secp256k1_ecdsa_sign_compact(const unsigned char *msg32, unsigned char *sig64, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata, int *recid) {\n     DEBUG_CHECK(secp256k1_ecmult_gen_consts != NULL);\n     DEBUG_CHECK(msg32 != NULL);\n     DEBUG_CHECK(sig64 != NULL);\n     DEBUG_CHECK(seckey != NULL);\n-    DEBUG_CHECK(nonce != NULL);\n+    if (noncefp == NULL) {\n+        noncefp = secp256k1_nonce_function_default;\n+    }\n \n     secp256k1_scalar_t sec, non, msg;\n     secp256k1_scalar_set_b32(&sec, seckey, NULL);\n-    int overflow = 0;\n-    secp256k1_scalar_set_b32(&non, nonce, &overflow);\n     secp256k1_scalar_set_b32(&msg, msg32, NULL);\n-    int ret = !secp256k1_scalar_is_zero(&non) && !overflow;\n+    int overflow = 0;\n+    int ret = 0;\n+    unsigned int count = 0;\n     secp256k1_ecdsa_sig_t sig;\n-    if (ret) {\n-        ret = secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, recid);\n+    while (1) {\n+        unsigned char nonce32[32];\n+        ret = noncefp(nonce32, msg32, seckey, count, noncedata);\n+        if (!ret) {\n+            break;\n+        }\n+        secp256k1_scalar_set_b32(&non, nonce32, &overflow);\n+        memset(nonce32, 0, 32);\n+        if (!secp256k1_scalar_is_zero(&non) && !overflow) {\n+            if (secp256k1_ecdsa_sig_sign(&sig, &sec, &msg, &non, recid)) {\n+                break;\n+            }\n+        }\n+        count++;\n     }\n     if (ret) {\n         secp256k1_scalar_get_b32(sig64, &sig.r);"
      },
      {
        "sha": "cff32f1d06872a41b135de5766d4590b37d84388",
        "filename": "src/secp256k1/src/tests.c",
        "status": "modified",
        "additions": 382,
        "deletions": 120,
        "changes": 502,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/tests.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/secp256k1/src/tests.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/tests.c?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -36,12 +36,19 @@ void random_field_element_test(secp256k1_fe_t *fe) {\n }\n \n void random_field_element_magnitude(secp256k1_fe_t *fe) {\n+    int n = secp256k1_rand32() % 9;\n     secp256k1_fe_normalize(fe);\n-    int n = secp256k1_rand32() % 4;\n-    for (int i = 0; i < n; i++) {\n-        secp256k1_fe_negate(fe, fe, 1 + 2*i);\n-        secp256k1_fe_negate(fe, fe, 2 + 2*i);\n+    if (n == 0) {\n+        return;\n     }\n+    secp256k1_fe_t zero;\n+    secp256k1_fe_clear(&zero);\n+    secp256k1_fe_negate(&zero, &zero, 0);\n+    secp256k1_fe_mul_int(&zero, n - 1);\n+    secp256k1_fe_add(fe, &zero);\n+#ifdef VERIFY\n+    CHECK(fe->magnitude == n);\n+#endif\n }\n \n void random_group_element_test(secp256k1_ge_t *ge) {\n@@ -91,6 +98,121 @@ void random_scalar_order(secp256k1_scalar_t *num) {\n     } while(1);\n }\n \n+/***** HASH TESTS *****/\n+\n+void run_sha256_tests(void) {\n+    static const char *inputs[8] = {\n+        \"\", \"abc\", \"message digest\", \"secure hash algorithm\", \"SHA256 is considered to be safe\",\n+        \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",\n+        \"For this sample, this 63-byte string will be used as input data\",\n+        \"This is exactly 64 bytes long, not counting the terminating byte\"\n+    };\n+    static const unsigned char outputs[8][32] = {\n+        {0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55},\n+        {0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea, 0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23, 0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c, 0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad},\n+        {0xf7, 0x84, 0x6f, 0x55, 0xcf, 0x23, 0xe1, 0x4e, 0xeb, 0xea, 0xb5, 0xb4, 0xe1, 0x55, 0x0c, 0xad, 0x5b, 0x50, 0x9e, 0x33, 0x48, 0xfb, 0xc4, 0xef, 0xa3, 0xa1, 0x41, 0x3d, 0x39, 0x3c, 0xb6, 0x50},\n+        {0xf3, 0x0c, 0xeb, 0x2b, 0xb2, 0x82, 0x9e, 0x79, 0xe4, 0xca, 0x97, 0x53, 0xd3, 0x5a, 0x8e, 0xcc, 0x00, 0x26, 0x2d, 0x16, 0x4c, 0xc0, 0x77, 0x08, 0x02, 0x95, 0x38, 0x1c, 0xbd, 0x64, 0x3f, 0x0d},\n+        {0x68, 0x19, 0xd9, 0x15, 0xc7, 0x3f, 0x4d, 0x1e, 0x77, 0xe4, 0xe1, 0xb5, 0x2d, 0x1f, 0xa0, 0xf9, 0xcf, 0x9b, 0xea, 0xea, 0xd3, 0x93, 0x9f, 0x15, 0x87, 0x4b, 0xd9, 0x88, 0xe2, 0xa2, 0x36, 0x30},\n+        {0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39, 0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1},\n+        {0xf0, 0x8a, 0x78, 0xcb, 0xba, 0xee, 0x08, 0x2b, 0x05, 0x2a, 0xe0, 0x70, 0x8f, 0x32, 0xfa, 0x1e, 0x50, 0xc5, 0xc4, 0x21, 0xaa, 0x77, 0x2b, 0xa5, 0xdb, 0xb4, 0x06, 0xa2, 0xea, 0x6b, 0xe3, 0x42},\n+        {0xab, 0x64, 0xef, 0xf7, 0xe8, 0x8e, 0x2e, 0x46, 0x16, 0x5e, 0x29, 0xf2, 0xbc, 0xe4, 0x18, 0x26, 0xbd, 0x4c, 0x7b, 0x35, 0x52, 0xf6, 0xb3, 0x82, 0xa9, 0xe7, 0xd3, 0xaf, 0x47, 0xc2, 0x45, 0xf8}\n+    };\n+    for (int i = 0; i < 8; i++) {\n+        secp256k1_sha256_t hasher;\n+        secp256k1_sha256_initialize(&hasher);\n+        secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i]), strlen(inputs[i]));\n+        unsigned char out[32];\n+        secp256k1_sha256_finalize(&hasher, out);\n+        CHECK(memcmp(out, outputs[i], 32) == 0);\n+        if (strlen(inputs[i]) > 0) {\n+            secp256k1_sha256_initialize(&hasher);\n+            int split = secp256k1_rand32() % strlen(inputs[i]);\n+            secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i]), split);\n+            secp256k1_sha256_write(&hasher, (const unsigned char*)(inputs[i] + split), strlen(inputs[i]) - split);\n+            secp256k1_sha256_finalize(&hasher, out);\n+            CHECK(memcmp(out, outputs[i], 32) == 0);\n+        }\n+    }\n+}\n+\n+void run_hmac_sha256_tests(void) {\n+    static const char *keys[6] = {\n+        \"\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\",\n+        \"\\x4a\\x65\\x66\\x65\",\n+        \"\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\",\n+        \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\",\n+        \"\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\",\n+        \"\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa\"\n+    };\n+    static const char *inputs[6] = {\n+        \"\\x48\\x69\\x20\\x54\\x68\\x65\\x72\\x65\",\n+        \"\\x77\\x68\\x61\\x74\\x20\\x64\\x6f\\x20\\x79\\x61\\x20\\x77\\x61\\x6e\\x74\\x20\\x66\\x6f\\x72\\x20\\x6e\\x6f\\x74\\x68\\x69\\x6e\\x67\\x3f\",\n+        \"\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\\xdd\",\n+        \"\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\\xcd\",\n+        \"\\x54\\x65\\x73\\x74\\x20\\x55\\x73\\x69\\x6e\\x67\\x20\\x4c\\x61\\x72\\x67\\x65\\x72\\x20\\x54\\x68\\x61\\x6e\\x20\\x42\\x6c\\x6f\\x63\\x6b\\x2d\\x53\\x69\\x7a\\x65\\x20\\x4b\\x65\\x79\\x20\\x2d\\x20\\x48\\x61\\x73\\x68\\x20\\x4b\\x65\\x79\\x20\\x46\\x69\\x72\\x73\\x74\",\n+        \"\\x54\\x68\\x69\\x73\\x20\\x69\\x73\\x20\\x61\\x20\\x74\\x65\\x73\\x74\\x20\\x75\\x73\\x69\\x6e\\x67\\x20\\x61\\x20\\x6c\\x61\\x72\\x67\\x65\\x72\\x20\\x74\\x68\\x61\\x6e\\x20\\x62\\x6c\\x6f\\x63\\x6b\\x2d\\x73\\x69\\x7a\\x65\\x20\\x6b\\x65\\x79\\x20\\x61\\x6e\\x64\\x20\\x61\\x20\\x6c\\x61\\x72\\x67\\x65\\x72\\x20\\x74\\x68\\x61\\x6e\\x20\\x62\\x6c\\x6f\\x63\\x6b\\x2d\\x73\\x69\\x7a\\x65\\x20\\x64\\x61\\x74\\x61\\x2e\\x20\\x54\\x68\\x65\\x20\\x6b\\x65\\x79\\x20\\x6e\\x65\\x65\\x64\\x73\\x20\\x74\\x6f\\x20\\x62\\x65\\x20\\x68\\x61\\x73\\x68\\x65\\x64\\x20\\x62\\x65\\x66\\x6f\\x72\\x65\\x20\\x62\\x65\\x69\\x6e\\x67\\x20\\x75\\x73\\x65\\x64\\x20\\x62\\x79\\x20\\x74\\x68\\x65\\x20\\x48\\x4d\\x41\\x43\\x20\\x61\\x6c\\x67\\x6f\\x72\\x69\\x74\\x68\\x6d\\x2e\"\n+    };\n+    static const unsigned char outputs[6][32] = {\n+        {0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53, 0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b, 0xf1, 0x2b, 0x88, 0x1d, 0xc2, 0x00, 0xc9, 0x83, 0x3d, 0xa7, 0x26, 0xe9, 0x37, 0x6c, 0x2e, 0x32, 0xcf, 0xf7},\n+        {0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e, 0x6a, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75, 0xc7, 0x5a, 0x00, 0x3f, 0x08, 0x9d, 0x27, 0x39, 0x83, 0x9d, 0xec, 0x58, 0xb9, 0x64, 0xec, 0x38, 0x43},\n+        {0x77, 0x3e, 0xa9, 0x1e, 0x36, 0x80, 0x0e, 0x46, 0x85, 0x4d, 0xb8, 0xeb, 0xd0, 0x91, 0x81, 0xa7, 0x29, 0x59, 0x09, 0x8b, 0x3e, 0xf8, 0xc1, 0x22, 0xd9, 0x63, 0x55, 0x14, 0xce, 0xd5, 0x65, 0xfe},\n+        {0x82, 0x55, 0x8a, 0x38, 0x9a, 0x44, 0x3c, 0x0e, 0xa4, 0xcc, 0x81, 0x98, 0x99, 0xf2, 0x08, 0x3a, 0x85, 0xf0, 0xfa, 0xa3, 0xe5, 0x78, 0xf8, 0x07, 0x7a, 0x2e, 0x3f, 0xf4, 0x67, 0x29, 0x66, 0x5b},\n+        {0x60, 0xe4, 0x31, 0x59, 0x1e, 0xe0, 0xb6, 0x7f, 0x0d, 0x8a, 0x26, 0xaa, 0xcb, 0xf5, 0xb7, 0x7f, 0x8e, 0x0b, 0xc6, 0x21, 0x37, 0x28, 0xc5, 0x14, 0x05, 0x46, 0x04, 0x0f, 0x0e, 0xe3, 0x7f, 0x54},\n+        {0x9b, 0x09, 0xff, 0xa7, 0x1b, 0x94, 0x2f, 0xcb, 0x27, 0x63, 0x5f, 0xbc, 0xd5, 0xb0, 0xe9, 0x44, 0xbf, 0xdc, 0x63, 0x64, 0x4f, 0x07, 0x13, 0x93, 0x8a, 0x7f, 0x51, 0x53, 0x5c, 0x3a, 0x35, 0xe2}\n+    };\n+    for (int i = 0; i < 6; i++) {\n+        secp256k1_hmac_sha256_t hasher;\n+        secp256k1_hmac_sha256_initialize(&hasher, (const unsigned char*)(keys[i]), strlen(keys[i]));\n+        secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i]), strlen(inputs[i]));\n+        unsigned char out[32];\n+        secp256k1_hmac_sha256_finalize(&hasher, out);\n+        CHECK(memcmp(out, outputs[i], 32) == 0);\n+        if (strlen(inputs[i]) > 0) {\n+            secp256k1_hmac_sha256_initialize(&hasher, (const unsigned char*)(keys[i]), strlen(keys[i]));\n+            int split = secp256k1_rand32() % strlen(inputs[i]);\n+            secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i]), split);\n+            secp256k1_hmac_sha256_write(&hasher, (const unsigned char*)(inputs[i] + split), strlen(inputs[i]) - split);\n+            secp256k1_hmac_sha256_finalize(&hasher, out);\n+            CHECK(memcmp(out, outputs[i], 32) == 0);\n+        }\n+    }\n+}\n+\n+void run_rfc6979_hmac_sha256_tests(void) {\n+    static const unsigned char key1[32] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x00};\n+    static const unsigned char msg1[32] = {0x4b, 0xf5, 0x12, 0x2f, 0x34, 0x45, 0x54, 0xc5, 0x3b, 0xde, 0x2e, 0xbb, 0x8c, 0xd2, 0xb7, 0xe3, 0xd1, 0x60, 0x0a, 0xd6, 0x31, 0xc3, 0x85, 0xa5, 0xd7, 0xcc, 0xe2, 0x3c, 0x77, 0x85, 0x45, 0x9a};\n+    static const unsigned char out1[3][32] = {\n+        {0x4f, 0xe2, 0x95, 0x25, 0xb2, 0x08, 0x68, 0x09, 0x15, 0x9a, 0xcd, 0xf0, 0x50, 0x6e, 0xfb, 0x86, 0xb0, 0xec, 0x93, 0x2c, 0x7b, 0xa4, 0x42, 0x56, 0xab, 0x32, 0x1e, 0x42, 0x1e, 0x67, 0xe9, 0xfb},\n+        {0x2b, 0xf0, 0xff, 0xf1, 0xd3, 0xc3, 0x78, 0xa2, 0x2d, 0xc5, 0xde, 0x1d, 0x85, 0x65, 0x22, 0x32, 0x5c, 0x65, 0xb5, 0x04, 0x49, 0x1a, 0x0c, 0xbd, 0x01, 0xcb, 0x8f, 0x3a, 0xa6, 0x7f, 0xfd, 0x4a},\n+        {0xf5, 0x28, 0xb4, 0x10, 0xcb, 0x54, 0x1f, 0x77, 0x00, 0x0d, 0x7a, 0xfb, 0x6c, 0x5b, 0x53, 0xc5, 0xc4, 0x71, 0xea, 0xb4, 0x3e, 0x46, 0x6d, 0x9a, 0xc5, 0x19, 0x0c, 0x39, 0xc8, 0x2f, 0xd8, 0x2e}\n+    };\n+\n+    static const unsigned char key2[32] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};\n+    static const unsigned char msg2[32] = {0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};\n+    static const unsigned char out2[3][32] = {\n+        {0x9c, 0x23, 0x6c, 0x16, 0x5b, 0x82, 0xae, 0x0c, 0xd5, 0x90, 0x65, 0x9e, 0x10, 0x0b, 0x6b, 0xab, 0x30, 0x36, 0xe7, 0xba, 0x8b, 0x06, 0x74, 0x9b, 0xaf, 0x69, 0x81, 0xe1, 0x6f, 0x1a, 0x2b, 0x95},\n+        {0xdf, 0x47, 0x10, 0x61, 0x62, 0x5b, 0xc0, 0xea, 0x14, 0xb6, 0x82, 0xfe, 0xee, 0x2c, 0x9c, 0x02, 0xf2, 0x35, 0xda, 0x04, 0x20, 0x4c, 0x1d, 0x62, 0xa1, 0x53, 0x6c, 0x6e, 0x17, 0xae, 0xd7, 0xa9},\n+        {0x75, 0x97, 0x88, 0x7c, 0xbd, 0x76, 0x32, 0x1f, 0x32, 0xe3, 0x04, 0x40, 0x67, 0x9a, 0x22, 0xcf, 0x7f, 0x8d, 0x9d, 0x2e, 0xac, 0x39, 0x0e, 0x58, 0x1f, 0xea, 0x09, 0x1c, 0xe2, 0x02, 0xba, 0x94}\n+    };\n+\n+    secp256k1_rfc6979_hmac_sha256_t rng;\n+    unsigned char out[32];\n+\n+    secp256k1_rfc6979_hmac_sha256_initialize(&rng, key1, 32, msg1, 32);\n+    for (int i = 0; i < 3; i++) {\n+        secp256k1_rfc6979_hmac_sha256_generate(&rng, out, 32);\n+        CHECK(memcmp(out, out1[i], 32) == 0);\n+    }\n+    secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+\n+    secp256k1_rfc6979_hmac_sha256_initialize(&rng, key2, 32, msg2, 32);\n+    for (int i = 0; i < 3; i++) {\n+        secp256k1_rfc6979_hmac_sha256_generate(&rng, out, 32);\n+        CHECK(memcmp(out, out2[i], 32) == 0);\n+    }\n+    secp256k1_rfc6979_hmac_sha256_finalize(&rng);\n+}\n+\n /***** NUM TESTS *****/\n \n #ifndef USE_NUM_NONE\n@@ -494,9 +616,9 @@ void random_fe_non_square(secp256k1_fe_t *ns) {\n }\n \n int check_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {\n-    secp256k1_fe_t an = *a; secp256k1_fe_normalize(&an);\n+    secp256k1_fe_t an = *a; secp256k1_fe_normalize_weak(&an);\n     secp256k1_fe_t bn = *b; secp256k1_fe_normalize_var(&bn);\n-    return secp256k1_fe_equal(&an, &bn);\n+    return secp256k1_fe_equal_var(&an, &bn);\n }\n \n int check_fe_inverse(const secp256k1_fe_t *a, const secp256k1_fe_t *ai) {\n@@ -523,16 +645,16 @@ void run_field_misc(void) {\n         random_fe_non_zero(&y);\n         /* Test the fe equality and comparison operations. */\n         CHECK(secp256k1_fe_cmp_var(&x, &x) == 0);\n-        CHECK(secp256k1_fe_equal(&x, &x));\n+        CHECK(secp256k1_fe_equal_var(&x, &x));\n         z = x;\n         secp256k1_fe_add(&z,&y);\n         secp256k1_fe_normalize(&z);\n         /* Test the conditional move. */\n         secp256k1_fe_cmov(&z, &x, 0);\n-        CHECK(secp256k1_fe_equal(&x, &z) == 0);\n+        CHECK(secp256k1_fe_equal_var(&x, &z) == 0);\n         CHECK(secp256k1_fe_cmp_var(&x, &z) != 0);\n         secp256k1_fe_cmov(&y, &x, 1);\n-        CHECK(secp256k1_fe_equal(&x, &y));\n+        CHECK(secp256k1_fe_equal_var(&x, &y));\n         /* Test that mul_int, mul, and add agree. */\n         secp256k1_fe_add(&y, &x);\n         secp256k1_fe_add(&y, &x);\n@@ -656,108 +778,148 @@ void run_sqrt(void) {\n \n /***** GROUP TESTS *****/\n \n-int ge_equals_ge(const secp256k1_ge_t *a, const secp256k1_ge_t *b) {\n-    if (a->infinity && b->infinity)\n-        return 1;\n-    return check_fe_equal(&a->x, &b->x) && check_fe_equal(&a->y, &b->y);\n+void ge_equals_ge(const secp256k1_ge_t *a, const secp256k1_ge_t *b) {\n+    CHECK(a->infinity == b->infinity);\n+    if (a->infinity)\n+        return;\n+    CHECK(secp256k1_fe_equal_var(&a->x, &b->x));\n+    CHECK(secp256k1_fe_equal_var(&b->y, &b->y));\n }\n \n void ge_equals_gej(const secp256k1_ge_t *a, const secp256k1_gej_t *b) {\n-    secp256k1_ge_t bb;\n-    secp256k1_gej_t bj = *b;\n-    secp256k1_ge_set_gej_var(&bb, &bj);\n-    CHECK(ge_equals_ge(a, &bb));\n-}\n-\n-void gej_equals_gej(const secp256k1_gej_t *a, const secp256k1_gej_t *b) {\n-    secp256k1_ge_t aa, bb;\n-    secp256k1_gej_t aj = *a, bj = *b;\n-    secp256k1_ge_set_gej_var(&aa, &aj);\n-    secp256k1_ge_set_gej_var(&bb, &bj);\n-    CHECK(ge_equals_ge(&aa, &bb));\n+    CHECK(a->infinity == b->infinity);\n+    if (a->infinity)\n+        return;\n+    /* Check a.x * b.z^2 == b.x && a.y * b.z^3 == b.y, to avoid inverses. */\n+    secp256k1_fe_t z2s;\n+    secp256k1_fe_sqr(&z2s, &b->z);\n+    secp256k1_fe_t u1, u2, s1, s2;\n+    secp256k1_fe_mul(&u1, &a->x, &z2s);\n+    u2 = b->x; secp256k1_fe_normalize_weak(&u2);\n+    secp256k1_fe_mul(&s1, &a->y, &z2s); secp256k1_fe_mul(&s1, &s1, &b->z);\n+    s2 = b->y; secp256k1_fe_normalize_weak(&s2);\n+    CHECK(secp256k1_fe_equal_var(&u1, &u2));\n+    CHECK(secp256k1_fe_equal_var(&s1, &s2));\n }\n \n void test_ge(void) {\n-    char ca[135];\n-    char cb[68];\n-    int rlen;\n-    secp256k1_ge_t a, b, i, n;\n-    random_group_element_test(&a);\n-    random_group_element_test(&b);\n-    rlen = sizeof(ca);\n-    secp256k1_ge_get_hex(ca,&rlen,&a);\n-    CHECK(rlen > 4 && rlen <= (int)sizeof(ca));\n-    rlen = sizeof(cb);\n-    secp256k1_ge_get_hex(cb,&rlen,&b); /* Intentionally undersized buffer. */\n-    n = a;\n-    secp256k1_fe_normalize(&a.y);\n-    secp256k1_fe_negate(&n.y, &a.y, 1);\n-    secp256k1_ge_set_infinity(&i);\n-    random_field_element_magnitude(&a.x);\n-    random_field_element_magnitude(&a.y);\n-    random_field_element_magnitude(&b.x);\n-    random_field_element_magnitude(&b.y);\n-    random_field_element_magnitude(&n.x);\n-    random_field_element_magnitude(&n.y);\n-\n-    secp256k1_gej_t aj, bj, ij, nj;\n-    random_group_element_jacobian_test(&aj, &a);\n-    random_group_element_jacobian_test(&bj, &b);\n-    secp256k1_gej_set_infinity(&ij);\n-    random_group_element_jacobian_test(&nj, &n);\n-    random_field_element_magnitude(&aj.x);\n-    random_field_element_magnitude(&aj.y);\n-    random_field_element_magnitude(&aj.z);\n-    random_field_element_magnitude(&bj.x);\n-    random_field_element_magnitude(&bj.y);\n-    random_field_element_magnitude(&bj.z);\n-    random_field_element_magnitude(&nj.x);\n-    random_field_element_magnitude(&nj.y);\n-    random_field_element_magnitude(&nj.z);\n-\n-    /* gej + gej adds */\n-    secp256k1_gej_t aaj; secp256k1_gej_add_var(&aaj, &aj, &aj);\n-    secp256k1_gej_t abj; secp256k1_gej_add_var(&abj, &aj, &bj);\n-    secp256k1_gej_t aij; secp256k1_gej_add_var(&aij, &aj, &ij);\n-    secp256k1_gej_t anj; secp256k1_gej_add_var(&anj, &aj, &nj);\n-    secp256k1_gej_t iaj; secp256k1_gej_add_var(&iaj, &ij, &aj);\n-    secp256k1_gej_t iij; secp256k1_gej_add_var(&iij, &ij, &ij);\n-\n-    /* gej + ge adds */\n-    secp256k1_gej_t aa; secp256k1_gej_add_ge_var(&aa, &aj, &a);\n-    secp256k1_gej_t ab; secp256k1_gej_add_ge_var(&ab, &aj, &b);\n-    secp256k1_gej_t ai; secp256k1_gej_add_ge_var(&ai, &aj, &i);\n-    secp256k1_gej_t an; secp256k1_gej_add_ge_var(&an, &aj, &n);\n-    secp256k1_gej_t ia; secp256k1_gej_add_ge_var(&ia, &ij, &a);\n-    secp256k1_gej_t ii; secp256k1_gej_add_ge_var(&ii, &ij, &i);\n-\n-    /* const gej + ge adds */\n-    secp256k1_gej_t aac; secp256k1_gej_add_ge(&aac, &aj, &a);\n-    secp256k1_gej_t abc; secp256k1_gej_add_ge(&abc, &aj, &b);\n-    secp256k1_gej_t anc; secp256k1_gej_add_ge(&anc, &aj, &n);\n-    secp256k1_gej_t iac; secp256k1_gej_add_ge(&iac, &ij, &a);\n-\n-    CHECK(secp256k1_gej_is_infinity(&an));\n-    CHECK(secp256k1_gej_is_infinity(&anj));\n-    CHECK(secp256k1_gej_is_infinity(&anc));\n-    gej_equals_gej(&aa, &aaj);\n-    gej_equals_gej(&aa, &aac);\n-    gej_equals_gej(&ab, &abj);\n-    gej_equals_gej(&ab, &abc);\n-    gej_equals_gej(&an, &anj);\n-    gej_equals_gej(&an, &anc);\n-    gej_equals_gej(&ia, &iaj);\n-    gej_equals_gej(&ai, &aij);\n-    gej_equals_gej(&ii, &iij);\n-    ge_equals_gej(&a, &ai);\n-    ge_equals_gej(&a, &ai);\n-    ge_equals_gej(&a, &iaj);\n-    ge_equals_gej(&a, &iaj);\n-    ge_equals_gej(&a, &iac);\n+    int runs = 4;\n+    /* Points: (infinity, p1, p1, -p1, -p1, p2, p2, -p2, -p2, p3, p3, -p3, -p3, p4, p4, -p4, -p4).\n+     * The second in each pair of identical points uses a random Z coordinate in the Jacobian form.\n+     * All magnitudes are randomized.\n+     * All 17*17 combinations of points are added to eachother, using all applicable methods.\n+     */\n+    secp256k1_ge_t *ge = malloc(sizeof(secp256k1_ge_t) * (1 + 4 * runs));\n+    secp256k1_gej_t *gej = malloc(sizeof(secp256k1_gej_t) * (1 + 4 * runs));\n+    secp256k1_gej_set_infinity(&gej[0]);\n+    secp256k1_ge_clear(&ge[0]);\n+    secp256k1_ge_set_gej_var(&ge[0], &gej[0]);\n+    for (int i = 0; i < runs; i++) {\n+        secp256k1_ge_t g;\n+        random_group_element_test(&g);\n+        ge[1 + 4 * i] = g;\n+        ge[2 + 4 * i] = g;\n+        secp256k1_ge_neg(&ge[3 + 4 * i], &g);\n+        secp256k1_ge_neg(&ge[4 + 4 * i], &g);\n+        secp256k1_gej_set_ge(&gej[1 + 4 * i], &ge[1 + 4 * i]);\n+        random_group_element_jacobian_test(&gej[2 + 4 * i], &ge[2 + 4 * i]);\n+        secp256k1_gej_set_ge(&gej[3 + 4 * i], &ge[3 + 4 * i]);\n+        random_group_element_jacobian_test(&gej[4 + 4 * i], &ge[4 + 4 * i]);\n+        for (int j = 0; j < 4; j++) {\n+            random_field_element_magnitude(&ge[1 + j + 4 * i].x);\n+            random_field_element_magnitude(&ge[1 + j + 4 * i].y);\n+            random_field_element_magnitude(&gej[1 + j + 4 * i].x);\n+            random_field_element_magnitude(&gej[1 + j + 4 * i].y);\n+            random_field_element_magnitude(&gej[1 + j + 4 * i].z);\n+        }\n+    }\n+\n+    for (int i1 = 0; i1 < 1 + 4 * runs; i1++) {\n+        for (int i2 = 0; i2 < 1 + 4 * runs; i2++) {\n+            /* Compute reference result using gej + gej (var). */\n+            secp256k1_gej_t refj, resj;\n+            secp256k1_ge_t ref;\n+            secp256k1_gej_add_var(&refj, &gej[i1], &gej[i2]);\n+            secp256k1_ge_set_gej_var(&ref, &refj);\n+\n+            /* Test gej + ge (var). */\n+            secp256k1_gej_add_ge_var(&resj, &gej[i1], &ge[i2]);\n+            ge_equals_gej(&ref, &resj);\n+\n+            /* Test gej + ge (const). */\n+            if (i2 != 0) {\n+                /* secp256k1_gej_add_ge does not support its second argument being infinity. */\n+                secp256k1_gej_add_ge(&resj, &gej[i1], &ge[i2]);\n+                ge_equals_gej(&ref, &resj);\n+            }\n+\n+            /* Test doubling (var). */\n+            if ((i1 == 0 && i2 == 0) || ((i1 + 3)/4 == (i2 + 3)/4 && ((i1 + 3)%4)/2 == ((i2 + 3)%4)/2)) {\n+                /* Normal doubling. */\n+                secp256k1_gej_double_var(&resj, &gej[i1]);\n+                ge_equals_gej(&ref, &resj);\n+                secp256k1_gej_double_var(&resj, &gej[i2]);\n+                ge_equals_gej(&ref, &resj);\n+            }\n+\n+            /* Test adding opposites. */\n+            if ((i1 == 0 && i2 == 0) || ((i1 + 3)/4 == (i2 + 3)/4 && ((i1 + 3)%4)/2 != ((i2 + 3)%4)/2)) {\n+                CHECK(secp256k1_ge_is_infinity(&ref));\n+            }\n+\n+            /* Test adding infinity. */\n+            if (i1 == 0) {\n+                CHECK(secp256k1_ge_is_infinity(&ge[i1]));\n+                CHECK(secp256k1_gej_is_infinity(&gej[i1]));\n+                ge_equals_gej(&ref, &gej[i2]);\n+            }\n+            if (i2 == 0) {\n+                CHECK(secp256k1_ge_is_infinity(&ge[i2]));\n+                CHECK(secp256k1_gej_is_infinity(&gej[i2]));\n+                ge_equals_gej(&ref, &gej[i1]);\n+            }\n+        }\n+    }\n+\n+    /* Test adding all points together in random order equals infinity. */\n+    {\n+        secp256k1_gej_t *gej_shuffled = malloc((4 * runs + 1) * sizeof(secp256k1_gej_t));\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            gej_shuffled[i] = gej[i];\n+        }\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            int swap = i + secp256k1_rand32() % (4 * runs + 1 - i);\n+            if (swap != i) {\n+                secp256k1_gej_t t = gej_shuffled[i];\n+                gej_shuffled[i] = gej_shuffled[swap];\n+                gej_shuffled[swap] = t;\n+            }\n+        }\n+        secp256k1_gej_t sum;\n+        secp256k1_gej_set_infinity(&sum);\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            secp256k1_gej_add_var(&sum, &sum, &gej_shuffled[i]);\n+        }\n+        CHECK(secp256k1_gej_is_infinity(&sum));\n+        free(gej_shuffled);\n+    }\n+\n+    /* Test batch gej -> ge conversion. */\n+    {\n+        secp256k1_ge_t *ge_set_all = malloc((4 * runs + 1) * sizeof(secp256k1_ge_t));\n+        secp256k1_ge_set_all_gej_var(4 * runs + 1, ge_set_all, gej);\n+        for (int i = 0; i < 4 * runs + 1; i++) {\n+            ge_equals_gej(&ge_set_all[i], &gej[i]);\n+        }\n+        free(ge_set_all);\n+    }\n+\n+    free(ge);\n+    free(gej);\n }\n \n void run_ge(void) {\n-    for (int i = 0; i < 2000*count; i++) {\n+    for (int i = 0; i < count * 32; i++) {\n         test_ge();\n     }\n }\n@@ -949,6 +1111,44 @@ void run_ecdsa_sign_verify(void) {\n     }\n }\n \n+/** Dummy nonce generation function that just uses a precomputed nonce, and fails if it is not accepted. Use only for testing. */\n+static int precomputed_nonce_function(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+    (void)msg32;\n+    (void)key32;\n+    memcpy(nonce32, data, 32);\n+    return (counter == 0);\n+}\n+\n+static int nonce_function_test_fail(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+   /* Dummy nonce generator that has a fatal error on the first counter value. */\n+   if (counter == 0) return 0;\n+   return nonce_function_rfc6979(nonce32, msg32, key32, counter - 1, data);\n+}\n+\n+static int nonce_function_test_retry(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {\n+   /* Dummy nonce generator that produces unacceptable nonces for the first several counter values. */\n+   if (counter < 3) {\n+       memset(nonce32, counter==0 ? 0 : 255, 32);\n+       if (counter == 2) nonce32[31]--;\n+       return 1;\n+   }\n+   if (counter < 5) {\n+       static const unsigned char order[] = {\n+           0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+           0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n+           0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n+           0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x41\n+       };\n+       memcpy(nonce32, order, 32);\n+       if (counter == 4) nonce32[31]++;\n+       return 1;\n+   }\n+   /* Retry rate of 6979 is negligible esp. as we only call this in determinstic tests. */\n+   /* If someone does fine a case where it retries for secp256k1, we'd like to know. */\n+   if (counter > 5) return 0;\n+   return nonce_function_rfc6979(nonce32, msg32, key32, counter - 5, data);\n+}\n+\n void test_ecdsa_end_to_end(void) {\n     unsigned char privkey[32];\n     unsigned char message[32];\n@@ -1006,13 +1206,7 @@ void test_ecdsa_end_to_end(void) {\n \n     /* Sign. */\n     unsigned char signature[72]; int signaturelen = 72;\n-    while(1) {\n-        unsigned char rnd[32];\n-        secp256k1_rand256_test(rnd);\n-        if (secp256k1_ecdsa_sign(message, signature, &signaturelen, privkey, rnd) == 1) {\n-            break;\n-        }\n-    }\n+    CHECK(secp256k1_ecdsa_sign(message, signature, &signaturelen, privkey, NULL, NULL) == 1);\n     /* Verify. */\n     CHECK(secp256k1_ecdsa_verify(message, signature, signaturelen, pubkey, pubkeylen) == 1);\n     /* Destroy signature and verify again. */\n@@ -1021,13 +1215,7 @@ void test_ecdsa_end_to_end(void) {\n \n     /* Compact sign. */\n     unsigned char csignature[64]; int recid = 0;\n-    while(1) {\n-        unsigned char rnd[32];\n-        secp256k1_rand256_test(rnd);\n-        if (secp256k1_ecdsa_sign_compact(message, csignature, privkey, rnd, &recid) == 1) {\n-            break;\n-        }\n-    }\n+    CHECK(secp256k1_ecdsa_sign_compact(message, csignature, privkey, NULL, NULL, &recid) == 1);\n     /* Recover. */\n     unsigned char recpubkey[65]; int recpubkeylen = 0;\n     CHECK(secp256k1_ecdsa_recover_compact(message, csignature, recpubkey, &recpubkeylen, pubkeylen == 33, recid) == 1);\n@@ -1077,7 +1265,7 @@ void test_random_pubkeys(void) {\n         CHECK(secp256k1_eckey_pubkey_serialize(&elem, in, &size, 0));\n         CHECK(size == 65);\n         CHECK(secp256k1_eckey_pubkey_parse(&elem2, in, size));\n-        CHECK(ge_equals_ge(&elem,&elem2));\n+        ge_equals_ge(&elem,&elem2);\n         /* Check that the X9.62 hybrid type is checked. */\n         in[0] = (r & 1) ? 6 : 7;\n         res = secp256k1_eckey_pubkey_parse(&elem2, in, size);\n@@ -1086,7 +1274,7 @@ void test_random_pubkeys(void) {\n             else CHECK(!res);\n         }\n         if (res) {\n-            CHECK(ge_equals_ge(&elem,&elem2));\n+            ge_equals_ge(&elem,&elem2);\n             CHECK(secp256k1_eckey_pubkey_serialize(&elem, out, &size, 0));\n             CHECK(memcmp(&in[1], &out[1], 64) == 0);\n         }\n@@ -1280,6 +1468,12 @@ void test_ecdsa_edge_cases(void) {\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n         };\n+        static const unsigned char nonce2[32] = {\n+            0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+            0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n+            0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n+            0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x40\n+        };\n         const unsigned char key[32] = {\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n@@ -1294,10 +1488,74 @@ void test_ecdsa_edge_cases(void) {\n         };\n         unsigned char sig[72];\n         int siglen = 72;\n-        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce) == 0);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) == 0);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce2) == 0);\n         msg[31] = 0xaa;\n         siglen = 72;\n-        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce2) == 1);\n+        siglen = 10;\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, precomputed_nonce_function, nonce) != 1);\n+    }\n+\n+    /* Nonce function corner cases. */\n+    {\n+        unsigned char key[32];\n+        unsigned char msg[32];\n+        unsigned char sig[72];\n+        memset(key, 0, 32);\n+        memset(msg, 0, 32);\n+        key[31] = 1;\n+        msg[31] = 1;\n+        int siglen = 72;\n+        int recid;\n+        /* Nonce function failure results in signature failure. */\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce_function_test_fail, NULL) == 0);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, nonce_function_test_fail, NULL, &recid) == 0);\n+        /* The retry loop successfully makes its way to the first good value. */\n+        unsigned char sig2[72];\n+        int siglen2 = 72;\n+        siglen = 72;\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, nonce_function_test_retry, NULL) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, nonce_function_rfc6979, NULL) == 1);\n+        CHECK((siglen == siglen2) && (memcmp(sig, sig2, siglen) == 0));\n+        int recid2;\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, nonce_function_test_retry, NULL, &recid) == 1);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig2, key, nonce_function_rfc6979, NULL, &recid2) == 1);\n+        CHECK((recid == recid2) && (memcmp(sig, sig2, 64) == 0));\n+        /* The default nonce function is determinstic. */\n+        siglen = 72;\n+        siglen2 = 72;\n+        CHECK(secp256k1_ecdsa_sign(msg, sig, &siglen, key, NULL, NULL) == 1);\n+        CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+        CHECK((siglen == siglen2) && (memcmp(sig, sig2, siglen) == 0));\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig, key, NULL, NULL, &recid) == 1);\n+        CHECK(secp256k1_ecdsa_sign_compact(msg, sig2, key, NULL, NULL, &recid2) == 1);\n+        CHECK((recid == recid2) && (memcmp(sig, sig2, 64) == 0));\n+        /* The default nonce function changes output with different messages. */\n+        secp256k1_ecdsa_sig_t s[512];\n+        for(int i=0; i<256; i++) {\n+            siglen2 = 72;\n+            msg[0] = i;\n+            CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+            CHECK(secp256k1_ecdsa_sig_parse(&s[i], sig2, siglen2));\n+            for (int j=0; j<i; j++) {\n+                CHECK(!secp256k1_scalar_eq(&s[i].r, &s[j].r));\n+            }\n+        }\n+        msg[0] = 0;\n+        msg[31] = 2;\n+        /* The default nonce function changes output with different keys. */\n+        for(int i=256; i<512; i++) {\n+            siglen2 = 72;\n+            key[0] = i - 256;\n+            CHECK(secp256k1_ecdsa_sign(msg, sig2, &siglen2, key, NULL, NULL) == 1);\n+            CHECK(secp256k1_ecdsa_sig_parse(&s[i], sig2, siglen2));\n+            for (int j=0; j<i; j++) {\n+                CHECK(!secp256k1_scalar_eq(&s[i].r, &s[j].r));\n+            }\n+        }\n+        key[0] = 0;\n     }\n \n     /* Privkey export where pubkey is the point at infinity. */\n@@ -1405,6 +1663,10 @@ int main(int argc, char **argv) {\n     secp256k1_scalar_start();\n     secp256k1_ecdsa_start();\n \n+    run_sha256_tests();\n+    run_hmac_sha256_tests();\n+    run_rfc6979_hmac_sha256_tests();\n+\n #ifndef USE_NUM_NONE\n     /* num tests */\n     run_num_smalltests();"
      },
      {
        "sha": "d5e595cd8ad65231ad3a007035ec895434b216a3",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b5f5294bba0448c0349ad41cd0e7e107a500b9d/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/rfc6979_hmac_sha256.h\"\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha256.h\"\n@@ -248,38 +247,4 @@ BOOST_AUTO_TEST_CASE(hmac_sha512_testvectors) {\n                    \"b6022cac3c4982b10d5eeb55c3e4de15134676fb6de0446065c97440fa8c6a58\");\n }\n \n-void TestRFC6979(const std::string& hexkey, const std::string& hexmsg, const std::vector<std::string>& hexout)\n-{\n-    std::vector<unsigned char> key = ParseHex(hexkey);\n-    std::vector<unsigned char> msg = ParseHex(hexmsg);\n-    RFC6979_HMAC_SHA256 rng(&key[0], key.size(), &msg[0], msg.size());\n-\n-    for (unsigned int i = 0; i < hexout.size(); i++) {\n-        std::vector<unsigned char> out = ParseHex(hexout[i]);\n-        std::vector<unsigned char> gen;\n-        gen.resize(out.size());\n-        rng.Generate(&gen[0], gen.size());\n-        BOOST_CHECK(out == gen);\n-    }\n-}\n-\n-BOOST_AUTO_TEST_CASE(rfc6979_hmac_sha256)\n-{\n-    TestRFC6979(\n-        \"0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f00\",\n-        \"4bf5122f344554c53bde2ebb8cd2b7e3d1600ad631c385a5d7cce23c7785459a\",\n-        boost::assign::list_of\n-            (\"4fe29525b2086809159acdf0506efb86b0ec932c7ba44256ab321e421e67e9fb\")\n-            (\"2bf0fff1d3c378a22dc5de1d856522325c65b504491a0cbd01cb8f3aa67ffd4a\")\n-            (\"f528b410cb541f77000d7afb6c5b53c5c471eab43e466d9ac5190c39c82fd82e\"));\n-\n-    TestRFC6979(\n-        \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n-        \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n-        boost::assign::list_of\n-            (\"9c236c165b82ae0cd590659e100b6bab3036e7ba8b06749baf6981e16f1a2b95\")\n-            (\"df471061625bc0ea14b682feee2c9c02f235da04204c1d62a1536c6e17aed7a9\")\n-            (\"7597887cbd76321f32e30440679a22cf7f8d9d2eac390e581fea091ce202ba94\"));\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "4401b2d7c52e0f3841225369fb0d10767c51aaa2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDAxYjJkN2M1MmUwZjM4NDEyMjUzNjlmYjBkMTA3NjdjNTFhYWEy",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2014-10-19T08:46:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-28T06:41:54Z"
      },
      "message": "Removed main.h dependency from rpcserver.cpp\n\nRebased by @laanwj:\n\n- update for RPC methods added since 84d13ee: setmocktime,\n  invalidateblock, reconsiderblock. Only the first, setmocktime, required a change,\n  the other two are thread safe.",
      "tree": {
        "sha": "29b0b989569f1a16cba69c287a30e0db220343b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29b0b989569f1a16cba69c287a30e0db220343b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4401b2d7c52e0f3841225369fb0d10767c51aaa2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4401b2d7c52e0f3841225369fb0d10767c51aaa2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4401b2d7c52e0f3841225369fb0d10767c51aaa2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4401b2d7c52e0f3841225369fb0d10767c51aaa2/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b5f5294bba0448c0349ad41cd0e7e107a500b9d"
      }
    ],
    "stats": {
      "total": 262,
      "additions": 224,
      "deletions": 38
    },
    "files": [
      {
        "sha": "7054264c0bbf1778ddf8ecd0c860a5304cac7248",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -234,6 +234,26 @@ bool static Bind(const CService &addr, unsigned int flags) {\n     return true;\n }\n \n+void OnRPCStopped()\n+{\n+    cvBlockChange.notify_all();\n+    LogPrint(\"rpc\", \"RPC stopped.\\n\");\n+}\n+\n+void OnRPCPreCommand(const CRPCCommand& cmd)\n+{\n+#ifdef ENABLE_WALLET\n+    if (cmd.reqWallet && !pwalletMain)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n+#endif\n+\n+    // Observe safe mode\n+    string strWarning = GetWarnings(\"rpc\");\n+    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&\n+        !cmd.okSafeMode)\n+        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n+}\n+\n std::string HelpMessage(HelpMessageMode mode)\n {\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n@@ -802,6 +822,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (fServer)\n     {\n         uiInterface.InitMessage.connect(SetRPCWarmupStatus);\n+        RPCServer::OnStopped(&OnRPCStopped);\n+        RPCServer::OnPreCommand(&OnRPCPreCommand);\n         StartRPCThreads();\n     }\n "
      },
      {
        "sha": "293d6d5619a2325bfba31b077c226e4c3e8aaf82",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -105,6 +105,7 @@ Value getblockcount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockcount\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return chainActive.Height();\n }\n \n@@ -121,6 +122,7 @@ Value getbestblockhash(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getbestblockhash\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return chainActive.Tip()->GetBlockHash().GetHex();\n }\n \n@@ -137,6 +139,7 @@ Value getdifficulty(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getdifficulty\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return GetDifficulty();\n }\n \n@@ -173,6 +176,8 @@ Value getrawmempool(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawmempool\", \"true\")\n         );\n \n+    LOCK(cs_main);\n+\n     bool fVerbose = false;\n     if (params.size() > 0)\n         fVerbose = params[0].get_bool();\n@@ -233,6 +238,8 @@ Value getblockhash(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockhash\", \"1000\")\n         );\n \n+    LOCK(cs_main);\n+\n     int nHeight = params[0].get_int();\n     if (nHeight < 0 || nHeight > chainActive.Height())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n@@ -277,6 +284,8 @@ Value getblock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n         );\n \n+    LOCK(cs_main);\n+\n     std::string strHash = params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n@@ -326,6 +335,8 @@ Value gettxoutsetinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object ret;\n \n     CCoinsStats stats;\n@@ -380,6 +391,8 @@ Value gettxout(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettxout\", \"\\\"txid\\\", 1\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object ret;\n \n     std::string strHash = params[0].get_str();\n@@ -436,6 +449,8 @@ Value verifychain(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"verifychain\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     int nCheckLevel = GetArg(\"-checklevel\", 3);\n     int nCheckDepth = GetArg(\"-checkblocks\", 288);\n     if (params.size() > 0)\n@@ -467,6 +482,8 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockchaininfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"chain\",                 Params().NetworkIDString()));\n     obj.push_back(Pair(\"blocks\",                (int)chainActive.Height()));\n@@ -526,6 +543,8 @@ Value getchaintips(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getchaintips\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     /* Build up a list of chain tips.  We start with the list of all\n        known blocks, and successively remove blocks that appear as pprev\n        of another block.  */"
      },
      {
        "sha": "b9c92a06c5deb2e8696019a51d0d29fa69a41c95",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -91,6 +91,8 @@ Value importprivkey(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importprivkey\", \"\\\"mykey\\\", \\\"testing\\\", false\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strSecret = params[0].get_str();\n@@ -158,6 +160,8 @@ Value importaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importaddress\", \"\\\"myaddress\\\", \\\"testing\\\", false\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CScript script;\n \n     CBitcoinAddress address(params[0].get_str());\n@@ -223,6 +227,8 @@ Value importwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importwallet\", \"\\\"test\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     ifstream file;\n@@ -322,6 +328,8 @@ Value dumpprivkey(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strAddress = params[0].get_str();\n@@ -351,6 +359,8 @@ Value dumpwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     ofstream file;"
      },
      {
        "sha": "369b3fb4d7872639d305033b3bacdacf10f78230",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -88,6 +88,7 @@ Value getnetworkhashps(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnetworkhashps\", \"\")\n        );\n \n+    LOCK(cs_main);\n     return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n }\n \n@@ -107,6 +108,7 @@ Value getgenerate(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getgenerate\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return GetBoolArg(\"-gen\", false);\n }\n \n@@ -200,7 +202,6 @@ Value setgenerate(const Array& params, bool fHelp)\n \n     return Value::null;\n }\n-\n #endif\n \n \n@@ -228,6 +229,9 @@ Value getmininginfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getmininginfo\", \"\")\n         );\n \n+\n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n     obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n@@ -268,8 +272,9 @@ Value prioritisetransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n         );\n \n-    uint256 hash = ParseHashStr(params[0].get_str(), \"txid\");\n+    LOCK(cs_main);\n \n+    uint256 hash = ParseHashStr(params[0].get_str(), \"txid\");\n     CAmount nAmount = params[2].get_int64();\n \n     mempool.PrioritiseTransaction(hash, params[0].get_str(), params[1].get_real(), nAmount);\n@@ -358,6 +363,8 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblocktemplate\", \"\")\n          );\n \n+    LOCK(cs_main);\n+\n     std::string strMode = \"template\";\n     Value lpval = Value::null;\n     if (params.size() > 0)"
      },
      {
        "sha": "8d260b1cc9b0cc657f3e1990ae0b82aad9dbbfcb",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -69,6 +69,12 @@ Value getinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getinfo\", \"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n+\n     proxyType proxy;\n     GetProxy(NET_IPV4, proxy);\n \n@@ -172,6 +178,12 @@ Value validateaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n+\n     CBitcoinAddress address(params[0].get_str());\n     bool isValid = address.IsValid();\n \n@@ -329,6 +341,8 @@ Value verifymessage(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"signature\\\", \\\"my message\\\"\")\n         );\n \n+    LOCK(cs_main);\n+\n     string strAddress  = params[0].get_str();\n     string strSign     = params[1].get_str();\n     string strMessage  = params[2].get_str();\n@@ -372,6 +386,8 @@ Value setmocktime(const Array& params, bool fHelp)\n     if (!Params().MineBlocksOnDemand())\n         throw runtime_error(\"setmocktime for regression testing (-regtest mode) only\");\n \n+    LOCK(cs_main);\n+\n     RPCTypeCheck(params, boost::assign::list_of(int_type));\n     SetMockTime(params[0].get_int64());\n "
      },
      {
        "sha": "6306fd4406051fca36646e28ffd79c9796c791ef",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -34,7 +34,8 @@ Value getconnectioncount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getconnectioncount\", \"\")\n         );\n \n-    LOCK(cs_vNodes);\n+    LOCK2(cs_main, cs_vNodes);\n+\n     return (int)vNodes.size();\n }\n \n@@ -52,7 +53,8 @@ Value ping(const Array& params, bool fHelp)\n         );\n \n     // Request that each node send a ping during next message processing pass\n-    LOCK(cs_vNodes);\n+    LOCK2(cs_main, cs_vNodes);\n+\n     BOOST_FOREACH(CNode* pNode, vNodes) {\n         pNode->fPingQueued = true;\n     }\n@@ -113,6 +115,8 @@ Value getpeerinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getpeerinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     vector<CNodeStats> vstats;\n     CopyNodeStats(vstats);\n \n@@ -411,6 +415,8 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnetworkinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n     obj.push_back(Pair(\"subversion\","
      },
      {
        "sha": "0859c0e6113fb5dd7df647a65839414cef2cbd9e",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -169,6 +169,8 @@ Value getrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", 1\")\n         );\n \n+    LOCK(cs_main);\n+\n     uint256 hash = ParseHashV(params[0], \"parameter 1\");\n \n     bool fVerbose = false;\n@@ -256,6 +258,7 @@ Value listunspent(const Array& params, bool fHelp)\n     Array results;\n     vector<COutput> vecOutputs;\n     assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n     pwalletMain->AvailableCoins(vecOutputs, false);\n     BOOST_FOREACH(const COutput& out, vecOutputs) {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n@@ -334,6 +337,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(array_type)(obj_type));\n \n     Array inputs = params[0].get_array();\n@@ -428,6 +432,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     CTransaction tx;\n@@ -466,6 +471,7 @@ Value decodescript(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     Object r;\n@@ -532,6 +538,11 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n     RPCTypeCheck(params, boost::assign::list_of(str_type)(array_type)(array_type)(str_type), true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n@@ -591,7 +602,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         }\n     }\n #ifdef ENABLE_WALLET\n-    else\n+    else if (pwalletMain)\n         EnsureWalletIsUnlocked();\n #endif\n \n@@ -722,6 +733,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type)(bool_type));\n \n     // parse hex string from parameter"
      },
      {
        "sha": "f5f8bb22a266f0f52dac70043486466e8b0cd625",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 31,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -7,9 +7,11 @@\n \n #include \"base58.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"random.h\"\n+#include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #endif\n@@ -23,11 +25,13 @@\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n+#include <boost/signals2/signal.hpp>\n #include <boost/thread.hpp>\n #include \"json/json_spirit_writer_template.h\"\n \n using namespace boost::asio;\n using namespace json_spirit;\n+using namespace RPCServer;\n using namespace std;\n \n static std::string strRPCUserColonPass;\n@@ -46,6 +50,34 @@ static boost::asio::io_service::work *rpc_dummy_work = NULL;\n static std::vector<CSubNet> rpc_allow_subnets; //!< List of subnets to allow RPC connections from\n static std::vector< boost::shared_ptr<ip::tcp::acceptor> > rpc_acceptors;\n \n+static struct CRPCSignals\n+{\n+    boost::signals2::signal<void ()> Started;\n+    boost::signals2::signal<void ()> Stopped;\n+    boost::signals2::signal<void (const CRPCCommand&)> PreCommand;\n+    boost::signals2::signal<void (const CRPCCommand&)> PostCommand;\n+} g_rpcSignals;\n+\n+void RPCServer::OnStarted(boost::function<void ()> slot)\n+{\n+    g_rpcSignals.Started.connect(slot);\n+}\n+\n+void RPCServer::OnStopped(boost::function<void ()> slot)\n+{\n+    g_rpcSignals.Stopped.connect(slot);\n+}\n+\n+void RPCServer::OnPreCommand(boost::function<void (const CRPCCommand&)> slot)\n+{\n+    g_rpcSignals.PreCommand.connect(boost::bind(slot, _1));\n+}\n+\n+void RPCServer::OnPostCommand(boost::function<void (const CRPCCommand&)> slot)\n+{\n+    g_rpcSignals.PostCommand.connect(boost::bind(slot, _1));\n+}\n+\n void RPCTypeCheck(const Array& params,\n                   const list<Value_type>& typesExpected,\n                   bool fAllowNull)\n@@ -693,6 +725,7 @@ void StartRPCThreads()\n     for (int i = 0; i < GetArg(\"-rpcthreads\", 4); i++)\n         rpc_worker_group->create_thread(boost::bind(&boost::asio::io_service::run, rpc_io_service));\n     fRPCRunning = true;\n+    g_rpcSignals.Started();\n }\n \n void StartDummyRPCThread()\n@@ -735,7 +768,7 @@ void StopRPCThreads()\n     deadlineTimers.clear();\n \n     rpc_io_service->stop();\n-    cvBlockChange.notify_all();\n+    g_rpcSignals.Stopped();\n     if (rpc_worker_group != NULL)\n         rpc_worker_group->join_all();\n     delete rpc_dummy_work; rpc_dummy_work = NULL;\n@@ -978,45 +1011,20 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n     if (!pcmd)\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n-#ifdef ENABLE_WALLET\n-    if (pcmd->reqWallet && !pwalletMain)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n-#endif\n \n-    // Observe safe mode\n-    string strWarning = GetWarnings(\"rpc\");\n-    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&\n-        !pcmd->okSafeMode)\n-        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n+    g_rpcSignals.PreCommand(*pcmd);\n \n     try\n     {\n         // Execute\n-        Value result;\n-        {\n-            if (pcmd->threadSafe)\n-                result = pcmd->actor(params, false);\n-#ifdef ENABLE_WALLET\n-            else if (!pwalletMain) {\n-                LOCK(cs_main);\n-                result = pcmd->actor(params, false);\n-            } else {\n-                LOCK2(cs_main, pwalletMain->cs_wallet);\n-                result = pcmd->actor(params, false);\n-            }\n-#else // ENABLE_WALLET\n-            else {\n-                LOCK(cs_main);\n-                result = pcmd->actor(params, false);\n-            }\n-#endif // !ENABLE_WALLET\n-        }\n-        return result;\n+        return pcmd->actor(params, false);\n     }\n     catch (const std::exception& e)\n     {\n         throw JSONRPCError(RPC_MISC_ERROR, e.what());\n     }\n+\n+    g_rpcSignals.PostCommand(*pcmd);\n }\n \n std::string HelpExampleCli(string methodname, string args){"
      },
      {
        "sha": "41cd9da160e94f33000f4b0c8fcdb0b7b73dc660",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -19,6 +19,16 @@\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_writer_template.h\"\n \n+class CRPCCommand;\n+\n+namespace RPCServer\n+{\n+    void OnStarted(boost::function<void ()> slot);\n+    void OnStopped(boost::function<void ()> slot);\n+    void OnPreCommand(boost::function<void (const CRPCCommand&)> slot);\n+    void OnPostCommand(boost::function<void (const CRPCCommand&)> slot);\n+}\n+\n class CBlockIndex;\n class CNetAddr;\n "
      },
      {
        "sha": "338b648503f3cea9a07ed21a8ab151fc3e663cc6",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 2,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -90,6 +90,8 @@ Value getnewaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnewaddress\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount;\n     if (params.size() > 0)\n@@ -164,13 +166,14 @@ Value getaccountaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaccountaddress\", \"\\\"myaccount\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount = AccountFromValue(params[0]);\n \n     Value ret;\n \n     ret = GetAccountAddress(strAccount).ToString();\n-\n     return ret;\n }\n \n@@ -189,6 +192,8 @@ Value getrawchangeaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawchangeaddress\", \"\")\n        );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (!pwalletMain->IsLocked())\n         pwalletMain->TopUpKeyPool();\n \n@@ -219,11 +224,12 @@ Value setaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n-\n     string strAccount;\n     if (params.size() > 1)\n         strAccount = AccountFromValue(params[1]);\n@@ -262,6 +268,8 @@ Value getaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n@@ -292,6 +300,8 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaddressesbyaccount\", \"\\\"tabby\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n \n     // Find all addresses that have the given account\n@@ -363,6 +373,8 @@ Value sendtoaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n@@ -409,6 +421,8 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listaddressgroupings\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     Array jsonGroupings;\n     map<CTxDestination, CAmount> balances = pwalletMain->GetAddressBalances();\n     BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n@@ -454,6 +468,8 @@ Value signmessage(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"my message\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strAddress = params[0].get_str();\n@@ -504,6 +520,8 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", 6\")\n        );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Bitcoin address\n     CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n     if (!address.IsValid())\n@@ -557,6 +575,8 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getreceivedbyaccount\", \"\\\"tabby\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Minimum confirmations\n     int nMinDepth = 1;\n     if (params.size() > 1)\n@@ -643,6 +663,8 @@ Value getbalance(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (params.size() == 0)\n         return  ValueFromAmount(pwalletMain->GetBalance());\n \n@@ -695,6 +717,9 @@ Value getunconfirmedbalance(const Array &params, bool fHelp)\n         throw runtime_error(\n                 \"getunconfirmedbalance\\n\"\n                 \"Returns the server's total unconfirmed balance\\n\");\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ValueFromAmount(pwalletMain->GetUnconfirmedBalance());\n }\n \n@@ -721,6 +746,8 @@ Value movecmd(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"move\", \"\\\"timotei\\\", \\\"akiko\\\", 0.01, 6, \\\"happy birthday!\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strFrom = AccountFromValue(params[0]);\n     string strTo = AccountFromValue(params[1]);\n     CAmount nAmount = AmountFromValue(params[2]);\n@@ -793,6 +820,8 @@ Value sendfrom(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendfrom\", \"\\\"tabby\\\", \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.01, 6, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n@@ -850,6 +879,8 @@ Value sendmany(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n     Object sendTo = params[1].get_obj();\n     int nMinDepth = 1;\n@@ -935,6 +966,8 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n         throw runtime_error(msg);\n     }\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount;\n     if (params.size() > 2)\n         strAccount = AccountFromValue(params[2]);\n@@ -1110,6 +1143,8 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ListReceived(params, false);\n }\n \n@@ -1141,6 +1176,8 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listreceivedbyaccount\", \"6, true, true\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ListReceived(params, true);\n }\n \n@@ -1292,6 +1329,8 @@ Value listtransactions(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = \"*\";\n     if (params.size() > 0)\n         strAccount = params[0].get_str();\n@@ -1372,6 +1411,8 @@ Value listaccounts(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listaccounts\", \"6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     int nMinDepth = 1;\n     if (params.size() > 0)\n         nMinDepth = params[0].get_int();\n@@ -1460,6 +1501,8 @@ Value listsinceblock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBlockIndex *pindex = NULL;\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n@@ -1546,6 +1589,8 @@ Value gettransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     uint256 hash;\n     hash.SetHex(params[0].get_str());\n \n@@ -1594,6 +1639,8 @@ Value backupwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strDest = params[0].get_str();\n     if (!BackupWallet(*pwalletMain, strDest))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n@@ -1616,6 +1663,8 @@ Value keypoolrefill(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n     unsigned int kpSize = 0;\n     if (params.size() > 0) {\n@@ -1663,6 +1712,8 @@ Value walletpassphrase(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletpassphrase\", \"\\\"my pass phrase\\\", 60\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1710,6 +1761,8 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletpassphrasechange\", \"\\\"old one\\\", \\\"new one\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1756,6 +1809,8 @@ Value walletlock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletlock\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1797,6 +1852,8 @@ Value encryptwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"encryptwallet\", \"\\\"my pass phrase\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (pwalletMain->IsCrypted())\n@@ -1861,6 +1918,8 @@ Value lockunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (params.size() == 1)\n         RPCTypeCheck(params, boost::assign::list_of(bool_type));\n     else\n@@ -1930,6 +1989,8 @@ Value listlockunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listlockunspent\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     vector<COutPoint> vOutpts;\n     pwalletMain->ListLockedCoins(vOutpts);\n \n@@ -1961,6 +2022,8 @@ Value settxfee(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"settxfee\", \"0.00001\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Amount\n     CAmount nAmount = 0;\n     if (params[0].get_real() != 0.0)\n@@ -1992,6 +2055,8 @@ Value getwalletinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getwalletinfo\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     Object obj;\n     obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n     obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));"
      },
      {
        "sha": "27e80e813b77ca0754d8e2a8165a35ffb97d6fe5",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4401b2d7c52e0f3841225369fb0d10767c51aaa2/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "patch": "@@ -142,6 +142,17 @@ class CMutexLock\n             Enter(pszName, pszFile, nLine);\n     }\n \n+    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false)\n+    {\n+        if (!pmutexIn) return;\n+\n+        lock = boost::unique_lock<Mutex>(*pmutexIn, boost::defer_lock);\n+        if (fTry)\n+            TryEnter(pszName, pszFile, nLine);\n+        else\n+            Enter(pszName, pszFile, nLine);\n+    }\n+\n     ~CMutexLock()\n     {\n         if (lock.owns_lock())"
      }
    ]
  },
  {
    "sha": "5ebe0956b391cfa782fd97bb417d20b479df6a36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWJlMDk1NmIzOTFjZmE3ODJmZDk3YmI0MTdkMjBiNDc5ZGY2YTM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T12:52:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-28T06:41:54Z"
      },
      "message": "Trim RPC command table\n\n- invalidateblock and reconsiderblock were defined doubly\n- remove no-longer-used threadSafe, as locks have been pushed down",
      "tree": {
        "sha": "3307c1727409243c0707c51700d792097970b2e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3307c1727409243c0707c51700d792097970b2e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ebe0956b391cfa782fd97bb417d20b479df6a36",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ebe0956b391cfa782fd97bb417d20b479df6a36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ebe0956b391cfa782fd97bb417d20b479df6a36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ebe0956b391cfa782fd97bb417d20b479df6a36/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4401b2d7c52e0f3841225369fb0d10767c51aaa2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4401b2d7c52e0f3841225369fb0d10767c51aaa2"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 84,
      "deletions": 87
    },
    "files": [
      {
        "sha": "823b1fcf240b3e41e967c0f68c48bb430fec4e3d",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 84,
        "deletions": 86,
        "changes": 170,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ebe0956b391cfa782fd97bb417d20b479df6a36/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ebe0956b391cfa782fd97bb417d20b479df6a36/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=5ebe0956b391cfa782fd97bb417d20b479df6a36",
        "patch": "@@ -271,112 +271,110 @@ Value stop(const Array& params, bool fHelp)\n  * Call Table\n  */\n static const CRPCCommand vRPCCommands[] =\n-{ //  category              name                      actor (function)         okSafeMode threadSafe reqWallet\n-  //  --------------------- ------------------------  -----------------------  ---------- ---------- ---------\n+{ //  category              name                      actor (function)         okSafeMode reqWallet\n+  //  --------------------- ------------------------  -----------------------  ---------- ---------\n     /* Overall control/query calls */\n-    { \"control\",            \"getinfo\",                &getinfo,                true,      false,      false }, /* uses wallet if enabled */\n-    { \"control\",            \"help\",                   &help,                   true,      true,       false },\n-    { \"control\",            \"stop\",                   &stop,                   true,      true,       false },\n+    { \"control\",            \"getinfo\",                &getinfo,                true,      false }, /* uses wallet if enabled */\n+    { \"control\",            \"help\",                   &help,                   true,      false },\n+    { \"control\",            \"stop\",                   &stop,                   true,      false },\n \n     /* P2P networking */\n-    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true,      false,      false },\n-    { \"network\",            \"addnode\",                &addnode,                true,      true,       false },\n-    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true,      true,       false },\n-    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true,      false,      false },\n-    { \"network\",            \"getnettotals\",           &getnettotals,           true,      true,       false },\n-    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true,      false,      false },\n-    { \"network\",            \"ping\",                   &ping,                   true,      false,      false },\n+    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true,      false },\n+    { \"network\",            \"addnode\",                &addnode,                true,      false },\n+    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true,      false },\n+    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true,      false },\n+    { \"network\",            \"getnettotals\",           &getnettotals,           true,      false },\n+    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true,      false },\n+    { \"network\",            \"ping\",                   &ping,                   true,      false },\n \n     /* Block chain and UTXO */\n-    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true,      false,      false },\n-    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true,      false,      false },\n-    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true,      false,      false },\n-    { \"blockchain\",         \"getblock\",               &getblock,               true,      false,      false },\n-    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true,      false,      false },\n-    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true,      false,      false },\n-    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true,      false,      false },\n-    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,      true,       false },\n-    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,      false,      false },\n-    { \"blockchain\",         \"gettxout\",               &gettxout,               true,      false,      false },\n-    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false,      false },\n-    { \"blockchain\",         \"verifychain\",            &verifychain,            true,      false,      false },\n-    { \"blockchain\",         \"invalidateblock\",        &invalidateblock,        true,      true,       false },\n-    { \"blockchain\",         \"reconsiderblock\",        &reconsiderblock,        true,      true,       false },\n+    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true,      false },\n+    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true,      false },\n+    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true,      false },\n+    { \"blockchain\",         \"getblock\",               &getblock,               true,      false },\n+    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true,      false },\n+    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true,      false },\n+    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true,      false },\n+    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,      false },\n+    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,      false },\n+    { \"blockchain\",         \"gettxout\",               &gettxout,               true,      false },\n+    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false },\n+    { \"blockchain\",         \"verifychain\",            &verifychain,            true,      false },\n \n     /* Mining */\n-    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,      false,      false },\n-    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,      false,      false },\n-    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true,      false,      false },\n-    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,      false,      false },\n-    { \"mining\",             \"submitblock\",            &submitblock,            true,      true,       false },\n+    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,      false },\n+    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,      false },\n+    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true,      false },\n+    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,      false },\n+    { \"mining\",             \"submitblock\",            &submitblock,            true,      false },\n \n #ifdef ENABLE_WALLET\n     /* Coin generation */\n-    { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false,      false },\n-    { \"generating\",         \"setgenerate\",            &setgenerate,            true,      true,       false },\n+    { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false },\n+    { \"generating\",         \"setgenerate\",            &setgenerate,            true,      false },\n #endif\n \n     /* Raw transactions */\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      false,      false },\n-    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false,      false },\n-    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      false,      false },\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false,      false },\n-    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false,      false },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false,      false }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      false },\n+    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false },\n+    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      false },\n+    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false },\n+    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false },\n+    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false }, /* uses wallet if enabled */\n \n     /* Utility functions */\n-    { \"util\",               \"createmultisig\",         &createmultisig,         true,      true ,      false },\n-    { \"util\",               \"validateaddress\",        &validateaddress,        true,      false,      false }, /* uses wallet if enabled */\n-    { \"util\",               \"verifymessage\",          &verifymessage,          true,      false,      false },\n-    { \"util\",               \"estimatefee\",            &estimatefee,            true,      true,       false },\n-    { \"util\",               \"estimatepriority\",       &estimatepriority,       true,      true,       false },\n+    { \"util\",               \"createmultisig\",         &createmultisig,         true,      false },\n+    { \"util\",               \"validateaddress\",        &validateaddress,        true,      false }, /* uses wallet if enabled */\n+    { \"util\",               \"verifymessage\",          &verifymessage,          true,      false },\n+    { \"util\",               \"estimatefee\",            &estimatefee,            true,      false },\n+    { \"util\",               \"estimatepriority\",       &estimatepriority,       true,      false },\n \n     /* Not shown in help */\n-    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,      true,       false },\n-    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,      true,       false },\n-    { \"hidden\",             \"setmocktime\",            &setmocktime,            true,      false,      false },\n+    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,      false },\n+    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,      false },\n+    { \"hidden\",             \"setmocktime\",            &setmocktime,            true,      false },\n \n #ifdef ENABLE_WALLET\n     /* Wallet */\n-    { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true,      false,      true },\n-    { \"wallet\",             \"backupwallet\",           &backupwallet,           true,      false,      true },\n-    { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true,      false,      true },\n-    { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true,      false,      true },\n-    { \"wallet\",             \"encryptwallet\",          &encryptwallet,          true,      false,      true },\n-    { \"wallet\",             \"getaccountaddress\",      &getaccountaddress,      true,      false,      true },\n-    { \"wallet\",             \"getaccount\",             &getaccount,             true,      false,      true },\n-    { \"wallet\",             \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,      false,      true },\n-    { \"wallet\",             \"getbalance\",             &getbalance,             false,     false,      true },\n-    { \"wallet\",             \"getnewaddress\",          &getnewaddress,          true,      false,      true },\n-    { \"wallet\",             \"getrawchangeaddress\",    &getrawchangeaddress,    true,      false,      true },\n-    { \"wallet\",             \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,     false,      true },\n-    { \"wallet\",             \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,     false,      true },\n-    { \"wallet\",             \"gettransaction\",         &gettransaction,         false,     false,      true },\n-    { \"wallet\",             \"getunconfirmedbalance\",  &getunconfirmedbalance,  false,     false,      true },\n-    { \"wallet\",             \"getwalletinfo\",          &getwalletinfo,          false,     false,      true },\n-    { \"wallet\",             \"importprivkey\",          &importprivkey,          true,      false,      true },\n-    { \"wallet\",             \"importwallet\",           &importwallet,           true,      false,      true },\n-    { \"wallet\",             \"importaddress\",          &importaddress,          true,      false,      true },\n-    { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true,      false,      true },\n-    { \"wallet\",             \"listaccounts\",           &listaccounts,           false,     false,      true },\n-    { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false,     false,      true },\n-    { \"wallet\",             \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n-    { \"wallet\",             \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,     false,      true },\n-    { \"wallet\",             \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,     false,      true },\n-    { \"wallet\",             \"listsinceblock\",         &listsinceblock,         false,     false,      true },\n-    { \"wallet\",             \"listtransactions\",       &listtransactions,       false,     false,      true },\n-    { \"wallet\",             \"listunspent\",            &listunspent,            false,     false,      true },\n-    { \"wallet\",             \"lockunspent\",            &lockunspent,            true,      false,      true },\n-    { \"wallet\",             \"move\",                   &movecmd,                false,     false,      true },\n-    { \"wallet\",             \"sendfrom\",               &sendfrom,               false,     false,      true },\n-    { \"wallet\",             \"sendmany\",               &sendmany,               false,     false,      true },\n-    { \"wallet\",             \"sendtoaddress\",          &sendtoaddress,          false,     false,      true },\n-    { \"wallet\",             \"setaccount\",             &setaccount,             true,      false,      true },\n-    { \"wallet\",             \"settxfee\",               &settxfee,               true,      false,      true },\n-    { \"wallet\",             \"signmessage\",            &signmessage,            true,      false,      true },\n-    { \"wallet\",             \"walletlock\",             &walletlock,             true,      false,      true },\n-    { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true,      false,      true },\n-    { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true,      false,      true },\n+    { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true,      true },\n+    { \"wallet\",             \"backupwallet\",           &backupwallet,           true,      true },\n+    { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true,      true },\n+    { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true,      true },\n+    { \"wallet\",             \"encryptwallet\",          &encryptwallet,          true,      true },\n+    { \"wallet\",             \"getaccountaddress\",      &getaccountaddress,      true,      true },\n+    { \"wallet\",             \"getaccount\",             &getaccount,             true,      true },\n+    { \"wallet\",             \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,      true },\n+    { \"wallet\",             \"getbalance\",             &getbalance,             false,     true },\n+    { \"wallet\",             \"getnewaddress\",          &getnewaddress,          true,      true },\n+    { \"wallet\",             \"getrawchangeaddress\",    &getrawchangeaddress,    true,      true },\n+    { \"wallet\",             \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,     true },\n+    { \"wallet\",             \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,     true },\n+    { \"wallet\",             \"gettransaction\",         &gettransaction,         false,     true },\n+    { \"wallet\",             \"getunconfirmedbalance\",  &getunconfirmedbalance,  false,     true },\n+    { \"wallet\",             \"getwalletinfo\",          &getwalletinfo,          false,     true },\n+    { \"wallet\",             \"importprivkey\",          &importprivkey,          true,      true },\n+    { \"wallet\",             \"importwallet\",           &importwallet,           true,      true },\n+    { \"wallet\",             \"importaddress\",          &importaddress,          true,      true },\n+    { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true,      true },\n+    { \"wallet\",             \"listaccounts\",           &listaccounts,           false,     true },\n+    { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false,     true },\n+    { \"wallet\",             \"listlockunspent\",        &listlockunspent,        false,     true },\n+    { \"wallet\",             \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,     true },\n+    { \"wallet\",             \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,     true },\n+    { \"wallet\",             \"listsinceblock\",         &listsinceblock,         false,     true },\n+    { \"wallet\",             \"listtransactions\",       &listtransactions,       false,     true },\n+    { \"wallet\",             \"listunspent\",            &listunspent,            false,     true },\n+    { \"wallet\",             \"lockunspent\",            &lockunspent,            true,      true },\n+    { \"wallet\",             \"move\",                   &movecmd,                false,     true },\n+    { \"wallet\",             \"sendfrom\",               &sendfrom,               false,     true },\n+    { \"wallet\",             \"sendmany\",               &sendmany,               false,     true },\n+    { \"wallet\",             \"sendtoaddress\",          &sendtoaddress,          false,     true },\n+    { \"wallet\",             \"setaccount\",             &setaccount,             true,      true },\n+    { \"wallet\",             \"settxfee\",               &settxfee,               true,      true },\n+    { \"wallet\",             \"signmessage\",            &signmessage,            true,      true },\n+    { \"wallet\",             \"walletlock\",             &walletlock,             true,      true },\n+    { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true,      true },\n+    { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true,      true },\n #endif // ENABLE_WALLET\n };\n "
      },
      {
        "sha": "f63438ecb882422f6035c0e8f329d5685dc9fdb0",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ebe0956b391cfa782fd97bb417d20b479df6a36/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ebe0956b391cfa782fd97bb417d20b479df6a36/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=5ebe0956b391cfa782fd97bb417d20b479df6a36",
        "patch": "@@ -98,7 +98,6 @@ class CRPCCommand\n     std::string name;\n     rpcfn_type actor;\n     bool okSafeMode;\n-    bool threadSafe;\n     bool reqWallet;\n };\n "
      }
    ]
  },
  {
    "sha": "c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2IyMmFhMGFjMTgxM2FlYTdlOTY0YjNiNDBmMjUxZmNhOWFjNjc1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T08:28:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T08:29:32Z"
      },
      "message": "Merge pull request #5683\n\n95ef87c add new osx dmg background picture (Jonas Schnelli)\n48bebcc osx packaging: update DS_Store after background changes (Cory Fields)\n997cab7 osx packaging: switch background image to background.tiff (Cory Fields)\n88a7973 osx packaging: move background image to .background to match gitian builds (Cory Fields)",
      "tree": {
        "sha": "e26e0f20a8aa53a53b6a74f87c5a6fefb70c37b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e26e0f20a8aa53a53b6a74f87c5a6fefb70c37b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUye9sAAoJEHSBCwEjRsmmiUgH/0iBV/6MAM2Cpf4jwxihgTLn\nRAkfQtHv2iSDez+cMuQdu7FfpEQpH9LqNdDwXwm+G31U+egMdHSUjwbKOO3s1wSF\nKmtV8FC+p5pVjK96BinNIAXDKQ6PMTAL1MAQBO60tc6FzFC3EXLPJJvpd5CimCNM\n8DIb+jKwh2+QtuZfIypofHTzwvB552g7GAGH2adzdVWBE3Gw9CepT5KuVkuC1hQg\npPyBYDeHusGSt+vHEcJqVGsO2CSbjf33MYS1dMIXF4NiCjoPz23C4TtgfrnrBDXH\nopnE1X3lYBHnBI5+g98JOeI+gOOWBkTMgqloJvLe1QYO2r+Vz74mQPdXZVQYqzk=\n=E0PI\n-----END PGP SIGNATURE-----",
        "payload": "tree e26e0f20a8aa53a53b6a74f87c5a6fefb70c37b2\nparent 6b5f5294bba0448c0349ad41cd0e7e107a500b9d\nparent 95ef87c75ee879181c71bcd1933d8cc01f9d0fa3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422520127 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422520172 +0100\n\nMerge pull request #5683\n\n95ef87c add new osx dmg background picture (Jonas Schnelli)\n48bebcc osx packaging: update DS_Store after background changes (Cory Fields)\n997cab7 osx packaging: switch background image to background.tiff (Cory Fields)\n88a7973 osx packaging: move background image to .background to match gitian builds (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b5f5294bba0448c0349ad41cd0e7e107a500b9d"
      },
      {
        "sha": "95ef87c75ee879181c71bcd1933d8cc01f9d0fa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95ef87c75ee879181c71bcd1933d8cc01f9d0fa3"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 13,
      "deletions": 11
    },
    "files": [
      {
        "sha": "c59648fd02d46db7fa15fbf256e1281a3558b2a3",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
        "patch": "@@ -16,6 +16,7 @@ BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win$(WINDOWS_BITS)-setup$(EX\n \n OSX_APP=Bitcoin-Qt.app\n OSX_DMG=Bitcoin-Qt.dmg\n+OSX_BACKGROUND_IMAGE=background.tiff\n OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n@@ -30,7 +31,7 @@ WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n   $(top_srcdir)/doc/README_windows.txt\n \n OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n-  $(top_srcdir)/contrib/macdeploy/background.png \\\n+  $(top_srcdir)/contrib/macdeploy/$(OSX_BACKGROUND_IMAGE) \\\n   $(top_srcdir)/contrib/macdeploy/DS_Store \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-apply.sh \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-create.sh\n@@ -95,7 +96,7 @@ $(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING)\n deploydir: $(OSX_DMG)\n else\n APP_DIST_DIR=$(top_builddir)/dist\n-APP_DIST_EXTRAS=$(APP_DIST_DIR)/.background/background.png $(APP_DIST_DIR)/.DS_Store $(APP_DIST_DIR)/Applications\n+APP_DIST_EXTRAS=$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE) $(APP_DIST_DIR)/.DS_Store $(APP_DIST_DIR)/Applications\n \n $(APP_DIST_DIR)/Applications:\n \t@rm -f $@\n@@ -106,11 +107,11 @@ $(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt\n $(OSX_DMG): $(APP_DIST_EXTRAS)\n \t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"Bitcoin-Qt\" -no-pad -r -apple -o $@ dist\n \n-$(APP_DIST_DIR)/.background/background.png:\n+$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_IMAGE)\n \t$(MKDIR_P) $(@D)\n-\t$(INSTALL) $(top_srcdir)/contrib/macdeploy/background.png $@\n-$(APP_DIST_DIR)/.DS_Store:\n-\t$(INSTALL) $(top_srcdir)/contrib/macdeploy/DS_Store $@\n+\t$(INSTALL) $< $@\n+$(APP_DIST_DIR)/.DS_Store: contrib/macdeploy/DS_Store\n+\t$(INSTALL) $< $@\n \n $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n \tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -add-qt-tr $(OSX_QT_TRANSLATIONS) -verbose 2"
      },
      {
        "sha": "099960712af26791175d9f0cdd3d52c251ea9ee4",
        "filename": "contrib/macdeploy/DS_Store",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/DS_Store",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/DS_Store",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/DS_Store?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675"
      },
      {
        "sha": "f88a2ae74bdb33afc2806b6403ea8c0191b096ca",
        "filename": "contrib/macdeploy/background.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.png?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675"
      },
      {
        "sha": "fdc4f4ca4a07ea4c6082ee1357b6ec7e8db99d72",
        "filename": "contrib/macdeploy/background.psd",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background.psd",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background.psd",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.psd?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675"
      },
      {
        "sha": "4b44ac672e627be82bb9b74dac0016057b11c126",
        "filename": "contrib/macdeploy/background.tiff",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background.tiff",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background.tiff",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.tiff?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675"
      },
      {
        "sha": "4858183f75c382a9b8d75ae4fb8a74abd830615f",
        "filename": "contrib/macdeploy/background@2x.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background@2x.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/background@2x.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background@2x.png?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675"
      },
      {
        "sha": "ef277a7f14ad66ecdb8597a865a54b9506fd0ff9",
        "filename": "contrib/macdeploy/fancy.plist",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/fancy.plist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/fancy.plist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/fancy.plist?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
        "patch": "@@ -10,7 +10,7 @@\n \t\t<integer>620</integer>\n \t</array>\n \t<key>background_picture</key>\n-\t<string>background.png</string>\n+\t<string>background.tiff</string>\n \t<key>icon_size</key>\n \t<integer>96</integer>\n \t<key>applications_symlink</key>"
      },
      {
        "sha": "0eb6b2c84ddf51d5832564f9b7f5b86c1a95f1b3",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b22aa0ac1813aea7e964b3b40f251fca9ac675/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
        "patch": "@@ -767,7 +767,7 @@ if config.dmg is not None:\n         for path, dirs, files in os.walk(\"dist\"):\n             for file in files:\n                 size += os.path.getsize(os.path.join(path, file))\n-        size += int(size * 0.1)\n+        size += int(size * 0.15)\n         \n         if verbose >= 3:\n             print \"Creating temp image for modification...\"\n@@ -791,7 +791,8 @@ if config.dmg is not None:\n             print \"+ Applying fancy settings +\"\n         \n         if fancy.has_key(\"background_picture\"):\n-            bg_path = os.path.join(disk_root, os.path.basename(fancy[\"background_picture\"]))\n+            bg_path = os.path.join(disk_root, \".background\", os.path.basename(fancy[\"background_picture\"]))\n+            os.mkdir(os.path.dirname(bg_path))\n             if verbose >= 3:\n                 print fancy[\"background_picture\"], \"->\", bg_path\n             shutil.copy2(fancy[\"background_picture\"], bg_path)\n@@ -849,8 +850,8 @@ if config.dmg is not None:\n         if bg_path is not None:\n             # Set background file, then call SetFile to make it invisible.\n             # (note: making it invisible first makes set background picture fail)\n-            bgscript = Template(\"\"\"set background picture of theViewOptions to file \"$bgpic\"\n-                   do shell script \"SetFile -a V /Volumes/$disk/$bgpic\" \"\"\")\n+            bgscript = Template(\"\"\"set background picture of theViewOptions to file \".background:$bgpic\"\n+                   do shell script \"SetFile -a V /Volumes/$disk/.background/$bgpic\" \"\"\")\n             params[\"background_commands\"] = bgscript.substitute({\"bgpic\" : os.path.basename(bg_path), \"disk\" : params[\"disk\"]})\n \n         s = appscript.substitute(params)"
      }
    ]
  },
  {
    "sha": "55eade9d46ebfa4b32b79893595d91d529fa30bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWVhZGU5ZDQ2ZWJmYTRiMzJiNzk4OTM1OTVkOTFkNTI5ZmEzMGJi",
    "commit": {
      "author": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2015-01-28T19:25:11Z"
      },
      "committer": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2015-01-29T09:07:08Z"
      },
      "message": "Change Coin Control first column label",
      "tree": {
        "sha": "0950fe9cbb7b79ccbe1eac8224ecaf81d87a9a95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0950fe9cbb7b79ccbe1eac8224ecaf81d87a9a95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55eade9d46ebfa4b32b79893595d91d529fa30bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55eade9d46ebfa4b32b79893595d91d529fa30bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55eade9d46ebfa4b32b79893595d91d529fa30bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55eade9d46ebfa4b32b79893595d91d529fa30bb/comments",
    "author": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b5f5294bba0448c0349ad41cd0e7e107a500b9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b5f5294bba0448c0349ad41cd0e7e107a500b9d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3f4f082b8ccb842294c4de79ce9c9999b8bc22b2",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55eade9d46ebfa4b32b79893595d91d529fa30bb/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55eade9d46ebfa4b32b79893595d91d529fa30bb/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=55eade9d46ebfa4b32b79893595d91d529fa30bb",
        "patch": "@@ -117,6 +117,10 @@ CoinControlDialog::CoinControlDialog(QWidget *parent) :\n     // (un)select all\n     connect(ui->pushButtonSelectAll, SIGNAL(clicked()), this, SLOT(buttonSelectAllClicked()));\n \n+    // change coin control first column label due Qt4 bug. \n+    // see https://github.com/bitcoin/bitcoin/issues/5716\n+    ui->treeWidget->headerItem()->setText(COLUMN_CHECKBOX, QString());\n+\n     ui->treeWidget->setColumnWidth(COLUMN_CHECKBOX, 84);\n     ui->treeWidget->setColumnWidth(COLUMN_AMOUNT, 100);\n     ui->treeWidget->setColumnWidth(COLUMN_LABEL, 170);"
      }
    ]
  },
  {
    "sha": "7620ef9e7edbc3526e71922e7b080b5a332d6897",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjIwZWY5ZTdlZGJjMzUyNmU3MTkyMmU3YjA4MGI1YTMzMmQ2ODk3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T10:14:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T10:14:16Z"
      },
      "message": "Merge pull request #5720\n\n55eade9 Change Coin Control first column label (fsb4000)",
      "tree": {
        "sha": "cc00ed510096c79bded7a65a84a0d16466e3afff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc00ed510096c79bded7a65a84a0d16466e3afff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7620ef9e7edbc3526e71922e7b080b5a332d6897",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUygf4AAoJEHSBCwEjRsmmQC4IALYqBRNhzV/ViKEAe5ue+YV4\nqw9Z8kXGWXpPtbfwGE7JJGR2+/cpm7vWcIzEefrR0/f6LzNVh6tS1bbyBeyou4CD\n50tAMN1kLO9NsKHe/PpXPcVxT352iNcz79cENWPNpEs7SfFgDg8iOj5FUEGea5rb\nAkf4a1osK2wAEO6oRNBjleOIJqtN0uP7c1YgeLZxL8Bclf1eJj2KEg+6Dc+bOdJI\nqztQwk1D+t0ZGM3EUvXEMqLOyVg/Xj2AmDgMgnb1oQuBD2xzSV2rALPfwoDPuIwO\n/vQ2EZoHgCzPV6KjLeOBpTyRmV9WsPxDZq5e8yNUVU6wNOuG+aNIZE8/EnUT4MQ=\n=DY+a\n-----END PGP SIGNATURE-----",
        "payload": "tree cc00ed510096c79bded7a65a84a0d16466e3afff\nparent c7b22aa0ac1813aea7e964b3b40f251fca9ac675\nparent 55eade9d46ebfa4b32b79893595d91d529fa30bb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422526448 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422526456 +0100\n\nMerge pull request #5720\n\n55eade9 Change Coin Control first column label (fsb4000)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7620ef9e7edbc3526e71922e7b080b5a332d6897",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7620ef9e7edbc3526e71922e7b080b5a332d6897",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7620ef9e7edbc3526e71922e7b080b5a332d6897/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b22aa0ac1813aea7e964b3b40f251fca9ac675",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b22aa0ac1813aea7e964b3b40f251fca9ac675"
      },
      {
        "sha": "55eade9d46ebfa4b32b79893595d91d529fa30bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55eade9d46ebfa4b32b79893595d91d529fa30bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55eade9d46ebfa4b32b79893595d91d529fa30bb"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3f4f082b8ccb842294c4de79ce9c9999b8bc22b2",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7620ef9e7edbc3526e71922e7b080b5a332d6897/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7620ef9e7edbc3526e71922e7b080b5a332d6897/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=7620ef9e7edbc3526e71922e7b080b5a332d6897",
        "patch": "@@ -117,6 +117,10 @@ CoinControlDialog::CoinControlDialog(QWidget *parent) :\n     // (un)select all\n     connect(ui->pushButtonSelectAll, SIGNAL(clicked()), this, SLOT(buttonSelectAllClicked()));\n \n+    // change coin control first column label due Qt4 bug. \n+    // see https://github.com/bitcoin/bitcoin/issues/5716\n+    ui->treeWidget->headerItem()->setText(COLUMN_CHECKBOX, QString());\n+\n     ui->treeWidget->setColumnWidth(COLUMN_CHECKBOX, 84);\n     ui->treeWidget->setColumnWidth(COLUMN_AMOUNT, 100);\n     ui->treeWidget->setColumnWidth(COLUMN_LABEL, 170);"
      }
    ]
  },
  {
    "sha": "7823598fa4774141568e5b6d73c4277a452f8d16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODIzNTk4ZmE0Nzc0MTQxNTY4ZTViNmQ3M2M0Mjc3YTQ1MmY4ZDE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T11:47:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T11:48:27Z"
      },
      "message": "Merge pull request #5620\n\n6715efb [Qt] Payment request expiration bug fix (re-done) (Philip Kaufmann)",
      "tree": {
        "sha": "97e3d2e86cee27ff8d77f93b706981841626dbfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97e3d2e86cee27ff8d77f93b706981841626dbfc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7823598fa4774141568e5b6d73c4277a452f8d16",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUyh4LAAoJEHSBCwEjRsmmx8gH/AnbvFRpr/p7TBUG9r49AsBy\nr0jL0ykj8cs2M6DYc5KlHM6zfOw52/++0GLN1mGDu6UdL+63fJkQCwXQrbEQhk4H\n4uYa10K+q8wZzUL8tH1A33i4Ebz356sxJtOyV2dQiZvV7FiUjBHNiPvmxmZQGDdi\nu06sKRThZuLwT4m1YSaMbIKEvfcBY864Rf/+yVkvaCG3GLp/8JvqwuYp6LpCyszz\n6KI/M4ee6ULSDv3O16xRPX1Csxr/pND44CkSt1sjdylqDFezRrHz5bqoqDqLfEIT\nn20KtUBWPhDsQlxStJrol+ULvdubhbCli5ae69fm5uU9Dw9zJb/r1YUuTeG6sUI=\n=ZLeU\n-----END PGP SIGNATURE-----",
        "payload": "tree 97e3d2e86cee27ff8d77f93b706981841626dbfc\nparent 7620ef9e7edbc3526e71922e7b080b5a332d6897\nparent 6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422532033 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422532107 +0100\n\nMerge pull request #5620\n\n6715efb [Qt] Payment request expiration bug fix (re-done) (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7823598fa4774141568e5b6d73c4277a452f8d16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7823598fa4774141568e5b6d73c4277a452f8d16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7823598fa4774141568e5b6d73c4277a452f8d16/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7620ef9e7edbc3526e71922e7b080b5a332d6897",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7620ef9e7edbc3526e71922e7b080b5a332d6897",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7620ef9e7edbc3526e71922e7b080b5a332d6897"
      },
      {
        "sha": "6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6715efb9ca5cabeb07ae4ba8390a6e1b7638f66c"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 137,
      "deletions": 13
    },
    "files": [
      {
        "sha": "46ffd055a5506f093228ba611d6366cda805db54",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=7823598fa4774141568e5b6d73c4277a452f8d16",
        "patch": "@@ -521,8 +521,6 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n         return false;\n \n     if (request.IsInitialized()) {\n-        const payments::PaymentDetails& details = request.getDetails();\n-\n         // Payment request network matches client network?\n         if (!verifyNetwork(request.getDetails())) {\n             emit message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n@@ -531,16 +529,15 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n             return false;\n         }\n \n-        // Expired payment request?\n-        if (details.has_expires() && (int64_t)details.expires() < GetTime())\n-        {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Payment request has expired.\"),\n+        // Make sure any payment requests involved are still valid.\n+        // This is re-checked just before sending coins in WalletModel::sendCoins().\n+        if (verifyExpired(request.getDetails())) {\n+            emit message(tr(\"Payment request rejected\"), tr(\"Payment request expired.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n             return false;\n         }\n-    }\n-    else {\n+    } else {\n         emit message(tr(\"Payment request error\"), tr(\"Payment request is not initialized.\"),\n             CClientUIInterface::MSG_ERROR);\n \n@@ -759,3 +756,15 @@ bool PaymentServer::verifyNetwork(const payments::PaymentDetails& requestDetails\n     }\n     return fVerified;\n }\n+\n+bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails)\n+{\n+    bool fVerified = (requestDetails.has_expires() && (int64_t)requestDetails.expires() < GetTime());\n+    if (fVerified) {\n+        const QString requestExpires = QString::fromStdString(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", (int64_t)requestDetails.expires()));\n+        qWarning() << QString(\"PaymentServer::%1: Payment request expired \\\"%2\\\".\")\n+            .arg(__func__)\n+            .arg(requestExpires);\n+    }\n+    return fVerified;\n+}"
      },
      {
        "sha": "db5f44ff1dfd8e5a444e4a2cec1058d4639df3fb",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=7823598fa4774141568e5b6d73c4277a452f8d16",
        "patch": "@@ -93,6 +93,8 @@ class PaymentServer : public QObject\n \n     // Verify that the payment request network matches the client network\n     static bool verifyNetwork(const payments::PaymentDetails& requestDetails);\n+    // Verify if the payment request is expired\n+    static bool verifyExpired(const payments::PaymentDetails& requestDetails);\n \n signals:\n     // Fired when a valid payment request is received"
      },
      {
        "sha": "9e8743d80520b957a64293a6aa73ef98d0d2c110",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=7823598fa4774141568e5b6d73c4277a452f8d16",
        "patch": "@@ -529,6 +529,10 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n     case WalletModel::InsaneFee:\n         msgParams.first = tr(\"A fee higher than %1 is considered an insanely high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), 10000000));\n         break;\n+    case WalletModel::PaymentRequestExpired:\n+        msgParams.first = tr(\"Payment request expired!\");\n+        msgParams.second = CClientUIInterface::MSG_ERROR;\n+        break;\n     // included to prevent a compiler warning.\n     case WalletModel::OK:\n     default:"
      },
      {
        "sha": "50636d7c67f770132c5591a68aa44995d2a8f100",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=7823598fa4774141568e5b6d73c4277a452f8d16",
        "patch": "@@ -361,3 +361,75 @@ gAFwThsozZxkZxzCn4R8WxNiLFV6m0ye9fEtSbolfaW+EjBMpO03lr/dwNnrclhg\\\n ew+A05xfZztrAt16XKEY7qKJ/eY2nLd0fVAIu/nIt+7/VYVXT83zLrWc150aRS7W\\\n AdJbL3JOJLs6Eyp5zrPbfI8faRttFAdONKDrJgIpuW1E3g==\\\n \";\n+\n+//\n+// Expired payment request (expires is set to 1 = 1970-01-01 00:00:01)\n+//\n+const char* paymentrequest2_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iQgoEdGVzdBIgCICt4gQS\\\n+GXapFASsapRTBKxoykO9YhoackY1CqLyiKwYiNLUpQUgASoQVGVzdGluZyB0ZXN0\\\n+bmV0ISqAATXq9A5nmJgtmee/bQTeHeif4w1YYFPBlKghwx6qbVgXTWnwBJtOQhhV\\\n+sZdzbTl95ENR7/Y7VJupW9kDWobCK7zUUhLAzUlwmLlcx6itHw8LTUF5HK+AwsZm\\\n+Zs85lISGvOS0NZW/ENa6l+oQRnL87oqVZr/EDGiuqjz6T0ThQi0l\\\n+\";\n+\n+//\n+// Unexpired payment request (expires is set to 0x7FFFFFFFFFFFFFFF = max. int64_t)\n+//\n+const char* paymentrequest3_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iSgoEdGVzdBIgCICt4gQS\\\n+GXapFASsapRTBKxoykO9YhoackY1CqLyiKwYyNfZpQUg//////////9/KhBUZXN0\\\n+aW5nIHRlc3RuZXQhKoABNwi8WnMW4aMvbmvorTiiWJLFhofLFnsoWCJnj3rWLnLh\\\n+n3w6q/fZ26p50ERL/noxdTUfeFsKnlECkUu/fOcOrqyYDiwvxI0SZ034DleVyFU1\\\n+Z3T+X0zcL8oe7bX01Yf+s2V+5JXQXarKnKBrZCGgv2ARjFNSZe7E7vGg5K4Q6Q8=\\\n+\";\n+\n+//\n+// Unexpired payment request (expires is set to 0x8000000000000000 > max. int64_t, allowed uint64)\n+//\n+const char* paymentrequest4_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iSwoEdGVzdBIgCICt4gQS\\\n+GXapFASsapRTBKxoykO9YhoackY1CqLyiKwYt+HZpQUggICAgICAgICAASoQVGVz\\\n+dGluZyB0ZXN0bmV0ISqAAXSQG8+GFA18VaKarlYrOz293rNMIub0swKGcQm8jAGX\\\n+HSLaRgHfUDeEPr4hydy4dtfu59KNwe2xsHOHu/SpO4L8SrA4Dm9A7SlNBVWdcLbw\\\n+d2hj739GDLz0b5KuJ2SG6VknMRQM976w/m2qlq0ccVGaaZ2zMIGfpzL3p6adwx/5\\\n+\";"
      },
      {
        "sha": "04935192c85fa97bb51b445686903d9d895b9063",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 2,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=7823598fa4774141568e5b6d73c4277a452f8d16",
        "patch": "@@ -143,15 +143,45 @@ void PaymentServerTests::paymentServerTests()\n     QVERIFY(r.paymentRequest.IsInitialized());\n     QCOMPARE(PaymentServer::verifyNetwork(r.paymentRequest.getDetails()), false);\n \n-    // Just get some random data big enough to trigger BIP70 DoS protection\n+    // Expired payment request (expires is set to 1 = 1970-01-01 00:00:01):\n+    data = DecodeBase64(paymentrequest2_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    // compares 1 < GetTime() == false (treated as expired payment request)\n+    QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), true);\n+\n+    // Unexpired payment request (expires is set to 0x7FFFFFFFFFFFFFFF = max. int64_t):\n+    // 9223372036854775807 (uint64), 9223372036854775807 (int64_t) and -1 (int32_t)\n+    // -1 is 1969-12-31 23:59:59 (for a 32 bit time values)\n+    data = DecodeBase64(paymentrequest3_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    // compares 9223372036854775807 < GetTime() == false (treated as unexpired payment request)\n+    QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), false);\n+\n+    // Unexpired payment request (expires is set to 0x8000000000000000 > max. int64_t, allowed uint64):\n+    // 9223372036854775808 (uint64), -9223372036854775808 (int64_t) and 0 (int32_t)\n+    // 0 is 1970-01-01 00:00:00 (for a 32 bit time values)\n+    data = DecodeBase64(paymentrequest4_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    // compares -9223372036854775808 < GetTime() == true (treated as expired payment request)\n+    QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), true);\n+\n+    // Test BIP70 DoS protection:\n     unsigned char randData[BIP70_MAX_PAYMENTREQUEST_SIZE + 1];\n     GetRandBytes(randData, sizeof(randData));\n     // Write data to a temp file:\n     QTemporaryFile tempFile;\n     tempFile.open();\n     tempFile.write((const char*)randData, sizeof(randData));\n     tempFile.close();\n-    // Trigger BIP70 DoS protection\n     QCOMPARE(PaymentServer::readPaymentRequestFromFile(tempFile.fileName(), r.paymentRequest), false);\n \n     delete server;"
      },
      {
        "sha": "57596b77bd771eb6443b92e780ed75b60de2200d",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=7823598fa4774141568e5b6d73c4277a452f8d16",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"addresstablemodel.h\"\n #include \"guiconstants.h\"\n+#include \"paymentserver.h\"\n #include \"recentrequeststablemodel.h\"\n #include \"transactiontablemodel.h\"\n \n@@ -294,11 +295,16 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         LOCK2(cs_main, wallet->cs_wallet);\n         CWalletTx *newTx = transaction.getTransaction();\n \n-        // Store PaymentRequests in wtx.vOrderForm in wallet.\n         foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n         {\n             if (rcp.paymentRequest.IsInitialized())\n             {\n+                // Make sure any payment requests involved are still valid.\n+                if (PaymentServer::verifyExpired(rcp.paymentRequest.getDetails())) {\n+                    return PaymentRequestExpired;\n+                }\n+\n+                // Store PaymentRequests in wtx.vOrderForm in wallet.\n                 std::string key(\"PaymentRequest\");\n                 std::string value;\n                 rcp.paymentRequest.SerializeToString(&value);"
      },
      {
        "sha": "9916d11f93995175632ad456db4400e2088a6102",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7823598fa4774141568e5b6d73c4277a452f8d16/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=7823598fa4774141568e5b6d73c4277a452f8d16",
        "patch": "@@ -40,7 +40,7 @@ class SendCoinsRecipient\n     explicit SendCoinsRecipient(const QString &addr, const QString &label, const CAmount& amount, const QString &message):\n         address(addr), label(label), amount(amount), message(message), nVersion(SendCoinsRecipient::CURRENT_VERSION) {}\n \n-    // If from an insecure payment request, this is used for storing\n+    // If from an unauthenticated payment request, this is used for storing\n     // the addresses, e.g. address-A<br />address-B<br />address-C.\n     // Info: As we don't need to process addresses in here when using\n     // payment requests, we can abuse it for displaying an address list.\n@@ -111,7 +111,8 @@ class WalletModel : public QObject\n         DuplicateAddress,\n         TransactionCreationFailed, // Error returned when wallet is still locked\n         TransactionCommitFailed,\n-        InsaneFee\n+        InsaneFee,\n+        PaymentRequestExpired\n     };\n \n     enum EncryptionStatus"
      }
    ]
  },
  {
    "sha": "5f04d1d0d758faa29d3ab165f6fffc93381cd569",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjA0ZDFkMGQ3NThmYWEyOWQzYWIxNjVmNmZmZmM5MzM4MWNkNTY5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T12:15:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-29T12:27:23Z"
      },
      "message": "Merge pull request #5477\n\n6bbca99 LSSharedFileListItemResolve() was deprecated in Mac OS X 10.10, use LSSharedFileListItemCopyResolvedURL() instead (Cory Fields)",
      "tree": {
        "sha": "9a395e4f1a91fda201f4c1749b9ece33fc9b5469",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a395e4f1a91fda201f4c1749b9ece33fc9b5469"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f04d1d0d758faa29d3ab165f6fffc93381cd569",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUyicrAAoJEHSBCwEjRsmm1NYH/11FasvoLY/viXFTzSiP78bg\nZYAESVEXPBBznJQn2EGqMKnQbP91oUT/9l8wl8FiuW8o6z53Nb5ZF0gUBVHSpXRx\nov8HEj9znOokPR8U+lxRUD3zHjBK+2QNPx2F9Dum5folNE5VQBA/OI3VMtZZOpBf\nIISD571e7Oz7MUeyUlWlkYxLMI8hDo6Nx8ITc4ckHGuieTNvIZV8Hud814g/ZVzr\n7ljbITFubDRZv6QTUFeqDO0CUDQWS0tiS7nBXZvYc5B0YCx3ojFaPTcoNK5Ixrjh\n566xrc23ZsP2RTolLOvPxjcI/PXDvqb/eRvw6dH5VlwiOjesQqysoaf51etkpxI=\n=WILO\n-----END PGP SIGNATURE-----",
        "payload": "tree 9a395e4f1a91fda201f4c1749b9ece33fc9b5469\nparent 7823598fa4774141568e5b6d73c4277a452f8d16\nparent 6bbca99baa50eee50d1559335a66f1b2189d456d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422533715 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422534443 +0100\n\nMerge pull request #5477\n\n6bbca99 LSSharedFileListItemResolve() was deprecated in Mac OS X 10.10, use LSSharedFileListItemCopyResolvedURL() instead (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f04d1d0d758faa29d3ab165f6fffc93381cd569",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f04d1d0d758faa29d3ab165f6fffc93381cd569",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f04d1d0d758faa29d3ab165f6fffc93381cd569/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7823598fa4774141568e5b6d73c4277a452f8d16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7823598fa4774141568e5b6d73c4277a452f8d16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7823598fa4774141568e5b6d73c4277a452f8d16"
      },
      {
        "sha": "6bbca99baa50eee50d1559335a66f1b2189d456d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bbca99baa50eee50d1559335a66f1b2189d456d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bbca99baa50eee50d1559335a66f1b2189d456d"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2a13f43ea4263a3abb9163268deebe7462a4aafd",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f04d1d0d758faa29d3ab165f6fffc93381cd569/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f04d1d0d758faa29d3ab165f6fffc93381cd569/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=5f04d1d0d758faa29d3ab165f6fffc93381cd569",
        "patch": "@@ -715,7 +715,18 @@ LSSharedFileListItemRef findStartupItemInList(LSSharedFileListRef list, CFURLRef\n         LSSharedFileListItemRef item = (LSSharedFileListItemRef)CFArrayGetValueAtIndex(listSnapshot, i);\n         UInt32 resolutionFlags = kLSSharedFileListNoUserInteraction | kLSSharedFileListDoNotMountVolumes;\n         CFURLRef currentItemURL = NULL;\n-        LSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, NULL);\n+\n+#if defined(MAC_OS_X_VERSION_MAX_ALLOWED) && MAC_OS_X_VERSION_MAX_ALLOWED >= 10100\n+\tif(&LSSharedFileListItemCopyResolvedURL)\n+\t    currentItemURL = LSSharedFileListItemCopyResolvedURL(item, resolutionFlags, NULL);\n+#if defined(MAC_OS_X_VERSION_MIN_REQUIRED) && MAC_OS_X_VERSION_MIN_REQUIRED < 10100\n+\telse\n+\t    LSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, NULL);\n+#endif\n+#else\n+\tLSSharedFileListItemResolve(item, resolutionFlags, &currentItemURL, NULL);\n+#endif\n+\n         if(currentItemURL && CFEqual(currentItemURL, findUrl)) {\n             // found\n             CFRelease(currentItemURL);"
      }
    ]
  },
  {
    "sha": "72ac792b4a544048261f35af859c7bb6d8bdb7a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmFjNzkyYjRhNTQ0MDQ4MjYxZjM1YWY4NTljN2JiNmQ4YmRiN2Ew",
    "commit": {
      "author": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2014-11-20T23:24:50Z"
      },
      "committer": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-01-29T21:43:30Z"
      },
      "message": "Format build flags in src/Makefile.am.",
      "tree": {
        "sha": "f969fd9c2f67480cf637c5cdf6e762e24cabe582",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f969fd9c2f67480cf637c5cdf6e762e24cabe582"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72ac792b4a544048261f35af859c7bb6d8bdb7a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ac792b4a544048261f35af859c7bb6d8bdb7a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72ac792b4a544048261f35af859c7bb6d8bdb7a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ac792b4a544048261f35af859c7bb6d8bdb7a0/comments",
    "author": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f04d1d0d758faa29d3ab165f6fffc93381cd569",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f04d1d0d758faa29d3ab165f6fffc93381cd569",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f04d1d0d758faa29d3ab165f6fffc93381cd569"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 27,
      "deletions": 25
    },
    "files": [
      {
        "sha": "009c3c5196fc08664cc01d9c164bd5841252c7df",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 27,
        "deletions": 25,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72ac792b4a544048261f35af859c7bb6d8bdb7a0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72ac792b4a544048261f35af859c7bb6d8bdb7a0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=72ac792b4a544048261f35af859c7bb6d8bdb7a0",
        "patch": "@@ -291,6 +291,14 @@ nodist_libbitcoin_util_a_SOURCES = $(srcdir)/obj/build.h\n #\n \n # bitcoind binary #\n+bitcoind_SOURCES = bitcoind.cpp\n+bitcoind_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n+if TARGET_WINDOWS\n+bitcoind_SOURCES += bitcoind-res.rc\n+endif\n+\n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n@@ -304,51 +312,43 @@ bitcoind_LDADD = \\\n if ENABLE_WALLET\n bitcoind_LDADD += libbitcoin_wallet.a\n endif\n-bitcoind_SOURCES = bitcoind.cpp\n+\n+bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n #\n \n+# bitcoin-cli binary #\n+bitcoin_cli_SOURCES = bitcoin-cli.cpp\n+bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n if TARGET_WINDOWS\n-bitcoind_SOURCES += bitcoind-res.rc\n+bitcoin_cli_SOURCES += bitcoin-cli-res.rc\n endif\n \n-bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n-bitcoind_CPPFLAGS = $(BITCOIN_INCLUDES)\n-bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-\n-# bitcoin-cli binary #\n bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_CLI) \\\n   $(LIBBITCOIN_UTIL) \\\n-  $(BOOST_LIBS) \\\n-  $(SSL_LIBS) \\\n-  $(CRYPTO_LIBS)\n-\n-bitcoin_cli_SOURCES = \\\n-  bitcoin-cli.cpp\n+  $(LIBSECP256K1)\n \n-bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS)\n #\n \n # bitcoin-tx binary #\n+bitcoin_tx_SOURCES = bitcoin-tx.cpp\n+bitcoin_tx_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n bitcoin_tx_LDADD = \\\n   $(LIBBITCOIN_UNIVALUE) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\\n-  $(LIBSECP256K1) \\\n-  $(BOOST_LIBS) \\\n-  $(CRYPTO_LIBS)\n+  $(LIBSECP256K1)\n \n-bitcoin_tx_SOURCES = bitcoin-tx.cpp\n-bitcoin_tx_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n #\n-bitcoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-\n-if TARGET_WINDOWS\n-bitcoin_cli_SOURCES += bitcoin-cli-res.rc\n-endif\n-bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n+# bitcoinconsensus library #\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n libbitcoinconsensus_la_SOURCES = \\\n@@ -376,10 +376,12 @@ endif\n libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)\n libbitcoinconsensus_la_LIBADD = $(CRYPTO_LIBS)\n libbitcoinconsensus_la_CPPFLAGS = $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n+\n if USE_LIBSECP256K1\n libbitcoinconsensus_la_LIBADD += secp256k1/libsecp256k1.la\n endif\n endif\n+#\n \n CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a *.gcda *.gcno\n "
      }
    ]
  },
  {
    "sha": "d781d4725cf49dff8408e61e09dbc8b8db621e75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzgxZDQ3MjVjZjQ5ZGZmODQwOGU2MWUwOWRiYzhiOGRiNjIxZTc1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-30T10:40:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-30T10:41:04Z"
      },
      "message": "Merge pull request #5234\n\n72ac792 Format build flags in src/Makefile.am. (randy-waterhouse)",
      "tree": {
        "sha": "f969fd9c2f67480cf637c5cdf6e762e24cabe582",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f969fd9c2f67480cf637c5cdf6e762e24cabe582"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d781d4725cf49dff8408e61e09dbc8b8db621e75",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUy1/AAAoJEHSBCwEjRsmmC38IAI59qX1ieyZnCmgcOSPnn+w5\nBqS9cB2yLWUi932sxTTSKAHv+I8WNQgv7RejduGT86KinuKUfaVBjJ6UMpyZJ/Rt\nnpO1KRMfuc0+krk8qQQ4cn0/SEfZJdcL186lr8FQ626vOPEBM5vDh6EmSzjGgTBK\nCVj4zEkp7asP8MTxMB1BZqAci2rDRz3kXORgJbDmkb77WurCReVVMYak4zxv1VV6\n+oZPDtBTCPRC0pFS4CVrfVinZB5WRj14OgXUCZ8ogUDV7djk0x2i+qlbkuR1M4Gr\n1jplZKkk3eC7A1x6A0ApfLiUBJXUR/siRXQkrEzqBrHEgroY69zl15+PlUy6KVA=\n=TVe/\n-----END PGP SIGNATURE-----",
        "payload": "tree f969fd9c2f67480cf637c5cdf6e762e24cabe582\nparent 5f04d1d0d758faa29d3ab165f6fffc93381cd569\nparent 72ac792b4a544048261f35af859c7bb6d8bdb7a0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422614446 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422614464 +0100\n\nMerge pull request #5234\n\n72ac792 Format build flags in src/Makefile.am. (randy-waterhouse)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d781d4725cf49dff8408e61e09dbc8b8db621e75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d781d4725cf49dff8408e61e09dbc8b8db621e75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d781d4725cf49dff8408e61e09dbc8b8db621e75/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f04d1d0d758faa29d3ab165f6fffc93381cd569",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f04d1d0d758faa29d3ab165f6fffc93381cd569",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f04d1d0d758faa29d3ab165f6fffc93381cd569"
      },
      {
        "sha": "72ac792b4a544048261f35af859c7bb6d8bdb7a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ac792b4a544048261f35af859c7bb6d8bdb7a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72ac792b4a544048261f35af859c7bb6d8bdb7a0"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 27,
      "deletions": 25
    },
    "files": [
      {
        "sha": "009c3c5196fc08664cc01d9c164bd5841252c7df",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 27,
        "deletions": 25,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d781d4725cf49dff8408e61e09dbc8b8db621e75/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d781d4725cf49dff8408e61e09dbc8b8db621e75/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d781d4725cf49dff8408e61e09dbc8b8db621e75",
        "patch": "@@ -291,6 +291,14 @@ nodist_libbitcoin_util_a_SOURCES = $(srcdir)/obj/build.h\n #\n \n # bitcoind binary #\n+bitcoind_SOURCES = bitcoind.cpp\n+bitcoind_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n+if TARGET_WINDOWS\n+bitcoind_SOURCES += bitcoind-res.rc\n+endif\n+\n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n@@ -304,51 +312,43 @@ bitcoind_LDADD = \\\n if ENABLE_WALLET\n bitcoind_LDADD += libbitcoin_wallet.a\n endif\n-bitcoind_SOURCES = bitcoind.cpp\n+\n+bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n #\n \n+# bitcoin-cli binary #\n+bitcoin_cli_SOURCES = bitcoin-cli.cpp\n+bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n if TARGET_WINDOWS\n-bitcoind_SOURCES += bitcoind-res.rc\n+bitcoin_cli_SOURCES += bitcoin-cli-res.rc\n endif\n \n-bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n-bitcoind_CPPFLAGS = $(BITCOIN_INCLUDES)\n-bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-\n-# bitcoin-cli binary #\n bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_CLI) \\\n   $(LIBBITCOIN_UTIL) \\\n-  $(BOOST_LIBS) \\\n-  $(SSL_LIBS) \\\n-  $(CRYPTO_LIBS)\n-\n-bitcoin_cli_SOURCES = \\\n-  bitcoin-cli.cpp\n+  $(LIBSECP256K1)\n \n-bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS)\n #\n \n # bitcoin-tx binary #\n+bitcoin_tx_SOURCES = bitcoin-tx.cpp\n+bitcoin_tx_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n bitcoin_tx_LDADD = \\\n   $(LIBBITCOIN_UNIVALUE) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\\n-  $(LIBSECP256K1) \\\n-  $(BOOST_LIBS) \\\n-  $(CRYPTO_LIBS)\n+  $(LIBSECP256K1)\n \n-bitcoin_tx_SOURCES = bitcoin-tx.cpp\n-bitcoin_tx_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n #\n-bitcoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-\n-if TARGET_WINDOWS\n-bitcoin_cli_SOURCES += bitcoin-cli-res.rc\n-endif\n-bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n+# bitcoinconsensus library #\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n libbitcoinconsensus_la_SOURCES = \\\n@@ -376,10 +376,12 @@ endif\n libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)\n libbitcoinconsensus_la_LIBADD = $(CRYPTO_LIBS)\n libbitcoinconsensus_la_CPPFLAGS = $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n+\n if USE_LIBSECP256K1\n libbitcoinconsensus_la_LIBADD += secp256k1/libsecp256k1.la\n endif\n endif\n+#\n \n CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a *.gcda *.gcno\n "
      }
    ]
  },
  {
    "sha": "6af674ecdc99db2eb741b8dc79e44bd0202e3855",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWY2NzRlY2RjOTlkYjJlYjc0MWI4ZGM3OWU0NGJkMDIwMmUzODU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-31T13:30:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-31T13:31:12Z"
      },
      "message": "Merge pull request #5707\n\n14d023f change hardcoded character constants to a set of descriptive named constants for database keys (Earlz)",
      "tree": {
        "sha": "4935f40e945074decc0906bbdc095b01305fda3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4935f40e945074decc0906bbdc095b01305fda3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUzNkgAAoJEHSBCwEjRsmmmnIH/026M0ok672Z319M6+pIK0WE\n/BdpDKdNz05wLb+vtQAxRb9MAnyrev10KGruH/k1zDHi2bJWWcIoZHpQ5ke0G0z3\nuzo4WcVHLd9MoeViUSX+mJDm+zSeJE16oFzm3hcWKKrieS6hwqx4Mz8WsoceLgrN\n1w2p6TtiFqTXuG4rPnwh4U/9dpsnQFu1KLxjaUAqv7b2MF+GqphgTfu8OPrBOEs5\nDdQU+ZIZWdei9aphT+i5Hbd058AoxqVrFtvsaNZ17Yz6pItAyW1L3LhmMVA8RCGz\noUHcc27AX9vW1iA8wiLCYzusF7xHiPa8VcRALgHi78ekXbE3Qc3oMfgyPcENuVA=\n=R8hy\n-----END PGP SIGNATURE-----",
        "payload": "tree 4935f40e945074decc0906bbdc095b01305fda3b\nparent d781d4725cf49dff8408e61e09dbc8b8db621e75\nparent 14d023f1aeb4f25ac0f42745b3a29c3dcd63c834\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422711017 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422711072 +0100\n\nMerge pull request #5707\n\n14d023f change hardcoded character constants to a set of descriptive named constants for database keys (Earlz)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d781d4725cf49dff8408e61e09dbc8b8db621e75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d781d4725cf49dff8408e61e09dbc8b8db621e75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d781d4725cf49dff8408e61e09dbc8b8db621e75"
      },
      {
        "sha": "14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14d023f1aeb4f25ac0f42745b3a29c3dcd63c834"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 32,
      "deletions": 21
    },
    "files": [
      {
        "sha": "f9326e5e2ea12864bb708242dc19a3087adf080c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 21,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6af674ecdc99db2eb741b8dc79e44bd0202e3855/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6af674ecdc99db2eb741b8dc79e44bd0202e3855/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "patch": "@@ -14,31 +14,42 @@\n \n using namespace std;\n \n+static const char DB_COINS = 'c';\n+static const char DB_BLOCK_FILES = 'f';\n+static const char DB_TXINDEX = 't';\n+static const char DB_BLOCK_INDEX = 'b';\n+\n+static const char DB_BEST_BLOCK = 'B';\n+static const char DB_FLAG = 'F';\n+static const char DB_REINDEX_FLAG = 'R';\n+static const char DB_LAST_BLOCK = 'l';\n+\n+\n void static BatchWriteCoins(CLevelDBBatch &batch, const uint256 &hash, const CCoins &coins) {\n     if (coins.IsPruned())\n-        batch.Erase(make_pair('c', hash));\n+        batch.Erase(make_pair(DB_COINS, hash));\n     else\n-        batch.Write(make_pair('c', hash), coins);\n+        batch.Write(make_pair(DB_COINS, hash), coins);\n }\n \n void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {\n-    batch.Write('B', hash);\n+    batch.Write(DB_BEST_BLOCK, hash);\n }\n \n CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe) {\n }\n \n bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    return db.Read(make_pair('c', txid), coins);\n+    return db.Read(make_pair(DB_COINS, txid), coins);\n }\n \n bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n-    return db.Exists(make_pair('c', txid));\n+    return db.Exists(make_pair(DB_COINS, txid));\n }\n \n uint256 CCoinsViewDB::GetBestBlock() const {\n     uint256 hashBestChain;\n-    if (!db.Read('B', hashBestChain))\n+    if (!db.Read(DB_BEST_BLOCK, hashBestChain))\n         return uint256();\n     return hashBestChain;\n }\n@@ -67,23 +78,23 @@ CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CLevel\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n-    return Read(make_pair('f', nFile), info);\n+    return Read(make_pair(DB_BLOCK_FILES, nFile), info);\n }\n \n bool CBlockTreeDB::WriteReindexing(bool fReindexing) {\n     if (fReindexing)\n-        return Write('R', '1');\n+        return Write(DB_REINDEX_FLAG, '1');\n     else\n-        return Erase('R');\n+        return Erase(DB_REINDEX_FLAG);\n }\n \n bool CBlockTreeDB::ReadReindexing(bool &fReindexing) {\n-    fReindexing = Exists('R');\n+    fReindexing = Exists(DB_REINDEX_FLAG);\n     return true;\n }\n \n bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n-    return Read('l', nFile);\n+    return Read(DB_LAST_BLOCK, nFile);\n }\n \n bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n@@ -104,7 +115,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n             CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n             char chType;\n             ssKey >> chType;\n-            if (chType == 'c') {\n+            if (chType == DB_COINS) {\n                 leveldb::Slice slValue = pcursor->value();\n                 CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n                 CCoins coins;\n@@ -142,33 +153,33 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n     CLevelDBBatch batch;\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n-        batch.Write(make_pair('f', it->first), *it->second);\n+        batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n-    batch.Write('l', nLastFile);\n+    batch.Write(DB_LAST_BLOCK, nLastFile);\n     for (std::vector<const CBlockIndex*>::const_iterator it=blockinfo.begin(); it != blockinfo.end(); it++) {\n-        batch.Write(make_pair('b', (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n+        batch.Write(make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n     }\n     return WriteBatch(batch, true);\n }\n \n bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n-    return Read(make_pair('t', txid), pos);\n+    return Read(make_pair(DB_TXINDEX, txid), pos);\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n     CLevelDBBatch batch;\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n-        batch.Write(make_pair('t', it->first), it->second);\n+        batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);\n }\n \n bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n-    return Write(std::make_pair('F', name), fValue ? '1' : '0');\n+    return Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n }\n \n bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n     char ch;\n-    if (!Read(std::make_pair('F', name), ch))\n+    if (!Read(std::make_pair(DB_FLAG, name), ch))\n         return false;\n     fValue = ch == '1';\n     return true;\n@@ -179,7 +190,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n     boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n \n     CDataStream ssKeySet(SER_DISK, CLIENT_VERSION);\n-    ssKeySet << make_pair('b', uint256());\n+    ssKeySet << make_pair(DB_BLOCK_INDEX, uint256());\n     pcursor->Seek(ssKeySet.str());\n \n     // Load mapBlockIndex\n@@ -190,7 +201,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n             CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n             char chType;\n             ssKey >> chType;\n-            if (chType == 'b') {\n+            if (chType == DB_BLOCK_INDEX) {\n                 leveldb::Slice slValue = pcursor->value();\n                 CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n                 CDiskBlockIndex diskindex;"
      }
    ]
  },
  {
    "sha": "fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGY4MGVhN2IxOWRkZTdkZGVjM2JhZmZlYjE0MDBmZTFjYTFjMzdh",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-31T16:39:22Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-31T16:39:22Z"
      },
      "message": "[Qt] allow unit changes for read-only BitcoinAmountField\n\n- fixes #5725",
      "tree": {
        "sha": "76dbe5e07f6c73f3827e52c670c611046706680d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76dbe5e07f6c73f3827e52c670c611046706680d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af674ecdc99db2eb741b8dc79e44bd0202e3855"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d31a1e018b2898a5bea2338abd3ad84002040cdb",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a",
        "patch": "@@ -278,7 +278,6 @@ void BitcoinAmountField::setValue(const CAmount& value)\n void BitcoinAmountField::setReadOnly(bool fReadOnly)\n {\n     amount->setReadOnly(fReadOnly);\n-    unit->setEnabled(!fReadOnly);\n }\n \n void BitcoinAmountField::unitChanged(int idx)"
      }
    ]
  },
  {
    "sha": "86731603d48de65960a7f2cd4da60e7ae1760813",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjczMTYwM2Q0OGRlNjU5NjBhN2YyY2Q0ZGE2MGU3YWUxNzYwODEz",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-12-13T03:15:25Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:36:44Z"
      },
      "message": "Remove bootstrap.md\n\nSee #5455",
      "tree": {
        "sha": "031702544fcd251375f990001105e6d8f0517805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/031702544fcd251375f990001105e6d8f0517805"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86731603d48de65960a7f2cd4da60e7ae1760813",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86731603d48de65960a7f2cd4da60e7ae1760813",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86731603d48de65960a7f2cd4da60e7ae1760813",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86731603d48de65960a7f2cd4da60e7ae1760813/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af674ecdc99db2eb741b8dc79e44bd0202e3855"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 1,
      "deletions": 57
    },
    "files": [
      {
        "sha": "0ade8f99238abb37a616b51a4fcfc2eb23ffc8d3",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86731603d48de65960a7f2cd4da60e7ae1760813/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86731603d48de65960a7f2cd4da60e7ae1760813/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=86731603d48de65960a7f2cd4da60e7ae1760813",
        "patch": "@@ -3,7 +3,7 @@ Bitcoin Core 0.10.99\n \n Setup\n ---------------------\n-[Bitcoin Core](http://bitcoin.org/en/download) is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more. Thankfully you only have to do this once. If you would like the process to go faster you can [download the blockchain directly](bootstrap.md).\n+[Bitcoin Core](http://bitcoin.org/en/download) is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n \n Running\n ---------------------"
      },
      {
        "sha": "b84fd24b11d9270a5c3b23dfdb2b2e77ede2ecbd",
        "filename": "doc/bootstrap.md",
        "status": "removed",
        "additions": 0,
        "deletions": 56,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6af674ecdc99db2eb741b8dc79e44bd0202e3855/doc/bootstrap.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6af674ecdc99db2eb741b8dc79e44bd0202e3855/doc/bootstrap.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bootstrap.md?ref=6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "patch": "@@ -1,56 +0,0 @@\n-### Bootstrap the Blockchain Synchronization\n-\n-Normally the Bitcoin client will download the transaction and network information, called the blockchain, from the network by syncing with the other clients. This process can take quite some time as the [Bitcoin blockchain](https://blockchain.info/charts/blocks-size) is growing bigger and bigger for each day. Luckily there is a safe and fast way to speed up this process. We'll show you how to bootstrap your blockchain to bring your client up to speed in just a few simple steps.\n-\n-### Requirements\n-\n-- A fresh install of the Bitcoin client software.\n-\n-### Download the blockchain via BitTorrent\n-\n-Jeff Garzik, Bitcoin Core developer, offers an [torrent file](https://bitcointalk.org/index.php?topic=145386.0) for bootstrapping purposes that is updated often. BitTorrent is a protocol that speeds up the downloading of large files by using the other clients in the network. Examples of free and safe open source clients are [Deluge](http://deluge-torrent.org/) or [qBittorrent](http://www.qbittorrent.org/). A guide to installing and configuring the torrent clients can be found [here](http://dev.deluge-torrent.org/wiki/UserGuide) for Deluge and [here](http://qbforums.shiki.hu/) for qBittorrent. A further in-depth tutorial on BitTorrent can be found [here](http://www.howtogeek.com/howto/31846/bittorrent-for-beginners-how-get-started-downloading-torrents/).\n-\n-With the client installed we'll proceed to download the blockchain torrent file. Use the following magnet link:\n-\n-\tmagnet:?xt=urn:btih:2d4e6c1f96c5d5fb260dff92aea4e600227f1aea&dn=bootstrap.dat&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.ccc.de:80&tr=udp://tracker.istole.it:80\n-\t\n- or go to [Jeff Garzik's topic](https://bitcointalk.org/index.php?topic=145386.0) for a signed magnet link. Alternatively you can use the [.torrent file](http://sourceforge.net/projects/bitcoin/files/Bitcoin/blockchain/bootstrap.dat.torrent/download) found on SourceForge.\n-     \n-![Fig1](img/bootstrap1.png)\n-\n-The download page should look like this, with a countdown to the download. If it does not work click the direct download link.\n-\n-The torrent client installed will recognize the download of the torrent file. Save the bootstrap.dat file to the folder you use for downloads. The image below shows the torrent download in qBittorrent, with current speed and ETA highlighted.\n-\n-![Fig2](img/bootstrap2.png)\n-\n-### Importing the blockchain\n-Exit the Bitcoin client software if you have it running. Be sure not to have an actively used wallet in use. We are going to copy the download of the blockchain to the Bitcoin client data directory. You should run the client software at least once so it can generate the data directory. Copy the downloaded bootstrap.dat file into the Bitcoin data folder.\n-\n-**For Windows users:**\n-Open explorer, and type into the address bar:\n-\n-\t%APPDATA%\\Bitcoin\n-    \n-This will open up the data folder. It should look like the image below. Copy over the bootstrap.dat from your download folder to this directory.\n-![Fig4](img/bootstrap4.png)\n-\n-**For OSX users:**\n-Open Finder by pressing Press [shift] + [cmd] + [g] and enter:\n-\n-\t~/Library/Application Support/Bitcoin/\n-    \n-**For Linux users:**\n-The directory is hidden in your User folder. Go to:\n-\n-\t~/.bitcoin/\n-    \n-### Importing the blockchain\n-Now start the Bitcoin client software. It should show \"Importing blocks from disk\" like the image below. \n-![Fig5](img/bootstrap5.png)\n-\n-Wait until the import finishes. The client will download the last days not covered by the import. Congratulations you have successfully imported the blockchain!\n-\n-### Is this safe?\n-\n-Yes, the above method is safe. The download contains only raw blockchain data and the client verifies this on import. Do not download the blockchain from unofficial sources, especially if they provide `*.rev` and `*.sst` files. These files are not verified and can contain malicious edits."
      }
    ]
  },
  {
    "sha": "d6bed1514c2e72ea2006942c23c31e3f518d4a77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmJlZDE1MTRjMmU3MmVhMjAwNjk0MmMyM2MzMWUzZjUxOGQ0YTc3",
    "commit": {
      "author": {
        "name": "Manuel Araoz",
        "email": "manuelaraoz@gmail.com",
        "date": "2014-12-16T19:26:07Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:36:44Z"
      },
      "message": "remove sig_canonical.json and sig_noncanonical.json",
      "tree": {
        "sha": "ab200837bc2e5b46908e62462d5fcf126392cd91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab200837bc2e5b46908e62462d5fcf126392cd91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6bed1514c2e72ea2006942c23c31e3f518d4a77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6bed1514c2e72ea2006942c23c31e3f518d4a77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6bed1514c2e72ea2006942c23c31e3f518d4a77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6bed1514c2e72ea2006942c23c31e3f518d4a77/comments",
    "author": {
      "login": "maraoz",
      "id": 287189,
      "node_id": "MDQ6VXNlcjI4NzE4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/287189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maraoz",
      "html_url": "https://github.com/maraoz",
      "followers_url": "https://api.github.com/users/maraoz/followers",
      "following_url": "https://api.github.com/users/maraoz/following{/other_user}",
      "gists_url": "https://api.github.com/users/maraoz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maraoz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maraoz/subscriptions",
      "organizations_url": "https://api.github.com/users/maraoz/orgs",
      "repos_url": "https://api.github.com/users/maraoz/repos",
      "events_url": "https://api.github.com/users/maraoz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maraoz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86731603d48de65960a7f2cd4da60e7ae1760813",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86731603d48de65960a7f2cd4da60e7ae1760813",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86731603d48de65960a7f2cd4da60e7ae1760813"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 0,
      "deletions": 31
    },
    "files": [
      {
        "sha": "90494439fa552dd167c709e669f0c858f5deb2c4",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6bed1514c2e72ea2006942c23c31e3f518d4a77/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6bed1514c2e72ea2006942c23c31e3f518d4a77/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=d6bed1514c2e72ea2006942c23c31e3f518d4a77",
        "patch": "@@ -20,8 +20,6 @@ EXTRA_DIST += \\\n JSON_TEST_FILES = \\\n   test/data/script_valid.json \\\n   test/data/base58_keys_valid.json \\\n-  test/data/sig_canonical.json \\\n-  test/data/sig_noncanonical.json \\\n   test/data/base58_encode_decode.json \\\n   test/data/base58_keys_invalid.json \\\n   test/data/script_invalid.json \\"
      },
      {
        "sha": "e43a08629a1ae2b51feba692b244b8a301649208",
        "filename": "src/test/data/sig_canonical.json",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86731603d48de65960a7f2cd4da60e7ae1760813/src/test/data/sig_canonical.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86731603d48de65960a7f2cd4da60e7ae1760813/src/test/data/sig_canonical.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/sig_canonical.json?ref=86731603d48de65960a7f2cd4da60e7ae1760813",
        "patch": "@@ -1,7 +0,0 @@\n-[\n-    \"300602010002010001\",\n-    \"3008020200ff020200ff01\",\n-    \"304402203932c892e2e550f3af8ee4ce9c215a87f9bb831dcac87b2838e2c2eaa891df0c022030b61dd36543125d56b9f9f3a1f9353189e5af33cdda8d77a5209aec03978fa001\",\n-    \"30450220076045be6f9eca28ff1ec606b833d0b87e70b2a630f5e3a496b110967a40f90a0221008fffd599910eefe00bc803c688c2eca1d2ba7f6b180620eaa03488e6585db6ba01\",\n-    \"3046022100876045be6f9eca28ff1ec606b833d0b87e70b2a630f5e3a496b110967a40f90a0221008fffd599910eefe00bc803c688c2eca1d2ba7f6b180620eaa03488e6585db6ba01\"\n-]"
      },
      {
        "sha": "d9a6c1cdd872ec1d64ac429577b6b210f67b17b8",
        "filename": "src/test/data/sig_noncanonical.json",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86731603d48de65960a7f2cd4da60e7ae1760813/src/test/data/sig_noncanonical.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86731603d48de65960a7f2cd4da60e7ae1760813/src/test/data/sig_noncanonical.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/sig_noncanonical.json?ref=86731603d48de65960a7f2cd4da60e7ae1760813",
        "patch": "@@ -1,22 +0,0 @@\n-[\n-    \"non-hex strings are ignored\",\n-\n-    \"too short:\",    \"30050201FF020001\",\n-    \"too long:\",     \"30470221005990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba6105022200002d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"hashtype:\",     \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed11\",\n-    \"type:\",         \"314402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"total length:\", \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S len oob:\",    \"301F01205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb101\",\n-    \"R+S:\",          \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed0001\",\n-\n-    \"R type:\",       \"304401205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R len = 0:\",    \"3024020002202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R<0:\",          \"304402208990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R padded:\",     \"30450221005990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-\n-\n-    \"S type:\",       \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610501202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S len = 0:\",    \"302402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba6105020001\",\n-    \"S<0:\",          \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba61050220fd5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S padded:\",     \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba61050221002d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\"\n-]"
      }
    ]
  },
  {
    "sha": "bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmMyOWRjZGM1YzJhNzVhODJkNmY1MDM0YzU0N2E4ZjRhYzk0Mzc5",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-12-26T10:03:44Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:36:45Z"
      },
      "message": "Improve gitian build guide\n\nPoint to the Debian 7.7 installer\nFix wording now that we only use a single image\nRemove bitcoin checkout steps, they are covered in release-process",
      "tree": {
        "sha": "005ee4229998bdc9d21a9b001ab63e17ab1d629a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/005ee4229998bdc9d21a9b001ab63e17ab1d629a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6bed1514c2e72ea2006942c23c31e3f518d4a77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6bed1514c2e72ea2006942c23c31e3f518d4a77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6bed1514c2e72ea2006942c23c31e3f518d4a77"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 15,
      "deletions": 18
    },
    "files": [
      {
        "sha": "efa5ef17dc155f7795033cca98644a6dcc93f4fb",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 15,
        "deletions": 18,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
        "patch": "@@ -24,7 +24,7 @@ Table of Contents\n - [Connecting to the VM](#connecting-to-the-vm)\n - [Setting up Debian for gitian building](#setting-up-debian-for-gitian-building)\n - [Installing gitian](#installing-gitian)\n-- [Setting up gitian images](#setting-up-gitian-images)\n+- [Setting up the gitian image](#setting-up-the-gitian-image)\n - [Getting and building the inputs](#getting-and-building-the-inputs)\n - [Building Bitcoin](#building-bitcoin)\n - [Building an alternative repository](#building-an-alternative-repository)\n@@ -74,11 +74,11 @@ In the VirtualBox GUI click \"Create\" and choose the following parameters in the\n - Disk size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n - Push the `Create` button\n \n-Get the [Debian 7.4 net installer](http://ftp.at.debian.org/debian-jigdo/current/amd64/iso-cd/debian-7.4.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n+Get the [Debian 7.7 net installer](http://cdimage.debian.org/debian-cd/7.7.0/amd64/iso-cd/debian-7.7.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n This DVD image can be validated using a SHA256 hashing tool, for example on\n Unixy OSes by entering the following in a terminal:\n \n-    echo \"b712a141bc60269db217d3b3e456179bd6b181645f90e4aac9c42ed63de492e9  debian-7.4.0-amd64-netinst.iso\" | sha256sum -c\n+    echo \"d440e85b4121f94608748139f25dbce1ad36771348b002fe07d4d44b9d9e623f  debian-7.7.0-amd64-netinst.iso\" | sha256sum -c\n     # (must return OK)\n \n After creating the VM, we need to configure it. \n@@ -109,7 +109,7 @@ Then start the VM. On the first launch you will be asked for a CD or DVD image.\n Installing Debian\n ------------------\n \n-In this section it will be explained how to install Debian on the newly created VM.\n+This section will explain how to install Debian on the newly created VM.\n \n - Choose the non-graphical installer.  We do not need the graphical environment, it will only increase installation time and disk usage.\n \n@@ -277,24 +277,21 @@ cd ..\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n-Clone the git repositories for bitcoin and gitian and then checkout the bitcoin version that you want to build.\n+Clone the git repositories for bitcoin and gitian.\n \n ```bash\n git clone https://github.com/devrandom/gitian-builder.git\n git clone https://github.com/bitcoin/bitcoin\n-cd bitcoin\n-git checkout v${VERSION}\n-cd ..\n ```\n \n-Setting up gitian images\n+Setting up the gitian image\n -------------------------\n \n-Gitian needs virtual images of the operating system to build in.\n-Currently this is Ubuntu Precise for x86_64.\n-These images will be copied and used every time that a build is started to\n+Gitian needs a virtual image of the operating system to build in.\n+Currently this is Ubuntu Precise x86_64.\n+This image will be copied and used every time that a build is started to\n make sure that the build is deterministic.\n-Creating the images will take a while, but only has to be done once.\n+Creating the image will take a while, but only has to be done once.\n \n Execute the following as user `debian`:\n \n@@ -303,7 +300,7 @@ cd gitian-builder\n bin/make-base-vm --lxc --arch amd64 --suite precise\n ```\n \n-There will be a lot of warnings printed during build of the images. These can be ignored.\n+There will be a lot of warnings printed during build of the image. These can be ignored.\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n@@ -322,7 +319,7 @@ To build Bitcoin (for Linux, OSX and Windows) just follow the steps under 'perfo\n gitian builds' in [doc/release-process.md](release-process.md) in the bitcoin repository.\n \n This may take a long time as it also builds the dependencies needed for each descriptor.\n-These dependencies will be cached after a successful build to avoid rebuilding them when possible.\n+These dependencies will be cached after a successful build to avoid rebuilding them where possible.\n \n At any time you can check the package installation and build progress with\n \n@@ -382,9 +379,9 @@ When you execute `gsign` you will get an error from GPG, which can be ignored. C\n in `gitian.sigs` to your signing machine and do\n \n ```bash\n-    gpg --detach-sign ${VERSION}-linux/${SIGNER}/bitcoin-build.assert\n-    gpg --detach-sign ${VERSION}-win/${SIGNER}/bitcoin-build.assert\n-    gpg --detach-sign ${VERSION}-osx/${SIGNER}/bitcoin-build.assert\n+    gpg --detach-sign ${VERSION}-linux/${SIGNER}/bitcoin-linux-build.assert\n+    gpg --detach-sign ${VERSION}-win/${SIGNER}/bitcoin-win-build.assert\n+    gpg --detach-sign ${VERSION}-osx-unsigned/${SIGNER}/bitcoin-osx-build.assert\n ```\n \n This will create the `.sig` files that can be committed together with the `.assert` files to assert your"
      }
    ]
  },
  {
    "sha": "91a9fe094b3f0091f40ccdb19581b90e86888ff0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWE5ZmUwOTRiM2YwMDkxZjQwY2NkYjE5NTgxYjkwZTg2ODg4ZmYw",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-01-05T20:44:55Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:37:01Z"
      },
      "message": "Fix typo - sentence starts with capital letter",
      "tree": {
        "sha": "52835914858b2adfeb5bc4eb270546eb487a2f10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52835914858b2adfeb5bc4eb270546eb487a2f10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91a9fe094b3f0091f40ccdb19581b90e86888ff0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91a9fe094b3f0091f40ccdb19581b90e86888ff0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91a9fe094b3f0091f40ccdb19581b90e86888ff0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91a9fe094b3f0091f40ccdb19581b90e86888ff0/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "24a4d7c22cc84e52ac9c2becd1aa2af2616cb3cd",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a9fe094b3f0091f40ccdb19581b90e86888ff0/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a9fe094b3f0091f40ccdb19581b90e86888ff0/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=91a9fe094b3f0091f40ccdb19581b90e86888ff0",
        "patch": "@@ -82,7 +82,7 @@ Value getnewaddress(const Array& params, bool fHelp)\n             \"If 'account' is specified (DEPRECATED), it is added to the address book \\n\"\n             \"so payments received with the address will be credited to 'account'.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. if not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n+            \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"bitcoinaddress\\\"    (string) The new bitcoin address\\n\"\n             \"\\nExamples:\\n\""
      }
    ]
  },
  {
    "sha": "3800135ad382a0a980eb20bad8bacbbf206f8cea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODAwMTM1YWQzODJhMGE5ODBlYjIwYmFkOGJhY2JiZjIwNmY4Y2Vh",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-01-07T17:11:59Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:37:01Z"
      },
      "message": "Fix typo",
      "tree": {
        "sha": "3fbe3a6263b9f99e7d60a35c86ea112fbb8135f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3fbe3a6263b9f99e7d60a35c86ea112fbb8135f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3800135ad382a0a980eb20bad8bacbbf206f8cea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3800135ad382a0a980eb20bad8bacbbf206f8cea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3800135ad382a0a980eb20bad8bacbbf206f8cea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3800135ad382a0a980eb20bad8bacbbf206f8cea/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91a9fe094b3f0091f40ccdb19581b90e86888ff0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91a9fe094b3f0091f40ccdb19581b90e86888ff0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91a9fe094b3f0091f40ccdb19581b90e86888ff0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5f60dff06c86daa574ab846310a26546f6b8ded5",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3800135ad382a0a980eb20bad8bacbbf206f8cea/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3800135ad382a0a980eb20bad8bacbbf206f8cea/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=3800135ad382a0a980eb20bad8bacbbf206f8cea",
        "patch": "@@ -159,7 +159,7 @@ tar -xzvf db-4.8.30.NC.tar.gz\n \n # Build the library and install to our prefix\n cd db-4.8.30.NC/build_unix/\n-#  Note: Do a static build so that it can be embedded into the exectuable, instead of having to find a .so at runtime\n+#  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n make install\n "
      }
    ]
  },
  {
    "sha": "5262fde0ecd19f1febbfcd488f2be41c5dffd047",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjYyZmRlMGVjZDE5ZjFmZWJiZmNkNDg4ZjJiZTQxYzVkZmZkMDQ3",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-01-08T10:44:25Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "Remove whitespaces before double colon in errors and logs",
      "tree": {
        "sha": "413401ca7111906838b0f5f5d0c0604bcce52d19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/413401ca7111906838b0f5f5d0c0604bcce52d19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5262fde0ecd19f1febbfcd488f2be41c5dffd047",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5262fde0ecd19f1febbfcd488f2be41c5dffd047",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5262fde0ecd19f1febbfcd488f2be41c5dffd047",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5262fde0ecd19f1febbfcd488f2be41c5dffd047/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3800135ad382a0a980eb20bad8bacbbf206f8cea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3800135ad382a0a980eb20bad8bacbbf206f8cea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3800135ad382a0a980eb20bad8bacbbf206f8cea"
      }
    ],
    "stats": {
      "total": 434,
      "additions": 217,
      "deletions": 217
    },
    "files": [
      {
        "sha": "323939913b7389b1ec823ec14940c9c6f9d3a5a0",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -149,7 +149,7 @@ bool CAlert::CheckSignature() const\n {\n     CPubKey key(Params().AlertKey());\n     if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n-        return error(\"CAlert::CheckSignature() : verify signature failed\");\n+        return error(\"CAlert::CheckSignature(): verify signature failed\");\n \n     // Now unserialize the data\n     CDataStream sMsg(vchMsg, SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "a7f885135bae643aeeb6c4147b9712dd11b1948c",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -43,7 +43,7 @@ void CDBEnv::EnvShutdown()\n     fDbEnvInit = false;\n     int ret = dbenv.close(0);\n     if (ret != 0)\n-        LogPrintf(\"CDBEnv::EnvShutdown : Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+        LogPrintf(\"CDBEnv::EnvShutdown: Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n         DbEnv(0).remove(path.string().c_str(), 0);\n }\n@@ -75,7 +75,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     boost::filesystem::path pathLogDir = path / \"database\";\n     TryCreateDirectory(pathLogDir);\n     boost::filesystem::path pathErrorFile = path / \"db.log\";\n-    LogPrintf(\"CDBEnv::Open : LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n+    LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n     if (GetBoolArg(\"-privdb\", true))\n@@ -102,7 +102,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n                              nEnvFlags,\n                          S_IRUSR | S_IWUSR);\n     if (ret != 0)\n-        return error(\"CDBEnv::Open : Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+        return error(\"CDBEnv::Open: Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n \n     fDbEnvInit = true;\n     fMockDb = false;\n@@ -112,7 +112,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n void CDBEnv::MakeMock()\n {\n     if (fDbEnvInit)\n-        throw runtime_error(\"CDBEnv::MakeMock : Already initialized\");\n+        throw runtime_error(\"CDBEnv::MakeMock: Already initialized\");\n \n     boost::this_thread::interruption_point();\n \n@@ -135,7 +135,7 @@ void CDBEnv::MakeMock()\n                              DB_PRIVATE,\n                          S_IRUSR | S_IWUSR);\n     if (ret > 0)\n-        throw runtime_error(strprintf(\"CDBEnv::MakeMock : Error %d opening database environment.\", ret));\n+        throw runtime_error(strprintf(\"CDBEnv::MakeMock: Error %d opening database environment.\", ret));\n \n     fDbEnvInit = true;\n     fMockDb = true;\n@@ -172,14 +172,14 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::\n     Db db(&dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, &strDump, flags);\n     if (result == DB_VERIFY_BAD) {\n-        LogPrintf(\"CDBEnv::Salvage : Database salvage found errors, all data may not be recoverable.\\n\");\n+        LogPrintf(\"CDBEnv::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n         if (!fAggressive) {\n-            LogPrintf(\"CDBEnv::Salvage : Rerun with aggressive mode to ignore errors and continue.\\n\");\n+            LogPrintf(\"CDBEnv::Salvage: Rerun with aggressive mode to ignore errors and continue.\\n\");\n             return false;\n         }\n     }\n     if (result != 0 && result != DB_VERIFY_BAD) {\n-        LogPrintf(\"CDBEnv::Salvage : Database salvage failed with result %d.\\n\", result);\n+        LogPrintf(\"CDBEnv::Salvage: Database salvage failed with result %d.\\n\", result);\n         return false;\n     }\n \n@@ -233,7 +233,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n     {\n         LOCK(bitdb.cs_db);\n         if (!bitdb.Open(GetDataDir()))\n-            throw runtime_error(\"CDB : Failed to open database environment.\");\n+            throw runtime_error(\"CDB: Failed to open database environment.\");\n \n         strFile = strFilename;\n         ++bitdb.mapFileUseCount[strFile];\n@@ -246,7 +246,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n                 DbMpoolFile* mpf = pdb->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n                 if (ret != 0)\n-                    throw runtime_error(strprintf(\"CDB : Failed to configure for no temp file backing for database %s\", strFile));\n+                    throw runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFile));\n             }\n \n             ret = pdb->open(NULL,                               // Txn pointer\n@@ -261,7 +261,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n                 pdb = NULL;\n                 --bitdb.mapFileUseCount[strFile];\n                 strFile = \"\";\n-                throw runtime_error(strprintf(\"CDB : Error %d, can't open database %s\", ret, strFile));\n+                throw runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFile));\n             }\n \n             if (fCreate && !Exists(string(\"version\"))) {\n@@ -342,7 +342,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                 bitdb.mapFileUseCount.erase(strFile);\n \n                 bool fSuccess = true;\n-                LogPrintf(\"CDB::Rewrite : Rewriting %s...\\n\", strFile);\n+                LogPrintf(\"CDB::Rewrite: Rewriting %s...\\n\", strFile);\n                 string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(strFile.c_str(), \"r\");\n@@ -355,7 +355,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                                             DB_CREATE,          // Flags\n                                             0);\n                     if (ret > 0) {\n-                        LogPrintf(\"CDB::Rewrite : Can't create database file %s\\n\", strFileRes);\n+                        LogPrintf(\"CDB::Rewrite: Can't create database file %s\\n\", strFileRes);\n                         fSuccess = false;\n                     }\n \n@@ -404,7 +404,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                         fSuccess = false;\n                 }\n                 if (!fSuccess)\n-                    LogPrintf(\"CDB::Rewrite : Failed to rewrite database file %s\\n\", strFileRes);\n+                    LogPrintf(\"CDB::Rewrite: Failed to rewrite database file %s\\n\", strFileRes);\n                 return fSuccess;\n             }\n         }\n@@ -418,7 +418,7 @@ void CDBEnv::Flush(bool fShutdown)\n {\n     int64_t nStart = GetTimeMillis();\n     // Flush log data to the actual data file on all files that are not in use\n-    LogPrint(\"db\", \"CDBEnv::Flush : Flush(%s)%s\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\");\n+    LogPrint(\"db\", \"CDBEnv::Flush: Flush(%s)%s\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\");\n     if (!fDbEnvInit)\n         return;\n     {\n@@ -427,21 +427,21 @@ void CDBEnv::Flush(bool fShutdown)\n         while (mi != mapFileUseCount.end()) {\n             string strFile = (*mi).first;\n             int nRefCount = (*mi).second;\n-            LogPrint(\"db\", \"CDBEnv::Flush : Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n+            LogPrint(\"db\", \"CDBEnv::Flush: Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n             if (nRefCount == 0) {\n                 // Move log data to the dat file\n                 CloseDb(strFile);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s checkpoint\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s checkpoint\\n\", strFile);\n                 dbenv.txn_checkpoint(0, 0, 0);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s detach\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s detach\\n\", strFile);\n                 if (!fMockDb)\n                     dbenv.lsn_reset(strFile.c_str(), 0);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s closed\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s closed\\n\", strFile);\n                 mapFileUseCount.erase(mi++);\n             } else\n                 mi++;\n         }\n-        LogPrint(\"db\", \"CDBEnv::Flush : Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n+        LogPrint(\"db\", \"CDBEnv::Flush: Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n         if (fShutdown) {\n             char** listp;\n             if (mapFileUseCount.empty()) {"
      },
      {
        "sha": "c2af23139cd4170d3be8cd3effa5d2299fa0e23f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -977,7 +977,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n             } catch (const boost::filesystem::filesystem_error& e) {\n                 // Note: hardlink creation failing is not a disaster, it just means\n                 // blocks will get re-downloaded from peers.\n-                LogPrintf(\"Error hardlinking blk%04u.dat : %s\\n\", i, e.what());\n+                LogPrintf(\"Error hardlinking blk%04u.dat: %s\\n\", i, e.what());\n                 break;\n             }\n         }"
      },
      {
        "sha": "22cd08f30c8cfdd9628a4481f4c0ae5bc3a6911b",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -36,7 +36,7 @@ bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n {\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        return error(\"CBasicKeyStore::AddCScript() : redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n+        return error(\"CBasicKeyStore::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n \n     LOCK(cs_KeyStore);\n     mapScripts[CScriptID(redeemScript)] = redeemScript;"
      },
      {
        "sha": "629e0dcbc0183077fe5fdf81758b21ad8102fa61",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 95,
        "changes": 190,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -820,29 +820,29 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction() : vin empty\"),\n+        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n                          REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction() : vout empty\"),\n+        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n                          REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckTransaction() : size limits failed\"),\n+        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n                          REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction() : txout.nValue negative\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n                              REJECT_INVALID, \"bad-txns-vout-negative\");\n         if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction() : txout.nValue too high\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n                              REJECT_INVALID, \"bad-txns-vout-toolarge\");\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CheckTransaction() : txout total out of range\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n                              REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n@@ -851,22 +851,22 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CheckTransaction() : duplicate inputs\"),\n+            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n                              REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n         vInOutPoints.insert(txin.prevout);\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction() : coinbase script size\"),\n+            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n                              REJECT_INVALID, \"bad-cb-length\");\n     }\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction() : prevout is null\"),\n+                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n                                  REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n \n@@ -922,7 +922,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     string reason;\n     if (Params().RequireStandard() && !IsStandardTx(tx, reason))\n         return state.DoS(0,\n-                         error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason),\n+                         error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n                          REJECT_NONSTANDARD, reason);\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n@@ -942,7 +942,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // timestamp applications where it matters.\n     if (!IsFinalTx(tx, chainActive.Height() + 1))\n         return state.DoS(0,\n-                         error(\"AcceptToMemoryPool : non-final\"),\n+                         error(\"AcceptToMemoryPool: non-final\"),\n                          REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n@@ -991,7 +991,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // are the actual inputs available?\n         if (!view.HaveInputs(tx))\n-            return state.Invalid(error(\"AcceptToMemoryPool : inputs already spent\"),\n+            return state.Invalid(error(\"AcceptToMemoryPool: inputs already spent\"),\n                                  REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n \n         // Bring the best block into scope\n@@ -1016,7 +1016,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         nSigOps += GetP2SHSigOpCount(tx, view);\n         if (nSigOps > MAX_STANDARD_TX_SIGOPS)\n             return state.DoS(0,\n-                             error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",\n+                             error(\"AcceptToMemoryPool: too many sigops %s, %d > %d\",\n                                    hash.ToString(), nSigOps, MAX_STANDARD_TX_SIGOPS),\n                              REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n \n@@ -1030,7 +1030,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n+            return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),\n                              REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n \n@@ -1057,7 +1057,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n             if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n+                return state.DoS(0, error(\"AcceptToMemoryPool: free transaction rejected by rate limiter\"),\n                                  REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n@@ -1123,11 +1123,11 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n                     fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n                     file >> txOut;\n                 } catch (const std::exception& e) {\n-                    return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+                    return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n                 }\n                 hashBlock = header.GetHash();\n                 if (txOut.GetHash() != hash)\n-                    return error(\"%s : txid mismatch\", __func__);\n+                    return error(\"%s: txid mismatch\", __func__);\n                 return true;\n             }\n         }\n@@ -1176,7 +1176,7 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"WriteBlockToDisk : OpenBlockFile failed\");\n+        return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n \n     // Write index header\n     unsigned int nSize = fileout.GetSerializeSize(block);\n@@ -1185,7 +1185,7 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     // Write block\n     long fileOutPos = ftell(fileout.Get());\n     if (fileOutPos < 0)\n-        return error(\"WriteBlockToDisk : ftell failed\");\n+        return error(\"WriteBlockToDisk: ftell failed\");\n     pos.nPos = (unsigned int)fileOutPos;\n     fileout << block;\n \n@@ -1199,19 +1199,19 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     // Open history file to read\n     CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"ReadBlockFromDisk : OpenBlockFile failed\");\n+        return error(\"ReadBlockFromDisk: OpenBlockFile failed\");\n \n     // Read block\n     try {\n         filein >> block;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     // Check the header\n     if (!CheckProofOfWork(block.GetHash(), block.nBits))\n-        return error(\"ReadBlockFromDisk : Errors in block header\");\n+        return error(\"ReadBlockFromDisk: Errors in block header\");\n \n     return true;\n }\n@@ -1221,7 +1221,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     if (!ReadBlockFromDisk(block, pindex->GetBlockPos()))\n         return false;\n     if (block.GetHash() != pindex->GetBlockHash())\n-        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*) : GetHash() doesn't match index\");\n+        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index\");\n     return true;\n }\n \n@@ -1423,7 +1423,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore), &error)) {\n-        return ::error(\"CScriptCheck() : %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n+        return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n     }\n     return true;\n }\n@@ -1438,7 +1438,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n-            return state.Invalid(error(\"CheckInputs() : %s inputs unavailable\", tx.GetHash().ToString()));\n+            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n \n         // While checking, GetBestBlock() refers to the parent block.\n         // This is also true for mempool checks.\n@@ -1456,31 +1456,31 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n             if (coins->IsCoinBase()) {\n                 if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n                     return state.Invalid(\n-                        error(\"CheckInputs() : tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n+                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n                         REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n             }\n \n             // Check for negative or overflow input values\n             nValueIn += coins->vout[prevout.n].nValue;\n             if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, error(\"CheckInputs() : txin values out of range\"),\n+                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n                                  REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n \n         }\n \n         if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs() : %s value in (%s) < value out (%s)\",\n+            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n                                         tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n                              REJECT_INVALID, \"bad-txns-in-belowout\");\n \n         // Tally transaction fees\n         CAmount nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString()),\n+            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n                              REJECT_INVALID, \"bad-txns-fee-negative\");\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n-            return state.DoS(100, error(\"CheckInputs() : nFees out of range\"),\n+            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n                              REJECT_INVALID, \"bad-txns-fee-outofrange\");\n \n         // The first loop above does all the inexpensive checks.\n@@ -1537,7 +1537,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     // Open history file to append\n     CAutoFile fileout(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"%s : OpenUndoFile failed\", __func__);\n+        return error(\"%s: OpenUndoFile failed\", __func__);\n \n     // Write index header\n     unsigned int nSize = fileout.GetSerializeSize(blockundo);\n@@ -1546,7 +1546,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     // Write undo data\n     long fileOutPos = ftell(fileout.Get());\n     if (fileOutPos < 0)\n-        return error(\"%s : ftell failed\", __func__);\n+        return error(\"%s: ftell failed\", __func__);\n     pos.nPos = (unsigned int)fileOutPos;\n     fileout << blockundo;\n \n@@ -1564,7 +1564,7 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     // Open history file to read\n     CAutoFile filein(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"%s : OpenBlockFile failed\", __func__);\n+        return error(\"%s: OpenBlockFile failed\", __func__);\n \n     // Read block\n     uint256 hashChecksum;\n@@ -1573,15 +1573,15 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n         filein >> hashChecksum;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     // Verify checksum\n     CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n     hasher << hashBlock;\n     hasher << blockundo;\n     if (hashChecksum != hasher.GetHash())\n-        return error(\"%s : Checksum mismatch\", __func__);\n+        return error(\"%s: Checksum mismatch\", __func__);\n \n     return true;\n }\n@@ -1600,12 +1600,12 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n     CBlockUndo blockUndo;\n     CDiskBlockPos pos = pindex->GetUndoPos();\n     if (pos.IsNull())\n-        return error(\"DisconnectBlock() : no undo data available\");\n+        return error(\"DisconnectBlock(): no undo data available\");\n     if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n-        return error(\"DisconnectBlock() : failure reading undo data\");\n+        return error(\"DisconnectBlock(): failure reading undo data\");\n \n     if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n-        return error(\"DisconnectBlock() : block and undo data inconsistent\");\n+        return error(\"DisconnectBlock(): block and undo data inconsistent\");\n \n     // undo transactions in reverse order\n     for (int i = block.vtx.size() - 1; i >= 0; i--) {\n@@ -1628,7 +1628,7 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         if (outsBlock.nVersion < 0)\n             outs->nVersion = outsBlock.nVersion;\n         if (*outs != outsBlock)\n-            fClean = fClean && error(\"DisconnectBlock() : added transaction mismatch? database corrupted\");\n+            fClean = fClean && error(\"DisconnectBlock(): added transaction mismatch? database corrupted\");\n \n         // remove outputs\n         outs->Clear();\n@@ -1638,25 +1638,25 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         if (i > 0) { // not coinbases\n             const CTxUndo &txundo = blockUndo.vtxundo[i-1];\n             if (txundo.vprevout.size() != tx.vin.size())\n-                return error(\"DisconnectBlock() : transaction and undo data inconsistent\");\n+                return error(\"DisconnectBlock(): transaction and undo data inconsistent\");\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 const CTxInUndo &undo = txundo.vprevout[j];\n                 CCoinsModifier coins = view.ModifyCoins(out.hash);\n                 if (undo.nHeight != 0) {\n                     // undo data contains height: this is the last output of the prevout tx being spent\n                     if (!coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing transaction\");\n+                        fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing transaction\");\n                     coins->Clear();\n                     coins->fCoinBase = undo.fCoinBase;\n                     coins->nHeight = undo.nHeight;\n                     coins->nVersion = undo.nVersion;\n                 } else {\n                     if (coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock() : undo data adding output to missing transaction\");\n+                        fClean = fClean && error(\"DisconnectBlock(): undo data adding output to missing transaction\");\n                 }\n                 if (coins->IsAvailable(out.n))\n-                    fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing output\");\n+                    fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing output\");\n                 if (coins->vout.size() < out.n+1)\n                     coins->vout.resize(out.n+1);\n                 coins->vout[out.n] = undo.txout;\n@@ -1753,7 +1753,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n             const CCoins* coins = view.AccessCoins(tx.GetHash());\n             if (coins && !coins->IsPruned())\n-                return state.DoS(100, error(\"ConnectBlock() : tried to overwrite transaction\"),\n+                return state.DoS(100, error(\"ConnectBlock(): tried to overwrite transaction\"),\n                                  REJECT_INVALID, \"bad-txns-BIP30\");\n         }\n     }\n@@ -1783,13 +1783,13 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         nInputs += tx.vin.size();\n         nSigOps += GetLegacySigOpCount(tx);\n         if (nSigOps > MAX_BLOCK_SIGOPS)\n-            return state.DoS(100, error(\"ConnectBlock() : too many sigops\"),\n+            return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n         if (!tx.IsCoinBase())\n         {\n             if (!view.HaveInputs(tx))\n-                return state.DoS(100, error(\"ConnectBlock() : inputs missing/spent\"),\n+                return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n             if (fStrictPayToScriptHash)\n@@ -1799,7 +1799,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 // an incredibly-expensive-to-validate block.\n                 nSigOps += GetP2SHSigOpCount(tx, view);\n                 if (nSigOps > MAX_BLOCK_SIGOPS)\n-                    return state.DoS(100, error(\"ConnectBlock() : too many sigops\"),\n+                    return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                                      REJECT_INVALID, \"bad-blk-sigops\");\n             }\n \n@@ -1825,7 +1825,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     if (block.vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n         return state.DoS(100,\n-                         error(\"ConnectBlock() : coinbase pays too much (actual=%d vs limit=%d)\",\n+                         error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n                                block.vtx[0].GetValueOut(), GetBlockValue(pindex->nHeight, nFees)),\n                                REJECT_INVALID, \"bad-cb-amount\");\n \n@@ -1843,7 +1843,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         if (pindex->GetUndoPos().IsNull()) {\n             CDiskBlockPos pos;\n             if (!FindUndoPos(state, pindex->nFile, pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n-                return error(\"ConnectBlock() : FindUndoPos failed\");\n+                return error(\"ConnectBlock(): FindUndoPos failed\");\n             if (!UndoWriteToDisk(blockundo, pos, pindex->pprev->GetBlockHash()))\n                 return state.Abort(\"Failed to write undo data\");\n \n@@ -1995,7 +1995,7 @@ bool static DisconnectTip(CValidationState &state) {\n     {\n         CCoinsViewCache view(pcoinsTip);\n         if (!DisconnectBlock(block, state, pindexDelete, view))\n-            return error(\"DisconnectTip() : DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n+            return error(\"DisconnectTip(): DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n         assert(view.Flush());\n     }\n     LogPrint(\"bench\", \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n@@ -2055,7 +2055,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n-            return error(\"ConnectTip() : ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n+            return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n         mapBlockSource.erase(inv.hash);\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n@@ -2492,12 +2492,12 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool f\n {\n     // Check proof of work matches claimed amount\n     if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits))\n-        return state.DoS(50, error(\"CheckBlockHeader() : proof of work failed\"),\n+        return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n                          REJECT_INVALID, \"high-hash\");\n \n     // Check timestamp\n     if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n-        return state.Invalid(error(\"CheckBlockHeader() : block timestamp too far in the future\"),\n+        return state.Invalid(error(\"CheckBlockHeader(): block timestamp too far in the future\"),\n                              REJECT_INVALID, \"time-too-new\");\n \n     return true;\n@@ -2517,14 +2517,14 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n         bool mutated;\n         uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n         if (block.hashMerkleRoot != hashMerkleRoot2)\n-            return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"),\n+            return state.DoS(100, error(\"CheckBlock(): hashMerkleRoot mismatch\"),\n                              REJECT_INVALID, \"bad-txnmrklroot\", true);\n \n         // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n         // of transactions in a block without affecting the merkle root of a block,\n         // while still invalidating it.\n         if (mutated)\n-            return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"),\n+            return state.DoS(100, error(\"CheckBlock(): duplicate transaction\"),\n                              REJECT_INVALID, \"bad-txns-duplicate\", true);\n     }\n \n@@ -2534,30 +2534,30 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n     // Size limits\n     if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckBlock() : size limits failed\"),\n+        return state.DoS(100, error(\"CheckBlock(): size limits failed\"),\n                          REJECT_INVALID, \"bad-blk-length\");\n \n     // First transaction must be coinbase, the rest must not be\n     if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n-        return state.DoS(100, error(\"CheckBlock() : first tx is not coinbase\"),\n+        return state.DoS(100, error(\"CheckBlock(): first tx is not coinbase\"),\n                          REJECT_INVALID, \"bad-cb-missing\");\n     for (unsigned int i = 1; i < block.vtx.size(); i++)\n         if (block.vtx[i].IsCoinBase())\n-            return state.DoS(100, error(\"CheckBlock() : more than one coinbase\"),\n+            return state.DoS(100, error(\"CheckBlock(): more than one coinbase\"),\n                              REJECT_INVALID, \"bad-cb-multiple\");\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!CheckTransaction(tx, state))\n-            return error(\"CheckBlock() : CheckTransaction failed\");\n+            return error(\"CheckBlock(): CheckTransaction failed\");\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n-        return state.DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"),\n+        return state.DoS(100, error(\"CheckBlock(): out-of-bounds SigOpCount\"),\n                          REJECT_INVALID, \"bad-blk-sigops\", true);\n \n     return true;\n@@ -2576,28 +2576,28 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     // Check proof of work\n     if ((!Params().SkipProofOfWorkCheck()) &&\n        (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n-        return state.DoS(100, error(\"%s : incorrect proof of work\", __func__),\n+        return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n \n     // Check timestamp against prev\n     if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-        return state.Invalid(error(\"%s : block's timestamp is too early\", __func__),\n+        return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n                              REJECT_INVALID, \"time-too-old\");\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return state.DoS(100, error(\"%s : rejected by checkpoint lock-in at %d\", __func__, nHeight),\n+        return state.DoS(100, error(\"%s: rejected by checkpoint lock-in at %d\", __func__, nHeight),\n                          REJECT_CHECKPOINT, \"checkpoint mismatch\");\n \n     // Don't accept any forks from the main chain prior to last checkpoint\n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n     if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-        return state.DoS(100, error(\"%s : forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n+        return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n \n     // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n     if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n     {\n-        return state.Invalid(error(\"%s : rejected nVersion=1 block\", __func__),\n+        return state.Invalid(error(\"%s: rejected nVersion=1 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n     }\n \n@@ -2611,7 +2611,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n-            return state.DoS(10, error(\"%s : contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n+            return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n         }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n@@ -2621,7 +2621,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n             !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n-            return state.DoS(100, error(\"%s : block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n+            return state.DoS(100, error(\"%s: block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n         }\n     }\n \n@@ -2641,7 +2641,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n         if (ppindex)\n             *ppindex = pindex;\n         if (pindex->nStatus & BLOCK_FAILED_MASK)\n-            return state.Invalid(error(\"%s : block is marked invalid\", __func__), 0, \"duplicate\");\n+            return state.Invalid(error(\"%s: block is marked invalid\", __func__), 0, \"duplicate\");\n         return true;\n     }\n \n@@ -2653,10 +2653,10 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     if (hash != Params().HashGenesisBlock()) {\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n-            return state.DoS(10, error(\"%s : prev block not found\", __func__), 0, \"bad-prevblk\");\n+            return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n-            return state.DoS(100, error(\"%s : prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+            return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n     }\n \n     if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n@@ -2682,7 +2682,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n \n     if (pindex->nStatus & BLOCK_HAVE_DATA) {\n         // TODO: deal better with duplicate blocks.\n-        // return state.DoS(20, error(\"AcceptBlock() : already have block %d %s\", pindex->nHeight, pindex->GetBlockHash().ToString()), REJECT_DUPLICATE, \"duplicate\");\n+        // return state.DoS(20, error(\"AcceptBlock(): already have block %d %s\", pindex->nHeight, pindex->GetBlockHash().ToString()), REJECT_DUPLICATE, \"duplicate\");\n         return true;\n     }\n \n@@ -2703,12 +2703,12 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n         if (dbp != NULL)\n             blockPos = *dbp;\n         if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL))\n-            return error(\"AcceptBlock() : FindBlockPos failed\");\n+            return error(\"AcceptBlock(): FindBlockPos failed\");\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos))\n                 return state.Abort(\"Failed to write block\");\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n-            return error(\"AcceptBlock() : ReceivedBlockTransactions failed\");\n+            return error(\"AcceptBlock(): ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n         return state.Abort(std::string(\"System error: \") + e.what());\n     }\n@@ -2739,7 +2739,7 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n         LOCK(cs_main);\n         MarkBlockAsReceived(pblock->GetHash());\n         if (!checked) {\n-            return error(\"%s : CheckBlock FAILED\", __func__);\n+            return error(\"%s: CheckBlock FAILED\", __func__);\n         }\n \n         // Store to disk\n@@ -2749,11 +2749,11 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n         }\n         if (!ret)\n-            return error(\"%s : AcceptBlock FAILED\", __func__);\n+            return error(\"%s: AcceptBlock FAILED\", __func__);\n     }\n \n     if (!ActivateBestChain(state, pblock))\n-        return error(\"%s : ActivateBestChain failed\", __func__);\n+        return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n }\n@@ -2859,7 +2859,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     // Create new\n     CBlockIndex* pindexNew = new CBlockIndex();\n     if (!pindexNew)\n-        throw runtime_error(\"LoadBlockIndex() : new CBlockIndex failed\");\n+        throw runtime_error(\"LoadBlockIndex(): new CBlockIndex failed\");\n     mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n \n@@ -3005,24 +3005,24 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n         CBlock block;\n         // check level 0: read from disk\n         if (!ReadBlockFromDisk(block, pindex))\n-            return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state))\n-            return error(\"VerifyDB() : *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            return error(\"VerifyDB(): *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n             CBlockUndo undo;\n             CDiskBlockPos pos = pindex->GetUndoPos();\n             if (!pos.IsNull()) {\n                 if (!UndoReadFromDisk(undo, pos, pindex->pprev->GetBlockHash()))\n-                    return error(\"VerifyDB() : *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                    return error(\"VerifyDB(): *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             }\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.GetCacheSize() + pcoinsTip->GetCacheSize()) <= nCoinCacheSize) {\n             bool fClean = true;\n             if (!DisconnectBlock(block, state, pindex, coins, &fClean))\n-                return error(\"VerifyDB() : *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             pindexState = pindex->pprev;\n             if (!fClean) {\n                 nGoodTransactions = 0;\n@@ -3034,7 +3034,7 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n             return true;\n     }\n     if (pindexFailure)\n-        return error(\"VerifyDB() : *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", chainActive.Height() - pindexFailure->nHeight + 1, nGoodTransactions);\n+        return error(\"VerifyDB(): *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", chainActive.Height() - pindexFailure->nHeight + 1, nGoodTransactions);\n \n     // check level 4: try reconnecting blocks\n     if (nCheckLevel >= 4) {\n@@ -3045,9 +3045,9 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n             pindex = chainActive.Next(pindex);\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex))\n-                return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             if (!ConnectBlock(block, state, pindex, coins))\n-                return error(\"VerifyDB() : *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }\n \n@@ -3093,18 +3093,18 @@ bool InitBlockIndex() {\n             CDiskBlockPos blockPos;\n             CValidationState state;\n             if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.GetBlockTime()))\n-                return error(\"LoadBlockIndex() : FindBlockPos failed\");\n+                return error(\"LoadBlockIndex(): FindBlockPos failed\");\n             if (!WriteBlockToDisk(block, blockPos))\n-                return error(\"LoadBlockIndex() : writing genesis block to disk failed\");\n+                return error(\"LoadBlockIndex(): writing genesis block to disk failed\");\n             CBlockIndex *pindex = AddToBlockIndex(block);\n             if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n-                return error(\"LoadBlockIndex() : genesis block not accepted\");\n+                return error(\"LoadBlockIndex(): genesis block not accepted\");\n             if (!ActivateBestChain(state, &block))\n-                return error(\"LoadBlockIndex() : genesis block cannot be activated\");\n+                return error(\"LoadBlockIndex(): genesis block cannot be activated\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n             return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n         } catch (const std::runtime_error& e) {\n-            return error(\"LoadBlockIndex() : failed to initialize block database: %s\", e.what());\n+            return error(\"LoadBlockIndex(): failed to initialize block database: %s\", e.what());\n         }\n     }\n \n@@ -3204,7 +3204,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {\n-                LogPrintf(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+                LogPrintf(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n             }\n         }\n     } catch (const std::runtime_error& e) {\n@@ -3268,7 +3268,7 @@ string GetWarnings(string strFor)\n         return strStatusBar;\n     else if (strFor == \"rpc\")\n         return strRPC;\n-    assert(!\"GetWarnings() : invalid parameter\");\n+    assert(!\"GetWarnings(): invalid parameter\");\n     return \"error\";\n }\n \n@@ -3835,7 +3835,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             vWorkQueue.push_back(inv.hash);\n             vEraseQueue.push_back(inv.hash);\n \n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d %s : accepted %s (poolsz %u)\\n\",\n+            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d %s: accepted %s (poolsz %u)\\n\",\n                 pfrom->id, pfrom->cleanSubVer,\n                 tx.GetHash().ToString(),\n                 mempool.mapTx.size());\n@@ -4297,7 +4297,7 @@ bool ProcessMessages(CNode* pfrom)\n         memcpy(&nChecksum, &hash, sizeof(nChecksum));\n         if (nChecksum != hdr.nChecksum)\n         {\n-            LogPrintf(\"ProcessMessages(%s, %u bytes) : CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n+            LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n                strCommand, nMessageSize, nChecksum, hdr.nChecksum);\n             continue;\n         }\n@@ -4315,12 +4315,12 @@ bool ProcessMessages(CNode* pfrom)\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv\n-                LogPrintf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n             }\n             else if (strstr(e.what(), \"size too large\"))\n             {\n                 // Allow exceptions from over-long size\n-                LogPrintf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n             }\n             else\n             {"
      },
      {
        "sha": "e359654d7ba26004c0c09fc44e52fab19b4ad3ce",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -332,7 +332,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         CValidationState state;\n         if (!TestBlockValidity(state, *pblock, pindexPrev, false, false))\n-            throw std::runtime_error(\"CreateNewBlock() : TestBlockValidity failed\");\n+            throw std::runtime_error(\"CreateNewBlock(): TestBlockValidity failed\");\n     }\n \n     return pblocktemplate.release();\n@@ -415,7 +415,7 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n     {\n         LOCK(cs_main);\n         if (pblock->hashPrevBlock != chainActive.Tip()->GetBlockHash())\n-            return error(\"BitcoinMiner : generated block is stale\");\n+            return error(\"BitcoinMiner: generated block is stale\");\n     }\n \n     // Remove key from key pool\n@@ -430,7 +430,7 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n     // Process this block the same as if we had received it from another node\n     CValidationState state;\n     if (!ProcessNewBlock(state, NULL, pblock))\n-        return error(\"BitcoinMiner : ProcessNewBlock, block not accepted\");\n+        return error(\"BitcoinMiner: ProcessNewBlock, block not accepted\");\n \n     return true;\n }"
      },
      {
        "sha": "e4ab9d706d86e77308ec515a2c772d33451b733e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -1020,7 +1020,7 @@ void ThreadMapPort()\n         catch (const boost::thread_interrupted&)\n         {\n             r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n-            LogPrintf(\"UPNP_DeletePortMapping() returned : %d\\n\", r);\n+            LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n             freeUPNPDevlist(devlist); devlist = 0;\n             FreeUPNPUrls(&urls);\n             throw;\n@@ -1797,21 +1797,21 @@ bool CAddrDB::Write(const CAddrMan& addr)\n     FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"%s : Failed to open file %s\", __func__, pathTmp.string());\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n \n     // Write and commit header, data\n     try {\n         fileout << ssPeers;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Serialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n     }\n     FileCommit(fileout.Get());\n     fileout.fclose();\n \n     // replace existing peers.dat, if any, with new peers.dat.XXXX\n     if (!RenameOver(pathTmp, pathAddr))\n-        return error(\"%s : Rename-into-place failed\", __func__);\n+        return error(\"%s: Rename-into-place failed\", __func__);\n \n     return true;\n }\n@@ -1822,7 +1822,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n     FILE *file = fopen(pathAddr.string().c_str(), \"rb\");\n     CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"%s : Failed to open file %s\", __func__, pathAddr.string());\n+        return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n \n     // use file size to size memory buffer\n     int fileSize = boost::filesystem::file_size(pathAddr);\n@@ -1840,7 +1840,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n         filein >> hashIn;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n     filein.fclose();\n \n@@ -1849,7 +1849,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n     // verify stored checksum matches input data\n     uint256 hashTmp = Hash(ssPeers.begin(), ssPeers.end());\n     if (hashIn != hashTmp)\n-        return error(\"%s : Checksum mismatch, data corrupted\", __func__);\n+        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n \n     unsigned char pchMsgTmp[4];\n     try {\n@@ -1858,13 +1858,13 @@ bool CAddrDB::Read(CAddrMan& addr)\n \n         // ... verify the network matches ours\n         if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n-            return error(\"%s : Invalid network magic number\", __func__);\n+            return error(\"%s: Invalid network magic number\", __func__);\n \n         // de-serialize address data into one CAddrMan object\n         ssPeers >> addr;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     return true;"
      },
      {
        "sha": "e49f0d104c26600c78ef5f392925c6c8f9c63280",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -89,11 +89,11 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n \n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > Params().ProofOfWorkLimit())\n-        return error(\"CheckProofOfWork() : nBits below minimum work\");\n+        return error(\"CheckProofOfWork(): nBits below minimum work\");\n \n     // Check proof of work matches claimed amount\n     if (UintToArith256(hash) > bnTarget)\n-        return error(\"CheckProofOfWork() : hash doesn't match nBits\");\n+        return error(\"CheckProofOfWork(): hash doesn't match nBits\");\n \n     return true;\n }"
      },
      {
        "sha": "606dbea79857d2f4cc79b0136ad46486f3c187d9",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -94,7 +94,7 @@ CAmount CTransaction::GetValueOut() const\n     {\n         nValueOut += it->nValue;\n         if (!MoneyRange(it->nValue) || !MoneyRange(nValueOut))\n-            throw std::runtime_error(\"CTransaction::GetValueOut() : value out of range\");\n+            throw std::runtime_error(\"CTransaction::GetValueOut(): value out of range\");\n     }\n     return nValueOut;\n }"
      },
      {
        "sha": "74ac706d60c6f14fc060e047068ee716128cb09b",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -66,7 +66,7 @@ bool CMessageHeader::IsValid() const\n     // Message size\n     if (nMessageSize > MAX_SIZE)\n     {\n-        LogPrintf(\"CMessageHeader::IsValid() : (%s, %u bytes) nMessageSize > MAX_SIZE\\n\", GetCommand(), nMessageSize);\n+        LogPrintf(\"CMessageHeader::IsValid(): (%s, %u bytes) nMessageSize > MAX_SIZE\\n\", GetCommand(), nMessageSize);\n         return false;\n     }\n \n@@ -117,7 +117,7 @@ CInv::CInv(const std::string& strType, const uint256& hashIn)\n         }\n     }\n     if (i == ARRAYLEN(ppszTypeName))\n-        throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256) : unknown type '%s'\", strType));\n+        throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256): unknown type '%s'\", strType));\n     hash = hashIn;\n }\n \n@@ -134,7 +134,7 @@ bool CInv::IsKnownType() const\n const char* CInv::GetCommand() const\n {\n     if (!IsKnownType())\n-        throw std::out_of_range(strprintf(\"CInv::GetCommand() : type=%d unknown type\", type));\n+        throw std::out_of_range(strprintf(\"CInv::GetCommand(): type=%d unknown type\", type));\n     return ppszTypeName[type];\n }\n "
      },
      {
        "sha": "162ecdba4ef4c84d4288e504db4e337664eb6282",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -114,7 +114,7 @@ class AddressTablePriv\n         case CT_NEW:\n             if(inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_NEW, but entry is already in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_NEW, but entry is already in model\";\n                 break;\n             }\n             parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex);\n@@ -124,7 +124,7 @@ class AddressTablePriv\n         case CT_UPDATED:\n             if(!inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_UPDATED, but entry is not in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_UPDATED, but entry is not in model\";\n                 break;\n             }\n             lower->type = newEntryType;\n@@ -134,7 +134,7 @@ class AddressTablePriv\n         case CT_DELETED:\n             if(!inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_DELETED, but entry is not in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_DELETED, but entry is not in model\";\n                 break;\n             }\n             parent->beginRemoveRows(QModelIndex(), lowerIndex, upperIndex-1);"
      },
      {
        "sha": "03d94f2e13f127dcb875d733eef691506df7a5a1",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -212,14 +212,14 @@ static void ShowProgress(ClientModel *clientmodel, const std::string &title, int\n \n static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConnections)\n {\n-    // Too noisy: qDebug() << \"NotifyNumConnectionsChanged : \" + QString::number(newNumConnections);\n+    // Too noisy: qDebug() << \"NotifyNumConnectionsChanged: \" + QString::number(newNumConnections);\n     QMetaObject::invokeMethod(clientmodel, \"updateNumConnections\", Qt::QueuedConnection,\n                               Q_ARG(int, newNumConnections));\n }\n \n static void NotifyAlertChanged(ClientModel *clientmodel, const uint256 &hash, ChangeType status)\n {\n-    qDebug() << \"NotifyAlertChanged : \" + QString::fromStdString(hash.GetHex()) + \" status=\" + QString::number(status);\n+    qDebug() << \"NotifyAlertChanged: \" + QString::fromStdString(hash.GetHex()) + \" status=\" + QString::number(status);\n     QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection,\n                               Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n                               Q_ARG(int, status));"
      },
      {
        "sha": "4c1e898020dcdfe8034396ae6fb19f5180ac8ecc",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -32,18 +32,18 @@ bool PaymentRequestPlus::parse(const QByteArray& data)\n {\n     bool parseOK = paymentRequest.ParseFromArray(data.data(), data.size());\n     if (!parseOK) {\n-        qWarning() << \"PaymentRequestPlus::parse : Error parsing payment request\";\n+        qWarning() << \"PaymentRequestPlus::parse: Error parsing payment request\";\n         return false;\n     }\n     if (paymentRequest.payment_details_version() > 1) {\n-        qWarning() << \"PaymentRequestPlus::parse : Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n+        qWarning() << \"PaymentRequestPlus::parse: Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n         return false;\n     }\n \n     parseOK = details.ParseFromString(paymentRequest.serialized_payment_details());\n     if (!parseOK)\n     {\n-        qWarning() << \"PaymentRequestPlus::parse : Error parsing payment details\";\n+        qWarning() << \"PaymentRequestPlus::parse: Error parsing payment details\";\n         paymentRequest.Clear();\n         return false;\n     }\n@@ -83,17 +83,17 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         digestAlgorithm = EVP_sha1();\n     }\n     else if (paymentRequest.pki_type() == \"none\") {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: pki_type == none\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: pki_type == none\";\n         return false;\n     }\n     else {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: unknown pki_type \" << QString::fromStdString(paymentRequest.pki_type());\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: unknown pki_type \" << QString::fromStdString(paymentRequest.pki_type());\n         return false;\n     }\n \n     payments::X509Certificates certChain;\n     if (!certChain.ParseFromString(paymentRequest.pki_data())) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: error parsing pki_data\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: error parsing pki_data\";\n         return false;\n     }\n \n@@ -103,12 +103,12 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         QByteArray certData(certChain.certificate(i).data(), certChain.certificate(i).size());\n         QSslCertificate qCert(certData, QSsl::Der);\n         if (currentTime < qCert.effectiveDate() || currentTime > qCert.expiryDate()) {\n-            qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: certificate expired or not yet active: \" << qCert;\n+            qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: certificate expired or not yet active: \" << qCert;\n             return false;\n         }\n #if QT_VERSION >= 0x050000\n         if (qCert.isBlacklisted()) {\n-            qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: certificate blacklisted: \" << qCert;\n+            qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: certificate blacklisted: \" << qCert;\n             return false;\n         }\n #endif\n@@ -118,7 +118,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n             certs.push_back(cert);\n     }\n     if (certs.empty()) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: empty certificate chain\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: empty certificate chain\";\n         return false;\n     }\n \n@@ -134,7 +134,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     // load the signing cert into it and verify.\n     X509_STORE_CTX *store_ctx = X509_STORE_CTX_new();\n     if (!store_ctx) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: error creating X509_STORE_CTX\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: error creating X509_STORE_CTX\";\n         return false;\n     }\n \n@@ -191,7 +191,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     }\n     catch (const SSLVerifyError& err) {\n         fResult = false;\n-        qWarning() << \"PaymentRequestPlus::getMerchant : SSL error: \" << err.what();\n+        qWarning() << \"PaymentRequestPlus::getMerchant: SSL error: \" << err.what();\n     }\n \n     if (website)"
      },
      {
        "sha": "a00916bf7f96b1668e6db5604b650e07302a9c5a",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -97,7 +97,7 @@ static QList<QString> savedPaymentRequests;\n \n static void ReportInvalidCertificate(const QSslCertificate& cert)\n {\n-    qDebug() << \"ReportInvalidCertificate : Payment server found an invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n+    qDebug() << \"ReportInvalidCertificate: Payment server found an invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n }\n \n //\n@@ -171,7 +171,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n             continue;\n         }\n     }\n-    qWarning() << \"PaymentServer::LoadRootCAs : Loaded \" << nRootCerts << \" root certificates\";\n+    qWarning() << \"PaymentServer::LoadRootCAs: Loaded \" << nRootCerts << \" root certificates\";\n \n     // Project for another day:\n     // Fetch certificate revocation lists, and add them to certStore.\n@@ -244,7 +244,7 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n         {\n             // Printing to debug.log is about the best we can do here, the\n             // GUI hasn't started yet so we can't pop up a message box.\n-            qWarning() << \"PaymentServer::ipcSendCommandLine : Payment request file does not exist: \" << arg;\n+            qWarning() << \"PaymentServer::ipcSendCommandLine: Payment request file does not exist: \" << arg;\n         }\n     }\n }\n@@ -368,10 +368,10 @@ void PaymentServer::initNetManager()\n     if (optionsModel->getProxySettings(proxy)) {\n         netManager->setProxy(proxy);\n \n-        qDebug() << \"PaymentServer::initNetManager : Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n+        qDebug() << \"PaymentServer::initNetManager: Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n     }\n     else\n-        qDebug() << \"PaymentServer::initNetManager : No active proxy server found.\";\n+        qDebug() << \"PaymentServer::initNetManager: No active proxy server found.\";\n \n     connect(netManager, SIGNAL(finished(QNetworkReply*)),\n             this, SLOT(netRequestFinished(QNetworkReply*)));\n@@ -415,12 +415,12 @@ void PaymentServer::handleURIOrFile(const QString& s)\n \n             if (fetchUrl.isValid())\n             {\n-                qDebug() << \"PaymentServer::handleURIOrFile : fetchRequest(\" << fetchUrl << \")\";\n+                qDebug() << \"PaymentServer::handleURIOrFile: fetchRequest(\" << fetchUrl << \")\";\n                 fetchRequest(fetchUrl);\n             }\n             else\n             {\n-                qWarning() << \"PaymentServer::handleURIOrFile : Invalid URL: \" << fetchUrl;\n+                qWarning() << \"PaymentServer::handleURIOrFile: Invalid URL: \" << fetchUrl;\n                 emit message(tr(\"URI handling\"),\n                     tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n                     CClientUIInterface::ICON_WARNING);\n@@ -585,10 +585,10 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n     recipient.address = addresses.join(\"<br />\");\n \n     if (!recipient.authenticatedMerchant.isEmpty()) {\n-        qDebug() << \"PaymentServer::processPaymentRequest : Secure payment request from \" << recipient.authenticatedMerchant;\n+        qDebug() << \"PaymentServer::processPaymentRequest: Secure payment request from \" << recipient.authenticatedMerchant;\n     }\n     else {\n-        qDebug() << \"PaymentServer::processPaymentRequest : Insecure payment request to \" << addresses.join(\", \");\n+        qDebug() << \"PaymentServer::processPaymentRequest: Insecure payment request to \" << addresses.join(\", \");\n     }\n \n     return true;\n@@ -643,7 +643,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n         else {\n             // This should never happen, because sending coins should have\n             // just unlocked the wallet and refilled the keypool.\n-            qWarning() << \"PaymentServer::fetchPaymentACK : Error getting refund key, refund_to not set\";\n+            qWarning() << \"PaymentServer::fetchPaymentACK: Error getting refund key, refund_to not set\";\n         }\n     }\n \n@@ -655,7 +655,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     }\n     else {\n         // This should never happen, either.\n-        qWarning() << \"PaymentServer::fetchPaymentACK : Error serializing payment message\";\n+        qWarning() << \"PaymentServer::fetchPaymentACK: Error serializing payment message\";\n     }\n }\n \n@@ -694,7 +694,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n         SendCoinsRecipient recipient;\n         if (!request.parse(data))\n         {\n-            qWarning() << \"PaymentServer::netRequestFinished : Error parsing payment request\";\n+            qWarning() << \"PaymentServer::netRequestFinished: Error parsing payment request\";\n             emit message(tr(\"Payment request error\"),\n                 tr(\"Payment request cannot be parsed!\"),\n                 CClientUIInterface::MSG_ERROR);\n@@ -712,7 +712,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             QString msg = tr(\"Bad response from server %1\")\n                 .arg(reply->request().url().toString());\n \n-            qWarning() << \"PaymentServer::netRequestFinished : \" << msg;\n+            qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n             emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         }\n         else\n@@ -728,7 +728,7 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n \n     QString errString;\n     foreach (const QSslError& err, errs) {\n-        qWarning() << \"PaymentServer::reportSslErrors : \" << err;\n+        qWarning() << \"PaymentServer::reportSslErrors: \" << err;\n         errString += err.errorString() + \"\\n\";\n     }\n     emit message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "df1afbfaaae31266db335a94423581896697a65c",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -94,7 +94,7 @@ class TransactionTablePriv\n      */\n     void updateWallet(const uint256 &hash, int status, bool showTransaction)\n     {\n-        qDebug() << \"TransactionTablePriv::updateWallet : \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n+        qDebug() << \"TransactionTablePriv::updateWallet: \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n \n         // Find bounds of this transaction in model\n         QList<TransactionRecord>::iterator lower = qLowerBound(\n@@ -122,7 +122,7 @@ class TransactionTablePriv\n         case CT_NEW:\n             if(inModel)\n             {\n-                qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is already in model\";\n+                qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_NEW, but transaction is already in model\";\n                 break;\n             }\n             if(showTransaction)\n@@ -132,7 +132,7 @@ class TransactionTablePriv\n                 std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n                 if(mi == wallet->mapWallet.end())\n                 {\n-                    qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is not in wallet\";\n+                    qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_NEW, but transaction is not in wallet\";\n                     break;\n                 }\n                 // Added -- insert at the right position\n@@ -154,7 +154,7 @@ class TransactionTablePriv\n         case CT_DELETED:\n             if(!inModel)\n             {\n-                qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_DELETED, but transaction is not in model\";\n+                qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_DELETED, but transaction is not in model\";\n                 break;\n             }\n             // Removed -- remove entire transaction from table\n@@ -664,7 +664,7 @@ struct TransactionNotification\n     void invoke(QObject *ttm)\n     {\n         QString strHash = QString::fromStdString(hash.GetHex());\n-        qDebug() << \"NotifyTransactionChanged : \" + strHash + \" status= \" + QString::number(status);\n+        qDebug() << \"NotifyTransactionChanged: \" + strHash + \" status= \" + QString::number(status);\n         QMetaObject::invokeMethod(ttm, \"updateTransaction\", Qt::QueuedConnection,\n                                   Q_ARG(QString, strHash),\n                                   Q_ARG(int, status),"
      },
      {
        "sha": "4a7abf999cb04806f7f244239cb15996e14fc18f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -452,7 +452,7 @@ static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet,\n     QString strLabel = QString::fromStdString(label);\n     QString strPurpose = QString::fromStdString(purpose);\n \n-    qDebug() << \"NotifyAddressBookChanged : \" + strAddress + \" \" + strLabel + \" isMine=\" + QString::number(isMine) + \" purpose=\" + strPurpose + \" status=\" + QString::number(status);\n+    qDebug() << \"NotifyAddressBookChanged: \" + strAddress + \" \" + strLabel + \" isMine=\" + QString::number(isMine) + \" purpose=\" + strPurpose + \" status=\" + QString::number(status);\n     QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n                               Q_ARG(QString, strAddress),\n                               Q_ARG(QString, strLabel),"
      },
      {
        "sha": "28371771a9efbe7951f156b0b0bd789cdfe11288",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -319,7 +319,7 @@ void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n     if (pwalletMain->IsLocked())\n     {\n         strError = \"Error: Wallet locked, unable to create transaction!\";\n-        LogPrintf(\"SendMoney() : %s\", strError);\n+        LogPrintf(\"SendMoney(): %s\", strError);\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n \n@@ -333,7 +333,7 @@ void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n     {\n         if (nValue + nFeeRequired > pwalletMain->GetBalance())\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n-        LogPrintf(\"SendMoney() : %s\\n\", strError);\n+        LogPrintf(\"SendMoney(): %s\\n\", strError);\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     if (!pwalletMain->CommitTransaction(wtxNew, reservekey))"
      },
      {
        "sha": "0cee1a0116df6a7a7117948c864eabb56d4f6bd6",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -60,7 +60,7 @@ bool CastToBool(const valtype& vch)\n static inline void popstack(vector<valtype>& stack)\n {\n     if (stack.empty())\n-        throw runtime_error(\"popstack() : stack empty\");\n+        throw runtime_error(\"popstack(): stack empty\");\n     stack.pop_back();\n }\n "
      },
      {
        "sha": "8b36aa2f5061fcbb204d73737bbf1c734aacb9ec",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -391,7 +391,7 @@ class CScript : public std::vector<unsigned char>\n     CScript& operator<<(opcodetype opcode)\n     {\n         if (opcode < 0 || opcode > 0xff)\n-            throw std::runtime_error(\"CScript::operator<<() : invalid opcode\");\n+            throw std::runtime_error(\"CScript::operator<<(): invalid opcode\");\n         insert(end(), (unsigned char)opcode);\n         return *this;\n     }"
      },
      {
        "sha": "a62760a7938dec3f0111cc5f600345e8c48b14c0",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -249,7 +249,7 @@ uint64_t ReadCompactSize(Stream& is)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     if (nSizeRet > (uint64_t)MAX_SIZE)\n-        throw std::ios_base::failure(\"ReadCompactSize() : size too large\");\n+        throw std::ios_base::failure(\"ReadCompactSize(): size too large\");\n     return nSizeRet;\n }\n "
      },
      {
        "sha": "bd8568b1af35093c4db4b85b2ddcfff2431a019c",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -224,7 +224,7 @@ class CDataStream\n         {\n             if (nReadPosNext > vch.size())\n             {\n-                throw std::ios_base::failure(\"CDataStream::read() : end of data\");\n+                throw std::ios_base::failure(\"CDataStream::read(): end of data\");\n             }\n             memcpy(pch, &vch[nReadPos], nSize);\n             nReadPos = 0;\n@@ -244,7 +244,7 @@ class CDataStream\n         if (nReadPosNext >= vch.size())\n         {\n             if (nReadPosNext > vch.size())\n-                throw std::ios_base::failure(\"CDataStream::ignore() : end of data\");\n+                throw std::ios_base::failure(\"CDataStream::ignore(): end of data\");\n             nReadPos = 0;\n             vch.clear();\n             return (*this);\n@@ -374,18 +374,18 @@ class CAutoFile\n     CAutoFile& read(char* pch, size_t nSize)\n     {\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::read : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is NULL\");\n         if (fread(pch, 1, nSize, file) != nSize)\n-            throw std::ios_base::failure(feof(file) ? \"CAutoFile::read : end of file\" : \"CAutoFile::read : fread failed\");\n+            throw std::ios_base::failure(feof(file) ? \"CAutoFile::read: end of file\" : \"CAutoFile::read: fread failed\");\n         return (*this);\n     }\n \n     CAutoFile& write(const char* pch, size_t nSize)\n     {\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::write : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::write: file handle is NULL\");\n         if (fwrite(pch, 1, nSize, file) != nSize)\n-            throw std::ios_base::failure(\"CAutoFile::write : write failed\");\n+            throw std::ios_base::failure(\"CAutoFile::write: write failed\");\n         return (*this);\n     }\n \n@@ -401,7 +401,7 @@ class CAutoFile\n     {\n         // Serialize to this stream\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::operator<< : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::operator<<: file handle is NULL\");\n         ::Serialize(*this, obj, nType, nVersion);\n         return (*this);\n     }\n@@ -411,7 +411,7 @@ class CAutoFile\n     {\n         // Unserialize from this stream\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::operator>> : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::operator>>: file handle is NULL\");\n         ::Unserialize(*this, obj, nType, nVersion);\n         return (*this);\n     }\n@@ -452,7 +452,7 @@ class CBufferedFile\n             return false;\n         size_t read = fread((void*)&vchBuf[pos], 1, readNow, src);\n         if (read == 0) {\n-            throw std::ios_base::failure(feof(src) ? \"CBufferedFile::Fill : end of file\" : \"CBufferedFile::Fill : fread failed\");\n+            throw std::ios_base::failure(feof(src) ? \"CBufferedFile::Fill: end of file\" : \"CBufferedFile::Fill: fread failed\");\n         } else {\n             nSrcPos += read;\n             return true;"
      },
      {
        "sha": "e7aeee9db606c870315542a50dca96b9eb7e2ff7",
        "filename": "src/test/bignum.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/test/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/test/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -37,14 +37,14 @@ class CBigNum : public BIGNUM\n         if (!BN_copy(this, &b))\n         {\n             BN_clear_free(this);\n-            throw bignum_error(\"CBigNum::CBigNum(const CBigNum&) : BN_copy failed\");\n+            throw bignum_error(\"CBigNum::CBigNum(const CBigNum&): BN_copy failed\");\n         }\n     }\n \n     CBigNum& operator=(const CBigNum& b)\n     {\n         if (!BN_copy(this, &b))\n-            throw bignum_error(\"CBigNum::operator= : BN_copy failed\");\n+            throw bignum_error(\"CBigNum::operator=: BN_copy failed\");\n         return (*this);\n     }\n \n@@ -151,15 +151,15 @@ inline const CBigNum operator+(const CBigNum& a, const CBigNum& b)\n {\n     CBigNum r;\n     if (!BN_add(&r, &a, &b))\n-        throw bignum_error(\"CBigNum::operator+ : BN_add failed\");\n+        throw bignum_error(\"CBigNum::operator+: BN_add failed\");\n     return r;\n }\n \n inline const CBigNum operator-(const CBigNum& a, const CBigNum& b)\n {\n     CBigNum r;\n     if (!BN_sub(&r, &a, &b))\n-        throw bignum_error(\"CBigNum::operator- : BN_sub failed\");\n+        throw bignum_error(\"CBigNum::operator-: BN_sub failed\");\n     return r;\n }\n "
      },
      {
        "sha": "ea41dbcde23435912f8b6ac0a7e09a3df8717d05",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -27,7 +27,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n     static const uint256 one(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n     if (nIn >= txTo.vin.size())\n     {\n-        printf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n+        printf(\"ERROR: SignatureHash(): nIn=%d out of range\\n\", nIn);\n         return one;\n     }\n     CMutableTransaction txTmp(txTo);\n@@ -58,7 +58,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n         unsigned int nOut = nIn;\n         if (nOut >= txTmp.vout.size())\n         {\n-            printf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nOut);\n+            printf(\"ERROR: SignatureHash(): nOut=%d out of range\\n\", nOut);\n             return one;\n         }\n         txTmp.vout.resize(nOut+1);"
      },
      {
        "sha": "da271bd5d1a11c95a16d7139a0241ff738b78dba",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -141,7 +141,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n             }\n             pcursor->Next();\n         } catch (const std::exception& e) {\n-            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }\n     stats.nHeight = mapBlockIndex.find(GetBestBlock())->second->nHeight;\n@@ -223,14 +223,14 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nTx            = diskindex.nTx;\n \n                 if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits))\n-                    return error(\"LoadBlockIndex() : CheckProofOfWork failed: %s\", pindexNew->ToString());\n+                    return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n \n                 pcursor->Next();\n             } else {\n                 break; // if shutdown requested or finished loading block index\n             }\n         } catch (const std::exception& e) {\n-            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }\n "
      },
      {
        "sha": "6e0f7e9c5a6bd5a2afedba96c1dd7e1b2d1c3305",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -192,7 +192,7 @@ class CMinerPolicyEstimator\n             // Neither or both fee and priority sufficient to get confirmed:\n             // don't know why they got confirmed.\n         }\n-        LogPrint(\"estimatefee\", \"Seen TX confirm: %s : %s fee/%g priority, took %d blocks\\n\",\n+        LogPrint(\"estimatefee\", \"Seen TX confirm: %s: %s fee/%g priority, took %d blocks\\n\",\n                  assignedTo, feeRate.ToString(), dPriority, nBlocksAgo);\n     }\n \n@@ -658,7 +658,7 @@ CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n         minerPolicyEstimator->Write(fileout);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::WriteFeeEstimates() : unable to write policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\");\n         return false;\n     }\n     return true;\n@@ -671,13 +671,13 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n         int nVersionRequired, nVersionThatWrote;\n         filein >> nVersionRequired >> nVersionThatWrote;\n         if (nVersionRequired > CLIENT_VERSION)\n-            return error(\"CTxMemPool::ReadFeeEstimates() : up-version (%d) fee estimate file\", nVersionRequired);\n+            return error(\"CTxMemPool::ReadFeeEstimates(): up-version (%d) fee estimate file\", nVersionRequired);\n \n         LOCK(cs);\n         minerPolicyEstimator->Read(filein, minRelayFee);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::ReadFeeEstimates() : unable to read policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\");\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "d66a4465c53f494d15dbae26f39dad8a53a77abb",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -88,7 +88,7 @@ CPubKey CWallet::GenerateNewKey()\n         nTimeFirstKey = nCreationTime;\n \n     if (!AddKeyPubKey(secret, pubkey))\n-        throw std::runtime_error(\"CWallet::GenerateNewKey() : AddKey failed\");\n+        throw std::runtime_error(\"CWallet::GenerateNewKey(): AddKey failed\");\n     return pubkey;\n }\n \n@@ -619,7 +619,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n                     wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n                 }\n                 else\n-                    LogPrintf(\"AddToWallet() : found %s in block %s not in index\\n\",\n+                    LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n                              wtxIn.GetHash().ToString(),\n                              wtxIn.hashBlock.ToString());\n             }\n@@ -1616,7 +1616,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         if (!wtxNew.AcceptToMemoryPool(false))\n         {\n             // This must not fail. The transaction has already been signed and recorded.\n-            LogPrintf(\"CommitTransaction() : Error: Transaction not valid\");\n+            LogPrintf(\"CommitTransaction(): Error: Transaction not valid\");\n             return false;\n         }\n         wtxNew.RelayWalletTransaction();\n@@ -1809,7 +1809,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             if (!setKeyPool.empty())\n                 nEnd = *(--setKeyPool.end()) + 1;\n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey())))\n-                throw runtime_error(\"TopUpKeyPool() : writing generated key failed\");\n+                throw runtime_error(\"TopUpKeyPool(): writing generated key failed\");\n             setKeyPool.insert(nEnd);\n             LogPrintf(\"keypool added key %d, size=%u\\n\", nEnd, setKeyPool.size());\n         }\n@@ -1836,9 +1836,9 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool)\n         nIndex = *(setKeyPool.begin());\n         setKeyPool.erase(setKeyPool.begin());\n         if (!walletdb.ReadPool(nIndex, keypool))\n-            throw runtime_error(\"ReserveKeyFromKeyPool() : read failed\");\n+            throw runtime_error(\"ReserveKeyFromKeyPool(): read failed\");\n         if (!HaveKey(keypool.vchPubKey.GetID()))\n-            throw runtime_error(\"ReserveKeyFromKeyPool() : unknown key in key pool\");\n+            throw runtime_error(\"ReserveKeyFromKeyPool(): unknown key in key pool\");\n         assert(keypool.vchPubKey.IsValid());\n         LogPrintf(\"keypool reserve %d\\n\", nIndex);\n     }\n@@ -2086,11 +2086,11 @@ void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw runtime_error(\"GetAllReserveKeyHashes() : read failed\");\n+            throw runtime_error(\"GetAllReserveKeyHashes(): read failed\");\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         if (!HaveKey(keyID))\n-            throw runtime_error(\"GetAllReserveKeyHashes() : unknown key in key pool\");\n+            throw runtime_error(\"GetAllReserveKeyHashes(): unknown key in key pool\");\n         setAddress.insert(keyID);\n     }\n }\n@@ -2303,7 +2303,7 @@ int CMerkleTx::SetMerkleBranch(const CBlock& block)\n     {\n         vMerkleBranch.clear();\n         nIndex = -1;\n-        LogPrintf(\"ERROR: SetMerkleBranch() : couldn't find tx in block\\n\");\n+        LogPrintf(\"ERROR: SetMerkleBranch(): couldn't find tx in block\\n\");\n         return 0;\n     }\n "
      },
      {
        "sha": "aaff00b71660ff10e5257ac39dd6deb2d410e685",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -320,14 +320,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const\n     {\n         if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n+            throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n         return ((IsMine(txout) & filter) ? txout.nValue : 0);\n     }\n     bool IsChange(const CTxOut& txout) const;\n     CAmount GetChange(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n+            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n         return (IsChange(txout) ? txout.nValue : 0);\n     }\n     bool IsMine(const CTransaction& tx) const\n@@ -349,7 +349,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nDebit += GetDebit(txin, filter);\n             if (!MoneyRange(nDebit))\n-                throw std::runtime_error(\"CWallet::GetDebit() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n         }\n         return nDebit;\n     }\n@@ -360,7 +360,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nCredit += GetCredit(txout, filter);\n             if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n         }\n         return nCredit;\n     }\n@@ -371,7 +371,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nChange += GetChange(txout);\n             if (!MoneyRange(nChange))\n-                throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n         }\n         return nChange;\n     }\n@@ -804,7 +804,7 @@ class CWalletTx : public CMerkleTx\n                 const CTxOut &txout = vout[i];\n                 nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n                 if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n             }\n         }\n \n@@ -847,7 +847,7 @@ class CWalletTx : public CMerkleTx\n                 const CTxOut &txout = vout[i];\n                 nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n                 if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n             }\n         }\n "
      },
      {
        "sha": "b2daf036ff7308f6cc3df1282e2d08b58c35bcbf",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -210,7 +210,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n \n     Dbc* pcursor = GetCursor();\n     if (!pcursor)\n-        throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : cannot create DB cursor\");\n+        throw runtime_error(\"CWalletDB::ListAccountCreditDebit(): cannot create DB cursor\");\n     unsigned int fFlags = DB_SET_RANGE;\n     while (true)\n     {\n@@ -226,7 +226,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n         else if (ret != 0)\n         {\n             pcursor->close();\n-            throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : error scanning DB\");\n+            throw runtime_error(\"CWalletDB::ListAccountCreditDebit(): error scanning DB\");\n         }\n \n         // Unserialize"
      }
    ]
  },
  {
    "sha": "bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDJiNzNiYjliNDE2MTM5YTBmYmFmNmViMjEzMTM1NmE1OTE4NGE2",
    "commit": {
      "author": {
        "name": "Vitalii Demianets",
        "email": "vitalii@orsoc.se",
        "date": "2015-01-14T09:25:06Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "TRIVIAL: fix misleading comment",
      "tree": {
        "sha": "a094a676ee3745736451ee17dcbef22b54e41f49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a094a676ee3745736451ee17dcbef22b54e41f49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd2b73bb9b416139a0fbaf6eb2131356a59184a6/comments",
    "author": {
      "login": "dvitas",
      "id": 5735415,
      "node_id": "MDQ6VXNlcjU3MzU0MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5735415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dvitas",
      "html_url": "https://github.com/dvitas",
      "followers_url": "https://api.github.com/users/dvitas/followers",
      "following_url": "https://api.github.com/users/dvitas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dvitas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dvitas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dvitas/subscriptions",
      "organizations_url": "https://api.github.com/users/dvitas/orgs",
      "repos_url": "https://api.github.com/users/dvitas/repos",
      "events_url": "https://api.github.com/users/dvitas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dvitas/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5262fde0ecd19f1febbfcd488f2be41c5dffd047"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f43d8c58b63b4552cdc3e653e70363b4c3bd881b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd2b73bb9b416139a0fbaf6eb2131356a59184a6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd2b73bb9b416139a0fbaf6eb2131356a59184a6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
        "patch": "@@ -744,7 +744,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // non-standard. Note that this EvalScript() call will\n         // be quick, because if there are any operations\n         // beside \"push data\" in the scriptSig\n-        // IsStandard() will have already returned false\n+        // IsStandardTx() will have already returned false\n         // and this method isn't called.\n         vector<vector<unsigned char> > stack;\n         if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))"
      }
    ]
  },
  {
    "sha": "5a809ef0f009bb6c412b5bf5f846feecfb133d70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTgwOWVmMGYwMDliYjZjNDEyYjViZjVmODQ2ZmVlY2ZiMTMzZDcw",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-01-18T07:24:09Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "depends: fix typos",
      "tree": {
        "sha": "a3ab195bad8130188cc989825c83b33b381edc01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3ab195bad8130188cc989825c83b33b381edc01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a809ef0f009bb6c412b5bf5f846feecfb133d70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a809ef0f009bb6c412b5bf5f846feecfb133d70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a809ef0f009bb6c412b5bf5f846feecfb133d70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a809ef0f009bb6c412b5bf5f846feecfb133d70/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd2b73bb9b416139a0fbaf6eb2131356a59184a6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "55e7222697f146e39ae4479bb2f6266463affa99",
        "filename": "depends/README",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a809ef0f009bb6c412b5bf5f846feecfb133d70/depends/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a809ef0f009bb6c412b5bf5f846feecfb133d70/depends/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README?ref=5a809ef0f009bb6c412b5bf5f846feecfb133d70",
        "patch": "@@ -7,7 +7,7 @@ There are several features that make it different from most similar systems:\n \n In theory, binaries for any target OS/architecture can be created, from a\n builder running any OS/architecture. In practice, build-side tools must be\n-specified when the defaults don't fit, and packages must be ammended to work\n+specified when the defaults don't fit, and packages must be amended to work\n on new hosts. For now, a build architecture of x86_64 is assumed, either on\n Linux or OSX.\n "
      },
      {
        "sha": "b407737f7f4815fdfddca21a15824a2b964218ff",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a809ef0f009bb6c412b5bf5f846feecfb133d70/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a809ef0f009bb6c412b5bf5f846feecfb133d70/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=5a809ef0f009bb6c412b5bf5f846feecfb133d70",
        "patch": "@@ -205,7 +205,7 @@ endef\n # These functions create the build targets for each package. They must be\n # broken down into small steps so that each part is done for all packages\n # before moving on to the next step. Otherwise, a package's info\n-# (build-id for example) would only be avilable to another package if it\n+# (build-id for example) would only be available to another package if it\n # happened to be computed already.\n \n #set the type for host/build packages."
      }
    ]
  },
  {
    "sha": "faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWYwYWY0OWY1N2YzYjZmNzE2MWVjZDVkZGM4MGYyYTYyOWVmYzY4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-01-19T19:16:49Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "Suggest --disable-wallet when libdb_cxx headers are missing",
      "tree": {
        "sha": "ad13d6080f166f9aa5b5d2b05f657cb10be27030",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad13d6080f166f9aa5b5d2b05f657cb10be27030"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a809ef0f009bb6c412b5bf5f846feecfb133d70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a809ef0f009bb6c412b5bf5f846feecfb133d70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a809ef0f009bb6c412b5bf5f846feecfb133d70"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0bf558d25b5e904fe40340bb29115baaf32da190",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
        "patch": "@@ -38,7 +38,7 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n   done\n   if test \"x$bdbpath\" = \"xX\"; then\n     AC_MSG_RESULT([no])\n-    AC_MSG_ERROR(libdb_cxx headers missing)\n+    AC_MSG_ERROR([libdb_cxx headers missing, Bitcoin Core requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n   elif test \"x$bdb48path\" = \"xX\"; then\n     BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n     AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],["
      }
    ]
  },
  {
    "sha": "34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGM2MTgxM2E0MDFiZThmNjVlYmFkY2M2ZmUyYjgyYzFhODNiMjhi",
    "commit": {
      "author": {
        "name": "Matt Bogosian",
        "email": "mtb19@columbia.edu",
        "date": "2015-01-23T03:54:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "Fix README link from util.sh -> util.py.",
      "tree": {
        "sha": "9822cd5f82cb240f6a82a3a18420caa8d2e4d831",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9822cd5f82cb240f6a82a3a18420caa8d2e4d831"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34c61813a401be8f65ebadcc6fe2b82c1a83b28b/comments",
    "author": {
      "login": "posita",
      "id": 222581,
      "node_id": "MDQ6VXNlcjIyMjU4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/222581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/posita",
      "html_url": "https://github.com/posita",
      "followers_url": "https://api.github.com/users/posita/followers",
      "following_url": "https://api.github.com/users/posita/following{/other_user}",
      "gists_url": "https://api.github.com/users/posita/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/posita/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/posita/subscriptions",
      "organizations_url": "https://api.github.com/users/posita/orgs",
      "repos_url": "https://api.github.com/users/posita/repos",
      "events_url": "https://api.github.com/users/posita/events{/privacy}",
      "received_events_url": "https://api.github.com/users/posita/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "02170d13ec31b3decb0cdcac82a593d04e3bfd78",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34c61813a401be8f65ebadcc6fe2b82c1a83b28b/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34c61813a401be8f65ebadcc6fe2b82c1a83b28b/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
        "patch": "@@ -12,7 +12,7 @@ Base class for new regression tests.\n ### [listtransactions.py](listtransactions.py)\n Tests for the listtransactions RPC call.\n \n-### [util.py](util.sh)\n+### [util.py](util.py)\n Generally useful functions.\n \n Bash-based tests, to be ported to Python:"
      }
    ]
  },
  {
    "sha": "1fa89a54e8c207564ea7acd262e6389174feaed9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmE4OWE1NGU4YzIwNzU2NGVhN2FjZDI2MmU2Mzg5MTc0ZmVhZWQ5",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2015-01-24T03:30:06Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "fix _code_ snippet in gitian-building.md\n\nTrivial typo-like fix",
      "tree": {
        "sha": "29caf85c0d4870386ac97b06efa755aadfec8f46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29caf85c0d4870386ac97b06efa755aadfec8f46"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fa89a54e8c207564ea7acd262e6389174feaed9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa89a54e8c207564ea7acd262e6389174feaed9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fa89a54e8c207564ea7acd262e6389174feaed9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa89a54e8c207564ea7acd262e6389174feaed9/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34c61813a401be8f65ebadcc6fe2b82c1a83b28b"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "25d3b8390c5049fc322bd1538a881e29f83b5517",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fa89a54e8c207564ea7acd262e6389174feaed9/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fa89a54e8c207564ea7acd262e6389174feaed9/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=1fa89a54e8c207564ea7acd262e6389174feaed9",
        "patch": "@@ -326,6 +326,7 @@ At any time you can check the package installation and build progress with\n ```bash\n tail -f var/install.log\n tail -f var/build.log\n+```\n \n Output from `gbuild` will look something like\n "
      }
    ]
  },
  {
    "sha": "ee932025c1a318943a6b101be9fe7a4a2e10648c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTkzMjAyNWMxYTMxODk0M2E2YjEwMWJlOWZlN2E0YTJlMTA2NDhj",
    "commit": {
      "author": {
        "name": "bikinibabe",
        "email": "amberwelch@unomaha.edu",
        "date": "2015-01-31T20:07:55Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "Changed pronouns for correctness and inclusivity",
      "tree": {
        "sha": "cca272581d2cb6b9bf39283f3e4ab26da032a4fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cca272581d2cb6b9bf39283f3e4ab26da032a4fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee932025c1a318943a6b101be9fe7a4a2e10648c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee932025c1a318943a6b101be9fe7a4a2e10648c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee932025c1a318943a6b101be9fe7a4a2e10648c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee932025c1a318943a6b101be9fe7a4a2e10648c/comments",
    "author": {
      "login": "bikinibabe",
      "id": 10789532,
      "node_id": "MDQ6VXNlcjEwNzg5NTMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/10789532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bikinibabe",
      "html_url": "https://github.com/bikinibabe",
      "followers_url": "https://api.github.com/users/bikinibabe/followers",
      "following_url": "https://api.github.com/users/bikinibabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/bikinibabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bikinibabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bikinibabe/subscriptions",
      "organizations_url": "https://api.github.com/users/bikinibabe/orgs",
      "repos_url": "https://api.github.com/users/bikinibabe/repos",
      "events_url": "https://api.github.com/users/bikinibabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bikinibabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fa89a54e8c207564ea7acd262e6389174feaed9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa89a54e8c207564ea7acd262e6389174feaed9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fa89a54e8c207564ea7acd262e6389174feaed9"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0984f689a8314e4b15c849f8bd8282793bbc0b02",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee932025c1a318943a6b101be9fe7a4a2e10648c/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee932025c1a318943a6b101be9fe7a4a2e10648c/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=ee932025c1a318943a6b101be9fe7a4a2e10648c",
        "patch": "@@ -196,7 +196,7 @@ Hardening enables the following features:\n * Position Independent Executable\n     Build position independent code to take advantage of Address Space Layout Randomization\n     offered by some kernels. An attacker who is able to cause execution of code at an arbitrary\n-    memory location is thwarted if he doesn't know where anything useful is located.\n+    memory location is thwarted if he or she doesn't know where anything useful is located.\n     The stack and heap are randomly located by default but this allows the code section to be\n     randomly located as well.\n "
      },
      {
        "sha": "3e63493dc6eb4bbbf8f484af65e6ae5067b5de9d",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee932025c1a318943a6b101be9fe7a4a2e10648c/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee932025c1a318943a6b101be9fe7a4a2e10648c/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=ee932025c1a318943a6b101be9fe7a4a2e10648c",
        "patch": "@@ -61,7 +61,7 @@ def run_test (self):\n         walletinfo = self.nodes[0].getwalletinfo()\n         assert_equal(walletinfo['immature_balance'], 0)\n \n-        # Have node0 mine a block, thus he will collect his own fee. \n+        # Have node0 mine a block, thus they will collect their own fee. \n         self.nodes[0].setgenerate(True, 1)\n         self.sync_all()\n "
      },
      {
        "sha": "7ca825c16fcca1fcf6de283280f8897055520b45",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee932025c1a318943a6b101be9fe7a4a2e10648c/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee932025c1a318943a6b101be9fe7a4a2e10648c/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=ee932025c1a318943a6b101be9fe7a4a2e10648c",
        "patch": "@@ -81,7 +81,7 @@ class CCheckQueue\n                     fAllOk &= fOk;\n                     nTodo -= nNow;\n                     if (nTodo == 0 && !fMaster)\n-                        // We processed the last element; inform the master he can exit and return the result\n+                        // We processed the last element; inform the master he or she can exit and return the result\n                         condMaster.notify_one();\n                 } else {\n                     // first iteration"
      }
    ]
  },
  {
    "sha": "1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzcxZTZmNWRiODg5NDFjM2IzYzcwZDdhMTNiMGNiZjE1MGViZjY2",
    "commit": {
      "author": {
        "name": "Daira Hopwood",
        "email": "daira@jacaranda.org",
        "date": "2015-01-31T02:54:55Z"
      },
      "committer": {
        "name": "Daira Hopwood",
        "email": "daira@jacaranda.org",
        "date": "2015-01-31T23:23:20Z"
      },
      "message": "Change \"insane\" to \"absurd\" (referring to high fees) in text strings and identifiers.\n\nNote that this will also require translation changes in Transifex for the key\n\"A fee higher than %1 is considered an insanely high fee.\" which is now\n\"A fee higher than %1 is considered an absurdly high fee.\"\n\nSigned-off-by: Daira Hopwood <daira@jacaranda.org>",
      "tree": {
        "sha": "f5526ecad0a1277ea6ee0acf5147968bf19efe02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5526ecad0a1277ea6ee0acf5147968bf19efe02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/comments",
    "author": {
      "login": "daira",
      "id": 643204,
      "node_id": "MDQ6VXNlcjY0MzIwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/643204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daira",
      "html_url": "https://github.com/daira",
      "followers_url": "https://api.github.com/users/daira/followers",
      "following_url": "https://api.github.com/users/daira/following{/other_user}",
      "gists_url": "https://api.github.com/users/daira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daira/subscriptions",
      "organizations_url": "https://api.github.com/users/daira/orgs",
      "repos_url": "https://api.github.com/users/daira/repos",
      "events_url": "https://api.github.com/users/daira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daira/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "daira",
      "id": 643204,
      "node_id": "MDQ6VXNlcjY0MzIwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/643204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daira",
      "html_url": "https://github.com/daira",
      "followers_url": "https://api.github.com/users/daira/followers",
      "following_url": "https://api.github.com/users/daira/following{/other_user}",
      "gists_url": "https://api.github.com/users/daira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daira/subscriptions",
      "organizations_url": "https://api.github.com/users/daira/orgs",
      "repos_url": "https://api.github.com/users/daira/repos",
      "events_url": "https://api.github.com/users/daira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daira/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af674ecdc99db2eb741b8dc79e44bd0202e3855"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "35118cebe5c025bac42eb5152f64473f1ef46325",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "patch": "@@ -904,7 +904,7 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n \n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectInsaneFee)\n+                        bool* pfMissingInputs, bool fRejectAbsurdFee)\n {\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n@@ -1063,8 +1063,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             dFreeCount += nSize;\n         }\n \n-        if (fRejectInsaneFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n-            return error(\"AcceptToMemoryPool: insane fees %s, %d > %d\",\n+        if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n+            return error(\"AcceptToMemoryPool: absurdly high fees %s, %d > %d\",\n                          hash.ToString(),\n                          nFees, ::minRelayTxFee.GetFee(nSize) * 10000);\n "
      },
      {
        "sha": "936cd43e99edb497ef022e0b7272d9df11c93be0",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "patch": "@@ -205,7 +205,7 @@ void FlushStateToDisk();\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectInsaneFee=false);\n+                        bool* pfMissingInputs, bool fRejectAbsurdFee=false);\n \n \n struct CNodeStateStats {"
      },
      {
        "sha": "5aef2d7539b1da6bd930d9bad9c8f46647b5ace6",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "patch": "@@ -526,8 +526,8 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         msgParams.first = tr(\"The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n         msgParams.second = CClientUIInterface::MSG_ERROR;\n         break;\n-    case WalletModel::InsaneFee:\n-        msgParams.first = tr(\"A fee higher than %1 is considered an insanely high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), 10000000));\n+    case WalletModel::AbsurdFee:\n+        msgParams.first = tr(\"A fee higher than %1 is considered an absurdly high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), 10000000));\n         break;\n     case WalletModel::PaymentRequestExpired:\n         msgParams.first = tr(\"Payment request expired!\");"
      },
      {
        "sha": "3893def9c249326e85d82c8e627c707ba24394d5",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "patch": "@@ -279,9 +279,9 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             return TransactionCreationFailed;\n         }\n \n-        // reject insane fee > 0.1 bitcoin\n+        // reject absurdly high fee > 0.1 bitcoin\n         if (nFeeRequired > 10000000)\n-            return InsaneFee;\n+            return AbsurdFee;\n     }\n \n     return SendCoinsReturn(OK);"
      },
      {
        "sha": "4a9a12beaa9d10c67f392fb8fd0ec668f12fc20f",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "patch": "@@ -111,7 +111,7 @@ class WalletModel : public QObject\n         DuplicateAddress,\n         TransactionCreationFailed, // Error returned when wallet is still locked\n         TransactionCommitFailed,\n-        InsaneFee,\n+        AbsurdFee,\n         PaymentRequestExpired\n     };\n "
      },
      {
        "sha": "31ceda9c3168d0045a5905cbd113fa2751918cc4",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "patch": "@@ -2365,9 +2365,9 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectInsaneFee)\n+bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee)\n {\n     CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectInsaneFee);\n+    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectAbsurdFee);\n }\n "
      },
      {
        "sha": "71d9d1fb6b25826ad08989fa14c67e063df6d60d",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "patch": "@@ -548,7 +548,7 @@ class CMerkleTx : public CTransaction\n     int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectInsaneFee=true);\n+    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n };\n \n /** "
      }
    ]
  },
  {
    "sha": "80ad135a5e54e8a065fee5ef36e57034679111ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGFkMTM1YTVlNTRlOGEwNjVmZWU1ZWYzNmU1NzAzNDY3OTExMWFi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-13T02:15:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-01T21:47:21Z"
      },
      "message": "Change IsDERSignature to BIP66 implementation",
      "tree": {
        "sha": "bcbcc9a15aeb8d1a3bcf519d78621f223f2bc7b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcbcc9a15aeb8d1a3bcf519d78621f223f2bc7b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80ad135a5e54e8a065fee5ef36e57034679111ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ad135a5e54e8a065fee5ef36e57034679111ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80ad135a5e54e8a065fee5ef36e57034679111ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ad135a5e54e8a065fee5ef36e57034679111ab/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af674ecdc99db2eb741b8dc79e44bd0202e3855"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 63,
      "deletions": 63
    },
    "files": [
      {
        "sha": "0a5bef601cb27d005cce3b30001a0ed86c9b0382",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 63,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80ad135a5e54e8a065fee5ef36e57034679111ab/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80ad135a5e54e8a065fee5ef36e57034679111ab/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=80ad135a5e54e8a065fee5ef36e57034679111ab",
        "patch": "@@ -93,76 +93,76 @@ bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {\n  * in which case a single 0 byte is necessary and even required).\n  * \n  * See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623\n+ *\n+ * This function is consensus-critical since BIP66.\n  */\n-bool static IsDERSignature(const valtype &vchSig) {\n+bool static IsValidSignatureEncoding(const std::vector<unsigned char> &sig) {\n+    // Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S] [sighash]\n+    // * total-length: 1-byte length descriptor of everything that follows,\n+    //   excluding the sighash byte.\n+    // * R-length: 1-byte length descriptor of the R value that follows.\n+    // * R: arbitrary-length big-endian encoded R value. It must use the shortest\n+    //   possible encoding for a positive integers (which means no null bytes at\n+    //   the start, except a single one when the next byte has its highest bit set).\n+    // * S-length: 1-byte length descriptor of the S value that follows.\n+    // * S: arbitrary-length big-endian encoded S value. The same rules apply.\n+    // * sighash: 1-byte value indicating what data is hashed (not part of the DER\n+    //   signature)\n \n-    if (vchSig.size() < 9) {\n-        //  Non-canonical signature: too short\n-        return false;\n-    }\n-    if (vchSig.size() > 73) {\n-        // Non-canonical signature: too long\n-        return false;\n-    }\n-    if (vchSig[0] != 0x30) {\n-        //  Non-canonical signature: wrong type\n-        return false;\n-    }\n-    if (vchSig[1] != vchSig.size()-3) {\n-        //  Non-canonical signature: wrong length marker\n-        return false;\n-    }\n-    unsigned int nLenR = vchSig[3];\n-    if (5 + nLenR >= vchSig.size()) {\n-        //  Non-canonical signature: S length misplaced\n-        return false;\n-    }\n-    unsigned int nLenS = vchSig[5+nLenR];\n-    if ((unsigned long)(nLenR+nLenS+7) != vchSig.size()) {\n-        //  Non-canonical signature: R+S length mismatch\n-        return false;\n-    }\n+    // Minimum and maximum size constraints.\n+    if (sig.size() < 9) return false;\n+    if (sig.size() > 73) return false;\n \n-    const unsigned char *R = &vchSig[4];\n-    if (R[-2] != 0x02) {\n-        //  Non-canonical signature: R value type mismatch\n-        return false;\n-    }\n-    if (nLenR == 0) {\n-        //  Non-canonical signature: R length is zero\n-        return false;\n-    }\n-    if (R[0] & 0x80) {\n-        //  Non-canonical signature: R value negative\n-        return false;\n-    }\n-    if (nLenR > 1 && (R[0] == 0x00) && !(R[1] & 0x80)) {\n-        //  Non-canonical signature: R value excessively padded\n-        return false;\n-    }\n+    // A signature is of type 0x30 (compound).\n+    if (sig[0] != 0x30) return false;\n+\n+    // Make sure the length covers the entire signature.\n+    if (sig[1] != sig.size() - 3) return false;\n+\n+    // Extract the length of the R element.\n+    unsigned int lenR = sig[3];\n+\n+    // Make sure the length of the S element is still inside the signature.\n+    if (5 + lenR >= sig.size()) return false;\n+\n+    // Extract the length of the S element.\n+    unsigned int lenS = sig[5 + lenR];\n+\n+    // Verify that the length of the signature matches the sum of the length\n+    // of the elements.\n+    if ((size_t)(lenR + lenS + 7) != sig.size()) return false;\n+ \n+    // Check whether the R element is an integer.\n+    if (sig[2] != 0x02) return false;\n+\n+    // Zero-length integers are not allowed for R.\n+    if (lenR == 0) return false;\n+\n+    // Negative numbers are not allowed for R.\n+    if (sig[4] & 0x80) return false;\n+\n+    // Null bytes at the start of R are not allowed, unless R would\n+    // otherwise be interpreted as a negative number.\n+    if (lenR > 1 && (sig[4] == 0x00) && !(sig[5] & 0x80)) return false;\n+\n+    // Check whether the S element is an integer.\n+    if (sig[lenR + 4] != 0x02) return false;\n+\n+    // Zero-length integers are not allowed for S.\n+    if (lenS == 0) return false;\n+\n+    // Negative numbers are not allowed for S.\n+    if (sig[lenR + 6] & 0x80) return false;\n+\n+    // Null bytes at the start of S are not allowed, unless S would otherwise be\n+    // interpreted as a negative number.\n+    if (lenS > 1 && (sig[lenR + 6] == 0x00) && !(sig[lenR + 7] & 0x80)) return false;\n \n-    const unsigned char *S = &vchSig[6+nLenR];\n-    if (S[-2] != 0x02) {\n-        //  Non-canonical signature: S value type mismatch\n-        return false;\n-    }\n-    if (nLenS == 0) {\n-        //  Non-canonical signature: S length is zero\n-        return false;\n-    }\n-    if (S[0] & 0x80) {\n-        //  Non-canonical signature: S value negative\n-        return false;\n-    }\n-    if (nLenS > 1 && (S[0] == 0x00) && !(S[1] & 0x80)) {\n-        //  Non-canonical signature: S value excessively padded\n-        return false;\n-    }\n     return true;\n }\n \n bool static IsLowDERSignature(const valtype &vchSig, ScriptError* serror) {\n-    if (!IsDERSignature(vchSig)) {\n+    if (!IsValidSignatureEncoding(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     }\n     unsigned int nLenR = vchSig[3];\n@@ -194,7 +194,7 @@ bool static CheckSignatureEncoding(const valtype &vchSig, unsigned int flags, Sc\n     if (vchSig.size() == 0) {\n         return true;\n     }\n-    if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsDERSignature(vchSig)) {\n+    if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsValidSignatureEncoding(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     } else if ((flags & SCRIPT_VERIFY_LOW_S) != 0 && !IsLowDERSignature(vchSig, serror)) {\n         // serror is set"
      }
    ]
  },
  {
    "sha": "092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTJlOWZlNWZiNjFmZjdjZTM4ZGMyODIwOTM4MTA2ZmMwZjAwODFk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-19T23:19:37Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-01T21:47:21Z"
      },
      "message": "Example unit tests from BIP66",
      "tree": {
        "sha": "75e17507afb81e2509d8fc0343f9dde4296e2db0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75e17507afb81e2509d8fc0343f9dde4296e2db0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/092e9fe5fb61ff7ce38dc2820938106fc0f0081d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80ad135a5e54e8a065fee5ef36e57034679111ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ad135a5e54e8a065fee5ef36e57034679111ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80ad135a5e54e8a065fee5ef36e57034679111ab"
      }
    ],
    "stats": {
      "total": 217,
      "additions": 217,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3a15acee9250bab52388bc419afc5a0836a9414e",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/092e9fe5fb61ff7ce38dc2820938106fc0f0081d/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/092e9fe5fb61ff7ce38dc2820938106fc0f0081d/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
        "patch": "@@ -589,6 +589,102 @@\n     \"DERSIG\",\n     \"P2PK NOT with too much R padding\"\n ],\n+[\n+    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 1, with DERSIG\"\n+],\n+[\n+    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"\",\n+    \"BIP66 example 2, without DERSIG\"\n+],\n+[\n+    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 2, with DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"BIP66 example 3, without DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 3, with DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"BIP66 example 5, without DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 5, with DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 6, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x304402200b3d0b0375bb15c14620afa4aa10ae90a0d6a046ce217bc20fe0bc1ced68c1b802204b550acab90ae6d3478057c9ad24f9df743815b799b6449dd7e7f6d3bc6e274c01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 7, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"BIP66 example 8, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 8, with DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"BIP66 example 9, without DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 9, with DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x30440220afa76a8f60622f813b05711f051c6c3407e32d1b1b70b0576c1f01b54e4c05c702200d58e9df044fd1845cabfbeef6e624ba0401daf7d7e084736f9ff601c3783bf501\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 10, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"BIP66 example 11, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 11, with DERSIG\"\n+],\n [\n     \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\","
      },
      {
        "sha": "710d4f77076964878ab4821fe12aff8355e8b3da",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/092e9fe5fb61ff7ce38dc2820938106fc0f0081d/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/092e9fe5fb61ff7ce38dc2820938106fc0f0081d/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
        "patch": "@@ -755,6 +755,54 @@\n     \"\",\n     \"P2PK NOT with bad sig with too much R padding but no DERSIG\"\n ],\n+[\n+    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"BIP66 example 1, without DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"\",\n+    \"BIP66 example 4, without DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 4, with DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"\",\n+    \"BIP66 example 6, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x304402200b3d0b0375bb15c14620afa4aa10ae90a0d6a046ce217bc20fe0bc1ced68c1b802204b550acab90ae6d3478057c9ad24f9df743815b799b6449dd7e7f6d3bc6e274c01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"BIP66 example 7, without DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x30440220afa76a8f60622f813b05711f051c6c3407e32d1b1b70b0576c1f01b54e4c05c702200d58e9df044fd1845cabfbeef6e624ba0401daf7d7e084736f9ff601c3783bf501\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"BIP66 example 10, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"BIP66 example 12, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 12, with DERSIG\"\n+],\n [\n     \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\","
      },
      {
        "sha": "c25e8317a2b531bfc4dd629fb6e909625186ee7b",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/092e9fe5fb61ff7ce38dc2820938106fc0f0081d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/092e9fe5fb61ff7ce38dc2820938106fc0f0081d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
        "patch": "@@ -406,6 +406,79 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n \n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                               \"BIP66 example 1, without DERSIG\", 0\n+                              ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 1, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                              \"BIP66 example 2, without DERSIG\", 0\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                              \"BIP66 example 2, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 3, without DERSIG\", 0\n+                             ).Num(0));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 3, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                               \"BIP66 example 4, without DERSIG\", 0\n+                              ).Num(0));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                               \"BIP66 example 4, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                              ).Num(0));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 5, without DERSIG\", 0\n+                             ).Num(1));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 5, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(1));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                               \"BIP66 example 6, without DERSIG\", 0\n+                              ).Num(1));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                              \"BIP66 example 6, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(1));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                               \"BIP66 example 7, without DERSIG\", 0\n+                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 7, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"BIP66 example 8, without DERSIG\", 0\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"BIP66 example 8, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 9, without DERSIG\", 0\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 9, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"BIP66 example 10, without DERSIG\", 0\n+                              ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"BIP66 example 10, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 11, without DERSIG\", 0\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 11, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"BIP66 example 12, without DERSIG\", 0\n+                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"BIP66 example 12, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with high S but no LOW_S\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));"
      }
    ]
  },
  {
    "sha": "5a47811da5158df763aa2fca09ce646ee0c51e7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTQ3ODExZGE1MTU4ZGY3NjNhYTJmY2EwOWNlNjQ2ZWUwYzUxZTdi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-19T23:37:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-01T21:51:24Z"
      },
      "message": "BIP66 changeover logic",
      "tree": {
        "sha": "b94bdd9ae683fa5e449e37ab78b7419b8d9f409b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b94bdd9ae683fa5e449e37ab78b7419b8d9f409b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a47811da5158df763aa2fca09ce646ee0c51e7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a47811da5158df763aa2fca09ce646ee0c51e7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a47811da5158df763aa2fca09ce646ee0c51e7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a47811da5158df763aa2fca09ce646ee0c51e7b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/092e9fe5fb61ff7ce38dc2820938106fc0f0081d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/092e9fe5fb61ff7ce38dc2820938106fc0f0081d"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f20575eaf2f18f42904f23e23eb5485818f94f94",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5a47811da5158df763aa2fca09ce646ee0c51e7b",
        "patch": "@@ -1764,6 +1764,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n+    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n+    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, Params().EnforceBlockUpgradeMajority())) {\n+        flags |= SCRIPT_VERIFY_DERSIG;\n+    }\n+\n     CBlockUndo blockundo;\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n@@ -2601,6 +2606,13 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n                              REJECT_OBSOLETE, \"bad-version\");\n     }\n \n+    // Reject block.nVersion=2 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (block.nVersion < 3 && IsSuperMajority(3, pindexPrev, Params().RejectBlockOutdatedMajority()))\n+    {\n+        return state.Invalid(error(\"%s : rejected nVersion=2 block\", __func__),\n+                             REJECT_OBSOLETE, \"bad-version\");\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "c7ed6f723a4d35c77eec7fb40e90e92b6f2b531b",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=5a47811da5158df763aa2fca09ce646ee0c51e7b",
        "patch": "@@ -24,7 +24,7 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int32_t CURRENT_VERSION=2;\n+    static const int32_t CURRENT_VERSION=3;\n     int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;"
      },
      {
        "sha": "0320577797873e2b03e50930f4330cc58ec9c692",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=5a47811da5158df763aa2fca09ce646ee0c51e7b",
        "patch": "@@ -46,6 +46,7 @@ enum\n {\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE      = 0,\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG    = (1U << 2), // enforce strict DER (BIP66) compliance\n };\n \n /// Returns 1 if the input nIn of the serialized transaction pointed to by"
      },
      {
        "sha": "92e2c27c13c860934829997972665ad422135673",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a47811da5158df763aa2fca09ce646ee0c51e7b/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=5a47811da5158df763aa2fca09ce646ee0c51e7b",
        "patch": "@@ -45,6 +45,7 @@ static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n  * blocks and we must accept those blocks.\n  */\n static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n+                                                         SCRIPT_VERIFY_DERSIG |\n                                                          SCRIPT_VERIFY_STRICTENC |\n                                                          SCRIPT_VERIFY_MINIMALDATA |\n                                                          SCRIPT_VERIFY_NULLDUMMY |"
      }
    ]
  },
  {
    "sha": "819bcf9b9902319176cdb1d476cacfee9b3727ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTliY2Y5Yjk5MDIzMTkxNzZjZGIxZDQ3NmNhY2ZlZTliMzcyN2Vj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-20T21:39:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-01T21:51:24Z"
      },
      "message": "Add RPC test for DERSIG BIP switchover logic",
      "tree": {
        "sha": "71649e3d97fe549ea8e705ea2d79ef1d8100640f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71649e3d97fe549ea8e705ea2d79ef1d8100640f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/819bcf9b9902319176cdb1d476cacfee9b3727ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/819bcf9b9902319176cdb1d476cacfee9b3727ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/819bcf9b9902319176cdb1d476cacfee9b3727ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/819bcf9b9902319176cdb1d476cacfee9b3727ec/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a47811da5158df763aa2fca09ce646ee0c51e7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a47811da5158df763aa2fca09ce646ee0c51e7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a47811da5158df763aa2fca09ce646ee0c51e7b"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 90,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9f2cc84601545796b87c6e181acb10e88e829e4f",
        "filename": "qa/rpc-tests/bipdersig.py",
        "status": "added",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/819bcf9b9902319176cdb1d476cacfee9b3727ec/qa/rpc-tests/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/819bcf9b9902319176cdb1d476cacfee9b3727ec/qa/rpc-tests/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig.py?ref=819bcf9b9902319176cdb1d476cacfee9b3727ec",
        "patch": "@@ -0,0 +1,90 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test the BIP66 changeover logic\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+import os\n+import shutil\n+\n+class BIP66Test(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, []))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=2\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=3\"]))\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[2], 0)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        cnt = self.nodes[0].getblockcount()\n+\n+        # Mine some old-version blocks\n+        self.nodes[1].setgenerate(True, 100)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 100):\n+            raise AssertionError(\"Failed to mine 100 version=2 blocks\")\n+\n+        # Mine 750 new-version blocks\n+        for i in xrange(15):\n+            self.nodes[2].setgenerate(True, 50)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 850):\n+            raise AssertionError(\"Failed to mine 750 version=3 blocks\")\n+\n+        # TODO: check that new DERSIG rules are not enforced\n+\n+        # Mine 1 new-version block\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 851):\n+            raise AssertionFailure(\"Failed to mine a version=3 blocks\")\n+\n+        # TODO: check that new DERSIG rules are enforced\n+\n+        # Mine 198 new-version blocks\n+        for i in xrange(2):\n+            self.nodes[2].setgenerate(True, 99)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1049):\n+            raise AssertionError(\"Failed to mine 198 version=3 blocks\")\n+\n+        # Mine 1 old-version block\n+        self.nodes[1].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1050):\n+            raise AssertionError(\"Failed to mine a version=2 block after 949 version=3 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Failed to mine a version=3 block\")\n+\n+        # Mine 1 old-version blocks\n+        try:\n+            self.nodes[1].setgenerate(True, 1)\n+            raise AssertionError(\"Succeeded to mine a version=2 block after 950 version=3 blocks\")\n+        except JSONRPCException:\n+            pass\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Accepted a version=2 block after 950 version=3 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1052):\n+            raise AssertionError(\"Failed to mine a version=3 block\")\n+\n+if __name__ == '__main__':\n+    BIP66Test().main()"
      }
    ]
  },
  {
    "sha": "bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjZjZGViZGM1Yjc1MGNlYTYxMjEwOTVkY2JiYmY3MjBiNzI2YmI5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-25T16:46:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-01T21:51:25Z"
      },
      "message": "Increase coverage of DERSIG edge cases",
      "tree": {
        "sha": "6d6fe9fa12794d31042ac6a311045cb41ab1da39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d6fe9fa12794d31042ac6a311045cb41ab1da39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf6cdebdc5b750cea6121095dcbbbf720b726bb9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "819bcf9b9902319176cdb1d476cacfee9b3727ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/819bcf9b9902319176cdb1d476cacfee9b3727ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/819bcf9b9902319176cdb1d476cacfee9b3727ec"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a67c157aff768f49666e0a55730eca2c10ae79fd",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf6cdebdc5b750cea6121095dcbbbf720b726bb9/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf6cdebdc5b750cea6121095dcbbbf720b726bb9/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
        "patch": "@@ -510,6 +510,16 @@\n     \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but first signature invalid.\"\n ],\n \n+[\"Increase DERSIG test coverage\"],\n+[\"0x4a 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Overly long signature is incorrectly encoded for DERSIG\"],\n+[\"0x25 0x30220220000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Missing S is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x3024021077777777777777777777777777777777020a7777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"S with invalid S length is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302403107777777777777777777777777777777702107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Non-integer R is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777703107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Non-integer S is incorrectly encoded for DERSIG\"],\n+[\"0x17 0x3014020002107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Zero-length R is incorrectly encoded for DERSIG\"],\n+[\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Zero-length S is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Negative S is incorrectly encoded for DERSIG\"],\n+\n [\"Automatically generated test cases\"],\n [\n     \"0x47 0x3044022053205076a7bb12d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\","
      },
      {
        "sha": "fb81fcb1f53f18375b2f957064f9038fc9e76d4b",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf6cdebdc5b750cea6121095dcbbbf720b726bb9/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf6cdebdc5b750cea6121095dcbbbf720b726bb9/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
        "patch": "@@ -688,6 +688,16 @@\n     \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but second signature invalid. Valid pubkey fails, and CHECKMULTISIG exits early, prior to evaluation of second invalid signature.\"\n ],\n \n+[\"Increase test coverage for DERSIG\"],\n+[\"0x4a 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"\", \"Overly long signature is correctly encoded\"],\n+[\"0x25 0x30220220000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"\", \"Missing S is correctly encoded\"],\n+[\"0x27 0x3024021077777777777777777777777777777777020a7777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"S with invalid S length is correctly encoded\"],\n+[\"0x27 0x302403107777777777777777777777777777777702107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Non-integer R is correctly encoded\"],\n+[\"0x27 0x302402107777777777777777777777777777777703107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Non-integer S is correctly encoded\"],\n+[\"0x17 0x3014020002107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Zero-length R is correctly encoded\"],\n+[\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"\", \"Zero-length S is correctly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Negative S is correctly encoded\"],\n+\n [\"Automatically generated test cases\"],\n [\n     \"0x47 0x3044022053205076a7bb13d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\","
      }
    ]
  },
  {
    "sha": "a62649731fb1babaedff10b7c0baec4c50c90d60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjI2NDk3MzFmYjFiYWJhZWRmZjEwYjdjMGJhZWM0YzUwYzkwZDYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-02T10:55:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-02T10:56:23Z"
      },
      "message": "Merge pull request #5731\n\nee93202 Changed pronouns for correctness and inclusivity (bikinibabe)\n1fa89a5 fix _code_ snippet in gitian-building.md (UdjinM6)\n34c6181 Fix README link from util.sh -> util.py. (Matt Bogosian)\nfaf0af4 Suggest --disable-wallet when libdb_cxx headers are missing (Luke Dashjr)\n5a809ef depends: fix typos (Michael Ford)\nbd2b73b TRIVIAL: fix misleading comment (Vitalii Demianets)\n5262fde Remove whitespaces before double colon in errors and logs (Pavel Jan\u00edk)\n3800135 Fix typo (Pavel Jan\u00edk)\n91a9fe0 Fix typo - sentence starts with capital letter (Pavel Jan\u00edk)\nbfc29dc Improve gitian build guide (Michael Ford)\nd6bed15 remove sig_canonical.json and sig_noncanonical.json (Manuel Araoz)\n8673160 Remove bootstrap.md (Michael Ford)",
      "tree": {
        "sha": "cca272581d2cb6b9bf39283f3e4ab26da032a4fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cca272581d2cb6b9bf39283f3e4ab26da032a4fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a62649731fb1babaedff10b7c0baec4c50c90d60",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUz1fXAAoJEHSBCwEjRsmm0ocIALToIsc07e+d0sXNFL5E6F8H\nfBTuSDd0XznLFgKhE7t98a42/K6TjcBCvQg+U1gLrfnkLgWJ0qxaYgyrozkgeP4B\nlUKkc8vVAARUL/xJM071KUhbhrZ1gmvczGcdCxBVi0IOlcpZonUmJC+b3t2FZ9c9\nJYYVynOwpzq2eoyvVkr7HBiCIB3eokc7b4YBGMbVYIP7dUL+vx08GShTMWE1Wkdb\nWx4OSPmGFR5WdEMNo6EJ8gkDJHMjEy8QED9uovV6U/nPAtPyy+bpy/oo6b30Pxhw\n93CfU0MoJJxC67t5neAs6Fk7JALabnVU131J/mAzkNQavSQACXuf2Xg0pfjXkWA=\n=SPUR\n-----END PGP SIGNATURE-----",
        "payload": "tree cca272581d2cb6b9bf39283f3e4ab26da032a4fc\nparent 6af674ecdc99db2eb741b8dc79e44bd0202e3855\nparent ee932025c1a318943a6b101be9fe7a4a2e10648c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422874542 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422874583 +0100\n\nMerge pull request #5731\n\nee93202 Changed pronouns for correctness and inclusivity (bikinibabe)\n1fa89a5 fix _code_ snippet in gitian-building.md (UdjinM6)\n34c6181 Fix README link from util.sh -> util.py. (Matt Bogosian)\nfaf0af4 Suggest --disable-wallet when libdb_cxx headers are missing (Luke Dashjr)\n5a809ef depends: fix typos (Michael Ford)\nbd2b73b TRIVIAL: fix misleading comment (Vitalii Demianets)\n5262fde Remove whitespaces before double colon in errors and logs (Pavel Jan\u00edk)\n3800135 Fix typo (Pavel Jan\u00edk)\n91a9fe0 Fix typo - sentence starts with capital letter (Pavel Jan\u00edk)\nbfc29dc Improve gitian build guide (Michael Ford)\nd6bed15 remove sig_canonical.json and sig_noncanonical.json (Manuel Araoz)\n8673160 Remove bootstrap.md (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62649731fb1babaedff10b7c0baec4c50c90d60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a62649731fb1babaedff10b7c0baec4c50c90d60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62649731fb1babaedff10b7c0baec4c50c90d60/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af674ecdc99db2eb741b8dc79e44bd0202e3855"
      },
      {
        "sha": "ee932025c1a318943a6b101be9fe7a4a2e10648c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee932025c1a318943a6b101be9fe7a4a2e10648c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee932025c1a318943a6b101be9fe7a4a2e10648c"
      }
    ],
    "stats": {
      "total": 577,
      "additions": 244,
      "deletions": 333
    },
    "files": [
      {
        "sha": "0bf558d25b5e904fe40340bb29115baaf32da190",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -38,7 +38,7 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n   done\n   if test \"x$bdbpath\" = \"xX\"; then\n     AC_MSG_RESULT([no])\n-    AC_MSG_ERROR(libdb_cxx headers missing)\n+    AC_MSG_ERROR([libdb_cxx headers missing, Bitcoin Core requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n   elif test \"x$bdb48path\" = \"xX\"; then\n     BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n     AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],["
      },
      {
        "sha": "55e7222697f146e39ae4479bb2f6266463affa99",
        "filename": "depends/README",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/depends/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/depends/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -7,7 +7,7 @@ There are several features that make it different from most similar systems:\n \n In theory, binaries for any target OS/architecture can be created, from a\n builder running any OS/architecture. In practice, build-side tools must be\n-specified when the defaults don't fit, and packages must be ammended to work\n+specified when the defaults don't fit, and packages must be amended to work\n on new hosts. For now, a build architecture of x86_64 is assumed, either on\n Linux or OSX.\n "
      },
      {
        "sha": "b407737f7f4815fdfddca21a15824a2b964218ff",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -205,7 +205,7 @@ endef\n # These functions create the build targets for each package. They must be\n # broken down into small steps so that each part is done for all packages\n # before moving on to the next step. Otherwise, a package's info\n-# (build-id for example) would only be avilable to another package if it\n+# (build-id for example) would only be available to another package if it\n # happened to be computed already.\n \n #set the type for host/build packages."
      },
      {
        "sha": "0ade8f99238abb37a616b51a4fcfc2eb23ffc8d3",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -3,7 +3,7 @@ Bitcoin Core 0.10.99\n \n Setup\n ---------------------\n-[Bitcoin Core](http://bitcoin.org/en/download) is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more. Thankfully you only have to do this once. If you would like the process to go faster you can [download the blockchain directly](bootstrap.md).\n+[Bitcoin Core](http://bitcoin.org/en/download) is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n \n Running\n ---------------------"
      },
      {
        "sha": "b84fd24b11d9270a5c3b23dfdb2b2e77ede2ecbd",
        "filename": "doc/bootstrap.md",
        "status": "removed",
        "additions": 0,
        "deletions": 56,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6af674ecdc99db2eb741b8dc79e44bd0202e3855/doc/bootstrap.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6af674ecdc99db2eb741b8dc79e44bd0202e3855/doc/bootstrap.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bootstrap.md?ref=6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "patch": "@@ -1,56 +0,0 @@\n-### Bootstrap the Blockchain Synchronization\n-\n-Normally the Bitcoin client will download the transaction and network information, called the blockchain, from the network by syncing with the other clients. This process can take quite some time as the [Bitcoin blockchain](https://blockchain.info/charts/blocks-size) is growing bigger and bigger for each day. Luckily there is a safe and fast way to speed up this process. We'll show you how to bootstrap your blockchain to bring your client up to speed in just a few simple steps.\n-\n-### Requirements\n-\n-- A fresh install of the Bitcoin client software.\n-\n-### Download the blockchain via BitTorrent\n-\n-Jeff Garzik, Bitcoin Core developer, offers an [torrent file](https://bitcointalk.org/index.php?topic=145386.0) for bootstrapping purposes that is updated often. BitTorrent is a protocol that speeds up the downloading of large files by using the other clients in the network. Examples of free and safe open source clients are [Deluge](http://deluge-torrent.org/) or [qBittorrent](http://www.qbittorrent.org/). A guide to installing and configuring the torrent clients can be found [here](http://dev.deluge-torrent.org/wiki/UserGuide) for Deluge and [here](http://qbforums.shiki.hu/) for qBittorrent. A further in-depth tutorial on BitTorrent can be found [here](http://www.howtogeek.com/howto/31846/bittorrent-for-beginners-how-get-started-downloading-torrents/).\n-\n-With the client installed we'll proceed to download the blockchain torrent file. Use the following magnet link:\n-\n-\tmagnet:?xt=urn:btih:2d4e6c1f96c5d5fb260dff92aea4e600227f1aea&dn=bootstrap.dat&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.ccc.de:80&tr=udp://tracker.istole.it:80\n-\t\n- or go to [Jeff Garzik's topic](https://bitcointalk.org/index.php?topic=145386.0) for a signed magnet link. Alternatively you can use the [.torrent file](http://sourceforge.net/projects/bitcoin/files/Bitcoin/blockchain/bootstrap.dat.torrent/download) found on SourceForge.\n-     \n-![Fig1](img/bootstrap1.png)\n-\n-The download page should look like this, with a countdown to the download. If it does not work click the direct download link.\n-\n-The torrent client installed will recognize the download of the torrent file. Save the bootstrap.dat file to the folder you use for downloads. The image below shows the torrent download in qBittorrent, with current speed and ETA highlighted.\n-\n-![Fig2](img/bootstrap2.png)\n-\n-### Importing the blockchain\n-Exit the Bitcoin client software if you have it running. Be sure not to have an actively used wallet in use. We are going to copy the download of the blockchain to the Bitcoin client data directory. You should run the client software at least once so it can generate the data directory. Copy the downloaded bootstrap.dat file into the Bitcoin data folder.\n-\n-**For Windows users:**\n-Open explorer, and type into the address bar:\n-\n-\t%APPDATA%\\Bitcoin\n-    \n-This will open up the data folder. It should look like the image below. Copy over the bootstrap.dat from your download folder to this directory.\n-![Fig4](img/bootstrap4.png)\n-\n-**For OSX users:**\n-Open Finder by pressing Press [shift] + [cmd] + [g] and enter:\n-\n-\t~/Library/Application Support/Bitcoin/\n-    \n-**For Linux users:**\n-The directory is hidden in your User folder. Go to:\n-\n-\t~/.bitcoin/\n-    \n-### Importing the blockchain\n-Now start the Bitcoin client software. It should show \"Importing blocks from disk\" like the image below. \n-![Fig5](img/bootstrap5.png)\n-\n-Wait until the import finishes. The client will download the last days not covered by the import. Congratulations you have successfully imported the blockchain!\n-\n-### Is this safe?\n-\n-Yes, the above method is safe. The download contains only raw blockchain data and the client verifies this on import. Do not download the blockchain from unofficial sources, especially if they provide `*.rev` and `*.sst` files. These files are not verified and can contain malicious edits."
      },
      {
        "sha": "0984f689a8314e4b15c849f8bd8282793bbc0b02",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -159,7 +159,7 @@ tar -xzvf db-4.8.30.NC.tar.gz\n \n # Build the library and install to our prefix\n cd db-4.8.30.NC/build_unix/\n-#  Note: Do a static build so that it can be embedded into the exectuable, instead of having to find a .so at runtime\n+#  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n make install\n \n@@ -196,7 +196,7 @@ Hardening enables the following features:\n * Position Independent Executable\n     Build position independent code to take advantage of Address Space Layout Randomization\n     offered by some kernels. An attacker who is able to cause execution of code at an arbitrary\n-    memory location is thwarted if he doesn't know where anything useful is located.\n+    memory location is thwarted if he or she doesn't know where anything useful is located.\n     The stack and heap are randomly located by default but this allows the code section to be\n     randomly located as well.\n "
      },
      {
        "sha": "25d3b8390c5049fc322bd1538a881e29f83b5517",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 16,
        "deletions": 18,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -24,7 +24,7 @@ Table of Contents\n - [Connecting to the VM](#connecting-to-the-vm)\n - [Setting up Debian for gitian building](#setting-up-debian-for-gitian-building)\n - [Installing gitian](#installing-gitian)\n-- [Setting up gitian images](#setting-up-gitian-images)\n+- [Setting up the gitian image](#setting-up-the-gitian-image)\n - [Getting and building the inputs](#getting-and-building-the-inputs)\n - [Building Bitcoin](#building-bitcoin)\n - [Building an alternative repository](#building-an-alternative-repository)\n@@ -74,11 +74,11 @@ In the VirtualBox GUI click \"Create\" and choose the following parameters in the\n - Disk size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n - Push the `Create` button\n \n-Get the [Debian 7.4 net installer](http://ftp.at.debian.org/debian-jigdo/current/amd64/iso-cd/debian-7.4.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n+Get the [Debian 7.7 net installer](http://cdimage.debian.org/debian-cd/7.7.0/amd64/iso-cd/debian-7.7.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n This DVD image can be validated using a SHA256 hashing tool, for example on\n Unixy OSes by entering the following in a terminal:\n \n-    echo \"b712a141bc60269db217d3b3e456179bd6b181645f90e4aac9c42ed63de492e9  debian-7.4.0-amd64-netinst.iso\" | sha256sum -c\n+    echo \"d440e85b4121f94608748139f25dbce1ad36771348b002fe07d4d44b9d9e623f  debian-7.7.0-amd64-netinst.iso\" | sha256sum -c\n     # (must return OK)\n \n After creating the VM, we need to configure it. \n@@ -109,7 +109,7 @@ Then start the VM. On the first launch you will be asked for a CD or DVD image.\n Installing Debian\n ------------------\n \n-In this section it will be explained how to install Debian on the newly created VM.\n+This section will explain how to install Debian on the newly created VM.\n \n - Choose the non-graphical installer.  We do not need the graphical environment, it will only increase installation time and disk usage.\n \n@@ -277,24 +277,21 @@ cd ..\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n-Clone the git repositories for bitcoin and gitian and then checkout the bitcoin version that you want to build.\n+Clone the git repositories for bitcoin and gitian.\n \n ```bash\n git clone https://github.com/devrandom/gitian-builder.git\n git clone https://github.com/bitcoin/bitcoin\n-cd bitcoin\n-git checkout v${VERSION}\n-cd ..\n ```\n \n-Setting up gitian images\n+Setting up the gitian image\n -------------------------\n \n-Gitian needs virtual images of the operating system to build in.\n-Currently this is Ubuntu Precise for x86_64.\n-These images will be copied and used every time that a build is started to\n+Gitian needs a virtual image of the operating system to build in.\n+Currently this is Ubuntu Precise x86_64.\n+This image will be copied and used every time that a build is started to\n make sure that the build is deterministic.\n-Creating the images will take a while, but only has to be done once.\n+Creating the image will take a while, but only has to be done once.\n \n Execute the following as user `debian`:\n \n@@ -303,7 +300,7 @@ cd gitian-builder\n bin/make-base-vm --lxc --arch amd64 --suite precise\n ```\n \n-There will be a lot of warnings printed during build of the images. These can be ignored.\n+There will be a lot of warnings printed during build of the image. These can be ignored.\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n@@ -322,13 +319,14 @@ To build Bitcoin (for Linux, OSX and Windows) just follow the steps under 'perfo\n gitian builds' in [doc/release-process.md](release-process.md) in the bitcoin repository.\n \n This may take a long time as it also builds the dependencies needed for each descriptor.\n-These dependencies will be cached after a successful build to avoid rebuilding them when possible.\n+These dependencies will be cached after a successful build to avoid rebuilding them where possible.\n \n At any time you can check the package installation and build progress with\n \n ```bash\n tail -f var/install.log\n tail -f var/build.log\n+```\n \n Output from `gbuild` will look something like\n \n@@ -382,9 +380,9 @@ When you execute `gsign` you will get an error from GPG, which can be ignored. C\n in `gitian.sigs` to your signing machine and do\n \n ```bash\n-    gpg --detach-sign ${VERSION}-linux/${SIGNER}/bitcoin-build.assert\n-    gpg --detach-sign ${VERSION}-win/${SIGNER}/bitcoin-build.assert\n-    gpg --detach-sign ${VERSION}-osx/${SIGNER}/bitcoin-build.assert\n+    gpg --detach-sign ${VERSION}-linux/${SIGNER}/bitcoin-linux-build.assert\n+    gpg --detach-sign ${VERSION}-win/${SIGNER}/bitcoin-win-build.assert\n+    gpg --detach-sign ${VERSION}-osx-unsigned/${SIGNER}/bitcoin-osx-build.assert\n ```\n \n This will create the `.sig` files that can be committed together with the `.assert` files to assert your"
      },
      {
        "sha": "02170d13ec31b3decb0cdcac82a593d04e3bfd78",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -12,7 +12,7 @@ Base class for new regression tests.\n ### [listtransactions.py](listtransactions.py)\n Tests for the listtransactions RPC call.\n \n-### [util.py](util.sh)\n+### [util.py](util.py)\n Generally useful functions.\n \n Bash-based tests, to be ported to Python:"
      },
      {
        "sha": "3e63493dc6eb4bbbf8f484af65e6ae5067b5de9d",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -61,7 +61,7 @@ def run_test (self):\n         walletinfo = self.nodes[0].getwalletinfo()\n         assert_equal(walletinfo['immature_balance'], 0)\n \n-        # Have node0 mine a block, thus he will collect his own fee. \n+        # Have node0 mine a block, thus they will collect their own fee. \n         self.nodes[0].setgenerate(True, 1)\n         self.sync_all()\n "
      },
      {
        "sha": "90494439fa552dd167c709e669f0c858f5deb2c4",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -20,8 +20,6 @@ EXTRA_DIST += \\\n JSON_TEST_FILES = \\\n   test/data/script_valid.json \\\n   test/data/base58_keys_valid.json \\\n-  test/data/sig_canonical.json \\\n-  test/data/sig_noncanonical.json \\\n   test/data/base58_encode_decode.json \\\n   test/data/base58_keys_invalid.json \\\n   test/data/script_invalid.json \\"
      },
      {
        "sha": "323939913b7389b1ec823ec14940c9c6f9d3a5a0",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -149,7 +149,7 @@ bool CAlert::CheckSignature() const\n {\n     CPubKey key(Params().AlertKey());\n     if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n-        return error(\"CAlert::CheckSignature() : verify signature failed\");\n+        return error(\"CAlert::CheckSignature(): verify signature failed\");\n \n     // Now unserialize the data\n     CDataStream sMsg(vchMsg, SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "7ca825c16fcca1fcf6de283280f8897055520b45",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -81,7 +81,7 @@ class CCheckQueue\n                     fAllOk &= fOk;\n                     nTodo -= nNow;\n                     if (nTodo == 0 && !fMaster)\n-                        // We processed the last element; inform the master he can exit and return the result\n+                        // We processed the last element; inform the master he or she can exit and return the result\n                         condMaster.notify_one();\n                 } else {\n                     // first iteration"
      },
      {
        "sha": "a7f885135bae643aeeb6c4147b9712dd11b1948c",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -43,7 +43,7 @@ void CDBEnv::EnvShutdown()\n     fDbEnvInit = false;\n     int ret = dbenv.close(0);\n     if (ret != 0)\n-        LogPrintf(\"CDBEnv::EnvShutdown : Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+        LogPrintf(\"CDBEnv::EnvShutdown: Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n         DbEnv(0).remove(path.string().c_str(), 0);\n }\n@@ -75,7 +75,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     boost::filesystem::path pathLogDir = path / \"database\";\n     TryCreateDirectory(pathLogDir);\n     boost::filesystem::path pathErrorFile = path / \"db.log\";\n-    LogPrintf(\"CDBEnv::Open : LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n+    LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n     if (GetBoolArg(\"-privdb\", true))\n@@ -102,7 +102,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n                              nEnvFlags,\n                          S_IRUSR | S_IWUSR);\n     if (ret != 0)\n-        return error(\"CDBEnv::Open : Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+        return error(\"CDBEnv::Open: Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n \n     fDbEnvInit = true;\n     fMockDb = false;\n@@ -112,7 +112,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n void CDBEnv::MakeMock()\n {\n     if (fDbEnvInit)\n-        throw runtime_error(\"CDBEnv::MakeMock : Already initialized\");\n+        throw runtime_error(\"CDBEnv::MakeMock: Already initialized\");\n \n     boost::this_thread::interruption_point();\n \n@@ -135,7 +135,7 @@ void CDBEnv::MakeMock()\n                              DB_PRIVATE,\n                          S_IRUSR | S_IWUSR);\n     if (ret > 0)\n-        throw runtime_error(strprintf(\"CDBEnv::MakeMock : Error %d opening database environment.\", ret));\n+        throw runtime_error(strprintf(\"CDBEnv::MakeMock: Error %d opening database environment.\", ret));\n \n     fDbEnvInit = true;\n     fMockDb = true;\n@@ -172,14 +172,14 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::\n     Db db(&dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, &strDump, flags);\n     if (result == DB_VERIFY_BAD) {\n-        LogPrintf(\"CDBEnv::Salvage : Database salvage found errors, all data may not be recoverable.\\n\");\n+        LogPrintf(\"CDBEnv::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n         if (!fAggressive) {\n-            LogPrintf(\"CDBEnv::Salvage : Rerun with aggressive mode to ignore errors and continue.\\n\");\n+            LogPrintf(\"CDBEnv::Salvage: Rerun with aggressive mode to ignore errors and continue.\\n\");\n             return false;\n         }\n     }\n     if (result != 0 && result != DB_VERIFY_BAD) {\n-        LogPrintf(\"CDBEnv::Salvage : Database salvage failed with result %d.\\n\", result);\n+        LogPrintf(\"CDBEnv::Salvage: Database salvage failed with result %d.\\n\", result);\n         return false;\n     }\n \n@@ -233,7 +233,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n     {\n         LOCK(bitdb.cs_db);\n         if (!bitdb.Open(GetDataDir()))\n-            throw runtime_error(\"CDB : Failed to open database environment.\");\n+            throw runtime_error(\"CDB: Failed to open database environment.\");\n \n         strFile = strFilename;\n         ++bitdb.mapFileUseCount[strFile];\n@@ -246,7 +246,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n                 DbMpoolFile* mpf = pdb->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n                 if (ret != 0)\n-                    throw runtime_error(strprintf(\"CDB : Failed to configure for no temp file backing for database %s\", strFile));\n+                    throw runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFile));\n             }\n \n             ret = pdb->open(NULL,                               // Txn pointer\n@@ -261,7 +261,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n                 pdb = NULL;\n                 --bitdb.mapFileUseCount[strFile];\n                 strFile = \"\";\n-                throw runtime_error(strprintf(\"CDB : Error %d, can't open database %s\", ret, strFile));\n+                throw runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFile));\n             }\n \n             if (fCreate && !Exists(string(\"version\"))) {\n@@ -342,7 +342,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                 bitdb.mapFileUseCount.erase(strFile);\n \n                 bool fSuccess = true;\n-                LogPrintf(\"CDB::Rewrite : Rewriting %s...\\n\", strFile);\n+                LogPrintf(\"CDB::Rewrite: Rewriting %s...\\n\", strFile);\n                 string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(strFile.c_str(), \"r\");\n@@ -355,7 +355,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                                             DB_CREATE,          // Flags\n                                             0);\n                     if (ret > 0) {\n-                        LogPrintf(\"CDB::Rewrite : Can't create database file %s\\n\", strFileRes);\n+                        LogPrintf(\"CDB::Rewrite: Can't create database file %s\\n\", strFileRes);\n                         fSuccess = false;\n                     }\n \n@@ -404,7 +404,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                         fSuccess = false;\n                 }\n                 if (!fSuccess)\n-                    LogPrintf(\"CDB::Rewrite : Failed to rewrite database file %s\\n\", strFileRes);\n+                    LogPrintf(\"CDB::Rewrite: Failed to rewrite database file %s\\n\", strFileRes);\n                 return fSuccess;\n             }\n         }\n@@ -418,7 +418,7 @@ void CDBEnv::Flush(bool fShutdown)\n {\n     int64_t nStart = GetTimeMillis();\n     // Flush log data to the actual data file on all files that are not in use\n-    LogPrint(\"db\", \"CDBEnv::Flush : Flush(%s)%s\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\");\n+    LogPrint(\"db\", \"CDBEnv::Flush: Flush(%s)%s\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\");\n     if (!fDbEnvInit)\n         return;\n     {\n@@ -427,21 +427,21 @@ void CDBEnv::Flush(bool fShutdown)\n         while (mi != mapFileUseCount.end()) {\n             string strFile = (*mi).first;\n             int nRefCount = (*mi).second;\n-            LogPrint(\"db\", \"CDBEnv::Flush : Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n+            LogPrint(\"db\", \"CDBEnv::Flush: Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n             if (nRefCount == 0) {\n                 // Move log data to the dat file\n                 CloseDb(strFile);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s checkpoint\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s checkpoint\\n\", strFile);\n                 dbenv.txn_checkpoint(0, 0, 0);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s detach\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s detach\\n\", strFile);\n                 if (!fMockDb)\n                     dbenv.lsn_reset(strFile.c_str(), 0);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s closed\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s closed\\n\", strFile);\n                 mapFileUseCount.erase(mi++);\n             } else\n                 mi++;\n         }\n-        LogPrint(\"db\", \"CDBEnv::Flush : Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n+        LogPrint(\"db\", \"CDBEnv::Flush: Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n         if (fShutdown) {\n             char** listp;\n             if (mapFileUseCount.empty()) {"
      },
      {
        "sha": "c2af23139cd4170d3be8cd3effa5d2299fa0e23f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -977,7 +977,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n             } catch (const boost::filesystem::filesystem_error& e) {\n                 // Note: hardlink creation failing is not a disaster, it just means\n                 // blocks will get re-downloaded from peers.\n-                LogPrintf(\"Error hardlinking blk%04u.dat : %s\\n\", i, e.what());\n+                LogPrintf(\"Error hardlinking blk%04u.dat: %s\\n\", i, e.what());\n                 break;\n             }\n         }"
      },
      {
        "sha": "22cd08f30c8cfdd9628a4481f4c0ae5bc3a6911b",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -36,7 +36,7 @@ bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n {\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        return error(\"CBasicKeyStore::AddCScript() : redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n+        return error(\"CBasicKeyStore::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n \n     LOCK(cs_KeyStore);\n     mapScripts[CScriptID(redeemScript)] = redeemScript;"
      },
      {
        "sha": "f43d8c58b63b4552cdc3e653e70363b4c3bd881b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 96,
        "deletions": 96,
        "changes": 192,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -744,7 +744,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // non-standard. Note that this EvalScript() call will\n         // be quick, because if there are any operations\n         // beside \"push data\" in the scriptSig\n-        // IsStandard() will have already returned false\n+        // IsStandardTx() will have already returned false\n         // and this method isn't called.\n         vector<vector<unsigned char> > stack;\n         if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n@@ -820,29 +820,29 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction() : vin empty\"),\n+        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n                          REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction() : vout empty\"),\n+        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n                          REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckTransaction() : size limits failed\"),\n+        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n                          REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction() : txout.nValue negative\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n                              REJECT_INVALID, \"bad-txns-vout-negative\");\n         if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction() : txout.nValue too high\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n                              REJECT_INVALID, \"bad-txns-vout-toolarge\");\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CheckTransaction() : txout total out of range\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n                              REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n@@ -851,22 +851,22 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CheckTransaction() : duplicate inputs\"),\n+            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n                              REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n         vInOutPoints.insert(txin.prevout);\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction() : coinbase script size\"),\n+            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n                              REJECT_INVALID, \"bad-cb-length\");\n     }\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction() : prevout is null\"),\n+                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n                                  REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n \n@@ -922,7 +922,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     string reason;\n     if (Params().RequireStandard() && !IsStandardTx(tx, reason))\n         return state.DoS(0,\n-                         error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason),\n+                         error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n                          REJECT_NONSTANDARD, reason);\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n@@ -942,7 +942,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // timestamp applications where it matters.\n     if (!IsFinalTx(tx, chainActive.Height() + 1))\n         return state.DoS(0,\n-                         error(\"AcceptToMemoryPool : non-final\"),\n+                         error(\"AcceptToMemoryPool: non-final\"),\n                          REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n@@ -991,7 +991,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // are the actual inputs available?\n         if (!view.HaveInputs(tx))\n-            return state.Invalid(error(\"AcceptToMemoryPool : inputs already spent\"),\n+            return state.Invalid(error(\"AcceptToMemoryPool: inputs already spent\"),\n                                  REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n \n         // Bring the best block into scope\n@@ -1016,7 +1016,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         nSigOps += GetP2SHSigOpCount(tx, view);\n         if (nSigOps > MAX_STANDARD_TX_SIGOPS)\n             return state.DoS(0,\n-                             error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",\n+                             error(\"AcceptToMemoryPool: too many sigops %s, %d > %d\",\n                                    hash.ToString(), nSigOps, MAX_STANDARD_TX_SIGOPS),\n                              REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n \n@@ -1030,7 +1030,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n+            return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),\n                              REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n \n@@ -1057,7 +1057,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n             if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n+                return state.DoS(0, error(\"AcceptToMemoryPool: free transaction rejected by rate limiter\"),\n                                  REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n@@ -1123,11 +1123,11 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n                     fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n                     file >> txOut;\n                 } catch (const std::exception& e) {\n-                    return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+                    return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n                 }\n                 hashBlock = header.GetHash();\n                 if (txOut.GetHash() != hash)\n-                    return error(\"%s : txid mismatch\", __func__);\n+                    return error(\"%s: txid mismatch\", __func__);\n                 return true;\n             }\n         }\n@@ -1176,7 +1176,7 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"WriteBlockToDisk : OpenBlockFile failed\");\n+        return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n \n     // Write index header\n     unsigned int nSize = fileout.GetSerializeSize(block);\n@@ -1185,7 +1185,7 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     // Write block\n     long fileOutPos = ftell(fileout.Get());\n     if (fileOutPos < 0)\n-        return error(\"WriteBlockToDisk : ftell failed\");\n+        return error(\"WriteBlockToDisk: ftell failed\");\n     pos.nPos = (unsigned int)fileOutPos;\n     fileout << block;\n \n@@ -1199,19 +1199,19 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     // Open history file to read\n     CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"ReadBlockFromDisk : OpenBlockFile failed\");\n+        return error(\"ReadBlockFromDisk: OpenBlockFile failed\");\n \n     // Read block\n     try {\n         filein >> block;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     // Check the header\n     if (!CheckProofOfWork(block.GetHash(), block.nBits))\n-        return error(\"ReadBlockFromDisk : Errors in block header\");\n+        return error(\"ReadBlockFromDisk: Errors in block header\");\n \n     return true;\n }\n@@ -1221,7 +1221,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     if (!ReadBlockFromDisk(block, pindex->GetBlockPos()))\n         return false;\n     if (block.GetHash() != pindex->GetBlockHash())\n-        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*) : GetHash() doesn't match index\");\n+        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index\");\n     return true;\n }\n \n@@ -1423,7 +1423,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore), &error)) {\n-        return ::error(\"CScriptCheck() : %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n+        return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n     }\n     return true;\n }\n@@ -1438,7 +1438,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n-            return state.Invalid(error(\"CheckInputs() : %s inputs unavailable\", tx.GetHash().ToString()));\n+            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n \n         // While checking, GetBestBlock() refers to the parent block.\n         // This is also true for mempool checks.\n@@ -1456,31 +1456,31 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n             if (coins->IsCoinBase()) {\n                 if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n                     return state.Invalid(\n-                        error(\"CheckInputs() : tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n+                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n                         REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n             }\n \n             // Check for negative or overflow input values\n             nValueIn += coins->vout[prevout.n].nValue;\n             if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, error(\"CheckInputs() : txin values out of range\"),\n+                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n                                  REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n \n         }\n \n         if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs() : %s value in (%s) < value out (%s)\",\n+            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n                                         tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n                              REJECT_INVALID, \"bad-txns-in-belowout\");\n \n         // Tally transaction fees\n         CAmount nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString()),\n+            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n                              REJECT_INVALID, \"bad-txns-fee-negative\");\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n-            return state.DoS(100, error(\"CheckInputs() : nFees out of range\"),\n+            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n                              REJECT_INVALID, \"bad-txns-fee-outofrange\");\n \n         // The first loop above does all the inexpensive checks.\n@@ -1537,7 +1537,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     // Open history file to append\n     CAutoFile fileout(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"%s : OpenUndoFile failed\", __func__);\n+        return error(\"%s: OpenUndoFile failed\", __func__);\n \n     // Write index header\n     unsigned int nSize = fileout.GetSerializeSize(blockundo);\n@@ -1546,7 +1546,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     // Write undo data\n     long fileOutPos = ftell(fileout.Get());\n     if (fileOutPos < 0)\n-        return error(\"%s : ftell failed\", __func__);\n+        return error(\"%s: ftell failed\", __func__);\n     pos.nPos = (unsigned int)fileOutPos;\n     fileout << blockundo;\n \n@@ -1564,7 +1564,7 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     // Open history file to read\n     CAutoFile filein(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"%s : OpenBlockFile failed\", __func__);\n+        return error(\"%s: OpenBlockFile failed\", __func__);\n \n     // Read block\n     uint256 hashChecksum;\n@@ -1573,15 +1573,15 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n         filein >> hashChecksum;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     // Verify checksum\n     CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n     hasher << hashBlock;\n     hasher << blockundo;\n     if (hashChecksum != hasher.GetHash())\n-        return error(\"%s : Checksum mismatch\", __func__);\n+        return error(\"%s: Checksum mismatch\", __func__);\n \n     return true;\n }\n@@ -1600,12 +1600,12 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n     CBlockUndo blockUndo;\n     CDiskBlockPos pos = pindex->GetUndoPos();\n     if (pos.IsNull())\n-        return error(\"DisconnectBlock() : no undo data available\");\n+        return error(\"DisconnectBlock(): no undo data available\");\n     if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n-        return error(\"DisconnectBlock() : failure reading undo data\");\n+        return error(\"DisconnectBlock(): failure reading undo data\");\n \n     if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n-        return error(\"DisconnectBlock() : block and undo data inconsistent\");\n+        return error(\"DisconnectBlock(): block and undo data inconsistent\");\n \n     // undo transactions in reverse order\n     for (int i = block.vtx.size() - 1; i >= 0; i--) {\n@@ -1628,7 +1628,7 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         if (outsBlock.nVersion < 0)\n             outs->nVersion = outsBlock.nVersion;\n         if (*outs != outsBlock)\n-            fClean = fClean && error(\"DisconnectBlock() : added transaction mismatch? database corrupted\");\n+            fClean = fClean && error(\"DisconnectBlock(): added transaction mismatch? database corrupted\");\n \n         // remove outputs\n         outs->Clear();\n@@ -1638,25 +1638,25 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         if (i > 0) { // not coinbases\n             const CTxUndo &txundo = blockUndo.vtxundo[i-1];\n             if (txundo.vprevout.size() != tx.vin.size())\n-                return error(\"DisconnectBlock() : transaction and undo data inconsistent\");\n+                return error(\"DisconnectBlock(): transaction and undo data inconsistent\");\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 const CTxInUndo &undo = txundo.vprevout[j];\n                 CCoinsModifier coins = view.ModifyCoins(out.hash);\n                 if (undo.nHeight != 0) {\n                     // undo data contains height: this is the last output of the prevout tx being spent\n                     if (!coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing transaction\");\n+                        fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing transaction\");\n                     coins->Clear();\n                     coins->fCoinBase = undo.fCoinBase;\n                     coins->nHeight = undo.nHeight;\n                     coins->nVersion = undo.nVersion;\n                 } else {\n                     if (coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock() : undo data adding output to missing transaction\");\n+                        fClean = fClean && error(\"DisconnectBlock(): undo data adding output to missing transaction\");\n                 }\n                 if (coins->IsAvailable(out.n))\n-                    fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing output\");\n+                    fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing output\");\n                 if (coins->vout.size() < out.n+1)\n                     coins->vout.resize(out.n+1);\n                 coins->vout[out.n] = undo.txout;\n@@ -1753,7 +1753,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n             const CCoins* coins = view.AccessCoins(tx.GetHash());\n             if (coins && !coins->IsPruned())\n-                return state.DoS(100, error(\"ConnectBlock() : tried to overwrite transaction\"),\n+                return state.DoS(100, error(\"ConnectBlock(): tried to overwrite transaction\"),\n                                  REJECT_INVALID, \"bad-txns-BIP30\");\n         }\n     }\n@@ -1783,13 +1783,13 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         nInputs += tx.vin.size();\n         nSigOps += GetLegacySigOpCount(tx);\n         if (nSigOps > MAX_BLOCK_SIGOPS)\n-            return state.DoS(100, error(\"ConnectBlock() : too many sigops\"),\n+            return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n         if (!tx.IsCoinBase())\n         {\n             if (!view.HaveInputs(tx))\n-                return state.DoS(100, error(\"ConnectBlock() : inputs missing/spent\"),\n+                return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n             if (fStrictPayToScriptHash)\n@@ -1799,7 +1799,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 // an incredibly-expensive-to-validate block.\n                 nSigOps += GetP2SHSigOpCount(tx, view);\n                 if (nSigOps > MAX_BLOCK_SIGOPS)\n-                    return state.DoS(100, error(\"ConnectBlock() : too many sigops\"),\n+                    return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                                      REJECT_INVALID, \"bad-blk-sigops\");\n             }\n \n@@ -1825,7 +1825,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     if (block.vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n         return state.DoS(100,\n-                         error(\"ConnectBlock() : coinbase pays too much (actual=%d vs limit=%d)\",\n+                         error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n                                block.vtx[0].GetValueOut(), GetBlockValue(pindex->nHeight, nFees)),\n                                REJECT_INVALID, \"bad-cb-amount\");\n \n@@ -1843,7 +1843,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         if (pindex->GetUndoPos().IsNull()) {\n             CDiskBlockPos pos;\n             if (!FindUndoPos(state, pindex->nFile, pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n-                return error(\"ConnectBlock() : FindUndoPos failed\");\n+                return error(\"ConnectBlock(): FindUndoPos failed\");\n             if (!UndoWriteToDisk(blockundo, pos, pindex->pprev->GetBlockHash()))\n                 return state.Abort(\"Failed to write undo data\");\n \n@@ -1995,7 +1995,7 @@ bool static DisconnectTip(CValidationState &state) {\n     {\n         CCoinsViewCache view(pcoinsTip);\n         if (!DisconnectBlock(block, state, pindexDelete, view))\n-            return error(\"DisconnectTip() : DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n+            return error(\"DisconnectTip(): DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n         assert(view.Flush());\n     }\n     LogPrint(\"bench\", \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n@@ -2055,7 +2055,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n-            return error(\"ConnectTip() : ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n+            return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n         mapBlockSource.erase(inv.hash);\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n@@ -2492,12 +2492,12 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool f\n {\n     // Check proof of work matches claimed amount\n     if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits))\n-        return state.DoS(50, error(\"CheckBlockHeader() : proof of work failed\"),\n+        return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n                          REJECT_INVALID, \"high-hash\");\n \n     // Check timestamp\n     if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n-        return state.Invalid(error(\"CheckBlockHeader() : block timestamp too far in the future\"),\n+        return state.Invalid(error(\"CheckBlockHeader(): block timestamp too far in the future\"),\n                              REJECT_INVALID, \"time-too-new\");\n \n     return true;\n@@ -2517,14 +2517,14 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n         bool mutated;\n         uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n         if (block.hashMerkleRoot != hashMerkleRoot2)\n-            return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"),\n+            return state.DoS(100, error(\"CheckBlock(): hashMerkleRoot mismatch\"),\n                              REJECT_INVALID, \"bad-txnmrklroot\", true);\n \n         // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n         // of transactions in a block without affecting the merkle root of a block,\n         // while still invalidating it.\n         if (mutated)\n-            return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"),\n+            return state.DoS(100, error(\"CheckBlock(): duplicate transaction\"),\n                              REJECT_INVALID, \"bad-txns-duplicate\", true);\n     }\n \n@@ -2534,30 +2534,30 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n     // Size limits\n     if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckBlock() : size limits failed\"),\n+        return state.DoS(100, error(\"CheckBlock(): size limits failed\"),\n                          REJECT_INVALID, \"bad-blk-length\");\n \n     // First transaction must be coinbase, the rest must not be\n     if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n-        return state.DoS(100, error(\"CheckBlock() : first tx is not coinbase\"),\n+        return state.DoS(100, error(\"CheckBlock(): first tx is not coinbase\"),\n                          REJECT_INVALID, \"bad-cb-missing\");\n     for (unsigned int i = 1; i < block.vtx.size(); i++)\n         if (block.vtx[i].IsCoinBase())\n-            return state.DoS(100, error(\"CheckBlock() : more than one coinbase\"),\n+            return state.DoS(100, error(\"CheckBlock(): more than one coinbase\"),\n                              REJECT_INVALID, \"bad-cb-multiple\");\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!CheckTransaction(tx, state))\n-            return error(\"CheckBlock() : CheckTransaction failed\");\n+            return error(\"CheckBlock(): CheckTransaction failed\");\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n-        return state.DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"),\n+        return state.DoS(100, error(\"CheckBlock(): out-of-bounds SigOpCount\"),\n                          REJECT_INVALID, \"bad-blk-sigops\", true);\n \n     return true;\n@@ -2576,28 +2576,28 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     // Check proof of work\n     if ((!Params().SkipProofOfWorkCheck()) &&\n        (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n-        return state.DoS(100, error(\"%s : incorrect proof of work\", __func__),\n+        return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n \n     // Check timestamp against prev\n     if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-        return state.Invalid(error(\"%s : block's timestamp is too early\", __func__),\n+        return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n                              REJECT_INVALID, \"time-too-old\");\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return state.DoS(100, error(\"%s : rejected by checkpoint lock-in at %d\", __func__, nHeight),\n+        return state.DoS(100, error(\"%s: rejected by checkpoint lock-in at %d\", __func__, nHeight),\n                          REJECT_CHECKPOINT, \"checkpoint mismatch\");\n \n     // Don't accept any forks from the main chain prior to last checkpoint\n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n     if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-        return state.DoS(100, error(\"%s : forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n+        return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n \n     // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n     if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n     {\n-        return state.Invalid(error(\"%s : rejected nVersion=1 block\", __func__),\n+        return state.Invalid(error(\"%s: rejected nVersion=1 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n     }\n \n@@ -2611,7 +2611,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n-            return state.DoS(10, error(\"%s : contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n+            return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n         }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n@@ -2621,7 +2621,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n             !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n-            return state.DoS(100, error(\"%s : block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n+            return state.DoS(100, error(\"%s: block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n         }\n     }\n \n@@ -2641,7 +2641,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n         if (ppindex)\n             *ppindex = pindex;\n         if (pindex->nStatus & BLOCK_FAILED_MASK)\n-            return state.Invalid(error(\"%s : block is marked invalid\", __func__), 0, \"duplicate\");\n+            return state.Invalid(error(\"%s: block is marked invalid\", __func__), 0, \"duplicate\");\n         return true;\n     }\n \n@@ -2653,10 +2653,10 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     if (hash != Params().HashGenesisBlock()) {\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n-            return state.DoS(10, error(\"%s : prev block not found\", __func__), 0, \"bad-prevblk\");\n+            return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n-            return state.DoS(100, error(\"%s : prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+            return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n     }\n \n     if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n@@ -2682,7 +2682,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n \n     if (pindex->nStatus & BLOCK_HAVE_DATA) {\n         // TODO: deal better with duplicate blocks.\n-        // return state.DoS(20, error(\"AcceptBlock() : already have block %d %s\", pindex->nHeight, pindex->GetBlockHash().ToString()), REJECT_DUPLICATE, \"duplicate\");\n+        // return state.DoS(20, error(\"AcceptBlock(): already have block %d %s\", pindex->nHeight, pindex->GetBlockHash().ToString()), REJECT_DUPLICATE, \"duplicate\");\n         return true;\n     }\n \n@@ -2703,12 +2703,12 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n         if (dbp != NULL)\n             blockPos = *dbp;\n         if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL))\n-            return error(\"AcceptBlock() : FindBlockPos failed\");\n+            return error(\"AcceptBlock(): FindBlockPos failed\");\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos))\n                 return state.Abort(\"Failed to write block\");\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n-            return error(\"AcceptBlock() : ReceivedBlockTransactions failed\");\n+            return error(\"AcceptBlock(): ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n         return state.Abort(std::string(\"System error: \") + e.what());\n     }\n@@ -2739,7 +2739,7 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n         LOCK(cs_main);\n         MarkBlockAsReceived(pblock->GetHash());\n         if (!checked) {\n-            return error(\"%s : CheckBlock FAILED\", __func__);\n+            return error(\"%s: CheckBlock FAILED\", __func__);\n         }\n \n         // Store to disk\n@@ -2749,11 +2749,11 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n         }\n         if (!ret)\n-            return error(\"%s : AcceptBlock FAILED\", __func__);\n+            return error(\"%s: AcceptBlock FAILED\", __func__);\n     }\n \n     if (!ActivateBestChain(state, pblock))\n-        return error(\"%s : ActivateBestChain failed\", __func__);\n+        return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n }\n@@ -2859,7 +2859,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     // Create new\n     CBlockIndex* pindexNew = new CBlockIndex();\n     if (!pindexNew)\n-        throw runtime_error(\"LoadBlockIndex() : new CBlockIndex failed\");\n+        throw runtime_error(\"LoadBlockIndex(): new CBlockIndex failed\");\n     mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n \n@@ -3005,24 +3005,24 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n         CBlock block;\n         // check level 0: read from disk\n         if (!ReadBlockFromDisk(block, pindex))\n-            return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state))\n-            return error(\"VerifyDB() : *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            return error(\"VerifyDB(): *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n             CBlockUndo undo;\n             CDiskBlockPos pos = pindex->GetUndoPos();\n             if (!pos.IsNull()) {\n                 if (!UndoReadFromDisk(undo, pos, pindex->pprev->GetBlockHash()))\n-                    return error(\"VerifyDB() : *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                    return error(\"VerifyDB(): *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             }\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.GetCacheSize() + pcoinsTip->GetCacheSize()) <= nCoinCacheSize) {\n             bool fClean = true;\n             if (!DisconnectBlock(block, state, pindex, coins, &fClean))\n-                return error(\"VerifyDB() : *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             pindexState = pindex->pprev;\n             if (!fClean) {\n                 nGoodTransactions = 0;\n@@ -3034,7 +3034,7 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n             return true;\n     }\n     if (pindexFailure)\n-        return error(\"VerifyDB() : *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", chainActive.Height() - pindexFailure->nHeight + 1, nGoodTransactions);\n+        return error(\"VerifyDB(): *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", chainActive.Height() - pindexFailure->nHeight + 1, nGoodTransactions);\n \n     // check level 4: try reconnecting blocks\n     if (nCheckLevel >= 4) {\n@@ -3045,9 +3045,9 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n             pindex = chainActive.Next(pindex);\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex))\n-                return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             if (!ConnectBlock(block, state, pindex, coins))\n-                return error(\"VerifyDB() : *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }\n \n@@ -3093,18 +3093,18 @@ bool InitBlockIndex() {\n             CDiskBlockPos blockPos;\n             CValidationState state;\n             if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.GetBlockTime()))\n-                return error(\"LoadBlockIndex() : FindBlockPos failed\");\n+                return error(\"LoadBlockIndex(): FindBlockPos failed\");\n             if (!WriteBlockToDisk(block, blockPos))\n-                return error(\"LoadBlockIndex() : writing genesis block to disk failed\");\n+                return error(\"LoadBlockIndex(): writing genesis block to disk failed\");\n             CBlockIndex *pindex = AddToBlockIndex(block);\n             if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n-                return error(\"LoadBlockIndex() : genesis block not accepted\");\n+                return error(\"LoadBlockIndex(): genesis block not accepted\");\n             if (!ActivateBestChain(state, &block))\n-                return error(\"LoadBlockIndex() : genesis block cannot be activated\");\n+                return error(\"LoadBlockIndex(): genesis block cannot be activated\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n             return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n         } catch (const std::runtime_error& e) {\n-            return error(\"LoadBlockIndex() : failed to initialize block database: %s\", e.what());\n+            return error(\"LoadBlockIndex(): failed to initialize block database: %s\", e.what());\n         }\n     }\n \n@@ -3204,7 +3204,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {\n-                LogPrintf(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+                LogPrintf(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n             }\n         }\n     } catch (const std::runtime_error& e) {\n@@ -3268,7 +3268,7 @@ string GetWarnings(string strFor)\n         return strStatusBar;\n     else if (strFor == \"rpc\")\n         return strRPC;\n-    assert(!\"GetWarnings() : invalid parameter\");\n+    assert(!\"GetWarnings(): invalid parameter\");\n     return \"error\";\n }\n \n@@ -3835,7 +3835,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             vWorkQueue.push_back(inv.hash);\n             vEraseQueue.push_back(inv.hash);\n \n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d %s : accepted %s (poolsz %u)\\n\",\n+            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d %s: accepted %s (poolsz %u)\\n\",\n                 pfrom->id, pfrom->cleanSubVer,\n                 tx.GetHash().ToString(),\n                 mempool.mapTx.size());\n@@ -4297,7 +4297,7 @@ bool ProcessMessages(CNode* pfrom)\n         memcpy(&nChecksum, &hash, sizeof(nChecksum));\n         if (nChecksum != hdr.nChecksum)\n         {\n-            LogPrintf(\"ProcessMessages(%s, %u bytes) : CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n+            LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n                strCommand, nMessageSize, nChecksum, hdr.nChecksum);\n             continue;\n         }\n@@ -4315,12 +4315,12 @@ bool ProcessMessages(CNode* pfrom)\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv\n-                LogPrintf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n             }\n             else if (strstr(e.what(), \"size too large\"))\n             {\n                 // Allow exceptions from over-long size\n-                LogPrintf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n             }\n             else\n             {"
      },
      {
        "sha": "e359654d7ba26004c0c09fc44e52fab19b4ad3ce",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -332,7 +332,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         CValidationState state;\n         if (!TestBlockValidity(state, *pblock, pindexPrev, false, false))\n-            throw std::runtime_error(\"CreateNewBlock() : TestBlockValidity failed\");\n+            throw std::runtime_error(\"CreateNewBlock(): TestBlockValidity failed\");\n     }\n \n     return pblocktemplate.release();\n@@ -415,7 +415,7 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n     {\n         LOCK(cs_main);\n         if (pblock->hashPrevBlock != chainActive.Tip()->GetBlockHash())\n-            return error(\"BitcoinMiner : generated block is stale\");\n+            return error(\"BitcoinMiner: generated block is stale\");\n     }\n \n     // Remove key from key pool\n@@ -430,7 +430,7 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n     // Process this block the same as if we had received it from another node\n     CValidationState state;\n     if (!ProcessNewBlock(state, NULL, pblock))\n-        return error(\"BitcoinMiner : ProcessNewBlock, block not accepted\");\n+        return error(\"BitcoinMiner: ProcessNewBlock, block not accepted\");\n \n     return true;\n }"
      },
      {
        "sha": "e4ab9d706d86e77308ec515a2c772d33451b733e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -1020,7 +1020,7 @@ void ThreadMapPort()\n         catch (const boost::thread_interrupted&)\n         {\n             r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n-            LogPrintf(\"UPNP_DeletePortMapping() returned : %d\\n\", r);\n+            LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n             freeUPNPDevlist(devlist); devlist = 0;\n             FreeUPNPUrls(&urls);\n             throw;\n@@ -1797,21 +1797,21 @@ bool CAddrDB::Write(const CAddrMan& addr)\n     FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"%s : Failed to open file %s\", __func__, pathTmp.string());\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n \n     // Write and commit header, data\n     try {\n         fileout << ssPeers;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Serialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n     }\n     FileCommit(fileout.Get());\n     fileout.fclose();\n \n     // replace existing peers.dat, if any, with new peers.dat.XXXX\n     if (!RenameOver(pathTmp, pathAddr))\n-        return error(\"%s : Rename-into-place failed\", __func__);\n+        return error(\"%s: Rename-into-place failed\", __func__);\n \n     return true;\n }\n@@ -1822,7 +1822,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n     FILE *file = fopen(pathAddr.string().c_str(), \"rb\");\n     CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"%s : Failed to open file %s\", __func__, pathAddr.string());\n+        return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n \n     // use file size to size memory buffer\n     int fileSize = boost::filesystem::file_size(pathAddr);\n@@ -1840,7 +1840,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n         filein >> hashIn;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n     filein.fclose();\n \n@@ -1849,7 +1849,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n     // verify stored checksum matches input data\n     uint256 hashTmp = Hash(ssPeers.begin(), ssPeers.end());\n     if (hashIn != hashTmp)\n-        return error(\"%s : Checksum mismatch, data corrupted\", __func__);\n+        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n \n     unsigned char pchMsgTmp[4];\n     try {\n@@ -1858,13 +1858,13 @@ bool CAddrDB::Read(CAddrMan& addr)\n \n         // ... verify the network matches ours\n         if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n-            return error(\"%s : Invalid network magic number\", __func__);\n+            return error(\"%s: Invalid network magic number\", __func__);\n \n         // de-serialize address data into one CAddrMan object\n         ssPeers >> addr;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     return true;"
      },
      {
        "sha": "e49f0d104c26600c78ef5f392925c6c8f9c63280",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -89,11 +89,11 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n \n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > Params().ProofOfWorkLimit())\n-        return error(\"CheckProofOfWork() : nBits below minimum work\");\n+        return error(\"CheckProofOfWork(): nBits below minimum work\");\n \n     // Check proof of work matches claimed amount\n     if (UintToArith256(hash) > bnTarget)\n-        return error(\"CheckProofOfWork() : hash doesn't match nBits\");\n+        return error(\"CheckProofOfWork(): hash doesn't match nBits\");\n \n     return true;\n }"
      },
      {
        "sha": "606dbea79857d2f4cc79b0136ad46486f3c187d9",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -94,7 +94,7 @@ CAmount CTransaction::GetValueOut() const\n     {\n         nValueOut += it->nValue;\n         if (!MoneyRange(it->nValue) || !MoneyRange(nValueOut))\n-            throw std::runtime_error(\"CTransaction::GetValueOut() : value out of range\");\n+            throw std::runtime_error(\"CTransaction::GetValueOut(): value out of range\");\n     }\n     return nValueOut;\n }"
      },
      {
        "sha": "74ac706d60c6f14fc060e047068ee716128cb09b",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -66,7 +66,7 @@ bool CMessageHeader::IsValid() const\n     // Message size\n     if (nMessageSize > MAX_SIZE)\n     {\n-        LogPrintf(\"CMessageHeader::IsValid() : (%s, %u bytes) nMessageSize > MAX_SIZE\\n\", GetCommand(), nMessageSize);\n+        LogPrintf(\"CMessageHeader::IsValid(): (%s, %u bytes) nMessageSize > MAX_SIZE\\n\", GetCommand(), nMessageSize);\n         return false;\n     }\n \n@@ -117,7 +117,7 @@ CInv::CInv(const std::string& strType, const uint256& hashIn)\n         }\n     }\n     if (i == ARRAYLEN(ppszTypeName))\n-        throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256) : unknown type '%s'\", strType));\n+        throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256): unknown type '%s'\", strType));\n     hash = hashIn;\n }\n \n@@ -134,7 +134,7 @@ bool CInv::IsKnownType() const\n const char* CInv::GetCommand() const\n {\n     if (!IsKnownType())\n-        throw std::out_of_range(strprintf(\"CInv::GetCommand() : type=%d unknown type\", type));\n+        throw std::out_of_range(strprintf(\"CInv::GetCommand(): type=%d unknown type\", type));\n     return ppszTypeName[type];\n }\n "
      },
      {
        "sha": "162ecdba4ef4c84d4288e504db4e337664eb6282",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -114,7 +114,7 @@ class AddressTablePriv\n         case CT_NEW:\n             if(inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_NEW, but entry is already in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_NEW, but entry is already in model\";\n                 break;\n             }\n             parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex);\n@@ -124,7 +124,7 @@ class AddressTablePriv\n         case CT_UPDATED:\n             if(!inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_UPDATED, but entry is not in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_UPDATED, but entry is not in model\";\n                 break;\n             }\n             lower->type = newEntryType;\n@@ -134,7 +134,7 @@ class AddressTablePriv\n         case CT_DELETED:\n             if(!inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_DELETED, but entry is not in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_DELETED, but entry is not in model\";\n                 break;\n             }\n             parent->beginRemoveRows(QModelIndex(), lowerIndex, upperIndex-1);"
      },
      {
        "sha": "03d94f2e13f127dcb875d733eef691506df7a5a1",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -212,14 +212,14 @@ static void ShowProgress(ClientModel *clientmodel, const std::string &title, int\n \n static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConnections)\n {\n-    // Too noisy: qDebug() << \"NotifyNumConnectionsChanged : \" + QString::number(newNumConnections);\n+    // Too noisy: qDebug() << \"NotifyNumConnectionsChanged: \" + QString::number(newNumConnections);\n     QMetaObject::invokeMethod(clientmodel, \"updateNumConnections\", Qt::QueuedConnection,\n                               Q_ARG(int, newNumConnections));\n }\n \n static void NotifyAlertChanged(ClientModel *clientmodel, const uint256 &hash, ChangeType status)\n {\n-    qDebug() << \"NotifyAlertChanged : \" + QString::fromStdString(hash.GetHex()) + \" status=\" + QString::number(status);\n+    qDebug() << \"NotifyAlertChanged: \" + QString::fromStdString(hash.GetHex()) + \" status=\" + QString::number(status);\n     QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection,\n                               Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n                               Q_ARG(int, status));"
      },
      {
        "sha": "4c1e898020dcdfe8034396ae6fb19f5180ac8ecc",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -32,18 +32,18 @@ bool PaymentRequestPlus::parse(const QByteArray& data)\n {\n     bool parseOK = paymentRequest.ParseFromArray(data.data(), data.size());\n     if (!parseOK) {\n-        qWarning() << \"PaymentRequestPlus::parse : Error parsing payment request\";\n+        qWarning() << \"PaymentRequestPlus::parse: Error parsing payment request\";\n         return false;\n     }\n     if (paymentRequest.payment_details_version() > 1) {\n-        qWarning() << \"PaymentRequestPlus::parse : Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n+        qWarning() << \"PaymentRequestPlus::parse: Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n         return false;\n     }\n \n     parseOK = details.ParseFromString(paymentRequest.serialized_payment_details());\n     if (!parseOK)\n     {\n-        qWarning() << \"PaymentRequestPlus::parse : Error parsing payment details\";\n+        qWarning() << \"PaymentRequestPlus::parse: Error parsing payment details\";\n         paymentRequest.Clear();\n         return false;\n     }\n@@ -83,17 +83,17 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         digestAlgorithm = EVP_sha1();\n     }\n     else if (paymentRequest.pki_type() == \"none\") {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: pki_type == none\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: pki_type == none\";\n         return false;\n     }\n     else {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: unknown pki_type \" << QString::fromStdString(paymentRequest.pki_type());\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: unknown pki_type \" << QString::fromStdString(paymentRequest.pki_type());\n         return false;\n     }\n \n     payments::X509Certificates certChain;\n     if (!certChain.ParseFromString(paymentRequest.pki_data())) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: error parsing pki_data\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: error parsing pki_data\";\n         return false;\n     }\n \n@@ -103,12 +103,12 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         QByteArray certData(certChain.certificate(i).data(), certChain.certificate(i).size());\n         QSslCertificate qCert(certData, QSsl::Der);\n         if (currentTime < qCert.effectiveDate() || currentTime > qCert.expiryDate()) {\n-            qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: certificate expired or not yet active: \" << qCert;\n+            qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: certificate expired or not yet active: \" << qCert;\n             return false;\n         }\n #if QT_VERSION >= 0x050000\n         if (qCert.isBlacklisted()) {\n-            qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: certificate blacklisted: \" << qCert;\n+            qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: certificate blacklisted: \" << qCert;\n             return false;\n         }\n #endif\n@@ -118,7 +118,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n             certs.push_back(cert);\n     }\n     if (certs.empty()) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: empty certificate chain\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: empty certificate chain\";\n         return false;\n     }\n \n@@ -134,7 +134,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     // load the signing cert into it and verify.\n     X509_STORE_CTX *store_ctx = X509_STORE_CTX_new();\n     if (!store_ctx) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: error creating X509_STORE_CTX\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: error creating X509_STORE_CTX\";\n         return false;\n     }\n \n@@ -191,7 +191,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     }\n     catch (const SSLVerifyError& err) {\n         fResult = false;\n-        qWarning() << \"PaymentRequestPlus::getMerchant : SSL error: \" << err.what();\n+        qWarning() << \"PaymentRequestPlus::getMerchant: SSL error: \" << err.what();\n     }\n \n     if (website)"
      },
      {
        "sha": "a00916bf7f96b1668e6db5604b650e07302a9c5a",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -97,7 +97,7 @@ static QList<QString> savedPaymentRequests;\n \n static void ReportInvalidCertificate(const QSslCertificate& cert)\n {\n-    qDebug() << \"ReportInvalidCertificate : Payment server found an invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n+    qDebug() << \"ReportInvalidCertificate: Payment server found an invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n }\n \n //\n@@ -171,7 +171,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n             continue;\n         }\n     }\n-    qWarning() << \"PaymentServer::LoadRootCAs : Loaded \" << nRootCerts << \" root certificates\";\n+    qWarning() << \"PaymentServer::LoadRootCAs: Loaded \" << nRootCerts << \" root certificates\";\n \n     // Project for another day:\n     // Fetch certificate revocation lists, and add them to certStore.\n@@ -244,7 +244,7 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n         {\n             // Printing to debug.log is about the best we can do here, the\n             // GUI hasn't started yet so we can't pop up a message box.\n-            qWarning() << \"PaymentServer::ipcSendCommandLine : Payment request file does not exist: \" << arg;\n+            qWarning() << \"PaymentServer::ipcSendCommandLine: Payment request file does not exist: \" << arg;\n         }\n     }\n }\n@@ -368,10 +368,10 @@ void PaymentServer::initNetManager()\n     if (optionsModel->getProxySettings(proxy)) {\n         netManager->setProxy(proxy);\n \n-        qDebug() << \"PaymentServer::initNetManager : Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n+        qDebug() << \"PaymentServer::initNetManager: Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n     }\n     else\n-        qDebug() << \"PaymentServer::initNetManager : No active proxy server found.\";\n+        qDebug() << \"PaymentServer::initNetManager: No active proxy server found.\";\n \n     connect(netManager, SIGNAL(finished(QNetworkReply*)),\n             this, SLOT(netRequestFinished(QNetworkReply*)));\n@@ -415,12 +415,12 @@ void PaymentServer::handleURIOrFile(const QString& s)\n \n             if (fetchUrl.isValid())\n             {\n-                qDebug() << \"PaymentServer::handleURIOrFile : fetchRequest(\" << fetchUrl << \")\";\n+                qDebug() << \"PaymentServer::handleURIOrFile: fetchRequest(\" << fetchUrl << \")\";\n                 fetchRequest(fetchUrl);\n             }\n             else\n             {\n-                qWarning() << \"PaymentServer::handleURIOrFile : Invalid URL: \" << fetchUrl;\n+                qWarning() << \"PaymentServer::handleURIOrFile: Invalid URL: \" << fetchUrl;\n                 emit message(tr(\"URI handling\"),\n                     tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n                     CClientUIInterface::ICON_WARNING);\n@@ -585,10 +585,10 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n     recipient.address = addresses.join(\"<br />\");\n \n     if (!recipient.authenticatedMerchant.isEmpty()) {\n-        qDebug() << \"PaymentServer::processPaymentRequest : Secure payment request from \" << recipient.authenticatedMerchant;\n+        qDebug() << \"PaymentServer::processPaymentRequest: Secure payment request from \" << recipient.authenticatedMerchant;\n     }\n     else {\n-        qDebug() << \"PaymentServer::processPaymentRequest : Insecure payment request to \" << addresses.join(\", \");\n+        qDebug() << \"PaymentServer::processPaymentRequest: Insecure payment request to \" << addresses.join(\", \");\n     }\n \n     return true;\n@@ -643,7 +643,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n         else {\n             // This should never happen, because sending coins should have\n             // just unlocked the wallet and refilled the keypool.\n-            qWarning() << \"PaymentServer::fetchPaymentACK : Error getting refund key, refund_to not set\";\n+            qWarning() << \"PaymentServer::fetchPaymentACK: Error getting refund key, refund_to not set\";\n         }\n     }\n \n@@ -655,7 +655,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     }\n     else {\n         // This should never happen, either.\n-        qWarning() << \"PaymentServer::fetchPaymentACK : Error serializing payment message\";\n+        qWarning() << \"PaymentServer::fetchPaymentACK: Error serializing payment message\";\n     }\n }\n \n@@ -694,7 +694,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n         SendCoinsRecipient recipient;\n         if (!request.parse(data))\n         {\n-            qWarning() << \"PaymentServer::netRequestFinished : Error parsing payment request\";\n+            qWarning() << \"PaymentServer::netRequestFinished: Error parsing payment request\";\n             emit message(tr(\"Payment request error\"),\n                 tr(\"Payment request cannot be parsed!\"),\n                 CClientUIInterface::MSG_ERROR);\n@@ -712,7 +712,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             QString msg = tr(\"Bad response from server %1\")\n                 .arg(reply->request().url().toString());\n \n-            qWarning() << \"PaymentServer::netRequestFinished : \" << msg;\n+            qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n             emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         }\n         else\n@@ -728,7 +728,7 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n \n     QString errString;\n     foreach (const QSslError& err, errs) {\n-        qWarning() << \"PaymentServer::reportSslErrors : \" << err;\n+        qWarning() << \"PaymentServer::reportSslErrors: \" << err;\n         errString += err.errorString() + \"\\n\";\n     }\n     emit message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "df1afbfaaae31266db335a94423581896697a65c",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -94,7 +94,7 @@ class TransactionTablePriv\n      */\n     void updateWallet(const uint256 &hash, int status, bool showTransaction)\n     {\n-        qDebug() << \"TransactionTablePriv::updateWallet : \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n+        qDebug() << \"TransactionTablePriv::updateWallet: \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n \n         // Find bounds of this transaction in model\n         QList<TransactionRecord>::iterator lower = qLowerBound(\n@@ -122,7 +122,7 @@ class TransactionTablePriv\n         case CT_NEW:\n             if(inModel)\n             {\n-                qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is already in model\";\n+                qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_NEW, but transaction is already in model\";\n                 break;\n             }\n             if(showTransaction)\n@@ -132,7 +132,7 @@ class TransactionTablePriv\n                 std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n                 if(mi == wallet->mapWallet.end())\n                 {\n-                    qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is not in wallet\";\n+                    qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_NEW, but transaction is not in wallet\";\n                     break;\n                 }\n                 // Added -- insert at the right position\n@@ -154,7 +154,7 @@ class TransactionTablePriv\n         case CT_DELETED:\n             if(!inModel)\n             {\n-                qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_DELETED, but transaction is not in model\";\n+                qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_DELETED, but transaction is not in model\";\n                 break;\n             }\n             // Removed -- remove entire transaction from table\n@@ -664,7 +664,7 @@ struct TransactionNotification\n     void invoke(QObject *ttm)\n     {\n         QString strHash = QString::fromStdString(hash.GetHex());\n-        qDebug() << \"NotifyTransactionChanged : \" + strHash + \" status= \" + QString::number(status);\n+        qDebug() << \"NotifyTransactionChanged: \" + strHash + \" status= \" + QString::number(status);\n         QMetaObject::invokeMethod(ttm, \"updateTransaction\", Qt::QueuedConnection,\n                                   Q_ARG(QString, strHash),\n                                   Q_ARG(int, status),"
      },
      {
        "sha": "4a7abf999cb04806f7f244239cb15996e14fc18f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -452,7 +452,7 @@ static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet,\n     QString strLabel = QString::fromStdString(label);\n     QString strPurpose = QString::fromStdString(purpose);\n \n-    qDebug() << \"NotifyAddressBookChanged : \" + strAddress + \" \" + strLabel + \" isMine=\" + QString::number(isMine) + \" purpose=\" + strPurpose + \" status=\" + QString::number(status);\n+    qDebug() << \"NotifyAddressBookChanged: \" + strAddress + \" \" + strLabel + \" isMine=\" + QString::number(isMine) + \" purpose=\" + strPurpose + \" status=\" + QString::number(status);\n     QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n                               Q_ARG(QString, strAddress),\n                               Q_ARG(QString, strLabel),"
      },
      {
        "sha": "28371771a9efbe7951f156b0b0bd789cdfe11288",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -82,7 +82,7 @@ Value getnewaddress(const Array& params, bool fHelp)\n             \"If 'account' is specified (DEPRECATED), it is added to the address book \\n\"\n             \"so payments received with the address will be credited to 'account'.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. if not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n+            \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"bitcoinaddress\\\"    (string) The new bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n@@ -319,7 +319,7 @@ void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n     if (pwalletMain->IsLocked())\n     {\n         strError = \"Error: Wallet locked, unable to create transaction!\";\n-        LogPrintf(\"SendMoney() : %s\", strError);\n+        LogPrintf(\"SendMoney(): %s\", strError);\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n \n@@ -333,7 +333,7 @@ void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n     {\n         if (nValue + nFeeRequired > pwalletMain->GetBalance())\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n-        LogPrintf(\"SendMoney() : %s\\n\", strError);\n+        LogPrintf(\"SendMoney(): %s\\n\", strError);\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     if (!pwalletMain->CommitTransaction(wtxNew, reservekey))"
      },
      {
        "sha": "0cee1a0116df6a7a7117948c864eabb56d4f6bd6",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -60,7 +60,7 @@ bool CastToBool(const valtype& vch)\n static inline void popstack(vector<valtype>& stack)\n {\n     if (stack.empty())\n-        throw runtime_error(\"popstack() : stack empty\");\n+        throw runtime_error(\"popstack(): stack empty\");\n     stack.pop_back();\n }\n "
      },
      {
        "sha": "8b36aa2f5061fcbb204d73737bbf1c734aacb9ec",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -391,7 +391,7 @@ class CScript : public std::vector<unsigned char>\n     CScript& operator<<(opcodetype opcode)\n     {\n         if (opcode < 0 || opcode > 0xff)\n-            throw std::runtime_error(\"CScript::operator<<() : invalid opcode\");\n+            throw std::runtime_error(\"CScript::operator<<(): invalid opcode\");\n         insert(end(), (unsigned char)opcode);\n         return *this;\n     }"
      },
      {
        "sha": "a62760a7938dec3f0111cc5f600345e8c48b14c0",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -249,7 +249,7 @@ uint64_t ReadCompactSize(Stream& is)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     if (nSizeRet > (uint64_t)MAX_SIZE)\n-        throw std::ios_base::failure(\"ReadCompactSize() : size too large\");\n+        throw std::ios_base::failure(\"ReadCompactSize(): size too large\");\n     return nSizeRet;\n }\n "
      },
      {
        "sha": "bd8568b1af35093c4db4b85b2ddcfff2431a019c",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -224,7 +224,7 @@ class CDataStream\n         {\n             if (nReadPosNext > vch.size())\n             {\n-                throw std::ios_base::failure(\"CDataStream::read() : end of data\");\n+                throw std::ios_base::failure(\"CDataStream::read(): end of data\");\n             }\n             memcpy(pch, &vch[nReadPos], nSize);\n             nReadPos = 0;\n@@ -244,7 +244,7 @@ class CDataStream\n         if (nReadPosNext >= vch.size())\n         {\n             if (nReadPosNext > vch.size())\n-                throw std::ios_base::failure(\"CDataStream::ignore() : end of data\");\n+                throw std::ios_base::failure(\"CDataStream::ignore(): end of data\");\n             nReadPos = 0;\n             vch.clear();\n             return (*this);\n@@ -374,18 +374,18 @@ class CAutoFile\n     CAutoFile& read(char* pch, size_t nSize)\n     {\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::read : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is NULL\");\n         if (fread(pch, 1, nSize, file) != nSize)\n-            throw std::ios_base::failure(feof(file) ? \"CAutoFile::read : end of file\" : \"CAutoFile::read : fread failed\");\n+            throw std::ios_base::failure(feof(file) ? \"CAutoFile::read: end of file\" : \"CAutoFile::read: fread failed\");\n         return (*this);\n     }\n \n     CAutoFile& write(const char* pch, size_t nSize)\n     {\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::write : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::write: file handle is NULL\");\n         if (fwrite(pch, 1, nSize, file) != nSize)\n-            throw std::ios_base::failure(\"CAutoFile::write : write failed\");\n+            throw std::ios_base::failure(\"CAutoFile::write: write failed\");\n         return (*this);\n     }\n \n@@ -401,7 +401,7 @@ class CAutoFile\n     {\n         // Serialize to this stream\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::operator<< : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::operator<<: file handle is NULL\");\n         ::Serialize(*this, obj, nType, nVersion);\n         return (*this);\n     }\n@@ -411,7 +411,7 @@ class CAutoFile\n     {\n         // Unserialize from this stream\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::operator>> : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::operator>>: file handle is NULL\");\n         ::Unserialize(*this, obj, nType, nVersion);\n         return (*this);\n     }\n@@ -452,7 +452,7 @@ class CBufferedFile\n             return false;\n         size_t read = fread((void*)&vchBuf[pos], 1, readNow, src);\n         if (read == 0) {\n-            throw std::ios_base::failure(feof(src) ? \"CBufferedFile::Fill : end of file\" : \"CBufferedFile::Fill : fread failed\");\n+            throw std::ios_base::failure(feof(src) ? \"CBufferedFile::Fill: end of file\" : \"CBufferedFile::Fill: fread failed\");\n         } else {\n             nSrcPos += read;\n             return true;"
      },
      {
        "sha": "e7aeee9db606c870315542a50dca96b9eb7e2ff7",
        "filename": "src/test/bignum.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/test/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/test/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum.h?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -37,14 +37,14 @@ class CBigNum : public BIGNUM\n         if (!BN_copy(this, &b))\n         {\n             BN_clear_free(this);\n-            throw bignum_error(\"CBigNum::CBigNum(const CBigNum&) : BN_copy failed\");\n+            throw bignum_error(\"CBigNum::CBigNum(const CBigNum&): BN_copy failed\");\n         }\n     }\n \n     CBigNum& operator=(const CBigNum& b)\n     {\n         if (!BN_copy(this, &b))\n-            throw bignum_error(\"CBigNum::operator= : BN_copy failed\");\n+            throw bignum_error(\"CBigNum::operator=: BN_copy failed\");\n         return (*this);\n     }\n \n@@ -151,15 +151,15 @@ inline const CBigNum operator+(const CBigNum& a, const CBigNum& b)\n {\n     CBigNum r;\n     if (!BN_add(&r, &a, &b))\n-        throw bignum_error(\"CBigNum::operator+ : BN_add failed\");\n+        throw bignum_error(\"CBigNum::operator+: BN_add failed\");\n     return r;\n }\n \n inline const CBigNum operator-(const CBigNum& a, const CBigNum& b)\n {\n     CBigNum r;\n     if (!BN_sub(&r, &a, &b))\n-        throw bignum_error(\"CBigNum::operator- : BN_sub failed\");\n+        throw bignum_error(\"CBigNum::operator-: BN_sub failed\");\n     return r;\n }\n "
      },
      {
        "sha": "e43a08629a1ae2b51feba692b244b8a301649208",
        "filename": "src/test/data/sig_canonical.json",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6af674ecdc99db2eb741b8dc79e44bd0202e3855/src/test/data/sig_canonical.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6af674ecdc99db2eb741b8dc79e44bd0202e3855/src/test/data/sig_canonical.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/sig_canonical.json?ref=6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "patch": "@@ -1,7 +0,0 @@\n-[\n-    \"300602010002010001\",\n-    \"3008020200ff020200ff01\",\n-    \"304402203932c892e2e550f3af8ee4ce9c215a87f9bb831dcac87b2838e2c2eaa891df0c022030b61dd36543125d56b9f9f3a1f9353189e5af33cdda8d77a5209aec03978fa001\",\n-    \"30450220076045be6f9eca28ff1ec606b833d0b87e70b2a630f5e3a496b110967a40f90a0221008fffd599910eefe00bc803c688c2eca1d2ba7f6b180620eaa03488e6585db6ba01\",\n-    \"3046022100876045be6f9eca28ff1ec606b833d0b87e70b2a630f5e3a496b110967a40f90a0221008fffd599910eefe00bc803c688c2eca1d2ba7f6b180620eaa03488e6585db6ba01\"\n-]"
      },
      {
        "sha": "d9a6c1cdd872ec1d64ac429577b6b210f67b17b8",
        "filename": "src/test/data/sig_noncanonical.json",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6af674ecdc99db2eb741b8dc79e44bd0202e3855/src/test/data/sig_noncanonical.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6af674ecdc99db2eb741b8dc79e44bd0202e3855/src/test/data/sig_noncanonical.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/sig_noncanonical.json?ref=6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "patch": "@@ -1,22 +0,0 @@\n-[\n-    \"non-hex strings are ignored\",\n-\n-    \"too short:\",    \"30050201FF020001\",\n-    \"too long:\",     \"30470221005990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba6105022200002d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"hashtype:\",     \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed11\",\n-    \"type:\",         \"314402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"total length:\", \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S len oob:\",    \"301F01205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb101\",\n-    \"R+S:\",          \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed0001\",\n-\n-    \"R type:\",       \"304401205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R len = 0:\",    \"3024020002202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R<0:\",          \"304402208990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R padded:\",     \"30450221005990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-\n-\n-    \"S type:\",       \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610501202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S len = 0:\",    \"302402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba6105020001\",\n-    \"S<0:\",          \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba61050220fd5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S padded:\",     \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba61050221002d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\"\n-]"
      },
      {
        "sha": "ea41dbcde23435912f8b6ac0a7e09a3df8717d05",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -27,7 +27,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n     static const uint256 one(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n     if (nIn >= txTo.vin.size())\n     {\n-        printf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n+        printf(\"ERROR: SignatureHash(): nIn=%d out of range\\n\", nIn);\n         return one;\n     }\n     CMutableTransaction txTmp(txTo);\n@@ -58,7 +58,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n         unsigned int nOut = nIn;\n         if (nOut >= txTmp.vout.size())\n         {\n-            printf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nOut);\n+            printf(\"ERROR: SignatureHash(): nOut=%d out of range\\n\", nOut);\n             return one;\n         }\n         txTmp.vout.resize(nOut+1);"
      },
      {
        "sha": "da271bd5d1a11c95a16d7139a0241ff738b78dba",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -141,7 +141,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n             }\n             pcursor->Next();\n         } catch (const std::exception& e) {\n-            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }\n     stats.nHeight = mapBlockIndex.find(GetBestBlock())->second->nHeight;\n@@ -223,14 +223,14 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nTx            = diskindex.nTx;\n \n                 if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits))\n-                    return error(\"LoadBlockIndex() : CheckProofOfWork failed: %s\", pindexNew->ToString());\n+                    return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n \n                 pcursor->Next();\n             } else {\n                 break; // if shutdown requested or finished loading block index\n             }\n         } catch (const std::exception& e) {\n-            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }\n "
      },
      {
        "sha": "6e0f7e9c5a6bd5a2afedba96c1dd7e1b2d1c3305",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -192,7 +192,7 @@ class CMinerPolicyEstimator\n             // Neither or both fee and priority sufficient to get confirmed:\n             // don't know why they got confirmed.\n         }\n-        LogPrint(\"estimatefee\", \"Seen TX confirm: %s : %s fee/%g priority, took %d blocks\\n\",\n+        LogPrint(\"estimatefee\", \"Seen TX confirm: %s: %s fee/%g priority, took %d blocks\\n\",\n                  assignedTo, feeRate.ToString(), dPriority, nBlocksAgo);\n     }\n \n@@ -658,7 +658,7 @@ CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n         minerPolicyEstimator->Write(fileout);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::WriteFeeEstimates() : unable to write policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\");\n         return false;\n     }\n     return true;\n@@ -671,13 +671,13 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n         int nVersionRequired, nVersionThatWrote;\n         filein >> nVersionRequired >> nVersionThatWrote;\n         if (nVersionRequired > CLIENT_VERSION)\n-            return error(\"CTxMemPool::ReadFeeEstimates() : up-version (%d) fee estimate file\", nVersionRequired);\n+            return error(\"CTxMemPool::ReadFeeEstimates(): up-version (%d) fee estimate file\", nVersionRequired);\n \n         LOCK(cs);\n         minerPolicyEstimator->Read(filein, minRelayFee);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::ReadFeeEstimates() : unable to read policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\");\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "d66a4465c53f494d15dbae26f39dad8a53a77abb",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -88,7 +88,7 @@ CPubKey CWallet::GenerateNewKey()\n         nTimeFirstKey = nCreationTime;\n \n     if (!AddKeyPubKey(secret, pubkey))\n-        throw std::runtime_error(\"CWallet::GenerateNewKey() : AddKey failed\");\n+        throw std::runtime_error(\"CWallet::GenerateNewKey(): AddKey failed\");\n     return pubkey;\n }\n \n@@ -619,7 +619,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n                     wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n                 }\n                 else\n-                    LogPrintf(\"AddToWallet() : found %s in block %s not in index\\n\",\n+                    LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n                              wtxIn.GetHash().ToString(),\n                              wtxIn.hashBlock.ToString());\n             }\n@@ -1616,7 +1616,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         if (!wtxNew.AcceptToMemoryPool(false))\n         {\n             // This must not fail. The transaction has already been signed and recorded.\n-            LogPrintf(\"CommitTransaction() : Error: Transaction not valid\");\n+            LogPrintf(\"CommitTransaction(): Error: Transaction not valid\");\n             return false;\n         }\n         wtxNew.RelayWalletTransaction();\n@@ -1809,7 +1809,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             if (!setKeyPool.empty())\n                 nEnd = *(--setKeyPool.end()) + 1;\n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey())))\n-                throw runtime_error(\"TopUpKeyPool() : writing generated key failed\");\n+                throw runtime_error(\"TopUpKeyPool(): writing generated key failed\");\n             setKeyPool.insert(nEnd);\n             LogPrintf(\"keypool added key %d, size=%u\\n\", nEnd, setKeyPool.size());\n         }\n@@ -1836,9 +1836,9 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool)\n         nIndex = *(setKeyPool.begin());\n         setKeyPool.erase(setKeyPool.begin());\n         if (!walletdb.ReadPool(nIndex, keypool))\n-            throw runtime_error(\"ReserveKeyFromKeyPool() : read failed\");\n+            throw runtime_error(\"ReserveKeyFromKeyPool(): read failed\");\n         if (!HaveKey(keypool.vchPubKey.GetID()))\n-            throw runtime_error(\"ReserveKeyFromKeyPool() : unknown key in key pool\");\n+            throw runtime_error(\"ReserveKeyFromKeyPool(): unknown key in key pool\");\n         assert(keypool.vchPubKey.IsValid());\n         LogPrintf(\"keypool reserve %d\\n\", nIndex);\n     }\n@@ -2086,11 +2086,11 @@ void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw runtime_error(\"GetAllReserveKeyHashes() : read failed\");\n+            throw runtime_error(\"GetAllReserveKeyHashes(): read failed\");\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         if (!HaveKey(keyID))\n-            throw runtime_error(\"GetAllReserveKeyHashes() : unknown key in key pool\");\n+            throw runtime_error(\"GetAllReserveKeyHashes(): unknown key in key pool\");\n         setAddress.insert(keyID);\n     }\n }\n@@ -2303,7 +2303,7 @@ int CMerkleTx::SetMerkleBranch(const CBlock& block)\n     {\n         vMerkleBranch.clear();\n         nIndex = -1;\n-        LogPrintf(\"ERROR: SetMerkleBranch() : couldn't find tx in block\\n\");\n+        LogPrintf(\"ERROR: SetMerkleBranch(): couldn't find tx in block\\n\");\n         return 0;\n     }\n "
      },
      {
        "sha": "aaff00b71660ff10e5257ac39dd6deb2d410e685",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -320,14 +320,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const\n     {\n         if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n+            throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n         return ((IsMine(txout) & filter) ? txout.nValue : 0);\n     }\n     bool IsChange(const CTxOut& txout) const;\n     CAmount GetChange(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n+            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n         return (IsChange(txout) ? txout.nValue : 0);\n     }\n     bool IsMine(const CTransaction& tx) const\n@@ -349,7 +349,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nDebit += GetDebit(txin, filter);\n             if (!MoneyRange(nDebit))\n-                throw std::runtime_error(\"CWallet::GetDebit() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n         }\n         return nDebit;\n     }\n@@ -360,7 +360,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nCredit += GetCredit(txout, filter);\n             if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n         }\n         return nCredit;\n     }\n@@ -371,7 +371,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nChange += GetChange(txout);\n             if (!MoneyRange(nChange))\n-                throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n         }\n         return nChange;\n     }\n@@ -804,7 +804,7 @@ class CWalletTx : public CMerkleTx\n                 const CTxOut &txout = vout[i];\n                 nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n                 if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n             }\n         }\n \n@@ -847,7 +847,7 @@ class CWalletTx : public CMerkleTx\n                 const CTxOut &txout = vout[i];\n                 nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n                 if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n             }\n         }\n "
      },
      {
        "sha": "b2daf036ff7308f6cc3df1282e2d08b58c35bcbf",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62649731fb1babaedff10b7c0baec4c50c90d60/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62649731fb1babaedff10b7c0baec4c50c90d60/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=a62649731fb1babaedff10b7c0baec4c50c90d60",
        "patch": "@@ -210,7 +210,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n \n     Dbc* pcursor = GetCursor();\n     if (!pcursor)\n-        throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : cannot create DB cursor\");\n+        throw runtime_error(\"CWalletDB::ListAccountCreditDebit(): cannot create DB cursor\");\n     unsigned int fFlags = DB_SET_RANGE;\n     while (true)\n     {\n@@ -226,7 +226,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n         else if (ret != 0)\n         {\n             pcursor->close();\n-            throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : error scanning DB\");\n+            throw runtime_error(\"CWalletDB::ListAccountCreditDebit(): error scanning DB\");\n         }\n \n         // Unserialize"
      }
    ]
  },
  {
    "sha": "f4b2078f721887b8b913464e197f6eaae9086938",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGIyMDc4ZjcyMTg4N2I4YjkxMzQ2NGUxOTdmNmVhYWU5MDg2OTM4",
    "commit": {
      "author": {
        "name": "Shaul Kfir",
        "email": "shaul.kfir@gmail.com",
        "date": "2015-02-02T17:30:56Z"
      },
      "committer": {
        "name": "Shaul Kfir",
        "email": "shaul.kfir@gmail.com",
        "date": "2015-02-02T19:36:00Z"
      },
      "message": "Replace difficulty readjustment blocks with Interval()",
      "tree": {
        "sha": "77f25a424cb67035c6f12f40920b74b98d989a62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77f25a424cb67035c6f12f40920b74b98d989a62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4b2078f721887b8b913464e197f6eaae9086938",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4b2078f721887b8b913464e197f6eaae9086938",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4b2078f721887b8b913464e197f6eaae9086938",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4b2078f721887b8b913464e197f6eaae9086938/comments",
    "author": {
      "login": "shaulkf",
      "id": 4781551,
      "node_id": "MDQ6VXNlcjQ3ODE1NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4781551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shaulkf",
      "html_url": "https://github.com/shaulkf",
      "followers_url": "https://api.github.com/users/shaulkf/followers",
      "following_url": "https://api.github.com/users/shaulkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/shaulkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shaulkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shaulkf/subscriptions",
      "organizations_url": "https://api.github.com/users/shaulkf/orgs",
      "repos_url": "https://api.github.com/users/shaulkf/repos",
      "events_url": "https://api.github.com/users/shaulkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shaulkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "shaulkf",
      "id": 4781551,
      "node_id": "MDQ6VXNlcjQ3ODE1NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4781551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shaulkf",
      "html_url": "https://github.com/shaulkf",
      "followers_url": "https://api.github.com/users/shaulkf/followers",
      "following_url": "https://api.github.com/users/shaulkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/shaulkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shaulkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shaulkf/subscriptions",
      "organizations_url": "https://api.github.com/users/shaulkf/orgs",
      "repos_url": "https://api.github.com/users/shaulkf/repos",
      "events_url": "https://api.github.com/users/shaulkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shaulkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a62649731fb1babaedff10b7c0baec4c50c90d60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62649731fb1babaedff10b7c0baec4c50c90d60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a62649731fb1babaedff10b7c0baec4c50c90d60"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f1c4016575ebc0ca7f92d4b3daad893fc33164a3",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b2078f721887b8b913464e197f6eaae9086938/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b2078f721887b8b913464e197f6eaae9086938/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=f4b2078f721887b8b913464e197f6eaae9086938",
        "patch": "@@ -44,7 +44,7 @@ Value GetNetworkHashPS(int lookup, int height) {\n \n     // If lookup is -1, then use blocks since last difficulty change.\n     if (lookup <= 0)\n-        lookup = pb->nHeight % 2016 + 1;\n+        lookup = pb->nHeight % Params().Interval() + 1;\n \n     // If lookup is larger than chain, then set it to chain length.\n     if (lookup > pb->nHeight)"
      }
    ]
  },
  {
    "sha": "858809a33e4f690c4ad213f44a6c4465fc2ef025",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTg4MDlhMzNlNGY2OTBjNGFkMjEzZjQ0YTZjNDQ2NWZjMmVmMDI1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-27T13:28:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-03T04:19:12Z"
      },
      "message": "Use separate SignatureChecker for CMutableTransaction",
      "tree": {
        "sha": "a7b1dad512fb2040431a92f50b2131c0a872d088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7b1dad512fb2040431a92f50b2131c0a872d088"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/858809a33e4f690c4ad213f44a6c4465fc2ef025",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/858809a33e4f690c4ad213f44a6c4465fc2ef025",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/858809a33e4f690c4ad213f44a6c4465fc2ef025",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/858809a33e4f690c4ad213f44a6c4465fc2ef025/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a62649731fb1babaedff10b7c0baec4c50c90d60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62649731fb1babaedff10b7c0baec4c50c90d60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a62649731fb1babaedff10b7c0baec4c50c90d60"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 49,
      "deletions": 39
    },
    "files": [
      {
        "sha": "ff409d741b4a5c442bce7f79bee6e3d9a89b742a",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -436,7 +436,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "702358cf9406ad97632a264906151f4239ab9581",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -1422,7 +1422,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore), &error)) {\n+    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(*ptxTo, nIn, cacheStore), &error)) {\n         return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n     }\n     return true;"
      },
      {
        "sha": "07ddcc5026beffba30f5bf1ca49d67a3d3ef6809",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -688,7 +688,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "5e1f4735314c8eb2d0c92ef151a6ecc152809849",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -78,7 +78,7 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n          // Regardless of the verification result, the tx did not error.\n          set_error(err, bitcoinconsensus_ERR_OK);\n \n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, SignatureChecker(tx, nIn), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, TransactionSignatureChecker(tx, nIn), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "b1cf028c54db84dca13a5474a7c8fd6a2c4f1a27",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -1058,12 +1058,12 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n     return ss.GetHash();\n }\n \n-bool SignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n+bool TransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n     return pubkey.Verify(sighash, vchSig);\n }\n \n-bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n {\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())"
      },
      {
        "sha": "063a072368818808ececb8dabdc63ba4bcc307be",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_SCRIPT_INTERPRETER_H\n \n #include \"script_error.h\"\n+#include \"primitives/transaction.h\"\n \n #include <vector>\n #include <stdint.h>\n@@ -90,7 +91,7 @@ class BaseSignatureChecker\n     virtual ~BaseSignatureChecker() {}\n };\n \n-class SignatureChecker : public BaseSignatureChecker\n+class TransactionSignatureChecker : public BaseSignatureChecker\n {\n private:\n     const CTransaction& txTo;\n@@ -100,10 +101,19 @@ class SignatureChecker : public BaseSignatureChecker\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    SignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n+    TransactionSignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n };\n \n+class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n+{\n+private:\n+    const CTransaction txTo;\n+\n+public:\n+    MutableTransactionSignatureChecker(const CMutableTransaction& txToIn, unsigned int nInIn) : TransactionSignatureChecker(txTo, nInIn), txTo(txToIn) {}\n+};\n+\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n "
      },
      {
        "sha": "099b4ad0e315d13b506960a485bc63899bf56a0b",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -74,14 +74,14 @@ class CSignatureCache\n \n }\n \n-bool CachingSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n+bool CachingTransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n     static CSignatureCache signatureCache;\n \n     if (signatureCache.Get(sighash, vchSig, pubkey))\n         return true;\n \n-    if (!SignatureChecker::VerifySignature(vchSig, pubkey, sighash))\n+    if (!TransactionSignatureChecker::VerifySignature(vchSig, pubkey, sighash))\n         return false;\n \n     if (store)"
      },
      {
        "sha": "6c5bba2c0126b61c82bd2908dec9572a5b602181",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -12,13 +12,13 @@\n \n class CPubKey;\n \n-class CachingSignatureChecker : public SignatureChecker\n+class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n {\n private:\n     bool store;\n \n public:\n-    CachingSignatureChecker(const CTransaction& txToIn, unsigned int nInIn, bool storeIn=true) : SignatureChecker(txToIn, nInIn), store(storeIn) {}\n+    CachingTransactionSignatureChecker(const CTransaction& txToIn, unsigned int nInIn, bool storeIn=true) : TransactionSignatureChecker(txToIn, nInIn), store(storeIn) {}\n \n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };"
      },
      {
        "sha": "d76466b7036069fd48e60325275f62a43e6cf6e7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -123,7 +123,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(txTo, nIn));\n+    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(txTo, nIn));\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -174,7 +174,7 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const CTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (SignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n+            if (TransactionSignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n             {\n                 sigs[pubkey] = sig;\n                 break;"
      },
      {
        "sha": "dcc8bf887cb3acb960ec6787592f695aee757d4f",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -82,20 +82,20 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.assign(1,key[0]);\n     keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(txTo[0], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n         keys.assign(1,key[1]);\n         keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n     }\n \n@@ -106,18 +106,18 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n         {\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n         }\n         else\n         {\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n         }\n     }\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(txTo[1], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n \n \n@@ -129,12 +129,12 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n             {\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n             else\n             {\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n             }\n         }"
      },
      {
        "sha": "6ec301ce40c933884859d1acab35edd5515c227c",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -43,7 +43,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, SignatureChecker(txTo, 0), &err);\n+    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(txTo, 0), &err);\n }\n \n "
      },
      {
        "sha": "6bbc3e41c1032ce319561c8eff72fbf3bf7f41a8",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -93,7 +93,7 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bo\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, SignatureChecker(tx, 0), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(tx, 0), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(expect == (err == SCRIPT_ERR_OK), std::string(ScriptErrorString(err)) + \": \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -682,18 +682,18 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n }\n \n@@ -715,54 +715,54 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }    \n "
      },
      {
        "sha": "04a79caf02083a84be2f67c5260307333d4ccc31",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/858809a33e4f690c4ad213f44a6c4465fc2ef025/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "patch": "@@ -145,7 +145,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 verify_flags, SignatureChecker(tx, i), &err),\n+                                                 verify_flags, TransactionSignatureChecker(tx, i), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -220,7 +220,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      verify_flags, SignatureChecker(tx, i), &err);\n+                                      verify_flags, TransactionSignatureChecker(tx, i), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));"
      }
    ]
  },
  {
    "sha": "9fddceda44fb5592be179d783f0e5ac616c51c0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmRkY2VkYTQ0ZmI1NTkyYmUxNzlkNzgzZjBlNWFjNjE2YzUxYzBk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-27T14:01:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-03T04:19:46Z"
      },
      "message": "Avoid storing a reference passed to SignatureChecker constructors",
      "tree": {
        "sha": "e5fbeb4aa5f3fcc6109911b61156e1b1adbcfff2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5fbeb4aa5f3fcc6109911b61156e1b1adbcfff2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fddceda44fb5592be179d783f0e5ac616c51c0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fddceda44fb5592be179d783f0e5ac616c51c0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fddceda44fb5592be179d783f0e5ac616c51c0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fddceda44fb5592be179d783f0e5ac616c51c0d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/858809a33e4f690c4ad213f44a6c4465fc2ef025",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/858809a33e4f690c4ad213f44a6c4465fc2ef025"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 36,
      "deletions": 36
    },
    "files": [
      {
        "sha": "c1622cf5d3e60f31a4c8ca6d09c39d2fe4090014",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -436,7 +436,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "57b44baac5d989421e59949c6fa4e6e7ad094066",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -1422,7 +1422,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(*ptxTo, nIn, cacheStore), &error)) {\n+    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n         return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n     }\n     return true;"
      },
      {
        "sha": "a3b0e47d00f39b68d359ec01a7878083f10cc3d5",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -688,7 +688,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "b0d5faaf777f359c8289fd4cc2dcd42a1826bda3",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -78,7 +78,7 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n          // Regardless of the verification result, the tx did not error.\n          set_error(err, bitcoinconsensus_ERR_OK);\n \n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, TransactionSignatureChecker(tx, nIn), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, TransactionSignatureChecker(&tx, nIn), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "af7c641c05f3e14192ce2ef8cfb76a2a78a4a816",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -1076,7 +1076,7 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n-    uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType);\n \n     if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;"
      },
      {
        "sha": "fc64438f6873bc005a4688f5b231c5ebb9499b69",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -94,14 +94,14 @@ class BaseSignatureChecker\n class TransactionSignatureChecker : public BaseSignatureChecker\n {\n private:\n-    const CTransaction& txTo;\n+    const CTransaction* txTo;\n     unsigned int nIn;\n \n protected:\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    TransactionSignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n };\n \n@@ -111,7 +111,7 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n     const CTransaction txTo;\n \n public:\n-    MutableTransactionSignatureChecker(const CMutableTransaction& txToIn, unsigned int nInIn) : TransactionSignatureChecker(txTo, nInIn), txTo(txToIn) {}\n+    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn) : TransactionSignatureChecker(&txTo, nInIn), txTo(*txToIn) {}\n };\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);"
      },
      {
        "sha": "b299038daa34105541e006ca83492cb515db2ad2",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -18,7 +18,7 @@ class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n     bool store;\n \n public:\n-    CachingTransactionSignatureChecker(const CTransaction& txToIn, unsigned int nInIn, bool storeIn=true) : TransactionSignatureChecker(txToIn, nInIn), store(storeIn) {}\n+    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, bool storeIn=true) : TransactionSignatureChecker(txToIn, nInIn), store(storeIn) {}\n \n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };"
      },
      {
        "sha": "14119f7e2cc812c4c96d057544fb7a7c8150f1b7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -123,7 +123,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(txTo, nIn));\n+    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&txTo, nIn));\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -174,7 +174,7 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const CTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (TransactionSignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n+            if (TransactionSignatureChecker(&txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n             {\n                 sigs[pubkey] = sig;\n                 break;"
      },
      {
        "sha": "2168a5fef1f9fe64d6b8d2f7204a5c185b1bc8b2",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -82,20 +82,20 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.assign(1,key[0]);\n     keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(txTo[0], 0), &err));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n         keys.assign(1,key[1]);\n         keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n     }\n \n@@ -106,18 +106,18 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n         {\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n         }\n         else\n         {\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n         }\n     }\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(txTo[1], 0), &err));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n \n \n@@ -129,12 +129,12 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n             {\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n             else\n             {\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n             }\n         }"
      },
      {
        "sha": "94f2ce1a29affb880f9114a8003e5e16cbd60f45",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -43,7 +43,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(txTo, 0), &err);\n+    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0), &err);\n }\n \n "
      },
      {
        "sha": "4858cf9e53158c8eb3494bcae2c64794d2d35c07",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -93,7 +93,7 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bo\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(tx, 0), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(expect == (err == SCRIPT_ERR_OK), std::string(ScriptErrorString(err)) + \": \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -682,18 +682,18 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n }\n \n@@ -715,54 +715,54 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, MutableTransactionSignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }    \n "
      },
      {
        "sha": "5a109cabca860313f75f714f9fc7f58a46a2ce59",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fddceda44fb5592be179d783f0e5ac616c51c0d/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "patch": "@@ -145,7 +145,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 verify_flags, TransactionSignatureChecker(tx, i), &err),\n+                                                 verify_flags, TransactionSignatureChecker(&tx, i), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -220,7 +220,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      verify_flags, TransactionSignatureChecker(tx, i), &err);\n+                                      verify_flags, TransactionSignatureChecker(&tx, i), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));"
      }
    ]
  },
  {
    "sha": "f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDI1MDUwNTQ2NjQ0YTM2YjBiOGUwZWIyZjY5MzRhM2UwZjZmODBm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T07:15:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T07:26:08Z"
      },
      "message": "Merge pull request #5719\n\n9fddced Avoid storing a reference passed to SignatureChecker constructors (Pieter Wuille)\n858809a Use separate SignatureChecker for CMutableTransaction (Pieter Wuille)",
      "tree": {
        "sha": "e5fbeb4aa5f3fcc6109911b61156e1b1adbcfff2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5fbeb4aa5f3fcc6109911b61156e1b1adbcfff2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0HgQAAoJEHSBCwEjRsmm88kH/jhKlmQXFb+xOpa4Amio8e2d\nl7gYyGTQlzEkgELgw956WZckkD5y7thq9yDmCqhjlxt4XdDkzb+h8MNGk1QGOfOa\nuq7E5qXNIRXoweBubksx03KDhmtU/28KPLlbAIcW/BCaVD2OXcEgnM4Ea/Gn/Ybt\nuppsfNr478YGMHgW/VjBAMz4AMV2SSdeaNbBKjc8VGO1vEDk5hu9+9M5L6pizYyo\nzoklVSRSMIAgtDtIMvZKB2A6rb9etFGyvDQ8DLWVR8ZFptgXeO0iwOSQX1uCblyS\nKHGxkpFLQUZ1C+McklVT/NMP1WQ01M2M2gTPZ0oscH06gDK8Hn2/7cHyHad3OM8=\n=xFKm\n-----END PGP SIGNATURE-----",
        "payload": "tree e5fbeb4aa5f3fcc6109911b61156e1b1adbcfff2\nparent a62649731fb1babaedff10b7c0baec4c50c90d60\nparent 9fddceda44fb5592be179d783f0e5ac616c51c0d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422947751 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422948368 +0100\n\nMerge pull request #5719\n\n9fddced Avoid storing a reference passed to SignatureChecker constructors (Pieter Wuille)\n858809a Use separate SignatureChecker for CMutableTransaction (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a62649731fb1babaedff10b7c0baec4c50c90d60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62649731fb1babaedff10b7c0baec4c50c90d60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a62649731fb1babaedff10b7c0baec4c50c90d60"
      },
      {
        "sha": "9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fddceda44fb5592be179d783f0e5ac616c51c0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fddceda44fb5592be179d783f0e5ac616c51c0d"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 51,
      "deletions": 41
    },
    "files": [
      {
        "sha": "c1622cf5d3e60f31a4c8ca6d09c39d2fe4090014",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -436,7 +436,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "57b44baac5d989421e59949c6fa4e6e7ad094066",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -1422,7 +1422,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore), &error)) {\n+    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n         return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n     }\n     return true;"
      },
      {
        "sha": "a3b0e47d00f39b68d359ec01a7878083f10cc3d5",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -688,7 +688,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "b0d5faaf777f359c8289fd4cc2dcd42a1826bda3",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -78,7 +78,7 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n          // Regardless of the verification result, the tx did not error.\n          set_error(err, bitcoinconsensus_ERR_OK);\n \n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, SignatureChecker(tx, nIn), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, TransactionSignatureChecker(&tx, nIn), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "af7c641c05f3e14192ce2ef8cfb76a2a78a4a816",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -1058,12 +1058,12 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n     return ss.GetHash();\n }\n \n-bool SignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n+bool TransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n     return pubkey.Verify(sighash, vchSig);\n }\n \n-bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n {\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())\n@@ -1076,7 +1076,7 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n     int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n-    uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType);\n \n     if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;"
      },
      {
        "sha": "fc64438f6873bc005a4688f5b231c5ebb9499b69",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_SCRIPT_INTERPRETER_H\n \n #include \"script_error.h\"\n+#include \"primitives/transaction.h\"\n \n #include <vector>\n #include <stdint.h>\n@@ -90,20 +91,29 @@ class BaseSignatureChecker\n     virtual ~BaseSignatureChecker() {}\n };\n \n-class SignatureChecker : public BaseSignatureChecker\n+class TransactionSignatureChecker : public BaseSignatureChecker\n {\n private:\n-    const CTransaction& txTo;\n+    const CTransaction* txTo;\n     unsigned int nIn;\n \n protected:\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    SignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n };\n \n+class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n+{\n+private:\n+    const CTransaction txTo;\n+\n+public:\n+    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn) : TransactionSignatureChecker(&txTo, nInIn), txTo(*txToIn) {}\n+};\n+\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n "
      },
      {
        "sha": "099b4ad0e315d13b506960a485bc63899bf56a0b",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -74,14 +74,14 @@ class CSignatureCache\n \n }\n \n-bool CachingSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n+bool CachingTransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n     static CSignatureCache signatureCache;\n \n     if (signatureCache.Get(sighash, vchSig, pubkey))\n         return true;\n \n-    if (!SignatureChecker::VerifySignature(vchSig, pubkey, sighash))\n+    if (!TransactionSignatureChecker::VerifySignature(vchSig, pubkey, sighash))\n         return false;\n \n     if (store)"
      },
      {
        "sha": "b299038daa34105541e006ca83492cb515db2ad2",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -12,13 +12,13 @@\n \n class CPubKey;\n \n-class CachingSignatureChecker : public SignatureChecker\n+class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n {\n private:\n     bool store;\n \n public:\n-    CachingSignatureChecker(const CTransaction& txToIn, unsigned int nInIn, bool storeIn=true) : SignatureChecker(txToIn, nInIn), store(storeIn) {}\n+    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, bool storeIn=true) : TransactionSignatureChecker(txToIn, nInIn), store(storeIn) {}\n \n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };"
      },
      {
        "sha": "14119f7e2cc812c4c96d057544fb7a7c8150f1b7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -123,7 +123,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(txTo, nIn));\n+    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&txTo, nIn));\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -174,7 +174,7 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const CTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (SignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n+            if (TransactionSignatureChecker(&txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n             {\n                 sigs[pubkey] = sig;\n                 break;"
      },
      {
        "sha": "2168a5fef1f9fe64d6b8d2f7204a5c185b1bc8b2",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -82,20 +82,20 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.assign(1,key[0]);\n     keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n         keys.assign(1,key[1]);\n         keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n     }\n \n@@ -106,18 +106,18 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n         {\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n         }\n         else\n         {\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n         }\n     }\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0), &err));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n \n \n@@ -129,12 +129,12 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n             {\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n             else\n             {\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n             }\n         }"
      },
      {
        "sha": "94f2ce1a29affb880f9114a8003e5e16cbd60f45",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -43,7 +43,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, SignatureChecker(txTo, 0), &err);\n+    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0), &err);\n }\n \n "
      },
      {
        "sha": "4858cf9e53158c8eb3494bcae2c64794d2d35c07",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -93,7 +93,7 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bo\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, SignatureChecker(tx, 0), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(expect == (err == SCRIPT_ERR_OK), std::string(ScriptErrorString(err)) + \": \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -682,18 +682,18 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n }\n \n@@ -715,54 +715,54 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, SignatureChecker(txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }    \n "
      },
      {
        "sha": "5a109cabca860313f75f714f9fc7f58a46a2ce59",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f425050546644a36b0b8e0eb2f6934a3e0f6f80f/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "patch": "@@ -145,7 +145,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 verify_flags, SignatureChecker(tx, i), &err),\n+                                                 verify_flags, TransactionSignatureChecker(&tx, i), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -220,7 +220,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      verify_flags, SignatureChecker(tx, i), &err);\n+                                      verify_flags, TransactionSignatureChecker(&tx, i), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));"
      }
    ]
  },
  {
    "sha": "9c4a5a506787130a17f59277ca140bcfdd263e36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzRhNWE1MDY3ODcxMzBhMTdmNTkyNzdjYTE0MGJjZmRkMjYzZTM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T08:47:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T08:49:26Z"
      },
      "message": "Merge pull request #5729\n\nfdf80ea [Qt] allow unit changes for read-only BitcoinAmountField (Philip Kaufmann)",
      "tree": {
        "sha": "4c1e813e942164f961fe5ca75942e226ce4c6947",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c1e813e942164f961fe5ca75942e226ce4c6947"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c4a5a506787130a17f59277ca140bcfdd263e36",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEbBAABCgAGBQJU0IuWAAoJEHSBCwEjRsmmNa0H9j2AEd97Zm+SymEZoyqnvNJM\nHVJan2ZeZIn3uHoyiGtiImWAtoDjoA5YQXfv6uqmyhgjE6frOCO1h+KHGL1ieNB3\nelMbJgi6Y8jQ0DfFzI7rsyPA2JqrIbJitDAVtFuq4LKGY9GWHkerGPQ+bMt/c0X8\n0nUOeFasHiogEZ3/sRXbH3cKcr1a1gAA3zY2MlIioqqgZomlgu2x+OuXfxUBgJLH\nXMf1g7AS6/yucXELGsQYZybi9k+TeZm97GsF0wGytzr2iDmFFALl+9drG0ZLdvXU\nRmq/yZWZzwkdeTWwMC1z9c9p+Z1MDsAcrU+XIWSRycyypcCYc2PM2HPphqUaTA==\n=igMM\n-----END PGP SIGNATURE-----",
        "payload": "tree 4c1e813e942164f961fe5ca75942e226ce4c6947\nparent f425050546644a36b0b8e0eb2f6934a3e0f6f80f\nparent fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422953276 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422953366 +0100\n\nMerge pull request #5729\n\nfdf80ea [Qt] allow unit changes for read-only BitcoinAmountField (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4a5a506787130a17f59277ca140bcfdd263e36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c4a5a506787130a17f59277ca140bcfdd263e36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4a5a506787130a17f59277ca140bcfdd263e36/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f425050546644a36b0b8e0eb2f6934a3e0f6f80f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f425050546644a36b0b8e0eb2f6934a3e0f6f80f"
      },
      {
        "sha": "fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf80ea7b19dde7ddec3baffeb1400fe1ca1c37a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d31a1e018b2898a5bea2338abd3ad84002040cdb",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4a5a506787130a17f59277ca140bcfdd263e36/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4a5a506787130a17f59277ca140bcfdd263e36/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=9c4a5a506787130a17f59277ca140bcfdd263e36",
        "patch": "@@ -278,7 +278,6 @@ void BitcoinAmountField::setValue(const CAmount& value)\n void BitcoinAmountField::setReadOnly(bool fReadOnly)\n {\n     amount->setReadOnly(fReadOnly);\n-    unit->setEnabled(!fReadOnly);\n }\n \n void BitcoinAmountField::unitChanged(int idx)"
      }
    ]
  },
  {
    "sha": "41e6e4caba9899ce7c165b0784461c55c867ee24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWU2ZTRjYWJhOTg5OWNlN2MxNjViMDc4NDQ2MWM1NWM4NjdlZTI0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T09:34:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T09:34:53Z"
      },
      "message": "Merge pull request #5713\n\nbf6cdeb Increase coverage of DERSIG edge cases (Pieter Wuille)\n819bcf9 Add RPC test for DERSIG BIP switchover logic (Pieter Wuille)\n5a47811 BIP66 changeover logic (Pieter Wuille)\n092e9fe Example unit tests from BIP66 (Pieter Wuille)\n80ad135 Change IsDERSignature to BIP66 implementation (Pieter Wuille)",
      "tree": {
        "sha": "04ee66c394416e33cc3e665cea99bc61716976c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04ee66c394416e33cc3e665cea99bc61716976c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41e6e4caba9899ce7c165b0784461c55c867ee24",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0JY9AAoJEHSBCwEjRsmm1nQIALFpbOb7hTp+NRqA/BV8SOe5\nxp2Gt8HhZaplUnsIF2ZBeDhvzYiz1jZCiM1CkFzilLNjVqNyMJyuIPLl1k0r9FVk\nvIRndI7dgX6mcSuhnOeQEl50cxkFz7AyktlJjrKVg8Pw0NxGiZYGtFAO2p0S0xNF\naqKEoBaTA5cDnZPRWrXxBX9ZQB9JuR9BtubHDkCWWWoRM/JDpTvPjJncfciVqZXi\n/H5JP4Pz2zEpfDJu836xgjT2veonAg5geg8iXpF14PesvtRuuTtxGHLlebW1FrcD\nyWa4m7GEZTZmt8QtasJ2VWve+XJ8yLDwF/hx9eO3WuptRRGQaX4WGhACNU4ZjP4=\n=ztAH\n-----END PGP SIGNATURE-----",
        "payload": "tree 04ee66c394416e33cc3e665cea99bc61716976c4\nparent 9c4a5a506787130a17f59277ca140bcfdd263e36\nparent bf6cdebdc5b750cea6121095dcbbbf720b726bb9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422956082 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422956093 +0100\n\nMerge pull request #5713\n\nbf6cdeb Increase coverage of DERSIG edge cases (Pieter Wuille)\n819bcf9 Add RPC test for DERSIG BIP switchover logic (Pieter Wuille)\n5a47811 BIP66 changeover logic (Pieter Wuille)\n092e9fe Example unit tests from BIP66 (Pieter Wuille)\n80ad135 Change IsDERSignature to BIP66 implementation (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41e6e4caba9899ce7c165b0784461c55c867ee24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41e6e4caba9899ce7c165b0784461c55c867ee24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41e6e4caba9899ce7c165b0784461c55c867ee24/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c4a5a506787130a17f59277ca140bcfdd263e36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4a5a506787130a17f59277ca140bcfdd263e36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c4a5a506787130a17f59277ca140bcfdd263e36"
      },
      {
        "sha": "bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf6cdebdc5b750cea6121095dcbbbf720b726bb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf6cdebdc5b750cea6121095dcbbbf720b726bb9"
      }
    ],
    "stats": {
      "total": 469,
      "additions": 405,
      "deletions": 64
    },
    "files": [
      {
        "sha": "9f2cc84601545796b87c6e181acb10e88e829e4f",
        "filename": "qa/rpc-tests/bipdersig.py",
        "status": "added",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/qa/rpc-tests/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/qa/rpc-tests/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig.py?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -0,0 +1,90 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test the BIP66 changeover logic\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+import os\n+import shutil\n+\n+class BIP66Test(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, []))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=2\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=3\"]))\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[2], 0)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        cnt = self.nodes[0].getblockcount()\n+\n+        # Mine some old-version blocks\n+        self.nodes[1].setgenerate(True, 100)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 100):\n+            raise AssertionError(\"Failed to mine 100 version=2 blocks\")\n+\n+        # Mine 750 new-version blocks\n+        for i in xrange(15):\n+            self.nodes[2].setgenerate(True, 50)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 850):\n+            raise AssertionError(\"Failed to mine 750 version=3 blocks\")\n+\n+        # TODO: check that new DERSIG rules are not enforced\n+\n+        # Mine 1 new-version block\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 851):\n+            raise AssertionFailure(\"Failed to mine a version=3 blocks\")\n+\n+        # TODO: check that new DERSIG rules are enforced\n+\n+        # Mine 198 new-version blocks\n+        for i in xrange(2):\n+            self.nodes[2].setgenerate(True, 99)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1049):\n+            raise AssertionError(\"Failed to mine 198 version=3 blocks\")\n+\n+        # Mine 1 old-version block\n+        self.nodes[1].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1050):\n+            raise AssertionError(\"Failed to mine a version=2 block after 949 version=3 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Failed to mine a version=3 block\")\n+\n+        # Mine 1 old-version blocks\n+        try:\n+            self.nodes[1].setgenerate(True, 1)\n+            raise AssertionError(\"Succeeded to mine a version=2 block after 950 version=3 blocks\")\n+        except JSONRPCException:\n+            pass\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Accepted a version=2 block after 950 version=3 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].setgenerate(True, 1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1052):\n+            raise AssertionError(\"Failed to mine a version=3 block\")\n+\n+if __name__ == '__main__':\n+    BIP66Test().main()"
      },
      {
        "sha": "0afcae4b57f22c32b2fb78381142a78723ad45a8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -1764,6 +1764,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n+    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n+    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, Params().EnforceBlockUpgradeMajority())) {\n+        flags |= SCRIPT_VERIFY_DERSIG;\n+    }\n+\n     CBlockUndo blockundo;\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n@@ -2601,6 +2606,13 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n                              REJECT_OBSOLETE, \"bad-version\");\n     }\n \n+    // Reject block.nVersion=2 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (block.nVersion < 3 && IsSuperMajority(3, pindexPrev, Params().RejectBlockOutdatedMajority()))\n+    {\n+        return state.Invalid(error(\"%s : rejected nVersion=2 block\", __func__),\n+                             REJECT_OBSOLETE, \"bad-version\");\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "c7ed6f723a4d35c77eec7fb40e90e92b6f2b531b",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -24,7 +24,7 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int32_t CURRENT_VERSION=2;\n+    static const int32_t CURRENT_VERSION=3;\n     int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;"
      },
      {
        "sha": "0320577797873e2b03e50930f4330cc58ec9c692",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -46,6 +46,7 @@ enum\n {\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE      = 0,\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG    = (1U << 2), // enforce strict DER (BIP66) compliance\n };\n \n /// Returns 1 if the input nIn of the serialized transaction pointed to by"
      },
      {
        "sha": "84a7432fdbdd3515efb4574c8a74aed4539cc552",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 63,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -93,76 +93,76 @@ bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {\n  * in which case a single 0 byte is necessary and even required).\n  * \n  * See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623\n+ *\n+ * This function is consensus-critical since BIP66.\n  */\n-bool static IsDERSignature(const valtype &vchSig) {\n+bool static IsValidSignatureEncoding(const std::vector<unsigned char> &sig) {\n+    // Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S] [sighash]\n+    // * total-length: 1-byte length descriptor of everything that follows,\n+    //   excluding the sighash byte.\n+    // * R-length: 1-byte length descriptor of the R value that follows.\n+    // * R: arbitrary-length big-endian encoded R value. It must use the shortest\n+    //   possible encoding for a positive integers (which means no null bytes at\n+    //   the start, except a single one when the next byte has its highest bit set).\n+    // * S-length: 1-byte length descriptor of the S value that follows.\n+    // * S: arbitrary-length big-endian encoded S value. The same rules apply.\n+    // * sighash: 1-byte value indicating what data is hashed (not part of the DER\n+    //   signature)\n \n-    if (vchSig.size() < 9) {\n-        //  Non-canonical signature: too short\n-        return false;\n-    }\n-    if (vchSig.size() > 73) {\n-        // Non-canonical signature: too long\n-        return false;\n-    }\n-    if (vchSig[0] != 0x30) {\n-        //  Non-canonical signature: wrong type\n-        return false;\n-    }\n-    if (vchSig[1] != vchSig.size()-3) {\n-        //  Non-canonical signature: wrong length marker\n-        return false;\n-    }\n-    unsigned int nLenR = vchSig[3];\n-    if (5 + nLenR >= vchSig.size()) {\n-        //  Non-canonical signature: S length misplaced\n-        return false;\n-    }\n-    unsigned int nLenS = vchSig[5+nLenR];\n-    if ((unsigned long)(nLenR+nLenS+7) != vchSig.size()) {\n-        //  Non-canonical signature: R+S length mismatch\n-        return false;\n-    }\n+    // Minimum and maximum size constraints.\n+    if (sig.size() < 9) return false;\n+    if (sig.size() > 73) return false;\n \n-    const unsigned char *R = &vchSig[4];\n-    if (R[-2] != 0x02) {\n-        //  Non-canonical signature: R value type mismatch\n-        return false;\n-    }\n-    if (nLenR == 0) {\n-        //  Non-canonical signature: R length is zero\n-        return false;\n-    }\n-    if (R[0] & 0x80) {\n-        //  Non-canonical signature: R value negative\n-        return false;\n-    }\n-    if (nLenR > 1 && (R[0] == 0x00) && !(R[1] & 0x80)) {\n-        //  Non-canonical signature: R value excessively padded\n-        return false;\n-    }\n+    // A signature is of type 0x30 (compound).\n+    if (sig[0] != 0x30) return false;\n+\n+    // Make sure the length covers the entire signature.\n+    if (sig[1] != sig.size() - 3) return false;\n+\n+    // Extract the length of the R element.\n+    unsigned int lenR = sig[3];\n+\n+    // Make sure the length of the S element is still inside the signature.\n+    if (5 + lenR >= sig.size()) return false;\n+\n+    // Extract the length of the S element.\n+    unsigned int lenS = sig[5 + lenR];\n+\n+    // Verify that the length of the signature matches the sum of the length\n+    // of the elements.\n+    if ((size_t)(lenR + lenS + 7) != sig.size()) return false;\n+ \n+    // Check whether the R element is an integer.\n+    if (sig[2] != 0x02) return false;\n+\n+    // Zero-length integers are not allowed for R.\n+    if (lenR == 0) return false;\n+\n+    // Negative numbers are not allowed for R.\n+    if (sig[4] & 0x80) return false;\n+\n+    // Null bytes at the start of R are not allowed, unless R would\n+    // otherwise be interpreted as a negative number.\n+    if (lenR > 1 && (sig[4] == 0x00) && !(sig[5] & 0x80)) return false;\n+\n+    // Check whether the S element is an integer.\n+    if (sig[lenR + 4] != 0x02) return false;\n+\n+    // Zero-length integers are not allowed for S.\n+    if (lenS == 0) return false;\n+\n+    // Negative numbers are not allowed for S.\n+    if (sig[lenR + 6] & 0x80) return false;\n+\n+    // Null bytes at the start of S are not allowed, unless S would otherwise be\n+    // interpreted as a negative number.\n+    if (lenS > 1 && (sig[lenR + 6] == 0x00) && !(sig[lenR + 7] & 0x80)) return false;\n \n-    const unsigned char *S = &vchSig[6+nLenR];\n-    if (S[-2] != 0x02) {\n-        //  Non-canonical signature: S value type mismatch\n-        return false;\n-    }\n-    if (nLenS == 0) {\n-        //  Non-canonical signature: S length is zero\n-        return false;\n-    }\n-    if (S[0] & 0x80) {\n-        //  Non-canonical signature: S value negative\n-        return false;\n-    }\n-    if (nLenS > 1 && (S[0] == 0x00) && !(S[1] & 0x80)) {\n-        //  Non-canonical signature: S value excessively padded\n-        return false;\n-    }\n     return true;\n }\n \n bool static IsLowDERSignature(const valtype &vchSig, ScriptError* serror) {\n-    if (!IsDERSignature(vchSig)) {\n+    if (!IsValidSignatureEncoding(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     }\n     unsigned int nLenR = vchSig[3];\n@@ -194,7 +194,7 @@ bool static CheckSignatureEncoding(const valtype &vchSig, unsigned int flags, Sc\n     if (vchSig.size() == 0) {\n         return true;\n     }\n-    if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsDERSignature(vchSig)) {\n+    if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsValidSignatureEncoding(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     } else if ((flags & SCRIPT_VERIFY_LOW_S) != 0 && !IsLowDERSignature(vchSig, serror)) {\n         // serror is set"
      },
      {
        "sha": "92e2c27c13c860934829997972665ad422135673",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -45,6 +45,7 @@ static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n  * blocks and we must accept those blocks.\n  */\n static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n+                                                         SCRIPT_VERIFY_DERSIG |\n                                                          SCRIPT_VERIFY_STRICTENC |\n                                                          SCRIPT_VERIFY_MINIMALDATA |\n                                                          SCRIPT_VERIFY_NULLDUMMY |"
      },
      {
        "sha": "a67c157aff768f49666e0a55730eca2c10ae79fd",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 106,
        "deletions": 0,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -510,6 +510,16 @@\n     \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but first signature invalid.\"\n ],\n \n+[\"Increase DERSIG test coverage\"],\n+[\"0x4a 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Overly long signature is incorrectly encoded for DERSIG\"],\n+[\"0x25 0x30220220000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Missing S is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x3024021077777777777777777777777777777777020a7777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"S with invalid S length is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302403107777777777777777777777777777777702107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Non-integer R is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777703107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Non-integer S is incorrectly encoded for DERSIG\"],\n+[\"0x17 0x3014020002107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Zero-length R is incorrectly encoded for DERSIG\"],\n+[\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Zero-length S is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"Negative S is incorrectly encoded for DERSIG\"],\n+\n [\"Automatically generated test cases\"],\n [\n     \"0x47 0x3044022053205076a7bb12d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\",\n@@ -589,6 +599,102 @@\n     \"DERSIG\",\n     \"P2PK NOT with too much R padding\"\n ],\n+[\n+    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 1, with DERSIG\"\n+],\n+[\n+    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"\",\n+    \"BIP66 example 2, without DERSIG\"\n+],\n+[\n+    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 2, with DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"BIP66 example 3, without DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 3, with DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"BIP66 example 5, without DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 5, with DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 6, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x304402200b3d0b0375bb15c14620afa4aa10ae90a0d6a046ce217bc20fe0bc1ced68c1b802204b550acab90ae6d3478057c9ad24f9df743815b799b6449dd7e7f6d3bc6e274c01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 7, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"BIP66 example 8, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 8, with DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"BIP66 example 9, without DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 9, with DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x30440220afa76a8f60622f813b05711f051c6c3407e32d1b1b70b0576c1f01b54e4c05c702200d58e9df044fd1845cabfbeef6e624ba0401daf7d7e084736f9ff601c3783bf501\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 10, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"BIP66 example 11, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"BIP66 example 11, with DERSIG\"\n+],\n [\n     \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\","
      },
      {
        "sha": "fb81fcb1f53f18375b2f957064f9038fc9e76d4b",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -688,6 +688,16 @@\n     \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but second signature invalid. Valid pubkey fails, and CHECKMULTISIG exits early, prior to evaluation of second invalid signature.\"\n ],\n \n+[\"Increase test coverage for DERSIG\"],\n+[\"0x4a 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"\", \"Overly long signature is correctly encoded\"],\n+[\"0x25 0x30220220000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"\", \"Missing S is correctly encoded\"],\n+[\"0x27 0x3024021077777777777777777777777777777777020a7777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"S with invalid S length is correctly encoded\"],\n+[\"0x27 0x302403107777777777777777777777777777777702107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Non-integer R is correctly encoded\"],\n+[\"0x27 0x302402107777777777777777777777777777777703107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Non-integer S is correctly encoded\"],\n+[\"0x17 0x3014020002107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Zero-length R is correctly encoded\"],\n+[\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"\", \"Zero-length S is correctly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"Negative S is correctly encoded\"],\n+\n [\"Automatically generated test cases\"],\n [\n     \"0x47 0x3044022053205076a7bb13d2db3162a2d97d8197631f829b065948b7019b15482af819a902204328dcc02c994ca086b1226d0d5f1674d23cfae0d846143df812b81cab3391e801\",\n@@ -755,6 +765,54 @@\n     \"\",\n     \"P2PK NOT with bad sig with too much R padding but no DERSIG\"\n ],\n+[\n+    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"BIP66 example 1, without DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"\",\n+    \"BIP66 example 4, without DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 4, with DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"\",\n+    \"BIP66 example 6, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x304402200b3d0b0375bb15c14620afa4aa10ae90a0d6a046ce217bc20fe0bc1ced68c1b802204b550acab90ae6d3478057c9ad24f9df743815b799b6449dd7e7f6d3bc6e274c01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"BIP66 example 7, without DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x30440220afa76a8f60622f813b05711f051c6c3407e32d1b1b70b0576c1f01b54e4c05c702200d58e9df044fd1845cabfbeef6e624ba0401daf7d7e084736f9ff601c3783bf501\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"BIP66 example 10, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"BIP66 example 12, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220f00a77260d34ec2f0c59621dc710f58169d0ca06df1a88cd4b1f1b97bd46991b02201ee220c7e04f26aed03f94aa97fb09ca5627163bf4ba07e6979972ec737db22601 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"BIP66 example 12, with DERSIG\"\n+],\n [\n     \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\","
      },
      {
        "sha": "6092afd782781dc5a79585c2e503b487c14e7169",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e6e4caba9899ce7c165b0784461c55c867ee24/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e6e4caba9899ce7c165b0784461c55c867ee24/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=41e6e4caba9899ce7c165b0784461c55c867ee24",
        "patch": "@@ -406,6 +406,79 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n \n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                               \"BIP66 example 1, without DERSIG\", 0\n+                              ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 1, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                              \"BIP66 example 2, without DERSIG\", 0\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                              \"BIP66 example 2, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 3, without DERSIG\", 0\n+                             ).Num(0));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 3, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                               \"BIP66 example 4, without DERSIG\", 0\n+                              ).Num(0));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                               \"BIP66 example 4, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                              ).Num(0));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 5, without DERSIG\", 0\n+                             ).Num(1));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                              \"BIP66 example 5, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(1));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                               \"BIP66 example 6, without DERSIG\", 0\n+                              ).Num(1));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                              \"BIP66 example 6, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(1));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                               \"BIP66 example 7, without DERSIG\", 0\n+                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 7, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"BIP66 example 8, without DERSIG\", 0\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"BIP66 example 8, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 9, without DERSIG\", 0\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 9, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"BIP66 example 10, without DERSIG\", 0\n+                              ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"BIP66 example 10, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 11, without DERSIG\", 0\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                              \"BIP66 example 11, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"BIP66 example 12, without DERSIG\", 0\n+                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"BIP66 example 12, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with high S but no LOW_S\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));"
      }
    ]
  },
  {
    "sha": "4e2b1fff98a36a07028457e48967d64ed0ce4386",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTJiMWZmZjk4YTM2YTA3MDI4NDU3ZTQ4OTY3ZDY0ZWQwY2U0Mzg2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T09:35:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T09:36:01Z"
      },
      "message": "Merge pull request #5675\n\n2d9b0b7 Fix priority calculation in CreateTransaction (Alex Morcos)",
      "tree": {
        "sha": "22b69f6420d553485411f4575d95a8b24317c269",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22b69f6420d553485411f4575d95a8b24317c269"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e2b1fff98a36a07028457e48967d64ed0ce4386",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0JaBAAoJEHSBCwEjRsmmTC4IAI9gQx1jXSyQ9ehK8iRBiOLP\nGzPEBDGbFKs+8ZWBUFvvWYNsqiQ7PFnqdvz7eaStrqqtXp33r9cVd6ZS1+hcGm5V\nz0xaP12ahqEPo6g1fmSRFiApgAFUqXVSr66oj9Cmhaowv6PFQEobBY8jeZ4B96AP\numjy+el8fABz+lWYhg56y7vjP7h1qZdACSW70e3RxLrEMZ5hkShte44PT5kk3uE4\nMt6VDJxspbgNREhDEboxPxHQa9mFztNb0wmJW6FpAuIl1D7ElK2up0uLschMnmIA\nQOSvLjMJKoSRcXTJIPtiRtdqn5KjNiZNRl6wKgaiwR+F48uVQaFkTDpzD+9cP2U=\n=xOwW\n-----END PGP SIGNATURE-----",
        "payload": "tree 22b69f6420d553485411f4575d95a8b24317c269\nparent 41e6e4caba9899ce7c165b0784461c55c867ee24\nparent 2d9b0b7f03a268e557c6dce1dfa29401b5c9178b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422956147 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422956161 +0100\n\nMerge pull request #5675\n\n2d9b0b7 Fix priority calculation in CreateTransaction (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e2b1fff98a36a07028457e48967d64ed0ce4386",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e2b1fff98a36a07028457e48967d64ed0ce4386",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e2b1fff98a36a07028457e48967d64ed0ce4386/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41e6e4caba9899ce7c165b0784461c55c867ee24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41e6e4caba9899ce7c165b0784461c55c867ee24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41e6e4caba9899ce7c165b0784461c55c867ee24"
      },
      {
        "sha": "2d9b0b7f03a268e557c6dce1dfa29401b5c9178b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d9b0b7f03a268e557c6dce1dfa29401b5c9178b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d9b0b7f03a268e557c6dce1dfa29401b5c9178b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "51cd714197f3af8408133c9b343082dc82a562d2",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e2b1fff98a36a07028457e48967d64ed0ce4386/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e2b1fff98a36a07028457e48967d64ed0ce4386/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=4e2b1fff98a36a07028457e48967d64ed0ce4386",
        "patch": "@@ -1445,10 +1445,14 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                 BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n                 {\n                     CAmount nCredit = pcoin.first->vout[pcoin.second].nValue;\n-                    //The priority after the next block (depth+1) is used instead of the current,\n+                    //The coin age after the next block (depth+1) is used instead of the current,\n                     //reflecting an assumption the user would accept a bit more delay for\n                     //a chance at a free transaction.\n-                    dPriority += (double)nCredit * (pcoin.first->GetDepthInMainChain()+1);\n+                    //But mempool inputs might still be in the mempool, so their age stays 0\n+                    int age = pcoin.first->GetDepthInMainChain();\n+                    if (age != 0)\n+                        age += 1;\n+                    dPriority += (double)nCredit * age;\n                 }\n \n                 CAmount nChange = nValueIn - nValue - nFeeRet;"
      }
    ]
  },
  {
    "sha": "6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWU4N2Y5YmM1ZDhhNGE5ZjljYWMyNGQ4YmE4NWY2NzY5ZThmMzEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T09:36:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T09:36:44Z"
      },
      "message": "Merge pull request #5647\n\n3ff735c Increase block download timeout base from 10 to 20 minutes. (Gregory Maxwell)",
      "tree": {
        "sha": "bb7e95ed4d4098944d99a8bf0b7a934686c5e106",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb7e95ed4d4098944d99a8bf0b7a934686c5e106"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0JasAAoJEHSBCwEjRsmmgUYH/1K2BaksHECmwr3eaoFsf7T8\nhIGV8l1llTtJ64Vl7NNBnNkgkszOSGL1IgFxORFK/10LlbB9uyXh9cGwKV3czRkT\nlKsfaT8AQv1gSigcrp+urMnI3yeer94xIVQDlTG61ZzyAVvLRaKOBGWiKGh4z70w\nq3S9gCEUfxtGWuYiWhtSpYCGfzf4se2YmU6WJKEUEFI7Ub8cm7MJGfJSI8rKBopX\nCkRmrPX5qu+0YqqsU/VmZjr5LJZr2mMQiGQ+87VcRHkiBopWE3WLvXxEbNkvFpPl\nfOvqmmNHxgYSA8caI/bAG3LAbftqKuSDTL1PKFjgrQBZnHhKqUhVypKiX4MYJqE=\n=ULyr\n-----END PGP SIGNATURE-----",
        "payload": "tree bb7e95ed4d4098944d99a8bf0b7a934686c5e106\nparent 4e2b1fff98a36a07028457e48967d64ed0ce4386\nparent 3ff735c99ae75c21397079f49859b81e89a2f5f8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422956194 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422956204 +0100\n\nMerge pull request #5647\n\n3ff735c Increase block download timeout base from 10 to 20 minutes. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e2b1fff98a36a07028457e48967d64ed0ce4386",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e2b1fff98a36a07028457e48967d64ed0ce4386",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e2b1fff98a36a07028457e48967d64ed0ce4386"
      },
      {
        "sha": "3ff735c99ae75c21397079f49859b81e89a2f5f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ff735c99ae75c21397079f49859b81e89a2f5f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ff735c99ae75c21397079f49859b81e89a2f5f8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "38a22e4297b1cd6a092f09884e9ff40277ad9d68",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312",
        "patch": "@@ -4546,12 +4546,12 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->id);\n             pto->fDisconnect = true;\n         }\n-        // In case there is a block that has been in flight from this peer for (1 + 0.5 * N) times the block interval\n+        // In case there is a block that has been in flight from this peer for (2 + 0.5 * N) times the block interval\n         // (with N the number of validated blocks that were in flight at the time it was requested), disconnect due to\n         // timeout. We compensate for in-flight blocks to prevent killing off peers due to our own downstream link\n         // being saturated. We only count validated in-flight blocks so peers can't advertize nonexisting block hashes\n         // to unreasonably increase our timeout.\n-        if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0 && state.vBlocksInFlight.front().nTime < nNow - 500000 * Params().TargetSpacing() * (2 + state.vBlocksInFlight.front().nValidatedQueuedBefore)) {\n+        if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0 && state.vBlocksInFlight.front().nTime < nNow - 500000 * Params().TargetSpacing() * (4 + state.vBlocksInFlight.front().nValidatedQueuedBefore)) {\n             LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", state.vBlocksInFlight.front().hash.ToString(), pto->id);\n             pto->fDisconnect = true;\n         }"
      }
    ]
  },
  {
    "sha": "e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWYxZjVhMjYzOTljN2QzNmZhOGUyYzI5ZWM0MTFlZWE0OWIwYTRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T12:02:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T12:12:12Z"
      },
      "message": "Merge pull request #5732\n\n1371e6f Change \"insane\" to \"absurd\" (referring to high fees) in text strings and identifiers. (Daira Hopwood)",
      "tree": {
        "sha": "400528ae4094e50ac6db7b49671ec43d7a8f16b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/400528ae4094e50ac6db7b49671ec43d7a8f16b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0LscAAoJEHSBCwEjRsmmAOIH/iDfFVzEWC+pFmvAOdF+6tP+\n3ILWZUsefBERhP8d7hH8tINRpm+qivG8WTa+sjFtoLP9P9L6sQcvsXkH2Eos+dQN\nifJKdFdQ60psCXuR3z7/iLdI+O0gnfv411DA8H+dqbbZcbYPzOyO+8inTJdBhmFZ\nJcfLt4qioJDb3PxN4fTqbNe1w58IcH9+yn1VpjYXDVSjv82UAYawlhyE9wT0GKiE\nIUcDNaXmdFdrhZupMofMgb1pdMJmtAQ3fuCkS6ydFbTgxN10EjLo+2xUhJIa4/Sk\ny9F6k9Mg24/X+oOejQD1Q2XBPmK4d54EP3nHqOWxUhCGvCL+g/pevixdcrOa3ro=\n=QeBi\n-----END PGP SIGNATURE-----",
        "payload": "tree 400528ae4094e50ac6db7b49671ec43d7a8f16b0\nparent 6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312\nparent 1371e6f5db88941c3b3c70d7a13b0cbf150ebf66\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422964943 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422965532 +0100\n\nMerge pull request #5732\n\n1371e6f Change \"insane\" to \"absurd\" (referring to high fees) in text strings and identifiers. (Daira Hopwood)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ee87f9bc5d8a4a9f9cac24d8ba85f6769e8f312"
      },
      {
        "sha": "1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1371e6f5db88941c3b3c70d7a13b0cbf150ebf66"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "27c427f7cdb3c2c6f9f3713a4723146db653d7b7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "patch": "@@ -904,7 +904,7 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n \n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectInsaneFee)\n+                        bool* pfMissingInputs, bool fRejectAbsurdFee)\n {\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n@@ -1063,8 +1063,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             dFreeCount += nSize;\n         }\n \n-        if (fRejectInsaneFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n-            return error(\"AcceptToMemoryPool: insane fees %s, %d > %d\",\n+        if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n+            return error(\"AcceptToMemoryPool: absurdly high fees %s, %d > %d\",\n                          hash.ToString(),\n                          nFees, ::minRelayTxFee.GetFee(nSize) * 10000);\n "
      },
      {
        "sha": "936cd43e99edb497ef022e0b7272d9df11c93be0",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "patch": "@@ -205,7 +205,7 @@ void FlushStateToDisk();\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectInsaneFee=false);\n+                        bool* pfMissingInputs, bool fRejectAbsurdFee=false);\n \n \n struct CNodeStateStats {"
      },
      {
        "sha": "5aef2d7539b1da6bd930d9bad9c8f46647b5ace6",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "patch": "@@ -526,8 +526,8 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         msgParams.first = tr(\"The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n         msgParams.second = CClientUIInterface::MSG_ERROR;\n         break;\n-    case WalletModel::InsaneFee:\n-        msgParams.first = tr(\"A fee higher than %1 is considered an insanely high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), 10000000));\n+    case WalletModel::AbsurdFee:\n+        msgParams.first = tr(\"A fee higher than %1 is considered an absurdly high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), 10000000));\n         break;\n     case WalletModel::PaymentRequestExpired:\n         msgParams.first = tr(\"Payment request expired!\");"
      },
      {
        "sha": "79f5191fc0d94c964f4fb051e8d92ee1458e033c",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "patch": "@@ -279,9 +279,9 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             return TransactionCreationFailed;\n         }\n \n-        // reject insane fee > 0.1 bitcoin\n+        // reject absurdly high fee > 0.1 bitcoin\n         if (nFeeRequired > 10000000)\n-            return InsaneFee;\n+            return AbsurdFee;\n     }\n \n     return SendCoinsReturn(OK);"
      },
      {
        "sha": "4a9a12beaa9d10c67f392fb8fd0ec668f12fc20f",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "patch": "@@ -111,7 +111,7 @@ class WalletModel : public QObject\n         DuplicateAddress,\n         TransactionCreationFailed, // Error returned when wallet is still locked\n         TransactionCommitFailed,\n-        InsaneFee,\n+        AbsurdFee,\n         PaymentRequestExpired\n     };\n "
      },
      {
        "sha": "d565a3dee3ea7ef7185c36dd251ae0f72d608bbe",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "patch": "@@ -2369,9 +2369,9 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectInsaneFee)\n+bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee)\n {\n     CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectInsaneFee);\n+    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectAbsurdFee);\n }\n "
      },
      {
        "sha": "a7d75b70cf47d8596742cc941517dd5416708a46",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "patch": "@@ -548,7 +548,7 @@ class CMerkleTx : public CTransaction\n     int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectInsaneFee=true);\n+    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n };\n \n /** "
      }
    ]
  },
  {
    "sha": "fcf646c9b08e7f846d6c99314f937ace50809d7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2Y2NDZjOWIwOGU3Zjg0NmQ2Yzk5MzE0ZjkzN2FjZTUwODA5ZDdh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T12:12:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-03T12:12:44Z"
      },
      "message": "Merge pull request #5286\n\n44e9a6b Update the 'test_IsStandard' unit test (Flavien Charlon)\na930658 Change the default maximum OP_RETURN size to 80 bytes (Flavien Charlon)",
      "tree": {
        "sha": "0b105ce721266dd4f00795d006b72e5233739385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b105ce721266dd4f00795d006b72e5233739385"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcf646c9b08e7f846d6c99314f937ace50809d7a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0Ls8AAoJEHSBCwEjRsmmOCQH/RmPMl3Rp6F/WDl7gc/hpZkM\nTV1OPTookZBUOnnvanQAuzUBUD1slOO6F+czzJQhSD6SC7Dycsa7ORf4Xj6YHnLA\nm3kFqDrG95KsgM9pX5PpfDSRt/bhiaqIXQ50QdvzTmW0+EfpUOqVlTDA0l/oGPbK\nVX+PsiF2vstV/zv6EjljX7u5b1gYvQSWtgTW9dz7GLg3ATG505I9UuEmBijeaqY4\nsIjg+5RV9Nrs6EVIfDPUJWlPsWNbPMoQwup6bY9TXKyPIjOXRbFRBQlzldujW2SX\nodbK5K8UEBnSND0O8zonanCgBGo37Nw0kPpr3TW7c+vCm4BaOHCWwLC8lKHlelo=\n=OLT7\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b105ce721266dd4f00795d006b72e5233739385\nparent e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c\nparent 44e9a6b22e472971aebf647f4386fb5a4436a0e3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1422965560 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1422965564 +0100\n\nMerge pull request #5286\n\n44e9a6b Update the 'test_IsStandard' unit test (Flavien Charlon)\na930658 Change the default maximum OP_RETURN size to 80 bytes (Flavien Charlon)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf646c9b08e7f846d6c99314f937ace50809d7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fcf646c9b08e7f846d6c99314f937ace50809d7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf646c9b08e7f846d6c99314f937ace50809d7a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5f1f5a26399c7d36fa8e2c29ec411eea49b0a4c"
      },
      {
        "sha": "44e9a6b22e472971aebf647f4386fb5a4436a0e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44e9a6b22e472971aebf647f4386fb5a4436a0e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44e9a6b22e472971aebf647f4386fb5a4436a0e3"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a8b0acc98150ba5b4fa85fcc88b5c438a115b8ab",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcf646c9b08e7f846d6c99314f937ace50809d7a/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcf646c9b08e7f846d6c99314f937ace50809d7a/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "patch": "@@ -25,7 +25,7 @@ class CScriptID : public uint160\n     CScriptID(const uint160& in) : uint160(in) {}\n };\n \n-static const unsigned int MAX_OP_RETURN_RELAY = 40;      //! bytes\n+static const unsigned int MAX_OP_RETURN_RELAY = 80;      //! bytes\n extern unsigned nMaxDatacarrierBytes;\n \n /**"
      },
      {
        "sha": "52adfea992ff71f282991319729fa1458c6e679a",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcf646c9b08e7f846d6c99314f937ace50809d7a/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcf646c9b08e7f846d6c99314f937ace50809d7a/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "patch": "@@ -347,12 +347,12 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].scriptPubKey = CScript() << OP_1;\n     BOOST_CHECK(!IsStandardTx(t, reason));\n \n-    // 40-byte TX_NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    // 80-byte TX_NULL_DATA (standard)\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     BOOST_CHECK(IsStandardTx(t, reason));\n \n-    // 41-byte TX_NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    // 81-byte TX_NULL_DATA (non-standard)\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n     BOOST_CHECK(!IsStandardTx(t, reason));\n \n     // TX_NULL_DATA w/o PUSHDATA"
      }
    ]
  },
  {
    "sha": "cf008ac8c3c5d582562d88ad89020daef3e64dcb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjAwOGFjOGMzYzVkNTgyNTYyZDg4YWQ4OTAyMGRhZWYzZTY0ZGNi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-01-28T18:48:36Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-03T13:53:08Z"
      },
      "message": "Acquire CCheckQueue's lock to avoid race condition\n\nThis fixes a potential race condition in the CCheckQueueControl constructor,\nwhich was looking directly at data in CCheckQueue without acquiring its lock.\n\nRemove the now-unnecessary friendship for CCheckQueueControl",
      "tree": {
        "sha": "75c5c0bec467de682b340c39573dcecee0d95497",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75c5c0bec467de682b340c39573dcecee0d95497"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf008ac8c3c5d582562d88ad89020daef3e64dcb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf008ac8c3c5d582562d88ad89020daef3e64dcb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf008ac8c3c5d582562d88ad89020daef3e64dcb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf008ac8c3c5d582562d88ad89020daef3e64dcb/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6acd4563d3b96b244e61b87b9f08c0eb61ecaa6"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7f6eae6509a3205f309036af933ea4ed98fa444b",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf008ac8c3c5d582562d88ad89020daef3e64dcb/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf008ac8c3c5d582562d88ad89020daef3e64dcb/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=cf008ac8c3c5d582562d88ad89020daef3e64dcb",
        "patch": "@@ -161,7 +161,12 @@ class CCheckQueue\n     {\n     }\n \n-    friend class CCheckQueueControl<T>;\n+    bool IsIdle()\n+    {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+        return (nTotal == nIdle && nTodo == 0 && fAllOk == true);\n+    }\n+\n };\n \n /** \n@@ -180,9 +185,8 @@ class CCheckQueueControl\n     {\n         // passed queue is supposed to be unused, or NULL\n         if (pqueue != NULL) {\n-            assert(pqueue->nTotal == pqueue->nIdle);\n-            assert(pqueue->nTodo == 0);\n-            assert(pqueue->fAllOk == true);\n+            bool isIdle = pqueue->IsIdle();\n+            assert(isIdle);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "eb1c2cd37f75cf4d0e85970932b9774b2d073225",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjFjMmNkMzdmNzVjZjRkMGU4NTk3MDkzMmI5Nzc0YjJkMDczMjI1",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-02-03T14:44:39Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-02-03T14:44:39Z"
      },
      "message": "Split logic to undo txin's off DisconnectBlock.\n\nInstead, create a separate function that applies the undo operation of a\nCTxInUndo object onto a CCoinsViewCache.  This method is used from\nDisconnectBlock.",
      "tree": {
        "sha": "ff27a32087c80b95e1c0e1fe7f304dcd366bad88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff27a32087c80b95e1c0e1fe7f304dcd366bad88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb1c2cd37f75cf4d0e85970932b9774b2d073225",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb1c2cd37f75cf4d0e85970932b9774b2d073225",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb1c2cd37f75cf4d0e85970932b9774b2d073225",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb1c2cd37f75cf4d0e85970932b9774b2d073225/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcf646c9b08e7f846d6c99314f937ace50809d7a"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 38,
      "deletions": 24
    },
    "files": [
      {
        "sha": "a0ad5e51f65560f6c60ba54ec602e20ab7281d68",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 24,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb1c2cd37f75cf4d0e85970932b9774b2d073225/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb1c2cd37f75cf4d0e85970932b9774b2d073225/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eb1c2cd37f75cf4d0e85970932b9774b2d073225",
        "patch": "@@ -1588,6 +1588,39 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n \n } // anon namespace\n \n+/**\n+ * Apply the undo operation of a CTxInUndo to the given chain state.\n+ * @param undo The undo object.\n+ * @param view The coins view to which to apply the changes.\n+ * @param out The out point that corresponds to the tx input.\n+ * @return True on success.\n+ */\n+static bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint& out)\n+{\n+    bool fClean = true;\n+\n+    CCoinsModifier coins = view.ModifyCoins(out.hash);\n+    if (undo.nHeight != 0) {\n+        // undo data contains height: this is the last output of the prevout tx being spent\n+        if (!coins->IsPruned())\n+            fClean = fClean && error(\"%s: undo data overwriting existing transaction\", __func__);\n+        coins->Clear();\n+        coins->fCoinBase = undo.fCoinBase;\n+        coins->nHeight = undo.nHeight;\n+        coins->nVersion = undo.nVersion;\n+    } else {\n+        if (coins->IsPruned())\n+            fClean = fClean && error(\"%s: undo data adding output to missing transaction\", __func__);\n+    }\n+    if (coins->IsAvailable(out.n))\n+        fClean = fClean && error(\"%s: undo data overwriting existing output\", __func__);\n+    if (coins->vout.size() < out.n+1)\n+        coins->vout.resize(out.n+1);\n+    coins->vout[out.n] = undo.txout;\n+\n+    return fClean;\n+}\n+\n bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n {\n     assert(pindex->GetBlockHash() == view.GetBestBlock());\n@@ -1613,11 +1646,8 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         uint256 hash = tx.GetHash();\n \n         // Check that all outputs are available and match the outputs in the block itself\n-        // exactly. Note that transactions with only provably unspendable outputs won't\n-        // have outputs available even in the block itself, so we handle that case\n-        // specially with outsEmpty.\n+        // exactly.\n         {\n-        CCoins outsEmpty;\n         CCoinsModifier outs = view.ModifyCoins(hash);\n         outs->ClearUnspendable();\n \n@@ -1642,24 +1672,8 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 const CTxInUndo &undo = txundo.vprevout[j];\n-                CCoinsModifier coins = view.ModifyCoins(out.hash);\n-                if (undo.nHeight != 0) {\n-                    // undo data contains height: this is the last output of the prevout tx being spent\n-                    if (!coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing transaction\");\n-                    coins->Clear();\n-                    coins->fCoinBase = undo.fCoinBase;\n-                    coins->nHeight = undo.nHeight;\n-                    coins->nVersion = undo.nVersion;\n-                } else {\n-                    if (coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock(): undo data adding output to missing transaction\");\n-                }\n-                if (coins->IsAvailable(out.n))\n-                    fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing output\");\n-                if (coins->vout.size() < out.n+1)\n-                    coins->vout.resize(out.n+1);\n-                coins->vout[out.n] = undo.txout;\n+                if (!ApplyTxInUndo(undo, view, out))\n+                    fClean = false;\n             }\n         }\n     }\n@@ -1670,9 +1684,9 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n     if (pfClean) {\n         *pfClean = fClean;\n         return true;\n-    } else {\n-        return fClean;\n     }\n+\n+    return fClean;\n }\n \n void static FlushBlockFile(bool fFinalize = false)"
      }
    ]
  },
  {
    "sha": "a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmIwNGRkZmU2NDUyZTdkNjI3NGY0MDk2YmYzZjJhZWU2OTVhNmQ5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-11-24T22:25:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-04T03:41:01Z"
      },
      "message": "build: fix newer boost build with c++11",
      "tree": {
        "sha": "7824e65ba6a141c3420999b8c195434009c81cef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7824e65ba6a141c3420999b8c195434009c81cef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcf646c9b08e7f846d6c99314f937ace50809d7a"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1fd3b0168125e1c64fd4923ed5e4730f9ab9c035",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9",
        "patch": "@@ -156,11 +156,11 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\"));\n         vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = boost::assign::list_of(0);\n-        base58Prefixes[SCRIPT_ADDRESS] = boost::assign::list_of(5);\n-        base58Prefixes[SECRET_KEY] =     boost::assign::list_of(128);\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E);\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4);\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,128);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4).convert_to_container<std::vector<unsigned char> >();\n \n         convertSeed6(vFixedSeeds, pnSeed6_main, ARRAYLEN(pnSeed6_main));\n \n@@ -214,11 +214,11 @@ class CTestNetParams : public CMainParams {\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.schildbach.de\", \"testnet-seed.bitcoin.schildbach.de\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = boost::assign::list_of(111);\n-        base58Prefixes[SCRIPT_ADDRESS] = boost::assign::list_of(196);\n-        base58Prefixes[SECRET_KEY]     = boost::assign::list_of(239);\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF);\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94);\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n \n         convertSeed6(vFixedSeeds, pnSeed6_test, ARRAYLEN(pnSeed6_test));\n "
      }
    ]
  },
  {
    "sha": "bbacd88204090e9233be375199f52d378bb75627",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmFjZDg4MjA0MDkwZTkyMzNiZTM3NTE5OWY1MmQzNzhiYjc1NjI3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-12-19T01:00:01Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-04T03:41:33Z"
      },
      "message": "c++11: MOVEONLY: move function definitions out of the header\n\nThese need to be moved out of the header in order to resolve a circular\ndependency between CWallet and CTxWallet. See next commit.",
      "tree": {
        "sha": "9a6d9f9828d2cb9583eb733a78ec5734a50dbb8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a6d9f9828d2cb9583eb733a78ec5734a50dbb8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbacd88204090e9233be375199f52d378bb75627",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbacd88204090e9233be375199f52d378bb75627",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbacd88204090e9233be375199f52d378bb75627",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbacd88204090e9233be375199f52d378bb75627/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2b04ddfe6452e7d6274f4096bf3f2aee695a6d9"
      }
    ],
    "stats": {
      "total": 380,
      "additions": 195,
      "deletions": 185
    },
    "files": [
      {
        "sha": "b51c4d4b14aaf9f3025f2440eda2530b9f817073",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 187,
        "deletions": 0,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbacd88204090e9233be375199f52d378bb75627/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbacd88204090e9233be375199f52d378bb75627/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=bbacd88204090e9233be375199f52d378bb75627",
        "patch": "@@ -1015,6 +1015,193 @@ set<uint256> CWalletTx::GetConflicts() const\n     return result;\n }\n \n+CAmount CWalletTx::GetDebit(const isminefilter& filter) const\n+{\n+    if (vin.empty())\n+        return 0;\n+\n+    CAmount debit = 0;\n+    if(filter & ISMINE_SPENDABLE)\n+    {\n+        if (fDebitCached)\n+            debit += nDebitCached;\n+        else\n+        {\n+            nDebitCached = pwallet->GetDebit(*this, ISMINE_SPENDABLE);\n+            fDebitCached = true;\n+            debit += nDebitCached;\n+        }\n+    }\n+    if(filter & ISMINE_WATCH_ONLY)\n+    {\n+        if(fWatchDebitCached)\n+            debit += nWatchDebitCached;\n+        else\n+        {\n+            nWatchDebitCached = pwallet->GetDebit(*this, ISMINE_WATCH_ONLY);\n+            fWatchDebitCached = true;\n+            debit += nWatchDebitCached;\n+        }\n+    }\n+    return debit;\n+}\n+\n+CAmount CWalletTx::GetCredit(const isminefilter& filter) const\n+{\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+        return 0;\n+\n+    int64_t credit = 0;\n+    if (filter & ISMINE_SPENDABLE)\n+    {\n+        // GetBalance can assume transactions in mapWallet won't change\n+        if (fCreditCached)\n+            credit += nCreditCached;\n+        else\n+        {\n+            nCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n+            fCreditCached = true;\n+            credit += nCreditCached;\n+        }\n+    }\n+    if (filter & ISMINE_WATCH_ONLY)\n+    {\n+        if (fWatchCreditCached)\n+            credit += nWatchCreditCached;\n+        else\n+        {\n+            nWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n+            fWatchCreditCached = true;\n+            credit += nWatchCreditCached;\n+        }\n+    }\n+    return credit;\n+}\n+\n+CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n+{\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n+    {\n+        if (fUseCache && fImmatureCreditCached)\n+            return nImmatureCreditCached;\n+        nImmatureCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n+        fImmatureCreditCached = true;\n+        return nImmatureCreditCached;\n+    }\n+\n+    return 0;\n+}\n+\n+CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n+{\n+    if (pwallet == 0)\n+        return 0;\n+\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+        return 0;\n+\n+    if (fUseCache && fAvailableCreditCached)\n+        return nAvailableCreditCached;\n+\n+    CAmount nCredit = 0;\n+    uint256 hashTx = GetHash();\n+    for (unsigned int i = 0; i < vout.size(); i++)\n+    {\n+        if (!pwallet->IsSpent(hashTx, i))\n+        {\n+            const CTxOut &txout = vout[i];\n+            nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n+            if (!MoneyRange(nCredit))\n+                throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+        }\n+    }\n+\n+    nAvailableCreditCached = nCredit;\n+    fAvailableCreditCached = true;\n+    return nCredit;\n+}\n+\n+CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n+{\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n+    {\n+        if (fUseCache && fImmatureWatchCreditCached)\n+            return nImmatureWatchCreditCached;\n+        nImmatureWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n+        fImmatureWatchCreditCached = true;\n+        return nImmatureWatchCreditCached;\n+    }\n+\n+    return 0;\n+}\n+\n+CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n+{\n+    if (pwallet == 0)\n+        return 0;\n+\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+        return 0;\n+\n+    if (fUseCache && fAvailableWatchCreditCached)\n+        return nAvailableWatchCreditCached;\n+\n+    CAmount nCredit = 0;\n+    for (unsigned int i = 0; i < vout.size(); i++)\n+    {\n+        if (!pwallet->IsSpent(GetHash(), i))\n+        {\n+            const CTxOut &txout = vout[i];\n+            nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n+            if (!MoneyRange(nCredit))\n+                throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+        }\n+    }\n+\n+    nAvailableWatchCreditCached = nCredit;\n+    fAvailableWatchCreditCached = true;\n+    return nCredit;\n+}\n+\n+CAmount CWalletTx::GetChange() const\n+{\n+    if (fChangeCached)\n+        return nChangeCached;\n+    nChangeCached = pwallet->GetChange(*this);\n+    fChangeCached = true;\n+    return nChangeCached;\n+}\n+\n+bool CWalletTx::IsTrusted() const\n+{\n+    // Quick answer in most cases\n+    if (!IsFinalTx(*this))\n+        return false;\n+    int nDepth = GetDepthInMainChain();\n+    if (nDepth >= 1)\n+        return true;\n+    if (nDepth < 0)\n+        return false;\n+    if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n+        return false;\n+\n+    // Trusted if all inputs are from us and are in the mempool:\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        // Transactions not sent by us: not trusted\n+        const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n+        if (parent == NULL)\n+            return false;\n+        const CTxOut& parentOut = parent->vout[txin.prevout.n];\n+        if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n+            return false;\n+    }\n+    return true;\n+}\n+\n void CWallet::ResendWalletTransactions()\n {\n     // Do this infrequently and randomly to avoid giving away"
      },
      {
        "sha": "d571b92b60661bf1ca9ae31ef2f435d82187c0e5",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 185,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbacd88204090e9233be375199f52d378bb75627/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbacd88204090e9233be375199f52d378bb75627/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=bbacd88204090e9233be375199f52d378bb75627",
        "patch": "@@ -705,165 +705,13 @@ class CWalletTx : public CMerkleTx\n     }\n \n     //! filter decides which addresses will count towards the debit\n-    CAmount GetDebit(const isminefilter& filter) const\n-    {\n-        if (vin.empty())\n-            return 0;\n-\n-        CAmount debit = 0;\n-        if(filter & ISMINE_SPENDABLE)\n-        {\n-            if (fDebitCached)\n-                debit += nDebitCached;\n-            else\n-            {\n-                nDebitCached = pwallet->GetDebit(*this, ISMINE_SPENDABLE);\n-                fDebitCached = true;\n-                debit += nDebitCached;\n-            }\n-        }\n-        if(filter & ISMINE_WATCH_ONLY)\n-        {\n-            if(fWatchDebitCached)\n-                debit += nWatchDebitCached;\n-            else\n-            {\n-                nWatchDebitCached = pwallet->GetDebit(*this, ISMINE_WATCH_ONLY);\n-                fWatchDebitCached = true;\n-                debit += nWatchDebitCached;\n-            }\n-        }\n-        return debit;\n-    }\n-\n-    CAmount GetCredit(const isminefilter& filter) const\n-    {\n-        // Must wait until coinbase is safely deep enough in the chain before valuing it\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-            return 0;\n-\n-        int64_t credit = 0;\n-        if (filter & ISMINE_SPENDABLE)\n-        {\n-            // GetBalance can assume transactions in mapWallet won't change\n-            if (fCreditCached)\n-                credit += nCreditCached;\n-            else\n-            {\n-                nCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n-                fCreditCached = true;\n-                credit += nCreditCached;\n-            }\n-        }\n-        if (filter & ISMINE_WATCH_ONLY)\n-        {\n-            if (fWatchCreditCached)\n-                credit += nWatchCreditCached;\n-            else\n-            {\n-                nWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n-                fWatchCreditCached = true;\n-                credit += nWatchCreditCached;\n-            }\n-        }\n-        return credit;\n-    }\n-\n-    CAmount GetImmatureCredit(bool fUseCache=true) const\n-    {\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n-        {\n-            if (fUseCache && fImmatureCreditCached)\n-                return nImmatureCreditCached;\n-            nImmatureCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n-            fImmatureCreditCached = true;\n-            return nImmatureCreditCached;\n-        }\n-\n-        return 0;\n-    }\n-\n-    CAmount GetAvailableCredit(bool fUseCache=true) const\n-    {\n-        if (pwallet == 0)\n-            return 0;\n-\n-        // Must wait until coinbase is safely deep enough in the chain before valuing it\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-            return 0;\n-\n-        if (fUseCache && fAvailableCreditCached)\n-            return nAvailableCreditCached;\n-\n-        CAmount nCredit = 0;\n-        uint256 hashTx = GetHash();\n-        for (unsigned int i = 0; i < vout.size(); i++)\n-        {\n-            if (!pwallet->IsSpent(hashTx, i))\n-            {\n-                const CTxOut &txout = vout[i];\n-                nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n-                if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n-            }\n-        }\n-\n-        nAvailableCreditCached = nCredit;\n-        fAvailableCreditCached = true;\n-        return nCredit;\n-    }\n-\n-    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const\n-    {\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n-        {\n-            if (fUseCache && fImmatureWatchCreditCached)\n-                return nImmatureWatchCreditCached;\n-            nImmatureWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n-            fImmatureWatchCreditCached = true;\n-            return nImmatureWatchCreditCached;\n-        }\n-\n-        return 0;\n-    }\n-\n-    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const\n-    {\n-        if (pwallet == 0)\n-            return 0;\n-\n-        // Must wait until coinbase is safely deep enough in the chain before valuing it\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-            return 0;\n-\n-        if (fUseCache && fAvailableWatchCreditCached)\n-            return nAvailableWatchCreditCached;\n-\n-        CAmount nCredit = 0;\n-        for (unsigned int i = 0; i < vout.size(); i++)\n-        {\n-            if (!pwallet->IsSpent(GetHash(), i))\n-            {\n-                const CTxOut &txout = vout[i];\n-                nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n-                if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n-            }\n-        }\n-\n-        nAvailableWatchCreditCached = nCredit;\n-        fAvailableWatchCreditCached = true;\n-        return nCredit;\n-    }\n-\n-    CAmount GetChange() const\n-    {\n-        if (fChangeCached)\n-            return nChangeCached;\n-        nChangeCached = pwallet->GetChange(*this);\n-        fChangeCached = true;\n-        return nChangeCached;\n-    }\n+    CAmount GetDebit(const isminefilter& filter) const;\n+    CAmount GetCredit(const isminefilter& filter) const;\n+    CAmount GetImmatureCredit(bool fUseCache=true) const;\n+    CAmount GetAvailableCredit(bool fUseCache=true) const;\n+    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetChange() const;\n \n     void GetAmounts(std::list<COutputEntry>& listReceived,\n                     std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n@@ -876,32 +724,7 @@ class CWalletTx : public CMerkleTx\n         return (GetDebit(filter) > 0);\n     }\n \n-    bool IsTrusted() const\n-    {\n-        // Quick answer in most cases\n-        if (!IsFinalTx(*this))\n-            return false;\n-        int nDepth = GetDepthInMainChain();\n-        if (nDepth >= 1)\n-            return true;\n-        if (nDepth < 0)\n-            return false;\n-        if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n-            return false;\n-\n-        // Trusted if all inputs are from us and are in the mempool:\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-        {\n-            // Transactions not sent by us: not trusted\n-            const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n-            if (parent == NULL)\n-                return false;\n-            const CTxOut& parentOut = parent->vout[txin.prevout.n];\n-            if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n-                return false;\n-        }\n-        return true;\n-    }\n+    bool IsTrusted() const;\n \n     bool WriteToDisk(CWalletDB *pwalletdb);\n "
      }
    ]
  },
  {
    "sha": "3447cf87e27262c57031361b3659fef938783295",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDQ3Y2Y4N2UyNzI2MmM1NzAzMTM2MWIzNjU5ZmVmOTM4NzgzMjk1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-12-19T01:03:51Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-04T04:30:59Z"
      },
      "message": "c++11: MOVEONLY: break circular dependency in wallet\n\nc++11 (libc++'s stdlib implementation anyway) doesn't allow for map types to be\nforward-declared. for example:\n\nclass foo;\nstd::map<int, foo> bar; // error, foo has not been defined.\nclass foo{};\n\nSince CWallet and CWalletTx are inter-dependent, but only std::map<*,CWalletTx>\nis used, forward-declare CWallet instead and define CWalletTx first.\n\nDespite the mangled git diff, this change only amounts to moving ~320 lines in\na single chunk.",
      "tree": {
        "sha": "b4328a8a7658eebea713d7e2a3f05e4e693db560",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4328a8a7658eebea713d7e2a3f05e4e693db560"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3447cf87e27262c57031361b3659fef938783295",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3447cf87e27262c57031361b3659fef938783295",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3447cf87e27262c57031361b3659fef938783295",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3447cf87e27262c57031361b3659fef938783295/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbacd88204090e9233be375199f52d378bb75627",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbacd88204090e9233be375199f52d378bb75627",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbacd88204090e9233be375199f52d378bb75627"
      }
    ],
    "stats": {
      "total": 990,
      "additions": 494,
      "deletions": 496
    },
    "files": [
      {
        "sha": "6ed87d1e687d5f3833fd9050ee456601241bc503",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 494,
        "deletions": 496,
        "changes": 990,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3447cf87e27262c57031361b3659fef938783295/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3447cf87e27262c57031361b3659fef938783295/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=3447cf87e27262c57031361b3659fef938783295",
        "patch": "@@ -103,114 +103,437 @@ class CAddressBookData\n     StringMap destdata;\n };\n \n-/** \n- * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n- * and provides the ability to create new transactions.\n- */\n-class CWallet : public CCryptoKeyStore, public CValidationInterface\n+\n+typedef std::map<std::string, std::string> mapValue_t;\n+\n+\n+static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n+{\n+    if (!mapValue.count(\"n\"))\n+    {\n+        nOrderPos = -1; // TODO: calculate elsewhere\n+        return;\n+    }\n+    nOrderPos = atoi64(mapValue[\"n\"].c_str());\n+}\n+\n+\n+static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n+{\n+    if (nOrderPos == -1)\n+        return;\n+    mapValue[\"n\"] = i64tostr(nOrderPos);\n+}\n+\n+struct COutputEntry\n+{\n+    CTxDestination destination;\n+    CAmount amount;\n+    int vout;\n+};\n+\n+/** A transaction with a merkle branch linking it to the block chain. */\n+class CMerkleTx : public CTransaction\n {\n private:\n-    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n+    int GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const;\n \n-    CWalletDB *pwalletdbEncryption;\n+public:\n+    uint256 hashBlock;\n+    std::vector<uint256> vMerkleBranch;\n+    int nIndex;\n \n-    //! the current wallet version: clients below this version are not able to load the wallet\n-    int nWalletVersion;\n+    // memory only\n+    mutable bool fMerkleVerified;\n \n-    //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n-    int nWalletMaxVersion;\n \n-    int64_t nNextResend;\n-    int64_t nLastResend;\n+    CMerkleTx()\n+    {\n+        Init();\n+    }\n \n-    /**\n-     * Used to keep track of spent outpoints, and\n-     * detect and report conflicts (double-spends or\n-     * mutated transactions where the mutant gets mined).\n-     */\n-    typedef std::multimap<COutPoint, uint256> TxSpends;\n-    TxSpends mapTxSpends;\n-    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n-    void AddToSpends(const uint256& wtxid);\n+    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)\n+    {\n+        Init();\n+    }\n \n-    void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n+    void Init()\n+    {\n+        hashBlock = uint256();\n+        nIndex = -1;\n+        fMerkleVerified = false;\n+    }\n \n-public:\n-    /*\n-     * Main wallet lock.\n-     * This lock protects all the fields added by CWallet\n-     *   except for:\n-     *      fFileBacked (immutable after instantiation)\n-     *      strWalletFile (immutable after instantiation)\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(*(CTransaction*)this);\n+        nVersion = this->nVersion;\n+        READWRITE(hashBlock);\n+        READWRITE(vMerkleBranch);\n+        READWRITE(nIndex);\n+    }\n+\n+    int SetMerkleBranch(const CBlock& block);\n+\n+\n+    /**\n+     * Return depth of transaction in blockchain:\n+     * -1  : not in blockchain, and not in memory pool (conflicted transaction)\n+     *  0  : in memory pool, waiting to be included in a block\n+     * >=1 : this many blocks deep in the main chain\n      */\n-    mutable CCriticalSection cs_wallet;\n+    int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n+    int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n+    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n+    int GetBlocksToMaturity() const;\n+    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n+};\n \n-    bool fFileBacked;\n-    std::string strWalletFile;\n+/** \n+ * A transaction with a bunch of additional info that only the owner cares about.\n+ * It includes any unrecorded transactions needed to link it back to the block chain.\n+ */\n+class CWalletTx : public CMerkleTx\n+{\n+private:\n+    const CWallet* pwallet;\n \n-    std::set<int64_t> setKeyPool;\n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+public:\n+    mapValue_t mapValue;\n+    std::vector<std::pair<std::string, std::string> > vOrderForm;\n+    unsigned int fTimeReceivedIsTxTime;\n+    unsigned int nTimeReceived; //! time received by this node\n+    unsigned int nTimeSmart;\n+    char fFromMe;\n+    std::string strFromAccount;\n+    int64_t nOrderPos; //! position in ordered transaction list\n \n-    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n-    MasterKeyMap mapMasterKeys;\n-    unsigned int nMasterKeyMaxID;\n+    // memory only\n+    mutable bool fDebitCached;\n+    mutable bool fCreditCached;\n+    mutable bool fImmatureCreditCached;\n+    mutable bool fAvailableCreditCached;\n+    mutable bool fWatchDebitCached;\n+    mutable bool fWatchCreditCached;\n+    mutable bool fImmatureWatchCreditCached;\n+    mutable bool fAvailableWatchCreditCached;\n+    mutable bool fChangeCached;\n+    mutable CAmount nDebitCached;\n+    mutable CAmount nCreditCached;\n+    mutable CAmount nImmatureCreditCached;\n+    mutable CAmount nAvailableCreditCached;\n+    mutable CAmount nWatchDebitCached;\n+    mutable CAmount nWatchCreditCached;\n+    mutable CAmount nImmatureWatchCreditCached;\n+    mutable CAmount nAvailableWatchCreditCached;\n+    mutable CAmount nChangeCached;\n \n-    CWallet()\n+    CWalletTx()\n     {\n-        SetNull();\n+        Init(NULL);\n     }\n \n-    CWallet(std::string strWalletFileIn)\n+    CWalletTx(const CWallet* pwalletIn)\n     {\n-        SetNull();\n+        Init(pwalletIn);\n+    }\n \n-        strWalletFile = strWalletFileIn;\n-        fFileBacked = true;\n+    CWalletTx(const CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)\n+    {\n+        Init(pwalletIn);\n     }\n \n-    ~CWallet()\n+    CWalletTx(const CWallet* pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)\n     {\n-        delete pwalletdbEncryption;\n-        pwalletdbEncryption = NULL;\n+        Init(pwalletIn);\n     }\n \n-    void SetNull()\n+    void Init(const CWallet* pwalletIn)\n     {\n-        nWalletVersion = FEATURE_BASE;\n-        nWalletMaxVersion = FEATURE_BASE;\n-        fFileBacked = false;\n-        nMasterKeyMaxID = 0;\n-        pwalletdbEncryption = NULL;\n-        nOrderPosNext = 0;\n-        nNextResend = 0;\n-        nLastResend = 0;\n-        nTimeFirstKey = 0;\n+        pwallet = pwalletIn;\n+        mapValue.clear();\n+        vOrderForm.clear();\n+        fTimeReceivedIsTxTime = false;\n+        nTimeReceived = 0;\n+        nTimeSmart = 0;\n+        fFromMe = false;\n+        strFromAccount.clear();\n+        fDebitCached = false;\n+        fCreditCached = false;\n+        fImmatureCreditCached = false;\n+        fAvailableCreditCached = false;\n+        fWatchDebitCached = false;\n+        fWatchCreditCached = false;\n+        fImmatureWatchCreditCached = false;\n+        fAvailableWatchCreditCached = false;\n+        fChangeCached = false;\n+        nDebitCached = 0;\n+        nCreditCached = 0;\n+        nImmatureCreditCached = 0;\n+        nAvailableCreditCached = 0;\n+        nWatchDebitCached = 0;\n+        nWatchCreditCached = 0;\n+        nAvailableWatchCreditCached = 0;\n+        nImmatureWatchCreditCached = 0;\n+        nChangeCached = 0;\n+        nOrderPos = -1;\n     }\n \n-    std::map<uint256, CWalletTx> mapWallet;\n+    ADD_SERIALIZE_METHODS;\n \n-    int64_t nOrderPosNext;\n-    std::map<uint256, int> mapRequestCount;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        if (ser_action.ForRead())\n+            Init(NULL);\n+        char fSpent = false;\n \n-    std::map<CTxDestination, CAddressBookData> mapAddressBook;\n+        if (!ser_action.ForRead())\n+        {\n+            mapValue[\"fromaccount\"] = strFromAccount;\n \n-    CPubKey vchDefaultKey;\n+            WriteOrderPos(nOrderPos, mapValue);\n \n-    std::set<COutPoint> setLockedCoins;\n+            if (nTimeSmart)\n+                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+        }\n \n-    int64_t nTimeFirstKey;\n+        READWRITE(*(CMerkleTx*)this);\n+        std::vector<CMerkleTx> vUnused; //! Used to be vtxPrev\n+        READWRITE(vUnused);\n+        READWRITE(mapValue);\n+        READWRITE(vOrderForm);\n+        READWRITE(fTimeReceivedIsTxTime);\n+        READWRITE(nTimeReceived);\n+        READWRITE(fFromMe);\n+        READWRITE(fSpent);\n \n-    const CWalletTx* GetWalletTx(const uint256& hash) const;\n+        if (ser_action.ForRead())\n+        {\n+            strFromAccount = mapValue[\"fromaccount\"];\n \n-    //! check whether we are allowed to upgrade (or already support) to the named feature\n-    bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n+            ReadOrderPos(nOrderPos, mapValue);\n \n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n+            nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n+        }\n \n-    bool IsSpent(const uint256& hash, unsigned int n) const;\n+        mapValue.erase(\"fromaccount\");\n+        mapValue.erase(\"version\");\n+        mapValue.erase(\"spent\");\n+        mapValue.erase(\"n\");\n+        mapValue.erase(\"timesmart\");\n+    }\n \n-    bool IsLockedCoin(uint256 hash, unsigned int n) const;\n+    //! make sure balances are recalculated\n+    void MarkDirty()\n+    {\n+        fCreditCached = false;\n+        fAvailableCreditCached = false;\n+        fWatchDebitCached = false;\n+        fWatchCreditCached = false;\n+        fAvailableWatchCreditCached = false;\n+        fImmatureWatchCreditCached = false;\n+        fDebitCached = false;\n+        fChangeCached = false;\n+    }\n+\n+    void BindWallet(CWallet *pwalletIn)\n+    {\n+        pwallet = pwalletIn;\n+        MarkDirty();\n+    }\n+\n+    //! filter decides which addresses will count towards the debit\n+    CAmount GetDebit(const isminefilter& filter) const;\n+    CAmount GetCredit(const isminefilter& filter) const;\n+    CAmount GetImmatureCredit(bool fUseCache=true) const;\n+    CAmount GetAvailableCredit(bool fUseCache=true) const;\n+    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetChange() const;\n+\n+    void GetAmounts(std::list<COutputEntry>& listReceived,\n+                    std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n+\n+    void GetAccountAmounts(const std::string& strAccount, CAmount& nReceived,\n+                           CAmount& nSent, CAmount& nFee, const isminefilter& filter) const;\n+\n+    bool IsFromMe(const isminefilter& filter) const\n+    {\n+        return (GetDebit(filter) > 0);\n+    }\n+\n+    bool IsTrusted() const;\n+\n+    bool WriteToDisk(CWalletDB *pwalletdb);\n+\n+    int64_t GetTxTime() const;\n+    int GetRequestCount() const;\n+\n+    void RelayWalletTransaction();\n+\n+    std::set<uint256> GetConflicts() const;\n+};\n+\n+\n+\n+\n+class COutput\n+{\n+public:\n+    const CWalletTx *tx;\n+    int i;\n+    int nDepth;\n+    bool fSpendable;\n+\n+    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn)\n+    {\n+        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn;\n+    }\n+\n+    std::string ToString() const;\n+};\n+\n+\n+\n+\n+/** Private key that includes an expiration date in case it never gets used. */\n+class CWalletKey\n+{\n+public:\n+    CPrivKey vchPrivKey;\n+    int64_t nTimeCreated;\n+    int64_t nTimeExpires;\n+    std::string strComment;\n+    //! todo: add something to note what created it (user, getnewaddress, change)\n+    //!   maybe should have a map<string, string> property map\n+\n+    CWalletKey(int64_t nExpires=0);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        if (!(nType & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(vchPrivKey);\n+        READWRITE(nTimeCreated);\n+        READWRITE(nTimeExpires);\n+        READWRITE(LIMITED_STRING(strComment, 65536));\n+    }\n+};\n+\n+\n+\n+/** \n+ * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n+ * and provides the ability to create new transactions.\n+ */\n+class CWallet : public CCryptoKeyStore, public CValidationInterface\n+{\n+private:\n+    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n+\n+    CWalletDB *pwalletdbEncryption;\n+\n+    //! the current wallet version: clients below this version are not able to load the wallet\n+    int nWalletVersion;\n+\n+    //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n+    int nWalletMaxVersion;\n+\n+    int64_t nNextResend;\n+    int64_t nLastResend;\n+\n+    /**\n+     * Used to keep track of spent outpoints, and\n+     * detect and report conflicts (double-spends or\n+     * mutated transactions where the mutant gets mined).\n+     */\n+    typedef std::multimap<COutPoint, uint256> TxSpends;\n+    TxSpends mapTxSpends;\n+    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n+    void AddToSpends(const uint256& wtxid);\n+\n+    void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n+\n+public:\n+    /*\n+     * Main wallet lock.\n+     * This lock protects all the fields added by CWallet\n+     *   except for:\n+     *      fFileBacked (immutable after instantiation)\n+     *      strWalletFile (immutable after instantiation)\n+     */\n+    mutable CCriticalSection cs_wallet;\n+\n+    bool fFileBacked;\n+    std::string strWalletFile;\n+\n+    std::set<int64_t> setKeyPool;\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+\n+    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n+    MasterKeyMap mapMasterKeys;\n+    unsigned int nMasterKeyMaxID;\n+\n+    CWallet()\n+    {\n+        SetNull();\n+    }\n+\n+    CWallet(std::string strWalletFileIn)\n+    {\n+        SetNull();\n+\n+        strWalletFile = strWalletFileIn;\n+        fFileBacked = true;\n+    }\n+\n+    ~CWallet()\n+    {\n+        delete pwalletdbEncryption;\n+        pwalletdbEncryption = NULL;\n+    }\n+\n+    void SetNull()\n+    {\n+        nWalletVersion = FEATURE_BASE;\n+        nWalletMaxVersion = FEATURE_BASE;\n+        fFileBacked = false;\n+        nMasterKeyMaxID = 0;\n+        pwalletdbEncryption = NULL;\n+        nOrderPosNext = 0;\n+        nNextResend = 0;\n+        nLastResend = 0;\n+        nTimeFirstKey = 0;\n+    }\n+\n+    std::map<uint256, CWalletTx> mapWallet;\n+\n+    int64_t nOrderPosNext;\n+    std::map<uint256, int> mapRequestCount;\n+\n+    std::map<CTxDestination, CAddressBookData> mapAddressBook;\n+\n+    CPubKey vchDefaultKey;\n+\n+    std::set<COutPoint> setLockedCoins;\n+\n+    int64_t nTimeFirstKey;\n+\n+    const CWalletTx* GetWalletTx(const uint256& hash) const;\n+\n+    //! check whether we are allowed to upgrade (or already support) to the named feature\n+    bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n+\n+    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n+\n+    bool IsSpent(const uint256& hash, unsigned int n) const;\n+\n+    bool IsLockedCoin(uint256 hash, unsigned int n) const;\n     void LockCoin(COutPoint& output);\n     void UnlockCoin(COutPoint& output);\n     void UnlockAllCoins();\n@@ -322,471 +645,146 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n         return ((IsMine(txout) & filter) ? txout.nValue : 0);\n-    }\n-    bool IsChange(const CTxOut& txout) const;\n-    CAmount GetChange(const CTxOut& txout) const\n-    {\n-        if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n-        return (IsChange(txout) ? txout.nValue : 0);\n-    }\n-    bool IsMine(const CTransaction& tx) const\n-    {\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-            if (IsMine(txout))\n-                return true;\n-        return false;\n-    }\n-    /** should probably be renamed to IsRelevantToMe */\n-    bool IsFromMe(const CTransaction& tx) const\n-    {\n-        return (GetDebit(tx, ISMINE_ALL) > 0);\n-    }\n-    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const\n-    {\n-        CAmount nDebit = 0;\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        {\n-            nDebit += GetDebit(txin, filter);\n-            if (!MoneyRange(nDebit))\n-                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n-        }\n-        return nDebit;\n-    }\n-    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const\n-    {\n-        CAmount nCredit = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-        {\n-            nCredit += GetCredit(txout, filter);\n-            if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n-        }\n-        return nCredit;\n-    }\n-    CAmount GetChange(const CTransaction& tx) const\n-    {\n-        CAmount nChange = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-        {\n-            nChange += GetChange(txout);\n-            if (!MoneyRange(nChange))\n-                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n-        }\n-        return nChange;\n-    }\n-    void SetBestChain(const CBlockLocator& loc);\n-\n-    DBErrors LoadWallet(bool& fFirstRunRet);\n-    DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n-\n-    bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n-\n-    bool DelAddressBook(const CTxDestination& address);\n-\n-    void UpdatedTransaction(const uint256 &hashTx);\n-\n-    void Inventory(const uint256 &hash)\n-    {\n-        {\n-            LOCK(cs_wallet);\n-            std::map<uint256, int>::iterator mi = mapRequestCount.find(hash);\n-            if (mi != mapRequestCount.end())\n-                (*mi).second++;\n-        }\n-    }\n-\n-    unsigned int GetKeyPoolSize()\n-    {\n-        AssertLockHeld(cs_wallet); // setKeyPool\n-        return setKeyPool.size();\n-    }\n-\n-    bool SetDefaultKey(const CPubKey &vchPubKey);\n-\n-    //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n-    bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n-\n-    //! change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n-    bool SetMaxVersion(int nVersion);\n-\n-    //! get the current wallet format (the oldest client version guaranteed to understand this wallet)\n-    int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n-\n-    //! Get wallet transactions that conflict with given transaction (spend same outputs)\n-    std::set<uint256> GetConflicts(const uint256& txid) const;\n-\n-    /** \n-     * Address book entry changed.\n-     * @note called with lock cs_wallet held.\n-     */\n-    boost::signals2::signal<void (CWallet *wallet, const CTxDestination\n-            &address, const std::string &label, bool isMine,\n-            const std::string &purpose,\n-            ChangeType status)> NotifyAddressBookChanged;\n-\n-    /** \n-     * Wallet transaction added, removed or updated.\n-     * @note called with lock cs_wallet held.\n-     */\n-    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx,\n-            ChangeType status)> NotifyTransactionChanged;\n-\n-    /** Show progress e.g. for rescan */\n-    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n-\n-    /** Watch-only address added */\n-    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n-};\n-\n-/** A key allocated from the key pool. */\n-class CReserveKey\n-{\n-protected:\n-    CWallet* pwallet;\n-    int64_t nIndex;\n-    CPubKey vchPubKey;\n-public:\n-    CReserveKey(CWallet* pwalletIn)\n-    {\n-        nIndex = -1;\n-        pwallet = pwalletIn;\n-    }\n-\n-    ~CReserveKey()\n-    {\n-        ReturnKey();\n-    }\n-\n-    void ReturnKey();\n-    bool GetReservedKey(CPubKey &pubkey);\n-    void KeepKey();\n-};\n-\n-\n-typedef std::map<std::string, std::string> mapValue_t;\n-\n-\n-static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n-{\n-    if (!mapValue.count(\"n\"))\n-    {\n-        nOrderPos = -1; // TODO: calculate elsewhere\n-        return;\n-    }\n-    nOrderPos = atoi64(mapValue[\"n\"].c_str());\n-}\n-\n-\n-static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n-{\n-    if (nOrderPos == -1)\n-        return;\n-    mapValue[\"n\"] = i64tostr(nOrderPos);\n-}\n-\n-struct COutputEntry\n-{\n-    CTxDestination destination;\n-    CAmount amount;\n-    int vout;\n-};\n-\n-/** A transaction with a merkle branch linking it to the block chain. */\n-class CMerkleTx : public CTransaction\n-{\n-private:\n-    int GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const;\n-\n-public:\n-    uint256 hashBlock;\n-    std::vector<uint256> vMerkleBranch;\n-    int nIndex;\n-\n-    // memory only\n-    mutable bool fMerkleVerified;\n-\n-\n-    CMerkleTx()\n-    {\n-        Init();\n-    }\n-\n-    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)\n-    {\n-        Init();\n-    }\n-\n-    void Init()\n-    {\n-        hashBlock = uint256();\n-        nIndex = -1;\n-        fMerkleVerified = false;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(*(CTransaction*)this);\n-        nVersion = this->nVersion;\n-        READWRITE(hashBlock);\n-        READWRITE(vMerkleBranch);\n-        READWRITE(nIndex);\n-    }\n-\n-    int SetMerkleBranch(const CBlock& block);\n-\n-\n-    /**\n-     * Return depth of transaction in blockchain:\n-     * -1  : not in blockchain, and not in memory pool (conflicted transaction)\n-     *  0  : in memory pool, waiting to be included in a block\n-     * >=1 : this many blocks deep in the main chain\n-     */\n-    int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n-    int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n-    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n-    int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n-};\n-\n-/** \n- * A transaction with a bunch of additional info that only the owner cares about.\n- * It includes any unrecorded transactions needed to link it back to the block chain.\n- */\n-class CWalletTx : public CMerkleTx\n-{\n-private:\n-    const CWallet* pwallet;\n-\n-public:\n-    mapValue_t mapValue;\n-    std::vector<std::pair<std::string, std::string> > vOrderForm;\n-    unsigned int fTimeReceivedIsTxTime;\n-    unsigned int nTimeReceived; //! time received by this node\n-    unsigned int nTimeSmart;\n-    char fFromMe;\n-    std::string strFromAccount;\n-    int64_t nOrderPos; //! position in ordered transaction list\n-\n-    // memory only\n-    mutable bool fDebitCached;\n-    mutable bool fCreditCached;\n-    mutable bool fImmatureCreditCached;\n-    mutable bool fAvailableCreditCached;\n-    mutable bool fWatchDebitCached;\n-    mutable bool fWatchCreditCached;\n-    mutable bool fImmatureWatchCreditCached;\n-    mutable bool fAvailableWatchCreditCached;\n-    mutable bool fChangeCached;\n-    mutable CAmount nDebitCached;\n-    mutable CAmount nCreditCached;\n-    mutable CAmount nImmatureCreditCached;\n-    mutable CAmount nAvailableCreditCached;\n-    mutable CAmount nWatchDebitCached;\n-    mutable CAmount nWatchCreditCached;\n-    mutable CAmount nImmatureWatchCreditCached;\n-    mutable CAmount nAvailableWatchCreditCached;\n-    mutable CAmount nChangeCached;\n-\n-    CWalletTx()\n+    }\n+    bool IsChange(const CTxOut& txout) const;\n+    CAmount GetChange(const CTxOut& txout) const\n     {\n-        Init(NULL);\n+        if (!MoneyRange(txout.nValue))\n+            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n+        return (IsChange(txout) ? txout.nValue : 0);\n     }\n-\n-    CWalletTx(const CWallet* pwalletIn)\n+    bool IsMine(const CTransaction& tx) const\n     {\n-        Init(pwalletIn);\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+            if (IsMine(txout))\n+                return true;\n+        return false;\n     }\n-\n-    CWalletTx(const CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)\n+    /** should probably be renamed to IsRelevantToMe */\n+    bool IsFromMe(const CTransaction& tx) const\n     {\n-        Init(pwalletIn);\n+        return (GetDebit(tx, ISMINE_ALL) > 0);\n     }\n-\n-    CWalletTx(const CWallet* pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)\n+    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const\n     {\n-        Init(pwalletIn);\n+        CAmount nDebit = 0;\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        {\n+            nDebit += GetDebit(txin, filter);\n+            if (!MoneyRange(nDebit))\n+                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n+        }\n+        return nDebit;\n     }\n-\n-    void Init(const CWallet* pwalletIn)\n+    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const\n     {\n-        pwallet = pwalletIn;\n-        mapValue.clear();\n-        vOrderForm.clear();\n-        fTimeReceivedIsTxTime = false;\n-        nTimeReceived = 0;\n-        nTimeSmart = 0;\n-        fFromMe = false;\n-        strFromAccount.clear();\n-        fDebitCached = false;\n-        fCreditCached = false;\n-        fImmatureCreditCached = false;\n-        fAvailableCreditCached = false;\n-        fWatchDebitCached = false;\n-        fWatchCreditCached = false;\n-        fImmatureWatchCreditCached = false;\n-        fAvailableWatchCreditCached = false;\n-        fChangeCached = false;\n-        nDebitCached = 0;\n-        nCreditCached = 0;\n-        nImmatureCreditCached = 0;\n-        nAvailableCreditCached = 0;\n-        nWatchDebitCached = 0;\n-        nWatchCreditCached = 0;\n-        nAvailableWatchCreditCached = 0;\n-        nImmatureWatchCreditCached = 0;\n-        nChangeCached = 0;\n-        nOrderPos = -1;\n+        CAmount nCredit = 0;\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+        {\n+            nCredit += GetCredit(txout, filter);\n+            if (!MoneyRange(nCredit))\n+                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n+        }\n+        return nCredit;\n     }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (ser_action.ForRead())\n-            Init(NULL);\n-        char fSpent = false;\n-\n-        if (!ser_action.ForRead())\n+    CAmount GetChange(const CTransaction& tx) const\n+    {\n+        CAmount nChange = 0;\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n-            mapValue[\"fromaccount\"] = strFromAccount;\n-\n-            WriteOrderPos(nOrderPos, mapValue);\n-\n-            if (nTimeSmart)\n-                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+            nChange += GetChange(txout);\n+            if (!MoneyRange(nChange))\n+                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n         }\n+        return nChange;\n+    }\n+    void SetBestChain(const CBlockLocator& loc);\n \n-        READWRITE(*(CMerkleTx*)this);\n-        std::vector<CMerkleTx> vUnused; //! Used to be vtxPrev\n-        READWRITE(vUnused);\n-        READWRITE(mapValue);\n-        READWRITE(vOrderForm);\n-        READWRITE(fTimeReceivedIsTxTime);\n-        READWRITE(nTimeReceived);\n-        READWRITE(fFromMe);\n-        READWRITE(fSpent);\n-\n-        if (ser_action.ForRead())\n-        {\n-            strFromAccount = mapValue[\"fromaccount\"];\n+    DBErrors LoadWallet(bool& fFirstRunRet);\n+    DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n \n-            ReadOrderPos(nOrderPos, mapValue);\n+    bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n \n-            nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n-        }\n+    bool DelAddressBook(const CTxDestination& address);\n \n-        mapValue.erase(\"fromaccount\");\n-        mapValue.erase(\"version\");\n-        mapValue.erase(\"spent\");\n-        mapValue.erase(\"n\");\n-        mapValue.erase(\"timesmart\");\n-    }\n+    void UpdatedTransaction(const uint256 &hashTx);\n \n-    //! make sure balances are recalculated\n-    void MarkDirty()\n+    void Inventory(const uint256 &hash)\n     {\n-        fCreditCached = false;\n-        fAvailableCreditCached = false;\n-        fWatchDebitCached = false;\n-        fWatchCreditCached = false;\n-        fAvailableWatchCreditCached = false;\n-        fImmatureWatchCreditCached = false;\n-        fDebitCached = false;\n-        fChangeCached = false;\n+        {\n+            LOCK(cs_wallet);\n+            std::map<uint256, int>::iterator mi = mapRequestCount.find(hash);\n+            if (mi != mapRequestCount.end())\n+                (*mi).second++;\n+        }\n     }\n \n-    void BindWallet(CWallet *pwalletIn)\n+    unsigned int GetKeyPoolSize()\n     {\n-        pwallet = pwalletIn;\n-        MarkDirty();\n+        AssertLockHeld(cs_wallet); // setKeyPool\n+        return setKeyPool.size();\n     }\n \n-    //! filter decides which addresses will count towards the debit\n-    CAmount GetDebit(const isminefilter& filter) const;\n-    CAmount GetCredit(const isminefilter& filter) const;\n-    CAmount GetImmatureCredit(bool fUseCache=true) const;\n-    CAmount GetAvailableCredit(bool fUseCache=true) const;\n-    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const;\n-    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n-    CAmount GetChange() const;\n+    bool SetDefaultKey(const CPubKey &vchPubKey);\n \n-    void GetAmounts(std::list<COutputEntry>& listReceived,\n-                    std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n+    //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n+    bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n \n-    void GetAccountAmounts(const std::string& strAccount, CAmount& nReceived,\n-                           CAmount& nSent, CAmount& nFee, const isminefilter& filter) const;\n+    //! change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n+    bool SetMaxVersion(int nVersion);\n \n-    bool IsFromMe(const isminefilter& filter) const\n-    {\n-        return (GetDebit(filter) > 0);\n-    }\n+    //! get the current wallet format (the oldest client version guaranteed to understand this wallet)\n+    int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n \n-    bool IsTrusted() const;\n+    //! Get wallet transactions that conflict with given transaction (spend same outputs)\n+    std::set<uint256> GetConflicts(const uint256& txid) const;\n \n-    bool WriteToDisk(CWalletDB *pwalletdb);\n+    /** \n+     * Address book entry changed.\n+     * @note called with lock cs_wallet held.\n+     */\n+    boost::signals2::signal<void (CWallet *wallet, const CTxDestination\n+            &address, const std::string &label, bool isMine,\n+            const std::string &purpose,\n+            ChangeType status)> NotifyAddressBookChanged;\n \n-    int64_t GetTxTime() const;\n-    int GetRequestCount() const;\n+    /** \n+     * Wallet transaction added, removed or updated.\n+     * @note called with lock cs_wallet held.\n+     */\n+    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx,\n+            ChangeType status)> NotifyTransactionChanged;\n \n-    void RelayWalletTransaction();\n+    /** Show progress e.g. for rescan */\n+    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n \n-    std::set<uint256> GetConflicts() const;\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n };\n \n-\n-\n-\n-class COutput\n+/** A key allocated from the key pool. */\n+class CReserveKey\n {\n+protected:\n+    CWallet* pwallet;\n+    int64_t nIndex;\n+    CPubKey vchPubKey;\n public:\n-    const CWalletTx *tx;\n-    int i;\n-    int nDepth;\n-    bool fSpendable;\n-\n-    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn)\n+    CReserveKey(CWallet* pwalletIn)\n     {\n-        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn;\n+        nIndex = -1;\n+        pwallet = pwalletIn;\n     }\n \n-    std::string ToString() const;\n-};\n-\n-\n-\n-\n-/** Private key that includes an expiration date in case it never gets used. */\n-class CWalletKey\n-{\n-public:\n-    CPrivKey vchPrivKey;\n-    int64_t nTimeCreated;\n-    int64_t nTimeExpires;\n-    std::string strComment;\n-    //! todo: add something to note what created it (user, getnewaddress, change)\n-    //!   maybe should have a map<string, string> property map\n-\n-    CWalletKey(int64_t nExpires=0);\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(vchPrivKey);\n-        READWRITE(nTimeCreated);\n-        READWRITE(nTimeExpires);\n-        READWRITE(LIMITED_STRING(strComment, 65536));\n+    ~CReserveKey()\n+    {\n+        ReturnKey();\n     }\n-};\n-\n-\n-\n \n+    void ReturnKey();\n+    bool GetReservedKey(CPubKey &pubkey);\n+    void KeepKey();\n+};\n \n \n /** "
      }
    ]
  },
  {
    "sha": "5a6155ccfa7ee8bb2187054c67f750101986588f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTYxNTVjY2ZhN2VlOGJiMjE4NzA1NGM2N2Y3NTAxMDE5ODY1ODhm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-12-19T01:17:28Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-04T04:30:59Z"
      },
      "message": "c++11: don't forward-declare types used in maps",
      "tree": {
        "sha": "7637a86b5c8e77caf3af820ac20bce10539af56b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7637a86b5c8e77caf3af820ac20bce10539af56b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a6155ccfa7ee8bb2187054c67f750101986588f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a6155ccfa7ee8bb2187054c67f750101986588f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a6155ccfa7ee8bb2187054c67f750101986588f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a6155ccfa7ee8bb2187054c67f750101986588f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3447cf87e27262c57031361b3659fef938783295",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3447cf87e27262c57031361b3659fef938783295",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3447cf87e27262c57031361b3659fef938783295"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 2,
      "deletions": 5
    },
    "files": [
      {
        "sha": "7531737e04d53d3e84300336fd640cb31e5ac507",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a6155ccfa7ee8bb2187054c67f750101986588f/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a6155ccfa7ee8bb2187054c67f750101986588f/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=5a6155ccfa7ee8bb2187054c67f750101986588f",
        "patch": "@@ -7,8 +7,6 @@\n \n #include \"crypter.h\"\n #include \"key.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n #include \"util.h\"\n \n #include <boost/foreach.hpp>"
      },
      {
        "sha": "4a4b6d20afe7270ec1a6397925905e185513d674",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a6155ccfa7ee8bb2187054c67f750101986588f/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a6155ccfa7ee8bb2187054c67f750101986588f/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=5a6155ccfa7ee8bb2187054c67f750101986588f",
        "patch": "@@ -8,14 +8,13 @@\n \n #include \"key.h\"\n #include \"pubkey.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"sync.h\"\n \n #include <boost/signals2/signal.hpp>\n #include <boost/variant.hpp>\n \n-class CScript;\n-class CScriptID;\n-\n /** A virtual base class for key stores */\n class CKeyStore\n {"
      }
    ]
  },
  {
    "sha": "7f991e364eb50bd14970de9d96981a7ca268d4aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Zjk5MWUzNjRlYjUwYmQxNDk3MGRlOWQ5Njk4MWE3Y2EyNjhkNGFh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-12-19T01:43:48Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-04T04:31:00Z"
      },
      "message": "c++11: These look like user-defined literals.\n\nAdd a space to keep the compiler happy",
      "tree": {
        "sha": "a0cd24690077c0b241b711d1c555f33389f5fe88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0cd24690077c0b241b711d1c555f33389f5fe88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f991e364eb50bd14970de9d96981a7ca268d4aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f991e364eb50bd14970de9d96981a7ca268d4aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f991e364eb50bd14970de9d96981a7ca268d4aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f991e364eb50bd14970de9d96981a7ca268d4aa/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a6155ccfa7ee8bb2187054c67f750101986588f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a6155ccfa7ee8bb2187054c67f750101986588f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a6155ccfa7ee8bb2187054c67f750101986588f"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d829ec228db6dda417904bc4347b725d009303f0",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f991e364eb50bd14970de9d96981a7ca268d4aa/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f991e364eb50bd14970de9d96981a7ca268d4aa/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=7f991e364eb50bd14970de9d96981a7ca268d4aa",
        "patch": "@@ -282,21 +282,21 @@ BOOST_AUTO_TEST_CASE(strprintf_numbers)\n {\n     int64_t s64t = -9223372036854775807LL; /* signed 64 bit test value */\n     uint64_t u64t = 18446744073709551615ULL; /* unsigned 64 bit test value */\n-    BOOST_CHECK(strprintf(\"%s %d %s\", B, s64t, E) == B\" -9223372036854775807 \"E);\n-    BOOST_CHECK(strprintf(\"%s %u %s\", B, u64t, E) == B\" 18446744073709551615 \"E);\n-    BOOST_CHECK(strprintf(\"%s %x %s\", B, u64t, E) == B\" ffffffffffffffff \"E);\n+    BOOST_CHECK(strprintf(\"%s %d %s\", B, s64t, E) == B\" -9223372036854775807 \" E);\n+    BOOST_CHECK(strprintf(\"%s %u %s\", B, u64t, E) == B\" 18446744073709551615 \" E);\n+    BOOST_CHECK(strprintf(\"%s %x %s\", B, u64t, E) == B\" ffffffffffffffff \" E);\n \n     size_t st = 12345678; /* unsigned size_t test value */\n     ssize_t sst = -12345678; /* signed size_t test value */\n-    BOOST_CHECK(strprintf(\"%s %d %s\", B, sst, E) == B\" -12345678 \"E);\n-    BOOST_CHECK(strprintf(\"%s %u %s\", B, st, E) == B\" 12345678 \"E);\n-    BOOST_CHECK(strprintf(\"%s %x %s\", B, st, E) == B\" bc614e \"E);\n+    BOOST_CHECK(strprintf(\"%s %d %s\", B, sst, E) == B\" -12345678 \" E);\n+    BOOST_CHECK(strprintf(\"%s %u %s\", B, st, E) == B\" 12345678 \" E);\n+    BOOST_CHECK(strprintf(\"%s %x %s\", B, st, E) == B\" bc614e \" E);\n \n     ptrdiff_t pt = 87654321; /* positive ptrdiff_t test value */\n     ptrdiff_t spt = -87654321; /* negative ptrdiff_t test value */\n-    BOOST_CHECK(strprintf(\"%s %d %s\", B, spt, E) == B\" -87654321 \"E);\n-    BOOST_CHECK(strprintf(\"%s %u %s\", B, pt, E) == B\" 87654321 \"E);\n-    BOOST_CHECK(strprintf(\"%s %x %s\", B, pt, E) == B\" 5397fb1 \"E);\n+    BOOST_CHECK(strprintf(\"%s %d %s\", B, spt, E) == B\" -87654321 \" E);\n+    BOOST_CHECK(strprintf(\"%s %u %s\", B, pt, E) == B\" 87654321 \" E);\n+    BOOST_CHECK(strprintf(\"%s %x %s\", B, pt, E) == B\" 5397fb1 \" E);\n }\n #undef B\n #undef E"
      }
    ]
  },
  {
    "sha": "87ecfb0f9675ef46d360014a65886e9556d28e66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2VjZmIwZjk2NzVlZjQ2ZDM2MDAxNGE2NTg4NmU5NTU2ZDI4ZTY2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T09:16:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T09:23:09Z"
      },
      "message": "Merge pull request #5711\n\n5ebe095 Trim RPC command table (Wladimir J. van der Laan)\n4401b2d Removed main.h dependency from rpcserver.cpp (Eric Lombrozo)",
      "tree": {
        "sha": "8c093b395637147d1d2dc31b7582041231b04e6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c093b395637147d1d2dc31b7582041231b04e6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87ecfb0f9675ef46d360014a65886e9556d28e66",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0eT9AAoJEHSBCwEjRsmmxxMH/jK3GFJYcxIUWU88TnLZpjG7\nY6ToZ7Qyk/WLvaULJIM64lqAF7IzkfMDoAWG7YP5vAlYNHZELPr7jVNtU+LGTRLx\nfamU6s0Ax906zM+79/LZrg2aitpZRSKax4xSMVTvheHVfyQESypdB/nLISSGX9zk\nW2En4ey2DSAtcZmCt14soa9wvSbVePQHxIJCept1ee/k6Ie4WtWsbyjknTXuh6oS\n0Qp7FKX4rvMLrEvSTcyc9ekgQ11ElsPKW85xB0MIAuDxeFnUKdreg1D+Tkd2XDJC\npm1uhTZREwypvGgA7MRTevwiX73XBWHmkb6e6BFJ3vWbDZLFw3plr46cVA4WmKY=\n=pniz\n-----END PGP SIGNATURE-----",
        "payload": "tree 8c093b395637147d1d2dc31b7582041231b04e6e\nparent fcf646c9b08e7f846d6c99314f937ace50809d7a\nparent 5ebe0956b391cfa782fd97bb417d20b479df6a36\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423041384 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423041789 +0100\n\nMerge pull request #5711\n\n5ebe095 Trim RPC command table (Wladimir J. van der Laan)\n4401b2d Removed main.h dependency from rpcserver.cpp (Eric Lombrozo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ecfb0f9675ef46d360014a65886e9556d28e66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87ecfb0f9675ef46d360014a65886e9556d28e66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ecfb0f9675ef46d360014a65886e9556d28e66/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcf646c9b08e7f846d6c99314f937ace50809d7a"
      },
      {
        "sha": "5ebe0956b391cfa782fd97bb417d20b479df6a36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ebe0956b391cfa782fd97bb417d20b479df6a36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ebe0956b391cfa782fd97bb417d20b479df6a36"
      }
    ],
    "stats": {
      "total": 433,
      "additions": 308,
      "deletions": 125
    },
    "files": [
      {
        "sha": "c8f32d8bfd151a92896f2a1cb6038f526c81f08a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -234,6 +234,26 @@ bool static Bind(const CService &addr, unsigned int flags) {\n     return true;\n }\n \n+void OnRPCStopped()\n+{\n+    cvBlockChange.notify_all();\n+    LogPrint(\"rpc\", \"RPC stopped.\\n\");\n+}\n+\n+void OnRPCPreCommand(const CRPCCommand& cmd)\n+{\n+#ifdef ENABLE_WALLET\n+    if (cmd.reqWallet && !pwalletMain)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n+#endif\n+\n+    // Observe safe mode\n+    string strWarning = GetWarnings(\"rpc\");\n+    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&\n+        !cmd.okSafeMode)\n+        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n+}\n+\n std::string HelpMessage(HelpMessageMode mode)\n {\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n@@ -802,6 +822,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (fServer)\n     {\n         uiInterface.InitMessage.connect(SetRPCWarmupStatus);\n+        RPCServer::OnStopped(&OnRPCStopped);\n+        RPCServer::OnPreCommand(&OnRPCPreCommand);\n         StartRPCThreads();\n     }\n "
      },
      {
        "sha": "293d6d5619a2325bfba31b077c226e4c3e8aaf82",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -105,6 +105,7 @@ Value getblockcount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockcount\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return chainActive.Height();\n }\n \n@@ -121,6 +122,7 @@ Value getbestblockhash(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getbestblockhash\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return chainActive.Tip()->GetBlockHash().GetHex();\n }\n \n@@ -137,6 +139,7 @@ Value getdifficulty(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getdifficulty\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return GetDifficulty();\n }\n \n@@ -173,6 +176,8 @@ Value getrawmempool(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawmempool\", \"true\")\n         );\n \n+    LOCK(cs_main);\n+\n     bool fVerbose = false;\n     if (params.size() > 0)\n         fVerbose = params[0].get_bool();\n@@ -233,6 +238,8 @@ Value getblockhash(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockhash\", \"1000\")\n         );\n \n+    LOCK(cs_main);\n+\n     int nHeight = params[0].get_int();\n     if (nHeight < 0 || nHeight > chainActive.Height())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n@@ -277,6 +284,8 @@ Value getblock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n         );\n \n+    LOCK(cs_main);\n+\n     std::string strHash = params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n@@ -326,6 +335,8 @@ Value gettxoutsetinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object ret;\n \n     CCoinsStats stats;\n@@ -380,6 +391,8 @@ Value gettxout(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettxout\", \"\\\"txid\\\", 1\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object ret;\n \n     std::string strHash = params[0].get_str();\n@@ -436,6 +449,8 @@ Value verifychain(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"verifychain\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     int nCheckLevel = GetArg(\"-checklevel\", 3);\n     int nCheckDepth = GetArg(\"-checkblocks\", 288);\n     if (params.size() > 0)\n@@ -467,6 +482,8 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblockchaininfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"chain\",                 Params().NetworkIDString()));\n     obj.push_back(Pair(\"blocks\",                (int)chainActive.Height()));\n@@ -526,6 +543,8 @@ Value getchaintips(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getchaintips\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     /* Build up a list of chain tips.  We start with the list of all\n        known blocks, and successively remove blocks that appear as pprev\n        of another block.  */"
      },
      {
        "sha": "b9c92a06c5deb2e8696019a51d0d29fa69a41c95",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -91,6 +91,8 @@ Value importprivkey(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importprivkey\", \"\\\"mykey\\\", \\\"testing\\\", false\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strSecret = params[0].get_str();\n@@ -158,6 +160,8 @@ Value importaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importaddress\", \"\\\"myaddress\\\", \\\"testing\\\", false\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CScript script;\n \n     CBitcoinAddress address(params[0].get_str());\n@@ -223,6 +227,8 @@ Value importwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"importwallet\", \"\\\"test\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     ifstream file;\n@@ -322,6 +328,8 @@ Value dumpprivkey(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strAddress = params[0].get_str();\n@@ -351,6 +359,8 @@ Value dumpwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     ofstream file;"
      },
      {
        "sha": "369b3fb4d7872639d305033b3bacdacf10f78230",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -88,6 +88,7 @@ Value getnetworkhashps(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnetworkhashps\", \"\")\n        );\n \n+    LOCK(cs_main);\n     return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n }\n \n@@ -107,6 +108,7 @@ Value getgenerate(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getgenerate\", \"\")\n         );\n \n+    LOCK(cs_main);\n     return GetBoolArg(\"-gen\", false);\n }\n \n@@ -200,7 +202,6 @@ Value setgenerate(const Array& params, bool fHelp)\n \n     return Value::null;\n }\n-\n #endif\n \n \n@@ -228,6 +229,9 @@ Value getmininginfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getmininginfo\", \"\")\n         );\n \n+\n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n     obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n@@ -268,8 +272,9 @@ Value prioritisetransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n         );\n \n-    uint256 hash = ParseHashStr(params[0].get_str(), \"txid\");\n+    LOCK(cs_main);\n \n+    uint256 hash = ParseHashStr(params[0].get_str(), \"txid\");\n     CAmount nAmount = params[2].get_int64();\n \n     mempool.PrioritiseTransaction(hash, params[0].get_str(), params[1].get_real(), nAmount);\n@@ -358,6 +363,8 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getblocktemplate\", \"\")\n          );\n \n+    LOCK(cs_main);\n+\n     std::string strMode = \"template\";\n     Value lpval = Value::null;\n     if (params.size() > 0)"
      },
      {
        "sha": "8d260b1cc9b0cc657f3e1990ae0b82aad9dbbfcb",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -69,6 +69,12 @@ Value getinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getinfo\", \"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n+\n     proxyType proxy;\n     GetProxy(NET_IPV4, proxy);\n \n@@ -172,6 +178,12 @@ Value validateaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n+\n     CBitcoinAddress address(params[0].get_str());\n     bool isValid = address.IsValid();\n \n@@ -329,6 +341,8 @@ Value verifymessage(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"signature\\\", \\\"my message\\\"\")\n         );\n \n+    LOCK(cs_main);\n+\n     string strAddress  = params[0].get_str();\n     string strSign     = params[1].get_str();\n     string strMessage  = params[2].get_str();\n@@ -372,6 +386,8 @@ Value setmocktime(const Array& params, bool fHelp)\n     if (!Params().MineBlocksOnDemand())\n         throw runtime_error(\"setmocktime for regression testing (-regtest mode) only\");\n \n+    LOCK(cs_main);\n+\n     RPCTypeCheck(params, boost::assign::list_of(int_type));\n     SetMockTime(params[0].get_int64());\n "
      },
      {
        "sha": "6306fd4406051fca36646e28ffd79c9796c791ef",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -34,7 +34,8 @@ Value getconnectioncount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getconnectioncount\", \"\")\n         );\n \n-    LOCK(cs_vNodes);\n+    LOCK2(cs_main, cs_vNodes);\n+\n     return (int)vNodes.size();\n }\n \n@@ -52,7 +53,8 @@ Value ping(const Array& params, bool fHelp)\n         );\n \n     // Request that each node send a ping during next message processing pass\n-    LOCK(cs_vNodes);\n+    LOCK2(cs_main, cs_vNodes);\n+\n     BOOST_FOREACH(CNode* pNode, vNodes) {\n         pNode->fPingQueued = true;\n     }\n@@ -113,6 +115,8 @@ Value getpeerinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getpeerinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     vector<CNodeStats> vstats;\n     CopyNodeStats(vstats);\n \n@@ -411,6 +415,8 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnetworkinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     Object obj;\n     obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n     obj.push_back(Pair(\"subversion\","
      },
      {
        "sha": "4a079f5c81fbcf3b179327473ed252e79239d218",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -169,6 +169,8 @@ Value getrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", 1\")\n         );\n \n+    LOCK(cs_main);\n+\n     uint256 hash = ParseHashV(params[0], \"parameter 1\");\n \n     bool fVerbose = false;\n@@ -256,6 +258,7 @@ Value listunspent(const Array& params, bool fHelp)\n     Array results;\n     vector<COutput> vecOutputs;\n     assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n     pwalletMain->AvailableCoins(vecOutputs, false);\n     BOOST_FOREACH(const COutput& out, vecOutputs) {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n@@ -334,6 +337,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(array_type)(obj_type));\n \n     Array inputs = params[0].get_array();\n@@ -428,6 +432,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     CTransaction tx;\n@@ -466,6 +471,7 @@ Value decodescript(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     Object r;\n@@ -532,6 +538,11 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n         );\n \n+#ifdef ENABLE_WALLET\n+    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#else\n+    LOCK(cs_main);\n+#endif\n     RPCTypeCheck(params, boost::assign::list_of(str_type)(array_type)(array_type)(str_type), true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n@@ -591,7 +602,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         }\n     }\n #ifdef ENABLE_WALLET\n-    else\n+    else if (pwalletMain)\n         EnsureWalletIsUnlocked();\n #endif\n \n@@ -722,6 +733,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n         );\n \n+    LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(str_type)(bool_type));\n \n     // parse hex string from parameter"
      },
      {
        "sha": "823b1fcf240b3e41e967c0f68c48bb430fec4e3d",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 117,
        "changes": 240,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -7,9 +7,11 @@\n \n #include \"base58.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"random.h\"\n+#include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #endif\n@@ -23,11 +25,13 @@\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n+#include <boost/signals2/signal.hpp>\n #include <boost/thread.hpp>\n #include \"json/json_spirit_writer_template.h\"\n \n using namespace boost::asio;\n using namespace json_spirit;\n+using namespace RPCServer;\n using namespace std;\n \n static std::string strRPCUserColonPass;\n@@ -46,6 +50,34 @@ static boost::asio::io_service::work *rpc_dummy_work = NULL;\n static std::vector<CSubNet> rpc_allow_subnets; //!< List of subnets to allow RPC connections from\n static std::vector< boost::shared_ptr<ip::tcp::acceptor> > rpc_acceptors;\n \n+static struct CRPCSignals\n+{\n+    boost::signals2::signal<void ()> Started;\n+    boost::signals2::signal<void ()> Stopped;\n+    boost::signals2::signal<void (const CRPCCommand&)> PreCommand;\n+    boost::signals2::signal<void (const CRPCCommand&)> PostCommand;\n+} g_rpcSignals;\n+\n+void RPCServer::OnStarted(boost::function<void ()> slot)\n+{\n+    g_rpcSignals.Started.connect(slot);\n+}\n+\n+void RPCServer::OnStopped(boost::function<void ()> slot)\n+{\n+    g_rpcSignals.Stopped.connect(slot);\n+}\n+\n+void RPCServer::OnPreCommand(boost::function<void (const CRPCCommand&)> slot)\n+{\n+    g_rpcSignals.PreCommand.connect(boost::bind(slot, _1));\n+}\n+\n+void RPCServer::OnPostCommand(boost::function<void (const CRPCCommand&)> slot)\n+{\n+    g_rpcSignals.PostCommand.connect(boost::bind(slot, _1));\n+}\n+\n void RPCTypeCheck(const Array& params,\n                   const list<Value_type>& typesExpected,\n                   bool fAllowNull)\n@@ -239,112 +271,110 @@ Value stop(const Array& params, bool fHelp)\n  * Call Table\n  */\n static const CRPCCommand vRPCCommands[] =\n-{ //  category              name                      actor (function)         okSafeMode threadSafe reqWallet\n-  //  --------------------- ------------------------  -----------------------  ---------- ---------- ---------\n+{ //  category              name                      actor (function)         okSafeMode reqWallet\n+  //  --------------------- ------------------------  -----------------------  ---------- ---------\n     /* Overall control/query calls */\n-    { \"control\",            \"getinfo\",                &getinfo,                true,      false,      false }, /* uses wallet if enabled */\n-    { \"control\",            \"help\",                   &help,                   true,      true,       false },\n-    { \"control\",            \"stop\",                   &stop,                   true,      true,       false },\n+    { \"control\",            \"getinfo\",                &getinfo,                true,      false }, /* uses wallet if enabled */\n+    { \"control\",            \"help\",                   &help,                   true,      false },\n+    { \"control\",            \"stop\",                   &stop,                   true,      false },\n \n     /* P2P networking */\n-    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true,      false,      false },\n-    { \"network\",            \"addnode\",                &addnode,                true,      true,       false },\n-    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true,      true,       false },\n-    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true,      false,      false },\n-    { \"network\",            \"getnettotals\",           &getnettotals,           true,      true,       false },\n-    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true,      false,      false },\n-    { \"network\",            \"ping\",                   &ping,                   true,      false,      false },\n+    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true,      false },\n+    { \"network\",            \"addnode\",                &addnode,                true,      false },\n+    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true,      false },\n+    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true,      false },\n+    { \"network\",            \"getnettotals\",           &getnettotals,           true,      false },\n+    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true,      false },\n+    { \"network\",            \"ping\",                   &ping,                   true,      false },\n \n     /* Block chain and UTXO */\n-    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true,      false,      false },\n-    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true,      false,      false },\n-    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true,      false,      false },\n-    { \"blockchain\",         \"getblock\",               &getblock,               true,      false,      false },\n-    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true,      false,      false },\n-    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true,      false,      false },\n-    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true,      false,      false },\n-    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,      true,       false },\n-    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,      false,      false },\n-    { \"blockchain\",         \"gettxout\",               &gettxout,               true,      false,      false },\n-    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false,      false },\n-    { \"blockchain\",         \"verifychain\",            &verifychain,            true,      false,      false },\n-    { \"blockchain\",         \"invalidateblock\",        &invalidateblock,        true,      true,       false },\n-    { \"blockchain\",         \"reconsiderblock\",        &reconsiderblock,        true,      true,       false },\n+    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true,      false },\n+    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true,      false },\n+    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true,      false },\n+    { \"blockchain\",         \"getblock\",               &getblock,               true,      false },\n+    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true,      false },\n+    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true,      false },\n+    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true,      false },\n+    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,      false },\n+    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,      false },\n+    { \"blockchain\",         \"gettxout\",               &gettxout,               true,      false },\n+    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false },\n+    { \"blockchain\",         \"verifychain\",            &verifychain,            true,      false },\n \n     /* Mining */\n-    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,      false,      false },\n-    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,      false,      false },\n-    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true,      false,      false },\n-    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,      false,      false },\n-    { \"mining\",             \"submitblock\",            &submitblock,            true,      true,       false },\n+    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,      false },\n+    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,      false },\n+    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true,      false },\n+    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,      false },\n+    { \"mining\",             \"submitblock\",            &submitblock,            true,      false },\n \n #ifdef ENABLE_WALLET\n     /* Coin generation */\n-    { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false,      false },\n-    { \"generating\",         \"setgenerate\",            &setgenerate,            true,      true,       false },\n+    { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false },\n+    { \"generating\",         \"setgenerate\",            &setgenerate,            true,      false },\n #endif\n \n     /* Raw transactions */\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      false,      false },\n-    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false,      false },\n-    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      false,      false },\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false,      false },\n-    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false,      false },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false,      false }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      false },\n+    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false },\n+    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      false },\n+    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false },\n+    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false },\n+    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false }, /* uses wallet if enabled */\n \n     /* Utility functions */\n-    { \"util\",               \"createmultisig\",         &createmultisig,         true,      true ,      false },\n-    { \"util\",               \"validateaddress\",        &validateaddress,        true,      false,      false }, /* uses wallet if enabled */\n-    { \"util\",               \"verifymessage\",          &verifymessage,          true,      false,      false },\n-    { \"util\",               \"estimatefee\",            &estimatefee,            true,      true,       false },\n-    { \"util\",               \"estimatepriority\",       &estimatepriority,       true,      true,       false },\n+    { \"util\",               \"createmultisig\",         &createmultisig,         true,      false },\n+    { \"util\",               \"validateaddress\",        &validateaddress,        true,      false }, /* uses wallet if enabled */\n+    { \"util\",               \"verifymessage\",          &verifymessage,          true,      false },\n+    { \"util\",               \"estimatefee\",            &estimatefee,            true,      false },\n+    { \"util\",               \"estimatepriority\",       &estimatepriority,       true,      false },\n \n     /* Not shown in help */\n-    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,      true,       false },\n-    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,      true,       false },\n-    { \"hidden\",             \"setmocktime\",            &setmocktime,            true,      false,      false },\n+    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,      false },\n+    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,      false },\n+    { \"hidden\",             \"setmocktime\",            &setmocktime,            true,      false },\n \n #ifdef ENABLE_WALLET\n     /* Wallet */\n-    { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true,      false,      true },\n-    { \"wallet\",             \"backupwallet\",           &backupwallet,           true,      false,      true },\n-    { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true,      false,      true },\n-    { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true,      false,      true },\n-    { \"wallet\",             \"encryptwallet\",          &encryptwallet,          true,      false,      true },\n-    { \"wallet\",             \"getaccountaddress\",      &getaccountaddress,      true,      false,      true },\n-    { \"wallet\",             \"getaccount\",             &getaccount,             true,      false,      true },\n-    { \"wallet\",             \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,      false,      true },\n-    { \"wallet\",             \"getbalance\",             &getbalance,             false,     false,      true },\n-    { \"wallet\",             \"getnewaddress\",          &getnewaddress,          true,      false,      true },\n-    { \"wallet\",             \"getrawchangeaddress\",    &getrawchangeaddress,    true,      false,      true },\n-    { \"wallet\",             \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,     false,      true },\n-    { \"wallet\",             \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,     false,      true },\n-    { \"wallet\",             \"gettransaction\",         &gettransaction,         false,     false,      true },\n-    { \"wallet\",             \"getunconfirmedbalance\",  &getunconfirmedbalance,  false,     false,      true },\n-    { \"wallet\",             \"getwalletinfo\",          &getwalletinfo,          false,     false,      true },\n-    { \"wallet\",             \"importprivkey\",          &importprivkey,          true,      false,      true },\n-    { \"wallet\",             \"importwallet\",           &importwallet,           true,      false,      true },\n-    { \"wallet\",             \"importaddress\",          &importaddress,          true,      false,      true },\n-    { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true,      false,      true },\n-    { \"wallet\",             \"listaccounts\",           &listaccounts,           false,     false,      true },\n-    { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false,     false,      true },\n-    { \"wallet\",             \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n-    { \"wallet\",             \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,     false,      true },\n-    { \"wallet\",             \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,     false,      true },\n-    { \"wallet\",             \"listsinceblock\",         &listsinceblock,         false,     false,      true },\n-    { \"wallet\",             \"listtransactions\",       &listtransactions,       false,     false,      true },\n-    { \"wallet\",             \"listunspent\",            &listunspent,            false,     false,      true },\n-    { \"wallet\",             \"lockunspent\",            &lockunspent,            true,      false,      true },\n-    { \"wallet\",             \"move\",                   &movecmd,                false,     false,      true },\n-    { \"wallet\",             \"sendfrom\",               &sendfrom,               false,     false,      true },\n-    { \"wallet\",             \"sendmany\",               &sendmany,               false,     false,      true },\n-    { \"wallet\",             \"sendtoaddress\",          &sendtoaddress,          false,     false,      true },\n-    { \"wallet\",             \"setaccount\",             &setaccount,             true,      false,      true },\n-    { \"wallet\",             \"settxfee\",               &settxfee,               true,      false,      true },\n-    { \"wallet\",             \"signmessage\",            &signmessage,            true,      false,      true },\n-    { \"wallet\",             \"walletlock\",             &walletlock,             true,      false,      true },\n-    { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true,      false,      true },\n-    { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true,      false,      true },\n+    { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true,      true },\n+    { \"wallet\",             \"backupwallet\",           &backupwallet,           true,      true },\n+    { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true,      true },\n+    { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true,      true },\n+    { \"wallet\",             \"encryptwallet\",          &encryptwallet,          true,      true },\n+    { \"wallet\",             \"getaccountaddress\",      &getaccountaddress,      true,      true },\n+    { \"wallet\",             \"getaccount\",             &getaccount,             true,      true },\n+    { \"wallet\",             \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,      true },\n+    { \"wallet\",             \"getbalance\",             &getbalance,             false,     true },\n+    { \"wallet\",             \"getnewaddress\",          &getnewaddress,          true,      true },\n+    { \"wallet\",             \"getrawchangeaddress\",    &getrawchangeaddress,    true,      true },\n+    { \"wallet\",             \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,     true },\n+    { \"wallet\",             \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,     true },\n+    { \"wallet\",             \"gettransaction\",         &gettransaction,         false,     true },\n+    { \"wallet\",             \"getunconfirmedbalance\",  &getunconfirmedbalance,  false,     true },\n+    { \"wallet\",             \"getwalletinfo\",          &getwalletinfo,          false,     true },\n+    { \"wallet\",             \"importprivkey\",          &importprivkey,          true,      true },\n+    { \"wallet\",             \"importwallet\",           &importwallet,           true,      true },\n+    { \"wallet\",             \"importaddress\",          &importaddress,          true,      true },\n+    { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true,      true },\n+    { \"wallet\",             \"listaccounts\",           &listaccounts,           false,     true },\n+    { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false,     true },\n+    { \"wallet\",             \"listlockunspent\",        &listlockunspent,        false,     true },\n+    { \"wallet\",             \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,     true },\n+    { \"wallet\",             \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,     true },\n+    { \"wallet\",             \"listsinceblock\",         &listsinceblock,         false,     true },\n+    { \"wallet\",             \"listtransactions\",       &listtransactions,       false,     true },\n+    { \"wallet\",             \"listunspent\",            &listunspent,            false,     true },\n+    { \"wallet\",             \"lockunspent\",            &lockunspent,            true,      true },\n+    { \"wallet\",             \"move\",                   &movecmd,                false,     true },\n+    { \"wallet\",             \"sendfrom\",               &sendfrom,               false,     true },\n+    { \"wallet\",             \"sendmany\",               &sendmany,               false,     true },\n+    { \"wallet\",             \"sendtoaddress\",          &sendtoaddress,          false,     true },\n+    { \"wallet\",             \"setaccount\",             &setaccount,             true,      true },\n+    { \"wallet\",             \"settxfee\",               &settxfee,               true,      true },\n+    { \"wallet\",             \"signmessage\",            &signmessage,            true,      true },\n+    { \"wallet\",             \"walletlock\",             &walletlock,             true,      true },\n+    { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true,      true },\n+    { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true,      true },\n #endif // ENABLE_WALLET\n };\n \n@@ -693,6 +723,7 @@ void StartRPCThreads()\n     for (int i = 0; i < GetArg(\"-rpcthreads\", 4); i++)\n         rpc_worker_group->create_thread(boost::bind(&boost::asio::io_service::run, rpc_io_service));\n     fRPCRunning = true;\n+    g_rpcSignals.Started();\n }\n \n void StartDummyRPCThread()\n@@ -735,7 +766,7 @@ void StopRPCThreads()\n     deadlineTimers.clear();\n \n     rpc_io_service->stop();\n-    cvBlockChange.notify_all();\n+    g_rpcSignals.Stopped();\n     if (rpc_worker_group != NULL)\n         rpc_worker_group->join_all();\n     delete rpc_dummy_work; rpc_dummy_work = NULL;\n@@ -978,45 +1009,20 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n     if (!pcmd)\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n-#ifdef ENABLE_WALLET\n-    if (pcmd->reqWallet && !pwalletMain)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n-#endif\n \n-    // Observe safe mode\n-    string strWarning = GetWarnings(\"rpc\");\n-    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&\n-        !pcmd->okSafeMode)\n-        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n+    g_rpcSignals.PreCommand(*pcmd);\n \n     try\n     {\n         // Execute\n-        Value result;\n-        {\n-            if (pcmd->threadSafe)\n-                result = pcmd->actor(params, false);\n-#ifdef ENABLE_WALLET\n-            else if (!pwalletMain) {\n-                LOCK(cs_main);\n-                result = pcmd->actor(params, false);\n-            } else {\n-                LOCK2(cs_main, pwalletMain->cs_wallet);\n-                result = pcmd->actor(params, false);\n-            }\n-#else // ENABLE_WALLET\n-            else {\n-                LOCK(cs_main);\n-                result = pcmd->actor(params, false);\n-            }\n-#endif // !ENABLE_WALLET\n-        }\n-        return result;\n+        return pcmd->actor(params, false);\n     }\n     catch (const std::exception& e)\n     {\n         throw JSONRPCError(RPC_MISC_ERROR, e.what());\n     }\n+\n+    g_rpcSignals.PostCommand(*pcmd);\n }\n \n std::string HelpExampleCli(string methodname, string args){"
      },
      {
        "sha": "f63438ecb882422f6035c0e8f329d5685dc9fdb0",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -19,6 +19,16 @@\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_writer_template.h\"\n \n+class CRPCCommand;\n+\n+namespace RPCServer\n+{\n+    void OnStarted(boost::function<void ()> slot);\n+    void OnStopped(boost::function<void ()> slot);\n+    void OnPreCommand(boost::function<void (const CRPCCommand&)> slot);\n+    void OnPostCommand(boost::function<void (const CRPCCommand&)> slot);\n+}\n+\n class CBlockIndex;\n class CNetAddr;\n \n@@ -88,7 +98,6 @@ class CRPCCommand\n     std::string name;\n     rpcfn_type actor;\n     bool okSafeMode;\n-    bool threadSafe;\n     bool reqWallet;\n };\n "
      },
      {
        "sha": "1afc3c910e43a27cb9d438472bd811b89a500d35",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 2,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -90,6 +90,8 @@ Value getnewaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnewaddress\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount;\n     if (params.size() > 0)\n@@ -164,13 +166,14 @@ Value getaccountaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaccountaddress\", \"\\\"myaccount\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount = AccountFromValue(params[0]);\n \n     Value ret;\n \n     ret = GetAccountAddress(strAccount).ToString();\n-\n     return ret;\n }\n \n@@ -189,6 +192,8 @@ Value getrawchangeaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawchangeaddress\", \"\")\n        );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (!pwalletMain->IsLocked())\n         pwalletMain->TopUpKeyPool();\n \n@@ -219,11 +224,12 @@ Value setaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n-\n     string strAccount;\n     if (params.size() > 1)\n         strAccount = AccountFromValue(params[1]);\n@@ -262,6 +268,8 @@ Value getaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n@@ -292,6 +300,8 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getaddressesbyaccount\", \"\\\"tabby\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n \n     // Find all addresses that have the given account\n@@ -363,6 +373,8 @@ Value sendtoaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n@@ -409,6 +421,8 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listaddressgroupings\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     Array jsonGroupings;\n     map<CTxDestination, CAmount> balances = pwalletMain->GetAddressBalances();\n     BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n@@ -454,6 +468,8 @@ Value signmessage(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"my message\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     EnsureWalletIsUnlocked();\n \n     string strAddress = params[0].get_str();\n@@ -504,6 +520,8 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", 6\")\n        );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Bitcoin address\n     CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n     if (!address.IsValid())\n@@ -557,6 +575,8 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getreceivedbyaccount\", \"\\\"tabby\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Minimum confirmations\n     int nMinDepth = 1;\n     if (params.size() > 1)\n@@ -643,6 +663,8 @@ Value getbalance(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (params.size() == 0)\n         return  ValueFromAmount(pwalletMain->GetBalance());\n \n@@ -695,6 +717,9 @@ Value getunconfirmedbalance(const Array &params, bool fHelp)\n         throw runtime_error(\n                 \"getunconfirmedbalance\\n\"\n                 \"Returns the server's total unconfirmed balance\\n\");\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ValueFromAmount(pwalletMain->GetUnconfirmedBalance());\n }\n \n@@ -721,6 +746,8 @@ Value movecmd(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"move\", \"\\\"timotei\\\", \\\"akiko\\\", 0.01, 6, \\\"happy birthday!\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strFrom = AccountFromValue(params[0]);\n     string strTo = AccountFromValue(params[1]);\n     CAmount nAmount = AmountFromValue(params[2]);\n@@ -793,6 +820,8 @@ Value sendfrom(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendfrom\", \"\\\"tabby\\\", \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.01, 6, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n@@ -850,6 +879,8 @@ Value sendmany(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = AccountFromValue(params[0]);\n     Object sendTo = params[1].get_obj();\n     int nMinDepth = 1;\n@@ -935,6 +966,8 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n         throw runtime_error(msg);\n     }\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount;\n     if (params.size() > 2)\n         strAccount = AccountFromValue(params[2]);\n@@ -1110,6 +1143,8 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ListReceived(params, false);\n }\n \n@@ -1141,6 +1176,8 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listreceivedbyaccount\", \"6, true, true\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     return ListReceived(params, true);\n }\n \n@@ -1292,6 +1329,8 @@ Value listtransactions(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strAccount = \"*\";\n     if (params.size() > 0)\n         strAccount = params[0].get_str();\n@@ -1372,6 +1411,8 @@ Value listaccounts(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listaccounts\", \"6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     int nMinDepth = 1;\n     if (params.size() > 0)\n         nMinDepth = params[0].get_int();\n@@ -1460,6 +1501,8 @@ Value listsinceblock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\", 6\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     CBlockIndex *pindex = NULL;\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n@@ -1546,6 +1589,8 @@ Value gettransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     uint256 hash;\n     hash.SetHex(params[0].get_str());\n \n@@ -1594,6 +1639,8 @@ Value backupwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     string strDest = params[0].get_str();\n     if (!BackupWallet(*pwalletMain, strDest))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n@@ -1616,6 +1663,8 @@ Value keypoolrefill(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n     unsigned int kpSize = 0;\n     if (params.size() > 0) {\n@@ -1663,6 +1712,8 @@ Value walletpassphrase(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletpassphrase\", \"\\\"my pass phrase\\\", 60\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1710,6 +1761,8 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletpassphrasechange\", \"\\\"old one\\\", \\\"new one\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1756,6 +1809,8 @@ Value walletlock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"walletlock\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1797,6 +1852,8 @@ Value encryptwallet(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"encryptwallet\", \"\\\"my pass phrase\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (fHelp)\n         return true;\n     if (pwalletMain->IsCrypted())\n@@ -1861,6 +1918,8 @@ Value lockunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     if (params.size() == 1)\n         RPCTypeCheck(params, boost::assign::list_of(bool_type));\n     else\n@@ -1930,6 +1989,8 @@ Value listlockunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listlockunspent\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     vector<COutPoint> vOutpts;\n     pwalletMain->ListLockedCoins(vOutpts);\n \n@@ -1961,6 +2022,8 @@ Value settxfee(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"settxfee\", \"0.00001\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     // Amount\n     CAmount nAmount = 0;\n     if (params[0].get_real() != 0.0)\n@@ -1992,6 +2055,8 @@ Value getwalletinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getwalletinfo\", \"\")\n         );\n \n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n     Object obj;\n     obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n     obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));"
      },
      {
        "sha": "27e80e813b77ca0754d8e2a8165a35ffb97d6fe5",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ecfb0f9675ef46d360014a65886e9556d28e66/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ecfb0f9675ef46d360014a65886e9556d28e66/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=87ecfb0f9675ef46d360014a65886e9556d28e66",
        "patch": "@@ -142,6 +142,17 @@ class CMutexLock\n             Enter(pszName, pszFile, nLine);\n     }\n \n+    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false)\n+    {\n+        if (!pmutexIn) return;\n+\n+        lock = boost::unique_lock<Mutex>(*pmutexIn, boost::defer_lock);\n+        if (fTry)\n+            TryEnter(pszName, pszFile, nLine);\n+        else\n+            Enter(pszName, pszFile, nLine);\n+    }\n+\n     ~CMutexLock()\n     {\n         if (lock.owns_lock())"
      }
    ]
  },
  {
    "sha": "31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWRlZGI0NjNiMGNlNzczNjRlNTE2MjM5YmYxYjljN2VlZDViM2Iw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T11:56:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T12:06:16Z"
      },
      "message": "Merge pull request #5509\n\n7f991e3 c++11: These look like user-defined literals. (Cory Fields)\n5a6155c c++11: don't forward-declare types used in maps (Cory Fields)\n3447cf8 c++11: MOVEONLY: break circular dependency in wallet (Cory Fields)\nbbacd88 c++11: MOVEONLY: move function definitions out of the header (Cory Fields)\na2b04dd build: fix newer boost build with c++11 (Cory Fields)",
      "tree": {
        "sha": "737f42a6f13f8b1521d42795ba339527f50f8535",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/737f42a6f13f8b1521d42795ba339527f50f8535"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0gs4AAoJEHSBCwEjRsmmOFYIAM49W6yU6dR3mM/DV5bAAN0g\nevkbpoMkNE0bbNryJg8t4/kcsaMvtb34rEj7mPo+Uxg9ALEsAGJdwKhzAcnayIxj\nRdlFX7/5HHtRL+LH85H+EgFAFypWZlXnK8brPEqufOa4oguTRn0RDJejzFICxJJI\nKS09vrj5jMN3Wu0Rv6bjwLVAcc7/6VsbHs0qeQamUpbg+Bz74wclkO5VYrbLf1xN\n653pgrep5Wd3ERV/wJ/rODUpFm/sp2XH2NTLNBjlS1fY9I27nuyQoXoZMdaNOTiC\nQR5WN8Umcr9z0roC/EAhNfomAh6g818NhmtFjWdr964q/hABvkQb+lRvk7my7Mg=\n=7hBR\n-----END PGP SIGNATURE-----",
        "payload": "tree 737f42a6f13f8b1521d42795ba339527f50f8535\nparent 87ecfb0f9675ef46d360014a65886e9556d28e66\nparent 7f991e364eb50bd14970de9d96981a7ca268d4aa\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423050980 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423051576 +0100\n\nMerge pull request #5509\n\n7f991e3 c++11: These look like user-defined literals. (Cory Fields)\n5a6155c c++11: don't forward-declare types used in maps (Cory Fields)\n3447cf8 c++11: MOVEONLY: break circular dependency in wallet (Cory Fields)\nbbacd88 c++11: MOVEONLY: move function definitions out of the header (Cory Fields)\na2b04dd build: fix newer boost build with c++11 (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87ecfb0f9675ef46d360014a65886e9556d28e66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ecfb0f9675ef46d360014a65886e9556d28e66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87ecfb0f9675ef46d360014a65886e9556d28e66"
      },
      {
        "sha": "7f991e364eb50bd14970de9d96981a7ca268d4aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f991e364eb50bd14970de9d96981a7ca268d4aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f991e364eb50bd14970de9d96981a7ca268d4aa"
      }
    ],
    "stats": {
      "total": 1443,
      "additions": 724,
      "deletions": 719
    },
    "files": [
      {
        "sha": "1fd3b0168125e1c64fd4923ed5e4730f9ab9c035",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "patch": "@@ -156,11 +156,11 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\"));\n         vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = boost::assign::list_of(0);\n-        base58Prefixes[SCRIPT_ADDRESS] = boost::assign::list_of(5);\n-        base58Prefixes[SECRET_KEY] =     boost::assign::list_of(128);\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E);\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4);\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,128);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4).convert_to_container<std::vector<unsigned char> >();\n \n         convertSeed6(vFixedSeeds, pnSeed6_main, ARRAYLEN(pnSeed6_main));\n \n@@ -214,11 +214,11 @@ class CTestNetParams : public CMainParams {\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.schildbach.de\", \"testnet-seed.bitcoin.schildbach.de\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = boost::assign::list_of(111);\n-        base58Prefixes[SCRIPT_ADDRESS] = boost::assign::list_of(196);\n-        base58Prefixes[SECRET_KEY]     = boost::assign::list_of(239);\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF);\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94);\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n \n         convertSeed6(vFixedSeeds, pnSeed6_test, ARRAYLEN(pnSeed6_test));\n "
      },
      {
        "sha": "7531737e04d53d3e84300336fd640cb31e5ac507",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "patch": "@@ -7,8 +7,6 @@\n \n #include \"crypter.h\"\n #include \"key.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n #include \"util.h\"\n \n #include <boost/foreach.hpp>"
      },
      {
        "sha": "4a4b6d20afe7270ec1a6397925905e185513d674",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "patch": "@@ -8,14 +8,13 @@\n \n #include \"key.h\"\n #include \"pubkey.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"sync.h\"\n \n #include <boost/signals2/signal.hpp>\n #include <boost/variant.hpp>\n \n-class CScript;\n-class CScriptID;\n-\n /** A virtual base class for key stores */\n class CKeyStore\n {"
      },
      {
        "sha": "d829ec228db6dda417904bc4347b725d009303f0",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "patch": "@@ -282,21 +282,21 @@ BOOST_AUTO_TEST_CASE(strprintf_numbers)\n {\n     int64_t s64t = -9223372036854775807LL; /* signed 64 bit test value */\n     uint64_t u64t = 18446744073709551615ULL; /* unsigned 64 bit test value */\n-    BOOST_CHECK(strprintf(\"%s %d %s\", B, s64t, E) == B\" -9223372036854775807 \"E);\n-    BOOST_CHECK(strprintf(\"%s %u %s\", B, u64t, E) == B\" 18446744073709551615 \"E);\n-    BOOST_CHECK(strprintf(\"%s %x %s\", B, u64t, E) == B\" ffffffffffffffff \"E);\n+    BOOST_CHECK(strprintf(\"%s %d %s\", B, s64t, E) == B\" -9223372036854775807 \" E);\n+    BOOST_CHECK(strprintf(\"%s %u %s\", B, u64t, E) == B\" 18446744073709551615 \" E);\n+    BOOST_CHECK(strprintf(\"%s %x %s\", B, u64t, E) == B\" ffffffffffffffff \" E);\n \n     size_t st = 12345678; /* unsigned size_t test value */\n     ssize_t sst = -12345678; /* signed size_t test value */\n-    BOOST_CHECK(strprintf(\"%s %d %s\", B, sst, E) == B\" -12345678 \"E);\n-    BOOST_CHECK(strprintf(\"%s %u %s\", B, st, E) == B\" 12345678 \"E);\n-    BOOST_CHECK(strprintf(\"%s %x %s\", B, st, E) == B\" bc614e \"E);\n+    BOOST_CHECK(strprintf(\"%s %d %s\", B, sst, E) == B\" -12345678 \" E);\n+    BOOST_CHECK(strprintf(\"%s %u %s\", B, st, E) == B\" 12345678 \" E);\n+    BOOST_CHECK(strprintf(\"%s %x %s\", B, st, E) == B\" bc614e \" E);\n \n     ptrdiff_t pt = 87654321; /* positive ptrdiff_t test value */\n     ptrdiff_t spt = -87654321; /* negative ptrdiff_t test value */\n-    BOOST_CHECK(strprintf(\"%s %d %s\", B, spt, E) == B\" -87654321 \"E);\n-    BOOST_CHECK(strprintf(\"%s %u %s\", B, pt, E) == B\" 87654321 \"E);\n-    BOOST_CHECK(strprintf(\"%s %x %s\", B, pt, E) == B\" 5397fb1 \"E);\n+    BOOST_CHECK(strprintf(\"%s %d %s\", B, spt, E) == B\" -87654321 \" E);\n+    BOOST_CHECK(strprintf(\"%s %u %s\", B, pt, E) == B\" 87654321 \" E);\n+    BOOST_CHECK(strprintf(\"%s %x %s\", B, pt, E) == B\" 5397fb1 \" E);\n }\n #undef B\n #undef E"
      },
      {
        "sha": "b51c4d4b14aaf9f3025f2440eda2530b9f817073",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 187,
        "deletions": 0,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "patch": "@@ -1015,6 +1015,193 @@ set<uint256> CWalletTx::GetConflicts() const\n     return result;\n }\n \n+CAmount CWalletTx::GetDebit(const isminefilter& filter) const\n+{\n+    if (vin.empty())\n+        return 0;\n+\n+    CAmount debit = 0;\n+    if(filter & ISMINE_SPENDABLE)\n+    {\n+        if (fDebitCached)\n+            debit += nDebitCached;\n+        else\n+        {\n+            nDebitCached = pwallet->GetDebit(*this, ISMINE_SPENDABLE);\n+            fDebitCached = true;\n+            debit += nDebitCached;\n+        }\n+    }\n+    if(filter & ISMINE_WATCH_ONLY)\n+    {\n+        if(fWatchDebitCached)\n+            debit += nWatchDebitCached;\n+        else\n+        {\n+            nWatchDebitCached = pwallet->GetDebit(*this, ISMINE_WATCH_ONLY);\n+            fWatchDebitCached = true;\n+            debit += nWatchDebitCached;\n+        }\n+    }\n+    return debit;\n+}\n+\n+CAmount CWalletTx::GetCredit(const isminefilter& filter) const\n+{\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+        return 0;\n+\n+    int64_t credit = 0;\n+    if (filter & ISMINE_SPENDABLE)\n+    {\n+        // GetBalance can assume transactions in mapWallet won't change\n+        if (fCreditCached)\n+            credit += nCreditCached;\n+        else\n+        {\n+            nCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n+            fCreditCached = true;\n+            credit += nCreditCached;\n+        }\n+    }\n+    if (filter & ISMINE_WATCH_ONLY)\n+    {\n+        if (fWatchCreditCached)\n+            credit += nWatchCreditCached;\n+        else\n+        {\n+            nWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n+            fWatchCreditCached = true;\n+            credit += nWatchCreditCached;\n+        }\n+    }\n+    return credit;\n+}\n+\n+CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n+{\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n+    {\n+        if (fUseCache && fImmatureCreditCached)\n+            return nImmatureCreditCached;\n+        nImmatureCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n+        fImmatureCreditCached = true;\n+        return nImmatureCreditCached;\n+    }\n+\n+    return 0;\n+}\n+\n+CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n+{\n+    if (pwallet == 0)\n+        return 0;\n+\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+        return 0;\n+\n+    if (fUseCache && fAvailableCreditCached)\n+        return nAvailableCreditCached;\n+\n+    CAmount nCredit = 0;\n+    uint256 hashTx = GetHash();\n+    for (unsigned int i = 0; i < vout.size(); i++)\n+    {\n+        if (!pwallet->IsSpent(hashTx, i))\n+        {\n+            const CTxOut &txout = vout[i];\n+            nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n+            if (!MoneyRange(nCredit))\n+                throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+        }\n+    }\n+\n+    nAvailableCreditCached = nCredit;\n+    fAvailableCreditCached = true;\n+    return nCredit;\n+}\n+\n+CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n+{\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n+    {\n+        if (fUseCache && fImmatureWatchCreditCached)\n+            return nImmatureWatchCreditCached;\n+        nImmatureWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n+        fImmatureWatchCreditCached = true;\n+        return nImmatureWatchCreditCached;\n+    }\n+\n+    return 0;\n+}\n+\n+CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n+{\n+    if (pwallet == 0)\n+        return 0;\n+\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+        return 0;\n+\n+    if (fUseCache && fAvailableWatchCreditCached)\n+        return nAvailableWatchCreditCached;\n+\n+    CAmount nCredit = 0;\n+    for (unsigned int i = 0; i < vout.size(); i++)\n+    {\n+        if (!pwallet->IsSpent(GetHash(), i))\n+        {\n+            const CTxOut &txout = vout[i];\n+            nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n+            if (!MoneyRange(nCredit))\n+                throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+        }\n+    }\n+\n+    nAvailableWatchCreditCached = nCredit;\n+    fAvailableWatchCreditCached = true;\n+    return nCredit;\n+}\n+\n+CAmount CWalletTx::GetChange() const\n+{\n+    if (fChangeCached)\n+        return nChangeCached;\n+    nChangeCached = pwallet->GetChange(*this);\n+    fChangeCached = true;\n+    return nChangeCached;\n+}\n+\n+bool CWalletTx::IsTrusted() const\n+{\n+    // Quick answer in most cases\n+    if (!IsFinalTx(*this))\n+        return false;\n+    int nDepth = GetDepthInMainChain();\n+    if (nDepth >= 1)\n+        return true;\n+    if (nDepth < 0)\n+        return false;\n+    if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n+        return false;\n+\n+    // Trusted if all inputs are from us and are in the mempool:\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        // Transactions not sent by us: not trusted\n+        const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n+        if (parent == NULL)\n+            return false;\n+        const CTxOut& parentOut = parent->vout[txin.prevout.n];\n+        if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n+            return false;\n+    }\n+    return true;\n+}\n+\n void CWallet::ResendWalletTransactions()\n {\n     // Do this infrequently and randomly to avoid giving away"
      },
      {
        "sha": "6ed87d1e687d5f3833fd9050ee456601241bc503",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 516,
        "deletions": 695,
        "changes": 1211,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31dedb463b0ce77364e516239bf1b9c7eed5b3b0/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "patch": "@@ -103,114 +103,437 @@ class CAddressBookData\n     StringMap destdata;\n };\n \n-/** \n- * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n- * and provides the ability to create new transactions.\n- */\n-class CWallet : public CCryptoKeyStore, public CValidationInterface\n+\n+typedef std::map<std::string, std::string> mapValue_t;\n+\n+\n+static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n+{\n+    if (!mapValue.count(\"n\"))\n+    {\n+        nOrderPos = -1; // TODO: calculate elsewhere\n+        return;\n+    }\n+    nOrderPos = atoi64(mapValue[\"n\"].c_str());\n+}\n+\n+\n+static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n+{\n+    if (nOrderPos == -1)\n+        return;\n+    mapValue[\"n\"] = i64tostr(nOrderPos);\n+}\n+\n+struct COutputEntry\n+{\n+    CTxDestination destination;\n+    CAmount amount;\n+    int vout;\n+};\n+\n+/** A transaction with a merkle branch linking it to the block chain. */\n+class CMerkleTx : public CTransaction\n {\n private:\n-    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n+    int GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const;\n \n-    CWalletDB *pwalletdbEncryption;\n+public:\n+    uint256 hashBlock;\n+    std::vector<uint256> vMerkleBranch;\n+    int nIndex;\n \n-    //! the current wallet version: clients below this version are not able to load the wallet\n-    int nWalletVersion;\n+    // memory only\n+    mutable bool fMerkleVerified;\n \n-    //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n-    int nWalletMaxVersion;\n \n-    int64_t nNextResend;\n-    int64_t nLastResend;\n+    CMerkleTx()\n+    {\n+        Init();\n+    }\n \n-    /**\n-     * Used to keep track of spent outpoints, and\n-     * detect and report conflicts (double-spends or\n-     * mutated transactions where the mutant gets mined).\n-     */\n-    typedef std::multimap<COutPoint, uint256> TxSpends;\n-    TxSpends mapTxSpends;\n-    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n-    void AddToSpends(const uint256& wtxid);\n+    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)\n+    {\n+        Init();\n+    }\n \n-    void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n+    void Init()\n+    {\n+        hashBlock = uint256();\n+        nIndex = -1;\n+        fMerkleVerified = false;\n+    }\n \n-public:\n-    /*\n-     * Main wallet lock.\n-     * This lock protects all the fields added by CWallet\n-     *   except for:\n-     *      fFileBacked (immutable after instantiation)\n-     *      strWalletFile (immutable after instantiation)\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(*(CTransaction*)this);\n+        nVersion = this->nVersion;\n+        READWRITE(hashBlock);\n+        READWRITE(vMerkleBranch);\n+        READWRITE(nIndex);\n+    }\n+\n+    int SetMerkleBranch(const CBlock& block);\n+\n+\n+    /**\n+     * Return depth of transaction in blockchain:\n+     * -1  : not in blockchain, and not in memory pool (conflicted transaction)\n+     *  0  : in memory pool, waiting to be included in a block\n+     * >=1 : this many blocks deep in the main chain\n      */\n-    mutable CCriticalSection cs_wallet;\n+    int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n+    int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n+    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n+    int GetBlocksToMaturity() const;\n+    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n+};\n \n-    bool fFileBacked;\n-    std::string strWalletFile;\n+/** \n+ * A transaction with a bunch of additional info that only the owner cares about.\n+ * It includes any unrecorded transactions needed to link it back to the block chain.\n+ */\n+class CWalletTx : public CMerkleTx\n+{\n+private:\n+    const CWallet* pwallet;\n \n-    std::set<int64_t> setKeyPool;\n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+public:\n+    mapValue_t mapValue;\n+    std::vector<std::pair<std::string, std::string> > vOrderForm;\n+    unsigned int fTimeReceivedIsTxTime;\n+    unsigned int nTimeReceived; //! time received by this node\n+    unsigned int nTimeSmart;\n+    char fFromMe;\n+    std::string strFromAccount;\n+    int64_t nOrderPos; //! position in ordered transaction list\n \n-    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n-    MasterKeyMap mapMasterKeys;\n-    unsigned int nMasterKeyMaxID;\n+    // memory only\n+    mutable bool fDebitCached;\n+    mutable bool fCreditCached;\n+    mutable bool fImmatureCreditCached;\n+    mutable bool fAvailableCreditCached;\n+    mutable bool fWatchDebitCached;\n+    mutable bool fWatchCreditCached;\n+    mutable bool fImmatureWatchCreditCached;\n+    mutable bool fAvailableWatchCreditCached;\n+    mutable bool fChangeCached;\n+    mutable CAmount nDebitCached;\n+    mutable CAmount nCreditCached;\n+    mutable CAmount nImmatureCreditCached;\n+    mutable CAmount nAvailableCreditCached;\n+    mutable CAmount nWatchDebitCached;\n+    mutable CAmount nWatchCreditCached;\n+    mutable CAmount nImmatureWatchCreditCached;\n+    mutable CAmount nAvailableWatchCreditCached;\n+    mutable CAmount nChangeCached;\n \n-    CWallet()\n+    CWalletTx()\n     {\n-        SetNull();\n+        Init(NULL);\n     }\n \n-    CWallet(std::string strWalletFileIn)\n+    CWalletTx(const CWallet* pwalletIn)\n     {\n-        SetNull();\n+        Init(pwalletIn);\n+    }\n \n-        strWalletFile = strWalletFileIn;\n-        fFileBacked = true;\n+    CWalletTx(const CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)\n+    {\n+        Init(pwalletIn);\n     }\n \n-    ~CWallet()\n+    CWalletTx(const CWallet* pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)\n     {\n-        delete pwalletdbEncryption;\n-        pwalletdbEncryption = NULL;\n+        Init(pwalletIn);\n     }\n \n-    void SetNull()\n+    void Init(const CWallet* pwalletIn)\n     {\n-        nWalletVersion = FEATURE_BASE;\n-        nWalletMaxVersion = FEATURE_BASE;\n-        fFileBacked = false;\n-        nMasterKeyMaxID = 0;\n-        pwalletdbEncryption = NULL;\n-        nOrderPosNext = 0;\n-        nNextResend = 0;\n-        nLastResend = 0;\n-        nTimeFirstKey = 0;\n+        pwallet = pwalletIn;\n+        mapValue.clear();\n+        vOrderForm.clear();\n+        fTimeReceivedIsTxTime = false;\n+        nTimeReceived = 0;\n+        nTimeSmart = 0;\n+        fFromMe = false;\n+        strFromAccount.clear();\n+        fDebitCached = false;\n+        fCreditCached = false;\n+        fImmatureCreditCached = false;\n+        fAvailableCreditCached = false;\n+        fWatchDebitCached = false;\n+        fWatchCreditCached = false;\n+        fImmatureWatchCreditCached = false;\n+        fAvailableWatchCreditCached = false;\n+        fChangeCached = false;\n+        nDebitCached = 0;\n+        nCreditCached = 0;\n+        nImmatureCreditCached = 0;\n+        nAvailableCreditCached = 0;\n+        nWatchDebitCached = 0;\n+        nWatchCreditCached = 0;\n+        nAvailableWatchCreditCached = 0;\n+        nImmatureWatchCreditCached = 0;\n+        nChangeCached = 0;\n+        nOrderPos = -1;\n     }\n \n-    std::map<uint256, CWalletTx> mapWallet;\n+    ADD_SERIALIZE_METHODS;\n \n-    int64_t nOrderPosNext;\n-    std::map<uint256, int> mapRequestCount;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        if (ser_action.ForRead())\n+            Init(NULL);\n+        char fSpent = false;\n \n-    std::map<CTxDestination, CAddressBookData> mapAddressBook;\n+        if (!ser_action.ForRead())\n+        {\n+            mapValue[\"fromaccount\"] = strFromAccount;\n \n-    CPubKey vchDefaultKey;\n+            WriteOrderPos(nOrderPos, mapValue);\n \n-    std::set<COutPoint> setLockedCoins;\n+            if (nTimeSmart)\n+                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+        }\n \n-    int64_t nTimeFirstKey;\n+        READWRITE(*(CMerkleTx*)this);\n+        std::vector<CMerkleTx> vUnused; //! Used to be vtxPrev\n+        READWRITE(vUnused);\n+        READWRITE(mapValue);\n+        READWRITE(vOrderForm);\n+        READWRITE(fTimeReceivedIsTxTime);\n+        READWRITE(nTimeReceived);\n+        READWRITE(fFromMe);\n+        READWRITE(fSpent);\n \n-    const CWalletTx* GetWalletTx(const uint256& hash) const;\n+        if (ser_action.ForRead())\n+        {\n+            strFromAccount = mapValue[\"fromaccount\"];\n \n-    //! check whether we are allowed to upgrade (or already support) to the named feature\n-    bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n+            ReadOrderPos(nOrderPos, mapValue);\n \n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n+            nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n+        }\n \n-    bool IsSpent(const uint256& hash, unsigned int n) const;\n+        mapValue.erase(\"fromaccount\");\n+        mapValue.erase(\"version\");\n+        mapValue.erase(\"spent\");\n+        mapValue.erase(\"n\");\n+        mapValue.erase(\"timesmart\");\n+    }\n \n-    bool IsLockedCoin(uint256 hash, unsigned int n) const;\n+    //! make sure balances are recalculated\n+    void MarkDirty()\n+    {\n+        fCreditCached = false;\n+        fAvailableCreditCached = false;\n+        fWatchDebitCached = false;\n+        fWatchCreditCached = false;\n+        fAvailableWatchCreditCached = false;\n+        fImmatureWatchCreditCached = false;\n+        fDebitCached = false;\n+        fChangeCached = false;\n+    }\n+\n+    void BindWallet(CWallet *pwalletIn)\n+    {\n+        pwallet = pwalletIn;\n+        MarkDirty();\n+    }\n+\n+    //! filter decides which addresses will count towards the debit\n+    CAmount GetDebit(const isminefilter& filter) const;\n+    CAmount GetCredit(const isminefilter& filter) const;\n+    CAmount GetImmatureCredit(bool fUseCache=true) const;\n+    CAmount GetAvailableCredit(bool fUseCache=true) const;\n+    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetChange() const;\n+\n+    void GetAmounts(std::list<COutputEntry>& listReceived,\n+                    std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n+\n+    void GetAccountAmounts(const std::string& strAccount, CAmount& nReceived,\n+                           CAmount& nSent, CAmount& nFee, const isminefilter& filter) const;\n+\n+    bool IsFromMe(const isminefilter& filter) const\n+    {\n+        return (GetDebit(filter) > 0);\n+    }\n+\n+    bool IsTrusted() const;\n+\n+    bool WriteToDisk(CWalletDB *pwalletdb);\n+\n+    int64_t GetTxTime() const;\n+    int GetRequestCount() const;\n+\n+    void RelayWalletTransaction();\n+\n+    std::set<uint256> GetConflicts() const;\n+};\n+\n+\n+\n+\n+class COutput\n+{\n+public:\n+    const CWalletTx *tx;\n+    int i;\n+    int nDepth;\n+    bool fSpendable;\n+\n+    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn)\n+    {\n+        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn;\n+    }\n+\n+    std::string ToString() const;\n+};\n+\n+\n+\n+\n+/** Private key that includes an expiration date in case it never gets used. */\n+class CWalletKey\n+{\n+public:\n+    CPrivKey vchPrivKey;\n+    int64_t nTimeCreated;\n+    int64_t nTimeExpires;\n+    std::string strComment;\n+    //! todo: add something to note what created it (user, getnewaddress, change)\n+    //!   maybe should have a map<string, string> property map\n+\n+    CWalletKey(int64_t nExpires=0);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        if (!(nType & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(vchPrivKey);\n+        READWRITE(nTimeCreated);\n+        READWRITE(nTimeExpires);\n+        READWRITE(LIMITED_STRING(strComment, 65536));\n+    }\n+};\n+\n+\n+\n+/** \n+ * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n+ * and provides the ability to create new transactions.\n+ */\n+class CWallet : public CCryptoKeyStore, public CValidationInterface\n+{\n+private:\n+    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n+\n+    CWalletDB *pwalletdbEncryption;\n+\n+    //! the current wallet version: clients below this version are not able to load the wallet\n+    int nWalletVersion;\n+\n+    //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n+    int nWalletMaxVersion;\n+\n+    int64_t nNextResend;\n+    int64_t nLastResend;\n+\n+    /**\n+     * Used to keep track of spent outpoints, and\n+     * detect and report conflicts (double-spends or\n+     * mutated transactions where the mutant gets mined).\n+     */\n+    typedef std::multimap<COutPoint, uint256> TxSpends;\n+    TxSpends mapTxSpends;\n+    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n+    void AddToSpends(const uint256& wtxid);\n+\n+    void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n+\n+public:\n+    /*\n+     * Main wallet lock.\n+     * This lock protects all the fields added by CWallet\n+     *   except for:\n+     *      fFileBacked (immutable after instantiation)\n+     *      strWalletFile (immutable after instantiation)\n+     */\n+    mutable CCriticalSection cs_wallet;\n+\n+    bool fFileBacked;\n+    std::string strWalletFile;\n+\n+    std::set<int64_t> setKeyPool;\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+\n+    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n+    MasterKeyMap mapMasterKeys;\n+    unsigned int nMasterKeyMaxID;\n+\n+    CWallet()\n+    {\n+        SetNull();\n+    }\n+\n+    CWallet(std::string strWalletFileIn)\n+    {\n+        SetNull();\n+\n+        strWalletFile = strWalletFileIn;\n+        fFileBacked = true;\n+    }\n+\n+    ~CWallet()\n+    {\n+        delete pwalletdbEncryption;\n+        pwalletdbEncryption = NULL;\n+    }\n+\n+    void SetNull()\n+    {\n+        nWalletVersion = FEATURE_BASE;\n+        nWalletMaxVersion = FEATURE_BASE;\n+        fFileBacked = false;\n+        nMasterKeyMaxID = 0;\n+        pwalletdbEncryption = NULL;\n+        nOrderPosNext = 0;\n+        nNextResend = 0;\n+        nLastResend = 0;\n+        nTimeFirstKey = 0;\n+    }\n+\n+    std::map<uint256, CWalletTx> mapWallet;\n+\n+    int64_t nOrderPosNext;\n+    std::map<uint256, int> mapRequestCount;\n+\n+    std::map<CTxDestination, CAddressBookData> mapAddressBook;\n+\n+    CPubKey vchDefaultKey;\n+\n+    std::set<COutPoint> setLockedCoins;\n+\n+    int64_t nTimeFirstKey;\n+\n+    const CWalletTx* GetWalletTx(const uint256& hash) const;\n+\n+    //! check whether we are allowed to upgrade (or already support) to the named feature\n+    bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n+\n+    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n+\n+    bool IsSpent(const uint256& hash, unsigned int n) const;\n+\n+    bool IsLockedCoin(uint256 hash, unsigned int n) const;\n     void LockCoin(COutPoint& output);\n     void UnlockCoin(COutPoint& output);\n     void UnlockAllCoins();\n@@ -285,685 +608,183 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetBalance() const;\n     CAmount GetUnconfirmedBalance() const;\n     CAmount GetImmatureBalance() const;\n-    CAmount GetWatchOnlyBalance() const;\n-    CAmount GetUnconfirmedWatchOnlyBalance() const;\n-    CAmount GetImmatureWatchOnlyBalance() const;\n-    bool CreateTransaction(const std::vector<std::pair<CScript, CAmount> >& vecSend,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n-    bool CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n-    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n-\n-    static CFeeRate minTxFee;\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n-\n-    bool NewKeyPool();\n-    bool TopUpKeyPool(unsigned int kpSize = 0);\n-    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool);\n-    void KeepKey(int64_t nIndex);\n-    void ReturnKey(int64_t nIndex);\n-    bool GetKeyFromPool(CPubKey &key);\n-    int64_t GetOldestKeyPoolTime();\n-    void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n-\n-    std::set< std::set<CTxDestination> > GetAddressGroupings();\n-    std::map<CTxDestination, CAmount> GetAddressBalances();\n-\n-    std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n-\n-    isminetype IsMine(const CTxIn& txin) const;\n-    CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n-    isminetype IsMine(const CTxOut& txout) const\n-    {\n-        return ::IsMine(*this, txout.scriptPubKey);\n-    }\n-    CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const\n-    {\n-        if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n-        return ((IsMine(txout) & filter) ? txout.nValue : 0);\n-    }\n-    bool IsChange(const CTxOut& txout) const;\n-    CAmount GetChange(const CTxOut& txout) const\n-    {\n-        if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n-        return (IsChange(txout) ? txout.nValue : 0);\n-    }\n-    bool IsMine(const CTransaction& tx) const\n-    {\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-            if (IsMine(txout))\n-                return true;\n-        return false;\n-    }\n-    /** should probably be renamed to IsRelevantToMe */\n-    bool IsFromMe(const CTransaction& tx) const\n-    {\n-        return (GetDebit(tx, ISMINE_ALL) > 0);\n-    }\n-    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const\n-    {\n-        CAmount nDebit = 0;\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        {\n-            nDebit += GetDebit(txin, filter);\n-            if (!MoneyRange(nDebit))\n-                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n-        }\n-        return nDebit;\n-    }\n-    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const\n-    {\n-        CAmount nCredit = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-        {\n-            nCredit += GetCredit(txout, filter);\n-            if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n-        }\n-        return nCredit;\n-    }\n-    CAmount GetChange(const CTransaction& tx) const\n-    {\n-        CAmount nChange = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-        {\n-            nChange += GetChange(txout);\n-            if (!MoneyRange(nChange))\n-                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n-        }\n-        return nChange;\n-    }\n-    void SetBestChain(const CBlockLocator& loc);\n-\n-    DBErrors LoadWallet(bool& fFirstRunRet);\n-    DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n-\n-    bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n-\n-    bool DelAddressBook(const CTxDestination& address);\n-\n-    void UpdatedTransaction(const uint256 &hashTx);\n-\n-    void Inventory(const uint256 &hash)\n-    {\n-        {\n-            LOCK(cs_wallet);\n-            std::map<uint256, int>::iterator mi = mapRequestCount.find(hash);\n-            if (mi != mapRequestCount.end())\n-                (*mi).second++;\n-        }\n-    }\n-\n-    unsigned int GetKeyPoolSize()\n-    {\n-        AssertLockHeld(cs_wallet); // setKeyPool\n-        return setKeyPool.size();\n-    }\n-\n-    bool SetDefaultKey(const CPubKey &vchPubKey);\n-\n-    //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n-    bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n-\n-    //! change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n-    bool SetMaxVersion(int nVersion);\n-\n-    //! get the current wallet format (the oldest client version guaranteed to understand this wallet)\n-    int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n-\n-    //! Get wallet transactions that conflict with given transaction (spend same outputs)\n-    std::set<uint256> GetConflicts(const uint256& txid) const;\n-\n-    /** \n-     * Address book entry changed.\n-     * @note called with lock cs_wallet held.\n-     */\n-    boost::signals2::signal<void (CWallet *wallet, const CTxDestination\n-            &address, const std::string &label, bool isMine,\n-            const std::string &purpose,\n-            ChangeType status)> NotifyAddressBookChanged;\n-\n-    /** \n-     * Wallet transaction added, removed or updated.\n-     * @note called with lock cs_wallet held.\n-     */\n-    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx,\n-            ChangeType status)> NotifyTransactionChanged;\n-\n-    /** Show progress e.g. for rescan */\n-    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n-\n-    /** Watch-only address added */\n-    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n-};\n-\n-/** A key allocated from the key pool. */\n-class CReserveKey\n-{\n-protected:\n-    CWallet* pwallet;\n-    int64_t nIndex;\n-    CPubKey vchPubKey;\n-public:\n-    CReserveKey(CWallet* pwalletIn)\n-    {\n-        nIndex = -1;\n-        pwallet = pwalletIn;\n-    }\n-\n-    ~CReserveKey()\n-    {\n-        ReturnKey();\n-    }\n-\n-    void ReturnKey();\n-    bool GetReservedKey(CPubKey &pubkey);\n-    void KeepKey();\n-};\n-\n-\n-typedef std::map<std::string, std::string> mapValue_t;\n-\n-\n-static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n-{\n-    if (!mapValue.count(\"n\"))\n-    {\n-        nOrderPos = -1; // TODO: calculate elsewhere\n-        return;\n-    }\n-    nOrderPos = atoi64(mapValue[\"n\"].c_str());\n-}\n-\n-\n-static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n-{\n-    if (nOrderPos == -1)\n-        return;\n-    mapValue[\"n\"] = i64tostr(nOrderPos);\n-}\n-\n-struct COutputEntry\n-{\n-    CTxDestination destination;\n-    CAmount amount;\n-    int vout;\n-};\n-\n-/** A transaction with a merkle branch linking it to the block chain. */\n-class CMerkleTx : public CTransaction\n-{\n-private:\n-    int GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const;\n-\n-public:\n-    uint256 hashBlock;\n-    std::vector<uint256> vMerkleBranch;\n-    int nIndex;\n-\n-    // memory only\n-    mutable bool fMerkleVerified;\n-\n-\n-    CMerkleTx()\n-    {\n-        Init();\n-    }\n-\n-    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)\n-    {\n-        Init();\n-    }\n-\n-    void Init()\n-    {\n-        hashBlock = uint256();\n-        nIndex = -1;\n-        fMerkleVerified = false;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(*(CTransaction*)this);\n-        nVersion = this->nVersion;\n-        READWRITE(hashBlock);\n-        READWRITE(vMerkleBranch);\n-        READWRITE(nIndex);\n-    }\n-\n-    int SetMerkleBranch(const CBlock& block);\n-\n-\n-    /**\n-     * Return depth of transaction in blockchain:\n-     * -1  : not in blockchain, and not in memory pool (conflicted transaction)\n-     *  0  : in memory pool, waiting to be included in a block\n-     * >=1 : this many blocks deep in the main chain\n-     */\n-    int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n-    int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n-    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n-    int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n-};\n-\n-/** \n- * A transaction with a bunch of additional info that only the owner cares about.\n- * It includes any unrecorded transactions needed to link it back to the block chain.\n- */\n-class CWalletTx : public CMerkleTx\n-{\n-private:\n-    const CWallet* pwallet;\n-\n-public:\n-    mapValue_t mapValue;\n-    std::vector<std::pair<std::string, std::string> > vOrderForm;\n-    unsigned int fTimeReceivedIsTxTime;\n-    unsigned int nTimeReceived; //! time received by this node\n-    unsigned int nTimeSmart;\n-    char fFromMe;\n-    std::string strFromAccount;\n-    int64_t nOrderPos; //! position in ordered transaction list\n-\n-    // memory only\n-    mutable bool fDebitCached;\n-    mutable bool fCreditCached;\n-    mutable bool fImmatureCreditCached;\n-    mutable bool fAvailableCreditCached;\n-    mutable bool fWatchDebitCached;\n-    mutable bool fWatchCreditCached;\n-    mutable bool fImmatureWatchCreditCached;\n-    mutable bool fAvailableWatchCreditCached;\n-    mutable bool fChangeCached;\n-    mutable CAmount nDebitCached;\n-    mutable CAmount nCreditCached;\n-    mutable CAmount nImmatureCreditCached;\n-    mutable CAmount nAvailableCreditCached;\n-    mutable CAmount nWatchDebitCached;\n-    mutable CAmount nWatchCreditCached;\n-    mutable CAmount nImmatureWatchCreditCached;\n-    mutable CAmount nAvailableWatchCreditCached;\n-    mutable CAmount nChangeCached;\n-\n-    CWalletTx()\n-    {\n-        Init(NULL);\n-    }\n-\n-    CWalletTx(const CWallet* pwalletIn)\n-    {\n-        Init(pwalletIn);\n-    }\n-\n-    CWalletTx(const CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)\n-    {\n-        Init(pwalletIn);\n-    }\n-\n-    CWalletTx(const CWallet* pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)\n-    {\n-        Init(pwalletIn);\n-    }\n-\n-    void Init(const CWallet* pwalletIn)\n-    {\n-        pwallet = pwalletIn;\n-        mapValue.clear();\n-        vOrderForm.clear();\n-        fTimeReceivedIsTxTime = false;\n-        nTimeReceived = 0;\n-        nTimeSmart = 0;\n-        fFromMe = false;\n-        strFromAccount.clear();\n-        fDebitCached = false;\n-        fCreditCached = false;\n-        fImmatureCreditCached = false;\n-        fAvailableCreditCached = false;\n-        fWatchDebitCached = false;\n-        fWatchCreditCached = false;\n-        fImmatureWatchCreditCached = false;\n-        fAvailableWatchCreditCached = false;\n-        fChangeCached = false;\n-        nDebitCached = 0;\n-        nCreditCached = 0;\n-        nImmatureCreditCached = 0;\n-        nAvailableCreditCached = 0;\n-        nWatchDebitCached = 0;\n-        nWatchCreditCached = 0;\n-        nAvailableWatchCreditCached = 0;\n-        nImmatureWatchCreditCached = 0;\n-        nChangeCached = 0;\n-        nOrderPos = -1;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (ser_action.ForRead())\n-            Init(NULL);\n-        char fSpent = false;\n-\n-        if (!ser_action.ForRead())\n-        {\n-            mapValue[\"fromaccount\"] = strFromAccount;\n-\n-            WriteOrderPos(nOrderPos, mapValue);\n-\n-            if (nTimeSmart)\n-                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n-        }\n+    CAmount GetWatchOnlyBalance() const;\n+    CAmount GetUnconfirmedWatchOnlyBalance() const;\n+    CAmount GetImmatureWatchOnlyBalance() const;\n+    bool CreateTransaction(const std::vector<std::pair<CScript, CAmount> >& vecSend,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    bool CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n-        READWRITE(*(CMerkleTx*)this);\n-        std::vector<CMerkleTx> vUnused; //! Used to be vtxPrev\n-        READWRITE(vUnused);\n-        READWRITE(mapValue);\n-        READWRITE(vOrderForm);\n-        READWRITE(fTimeReceivedIsTxTime);\n-        READWRITE(nTimeReceived);\n-        READWRITE(fFromMe);\n-        READWRITE(fSpent);\n+    static CFeeRate minTxFee;\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n \n-        if (ser_action.ForRead())\n-        {\n-            strFromAccount = mapValue[\"fromaccount\"];\n+    bool NewKeyPool();\n+    bool TopUpKeyPool(unsigned int kpSize = 0);\n+    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool);\n+    void KeepKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex);\n+    bool GetKeyFromPool(CPubKey &key);\n+    int64_t GetOldestKeyPoolTime();\n+    void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n \n-            ReadOrderPos(nOrderPos, mapValue);\n+    std::set< std::set<CTxDestination> > GetAddressGroupings();\n+    std::map<CTxDestination, CAmount> GetAddressBalances();\n \n-            nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n-        }\n+    std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n \n-        mapValue.erase(\"fromaccount\");\n-        mapValue.erase(\"version\");\n-        mapValue.erase(\"spent\");\n-        mapValue.erase(\"n\");\n-        mapValue.erase(\"timesmart\");\n+    isminetype IsMine(const CTxIn& txin) const;\n+    CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n+    isminetype IsMine(const CTxOut& txout) const\n+    {\n+        return ::IsMine(*this, txout.scriptPubKey);\n     }\n-\n-    //! make sure balances are recalculated\n-    void MarkDirty()\n+    CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const\n     {\n-        fCreditCached = false;\n-        fAvailableCreditCached = false;\n-        fWatchDebitCached = false;\n-        fWatchCreditCached = false;\n-        fAvailableWatchCreditCached = false;\n-        fImmatureWatchCreditCached = false;\n-        fDebitCached = false;\n-        fChangeCached = false;\n+        if (!MoneyRange(txout.nValue))\n+            throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n+        return ((IsMine(txout) & filter) ? txout.nValue : 0);\n     }\n-\n-    void BindWallet(CWallet *pwalletIn)\n+    bool IsChange(const CTxOut& txout) const;\n+    CAmount GetChange(const CTxOut& txout) const\n     {\n-        pwallet = pwalletIn;\n-        MarkDirty();\n+        if (!MoneyRange(txout.nValue))\n+            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n+        return (IsChange(txout) ? txout.nValue : 0);\n     }\n-\n-    //! filter decides which addresses will count towards the debit\n-    CAmount GetDebit(const isminefilter& filter) const\n+    bool IsMine(const CTransaction& tx) const\n     {\n-        if (vin.empty())\n-            return 0;\n-\n-        CAmount debit = 0;\n-        if(filter & ISMINE_SPENDABLE)\n-        {\n-            if (fDebitCached)\n-                debit += nDebitCached;\n-            else\n-            {\n-                nDebitCached = pwallet->GetDebit(*this, ISMINE_SPENDABLE);\n-                fDebitCached = true;\n-                debit += nDebitCached;\n-            }\n-        }\n-        if(filter & ISMINE_WATCH_ONLY)\n-        {\n-            if(fWatchDebitCached)\n-                debit += nWatchDebitCached;\n-            else\n-            {\n-                nWatchDebitCached = pwallet->GetDebit(*this, ISMINE_WATCH_ONLY);\n-                fWatchDebitCached = true;\n-                debit += nWatchDebitCached;\n-            }\n-        }\n-        return debit;\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+            if (IsMine(txout))\n+                return true;\n+        return false;\n     }\n-\n-    CAmount GetCredit(const isminefilter& filter) const\n+    /** should probably be renamed to IsRelevantToMe */\n+    bool IsFromMe(const CTransaction& tx) const\n     {\n-        // Must wait until coinbase is safely deep enough in the chain before valuing it\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-            return 0;\n-\n-        int64_t credit = 0;\n-        if (filter & ISMINE_SPENDABLE)\n-        {\n-            // GetBalance can assume transactions in mapWallet won't change\n-            if (fCreditCached)\n-                credit += nCreditCached;\n-            else\n-            {\n-                nCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n-                fCreditCached = true;\n-                credit += nCreditCached;\n-            }\n-        }\n-        if (filter & ISMINE_WATCH_ONLY)\n-        {\n-            if (fWatchCreditCached)\n-                credit += nWatchCreditCached;\n-            else\n-            {\n-                nWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n-                fWatchCreditCached = true;\n-                credit += nWatchCreditCached;\n-            }\n-        }\n-        return credit;\n+        return (GetDebit(tx, ISMINE_ALL) > 0);\n     }\n-\n-    CAmount GetImmatureCredit(bool fUseCache=true) const\n+    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const\n     {\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n+        CAmount nDebit = 0;\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         {\n-            if (fUseCache && fImmatureCreditCached)\n-                return nImmatureCreditCached;\n-            nImmatureCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n-            fImmatureCreditCached = true;\n-            return nImmatureCreditCached;\n+            nDebit += GetDebit(txin, filter);\n+            if (!MoneyRange(nDebit))\n+                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n         }\n-\n-        return 0;\n+        return nDebit;\n     }\n-\n-    CAmount GetAvailableCredit(bool fUseCache=true) const\n+    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const\n     {\n-        if (pwallet == 0)\n-            return 0;\n-\n-        // Must wait until coinbase is safely deep enough in the chain before valuing it\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-            return 0;\n-\n-        if (fUseCache && fAvailableCreditCached)\n-            return nAvailableCreditCached;\n-\n         CAmount nCredit = 0;\n-        uint256 hashTx = GetHash();\n-        for (unsigned int i = 0; i < vout.size(); i++)\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n-            if (!pwallet->IsSpent(hashTx, i))\n-            {\n-                const CTxOut &txout = vout[i];\n-                nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n-                if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n-            }\n+            nCredit += GetCredit(txout, filter);\n+            if (!MoneyRange(nCredit))\n+                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n         }\n-\n-        nAvailableCreditCached = nCredit;\n-        fAvailableCreditCached = true;\n         return nCredit;\n     }\n-\n-    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const\n+    CAmount GetChange(const CTransaction& tx) const\n     {\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n+        CAmount nChange = 0;\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n-            if (fUseCache && fImmatureWatchCreditCached)\n-                return nImmatureWatchCreditCached;\n-            nImmatureWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n-            fImmatureWatchCreditCached = true;\n-            return nImmatureWatchCreditCached;\n+            nChange += GetChange(txout);\n+            if (!MoneyRange(nChange))\n+                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n         }\n-\n-        return 0;\n+        return nChange;\n     }\n+    void SetBestChain(const CBlockLocator& loc);\n \n-    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const\n-    {\n-        if (pwallet == 0)\n-            return 0;\n+    DBErrors LoadWallet(bool& fFirstRunRet);\n+    DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n \n-        // Must wait until coinbase is safely deep enough in the chain before valuing it\n-        if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-            return 0;\n+    bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n \n-        if (fUseCache && fAvailableWatchCreditCached)\n-            return nAvailableWatchCreditCached;\n+    bool DelAddressBook(const CTxDestination& address);\n \n-        CAmount nCredit = 0;\n-        for (unsigned int i = 0; i < vout.size(); i++)\n+    void UpdatedTransaction(const uint256 &hashTx);\n+\n+    void Inventory(const uint256 &hash)\n+    {\n         {\n-            if (!pwallet->IsSpent(GetHash(), i))\n-            {\n-                const CTxOut &txout = vout[i];\n-                nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n-                if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n-            }\n+            LOCK(cs_wallet);\n+            std::map<uint256, int>::iterator mi = mapRequestCount.find(hash);\n+            if (mi != mapRequestCount.end())\n+                (*mi).second++;\n         }\n-\n-        nAvailableWatchCreditCached = nCredit;\n-        fAvailableWatchCreditCached = true;\n-        return nCredit;\n     }\n \n-    CAmount GetChange() const\n+    unsigned int GetKeyPoolSize()\n     {\n-        if (fChangeCached)\n-            return nChangeCached;\n-        nChangeCached = pwallet->GetChange(*this);\n-        fChangeCached = true;\n-        return nChangeCached;\n+        AssertLockHeld(cs_wallet); // setKeyPool\n+        return setKeyPool.size();\n     }\n \n-    void GetAmounts(std::list<COutputEntry>& listReceived,\n-                    std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n-\n-    void GetAccountAmounts(const std::string& strAccount, CAmount& nReceived,\n-                           CAmount& nSent, CAmount& nFee, const isminefilter& filter) const;\n-\n-    bool IsFromMe(const isminefilter& filter) const\n-    {\n-        return (GetDebit(filter) > 0);\n-    }\n+    bool SetDefaultKey(const CPubKey &vchPubKey);\n \n-    bool IsTrusted() const\n-    {\n-        // Quick answer in most cases\n-        if (!IsFinalTx(*this))\n-            return false;\n-        int nDepth = GetDepthInMainChain();\n-        if (nDepth >= 1)\n-            return true;\n-        if (nDepth < 0)\n-            return false;\n-        if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n-            return false;\n-\n-        // Trusted if all inputs are from us and are in the mempool:\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-        {\n-            // Transactions not sent by us: not trusted\n-            const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n-            if (parent == NULL)\n-                return false;\n-            const CTxOut& parentOut = parent->vout[txin.prevout.n];\n-            if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n-                return false;\n-        }\n-        return true;\n-    }\n+    //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n+    bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n \n-    bool WriteToDisk(CWalletDB *pwalletdb);\n+    //! change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n+    bool SetMaxVersion(int nVersion);\n \n-    int64_t GetTxTime() const;\n-    int GetRequestCount() const;\n+    //! get the current wallet format (the oldest client version guaranteed to understand this wallet)\n+    int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n \n-    void RelayWalletTransaction();\n+    //! Get wallet transactions that conflict with given transaction (spend same outputs)\n+    std::set<uint256> GetConflicts(const uint256& txid) const;\n \n-    std::set<uint256> GetConflicts() const;\n-};\n+    /** \n+     * Address book entry changed.\n+     * @note called with lock cs_wallet held.\n+     */\n+    boost::signals2::signal<void (CWallet *wallet, const CTxDestination\n+            &address, const std::string &label, bool isMine,\n+            const std::string &purpose,\n+            ChangeType status)> NotifyAddressBookChanged;\n \n+    /** \n+     * Wallet transaction added, removed or updated.\n+     * @note called with lock cs_wallet held.\n+     */\n+    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx,\n+            ChangeType status)> NotifyTransactionChanged;\n \n+    /** Show progress e.g. for rescan */\n+    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n \n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+};\n \n-class COutput\n+/** A key allocated from the key pool. */\n+class CReserveKey\n {\n+protected:\n+    CWallet* pwallet;\n+    int64_t nIndex;\n+    CPubKey vchPubKey;\n public:\n-    const CWalletTx *tx;\n-    int i;\n-    int nDepth;\n-    bool fSpendable;\n-\n-    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn)\n+    CReserveKey(CWallet* pwalletIn)\n     {\n-        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn;\n+        nIndex = -1;\n+        pwallet = pwalletIn;\n     }\n \n-    std::string ToString() const;\n-};\n-\n-\n-\n-\n-/** Private key that includes an expiration date in case it never gets used. */\n-class CWalletKey\n-{\n-public:\n-    CPrivKey vchPrivKey;\n-    int64_t nTimeCreated;\n-    int64_t nTimeExpires;\n-    std::string strComment;\n-    //! todo: add something to note what created it (user, getnewaddress, change)\n-    //!   maybe should have a map<string, string> property map\n-\n-    CWalletKey(int64_t nExpires=0);\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(vchPrivKey);\n-        READWRITE(nTimeCreated);\n-        READWRITE(nTimeExpires);\n-        READWRITE(LIMITED_STRING(strComment, 65536));\n+    ~CReserveKey()\n+    {\n+        ReturnKey();\n     }\n-};\n-\n-\n-\n \n+    void ReturnKey();\n+    bool GetReservedKey(CPubKey &pubkey);\n+    void KeepKey();\n+};\n \n \n /** "
      }
    ]
  },
  {
    "sha": "a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjUxNjY4NmRjZjBiOTNkZDBiY2FlMzA0ZTc0ZjlhYzY5Y2IzMDVj",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-01-09T13:25:43Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-04T12:47:32Z"
      },
      "message": "[Qt] prevent amount overflow problem with payment requests\n\nBitcoin amounts are stored as uint64 in the protobuf messages (see\npaymentrequest.proto), but CAmount is defined as int64_t. Because\nof that we need to verify that single and accumulated amounts are\nin a valid range and no variable overflow has happened.\n\n- fixes #5624 (#5622)\n\nThanks @SergioDemianLerner for reporting that issue and also supplying us\nwith a possible solution.\n\n- add static verifyAmount() function to PaymentServer and move the logging\n  on error into the function\n- also add a unit test to paymentservertests.cpp",
      "tree": {
        "sha": "44d9394cf2c1ac085f2815c8b55f1539f9c2d3c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44d9394cf2c1ac085f2815c8b55f1539f9c2d3c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31dedb463b0ce77364e516239bf1b9c7eed5b3b0"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 69,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9aab944f6b5f383a82abc0d3a82b37ad1dbb138d",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
        "patch": "@@ -569,6 +569,14 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n             return false;\n         }\n \n+        // Bitcoin amounts are stored as (optional) uint64 in the protobuf messages (see paymentrequest.proto),\n+        // but CAmount is defined as int64_t. Because of that we need to verify that amounts are in a valid range\n+        // and no overflow has happened.\n+        if (!verifyAmount(sendingTo.second)) {\n+            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            return false;\n+        }\n+\n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n         if (txOut.IsDust(::minRelayTxFee)) {\n@@ -580,6 +588,11 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n         }\n \n         recipient.amount += sendingTo.second;\n+        // Also verify that the final amount is still in a valid range after adding additional amounts.\n+        if (!verifyAmount(recipient.amount)) {\n+            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            return false;\n+        }\n     }\n     // Store addresses and format them to fit nicely into the GUI\n     recipient.address = addresses.join(\"<br />\");\n@@ -768,3 +781,15 @@ bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails\n     }\n     return fVerified;\n }\n+\n+bool PaymentServer::verifyAmount(const CAmount& requestAmount)\n+{\n+    bool fVerified = MoneyRange(requestAmount);\n+    if (!fVerified) {\n+        qWarning() << QString(\"PaymentServer::%1: Payment request amount out of allowed range (%2, allowed 0 - %3).\")\n+            .arg(__func__)\n+            .arg(requestAmount)\n+            .arg(MAX_MONEY);\n+    }\n+    return fVerified;\n+}"
      },
      {
        "sha": "6bf5ac2eea291fdae1eee4b82583d99ce69dc1a3",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
        "patch": "@@ -95,6 +95,8 @@ class PaymentServer : public QObject\n     static bool verifyNetwork(const payments::PaymentDetails& requestDetails);\n     // Verify if the payment request is expired\n     static bool verifyExpired(const payments::PaymentDetails& requestDetails);\n+    // Verify the payment request amount is valid\n+    static bool verifyAmount(const CAmount& requestAmount);\n \n signals:\n     // Fired when a valid payment request is received"
      },
      {
        "sha": "c548ffe429fdacd45ab3e03aa2094895c5c9bf14",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
        "patch": "@@ -433,3 +433,28 @@ dGluZyB0ZXN0bmV0ISqAAXSQG8+GFA18VaKarlYrOz293rNMIub0swKGcQm8jAGX\\\n HSLaRgHfUDeEPr4hydy4dtfu59KNwe2xsHOHu/SpO4L8SrA4Dm9A7SlNBVWdcLbw\\\n d2hj739GDLz0b5KuJ2SG6VknMRQM976w/m2qlq0ccVGaaZ2zMIGfpzL3p6adwx/5\\\n \";\n+\n+//\n+// Payment request with amount overflow (amount is set to 21000001 BTC)\n+//\n+const char* paymentrequest5_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iTAoEdGVzdBIkCIDC9P+F\\\n+vt0DEhl2qRQErGqUUwSsaMpDvWIaGnJGNQqi8oisGLzcrKYFKhhUZXN0aW5nIGFt\\\n+b3VudCBvdmVyZmxvdyEqgAG8S7WEDUC6tCL6q2CTBjop/AitgEy31RL9IqYruytR\\\n+iEBFUrBDJZU+UEezGwr7/zoECjo5ZY3PmtZcM2sILNjyweJF6XVzGqTxUw6pN6sW\\\n+XR2T3Gy2LzRvhVA25QgGqpz0/juS2BtmNbsZPkN9gMMwKimgzc+PuCzmEKwPK9cQ\\\n+YQ==\\\n+\";"
      },
      {
        "sha": "e2ec439b2e39a1550230b4744f24a4feef8bbac6",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6516686dcf0b93dd0bcae304e74f9ac69cb305c/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
        "patch": "@@ -7,7 +7,10 @@\n #include \"optionsmodel.h\"\n #include \"paymentrequestdata.h\"\n \n+#include \"amount.h\"\n #include \"random.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -184,6 +187,20 @@ void PaymentServerTests::paymentServerTests()\n     tempFile.close();\n     QCOMPARE(PaymentServer::readPaymentRequestFromFile(tempFile.fileName(), r.paymentRequest), false);\n \n+    // Payment request with amount overflow (amount is set to 21000001 BTC):\n+    data = DecodeBase64(paymentrequest5_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    // Extract address and amount from the request\n+    QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n+    foreach (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+        CTxDestination dest;\n+        if (ExtractDestination(sendingTo.first, dest))\n+            QCOMPARE(PaymentServer::verifyAmount(sendingTo.second), false);\n+    }\n+\n     delete server;\n }\n "
      }
    ]
  },
  {
    "sha": "93b7544501d6154f1d6530b670319d72754636ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2I3NTQ0NTAxZDYxNTRmMWQ2NTMwYjY3MDMxOWQ3Mjc1NDYzNmFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T12:51:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T12:56:57Z"
      },
      "message": "Merge pull request #5319\n\n35f7227 Clean up wallet encryption code. (Daniel Kraft)",
      "tree": {
        "sha": "ee6c0993e9f36758c8f4d133c760251e8e035947",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee6c0993e9f36758c8f4d133c760251e8e035947"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93b7544501d6154f1d6530b670319d72754636ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0hcZAAoJEHSBCwEjRsmmU4sH/Akn+kKMVkReR+F5ypttrwsj\nuDzW2qLl1Uk+6hU3V80XfPV4BzchvBQc7C14cCxSFPow8yE2htXEOXWLhQvc8BCj\nYytj4rT8r8rkmY67odETJQxI/YILPWptXU6zL4PigbuD42lsRC6xqxdgLSl8/JMM\n4XQs9+m30euJkKFXoUorYFeSFUaEthen64hioqwMooWvrGWz69Cg9DiqKcecWLY3\nuPl3lS17mzl6U2bEBFzU27cFmHtY9fKXsVysLqO+p1YVTQJWpQh5Ey9p5aOJ9vcP\n1gIXHMZlwl71bs1P2gThKo2FT2Sxb8LhzIF2Wf6qvYU5luHz2kd8VkOmOJ3fA10=\n=sCuM\n-----END PGP SIGNATURE-----",
        "payload": "tree ee6c0993e9f36758c8f4d133c760251e8e035947\nparent 31dedb463b0ce77364e516239bf1b9c7eed5b3b0\nparent 35f7227a860b2b8c273e4bb299e6bd67cfef9a3f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423054300 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423054617 +0100\n\nMerge pull request #5319\n\n35f7227 Clean up wallet encryption code. (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93b7544501d6154f1d6530b670319d72754636ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93b7544501d6154f1d6530b670319d72754636ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93b7544501d6154f1d6530b670319d72754636ae/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31dedb463b0ce77364e516239bf1b9c7eed5b3b0"
      },
      {
        "sha": "35f7227a860b2b8c273e4bb299e6bd67cfef9a3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35f7227a860b2b8c273e4bb299e6bd67cfef9a3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35f7227a860b2b8c273e4bb299e6bd67cfef9a3f"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 17,
      "deletions": 25
    },
    "files": [
      {
        "sha": "75d84dbf13eaa7e4f62874c0573e9afc5d687c4f",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 22,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b7544501d6154f1d6530b670319d72754636ae/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b7544501d6154f1d6530b670319d72754636ae/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=93b7544501d6154f1d6530b670319d72754636ae",
        "patch": "@@ -102,7 +102,7 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n }\n \n \n-bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)\n+static bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_KEY_SIZE);\n@@ -112,7 +112,7 @@ bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vch\n     return cKeyCrypter.Encrypt(*((const CKeyingMaterial*)&vchPlaintext), vchCiphertext);\n }\n \n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n+static bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_KEY_SIZE);\n@@ -122,6 +122,19 @@ bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned\n     return cKeyCrypter.Decrypt(vchCiphertext, *((CKeyingMaterial*)&vchPlaintext));\n }\n \n+static bool DecryptKey(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCryptedSecret, const CPubKey& vchPubKey, CKey& key)\n+{\n+    CKeyingMaterial vchSecret;\n+    if(!DecryptSecret(vMasterKey, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n+        return false;\n+\n+    if (vchSecret.size() != 32)\n+        return false;\n+\n+    key.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n+    return key.VerifyPubKey(vchPubKey);\n+}\n+\n bool CCryptoKeyStore::SetCrypted()\n {\n     LOCK(cs_KeyStore);\n@@ -161,20 +174,8 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n         {\n             const CPubKey &vchPubKey = (*mi).second.first;\n             const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            CKeyingMaterial vchSecret;\n-            if(!DecryptSecret(vMasterKeyIn, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n-            {\n-                keyFail = true;\n-                break;\n-            }\n-            if (vchSecret.size() != 32)\n-            {\n-                keyFail = true;\n-                break;\n-            }\n             CKey key;\n-            key.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n-            if (key.GetPubKey() != vchPubKey)\n+            if (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n             {\n                 keyFail = true;\n                 break;\n@@ -243,13 +244,7 @@ bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const\n         {\n             const CPubKey &vchPubKey = (*mi).second.first;\n             const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            CKeyingMaterial vchSecret;\n-            if (!DecryptSecret(vMasterKey, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n-                return false;\n-            if (vchSecret.size() != 32)\n-                return false;\n-            keyOut.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n-            return true;\n+            return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n         }\n     }\n     return false;"
      },
      {
        "sha": "cbaf1562f09f873bddd150d078d5d86695decf1f",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b7544501d6154f1d6530b670319d72754636ae/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b7544501d6154f1d6530b670319d72754636ae/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=93b7544501d6154f1d6530b670319d72754636ae",
        "patch": "@@ -107,9 +107,6 @@ class CCrypter\n     }\n };\n \n-bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext);\n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext);\n-\n /** Keystore which keeps the private keys encrypted.\n  * It derives from the basic key store, which is used if no encryption is active.\n  */"
      }
    ]
  },
  {
    "sha": "25cf6f3d41b33c4d8523b6613f0169772fd3937f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWNmNmYzZDQxYjMzYzRkODUyM2I2NjEzZjAxNjk3NzJmZDM5Mzdm",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-12-09T13:50:01Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-04T14:11:54Z"
      },
      "message": "minor rework of SendMoney in rpcwallet\n\n- rework the function to not log errors but use throw JSONRPCError\n- remove a check for IsLocked() that is done in sendtoaddress and\n  sendfrom RPC calls already\n- cache GetBalance() return value, because it's possibly used twice",
      "tree": {
        "sha": "c649b253c2dff8bdba5649bb7a8d833b668577d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c649b253c2dff8bdba5649bb7a8d833b668577d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25cf6f3d41b33c4d8523b6613f0169772fd3937f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25cf6f3d41b33c4d8523b6613f0169772fd3937f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25cf6f3d41b33c4d8523b6613f0169772fd3937f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25cf6f3d41b33c4d8523b6613f0169772fd3937f/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "93b7544501d6154f1d6530b670319d72754636ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93b7544501d6154f1d6530b670319d72754636ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93b7544501d6154f1d6530b670319d72754636ae"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 11,
      "deletions": 16
    },
    "files": [
      {
        "sha": "d097b6a0fafc2042efbcc220216e308742b72348",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 16,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cf6f3d41b33c4d8523b6613f0169772fd3937f/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cf6f3d41b33c4d8523b6613f0169772fd3937f/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=25cf6f3d41b33c4d8523b6613f0169772fd3937f",
        "patch": "@@ -19,6 +19,7 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n+\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n@@ -316,35 +317,29 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     return ret;\n }\n \n-void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n+static void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n {\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n     // Check amount\n     if (nValue <= 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n \n-    if (nValue > pwalletMain->GetBalance())\n+    if (nValue > curBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n \n-    string strError;\n-    if (pwalletMain->IsLocked())\n-    {\n-        strError = \"Error: Wallet locked, unable to create transaction!\";\n-        LogPrintf(\"SendMoney(): %s\", strError);\n-        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n-    }\n-\n     // Parse Bitcoin address\n     CScript scriptPubKey = GetScriptForDestination(address);\n \n     // Create and send the transaction\n     CReserveKey reservekey(pwalletMain);\n     CAmount nFeeRequired;\n-    if (!pwalletMain->CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError))\n-    {\n-        if (nValue + nFeeRequired > pwalletMain->GetBalance())\n-            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n-        LogPrintf(\"SendMoney(): %s\\n\", strError);\n-        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    std::string strError;\n+    if (!pwalletMain->CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError)) {\n+        if (nValue + nFeeRequired > curBalance)\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired)));\n+        else\n+            throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");"
      }
    ]
  },
  {
    "sha": "17115d0a34ce5c370e45fb51560c02bee5339b11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzExNWQwYTM0Y2U1YzM3MGU0NWZiNTE1NjBjMDJiZWU1MzM5YjEx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-04T15:34:34Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-04T15:34:34Z"
      },
      "message": "fix getblocktemplate lock issue\n\ngetblocktemplate didn't have a wallet lock before #5711 and IMO there is no need for LEAVE/ENTER critical section.",
      "tree": {
        "sha": "7dcfec4b6fd774630be21ce5739d969517703205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dcfec4b6fd774630be21ce5739d969517703205"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17115d0a34ce5c370e45fb51560c02bee5339b11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17115d0a34ce5c370e45fb51560c02bee5339b11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17115d0a34ce5c370e45fb51560c02bee5339b11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17115d0a34ce5c370e45fb51560c02bee5339b11/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93b7544501d6154f1d6530b670319d72754636ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93b7544501d6154f1d6530b670319d72754636ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93b7544501d6154f1d6530b670319d72754636ae"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8f2d34edff3f44e2408f245f4c8fb260b5a7dbe3",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17115d0a34ce5c370e45fb51560c02bee5339b11/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17115d0a34ce5c370e45fb51560c02bee5339b11/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=17115d0a34ce5c370e45fb51560c02bee5339b11",
        "patch": "@@ -446,10 +446,6 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         }\n \n         // Release the wallet and main lock while waiting\n-#ifdef ENABLE_WALLET\n-        if(pwalletMain)\n-            LEAVE_CRITICAL_SECTION(pwalletMain->cs_wallet);\n-#endif\n         LEAVE_CRITICAL_SECTION(cs_main);\n         {\n             checktxtime = boost::get_system_time() + boost::posix_time::minutes(1);\n@@ -467,10 +463,6 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             }\n         }\n         ENTER_CRITICAL_SECTION(cs_main);\n-#ifdef ENABLE_WALLET\n-        if(pwalletMain)\n-            ENTER_CRITICAL_SECTION(pwalletMain->cs_wallet);\n-#endif\n \n         if (!IsRPCRunning())\n             throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");"
      }
    ]
  },
  {
    "sha": "1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzRlM2Y5OWYwNTI3M2U0ZDBmYWU3MjQ2ZDNhZmU1YTMzYzUyZWUw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T16:16:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-04T16:16:56Z"
      },
      "message": "Merge pull request #5754\n\n17115d0 fix getblocktemplate lock issue (Jonas Schnelli)",
      "tree": {
        "sha": "7dcfec4b6fd774630be21ce5739d969517703205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dcfec4b6fd774630be21ce5739d969517703205"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU0kX4AAoJEHSBCwEjRsmmGVIH/in1J/Ni8GdTYGWkbbbToJ9U\ngBmORCvxEcRz91RI1wGvmTc7TtaWZYavkuQyF+p4q4DmD33LkjXifvysyve3kCUT\nZI/F8iidxav0/E08M0TGwMUQNtPakahMkb6/rDFG7pQCVs14Q13Jon/1Kr8CQ3Y6\nkHqVcpD1ujmDrFxKPPgr8TItwZGbjSwP22nGB12thnf5OPqbWVniz8jwfWmDd35H\npK/MC+PXRs2YuXxgwslGBulXjzVz564dpN3M9eVOcvADrCH9SQjqjP52KRCXlf+u\n2lZd9OZRg+Z9/oOeSrjrJxBWrlOyBKSTbT7N6V4V662mjQEe0krB+7tBKmDUvGg=\n=noWw\n-----END PGP SIGNATURE-----",
        "payload": "tree 7dcfec4b6fd774630be21ce5739d969517703205\nparent 93b7544501d6154f1d6530b670319d72754636ae\nparent 17115d0a34ce5c370e45fb51560c02bee5339b11\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423066609 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423066616 +0100\n\nMerge pull request #5754\n\n17115d0 fix getblocktemplate lock issue (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93b7544501d6154f1d6530b670319d72754636ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93b7544501d6154f1d6530b670319d72754636ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93b7544501d6154f1d6530b670319d72754636ae"
      },
      {
        "sha": "17115d0a34ce5c370e45fb51560c02bee5339b11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17115d0a34ce5c370e45fb51560c02bee5339b11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17115d0a34ce5c370e45fb51560c02bee5339b11"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8f2d34edff3f44e2408f245f4c8fb260b5a7dbe3",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "patch": "@@ -446,10 +446,6 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         }\n \n         // Release the wallet and main lock while waiting\n-#ifdef ENABLE_WALLET\n-        if(pwalletMain)\n-            LEAVE_CRITICAL_SECTION(pwalletMain->cs_wallet);\n-#endif\n         LEAVE_CRITICAL_SECTION(cs_main);\n         {\n             checktxtime = boost::get_system_time() + boost::posix_time::minutes(1);\n@@ -467,10 +463,6 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             }\n         }\n         ENTER_CRITICAL_SECTION(cs_main);\n-#ifdef ENABLE_WALLET\n-        if(pwalletMain)\n-            ENTER_CRITICAL_SECTION(pwalletMain->cs_wallet);\n-#endif\n \n         if (!IsRPCRunning())\n             throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");"
      }
    ]
  },
  {
    "sha": "1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2IyYTAwY2I4MjIxODQxZTdkNzQ4ZWQ0OWZkMmVhMGFkNTBhYzEy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-04T16:34:28Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-04T17:04:49Z"
      },
      "message": "Fix getblocktemplate_proposals test by mining one block\n\nThis triggers the tested node to no longer be in initial\ndownload, allowing the call to getblocktemplate() to succeed.",
      "tree": {
        "sha": "71545511a2e449d532cb655d3eb3df7bdeb4d542",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71545511a2e449d532cb655d3eb3df7bdeb4d542"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f65162002d2c39fde40097316b0be62add9446dd",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
        "patch": "@@ -95,6 +95,7 @@ class GetBlockTemplateProposalTest(BitcoinTestFramework):\n \n     def run_test(self):\n         node = self.nodes[0]\n+        node.setgenerate(True, 1) # Mine a block to leave initial block download\n         tmpl = node.getblocktemplate()\n         if 'coinbasetxn' not in tmpl:\n             rawcoinbase = encodeUNum(tmpl['height'])"
      }
    ]
  },
  {
    "sha": "d67a642392e1c217acfe15098f68778062c896bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjdhNjQyMzkyZTFjMjE3YWNmZTE1MDk4ZjY4Nzc4MDYyYzg5NmJi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-04T14:15:52Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-04T19:52:18Z"
      },
      "message": "[Qt] add bitcoin logo to about screen",
      "tree": {
        "sha": "c9ab85ef514ca37d4fb4ece1698ca97194e7cb9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9ab85ef514ca37d4fb4ece1698ca97194e7cb9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d67a642392e1c217acfe15098f68778062c896bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67a642392e1c217acfe15098f68778062c896bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d67a642392e1c217acfe15098f68778062c896bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67a642392e1c217acfe15098f68778062c896bb/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31dedb463b0ce77364e516239bf1b9c7eed5b3b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31dedb463b0ce77364e516239bf1b9c7eed5b3b0"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 83,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dc7df9d6c888a3223c4839cf2f7ba639ee6dc748",
        "filename": "src/qt/forms/helpmessagedialog.ui",
        "status": "modified",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d67a642392e1c217acfe15098f68778062c896bb/src/qt/forms/helpmessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d67a642392e1c217acfe15098f68778062c896bb/src/qt/forms/helpmessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/helpmessagedialog.ui?ref=d67a642392e1c217acfe15098f68778062c896bb",
        "patch": "@@ -14,6 +14,69 @@\n    <string notr=\"true\">Bitcoin Core - Command-line options</string>\n   </property>\n   <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2\">\n+   <property name=\"spacing\">\n+    <number>0</number>\n+   </property>\n+   <property name=\"leftMargin\">\n+    <number>12</number>\n+   </property>\n+   <property name=\"topMargin\">\n+    <number>12</number>\n+   </property>\n+   <property name=\"rightMargin\">\n+    <number>12</number>\n+   </property>\n+   <property name=\"bottomMargin\">\n+    <number>12</number>\n+   </property>\n+   <item>\n+    <layout class=\"QVBoxLayout\" name=\"verticalLayoutLogo\" stretch=\"0,0\">\n+     <property name=\"leftMargin\">\n+      <number>0</number>\n+     </property>\n+     <property name=\"topMargin\">\n+      <number>4</number>\n+     </property>\n+     <property name=\"rightMargin\">\n+      <number>0</number>\n+     </property>\n+     <item>\n+      <widget class=\"QLabel\" name=\"aboutLogo\">\n+       <property name=\"sizePolicy\">\n+        <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Ignored\">\n+         <horstretch>0</horstretch>\n+         <verstretch>0</verstretch>\n+        </sizepolicy>\n+       </property>\n+       <property name=\"maximumSize\">\n+        <size>\n+         <width>100</width>\n+         <height>100</height>\n+        </size>\n+       </property>\n+       <property name=\"pixmap\">\n+        <pixmap resource=\"../bitcoin.qrc\">:/icons/bitcoin</pixmap>\n+       </property>\n+       <property name=\"scaledContents\">\n+        <bool>true</bool>\n+       </property>\n+       <property name=\"alignment\">\n+        <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>\n+       </property>\n+      </widget>\n+     </item>\n+     <item>\n+      <widget class=\"QFrame\" name=\"frame\">\n+       <property name=\"frameShape\">\n+        <enum>QFrame::NoFrame</enum>\n+       </property>\n+       <property name=\"frameShadow\">\n+        <enum>QFrame::Raised</enum>\n+       </property>\n+      </widget>\n+     </item>\n+    </layout>\n+   </item>\n    <item>\n     <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n      <item>\n@@ -25,6 +88,9 @@\n      </item>\n      <item>\n       <widget class=\"QScrollArea\" name=\"scrollArea\">\n+       <property name=\"frameShape\">\n+        <enum>QFrame::NoFrame</enum>\n+       </property>\n        <property name=\"verticalScrollBarPolicy\">\n         <enum>Qt::ScrollBarAlwaysOn</enum>\n        </property>\n@@ -56,6 +122,22 @@\n        </widget>\n       </widget>\n      </item>\n+     <item>\n+      <spacer name=\"verticalSpacer\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Vertical</enum>\n+       </property>\n+       <property name=\"sizeType\">\n+        <enum>QSizePolicy::Fixed</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>4</width>\n+         <height>4</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n      <item>\n       <widget class=\"QDialogButtonBox\" name=\"okButton\">\n        <property name=\"orientation\">"
      },
      {
        "sha": "63dd6efb52e9cbf0da9d65d5e2ff280dbd8fffb6",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d67a642392e1c217acfe15098f68778062c896bb/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d67a642392e1c217acfe15098f68778062c896bb/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=d67a642392e1c217acfe15098f68778062c896bb",
        "patch": "@@ -137,6 +137,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n \n         ui->helpMessage->moveCursor(QTextCursor::Start);\n         ui->scrollArea->setVisible(false);\n+        ui->aboutLogo->setVisible(false);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTc5MWM2YWUzYjU5ZWY0YzhkMDRlNjg3MzMxMGEwMjJlMTIxMWI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-26T08:47:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-05T13:21:25Z"
      },
      "message": "Add more information to errors in ReadBlockFromDisk\n\nA lot of times, disk corruption problems appear here.\nTo facilitate debugging and troubleshooting, add position information\nto the error messages.",
      "tree": {
        "sha": "b4c259437b6104c1efd4db667fd5c13dfac08976",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4c259437b6104c1efd4db667fd5c13dfac08976"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5791c6ae3b59ef4c8d04e6873310a022e1211b6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "02f53cd2f2d518ead2da778930f86d7bcb88edb1",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5791c6ae3b59ef4c8d04e6873310a022e1211b6/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5791c6ae3b59ef4c8d04e6873310a022e1211b6/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
        "patch": "@@ -48,6 +48,12 @@ struct CDiskBlockPos\n \n     void SetNull() { nFile = -1; nPos = 0; }\n     bool IsNull() const { return (nFile == -1); }\n+\n+    std::string ToString() const\n+    {\n+        return strprintf(\"CBlockDiskPos(nFile=%i, nPos=%i)\", nFile, nPos);\n+    }\n+\n };\n \n enum BlockStatus {"
      },
      {
        "sha": "32baf5508aeeba1f6179b569681e24fae676ac9d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5791c6ae3b59ef4c8d04e6873310a022e1211b6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5791c6ae3b59ef4c8d04e6873310a022e1211b6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
        "patch": "@@ -1199,19 +1199,19 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     // Open history file to read\n     CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"ReadBlockFromDisk: OpenBlockFile failed\");\n+        return error(\"ReadBlockFromDisk: OpenBlockFile failed for %s\", pos.ToString());\n \n     // Read block\n     try {\n         filein >> block;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s at %s\", __func__, e.what(), pos.ToString());\n     }\n \n     // Check the header\n     if (!CheckProofOfWork(block.GetHash(), block.nBits))\n-        return error(\"ReadBlockFromDisk: Errors in block header\");\n+        return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n \n     return true;\n }\n@@ -1221,7 +1221,8 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     if (!ReadBlockFromDisk(block, pindex->GetBlockPos()))\n         return false;\n     if (block.GetHash() != pindex->GetBlockHash())\n-        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index\");\n+        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index for %s at %s\",\n+                pindex->ToString(), pindex->GetBlockPos().ToString());\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "5d901d8ece9aa29dc1dcacc3f10f24321288b548",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDkwMWQ4ZWNlOWFhMjlkYzFkY2FjYzNmMTBmMjQzMjEyODhiNTQ4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-05T15:01:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-05T15:02:01Z"
      },
      "message": "Merge pull request #5756\n\n1cb2a00 Fix getblocktemplate_proposals test by mining one block (Suhas Daftuar)",
      "tree": {
        "sha": "71545511a2e449d532cb655d3eb3df7bdeb4d542",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71545511a2e449d532cb655d3eb3df7bdeb4d542"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d901d8ece9aa29dc1dcacc3f10f24321288b548",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU04XpAAoJEHSBCwEjRsmm+xsH/iK+LV9rMgEXYLxel7FaOLW9\nztLEBx0FzKO9vOspFW3z2/FUt6RxIFvxvNcu7hdhlfFaXpCv0Fkov+O1o314WRak\n+xHsIjNQ6C5tLeobyFQu+Crr4gib7/F7p6MpY90orJPLSG6P1ga/vfXb/l2g+pE8\nmyn4VJ/NAPk0YYwwXGwlIf9N0DSBVtTtzRY+kjz2e0nxTX+eCexvHOE9eI2JkcZw\n75+/NO86hpPm6Vw3sEYYhkZsUVDVmW8/rgH1l72Q99pPCDd7ewDqNJX6uF+U6EfA\nl7Ljtx+PVQp9SKqc+qqb2HNrSMBFdKQDRr4PIX68PHLlhi+sKARgQMnqCSKHznY=\n=2zjL\n-----END PGP SIGNATURE-----",
        "payload": "tree 71545511a2e449d532cb655d3eb3df7bdeb4d542\nparent 1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0\nparent 1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423148516 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423148521 +0100\n\nMerge pull request #5756\n\n1cb2a00 Fix getblocktemplate_proposals test by mining one block (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d901d8ece9aa29dc1dcacc3f10f24321288b548",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d901d8ece9aa29dc1dcacc3f10f24321288b548",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d901d8ece9aa29dc1dcacc3f10f24321288b548/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0"
      },
      {
        "sha": "1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cb2a00cb8221841e7d748ed49fd2ea0ad50ac12"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f65162002d2c39fde40097316b0be62add9446dd",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d901d8ece9aa29dc1dcacc3f10f24321288b548/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d901d8ece9aa29dc1dcacc3f10f24321288b548/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=5d901d8ece9aa29dc1dcacc3f10f24321288b548",
        "patch": "@@ -95,6 +95,7 @@ class GetBlockTemplateProposalTest(BitcoinTestFramework):\n \n     def run_test(self):\n         node = self.nodes[0]\n+        node.setgenerate(True, 1) # Mine a block to leave initial block download\n         tmpl = node.getblocktemplate()\n         if 'coinbasetxn' not in tmpl:\n             rawcoinbase = encodeUNum(tmpl['height'])"
      }
    ]
  },
  {
    "sha": "65f10e0ffc0359a0af6575711d6a4cc9b96afd7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWYxMGUwZmZjMDM1OWEwYWY2NTc1NzExZDZhNGNjOWI5NmFmZDdh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-06T10:13:38Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-02-06T10:13:38Z"
      },
      "message": "fix jonasschnelli's gitian key\n\nThere where two keys in the keyfile and it also had a missing \"-key\" in the filename.\nSee: http://bitcoinstats.com/irc/bitcoin-dev/logs/2015/02/05#l1423162105",
      "tree": {
        "sha": "4b351c4fc061e8a83a9f259c222d388fd73106a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b351c4fc061e8a83a9f259c222d388fd73106a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d901d8ece9aa29dc1dcacc3f10f24321288b548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d901d8ece9aa29dc1dcacc3f10f24321288b548",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d901d8ece9aa29dc1dcacc3f10f24321288b548"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe44c0fbd4eb3b57ff658f48a1e7af67e2d25dda",
        "filename": "contrib/gitian-downloader/jonasschnelli-key.pgp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a/contrib/gitian-downloader/jonasschnelli-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a/contrib/gitian-downloader/jonasschnelli-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/jonasschnelli-key.pgp?ref=65f10e0ffc0359a0af6575711d6a4cc9b96afd7a"
      },
      {
        "sha": "96140fe171651577d56ce75c3ce50b81026dadac",
        "filename": "contrib/gitian-downloader/jonasschnelli.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d901d8ece9aa29dc1dcacc3f10f24321288b548/contrib/gitian-downloader/jonasschnelli.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d901d8ece9aa29dc1dcacc3f10f24321288b548/contrib/gitian-downloader/jonasschnelli.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/jonasschnelli.pgp?ref=5d901d8ece9aa29dc1dcacc3f10f24321288b548"
      }
    ]
  },
  {
    "sha": "fb6140b54bad51e3b063dfb005bfde13aca64eb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjYxNDBiNTRiYWQ1MWUzYjA2M2RmYjAwNWJmZGUxM2FjYTY0ZWI0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-06T15:51:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-06T15:51:39Z"
      },
      "message": "Merge pull request #5721\n\ncf008ac Acquire CCheckQueue's lock to avoid race condition (Suhas Daftuar)",
      "tree": {
        "sha": "be1accf03bc06675785a66072bfbaf56aaf5ffd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be1accf03bc06675785a66072bfbaf56aaf5ffd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb6140b54bad51e3b063dfb005bfde13aca64eb4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU1OMLAAoJEHSBCwEjRsmmlK8H/3ZFLGNrfcZq7UFz0nFLi+cz\nW5tqZAfJcKp3b6zZAweGs67w4TU6KGXq+xgz4/h2jjzzlYOaasCEI/x7CP+wG67d\nhOSBgmnwoqz38yYNan1TQ8gGGikUwNVCcvs2xplvQx1SzpelLKW78yEutL/2EH6U\nITbzBfiRu6iAcqLSdDP0HI7vA7w5yPwmf0qFzzeMp0Lu/dyW/J9psnr9yV+JL3Tq\n5Ms4Oiag5KitUha3mdz2Zh+WGoMEe/D0e8IAE1ujJCuraA5c8Jr/EfW/l733ci3m\n19JlMhn7B5ripEgfbXioYtpYjdzgT1OXTHJ4uovIKgNxjYPpYVv9NVU8On/aLC8=\n=NGh+\n-----END PGP SIGNATURE-----",
        "payload": "tree be1accf03bc06675785a66072bfbaf56aaf5ffd9\nparent 5d901d8ece9aa29dc1dcacc3f10f24321288b548\nparent cf008ac8c3c5d582562d88ad89020daef3e64dcb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423237861 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423237899 +0100\n\nMerge pull request #5721\n\ncf008ac Acquire CCheckQueue's lock to avoid race condition (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6140b54bad51e3b063dfb005bfde13aca64eb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb6140b54bad51e3b063dfb005bfde13aca64eb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6140b54bad51e3b063dfb005bfde13aca64eb4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d901d8ece9aa29dc1dcacc3f10f24321288b548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d901d8ece9aa29dc1dcacc3f10f24321288b548",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d901d8ece9aa29dc1dcacc3f10f24321288b548"
      },
      {
        "sha": "cf008ac8c3c5d582562d88ad89020daef3e64dcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf008ac8c3c5d582562d88ad89020daef3e64dcb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf008ac8c3c5d582562d88ad89020daef3e64dcb"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6f6b97e3a7a33b0ead1ffeef6931cc1356d6e420",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb6140b54bad51e3b063dfb005bfde13aca64eb4/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb6140b54bad51e3b063dfb005bfde13aca64eb4/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=fb6140b54bad51e3b063dfb005bfde13aca64eb4",
        "patch": "@@ -161,7 +161,12 @@ class CCheckQueue\n     {\n     }\n \n-    friend class CCheckQueueControl<T>;\n+    bool IsIdle()\n+    {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+        return (nTotal == nIdle && nTodo == 0 && fAllOk == true);\n+    }\n+\n };\n \n /** \n@@ -180,9 +185,8 @@ class CCheckQueueControl\n     {\n         // passed queue is supposed to be unused, or NULL\n         if (pqueue != NULL) {\n-            assert(pqueue->nTotal == pqueue->nIdle);\n-            assert(pqueue->nTodo == 0);\n-            assert(pqueue->fAllOk == true);\n+            bool isIdle = pqueue->IsIdle();\n+            assert(isIdle);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGQ0Y2ZmMGVkMmQ0NDM4ZGE0YmJmMmQ0Y2EwNDY1NzE1NjAzYWY1",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-02-08T00:59:58Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-02-08T19:58:59Z"
      },
      "message": "Sanitize command strings before logging them.\n\nNormally bitcoin core does not display any network originated strings without\n sanitizing or hex encoding.  This wasn't done for strcommand in many places.\n\nThis could be used to play havoc with a terminal displaying the logs,\n especially with printtoconsole in use.\n\nThanks to Evil-Knievel for reporting this issue.",
      "tree": {
        "sha": "052974da2c9aba3e088f4e714f66a0962cda6710",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/052974da2c9aba3e088f4e714f66a0962cda6710"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb6140b54bad51e3b063dfb005bfde13aca64eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6140b54bad51e3b063dfb005bfde13aca64eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb6140b54bad51e3b063dfb005bfde13aca64eb4"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "43e5a2d024edeeede19713ed2c643ad51d0f67ae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
        "patch": "@@ -3450,7 +3450,7 @@ void static ProcessGetData(CNode* pfrom)\n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)\n {\n     RandAddSeedPerfmon();\n-    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", strCommand, vRecv.size(), pfrom->id);\n+    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -4285,7 +4285,7 @@ bool ProcessMessages(CNode* pfrom)\n \n         // Scan for message start\n         if (memcmp(msg.hdr.pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0) {\n-            LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", msg.hdr.GetCommand(), pfrom->id);\n+            LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->id);\n             fOk = false;\n             break;\n         }\n@@ -4294,7 +4294,7 @@ bool ProcessMessages(CNode* pfrom)\n         CMessageHeader& hdr = msg.hdr;\n         if (!hdr.IsValid())\n         {\n-            LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", hdr.GetCommand(), pfrom->id);\n+            LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->id);\n             continue;\n         }\n         string strCommand = hdr.GetCommand();\n@@ -4310,7 +4310,7 @@ bool ProcessMessages(CNode* pfrom)\n         if (nChecksum != hdr.nChecksum)\n         {\n             LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n-               strCommand, nMessageSize, nChecksum, hdr.nChecksum);\n+               SanitizeString(strCommand), nMessageSize, nChecksum, hdr.nChecksum);\n             continue;\n         }\n \n@@ -4327,12 +4327,12 @@ bool ProcessMessages(CNode* pfrom)\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv\n-                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", SanitizeString(strCommand), nMessageSize, e.what());\n             }\n             else if (strstr(e.what(), \"size too large\"))\n             {\n                 // Allow exceptions from over-long size\n-                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", SanitizeString(strCommand), nMessageSize, e.what());\n             }\n             else\n             {\n@@ -4349,7 +4349,7 @@ bool ProcessMessages(CNode* pfrom)\n         }\n \n         if (!fRet)\n-            LogPrintf(\"ProcessMessage(%s, %u bytes) FAILED peer=%d\\n\", strCommand, nMessageSize, pfrom->id);\n+            LogPrintf(\"ProcessMessage(%s, %u bytes) FAILED peer=%d\\n\", SanitizeString(strCommand), nMessageSize, pfrom->id);\n \n         break;\n     }"
      },
      {
        "sha": "3c3666615e11cdd3a8f5557b16d8a09f4ad36a56",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
        "patch": "@@ -1971,7 +1971,7 @@ void CNode::BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSen\n     ENTER_CRITICAL_SECTION(cs_vSend);\n     assert(ssSend.size() == 0);\n     ssSend << CMessageHeader(pszCommand, 0);\n-    LogPrint(\"net\", \"sending: %s \", pszCommand);\n+    LogPrint(\"net\", \"sending: %s \", SanitizeString(pszCommand));\n }\n \n void CNode::AbortMessage() UNLOCK_FUNCTION(cs_vSend)"
      },
      {
        "sha": "20e9252d7ee8dfb63cba099e265a0782660e33b9",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
        "patch": "@@ -849,7 +849,7 @@ void JSONRequest::parse(const Value& valRequest)\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n     if (strMethod != \"getblocktemplate\")\n-        LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", strMethod);\n+        LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", SanitizeString(strMethod));\n \n     // Parse params\n     Value valParams = find_value(request, \"params\");"
      }
    ]
  },
  {
    "sha": "32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmE4YjZhOWQ3NzFhZWZmODA1ODk4ZGYxZmUzNmNhOWQwZWI2M2E0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T09:43:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T09:43:53Z"
      },
      "message": "Merge pull request #5770\n\n28d4cff Sanitize command strings before logging them. (Gregory Maxwell)",
      "tree": {
        "sha": "052974da2c9aba3e088f4e714f66a0962cda6710",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/052974da2c9aba3e088f4e714f66a0962cda6710"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2IFZAAoJEHSBCwEjRsmmZckH/RObeBgC7OTJl6hJeNC+LlIj\nBeoGTHMlqiUnxkTU6U4JbedwEw+ld3I7rkGeZNxiRrcIj3G1fTnpTbmXGvwNHeVE\nnaRFYG2U+ZSnI6Beu4hInOdWp4yQ/arYajr8/O38LhzRRimg1EfExXfTjXUUxcl6\n14bc46h6cG5IsP36BgwdWLzf9DpOrMlMJUYovohVK5mv8eA7s2cb2hvdA4n2hXcL\nYVW9KDJqiYqNudAK8VLM7UeFGilywTewnPkE8zdDX5PvTIWQzmiWG7gYD8uRlyhK\nIWXqVlV8kfzvHE7aXP4AckRzJrOO+iu/qQIyy/HyBxUL1dACRXtrFCaeTj9mmPg=\n=H2FY\n-----END PGP SIGNATURE-----",
        "payload": "tree 052974da2c9aba3e088f4e714f66a0962cda6710\nparent fb6140b54bad51e3b063dfb005bfde13aca64eb4\nparent 28d4cff0ed2d4438da4bbf2d4ca0465715603af5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423475025 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423475033 +0100\n\nMerge pull request #5770\n\n28d4cff Sanitize command strings before logging them. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb6140b54bad51e3b063dfb005bfde13aca64eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6140b54bad51e3b063dfb005bfde13aca64eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb6140b54bad51e3b063dfb005bfde13aca64eb4"
      },
      {
        "sha": "28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28d4cff0ed2d4438da4bbf2d4ca0465715603af5"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "43e5a2d024edeeede19713ed2c643ad51d0f67ae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
        "patch": "@@ -3450,7 +3450,7 @@ void static ProcessGetData(CNode* pfrom)\n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)\n {\n     RandAddSeedPerfmon();\n-    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", strCommand, vRecv.size(), pfrom->id);\n+    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -4285,7 +4285,7 @@ bool ProcessMessages(CNode* pfrom)\n \n         // Scan for message start\n         if (memcmp(msg.hdr.pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0) {\n-            LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", msg.hdr.GetCommand(), pfrom->id);\n+            LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->id);\n             fOk = false;\n             break;\n         }\n@@ -4294,7 +4294,7 @@ bool ProcessMessages(CNode* pfrom)\n         CMessageHeader& hdr = msg.hdr;\n         if (!hdr.IsValid())\n         {\n-            LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", hdr.GetCommand(), pfrom->id);\n+            LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->id);\n             continue;\n         }\n         string strCommand = hdr.GetCommand();\n@@ -4310,7 +4310,7 @@ bool ProcessMessages(CNode* pfrom)\n         if (nChecksum != hdr.nChecksum)\n         {\n             LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n-               strCommand, nMessageSize, nChecksum, hdr.nChecksum);\n+               SanitizeString(strCommand), nMessageSize, nChecksum, hdr.nChecksum);\n             continue;\n         }\n \n@@ -4327,12 +4327,12 @@ bool ProcessMessages(CNode* pfrom)\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv\n-                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", SanitizeString(strCommand), nMessageSize, e.what());\n             }\n             else if (strstr(e.what(), \"size too large\"))\n             {\n                 // Allow exceptions from over-long size\n-                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", SanitizeString(strCommand), nMessageSize, e.what());\n             }\n             else\n             {\n@@ -4349,7 +4349,7 @@ bool ProcessMessages(CNode* pfrom)\n         }\n \n         if (!fRet)\n-            LogPrintf(\"ProcessMessage(%s, %u bytes) FAILED peer=%d\\n\", strCommand, nMessageSize, pfrom->id);\n+            LogPrintf(\"ProcessMessage(%s, %u bytes) FAILED peer=%d\\n\", SanitizeString(strCommand), nMessageSize, pfrom->id);\n \n         break;\n     }"
      },
      {
        "sha": "3c3666615e11cdd3a8f5557b16d8a09f4ad36a56",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
        "patch": "@@ -1971,7 +1971,7 @@ void CNode::BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSen\n     ENTER_CRITICAL_SECTION(cs_vSend);\n     assert(ssSend.size() == 0);\n     ssSend << CMessageHeader(pszCommand, 0);\n-    LogPrint(\"net\", \"sending: %s \", pszCommand);\n+    LogPrint(\"net\", \"sending: %s \", SanitizeString(pszCommand));\n }\n \n void CNode::AbortMessage() UNLOCK_FUNCTION(cs_vSend)"
      },
      {
        "sha": "20e9252d7ee8dfb63cba099e265a0782660e33b9",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
        "patch": "@@ -849,7 +849,7 @@ void JSONRequest::parse(const Value& valRequest)\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n     if (strMethod != \"getblocktemplate\")\n-        LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", strMethod);\n+        LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", SanitizeString(strMethod));\n \n     // Parse params\n     Value valParams = find_value(request, \"params\");"
      }
    ]
  },
  {
    "sha": "47ee8cf0911a8da90fe2f952da5f5b9dfe94e181",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2VlOGNmMDkxMWE4ZGE5MGZlMmY5NTJkYTVmNWI5ZGZlOTRlMTgx",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-09T10:21:26Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-09T10:21:26Z"
      },
      "message": "[Qt] use qint64 in BitcoinGUI::setNumBlocks\n\n- as QDateTime.secsTo() returns a qint64 also store in a qint64 and not in\n  an integer",
      "tree": {
        "sha": "751aad1c3c28ef81d2cbee42b0ce1eff1c0e06eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/751aad1c3c28ef81d2cbee42b0ce1eff1c0e06eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5c5da6dba0b59d3aabc95f64627860d67d2b009d",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=47ee8cf0911a8da90fe2f952da5f5b9dfe94e181",
        "patch": "@@ -682,7 +682,7 @@ void BitcoinGUI::setNumBlocks(int count)\n \n     QDateTime lastBlockDate = clientModel->getLastBlockDate();\n     QDateTime currentDate = QDateTime::currentDateTime();\n-    int secs = lastBlockDate.secsTo(currentDate);\n+    qint64 secs = lastBlockDate.secsTo(currentDate);\n \n     tooltip = tr(\"Processed %n blocks of transaction history.\", \"\", count);\n \n@@ -722,8 +722,8 @@ void BitcoinGUI::setNumBlocks(int count)\n         }\n         else\n         {\n-            int years = secs / YEAR_IN_SECONDS;\n-            int remainder = secs % YEAR_IN_SECONDS;\n+            qint64 years = secs / YEAR_IN_SECONDS;\n+            qint64 remainder = secs % YEAR_IN_SECONDS;\n             timeBehindText = tr(\"%1 and %2\").arg(tr(\"%n year(s)\", \"\", years)).arg(tr(\"%n week(s)\",\"\", remainder/WEEK_IN_SECONDS));\n         }\n "
      }
    ]
  },
  {
    "sha": "deda3e156d9d424051758eeca9569a90365d2dd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWRhM2UxNTZkOWQ0MjQwNTE3NThlZWNhOTU2OWE5MDM2NWQyZGQ1",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-09T10:25:23Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-09T10:28:03Z"
      },
      "message": "[Qt] remove unused getNumBlocksAtStartup() from ClientModel",
      "tree": {
        "sha": "0bb72ae599b4833a74a091a183c18029d6c5043c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bb72ae599b4833a74a091a183c18029d6c5043c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/deda3e156d9d424051758eeca9569a90365d2dd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deda3e156d9d424051758eeca9569a90365d2dd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/deda3e156d9d424051758eeca9569a90365d2dd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deda3e156d9d424051758eeca9569a90365d2dd5/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "47ee8cf0911a8da90fe2f952da5f5b9dfe94e181",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47ee8cf0911a8da90fe2f952da5f5b9dfe94e181"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 3,
      "deletions": 11
    },
    "files": [
      {
        "sha": "729eb84a18190349364bbc1ec78fb7b6dcc6d058",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deda3e156d9d424051758eeca9569a90365d2dd5/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deda3e156d9d424051758eeca9569a90365d2dd5/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=deda3e156d9d424051758eeca9569a90365d2dd5",
        "patch": "@@ -29,8 +29,9 @@ ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     optionsModel(optionsModel),\n     peerTableModel(0),\n     cachedNumBlocks(0),\n-    cachedReindexing(0), cachedImporting(0),\n-    numBlocksAtStartup(-1), pollTimer(0)\n+    cachedReindexing(0),\n+    cachedImporting(0),\n+    pollTimer(0)\n {\n     peerTableModel = new PeerTableModel(this);\n     pollTimer = new QTimer(this);\n@@ -65,12 +66,6 @@ int ClientModel::getNumBlocks() const\n     return chainActive.Height();\n }\n \n-int ClientModel::getNumBlocksAtStartup()\n-{\n-    if (numBlocksAtStartup == -1) numBlocksAtStartup = getNumBlocks();\n-    return numBlocksAtStartup;\n-}\n-\n quint64 ClientModel::getTotalBytesRecv() const\n {\n     return CNode::GetTotalBytesRecv();"
      },
      {
        "sha": "7b74728b262e33ef77c7b8b22c58fb2dc640f82e",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deda3e156d9d424051758eeca9569a90365d2dd5/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deda3e156d9d424051758eeca9569a90365d2dd5/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=deda3e156d9d424051758eeca9569a90365d2dd5",
        "patch": "@@ -48,7 +48,6 @@ class ClientModel : public QObject\n     //! Return number of connections, default is in- and outbound (total)\n     int getNumConnections(unsigned int flags = CONNECTIONS_ALL) const;\n     int getNumBlocks() const;\n-    int getNumBlocksAtStartup();\n \n     quint64 getTotalBytesRecv() const;\n     quint64 getTotalBytesSent() const;\n@@ -77,8 +76,6 @@ class ClientModel : public QObject\n     bool cachedReindexing;\n     bool cachedImporting;\n \n-    int numBlocksAtStartup;\n-\n     QTimer *pollTimer;\n \n     void subscribeToCoreSignals();"
      }
    ]
  },
  {
    "sha": "0f446724370646a3332911e03c287d91772aa515",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjQ0NjcyNDM3MDY0NmEzMzMyOTExZTAzYzI4N2Q5MTc3MmFhNTE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T10:13:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T10:34:01Z"
      },
      "message": "Merge pull request #5753\n\nd67a642 [Qt] add bitcoin logo to about screen (Jonas Schnelli)",
      "tree": {
        "sha": "b3e72832c5d8b79e23c7b0406a0cc7c1ccef0861",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3e72832c5d8b79e23c7b0406a0cc7c1ccef0861"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f446724370646a3332911e03c287d91772aa515",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2I0ZAAoJEHSBCwEjRsmm8OcH/1AV30yCpsMwrQHlYGeLClY6\nEriOPaivkpgdj6Tcjn9zxzefKy9wIxcBdvBjoP5pVaG0oQel2jyg1mBcTwrCHchi\nvQLlkUcNuVYWD9e5Ss0z5QO3IkUEUSEhWr2YMEeAfxhNgUaOgIhE6kcSS8nAtg3D\nYy7LjTwybJh2eXwygOBkfIyjrGzNEAGh0OIUc2I4+R/Kc8SGWe8RpIRdY0Xywn1N\nAw1tXdZqvDtKLUMfP84bN78F1mWy9ooLFTrKFJzzyFinc7d7VrjeB/Jmj12j+wn6\nfr2+4NzQqikQtT9nGa91Mq9XcQHWYVsk3SS+4EW6vHdNzzTPU0vKe5Rpg6ZW7XY=\n=Tr/l\n-----END PGP SIGNATURE-----",
        "payload": "tree b3e72832c5d8b79e23c7b0406a0cc7c1ccef0861\nparent 32a8b6a9d771aeff805898df1fe36ca9d0eb63a4\nparent d67a642392e1c217acfe15098f68778062c896bb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423476806 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423478041 +0100\n\nMerge pull request #5753\n\nd67a642 [Qt] add bitcoin logo to about screen (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f446724370646a3332911e03c287d91772aa515",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f446724370646a3332911e03c287d91772aa515",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f446724370646a3332911e03c287d91772aa515/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32a8b6a9d771aeff805898df1fe36ca9d0eb63a4"
      },
      {
        "sha": "d67a642392e1c217acfe15098f68778062c896bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67a642392e1c217acfe15098f68778062c896bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d67a642392e1c217acfe15098f68778062c896bb"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 83,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dc7df9d6c888a3223c4839cf2f7ba639ee6dc748",
        "filename": "src/qt/forms/helpmessagedialog.ui",
        "status": "modified",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f446724370646a3332911e03c287d91772aa515/src/qt/forms/helpmessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f446724370646a3332911e03c287d91772aa515/src/qt/forms/helpmessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/helpmessagedialog.ui?ref=0f446724370646a3332911e03c287d91772aa515",
        "patch": "@@ -14,6 +14,69 @@\n    <string notr=\"true\">Bitcoin Core - Command-line options</string>\n   </property>\n   <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2\">\n+   <property name=\"spacing\">\n+    <number>0</number>\n+   </property>\n+   <property name=\"leftMargin\">\n+    <number>12</number>\n+   </property>\n+   <property name=\"topMargin\">\n+    <number>12</number>\n+   </property>\n+   <property name=\"rightMargin\">\n+    <number>12</number>\n+   </property>\n+   <property name=\"bottomMargin\">\n+    <number>12</number>\n+   </property>\n+   <item>\n+    <layout class=\"QVBoxLayout\" name=\"verticalLayoutLogo\" stretch=\"0,0\">\n+     <property name=\"leftMargin\">\n+      <number>0</number>\n+     </property>\n+     <property name=\"topMargin\">\n+      <number>4</number>\n+     </property>\n+     <property name=\"rightMargin\">\n+      <number>0</number>\n+     </property>\n+     <item>\n+      <widget class=\"QLabel\" name=\"aboutLogo\">\n+       <property name=\"sizePolicy\">\n+        <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Ignored\">\n+         <horstretch>0</horstretch>\n+         <verstretch>0</verstretch>\n+        </sizepolicy>\n+       </property>\n+       <property name=\"maximumSize\">\n+        <size>\n+         <width>100</width>\n+         <height>100</height>\n+        </size>\n+       </property>\n+       <property name=\"pixmap\">\n+        <pixmap resource=\"../bitcoin.qrc\">:/icons/bitcoin</pixmap>\n+       </property>\n+       <property name=\"scaledContents\">\n+        <bool>true</bool>\n+       </property>\n+       <property name=\"alignment\">\n+        <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>\n+       </property>\n+      </widget>\n+     </item>\n+     <item>\n+      <widget class=\"QFrame\" name=\"frame\">\n+       <property name=\"frameShape\">\n+        <enum>QFrame::NoFrame</enum>\n+       </property>\n+       <property name=\"frameShadow\">\n+        <enum>QFrame::Raised</enum>\n+       </property>\n+      </widget>\n+     </item>\n+    </layout>\n+   </item>\n    <item>\n     <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n      <item>\n@@ -25,6 +88,9 @@\n      </item>\n      <item>\n       <widget class=\"QScrollArea\" name=\"scrollArea\">\n+       <property name=\"frameShape\">\n+        <enum>QFrame::NoFrame</enum>\n+       </property>\n        <property name=\"verticalScrollBarPolicy\">\n         <enum>Qt::ScrollBarAlwaysOn</enum>\n        </property>\n@@ -56,6 +122,22 @@\n        </widget>\n       </widget>\n      </item>\n+     <item>\n+      <spacer name=\"verticalSpacer\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Vertical</enum>\n+       </property>\n+       <property name=\"sizeType\">\n+        <enum>QSizePolicy::Fixed</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>4</width>\n+         <height>4</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n      <item>\n       <widget class=\"QDialogButtonBox\" name=\"okButton\">\n        <property name=\"orientation\">"
      },
      {
        "sha": "63dd6efb52e9cbf0da9d65d5e2ff280dbd8fffb6",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f446724370646a3332911e03c287d91772aa515/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f446724370646a3332911e03c287d91772aa515/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=0f446724370646a3332911e03c287d91772aa515",
        "patch": "@@ -137,6 +137,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n \n         ui->helpMessage->moveCursor(QTextCursor::Start);\n         ui->scrollArea->setVisible(false);\n+        ui->aboutLogo->setVisible(false);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "5cefea9c4bf8880628157113cc44dcb9ffbcd6de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2VmZWE5YzRiZjg4ODA2MjgxNTcxMTNjYzQ0ZGNiOWZmYmNkNmRl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T10:34:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T10:34:26Z"
      },
      "message": "Merge pull request #5764\n\n65f10e0 fix jonasschnelli's gitian key (Jonas Schnelli)",
      "tree": {
        "sha": "824094895926eec36b479794f8c2edf638bbef5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/824094895926eec36b479794f8c2edf638bbef5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cefea9c4bf8880628157113cc44dcb9ffbcd6de",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2I0yAAoJEHSBCwEjRsmmXJ0H/2heVZoMW95sBhLSBzywGuuN\ntG4tDmKU8X5e1p5GA1d6bR6e3WT7h6Wo2OX/KGo9Mxb2LgJiUDYQvaIvMxt6R1AQ\nRkeqUefk2u1UDx5cBEJP6RTlcX5O69H010zSHu8mVl0vvzMcDcZabSeW7rXve+2F\n54vD/SnAKpd2Yh/vZa7McQwxVKBQZUjBSEtw2j3DfKTW/yQB4KDDPBDXYLQIOFoH\nL0Ahfst8zz43RtL2h4SuSOqpsKBItJlG44+iA7sXfkUzVkyjC1kv7N0tYW3JsD5J\nnqNiN08LyB5laObvzCf0Rh0NyL+9tY8lmdgej93pdeJEGcmpXqzQSqvi+YD956k=\n=OOiL\n-----END PGP SIGNATURE-----",
        "payload": "tree 824094895926eec36b479794f8c2edf638bbef5b\nparent 0f446724370646a3332911e03c287d91772aa515\nparent 65f10e0ffc0359a0af6575711d6a4cc9b96afd7a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423478061 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423478066 +0100\n\nMerge pull request #5764\n\n65f10e0 fix jonasschnelli's gitian key (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cefea9c4bf8880628157113cc44dcb9ffbcd6de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cefea9c4bf8880628157113cc44dcb9ffbcd6de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cefea9c4bf8880628157113cc44dcb9ffbcd6de/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f446724370646a3332911e03c287d91772aa515",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f446724370646a3332911e03c287d91772aa515",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f446724370646a3332911e03c287d91772aa515"
      },
      {
        "sha": "65f10e0ffc0359a0af6575711d6a4cc9b96afd7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65f10e0ffc0359a0af6575711d6a4cc9b96afd7a"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe44c0fbd4eb3b57ff658f48a1e7af67e2d25dda",
        "filename": "contrib/gitian-downloader/jonasschnelli-key.pgp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cefea9c4bf8880628157113cc44dcb9ffbcd6de/contrib/gitian-downloader/jonasschnelli-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cefea9c4bf8880628157113cc44dcb9ffbcd6de/contrib/gitian-downloader/jonasschnelli-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/jonasschnelli-key.pgp?ref=5cefea9c4bf8880628157113cc44dcb9ffbcd6de"
      },
      {
        "sha": "96140fe171651577d56ce75c3ce50b81026dadac",
        "filename": "contrib/gitian-downloader/jonasschnelli.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f446724370646a3332911e03c287d91772aa515/contrib/gitian-downloader/jonasschnelli.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f446724370646a3332911e03c287d91772aa515/contrib/gitian-downloader/jonasschnelli.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/jonasschnelli.pgp?ref=0f446724370646a3332911e03c287d91772aa515"
      }
    ]
  },
  {
    "sha": "7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjI1NTc3ZjZiOGJjZGMzYjRmMTA5NzE3YjExYTFhNmE4ZWUzZWQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T11:48:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T11:48:38Z"
      },
      "message": "Merge pull request #5739\n\nf4b2078 Replace difficulty readjustment blocks with Interval() (Shaul Kfir)",
      "tree": {
        "sha": "6656768049de60d707a1996a660b7de5aba12a72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6656768049de60d707a1996a660b7de5aba12a72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2J6WAAoJEHSBCwEjRsmmw2kIAMazSNbLdUFBhvi2yxyMhRKz\ndsF7YvIb80zzG7QudV7lkGjC4AWJulAECxbLm04j/YyctJkm2p/0BV2J3BsKkoaH\nNVqNY69uNA46F3sFEPCa99LJn2asn7hEriagoLKGYswVfRHG18WmkW4u912tBhZU\n5BwtAnBCDET9f1sOLl2RiHMrW+avzh7MoXsnAfowLqJvha+HzfYkDKYOaW0e+tIS\nNz1J/0h3Fxizxpud4fM+MKEYkNFdZTVRzeAViCjvbne6OvFdp0e4kV4PBDNEoHTY\nK2ss4DEbIr7cKFvAbxtH1B9Ihvkj8phgaT0TAinKBVM6iRt+ol01CPBhTx9ADsg=\n=3qAm\n-----END PGP SIGNATURE-----",
        "payload": "tree 6656768049de60d707a1996a660b7de5aba12a72\nparent 5cefea9c4bf8880628157113cc44dcb9ffbcd6de\nparent f4b2078f721887b8b913464e197f6eaae9086938\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423482498 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423482518 +0100\n\nMerge pull request #5739\n\nf4b2078 Replace difficulty readjustment blocks with Interval() (Shaul Kfir)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cefea9c4bf8880628157113cc44dcb9ffbcd6de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cefea9c4bf8880628157113cc44dcb9ffbcd6de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cefea9c4bf8880628157113cc44dcb9ffbcd6de"
      },
      {
        "sha": "f4b2078f721887b8b913464e197f6eaae9086938",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4b2078f721887b8b913464e197f6eaae9086938",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4b2078f721887b8b913464e197f6eaae9086938"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e3ae5cff42855965fc8ee09f57eb3dac7a1e3b29",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6",
        "patch": "@@ -44,7 +44,7 @@ Value GetNetworkHashPS(int lookup, int height) {\n \n     // If lookup is -1, then use blocks since last difficulty change.\n     if (lookup <= 0)\n-        lookup = pb->nHeight % 2016 + 1;\n+        lookup = pb->nHeight % Params().Interval() + 1;\n \n     // If lookup is larger than chain, then set it to chain length.\n     if (lookup > pb->nHeight)"
      }
    ]
  },
  {
    "sha": "f69941620ba8716679c141b973dfa24d5623b9ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjk5NDE2MjBiYTg3MTY2NzljMTQxYjk3M2RmYTI0ZDU2MjNiOWFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T11:52:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T11:53:00Z"
      },
      "message": "Merge #5623: Make nicer pull request merge messages\n\n1078fb0 Make nicer pull request merge messages (BtcDrak)",
      "tree": {
        "sha": "89179c6f8f4103c098bbdeb893f11399f02216b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89179c6f8f4103c098bbdeb893f11399f02216b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f69941620ba8716679c141b973dfa24d5623b9ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2J+cAAoJEHSBCwEjRsmmzOIH/AlmwYSs+Xpz1S0YKLkpRqau\n5N8Y1a76dorURgmZQEslEZtYlDxvMsSLMeebOyhv5sdBU8Oux4wAs1WKmMQANnn9\nu8Y4bWXaIPtGIhT7OMe8qDW+6yNsIErkdGyNFOmTEFIyYCnQ53XSmj6rdp+ZoBvh\nKPjVNdkEdpYAd+6Ht4LD/v3K60WkJxeMXU7aHkYpvKzJ5yquEx/z+g3UwV+xwlp0\n7mtOkwh/c252hYsWwimlVTvOBY6lf+ReI0XlsihjvIEbHjhSrm8z0wdB+h9c18lh\ntmgF52hiANixlUEfvE5teyRi3i2PCvlSbUuSBUyVz545lEogjbISo0ffDHgrIwI=\n=ZvRO\n-----END PGP SIGNATURE-----",
        "payload": "tree 89179c6f8f4103c098bbdeb893f11399f02216b8\nparent 7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6\nparent 1078fb08851442bcd7750c3d5015dc1fe7e4d927\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423482754 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423482780 +0100\n\nMerge #5623: Make nicer pull request merge messages\n\n1078fb0 Make nicer pull request merge messages (BtcDrak)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f69941620ba8716679c141b973dfa24d5623b9ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f69941620ba8716679c141b973dfa24d5623b9ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f69941620ba8716679c141b973dfa24d5623b9ae/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7225577f6b8bcdc3b4f109717b11a1a6a8ee3ed6"
      },
      {
        "sha": "1078fb08851442bcd7750c3d5015dc1fe7e4d927",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1078fb08851442bcd7750c3d5015dc1fe7e4d927",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1078fb08851442bcd7750c3d5015dc1fe7e4d927"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7e3dad49d2edbf3f7aebafd81cad9d6cb4fac2be",
        "filename": "contrib/devtools/github-merge.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f69941620ba8716679c141b973dfa24d5623b9ae/contrib/devtools/github-merge.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f69941620ba8716679c141b973dfa24d5623b9ae/contrib/devtools/github-merge.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.sh?ref=f69941620ba8716679c141b973dfa24d5623b9ae",
        "patch": "@@ -82,13 +82,15 @@ function cleanup() {\n }\n \n # Create unsigned merge commit.\n+PRTITLE=`curl -s https://api.github.com/repos/$REPO/pulls/$PULL | grep -e '  \"title\": \".*\",'| awk -F'\"' '{print $4}'`\n+MERGEMESSAGE=\"Merge #$PULL: $PRTITLE\"\n (\n-  echo \"Merge pull request #$PULL\"\n+  echo $MERGEMESSAGE\n   echo \"\"\n   git log --no-merges --topo-order --pretty='format:%h %s (%an)' pull/\"$PULL\"/base..pull/\"$PULL\"/head\n )>\"$TMPDIR/message\"\n if git merge -q --commit --no-edit --no-ff -m \"$(<\"$TMPDIR/message\")\" pull/\"$PULL\"/head; then\n-  if [ \"d$(git log --pretty='format:%s' -n 1)\" != \"dMerge pull request #$PULL\" ]; then\n+  if [ \"d$(git log --pretty='format:%s' -n 1)\" != \"d$MERGEMESSAGE\" ]; then\n     echo \"ERROR: Creating merge failed (already merged?).\" >&2\n     cleanup\n     exit 4"
      }
    ]
  },
  {
    "sha": "beff11a3a1282e674a07fcb285a999cb4a264ba3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWZmMTFhM2ExMjgyZTY3NGEwN2ZjYjI4NWE5OTljYjRhMjY0YmEz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T11:55:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T11:57:09Z"
      },
      "message": "Merge #5679: Get rid of DetectShutdownThread\n\n28ee7e8 Get rid of DetectShutdownThread (Wladimir J. van der Laan)",
      "tree": {
        "sha": "35e614669a1a82de8ec180305b4fdc348fcbed4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35e614669a1a82de8ec180305b4fdc348fcbed4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/beff11a3a1282e674a07fcb285a999cb4a264ba3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2KCVAAoJEHSBCwEjRsmmklQIALmaDlAlXr7IUEVeYPwXGURG\nyVFwzUhHSmTKIGK7hDar4pMX5BYH/jTUZNmOTofB8MQyjCOUnKRqhVqO1vw07x+P\nR2ONJ3I3bFqILTtX6WafSaWmapbgQVrSLNXTtDbXO0xlmf0wOL59HSmWyLlvgoNW\nhURRoeNrKkwEGGeeoeYlgD+NrDVGup29hurdPoE0WsAVeML4DwesBlq/zyFGMTqn\nrd9UD4Wg4hdMjOMqzPAaCnqwVXPMhS4mbwqxdafaDEGmELWj9A/RelSl7mAPHI/n\n1hiJDcpBshXUc5WDYCdblRiUGlmaqkgld8kgwiljh02NQ/ZFhHOqwa2wrECQmoE=\n=dNU1\n-----END PGP SIGNATURE-----",
        "payload": "tree 35e614669a1a82de8ec180305b4fdc348fcbed4e\nparent f69941620ba8716679c141b973dfa24d5623b9ae\nparent 28ee7e8b8c658bab4a5e13a13254950e226453a7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423482930 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423483029 +0100\n\nMerge #5679: Get rid of DetectShutdownThread\n\n28ee7e8 Get rid of DetectShutdownThread (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beff11a3a1282e674a07fcb285a999cb4a264ba3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/beff11a3a1282e674a07fcb285a999cb4a264ba3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beff11a3a1282e674a07fcb285a999cb4a264ba3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f69941620ba8716679c141b973dfa24d5623b9ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f69941620ba8716679c141b973dfa24d5623b9ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f69941620ba8716679c141b973dfa24d5623b9ae"
      },
      {
        "sha": "28ee7e8b8c658bab4a5e13a13254950e226453a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28ee7e8b8c658bab4a5e13a13254950e226453a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28ee7e8b8c658bab4a5e13a13254950e226453a7"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 3,
      "deletions": 13
    },
    "files": [
      {
        "sha": "a0a96c2dfa61750d9c8764852a11591940b10953",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beff11a3a1282e674a07fcb285a999cb4a264ba3/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beff11a3a1282e674a07fcb285a999cb4a264ba3/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=beff11a3a1282e674a07fcb285a999cb4a264ba3",
        "patch": "@@ -33,7 +33,7 @@\n \n static bool fDaemon;\n \n-void DetectShutdownThread(boost::thread_group* threadGroup)\n+void WaitForShutdown(boost::thread_group* threadGroup)\n {\n     bool fShutdown = ShutdownRequested();\n     // Tell the main threads to shutdown.\n@@ -56,7 +56,6 @@ void DetectShutdownThread(boost::thread_group* threadGroup)\n bool AppInit(int argc, char* argv[])\n {\n     boost::thread_group threadGroup;\n-    boost::thread* detectShutdownThread = NULL;\n \n     bool fRet = false;\n \n@@ -144,7 +143,6 @@ bool AppInit(int argc, char* argv[])\n #endif\n         SoftSetBoolArg(\"-server\", true);\n \n-        detectShutdownThread = new boost::thread(boost::bind(&DetectShutdownThread, &threadGroup));\n         fRet = AppInit2(threadGroup);\n     }\n     catch (const std::exception& e) {\n@@ -155,20 +153,12 @@ bool AppInit(int argc, char* argv[])\n \n     if (!fRet)\n     {\n-        if (detectShutdownThread)\n-            detectShutdownThread->interrupt();\n-\n         threadGroup.interrupt_all();\n         // threadGroup.join_all(); was left out intentionally here, because we didn't re-test all of\n         // the startup-failure cases to make sure they don't result in a hang due to some\n         // thread-blocking-waiting-for-another-thread-during-startup case\n-    }\n-\n-    if (detectShutdownThread)\n-    {\n-        detectShutdownThread->join();\n-        delete detectShutdownThread;\n-        detectShutdownThread = NULL;\n+    } else {\n+        WaitForShutdown(&threadGroup);\n     }\n     Shutdown();\n "
      }
    ]
  },
  {
    "sha": "183ca292bd244973698347a6744836e2e9ea8a89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODNjYTI5MmJkMjQ0OTczNjk4MzQ3YTY3NDQ4MzZlMmU5ZWE4YTg5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T12:07:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T12:22:35Z"
      },
      "message": "Merge #5699: Split logic to undo txin's off DisconnectBlock.\n\neb1c2cd Split logic to undo txin's off DisconnectBlock. (Daniel Kraft)",
      "tree": {
        "sha": "a4775b1d6b230e4bda9f6e638d97d3e6bac23d55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4775b1d6b230e4bda9f6e638d97d3e6bac23d55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/183ca292bd244973698347a6744836e2e9ea8a89",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2KaLAAoJEHSBCwEjRsmmoMkIALxF2bDO/9Y2AieHnS4r/jzr\nmaQES78kLjdd9qnape65MNEUp4etJz1sDifLkc36znHpQN5+HHF1O+3OzeXUDg2B\nj0adZ8VMWQbtWGhFtmDo2Y2iVWaKkGsHc8ip0ZSPRM/G/PtalN21CR+Z1QJYyalj\noZqXx4tO8YauBBe4cyVX1T9+LGWOSSnC1Hd82m2W2GIlIjHZP4usSJ6LIZNKEJjs\n5ZAd+u+grxBUC2UHN7l++HQsaHGtUKUAXGN+4/YlJ94qTeAPLmQgQo/U25SMdI6q\n3jC3PoLLZUtHZxWKTrmqy+lKMAn3e8FfL7VWTKV1gyRUVweGvxaxyGBlmaOUqrk=\n=D7uF\n-----END PGP SIGNATURE-----",
        "payload": "tree a4775b1d6b230e4bda9f6e638d97d3e6bac23d55\nparent beff11a3a1282e674a07fcb285a999cb4a264ba3\nparent eb1c2cd37f75cf4d0e85970932b9774b2d073225\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423483649 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423484555 +0100\n\nMerge #5699: Split logic to undo txin's off DisconnectBlock.\n\neb1c2cd Split logic to undo txin's off DisconnectBlock. (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/183ca292bd244973698347a6744836e2e9ea8a89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/183ca292bd244973698347a6744836e2e9ea8a89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/183ca292bd244973698347a6744836e2e9ea8a89/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "beff11a3a1282e674a07fcb285a999cb4a264ba3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beff11a3a1282e674a07fcb285a999cb4a264ba3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/beff11a3a1282e674a07fcb285a999cb4a264ba3"
      },
      {
        "sha": "eb1c2cd37f75cf4d0e85970932b9774b2d073225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb1c2cd37f75cf4d0e85970932b9774b2d073225",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb1c2cd37f75cf4d0e85970932b9774b2d073225"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 38,
      "deletions": 24
    },
    "files": [
      {
        "sha": "fb2b2482e6028ce51085f297483d808a168ee0d7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 24,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/183ca292bd244973698347a6744836e2e9ea8a89/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/183ca292bd244973698347a6744836e2e9ea8a89/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=183ca292bd244973698347a6744836e2e9ea8a89",
        "patch": "@@ -1588,6 +1588,39 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n \n } // anon namespace\n \n+/**\n+ * Apply the undo operation of a CTxInUndo to the given chain state.\n+ * @param undo The undo object.\n+ * @param view The coins view to which to apply the changes.\n+ * @param out The out point that corresponds to the tx input.\n+ * @return True on success.\n+ */\n+static bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint& out)\n+{\n+    bool fClean = true;\n+\n+    CCoinsModifier coins = view.ModifyCoins(out.hash);\n+    if (undo.nHeight != 0) {\n+        // undo data contains height: this is the last output of the prevout tx being spent\n+        if (!coins->IsPruned())\n+            fClean = fClean && error(\"%s: undo data overwriting existing transaction\", __func__);\n+        coins->Clear();\n+        coins->fCoinBase = undo.fCoinBase;\n+        coins->nHeight = undo.nHeight;\n+        coins->nVersion = undo.nVersion;\n+    } else {\n+        if (coins->IsPruned())\n+            fClean = fClean && error(\"%s: undo data adding output to missing transaction\", __func__);\n+    }\n+    if (coins->IsAvailable(out.n))\n+        fClean = fClean && error(\"%s: undo data overwriting existing output\", __func__);\n+    if (coins->vout.size() < out.n+1)\n+        coins->vout.resize(out.n+1);\n+    coins->vout[out.n] = undo.txout;\n+\n+    return fClean;\n+}\n+\n bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n {\n     assert(pindex->GetBlockHash() == view.GetBestBlock());\n@@ -1613,11 +1646,8 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         uint256 hash = tx.GetHash();\n \n         // Check that all outputs are available and match the outputs in the block itself\n-        // exactly. Note that transactions with only provably unspendable outputs won't\n-        // have outputs available even in the block itself, so we handle that case\n-        // specially with outsEmpty.\n+        // exactly.\n         {\n-        CCoins outsEmpty;\n         CCoinsModifier outs = view.ModifyCoins(hash);\n         outs->ClearUnspendable();\n \n@@ -1642,24 +1672,8 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 const CTxInUndo &undo = txundo.vprevout[j];\n-                CCoinsModifier coins = view.ModifyCoins(out.hash);\n-                if (undo.nHeight != 0) {\n-                    // undo data contains height: this is the last output of the prevout tx being spent\n-                    if (!coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing transaction\");\n-                    coins->Clear();\n-                    coins->fCoinBase = undo.fCoinBase;\n-                    coins->nHeight = undo.nHeight;\n-                    coins->nVersion = undo.nVersion;\n-                } else {\n-                    if (coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock(): undo data adding output to missing transaction\");\n-                }\n-                if (coins->IsAvailable(out.n))\n-                    fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing output\");\n-                if (coins->vout.size() < out.n+1)\n-                    coins->vout.resize(out.n+1);\n-                coins->vout[out.n] = undo.txout;\n+                if (!ApplyTxInUndo(undo, view, out))\n+                    fClean = false;\n             }\n         }\n     }\n@@ -1670,9 +1684,9 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n     if (pfClean) {\n         *pfClean = fClean;\n         return true;\n-    } else {\n-        return fClean;\n     }\n+\n+    return fClean;\n }\n \n void static FlushBlockFile(bool fFinalize = false)"
      }
    ]
  },
  {
    "sha": "a9565863e09a32729bd6ce33f31889099b3d75cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTU2NTg2M2UwOWEzMjcyOWJkNmNlMzNmMzE4ODkwOTliM2Q3NWNi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T12:49:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-09T12:50:56Z"
      },
      "message": "Merge #5629: [Qt] prevent amount overflow problem with payment requests\n\na651668 [Qt] prevent amount overflow problem with payment requests (Philip Kaufmann)",
      "tree": {
        "sha": "5c2f7367f506dc03c57ae5842cb83b3e1d69cabf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c2f7367f506dc03c57ae5842cb83b3e1d69cabf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9565863e09a32729bd6ce33f31889099b3d75cb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2K0wAAoJEHSBCwEjRsmmtKcH/3BOOKow1nQBJXaw2TcFIuTJ\nRHjQ2X/k0zTrYaXe/rLiTAlPZFDPAzDVWZFxHdaxtcAWvqxXGsny0wocRS0nAl27\nEirXQXJj8s9d6Sx7AfcPMLHGMY+dZo5zKru9JGWM8XiDQ6leSy8tk1Z6I1YRlp6X\n12YokZETd+uhWj2/XEhp8X6cOpKSiD2mpMbGEPH25E7J/mwC0b69OgK8ME9DicL8\nVyyF4lFjq0oa62Tz1W9Xdaj6jlaenJA4g0uHDluilk15wOTJ1Pbyd+b+ZyATlt1t\nf9neHF0vKL+v2Ip4BiNo/YVJ+IGBFcGAZQpmFRGyuOP3I6VW3bivNEqPF7vczJY=\n=ktz2\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c2f7367f506dc03c57ae5842cb83b3e1d69cabf\nparent 183ca292bd244973698347a6744836e2e9ea8a89\nparent a6516686dcf0b93dd0bcae304e74f9ac69cb305c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423486191 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423486256 +0100\n\nMerge #5629: [Qt] prevent amount overflow problem with payment requests\n\na651668 [Qt] prevent amount overflow problem with payment requests (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9565863e09a32729bd6ce33f31889099b3d75cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9565863e09a32729bd6ce33f31889099b3d75cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9565863e09a32729bd6ce33f31889099b3d75cb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "183ca292bd244973698347a6744836e2e9ea8a89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/183ca292bd244973698347a6744836e2e9ea8a89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/183ca292bd244973698347a6744836e2e9ea8a89"
      },
      {
        "sha": "a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6516686dcf0b93dd0bcae304e74f9ac69cb305c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6516686dcf0b93dd0bcae304e74f9ac69cb305c"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 69,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9aab944f6b5f383a82abc0d3a82b37ad1dbb138d",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a9565863e09a32729bd6ce33f31889099b3d75cb",
        "patch": "@@ -569,6 +569,14 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n             return false;\n         }\n \n+        // Bitcoin amounts are stored as (optional) uint64 in the protobuf messages (see paymentrequest.proto),\n+        // but CAmount is defined as int64_t. Because of that we need to verify that amounts are in a valid range\n+        // and no overflow has happened.\n+        if (!verifyAmount(sendingTo.second)) {\n+            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            return false;\n+        }\n+\n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n         if (txOut.IsDust(::minRelayTxFee)) {\n@@ -580,6 +588,11 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n         }\n \n         recipient.amount += sendingTo.second;\n+        // Also verify that the final amount is still in a valid range after adding additional amounts.\n+        if (!verifyAmount(recipient.amount)) {\n+            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            return false;\n+        }\n     }\n     // Store addresses and format them to fit nicely into the GUI\n     recipient.address = addresses.join(\"<br />\");\n@@ -768,3 +781,15 @@ bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails\n     }\n     return fVerified;\n }\n+\n+bool PaymentServer::verifyAmount(const CAmount& requestAmount)\n+{\n+    bool fVerified = MoneyRange(requestAmount);\n+    if (!fVerified) {\n+        qWarning() << QString(\"PaymentServer::%1: Payment request amount out of allowed range (%2, allowed 0 - %3).\")\n+            .arg(__func__)\n+            .arg(requestAmount)\n+            .arg(MAX_MONEY);\n+    }\n+    return fVerified;\n+}"
      },
      {
        "sha": "6bf5ac2eea291fdae1eee4b82583d99ce69dc1a3",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=a9565863e09a32729bd6ce33f31889099b3d75cb",
        "patch": "@@ -95,6 +95,8 @@ class PaymentServer : public QObject\n     static bool verifyNetwork(const payments::PaymentDetails& requestDetails);\n     // Verify if the payment request is expired\n     static bool verifyExpired(const payments::PaymentDetails& requestDetails);\n+    // Verify the payment request amount is valid\n+    static bool verifyAmount(const CAmount& requestAmount);\n \n signals:\n     // Fired when a valid payment request is received"
      },
      {
        "sha": "c548ffe429fdacd45ab3e03aa2094895c5c9bf14",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=a9565863e09a32729bd6ce33f31889099b3d75cb",
        "patch": "@@ -433,3 +433,28 @@ dGluZyB0ZXN0bmV0ISqAAXSQG8+GFA18VaKarlYrOz293rNMIub0swKGcQm8jAGX\\\n HSLaRgHfUDeEPr4hydy4dtfu59KNwe2xsHOHu/SpO4L8SrA4Dm9A7SlNBVWdcLbw\\\n d2hj739GDLz0b5KuJ2SG6VknMRQM976w/m2qlq0ccVGaaZ2zMIGfpzL3p6adwx/5\\\n \";\n+\n+//\n+// Payment request with amount overflow (amount is set to 21000001 BTC)\n+//\n+const char* paymentrequest5_cert2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n+ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n+mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n+wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n+RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n+KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n++S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n+3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n+tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n+yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n+dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iTAoEdGVzdBIkCIDC9P+F\\\n+vt0DEhl2qRQErGqUUwSsaMpDvWIaGnJGNQqi8oisGLzcrKYFKhhUZXN0aW5nIGFt\\\n+b3VudCBvdmVyZmxvdyEqgAG8S7WEDUC6tCL6q2CTBjop/AitgEy31RL9IqYruytR\\\n+iEBFUrBDJZU+UEezGwr7/zoECjo5ZY3PmtZcM2sILNjyweJF6XVzGqTxUw6pN6sW\\\n+XR2T3Gy2LzRvhVA25QgGqpz0/juS2BtmNbsZPkN9gMMwKimgzc+PuCzmEKwPK9cQ\\\n+YQ==\\\n+\";"
      },
      {
        "sha": "e2ec439b2e39a1550230b4744f24a4feef8bbac6",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9565863e09a32729bd6ce33f31889099b3d75cb/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=a9565863e09a32729bd6ce33f31889099b3d75cb",
        "patch": "@@ -7,7 +7,10 @@\n #include \"optionsmodel.h\"\n #include \"paymentrequestdata.h\"\n \n+#include \"amount.h\"\n #include \"random.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -184,6 +187,20 @@ void PaymentServerTests::paymentServerTests()\n     tempFile.close();\n     QCOMPARE(PaymentServer::readPaymentRequestFromFile(tempFile.fileName(), r.paymentRequest), false);\n \n+    // Payment request with amount overflow (amount is set to 21000001 BTC):\n+    data = DecodeBase64(paymentrequest5_cert2_BASE64);\n+    byteArray = QByteArray((const char*)&data[0], data.size());\n+    r.paymentRequest.parse(byteArray);\n+    // Ensure the request is initialized\n+    QVERIFY(r.paymentRequest.IsInitialized());\n+    // Extract address and amount from the request\n+    QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n+    foreach (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+        CTxDestination dest;\n+        if (ExtractDestination(sendingTo.first, dest))\n+            QCOMPARE(PaymentServer::verifyAmount(sendingTo.second), false);\n+    }\n+\n     delete server;\n }\n "
      }
    ]
  },
  {
    "sha": "d48ce48093faf1a0778b424397a2879a93e5fb5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDhjZTQ4MDkzZmFmMWEwNzc4YjQyNDM5N2EyODc5YTkzZTVmYjVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-10T11:04:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-10T11:08:07Z"
      },
      "message": "Merge #5548: [REST] add /rest/chaininfos\n\n2c0f901 [REST] rest/chaininfos add documentation (Jonas Schnelli)\n59582c8 [REST] add /rest/chaininfos (Jonas Schnelli)",
      "tree": {
        "sha": "46c66a3c288b70603cb2b7069e57b6ad9e7f6e75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46c66a3c288b70603cb2b7069e57b6ad9e7f6e75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d48ce48093faf1a0778b424397a2879a93e5fb5e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU2eaXAAoJEHSBCwEjRsmmG80H/1X+0DurdSCgmb/CE3iVBMqZ\nUTkc9kBE97rTobRZO0J28BXT1roqzvtp8O9Ws71Ti0V9g8aNn7itNOdOAFXSmJhP\ntp9fDfAbTst0Equ3YSkdAcpqOnq0yDXXBIJyu3v/Pna6vtkAlrMll7Q02LxH5oPE\nD0Sjik6U9mKXfSxw2PGli2PvNPxSkAIU102qfZL3js0sM5xiiLX03Z8mJFPNaSk6\n1bx4BU024g6bksn7+92UNDirNFtuVteyD71rXGRK8Iwpy83tKOD4BvmgLFP0D27X\nknTXOdHiUcXDfjlxVxkTBXRw5r6JcLwrksKV1PsQvPJk6a9aBD02XBWFyxCjU+A=\n=v5+n\n-----END PGP SIGNATURE-----",
        "payload": "tree 46c66a3c288b70603cb2b7069e57b6ad9e7f6e75\nparent a9565863e09a32729bd6ce33f31889099b3d75cb\nparent 2c0f901ea90e3efab5e15abeba011597cfdd92c1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423566290 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423566487 +0100\n\nMerge #5548: [REST] add /rest/chaininfos\n\n2c0f901 [REST] rest/chaininfos add documentation (Jonas Schnelli)\n59582c8 [REST] add /rest/chaininfos (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48ce48093faf1a0778b424397a2879a93e5fb5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d48ce48093faf1a0778b424397a2879a93e5fb5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48ce48093faf1a0778b424397a2879a93e5fb5e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9565863e09a32729bd6ce33f31889099b3d75cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9565863e09a32729bd6ce33f31889099b3d75cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9565863e09a32729bd6ce33f31889099b3d75cb"
      },
      {
        "sha": "2c0f901ea90e3efab5e15abeba011597cfdd92c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c0f901ea90e3efab5e15abeba011597cfdd92c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c0f901ea90e3efab5e15abeba011597cfdd92c1"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 51,
      "deletions": 5
    },
    "files": [
      {
        "sha": "23154ee903ec54a40172bd6e95118cdc044db671",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48ce48093faf1a0778b424397a2879a93e5fb5e/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48ce48093faf1a0778b424397a2879a93e5fb5e/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=d48ce48093faf1a0778b424397a2879a93e5fb5e",
        "patch": "@@ -10,6 +10,8 @@ Supported API\n Given a transaction hash,\n Returns a transaction, in binary, hex-encoded binary or JSON formats.\n \n+For full TX query capability, one must enable the transaction index via \"txindex=1\" command line / configuration option.\n+\n `GET /rest/block/BLOCK-HASH.{bin|hex|json}`\n `GET /rest/block/notxdetails/BLOCK-HASH.{bin|hex|json}`\n \n@@ -20,7 +22,17 @@ The HTTP request and response are both handled entirely in-memory, thus making m\n \n With the /notxdetails/ option JSON response will only contain the transaction hash instead of the complete transaction details. The option only affects the JSON response.\n \n-For full TX query capability, one must enable the transaction index via \"txindex=1\" command line / configuration option.\n+`GET /rest/chaininfo.json`\n+\n+Returns various state info regarding block chain processing.\n+Only supports JSON as output format.\n+* chain : (string) current network name as defined in BIP70 (main, test, regtest)\n+* blocks : (numeric) the current number of blocks processed in the server\n+* headers : (numeric) the current number of headers we have validated\n+* bestblockhash : (string) the hash of the currently best block\n+* difficulty : (numeric) the current difficulty\n+* verificationprogress : (numeric) estimate of verification progress [0..1]\n+* chainwork : (string) total amount of work in active chain, in hexadecimal\n \n Risks\n -------------"
      },
      {
        "sha": "a9d41cf367273d5ad126eda937fa864541f1eeee",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48ce48093faf1a0778b424397a2879a93e5fb5e/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48ce48093faf1a0778b424397a2879a93e5fb5e/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=d48ce48093faf1a0778b424397a2879a93e5fb5e",
        "patch": "@@ -78,7 +78,7 @@ def run_test(self):\n \n         # check hex format response\n         hex_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n-        assert_equal(response.status, 200)\n+        assert_equal(hex_string.status, 200)\n         assert_greater_than(int(response.getheader('content-length')), 10)\n \n         # check block tx details\n@@ -106,5 +106,12 @@ def run_test(self):\n         for tx in txs:\n             assert_equal(tx in json_obj['tx'], True)\n \n+        #test rest bestblock\n+        bb_hash = self.nodes[0].getbestblockhash()\n+        \n+        json_string = http_get_call(url.hostname, url.port, '/rest/chaininfo.json')\n+        json_obj = json.loads(json_string)\n+        assert_equal(json_obj['bestblockhash'], bb_hash)\n+\n if __name__ == '__main__':\n     RESTTest ().main ()"
      },
      {
        "sha": "adc2d56284205da0a7c3cb05d2c1bc34d6d0122e",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 3,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48ce48093faf1a0778b424397a2879a93e5fb5e/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48ce48093faf1a0778b424397a2879a93e5fb5e/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=d48ce48093faf1a0778b424397a2879a93e5fb5e",
        "patch": "@@ -95,7 +95,7 @@ static bool rest_headers(AcceptedConnection* conn,\n                          bool fRun)\n {\n     vector<string> params;\n-    enum RetFormat rf = ParseDataFormat(params, strReq);\n+    const RetFormat rf = ParseDataFormat(params, strReq);\n     vector<string> path;\n     boost::split(path, params[0], boost::is_any_of(\"/\"));\n \n@@ -159,7 +159,7 @@ static bool rest_block(AcceptedConnection* conn,\n                        bool showTxDetails)\n {\n     vector<string> params;\n-    enum RetFormat rf = ParseDataFormat(params, strReq);\n+    const RetFormat rf = ParseDataFormat(params, strReq);\n \n     string hashStr = params[0];\n     uint256 hash;\n@@ -226,13 +226,39 @@ static bool rest_block_notxdetails(AcceptedConnection* conn,\n     return rest_block(conn, strReq, mapHeaders, fRun, false);\n }\n \n+static bool rest_chaininfo(AcceptedConnection* conn,\n+                                   const std::string& strReq,\n+                                   const std::map<std::string, std::string>& mapHeaders,\n+                                   bool fRun)\n+{\n+    vector<string> params;\n+    const RetFormat rf = ParseDataFormat(params, strReq);\n+    \n+    switch (rf) {\n+    case RF_JSON: {\n+        Array rpcParams;\n+        Value chainInfoObject = getblockchaininfo(rpcParams, false);\n+        \n+        string strJSON = write_string(chainInfoObject, false) + \"\\n\";\n+        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        return true;\n+    }\n+    default: {\n+        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+    }\n+    }\n+    \n+    // not reached\n+    return true; // continue to process further HTTP reqs on this cxn\n+}\n+\n static bool rest_tx(AcceptedConnection* conn,\n                     const std::string& strReq,\n                     const std::map<std::string, std::string>& mapHeaders,\n                     bool fRun)\n {\n     vector<string> params;\n-    enum RetFormat rf = ParseDataFormat(params, strReq);\n+    const RetFormat rf = ParseDataFormat(params, strReq);\n \n     string hashStr = params[0];\n     uint256 hash;\n@@ -287,6 +313,7 @@ static const struct {\n       {\"/rest/tx/\", rest_tx},\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n       {\"/rest/block/\", rest_block_extended},\n+      {\"/rest/chaininfo\", rest_chaininfo},\n       {\"/rest/headers/\", rest_headers},\n };\n "
      }
    ]
  },
  {
    "sha": "6f50dbd2fdeef7bc24317a487936502e25a05de9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjUwZGJkMmZkZWVmN2JjMjQzMTdhNDg3OTM2NTAyZTI1YTA1ZGU5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-09T20:28:35Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-10T18:23:57Z"
      },
      "message": "Fix NegateSignatureS to not duplicate last byte of S\n\nNegateSignatureS is called with a signature without a hashtype, so\ndo not save the last byte and append it after S negation.\n\nUpdates the two tests which were affected by this bug.",
      "tree": {
        "sha": "cffe21b53032fc9faa6f55b090cf2222c7a03857",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cffe21b53032fc9faa6f55b090cf2222c7a03857"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f50dbd2fdeef7bc24317a487936502e25a05de9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f50dbd2fdeef7bc24317a487936502e25a05de9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f50dbd2fdeef7bc24317a487936502e25a05de9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f50dbd2fdeef7bc24317a487936502e25a05de9/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4e3f99f05273e4d0fae7246d3afe5a33c52ee0"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3b2f64d766df3144c12539ec8157ec3eada0f1fb",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f50dbd2fdeef7bc24317a487936502e25a05de9/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f50dbd2fdeef7bc24317a487936502e25a05de9/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=6f50dbd2fdeef7bc24317a487936502e25a05de9",
        "patch": "@@ -696,7 +696,7 @@\n     \"BIP66 example 11, with DERSIG\"\n ],\n [\n-    \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n+    \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n     \"LOW_S\",\n     \"P2PK with high S\""
      },
      {
        "sha": "2b4b0989b99063ec7220a566b5e7826fcfc87d11",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f50dbd2fdeef7bc24317a487936502e25a05de9/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f50dbd2fdeef7bc24317a487936502e25a05de9/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=6f50dbd2fdeef7bc24317a487936502e25a05de9",
        "patch": "@@ -814,7 +814,7 @@\n     \"BIP66 example 12, with DERSIG\"\n ],\n [\n-    \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n+    \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n     \"\",\n     \"P2PK with high S but no LOW_S\""
      },
      {
        "sha": "35a7f6639ac643c6599def45884eca1e7bb59128",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f50dbd2fdeef7bc24317a487936502e25a05de9/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f50dbd2fdeef7bc24317a487936502e25a05de9/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=6f50dbd2fdeef7bc24317a487936502e25a05de9",
        "patch": "@@ -107,7 +107,6 @@ void static NegateSignatureS(std::vector<unsigned char>& vchSig) {\n     std::vector<unsigned char> r, s;\n     r = std::vector<unsigned char>(vchSig.begin() + 4, vchSig.begin() + 4 + vchSig[3]);\n     s = std::vector<unsigned char>(vchSig.begin() + 6 + vchSig[3], vchSig.begin() + 6 + vchSig[3] + vchSig[5 + vchSig[3]]);\n-    unsigned char hashtype = vchSig.back();\n \n     // Really ugly to implement mod-n negation here, but it would be feature creep to expose such functionality from libsecp256k1.\n     static const unsigned char order[33] = {\n@@ -141,7 +140,6 @@ void static NegateSignatureS(std::vector<unsigned char>& vchSig) {\n     vchSig.push_back(0x02);\n     vchSig.push_back(s.size());\n     vchSig.insert(vchSig.end(), s.begin(), s.end());\n-    vchSig.push_back(hashtype);\n }\n \n namespace"
      }
    ]
  },
  {
    "sha": "78c6bedb9cd3ed85f829a288146533e3b41f784b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGM2YmVkYjljZDNlZDg1ZjgyOWEyODgxNDY1MzNlM2I0MWY3ODRi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-10T17:11:59Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-02-10T18:25:41Z"
      },
      "message": "Add test for DER-encoding edge case\n\nThe fix to NegateSignatureS caused a test which had been failing\nin IsValidSignatureEncoding to then fail in IsLowDERSignature.\nAdd new test so the original check remains exercised.",
      "tree": {
        "sha": "4121912553a9292039683105611d6917cff5c038",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4121912553a9292039683105611d6917cff5c038"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78c6bedb9cd3ed85f829a288146533e3b41f784b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78c6bedb9cd3ed85f829a288146533e3b41f784b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78c6bedb9cd3ed85f829a288146533e3b41f784b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78c6bedb9cd3ed85f829a288146533e3b41f784b/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f50dbd2fdeef7bc24317a487936502e25a05de9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f50dbd2fdeef7bc24317a487936502e25a05de9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f50dbd2fdeef7bc24317a487936502e25a05de9"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3c52547a64e22fe439545e4561cb931948ad3034",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78c6bedb9cd3ed85f829a288146533e3b41f784b/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78c6bedb9cd3ed85f829a288146533e3b41f784b/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=78c6bedb9cd3ed85f829a288146533e3b41f784b",
        "patch": "@@ -695,6 +695,12 @@\n     \"DERSIG\",\n     \"BIP66 example 11, with DERSIG\"\n ],\n+[\n+    \"0x48 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb12510101\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"DERSIG\",\n+    \"P2PK with multi-byte hashtype, with DERSIG\"\n+],\n [\n     \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\","
      },
      {
        "sha": "34e2c8d61a7dc131159c199dae5a01a0e80d8950",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78c6bedb9cd3ed85f829a288146533e3b41f784b/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78c6bedb9cd3ed85f829a288146533e3b41f784b/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=78c6bedb9cd3ed85f829a288146533e3b41f784b",
        "patch": "@@ -813,6 +813,12 @@\n     \"DERSIG\",\n     \"BIP66 example 12, with DERSIG\"\n ],\n+[\n+    \"0x48 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb12510101\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"\",\n+    \"P2PK with multi-byte hashtype, without DERSIG\"\n+],\n [\n     \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\","
      },
      {
        "sha": "e410b59710c144c2c88d8c0481e317844d18dc60",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78c6bedb9cd3ed85f829a288146533e3b41f784b/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78c6bedb9cd3ed85f829a288146533e3b41f784b/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=78c6bedb9cd3ed85f829a288146533e3b41f784b",
        "patch": "@@ -476,6 +476,12 @@ BOOST_AUTO_TEST_CASE(script_build)\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                                \"BIP66 example 12, with DERSIG\", SCRIPT_VERIFY_DERSIG\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                               \"P2PK with multi-byte hashtype, without DERSIG\", 0\n+                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                               \"P2PK with multi-byte hashtype, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with high S but no LOW_S\", 0"
      }
    ]
  },
  {
    "sha": "99437c51bafd137e94a829e0b4ade55635cc84ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTQzN2M1MWJhZmQxMzdlOTRhODI5ZTBiNGFkZTU1NjM1Y2M4NGFk",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-02-11T13:50:24Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-02-11T13:50:24Z"
      },
      "message": "Add fanquake PGP key",
      "tree": {
        "sha": "319f361c616524a5fc36296ee3181351dbc6641e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/319f361c616524a5fc36296ee3181351dbc6641e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99437c51bafd137e94a829e0b4ade55635cc84ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99437c51bafd137e94a829e0b4ade55635cc84ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99437c51bafd137e94a829e0b4ade55635cc84ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99437c51bafd137e94a829e0b4ade55635cc84ad/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d48ce48093faf1a0778b424397a2879a93e5fb5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48ce48093faf1a0778b424397a2879a93e5fb5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d48ce48093faf1a0778b424397a2879a93e5fb5e"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 63,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9c03ff45226c5629d24e5f9925da7210df0760a5",
        "filename": "contrib/gitian-downloader/fanquake-key.pgp",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99437c51bafd137e94a829e0b4ade55635cc84ad/contrib/gitian-downloader/fanquake-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99437c51bafd137e94a829e0b4ade55635cc84ad/contrib/gitian-downloader/fanquake-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/fanquake-key.pgp?ref=99437c51bafd137e94a829e0b4ade55635cc84ad",
        "patch": "@@ -0,0 +1,63 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: GnuPG/MacGPG2 v2.0.26\n+\n+mQINBFFlV7oBEAC3dRAS7gSWQ1fV4JySD0HMBOtY+Y2oCX8vEuTI4atGcxbwXr4/\n+OElRYhDK6Zirk8rMoKPxmr8OVek5LNnY3gcDffco6NXmZ+wTstQm6oqUxFfgzznG\n+X/ExEVuCqiaPAwdWSKn9tC1GuOqRFcD+p2zmxw5mNH5XdsqaPSEGsKESY1IK+dMv\n+K+YUrfrtexZyb66wCtupYziEeag6iEK/i2x2wewOji6IvtI+wB5FO+YMXw+LKucw\n+PoHUOxjoz6YX3s04UxFaZo4R8x6J9XnJBSB2E5kfsSAzz3xR+zuapXY6H6mo/grq\n+nr3c6ACcbAHnMWwQLYvWzde6iwswhyl0whebsajJH7Rd3G4c1U3L/oj4RwUFmZYU\n+5Prs+Q5PepKAJfBeWCXZtUY2BNFCFj7b2H2NXYFR92Oc2GtoHAYACNeP070I9d3m\n+IeuYhOrOckkunwaijUczq4rb3n3Vaq6YrdwZIzs8fALwc9Th98jj2dCUq0fljpSh\n+UQFnPG83UsNkeWzUSgw+lBeEQqgOqUQQ293MbgRg0mJ8q677Iv+WaFqPKZzXxkwT\n+QCCXhjcBmUKgXIHLFcbfmkR8pCcCToWXBD8CU441cBsootDD7SanPHbpcwZjt74x\n+uLrVoCIyaju0T1jSrsPnm2A/8VkWLSCh1WRAlbjvMr7DwizGnRtzTiB6HQARAQAB\n+tC9NaWNoYWVsIEZvcmQgKGJpdGNvaW4tb3RjKSA8ZmFucXVha2VAZ21haWwuY29t\n+PokCNwQTAQoAIQUCUWVXugIbLwULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAAKCRCU\n+TTX5rD23agJgEAC0ouDjufjCMHL4DkaVkOnFbHzP+nR2Mq7pcjdiPNIt9tj8B6cI\n+PRh/E+tt2iEJJ4lzlfj0uEqjqexmSBaMgY+pFb6ESg42EPQjRQ95oBoyZfp+uL/0\n+KC3+Hh+EgmZGIFPZy2HneVfusiBUz2/YTOoqFkzmHalJe9Yvl2+dO0SUC7i6TUdJ\n++ugSr/91hkjQC52LXgHzurH4zOz7ZjzRtZgUIG3oOx8mtEDf46eJ0IUsr+tWJqOp\n+ce5xFh6nkKfS92B7YjGJ4YrkBHC7F9vmbrtIeuWiaxGzVqhHFmLvQe+4xyOpRgHM\n+kcyD5uJNmSMO9gT3udut4hd0yUKg5rdqaUzqsvv19eNL/pZ7aBK2aDAK/yAi1T7X\n+/nrhBJAU49zg1JRS6atRnhKSyd7wRSwVPJAXfVuelHsUgenSdLmSBxRha+9mL6Lb\n+bLK/Dij/0r2fyhBJx4pV6V1n4BpHjv5ivkpgCvOupx8wx3PIxZq/rx+hK+ZBe2EQ\n+7vq8rmLfBkSavHWyNxXEKWQed+mFS3d+Qsoy90bi7gQygIYNZOIBYwsy+qjCZ3om\n+LwkzRjypH23ps7WmiaoenOaCjRYooNL4qtQwNVaDGYwvbMnXJ8Vb4/2j/Riz7+Ui\n+BBVww+Wd72Fml/OFPDFep6HG/PuwFB9m5hmfSzrA01TIdjcWljtTDneufbkCDQRR\n+ZVe6ARAAvi1IAxn9xKQCCqhsoKOiXNbpnmf6lYnoEwGtgI+0a0YQwtzm39P5T8P0\n+esZ65/Re6jCCHLc23/urFPfW9VfrKPmNJncyzlx7OopJ7G1MWdRLEUzwqSaglC6x\n+Zb4r1xR6eq2lBX6CAa5Q+AuAqkoGCEiYBpTyKij4sXE0c+Y9nIDIZhru7EnZvpL3\n+SQvxzFryQLbWCGri0x9GKXZ2ZcDM7jRi/P+iX6yX6sVvOvyKz6NW2BI5OmpI1JbJ\n+3fIXt/R6Wl2xpAFL/pxtYTYbfL6277HWtLDTqIkkRFKh64JdkH8n4G4m6VNUtGEu\n+qP3SxtyShauxY44WzR0YX4rag6tU2Hks6h1JmyF8aQTBAkdP7UrQ0oxZ8f+iG9n6\n+3GtTxgw2NyrqVMx3kBLm8DipyslbA2wCeZLrW6Co0j3pebJsDrMP/3zcmbJqRSLq\n+qnkcxA4gn5j/N0oe8t26Y2WjovndhoR0QQxw8D/BKoMXbl0lvvRAtcnWtyG0COut\n+AGB2PUbGdAX2Ky+uYKrG4uhu1edfV8JZVvB7NIQGzM2P8F9PrDRz7EtG6z7ky/pq\n+HQwRbqwLWGs4QpQmHZchFmXH7pHmLC8i29W+xYhdeUstvx7oESbunICGrPjJOShJ\n+G4191Zg0m/M6jeWV/v+piUXe3YVrgs42UWFusm5ZIduPUfgqUtkAEQEAAYkEPgQY\n+AQoACQUCUWVXugIbLgIpCRCUTTX5rD23asFdIAQZAQoABgUCUWVXugAKCRAu659c\n+wJUmwaduEACCiiRpBeKF5fSaM0cTb97hAHVQJL9Wk3xvA49YuROsSwtCzq9v+js5\n+f/fE+QV/dIQUNwifEPQk8MqUVKpe1lIXwRp23GinzDAnOhfWnECqrMdR0dP99D49\n+Zb7Dd4LDvP9c0mYtnX/78qQilxWmXhzDXcunnPsfCqsrduk9hMwkjmIrWFeSWSAg\n+BEJDuZ4WLuqjni1udth0iZtZYrDaDgX/RWcTFW8QCc5hLsCRcInAxb75AWfWq6i/\n+s3Ibg5tGm4+UfqGbFPuNyy6ow3ggqkovBp6ABMxe8dAYVXSmM2tKWZXBb3L6eho8\n+QKKzyoezqpbQ2YUaYZ8XAdLuumXCtAHKP3/DI1JBefE0mxi1CXjdLK9sE5OO5KNt\n+FXR8Dnot5C4BHrcaF6Iq2sqbhPxnhcDrEwv2mUgruD7n04LKIztAG0A35rcu6A2i\n+IUq/PsXjS/5rX/p4CeYvnTTspXkhXgkvfhWz1cISXyfcNTWBKwOsLW4lY8bi05cv\n+4Axl88tTg2dNYXIxSK7Jtu1YCEsZ8uaT3AAiTp1sKAOcRX8hIOTmPPxMxbIm8yg1\n+jl71ovsV5rAyuVTUouFnljXyuLWXLotUOkmC6DjJUuRaxzt23/eByJ45x94T/A2U\n+iT1oU+voigQGARrDkApXlgSI4oekg3Zgq57y6toV9F7o9A1PMtBq3AvDD/0as1K0\n+wCRZIXinSwW2F6tFnVV+z+vvE0i54yHaskkuJYZRSQ/yJR1VgmW/BtAr7ooXF7l+\n+9g7XOH7D8T28h+m4ABLN5ZDOxfTMZuV5Y4MnELh4dlBIfKGG2kjmW8+y/PUqMMGE\n+BYRmGOD1qtWvFYoZ2ss5yrlvfenRRhQbIYSRz/YiT8OTogaNcYNpArUwT4z+05af\n+kdxx0AaqauHqKRo/XTO5GIZQ6NbtPH6G++2Ie+oP8AyBWEpL3rvjZpzn7jxTBXMc\n+MOMmhnb0Go4hD+BSphgDTZOgMLOLcorjb1Ct2VnajxPZD0aTB13SCgZjJhs9j3on\n+EoI3gTHkRgiBjMBNtw7iaAumIRgrDwGzyuIL6bbyfDnbE02zxCqkYP6P0u48FGLs\n+E4U60GrYSlFxa1MexF+HIPgqWsTOv4D2zXEJYvm1XEu1VOGQUkw7J5RFTDxHgkbh\n+qvmkZ492iW2IC4L9hSdSqiZ5LhD2JwpgrMt8vrCzVitkjYQnXJ6WbWYfCybPsmLb\n+mfQ03i9E+a50UC2SGDf8e3oxImAbbXLP/LyI7oczCxyb0EzcQlIIOtBgl3gI6KAh\n+PTRQGeHCzIOSgUf7B0ihY7qiDeR1OshvTY0wdykdS0c+hzwuS5TZvfY4YM7Tssvt\n+XwbdK0Zpx/oDtRHpuDMGKJBV2LWAZYkEbFsmtg==\n+=3o2I\n+-----END PGP PUBLIC KEY BLOCK-----"
      }
    ]
  },
  {
    "sha": "9bd8c9b13132d45db4240b2dec256ee1500ce133",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmQ4YzliMTMxMzJkNDVkYjQyNDBiMmRlYzI1NmVlMTUwMGNlMTMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-12T17:04:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-12T17:05:04Z"
      },
      "message": "Merge #5787: Add fanquake PGP key\n\n99437c5 Add fanquake PGP key (Michael Ford)",
      "tree": {
        "sha": "319f361c616524a5fc36296ee3181351dbc6641e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/319f361c616524a5fc36296ee3181351dbc6641e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bd8c9b13132d45db4240b2dec256ee1500ce133",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU3N1AAAoJEHSBCwEjRsmmNVIH/RSyGxYk0bWA+J9TBXlPtVyb\nNO+a0n66wbP45FEb5Tbhi33P556eMXc1WLa84rBGK4hj9uT98jz1NAbzns0wRvhg\nySVYwW/N4GdZQnOSyXaMKOEIeEeud9+k1QdGS4iVnNtwWuS5y02JKp0Ctx0isWbN\nI4XhUdnTNWTGo5UmJclhYMQS3y1iX8HAjF5HVLKG5XLXaSaiL1y8Ygz3+rubHFqj\nMxhlgKzwSWQ9uz3QX/tcFCiXxiMBqseMaqAfLKiSMckt/8o6LdoPl7GZPxfdAKob\nlJMWO6w5lKzM1j1oE3LbUAdrj1xswoGnHq/CJOkklT1V2RE+QPWlD/xzvM6PEaM=\n=rpVv\n-----END PGP SIGNATURE-----",
        "payload": "tree 319f361c616524a5fc36296ee3181351dbc6641e\nparent d48ce48093faf1a0778b424397a2879a93e5fb5e\nparent 99437c51bafd137e94a829e0b4ade55635cc84ad\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423760684 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423760704 +0100\n\nMerge #5787: Add fanquake PGP key\n\n99437c5 Add fanquake PGP key (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd8c9b13132d45db4240b2dec256ee1500ce133",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bd8c9b13132d45db4240b2dec256ee1500ce133",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd8c9b13132d45db4240b2dec256ee1500ce133/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d48ce48093faf1a0778b424397a2879a93e5fb5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48ce48093faf1a0778b424397a2879a93e5fb5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d48ce48093faf1a0778b424397a2879a93e5fb5e"
      },
      {
        "sha": "99437c51bafd137e94a829e0b4ade55635cc84ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99437c51bafd137e94a829e0b4ade55635cc84ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99437c51bafd137e94a829e0b4ade55635cc84ad"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 63,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9c03ff45226c5629d24e5f9925da7210df0760a5",
        "filename": "contrib/gitian-downloader/fanquake-key.pgp",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bd8c9b13132d45db4240b2dec256ee1500ce133/contrib/gitian-downloader/fanquake-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bd8c9b13132d45db4240b2dec256ee1500ce133/contrib/gitian-downloader/fanquake-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/fanquake-key.pgp?ref=9bd8c9b13132d45db4240b2dec256ee1500ce133",
        "patch": "@@ -0,0 +1,63 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: GnuPG/MacGPG2 v2.0.26\n+\n+mQINBFFlV7oBEAC3dRAS7gSWQ1fV4JySD0HMBOtY+Y2oCX8vEuTI4atGcxbwXr4/\n+OElRYhDK6Zirk8rMoKPxmr8OVek5LNnY3gcDffco6NXmZ+wTstQm6oqUxFfgzznG\n+X/ExEVuCqiaPAwdWSKn9tC1GuOqRFcD+p2zmxw5mNH5XdsqaPSEGsKESY1IK+dMv\n+K+YUrfrtexZyb66wCtupYziEeag6iEK/i2x2wewOji6IvtI+wB5FO+YMXw+LKucw\n+PoHUOxjoz6YX3s04UxFaZo4R8x6J9XnJBSB2E5kfsSAzz3xR+zuapXY6H6mo/grq\n+nr3c6ACcbAHnMWwQLYvWzde6iwswhyl0whebsajJH7Rd3G4c1U3L/oj4RwUFmZYU\n+5Prs+Q5PepKAJfBeWCXZtUY2BNFCFj7b2H2NXYFR92Oc2GtoHAYACNeP070I9d3m\n+IeuYhOrOckkunwaijUczq4rb3n3Vaq6YrdwZIzs8fALwc9Th98jj2dCUq0fljpSh\n+UQFnPG83UsNkeWzUSgw+lBeEQqgOqUQQ293MbgRg0mJ8q677Iv+WaFqPKZzXxkwT\n+QCCXhjcBmUKgXIHLFcbfmkR8pCcCToWXBD8CU441cBsootDD7SanPHbpcwZjt74x\n+uLrVoCIyaju0T1jSrsPnm2A/8VkWLSCh1WRAlbjvMr7DwizGnRtzTiB6HQARAQAB\n+tC9NaWNoYWVsIEZvcmQgKGJpdGNvaW4tb3RjKSA8ZmFucXVha2VAZ21haWwuY29t\n+PokCNwQTAQoAIQUCUWVXugIbLwULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAAKCRCU\n+TTX5rD23agJgEAC0ouDjufjCMHL4DkaVkOnFbHzP+nR2Mq7pcjdiPNIt9tj8B6cI\n+PRh/E+tt2iEJJ4lzlfj0uEqjqexmSBaMgY+pFb6ESg42EPQjRQ95oBoyZfp+uL/0\n+KC3+Hh+EgmZGIFPZy2HneVfusiBUz2/YTOoqFkzmHalJe9Yvl2+dO0SUC7i6TUdJ\n++ugSr/91hkjQC52LXgHzurH4zOz7ZjzRtZgUIG3oOx8mtEDf46eJ0IUsr+tWJqOp\n+ce5xFh6nkKfS92B7YjGJ4YrkBHC7F9vmbrtIeuWiaxGzVqhHFmLvQe+4xyOpRgHM\n+kcyD5uJNmSMO9gT3udut4hd0yUKg5rdqaUzqsvv19eNL/pZ7aBK2aDAK/yAi1T7X\n+/nrhBJAU49zg1JRS6atRnhKSyd7wRSwVPJAXfVuelHsUgenSdLmSBxRha+9mL6Lb\n+bLK/Dij/0r2fyhBJx4pV6V1n4BpHjv5ivkpgCvOupx8wx3PIxZq/rx+hK+ZBe2EQ\n+7vq8rmLfBkSavHWyNxXEKWQed+mFS3d+Qsoy90bi7gQygIYNZOIBYwsy+qjCZ3om\n+LwkzRjypH23ps7WmiaoenOaCjRYooNL4qtQwNVaDGYwvbMnXJ8Vb4/2j/Riz7+Ui\n+BBVww+Wd72Fml/OFPDFep6HG/PuwFB9m5hmfSzrA01TIdjcWljtTDneufbkCDQRR\n+ZVe6ARAAvi1IAxn9xKQCCqhsoKOiXNbpnmf6lYnoEwGtgI+0a0YQwtzm39P5T8P0\n+esZ65/Re6jCCHLc23/urFPfW9VfrKPmNJncyzlx7OopJ7G1MWdRLEUzwqSaglC6x\n+Zb4r1xR6eq2lBX6CAa5Q+AuAqkoGCEiYBpTyKij4sXE0c+Y9nIDIZhru7EnZvpL3\n+SQvxzFryQLbWCGri0x9GKXZ2ZcDM7jRi/P+iX6yX6sVvOvyKz6NW2BI5OmpI1JbJ\n+3fIXt/R6Wl2xpAFL/pxtYTYbfL6277HWtLDTqIkkRFKh64JdkH8n4G4m6VNUtGEu\n+qP3SxtyShauxY44WzR0YX4rag6tU2Hks6h1JmyF8aQTBAkdP7UrQ0oxZ8f+iG9n6\n+3GtTxgw2NyrqVMx3kBLm8DipyslbA2wCeZLrW6Co0j3pebJsDrMP/3zcmbJqRSLq\n+qnkcxA4gn5j/N0oe8t26Y2WjovndhoR0QQxw8D/BKoMXbl0lvvRAtcnWtyG0COut\n+AGB2PUbGdAX2Ky+uYKrG4uhu1edfV8JZVvB7NIQGzM2P8F9PrDRz7EtG6z7ky/pq\n+HQwRbqwLWGs4QpQmHZchFmXH7pHmLC8i29W+xYhdeUstvx7oESbunICGrPjJOShJ\n+G4191Zg0m/M6jeWV/v+piUXe3YVrgs42UWFusm5ZIduPUfgqUtkAEQEAAYkEPgQY\n+AQoACQUCUWVXugIbLgIpCRCUTTX5rD23asFdIAQZAQoABgUCUWVXugAKCRAu659c\n+wJUmwaduEACCiiRpBeKF5fSaM0cTb97hAHVQJL9Wk3xvA49YuROsSwtCzq9v+js5\n+f/fE+QV/dIQUNwifEPQk8MqUVKpe1lIXwRp23GinzDAnOhfWnECqrMdR0dP99D49\n+Zb7Dd4LDvP9c0mYtnX/78qQilxWmXhzDXcunnPsfCqsrduk9hMwkjmIrWFeSWSAg\n+BEJDuZ4WLuqjni1udth0iZtZYrDaDgX/RWcTFW8QCc5hLsCRcInAxb75AWfWq6i/\n+s3Ibg5tGm4+UfqGbFPuNyy6ow3ggqkovBp6ABMxe8dAYVXSmM2tKWZXBb3L6eho8\n+QKKzyoezqpbQ2YUaYZ8XAdLuumXCtAHKP3/DI1JBefE0mxi1CXjdLK9sE5OO5KNt\n+FXR8Dnot5C4BHrcaF6Iq2sqbhPxnhcDrEwv2mUgruD7n04LKIztAG0A35rcu6A2i\n+IUq/PsXjS/5rX/p4CeYvnTTspXkhXgkvfhWz1cISXyfcNTWBKwOsLW4lY8bi05cv\n+4Axl88tTg2dNYXIxSK7Jtu1YCEsZ8uaT3AAiTp1sKAOcRX8hIOTmPPxMxbIm8yg1\n+jl71ovsV5rAyuVTUouFnljXyuLWXLotUOkmC6DjJUuRaxzt23/eByJ45x94T/A2U\n+iT1oU+voigQGARrDkApXlgSI4oekg3Zgq57y6toV9F7o9A1PMtBq3AvDD/0as1K0\n+wCRZIXinSwW2F6tFnVV+z+vvE0i54yHaskkuJYZRSQ/yJR1VgmW/BtAr7ooXF7l+\n+9g7XOH7D8T28h+m4ABLN5ZDOxfTMZuV5Y4MnELh4dlBIfKGG2kjmW8+y/PUqMMGE\n+BYRmGOD1qtWvFYoZ2ss5yrlvfenRRhQbIYSRz/YiT8OTogaNcYNpArUwT4z+05af\n+kdxx0AaqauHqKRo/XTO5GIZQ6NbtPH6G++2Ie+oP8AyBWEpL3rvjZpzn7jxTBXMc\n+MOMmhnb0Go4hD+BSphgDTZOgMLOLcorjb1Ct2VnajxPZD0aTB13SCgZjJhs9j3on\n+EoI3gTHkRgiBjMBNtw7iaAumIRgrDwGzyuIL6bbyfDnbE02zxCqkYP6P0u48FGLs\n+E4U60GrYSlFxa1MexF+HIPgqWsTOv4D2zXEJYvm1XEu1VOGQUkw7J5RFTDxHgkbh\n+qvmkZ492iW2IC4L9hSdSqiZ5LhD2JwpgrMt8vrCzVitkjYQnXJ6WbWYfCybPsmLb\n+mfQ03i9E+a50UC2SGDf8e3oxImAbbXLP/LyI7oczCxyb0EzcQlIIOtBgl3gI6KAh\n+PTRQGeHCzIOSgUf7B0ihY7qiDeR1OshvTY0wdykdS0c+hzwuS5TZvfY4YM7Tssvt\n+XwbdK0Zpx/oDtRHpuDMGKJBV2LWAZYkEbFsmtg==\n+=3o2I\n+-----END PGP PUBLIC KEY BLOCK-----"
      }
    ]
  },
  {
    "sha": "0c6ab676ee7d2071d48775d81116c86dacc6abf6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzZhYjY3NmVlN2QyMDcxZDQ4Nzc1ZDgxMTE2Yzg2ZGFjYzZhYmY2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-12T22:07:13Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-13T08:08:08Z"
      },
      "message": "gitian: don't add . to tar list\n\nSince permissions and timestamps are changed for the sake of determinism,\n. must not be added to the archive. Otherwise, tar may try to modify pwd when\nextracting.",
      "tree": {
        "sha": "baf412ac0ec6053eecccb18f6e281171cec9691c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/baf412ac0ec6053eecccb18f6e281171cec9691c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c6ab676ee7d2071d48775d81116c86dacc6abf6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c6ab676ee7d2071d48775d81116c86dacc6abf6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c6ab676ee7d2071d48775d81116c86dacc6abf6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c6ab676ee7d2071d48775d81116c86dacc6abf6/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bd8c9b13132d45db4240b2dec256ee1500ce133",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd8c9b13132d45db4240b2dec256ee1500ce133",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bd8c9b13132d45db4240b2dec256ee1500ce133"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "80de6770c5f7475f6a940192ee0e955b7d311c8d",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c6ab676ee7d2071d48775d81116c86dacc6abf6/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c6ab676ee7d2071d48775d81116c86dacc6abf6/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=0c6ab676ee7d2071d48775d81116c86dacc6abf6",
        "patch": "@@ -99,7 +99,7 @@ script: |\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find . | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n+    find ${DISTNAME} | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     cd ../../\n   done\n   mkdir -p $OUTDIR/src"
      },
      {
        "sha": "43eb79d8483cff06714ca54a750097c8e4cabd92",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c6ab676ee7d2071d48775d81116c86dacc6abf6/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c6ab676ee7d2071d48775d81116c86dacc6abf6/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=0c6ab676ee7d2071d48775d81116c86dacc6abf6",
        "patch": "@@ -126,7 +126,7 @@ script: |\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find . | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n+    find ${DISTNAME} | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     cd ../../\n   done\n   mkdir -p $OUTDIR/src"
      },
      {
        "sha": "f0459ee9461db13c53810b923ca6df446337d74d",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c6ab676ee7d2071d48775d81116c86dacc6abf6/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c6ab676ee7d2071d48775d81116c86dacc6abf6/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=0c6ab676ee7d2071d48775d81116c86dacc6abf6",
        "patch": "@@ -106,7 +106,7 @@ script: |\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find . -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n+    find ${DISTNAME} -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n     cd ../..\n   done\n   mkdir -p $OUTDIR/src"
      }
    ]
  },
  {
    "sha": "c70cdbc393c7ea7228337feb86e64bf4b2461761",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzBjZGJjMzkzYzdlYTcyMjgzMzdmZWI4NmU2NGJmNGIyNDYxNzYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-13T08:43:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-13T08:44:14Z"
      },
      "message": "Merge #5790: gitian: don't add . to tar list\n\n0c6ab67 gitian: don't add . to tar list (Cory Fields)",
      "tree": {
        "sha": "baf412ac0ec6053eecccb18f6e281171cec9691c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/baf412ac0ec6053eecccb18f6e281171cec9691c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c70cdbc393c7ea7228337feb86e64bf4b2461761",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU3bleAAoJEHSBCwEjRsmmU/0H/0OL7bQDaZKjdrn+6Qb5892j\nI6v+zio76uGiFl5fH/i1UyZeX+6sWgR5rmx8wqH/vTzzFv6/eg8oO+PrN3lhFWbf\nf5MadvOb1SkaOATi+Ovk+5eEAGSmAZ6Hpbu5njISeABFIIJiCMr6DcJvDrCmCJaA\nlfKk9fsd6L4UyXcHKmJVceju0t2K0NJ8wqSxRq1SVCOB6pJn2a4Hs7u2f1/4nK9M\nkNCW9LY7kNw0Eaf3ZTAixmkJv2LGNKUcQAN9x90ifkYegdy3qqsC6uX1flaFuLFD\nACLdjuvqjRqx1cksp8C6OqLXlXjR6SbP75RfcyfSp/kjJV0DaT236qtlDOZq2/I=\n=ziF1\n-----END PGP SIGNATURE-----",
        "payload": "tree baf412ac0ec6053eecccb18f6e281171cec9691c\nparent 9bd8c9b13132d45db4240b2dec256ee1500ce133\nparent 0c6ab676ee7d2071d48775d81116c86dacc6abf6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1423817036 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1423817054 +0100\n\nMerge #5790: gitian: don't add . to tar list\n\n0c6ab67 gitian: don't add . to tar list (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c70cdbc393c7ea7228337feb86e64bf4b2461761",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c70cdbc393c7ea7228337feb86e64bf4b2461761",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c70cdbc393c7ea7228337feb86e64bf4b2461761/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bd8c9b13132d45db4240b2dec256ee1500ce133",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd8c9b13132d45db4240b2dec256ee1500ce133",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bd8c9b13132d45db4240b2dec256ee1500ce133"
      },
      {
        "sha": "0c6ab676ee7d2071d48775d81116c86dacc6abf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c6ab676ee7d2071d48775d81116c86dacc6abf6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c6ab676ee7d2071d48775d81116c86dacc6abf6"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "80de6770c5f7475f6a940192ee0e955b7d311c8d",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c70cdbc393c7ea7228337feb86e64bf4b2461761/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c70cdbc393c7ea7228337feb86e64bf4b2461761/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=c70cdbc393c7ea7228337feb86e64bf4b2461761",
        "patch": "@@ -99,7 +99,7 @@ script: |\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find . | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n+    find ${DISTNAME} | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     cd ../../\n   done\n   mkdir -p $OUTDIR/src"
      },
      {
        "sha": "43eb79d8483cff06714ca54a750097c8e4cabd92",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c70cdbc393c7ea7228337feb86e64bf4b2461761/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c70cdbc393c7ea7228337feb86e64bf4b2461761/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=c70cdbc393c7ea7228337feb86e64bf4b2461761",
        "patch": "@@ -126,7 +126,7 @@ script: |\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find . | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n+    find ${DISTNAME} | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     cd ../../\n   done\n   mkdir -p $OUTDIR/src"
      },
      {
        "sha": "f0459ee9461db13c53810b923ca6df446337d74d",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c70cdbc393c7ea7228337feb86e64bf4b2461761/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c70cdbc393c7ea7228337feb86e64bf4b2461761/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=c70cdbc393c7ea7228337feb86e64bf4b2461761",
        "patch": "@@ -106,7 +106,7 @@ script: |\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find . -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n+    find ${DISTNAME} -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n     cd ../..\n   done\n   mkdir -p $OUTDIR/src"
      }
    ]
  },
  {
    "sha": "f9a8fc4b1a7579b843e3b1a3136ef85a0435c918",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWE4ZmM0YjFhNzU3OWI4NDNlM2IxYTMxMzZlZjg1YTA0MzVjOTE4",
    "commit": {
      "author": {
        "name": "Jonathan Brown",
        "email": "jbrown@bluedroplet.com",
        "date": "2015-02-14T05:07:40Z"
      },
      "committer": {
        "name": "Jonathan Brown",
        "email": "jbrown@bluedroplet.com",
        "date": "2015-02-14T05:07:40Z"
      },
      "message": "Fix filename for testing QT.",
      "tree": {
        "sha": "27917dafa607ae1ebf8a22a62b9c525e5a39d264",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27917dafa607ae1ebf8a22a62b9c525e5a39d264"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918/comments",
    "author": {
      "login": "ethernomad",
      "id": 161566,
      "node_id": "MDQ6VXNlcjE2MTU2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/161566?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernomad",
      "html_url": "https://github.com/ethernomad",
      "followers_url": "https://api.github.com/users/ethernomad/followers",
      "following_url": "https://api.github.com/users/ethernomad/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernomad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernomad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernomad/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernomad/orgs",
      "repos_url": "https://api.github.com/users/ethernomad/repos",
      "events_url": "https://api.github.com/users/ethernomad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernomad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ethernomad",
      "id": 161566,
      "node_id": "MDQ6VXNlcjE2MTU2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/161566?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernomad",
      "html_url": "https://github.com/ethernomad",
      "followers_url": "https://api.github.com/users/ethernomad/followers",
      "following_url": "https://api.github.com/users/ethernomad/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernomad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernomad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernomad/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernomad/orgs",
      "repos_url": "https://api.github.com/users/ethernomad/repos",
      "events_url": "https://api.github.com/users/ethernomad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernomad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c70cdbc393c7ea7228337feb86e64bf4b2461761",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c70cdbc393c7ea7228337feb86e64bf4b2461761",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c70cdbc393c7ea7228337feb86e64bf4b2461761"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "72613054b91deb68c5fdd3bb3e9e30ca563959cb",
        "filename": "doc/unit-tests.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918/doc/unit-tests.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918/doc/unit-tests.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/unit-tests.md?ref=f9a8fc4b1a7579b843e3b1a3136ef85a0435c918",
        "patch": "@@ -12,7 +12,7 @@ To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n .cpp files in the test/ directory or add new .cpp files that\n implement new BOOST_AUTO_TEST_SUITE sections.\n \n-To run the bitcoin-qt tests manually, launch src/qt/test/bitcoin-qt_test\n+To run the bitcoin-qt tests manually, launch src/qt/test/test_bitcoin-qt\n \n To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n the `src/qt/test/test_main.cpp` file."
      }
    ]
  },
  {
    "sha": "d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGVkM2JkOGVlZWVlNzRiZWMxYjVhYTc5NzA1MmI1Y2ZhNThkZmU2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-14T06:11:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-14T06:11:30Z"
      },
      "message": "Merge #5792: Fix filename for testing QT.\n\nf9a8fc4 Fix filename for testing QT. (Jonathan Brown)",
      "tree": {
        "sha": "27917dafa607ae1ebf8a22a62b9c525e5a39d264",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27917dafa607ae1ebf8a22a62b9c525e5a39d264"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJU3ucSAAoJEFeJbS/48LZX+TMMAJGWINzI0VPtFr8S+0ncs7ZA\nVV1fJijAbs99GTbXDsHOIn5Oynrcgh5nqwVXuggiP41b0nqR6KHdCOTEWOS943p5\nWliAU4Z2RoaGFuHXN1/0bZdU72CwnE8T7zm/2dcswUF6Zw08yx0W0+XwTRUmeNAg\niurudB3KCxWiUfeovAuQXW9NYKxu5KvV002ivL7L4E621oMJDF8ONwZAbUyii3bN\noD+ZSQ6lMhOT+8J8n4st/CPvi7B/55tt4vEK1h6akIhHOf0Gd8nQ9ayrmAY6TDZW\nkRZ4LArOBQfuXZ7OqzaVTKKiIzJA8GoF84JrK3KTUSnxPR+2LS/kcX8xibZ4mcP5\nmrq3g3dkZBTDeNVmu8gK6F1oN446e2WnjWT8y+vhbyoADxWUHRIDSdbPo0tagyi3\nj3FR9NQD1UnSvMAhhJhUFWN1T1hxWulOXXDxAAUf+iER3NoX6x8MnfnVoAf8cOx2\nKTwp49Rzwi0sgx0IZFctX3Qj1xRfWZHNiC1oDkMmng==\n=IkVq\n-----END PGP SIGNATURE-----",
        "payload": "tree 27917dafa607ae1ebf8a22a62b9c525e5a39d264\nparent c70cdbc393c7ea7228337feb86e64bf4b2461761\nparent f9a8fc4b1a7579b843e3b1a3136ef85a0435c918\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1423894285 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1423894290 -0800\n\nMerge #5792: Fix filename for testing QT.\n\nf9a8fc4 Fix filename for testing QT. (Jonathan Brown)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c70cdbc393c7ea7228337feb86e64bf4b2461761",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c70cdbc393c7ea7228337feb86e64bf4b2461761",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c70cdbc393c7ea7228337feb86e64bf4b2461761"
      },
      {
        "sha": "f9a8fc4b1a7579b843e3b1a3136ef85a0435c918",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9a8fc4b1a7579b843e3b1a3136ef85a0435c918"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "72613054b91deb68c5fdd3bb3e9e30ca563959cb",
        "filename": "doc/unit-tests.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6/doc/unit-tests.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6/doc/unit-tests.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/unit-tests.md?ref=d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6",
        "patch": "@@ -12,7 +12,7 @@ To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n .cpp files in the test/ directory or add new .cpp files that\n implement new BOOST_AUTO_TEST_SUITE sections.\n \n-To run the bitcoin-qt tests manually, launch src/qt/test/bitcoin-qt_test\n+To run the bitcoin-qt tests manually, launch src/qt/test/test_bitcoin-qt\n \n To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n the `src/qt/test/test_main.cpp` file."
      }
    ]
  },
  {
    "sha": "1630219d906f592c9258bfe2a0e0c4923df35782",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjMwMjE5ZDkwNmY1OTJjOTI1OGJmZTJhMGUwYzQ5MjNkZjM1Nzgy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-21T00:23:25Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-15T16:34:02Z"
      },
      "message": "openssl: abstract out OPENSSL_cleanse\n\nThis makes it easier for us to replace it if desired, since it's now only in\none spot. Also, it avoids the openssl include from allocators.h, which\nessentially forced openssl to be included from every compilation unit.",
      "tree": {
        "sha": "02b0ed9574290873f88bd0ebc1bd0a224c98e5b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02b0ed9574290873f88bd0ebc1bd0a224c98e5b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1630219d906f592c9258bfe2a0e0c4923df35782",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1630219d906f592c9258bfe2a0e0c4923df35782",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1630219d906f592c9258bfe2a0e0c4923df35782",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1630219d906f592c9258bfe2a0e0c4923df35782/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9565863e09a32729bd6ce33f31889099b3d75cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9565863e09a32729bd6ce33f31889099b3d75cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9565863e09a32729bd6ce33f31889099b3d75cb"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 44,
      "deletions": 17
    },
    "files": [
      {
        "sha": "7644f6b325bf1170cc6b794909a8485a0384c924",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -123,6 +123,7 @@ BITCOIN_CORE_H = \\\n   script/standard.h \\\n   serialize.h \\\n   streams.h \\\n+  support/cleanse.h \\\n   sync.h \\\n   threadsafety.h \\\n   timedata.h \\\n@@ -268,6 +269,7 @@ libbitcoin_util_a_SOURCES = \\\n   compat/strnlen.cpp \\\n   random.cpp \\\n   rpcprotocol.cpp \\\n+  support/cleanse.cpp \\\n   sync.cpp \\\n   uint256.cpp \\\n   util.cpp \\"
      },
      {
        "sha": "8ffe015b9e5fb1c930d72e0938418220a0914349",
        "filename": "src/allocators.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/allocators.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/allocators.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.h?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_ALLOCATORS_H\n #define BITCOIN_ALLOCATORS_H\n \n+#include \"support/cleanse.h\"\n+\n #include <map>\n #include <string>\n #include <string.h>\n@@ -14,8 +16,6 @@\n #include <boost/thread/mutex.hpp>\n #include <boost/thread/once.hpp>\n \n-#include <openssl/crypto.h> // for OPENSSL_cleanse()\n-\n /**\n  * Thread-safe class to keep track of locked (ie, non-swappable) memory pages.\n  *\n@@ -174,7 +174,7 @@ void LockObject(const T& t)\n template <typename T>\n void UnlockObject(const T& t)\n {\n-    OPENSSL_cleanse((void*)(&t), sizeof(T));\n+    memory_cleanse((void*)(&t), sizeof(T));\n     LockedPageManager::Instance().UnlockRange((void*)(&t), sizeof(T));\n }\n \n@@ -217,7 +217,7 @@ struct secure_allocator : public std::allocator<T> {\n     void deallocate(T* p, std::size_t n)\n     {\n         if (p != NULL) {\n-            OPENSSL_cleanse(p, sizeof(T) * n);\n+            memory_cleanse(p, sizeof(T) * n);\n             LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n         }\n         std::allocator<T>::deallocate(p, n);\n@@ -254,7 +254,7 @@ struct zero_after_free_allocator : public std::allocator<T> {\n     void deallocate(T* p, std::size_t n)\n     {\n         if (p != NULL)\n-            OPENSSL_cleanse(p, sizeof(T) * n);\n+            memory_cleanse(p, sizeof(T) * n);\n         std::allocator<T>::deallocate(p, n);\n     }\n };"
      },
      {
        "sha": "c8091850560a73065d48d52466199f5c9f0c6acf",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -172,7 +172,7 @@ bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)\n     vchData.resize(vchTemp.size() - nVersionBytes);\n     if (!vchData.empty())\n         memcpy(&vchData[0], &vchTemp[nVersionBytes], vchData.size());\n-    OPENSSL_cleanse(&vchTemp[0], vchData.size());\n+    memory_cleanse(&vchTemp[0], vchData.size());\n     return true;\n }\n "
      },
      {
        "sha": "c7f7e2167904ea1ee89704fe58e754cf10ed871c",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -26,8 +26,8 @@ bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::v\n \n     if (i != (int)WALLET_CRYPTO_KEY_SIZE)\n     {\n-        OPENSSL_cleanse(chKey, sizeof(chKey));\n-        OPENSSL_cleanse(chIV, sizeof(chIV));\n+        memory_cleanse(chKey, sizeof(chKey));\n+        memory_cleanse(chIV, sizeof(chIV));\n         return false;\n     }\n "
      },
      {
        "sha": "8a91498e2e82d2fa94474adc951907412b3beade",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -82,8 +82,8 @@ class CCrypter\n \n     void CleanKey()\n     {\n-        OPENSSL_cleanse(chKey, sizeof(chKey));\n-        OPENSSL_cleanse(chIV, sizeof(chIV));\n+        memory_cleanse(chKey, sizeof(chKey));\n+        memory_cleanse(chIV, sizeof(chIV));\n         fKeySet = false;\n     }\n "
      },
      {
        "sha": "3246e4b67a1c0def79c64f428390a2e51fca6807",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -21,8 +21,6 @@\n #include <boost/thread.hpp>\n #include <boost/version.hpp>\n \n-#include <openssl/rand.h>\n-\n using namespace std;\n \n "
      },
      {
        "sha": "b69461ad9edbca93a6c11f6e6aa5ecb7d77944dd",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -13,7 +13,6 @@\n \n #include <stdexcept>\n \n-#include <openssl/x509.h>\n #include <openssl/x509_vfy.h>\n \n #include <QDateTime>"
      },
      {
        "sha": "61f8a3415decf682ef56a31c00a90a9e8dd8f7bd",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -9,6 +9,8 @@\n \n #include \"base58.h\"\n \n+#include <openssl/x509.h>\n+\n #include <QByteArray>\n #include <QList>\n #include <QString>"
      },
      {
        "sha": "96ceeb18a4b98c560320dd3260dbea834b20a27e",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -16,7 +16,6 @@\n \n #include <cstdlib>\n \n-#include <openssl/x509.h>\n #include <openssl/x509_vfy.h>\n \n #include <QApplication>"
      },
      {
        "sha": "ae25bee1b71c8cd280d2eb13e1968d079594d45a",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"random.h\"\n \n+#include \"support/cleanse.h\"\n #ifdef WIN32\n #include \"compat.h\" // for Windows API\n #endif\n@@ -18,7 +19,6 @@\n #include <sys/time.h>\n #endif\n \n-#include <openssl/crypto.h>\n #include <openssl/err.h>\n #include <openssl/rand.h>\n \n@@ -40,7 +40,7 @@ void RandAddSeed()\n     // Seed with CPU performance counter\n     int64_t nCounter = GetPerformanceCounter();\n     RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    OPENSSL_cleanse((void*)&nCounter, sizeof(nCounter));\n+    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n }\n \n void RandAddSeedPerfmon()\n@@ -70,7 +70,7 @@ void RandAddSeedPerfmon()\n     RegCloseKey(HKEY_PERFORMANCE_DATA);\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(begin_ptr(vData), nSize, nSize / 100.0);\n-        OPENSSL_cleanse(begin_ptr(vData), nSize);\n+        memory_cleanse(begin_ptr(vData), nSize);\n         LogPrint(\"rand\", \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n         static bool warned = false; // Warn only once"
      },
      {
        "sha": "9999c2341f78d8f9b0dc0801fea7b4916aca1046",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -16,6 +16,7 @@\n #include <map>\n #include <set>\n #include <stdint.h>\n+#include <stdio.h>\n #include <string>\n #include <string.h>\n #include <utility>"
      },
      {
        "sha": "a2141b244980399ab4d91b351ff809dd43f4efab",
        "filename": "src/support/cleanse.cpp",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/support/cleanse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/support/cleanse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.cpp?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"cleanse.h\"\n+\n+#include <openssl/crypto.h>\n+\n+void memory_cleanse(void *ptr, size_t len)\n+{\n+    OPENSSL_cleanse(ptr, len);\n+}"
      },
      {
        "sha": "3e02aa8fd1fe59b7283730635d0774f3119fa0c5",
        "filename": "src/support/cleanse.h",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1630219d906f592c9258bfe2a0e0c4923df35782/src/support/cleanse.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1630219d906f592c9258bfe2a0e0c4923df35782/src/support/cleanse.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.h?ref=1630219d906f592c9258bfe2a0e0c4923df35782",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_CLEANSE_H\n+#define BITCOIN_SUPPORT_CLEANSE_H\n+\n+#include <stdlib.h>\n+\n+void memory_cleanse(void *ptr, size_t len);\n+\n+#endif // BITCOIN_SUPPORT_CLEANSE_H"
      }
    ]
  },
  {
    "sha": "a77021a76361108b21d1e3b59c56915ad82655a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzcwMjFhNzYzNjExMDhiMjFkMWUzYjU5YzU2OTE1YWQ4MjY1NWE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-16T09:37:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-16T09:38:00Z"
      },
      "message": "doc: Add note-to-self about SHA256SUMS to release-process.md",
      "tree": {
        "sha": "3b0fea752d59d0fe2b21a2b87e4f6f6db58d67e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b0fea752d59d0fe2b21a2b87e4f6f6db58d67e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a77021a76361108b21d1e3b59c56915ad82655a5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU4bp5AAoJEHSBCwEjRsmmye4IALZ6E8FqX+ri7CHqWz+idr3r\nSDFHbxzBT1ECny8gD4mQm5i6xfmn1mJelNMQJu/Dv2yTtqzgxy5Mr7X/QoKdMOAz\nDZsA24M7LDSx19eMGgyqaBV8rfKMe6nrHKTTZV7T+n+LO0qd7spk1yC7d/F7eFk5\nER5xIJ2UM9lpebukoWb6/4ZSlmh/cUA60/sodKtzLcwnX47/9SBE3CvLM0AZRzEq\nVFdAC51nffkkaRNwpQ7Et0WsMym2xAl5oTIay9uc1owmt8KI37SSt5f40jdDWsnD\naq4OjsUFe3DR0Uz6KJdh5q/FeYcv+NV3vQ+q2KMitpkYGKM4dOiJ+U4eCzb3hZY=\n=tyQp\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b0fea752d59d0fe2b21a2b87e4f6f6db58d67e0\nparent d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424079433 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424079480 +0100\n\ndoc: Add note-to-self about SHA256SUMS to release-process.md\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a77021a76361108b21d1e3b59c56915ad82655a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a77021a76361108b21d1e3b59c56915ad82655a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a77021a76361108b21d1e3b59c56915ad82655a5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8ed3bd8eeeee74bec1b5aa797052b5cfa58dfe6"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "016090c5949920868699d1a55243b04e84d7d16d",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a77021a76361108b21d1e3b59c56915ad82655a5/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a77021a76361108b21d1e3b59c56915ad82655a5/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=a77021a76361108b21d1e3b59c56915ad82655a5",
        "patch": "@@ -130,6 +130,7 @@ gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n rm SHA256SUMS\n ```\n (the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n+Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n \n - Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoin.org server\n "
      }
    ]
  },
  {
    "sha": "175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzVkODZlNjMzYmVkY2ZiNjQyZmIzMjZmMWVjMGI0M2MxNGM0ZjNi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-16T19:55:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-16T19:58:35Z"
      },
      "message": "Merge #5710: Add more information to errors in ReadBlockFromDisk\n\nf5791c6 Add more information to errors in ReadBlockFromDisk (Wladimir J. van der Laan)",
      "tree": {
        "sha": "be67cf54b84e46bdd5d14f341c9a2f08c9dfd21d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be67cf54b84e46bdd5d14f341c9a2f08c9dfd21d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJU4kvrAAoJEFeJbS/48LZXfyUL/jMGQEs7TkiHY7vrpUYwvO4x\neDzzJRekijoX3PTy4CprN530uvxNnQP9+DSrXNjtZrA5gKRBYdgGd3ozJHylZ23b\nQk05/+khbUnfdJsDutk8TVQVJ/SJ+Nu05zFIx5L4ilTEB9ll5uBJP+v8Vi4+A+n6\nfCLtyVLZPI4qNnLwUIlAalRB+ew/uT9QHvDsreoHqUF3qvosVOvOgVuOGlm6pQ8X\nDoykIexvncJblSNC58HvDfzaqqXxLmcNDUdaMBuxUv0Qu2BJFhjNMxPUPyEh57ku\n3mM9NYuvLJ4seePs1SRqqFkIxDkhCf2O3gMPkGLLMlYAZWTgcXzHNyff2j4OsHPP\nSmZIKTQdWt6gXNdclvusQlxZ5fNQhBh/SXkWeOyr3HiErZ4OIguJAf7xmwpO4fVv\nqv+xEVTBJDIOURjGcw+pFU7yZxl0ZOsVMNuqNSsnzRp8+YNWXnP7uaTO+zlTnW8S\nFa430TCRJB5md3PeLWHKirb23A+DHuuFJeCEzPcgbg==\n=V+fx\n-----END PGP SIGNATURE-----",
        "payload": "tree be67cf54b84e46bdd5d14f341c9a2f08c9dfd21d\nparent a77021a76361108b21d1e3b59c56915ad82655a5\nparent f5791c6ae3b59ef4c8d04e6873310a022e1211b6\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1424116551 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1424116715 -0800\n\nMerge #5710: Add more information to errors in ReadBlockFromDisk\n\nf5791c6 Add more information to errors in ReadBlockFromDisk (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175d86e633bedcfb642fb326f1ec0b43c14c4f3b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a77021a76361108b21d1e3b59c56915ad82655a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a77021a76361108b21d1e3b59c56915ad82655a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a77021a76361108b21d1e3b59c56915ad82655a5"
      },
      {
        "sha": "f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5791c6ae3b59ef4c8d04e6873310a022e1211b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5791c6ae3b59ef4c8d04e6873310a022e1211b6"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "02f53cd2f2d518ead2da778930f86d7bcb88edb1",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/175d86e633bedcfb642fb326f1ec0b43c14c4f3b/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/175d86e633bedcfb642fb326f1ec0b43c14c4f3b/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "patch": "@@ -48,6 +48,12 @@ struct CDiskBlockPos\n \n     void SetNull() { nFile = -1; nPos = 0; }\n     bool IsNull() const { return (nFile == -1); }\n+\n+    std::string ToString() const\n+    {\n+        return strprintf(\"CBlockDiskPos(nFile=%i, nPos=%i)\", nFile, nPos);\n+    }\n+\n };\n \n enum BlockStatus {"
      },
      {
        "sha": "34b4c51d5f83944e1cf48ea52fc414359299546f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/175d86e633bedcfb642fb326f1ec0b43c14c4f3b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/175d86e633bedcfb642fb326f1ec0b43c14c4f3b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "patch": "@@ -1199,19 +1199,19 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     // Open history file to read\n     CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"ReadBlockFromDisk: OpenBlockFile failed\");\n+        return error(\"ReadBlockFromDisk: OpenBlockFile failed for %s\", pos.ToString());\n \n     // Read block\n     try {\n         filein >> block;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s at %s\", __func__, e.what(), pos.ToString());\n     }\n \n     // Check the header\n     if (!CheckProofOfWork(block.GetHash(), block.nBits))\n-        return error(\"ReadBlockFromDisk: Errors in block header\");\n+        return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n \n     return true;\n }\n@@ -1221,7 +1221,8 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     if (!ReadBlockFromDisk(block, pindex->GetBlockPos()))\n         return false;\n     if (block.GetHash() != pindex->GetBlockHash())\n-        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index\");\n+        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index for %s at %s\",\n+                pindex->ToString(), pindex->GetBlockPos().ToString());\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "b63ae5626910eaa41337c8173cac0c4728a5432d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjNhZTU2MjY5MTBlYWE0MTMzN2M4MTczY2FjMGM0NzI4YTU0MzJk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-25T19:34:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-16T20:24:37Z"
      },
      "message": "Add list of implemented BIPs",
      "tree": {
        "sha": "98022aeebefc3c26f81c8c2b186784fccc01cc08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98022aeebefc3c26f81c8c2b186784fccc01cc08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b63ae5626910eaa41337c8173cac0c4728a5432d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b63ae5626910eaa41337c8173cac0c4728a5432d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b63ae5626910eaa41337c8173cac0c4728a5432d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b63ae5626910eaa41337c8173cac0c4728a5432d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/175d86e633bedcfb642fb326f1ec0b43c14c4f3b"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "579eadfff336fcc7f53e034bf7b0140b303b20db",
        "filename": "doc/bips.md",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b63ae5626910eaa41337c8173cac0c4728a5432d/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b63ae5626910eaa41337c8173cac0c4728a5432d/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=b63ae5626910eaa41337c8173cac0c4728a5432d",
        "patch": "@@ -0,0 +1,18 @@\n+BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.10.0**):\n+\n+* [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n+* [`BIP 13`](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki): The address format for P2SH addresses has been implemented since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n+* [`BIP 14`](https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki): The subversion string is being used as User Agent since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n+* [`BIP 16`](https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki): The pay-to-script-hash evaluation rules have been implemented since **v0.6.0**, and took effect on *April 1st 2012* ([PR #748](https://github.com/bitcoin/bitcoin/pull/748)).\n+* [`BIP 21`](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki): The URI format for Bitcoin payments has been implemented since **v0.6.0** ([PR #176](https://github.com/bitcoin/bitcoin/pull/176)).\n+* [`BIP 22`](https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki): The 'getblocktemplate' (GBT) RPC protocol for mining has been implemented since **v0.7.0** ([PR #936](https://github.com/bitcoin/bitcoin/pull/936)).\n+* [`BIP 23`](https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki): Some extensions to GBT have been implemented since **v0.10.0rc1**, including longpolling and block proposals ([PR #1816](https://github.com/bitcoin/bitcoin/pull/1816)).\n+* [`BIP 30`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki): The evaluation rules to forbid creating new transactions with the same txid as previous not-fully-spent transactions were implemented since **v0.6.0**, and the rule took effect on *March 15th 2012* ([PR #915](https://github.com/bitcoin/bitcoin/pull/915)).\n+* [`BIP 31`](https://github.com/bitcoin/bips/blob/master/bip-0031.mediawiki): The 'pong' protocol message (and the protocol version bump to 60001) has been implemented since **v0.6.1** ([PR #1081](https://github.com/bitcoin/bitcoin/pull/1081)).\n+* [`BIP 34`](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki): The rule that requires blocks to contain their height (number) in the coinbase input, and the introduction of version 2 blocks has been implemented since **v0.7.0**. The rule took effect for version 2 blocks as of *block 224413* (March 5th 2013), and version 1 blocks are no longer allowed since *block 227931* (March 25th 2013) ([PR #1526](https://github.com/bitcoin/bitcoin/pull/1526)).\n+* [`BIP 35`](https://github.com/bitcoin/bips/blob/master/bip-0035.mediawiki): The 'mempool' protocol message (and the protocol version bump to 60002) has been implemented since **v0.7.0** ([PR #1641](https://github.com/bitcoin/bitcoin/pull/1641)).\n+* [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial merkle trees for blocks , and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)).\n+* [`BIP 42`](https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki): The bug that would have caused the subsidy schedule to resume after block 13440000 was fixed in **v0.9.2** ([PR #3842](https://github.com/bitcoin/bitcoin/pull/3842)).\n+* [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)).\n+* [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n+* [`BIP 70`](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) [`71`](https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki) [`72`](https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki): Payment Protocol support has been available in Bitcoin Core GUI since **v0.9.0** ([PR #5216](https://github.com/bitcoin/bitcoin/pull/5216))."
      }
    ]
  },
  {
    "sha": "e5ece053da705a630bb664e16036299915ac1246",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWVjZTA1M2RhNzA1YTYzMGJiNjY0ZTE2MDM2Mjk5OTE1YWMxMjQ2",
    "commit": {
      "author": {
        "name": "Shaul Kfir",
        "email": "shaul.kfir@gmail.com",
        "date": "2015-02-17T13:46:51Z"
      },
      "committer": {
        "name": "Shaul Kfir",
        "email": "shaul.kfir@gmail.com",
        "date": "2015-02-17T13:46:51Z"
      },
      "message": "Rename Interval() to DifficultyAdjustmentInterval()",
      "tree": {
        "sha": "532f7872bc94d87796ddb5143cf34b5fdf789c4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/532f7872bc94d87796ddb5143cf34b5fdf789c4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5ece053da705a630bb664e16036299915ac1246",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5ece053da705a630bb664e16036299915ac1246",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5ece053da705a630bb664e16036299915ac1246",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5ece053da705a630bb664e16036299915ac1246/comments",
    "author": {
      "login": "shaulkf",
      "id": 4781551,
      "node_id": "MDQ6VXNlcjQ3ODE1NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4781551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shaulkf",
      "html_url": "https://github.com/shaulkf",
      "followers_url": "https://api.github.com/users/shaulkf/followers",
      "following_url": "https://api.github.com/users/shaulkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/shaulkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shaulkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shaulkf/subscriptions",
      "organizations_url": "https://api.github.com/users/shaulkf/orgs",
      "repos_url": "https://api.github.com/users/shaulkf/repos",
      "events_url": "https://api.github.com/users/shaulkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shaulkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "shaulkf",
      "id": 4781551,
      "node_id": "MDQ6VXNlcjQ3ODE1NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4781551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shaulkf",
      "html_url": "https://github.com/shaulkf",
      "followers_url": "https://api.github.com/users/shaulkf/followers",
      "following_url": "https://api.github.com/users/shaulkf/following{/other_user}",
      "gists_url": "https://api.github.com/users/shaulkf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shaulkf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shaulkf/subscriptions",
      "organizations_url": "https://api.github.com/users/shaulkf/orgs",
      "repos_url": "https://api.github.com/users/shaulkf/repos",
      "events_url": "https://api.github.com/users/shaulkf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shaulkf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/175d86e633bedcfb642fb326f1ec0b43c14c4f3b"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "86b84df6677f7ecbbe8f1a852b884a305216a2c0",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5ece053da705a630bb664e16036299915ac1246/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5ece053da705a630bb664e16036299915ac1246/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=e5ece053da705a630bb664e16036299915ac1246",
        "patch": "@@ -68,7 +68,7 @@ class CChainParams\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n     int64_t TargetSpacing() const { return nTargetSpacing; }\n-    int64_t Interval() const { return nTargetTimespan / nTargetSpacing; }\n+    int64_t DifficultyAdjustmentInterval() const { return nTargetTimespan / nTargetSpacing; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** In the future use NetworkIDString() for RPC fields */"
      },
      {
        "sha": "6dd5c4c12c76806e766a3a358aec52778c1b1f49",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5ece053da705a630bb664e16036299915ac1246/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5ece053da705a630bb664e16036299915ac1246/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=e5ece053da705a630bb664e16036299915ac1246",
        "patch": "@@ -20,8 +20,8 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     if (pindexLast == NULL)\n         return nProofOfWorkLimit;\n \n-    // Only change once per interval\n-    if ((pindexLast->nHeight+1) % Params().Interval() != 0)\n+    // Only change once per difficulty adjustment interval\n+    if ((pindexLast->nHeight+1) % Params().DifficultyAdjustmentInterval() != 0)\n     {\n         if (Params().AllowMinDifficultyBlocks())\n         {\n@@ -34,7 +34,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n             {\n                 // Return the last non-special-min-difficulty-rules-block\n                 const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % Params().Interval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                while (pindex->pprev && pindex->nHeight % Params().DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n                     pindex = pindex->pprev;\n                 return pindex->nBits;\n             }\n@@ -44,7 +44,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n \n     // Go back by what we want to be 14 days worth of blocks\n     const CBlockIndex* pindexFirst = pindexLast;\n-    for (int i = 0; pindexFirst && i < Params().Interval()-1; i++)\n+    for (int i = 0; pindexFirst && i < Params().DifficultyAdjustmentInterval()-1; i++)\n         pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n "
      },
      {
        "sha": "165a9df697d6daef2492ada5417226808b7149a6",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5ece053da705a630bb664e16036299915ac1246/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5ece053da705a630bb664e16036299915ac1246/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=e5ece053da705a630bb664e16036299915ac1246",
        "patch": "@@ -44,7 +44,7 @@ Value GetNetworkHashPS(int lookup, int height) {\n \n     // If lookup is -1, then use blocks since last difficulty change.\n     if (lookup <= 0)\n-        lookup = pb->nHeight % Params().Interval() + 1;\n+        lookup = pb->nHeight % Params().DifficultyAdjustmentInterval() + 1;\n \n     // If lookup is larger than chain, then set it to chain length.\n     if (lookup > pb->nHeight)"
      }
    ]
  },
  {
    "sha": "e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2EzY2Q3YTI4YzhhMGYyZjIxMmYxNWI2OWNlZjZmY2JlY2JkOThl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-18T08:50:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-18T08:52:59Z"
      },
      "message": "Merge #5784: Fix usage of NegateSignatureS in script_tests\n\n78c6bed Add test for DER-encoding edge case (Suhas Daftuar)\n6f50dbd Fix NegateSignatureS to not duplicate last byte of S (Suhas Daftuar)",
      "tree": {
        "sha": "5ed19c0723afe8121ddb1b6213e975be273b4723",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ed19c0723afe8121ddb1b6213e975be273b4723"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU5FLrAAoJEHSBCwEjRsmmJbUH/3DKexrvYumjCSpvP+TWZQMs\n+u7tj1gh2DbZibj5UKUu8yRC6JNZF1N8Sc+kau7MCm3HmrVeyOw3IuxJ9h5JQszs\nenZ4IxXlLFeRFIh71z1WU6R4VgKVVLdQ6E2vt5qgqckTy71daiVcWXePRJDCD8eP\nDw5oEz38FlNhtYfIpquan5VhfTm1gkN8ya20FQBtUcdGjjcuXSNqcPjphNK/RVUt\nNVUd3u73wy8seu8kJu009hSDkxcQg/vbZ0OdlK8RbpHGVaxhp+ZFMD0QU57Nifwm\nfmXwnof4g7ntaAEseKYBotlH1VsvlX4ZsnB4g1KwJ6s2dwVzcI2+5ExUsqn1HrM=\n=nyZ6\n-----END PGP SIGNATURE-----",
        "payload": "tree 5ed19c0723afe8121ddb1b6213e975be273b4723\nparent 175d86e633bedcfb642fb326f1ec0b43c14c4f3b\nparent 78c6bedb9cd3ed85f829a288146533e3b41f784b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424249411 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424249579 +0100\n\nMerge #5784: Fix usage of NegateSignatureS in script_tests\n\n78c6bed Add test for DER-encoding edge case (Suhas Daftuar)\n6f50dbd Fix NegateSignatureS to not duplicate last byte of S (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/175d86e633bedcfb642fb326f1ec0b43c14c4f3b"
      },
      {
        "sha": "78c6bedb9cd3ed85f829a288146533e3b41f784b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78c6bedb9cd3ed85f829a288146533e3b41f784b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78c6bedb9cd3ed85f829a288146533e3b41f784b"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 20,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3c52547a64e22fe439545e4561cb931948ad3034",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
        "patch": "@@ -696,7 +696,13 @@\n     \"BIP66 example 11, with DERSIG\"\n ],\n [\n-    \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n+    \"0x48 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb12510101\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"DERSIG\",\n+    \"P2PK with multi-byte hashtype, with DERSIG\"\n+],\n+[\n+    \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n     \"LOW_S\",\n     \"P2PK with high S\""
      },
      {
        "sha": "34e2c8d61a7dc131159c199dae5a01a0e80d8950",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
        "patch": "@@ -814,7 +814,13 @@\n     \"BIP66 example 12, with DERSIG\"\n ],\n [\n-    \"0x49 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef05101\",\n+    \"0x48 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb12510101\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"\",\n+    \"P2PK with multi-byte hashtype, without DERSIG\"\n+],\n+[\n+    \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n     \"\",\n     \"P2PK with high S but no LOW_S\""
      },
      {
        "sha": "e410b59710c144c2c88d8c0481e317844d18dc60",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
        "patch": "@@ -107,7 +107,6 @@ void static NegateSignatureS(std::vector<unsigned char>& vchSig) {\n     std::vector<unsigned char> r, s;\n     r = std::vector<unsigned char>(vchSig.begin() + 4, vchSig.begin() + 4 + vchSig[3]);\n     s = std::vector<unsigned char>(vchSig.begin() + 6 + vchSig[3], vchSig.begin() + 6 + vchSig[3] + vchSig[5 + vchSig[3]]);\n-    unsigned char hashtype = vchSig.back();\n \n     // Really ugly to implement mod-n negation here, but it would be feature creep to expose such functionality from libsecp256k1.\n     static const unsigned char order[33] = {\n@@ -141,7 +140,6 @@ void static NegateSignatureS(std::vector<unsigned char>& vchSig) {\n     vchSig.push_back(0x02);\n     vchSig.push_back(s.size());\n     vchSig.insert(vchSig.end(), s.begin(), s.end());\n-    vchSig.push_back(hashtype);\n }\n \n namespace\n@@ -478,6 +476,12 @@ BOOST_AUTO_TEST_CASE(script_build)\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                                \"BIP66 example 12, with DERSIG\", SCRIPT_VERIFY_DERSIG\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                               \"P2PK with multi-byte hashtype, without DERSIG\", 0\n+                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                               \"P2PK with multi-byte hashtype, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with high S but no LOW_S\", 0"
      }
    ]
  },
  {
    "sha": "8d0418720c29b72bd369f0b3b23b6d75584f3c08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDA0MTg3MjBjMjliNzJiZDM2OWYwYjNiMjNiNmQ3NTU4NGYzYzA4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-18T16:29:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-18T16:29:28Z"
      },
      "message": "Merge #5799: Rename Interval() to DifficultyAdjustmentInterval()\n\ne5ece05 Rename Interval() to DifficultyAdjustmentInterval() (Shaul Kfir)",
      "tree": {
        "sha": "eb4bcc06141923f1e9c94804fce8d52affbc5a38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb4bcc06141923f1e9c94804fce8d52affbc5a38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d0418720c29b72bd369f0b3b23b6d75584f3c08",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU5L3oAAoJEHSBCwEjRsmmTRIH/jq8ZSCdWjTKJLaF3MTIQCeL\nHyZXB2Jh4qc2O++FHVAWaYlHbxhHOd1JoA8pmk10GkKupXLrP8tBSaIqaninT64Y\nD/XkQUu4r91oUbmAlP1TPEhsJlfPJnFw7ci/QSe38Y1EUR9yBJSf0V//0BeM6KgD\nBoINCwUqvgsUFFlIIPIVFoJ3XGVuEmKbyUqT50zwmEKdM0TaPFKYORGtayr/yfEk\nn57EHTSkjW+kaPUSQit/o3xAtEnr3pirCRdkZIgCtANm4zai94iwTTn+FudKPyH0\nSYzy4I5vs8Qv7LCSPBx5G0j1MTPW5EFHYNmnOKSzbVvAwZwg+5OZF0sFaSylSJQ=\n=Jtqf\n-----END PGP SIGNATURE-----",
        "payload": "tree eb4bcc06141923f1e9c94804fce8d52affbc5a38\nparent e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e\nparent e5ece053da705a630bb664e16036299915ac1246\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424276957 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424276968 +0100\n\nMerge #5799: Rename Interval() to DifficultyAdjustmentInterval()\n\ne5ece05 Rename Interval() to DifficultyAdjustmentInterval() (Shaul Kfir)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0418720c29b72bd369f0b3b23b6d75584f3c08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0418720c29b72bd369f0b3b23b6d75584f3c08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0418720c29b72bd369f0b3b23b6d75584f3c08/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3a3cd7a28c8a0f2f212f15b69cef6fcbecbd98e"
      },
      {
        "sha": "e5ece053da705a630bb664e16036299915ac1246",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5ece053da705a630bb664e16036299915ac1246",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5ece053da705a630bb664e16036299915ac1246"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "86b84df6677f7ecbbe8f1a852b884a305216a2c0",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0418720c29b72bd369f0b3b23b6d75584f3c08/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0418720c29b72bd369f0b3b23b6d75584f3c08/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=8d0418720c29b72bd369f0b3b23b6d75584f3c08",
        "patch": "@@ -68,7 +68,7 @@ class CChainParams\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n     int64_t TargetSpacing() const { return nTargetSpacing; }\n-    int64_t Interval() const { return nTargetTimespan / nTargetSpacing; }\n+    int64_t DifficultyAdjustmentInterval() const { return nTargetTimespan / nTargetSpacing; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** In the future use NetworkIDString() for RPC fields */"
      },
      {
        "sha": "6dd5c4c12c76806e766a3a358aec52778c1b1f49",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0418720c29b72bd369f0b3b23b6d75584f3c08/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0418720c29b72bd369f0b3b23b6d75584f3c08/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=8d0418720c29b72bd369f0b3b23b6d75584f3c08",
        "patch": "@@ -20,8 +20,8 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     if (pindexLast == NULL)\n         return nProofOfWorkLimit;\n \n-    // Only change once per interval\n-    if ((pindexLast->nHeight+1) % Params().Interval() != 0)\n+    // Only change once per difficulty adjustment interval\n+    if ((pindexLast->nHeight+1) % Params().DifficultyAdjustmentInterval() != 0)\n     {\n         if (Params().AllowMinDifficultyBlocks())\n         {\n@@ -34,7 +34,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n             {\n                 // Return the last non-special-min-difficulty-rules-block\n                 const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % Params().Interval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                while (pindex->pprev && pindex->nHeight % Params().DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n                     pindex = pindex->pprev;\n                 return pindex->nBits;\n             }\n@@ -44,7 +44,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n \n     // Go back by what we want to be 14 days worth of blocks\n     const CBlockIndex* pindexFirst = pindexLast;\n-    for (int i = 0; pindexFirst && i < Params().Interval()-1; i++)\n+    for (int i = 0; pindexFirst && i < Params().DifficultyAdjustmentInterval()-1; i++)\n         pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n "
      },
      {
        "sha": "165a9df697d6daef2492ada5417226808b7149a6",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0418720c29b72bd369f0b3b23b6d75584f3c08/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0418720c29b72bd369f0b3b23b6d75584f3c08/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=8d0418720c29b72bd369f0b3b23b6d75584f3c08",
        "patch": "@@ -44,7 +44,7 @@ Value GetNetworkHashPS(int lookup, int height) {\n \n     // If lookup is -1, then use blocks since last difficulty change.\n     if (lookup <= 0)\n-        lookup = pb->nHeight % Params().Interval() + 1;\n+        lookup = pb->nHeight % Params().DifficultyAdjustmentInterval() + 1;\n \n     // If lookup is larger than chain, then set it to chain length.\n     if (lookup > pb->nHeight)"
      }
    ]
  },
  {
    "sha": "47a79bb880fa7dceafdbdc5df50a36173fe74de9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2E3OWJiODgwZmE3ZGNlYWZkYmRjNWRmNTBhMzYxNzNmZTc0ZGU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-18T16:36:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-18T16:36:39Z"
      },
      "message": "Merge #5366: No longer check osx compatibility in RenameThread\n\n850c570 No longer check osx compatibility in RenameThread (Michael Ford)",
      "tree": {
        "sha": "0f16c777dfe9cc75e3368652cc481d5e707993cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f16c777dfe9cc75e3368652cc481d5e707993cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47a79bb880fa7dceafdbdc5df50a36173fe74de9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU5L+XAAoJEHSBCwEjRsmmliMIALOnRjOnquZ3/Kx2d3wdUHw6\nFDU9GjRm99yUsTW9HJE3g38PPng1HNLgZVpiCm3S17H61KLoyonBG2nxnYXEMahx\nIadY5yxzjo2GdX+E60termrK39BJiNCpmnQwCqVHLaTpJQR6s97pvK3voQZT4fIx\nHK4xT9RZAOxuNXGHs856x4Ke9dPsOgbz0JqxuRWxyMMHsNM6DuupH0uSKivtJDBs\nJfERnezpuL0l6OOK64+kjdfdVXhHc+DIkWq/IXxeEaFx7tLcAmaoFmMvuHku4q5H\nhZmy7dW2VKMRYYQh/iNs52E2fCcRh0yQalrbaLnWpDSrAm498wt9malGI2H8UsQ=\n=84qE\n-----END PGP SIGNATURE-----",
        "payload": "tree 0f16c777dfe9cc75e3368652cc481d5e707993cf\nparent 8d0418720c29b72bd369f0b3b23b6d75584f3c08\nparent 850c570d685a3bd350eea30c4688185c586de1db\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424277376 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424277399 +0100\n\nMerge #5366: No longer check osx compatibility in RenameThread\n\n850c570 No longer check osx compatibility in RenameThread (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a79bb880fa7dceafdbdc5df50a36173fe74de9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47a79bb880fa7dceafdbdc5df50a36173fe74de9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a79bb880fa7dceafdbdc5df50a36173fe74de9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d0418720c29b72bd369f0b3b23b6d75584f3c08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0418720c29b72bd369f0b3b23b6d75584f3c08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0418720c29b72bd369f0b3b23b6d75584f3c08"
      },
      {
        "sha": "850c570d685a3bd350eea30c4688185c586de1db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/850c570d685a3bd350eea30c4688185c586de1db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/850c570d685a3bd350eea30c4688185c586de1db"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "361b3631f567121acb310c958eabc92a9a608d60",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47a79bb880fa7dceafdbdc5df50a36173fe74de9/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47a79bb880fa7dceafdbdc5df50a36173fe74de9/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=47a79bb880fa7dceafdbdc5df50a36173fe74de9",
        "patch": "@@ -698,13 +698,8 @@ void RenameThread(const char* name)\n     //       removed.\n     pthread_set_name_np(pthread_self(), name);\n \n-#elif defined(MAC_OSX) && defined(__MAC_OS_X_VERSION_MAX_ALLOWED)\n-\n-// pthread_setname_np is XCode 10.6-and-later\n-#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 1060\n+#elif defined(MAC_OSX)\n     pthread_setname_np(name);\n-#endif\n-\n #else\n     // Prevent warnings for unused parameters...\n     (void)name;"
      }
    ]
  },
  {
    "sha": "544e64e975e93dcf22a682a12acebd26d2306b86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDRlNjRlOTc1ZTkzZGNmMjJhNjgyYTEyYWNlYmQyNmQyMzA2Yjg2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-02-18T21:32:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-02-18T21:34:33Z"
      },
      "message": "Update debian changelog and control file",
      "tree": {
        "sha": "09394463e1452eae2dabcbf4dc757423772fbed5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09394463e1452eae2dabcbf4dc757423772fbed5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/544e64e975e93dcf22a682a12acebd26d2306b86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/544e64e975e93dcf22a682a12acebd26d2306b86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/544e64e975e93dcf22a682a12acebd26d2306b86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/544e64e975e93dcf22a682a12acebd26d2306b86/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47a79bb880fa7dceafdbdc5df50a36173fe74de9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a79bb880fa7dceafdbdc5df50a36173fe74de9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47a79bb880fa7dceafdbdc5df50a36173fe74de9"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7ce3babc1b1ae5cdb8ce5f84ffa6cb67c4abba71",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/544e64e975e93dcf22a682a12acebd26d2306b86/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/544e64e975e93dcf22a682a12acebd26d2306b86/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=544e64e975e93dcf22a682a12acebd26d2306b86",
        "patch": "@@ -1,3 +1,15 @@\n+bitcoin (0.10.0-precise1) precise; urgency=medium\n+\n+  * New upstream releases.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Wed, 18 Feb 2015 13:22:00 -1000\n+\n+bitcoin (0.9.4-precise1) precise; urgency=high\n+\n+  * New upstream releases.\n+\n+ -- Matt Corallo (laptop - only while traveling) <matt@mattcorallo.com>  Mon, 12 Jan 2015 23:30:00 -1000\n+\n bitcoin (0.9.3-precise1) precise; urgency=medium\n \n   * New upstream releases."
      },
      {
        "sha": "4392bb33853f9d29b0567f51a8648e962b8f322d",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/544e64e975e93dcf22a682a12acebd26d2306b86/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/544e64e975e93dcf22a682a12acebd26d2306b86/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=544e64e975e93dcf22a682a12acebd26d2306b86",
        "patch": "@@ -12,7 +12,7 @@ Build-Depends: debhelper,\n  libdb4.8++-dev,\n  libssl-dev,\n  pkg-config,\n- libminiupnpc8-dev,\n+ libminiupnpc8-dev | libminiupnpc-dev (>> 1.6),\n  libboost-filesystem-dev (>> 1.35) | libboost-filesystem1.35-dev,\n  libboost-program-options-dev (>> 1.35) | libboost-program-options1.35-dev,\n  libboost-thread-dev (>> 1.35) | libboost-thread1.35-dev,"
      }
    ]
  },
  {
    "sha": "ea98509fa5f76fac581a1d016c42c2407065e48d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTk4NTA5ZmE1Zjc2ZmFjNTgxYTFkMDE2YzQyYzI0MDcwNjVlNDhk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-19T09:51:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-19T09:51:32Z"
      },
      "message": "Merge #5803: Update debian changelog and control file\n\n544e64e Update debian changelog and control file (Matt Corallo)",
      "tree": {
        "sha": "09394463e1452eae2dabcbf4dc757423772fbed5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09394463e1452eae2dabcbf4dc757423772fbed5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea98509fa5f76fac581a1d016c42c2407065e48d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU5bIkAAoJEHSBCwEjRsmmNiMH/jOlRwgjSVwCIKPvH3h2bOqs\n0h7YniSCK+gynK2x2PAHDnvPB3ysJd7RM8Xnfj5FNxnzOwi/KFH2cuFU7mCwbtiz\nF2NUt7BuyLYmNzPArRnTQMS2mf030Cx7b2+lER6XsReIcpmMorMLMrn07UduZXeZ\nw5AJmfbgWYZ0MQDWfT2vf6MlKGqENgyCR3ENN1+MY1JqsMZAtQK9xsuYnRclKK7X\n2/cV5JZ2ZB9r5fp+gOLbgAmWyz/5FgxGYOIq49HQ4cKGTlqZkUvrZjraz8C7bV2r\nGc8gu8lG1Oyn7K5urRkf+kuNZXzGhsfLhjUBsV8WBhXqIT0LaIBLfIXrqHk/f58=\n=SYGP\n-----END PGP SIGNATURE-----",
        "payload": "tree 09394463e1452eae2dabcbf4dc757423772fbed5\nparent 47a79bb880fa7dceafdbdc5df50a36173fe74de9\nparent 544e64e975e93dcf22a682a12acebd26d2306b86\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424339472 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424339492 +0100\n\nMerge #5803: Update debian changelog and control file\n\n544e64e Update debian changelog and control file (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea98509fa5f76fac581a1d016c42c2407065e48d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea98509fa5f76fac581a1d016c42c2407065e48d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea98509fa5f76fac581a1d016c42c2407065e48d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47a79bb880fa7dceafdbdc5df50a36173fe74de9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a79bb880fa7dceafdbdc5df50a36173fe74de9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47a79bb880fa7dceafdbdc5df50a36173fe74de9"
      },
      {
        "sha": "544e64e975e93dcf22a682a12acebd26d2306b86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/544e64e975e93dcf22a682a12acebd26d2306b86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/544e64e975e93dcf22a682a12acebd26d2306b86"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7ce3babc1b1ae5cdb8ce5f84ffa6cb67c4abba71",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea98509fa5f76fac581a1d016c42c2407065e48d/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea98509fa5f76fac581a1d016c42c2407065e48d/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=ea98509fa5f76fac581a1d016c42c2407065e48d",
        "patch": "@@ -1,3 +1,15 @@\n+bitcoin (0.10.0-precise1) precise; urgency=medium\n+\n+  * New upstream releases.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Wed, 18 Feb 2015 13:22:00 -1000\n+\n+bitcoin (0.9.4-precise1) precise; urgency=high\n+\n+  * New upstream releases.\n+\n+ -- Matt Corallo (laptop - only while traveling) <matt@mattcorallo.com>  Mon, 12 Jan 2015 23:30:00 -1000\n+\n bitcoin (0.9.3-precise1) precise; urgency=medium\n \n   * New upstream releases."
      },
      {
        "sha": "4392bb33853f9d29b0567f51a8648e962b8f322d",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea98509fa5f76fac581a1d016c42c2407065e48d/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea98509fa5f76fac581a1d016c42c2407065e48d/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=ea98509fa5f76fac581a1d016c42c2407065e48d",
        "patch": "@@ -12,7 +12,7 @@ Build-Depends: debhelper,\n  libdb4.8++-dev,\n  libssl-dev,\n  pkg-config,\n- libminiupnpc8-dev,\n+ libminiupnpc8-dev | libminiupnpc-dev (>> 1.6),\n  libboost-filesystem-dev (>> 1.35) | libboost-filesystem1.35-dev,\n  libboost-program-options-dev (>> 1.35) | libboost-program-options1.35-dev,\n  libboost-thread-dev (>> 1.35) | libboost-thread1.35-dev,"
      }
    ]
  },
  {
    "sha": "07f4386b387caddd82502d575cc9dba80b81d9f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2Y0Mzg2YjM4N2NhZGRkODI1MDJkNTc1Y2M5ZGJhODBiODFkOWYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-19T11:00:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-19T11:09:26Z"
      },
      "message": "Merge #5689: openssl: abstract out OPENSSL_cleanse\n\n1630219 openssl: abstract out OPENSSL_cleanse (Cory Fields)",
      "tree": {
        "sha": "65727039c39354977ca8b9007ed9e395cb089586",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65727039c39354977ca8b9007ed9e395cb089586"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07f4386b387caddd82502d575cc9dba80b81d9f2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU5cRmAAoJEHSBCwEjRsmmqZsIAMv4Idw+6xfOl6XbayfbMOCi\n36VCthH37yJQI1jrCx+iB3Pa/tRHa5Zyn1HXHvEJ5hTMnghovSnwqY7E6SM1bv3N\nipYD4B8wYkWNQfCi5b9BYUnPxizj1bfEOcIOTf6PbYHf63BOiBd8QnX6Aj25t1CW\n7mAtVDISXdPXjvOkd0FsJ66wSmvzwHQi/FWB9tqvSAEJJMHRCxP8I10ctPdnAEAj\nqZdLJYzfY67j0vuj/Gs8nImBQsxwht1BAgFmhIzY7qkODy8pz020BYIiHeUJyphV\nvVK+vc+8qhV0jma2QSakdVUqF3PrK0YqOW63w/rPIosSP5Rl1QHrWOhcD5Kaa/w=\n=emYg\n-----END PGP SIGNATURE-----",
        "payload": "tree 65727039c39354977ca8b9007ed9e395cb089586\nparent ea98509fa5f76fac581a1d016c42c2407065e48d\nparent 1630219d906f592c9258bfe2a0e0c4923df35782\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424343617 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424344166 +0100\n\nMerge #5689: openssl: abstract out OPENSSL_cleanse\n\n1630219 openssl: abstract out OPENSSL_cleanse (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07f4386b387caddd82502d575cc9dba80b81d9f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07f4386b387caddd82502d575cc9dba80b81d9f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07f4386b387caddd82502d575cc9dba80b81d9f2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea98509fa5f76fac581a1d016c42c2407065e48d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea98509fa5f76fac581a1d016c42c2407065e48d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea98509fa5f76fac581a1d016c42c2407065e48d"
      },
      {
        "sha": "1630219d906f592c9258bfe2a0e0c4923df35782",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1630219d906f592c9258bfe2a0e0c4923df35782",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1630219d906f592c9258bfe2a0e0c4923df35782"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 44,
      "deletions": 17
    },
    "files": [
      {
        "sha": "7644f6b325bf1170cc6b794909a8485a0384c924",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -123,6 +123,7 @@ BITCOIN_CORE_H = \\\n   script/standard.h \\\n   serialize.h \\\n   streams.h \\\n+  support/cleanse.h \\\n   sync.h \\\n   threadsafety.h \\\n   timedata.h \\\n@@ -268,6 +269,7 @@ libbitcoin_util_a_SOURCES = \\\n   compat/strnlen.cpp \\\n   random.cpp \\\n   rpcprotocol.cpp \\\n+  support/cleanse.cpp \\\n   sync.cpp \\\n   uint256.cpp \\\n   util.cpp \\"
      },
      {
        "sha": "8ffe015b9e5fb1c930d72e0938418220a0914349",
        "filename": "src/allocators.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/allocators.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/allocators.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.h?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_ALLOCATORS_H\n #define BITCOIN_ALLOCATORS_H\n \n+#include \"support/cleanse.h\"\n+\n #include <map>\n #include <string>\n #include <string.h>\n@@ -14,8 +16,6 @@\n #include <boost/thread/mutex.hpp>\n #include <boost/thread/once.hpp>\n \n-#include <openssl/crypto.h> // for OPENSSL_cleanse()\n-\n /**\n  * Thread-safe class to keep track of locked (ie, non-swappable) memory pages.\n  *\n@@ -174,7 +174,7 @@ void LockObject(const T& t)\n template <typename T>\n void UnlockObject(const T& t)\n {\n-    OPENSSL_cleanse((void*)(&t), sizeof(T));\n+    memory_cleanse((void*)(&t), sizeof(T));\n     LockedPageManager::Instance().UnlockRange((void*)(&t), sizeof(T));\n }\n \n@@ -217,7 +217,7 @@ struct secure_allocator : public std::allocator<T> {\n     void deallocate(T* p, std::size_t n)\n     {\n         if (p != NULL) {\n-            OPENSSL_cleanse(p, sizeof(T) * n);\n+            memory_cleanse(p, sizeof(T) * n);\n             LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n         }\n         std::allocator<T>::deallocate(p, n);\n@@ -254,7 +254,7 @@ struct zero_after_free_allocator : public std::allocator<T> {\n     void deallocate(T* p, std::size_t n)\n     {\n         if (p != NULL)\n-            OPENSSL_cleanse(p, sizeof(T) * n);\n+            memory_cleanse(p, sizeof(T) * n);\n         std::allocator<T>::deallocate(p, n);\n     }\n };"
      },
      {
        "sha": "c8091850560a73065d48d52466199f5c9f0c6acf",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -172,7 +172,7 @@ bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)\n     vchData.resize(vchTemp.size() - nVersionBytes);\n     if (!vchData.empty())\n         memcpy(&vchData[0], &vchTemp[nVersionBytes], vchData.size());\n-    OPENSSL_cleanse(&vchTemp[0], vchData.size());\n+    memory_cleanse(&vchTemp[0], vchData.size());\n     return true;\n }\n "
      },
      {
        "sha": "c7f7e2167904ea1ee89704fe58e754cf10ed871c",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -26,8 +26,8 @@ bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::v\n \n     if (i != (int)WALLET_CRYPTO_KEY_SIZE)\n     {\n-        OPENSSL_cleanse(chKey, sizeof(chKey));\n-        OPENSSL_cleanse(chIV, sizeof(chIV));\n+        memory_cleanse(chKey, sizeof(chKey));\n+        memory_cleanse(chIV, sizeof(chIV));\n         return false;\n     }\n "
      },
      {
        "sha": "8a91498e2e82d2fa94474adc951907412b3beade",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -82,8 +82,8 @@ class CCrypter\n \n     void CleanKey()\n     {\n-        OPENSSL_cleanse(chKey, sizeof(chKey));\n-        OPENSSL_cleanse(chIV, sizeof(chIV));\n+        memory_cleanse(chKey, sizeof(chKey));\n+        memory_cleanse(chIV, sizeof(chIV));\n         fKeySet = false;\n     }\n "
      },
      {
        "sha": "3246e4b67a1c0def79c64f428390a2e51fca6807",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -21,8 +21,6 @@\n #include <boost/thread.hpp>\n #include <boost/version.hpp>\n \n-#include <openssl/rand.h>\n-\n using namespace std;\n \n "
      },
      {
        "sha": "b69461ad9edbca93a6c11f6e6aa5ecb7d77944dd",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -13,7 +13,6 @@\n \n #include <stdexcept>\n \n-#include <openssl/x509.h>\n #include <openssl/x509_vfy.h>\n \n #include <QDateTime>"
      },
      {
        "sha": "61f8a3415decf682ef56a31c00a90a9e8dd8f7bd",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -9,6 +9,8 @@\n \n #include \"base58.h\"\n \n+#include <openssl/x509.h>\n+\n #include <QByteArray>\n #include <QList>\n #include <QString>"
      },
      {
        "sha": "96ceeb18a4b98c560320dd3260dbea834b20a27e",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -16,7 +16,6 @@\n \n #include <cstdlib>\n \n-#include <openssl/x509.h>\n #include <openssl/x509_vfy.h>\n \n #include <QApplication>"
      },
      {
        "sha": "ae25bee1b71c8cd280d2eb13e1968d079594d45a",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"random.h\"\n \n+#include \"support/cleanse.h\"\n #ifdef WIN32\n #include \"compat.h\" // for Windows API\n #endif\n@@ -18,7 +19,6 @@\n #include <sys/time.h>\n #endif\n \n-#include <openssl/crypto.h>\n #include <openssl/err.h>\n #include <openssl/rand.h>\n \n@@ -40,7 +40,7 @@ void RandAddSeed()\n     // Seed with CPU performance counter\n     int64_t nCounter = GetPerformanceCounter();\n     RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    OPENSSL_cleanse((void*)&nCounter, sizeof(nCounter));\n+    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n }\n \n void RandAddSeedPerfmon()\n@@ -70,7 +70,7 @@ void RandAddSeedPerfmon()\n     RegCloseKey(HKEY_PERFORMANCE_DATA);\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(begin_ptr(vData), nSize, nSize / 100.0);\n-        OPENSSL_cleanse(begin_ptr(vData), nSize);\n+        memory_cleanse(begin_ptr(vData), nSize);\n         LogPrint(\"rand\", \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n         static bool warned = false; // Warn only once"
      },
      {
        "sha": "9999c2341f78d8f9b0dc0801fea7b4916aca1046",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -16,6 +16,7 @@\n #include <map>\n #include <set>\n #include <stdint.h>\n+#include <stdio.h>\n #include <string>\n #include <string.h>\n #include <utility>"
      },
      {
        "sha": "a2141b244980399ab4d91b351ff809dd43f4efab",
        "filename": "src/support/cleanse.cpp",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/support/cleanse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/support/cleanse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.cpp?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"cleanse.h\"\n+\n+#include <openssl/crypto.h>\n+\n+void memory_cleanse(void *ptr, size_t len)\n+{\n+    OPENSSL_cleanse(ptr, len);\n+}"
      },
      {
        "sha": "3e02aa8fd1fe59b7283730635d0774f3119fa0c5",
        "filename": "src/support/cleanse.h",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07f4386b387caddd82502d575cc9dba80b81d9f2/src/support/cleanse.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07f4386b387caddd82502d575cc9dba80b81d9f2/src/support/cleanse.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.h?ref=07f4386b387caddd82502d575cc9dba80b81d9f2",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_CLEANSE_H\n+#define BITCOIN_SUPPORT_CLEANSE_H\n+\n+#include <stdlib.h>\n+\n+void memory_cleanse(void *ptr, size_t len);\n+\n+#endif // BITCOIN_SUPPORT_CLEANSE_H"
      }
    ]
  },
  {
    "sha": "a026a56c4eb558e9c85d90854ad06f8155c45e91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDI2YTU2YzRlYjU1OGU5Yzg1ZDkwODU0YWQwNmY4MTU1YzQ1ZTkx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-20T08:43:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-20T08:51:38Z"
      },
      "message": "Merge #5706: fix crash: RPC \\\n\ne5d9d77 fix crash: createmultisig and addmultisigaddress (fsb4000)",
      "tree": {
        "sha": "2936945f3868fd22965eb24d57952bf520d08c6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2936945f3868fd22965eb24d57952bf520d08c6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a026a56c4eb558e9c85d90854ad06f8155c45e91",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU5vWaAAoJEHSBCwEjRsmmx9YH/3WWPmJ+alI+ZPHq9GoyVXi4\nPcC6wPUS+dAYg3ZiBI0EXmqzqFtgHwOczl30u5Ss/vPoC894aQAfNDlB1h7WtuB3\n+0Um/VuXMmpsl7E3IQN8oVmUrxJ01aGrpvFNTciLY+Xv0S1hg4E2gpb6gKl0PW9g\ngpc+LeUphi8F62+T12Wr32ZskgzIENtfRNYgmwFjnukx1zgw13ExKKAlC9QkHRqa\nAN0BSA2wKM30asdLZczjBfi8K28O6gHwEFYk10X5zhuqeFz+vWBTFH/UjgfJvdeR\nHOyXnJvmlOccBxZbLrFAMu7mSXfIGmyCGmR8sYbB/v0jquChSkeWnWBfGpSTywc=\n=rSkG\n-----END PGP SIGNATURE-----",
        "payload": "tree 2936945f3868fd22965eb24d57952bf520d08c6c\nparent 07f4386b387caddd82502d575cc9dba80b81d9f2\nparent e5d9d77df2de715d24638e3bab78750b7ad3e1fd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424421835 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424422298 +0100\n\nMerge #5706: fix crash: RPC \\\n\ne5d9d77 fix crash: createmultisig and addmultisigaddress (fsb4000)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a026a56c4eb558e9c85d90854ad06f8155c45e91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a026a56c4eb558e9c85d90854ad06f8155c45e91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a026a56c4eb558e9c85d90854ad06f8155c45e91/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07f4386b387caddd82502d575cc9dba80b81d9f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07f4386b387caddd82502d575cc9dba80b81d9f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07f4386b387caddd82502d575cc9dba80b81d9f2"
      },
      {
        "sha": "e5d9d77df2de715d24638e3bab78750b7ad3e1fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5d9d77df2de715d24638e3bab78750b7ad3e1fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5d9d77df2de715d24638e3bab78750b7ad3e1fd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2eda4d3355236b89f91562b877cec5575cfb9a99",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a026a56c4eb558e9c85d90854ad06f8155c45e91/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a026a56c4eb558e9c85d90854ad06f8155c45e91/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=a026a56c4eb558e9c85d90854ad06f8155c45e91",
        "patch": "@@ -228,6 +228,8 @@ CScript _createmultisig_redeemScript(const Array& params)\n         throw runtime_error(\n             strprintf(\"not enough keys supplied \"\n                       \"(got %u keys, but need at least %d to redeem)\", keys.size(), nRequired));\n+    if (keys.size() > 16)\n+        throw runtime_error(\"Number of addresses involved in the multisignature address creation > 16\\nReduce the number\");\n     std::vector<CPubKey> pubkeys;\n     pubkeys.resize(keys.size());\n     for (unsigned int i = 0; i < keys.size(); i++)"
      }
    ]
  },
  {
    "sha": "aaba10f275059cd762c1f07597aa5efb24176cdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWJhMTBmMjc1MDU5Y2Q3NjJjMWYwNzU5N2FhNWVmYjI0MTc2Y2Rk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-20T08:54:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-20T08:59:33Z"
      },
      "message": "Revert \"Make nicer pull request merge messages\"\n\nThis reverts commit 1078fb08851442bcd7750c3d5015dc1fe7e4d927 (and thus\npull #5623). It has various issues:\n\n- Pull request names get cut off at \", see e.g. a026a56\n\n- Merge script no longer copes with pulls that have a milestone\n  attached, due to a duplicate 'title' in JSON that is not handled by the\n  ad-hoc parsing.",
      "tree": {
        "sha": "3b07e17fcc358b054c95245942769498e8787ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b07e17fcc358b054c95245942769498e8787ac9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aaba10f275059cd762c1f07597aa5efb24176cdd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU5vd2AAoJEHSBCwEjRsmmWXsH/jOCjVEmbE3Iep3i9dH2STig\nU/UUoDqBAhGSChlk9EeYn+cz+ZXiN3di4WB/UC94y+xHPd0EpPc83KIFOdsz1wZd\nZ6iqWeQJ1KVU16zG3fyrMeE1UwQDj0gnrL9zdHA/njj+0RGu7ccsAr5uxzQpI52n\n5jpgwuLP4DmIoVMBeTeo1pmKmNOAJUUVqWEBX+G/EZxkJ3c79uXJ3hBxcwRLSjgK\nhdO8IAp5nh6tME0DaGIt5eO6oNTBQligromtbJMuT4NeSPrgBEgLDET5DShxzFTX\n26QqKllLw7QFcVcqPPq3+oVQfPKNVo5BUL426TsxyZKmfQOUmOBrS6ghurR91fE=\n=UgPR\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b07e17fcc358b054c95245942769498e8787ac9\nparent a026a56c4eb558e9c85d90854ad06f8155c45e91\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424422478 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424422773 +0100\n\nRevert \"Make nicer pull request merge messages\"\n\nThis reverts commit 1078fb08851442bcd7750c3d5015dc1fe7e4d927 (and thus\npull #5623). It has various issues:\n\n- Pull request names get cut off at \", see e.g. a026a56\n\n- Merge script no longer copes with pulls that have a milestone\n  attached, due to a duplicate 'title' in JSON that is not handled by the\n  ad-hoc parsing.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaba10f275059cd762c1f07597aa5efb24176cdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aaba10f275059cd762c1f07597aa5efb24176cdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaba10f275059cd762c1f07597aa5efb24176cdd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a026a56c4eb558e9c85d90854ad06f8155c45e91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a026a56c4eb558e9c85d90854ad06f8155c45e91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a026a56c4eb558e9c85d90854ad06f8155c45e91"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ec7a1f4c4b3d881b8887656bf7fa3eb2eb531c91",
        "filename": "contrib/devtools/github-merge.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaba10f275059cd762c1f07597aa5efb24176cdd/contrib/devtools/github-merge.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaba10f275059cd762c1f07597aa5efb24176cdd/contrib/devtools/github-merge.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.sh?ref=aaba10f275059cd762c1f07597aa5efb24176cdd",
        "patch": "@@ -82,15 +82,13 @@ function cleanup() {\n }\n \n # Create unsigned merge commit.\n-PRTITLE=`curl -s https://api.github.com/repos/$REPO/pulls/$PULL | grep -e '  \"title\": \".*\",'| awk -F'\"' '{print $4}'`\n-MERGEMESSAGE=\"Merge #$PULL: $PRTITLE\"\n (\n-  echo $MERGEMESSAGE\n+  echo \"Merge pull request #$PULL\"\n   echo \"\"\n   git log --no-merges --topo-order --pretty='format:%h %s (%an)' pull/\"$PULL\"/base..pull/\"$PULL\"/head\n )>\"$TMPDIR/message\"\n if git merge -q --commit --no-edit --no-ff -m \"$(<\"$TMPDIR/message\")\" pull/\"$PULL\"/head; then\n-  if [ \"d$(git log --pretty='format:%s' -n 1)\" != \"d$MERGEMESSAGE\" ]; then\n+  if [ \"d$(git log --pretty='format:%s' -n 1)\" != \"dMerge pull request #$PULL\" ]; then\n     echo \"ERROR: Creating merge failed (already merged?).\" >&2\n     cleanup\n     exit 4"
      }
    ]
  },
  {
    "sha": "de5403f87874c5c54c5a8358cbf38140bee87a9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTU0MDNmODc4NzRjNWM1NGM1YTgzNThjYmYzODE0MGJlZTg3YTll",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-02-18T16:33:56Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-02-21T01:11:33Z"
      },
      "message": "[GUI] Move fee dialog minimise button away from \"Transaction Fee\"\n\nIts original placement was causing confusion among some users.",
      "tree": {
        "sha": "39d72fe269abc6811525016e593fa01fb0107579",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39d72fe269abc6811525016e593fa01fb0107579"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de5403f87874c5c54c5a8358cbf38140bee87a9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5403f87874c5c54c5a8358cbf38140bee87a9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de5403f87874c5c54c5a8358cbf38140bee87a9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5403f87874c5c54c5a8358cbf38140bee87a9e/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175d86e633bedcfb642fb326f1ec0b43c14c4f3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/175d86e633bedcfb642fb326f1ec0b43c14c4f3b"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "b1ed7a27b5c8882be87077c33ae19383347ca76a",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de5403f87874c5c54c5a8358cbf38140bee87a9e/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de5403f87874c5c54c5a8358cbf38140bee87a9e/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=de5403f87874c5c54c5a8358cbf38140bee87a9e",
        "patch": "@@ -771,16 +771,6 @@\n                 </property>\n                </widget>\n               </item>\n-              <item>\n-               <widget class=\"QPushButton\" name=\"buttonMinimizeFee\">\n-                <property name=\"toolTip\">\n-                 <string>collapse fee-settings</string>\n-                </property>\n-                <property name=\"text\">\n-                 <string>Minimize</string>\n-                </property>\n-               </widget>\n-              </item>\n              </layout>\n             </item>\n             <item>\n@@ -811,6 +801,16 @@\n             </property>\n            </spacer>\n           </item>\n+          <item>\n+           <widget class=\"QPushButton\" name=\"buttonMinimizeFee\">\n+            <property name=\"toolTip\">\n+             <string>collapse fee-settings</string>\n+            </property>\n+            <property name=\"text\">\n+             <string>Minimize</string>\n+            </property>\n+           </widget>\n+          </item>\n          </layout>\n         </item>\n         <item>"
      }
    ]
  },
  {
    "sha": "34e5015cd21e27c1bf635d92531afac93f553096",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGU1MDE1Y2QyMWUyN2MxYmY2MzVkOTI1MzFhZmFjOTNmNTUzMDk2",
    "commit": {
      "author": {
        "name": "Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-02-21T12:57:44Z"
      },
      "committer": {
        "name": "Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-02-21T13:14:19Z"
      },
      "message": "Add unit tests for next difficulty calculations\n\nSplit GetNextWorkRequired() into two functions to allow the difficulty calculations to\nbe tested without requiring a full blockchain.\nAdd unit tests to cover basic difficulty calculation, plus each of the min/max actual\ntime, and maximum difficulty target conditions.",
      "tree": {
        "sha": "0497bd7f74f211fd261ec173225ab8eca1760fdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0497bd7f74f211fd261ec173225ab8eca1760fdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34e5015cd21e27c1bf635d92531afac93f553096",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJU6ISrAAoJEJFC5fflM847RC8IAJGxJiyv5z/EmkKCJEU6CU3a\ncuCjORvxRQFyBPYShvbe7W22nQZilUAFMtjgReuyNqnRoU3E0wlYPzdWZT4WKXZ9\nPUMvcBQdwJXuLefaZuPmI+i+Mtk8D5/uXlHXT+J5xI8yTe+8q+9VNN53lyWM2RX3\nnqrbV1OMECqWP31BsWG18use6JcuXfFZw2o+XoFCWYH2a0sp6Ue5l7TCZHwitoUs\n0XMVCxkbkf+bPKJbGb5r83s3ZaL4uYfX80eItkRmvvmBrRZ/wqUurPgIhoDSKKGj\nWV9M+mDYL9luDyT1t+34B3tZCbj+khkD7it6Pj5Y3aA41VqIdFVacu1SxiELbWo=\n=pZCh\n-----END PGP SIGNATURE-----",
        "payload": "tree 0497bd7f74f211fd261ec173225ab8eca1760fdb\nparent aaba10f275059cd762c1f07597aa5efb24176cdd\nauthor Ross Nicoll <jrn@jrn.me.uk> 1424523464 +0000\ncommitter Ross Nicoll <jrn@jrn.me.uk> 1424524459 +0000\n\nAdd unit tests for next difficulty calculations\n\nSplit GetNextWorkRequired() into two functions to allow the difficulty calculations to\nbe tested without requiring a full blockchain.\nAdd unit tests to cover basic difficulty calculation, plus each of the min/max actual\ntime, and maximum difficulty target conditions.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e5015cd21e27c1bf635d92531afac93f553096",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34e5015cd21e27c1bf635d92531afac93f553096",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e5015cd21e27c1bf635d92531afac93f553096/comments",
    "author": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aaba10f275059cd762c1f07597aa5efb24176cdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaba10f275059cd762c1f07597aa5efb24176cdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aaba10f275059cd762c1f07597aa5efb24176cdd"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 74,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6774745de2453ebe9d998e3a7f90b8252ae09432",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e5015cd21e27c1bf635d92531afac93f553096/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e5015cd21e27c1bf635d92531afac93f553096/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=34e5015cd21e27c1bf635d92531afac93f553096",
        "patch": "@@ -55,6 +55,7 @@ BITCOIN_TESTS =\\\n   test/multisig_tests.cpp \\\n   test/netbase_tests.cpp \\\n   test/pmt_tests.cpp \\\n+  test/pow_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\\n   test/script_P2SH_tests.cpp \\"
      },
      {
        "sha": "b75b293c908ba67b3663df29193d33f50e8c0fd9",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e5015cd21e27c1bf635d92531afac93f553096/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e5015cd21e27c1bf635d92531afac93f553096/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=34e5015cd21e27c1bf635d92531afac93f553096",
        "patch": "@@ -48,8 +48,13 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n         pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n \n+    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime());\n+}\n+\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime)\n+{\n     // Limit adjustment step\n-    int64_t nActualTimespan = pindexLast->GetBlockTime() - pindexFirst->GetBlockTime();\n+    int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n     LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n     if (nActualTimespan < Params().TargetTimespan()/4)\n         nActualTimespan = Params().TargetTimespan()/4;"
      },
      {
        "sha": "a5fbba62364c0f1709cd11723b5137694dac6586",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e5015cd21e27c1bf635d92531afac93f553096/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e5015cd21e27c1bf635d92531afac93f553096/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=34e5015cd21e27c1bf635d92531afac93f553096",
        "patch": "@@ -14,6 +14,7 @@ class uint256;\n class arith_uint256;\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);"
      },
      {
        "sha": "e42c1b0a8b66af7e2952c1b48f172b983af92de4",
        "filename": "src/test/pow_tests.cpp",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e5015cd21e27c1bf635d92531afac93f553096/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e5015cd21e27c1bf635d92531afac93f553096/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=34e5015cd21e27c1bf635d92531afac93f553096",
        "patch": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"pow.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace std;\n+\n+BOOST_AUTO_TEST_SUITE(pow_tests)\n+\n+/* Test calculation of next difficulty target with no constraints applying */\n+BOOST_AUTO_TEST_CASE(get_next_work)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1261130161; // Block #30240\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 32255;\n+    pindexLast.nTime = 1262152739;  // Block #32255\n+    pindexLast.nBits = 0x1d00ffff;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00d86a);\n+}\n+\n+/* Test the constraint on the upper bound for next work */\n+BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1231006505; // Block #0\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 2015;\n+    pindexLast.nTime = 1233061996;  // Block #2015\n+    pindexLast.nBits = 0x1d00ffff;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00ffff);\n+}\n+\n+/* Test the constraint on the lower bound for actual time taken */\n+BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1279008237; // Block #66528\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 68543;\n+    pindexLast.nTime = 1279297671;  // Block #68543\n+    pindexLast.nBits = 0x1c05a3f4;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1c0168fd);\n+}\n+\n+/* Test the constraint on the upper bound for actual time taken */\n+BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+    int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 46367;\n+    pindexLast.nTime = 1269211443;  // Block #46367\n+    pindexLast.nBits = 0x1c387f6f;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00e1fd);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjI5OGNhN2Q3NTQwYWNjMTlkMWRmNzlhNWMyYWY3YjVhY2E4Y2Jl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-23T18:29:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-23T18:30:24Z"
      },
      "message": "Merge pull request #5708\n\nb63ae56 Add list of implemented BIPs (Pieter Wuille)",
      "tree": {
        "sha": "44680ed49bcb925e058e56b5ac93b947551fb781",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44680ed49bcb925e058e56b5ac93b947551fb781"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU63HAAAoJEHSBCwEjRsmmeiQH/26IXEO+ViyWOm8XRlcZUGEr\nqYV9ul13xkojuyaKq6QjBUZAxghyD0v+8VOzwR5tbVhpmrn6IoiDIQFpV1NOUXye\nqO1WtGyflbOunVt9OdaCfgCAsDXJ2ChaMiyEda2FkIHS4os2AAy2PTRr0GYoJFCk\n8sqm4poUldGsM15fCzksNwIBoiQhUOYNxV+aC92moaBQdraGuBcqM7ahfL8jon1e\nKFCP8OqZszxePaKXw1BOMLxfh8Q/AlDiylC/TG/IMwV9voLNVL8bkd+np3ihUO0i\n6U+9z78YLLTDj48dcESg43Atd3Vj/pjJ5XKAyRA4cIx4mCar9GMBAqbWU3M1CPk=\n=y6FH\n-----END PGP SIGNATURE-----",
        "payload": "tree 44680ed49bcb925e058e56b5ac93b947551fb781\nparent aaba10f275059cd762c1f07597aa5efb24176cdd\nparent b63ae5626910eaa41337c8173cac0c4728a5432d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424716199 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424716224 +0100\n\nMerge pull request #5708\n\nb63ae56 Add list of implemented BIPs (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aaba10f275059cd762c1f07597aa5efb24176cdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaba10f275059cd762c1f07597aa5efb24176cdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aaba10f275059cd762c1f07597aa5efb24176cdd"
      },
      {
        "sha": "b63ae5626910eaa41337c8173cac0c4728a5432d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b63ae5626910eaa41337c8173cac0c4728a5432d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b63ae5626910eaa41337c8173cac0c4728a5432d"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "579eadfff336fcc7f53e034bf7b0140b303b20db",
        "filename": "doc/bips.md",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "patch": "@@ -0,0 +1,18 @@\n+BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.10.0**):\n+\n+* [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n+* [`BIP 13`](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki): The address format for P2SH addresses has been implemented since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n+* [`BIP 14`](https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki): The subversion string is being used as User Agent since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n+* [`BIP 16`](https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki): The pay-to-script-hash evaluation rules have been implemented since **v0.6.0**, and took effect on *April 1st 2012* ([PR #748](https://github.com/bitcoin/bitcoin/pull/748)).\n+* [`BIP 21`](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki): The URI format for Bitcoin payments has been implemented since **v0.6.0** ([PR #176](https://github.com/bitcoin/bitcoin/pull/176)).\n+* [`BIP 22`](https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki): The 'getblocktemplate' (GBT) RPC protocol for mining has been implemented since **v0.7.0** ([PR #936](https://github.com/bitcoin/bitcoin/pull/936)).\n+* [`BIP 23`](https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki): Some extensions to GBT have been implemented since **v0.10.0rc1**, including longpolling and block proposals ([PR #1816](https://github.com/bitcoin/bitcoin/pull/1816)).\n+* [`BIP 30`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki): The evaluation rules to forbid creating new transactions with the same txid as previous not-fully-spent transactions were implemented since **v0.6.0**, and the rule took effect on *March 15th 2012* ([PR #915](https://github.com/bitcoin/bitcoin/pull/915)).\n+* [`BIP 31`](https://github.com/bitcoin/bips/blob/master/bip-0031.mediawiki): The 'pong' protocol message (and the protocol version bump to 60001) has been implemented since **v0.6.1** ([PR #1081](https://github.com/bitcoin/bitcoin/pull/1081)).\n+* [`BIP 34`](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki): The rule that requires blocks to contain their height (number) in the coinbase input, and the introduction of version 2 blocks has been implemented since **v0.7.0**. The rule took effect for version 2 blocks as of *block 224413* (March 5th 2013), and version 1 blocks are no longer allowed since *block 227931* (March 25th 2013) ([PR #1526](https://github.com/bitcoin/bitcoin/pull/1526)).\n+* [`BIP 35`](https://github.com/bitcoin/bips/blob/master/bip-0035.mediawiki): The 'mempool' protocol message (and the protocol version bump to 60002) has been implemented since **v0.7.0** ([PR #1641](https://github.com/bitcoin/bitcoin/pull/1641)).\n+* [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial merkle trees for blocks , and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)).\n+* [`BIP 42`](https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki): The bug that would have caused the subsidy schedule to resume after block 13440000 was fixed in **v0.9.2** ([PR #3842](https://github.com/bitcoin/bitcoin/pull/3842)).\n+* [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)).\n+* [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n+* [`BIP 70`](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) [`71`](https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki) [`72`](https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki): Payment Protocol support has been available in Bitcoin Core GUI since **v0.9.0** ([PR #5216](https://github.com/bitcoin/bitcoin/pull/5216))."
      }
    ]
  },
  {
    "sha": "3ee028f131db0ea78bfde0961a3fca7b9e95b193",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWUwMjhmMTMxZGIwZWE3OGJmZGUwOTYxYTNmY2E3YjllOTViMTkz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-23T22:48:57Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-23T22:48:57Z"
      },
      "message": "build: disable reduced exports by default\n\nThis is really a packager's option. While it's helpful to encourage devs to\ntest this option for daily builds, it's not reliable in several real-world\nuse-cases. Some older libstdc++ runtimes (freebsd 9, debian wheezy, for\nexample) fail to properly catch exceptions due to mismatched type_info.\n\nSee https://gcc.gnu.org/bugzilla/show_bug.cgi?id=19664 for more info.",
      "tree": {
        "sha": "f4f7828672be0e9daa5337a14d51bd61d400b697",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4f7828672be0e9daa5337a14d51bd61d400b697"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ee028f131db0ea78bfde0961a3fca7b9e95b193",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ee028f131db0ea78bfde0961a3fca7b9e95b193",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ee028f131db0ea78bfde0961a3fca7b9e95b193",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ee028f131db0ea78bfde0961a3fca7b9e95b193/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 9,
      "deletions": 28
    },
    "files": [
      {
        "sha": "9dd3f17d88dd82be4d93f7652b5f2b0db9780ebf",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 9,
        "deletions": 28,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ee028f131db0ea78bfde0961a3fca7b9e95b193/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ee028f131db0ea78bfde0961a3fca7b9e95b193/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=3ee028f131db0ea78bfde0961a3fca7b9e95b193",
        "patch": "@@ -115,9 +115,9 @@ AC_ARG_ENABLE([hardening],\n \n AC_ARG_ENABLE([reduce-exports],\n   [AS_HELP_STRING([--enable-reduce-exports],\n-  [attempt to reduce exported symbols in the resulting executables (default is yes)])],\n+  [attempt to reduce exported symbols in the resulting executables (default is no)])],\n   [use_reduce_exports=$enableval],\n-  [use_reduce_exports=auto])\n+  [use_reduce_exports=no])\n \n AC_ARG_ENABLE([ccache],\n   [AS_HELP_STRING([--enable-ccache],\n@@ -473,20 +473,12 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n     if test x$use_reduce_exports = xyes; then\n       AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduced-exports.])\n     fi\n-      AC_MSG_WARN([Cannot find a working visibility attribute. Disabling reduced exports.])\n-      use_reduce_exports=no\n   ]\n )\n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n-  [\n-    if test x$use_reduce_exports = xyes; then\n-      AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduced-exports.])\n-    fi\n-    AC_MSG_WARN([Cannot set default symbol visibility. Disabling reduced exports.])\n-    use_reduce_exports=no\n-  ])\n+  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduced-exports.])])\n fi\n \n LEVELDB_CPPFLAGS=\n@@ -533,7 +525,7 @@ AX_BOOST_THREAD\n AX_BOOST_CHRONO\n \n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AC_MSG_CHECKING([for working boost reduced exports])\n   TEMP_CPPFLAGS=\"$CPPFLAGS\"\n   CPPFLAGS=\"$BOOST_CPPFLAGS $CPPFLAGS\"\n@@ -547,25 +539,14 @@ if test x$use_reduce_exports != xno; then\n       #endif\n     ]])],[\n       AC_MSG_RESULT(yes)\n-    ],[:\n-    if test x$use_reduce_exports = xauto; then\n-      use_reduce_exports=no\n-    else\n-      if test x$use_reduce_exports = xyes; then\n-        AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduced-exports.])\n-      fi\n-    fi\n-    AC_MSG_RESULT(no)\n-    AC_MSG_WARN([boost versions < 1.49 are known to have symbol visibility issues. Disabling reduced exports.])\n+    ],[\n+    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduced-exports.])\n   ])\n   CPPFLAGS=\"$TEMP_CPPFLAGS\"\n fi\n-\n-elif test x$use_reduce_exports = xauto; then\n-    use_reduce_exports=yes\n fi\n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n     CXXFLAGS=\"$CXXFLAGS $RE_CXXFLAGS\"\n     AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"])\n fi\n@@ -827,7 +808,7 @@ else\n fi\n \n AC_MSG_CHECKING([whether to reduce exports])\n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AC_MSG_RESULT([yes])\n else\n   AC_MSG_RESULT([no])"
      }
    ]
  },
  {
    "sha": "aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTM2NzMwNjRjNWNjMjAwOWQ0YTc1ZDBhYjhhNTUzZTk5ODYxY2Ni",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-23T22:56:15Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-23T22:56:15Z"
      },
      "message": "build: remove libstdc++ backwards-compat\n\nBackwards-compatibility for libstdc++ is not limited to straightforward abi\nchanges. Symbol visibility also needs to be taken into consideration, and\nthat really can't be addressed simply.\n\nInstead, just static-link libstdc++ for backwards-compat.",
      "tree": {
        "sha": "fc3a91b57fbe4e3e1306d5e3488c0da54a60ef7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc3a91b57fbe4e3e1306d5e3488c0da54a60ef7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa3673064c5cc2009d4a75d0ab8a553e99861ccb/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ee028f131db0ea78bfde0961a3fca7b9e95b193",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ee028f131db0ea78bfde0961a3fca7b9e95b193",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ee028f131db0ea78bfde0961a3fca7b9e95b193"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 1,
      "deletions": 97
    },
    "files": [
      {
        "sha": "006c5f38aa963c3cde504e04b375499d5a709fe2",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa3673064c5cc2009d4a75d0ab8a553e99861ccb/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa3673064c5cc2009d4a75d0ab8a553e99861ccb/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
        "patch": "@@ -133,7 +133,7 @@ AC_ARG_ENABLE([lcov],\n \n AC_ARG_ENABLE([glibc-back-compat],\n   [AS_HELP_STRING([--enable-glibc-back-compat],\n-  [enable backwards compatibility with glibc and libstdc++])],\n+  [enable backwards compatibility with glibc])],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n "
      },
      {
        "sha": "37dfd5dbaa117d49643e5d2fdde5f22a723af7e2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa3673064c5cc2009d4a75d0ab8a553e99861ccb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa3673064c5cc2009d4a75d0ab8a553e99861ccb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
        "patch": "@@ -280,7 +280,6 @@ libbitcoin_util_a_SOURCES = \\\n \n if GLIBC_BACK_COMPAT\n libbitcoin_util_a_SOURCES += compat/glibc_compat.cpp\n-libbitcoin_util_a_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n # cli: shared between bitcoin-cli and bitcoin-qt\n@@ -372,7 +371,6 @@ libbitcoinconsensus_la_SOURCES = \\\n \n if GLIBC_BACK_COMPAT\n   libbitcoinconsensus_la_SOURCES += compat/glibc_compat.cpp\n-  libbitcoinconsensus_la_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)"
      },
      {
        "sha": "4f2771e57a086ca983cec57b42376c003d480da8",
        "filename": "src/compat/glibcxx_compat.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 94,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ee028f131db0ea78bfde0961a3fca7b9e95b193/src/compat/glibcxx_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ee028f131db0ea78bfde0961a3fca7b9e95b193/src/compat/glibcxx_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_compat.cpp?ref=3ee028f131db0ea78bfde0961a3fca7b9e95b193",
        "patch": "@@ -1,94 +0,0 @@\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <cstddef>\n-#include <istream>\n-#include <stdexcept>\n-#include <typeinfo>\n-\n-#ifndef _GLIBCXX_USE_NOEXCEPT\n-#define _GLIBCXX_USE_NOEXCEPT throw()\n-#endif\n-\n-namespace std\n-{\n-const char* bad_exception::what() const throw()\n-{\n-    return \"std::bad_exception\";\n-}\n-\n-const char* bad_cast::what() const throw()\n-{\n-    return \"std::bad_cast\";\n-}\n-\n-const char* bad_alloc::what() const throw()\n-{\n-    return \"std::bad_alloc\";\n-}\n-\n-namespace __detail\n-{\n-struct _List_node_base {\n-    void _M_hook(std::__detail::_List_node_base* const __position) throw() __attribute__((used))\n-    {\n-        _M_next = __position;\n-        _M_prev = __position->_M_prev;\n-        __position->_M_prev->_M_next = this;\n-        __position->_M_prev = this;\n-    }\n-\n-    void _M_unhook() __attribute__((used))\n-    {\n-        _List_node_base* const __next_node = _M_next;\n-        _List_node_base* const __prev_node = _M_prev;\n-        __prev_node->_M_next = __next_node;\n-        __next_node->_M_prev = __prev_node;\n-    }\n-\n-    _List_node_base* _M_next;\n-    _List_node_base* _M_prev;\n-};\n-} // namespace detail\n-\n-template ostream& ostream::_M_insert(bool);\n-template ostream& ostream::_M_insert(long);\n-template ostream& ostream::_M_insert(double);\n-template ostream& ostream::_M_insert(unsigned long);\n-template ostream& ostream::_M_insert(const void*);\n-template ostream& __ostream_insert(ostream&, const char*, streamsize);\n-template istream& istream::_M_extract(long&);\n-template istream& istream::_M_extract(unsigned short&);\n-\n-out_of_range::~out_of_range() _GLIBCXX_USE_NOEXCEPT {}\n-\n-length_error::~length_error() _GLIBCXX_USE_NOEXCEPT {}\n-\n-// Used with permission.\n-// See: https://github.com/madlib/madlib/commit/c3db418c0d34d6813608f2137fef1012ce03043d\n-\n-void ctype<char>::_M_widen_init() const\n-{\n-    char __tmp[sizeof(_M_widen)];\n-    for (unsigned __i = 0; __i < sizeof(_M_widen); ++__i)\n-        __tmp[__i] = __i;\n-    do_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n-\n-    _M_widen_ok = 1;\n-    // Set _M_widen_ok to 2 if memcpy can't be used.\n-    for (unsigned __i = 0; __i < sizeof(_M_widen); ++__i)\n-        if (__tmp[__i] != _M_widen[__i]) {\n-            _M_widen_ok = 2;\n-            break;\n-        }\n-}\n-\n-void __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__));\n-void __throw_out_of_range_fmt(const char* err, ...)\n-{\n-    // Safe and over-simplified version. Ignore the format and print it as-is.\n-    __throw_out_of_range(err);\n-}\n-\n-} // namespace std"
      }
    ]
  },
  {
    "sha": "06715165f9215a954c0b5d0b15037aecff8b1d74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjcxNTE2NWY5MjE1YTk1NGMwYjVkMGIxNTAzN2FlY2ZmOGIxZDc0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-23T23:18:08Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-23T23:22:58Z"
      },
      "message": "build: change reduce exports/static libstdc++ options for gitian and travis\n\nFor Gitian releases:\n  - Windows builds remain unchanged. libstdc++ was already linked statically.\n  - OSX builds remain unchanged. libstdc++ is tied to the SDK and not worth\n    messing with.\n  - Linux builds now statically link libstdc++.\n\nFor Travis:\n  - Match the previous behavior by adding --enable-reduce-exports as\n  necessary.\n  - Use static libstdc++ for the full Linux build.",
      "tree": {
        "sha": "96cd6fbdc46d557d89fbb87396a77f9546abcbd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96cd6fbdc46d557d89fbb87396a77f9546abcbd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06715165f9215a954c0b5d0b15037aecff8b1d74",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06715165f9215a954c0b5d0b15037aecff8b1d74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06715165f9215a954c0b5d0b15037aecff8b1d74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06715165f9215a954c0b5d0b15037aecff8b1d74/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa3673064c5cc2009d4a75d0ab8a553e99861ccb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa3673064c5cc2009d4a75d0ab8a553e99861ccb"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e08e78dabf5e1e60c7ac39116e4d27b390fa4bd2",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06715165f9215a954c0b5d0b15037aecff8b1d74/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06715165f9215a954c0b5d0b15037aecff8b1d74/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=06715165f9215a954c0b5d0b15037aecff8b1d74",
        "patch": "@@ -25,19 +25,19 @@ matrix:\n   fast_finish: true\n   include:\n     - compiler: \": ARM\"\n-      env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": bitcoind\"\n-      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat CPPFLAGS=-DDEBUG_LOCKORDER\"\n+      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \": No wallet\"\n-      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": 32-bit + dash\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\" USE_SHELL=\"/bin/dash\"\n+      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Cross-Mac\"\n-      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.9 GOAL=\"deploy\"\n+      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n     - compiler: \": Win64\"\n-      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui\" MAKEJOBS=\"-j2\"\n+      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": Win32\"\n-      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui\" MAKEJOBS=\"-j2\"\n+      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi"
      },
      {
        "sha": "10463c871ef4e92422bdeaabcc683a7dd94a6240",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06715165f9215a954c0b5d0b15037aecff8b1d74/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06715165f9215a954c0b5d0b15037aecff8b1d74/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=06715165f9215a954c0b5d0b15037aecff8b1d74",
        "patch": "@@ -23,7 +23,7 @@ files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"i686-pc-linux-gnu x86_64-unknown-linux-gnu\"\n-  CONFIGFLAGS=\"--enable-upnp-default --enable-glibc-back-compat\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"date ar ranlib nm strip\"\n "
      },
      {
        "sha": "b401482c70d4b329c6579e0664e28b24191db433",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06715165f9215a954c0b5d0b15037aecff8b1d74/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06715165f9215a954c0b5d0b15037aecff8b1d74/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=06715165f9215a954c0b5d0b15037aecff8b1d74",
        "patch": "@@ -27,7 +27,7 @@ files:\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin11\"\n-  CONFIGFLAGS=\"--enable-upnp-default GENISOIMAGE=$WRAP_DIR/genisoimage\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-reduce-exports GENISOIMAGE=$WRAP_DIR/genisoimage\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"ar ranlib date dmg genisoimage\"\n "
      },
      {
        "sha": "2d72f7b6e5aafe7935a7289dfee1f6e103e16c10",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06715165f9215a954c0b5d0b15037aecff8b1d74/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06715165f9215a954c0b5d0b15037aecff8b1d74/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=06715165f9215a954c0b5d0b15037aecff8b1d74",
        "patch": "@@ -26,7 +26,7 @@ files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-w64-mingw32 i686-w64-mingw32\"\n-  CONFIGFLAGS=\"--enable-upnp-default\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-reduce-exports\"\n   FAKETIME_HOST_PROGS=\"g++ ar ranlib nm windres strip\"\n   FAKETIME_PROGS=\"date makensis zip\"\n "
      }
    ]
  },
  {
    "sha": "c95ac83e5115a2e9f1c29df6a3839d6788b4eafd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTVhYzgzZTUxMTVhMmU5ZjFjMjlkZjZhMzgzOWQ2Nzg4YjRlYWZk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-24T00:43:25Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-24T00:43:25Z"
      },
      "message": "gitian: fix x86_64 build with static libstdc++",
      "tree": {
        "sha": "c07f68c501f140bc2c87388399d69d8bded73633",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c07f68c501f140bc2c87388399d69d8bded73633"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06715165f9215a954c0b5d0b15037aecff8b1d74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06715165f9215a954c0b5d0b15037aecff8b1d74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06715165f9215a954c0b5d0b15037aecff8b1d74"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dde4af34915c2ccf07f0dc184779416efe60f4de",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=c95ac83e5115a2e9f1c29df6a3839d6788b4eafd",
        "patch": "@@ -15,6 +15,7 @@ packages:\n - \"faketime\"\n - \"bsdmainutils\"\n - \"binutils-gold\"\n+- \"libstdc++6-4.6-pic\"\n reference_datetime: \"2013-06-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n@@ -69,6 +70,14 @@ script: |\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n   done\n \n+  # Ubuntu precise hack: Not an issue in later versions.\n+  # Precise's libstdc++.a is non-pic. There's an optional libstdc++6-4.6-pic\n+  #   package which provides libstdc++_pic.a, but the linker can't find it.\n+  # Symlink it to a path that will be included in our link-line so that the\n+  # linker picks it up before the default libstdc++.a.\n+  # This is only necessary for 64bit.\n+  ln -s /usr/lib/gcc/x86_64-linux-gnu/4.6/libstdc++_pic.a ${BASEPREFIX}/x86_64-unknown-linux-gnu/lib/libstdc++.a\n+\n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n   ./configure --prefix=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`"
      }
    ]
  },
  {
    "sha": "3448b132c4150509eec9bf585552d1994fd32090",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDQ4YjEzMmM0MTUwNTA5ZWVjOWJmNTg1NTUyZDE5OTRmZDMyMDkw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-24T01:18:54Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-24T01:18:54Z"
      },
      "message": "build: fix typo in configure help",
      "tree": {
        "sha": "018fd8fbc87ead622b6347ed60e7136d85636900",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/018fd8fbc87ead622b6347ed60e7136d85636900"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3448b132c4150509eec9bf585552d1994fd32090",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3448b132c4150509eec9bf585552d1994fd32090",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3448b132c4150509eec9bf585552d1994fd32090",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3448b132c4150509eec9bf585552d1994fd32090/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c95ac83e5115a2e9f1c29df6a3839d6788b4eafd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c95ac83e5115a2e9f1c29df6a3839d6788b4eafd"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "67a0cc28e51ee9430a736d69bfa7dd6a46194069",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3448b132c4150509eec9bf585552d1994fd32090/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3448b132c4150509eec9bf585552d1994fd32090/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=3448b132c4150509eec9bf585552d1994fd32090",
        "patch": "@@ -471,14 +471,14 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   [\n     AC_MSG_RESULT(no)\n     if test x$use_reduce_exports = xyes; then\n-      AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduced-exports.])\n+      AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduce-exports.])\n     fi\n   ]\n )\n \n if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n-  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduced-exports.])])\n+  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])\n fi\n \n LEVELDB_CPPFLAGS=\n@@ -540,7 +540,7 @@ if test x$use_reduce_exports = xyes; then\n     ]])],[\n       AC_MSG_RESULT(yes)\n     ],[\n-    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduced-exports.])\n+    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduce-exports.])\n   ])\n   CPPFLAGS=\"$TEMP_CPPFLAGS\"\n fi"
      }
    ]
  },
  {
    "sha": "85da07a5a001a563488382435202b74a3e3e964a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWRhMDdhNWEwMDFhNTYzNDg4MzgyNDM1MjAyYjc0YTNlM2U5NjRh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-24T12:27:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-24T12:35:13Z"
      },
      "message": "Better fingerprinting protection for non-main-chain getdatas.\n\nWith headers-first we can compare against the best header timestamp, rather\nthan using checkpoints which require code updates to maintain.",
      "tree": {
        "sha": "d5f6e29e2f5aa01ebb964cd29e052644cdf09112",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5f6e29e2f5aa01ebb964cd29e052644cdf09112"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85da07a5a001a563488382435202b74a3e3e964a",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85da07a5a001a563488382435202b74a3e3e964a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85da07a5a001a563488382435202b74a3e3e964a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85da07a5a001a563488382435202b74a3e3e964a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 10,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b6a61f7da1c14951d7851e0cff8a8a5d1139c270",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85da07a5a001a563488382435202b74a3e3e964a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85da07a5a001a563488382435202b74a3e3e964a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=85da07a5a001a563488382435202b74a3e3e964a",
        "patch": "@@ -3355,19 +3355,17 @@ void static ProcessGetData(CNode* pfrom)\n                 BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n                 if (mi != mapBlockIndex.end())\n                 {\n-                    // If the requested block is at a height below our last\n-                    // checkpoint, only serve it if it's in the checkpointed chain\n-                    int nHeight = mi->second->nHeight;\n-                    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n-                    if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n-                        if (!chainActive.Contains(mi->second))\n-                        {\n-                            LogPrintf(\"ProcessGetData(): ignoring request for old block that isn't in the main chain\\n\");\n-                        } else {\n-                            send = true;\n-                        }\n-                    } else {\n+                    if (chainActive.Contains(mi->second)) {\n                         send = true;\n+                    } else {\n+                        // To prevent fingerprinting attacks, only send blocks outside of the active\n+                        // chain if they are valid, and no more than a month older than the best header\n+                        // chain we know about.\n+                        send = mi->second->IsValid(BLOCK_VALID_SCRIPTS) && (pindexBestHeader != NULL) &&\n+                            (mi->second->GetBlockTime() > pindexBestHeader->GetBlockTime() - 30 * 24 * 60 * 60);\n+                        if (!send) {\n+                            LogPrintf(\"ProcessGetData(): ignoring request from peer=%i for old block that isn't in the main chain\\n\", pfrom->GetId());\n+                        }\n                     }\n                 }\n                 if (send)"
      }
    ]
  },
  {
    "sha": "32eaf8a3dedb849f81a4b8d32a800ef59ca261ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmVhZjhhM2RlZGI4NDlmODFhNGI4ZDMyYTgwMGVmNTljYTI2MWFj",
    "commit": {
      "author": {
        "name": "21E14",
        "email": "21xe14@gmail.com",
        "date": "2015-02-25T02:03:53Z"
      },
      "committer": {
        "name": "21E14",
        "email": "21xe14@gmail.com",
        "date": "2015-02-25T23:37:06Z"
      },
      "message": "WIN32 Seed Cleanup: Move nLastPerfmon behind win32 ifdef.\nCode to avoid calling Perfmon too often is only needed when perfmon is actually going to get called.\nThis is not intended to make any functional difference in the addition of entropy to the random pool.",
      "tree": {
        "sha": "de5f7c057999f1b4d1c7785f848c2be2efae4a06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de5f7c057999f1b4d1c7785f848c2be2efae4a06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0ba0de908d8ff3fe873b7d1bed573fe92e1eefe2",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=32eaf8a3dedb849f81a4b8d32a800ef59ca261ac",
        "patch": "@@ -47,15 +47,16 @@ void RandAddSeedPerfmon()\n {\n     RandAddSeed();\n \n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n     // This can take up to 2 seconds, so only do it every 10 minutes\n     static int64_t nLastPerfmon;\n     if (GetTime() < nLastPerfmon + 10 * 60)\n         return;\n     nLastPerfmon = GetTime();\n \n-#ifdef WIN32\n-    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n-    // Seed with the entire set of perfmon data\n     std::vector<unsigned char> vData(250000, 0);\n     long ret = 0;\n     unsigned long nSize = 0;"
      }
    ]
  },
  {
    "sha": "d23b0a271163d187eb362164d375148fdd752148",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjNiMGEyNzExNjNkMTg3ZWIzNjIxNjRkMzc1MTQ4ZmRkNzUyMTQ4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-25T19:01:02Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-25T23:41:59Z"
      },
      "message": "depends: always use static qt5 for linux",
      "tree": {
        "sha": "056677278d30b4cb119bacf53ffde22e35826904",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/056677278d30b4cb119bacf53ffde22e35826904"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d23b0a271163d187eb362164d375148fdd752148",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d23b0a271163d187eb362164d375148fdd752148",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d23b0a271163d187eb362164d375148fdd752148",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d23b0a271163d187eb362164d375148fdd752148/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3448b132c4150509eec9bf585552d1994fd32090",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3448b132c4150509eec9bf585552d1994fd32090",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3448b132c4150509eec9bf585552d1994fd32090"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 1,
      "deletions": 8
    },
    "files": [
      {
        "sha": "05ef33f2ee83326eeb264c25c8744c16f82f2d33",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d23b0a271163d187eb362164d375148fdd752148/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d23b0a271163d187eb362164d375148fdd752148/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=d23b0a271163d187eb362164d375148fdd752148",
        "patch": "@@ -6,7 +6,6 @@ SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n NO_WALLET ?=\n NO_UPNP ?=\n-USE_LINUX_STATIC_QT5 ?=\n FALLBACK_DOWNLOAD_PATH ?= https://bitcoincore.org/depends-sources\n \n BUILD = $(shell ./config.guess)"
      },
      {
        "sha": "24e1231d8265f60f54af3ca2f9ece954b0c48452",
        "filename": "depends/README.usage",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d23b0a271163d187eb362164d375148fdd752148/depends/README.usage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d23b0a271163d187eb362164d375148fdd752148/depends/README.usage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.usage?ref=d23b0a271163d187eb362164d375148fdd752148",
        "patch": "@@ -23,7 +23,6 @@ NO_QT: Don't download/build/cache qt and its dependencies\n NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n DEBUG: disable some optimizations and enable more runtime checking\n-USE_LINUX_STATIC_QT5: Build a static qt5 rather than shared qt4. Linux only.\n \n If some packages are not built, for example 'make NO_WALLET=1', the appropriate\n options will be passed to bitcoin's configure. In this case, --disable-wallet."
      },
      {
        "sha": "03908aba599ed82d375eb340f3837957dbcb5efe",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d23b0a271163d187eb362164d375148fdd752148/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d23b0a271163d187eb362164d375148fdd752148/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=d23b0a271163d187eb362164d375148fdd752148",
        "patch": "@@ -4,15 +4,10 @@ native_packages := native_ccache native_comparisontool\n qt_native_packages = native_protobuf\n qt_packages = qrencode protobuf\n \n-qt46_linux_packages = qt46 expat dbus libxcb xcb_proto libXau xproto freetype libX11 xextproto libXext xtrans libICE libSM\n-qt5_linux_packages= qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n-\n+qt_linux_packages= qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-qt_linux_$(USE_LINUX_STATIC_QT5):=$(qt5_linux_packages)\n-qt_linux_:=$(qt46_linux_packages)\n-qt_linux_packages:=$(qt_linux_$(USE_LINUX_STATIC_QT5))\n \n wallet_packages=bdb\n "
      }
    ]
  },
  {
    "sha": "25d713c941d1a73597c90e4feed317660cb9af6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWQ3MTNjOTQxZDFhNzM1OTdjOTBlNGZlZWQzMTc2NjBjYjlhZjZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T08:42:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T08:43:19Z"
      },
      "message": "Merge pull request #5824\n\n32eaf8a WIN32 Seed Cleanup: Move nLastPerfmon behind win32 ifdef. Code to avoid calling Perfmon too often is only needed when perfmon is actually going to get called. This is not intended to make any functional difference in the addition of entropy to the random pool. (21E14)",
      "tree": {
        "sha": "de5f7c057999f1b4d1c7785f848c2be2efae4a06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de5f7c057999f1b4d1c7785f848c2be2efae4a06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25d713c941d1a73597c90e4feed317660cb9af6d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU7tynAAoJEHSBCwEjRsmmX88H/R1Rc2/u/MfSeX1cLDKmnAIy\nobyOmDUD7juYfv9wZNNysFFI6d58BVvz6zu7h9ee8dmDJNAR8hlSyVolKW8AYQVQ\nVth6ah0usg45lY8D6pPb2WIX2RLNTchivvTea+U8q+GPUtPjGJZRwEa2MmC/leWu\n2K1i98THq8dpcMHvXZ/rjn31VvtW+DyzJq3qAJ772tmTw0HkUMsUtsx4NsVhsKlU\njLQwuubp05AMjmh4a4rF/YqH73XCrLuyVBFHtXBpKZlVb5SSEkgTBmbEWBWcZZGa\n59Du4uGOrpSTjLgJ2EIYQImeUwhC/6EYqPSVwb4SMa1bZ0LQGFqIDgEV/fvct1k=\n=hYl8\n-----END PGP SIGNATURE-----",
        "payload": "tree de5f7c057999f1b4d1c7785f848c2be2efae4a06\nparent 8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe\nparent 32eaf8a3dedb849f81a4b8d32a800ef59ca261ac\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424940144 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424940199 +0100\n\nMerge pull request #5824\n\n32eaf8a WIN32 Seed Cleanup: Move nLastPerfmon behind win32 ifdef. Code to avoid calling Perfmon too often is only needed when perfmon is actually going to get called. This is not intended to make any functional difference in the addition of entropy to the random pool. (21E14)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d713c941d1a73597c90e4feed317660cb9af6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25d713c941d1a73597c90e4feed317660cb9af6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d713c941d1a73597c90e4feed317660cb9af6d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe"
      },
      {
        "sha": "32eaf8a3dedb849f81a4b8d32a800ef59ca261ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32eaf8a3dedb849f81a4b8d32a800ef59ca261ac"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0ba0de908d8ff3fe873b7d1bed573fe92e1eefe2",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d713c941d1a73597c90e4feed317660cb9af6d/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d713c941d1a73597c90e4feed317660cb9af6d/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=25d713c941d1a73597c90e4feed317660cb9af6d",
        "patch": "@@ -47,15 +47,16 @@ void RandAddSeedPerfmon()\n {\n     RandAddSeed();\n \n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n     // This can take up to 2 seconds, so only do it every 10 minutes\n     static int64_t nLastPerfmon;\n     if (GetTime() < nLastPerfmon + 10 * 60)\n         return;\n     nLastPerfmon = GetTime();\n \n-#ifdef WIN32\n-    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n-    // Seed with the entire set of perfmon data\n     std::vector<unsigned char> vData(250000, 0);\n     long ret = 0;\n     unsigned long nSize = 0;"
      }
    ]
  },
  {
    "sha": "6f1274c8c9cf3e9361aa149f6d271caf3e016991",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjEyNzRjOGM5Y2YzZTkzNjFhYTE0OWY2ZDI3MWNhZjNlMDE2OTkx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T09:16:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T09:23:42Z"
      },
      "message": "qt: Don't save geometry for options and about/help window\n\nThese dialogs will be something that people occasionally open, not keep\nopen during their session, so just popping it up in a sensible place\nis good enough. Remembering only creates potential issues, like spawning\nit outside the current screen area.\n\nOn Ubuntu this causes the dialogs to be positioned in the\nmiddle of the main dialog, so I didn't add code for that. YMMV.\n\nInspired by github pull #5777 by @L-Cranston-Shadow",
      "tree": {
        "sha": "d5d4274969b8997e31de1d6046e97decceb4b221",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5d4274969b8997e31de1d6046e97decceb4b221"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f1274c8c9cf3e9361aa149f6d271caf3e016991",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU7uaSAAoJEHSBCwEjRsmmYGcH/ishqSbBeWbTtzjYv5Zs7ekK\ngRgE28rDiCtxiJPFmyn9QkyoBBt6zU2cDHx2OSk+bpn79U8w8Azr64dM8aNZHVFM\nMmXyUlQf8p1xegsHq4oSFk8P+vYtfZOn8P0HRUN3EH7vjtn+4VIAD0IMzI5bF0R+\nCssdFNUvRhk3yD5Gq4OB/iepJNXL2vEAG0yA0dGfsQNFqrnfcO7bpngtL4/5tHSo\nY2/v2JmpxVhe+/98m79zN0oUg72FC6HOjmJIx+B3euE7Tm9+4pR5TSKVHQc8+X7X\nOe59myM7lnW1YeahekZWxNCN3NCVBcP7ZR4ag8VqM/8m6EY+9D9KMrswU8HuvkA=\n=pBEp\n-----END PGP SIGNATURE-----",
        "payload": "tree d5d4274969b8997e31de1d6046e97decceb4b221\nparent 25d713c941d1a73597c90e4feed317660cb9af6d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424942208 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424942622 +0100\n\nqt: Don't save geometry for options and about/help window\n\nThese dialogs will be something that people occasionally open, not keep\nopen during their session, so just popping it up in a sensible place\nis good enough. Remembering only creates potential issues, like spawning\nit outside the current screen area.\n\nOn Ubuntu this causes the dialogs to be positioned in the\nmiddle of the main dialog, so I didn't add code for that. YMMV.\n\nInspired by github pull #5777 by @L-Cranston-Shadow\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f1274c8c9cf3e9361aa149f6d271caf3e016991",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f1274c8c9cf3e9361aa149f6d271caf3e016991",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f1274c8c9cf3e9361aa149f6d271caf3e016991/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25d713c941d1a73597c90e4feed317660cb9af6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d713c941d1a73597c90e4feed317660cb9af6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25d713c941d1a73597c90e4feed317660cb9af6d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a342b4bfea40f03012fbe9e0afc396328ce28b2d",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1274c8c9cf3e9361aa149f6d271caf3e016991/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1274c8c9cf3e9361aa149f6d271caf3e016991/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=6f1274c8c9cf3e9361aa149f6d271caf3e016991",
        "patch": "@@ -38,7 +38,6 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     fProxyIpValid(true)\n {\n     ui->setupUi(this);\n-    GUIUtil::restoreWindowGeometry(\"nOptionsDialogWindow\", this->size(), this);\n \n     /* Main elements init */\n     ui->databaseCache->setMinimum(nMinDbCache);\n@@ -117,7 +116,6 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n \n OptionsDialog::~OptionsDialog()\n {\n-    GUIUtil::saveWindowGeometry(\"nOptionsDialogWindow\", this);\n     delete ui;\n }\n "
      },
      {
        "sha": "4e7b70efe6bbff7d5d9d97bde913bc1b0a6ffd57",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1274c8c9cf3e9361aa149f6d271caf3e016991/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1274c8c9cf3e9361aa149f6d271caf3e016991/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=6f1274c8c9cf3e9361aa149f6d271caf3e016991",
        "patch": "@@ -29,7 +29,6 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n     ui(new Ui::HelpMessageDialog)\n {\n     ui->setupUi(this);\n-    GUIUtil::restoreWindowGeometry(\"nHelpMessageDialogWindow\", this->size(), this);\n \n     QString version = tr(\"Bitcoin Core\") + \" \" + tr(\"version\") + \" \" + QString::fromStdString(FormatFullVersion());\n     /* On x86 add a bit specifier to the version so that users can distinguish between\n@@ -143,7 +142,6 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n \n HelpMessageDialog::~HelpMessageDialog()\n {\n-    GUIUtil::saveWindowGeometry(\"nHelpMessageDialogWindow\", this);\n     delete ui;\n }\n "
      }
    ]
  },
  {
    "sha": "96c19a3a8e08047f6639de91b1ea871bc142a46a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmMxOWEzYThlMDgwNDdmNjYzOWRlOTFiMWVhODcxYmMxNDJhNDZh",
    "commit": {
      "author": {
        "name": "Ciemon",
        "email": "ciemon@gmail.com",
        "date": "2015-02-20T17:33:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T10:07:41Z"
      },
      "message": "Add bitcoin-cli man page",
      "tree": {
        "sha": "07c9a604cb96736fb33ec8e18c76c255a220977f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07c9a604cb96736fb33ec8e18c76c255a220977f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96c19a3a8e08047f6639de91b1ea871bc142a46a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96c19a3a8e08047f6639de91b1ea871bc142a46a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96c19a3a8e08047f6639de91b1ea871bc142a46a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96c19a3a8e08047f6639de91b1ea871bc142a46a/comments",
    "author": {
      "login": "Ciemon",
      "id": 570513,
      "node_id": "MDQ6VXNlcjU3MDUxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/570513?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Ciemon",
      "html_url": "https://github.com/Ciemon",
      "followers_url": "https://api.github.com/users/Ciemon/followers",
      "following_url": "https://api.github.com/users/Ciemon/following{/other_user}",
      "gists_url": "https://api.github.com/users/Ciemon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Ciemon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Ciemon/subscriptions",
      "organizations_url": "https://api.github.com/users/Ciemon/orgs",
      "repos_url": "https://api.github.com/users/Ciemon/repos",
      "events_url": "https://api.github.com/users/Ciemon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Ciemon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25d713c941d1a73597c90e4feed317660cb9af6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d713c941d1a73597c90e4feed317660cb9af6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25d713c941d1a73597c90e4feed317660cb9af6d"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6d3e683855018ec721d97853b0d5c9b90edd5c35",
        "filename": "contrib/debian/bitcoind.manpages",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96c19a3a8e08047f6639de91b1ea871bc142a46a/contrib/debian/bitcoind.manpages",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96c19a3a8e08047f6639de91b1ea871bc142a46a/contrib/debian/bitcoind.manpages",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoind.manpages?ref=96c19a3a8e08047f6639de91b1ea871bc142a46a",
        "patch": "@@ -1,2 +1,3 @@\n debian/manpages/bitcoind.1\n debian/manpages/bitcoin.conf.5\n+debian/manpages/bitcoin-cli.1"
      },
      {
        "sha": "f953ae9db7a3b4818c71e176dc4edbebada338f9",
        "filename": "contrib/debian/manpages/bitcoin-cli.1",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96c19a3a8e08047f6639de91b1ea871bc142a46a/contrib/debian/manpages/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96c19a3a8e08047f6639de91b1ea871bc142a46a/contrib/debian/manpages/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin-cli.1?ref=96c19a3a8e08047f6639de91b1ea871bc142a46a",
        "patch": "@@ -0,0 +1,48 @@\n+.TH BITCOIN-CLI \"1\" \"February 2015\" \"bitcoin-cli 0.10\" \n+.SH NAME\n+bitcoin-cli \\- a remote procedure call client for Bitcoin Core. \n+.SH SYNOPSIS\n+bitcoin-cli [options] <command> [params] \\- Send command to Bitcoin Core. \n+.TP\n+bitcoin-cli [options] help \\- Asks Bitcoin Core for a list of supported commands.\n+.SH DESCRIPTION\n+This manual page documents the bitcoin-cli program. bitcoin-cli is an RPC client used to send commands to Bitcoin Core.\n+\n+.SH OPTIONS\n+.TP\n+\\fB\\-?\\fR\n+Show the help message.\n+.TP\n+\\fB\\-conf=\\fR<file>\n+Specify configuration file (default: bitcoin.conf).\n+.TP\n+\\fB\\-datadir=\\fR<dir>\n+Specify data directory.\n+.TP\n+\\fB\\-testnet\\fR\n+Connect to a Bitcoin Core instance running in testnet mode.\n+.TP\n+\\fB\\-regtest\\fR\n+Connect to a Bitcoin Core instance running in regtest mode (see documentation for -regtest on bitcoind).\n+.TP\n+\\fB\\-rpcuser=\\fR<user>\n+Username for JSON\\-RPC connections.\n+.TP\n+\\fB\\-rpcpassword=\\fR<pw>\n+Password for JSON\\-RPC connections.\n+.TP\n+\\fB\\-rpcport=\\fR<port>\n+Listen for JSON\\-RPC connections on <port> (default: 8332 or testnet: 18332).\n+.TP\n+\\fB\\-rpcconnect=\\fR<ip>\n+Send commands to node running on <ip> (default: 127.0.0.1).\n+.TP\n+\\fB\\-rpcssl\\fR=\\fI1\\fR\n+Use OpenSSL (https) for JSON\\-RPC connections (see the Bitcoin Wiki for SSL setup instructions).\n+\n+.SH \"SEE ALSO\"\n+\\fBbitcoind\\fP, \\fBbitcoin.conf\\fP\n+.SH AUTHOR\n+This manual page was written by Ciemon Dunville <ciemon@gmail.com>. Permission is granted to copy, distribute and/or modify this document under the terms of the MIT License.\n+\n+The complete text of the MIT License can be found on the web at \\fIhttp://opensource.org/licenses/MIT\\fP."
      }
    ]
  },
  {
    "sha": "46bfbe71483f4f7cb677d3206969822bdcc58256",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmJmYmU3MTQ4M2Y0ZjdjYjY3N2QzMjA2OTY5ODIyYmRjYzU4MjU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T10:08:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T10:08:52Z"
      },
      "message": "Merge #5809: Add bitcoin-cli man page\n\n96c19a3 Add bitcoin-cli man page (Ciemon)",
      "tree": {
        "sha": "07c9a604cb96736fb33ec8e18c76c255a220977f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07c9a604cb96736fb33ec8e18c76c255a220977f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46bfbe71483f4f7cb677d3206969822bdcc58256",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU7vC0AAoJEHSBCwEjRsmmQFcH/iK1X6fKjxklhqnun3Prmhvy\nYUND9bql/FmTnsvJ6YpRn/9G2dvEHwvC2qx/YVmxhv9ze5NSBk9gSL9j3w8zA1dP\nlfU71gL8+6nz9M/Iha6JDJgvIy+r9yPbD4vCzyHXdCps+oB+N8vvUGcmZaavOsxd\nv9DnbWQG9ike73hx1vCuARk2C+e7orGJ1X9MwFtGqdGO7xBhqFGV2yi8a7MVDfzY\nFWM4i+cs/w/pfM4C/RT0ZCH9UfCR6B0BZWjq1W8QwIOg2mS/LwQNGYGH+vS3J+MF\nm+bSMheDX9WBv6wkJ8qeHTqLwZej6FkNWjkcMLg42/YqdOKSxVyqmsdOj5ChHw8=\n=YBg9\n-----END PGP SIGNATURE-----",
        "payload": "tree 07c9a604cb96736fb33ec8e18c76c255a220977f\nparent 25d713c941d1a73597c90e4feed317660cb9af6d\nparent 96c19a3a8e08047f6639de91b1ea871bc142a46a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424945331 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424945332 +0100\n\nMerge #5809: Add bitcoin-cli man page\n\n96c19a3 Add bitcoin-cli man page (Ciemon)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46bfbe71483f4f7cb677d3206969822bdcc58256",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46bfbe71483f4f7cb677d3206969822bdcc58256",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46bfbe71483f4f7cb677d3206969822bdcc58256/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25d713c941d1a73597c90e4feed317660cb9af6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d713c941d1a73597c90e4feed317660cb9af6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25d713c941d1a73597c90e4feed317660cb9af6d"
      },
      {
        "sha": "96c19a3a8e08047f6639de91b1ea871bc142a46a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96c19a3a8e08047f6639de91b1ea871bc142a46a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96c19a3a8e08047f6639de91b1ea871bc142a46a"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6d3e683855018ec721d97853b0d5c9b90edd5c35",
        "filename": "contrib/debian/bitcoind.manpages",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46bfbe71483f4f7cb677d3206969822bdcc58256/contrib/debian/bitcoind.manpages",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46bfbe71483f4f7cb677d3206969822bdcc58256/contrib/debian/bitcoind.manpages",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoind.manpages?ref=46bfbe71483f4f7cb677d3206969822bdcc58256",
        "patch": "@@ -1,2 +1,3 @@\n debian/manpages/bitcoind.1\n debian/manpages/bitcoin.conf.5\n+debian/manpages/bitcoin-cli.1"
      },
      {
        "sha": "f953ae9db7a3b4818c71e176dc4edbebada338f9",
        "filename": "contrib/debian/manpages/bitcoin-cli.1",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46bfbe71483f4f7cb677d3206969822bdcc58256/contrib/debian/manpages/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46bfbe71483f4f7cb677d3206969822bdcc58256/contrib/debian/manpages/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin-cli.1?ref=46bfbe71483f4f7cb677d3206969822bdcc58256",
        "patch": "@@ -0,0 +1,48 @@\n+.TH BITCOIN-CLI \"1\" \"February 2015\" \"bitcoin-cli 0.10\" \n+.SH NAME\n+bitcoin-cli \\- a remote procedure call client for Bitcoin Core. \n+.SH SYNOPSIS\n+bitcoin-cli [options] <command> [params] \\- Send command to Bitcoin Core. \n+.TP\n+bitcoin-cli [options] help \\- Asks Bitcoin Core for a list of supported commands.\n+.SH DESCRIPTION\n+This manual page documents the bitcoin-cli program. bitcoin-cli is an RPC client used to send commands to Bitcoin Core.\n+\n+.SH OPTIONS\n+.TP\n+\\fB\\-?\\fR\n+Show the help message.\n+.TP\n+\\fB\\-conf=\\fR<file>\n+Specify configuration file (default: bitcoin.conf).\n+.TP\n+\\fB\\-datadir=\\fR<dir>\n+Specify data directory.\n+.TP\n+\\fB\\-testnet\\fR\n+Connect to a Bitcoin Core instance running in testnet mode.\n+.TP\n+\\fB\\-regtest\\fR\n+Connect to a Bitcoin Core instance running in regtest mode (see documentation for -regtest on bitcoind).\n+.TP\n+\\fB\\-rpcuser=\\fR<user>\n+Username for JSON\\-RPC connections.\n+.TP\n+\\fB\\-rpcpassword=\\fR<pw>\n+Password for JSON\\-RPC connections.\n+.TP\n+\\fB\\-rpcport=\\fR<port>\n+Listen for JSON\\-RPC connections on <port> (default: 8332 or testnet: 18332).\n+.TP\n+\\fB\\-rpcconnect=\\fR<ip>\n+Send commands to node running on <ip> (default: 127.0.0.1).\n+.TP\n+\\fB\\-rpcssl\\fR=\\fI1\\fR\n+Use OpenSSL (https) for JSON\\-RPC connections (see the Bitcoin Wiki for SSL setup instructions).\n+\n+.SH \"SEE ALSO\"\n+\\fBbitcoind\\fP, \\fBbitcoin.conf\\fP\n+.SH AUTHOR\n+This manual page was written by Ciemon Dunville <ciemon@gmail.com>. Permission is granted to copy, distribute and/or modify this document under the terms of the MIT License.\n+\n+The complete text of the MIT License can be found on the web at \\fIhttp://opensource.org/licenses/MIT\\fP."
      }
    ]
  },
  {
    "sha": "482783b341a078c1604207941f01100839e8c9e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODI3ODNiMzQxYTA3OGMxNjA0MjA3OTQxZjAxMTAwODM5ZThjOWU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T10:17:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T10:26:32Z"
      },
      "message": "Merge pull request #5801\n\nde5403f [GUI] Move fee dialog minimise button away from \"Transaction Fee\" (Michael Ford)",
      "tree": {
        "sha": "d4e263fe5d021edc4cd14b57793cf05ee71f1479",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4e263fe5d021edc4cd14b57793cf05ee71f1479"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/482783b341a078c1604207941f01100839e8c9e6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU7vTYAAoJEHSBCwEjRsmmGv4H/1EuGmNVLsMT40v/b0BbkFB2\nAtGHF4pjPH9eJYZqHFYq1HEE4mYXBrwouCzxnUH9vKK1R3Ops7JPcfpKQBarvrGE\nbtNnXWNh5vWCFOMeDekj/9zY/qlzuWgBH21rNjFB8mvucm7RqvzEtT+2RThigG0X\n12zpul8SpFAHOeQPA7wEMv1dFc99+DfoZMR+xVOw90zY12jy9ffJuxK6hQGh1rDl\n1vDts0/wJp74/zBiRAB2jk3KoxU6xJjgeKgW0PQcUjgL0d74w4oUc5MwoksH2htD\nkDLuU9LOMiJLO+9lKQQshcRTr+QqNNSZBqes5Zj/o/NX4x/KpzXzlC88Ep+JD3c=\n=jJci\n-----END PGP SIGNATURE-----",
        "payload": "tree d4e263fe5d021edc4cd14b57793cf05ee71f1479\nparent 46bfbe71483f4f7cb677d3206969822bdcc58256\nparent de5403f87874c5c54c5a8358cbf38140bee87a9e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424945828 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424946392 +0100\n\nMerge pull request #5801\n\nde5403f [GUI] Move fee dialog minimise button away from \"Transaction Fee\" (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/482783b341a078c1604207941f01100839e8c9e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/482783b341a078c1604207941f01100839e8c9e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/482783b341a078c1604207941f01100839e8c9e6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46bfbe71483f4f7cb677d3206969822bdcc58256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46bfbe71483f4f7cb677d3206969822bdcc58256",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46bfbe71483f4f7cb677d3206969822bdcc58256"
      },
      {
        "sha": "de5403f87874c5c54c5a8358cbf38140bee87a9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5403f87874c5c54c5a8358cbf38140bee87a9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de5403f87874c5c54c5a8358cbf38140bee87a9e"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "b1ed7a27b5c8882be87077c33ae19383347ca76a",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/482783b341a078c1604207941f01100839e8c9e6/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/482783b341a078c1604207941f01100839e8c9e6/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=482783b341a078c1604207941f01100839e8c9e6",
        "patch": "@@ -771,16 +771,6 @@\n                 </property>\n                </widget>\n               </item>\n-              <item>\n-               <widget class=\"QPushButton\" name=\"buttonMinimizeFee\">\n-                <property name=\"toolTip\">\n-                 <string>collapse fee-settings</string>\n-                </property>\n-                <property name=\"text\">\n-                 <string>Minimize</string>\n-                </property>\n-               </widget>\n-              </item>\n              </layout>\n             </item>\n             <item>\n@@ -811,6 +801,16 @@\n             </property>\n            </spacer>\n           </item>\n+          <item>\n+           <widget class=\"QPushButton\" name=\"buttonMinimizeFee\">\n+            <property name=\"toolTip\">\n+             <string>collapse fee-settings</string>\n+            </property>\n+            <property name=\"text\">\n+             <string>Minimize</string>\n+            </property>\n+           </widget>\n+          </item>\n          </layout>\n         </item>\n         <item>"
      }
    ]
  },
  {
    "sha": "9abbeeabd745b2817f69166b73fa3de16f15c0e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWJiZWVhYmQ3NDViMjgxN2Y2OTE2NmI3M2ZhM2RlMTZmMTVjMGUy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-26T13:30:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-26T13:30:59Z"
      },
      "message": "Remove obsolete pubsub method definitions",
      "tree": {
        "sha": "4a1b879b0d0688e25608a0da726594e5a9e92d2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a1b879b0d0688e25608a0da726594e5a9e92d2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9abbeeabd745b2817f69166b73fa3de16f15c0e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9abbeeabd745b2817f69166b73fa3de16f15c0e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9abbeeabd745b2817f69166b73fa3de16f15c0e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9abbeeabd745b2817f69166b73fa3de16f15c0e2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "482783b341a078c1604207941f01100839e8c9e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/482783b341a078c1604207941f01100839e8c9e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/482783b341a078c1604207941f01100839e8c9e6"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d2b2d88ddbef79667c2c8424c78ae95b10553fea",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9abbeeabd745b2817f69166b73fa3de16f15c0e2/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9abbeeabd745b2817f69166b73fa3de16f15c0e2/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9abbeeabd745b2817f69166b73fa3de16f15c0e2",
        "patch": "@@ -570,9 +570,6 @@ class CNode\n         }\n     }\n \n-    bool IsSubscribed(unsigned int nChannel);\n-    void Subscribe(unsigned int nChannel, unsigned int nHops=0);\n-    void CancelSubscribe(unsigned int nChannel);\n     void CloseSocketDisconnect();\n \n     // Denial-of-service detection/prevention"
      }
    ]
  },
  {
    "sha": "59310f1c02673c3ee068cd82f8654bed9b757889",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTMxMGYxYzAyNjczYzNlZTA2OGNkODJmODY1NGJlZDliNzU3ODg5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T16:07:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T16:13:13Z"
      },
      "message": "Merge pull request #5820\n\n85da07a Better fingerprinting protection for non-main-chain getdatas. (Pieter Wuille)",
      "tree": {
        "sha": "8dd58d6488d74ea27b93c418464d455063e13530",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dd58d6488d74ea27b93c418464d455063e13530"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59310f1c02673c3ee068cd82f8654bed9b757889",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU70YZAAoJEHSBCwEjRsmmf0wIAKdiNw1rZL53ErZ6WU5uU4vN\nZbizRHuHif8xFgn/WDesvoC7BiDnarEPV+zVd43I7TH6OfErTOqI5MpS0wPaHo9d\ndWW1fbk0BQEelIJ7P3diqjHQvMhLuLg3lAgsgEBDKK+f7DgRmvSz4ORJn2MCzczN\nwGftUxUCLmYEET9bFqaT2QVtSTmvWc1HjGhCqYjk24VO91o1TtHAwlmYkYJpcL30\nfq0FfoM5yIOaEkZxkE5N0PJqXnQ7vLnEq/GM3jKgiVELGrnYkhXP/lpSYUFRK1+V\nqFvo0XlHbpB7Zk5sMTOqxLowbkp4cVz1h1ZoXA5mIeikOwS2B2KnaLz+FFdkQy4=\n=p0RD\n-----END PGP SIGNATURE-----",
        "payload": "tree 8dd58d6488d74ea27b93c418464d455063e13530\nparent 482783b341a078c1604207941f01100839e8c9e6\nparent 85da07a5a001a563488382435202b74a3e3e964a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424966867 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424967193 +0100\n\nMerge pull request #5820\n\n85da07a Better fingerprinting protection for non-main-chain getdatas. (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59310f1c02673c3ee068cd82f8654bed9b757889",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59310f1c02673c3ee068cd82f8654bed9b757889",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59310f1c02673c3ee068cd82f8654bed9b757889/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "482783b341a078c1604207941f01100839e8c9e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/482783b341a078c1604207941f01100839e8c9e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/482783b341a078c1604207941f01100839e8c9e6"
      },
      {
        "sha": "85da07a5a001a563488382435202b74a3e3e964a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85da07a5a001a563488382435202b74a3e3e964a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85da07a5a001a563488382435202b74a3e3e964a"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 10,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b6a61f7da1c14951d7851e0cff8a8a5d1139c270",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59310f1c02673c3ee068cd82f8654bed9b757889/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59310f1c02673c3ee068cd82f8654bed9b757889/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=59310f1c02673c3ee068cd82f8654bed9b757889",
        "patch": "@@ -3355,19 +3355,17 @@ void static ProcessGetData(CNode* pfrom)\n                 BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n                 if (mi != mapBlockIndex.end())\n                 {\n-                    // If the requested block is at a height below our last\n-                    // checkpoint, only serve it if it's in the checkpointed chain\n-                    int nHeight = mi->second->nHeight;\n-                    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n-                    if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n-                        if (!chainActive.Contains(mi->second))\n-                        {\n-                            LogPrintf(\"ProcessGetData(): ignoring request for old block that isn't in the main chain\\n\");\n-                        } else {\n-                            send = true;\n-                        }\n-                    } else {\n+                    if (chainActive.Contains(mi->second)) {\n                         send = true;\n+                    } else {\n+                        // To prevent fingerprinting attacks, only send blocks outside of the active\n+                        // chain if they are valid, and no more than a month older than the best header\n+                        // chain we know about.\n+                        send = mi->second->IsValid(BLOCK_VALID_SCRIPTS) && (pindexBestHeader != NULL) &&\n+                            (mi->second->GetBlockTime() > pindexBestHeader->GetBlockTime() - 30 * 24 * 60 * 60);\n+                        if (!send) {\n+                            LogPrintf(\"ProcessGetData(): ignoring request from peer=%i for old block that isn't in the main chain\\n\", pfrom->GetId());\n+                        }\n                     }\n                 }\n                 if (send)"
      }
    ]
  },
  {
    "sha": "db4a1d598cf8b414b81ded64fd3a08230ad95d72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjRhMWQ1OThjZjhiNDE0YjgxZGVkNjRmZDNhMDgyMzBhZDk1ZDcy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T16:19:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-02-26T16:20:29Z"
      },
      "message": "Merge pull request #5694\n\n25cf6f3 minor rework of SendMoney in rpcwallet (Philip Kaufmann)",
      "tree": {
        "sha": "5b913e3c3af72c3f0112c7bbad4456eb42b5d4db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b913e3c3af72c3f0112c7bbad4456eb42b5d4db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db4a1d598cf8b414b81ded64fd3a08230ad95d72",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU70fNAAoJEHSBCwEjRsmmadEH/1FTWfoiJQnUAggvJpADy2Dn\nZMr16bCxHZMLjzzAUcG9owTT7j7AIIVkY0jkkQal4D9gZJHZ0Izbqm0rbZ3rBneu\nrF8knGPr7M8vCxutHgWnxAl8aYVJq/lnHuktBzPHdMYqaXXiA/aLPQCDxIRyt9d7\nMi8bkkHEUfKm5fPjApd/IKo+LEg0vAql+e31flJypfNNpy+RyJ14sR9IkOY8hMoi\nkxFOkmHtI2GDjVOj23GNJxwV01Gh7DptmseyBo3YzM4TWU6e+X/HoVMP1LNL0bRV\npEObb9sU4KZ3urgECSv8LOd+6ZWvHWXmN5w4RQ44Zz2Bu0RhpTAvPf0eNE5FEEA=\n=6IkF\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b913e3c3af72c3f0112c7bbad4456eb42b5d4db\nparent 59310f1c02673c3ee068cd82f8654bed9b757889\nparent 25cf6f3d41b33c4d8523b6613f0169772fd3937f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1424967592 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1424967629 +0100\n\nMerge pull request #5694\n\n25cf6f3 minor rework of SendMoney in rpcwallet (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db4a1d598cf8b414b81ded64fd3a08230ad95d72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db4a1d598cf8b414b81ded64fd3a08230ad95d72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db4a1d598cf8b414b81ded64fd3a08230ad95d72/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59310f1c02673c3ee068cd82f8654bed9b757889",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59310f1c02673c3ee068cd82f8654bed9b757889",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59310f1c02673c3ee068cd82f8654bed9b757889"
      },
      {
        "sha": "25cf6f3d41b33c4d8523b6613f0169772fd3937f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25cf6f3d41b33c4d8523b6613f0169772fd3937f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25cf6f3d41b33c4d8523b6613f0169772fd3937f"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 11,
      "deletions": 16
    },
    "files": [
      {
        "sha": "d097b6a0fafc2042efbcc220216e308742b72348",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 16,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db4a1d598cf8b414b81ded64fd3a08230ad95d72/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db4a1d598cf8b414b81ded64fd3a08230ad95d72/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=db4a1d598cf8b414b81ded64fd3a08230ad95d72",
        "patch": "@@ -19,6 +19,7 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n+\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n@@ -316,35 +317,29 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     return ret;\n }\n \n-void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n+static void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n {\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n     // Check amount\n     if (nValue <= 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n \n-    if (nValue > pwalletMain->GetBalance())\n+    if (nValue > curBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n \n-    string strError;\n-    if (pwalletMain->IsLocked())\n-    {\n-        strError = \"Error: Wallet locked, unable to create transaction!\";\n-        LogPrintf(\"SendMoney(): %s\", strError);\n-        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n-    }\n-\n     // Parse Bitcoin address\n     CScript scriptPubKey = GetScriptForDestination(address);\n \n     // Create and send the transaction\n     CReserveKey reservekey(pwalletMain);\n     CAmount nFeeRequired;\n-    if (!pwalletMain->CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError))\n-    {\n-        if (nValue + nFeeRequired > pwalletMain->GetBalance())\n-            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n-        LogPrintf(\"SendMoney(): %s\\n\", strError);\n-        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    std::string strError;\n+    if (!pwalletMain->CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError)) {\n+        if (nValue + nFeeRequired > curBalance)\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired)));\n+        else\n+            throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");"
      }
    ]
  },
  {
    "sha": "10a3ff07f59f8c02c92286e440e5832045a07596",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGEzZmYwN2Y1OWY4YzAyYzkyMjg2ZTQ0MGU1ODMyMDQ1YTA3NTk2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-01T11:04:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-01T11:13:09Z"
      },
      "message": "Merge pull request #5832\n\n9abbeea Remove obsolete pubsub method definitions (Pieter Wuille)",
      "tree": {
        "sha": "23257fcb9db63c948a32349256c95eff159a5ee4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23257fcb9db63c948a32349256c95eff159a5ee4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10a3ff07f59f8c02c92286e440e5832045a07596",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJU8vRFAAoJEFeJbS/48LZXRTAL/3t1jw7alDJxpoUQxJLcW9oZ\nmILlxr5xB7lMh0m06Pt30pyefUzkHoaxpeg+AG3jp8+OF/lUlSF4QSuooqJYnmwy\njePiY0MaaWYSmDkqSqyUVswcM1vquws7xiO+7JtoOX2Fw6pVOZKmnNRB5h/09bJN\nGrOuYNO5hIFmW4AJcqcG6Au+UQLHZG12lab6LKyknWDU6BaBOcOshjT5TxQJG/Gc\nTqa3kGAWtmIiONP/AloxPoXq08+NnInuyp6YJBKledywrGADzhVu4vGYWWKWfXvC\nxgqIbAEoxFJlSrGirr1RaP8GlJ0W2iLBG3ZAksoqplECkN9P4DhU/dlKt9zjUY43\nVMbOj/u6Hy7qUMOsT6VizCYMqr6Od7r53APHx6wcD5Ue77Rws/Gc665gD+wM8RA6\nbHeBSOX/cAzE0xYQOmGCQCVm3RnvkWd8U26r8bYHBx9rpnXFpYxX2FDeQ1eji0LP\nKksbXv+ntJbpwHS7qpYGh8lUKFsVK2GyyOfCXBNG8w==\n=otp+\n-----END PGP SIGNATURE-----",
        "payload": "tree 23257fcb9db63c948a32349256c95eff159a5ee4\nparent db4a1d598cf8b414b81ded64fd3a08230ad95d72\nparent 9abbeeabd745b2817f69166b73fa3de16f15c0e2\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1425207840 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1425208389 -0800\n\nMerge pull request #5832\n\n9abbeea Remove obsolete pubsub method definitions (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a3ff07f59f8c02c92286e440e5832045a07596",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10a3ff07f59f8c02c92286e440e5832045a07596",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a3ff07f59f8c02c92286e440e5832045a07596/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db4a1d598cf8b414b81ded64fd3a08230ad95d72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db4a1d598cf8b414b81ded64fd3a08230ad95d72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db4a1d598cf8b414b81ded64fd3a08230ad95d72"
      },
      {
        "sha": "9abbeeabd745b2817f69166b73fa3de16f15c0e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9abbeeabd745b2817f69166b73fa3de16f15c0e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9abbeeabd745b2817f69166b73fa3de16f15c0e2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d2b2d88ddbef79667c2c8424c78ae95b10553fea",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10a3ff07f59f8c02c92286e440e5832045a07596/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10a3ff07f59f8c02c92286e440e5832045a07596/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=10a3ff07f59f8c02c92286e440e5832045a07596",
        "patch": "@@ -570,9 +570,6 @@ class CNode\n         }\n     }\n \n-    bool IsSubscribed(unsigned int nChannel);\n-    void Subscribe(unsigned int nChannel, unsigned int nHops=0);\n-    void CancelSubscribe(unsigned int nChannel);\n     void CloseSocketDisconnect();\n \n     // Denial-of-service detection/prevention"
      }
    ]
  },
  {
    "sha": "16a58a86442ad587449f321c0dbab08cc028c2bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmE1OGE4NjQ0MmFkNTg3NDQ5ZjMyMWMwZGJhYjA4Y2MwMjhjMmJk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-27T21:44:26Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-02T16:31:43Z"
      },
      "message": "keys: remove libsecp256k1 verification until it's actually supported\n\nThis was added a while ago for testing purposes, but was never intended to be\nused. Remove it until upstream libsecp256k1 decides that verification is\nstable/ready.",
      "tree": {
        "sha": "4af84d5dfdc2e272d007b7fe33e281a7abcbfbaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4af84d5dfdc2e272d007b7fe33e281a7abcbfbaf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16a58a86442ad587449f321c0dbab08cc028c2bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16a58a86442ad587449f321c0dbab08cc028c2bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16a58a86442ad587449f321c0dbab08cc028c2bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16a58a86442ad587449f321c0dbab08cc028c2bd/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b298ca7d7540acc19d1df79a5c2af7b5aca8cbe"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 0,
      "deletions": 39
    },
    "files": [
      {
        "sha": "185f7e2918b12880b684661c0f799f1a55fc9bbc",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16a58a86442ad587449f321c0dbab08cc028c2bd/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16a58a86442ad587449f321c0dbab08cc028c2bd/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=16a58a86442ad587449f321c0dbab08cc028c2bd",
        "patch": "@@ -849,7 +849,6 @@ AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])\n AM_CONDITIONAL([USE_COMPARISON_TOOL_REORG_TESTS],[test x$use_comparison_tool_reorg_test != xno])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n-AM_CONDITIONAL([USE_LIBSECP256K1],[test x$use_libsecp256k1 = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])"
      },
      {
        "sha": "4587727cca59bd61337acbd8387235e8e45cdec7",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16a58a86442ad587449f321c0dbab08cc028c2bd/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16a58a86442ad587449f321c0dbab08cc028c2bd/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=16a58a86442ad587449f321c0dbab08cc028c2bd",
        "patch": "@@ -379,9 +379,6 @@ libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)\n libbitcoinconsensus_la_LIBADD = $(CRYPTO_LIBS)\n libbitcoinconsensus_la_CPPFLAGS = $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n \n-if USE_LIBSECP256K1\n-libbitcoinconsensus_la_LIBADD += secp256k1/libsecp256k1.la\n-endif\n endif\n #\n "
      },
      {
        "sha": "64c9bc71190cc65968f4db81c8e2f56e93abc50d",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16a58a86442ad587449f321c0dbab08cc028c2bd/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16a58a86442ad587449f321c0dbab08cc028c2bd/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=16a58a86442ad587449f321c0dbab08cc028c2bd",
        "patch": "@@ -208,11 +208,9 @@ void CExtKey::Decode(const unsigned char code[74]) {\n }\n \n bool ECC_InitSanityCheck() {\n-#if !defined(USE_SECP256K1)\n     if (!CECKey::SanityCheck()) {\n         return false;\n     }\n-#endif\n     CKey key;\n     key.MakeNewKey(true);\n     CPubKey pubkey = key.GetPubKey();"
      },
      {
        "sha": "a4c046bff53806f05e5d81b8be78731dda0d90cc",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 33,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16a58a86442ad587449f321c0dbab08cc028c2bd/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16a58a86442ad587449f321c0dbab08cc028c2bd/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=16a58a86442ad587449f321c0dbab08cc028c2bd",
        "patch": "@@ -6,25 +6,16 @@\n \n #include \"eccryptoverify.h\"\n \n-#ifdef USE_SECP256K1\n-#include <secp256k1.h>\n-#else\n #include \"ecwrapper.h\"\n-#endif\n \n bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    if (secp256k1_ecdsa_verify((const unsigned char*)&hash, &vchSig[0], vchSig.size(), begin(), size()) != 1)\n-        return false;\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n     if (!key.Verify(hash, vchSig))\n         return false;\n-#endif\n     return true;\n }\n \n@@ -33,52 +24,33 @@ bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned cha\n         return false;\n     int recid = (vchSig[0] - 27) & 3;\n     bool fComp = ((vchSig[0] - 27) & 4) != 0;\n-#ifdef USE_SECP256K1\n-    int pubkeylen = 65;\n-    if (!secp256k1_ecdsa_recover_compact((const unsigned char*)&hash, &vchSig[1], (unsigned char*)begin(), &pubkeylen, fComp, recid))\n-        return false;\n-    assert((int)size() == pubkeylen);\n-#else\n     CECKey key;\n     if (!key.Recover(hash, &vchSig[1], recid))\n         return false;\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, fComp);\n     Set(pubkey.begin(), pubkey.end());\n-#endif\n     return true;\n }\n \n bool CPubKey::IsFullyValid() const {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    if (!secp256k1_ecdsa_pubkey_verify(begin(), size()))\n-        return false;\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n-#endif\n     return true;\n }\n \n bool CPubKey::Decompress() {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    int clen = size();\n-    int ret = secp256k1_ecdsa_pubkey_decompress((unsigned char*)begin(), &clen);\n-    assert(ret);\n-    assert(clen == (int)size());\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, false);\n     Set(pubkey.begin(), pubkey.end());\n-#endif\n     return true;\n }\n \n@@ -89,17 +61,12 @@ bool CPubKey::Derive(CPubKey& pubkeyChild, unsigned char ccChild[32], unsigned i\n     unsigned char out[64];\n     BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n     memcpy(ccChild, out+32, 32);\n-#ifdef USE_SECP256K1\n-    pubkeyChild = *this;\n-    bool ret = secp256k1_ecdsa_pubkey_tweak_add((unsigned char*)pubkeyChild.begin(), pubkeyChild.size(), out);\n-#else\n     CECKey key;\n     bool ret = key.SetPubKey(begin(), size());\n     ret &= key.TweakPublic(out);\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, true);\n     pubkeyChild.Set(pubkey.begin(), pubkey.end());\n-#endif\n     return ret;\n }\n "
      }
    ]
  },
  {
    "sha": "86eb461c5bbe8200ab066f75b5acdf79fbae1086",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmViNDYxYzViYmU4MjAwYWIwNjZmNzViNWFjZGY3OWZiYWUxMDg2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-03T12:07:12Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-03T12:08:15Z"
      },
      "message": "Merge pull request #5839\n\n16a58a8 keys: remove libsecp256k1 verification until it's actually supported (Cory Fields)",
      "tree": {
        "sha": "fc7587c365042d9216af66b1bcc5d2bbe14c1e8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc7587c365042d9216af66b1bcc5d2bbe14c1e8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86eb461c5bbe8200ab066f75b5acdf79fbae1086",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJU9aQvAAoJEFeJbS/48LZX3DUL+gJmNvDsT6K3AzdkDIJ4jIcn\no2LV5zeE+Nh3/EwH0Zs2m6MgNf3qLYcISPiT1sRKgiL+A8/Cc2xd+DxpeEvekyDZ\niMADip+f0/NcWkZDEOh0dX1/+RjkZZdMhmaxbOVvATwiGBuL975W+KvDMumja3EM\nvSJfdGUFcLHhwpLLKNgtv5YGvLOi5bnpVNEs+mnLdkf20gorEj+sWMuz+5UKRQwl\newWdX9l/EEz0aVLPbBZ3Tsf/dXB8vfAdYGc+LWSJooqtP0Refur8qygxu+BrBPSv\nO8rmrUdR4q5rp/pnftRltthecG40VKPnBGRLxY7h4dHXldFH1ERN+iBE1CO6h4kA\nW8qA47n3P2nGtx6xWZVk9jknkmqbKN54jsvA10tioCj2Rc/Tbv3Cx5uhCboR6+s5\ntooyjvdNngpFNzEGotZKKR4zxgtSyhINFQj3kqzG3HiDzSavgO0HQJ3ZVsjLQOWc\ncDrWUj9G8QZrjchgabLGZH7rQlcx9KqrpusASwW9nw==\n=TAMI\n-----END PGP SIGNATURE-----",
        "payload": "tree fc7587c365042d9216af66b1bcc5d2bbe14c1e8d\nparent 10a3ff07f59f8c02c92286e440e5832045a07596\nparent 16a58a86442ad587449f321c0dbab08cc028c2bd\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1425384432 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1425384495 -0800\n\nMerge pull request #5839\n\n16a58a8 keys: remove libsecp256k1 verification until it's actually supported (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86eb461c5bbe8200ab066f75b5acdf79fbae1086",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86eb461c5bbe8200ab066f75b5acdf79fbae1086",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86eb461c5bbe8200ab066f75b5acdf79fbae1086/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10a3ff07f59f8c02c92286e440e5832045a07596",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a3ff07f59f8c02c92286e440e5832045a07596",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10a3ff07f59f8c02c92286e440e5832045a07596"
      },
      {
        "sha": "16a58a86442ad587449f321c0dbab08cc028c2bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16a58a86442ad587449f321c0dbab08cc028c2bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16a58a86442ad587449f321c0dbab08cc028c2bd"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 0,
      "deletions": 39
    },
    "files": [
      {
        "sha": "185f7e2918b12880b684661c0f799f1a55fc9bbc",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86eb461c5bbe8200ab066f75b5acdf79fbae1086/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86eb461c5bbe8200ab066f75b5acdf79fbae1086/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "patch": "@@ -849,7 +849,6 @@ AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])\n AM_CONDITIONAL([USE_COMPARISON_TOOL_REORG_TESTS],[test x$use_comparison_tool_reorg_test != xno])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n-AM_CONDITIONAL([USE_LIBSECP256K1],[test x$use_libsecp256k1 = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])"
      },
      {
        "sha": "4587727cca59bd61337acbd8387235e8e45cdec7",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "patch": "@@ -379,9 +379,6 @@ libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)\n libbitcoinconsensus_la_LIBADD = $(CRYPTO_LIBS)\n libbitcoinconsensus_la_CPPFLAGS = $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BITCOIN_INTERNAL\n \n-if USE_LIBSECP256K1\n-libbitcoinconsensus_la_LIBADD += secp256k1/libsecp256k1.la\n-endif\n endif\n #\n "
      },
      {
        "sha": "64c9bc71190cc65968f4db81c8e2f56e93abc50d",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "patch": "@@ -208,11 +208,9 @@ void CExtKey::Decode(const unsigned char code[74]) {\n }\n \n bool ECC_InitSanityCheck() {\n-#if !defined(USE_SECP256K1)\n     if (!CECKey::SanityCheck()) {\n         return false;\n     }\n-#endif\n     CKey key;\n     key.MakeNewKey(true);\n     CPubKey pubkey = key.GetPubKey();"
      },
      {
        "sha": "a4c046bff53806f05e5d81b8be78731dda0d90cc",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 33,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "patch": "@@ -6,25 +6,16 @@\n \n #include \"eccryptoverify.h\"\n \n-#ifdef USE_SECP256K1\n-#include <secp256k1.h>\n-#else\n #include \"ecwrapper.h\"\n-#endif\n \n bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    if (secp256k1_ecdsa_verify((const unsigned char*)&hash, &vchSig[0], vchSig.size(), begin(), size()) != 1)\n-        return false;\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n     if (!key.Verify(hash, vchSig))\n         return false;\n-#endif\n     return true;\n }\n \n@@ -33,52 +24,33 @@ bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned cha\n         return false;\n     int recid = (vchSig[0] - 27) & 3;\n     bool fComp = ((vchSig[0] - 27) & 4) != 0;\n-#ifdef USE_SECP256K1\n-    int pubkeylen = 65;\n-    if (!secp256k1_ecdsa_recover_compact((const unsigned char*)&hash, &vchSig[1], (unsigned char*)begin(), &pubkeylen, fComp, recid))\n-        return false;\n-    assert((int)size() == pubkeylen);\n-#else\n     CECKey key;\n     if (!key.Recover(hash, &vchSig[1], recid))\n         return false;\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, fComp);\n     Set(pubkey.begin(), pubkey.end());\n-#endif\n     return true;\n }\n \n bool CPubKey::IsFullyValid() const {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    if (!secp256k1_ecdsa_pubkey_verify(begin(), size()))\n-        return false;\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n-#endif\n     return true;\n }\n \n bool CPubKey::Decompress() {\n     if (!IsValid())\n         return false;\n-#ifdef USE_SECP256K1\n-    int clen = size();\n-    int ret = secp256k1_ecdsa_pubkey_decompress((unsigned char*)begin(), &clen);\n-    assert(ret);\n-    assert(clen == (int)size());\n-#else\n     CECKey key;\n     if (!key.SetPubKey(begin(), size()))\n         return false;\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, false);\n     Set(pubkey.begin(), pubkey.end());\n-#endif\n     return true;\n }\n \n@@ -89,17 +61,12 @@ bool CPubKey::Derive(CPubKey& pubkeyChild, unsigned char ccChild[32], unsigned i\n     unsigned char out[64];\n     BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n     memcpy(ccChild, out+32, 32);\n-#ifdef USE_SECP256K1\n-    pubkeyChild = *this;\n-    bool ret = secp256k1_ecdsa_pubkey_tweak_add((unsigned char*)pubkeyChild.begin(), pubkeyChild.size(), out);\n-#else\n     CECKey key;\n     bool ret = key.SetPubKey(begin(), size());\n     ret &= key.TweakPublic(out);\n     std::vector<unsigned char> pubkey;\n     key.GetPubKey(pubkey, true);\n     pubkeyChild.Set(pubkey.begin(), pubkey.end());\n-#endif\n     return ret;\n }\n "
      }
    ]
  },
  {
    "sha": "f8e68f7bfbaaa830331f37137d0771147b85cf4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGU2OGY3YmZiYWFhODMwMzMxZjM3MTM3ZDA3NzExNDdiODVjZjRh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-03T15:27:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-03T15:27:50Z"
      },
      "message": "Merge pull request #5819\n\nd23b0a2 depends: always use static qt5 for linux (Cory Fields)\n3448b13 build: fix typo in configure help (Cory Fields)\nc95ac83 gitian: fix x86_64 build with static libstdc++ (Cory Fields)\n0671516 build: change reduce exports/static libstdc++ options for gitian and travis (Cory Fields)\naa36730 build: remove libstdc++ backwards-compat (Cory Fields)\n3ee028f build: disable reduced exports by default (Cory Fields)",
      "tree": {
        "sha": "ffba3bb681582d734093ae792b6a53d3a5ed9047",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffba3bb681582d734093ae792b6a53d3a5ed9047"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8e68f7bfbaaa830331f37137d0771147b85cf4a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU9dL2AAoJEHSBCwEjRsmm41oH/3M76LPuK0fqXrxM9gmghpmD\n9KiQadTNrPlgsJpvv5CkedRwtqCSXwRKlOhbS17vU9yWaxf972EyuX7rgntqT01Y\nmwVORbgPlcg6i3arJJXoDB0HZjrUr6PRxca5P8siHDRfgXTHHsQqwpvMOV5pTksz\n4d2pLLWUthNzL5Kif3fL/8r7AzP+f8ssSg3HKTXT7FhhHoR2iyT899Wyml/A/oRd\n+WzX6WVB5T78chCZM6CdDX6uG2X1TsH2LvKZVlXKHC6xllkV4eePAJbNHn/7To5t\nwhioNghclY00CCb6mGZksL5DfuTrrX+asCoKSCzhrUUWf5HZgmzYOKuGtgNDSX0=\n=68LE\n-----END PGP SIGNATURE-----",
        "payload": "tree ffba3bb681582d734093ae792b6a53d3a5ed9047\nparent 86eb461c5bbe8200ab066f75b5acdf79fbae1086\nparent d23b0a271163d187eb362164d375148fdd752148\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425396457 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425396470 +0100\n\nMerge pull request #5819\n\nd23b0a2 depends: always use static qt5 for linux (Cory Fields)\n3448b13 build: fix typo in configure help (Cory Fields)\nc95ac83 gitian: fix x86_64 build with static libstdc++ (Cory Fields)\n0671516 build: change reduce exports/static libstdc++ options for gitian and travis (Cory Fields)\naa36730 build: remove libstdc++ backwards-compat (Cory Fields)\n3ee028f build: disable reduced exports by default (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8e68f7bfbaaa830331f37137d0771147b85cf4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8e68f7bfbaaa830331f37137d0771147b85cf4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8e68f7bfbaaa830331f37137d0771147b85cf4a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86eb461c5bbe8200ab066f75b5acdf79fbae1086"
      },
      {
        "sha": "d23b0a271163d187eb362164d375148fdd752148",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d23b0a271163d187eb362164d375148fdd752148",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d23b0a271163d187eb362164d375148fdd752148"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 31,
      "deletions": 144
    },
    "files": [
      {
        "sha": "e08e78dabf5e1e60c7ac39116e4d27b390fa4bd2",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -25,19 +25,19 @@ matrix:\n   fast_finish: true\n   include:\n     - compiler: \": ARM\"\n-      env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": bitcoind\"\n-      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat CPPFLAGS=-DDEBUG_LOCKORDER\"\n+      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \": No wallet\"\n-      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": 32-bit + dash\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\" USE_SHELL=\"/bin/dash\"\n+      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Cross-Mac\"\n-      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.9 GOAL=\"deploy\"\n+      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n     - compiler: \": Win64\"\n-      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui\" MAKEJOBS=\"-j2\"\n+      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": Win32\"\n-      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui\" MAKEJOBS=\"-j2\"\n+      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi"
      },
      {
        "sha": "f5bc1e3122b2529168e752788cc68b03f31dbfb4",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 11,
        "deletions": 30,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -115,9 +115,9 @@ AC_ARG_ENABLE([hardening],\n \n AC_ARG_ENABLE([reduce-exports],\n   [AS_HELP_STRING([--enable-reduce-exports],\n-  [attempt to reduce exported symbols in the resulting executables (default is yes)])],\n+  [attempt to reduce exported symbols in the resulting executables (default is no)])],\n   [use_reduce_exports=$enableval],\n-  [use_reduce_exports=auto])\n+  [use_reduce_exports=no])\n \n AC_ARG_ENABLE([ccache],\n   [AS_HELP_STRING([--enable-ccache],\n@@ -133,7 +133,7 @@ AC_ARG_ENABLE([lcov],\n \n AC_ARG_ENABLE([glibc-back-compat],\n   [AS_HELP_STRING([--enable-glibc-back-compat],\n-  [enable backwards compatibility with glibc and libstdc++])],\n+  [enable backwards compatibility with glibc])],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n@@ -471,22 +471,14 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   [\n     AC_MSG_RESULT(no)\n     if test x$use_reduce_exports = xyes; then\n-      AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduced-exports.])\n+      AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduce-exports.])\n     fi\n-      AC_MSG_WARN([Cannot find a working visibility attribute. Disabling reduced exports.])\n-      use_reduce_exports=no\n   ]\n )\n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n-  [\n-    if test x$use_reduce_exports = xyes; then\n-      AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduced-exports.])\n-    fi\n-    AC_MSG_WARN([Cannot set default symbol visibility. Disabling reduced exports.])\n-    use_reduce_exports=no\n-  ])\n+  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])\n fi\n \n LEVELDB_CPPFLAGS=\n@@ -533,7 +525,7 @@ AX_BOOST_THREAD\n AX_BOOST_CHRONO\n \n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AC_MSG_CHECKING([for working boost reduced exports])\n   TEMP_CPPFLAGS=\"$CPPFLAGS\"\n   CPPFLAGS=\"$BOOST_CPPFLAGS $CPPFLAGS\"\n@@ -547,25 +539,14 @@ if test x$use_reduce_exports != xno; then\n       #endif\n     ]])],[\n       AC_MSG_RESULT(yes)\n-    ],[:\n-    if test x$use_reduce_exports = xauto; then\n-      use_reduce_exports=no\n-    else\n-      if test x$use_reduce_exports = xyes; then\n-        AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduced-exports.])\n-      fi\n-    fi\n-    AC_MSG_RESULT(no)\n-    AC_MSG_WARN([boost versions < 1.49 are known to have symbol visibility issues. Disabling reduced exports.])\n+    ],[\n+    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduce-exports.])\n   ])\n   CPPFLAGS=\"$TEMP_CPPFLAGS\"\n fi\n-\n-elif test x$use_reduce_exports = xauto; then\n-    use_reduce_exports=yes\n fi\n \n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n     CXXFLAGS=\"$CXXFLAGS $RE_CXXFLAGS\"\n     AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"])\n fi\n@@ -827,7 +808,7 @@ else\n fi\n \n AC_MSG_CHECKING([whether to reduce exports])\n-if test x$use_reduce_exports != xno; then\n+if test x$use_reduce_exports = xyes; then\n   AC_MSG_RESULT([yes])\n else\n   AC_MSG_RESULT([no])"
      },
      {
        "sha": "dde4af34915c2ccf07f0dc184779416efe60f4de",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -15,6 +15,7 @@ packages:\n - \"faketime\"\n - \"bsdmainutils\"\n - \"binutils-gold\"\n+- \"libstdc++6-4.6-pic\"\n reference_datetime: \"2013-06-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n@@ -23,7 +24,7 @@ files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"i686-pc-linux-gnu x86_64-unknown-linux-gnu\"\n-  CONFIGFLAGS=\"--enable-upnp-default --enable-glibc-back-compat\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"date ar ranlib nm strip\"\n \n@@ -69,6 +70,14 @@ script: |\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n   done\n \n+  # Ubuntu precise hack: Not an issue in later versions.\n+  # Precise's libstdc++.a is non-pic. There's an optional libstdc++6-4.6-pic\n+  #   package which provides libstdc++_pic.a, but the linker can't find it.\n+  # Symlink it to a path that will be included in our link-line so that the\n+  # linker picks it up before the default libstdc++.a.\n+  # This is only necessary for 64bit.\n+  ln -s /usr/lib/gcc/x86_64-linux-gnu/4.6/libstdc++_pic.a ${BASEPREFIX}/x86_64-unknown-linux-gnu/lib/libstdc++.a\n+\n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n   ./configure --prefix=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`"
      },
      {
        "sha": "b401482c70d4b329c6579e0664e28b24191db433",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -27,7 +27,7 @@ files:\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin11\"\n-  CONFIGFLAGS=\"--enable-upnp-default GENISOIMAGE=$WRAP_DIR/genisoimage\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-reduce-exports GENISOIMAGE=$WRAP_DIR/genisoimage\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"ar ranlib date dmg genisoimage\"\n "
      },
      {
        "sha": "2d72f7b6e5aafe7935a7289dfee1f6e103e16c10",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -26,7 +26,7 @@ files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-w64-mingw32 i686-w64-mingw32\"\n-  CONFIGFLAGS=\"--enable-upnp-default\"\n+  CONFIGFLAGS=\"--enable-upnp-default --enable-reduce-exports\"\n   FAKETIME_HOST_PROGS=\"g++ ar ranlib nm windres strip\"\n   FAKETIME_PROGS=\"date makensis zip\"\n "
      },
      {
        "sha": "05ef33f2ee83326eeb264c25c8744c16f82f2d33",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -6,7 +6,6 @@ SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n NO_WALLET ?=\n NO_UPNP ?=\n-USE_LINUX_STATIC_QT5 ?=\n FALLBACK_DOWNLOAD_PATH ?= https://bitcoincore.org/depends-sources\n \n BUILD = $(shell ./config.guess)"
      },
      {
        "sha": "24e1231d8265f60f54af3ca2f9ece954b0c48452",
        "filename": "depends/README.usage",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/depends/README.usage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/depends/README.usage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.usage?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -23,7 +23,6 @@ NO_QT: Don't download/build/cache qt and its dependencies\n NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n DEBUG: disable some optimizations and enable more runtime checking\n-USE_LINUX_STATIC_QT5: Build a static qt5 rather than shared qt4. Linux only.\n \n If some packages are not built, for example 'make NO_WALLET=1', the appropriate\n options will be passed to bitcoin's configure. In this case, --disable-wallet."
      },
      {
        "sha": "03908aba599ed82d375eb340f3837957dbcb5efe",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -4,15 +4,10 @@ native_packages := native_ccache native_comparisontool\n qt_native_packages = native_protobuf\n qt_packages = qrencode protobuf\n \n-qt46_linux_packages = qt46 expat dbus libxcb xcb_proto libXau xproto freetype libX11 xextproto libXext xtrans libICE libSM\n-qt5_linux_packages= qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n-\n+qt_linux_packages= qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-qt_linux_$(USE_LINUX_STATIC_QT5):=$(qt5_linux_packages)\n-qt_linux_:=$(qt46_linux_packages)\n-qt_linux_packages:=$(qt_linux_$(USE_LINUX_STATIC_QT5))\n \n wallet_packages=bdb\n "
      },
      {
        "sha": "e1d467ff8540ca7881bd591fe9584a37b3ab452b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8e68f7bfbaaa830331f37137d0771147b85cf4a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8e68f7bfbaaa830331f37137d0771147b85cf4a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "patch": "@@ -280,7 +280,6 @@ libbitcoin_util_a_SOURCES = \\\n \n if GLIBC_BACK_COMPAT\n libbitcoin_util_a_SOURCES += compat/glibc_compat.cpp\n-libbitcoin_util_a_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n # cli: shared between bitcoin-cli and bitcoin-qt\n@@ -372,7 +371,6 @@ libbitcoinconsensus_la_SOURCES = \\\n \n if GLIBC_BACK_COMPAT\n   libbitcoinconsensus_la_SOURCES += compat/glibc_compat.cpp\n-  libbitcoinconsensus_la_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)"
      },
      {
        "sha": "4f2771e57a086ca983cec57b42376c003d480da8",
        "filename": "src/compat/glibcxx_compat.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 94,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/compat/glibcxx_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86eb461c5bbe8200ab066f75b5acdf79fbae1086/src/compat/glibcxx_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_compat.cpp?ref=86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "patch": "@@ -1,94 +0,0 @@\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <cstddef>\n-#include <istream>\n-#include <stdexcept>\n-#include <typeinfo>\n-\n-#ifndef _GLIBCXX_USE_NOEXCEPT\n-#define _GLIBCXX_USE_NOEXCEPT throw()\n-#endif\n-\n-namespace std\n-{\n-const char* bad_exception::what() const throw()\n-{\n-    return \"std::bad_exception\";\n-}\n-\n-const char* bad_cast::what() const throw()\n-{\n-    return \"std::bad_cast\";\n-}\n-\n-const char* bad_alloc::what() const throw()\n-{\n-    return \"std::bad_alloc\";\n-}\n-\n-namespace __detail\n-{\n-struct _List_node_base {\n-    void _M_hook(std::__detail::_List_node_base* const __position) throw() __attribute__((used))\n-    {\n-        _M_next = __position;\n-        _M_prev = __position->_M_prev;\n-        __position->_M_prev->_M_next = this;\n-        __position->_M_prev = this;\n-    }\n-\n-    void _M_unhook() __attribute__((used))\n-    {\n-        _List_node_base* const __next_node = _M_next;\n-        _List_node_base* const __prev_node = _M_prev;\n-        __prev_node->_M_next = __next_node;\n-        __next_node->_M_prev = __prev_node;\n-    }\n-\n-    _List_node_base* _M_next;\n-    _List_node_base* _M_prev;\n-};\n-} // namespace detail\n-\n-template ostream& ostream::_M_insert(bool);\n-template ostream& ostream::_M_insert(long);\n-template ostream& ostream::_M_insert(double);\n-template ostream& ostream::_M_insert(unsigned long);\n-template ostream& ostream::_M_insert(const void*);\n-template ostream& __ostream_insert(ostream&, const char*, streamsize);\n-template istream& istream::_M_extract(long&);\n-template istream& istream::_M_extract(unsigned short&);\n-\n-out_of_range::~out_of_range() _GLIBCXX_USE_NOEXCEPT {}\n-\n-length_error::~length_error() _GLIBCXX_USE_NOEXCEPT {}\n-\n-// Used with permission.\n-// See: https://github.com/madlib/madlib/commit/c3db418c0d34d6813608f2137fef1012ce03043d\n-\n-void ctype<char>::_M_widen_init() const\n-{\n-    char __tmp[sizeof(_M_widen)];\n-    for (unsigned __i = 0; __i < sizeof(_M_widen); ++__i)\n-        __tmp[__i] = __i;\n-    do_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n-\n-    _M_widen_ok = 1;\n-    // Set _M_widen_ok to 2 if memcpy can't be used.\n-    for (unsigned __i = 0; __i < sizeof(_M_widen); ++__i)\n-        if (__tmp[__i] != _M_widen[__i]) {\n-            _M_widen_ok = 2;\n-            break;\n-        }\n-}\n-\n-void __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__));\n-void __throw_out_of_range_fmt(const char* err, ...)\n-{\n-    // Safe and over-simplified version. Ignore the format and print it as-is.\n-    __throw_out_of_range(err);\n-}\n-\n-} // namespace std"
      }
    ]
  },
  {
    "sha": "3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGZjZGY0NmMyYzFhMzIyYjY2NDlmMDRlOGM5Y2E3NjM2YzViYWYz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-03T15:30:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-03T15:57:30Z"
      },
      "message": "Merge pull request #5775\n\ndeda3e1 [Qt] remove unused getNumBlocksAtStartup() from ClientModel (Philip Kaufmann)\n47ee8cf [Qt] use qint64 in BitcoinGUI::setNumBlocks (Philip Kaufmann)",
      "tree": {
        "sha": "fba09eb236db25663005b91b68e2b57152ea5b54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fba09eb236db25663005b91b68e2b57152ea5b54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU9dnqAAoJEHSBCwEjRsmmEwAIAMEP1vNV9b4N5K30TA4xMRjJ\nky/bSTEEyjgltPTQ5xwHyhwZAsLdrcUycaxa8cV8v7NUT8Lk+COpzw0wkLLqysep\nAkULi68UIR0kOQKdulr1ZppwF1iQ5gZf1PkFV4ZnPeolX6JDvZSz/5EsRL0grITA\nMh3eHsMXsWYORhapNMzJCwQrarVS2u17m/R7tG7s/TROJLRfrDJ69zGntL2s4Gvs\n74ZXiCR8ZrfkWCBzjYYnpnbnR2VHgJKZlIRCls2kAsiQlT+TyccMWFgOxWnsJldY\npI7ntdW2aH/dqHOlKP/IZyQLOMmf3m2RM0pphwQMV/HsL0psz/849E3EHsgp1yc=\n=hEkr\n-----END PGP SIGNATURE-----",
        "payload": "tree fba09eb236db25663005b91b68e2b57152ea5b54\nparent f8e68f7bfbaaa830331f37137d0771147b85cf4a\nparent deda3e156d9d424051758eeca9569a90365d2dd5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425396629 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425398250 +0100\n\nMerge pull request #5775\n\ndeda3e1 [Qt] remove unused getNumBlocksAtStartup() from ClientModel (Philip Kaufmann)\n47ee8cf [Qt] use qint64 in BitcoinGUI::setNumBlocks (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8e68f7bfbaaa830331f37137d0771147b85cf4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8e68f7bfbaaa830331f37137d0771147b85cf4a"
      },
      {
        "sha": "deda3e156d9d424051758eeca9569a90365d2dd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deda3e156d9d424051758eeca9569a90365d2dd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/deda3e156d9d424051758eeca9569a90365d2dd5"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 6,
      "deletions": 14
    },
    "files": [
      {
        "sha": "5c5da6dba0b59d3aabc95f64627860d67d2b009d",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
        "patch": "@@ -682,7 +682,7 @@ void BitcoinGUI::setNumBlocks(int count)\n \n     QDateTime lastBlockDate = clientModel->getLastBlockDate();\n     QDateTime currentDate = QDateTime::currentDateTime();\n-    int secs = lastBlockDate.secsTo(currentDate);\n+    qint64 secs = lastBlockDate.secsTo(currentDate);\n \n     tooltip = tr(\"Processed %n blocks of transaction history.\", \"\", count);\n \n@@ -722,8 +722,8 @@ void BitcoinGUI::setNumBlocks(int count)\n         }\n         else\n         {\n-            int years = secs / YEAR_IN_SECONDS;\n-            int remainder = secs % YEAR_IN_SECONDS;\n+            qint64 years = secs / YEAR_IN_SECONDS;\n+            qint64 remainder = secs % YEAR_IN_SECONDS;\n             timeBehindText = tr(\"%1 and %2\").arg(tr(\"%n year(s)\", \"\", years)).arg(tr(\"%n week(s)\",\"\", remainder/WEEK_IN_SECONDS));\n         }\n "
      },
      {
        "sha": "729eb84a18190349364bbc1ec78fb7b6dcc6d058",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
        "patch": "@@ -29,8 +29,9 @@ ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     optionsModel(optionsModel),\n     peerTableModel(0),\n     cachedNumBlocks(0),\n-    cachedReindexing(0), cachedImporting(0),\n-    numBlocksAtStartup(-1), pollTimer(0)\n+    cachedReindexing(0),\n+    cachedImporting(0),\n+    pollTimer(0)\n {\n     peerTableModel = new PeerTableModel(this);\n     pollTimer = new QTimer(this);\n@@ -65,12 +66,6 @@ int ClientModel::getNumBlocks() const\n     return chainActive.Height();\n }\n \n-int ClientModel::getNumBlocksAtStartup()\n-{\n-    if (numBlocksAtStartup == -1) numBlocksAtStartup = getNumBlocks();\n-    return numBlocksAtStartup;\n-}\n-\n quint64 ClientModel::getTotalBytesRecv() const\n {\n     return CNode::GetTotalBytesRecv();"
      },
      {
        "sha": "7b74728b262e33ef77c7b8b22c58fb2dc640f82e",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
        "patch": "@@ -48,7 +48,6 @@ class ClientModel : public QObject\n     //! Return number of connections, default is in- and outbound (total)\n     int getNumConnections(unsigned int flags = CONNECTIONS_ALL) const;\n     int getNumBlocks() const;\n-    int getNumBlocksAtStartup();\n \n     quint64 getTotalBytesRecv() const;\n     quint64 getTotalBytesSent() const;\n@@ -77,8 +76,6 @@ class ClientModel : public QObject\n     bool cachedReindexing;\n     bool cachedImporting;\n \n-    int numBlocksAtStartup;\n-\n     QTimer *pollTimer;\n \n     void subscribeToCoreSignals();"
      }
    ]
  },
  {
    "sha": "215475aa0024e48f91e26be09f7e9c25e72717d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTU0NzVhYTAwMjRlNDhmOTFlMjZiZTA5ZjdlOWMyNWU3MjcxN2Qz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-05T13:41:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-05T13:42:20Z"
      },
      "message": "Merge pull request #5830\n\n6f1274c qt: Don't save geometry for options and about/help window (Wladimir J. van der Laan)",
      "tree": {
        "sha": "0266daad49ef670a16f368b94b44b242639e9c4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0266daad49ef670a16f368b94b44b242639e9c4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/215475aa0024e48f91e26be09f7e9c25e72717d3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU+F08AAoJEHSBCwEjRsmmsPwH/AgrtEL9GJbrO6xbdfYQhxDy\nvmPMamamxcdYus5ETBrpogjQiM88CrlyFWEVFX8LrKC5pBUQrzfpPsMlBM7ng2Nk\nekH2oYjyn2Rp3EAdLp9rMSUgwLb8hjHAIe5b6EE1FE09nwmeXkoTE8UqCZmN7OMW\nK0Pj4w2H1j8fxy0KC+oDNpnDPE6rL4JUsFatsLmAgdaQ7AWnbQn4+wPBpXXFPRgv\ngN/eyrUDkHDqd9YgKpBAy7+6/MDtFzYv+JWqsJ3u3YTUqPNmt5MVoq59vLFXbQMV\nwXT4KLiMA5wIDrmr4M4XUcr1OZUvt8DwJfgrYQ8Lry+TVMToER/7+SP39OQS3A4=\n=NsgX\n-----END PGP SIGNATURE-----",
        "payload": "tree 0266daad49ef670a16f368b94b44b242639e9c4a\nparent 3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3\nparent 6f1274c8c9cf3e9361aa149f6d271caf3e016991\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425562919 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425562940 +0100\n\nMerge pull request #5830\n\n6f1274c qt: Don't save geometry for options and about/help window (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/215475aa0024e48f91e26be09f7e9c25e72717d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/215475aa0024e48f91e26be09f7e9c25e72717d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/215475aa0024e48f91e26be09f7e9c25e72717d3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3"
      },
      {
        "sha": "6f1274c8c9cf3e9361aa149f6d271caf3e016991",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f1274c8c9cf3e9361aa149f6d271caf3e016991",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f1274c8c9cf3e9361aa149f6d271caf3e016991"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a342b4bfea40f03012fbe9e0afc396328ce28b2d",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/215475aa0024e48f91e26be09f7e9c25e72717d3/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/215475aa0024e48f91e26be09f7e9c25e72717d3/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=215475aa0024e48f91e26be09f7e9c25e72717d3",
        "patch": "@@ -38,7 +38,6 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     fProxyIpValid(true)\n {\n     ui->setupUi(this);\n-    GUIUtil::restoreWindowGeometry(\"nOptionsDialogWindow\", this->size(), this);\n \n     /* Main elements init */\n     ui->databaseCache->setMinimum(nMinDbCache);\n@@ -117,7 +116,6 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n \n OptionsDialog::~OptionsDialog()\n {\n-    GUIUtil::saveWindowGeometry(\"nOptionsDialogWindow\", this);\n     delete ui;\n }\n "
      },
      {
        "sha": "4e7b70efe6bbff7d5d9d97bde913bc1b0a6ffd57",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/215475aa0024e48f91e26be09f7e9c25e72717d3/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/215475aa0024e48f91e26be09f7e9c25e72717d3/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=215475aa0024e48f91e26be09f7e9c25e72717d3",
        "patch": "@@ -29,7 +29,6 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n     ui(new Ui::HelpMessageDialog)\n {\n     ui->setupUi(this);\n-    GUIUtil::restoreWindowGeometry(\"nHelpMessageDialogWindow\", this->size(), this);\n \n     QString version = tr(\"Bitcoin Core\") + \" \" + tr(\"version\") + \" \" + QString::fromStdString(FormatFullVersion());\n     /* On x86 add a bit specifier to the version so that users can distinguish between\n@@ -143,7 +142,6 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n \n HelpMessageDialog::~HelpMessageDialog()\n {\n-    GUIUtil::saveWindowGeometry(\"nHelpMessageDialogWindow\", this);\n     delete ui;\n }\n "
      }
    ]
  },
  {
    "sha": "84a05b843b8ab704266289de67c9779ad733a196",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGEwNWI4NDNiOGFiNzA0MjY2Mjg5ZGU2N2M5Nzc5YWQ3MzNhMTk2",
    "commit": {
      "author": {
        "name": "Rob Van Mieghem",
        "email": "rob@vanmieghemcloud.com",
        "date": "2015-03-03T07:42:52Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-05T17:20:49Z"
      },
      "message": "QT: remove unused parameter",
      "tree": {
        "sha": "98b09c74d7a7b72de4ad9d1d8bcdcc133a46cd6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98b09c74d7a7b72de4ad9d1d8bcdcc133a46cd6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84a05b843b8ab704266289de67c9779ad733a196",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlT4kHEACgkQdYgkL74406gbGgCgxAHb4iL1W+0ac85nBQBdeCFm\nflUAn2JxJCjWMZ0wtrFaaITGjogB03Se\n=oMJo\n-----END PGP SIGNATURE-----",
        "payload": "tree 98b09c74d7a7b72de4ad9d1d8bcdcc133a46cd6c\nparent 215475aa0024e48f91e26be09f7e9c25e72717d3\nauthor Rob Van Mieghem <rob@vanmieghemcloud.com> 1425368572 +0100\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1425576049 -0500\n\nQT: remove unused parameter\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84a05b843b8ab704266289de67c9779ad733a196",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84a05b843b8ab704266289de67c9779ad733a196",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84a05b843b8ab704266289de67c9779ad733a196/comments",
    "author": {
      "login": "robvanmieghem",
      "id": 3511318,
      "node_id": "MDQ6VXNlcjM1MTEzMTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3511318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robvanmieghem",
      "html_url": "https://github.com/robvanmieghem",
      "followers_url": "https://api.github.com/users/robvanmieghem/followers",
      "following_url": "https://api.github.com/users/robvanmieghem/following{/other_user}",
      "gists_url": "https://api.github.com/users/robvanmieghem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robvanmieghem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robvanmieghem/subscriptions",
      "organizations_url": "https://api.github.com/users/robvanmieghem/orgs",
      "repos_url": "https://api.github.com/users/robvanmieghem/repos",
      "events_url": "https://api.github.com/users/robvanmieghem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robvanmieghem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "215475aa0024e48f91e26be09f7e9c25e72717d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/215475aa0024e48f91e26be09f7e9c25e72717d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/215475aa0024e48f91e26be09f7e9c25e72717d3"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a0dcb46e27f49d10cc6a489f825220fb0cc6ab23",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84a05b843b8ab704266289de67c9779ad733a196/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84a05b843b8ab704266289de67c9779ad733a196/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=84a05b843b8ab704266289de67c9779ad733a196",
        "patch": "@@ -151,7 +151,7 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n \n     // Create actions for the toolbar, menu bar and tray/dock icon\n     // Needs walletFrame to be initialized\n-    createActions(networkStyle);\n+    createActions();\n \n     // Create application menu bar\n     createMenuBar();\n@@ -243,7 +243,7 @@ BitcoinGUI::~BitcoinGUI()\n     delete rpcConsole;\n }\n \n-void BitcoinGUI::createActions(const NetworkStyle *networkStyle)\n+void BitcoinGUI::createActions()\n {\n     QActionGroup *tabGroup = new QActionGroup(this);\n "
      },
      {
        "sha": "fd776d63f80a9d245ea815a7a2fb9f7fd83b4199",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84a05b843b8ab704266289de67c9779ad733a196/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84a05b843b8ab704266289de67c9779ad733a196/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=84a05b843b8ab704266289de67c9779ad733a196",
        "patch": "@@ -118,7 +118,7 @@ class BitcoinGUI : public QMainWindow\n     int spinnerFrame;\n \n     /** Create the main UI actions. */\n-    void createActions(const NetworkStyle *networkStyle);\n+    void createActions();\n     /** Create the menu bar and sub-menus. */\n     void createMenuBar();\n     /** Create the toolbars */"
      }
    ]
  },
  {
    "sha": "ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTA0YzRhNzgwMWU3ZDY4YTVlODQwMzViOTE5ZTVjMzYyNmViN2E3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-05T12:01:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-06T12:03:17Z"
      },
      "message": "Limit message sizes before transfer\n\nThis introduces a fixed limit for the size of p2p messages, and enforces it\nbefore download.",
      "tree": {
        "sha": "f4719f30e05d9b918ce0175355d81d313526135f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4719f30e05d9b918ce0175355d81d313526135f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84a05b843b8ab704266289de67c9779ad733a196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84a05b843b8ab704266289de67c9779ad733a196",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84a05b843b8ab704266289de67c9779ad733a196"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d9f470b9e450c1b0b658dbe62b86aac783eb7358",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
        "patch": "@@ -523,6 +523,11 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes)\n         if (handled < 0)\n                 return false;\n \n+        if (msg.in_data && msg.hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n+            LogPrint(\"net\", \"Oversized message from peer=%i, disconnecting\", GetId());\n+            return false;\n+        }\n+\n         pch += handled;\n         nBytes -= handled;\n "
      },
      {
        "sha": "24275d4a9d335bb5c5384366371dce11d1bdd053",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
        "patch": "@@ -46,6 +46,8 @@ static const int TIMEOUT_INTERVAL = 20 * 60;\n static const unsigned int MAX_INV_SZ = 50000;\n /** The maximum number of new addresses to accumulate before announcing. */\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n+/** Maximum length of incoming protocol messages (no message over 2 MiB is currently acceptable). */\n+static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 2 * 1024 * 1024;\n /** -listen default */\n static const bool DEFAULT_LISTEN = true;\n /** -upnp default */"
      }
    ]
  },
  {
    "sha": "ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTlmMmJmYTdiN2E2MjlhZmRjYzZkM2RkYzNiNzk4YWNkZjAwNWVk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T14:26:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T14:27:00Z"
      },
      "message": "Merge pull request #5813\n\n34e5015 Add unit tests for next difficulty calculations (Ross Nicoll)",
      "tree": {
        "sha": "5d38178be834792d85b2d52392b0bb20f3f365ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d38178be834792d85b2d52392b0bb20f3f365ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU+bk0AAoJEHSBCwEjRsmmd3AH/3LYKYHuk6+oEMAFDhkgmTqN\nQ+axDpU4YXpb4yqcLNmyPY03UVh7jw4OdKYnyDv0mE25vfRh0UATtMoH3Vz22t7M\nd/WcZER38AEyJdlfrUVE0CopzXYEGhtlL427MzbQr8RUIYHCkTKubXXfr9JGB9SE\nGk3dlK6w57CSWDjbHHIx2KM/uxBJl4Shdjfh9/AZ6tirAgBgbTHhQw49Vwf4nnr+\n0JhvO+SrUaASQh7BqpD3bfxpa1AbRwhkzdnPfCvSZBYFcRFwoWvVwvoFZC7jriJF\nGTxO57XQ6boLuYdBEZ4FN8oMg16OH8oDSj38hK18QBxTnbxQ99FvYAwca0fUmRg=\n=G65P\n-----END PGP SIGNATURE-----",
        "payload": "tree 5d38178be834792d85b2d52392b0bb20f3f365ea\nparent 84a05b843b8ab704266289de67c9779ad733a196\nparent 34e5015cd21e27c1bf635d92531afac93f553096\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425652004 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425652020 +0100\n\nMerge pull request #5813\n\n34e5015 Add unit tests for next difficulty calculations (Ross Nicoll)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84a05b843b8ab704266289de67c9779ad733a196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84a05b843b8ab704266289de67c9779ad733a196",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84a05b843b8ab704266289de67c9779ad733a196"
      },
      {
        "sha": "34e5015cd21e27c1bf635d92531afac93f553096",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e5015cd21e27c1bf635d92531afac93f553096",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34e5015cd21e27c1bf635d92531afac93f553096"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 74,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6774745de2453ebe9d998e3a7f90b8252ae09432",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
        "patch": "@@ -55,6 +55,7 @@ BITCOIN_TESTS =\\\n   test/multisig_tests.cpp \\\n   test/netbase_tests.cpp \\\n   test/pmt_tests.cpp \\\n+  test/pow_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\\n   test/script_P2SH_tests.cpp \\"
      },
      {
        "sha": "b75b293c908ba67b3663df29193d33f50e8c0fd9",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
        "patch": "@@ -48,8 +48,13 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n         pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n \n+    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime());\n+}\n+\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime)\n+{\n     // Limit adjustment step\n-    int64_t nActualTimespan = pindexLast->GetBlockTime() - pindexFirst->GetBlockTime();\n+    int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n     LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n     if (nActualTimespan < Params().TargetTimespan()/4)\n         nActualTimespan = Params().TargetTimespan()/4;"
      },
      {
        "sha": "a5fbba62364c0f1709cd11723b5137694dac6586",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
        "patch": "@@ -14,6 +14,7 @@ class uint256;\n class arith_uint256;\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);"
      },
      {
        "sha": "e42c1b0a8b66af7e2952c1b48f172b983af92de4",
        "filename": "src/test/pow_tests.cpp",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
        "patch": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"pow.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace std;\n+\n+BOOST_AUTO_TEST_SUITE(pow_tests)\n+\n+/* Test calculation of next difficulty target with no constraints applying */\n+BOOST_AUTO_TEST_CASE(get_next_work)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1261130161; // Block #30240\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 32255;\n+    pindexLast.nTime = 1262152739;  // Block #32255\n+    pindexLast.nBits = 0x1d00ffff;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00d86a);\n+}\n+\n+/* Test the constraint on the upper bound for next work */\n+BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1231006505; // Block #0\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 2015;\n+    pindexLast.nTime = 1233061996;  // Block #2015\n+    pindexLast.nBits = 0x1d00ffff;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00ffff);\n+}\n+\n+/* Test the constraint on the lower bound for actual time taken */\n+BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    int64_t nLastRetargetTime = 1279008237; // Block #66528\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 68543;\n+    pindexLast.nTime = 1279297671;  // Block #68543\n+    pindexLast.nBits = 0x1c05a3f4;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1c0168fd);\n+}\n+\n+/* Test the constraint on the upper bound for actual time taken */\n+BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+    int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n+    CBlockIndex pindexLast;\n+    pindexLast.nHeight = 46367;\n+    pindexLast.nTime = 1269211443;  // Block #46367\n+    pindexLast.nBits = 0x1c387f6f;\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00e1fd);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "51377c2dbe0d71dad953a43187749a38010d1f1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTM3N2MyZGJlMGQ3MWRhZDk1M2E0MzE4Nzc0OWEzODAxMGQxZjFm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T14:30:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T14:31:31Z"
      },
      "message": "Merge pull request #5843\n\nba04c4a Limit message sizes before transfer (Pieter Wuille)",
      "tree": {
        "sha": "5e6b0f601795a266b3ad4a1ab6e6385dea9966ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e6b0f601795a266b3ad4a1ab6e6385dea9966ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51377c2dbe0d71dad953a43187749a38010d1f1f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU+bpDAAoJEHSBCwEjRsmm4IsIALpCGAHY+Atc/RWo75yJpzpm\nhEwde/GEeUXHjaTD7OZIJmoeHgFkCpypOKAewtvRbutkQdMn+6rUh7yg5SIG8uOV\neU+TIlo/BftfHb15KGHe/bU2JL7OCM7kI+8luPUeum3kfPRWp3KCmn68N7KNM0N3\nEOkWVgwD6Kufqj936eWfaxhmFyRUrclGOhymuzU9UttlfgBcdV3lU+/VhlYDqKfz\naAaPdjaUSQFbvw7YRhDOwZ05/Zn2nsWONFhZ/L6AEbPm6Hah+QPEdXiBcVwnrnEy\nkngs+x+67AHRgEoLOOcOsagcNdsAga+GwYATAvADNGpNbmBuKKJk03F0U1i7pJQ=\n=h9PH\n-----END PGP SIGNATURE-----",
        "payload": "tree 5e6b0f601795a266b3ad4a1ab6e6385dea9966ca\nparent ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed\nparent ba04c4a7801e7d68a5e84035b919e5c3626eb7a7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425652212 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425652291 +0100\n\nMerge pull request #5843\n\nba04c4a Limit message sizes before transfer (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51377c2dbe0d71dad953a43187749a38010d1f1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51377c2dbe0d71dad953a43187749a38010d1f1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51377c2dbe0d71dad953a43187749a38010d1f1f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee9f2bfa7b7a629afdcc6d3ddc3b798acdf005ed"
      },
      {
        "sha": "ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba04c4a7801e7d68a5e84035b919e5c3626eb7a7"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d9f470b9e450c1b0b658dbe62b86aac783eb7358",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51377c2dbe0d71dad953a43187749a38010d1f1f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51377c2dbe0d71dad953a43187749a38010d1f1f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=51377c2dbe0d71dad953a43187749a38010d1f1f",
        "patch": "@@ -523,6 +523,11 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes)\n         if (handled < 0)\n                 return false;\n \n+        if (msg.in_data && msg.hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n+            LogPrint(\"net\", \"Oversized message from peer=%i, disconnecting\", GetId());\n+            return false;\n+        }\n+\n         pch += handled;\n         nBytes -= handled;\n "
      },
      {
        "sha": "24275d4a9d335bb5c5384366371dce11d1bdd053",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51377c2dbe0d71dad953a43187749a38010d1f1f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51377c2dbe0d71dad953a43187749a38010d1f1f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=51377c2dbe0d71dad953a43187749a38010d1f1f",
        "patch": "@@ -46,6 +46,8 @@ static const int TIMEOUT_INTERVAL = 20 * 60;\n static const unsigned int MAX_INV_SZ = 50000;\n /** The maximum number of new addresses to accumulate before announcing. */\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n+/** Maximum length of incoming protocol messages (no message over 2 MiB is currently acceptable). */\n+static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 2 * 1024 * 1024;\n /** -listen default */\n static const bool DEFAULT_LISTEN = true;\n /** -upnp default */"
      }
    ]
  },
  {
    "sha": "4414f5ffe130f46becdc75c8e59ee74604e978aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDE0ZjVmZmUxMzBmNDZiZWNkYzc1YzhlNTllZTc0NjA0ZTk3OGFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T08:53:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T14:54:53Z"
      },
      "message": "build: Endian compatibility\n\n- Detect endian instead of stopping configure on big-endian\n- Add `byteswap.h` and `endian.h` header for compatibility with\n  Windows and other operating systems that don't come with them\n- Update `crypto/common.h` functions to use compat\n  endian header",
      "tree": {
        "sha": "857dbb3624c21023894060ea030f55f4628432e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/857dbb3624c21023894060ea030f55f4628432e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4414f5ffe130f46becdc75c8e59ee74604e978aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4414f5ffe130f46becdc75c8e59ee74604e978aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4414f5ffe130f46becdc75c8e59ee74604e978aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4414f5ffe130f46becdc75c8e59ee74604e978aa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51377c2dbe0d71dad953a43187749a38010d1f1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51377c2dbe0d71dad953a43187749a38010d1f1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51377c2dbe0d71dad953a43187749a38010d1f1f"
      }
    ],
    "stats": {
      "total": 332,
      "additions": 263,
      "deletions": 69
    },
    "files": [
      {
        "sha": "2c918218bb836e19cf078b55526e34f72a456eee",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -350,8 +350,8 @@ if test x$use_lcov = xyes; then\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\n fi\n \n-dnl Require little endian\n-AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+dnl Check for endianness\n+AC_C_BIGENDIAN\n \n dnl Check for pthread compile/link requirements\n AX_PTHREAD\n@@ -438,17 +438,22 @@ if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n fi\n \n-AC_CHECK_HEADERS([endian.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n+AC_CHECK_HEADERS([endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n AC_SEARCH_LIBS([getaddrinfo_a], [anl], [AC_DEFINE(HAVE_GETADDRINFO_A, 1, [Define this symbol if you have getaddrinfo_a])])\n AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE(HAVE_INET_PTON, 1, [Define this symbol if you have inet_pton])])\n \n AC_CHECK_DECLS([strnlen])\n \n-AC_CHECK_DECLS([le32toh, le64toh, htole32, htole64, be32toh, be64toh, htobe32, htobe64],,,\n+AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n \t\t[#if HAVE_ENDIAN_H\n                  #include <endian.h>\n                  #endif])\n \n+AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n+\t\t[#if HAVE_BYTESWAP_H\n+                 #include <byteswap.h>\n+                 #endif])\n+\n dnl Check for MSG_NOSIGNAL\n AC_MSG_CHECKING(for MSG_NOSIGNAL)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],"
      },
      {
        "sha": "da65efa713279c2b23df5b791bbd3b72a2bbb06b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -141,6 +141,8 @@ BITCOIN_CORE_H = \\\n   walletdb.h \\\n   wallet.h \\\n   wallet_ismine.h \\\n+  compat/byteswap.h \\\n+  compat/endian.h \\\n   compat/sanity.h\n \n JSON_H = \\"
      },
      {
        "sha": "899220bdc549053927edf86a29bc415310fb5eba",
        "filename": "src/compat/byteswap.h",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/compat/byteswap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/compat/byteswap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/byteswap.h?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMPAT_BYTESWAP_H\n+#define BITCOIN_COMPAT_BYTESWAP_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include <stdint.h>\n+\n+#if defined(HAVE_BYTESWAP_H)\n+#include <byteswap.h>\n+#endif\n+\n+#if HAVE_DECL_BSWAP_16 == 0\n+inline uint16_t bswap_16(uint16_t x)\n+{\n+    return (x >> 8) | ((x & 0x00ff) << 8);\n+}\n+#endif // HAVE_DECL_BSWAP16\n+\n+#if HAVE_DECL_BSWAP_32 == 0\n+inline uint32_t bswap_32(uint32_t x)\n+{\n+    return (((x & 0xff000000U) >> 24) | ((x & 0x00ff0000U) >>  8) |\n+            ((x & 0x0000ff00U) <<  8) | ((x & 0x000000ffU) << 24));\n+}\n+#endif // HAVE_DECL_BSWAP32\n+\n+#if HAVE_DECL_BSWAP_64 == 0\n+inline uint64_t bswap_64(uint64_t x)\n+{\n+     return (((x & 0xff00000000000000ull) >> 56)\n+          | ((x & 0x00ff000000000000ull) >> 40)\n+          | ((x & 0x0000ff0000000000ull) >> 24)\n+          | ((x & 0x000000ff00000000ull) >> 8)\n+          | ((x & 0x00000000ff000000ull) << 8)\n+          | ((x & 0x0000000000ff0000ull) << 24)\n+          | ((x & 0x000000000000ff00ull) << 40)\n+          | ((x & 0x00000000000000ffull) << 56));\n+}\n+#endif // HAVE_DECL_BSWAP64\n+\n+#endif // BITCOIN_COMPAT_BYTESWAP_H"
      },
      {
        "sha": "4d041d655411738476ecbc1e5c96e845452d8b8f",
        "filename": "src/compat/endian.h",
        "status": "added",
        "additions": 194,
        "deletions": 0,
        "changes": 194,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/compat/endian.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/compat/endian.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/endian.h?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -0,0 +1,194 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMPAT_ENDIAN_H\n+#define BITCOIN_COMPAT_ENDIAN_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include <stdint.h>\n+\n+#include \"compat/byteswap.h\"\n+\n+#if defined(HAVE_ENDIAN_H)\n+#include <endian.h>\n+#endif\n+\n+#if defined(WORDS_BIGENDIAN)\n+\n+#if HAVE_DECL_HTOBE16 == 0\n+inline uint16_t htobe16(uint16_t host_16bits)\n+{\n+    return host_16bits;\n+}\n+#endif // HAVE_DECL_HTOBE16\n+\n+#if HAVE_DECL_HTOLE16 == 0\n+inline uint16_t htole16(uint16_t host_16bits)\n+{\n+    return bswap_16(host_16bits);\n+}\n+#endif // HAVE_DECL_HTOLE16\n+\n+#if HAVE_DECL_BE16TOH == 0\n+inline uint16_t be16toh(uint16_t big_endian_16bits)\n+{\n+    return big_endian_16bits;\n+}\n+#endif // HAVE_DECL_BE16TOH\n+\n+#if HAVE_DECL_LE16TOH == 0\n+inline uint16_t le16toh(uint16_t little_endian_16bits)\n+{\n+    return bswap_16(little_endian_16bits);\n+}\n+#endif // HAVE_DECL_LE16TOH\n+\n+#if HAVE_DECL_HTOBE32 == 0\n+inline uint32_t htobe32(uint32_t host_32bits)\n+{\n+    return host_32bits;\n+}\n+#endif // HAVE_DECL_HTOBE32\n+\n+#if HAVE_DECL_HTOLE32 == 0\n+inline uint32_t htole32(uint32_t host_32bits)\n+{\n+    return bswap_32(host_32bits);\n+}\n+#endif // HAVE_DECL_HTOLE32\n+\n+#if HAVE_DECL_BE32TOH == 0\n+inline uint32_t be32toh(uint32_t big_endian_32bits)\n+{\n+    return big_endian_32bits;\n+}\n+#endif // HAVE_DECL_BE32TOH\n+\n+#if HAVE_DECL_LE32TOH == 0\n+inline uint32_t le32toh(uint32_t little_endian_32bits)\n+{\n+    return bswap_32(little_endian_32bits);\n+}\n+#endif // HAVE_DECL_LE32TOH\n+\n+#if HAVE_DECL_HTOBE64 == 0\n+inline uint64_t htobe64(uint64_t host_64bits)\n+{\n+    return host_64bits;\n+}\n+#endif // HAVE_DECL_HTOBE64\n+\n+#if HAVE_DECL_HTOLE64 == 0\n+inline uint64_t htole64(uint64_t host_64bits)\n+{\n+    return bswap_64(host_64bits);\n+}\n+#endif // HAVE_DECL_HTOLE64\n+\n+#if HAVE_DECL_BE64TOH == 0\n+inline uint64_t be64toh(uint64_t big_endian_64bits)\n+{\n+    return big_endian_64bits;\n+}\n+#endif // HAVE_DECL_BE64TOH\n+\n+#if HAVE_DECL_LE64TOH == 0\n+inline uint64_t le64toh(uint64_t little_endian_64bits)\n+{\n+    return bswap_64(little_endian_64bits);\n+}\n+#endif // HAVE_DECL_LE64TOH\n+\n+#else // WORDS_BIGENDIAN\n+\n+#if HAVE_DECL_HTOBE16 == 0\n+inline uint16_t htobe16(uint16_t host_16bits)\n+{\n+    return bswap_16(host_16bits);\n+}\n+#endif // HAVE_DECL_HTOBE16\n+\n+#if HAVE_DECL_HTOLE16 == 0\n+inline uint16_t htole16(uint16_t host_16bits)\n+{\n+    return host_16bits;\n+}\n+#endif // HAVE_DECL_HTOLE16\n+\n+#if HAVE_DECL_BE16TOH == 0\n+inline uint16_t be16toh(uint16_t big_endian_16bits)\n+{\n+    return bswap_16(big_endian_16bits);\n+}\n+#endif // HAVE_DECL_BE16TOH\n+\n+#if HAVE_DECL_LE16TOH == 0\n+inline uint16_t le16toh(uint16_t little_endian_16bits)\n+{\n+    return little_endian_16bits;\n+}\n+#endif // HAVE_DECL_LE16TOH\n+\n+#if HAVE_DECL_HTOBE32 == 0\n+inline uint32_t htobe32(uint32_t host_32bits)\n+{\n+    return bswap_32(host_32bits);\n+}\n+#endif // HAVE_DECL_HTOBE32\n+\n+#if HAVE_DECL_HTOLE32 == 0\n+inline uint32_t htole32(uint32_t host_32bits)\n+{\n+    return host_32bits;\n+}\n+#endif // HAVE_DECL_HTOLE32\n+\n+#if HAVE_DECL_BE32TOH == 0\n+inline uint32_t be32toh(uint32_t big_endian_32bits)\n+{\n+    return bswap_32(big_endian_32bits);\n+}\n+#endif // HAVE_DECL_BE32TOH\n+\n+#if HAVE_DECL_LE32TOH == 0\n+inline uint32_t le32toh(uint32_t little_endian_32bits)\n+{\n+    return little_endian_32bits;\n+}\n+#endif // HAVE_DECL_LE32TOH\n+\n+#if HAVE_DECL_HTOBE64 == 0\n+inline uint64_t htobe64(uint64_t host_64bits)\n+{\n+    return bswap_64(host_64bits);\n+}\n+#endif // HAVE_DECL_HTOBE64\n+\n+#if HAVE_DECL_HTOLE64 == 0\n+inline uint64_t htole64(uint64_t host_64bits)\n+{\n+    return host_64bits;\n+}\n+#endif // HAVE_DECL_HTOLE64\n+\n+#if HAVE_DECL_BE64TOH == 0\n+inline uint64_t be64toh(uint64_t big_endian_64bits)\n+{\n+    return bswap_64(big_endian_64bits);\n+}\n+#endif // HAVE_DECL_BE64TOH\n+\n+#if HAVE_DECL_LE64TOH == 0\n+inline uint64_t le64toh(uint64_t little_endian_64bits)\n+{\n+    return little_endian_64bits;\n+}\n+#endif // HAVE_DECL_LE64TOH\n+\n+#endif // WORDS_BIGENDIAN\n+\n+#endif // BITCOIN_COMPAT_ENDIAN_H"
      },
      {
        "sha": "580c72f5a6480f1e884120d78b51fb628fe515dc",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 11,
        "deletions": 65,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -11,110 +11,56 @@\n \n #include <stdint.h>\n \n-#if defined(HAVE_ENDIAN_H)\n-#include <endian.h>\n-#endif\n+#include \"compat/endian.h\"\n+\n+uint16_t static inline ReadLE16(const unsigned char* ptr)\n+{\n+    return le16toh(*((uint16_t*)ptr));\n+}\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n-#if HAVE_DECL_LE32TOH == 1\n     return le32toh(*((uint32_t*)ptr));\n-#elif !defined(WORDS_BIGENDIAN)\n-    return *((uint32_t*)ptr);\n-#else\n-    return ((uint32_t)ptr[3] << 24 | (uint32_t)ptr[2] << 16 | (uint32_t)ptr[1] << 8 | (uint32_t)ptr[0]);\n-#endif\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n-#if HAVE_DECL_LE64TOH == 1\n     return le64toh(*((uint64_t*)ptr));\n-#elif !defined(WORDS_BIGENDIAN)\n-    return *((uint64_t*)ptr);\n-#else\n-    return ((uint64_t)ptr[7] << 56 | (uint64_t)ptr[6] << 48 | (uint64_t)ptr[5] << 40 | (uint64_t)ptr[4] << 32 |\n-            (uint64_t)ptr[3] << 24 | (uint64_t)ptr[2] << 16 | (uint64_t)ptr[1] << 8 | (uint64_t)ptr[0]);\n-#endif\n+}\n+\n+void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n+{\n+    *((uint16_t*)ptr) = htole16(x);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-#if HAVE_DECL_HTOLE32 == 1\n     *((uint32_t*)ptr) = htole32(x);\n-#elif !defined(WORDS_BIGENDIAN)\n-    *((uint32_t*)ptr) = x;\n-#else\n-    ptr[3] = x >> 24;\n-    ptr[2] = x >> 16;\n-    ptr[1] = x >> 8;\n-    ptr[0] = x;\n-#endif\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-#if HAVE_DECL_HTOLE64 == 1\n     *((uint64_t*)ptr) = htole64(x);\n-#elif !defined(WORDS_BIGENDIAN)\n-    *((uint64_t*)ptr) = x;\n-#else\n-    ptr[7] = x >> 56;\n-    ptr[6] = x >> 48;\n-    ptr[5] = x >> 40;\n-    ptr[4] = x >> 32;\n-    ptr[3] = x >> 24;\n-    ptr[2] = x >> 16;\n-    ptr[1] = x >> 8;\n-    ptr[0] = x;\n-#endif\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n-#if HAVE_DECL_BE32TOH == 1\n     return be32toh(*((uint32_t*)ptr));\n-#else\n-    return ((uint32_t)ptr[0] << 24 | (uint32_t)ptr[1] << 16 | (uint32_t)ptr[2] << 8 | (uint32_t)ptr[3]);\n-#endif\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n-#if HAVE_DECL_BE64TOH == 1\n     return be64toh(*((uint64_t*)ptr));\n-#else\n-    return ((uint64_t)ptr[0] << 56 | (uint64_t)ptr[1] << 48 | (uint64_t)ptr[2] << 40 | (uint64_t)ptr[3] << 32 |\n-            (uint64_t)ptr[4] << 24 | (uint64_t)ptr[5] << 16 | (uint64_t)ptr[6] << 8 | (uint64_t)ptr[7]);\n-#endif\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-#if HAVE_DECL_HTOBE32 == 1\n     *((uint32_t*)ptr) = htobe32(x);\n-#else\n-    ptr[0] = x >> 24;\n-    ptr[1] = x >> 16;\n-    ptr[2] = x >> 8;\n-    ptr[3] = x;\n-#endif\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-#if HAVE_DECL_HTOBE64 == 1\n     *((uint64_t*)ptr) = htobe64(x);\n-#else\n-    ptr[0] = x >> 56;\n-    ptr[1] = x >> 48;\n-    ptr[2] = x >> 40;\n-    ptr[3] = x >> 32;\n-    ptr[4] = x >> 24;\n-    ptr[5] = x >> 16;\n-    ptr[6] = x >> 8;\n-    ptr[7] = x;\n-#endif\n }\n \n #endif // BITCOIN_CRYPTO_COMMON_H"
      }
    ]
  },
  {
    "sha": "3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2E1ODUyZGMyN2NlYzkyNmU0ZTdiMDllYzNjY2MzNjlhMmEwNzgx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:38:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T14:54:53Z"
      },
      "message": "src/hash.cpp: endian compatibility",
      "tree": {
        "sha": "dd6a31fac844b268137b7b0dcfbaa68756903156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd6a31fac844b268137b7b0dcfbaa68756903156"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4414f5ffe130f46becdc75c8e59ee74604e978aa"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "20d5d217778f2beb5f007d6e3e36a8175c69ea10",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
        "patch": "@@ -3,8 +3,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"hash.h\"\n+#include \"crypto/common.h\"\n #include \"crypto/hmac_sha512.h\"\n \n+\n inline uint32_t ROTL32(uint32_t x, int8_t r)\n {\n     return (x << r) | (x >> (32 - r));\n@@ -23,10 +25,10 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n         //----------\n         // body\n-        const uint32_t* blocks = (const uint32_t*)(&vDataToHash[0] + nblocks * 4);\n+        const uint8_t* blocks = &vDataToHash[0] + nblocks * 4;\n \n         for (int i = -nblocks; i; i++) {\n-            uint32_t k1 = blocks[i];\n+            uint32_t k1 = ReadLE32(blocks + i*4);\n \n             k1 *= c1;\n             k1 = ROTL32(k1, 15);"
      }
    ]
  },
  {
    "sha": "556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTY4MTRlYzRlYzdlMmM1YTFiNDQxZjhiOWE0OWRiZjcxNWZlYzZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:38:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:55Z"
      },
      "message": "src/main.cpp: endian compatibility in packet checksum check",
      "tree": {
        "sha": "d3d84ddb9d4025bd68d677d4acec639e01cb98f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3d84ddb9d4025bd68d677d4acec639e01cb98f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9927ac75987740f68d2a0ca29fd61cc0a5ae172f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
        "patch": "@@ -4318,8 +4318,7 @@ bool ProcessMessages(CNode* pfrom)\n         // Checksum\n         CDataStream& vRecv = msg.vRecv;\n         uint256 hash = Hash(vRecv.begin(), vRecv.begin() + nMessageSize);\n-        unsigned int nChecksum = 0;\n-        memcpy(&nChecksum, &hash, sizeof(nChecksum));\n+        unsigned int nChecksum = ReadLE32((unsigned char*)&hash);\n         if (nChecksum != hdr.nChecksum)\n         {\n             LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\","
      }
    ]
  },
  {
    "sha": "dec84cae2a7534af95873d5d96e38ad96b447d52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWM4NGNhZTJhNzUzNGFmOTU4NzNkNWQ5NmUzOGFkOTZiNDQ3ZDUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:38:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/net.cpp: endian compatibility in EndMessage",
      "tree": {
        "sha": "64c04330da17f4da94945aea84ef927402342d22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64c04330da17f4da94945aea84ef927402342d22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dec84cae2a7534af95873d5d96e38ad96b447d52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec84cae2a7534af95873d5d96e38ad96b447d52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dec84cae2a7534af95873d5d96e38ad96b447d52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec84cae2a7534af95873d5d96e38ad96b447d52/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "08d1d57408344b46630ad745a5a6348c609c3e6b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dec84cae2a7534af95873d5d96e38ad96b447d52/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dec84cae2a7534af95873d5d96e38ad96b447d52/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=dec84cae2a7534af95873d5d96e38ad96b447d52",
        "patch": "@@ -14,6 +14,7 @@\n #include \"clientversion.h\"\n #include \"primitives/transaction.h\"\n #include \"ui_interface.h\"\n+#include \"crypto/common.h\"\n \n #ifdef WIN32\n #include <string.h>\n@@ -2007,7 +2008,7 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     // Set the size\n     unsigned int nSize = ssSend.size() - CMessageHeader::HEADER_SIZE;\n-    memcpy((char*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], &nSize, sizeof(nSize));\n+    WriteLE32((uint8_t*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], nSize);\n \n     // Set the checksum\n     uint256 hash = Hash(ssSend.begin() + CMessageHeader::HEADER_SIZE, ssSend.end());"
      }
    ]
  },
  {
    "sha": "81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWFlYjI4NDM2ZDg0N2VkNGU2YmNkYThjNzQ2YTNlNTYzMWM3ZmVi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:39:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/primitives/block.cpp: endian compatibility in GetHash",
      "tree": {
        "sha": "c59787dbd7315c10eea11b7ae31573bda6e7c05d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c59787dbd7315c10eea11b7ae31573bda6e7c05d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81aeb28436d847ed4e6bcda8c746a3e5631c7feb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dec84cae2a7534af95873d5d96e38ad96b447d52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec84cae2a7534af95873d5d96e38ad96b447d52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dec84cae2a7534af95873d5d96e38ad96b447d52"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8338762a38a7083481a58562fb67d3d4d9077132",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81aeb28436d847ed4e6bcda8c746a3e5631c7feb/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81aeb28436d847ed4e6bcda8c746a3e5631c7feb/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
        "patch": "@@ -8,10 +8,22 @@\n #include \"hash.h\"\n #include \"tinyformat.h\"\n #include \"utilstrencodings.h\"\n+#include \"crypto/common.h\"\n \n uint256 CBlockHeader::GetHash() const\n {\n+#if defined(WORDS_BIGENDIAN)\n+    uint8_t data[80];\n+    WriteLE32(&data[0], nVersion);\n+    memcpy(&data[4], hashPrevBlock.begin(), hashPrevBlock.size());\n+    memcpy(&data[36], hashMerkleRoot.begin(), hashMerkleRoot.size());\n+    WriteLE32(&data[68], nTime);\n+    WriteLE32(&data[72], nBits);\n+    WriteLE32(&data[76], nNonce);\n+    return Hash(data, data + 80);\n+#else // Can take shortcut for little endian\n     return Hash(BEGIN(nVersion), END(nNonce));\n+#endif\n }\n \n uint256 CBlock::BuildMerkleTree(bool* fMutated) const"
      }
    ]
  },
  {
    "sha": "4f92773f9285760fe3e2eb14f5ca21de850d1955",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjkyNzczZjkyODU3NjBmZTNlMmViMTRmNWNhMjFkZTg1MGQxOTU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:40:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/primitives/transaction.h: endian compatibility in serialization",
      "tree": {
        "sha": "5270003fb01a7c84b60a688a1e510ddd9fb0fb05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5270003fb01a7c84b60a688a1e510ddd9fb0fb05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f92773f9285760fe3e2eb14f5ca21de850d1955",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f92773f9285760fe3e2eb14f5ca21de850d1955",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f92773f9285760fe3e2eb14f5ca21de850d1955",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f92773f9285760fe3e2eb14f5ca21de850d1955/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81aeb28436d847ed4e6bcda8c746a3e5631c7feb"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0ba9affeda5a63b9a0ab62945f045e691b685359",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f92773f9285760fe3e2eb14f5ca21de850d1955/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f92773f9285760fe3e2eb14f5ca21de850d1955/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=4f92773f9285760fe3e2eb14f5ca21de850d1955",
        "patch": "@@ -25,7 +25,8 @@ class COutPoint\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(FLATDATA(*this));\n+        READWRITE(hash);\n+        READWRITE(n);\n     }\n \n     void SetNull() { hash.SetNull(); n = (uint32_t) -1; }"
      }
    ]
  },
  {
    "sha": "4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTg1M2FhMTYzZGRiOTc4ZDI1YmQ4YjhlY2ZkNzMwYTFkMDllMDUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:41:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/script/script.h: endian compatibility for PUSHDATA sizes",
      "tree": {
        "sha": "f97f78650dfb96ffb43ff3fd26e4cdd1457a9952",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f97f78650dfb96ffb43ff3fd26e4cdd1457a9952"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e853aa163ddb978d25bd8b8ecfd730a1d09e051/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f92773f9285760fe3e2eb14f5ca21de850d1955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f92773f9285760fe3e2eb14f5ca21de850d1955",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f92773f9285760fe3e2eb14f5ca21de850d1955"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ed456f5c5ad53944895684ef196bfa4f55585bc6",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e853aa163ddb978d25bd8b8ecfd730a1d09e051/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e853aa163ddb978d25bd8b8ecfd730a1d09e051/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
        "patch": "@@ -14,6 +14,7 @@\n #include <string.h>\n #include <string>\n #include <vector>\n+#include \"crypto/common.h\"\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n \n@@ -416,14 +417,16 @@ class CScript : public std::vector<unsigned char>\n         else if (b.size() <= 0xffff)\n         {\n             insert(end(), OP_PUSHDATA2);\n-            unsigned short nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+            uint8_t data[2];\n+            WriteLE16(data, b.size());\n+            insert(end(), data, data + sizeof(data));\n         }\n         else\n         {\n             insert(end(), OP_PUSHDATA4);\n-            unsigned int nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+            uint8_t data[4];\n+            WriteLE32(data, b.size());\n+            insert(end(), data, data + sizeof(data));\n         }\n         insert(end(), b.begin(), b.end());\n         return *this;\n@@ -496,15 +499,14 @@ class CScript : public std::vector<unsigned char>\n             {\n                 if (end() - pc < 2)\n                     return false;\n-                nSize = 0;\n-                memcpy(&nSize, &pc[0], 2);\n+                nSize = ReadLE16(&pc[0]);\n                 pc += 2;\n             }\n             else if (opcode == OP_PUSHDATA4)\n             {\n                 if (end() - pc < 4)\n                     return false;\n-                memcpy(&nSize, &pc[0], 4);\n+                nSize = ReadLE32(&pc[0]);\n                 pc += 4;\n             }\n             if (end() - pc < 0 || (unsigned int)(end() - pc) < nSize)"
      }
    ]
  },
  {
    "sha": "01f9c3449a88748722dd51c7b54305fd1ba87359",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWY5YzM0NDlhODg3NDg3MjJkZDUxYzdiNTQzMDVmZDFiYTg3MzU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:41:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/serialize.h: base serialization level endianness neutrality\n\nSerialization type-safety and endianness compatibility.",
      "tree": {
        "sha": "e903a2035f511f55e3f9662c0fa0513a2522e19c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e903a2035f511f55e3f9662c0fa0513a2522e19c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01f9c3449a88748722dd51c7b54305fd1ba87359",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f9c3449a88748722dd51c7b54305fd1ba87359",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01f9c3449a88748722dd51c7b54305fd1ba87359",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f9c3449a88748722dd51c7b54305fd1ba87359/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e853aa163ddb978d25bd8b8ecfd730a1d09e051"
      }
    ],
    "stats": {
      "total": 225,
      "additions": 149,
      "deletions": 76
    },
    "files": [
      {
        "sha": "741f78f8b4fa86daa5827deb2935239ed7940cb2",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 125,
        "deletions": 76,
        "changes": 201,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01f9c3449a88748722dd51c7b54305fd1ba87359/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01f9c3449a88748722dd51c7b54305fd1ba87359/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=01f9c3449a88748722dd51c7b54305fd1ba87359",
        "patch": "@@ -18,6 +18,8 @@\n #include <utility>\n #include <vector>\n \n+#include \"compat/endian.h\"\n+\n class CScript;\n \n static const unsigned int MAX_SIZE = 0x02000000;\n@@ -71,6 +73,79 @@ inline const T* end_ptr(const std::vector<T,TAl>& v)\n     return v.empty() ? NULL : (&v[0] + v.size());\n }\n \n+/*\n+ * Lowest-level serialization and conversion.\n+ * @note Sizes of these types are verified in the tests\n+ */\n+template<typename Stream> inline void ser_writedata8(Stream &s, uint8_t obj)\n+{\n+    s.write((char*)&obj, 1);\n+}\n+template<typename Stream> inline void ser_writedata16(Stream &s, uint16_t obj)\n+{\n+    obj = htole16(obj);\n+    s.write((char*)&obj, 2);\n+}\n+template<typename Stream> inline void ser_writedata32(Stream &s, uint32_t obj)\n+{\n+    obj = htole32(obj);\n+    s.write((char*)&obj, 4);\n+}\n+template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)\n+{\n+    obj = htole64(obj);\n+    s.write((char*)&obj, 8);\n+}\n+template<typename Stream> inline uint8_t ser_readdata8(Stream &s)\n+{\n+    uint8_t obj;\n+    s.read((char*)&obj, 1);\n+    return obj;\n+}\n+template<typename Stream> inline uint16_t ser_readdata16(Stream &s)\n+{\n+    uint16_t obj;\n+    s.read((char*)&obj, 2);\n+    return le16toh(obj);\n+}\n+template<typename Stream> inline uint32_t ser_readdata32(Stream &s)\n+{\n+    uint32_t obj;\n+    s.read((char*)&obj, 4);\n+    return le32toh(obj);\n+}\n+template<typename Stream> inline uint64_t ser_readdata64(Stream &s)\n+{\n+    uint64_t obj;\n+    s.read((char*)&obj, 8);\n+    return le64toh(obj);\n+}\n+inline uint64_t ser_double_to_uint64(double x)\n+{\n+    union { double x; uint64_t y; } tmp;\n+    tmp.x = x;\n+    return tmp.y;\n+}\n+inline uint32_t ser_float_to_uint32(float x)\n+{\n+    union { float x; uint32_t y; } tmp;\n+    tmp.x = x;\n+    return tmp.y;\n+}\n+inline double ser_uint64_to_double(uint64_t y)\n+{\n+    union { double x; uint64_t y; } tmp;\n+    tmp.y = y;\n+    return tmp.x;\n+}\n+inline float ser_uint32_to_float(uint32_t y)\n+{\n+    union { float x; uint32_t y; } tmp;\n+    tmp.y = y;\n+    return tmp.x;\n+}\n+\n+\n /////////////////////////////////////////////////////////////////\n //\n // Templates for serializing to anything that looks like a stream,\n@@ -108,59 +183,48 @@ enum\n         SerializationOp(s, CSerActionUnserialize(), nType, nVersion);                \\\n     }\n \n-\n-\n /*\n  * Basic Types\n  */\n-#define WRITEDATA(s, obj)   s.write((char*)&(obj), sizeof(obj))\n-#define READDATA(s, obj)    s.read((char*)&(obj), sizeof(obj))\n-\n-inline unsigned int GetSerializeSize(char a,               int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed char a,        int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned char a,      int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed short a,       int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned short a,     int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed int a,         int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned int a,       int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed long a,        int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned long a,      int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed long long a,   int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned long long a, int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(float a,              int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(double a,             int, int=0) { return sizeof(a); }\n-\n-template<typename Stream> inline void Serialize(Stream& s, char a,               int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed char a,        int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned char a,      int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed short a,       int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned short a,     int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed int a,         int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned int a,       int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed long a,        int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned long a,      int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed long long a,   int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned long long a, int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, float a,              int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, double a,             int, int=0) { WRITEDATA(s, a); }\n-\n-template<typename Stream> inline void Unserialize(Stream& s, char& a,               int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed char& a,        int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned char& a,      int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed short& a,       int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned short& a,     int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed int& a,         int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned int& a,       int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed long& a,        int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned long& a,      int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed long long& a,   int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned long long& a, int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, float& a,              int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, double& a,             int, int=0) { READDATA(s, a); }\n+inline unsigned int GetSerializeSize(char a,      int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(int8_t a,    int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(uint8_t a,   int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(int16_t a,   int, int=0) { return 2; }\n+inline unsigned int GetSerializeSize(uint16_t a,  int, int=0) { return 2; }\n+inline unsigned int GetSerializeSize(int32_t a,   int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(uint32_t a,  int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(int64_t a,   int, int=0) { return 8; }\n+inline unsigned int GetSerializeSize(uint64_t a,  int, int=0) { return 8; }\n+inline unsigned int GetSerializeSize(float a,     int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(double a,    int, int=0) { return 8; }\n+\n+template<typename Stream> inline void Serialize(Stream& s, char a,         int, int=0) { ser_writedata8(s, a); } // TODO Get rid of bare char\n+template<typename Stream> inline void Serialize(Stream& s, int8_t a,       int, int=0) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint8_t a,      int, int=0) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int16_t a,      int, int=0) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint16_t a,     int, int=0) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int32_t a,      int, int=0) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint32_t a,     int, int=0) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int64_t a,      int, int=0) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint64_t a,     int, int=0) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, float a,        int, int=0) { ser_writedata32(s, ser_float_to_uint32(a)); }\n+template<typename Stream> inline void Serialize(Stream& s, double a,       int, int=0) { ser_writedata64(s, ser_double_to_uint64(a)); }\n+\n+template<typename Stream> inline void Unserialize(Stream& s, char& a,      int, int=0) { a = ser_readdata8(s); } // TODO Get rid of bare char\n+template<typename Stream> inline void Unserialize(Stream& s, int8_t& a,    int, int=0) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a,   int, int=0) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int16_t& a,   int, int=0) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a,  int, int=0) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int32_t& a,   int, int=0) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a,  int, int=0) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int64_t& a,   int, int=0) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a,  int, int=0) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, float& a,     int, int=0) { a = ser_uint32_to_float(ser_readdata32(s)); }\n+template<typename Stream> inline void Unserialize(Stream& s, double& a,    int, int=0) { a = ser_uint64_to_double(ser_readdata64(s)); }\n \n inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }\n-template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; WRITEDATA(s, f); }\n-template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f; READDATA(s, f); a=f; }\n+template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; ser_writedata8(s, f); }\n+template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f=ser_readdata8(s); a=f; }\n \n \n \n@@ -187,64 +251,50 @@ void WriteCompactSize(Stream& os, uint64_t nSize)\n {\n     if (nSize < 253)\n     {\n-        unsigned char chSize = nSize;\n-        WRITEDATA(os, chSize);\n+        ser_writedata8(os, nSize);\n     }\n     else if (nSize <= std::numeric_limits<unsigned short>::max())\n     {\n-        unsigned char chSize = 253;\n-        unsigned short xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 253);\n+        ser_writedata16(os, nSize);\n     }\n     else if (nSize <= std::numeric_limits<unsigned int>::max())\n     {\n-        unsigned char chSize = 254;\n-        unsigned int xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 254);\n+        ser_writedata32(os, nSize);\n     }\n     else\n     {\n-        unsigned char chSize = 255;\n-        uint64_t xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 255);\n+        ser_writedata64(os, nSize);\n     }\n     return;\n }\n \n template<typename Stream>\n uint64_t ReadCompactSize(Stream& is)\n {\n-    unsigned char chSize;\n-    READDATA(is, chSize);\n+    uint8_t chSize = ser_readdata8(is);\n     uint64_t nSizeRet = 0;\n     if (chSize < 253)\n     {\n         nSizeRet = chSize;\n     }\n     else if (chSize == 253)\n     {\n-        unsigned short xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata16(is);\n         if (nSizeRet < 253)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     else if (chSize == 254)\n     {\n-        unsigned int xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata32(is);\n         if (nSizeRet < 0x10000u)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     else\n     {\n-        uint64_t xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata64(is);\n         if (nSizeRet < 0x100000000ULL)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n@@ -303,7 +353,7 @@ void WriteVarInt(Stream& os, I n)\n         len++;\n     }\n     do {\n-        WRITEDATA(os, tmp[len]);\n+        ser_writedata8(os, tmp[len]);\n     } while(len--);\n }\n \n@@ -312,8 +362,7 @@ I ReadVarInt(Stream& is)\n {\n     I n = 0;\n     while(true) {\n-        unsigned char chData;\n-        READDATA(is, chData);\n+        unsigned char chData = ser_readdata8(is);\n         n = (n << 7) | (chData & 0x7F);\n         if (chData & 0x80)\n             n++;"
      },
      {
        "sha": "e2d19ce5ccbfb8b2468625eef85ed35916994893",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01f9c3449a88748722dd51c7b54305fd1ba87359/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01f9c3449a88748722dd51c7b54305fd1ba87359/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=01f9c3449a88748722dd51c7b54305fd1ba87359",
        "patch": "@@ -13,6 +13,30 @@ using namespace std;\n \n BOOST_AUTO_TEST_SUITE(serialize_tests)\n \n+BOOST_AUTO_TEST_CASE(sizes)\n+{\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(char(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int8_t), GetSerializeSize(int8_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint8_t), GetSerializeSize(uint8_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int16_t), GetSerializeSize(int16_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint16_t), GetSerializeSize(uint16_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int32_t), GetSerializeSize(int32_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint32_t), GetSerializeSize(uint32_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int64_t), GetSerializeSize(int64_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize(float(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), 0));\n+\n+    // Bool is serialized as char\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n+}\n+\n+BOOST_AUTO_TEST_CASE(floats)\n+{\n+    // TODO ser_uint32_to_float, ser_uint64_to_double\n+    // TODO ser_float_to_uint32, ser_double_to_uint64\n+}\n+\n BOOST_AUTO_TEST_CASE(varints)\n {\n     // encode"
      }
    ]
  },
  {
    "sha": "aac320537523f1df1523adeba22a8498884715c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWMzMjA1Mzc1MjNmMWRmMTUyM2FkZWJhMjJhODQ5ODg4NDcxNWM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-18T21:07:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/netbase.h: Fix endian in CNetAddr serialization\n\nWe've chosen to htons/ntohs explicitly on reading and writing\n(I do not know why). But as READWRITE already does an endian swap\non big endian, this means the port number gets switched around,\nwhich was what we were trying to avoid in the first place. So\nto make this compatible, serialize it as FLATDATA.",
      "tree": {
        "sha": "8fff77336fa1a0b79090de8d9da288e7743303d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fff77336fa1a0b79090de8d9da288e7743303d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aac320537523f1df1523adeba22a8498884715c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aac320537523f1df1523adeba22a8498884715c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aac320537523f1df1523adeba22a8498884715c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aac320537523f1df1523adeba22a8498884715c9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01f9c3449a88748722dd51c7b54305fd1ba87359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f9c3449a88748722dd51c7b54305fd1ba87359",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01f9c3449a88748722dd51c7b54305fd1ba87359"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b42c2dffa4d69da971cc2d4c6c75593ceadf6fb7",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aac320537523f1df1523adeba22a8498884715c9/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aac320537523f1df1523adeba22a8498884715c9/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=aac320537523f1df1523adeba22a8498884715c9",
        "patch": "@@ -162,7 +162,7 @@ class CService : public CNetAddr\n         inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             READWRITE(FLATDATA(ip));\n             unsigned short portN = htons(port);\n-            READWRITE(portN);\n+            READWRITE(FLATDATA(portN));\n             if (ser_action.ForRead())\n                  port = ntohs(portN);\n         }"
      }
    ]
  },
  {
    "sha": "f4e6487219d4b861df71e80d89d864ff6f312d17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGU2NDg3MjE5ZDRiODYxZGY3MWU4MGQ4OWQ4NjRmZjZmMzEyZDE3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T12:08:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:59Z"
      },
      "message": "src/arith_256.cpp: bigendian compatibility",
      "tree": {
        "sha": "c8b9005d0d53616c66e6ef12cbc5b6091295a793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8b9005d0d53616c66e6ef12cbc5b6091295a793"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4e6487219d4b861df71e80d89d864ff6f312d17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4e6487219d4b861df71e80d89d864ff6f312d17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4e6487219d4b861df71e80d89d864ff6f312d17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4e6487219d4b861df71e80d89d864ff6f312d17/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aac320537523f1df1523adeba22a8498884715c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aac320537523f1df1523adeba22a8498884715c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aac320537523f1df1523adeba22a8498884715c9"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2e613635761d8622032ff85c51f506548700f70d",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4e6487219d4b861df71e80d89d864ff6f312d17/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4e6487219d4b861df71e80d89d864ff6f312d17/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=f4e6487219d4b861df71e80d89d864ff6f312d17",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"uint256.h\"\n #include \"utilstrencodings.h\"\n+#include \"crypto/common.h\"\n \n #include <stdio.h>\n #include <string.h>\n@@ -246,14 +247,14 @@ uint32_t arith_uint256::GetCompact(bool fNegative) const\n uint256 ArithToUint256(const arith_uint256 &a)\n {\n     uint256 b;\n-    // TODO: needs bswap32 on big-endian\n-    memcpy(b.begin(), a.pn, a.size());\n+    for(int x=0; x<a.WIDTH; ++x)\n+        WriteLE32(b.begin() + x*4, a.pn[x]);\n     return b;\n }\n arith_uint256 UintToArith256(const uint256 &a)\n {\n     arith_uint256 b;\n-    // TODO: needs bswap32 on big-endian\n-    memcpy(b.pn, a.begin(), a.size());\n+    for(int x=0; x<b.WIDTH; ++x)\n+        b.pn[x] = ReadLE32(a.begin() + x*4);\n     return b;\n }"
      }
    ]
  },
  {
    "sha": "9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjRmYWM5OGM0MjlkOWVlMjEzNWZhYjMyZGZhZTJkMWZlMTcxYTQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T14:21:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:59Z"
      },
      "message": "src/txmempool.cpp: make numEntries a uint32_t\n\nDon't ever serialize a size_t or long, their sizes are platform\ndependent.",
      "tree": {
        "sha": "33bdfe1a0fcd2a0c136464c8f2ba6849f8743231",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33bdfe1a0fcd2a0c136464c8f2ba6849f8743231"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f4fac98c429d9ee2135fab32dfae2d1fe171a45/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4e6487219d4b861df71e80d89d864ff6f312d17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4e6487219d4b861df71e80d89d864ff6f312d17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4e6487219d4b861df71e80d89d864ff6f312d17"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0d506603276f3a95b4676d2bbac0ce563e0d4eea",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f4fac98c429d9ee2135fab32dfae2d1fe171a45/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f4fac98c429d9ee2135fab32dfae2d1fe171a45/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
        "patch": "@@ -337,7 +337,7 @@ class CMinerPolicyEstimator\n     void Write(CAutoFile& fileout) const\n     {\n         fileout << nBestSeenHeight;\n-        fileout << history.size();\n+        fileout << (uint32_t)history.size();\n         BOOST_FOREACH(const CBlockAverage& entry, history)\n         {\n             entry.Write(fileout);\n@@ -348,7 +348,7 @@ class CMinerPolicyEstimator\n     {\n         int nFileBestSeenHeight;\n         filein >> nFileBestSeenHeight;\n-        size_t numEntries;\n+        uint32_t numEntries;\n         filein >> numEntries;\n         if (numEntries <= 0 || numEntries > 10000)\n             throw runtime_error(\"Corrupt estimates file. Must have between 1 and 10k entries.\");"
      }
    ]
  },
  {
    "sha": "62b30f09acae20f83dfb7995fa8b221c35e2fbff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmIzMGYwOWFjYWUyMGY4M2RmYjc5OTVmYThiMjIxYzM1ZTJmYmZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T10:07:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:59Z"
      },
      "message": "Add serialize float/double tests",
      "tree": {
        "sha": "1d89b17b869ace8756b6fc5f8260be01680952b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d89b17b869ace8756b6fc5f8260be01680952b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62b30f09acae20f83dfb7995fa8b221c35e2fbff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62b30f09acae20f83dfb7995fa8b221c35e2fbff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62b30f09acae20f83dfb7995fa8b221c35e2fbff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62b30f09acae20f83dfb7995fa8b221c35e2fbff/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f4fac98c429d9ee2135fab32dfae2d1fe171a45"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 93,
      "deletions": 3
    },
    "files": [
      {
        "sha": "de9510d54a451f81a1f9d347d96ffe5264b0ec33",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 3,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62b30f09acae20f83dfb7995fa8b221c35e2fbff/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62b30f09acae20f83dfb7995fa8b221c35e2fbff/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=62b30f09acae20f83dfb7995fa8b221c35e2fbff",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"serialize.h\"\n #include \"streams.h\"\n+#include \"hash.h\"\n \n #include <stdint.h>\n \n@@ -26,15 +27,104 @@ BOOST_AUTO_TEST_CASE(sizes)\n     BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize(float(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), 0));\n-\n     // Bool is serialized as char\n     BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n+\n+    // Sanity-check GetSerializeSize and c++ type matching\n+    BOOST_CHECK_EQUAL(GetSerializeSize(char(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int8_t(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint8_t(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int16_t(0), 0), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint16_t(0), 0), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int32_t(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint32_t(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int64_t(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint64_t(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(float(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(double(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), 0), 1);\n }\n \n+BOOST_AUTO_TEST_CASE(floats_conversion)\n+{\n+    // Choose values that map unambigiously to binary floating point to avoid\n+    // rounding issues at the compiler side.\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x00000000), 0.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f000000), 0.5F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f800000), 1.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40000000), 2.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40800000), 4.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x44444444), 785.066650390625F);\n+\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.0F), 0x00000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.5F), 0x3f000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(1.0F), 0x3f800000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(2.0F), 0x40000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(4.0F), 0x40800000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(785.066650390625F), 0x44444444);\n+}\n+\n+BOOST_AUTO_TEST_CASE(doubles_conversion)\n+{\n+    // Choose values that map unambigiously to binary floating point to avoid\n+    // rounding issues at the compiler side.\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x0000000000000000ULL), 0.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3fe0000000000000ULL), 0.5);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3ff0000000000000ULL), 1.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4000000000000000ULL), 2.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4010000000000000ULL), 4.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4088888880000000ULL), 785.066650390625);\n+\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(0.0), 0x0000000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(0.5), 0x3fe0000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(1.0), 0x3ff0000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(2.0), 0x4000000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(4.0), 0x4010000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(785.066650390625), 0x4088888880000000ULL);\n+}\n+/*\n+Python code to generate the below hashes:\n+\n+    def reversed_hex(x):\n+        return binascii.hexlify(''.join(reversed(x)))\n+    def dsha256(x):\n+        return hashlib.sha256(hashlib.sha256(x).digest()).digest()\n+\n+    reversed_hex(dsha256(''.join(struct.pack('<f', x) for x in range(0,1000)))) == '8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c'\n+    reversed_hex(dsha256(''.join(struct.pack('<d', x) for x in range(0,1000)))) == '43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96'\n+*/\n BOOST_AUTO_TEST_CASE(floats)\n {\n-    // TODO ser_uint32_to_float, ser_uint64_to_double\n-    // TODO ser_float_to_uint32, ser_double_to_uint64\n+    CDataStream ss(SER_DISK, 0);\n+    // encode\n+    for (int i = 0; i < 1000; i++) {\n+        ss << float(i);\n+    }\n+    BOOST_CHECK(Hash(ss.begin(), ss.end()) == uint256S(\"8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c\"));\n+\n+    // decode\n+    for (int i = 0; i < 1000; i++) {\n+        float j;\n+        ss >> j;\n+        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(doubles)\n+{\n+    CDataStream ss(SER_DISK, 0);\n+    // encode\n+    for (int i = 0; i < 1000; i++) {\n+        ss << double(i);\n+    }\n+    BOOST_CHECK(Hash(ss.begin(), ss.end()) == uint256S(\"43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96\"));\n+\n+    // decode\n+    for (int i = 0; i < 1000; i++) {\n+        double j;\n+        ss >> j;\n+        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n+    }\n }\n \n BOOST_AUTO_TEST_CASE(varints)"
      }
    ]
  },
  {
    "sha": "a0ae79d77552d9ee67469c934458a3f3bd170858",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGFlNzlkNzc1NTJkOWVlNjc0NjljOTM0NDU4YTNmM2JkMTcwODU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-18T18:23:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:59Z"
      },
      "message": "Replace CBlockHeader::GetHash with call to SerializeHash\n\nRemoves variability between LE and BE.\nAs suggested by @sipa.",
      "tree": {
        "sha": "e52428f7cb819fddbdc8b801ea3894306e266d85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e52428f7cb819fddbdc8b801ea3894306e266d85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0ae79d77552d9ee67469c934458a3f3bd170858",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0ae79d77552d9ee67469c934458a3f3bd170858",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0ae79d77552d9ee67469c934458a3f3bd170858",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0ae79d77552d9ee67469c934458a3f3bd170858/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62b30f09acae20f83dfb7995fa8b221c35e2fbff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62b30f09acae20f83dfb7995fa8b221c35e2fbff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62b30f09acae20f83dfb7995fa8b221c35e2fbff"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 1,
      "deletions": 12
    },
    "files": [
      {
        "sha": "5b9c13d87011bf192b70bb7fc2902801e1e16e2e",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0ae79d77552d9ee67469c934458a3f3bd170858/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0ae79d77552d9ee67469c934458a3f3bd170858/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=a0ae79d77552d9ee67469c934458a3f3bd170858",
        "patch": "@@ -12,18 +12,7 @@\n \n uint256 CBlockHeader::GetHash() const\n {\n-#if defined(WORDS_BIGENDIAN)\n-    uint8_t data[80];\n-    WriteLE32(&data[0], nVersion);\n-    memcpy(&data[4], hashPrevBlock.begin(), hashPrevBlock.size());\n-    memcpy(&data[36], hashMerkleRoot.begin(), hashMerkleRoot.size());\n-    WriteLE32(&data[68], nTime);\n-    WriteLE32(&data[72], nBits);\n-    WriteLE32(&data[76], nNonce);\n-    return Hash(data, data + 80);\n-#else // Can take shortcut for little endian\n-    return Hash(BEGIN(nVersion), END(nNonce));\n-#endif\n+    return SerializeHash(*this);\n }\n \n uint256 CBlock::BuildMerkleTree(bool* fMutated) const"
      }
    ]
  },
  {
    "sha": "7c3fbc34aed578398b3f180a621c671ff3837cec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzNmYmMzNGFlZDU3ODM5OGIzZjE4MGE2MjFjNjcxZmYzODM3Y2Vj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T17:23:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T17:35:25Z"
      },
      "message": "Merge pull request #5510\n\na0ae79d Replace CBlockHeader::GetHash with call to SerializeHash (Wladimir J. van der Laan)\n62b30f0 Add serialize float/double tests (Wladimir J. van der Laan)\n9f4fac9 src/txmempool.cpp: make numEntries a uint32_t (Wladimir J. van der Laan)\nf4e6487 src/arith_256.cpp: bigendian compatibility (Wladimir J. van der Laan)\naac3205 src/netbase.h: Fix endian in CNetAddr serialization (Wladimir J. van der Laan)\n01f9c34 src/serialize.h: base serialization level endianness neutrality (Wladimir J. van der Laan)\n4e853aa src/script/script.h: endian compatibility for PUSHDATA sizes (Wladimir J. van der Laan)\n4f92773 src/primitives/transaction.h: endian compatibility in serialization (Wladimir J. van der Laan)\n81aeb28 src/primitives/block.cpp: endian compatibility in GetHash (Wladimir J. van der Laan)\ndec84ca src/net.cpp: endian compatibility in EndMessage (Wladimir J. van der Laan)\n556814e src/main.cpp: endian compatibility in packet checksum check (Wladimir J. van der Laan)\n3ca5852 src/hash.cpp: endian compatibility (Wladimir J. van der Laan)\n4414f5f build: Endian compatibility (Wladimir J. van der Laan)",
      "tree": {
        "sha": "e52428f7cb819fddbdc8b801ea3894306e266d85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e52428f7cb819fddbdc8b801ea3894306e266d85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c3fbc34aed578398b3f180a621c671ff3837cec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJU+eVdAAoJEHSBCwEjRsmmJ7wH/iga+a5M651lsQl+KBI61Z9T\nXnyPjLYXv5EPT2cltBiSumP9ahxMml29EyWtloYF9nTjSQgOilgIHDonFaAyPYqn\nP0//HRNTyyjvt0jv5q2ic/I1fYChps9yv3Ciwc0y6INT2EtGM4iCwnQmwWVEHaOS\nPY5pIepXpqoQhh37tOQxETtaS1vkAJDnvdY/i3kHMltOKexlpfklfn3WHZTuCV6S\n1/AppfTJnBYmljnpAwyTjB9fC4W5jGgXDQcmnGF3JposdbDFFUoAZPZMcU8PrYPI\nYqiDIK3iDyxJNBPGaKhqoG7ESWOUXqrG+QUyrdU8nVsL2ikLkk+X2I3LDJRzZw0=\n=X2/B\n-----END PGP SIGNATURE-----",
        "payload": "tree e52428f7cb819fddbdc8b801ea3894306e266d85\nparent 51377c2dbe0d71dad953a43187749a38010d1f1f\nparent a0ae79d77552d9ee67469c934458a3f3bd170858\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1425662625 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1425663325 +0100\n\nMerge pull request #5510\n\na0ae79d Replace CBlockHeader::GetHash with call to SerializeHash (Wladimir J. van der Laan)\n62b30f0 Add serialize float/double tests (Wladimir J. van der Laan)\n9f4fac9 src/txmempool.cpp: make numEntries a uint32_t (Wladimir J. van der Laan)\nf4e6487 src/arith_256.cpp: bigendian compatibility (Wladimir J. van der Laan)\naac3205 src/netbase.h: Fix endian in CNetAddr serialization (Wladimir J. van der Laan)\n01f9c34 src/serialize.h: base serialization level endianness neutrality (Wladimir J. van der Laan)\n4e853aa src/script/script.h: endian compatibility for PUSHDATA sizes (Wladimir J. van der Laan)\n4f92773 src/primitives/transaction.h: endian compatibility in serialization (Wladimir J. van der Laan)\n81aeb28 src/primitives/block.cpp: endian compatibility in GetHash (Wladimir J. van der Laan)\ndec84ca src/net.cpp: endian compatibility in EndMessage (Wladimir J. van der Laan)\n556814e src/main.cpp: endian compatibility in packet checksum check (Wladimir J. van der Laan)\n3ca5852 src/hash.cpp: endian compatibility (Wladimir J. van der Laan)\n4414f5f build: Endian compatibility (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c3fbc34aed578398b3f180a621c671ff3837cec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c3fbc34aed578398b3f180a621c671ff3837cec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c3fbc34aed578398b3f180a621c671ff3837cec/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51377c2dbe0d71dad953a43187749a38010d1f1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51377c2dbe0d71dad953a43187749a38010d1f1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51377c2dbe0d71dad953a43187749a38010d1f1f"
      },
      {
        "sha": "a0ae79d77552d9ee67469c934458a3f3bd170858",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0ae79d77552d9ee67469c934458a3f3bd170858",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0ae79d77552d9ee67469c934458a3f3bd170858"
      }
    ],
    "stats": {
      "total": 696,
      "additions": 530,
      "deletions": 166
    },
    "files": [
      {
        "sha": "2c918218bb836e19cf078b55526e34f72a456eee",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -350,8 +350,8 @@ if test x$use_lcov = xyes; then\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\n fi\n \n-dnl Require little endian\n-AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+dnl Check for endianness\n+AC_C_BIGENDIAN\n \n dnl Check for pthread compile/link requirements\n AX_PTHREAD\n@@ -438,17 +438,22 @@ if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n fi\n \n-AC_CHECK_HEADERS([endian.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n+AC_CHECK_HEADERS([endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n AC_SEARCH_LIBS([getaddrinfo_a], [anl], [AC_DEFINE(HAVE_GETADDRINFO_A, 1, [Define this symbol if you have getaddrinfo_a])])\n AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE(HAVE_INET_PTON, 1, [Define this symbol if you have inet_pton])])\n \n AC_CHECK_DECLS([strnlen])\n \n-AC_CHECK_DECLS([le32toh, le64toh, htole32, htole64, be32toh, be64toh, htobe32, htobe64],,,\n+AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n \t\t[#if HAVE_ENDIAN_H\n                  #include <endian.h>\n                  #endif])\n \n+AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n+\t\t[#if HAVE_BYTESWAP_H\n+                 #include <byteswap.h>\n+                 #endif])\n+\n dnl Check for MSG_NOSIGNAL\n AC_MSG_CHECKING(for MSG_NOSIGNAL)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],"
      },
      {
        "sha": "da65efa713279c2b23df5b791bbd3b72a2bbb06b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -141,6 +141,8 @@ BITCOIN_CORE_H = \\\n   walletdb.h \\\n   wallet.h \\\n   wallet_ismine.h \\\n+  compat/byteswap.h \\\n+  compat/endian.h \\\n   compat/sanity.h\n \n JSON_H = \\"
      },
      {
        "sha": "2e613635761d8622032ff85c51f506548700f70d",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"uint256.h\"\n #include \"utilstrencodings.h\"\n+#include \"crypto/common.h\"\n \n #include <stdio.h>\n #include <string.h>\n@@ -246,14 +247,14 @@ uint32_t arith_uint256::GetCompact(bool fNegative) const\n uint256 ArithToUint256(const arith_uint256 &a)\n {\n     uint256 b;\n-    // TODO: needs bswap32 on big-endian\n-    memcpy(b.begin(), a.pn, a.size());\n+    for(int x=0; x<a.WIDTH; ++x)\n+        WriteLE32(b.begin() + x*4, a.pn[x]);\n     return b;\n }\n arith_uint256 UintToArith256(const uint256 &a)\n {\n     arith_uint256 b;\n-    // TODO: needs bswap32 on big-endian\n-    memcpy(b.pn, a.begin(), a.size());\n+    for(int x=0; x<b.WIDTH; ++x)\n+        b.pn[x] = ReadLE32(a.begin() + x*4);\n     return b;\n }"
      },
      {
        "sha": "899220bdc549053927edf86a29bc415310fb5eba",
        "filename": "src/compat/byteswap.h",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/compat/byteswap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/compat/byteswap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/byteswap.h?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMPAT_BYTESWAP_H\n+#define BITCOIN_COMPAT_BYTESWAP_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include <stdint.h>\n+\n+#if defined(HAVE_BYTESWAP_H)\n+#include <byteswap.h>\n+#endif\n+\n+#if HAVE_DECL_BSWAP_16 == 0\n+inline uint16_t bswap_16(uint16_t x)\n+{\n+    return (x >> 8) | ((x & 0x00ff) << 8);\n+}\n+#endif // HAVE_DECL_BSWAP16\n+\n+#if HAVE_DECL_BSWAP_32 == 0\n+inline uint32_t bswap_32(uint32_t x)\n+{\n+    return (((x & 0xff000000U) >> 24) | ((x & 0x00ff0000U) >>  8) |\n+            ((x & 0x0000ff00U) <<  8) | ((x & 0x000000ffU) << 24));\n+}\n+#endif // HAVE_DECL_BSWAP32\n+\n+#if HAVE_DECL_BSWAP_64 == 0\n+inline uint64_t bswap_64(uint64_t x)\n+{\n+     return (((x & 0xff00000000000000ull) >> 56)\n+          | ((x & 0x00ff000000000000ull) >> 40)\n+          | ((x & 0x0000ff0000000000ull) >> 24)\n+          | ((x & 0x000000ff00000000ull) >> 8)\n+          | ((x & 0x00000000ff000000ull) << 8)\n+          | ((x & 0x0000000000ff0000ull) << 24)\n+          | ((x & 0x000000000000ff00ull) << 40)\n+          | ((x & 0x00000000000000ffull) << 56));\n+}\n+#endif // HAVE_DECL_BSWAP64\n+\n+#endif // BITCOIN_COMPAT_BYTESWAP_H"
      },
      {
        "sha": "4d041d655411738476ecbc1e5c96e845452d8b8f",
        "filename": "src/compat/endian.h",
        "status": "added",
        "additions": 194,
        "deletions": 0,
        "changes": 194,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/compat/endian.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/compat/endian.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/endian.h?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -0,0 +1,194 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMPAT_ENDIAN_H\n+#define BITCOIN_COMPAT_ENDIAN_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include <stdint.h>\n+\n+#include \"compat/byteswap.h\"\n+\n+#if defined(HAVE_ENDIAN_H)\n+#include <endian.h>\n+#endif\n+\n+#if defined(WORDS_BIGENDIAN)\n+\n+#if HAVE_DECL_HTOBE16 == 0\n+inline uint16_t htobe16(uint16_t host_16bits)\n+{\n+    return host_16bits;\n+}\n+#endif // HAVE_DECL_HTOBE16\n+\n+#if HAVE_DECL_HTOLE16 == 0\n+inline uint16_t htole16(uint16_t host_16bits)\n+{\n+    return bswap_16(host_16bits);\n+}\n+#endif // HAVE_DECL_HTOLE16\n+\n+#if HAVE_DECL_BE16TOH == 0\n+inline uint16_t be16toh(uint16_t big_endian_16bits)\n+{\n+    return big_endian_16bits;\n+}\n+#endif // HAVE_DECL_BE16TOH\n+\n+#if HAVE_DECL_LE16TOH == 0\n+inline uint16_t le16toh(uint16_t little_endian_16bits)\n+{\n+    return bswap_16(little_endian_16bits);\n+}\n+#endif // HAVE_DECL_LE16TOH\n+\n+#if HAVE_DECL_HTOBE32 == 0\n+inline uint32_t htobe32(uint32_t host_32bits)\n+{\n+    return host_32bits;\n+}\n+#endif // HAVE_DECL_HTOBE32\n+\n+#if HAVE_DECL_HTOLE32 == 0\n+inline uint32_t htole32(uint32_t host_32bits)\n+{\n+    return bswap_32(host_32bits);\n+}\n+#endif // HAVE_DECL_HTOLE32\n+\n+#if HAVE_DECL_BE32TOH == 0\n+inline uint32_t be32toh(uint32_t big_endian_32bits)\n+{\n+    return big_endian_32bits;\n+}\n+#endif // HAVE_DECL_BE32TOH\n+\n+#if HAVE_DECL_LE32TOH == 0\n+inline uint32_t le32toh(uint32_t little_endian_32bits)\n+{\n+    return bswap_32(little_endian_32bits);\n+}\n+#endif // HAVE_DECL_LE32TOH\n+\n+#if HAVE_DECL_HTOBE64 == 0\n+inline uint64_t htobe64(uint64_t host_64bits)\n+{\n+    return host_64bits;\n+}\n+#endif // HAVE_DECL_HTOBE64\n+\n+#if HAVE_DECL_HTOLE64 == 0\n+inline uint64_t htole64(uint64_t host_64bits)\n+{\n+    return bswap_64(host_64bits);\n+}\n+#endif // HAVE_DECL_HTOLE64\n+\n+#if HAVE_DECL_BE64TOH == 0\n+inline uint64_t be64toh(uint64_t big_endian_64bits)\n+{\n+    return big_endian_64bits;\n+}\n+#endif // HAVE_DECL_BE64TOH\n+\n+#if HAVE_DECL_LE64TOH == 0\n+inline uint64_t le64toh(uint64_t little_endian_64bits)\n+{\n+    return bswap_64(little_endian_64bits);\n+}\n+#endif // HAVE_DECL_LE64TOH\n+\n+#else // WORDS_BIGENDIAN\n+\n+#if HAVE_DECL_HTOBE16 == 0\n+inline uint16_t htobe16(uint16_t host_16bits)\n+{\n+    return bswap_16(host_16bits);\n+}\n+#endif // HAVE_DECL_HTOBE16\n+\n+#if HAVE_DECL_HTOLE16 == 0\n+inline uint16_t htole16(uint16_t host_16bits)\n+{\n+    return host_16bits;\n+}\n+#endif // HAVE_DECL_HTOLE16\n+\n+#if HAVE_DECL_BE16TOH == 0\n+inline uint16_t be16toh(uint16_t big_endian_16bits)\n+{\n+    return bswap_16(big_endian_16bits);\n+}\n+#endif // HAVE_DECL_BE16TOH\n+\n+#if HAVE_DECL_LE16TOH == 0\n+inline uint16_t le16toh(uint16_t little_endian_16bits)\n+{\n+    return little_endian_16bits;\n+}\n+#endif // HAVE_DECL_LE16TOH\n+\n+#if HAVE_DECL_HTOBE32 == 0\n+inline uint32_t htobe32(uint32_t host_32bits)\n+{\n+    return bswap_32(host_32bits);\n+}\n+#endif // HAVE_DECL_HTOBE32\n+\n+#if HAVE_DECL_HTOLE32 == 0\n+inline uint32_t htole32(uint32_t host_32bits)\n+{\n+    return host_32bits;\n+}\n+#endif // HAVE_DECL_HTOLE32\n+\n+#if HAVE_DECL_BE32TOH == 0\n+inline uint32_t be32toh(uint32_t big_endian_32bits)\n+{\n+    return bswap_32(big_endian_32bits);\n+}\n+#endif // HAVE_DECL_BE32TOH\n+\n+#if HAVE_DECL_LE32TOH == 0\n+inline uint32_t le32toh(uint32_t little_endian_32bits)\n+{\n+    return little_endian_32bits;\n+}\n+#endif // HAVE_DECL_LE32TOH\n+\n+#if HAVE_DECL_HTOBE64 == 0\n+inline uint64_t htobe64(uint64_t host_64bits)\n+{\n+    return bswap_64(host_64bits);\n+}\n+#endif // HAVE_DECL_HTOBE64\n+\n+#if HAVE_DECL_HTOLE64 == 0\n+inline uint64_t htole64(uint64_t host_64bits)\n+{\n+    return host_64bits;\n+}\n+#endif // HAVE_DECL_HTOLE64\n+\n+#if HAVE_DECL_BE64TOH == 0\n+inline uint64_t be64toh(uint64_t big_endian_64bits)\n+{\n+    return bswap_64(big_endian_64bits);\n+}\n+#endif // HAVE_DECL_BE64TOH\n+\n+#if HAVE_DECL_LE64TOH == 0\n+inline uint64_t le64toh(uint64_t little_endian_64bits)\n+{\n+    return little_endian_64bits;\n+}\n+#endif // HAVE_DECL_LE64TOH\n+\n+#endif // WORDS_BIGENDIAN\n+\n+#endif // BITCOIN_COMPAT_ENDIAN_H"
      },
      {
        "sha": "580c72f5a6480f1e884120d78b51fb628fe515dc",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 11,
        "deletions": 65,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -11,110 +11,56 @@\n \n #include <stdint.h>\n \n-#if defined(HAVE_ENDIAN_H)\n-#include <endian.h>\n-#endif\n+#include \"compat/endian.h\"\n+\n+uint16_t static inline ReadLE16(const unsigned char* ptr)\n+{\n+    return le16toh(*((uint16_t*)ptr));\n+}\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n-#if HAVE_DECL_LE32TOH == 1\n     return le32toh(*((uint32_t*)ptr));\n-#elif !defined(WORDS_BIGENDIAN)\n-    return *((uint32_t*)ptr);\n-#else\n-    return ((uint32_t)ptr[3] << 24 | (uint32_t)ptr[2] << 16 | (uint32_t)ptr[1] << 8 | (uint32_t)ptr[0]);\n-#endif\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n-#if HAVE_DECL_LE64TOH == 1\n     return le64toh(*((uint64_t*)ptr));\n-#elif !defined(WORDS_BIGENDIAN)\n-    return *((uint64_t*)ptr);\n-#else\n-    return ((uint64_t)ptr[7] << 56 | (uint64_t)ptr[6] << 48 | (uint64_t)ptr[5] << 40 | (uint64_t)ptr[4] << 32 |\n-            (uint64_t)ptr[3] << 24 | (uint64_t)ptr[2] << 16 | (uint64_t)ptr[1] << 8 | (uint64_t)ptr[0]);\n-#endif\n+}\n+\n+void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n+{\n+    *((uint16_t*)ptr) = htole16(x);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-#if HAVE_DECL_HTOLE32 == 1\n     *((uint32_t*)ptr) = htole32(x);\n-#elif !defined(WORDS_BIGENDIAN)\n-    *((uint32_t*)ptr) = x;\n-#else\n-    ptr[3] = x >> 24;\n-    ptr[2] = x >> 16;\n-    ptr[1] = x >> 8;\n-    ptr[0] = x;\n-#endif\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-#if HAVE_DECL_HTOLE64 == 1\n     *((uint64_t*)ptr) = htole64(x);\n-#elif !defined(WORDS_BIGENDIAN)\n-    *((uint64_t*)ptr) = x;\n-#else\n-    ptr[7] = x >> 56;\n-    ptr[6] = x >> 48;\n-    ptr[5] = x >> 40;\n-    ptr[4] = x >> 32;\n-    ptr[3] = x >> 24;\n-    ptr[2] = x >> 16;\n-    ptr[1] = x >> 8;\n-    ptr[0] = x;\n-#endif\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n-#if HAVE_DECL_BE32TOH == 1\n     return be32toh(*((uint32_t*)ptr));\n-#else\n-    return ((uint32_t)ptr[0] << 24 | (uint32_t)ptr[1] << 16 | (uint32_t)ptr[2] << 8 | (uint32_t)ptr[3]);\n-#endif\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n-#if HAVE_DECL_BE64TOH == 1\n     return be64toh(*((uint64_t*)ptr));\n-#else\n-    return ((uint64_t)ptr[0] << 56 | (uint64_t)ptr[1] << 48 | (uint64_t)ptr[2] << 40 | (uint64_t)ptr[3] << 32 |\n-            (uint64_t)ptr[4] << 24 | (uint64_t)ptr[5] << 16 | (uint64_t)ptr[6] << 8 | (uint64_t)ptr[7]);\n-#endif\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-#if HAVE_DECL_HTOBE32 == 1\n     *((uint32_t*)ptr) = htobe32(x);\n-#else\n-    ptr[0] = x >> 24;\n-    ptr[1] = x >> 16;\n-    ptr[2] = x >> 8;\n-    ptr[3] = x;\n-#endif\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-#if HAVE_DECL_HTOBE64 == 1\n     *((uint64_t*)ptr) = htobe64(x);\n-#else\n-    ptr[0] = x >> 56;\n-    ptr[1] = x >> 48;\n-    ptr[2] = x >> 40;\n-    ptr[3] = x >> 32;\n-    ptr[4] = x >> 24;\n-    ptr[5] = x >> 16;\n-    ptr[6] = x >> 8;\n-    ptr[7] = x;\n-#endif\n }\n \n #endif // BITCOIN_CRYPTO_COMMON_H"
      },
      {
        "sha": "20d5d217778f2beb5f007d6e3e36a8175c69ea10",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -3,8 +3,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"hash.h\"\n+#include \"crypto/common.h\"\n #include \"crypto/hmac_sha512.h\"\n \n+\n inline uint32_t ROTL32(uint32_t x, int8_t r)\n {\n     return (x << r) | (x >> (32 - r));\n@@ -23,10 +25,10 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n         //----------\n         // body\n-        const uint32_t* blocks = (const uint32_t*)(&vDataToHash[0] + nblocks * 4);\n+        const uint8_t* blocks = &vDataToHash[0] + nblocks * 4;\n \n         for (int i = -nblocks; i; i++) {\n-            uint32_t k1 = blocks[i];\n+            uint32_t k1 = ReadLE32(blocks + i*4);\n \n             k1 *= c1;\n             k1 = ROTL32(k1, 15);"
      },
      {
        "sha": "9927ac75987740f68d2a0ca29fd61cc0a5ae172f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -4318,8 +4318,7 @@ bool ProcessMessages(CNode* pfrom)\n         // Checksum\n         CDataStream& vRecv = msg.vRecv;\n         uint256 hash = Hash(vRecv.begin(), vRecv.begin() + nMessageSize);\n-        unsigned int nChecksum = 0;\n-        memcpy(&nChecksum, &hash, sizeof(nChecksum));\n+        unsigned int nChecksum = ReadLE32((unsigned char*)&hash);\n         if (nChecksum != hdr.nChecksum)\n         {\n             LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\","
      },
      {
        "sha": "08d1d57408344b46630ad745a5a6348c609c3e6b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -14,6 +14,7 @@\n #include \"clientversion.h\"\n #include \"primitives/transaction.h\"\n #include \"ui_interface.h\"\n+#include \"crypto/common.h\"\n \n #ifdef WIN32\n #include <string.h>\n@@ -2007,7 +2008,7 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     // Set the size\n     unsigned int nSize = ssSend.size() - CMessageHeader::HEADER_SIZE;\n-    memcpy((char*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], &nSize, sizeof(nSize));\n+    WriteLE32((uint8_t*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], nSize);\n \n     // Set the checksum\n     uint256 hash = Hash(ssSend.begin() + CMessageHeader::HEADER_SIZE, ssSend.end());"
      },
      {
        "sha": "b42c2dffa4d69da971cc2d4c6c75593ceadf6fb7",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -162,7 +162,7 @@ class CService : public CNetAddr\n         inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             READWRITE(FLATDATA(ip));\n             unsigned short portN = htons(port);\n-            READWRITE(portN);\n+            READWRITE(FLATDATA(portN));\n             if (ser_action.ForRead())\n                  port = ntohs(portN);\n         }"
      },
      {
        "sha": "5b9c13d87011bf192b70bb7fc2902801e1e16e2e",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -8,10 +8,11 @@\n #include \"hash.h\"\n #include \"tinyformat.h\"\n #include \"utilstrencodings.h\"\n+#include \"crypto/common.h\"\n \n uint256 CBlockHeader::GetHash() const\n {\n-    return Hash(BEGIN(nVersion), END(nNonce));\n+    return SerializeHash(*this);\n }\n \n uint256 CBlock::BuildMerkleTree(bool* fMutated) const"
      },
      {
        "sha": "0ba9affeda5a63b9a0ab62945f045e691b685359",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -25,7 +25,8 @@ class COutPoint\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(FLATDATA(*this));\n+        READWRITE(hash);\n+        READWRITE(n);\n     }\n \n     void SetNull() { hash.SetNull(); n = (uint32_t) -1; }"
      },
      {
        "sha": "ed456f5c5ad53944895684ef196bfa4f55585bc6",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -14,6 +14,7 @@\n #include <string.h>\n #include <string>\n #include <vector>\n+#include \"crypto/common.h\"\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n \n@@ -416,14 +417,16 @@ class CScript : public std::vector<unsigned char>\n         else if (b.size() <= 0xffff)\n         {\n             insert(end(), OP_PUSHDATA2);\n-            unsigned short nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+            uint8_t data[2];\n+            WriteLE16(data, b.size());\n+            insert(end(), data, data + sizeof(data));\n         }\n         else\n         {\n             insert(end(), OP_PUSHDATA4);\n-            unsigned int nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+            uint8_t data[4];\n+            WriteLE32(data, b.size());\n+            insert(end(), data, data + sizeof(data));\n         }\n         insert(end(), b.begin(), b.end());\n         return *this;\n@@ -496,15 +499,14 @@ class CScript : public std::vector<unsigned char>\n             {\n                 if (end() - pc < 2)\n                     return false;\n-                nSize = 0;\n-                memcpy(&nSize, &pc[0], 2);\n+                nSize = ReadLE16(&pc[0]);\n                 pc += 2;\n             }\n             else if (opcode == OP_PUSHDATA4)\n             {\n                 if (end() - pc < 4)\n                     return false;\n-                memcpy(&nSize, &pc[0], 4);\n+                nSize = ReadLE32(&pc[0]);\n                 pc += 4;\n             }\n             if (end() - pc < 0 || (unsigned int)(end() - pc) < nSize)"
      },
      {
        "sha": "741f78f8b4fa86daa5827deb2935239ed7940cb2",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 125,
        "deletions": 76,
        "changes": 201,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -18,6 +18,8 @@\n #include <utility>\n #include <vector>\n \n+#include \"compat/endian.h\"\n+\n class CScript;\n \n static const unsigned int MAX_SIZE = 0x02000000;\n@@ -71,6 +73,79 @@ inline const T* end_ptr(const std::vector<T,TAl>& v)\n     return v.empty() ? NULL : (&v[0] + v.size());\n }\n \n+/*\n+ * Lowest-level serialization and conversion.\n+ * @note Sizes of these types are verified in the tests\n+ */\n+template<typename Stream> inline void ser_writedata8(Stream &s, uint8_t obj)\n+{\n+    s.write((char*)&obj, 1);\n+}\n+template<typename Stream> inline void ser_writedata16(Stream &s, uint16_t obj)\n+{\n+    obj = htole16(obj);\n+    s.write((char*)&obj, 2);\n+}\n+template<typename Stream> inline void ser_writedata32(Stream &s, uint32_t obj)\n+{\n+    obj = htole32(obj);\n+    s.write((char*)&obj, 4);\n+}\n+template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)\n+{\n+    obj = htole64(obj);\n+    s.write((char*)&obj, 8);\n+}\n+template<typename Stream> inline uint8_t ser_readdata8(Stream &s)\n+{\n+    uint8_t obj;\n+    s.read((char*)&obj, 1);\n+    return obj;\n+}\n+template<typename Stream> inline uint16_t ser_readdata16(Stream &s)\n+{\n+    uint16_t obj;\n+    s.read((char*)&obj, 2);\n+    return le16toh(obj);\n+}\n+template<typename Stream> inline uint32_t ser_readdata32(Stream &s)\n+{\n+    uint32_t obj;\n+    s.read((char*)&obj, 4);\n+    return le32toh(obj);\n+}\n+template<typename Stream> inline uint64_t ser_readdata64(Stream &s)\n+{\n+    uint64_t obj;\n+    s.read((char*)&obj, 8);\n+    return le64toh(obj);\n+}\n+inline uint64_t ser_double_to_uint64(double x)\n+{\n+    union { double x; uint64_t y; } tmp;\n+    tmp.x = x;\n+    return tmp.y;\n+}\n+inline uint32_t ser_float_to_uint32(float x)\n+{\n+    union { float x; uint32_t y; } tmp;\n+    tmp.x = x;\n+    return tmp.y;\n+}\n+inline double ser_uint64_to_double(uint64_t y)\n+{\n+    union { double x; uint64_t y; } tmp;\n+    tmp.y = y;\n+    return tmp.x;\n+}\n+inline float ser_uint32_to_float(uint32_t y)\n+{\n+    union { float x; uint32_t y; } tmp;\n+    tmp.y = y;\n+    return tmp.x;\n+}\n+\n+\n /////////////////////////////////////////////////////////////////\n //\n // Templates for serializing to anything that looks like a stream,\n@@ -108,59 +183,48 @@ enum\n         SerializationOp(s, CSerActionUnserialize(), nType, nVersion);                \\\n     }\n \n-\n-\n /*\n  * Basic Types\n  */\n-#define WRITEDATA(s, obj)   s.write((char*)&(obj), sizeof(obj))\n-#define READDATA(s, obj)    s.read((char*)&(obj), sizeof(obj))\n-\n-inline unsigned int GetSerializeSize(char a,               int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed char a,        int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned char a,      int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed short a,       int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned short a,     int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed int a,         int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned int a,       int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed long a,        int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned long a,      int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed long long a,   int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned long long a, int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(float a,              int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(double a,             int, int=0) { return sizeof(a); }\n-\n-template<typename Stream> inline void Serialize(Stream& s, char a,               int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed char a,        int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned char a,      int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed short a,       int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned short a,     int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed int a,         int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned int a,       int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed long a,        int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned long a,      int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed long long a,   int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned long long a, int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, float a,              int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, double a,             int, int=0) { WRITEDATA(s, a); }\n-\n-template<typename Stream> inline void Unserialize(Stream& s, char& a,               int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed char& a,        int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned char& a,      int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed short& a,       int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned short& a,     int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed int& a,         int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned int& a,       int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed long& a,        int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned long& a,      int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed long long& a,   int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned long long& a, int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, float& a,              int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, double& a,             int, int=0) { READDATA(s, a); }\n+inline unsigned int GetSerializeSize(char a,      int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(int8_t a,    int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(uint8_t a,   int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(int16_t a,   int, int=0) { return 2; }\n+inline unsigned int GetSerializeSize(uint16_t a,  int, int=0) { return 2; }\n+inline unsigned int GetSerializeSize(int32_t a,   int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(uint32_t a,  int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(int64_t a,   int, int=0) { return 8; }\n+inline unsigned int GetSerializeSize(uint64_t a,  int, int=0) { return 8; }\n+inline unsigned int GetSerializeSize(float a,     int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(double a,    int, int=0) { return 8; }\n+\n+template<typename Stream> inline void Serialize(Stream& s, char a,         int, int=0) { ser_writedata8(s, a); } // TODO Get rid of bare char\n+template<typename Stream> inline void Serialize(Stream& s, int8_t a,       int, int=0) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint8_t a,      int, int=0) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int16_t a,      int, int=0) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint16_t a,     int, int=0) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int32_t a,      int, int=0) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint32_t a,     int, int=0) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int64_t a,      int, int=0) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint64_t a,     int, int=0) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, float a,        int, int=0) { ser_writedata32(s, ser_float_to_uint32(a)); }\n+template<typename Stream> inline void Serialize(Stream& s, double a,       int, int=0) { ser_writedata64(s, ser_double_to_uint64(a)); }\n+\n+template<typename Stream> inline void Unserialize(Stream& s, char& a,      int, int=0) { a = ser_readdata8(s); } // TODO Get rid of bare char\n+template<typename Stream> inline void Unserialize(Stream& s, int8_t& a,    int, int=0) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a,   int, int=0) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int16_t& a,   int, int=0) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a,  int, int=0) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int32_t& a,   int, int=0) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a,  int, int=0) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int64_t& a,   int, int=0) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a,  int, int=0) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, float& a,     int, int=0) { a = ser_uint32_to_float(ser_readdata32(s)); }\n+template<typename Stream> inline void Unserialize(Stream& s, double& a,    int, int=0) { a = ser_uint64_to_double(ser_readdata64(s)); }\n \n inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }\n-template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; WRITEDATA(s, f); }\n-template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f; READDATA(s, f); a=f; }\n+template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; ser_writedata8(s, f); }\n+template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f=ser_readdata8(s); a=f; }\n \n \n \n@@ -187,64 +251,50 @@ void WriteCompactSize(Stream& os, uint64_t nSize)\n {\n     if (nSize < 253)\n     {\n-        unsigned char chSize = nSize;\n-        WRITEDATA(os, chSize);\n+        ser_writedata8(os, nSize);\n     }\n     else if (nSize <= std::numeric_limits<unsigned short>::max())\n     {\n-        unsigned char chSize = 253;\n-        unsigned short xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 253);\n+        ser_writedata16(os, nSize);\n     }\n     else if (nSize <= std::numeric_limits<unsigned int>::max())\n     {\n-        unsigned char chSize = 254;\n-        unsigned int xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 254);\n+        ser_writedata32(os, nSize);\n     }\n     else\n     {\n-        unsigned char chSize = 255;\n-        uint64_t xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 255);\n+        ser_writedata64(os, nSize);\n     }\n     return;\n }\n \n template<typename Stream>\n uint64_t ReadCompactSize(Stream& is)\n {\n-    unsigned char chSize;\n-    READDATA(is, chSize);\n+    uint8_t chSize = ser_readdata8(is);\n     uint64_t nSizeRet = 0;\n     if (chSize < 253)\n     {\n         nSizeRet = chSize;\n     }\n     else if (chSize == 253)\n     {\n-        unsigned short xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata16(is);\n         if (nSizeRet < 253)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     else if (chSize == 254)\n     {\n-        unsigned int xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata32(is);\n         if (nSizeRet < 0x10000u)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     else\n     {\n-        uint64_t xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata64(is);\n         if (nSizeRet < 0x100000000ULL)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n@@ -303,7 +353,7 @@ void WriteVarInt(Stream& os, I n)\n         len++;\n     }\n     do {\n-        WRITEDATA(os, tmp[len]);\n+        ser_writedata8(os, tmp[len]);\n     } while(len--);\n }\n \n@@ -312,8 +362,7 @@ I ReadVarInt(Stream& is)\n {\n     I n = 0;\n     while(true) {\n-        unsigned char chData;\n-        READDATA(is, chData);\n+        unsigned char chData = ser_readdata8(is);\n         n = (n << 7) | (chData & 0x7F);\n         if (chData & 0x80)\n             n++;"
      },
      {
        "sha": "de9510d54a451f81a1f9d347d96ffe5264b0ec33",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 114,
        "deletions": 0,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"serialize.h\"\n #include \"streams.h\"\n+#include \"hash.h\"\n \n #include <stdint.h>\n \n@@ -13,6 +14,119 @@ using namespace std;\n \n BOOST_AUTO_TEST_SUITE(serialize_tests)\n \n+BOOST_AUTO_TEST_CASE(sizes)\n+{\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(char(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int8_t), GetSerializeSize(int8_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint8_t), GetSerializeSize(uint8_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int16_t), GetSerializeSize(int16_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint16_t), GetSerializeSize(uint16_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int32_t), GetSerializeSize(int32_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint32_t), GetSerializeSize(uint32_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int64_t), GetSerializeSize(int64_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize(float(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), 0));\n+    // Bool is serialized as char\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n+\n+    // Sanity-check GetSerializeSize and c++ type matching\n+    BOOST_CHECK_EQUAL(GetSerializeSize(char(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int8_t(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint8_t(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int16_t(0), 0), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint16_t(0), 0), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int32_t(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint32_t(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int64_t(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint64_t(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(float(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(double(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), 0), 1);\n+}\n+\n+BOOST_AUTO_TEST_CASE(floats_conversion)\n+{\n+    // Choose values that map unambigiously to binary floating point to avoid\n+    // rounding issues at the compiler side.\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x00000000), 0.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f000000), 0.5F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f800000), 1.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40000000), 2.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40800000), 4.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x44444444), 785.066650390625F);\n+\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.0F), 0x00000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.5F), 0x3f000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(1.0F), 0x3f800000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(2.0F), 0x40000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(4.0F), 0x40800000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(785.066650390625F), 0x44444444);\n+}\n+\n+BOOST_AUTO_TEST_CASE(doubles_conversion)\n+{\n+    // Choose values that map unambigiously to binary floating point to avoid\n+    // rounding issues at the compiler side.\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x0000000000000000ULL), 0.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3fe0000000000000ULL), 0.5);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3ff0000000000000ULL), 1.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4000000000000000ULL), 2.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4010000000000000ULL), 4.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4088888880000000ULL), 785.066650390625);\n+\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(0.0), 0x0000000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(0.5), 0x3fe0000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(1.0), 0x3ff0000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(2.0), 0x4000000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(4.0), 0x4010000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(785.066650390625), 0x4088888880000000ULL);\n+}\n+/*\n+Python code to generate the below hashes:\n+\n+    def reversed_hex(x):\n+        return binascii.hexlify(''.join(reversed(x)))\n+    def dsha256(x):\n+        return hashlib.sha256(hashlib.sha256(x).digest()).digest()\n+\n+    reversed_hex(dsha256(''.join(struct.pack('<f', x) for x in range(0,1000)))) == '8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c'\n+    reversed_hex(dsha256(''.join(struct.pack('<d', x) for x in range(0,1000)))) == '43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96'\n+*/\n+BOOST_AUTO_TEST_CASE(floats)\n+{\n+    CDataStream ss(SER_DISK, 0);\n+    // encode\n+    for (int i = 0; i < 1000; i++) {\n+        ss << float(i);\n+    }\n+    BOOST_CHECK(Hash(ss.begin(), ss.end()) == uint256S(\"8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c\"));\n+\n+    // decode\n+    for (int i = 0; i < 1000; i++) {\n+        float j;\n+        ss >> j;\n+        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(doubles)\n+{\n+    CDataStream ss(SER_DISK, 0);\n+    // encode\n+    for (int i = 0; i < 1000; i++) {\n+        ss << double(i);\n+    }\n+    BOOST_CHECK(Hash(ss.begin(), ss.end()) == uint256S(\"43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96\"));\n+\n+    // decode\n+    for (int i = 0; i < 1000; i++) {\n+        double j;\n+        ss >> j;\n+        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n+    }\n+}\n+\n BOOST_AUTO_TEST_CASE(varints)\n {\n     // encode"
      },
      {
        "sha": "0d506603276f3a95b4676d2bbac0ce563e0d4eea",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c3fbc34aed578398b3f180a621c671ff3837cec/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c3fbc34aed578398b3f180a621c671ff3837cec/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7c3fbc34aed578398b3f180a621c671ff3837cec",
        "patch": "@@ -337,7 +337,7 @@ class CMinerPolicyEstimator\n     void Write(CAutoFile& fileout) const\n     {\n         fileout << nBestSeenHeight;\n-        fileout << history.size();\n+        fileout << (uint32_t)history.size();\n         BOOST_FOREACH(const CBlockAverage& entry, history)\n         {\n             entry.Write(fileout);\n@@ -348,7 +348,7 @@ class CMinerPolicyEstimator\n     {\n         int nFileBestSeenHeight;\n         filein >> nFileBestSeenHeight;\n-        size_t numEntries;\n+        uint32_t numEntries;\n         filein >> numEntries;\n         if (numEntries <= 0 || numEntries > 10000)\n             throw runtime_error(\"Corrupt estimates file. Must have between 1 and 10k entries.\");"
      }
    ]
  }
]