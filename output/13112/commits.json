[
  {
    "sha": "174f7c80801383cde5ea514b19fb8b108b56b31c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzRmN2M4MDgwMTM4M2NkZTVlYTUxNGIxOWZiOGIxMDhiNTZiMzFj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-05-16T19:15:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-05-30T15:09:15Z"
      },
      "message": "Use a struct for arguments and nested map for categories\n\nInstead of a single map with the category and name as the key,\nmake m_available_args contain maps. The key will be the category and\nthe value is a map which actually contains the arguments for that\ncategory. The nested map's key is the argument name, while the value\nis a struct that contains the help text and whether the argument is\na debug only argument.",
      "tree": {
        "sha": "ede8b06838566830fe4b782b7469770a9c066bf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ede8b06838566830fe4b782b7469770a9c066bf0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/174f7c80801383cde5ea514b19fb8b108b56b31c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/174f7c80801383cde5ea514b19fb8b108b56b31c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/174f7c80801383cde5ea514b19fb8b108b56b31c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/174f7c80801383cde5ea514b19fb8b108b56b31c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd96d54f39cf4f66890e0bb40812d47e69728cec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd96d54f39cf4f66890e0bb40812d47e69728cec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd96d54f39cf4f66890e0bb40812d47e69728cec"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 66,
      "deletions": 25
    },
    "files": [
      {
        "sha": "7f9a1d560914f7bb4d248472c97c83d24a4d82d4",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 24,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/174f7c80801383cde5ea514b19fb8b108b56b31c/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/174f7c80801383cde5ea514b19fb8b108b56b31c/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=174f7c80801383cde5ea514b19fb8b108b56b31c",
        "patch": "@@ -549,48 +549,80 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n \n void ArgsManager::AddArg(const std::string& name, const std::string& help, const bool debug_only, const OptionsCategory& cat)\n {\n-    std::pair<OptionsCategory, std::string> key(cat, name);\n-    assert(m_available_args.count(key) == 0);\n-    m_available_args.emplace(key, std::pair<std::string, bool>(help, debug_only));\n+    // Split arg name from its help param\n+    size_t eq_index = name.find('=');\n+    if (eq_index == std::string::npos) {\n+        eq_index = name.size();\n+    }\n+\n+    std::map<std::string, Arg>& arg_map = m_available_args[cat];\n+    auto ret = arg_map.emplace(name.substr(0, eq_index), Arg(name.substr(eq_index, name.size() - eq_index), help, debug_only));\n+    assert(ret.second); // Make sure an insertion actually happened\n }\n \n std::string ArgsManager::GetHelpMessage()\n {\n     const bool show_debug = gArgs.GetBoolArg(\"-help-debug\", false);\n \n-    std::string usage = HelpMessageGroup(\"Options:\");\n-\n-    OptionsCategory last_cat = OptionsCategory::OPTIONS;\n-    for (auto& arg : m_available_args) {\n-        if (arg.first.first != last_cat) {\n-            last_cat = arg.first.first;\n-            if (last_cat == OptionsCategory::CONNECTION)\n+    std::string usage = \"\";\n+    for (const auto& arg_map : m_available_args) {\n+        switch(arg_map.first) {\n+            case OptionsCategory::OPTIONS:\n+                usage += HelpMessageGroup(\"Options:\");\n+                break;\n+            case OptionsCategory::CONNECTION:\n                 usage += HelpMessageGroup(\"Connection options:\");\n-            else if (last_cat == OptionsCategory::ZMQ)\n+                break;\n+            case OptionsCategory::ZMQ:\n                 usage += HelpMessageGroup(\"ZeroMQ notification options:\");\n-            else if (last_cat == OptionsCategory::DEBUG_TEST)\n+                break;\n+            case OptionsCategory::DEBUG_TEST:\n                 usage += HelpMessageGroup(\"Debugging/Testing options:\");\n-            else if (last_cat == OptionsCategory::NODE_RELAY)\n+                break;\n+            case OptionsCategory::NODE_RELAY:\n                 usage += HelpMessageGroup(\"Node relay options:\");\n-            else if (last_cat == OptionsCategory::BLOCK_CREATION)\n+                break;\n+            case OptionsCategory::BLOCK_CREATION:\n                 usage += HelpMessageGroup(\"Block creation options:\");\n-            else if (last_cat == OptionsCategory::RPC)\n+                break;\n+            case OptionsCategory::RPC:\n                 usage += HelpMessageGroup(\"RPC server options:\");\n-            else if (last_cat == OptionsCategory::WALLET)\n+                break;\n+            case OptionsCategory::WALLET:\n                 usage += HelpMessageGroup(\"Wallet options:\");\n-            else if (last_cat == OptionsCategory::WALLET_DEBUG_TEST && show_debug)\n-                usage += HelpMessageGroup(\"Wallet debugging/testing options:\");\n-            else if (last_cat == OptionsCategory::CHAINPARAMS)\n+                break;\n+            case OptionsCategory::WALLET_DEBUG_TEST:\n+                if (show_debug) usage += HelpMessageGroup(\"Wallet debugging/testing options:\");\n+                break;\n+            case OptionsCategory::CHAINPARAMS:\n                 usage += HelpMessageGroup(\"Chain selection options:\");\n-            else if (last_cat == OptionsCategory::GUI)\n+                break;\n+            case OptionsCategory::GUI:\n                 usage += HelpMessageGroup(\"UI Options:\");\n-            else if (last_cat == OptionsCategory::COMMANDS)\n+                break;\n+            case OptionsCategory::COMMANDS:\n                 usage += HelpMessageGroup(\"Commands:\");\n-            else if (last_cat == OptionsCategory::REGISTER_COMMANDS)\n+                break;\n+            case OptionsCategory::REGISTER_COMMANDS:\n                 usage += HelpMessageGroup(\"Register Commands:\");\n+                break;\n+            default:\n+                break;\n         }\n-        if (show_debug || !arg.second.second) {\n-            usage += HelpMessageOpt(arg.first.second, arg.second.first);\n+\n+        // When we get to the hidden options, stop\n+        if (arg_map.first == OptionsCategory::HIDDEN) break;\n+\n+        for (const auto& arg : arg_map.second) {\n+            if (show_debug || !arg.second.m_debug_only) {\n+                std::string name;\n+                if (arg.second.m_help_param.empty()) {\n+                    name = arg.first;\n+                } else {\n+                    name = arg.first + arg.second.m_help_param;\n+                }\n+                usage += HelpMessageOpt(name, arg.second.m_help_text);\n+            }\n         }\n     }\n     return usage;"
      },
      {
        "sha": "1d318e285123d4aa02b248746ac4c692d410a9c1",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/174f7c80801383cde5ea514b19fb8b108b56b31c/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/174f7c80801383cde5ea514b19fb8b108b56b31c/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=174f7c80801383cde5ea514b19fb8b108b56b31c",
        "patch": "@@ -140,12 +140,21 @@ class ArgsManager\n protected:\n     friend class ArgsManagerHelper;\n \n+    struct Arg\n+    {\n+        std::string m_help_param;\n+        std::string m_help_text;\n+        bool m_debug_only;\n+\n+        Arg(const std::string& help_param, const std::string& help_text, bool debug_only) : m_help_param(help_param), m_help_text(help_text), m_debug_only(debug_only) {};\n+    };\n+\n     mutable CCriticalSection cs_args;\n     std::map<std::string, std::vector<std::string>> m_override_args;\n     std::map<std::string, std::vector<std::string>> m_config_args;\n     std::string m_network;\n     std::set<std::string> m_network_only_args;\n-    std::map<std::pair<OptionsCategory, std::string>, std::pair<std::string, bool>> m_available_args;\n+    std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args;\n \n     void ReadConfigStream(std::istream& stream);\n "
      }
    ]
  },
  {
    "sha": "4f8704d57f8fb2958a43534779b20201b77eecae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Zjg3MDRkNTdmOGZiMjk1OGE0MzUzNDc3OWIyMDIwMWI3N2VlY2Fl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-04-28T23:40:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-05-30T15:27:50Z"
      },
      "message": "Give an error and exit if there are unknown parameters\n\nIf an unknown option is given via either the command line args or\nthe conf file, throw an error and exit\n\nUpdate tests for ArgsManager knowing args\n\nIgnore unknown options in the config file for bitcoin-cli\n\nFix tests and bitcoin-cli to match actual options used",
      "tree": {
        "sha": "4ccb64e2e65e99726786919d6d0feecde2e26377",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ccb64e2e65e99726786919d6d0feecde2e26377"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f8704d57f8fb2958a43534779b20201b77eecae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f8704d57f8fb2958a43534779b20201b77eecae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f8704d57f8fb2958a43534779b20201b77eecae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f8704d57f8fb2958a43534779b20201b77eecae/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "174f7c80801383cde5ea514b19fb8b108b56b31c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/174f7c80801383cde5ea514b19fb8b108b56b31c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/174f7c80801383cde5ea514b19fb8b108b56b31c"
      }
    ],
    "stats": {
      "total": 271,
      "additions": 205,
      "deletions": 66
    },
    "files": [
      {
        "sha": "a820d67fa8191fe5fd65222e3dd018446c735d53",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f8704d57f8fb2958a43534779b20201b77eecae/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f8704d57f8fb2958a43534779b20201b77eecae/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=4f8704d57f8fb2958a43534779b20201b77eecae",
        "patch": "@@ -33,13 +33,21 @@ static void SetupBenchArgs()\n     gArgs.AddArg(\"-plot-plotlyurl=<uri>\", strprintf(\"URL to use for plotly.js (default: %s)\", DEFAULT_PLOT_PLOTLYURL), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-plot-width=<x>\", strprintf(\"Plot width in pixel (default: %u)\", DEFAULT_PLOT_WIDTH), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-plot-height=<x>\", strprintf(\"Plot height in pixel (default: %u)\", DEFAULT_PLOT_HEIGHT), false, OptionsCategory::OPTIONS);\n+\n+    // Hidden\n+    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n }\n \n int\n main(int argc, char** argv)\n {\n     SetupBenchArgs();\n-    gArgs.ParseParameters(argc, argv);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        return false;\n+    }\n \n     if (HelpRequested(gArgs)) {\n         std::cout << gArgs.GetHelpMessage();"
      },
      {
        "sha": "be5ce14480bffd2b6eed8efdf3100ae7fb64670d",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f8704d57f8fb2958a43534779b20201b77eecae/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f8704d57f8fb2958a43534779b20201b77eecae/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=4f8704d57f8fb2958a43534779b20201b77eecae",
        "patch": "@@ -42,13 +42,18 @@ static void SetupCliArgs()\n     gArgs.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases).  When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-stdinrpcpass\", strprintf(\"Read RPC password from standard input as a single line.  When combined with -stdin, the first line from standard input is used for the RPC password.\"), false, OptionsCategory::OPTIONS);\n+\n+    // Hidden\n+    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n }\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -80,7 +85,11 @@ static int AppInitRPC(int argc, char* argv[])\n     // Parameters\n     //\n     SetupCliArgs();\n-    gArgs.ParseParameters(argc, argv);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        return EXIT_FAILURE;\n+    }\n     if (argc < 2 || HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n         std::string strUsage = strprintf(\"%s RPC client version\", PACKAGE_NAME) + \" \" + FormatFullVersion() + \"\\n\";\n         if (!gArgs.IsArgSet(\"-version\")) {\n@@ -104,10 +113,8 @@ static int AppInitRPC(int argc, char* argv[])\n         fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n         return EXIT_FAILURE;\n     }\n-    try {\n-        gArgs.ReadConfigFiles();\n-    } catch (const std::exception& e) {\n-        fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n+    if (!gArgs.ReadConfigFiles(error, true)) {\n+        fprintf(stderr, \"Error reading configuration file: %s\\n\", error.c_str());\n         return EXIT_FAILURE;\n     }\n     // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)"
      },
      {
        "sha": "3fb505d7391388568968aab08295965c972f8146",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f8704d57f8fb2958a43534779b20201b77eecae/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f8704d57f8fb2958a43534779b20201b77eecae/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=4f8704d57f8fb2958a43534779b20201b77eecae",
        "patch": "@@ -64,6 +64,10 @@ static void SetupBitcoinTxArgs()\n \n     gArgs.AddArg(\"load=NAME:FILENAME\", \"Load JSON file FILENAME into register NAME\", false, OptionsCategory::REGISTER_COMMANDS);\n     gArgs.AddArg(\"set=NAME:JSON-STRING\", \"Set register NAME to given JSON-STRING\", false, OptionsCategory::REGISTER_COMMANDS);\n+\n+    // Hidden\n+    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n }\n \n //\n@@ -76,7 +80,11 @@ static int AppInitRawTx(int argc, char* argv[])\n     // Parameters\n     //\n     SetupBitcoinTxArgs();\n-    gArgs.ParseParameters(argc, argv);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        return EXIT_FAILURE;\n+    }\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {"
      },
      {
        "sha": "a9b952e5a42e939719315a9f02a1ef2ce1ffa214",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f8704d57f8fb2958a43534779b20201b77eecae/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f8704d57f8fb2958a43534779b20201b77eecae/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=4f8704d57f8fb2958a43534779b20201b77eecae",
        "patch": "@@ -65,7 +65,11 @@ static bool AppInit(int argc, char* argv[])\n #if HAVE_DECL_DAEMON\n     gArgs.AddArg(\"-daemon\", \"Run in the background as a daemon and accept commands\", false, OptionsCategory::OPTIONS);\n #endif\n-    gArgs.ParseParameters(argc, argv);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        return false;\n+    }\n \n     // Process help and version before taking care about datadir\n     if (HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n@@ -94,11 +98,8 @@ static bool AppInit(int argc, char* argv[])\n             fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n             return false;\n         }\n-        try\n-        {\n-            gArgs.ReadConfigFiles();\n-        } catch (const std::exception& e) {\n-            fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n+        if (!gArgs.ReadConfigFiles(error)) {\n+            fprintf(stderr, \"Error reading configuration file: %s\\n\", error.c_str());\n             return false;\n         }\n         // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)"
      },
      {
        "sha": "b4e2eec0d254e8325c5df7d562086eeeceb19af9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f8704d57f8fb2958a43534779b20201b77eecae/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f8704d57f8fb2958a43534779b20201b77eecae/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4f8704d57f8fb2958a43534779b20201b77eecae",
        "patch": "@@ -499,6 +499,23 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), true, OptionsCategory::RPC);\n     gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", false, OptionsCategory::RPC);\n+\n+    // Hidden options\n+    gArgs.AddArg(\"-rpcssl\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-benchmark\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-socks\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-tor\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-debugnet\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-whitelistalwaysrelay\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-prematurewitness\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-walletprematurewitness\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-promiscuousmempoolflags\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-blockminsize\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-dbcrashratio\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-forcecompactdb\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-usehd\", \"\", false, OptionsCategory::HIDDEN);\n }\n \n std::string LicenseInfo()"
      },
      {
        "sha": "4189ff7497c982b374be6606e95c9290404254fa",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f8704d57f8fb2958a43534779b20201b77eecae/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f8704d57f8fb2958a43534779b20201b77eecae/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=4f8704d57f8fb2958a43534779b20201b77eecae",
        "patch": "@@ -48,11 +48,11 @@ namespace {\n \n class NodeImpl : public Node\n {\n-    void parseParameters(int argc, const char* const argv[]) override\n+    bool parseParameters(int argc, const char* const argv[], std::string& error) override\n     {\n-        gArgs.ParseParameters(argc, argv);\n+        return gArgs.ParseParameters(argc, argv, error);\n     }\n-    void readConfigFiles() override { gArgs.ReadConfigFiles(); }\n+    bool readConfigFiles(std::string& error) override { return gArgs.ReadConfigFiles(error); }\n     bool softSetArg(const std::string& arg, const std::string& value) override { return gArgs.SoftSetArg(arg, value); }\n     bool softSetBoolArg(const std::string& arg, bool value) override { return gArgs.SoftSetBoolArg(arg, value); }\n     void selectParams(const std::string& network) override { SelectParams(network); }"
      },
      {
        "sha": "8185c015a9ab3ba5cdd9638da35bfbfff48810b9",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f8704d57f8fb2958a43534779b20201b77eecae/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f8704d57f8fb2958a43534779b20201b77eecae/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=4f8704d57f8fb2958a43534779b20201b77eecae",
        "patch": "@@ -38,7 +38,7 @@ class Node\n     virtual ~Node() {}\n \n     //! Set command line arguments.\n-    virtual void parseParameters(int argc, const char* const argv[]) = 0;\n+    virtual bool parseParameters(int argc, const char* const argv[], std::string& error) = 0;\n \n     //! Set a command line argument if it doesn't already have a value\n     virtual bool softSetArg(const std::string& arg, const std::string& value) = 0;\n@@ -47,7 +47,7 @@ class Node\n     virtual bool softSetBoolArg(const std::string& arg, bool value) = 0;\n \n     //! Load settings from configuration file.\n-    virtual void readConfigFiles() = 0;\n+    virtual bool readConfigFiles(std::string& error) = 0;\n \n     //! Choose network parameters.\n     virtual void selectParams(const std::string& network) = 0;"
      },
      {
        "sha": "31d9f936e7a295ffd8e97650d15a19239e9c05cd",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 12,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f8704d57f8fb2958a43534779b20201b77eecae/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f8704d57f8fb2958a43534779b20201b77eecae/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=4f8704d57f8fb2958a43534779b20201b77eecae",
        "patch": "@@ -229,6 +229,9 @@ class BitcoinApplication: public QApplication\n     /// Get window identifier of QMainWindow (BitcoinGUI)\n     WId getMainWinId() const;\n \n+    /// Setup platform style\n+    void setupPlatformStyle();\n+\n public Q_SLOTS:\n     void initializeResult(bool success);\n     void shutdownResult();\n@@ -315,10 +318,14 @@ BitcoinApplication::BitcoinApplication(interfaces::Node& node, int &argc, char *\n     paymentServer(0),\n     m_wallet_models(),\n #endif\n-    returnValue(0)\n+    returnValue(0),\n+    platformStyle(0)\n {\n     setQuitOnLastWindowClosed(false);\n+}\n \n+void BitcoinApplication::setupPlatformStyle()\n+{\n     // UI per-platform customization\n     // This must be done inside the BitcoinApplication constructor, or after it, because\n     // PlatformStyle::instantiate requires a QApplication\n@@ -562,15 +569,9 @@ int main(int argc, char *argv[])\n \n     std::unique_ptr<interfaces::Node> node = interfaces::MakeNode();\n \n-    /// 1. Parse command-line options. These take precedence over anything else.\n-    // Command-line options take precedence:\n-    node->setupServerArgs();\n-    SetupUIArgs();\n-    node->parseParameters(argc, argv);\n-\n     // Do not refer to data directory yet, this can be overridden by Intro::pickDataDirectory\n \n-    /// 2. Basic Qt initialization (not dependent on parameters or configuration)\n+    /// 1. Basic Qt initialization (not dependent on parameters or configuration)\n #if QT_VERSION < 0x050000\n     // Internal string conversion is all UTF-8\n     QTextCodec::setCodecForTr(QTextCodec::codecForName(\"UTF-8\"));\n@@ -609,6 +610,20 @@ int main(int argc, char *argv[])\n     qRegisterMetaType<WalletModel*>(\"WalletModel*\");\n #endif\n \n+    /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these\n+    // Command-line options take precedence:\n+    node->setupServerArgs();\n+    SetupUIArgs();\n+    std::string error;\n+    if (!node->parseParameters(argc, argv, error)) {\n+        QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n+            QObject::tr(\"Error parsing command line arguments: %1.\").arg(QString::fromStdString(error)));\n+        return EXIT_FAILURE;\n+    }\n+\n+    // Now that the QApplication is setup and we have parsed our parameters, we can set the platform style\n+    app.setupPlatformStyle();\n+\n     /// 3. Application identification\n     // must be set before OptionsModel is initialized or translations are loaded,\n     // as it is used to locate QSettings\n@@ -644,11 +659,9 @@ int main(int argc, char *argv[])\n                               QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-datadir\", \"\"))));\n         return EXIT_FAILURE;\n     }\n-    try {\n-        node->readConfigFiles();\n-    } catch (const std::exception& e) {\n+    if (!node->readConfigFiles(error)) {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n-                              QObject::tr(\"Error: Cannot parse configuration file: %1. Only use key=value syntax.\").arg(e.what()));\n+            QObject::tr(\"Error: Cannot parse configuration file: %1.\").arg(QString::fromStdString(error)));\n         return EXIT_FAILURE;\n     }\n "
      },
      {
        "sha": "c065e2567698ab5b0f4c13d036ca7c66cf1e071f",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f8704d57f8fb2958a43534779b20201b77eecae/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f8704d57f8fb2958a43534779b20201b77eecae/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=4f8704d57f8fb2958a43534779b20201b77eecae",
        "patch": "@@ -27,11 +27,21 @@ static void ResetArgs(const std::string& strArg)\n     for (std::string& s : vecArg)\n         vecChar.push_back(s.c_str());\n \n-    gArgs.ParseParameters(vecChar.size(), vecChar.data());\n+    std::string error;\n+    gArgs.ParseParameters(vecChar.size(), vecChar.data(), error);\n+}\n+\n+static void SetupArgs(const std::vector<std::string>& args)\n+{\n+    gArgs.ClearArgs();\n+    for (const std::string& arg : args) {\n+        gArgs.AddArg(arg, \"\", false, OptionsCategory::OPTIONS);\n+    }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n+    SetupArgs({\"-foo\"});\n     ResetArgs(\"-foo\");\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n@@ -84,6 +94,7 @@ BOOST_AUTO_TEST_CASE(boolarg)\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n+    SetupArgs({\"-foo\", \"-bar\"});\n     ResetArgs(\"\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n@@ -108,6 +119,7 @@ BOOST_AUTO_TEST_CASE(stringarg)\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n+    SetupArgs({\"-foo\", \"-bar\"});\n     ResetArgs(\"\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 11), 11);\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 0), 0);\n@@ -127,6 +139,7 @@ BOOST_AUTO_TEST_CASE(intarg)\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n+    SetupArgs({\"-foo\", \"-bar\"});\n     ResetArgs(\"--foo\");\n     BOOST_CHECK_EQUAL(gArgs.GetBoolArg(\"-foo\", false), true);\n \n@@ -137,6 +150,7 @@ BOOST_AUTO_TEST_CASE(doubledash)\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n+    SetupArgs({\"-foo\", \"-bar\"});\n     ResetArgs(\"-nofoo\");\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));"
      },
      {
        "sha": "611ccc9b77dff8ff9085ea24fa653b0a42f4eb0c",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 23,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f8704d57f8fb2958a43534779b20201b77eecae/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f8704d57f8fb2958a43534779b20201b77eecae/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=4f8704d57f8fb2958a43534779b20201b77eecae",
        "patch": "@@ -186,27 +186,37 @@ struct TestArgsManager : public ArgsManager\n             LOCK(cs_args);\n             m_config_args.clear();\n         }\n-        ReadConfigStream(streamConfig);\n+        std::string error;\n+        ReadConfigStream(streamConfig, error);\n     }\n     void SetNetworkOnlyArg(const std::string arg)\n     {\n         LOCK(cs_args);\n         m_network_only_args.insert(arg);\n     }\n+    void SetupArgs(int argv, const char* args[])\n+    {\n+        for (int i = 0; i < argv; ++i) {\n+            AddArg(args[i], \"\", false, OptionsCategory::OPTIONS);\n+        }\n+    }\n };\n \n BOOST_AUTO_TEST_CASE(util_ParseParameters)\n {\n     TestArgsManager testArgs;\n+    const char* avail_args[] = {\"-a\", \"-b\", \"-ccc\", \"-d\"};\n     const char *argv_test[] = {\"-ignored\", \"-a\", \"-b\", \"-ccc=argument\", \"-ccc=multiple\", \"f\", \"-d=e\"};\n \n-    testArgs.ParseParameters(0, (char**)argv_test);\n+    std::string error;\n+    testArgs.SetupArgs(4, avail_args);\n+    testArgs.ParseParameters(0, (char**)argv_test, error);\n     BOOST_CHECK(testArgs.GetOverrideArgs().empty() && testArgs.GetConfigArgs().empty());\n \n-    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ParseParameters(1, (char**)argv_test, error);\n     BOOST_CHECK(testArgs.GetOverrideArgs().empty() && testArgs.GetConfigArgs().empty());\n \n-    testArgs.ParseParameters(7, (char**)argv_test);\n+    testArgs.ParseParameters(7, (char**)argv_test, error);\n     // expectation: -ignored is ignored (program name argument),\n     // -a, -b and -ccc end up in map, -d ignored because it is after\n     // a non-option argument (non-GNU option parsing)\n@@ -227,9 +237,12 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n BOOST_AUTO_TEST_CASE(util_GetBoolArg)\n {\n     TestArgsManager testArgs;\n+    const char* avail_args[] = {\"-a\", \"-b\", \"-c\", \"-d\", \"-e\", \"-f\"};\n     const char *argv_test[] = {\n         \"ignored\", \"-a\", \"-nob\", \"-c=0\", \"-d=1\", \"-e=false\", \"-f=true\"};\n-    testArgs.ParseParameters(7, (char**)argv_test);\n+    std::string error;\n+    testArgs.SetupArgs(6, avail_args);\n+    testArgs.ParseParameters(7, (char**)argv_test, error);\n \n     // Each letter should be set.\n     for (char opt : \"abcdef\")\n@@ -261,8 +274,11 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     TestArgsManager testArgs;\n \n     // Params test\n+    const char* avail_args[] = {\"-foo\", \"-bar\"};\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n-    testArgs.ParseParameters(4, (char**)argv_test);\n+    testArgs.SetupArgs(2, avail_args);\n+    std::string error;\n+    testArgs.ParseParameters(4, (char**)argv_test, error);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n@@ -274,7 +290,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n \n     // Config test\n     const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n-    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ParseParameters(1, (char**)argv_test, error);\n     testArgs.ReadConfigString(conf_test);\n \n     // This was passed twice, second one overrides the negative setting,\n@@ -289,7 +305,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     // Combined test\n     const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n     const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n-    testArgs.ParseParameters(3, (char**)combo_test_args);\n+    testArgs.ParseParameters(3, (char**)combo_test_args, error);\n     testArgs.ReadConfigString(combo_test_conf);\n \n     // Command line overrides, but doesn't erase old setting\n@@ -329,6 +345,8 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n        \"iii=2\\n\";\n \n     TestArgsManager test_args;\n+    const char* avail_args[] = {\"-a\", \"-b\", \"-ccc\", \"-d\", \"-e\", \"-fff\", \"-ggg\", \"-h\", \"-i\", \"-iii\"};\n+    test_args.SetupArgs(10, avail_args);\n \n     test_args.ReadConfigString(str_config);\n     // expectation: a, b, ccc, d, fff, ggg, h, i end up in map\n@@ -526,6 +544,8 @@ BOOST_AUTO_TEST_CASE(util_GetArg)\n BOOST_AUTO_TEST_CASE(util_GetChainName)\n {\n     TestArgsManager test_args;\n+    const char* avail_args[] = {\"-testnet\", \"-regtest\"};\n+    test_args.SetupArgs(2, avail_args);\n \n     const char* argv_testnet[] = {\"cmd\", \"-testnet\"};\n     const char* argv_regtest[] = {\"cmd\", \"-regtest\"};\n@@ -535,63 +555,64 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     // equivalent to \"-testnet\"\n     // regtest in testnet section is ignored\n     const char* testnetconf = \"testnet=1\\nregtest=0\\n[test]\\nregtest=1\";\n+    std::string error;\n \n-    test_args.ParseParameters(0, (char**)argv_testnet);\n+    test_args.ParseParameters(0, (char**)argv_testnet, error);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"main\");\n \n-    test_args.ParseParameters(2, (char**)argv_testnet);\n+    test_args.ParseParameters(2, (char**)argv_testnet, error);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_regtest);\n+    test_args.ParseParameters(2, (char**)argv_regtest, error);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"regtest\");\n \n-    test_args.ParseParameters(3, (char**)argv_test_no_reg);\n+    test_args.ParseParameters(3, (char**)argv_test_no_reg, error);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(3, (char**)argv_both);\n+    test_args.ParseParameters(3, (char**)argv_both, error);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n-    test_args.ParseParameters(0, (char**)argv_testnet);\n+    test_args.ParseParameters(0, (char**)argv_testnet, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_testnet);\n+    test_args.ParseParameters(2, (char**)argv_testnet, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_regtest);\n+    test_args.ParseParameters(2, (char**)argv_regtest, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n-    test_args.ParseParameters(3, (char**)argv_test_no_reg);\n+    test_args.ParseParameters(3, (char**)argv_test_no_reg, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(3, (char**)argv_both);\n+    test_args.ParseParameters(3, (char**)argv_both, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n     // check setting the network to test (and thus making\n     // [test] regtest=1 potentially relevant) doesn't break things\n     test_args.SelectConfigNetwork(\"test\");\n \n-    test_args.ParseParameters(0, (char**)argv_testnet);\n+    test_args.ParseParameters(0, (char**)argv_testnet, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_testnet);\n+    test_args.ParseParameters(2, (char**)argv_testnet, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_regtest);\n+    test_args.ParseParameters(2, (char**)argv_regtest, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n-    test_args.ParseParameters(2, (char**)argv_test_no_reg);\n+    test_args.ParseParameters(2, (char**)argv_test_no_reg, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(3, (char**)argv_both);\n+    test_args.ParseParameters(3, (char**)argv_both, error);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n }"
      },
      {
        "sha": "34483d95b0e30456b0ca5def933856c312ebbee3",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 6,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f8704d57f8fb2958a43534779b20201b77eecae/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f8704d57f8fb2958a43534779b20201b77eecae/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=4f8704d57f8fb2958a43534779b20201b77eecae",
        "patch": "@@ -412,7 +412,7 @@ void ArgsManager::SelectConfigNetwork(const std::string& network)\n     m_network = network;\n }\n \n-void ArgsManager::ParseParameters(int argc, const char* const argv[])\n+bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::string& error)\n {\n     LOCK(cs_args);\n     m_override_args.clear();\n@@ -444,6 +444,14 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n         } else {\n             m_override_args[key].push_back(val);\n         }\n+\n+        // Check that the arg is known\n+        if (!(IsSwitchChar(key[0]) && key.size() == 1)) {\n+            if (!IsArgKnown(key, error)) {\n+                error = strprintf(\"Invalid parameter %s\", key.c_str());\n+                return false;\n+            }\n+        }\n     }\n \n     // we do not allow -includeconf from command line, so we clear it here\n@@ -456,6 +464,23 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n             m_override_args.erase(it);\n         }\n     }\n+    return true;\n+}\n+\n+bool ArgsManager::IsArgKnown(const std::string& key, std::string& error)\n+{\n+    size_t option_index = key.find('.');\n+    std::string arg_no_net;\n+    if (option_index == std::string::npos) {\n+        arg_no_net = key;\n+    } else {\n+        arg_no_net = std::string(\"-\") + key.substr(option_index + 1, std::string::npos);\n+    }\n+\n+    for (const auto& arg_map : m_available_args) {\n+        if (arg_map.second.count(arg_no_net)) return true;\n+    }\n+    return false;\n }\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n@@ -779,7 +804,7 @@ fs::path GetConfigFile(const std::string& confPath)\n     return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n-void ArgsManager::ReadConfigStream(std::istream& stream)\n+bool ArgsManager::ReadConfigStream(std::istream& stream, std::string& error, bool ignore_invalid_keys)\n {\n     LOCK(cs_args);\n \n@@ -790,15 +815,23 @@ void ArgsManager::ReadConfigStream(std::istream& stream)\n     {\n         std::string strKey = std::string(\"-\") + it->string_key;\n         std::string strValue = it->value[0];\n+\n         if (InterpretNegatedOption(strKey, strValue)) {\n             m_config_args[strKey].clear();\n         } else {\n             m_config_args[strKey].push_back(strValue);\n         }\n+\n+        // Check that the arg is known\n+        if (!IsArgKnown(strKey, error) && !ignore_invalid_keys) {\n+            error = strprintf(\"Invalid configuration value %s\", it->string_key.c_str());\n+            return false;\n+        }\n     }\n+    return true;\n }\n \n-void ArgsManager::ReadConfigFiles()\n+bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n {\n     {\n         LOCK(cs_args);\n@@ -810,7 +843,9 @@ void ArgsManager::ReadConfigFiles()\n \n     // ok to not have a config file\n     if (stream.good()) {\n-        ReadConfigStream(stream);\n+        if (!ReadConfigStream(stream, error, ignore_invalid_keys)) {\n+            return false;\n+        }\n         // if there is an -includeconf in the override args, but it is empty, that means the user\n         // passed '-noincludeconf' on the command line, in which case we should not include anything\n         if (m_override_args.count(\"-includeconf\") == 0) {\n@@ -833,7 +868,9 @@ void ArgsManager::ReadConfigFiles()\n             for (const std::string& to_include : includeconf) {\n                 fs::ifstream include_config(GetConfigFile(to_include));\n                 if (include_config.good()) {\n-                    ReadConfigStream(include_config);\n+                    if (!ReadConfigStream(include_config, error, ignore_invalid_keys)) {\n+                        return false;\n+                    }\n                     LogPrintf(\"Included configuration file %s\\n\", to_include.c_str());\n                 } else {\n                     fprintf(stderr, \"Failed to include configuration file %s\\n\", to_include.c_str());\n@@ -855,8 +892,10 @@ void ArgsManager::ReadConfigFiles()\n     // If datadir is changed in .conf file:\n     ClearDatadirCache();\n     if (!fs::is_directory(GetDataDir(false))) {\n-        throw std::runtime_error(strprintf(\"specified data directory \\\"%s\\\" does not exist.\", gArgs.GetArg(\"-datadir\", \"\").c_str()));\n+        error = strprintf(\"specified data directory \\\"%s\\\" does not exist.\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n+        return false;\n     }\n+    return true;\n }\n \n std::string ArgsManager::GetChainName() const"
      },
      {
        "sha": "62c3f7c18bcc11c9abed4a810643cddcbf301a76",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 17,
        "deletions": 6,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f8704d57f8fb2958a43534779b20201b77eecae/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f8704d57f8fb2958a43534779b20201b77eecae/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=4f8704d57f8fb2958a43534779b20201b77eecae",
        "patch": "@@ -118,8 +118,7 @@ inline bool IsSwitchChar(char c)\n #endif\n }\n \n-enum class OptionsCategory\n-{\n+enum class OptionsCategory {\n     OPTIONS,\n     CONNECTION,\n     WALLET,\n@@ -132,7 +131,9 @@ enum class OptionsCategory\n     RPC,\n     GUI,\n     COMMANDS,\n-    REGISTER_COMMANDS\n+    REGISTER_COMMANDS,\n+\n+    HIDDEN // Always the last option to avoid printing these in the help\n };\n \n class ArgsManager\n@@ -156,7 +157,7 @@ class ArgsManager\n     std::set<std::string> m_network_only_args;\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args;\n \n-    void ReadConfigStream(std::istream& stream);\n+    bool ReadConfigStream(std::istream& stream, std::string& error, bool ignore_invalid_keys = false);\n \n public:\n     ArgsManager();\n@@ -166,8 +167,8 @@ class ArgsManager\n      */\n     void SelectConfigNetwork(const std::string& network);\n \n-    void ParseParameters(int argc, const char*const argv[]);\n-    void ReadConfigFiles();\n+    bool ParseParameters(int argc, const char* const argv[], std::string& error);\n+    bool ReadConfigFiles(std::string& error, bool ignore_invalid_keys = false);\n \n     /**\n      * Log warnings for options in m_section_only_args when\n@@ -262,10 +263,20 @@ class ArgsManager\n      */\n     void AddArg(const std::string& name, const std::string& help, const bool debug_only, const OptionsCategory& cat);\n \n+    /**\n+     * Clear available arguments\n+     */\n+    void ClearArgs() { m_available_args.clear(); }\n+\n     /**\n      * Get the help string\n      */\n     std::string GetHelpMessage();\n+\n+    /**\n+     * Check whether we know of this arg\n+     */\n+    bool IsArgKnown(const std::string& key, std::string& error);\n };\n \n extern ArgsManager gArgs;"
      }
    ]
  },
  {
    "sha": "903055730b57ae7c8d12aca2e3fd0951f12f7e9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDMwNTU3MzBiNTdhZTdjOGQxMmFjYTJlM2ZkMDk1MWYxMmY3ZTlj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-04-29T03:13:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-05-30T15:27:50Z"
      },
      "message": "Test gArgs erroring on unknown args",
      "tree": {
        "sha": "3dea8712af250bf73df972a979e85cca1b0a054f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3dea8712af250bf73df972a979e85cca1b0a054f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/903055730b57ae7c8d12aca2e3fd0951f12f7e9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/903055730b57ae7c8d12aca2e3fd0951f12f7e9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/903055730b57ae7c8d12aca2e3fd0951f12f7e9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/903055730b57ae7c8d12aca2e3fd0951f12f7e9c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f8704d57f8fb2958a43534779b20201b77eecae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f8704d57f8fb2958a43534779b20201b77eecae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f8704d57f8fb2958a43534779b20201b77eecae"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d38275a9ca6e0846e9f5ee5cf18fa5d16fb7f465",
        "filename": "test/functional/feature_help.py",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/903055730b57ae7c8d12aca2e3fd0951f12f7e9c/test/functional/feature_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/903055730b57ae7c8d12aca2e3fd0951f12f7e9c/test/functional/feature_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_help.py?ref=903055730b57ae7c8d12aca2e3fd0951f12f7e9c",
        "patch": "@@ -36,6 +36,17 @@ def run_test(self):\n         output = self.nodes[0].process.stdout.read()\n         assert b'version' in output\n         self.log.info(\"Version text received: {} (...)\".format(output[0:60]))\n+\n+        # Test that arguments not in the help results in an error\n+        self.log.info(\"Start bitcoind with -fakearg to make sure it does not start\")\n+        self.nodes[0].start(extra_args=['-fakearg'], stderr=subprocess.PIPE, stdout=subprocess.PIPE)\n+        # Node should exit immediately and output an error to stderr\n+        ret_code = self.nodes[0].process.wait(timeout=1)\n+        assert_equal(ret_code, 1)\n+        output = self.nodes[0].process.stderr.read()\n+        assert b'Error parsing command line arguments' in output\n+        self.log.info(\"Error message received: {} (...)\".format(output[0:60]))\n+\n         # Clean up TestNode state\n         self.nodes[0].running = False\n         self.nodes[0].process = None"
      }
    ]
  }
]