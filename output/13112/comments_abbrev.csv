MarcoFalke,2018-04-29T11:06:20Z,Ping @MeshCollider who has been working on something similar.,https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-385243248,385243248,
MarcoFalke,2018-04-29T11:23:44Z,"Compile error due to missing override in https://github.com/achow101/bitcoin/blob/67699a9fd9a4c279c31f1d61ef44a16032739375/src/init.cpp#L79, I presume.",https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-385244064,385244064,
achow101,2018-04-29T15:13:31Z,"> What about known but not used arguments? For instance, `-disablewallet -changetype=bech32` should fail or nor?\n\nThis will not fail since `-changetype` is a valid argument independent of `-disablewallet`. The checker currently does not consider parameter interactions. Essentially it just checks for whether an argument is part of the help text.\n\n> Compile error due to missing override in h",https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-385258339,385258339,
promag,2018-04-30T08:22:50Z,">The checker currently does not consider parameter interactions.\n\nGot it.",https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-385337526,385337526,
jnewbery,2018-04-30T13:00:06Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-385391115,385391115,
achow101,2018-04-30T15:11:07Z,"> Should old arguments be in a legacy category? Otherwise launching with an outdated configuration might unnecessarily throw an error.\n\nThere could be a deprecated category where a warning is given if any arguments are in that category. Then we can remove the arguments entirely later.",https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-385428727,385428727,
meshcollider,2018-05-02T08:58:30Z,"Apologies for the delay in replying, I'm very swamped with work at the moment.\nIt's clear that something needs to be done to fix the arguments being silently ignored, I'm fine with this approach over the one I've been working on since it is an immediate fix. If my rework would still be useful for other reasons it could still be done after this is merged anyway. Either way this seems like a nice ",https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-385910494,385910494,
achow101,2018-05-05T05:25:49Z,Rebased,https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-386780688,386780688,
achow101,2018-05-08T18:28:00Z,"Addressed all of @MarcoFalke's comments.\n\nI've separated the first commit of this PR into #13190 and so this is now on top of that.",https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-387497792,387497792,
achow101,2018-05-09T18:46:51Z,Rebased onto master following merge of #13190 ,https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-387838034,387838034,
MarcoFalke,2018-05-10T03:31:57Z,Note that `git checkout b819262a5f5b9b07b0375e5573d3e66b5c555aa8  && make check` fails and breaks bisect.,https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-387941641,387941641,
achow101,2018-05-10T05:52:31Z,Squashed 81557f4fef79bd7eb3028933dd484fa14790ed3f into b819262a5f5b9b07b0375e5573d3e66b5c555aa8 which fixes the make check failure.,https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-387959268,387959268,
MarcoFalke,2018-05-10T14:17:35Z,Note that `git checkout 0ff0ea83ef4b1f1b94988e98602adc7648d114c4 && ./test/functional/test_runner.py` fails and breaks bisect.,https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-388067062,388067062,
achow101,2018-05-10T16:22:49Z,I've squashed down most of the commits as most were related to fixing tests.,https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-388105690,388105690,
promag,2018-05-13T10:40:24Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-388617356,388617356,
achow101,2018-05-13T16:10:35Z,Rebased,https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-388637855,388637855,
jonasschnelli,2018-05-16T06:16:46Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-389407047,389407047,
sipa,2018-05-27T20:07:48Z,utACK 22143e4c837e89de0dc6d94943dc791124d1532b. Only difference is addressing my last comment.,https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-392362489,392362489,
laanwj,2018-05-30T13:57:31Z,"This is beautiful ✨ , you almost timed this on my issue #1044's sixth birthday, why didn't I see this before.\n```bash\n(13112)$ src/bitcoind -esfsfjkshf\nError parsing command line arguments: Invalid parameter -esfsfjkshf\n(13112)$ src/bitcoind -sdfasdf -daemon\nError parsing command line arguments: Invalid parameter -sdfasdf\n(13112)$ src/bitcoind -sdfasdf=2342984 -daemon\nError parsing c",https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-393171831,393171831,
achow101,2018-05-30T15:28:16Z,Rebased and fixed the segfault.,https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-393206140,393206140,
laanwj,2018-05-30T17:07:46Z,tested ACK 903055730b57ae7c8d12aca2e3fd0951f12f7e9c (can confirm the gui crash is gone),https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-393240185,393240185,
MarcoFalke,2018-05-30T17:36:33Z,utACK 903055730b57ae7c8d12aca2e3fd0951f12f7e9c,https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-393251762,393251762,
Sjors,2018-05-31T06:57:34Z,"This might break one or two Docker containers that use $NETWORK=1 where that’s either “testnet” or “bitcoin”. Cc @NicolasDorier I’ve seen that in some lightning related stuff, though not sure if that was yours.\n\nAnyway, problems like that would be immediately obvious upon the first launch after upgrading.",https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-393428043,393428043,
promag,2018-04-29T07:56:57Z,Check if already exists with static assert?,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184874419,184874419,src/util.cpp
MarcoFalke,2018-04-29T11:18:11Z,nit: Please make this `enum class`,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184879569,184879569,src/util.h
achow101,2018-04-29T15:12:11Z,Done,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184886190,184886190,src/util.cpp
achow101,2018-04-29T15:12:15Z,Done,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184886192,184886192,src/util.h
promag,2018-04-30T12:47:10Z,This must stay even if #13120 is merged? Ping @MarcoFalke.,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184976723,184976723,src/init.cpp
MarcoFalke,2018-04-30T12:50:59Z,"Nah, this should be rebased and removed after (and if) #13120 is merged",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184977499,184977499,src/init.cpp
promag,2018-04-30T13:23:57Z,"Agree in this case, not sure about arguments removed in the future.",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184985070,184985070,src/init.cpp
MarcoFalke,2018-04-30T13:32:45Z,"I mean there is no urgent need to remove them. If they stick around for one release (marked as ""deprecated, but silently ignored"") that is fine.",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184987169,184987169,src/init.cpp
MarcoFalke,2018-05-02T18:38:22Z,"nit: I guess the key can just be the name, as two names with a different category don't make sense?",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r185597899,185597899,src/util.cpp
achow101,2018-05-02T18:41:00Z,It's a hack to make std::map sort the keys by category and then alphabetically when iterating over the map so that the help text comes out correctly.,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r185598699,185598699,src/util.cpp
promag,2018-05-02T22:57:28Z,"If the `m_available_args` type remains, then avoid the 2nd lookup:\n```cpp\nauto i = m_available_args.emplace(std::make_pair(cat, name), std::make_pair(help, debug_only));\nassert(i.second);\n```",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r185662566,185662566,src/util.cpp
promag,2018-05-02T22:59:37Z,"Still, it should reject duplicate names as @MarcoFalke suggests?",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r185662889,185662889,src/util.cpp
promag,2018-05-02T22:59:44Z,"Alternative that keeps argument sorted and can simplify `GetHelpMessage` (don't mind the names) and also prevent adding duplicate arguments.\n```cpp\nclass ArgsManager {\n    struct Arg\n    {\n        OptionsCategory m_category;\n        std::string m_name;\n        bool m_help;\n        bool m_debug_only;\n    };\n\n    std::map<std::string, Arg> m_available_args;\n    std::map<Optio",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r185662910,185662910,src/util.h
MarcoFalke,2018-05-03T03:05:11Z,"I doubt it matters in practice, so I consider it a code style nit.",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r185689455,185689455,src/util.cpp
achow101,2018-05-05T05:24:03Z,"That's certainly an option, but I think I'll leave it as is.",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r186253124,186253124,src/util.h
MarcoFalke,2018-05-06T22:02:07Z,"For clarity I'd prefer if this was either a static class member or named appropriately, like `SetChainParamsBaseOptions`",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r186304469,186304469,src/chainparamsbase.h
MarcoFalke,2018-05-06T22:14:41Z,"Forcing the args manager be aware of this particular option smells wrong. Also, the boolean logic could be simplified to just `show_debug || !arg.second.second`.\n\nFor your convenience I have prepared a suitable diff that cleanly applies and simplifies the code:\n\n<details><summary></summary>\n\n\n\n```dif\ndiff --git a/src/bench/bench_bitcoin.cpp b/src/bench/bench_bitcoin.cpp\nindex b",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r186304794,186304794,src/util.cpp
MarcoFalke,2018-05-06T22:16:38Z,nit: Should be `static` after #13163,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r186304846,186304846,src/bench/bench_bitcoin.cpp
MarcoFalke,2018-05-06T22:17:24Z,Nit: More suitable name could be `static void SetupCliArgs`. Including the static after #13163,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r186304862,186304862,src/bitcoin-cli.cpp
MarcoFalke,2018-05-06T22:18:18Z,"Nit: More suitable name could be `static void SetupTxArgs`, including the `static` after #13163",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r186304883,186304883,src/bitcoin-tx.cpp
MarcoFalke,2018-05-06T22:22:30Z,"nit: A more suitable name would be `SetupServerArgs`, since this is shared between bitcoind and the gui.",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r186305025,186305025,src/init.h
MarcoFalke,2018-05-06T22:22:59Z,nit: Should be `static` after #13163,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r186305050,186305050,src/qt/bitcoin.cpp
MarcoFalke,2018-05-09T18:56:31Z,Wouldn't it be more straightforward to `return false;` instead of throwing an exception here? If you need to pass a string you could pass in a non-const reference to an `std::string`.,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187141869,187141869,src/util.cpp
MarcoFalke,2018-05-09T18:57:58Z,"Also, why is it required in the first place to ignore invalid keys for the cli?",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187142276,187142276,src/util.cpp
achow101,2018-05-09T20:21:40Z,"It feels clunky to me to pass down a string for the error message than just throwing an exception.\n\ncli needs to ignore invalid keys in the bitcoin.conf because those ""invalid keys"" are usually just options for bitcoind that cli is not aware of. But cli still needs to read the bitcoin.conf to retrieve the rpcpassword.",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187164412,187164412,src/util.cpp
MarcoFalke,2018-05-10T14:26:59Z,"Using an exception for control flow is just another instance of ""goto"", imo. Even in python (where using exceptions for control flow is considered pythonic) we had serious issues that took several years to fix up completely.\nIf you prefer to pass a result object with a boolean indicating success and an optional error string, I think that is fine. But using an std::runtime_error as the class for ",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187346214,187346214,src/util.cpp
promag,2018-05-10T14:53:00Z,nit unrelated change but if you keep add const?,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187354650,187354650,src/test/getarg_tests.cpp
achow101,2018-05-10T16:23:19Z,"I changed this so std::string& is passed down for the error and that ParseParameters, ReadConfigFiles, and ReadConfigStream all return a bool.",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187382440,187382440,src/util.cpp
promag,2018-05-10T16:30:54Z,"nit, space after `,` (8 occurrences).",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187384499,187384499,src/bench/bench_bitcoin.cpp
promag,2018-05-10T16:49:22Z,"Maybe I'm missing something but I don't understand the second condition for 2 reasons:\n 1. could be out of the loop since it doesn't depend on `arg`;\n 2. `key.size() == 1` means that `key` is just `-`.",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187389575,187389575,src/util.cpp
promag,2018-05-10T16:50:00Z,Can you move this to a function to avoid duplicate code?,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187389763,187389763,src/util.cpp
promag,2018-05-10T16:51:34Z,"Early return?\n```cpp\nif (option_index == std::string::npos) return key;\n```",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187390160,187390160,src/util.cpp
MarcoFalke,2018-05-10T17:00:22Z,Note: You can install `clang-format` and run the https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy script to preempt whitespace nitpicking.,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187392531,187392531,src/bench/bench_bitcoin.cpp
promag,2018-05-10T17:18:43Z,If you do so then I think you can inline `GetArgWithoutNet` there.,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187397316,187397316,src/util.cpp
achow101,2018-05-10T17:53:22Z,Removed unrelated change,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187407350,187407350,src/test/getarg_tests.cpp
achow101,2018-05-10T17:54:04Z,clang-formatted,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187407558,187407558,src/bench/bench_bitcoin.cpp
achow101,2018-05-10T17:54:30Z,"Yeah, we need to ignore a key of `-` for bitcoin-cli. I moved the check for that outside of the loop.",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187407699,187407699,src/util.cpp
achow101,2018-05-10T17:54:48Z,Made it into a function and inlined `GetArgWithoutNet`.,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187407808,187407808,src/util.cpp
achow101,2018-05-10T17:54:52Z,Done,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187407824,187407824,src/util.cpp
sipa,2018-05-13T19:03:29Z,"I think @promag's suggestion is better; it's more readable (struct with named arguments), and should be more efficient when looking up arguments.\n\nAlso, it can avoid duplicating the Arg objects by using `std::map<OptionsCategory, std::map<std::string, const Arg*>> m_args_by_category` instead. ",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r187810335,187810335,src/util.h
achow101,2018-05-16T03:31:02Z,@sipa bit late for that now though. The commit with that change was merged in a different PR with just that commit.,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r188494564,188494564,src/util.h
jonasschnelli,2018-05-16T06:14:00Z,"Are you sure this is safe?\nI haven't tested, but following the code, `BitcoinApplication` constructor on L573 does use `gArgs.GetArg(""-uiplatform""`.",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r188512074,188512074,src/qt/bitcoin.cpp
achow101,2018-05-16T16:16:16Z,"I'm not sure about unsafe, but it certainly is not good practice to check for whether the argument is set before actually parsing the arguments. This also makes it so that the `-uiplatform` option is effectively ignored. It appears that I have been misled by the comment on this line.\n\nHow would you recommend that an error be shown to the user if they don't set the correct arguments?",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r188686414,188686414,src/qt/bitcoin.cpp
sipa,2018-05-16T17:25:46Z,"@achow101 I disagree - the current data structure were sufficient for the use case in that PR (producing the help message), plus that PR did the bulk of the needs-frequent-rebase changes (the `gArgs.AddArg` calls everywhere).\n\nI believe that a better data structure is possible for the new use case this PR introduces, and will probably simplify the PR too.",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r188707695,188707695,src/util.h
sipa,2018-05-16T18:18:39Z,"Checking command line arguments in a constructor generally seems to be bad practice, as it becomes pretty hard to reason about ordering. Is there a way that can be avoided (by passing in the argument value into the constructor instead?).",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r188724197,188724197,src/qt/bitcoin.cpp
achow101,2018-05-16T19:28:21Z,"I've made some changes to the structure that are similar to what was suggested. Now I am using a single map which has a map nested inside. The key for the outer map is the category, and the value is a map for all of the args in that category. I am also using a struct to hold the help text and debug_only bool. This should be more readable and make the help text printing function less hacky.",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r188745091,188745091,src/util.h
achow101,2018-05-16T21:49:12Z,"To get around this problem, I moved the platform style setup out of the constructor and set it up after `parseparameters`.",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r188783310,188783310,src/qt/bitcoin.cpp
sipa,2018-05-16T22:34:03Z,"In commit ""Use a struct for arguments and nested map for categories"":\n\nThis still violates the style guide; anything that has an else branch or more than a single statement in the then branch needs indentation/braces. What about using a `switch` here?",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r188792048,188792048,src/util.cpp
sipa,2018-05-16T22:50:50Z,"If you'd move this ""=""-splitting to `AddArg` instead, and would store the second part in `Arg` rather than in the key, this entire loop could be avoided and replaced with a map lookup.",https://github.com/bitcoin/bitcoin/pull/13112#discussion_r188795176,188795176,src/util.cpp
achow101,2018-05-17T00:54:34Z,Replaced with a `switch`.,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r188812938,188812938,src/util.cpp
achow101,2018-05-17T00:54:40Z,Done.,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r188812954,188812954,src/util.cpp
promag,2018-05-17T16:10:24Z,2x `const std::string&`,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r189016450,189016450,src/util.h
promag,2018-05-17T16:58:22Z,`emplace` returns a pair that indicates if there was an insertion. Could use that and avoid the `count` above.,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r189030700,189030700,src/util.cpp
achow101,2018-05-17T23:00:22Z,Done,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r189125266,189125266,src/util.h
achow101,2018-05-17T23:00:26Z,Done,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r189125274,189125274,src/util.cpp
sipa,2018-05-26T01:07:03Z,Faster: `if (arg_map.second.count(arg_no_net)) return true;`.,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r191035368,191035368,src/util.cpp
achow101,2018-05-26T05:02:20Z,Done,https://github.com/bitcoin/bitcoin/pull/13112#discussion_r191039939,191039939,src/util.cpp
