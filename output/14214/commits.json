[
  {
    "sha": "3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2NmYTM0YjMyYjdlZDlkN2JlZjA1YmFhMzY4MjdiNGIyNjIxOTdl",
    "commit": {
      "author": {
        "name": "Arvid Norberg",
        "email": "arvid@blockstream.io",
        "date": "2018-09-13T17:36:41Z"
      },
      "committer": {
        "name": "Arvid Norberg",
        "email": "arvid@blockstream.io",
        "date": "2018-09-13T17:36:41Z"
      },
      "message": "convert C-style (void) parameter lists to C++ style ()",
      "tree": {
        "sha": "f8a24afd1e7d6949040aff1e177b8adf7bc84f83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8a24afd1e7d6949040aff1e177b8adf7bc84f83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "f0a6a922fe64c16829649281f182dc8c5e153333",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0a6a922fe64c16829649281f182dc8c5e153333",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0a6a922fe64c16829649281f182dc8c5e153333"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 27,
      "deletions": 27
    },
    "files": [
      {
        "sha": "4064251c71c2f9ae3b342d026fa28fefdcedf91f",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -31,7 +31,7 @@ static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n class HTTPRPCTimer : public RPCTimerBase\n {\n public:\n-    HTTPRPCTimer(struct event_base* eventBase, std::function<void(void)>& func, int64_t millis) :\n+    HTTPRPCTimer(struct event_base* eventBase, std::function<void()>& func, int64_t millis) :\n         ev(eventBase, false, func)\n     {\n         struct timeval tv;\n@@ -53,7 +53,7 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n     {\n         return \"HTTP\";\n     }\n-    RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis) override\n+    RPCTimerBase* NewTimer(std::function<void()>& func, int64_t millis) override\n     {\n         return new HTTPRPCTimer(base, func, millis);\n     }"
      },
      {
        "sha": "e176746207a7d149f6b5bb2f03cbebffb281197b",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -505,7 +505,7 @@ static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n         delete self;\n }\n \n-HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void(void)>& _handler):\n+HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void()>& _handler):\n     deleteWhenTriggered(_deleteWhenTriggered), handler(_handler)\n {\n     ev = event_new(base, -1, 0, httpevent_callback_fn, this);"
      },
      {
        "sha": "63f96734f8e3f911aa06107369596156de84b6e8",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -134,7 +134,7 @@ class HTTPEvent\n      * deleteWhenTriggered deletes this event object after the event is triggered (and the handler called)\n      * handler is the handler to call when the event is triggered.\n      */\n-    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const std::function<void(void)>& handler);\n+    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const std::function<void()>& handler);\n     ~HTTPEvent();\n \n     /** Trigger the event. If tv is 0, trigger it immediately. Otherwise trigger it after\n@@ -143,7 +143,7 @@ class HTTPEvent\n     void trigger(struct timeval* tv);\n \n     bool deleteWhenTriggered;\n-    std::function<void(void)> handler;\n+    std::function<void()> handler;\n private:\n     struct event* ev;\n };"
      },
      {
        "sha": "326e71c8bbe406f106d307487d63b298e3bf3a24",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -684,7 +684,7 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n  *  Ensure that Bitcoin is running in a usable environment with all\n  *  necessary library support.\n  */\n-static bool InitSanityCheck(void)\n+static bool InitSanityCheck()\n {\n     if(!ECC_InitSanityCheck()) {\n         InitError(\"Elliptic curve cryptography sanity check failure. Aborting.\");"
      },
      {
        "sha": "0f695c07b7985563c92a632f762ee73ab5f96522",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -181,12 +181,12 @@ struct CExtKey {\n };\n \n /** Initialize the elliptic curve support. May not be called twice without calling ECC_Stop first. */\n-void ECC_Start(void);\n+void ECC_Start();\n \n /** Deinitialize the elliptic curve support. No-op if ECC_Start wasn't called first. */\n-void ECC_Stop(void);\n+void ECC_Stop();\n \n /** Check that required EC support is available at runtime. */\n-bool ECC_InitSanityCheck(void);\n+bool ECC_InitSanityCheck();\n \n #endif // BITCOIN_KEY_H"
      },
      {
        "sha": "1e950e2686a5f8aad42e1d49fad06a6eed2fc007",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -586,7 +586,7 @@ int main(int argc, char *argv[])\n     //   Need to pass name here as CAmount is a typedef (see http://qt-project.org/doc/qt-5/qmetatype.html#qRegisterMetaType)\n     //   IMPORTANT if it is no longer a typedef use the normal variant above\n     qRegisterMetaType< CAmount >(\"CAmount\");\n-    qRegisterMetaType< std::function<void(void)> >(\"std::function<void(void)>\");\n+    qRegisterMetaType< std::function<void()> >(\"std::function<void()>\");\n #ifdef ENABLE_WALLET\n     qRegisterMetaType<WalletModel*>(\"WalletModel*\");\n #endif"
      },
      {
        "sha": "03c744c12e262bf005ad9af2f18980cbc6f3cf4d",
        "filename": "src/qt/macnotificationhandler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/qt/macnotificationhandler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/qt/macnotificationhandler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macnotificationhandler.h?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -19,7 +19,7 @@ class MacNotificationHandler : public QObject\n     void showNotification(const QString &title, const QString &text);\n \n     /** check if OS can handle UserNotifications */\n-    bool hasUserNotificationCenterSupport(void);\n+    bool hasUserNotificationCenterSupport();\n     static MacNotificationHandler *instance();\n };\n "
      },
      {
        "sha": "3857befdf2a244fc4a072d9da2803931324c3fe5",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -101,7 +101,7 @@ class QtRPCTimerBase: public QObject, public RPCTimerBase\n {\n     Q_OBJECT\n public:\n-    QtRPCTimerBase(std::function<void(void)>& _func, int64_t millis):\n+    QtRPCTimerBase(std::function<void()>& _func, int64_t millis):\n         func(_func)\n     {\n         timer.setSingleShot(true);\n@@ -111,15 +111,15 @@ class QtRPCTimerBase: public QObject, public RPCTimerBase\n     ~QtRPCTimerBase() {}\n private:\n     QTimer timer;\n-    std::function<void(void)> func;\n+    std::function<void()> func;\n };\n \n class QtRPCTimerInterface: public RPCTimerInterface\n {\n public:\n     ~QtRPCTimerInterface() {}\n     const char *Name() { return \"Qt\"; }\n-    RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis)\n+    RPCTimerBase* NewTimer(std::function<void()>& func, int64_t millis)\n     {\n         return new QtRPCTimerBase(func, millis);\n     }"
      },
      {
        "sha": "9eb55880b30ea6ba41c65b49682f72c28f43b72f",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -540,7 +540,7 @@ void RPCUnsetTimerInterface(RPCTimerInterface *iface)\n         timerInterface = nullptr;\n }\n \n-void RPCRunLater(const std::string& name, std::function<void(void)> func, int64_t nSeconds)\n+void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nSeconds)\n {\n     if (!timerInterface)\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"No timer handler registered for RPC\");"
      },
      {
        "sha": "2d62a76f3c557903f68f40caec4c68dc307b864b",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -110,7 +110,7 @@ class RPCTimerInterface\n      * This is needed to cope with the case in which there is no HTTP server, but\n      * only GUI RPC console, and to break the dependency of pcserver on httprpc.\n      */\n-    virtual RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis) = 0;\n+    virtual RPCTimerBase* NewTimer(std::function<void()>& func, int64_t millis) = 0;\n };\n \n /** Set the factory function for timers */\n@@ -124,7 +124,7 @@ void RPCUnsetTimerInterface(RPCTimerInterface *iface);\n  * Run func nSeconds from now.\n  * Overrides previous timer <name> (if any).\n  */\n-void RPCRunLater(const std::string& name, std::function<void(void)> func, int64_t nSeconds);\n+void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nSeconds);\n \n typedef UniValue(*rpcfn_type)(const JSONRPCRequest& jsonRequest);\n "
      },
      {
        "sha": "552391d7d063e19544efaba3d02376ac33daebd3",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -159,7 +159,7 @@ void SingleThreadedSchedulerClient::MaybeScheduleProcessQueue() {\n }\n \n void SingleThreadedSchedulerClient::ProcessQueue() {\n-    std::function<void (void)> callback;\n+    std::function<void ()> callback;\n     {\n         LOCK(m_cs_callbacks_pending);\n         if (m_are_callbacks_running) return;\n@@ -187,7 +187,7 @@ void SingleThreadedSchedulerClient::ProcessQueue() {\n     callback();\n }\n \n-void SingleThreadedSchedulerClient::AddToProcessQueue(std::function<void (void)> func) {\n+void SingleThreadedSchedulerClient::AddToProcessQueue(std::function<void ()> func) {\n     assert(m_pscheduler);\n \n     {"
      },
      {
        "sha": "6c45f508eca96896b244571d0638b8a03998f5f2",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -40,7 +40,7 @@ class CScheduler\n     CScheduler();\n     ~CScheduler();\n \n-    typedef std::function<void(void)> Function;\n+    typedef std::function<void()> Function;\n \n     // Call func at/after time t\n     void schedule(Function f, boost::chrono::system_clock::time_point t=boost::chrono::system_clock::now());\n@@ -99,7 +99,7 @@ class SingleThreadedSchedulerClient {\n     CScheduler *m_pscheduler;\n \n     CCriticalSection m_cs_callbacks_pending;\n-    std::list<std::function<void (void)>> m_callbacks_pending GUARDED_BY(m_cs_callbacks_pending);\n+    std::list<std::function<void ()>> m_callbacks_pending GUARDED_BY(m_cs_callbacks_pending);\n     bool m_are_callbacks_running GUARDED_BY(m_cs_callbacks_pending) = false;\n \n     void MaybeScheduleProcessQueue();\n@@ -114,7 +114,7 @@ class SingleThreadedSchedulerClient {\n      * Practically, this means that callbacks can behave as if they are executed\n      * in order by a single thread.\n      */\n-    void AddToProcessQueue(std::function<void (void)> func);\n+    void AddToProcessQueue(std::function<void ()> func);\n \n     // Processes all remaining queue members on the calling thread, blocking until queue is empty\n     // Must be called after the CScheduler has no remaining processing threads!"
      },
      {
        "sha": "713e3e2ded31b904b082d7f40977c6e10b643ce5",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -200,7 +200,7 @@ static void TestChaCha20(const std::string &hexkey, uint64_t nonce, uint64_t see\n     BOOST_CHECK(out == outres);\n }\n \n-static std::string LongTestString(void) {\n+static std::string LongTestString() {\n     std::string ret;\n     for (int i=0; i<200000; i++) {\n         ret += (unsigned char)(i);"
      },
      {
        "sha": "75a387d7ec0fde4e8f28af59a204bc6d44e51187",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -1248,7 +1248,7 @@ fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific)\n     return fs::absolute(path, GetDataDir(net_specific));\n }\n \n-int ScheduleBatchPriority(void)\n+int ScheduleBatchPriority()\n {\n #ifdef SCHED_BATCH\n     const static sched_param param{0};"
      },
      {
        "sha": "f119385e48d4dcb4a4f1956949901e1f71e0233c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -347,7 +347,7 @@ std::string CopyrightHolders(const std::string& strPrefix);\n  * @return The return value of sched_setschedule(), or 1 on systems without\n  * sched_setschedule().\n  */\n-int ScheduleBatchPriority(void);\n+int ScheduleBatchPriority();\n \n namespace util {\n "
      },
      {
        "sha": "cb617ae6a5a74ee844260efd27cffa3dfe90356c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ccfa34b32b7ed9d7bef05baa36827b4b262197e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3ccfa34b32b7ed9d7bef05baa36827b4b262197e",
        "patch": "@@ -4682,7 +4682,7 @@ int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::D\n \n static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n \n-bool LoadMempool(void)\n+bool LoadMempool()\n {\n     const CChainParams& chainparams = Params();\n     int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n@@ -4759,7 +4759,7 @@ bool LoadMempool(void)\n     return true;\n }\n \n-bool DumpMempool(void)\n+bool DumpMempool()\n {\n     int64_t start = GetTimeMicros();\n "
      }
    ]
  }
]