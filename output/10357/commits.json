[
  {
    "sha": "0311836f6927aec4ba5687ea12af35df3c509682",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzExODM2ZjY5MjdhZWM0YmE1Njg3ZWExMmFmMzVkZjNjNTA5Njgy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-05-07T18:10:19Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-09-05T19:05:28Z"
      },
      "message": "Allow setting nMinimumChainWork on command line",
      "tree": {
        "sha": "5d1b35310828f7299e039476a52146140f6bb0fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d1b35310828f7299e039476a52146140f6bb0fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0311836f6927aec4ba5687ea12af35df3c509682",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0311836f6927aec4ba5687ea12af35df3c509682",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0311836f6927aec4ba5687ea12af35df3c509682",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0311836f6927aec4ba5687ea12af35df3c509682/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0e3cbbf081b74ed5322176dcda081c64076fd21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0e3cbbf081b74ed5322176dcda081c64076fd21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0e3cbbf081b74ed5322176dcda081c64076fd21"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 68,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6cacb9c8d565951c08f763a16c420b4f18616a9c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0311836f6927aec4ba5687ea12af35df3c509682/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0311836f6927aec4ba5687ea12af35df3c509682/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0311836f6927aec4ba5687ea12af35df3c509682",
        "patch": "@@ -354,6 +354,9 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n+    if (showDebug) {\n+        strUsage += HelpMessageOpt(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()));\n+    }\n     strUsage += HelpMessageOpt(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL));\n     strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n@@ -970,6 +973,20 @@ bool AppInitParameterInteraction()\n     else\n         LogPrintf(\"Validating signatures for all blocks.\\n\");\n \n+    if (gArgs.IsArgSet(\"-minimumchainwork\")) {\n+        const std::string minChainWorkStr = gArgs.GetArg(\"-minimumchainwork\", \"\");\n+        if (!IsHexNumber(minChainWorkStr)) {\n+            return InitError(strprintf(\"Invalid non-hex (%s) minimum chain work value specified\", minChainWorkStr));\n+        }\n+        nMinimumChainWork = UintToArith256(uint256S(minChainWorkStr));\n+    } else {\n+        nMinimumChainWork = UintToArith256(chainparams.GetConsensus().nMinimumChainWork);\n+    }\n+    LogPrintf(\"Setting nMinimumChainWork=%s\\n\", nMinimumChainWork.GetHex());\n+    if (nMinimumChainWork < UintToArith256(chainparams.GetConsensus().nMinimumChainWork)) {\n+        LogPrintf(\"Warning: nMinimumChainWork set below default value of %s\\n\", chainparams.GetConsensus().nMinimumChainWork.GetHex());\n+    }\n+\n     // mempool limits\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;"
      },
      {
        "sha": "3ee4e5596be1a08b4bf9603be4dc8701d62298e1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0311836f6927aec4ba5687ea12af35df3c509682/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0311836f6927aec4ba5687ea12af35df3c509682/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0311836f6927aec4ba5687ea12af35df3c509682",
        "patch": "@@ -466,7 +466,7 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n     // Make sure pindexBestKnownBlock is up to date, we'll need it.\n     ProcessBlockAvailability(nodeid);\n \n-    if (state->pindexBestKnownBlock == nullptr || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork || state->pindexBestKnownBlock->nChainWork < UintToArith256(consensusParams.nMinimumChainWork)) {\n+    if (state->pindexBestKnownBlock == nullptr || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork || state->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n         // This peer has nothing interesting.\n         return;\n     }"
      },
      {
        "sha": "6ec544290daa534879c4ab7ec5c9ebb3b0af57ba",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0311836f6927aec4ba5687ea12af35df3c509682/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0311836f6927aec4ba5687ea12af35df3c509682/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=0311836f6927aec4ba5687ea12af35df3c509682",
        "patch": "@@ -253,6 +253,31 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n+BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+{\n+    BOOST_CHECK(IsHexNumber(\"0x0\"));\n+    BOOST_CHECK(IsHexNumber(\"0\"));\n+    BOOST_CHECK(IsHexNumber(\"0x10\"));\n+    BOOST_CHECK(IsHexNumber(\"10\"));\n+    BOOST_CHECK(IsHexNumber(\"0xff\"));\n+    BOOST_CHECK(IsHexNumber(\"ff\"));\n+    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n+    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+\n+    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n+    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n+    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n+    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n+    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n+    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n+    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n+    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n+    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n+\n+}\n+\n BOOST_AUTO_TEST_CASE(util_seed_insecure_rand)\n {\n     SeedInsecureRand(true);"
      },
      {
        "sha": "741680e93f79609351925af29edece852483dc0a",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0311836f6927aec4ba5687ea12af35df3c509682/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0311836f6927aec4ba5687ea12af35df3c509682/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=0311836f6927aec4ba5687ea12af35df3c509682",
        "patch": "@@ -65,6 +65,19 @@ bool IsHex(const std::string& str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n+bool IsHexNumber(const std::string& str)\n+{\n+    size_t starting_location = 0;\n+    if (str.size() > 2 && *str.begin() == '0' && *(str.begin()+1) == 'x') {\n+        starting_location = 2;\n+    }\n+    for (auto c : str.substr(starting_location)) {\n+        if (HexDigit(c) < 0) return false;\n+    }\n+    // Return false for empty string or \"0x\".\n+    return (str.size() > starting_location);\n+}\n+\n std::vector<unsigned char> ParseHex(const char* psz)\n {\n     // convert hex dump to vector"
      },
      {
        "sha": "192f33fb290e037d0fc5a692f35c7187dca536ba",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0311836f6927aec4ba5687ea12af35df3c509682/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0311836f6927aec4ba5687ea12af35df3c509682/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=0311836f6927aec4ba5687ea12af35df3c509682",
        "patch": "@@ -38,7 +38,13 @@ std::string SanitizeString(const std::string& str, int rule = SAFE_CHARS_DEFAULT\n std::vector<unsigned char> ParseHex(const char* psz);\n std::vector<unsigned char> ParseHex(const std::string& str);\n signed char HexDigit(char c);\n+/* Returns true if each character in str is a hex character, and has an even\n+ * number of hex digits.*/\n bool IsHex(const std::string& str);\n+/**\n+* Return true if the string is a hex number, optionally prefixed with \"0x\"\n+*/\n+bool IsHexNumber(const std::string& str);\n std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid = nullptr);\n std::string DecodeBase64(const std::string& str);\n std::string EncodeBase64(const unsigned char* pch, size_t len);"
      },
      {
        "sha": "0edc9bc32a833f6d08a5dc5e3ac75bf9138e81a9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0311836f6927aec4ba5687ea12af35df3c509682/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0311836f6927aec4ba5687ea12af35df3c509682/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0311836f6927aec4ba5687ea12af35df3c509682",
        "patch": "@@ -83,6 +83,7 @@ int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n \n uint256 hashAssumeValid;\n+arith_uint256 nMinimumChainWork;\n \n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n@@ -1035,8 +1036,6 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n \n bool IsInitialBlockDownload()\n {\n-    const CChainParams& chainParams = Params();\n-\n     // Once this function has returned false, it must remain false.\n     static std::atomic<bool> latchToFalse{false};\n     // Optimization: pre-test latch before taking the lock.\n@@ -1050,7 +1049,7 @@ bool IsInitialBlockDownload()\n         return true;\n     if (chainActive.Tip() == nullptr)\n         return true;\n-    if (chainActive.Tip()->nChainWork < UintToArith256(chainParams.GetConsensus().nMinimumChainWork))\n+    if (chainActive.Tip()->nChainWork < nMinimumChainWork)\n         return true;\n     if (chainActive.Tip()->GetBlockTime() < (GetTime() - nMaxTipAge))\n         return true;\n@@ -1670,7 +1669,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         if (it != mapBlockIndex.end()) {\n             if (it->second->GetAncestor(pindex->nHeight) == pindex &&\n                 pindexBestHeader->GetAncestor(pindex->nHeight) == pindex &&\n-                pindexBestHeader->nChainWork >= UintToArith256(chainparams.GetConsensus().nMinimumChainWork)) {\n+                pindexBestHeader->nChainWork >= nMinimumChainWork) {\n                 // This block is a member of the assumed verified chain and an ancestor of the best header.\n                 // The equivalent time check discourages hash power from extorting the network via DOS attack\n                 //  into accepting an invalid block through telling users they must manually set assumevalid."
      },
      {
        "sha": "214d29173cf7da290feb9c1174c3df84fd47b780",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0311836f6927aec4ba5687ea12af35df3c509682/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0311836f6927aec4ba5687ea12af35df3c509682/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0311836f6927aec4ba5687ea12af35df3c509682",
        "patch": "@@ -186,6 +186,9 @@ extern bool fEnableReplacement;\n /** Block hash whose ancestors we will assume to have valid scripts without checking them. */\n extern uint256 hashAssumeValid;\n \n+/** Minimum work we will assume exists on some valid chain. */\n+extern arith_uint256 nMinimumChainWork;\n+\n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;\n "
      }
    ]
  },
  {
    "sha": "eac64bb7a3b6aba747403b23b3b1d3609843f8db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWM2NGJiN2EzYjZhYmE3NDc0MDNiMjNiM2IxZDM2MDk4NDNmOGRi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-05-08T13:59:00Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-09-05T19:09:21Z"
      },
      "message": "[qa] Test nMinimumChainWork\n\nNodes don't consider themselves out of \"initial block download\" until\ntheir active chain has more work than nMinimumChainWork.\n\nWhile in initial block download, nodes won't relay blocks to their\npeers, so test that this parameter functions as intended by verifying\nthat block relay only succeeds past a given node once its\nnMinimumChainWork has been exceeded.",
      "tree": {
        "sha": "cb377213d70ad814703aac9f8ba79a87b2747cdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb377213d70ad814703aac9f8ba79a87b2747cdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eac64bb7a3b6aba747403b23b3b1d3609843f8db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac64bb7a3b6aba747403b23b3b1d3609843f8db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eac64bb7a3b6aba747403b23b3b1d3609843f8db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac64bb7a3b6aba747403b23b3b1d3609843f8db/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0311836f6927aec4ba5687ea12af35df3c509682",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0311836f6927aec4ba5687ea12af35df3c509682",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0311836f6927aec4ba5687ea12af35df3c509682"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c7579d2548e4642ffc65c07dcc000f55a39825d0",
        "filename": "test/functional/minchainwork.py",
        "status": "added",
        "additions": 81,
        "deletions": 0,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eac64bb7a3b6aba747403b23b3b1d3609843f8db/test/functional/minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eac64bb7a3b6aba747403b23b3b1d3609843f8db/test/functional/minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/minchainwork.py?ref=eac64bb7a3b6aba747403b23b3b1d3609843f8db",
        "patch": "@@ -0,0 +1,81 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for setting nMinimumChainWork on command line.\n+\n+Nodes don't consider themselves out of \"initial block download\" until\n+their active chain has more work than nMinimumChainWork.\n+\n+Nodes don't download blocks from a peer unless the peer's best known block\n+has more work than nMinimumChainWork.\n+\n+While in initial block download, nodes won't relay blocks to their peers, so\n+test that this parameter functions as intended by verifying that block relay\n+only succeeds past a given node once its nMinimumChainWork has been exceeded.\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import sync_blocks, connect_nodes, assert_equal\n+\n+# 2 hashes required per regtest block (with no difficulty adjustment)\n+REGTEST_WORK_PER_BLOCK = 2\n+\n+class MinimumChainWorkTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n+        self.node_min_work = [0, 101, 101]\n+\n+    def setup_network(self):\n+        # This test relies on the chain setup being:\n+        # node0 <- node1 <- node2\n+        # Before leaving IBD, nodes prefer to download blocks from outbound\n+        # peers, so ensure that we're mining on an outbound peer and testing\n+        # block relay to inbound peers.\n+        self.setup_nodes()\n+        for i in range(self.num_nodes-1):\n+            connect_nodes(self.nodes[i+1], i)\n+\n+    def run_test(self):\n+        # Start building a chain on node0.  node2 shouldn't be able to sync until node1's\n+        # minchainwork is exceeded\n+        starting_chain_work = REGTEST_WORK_PER_BLOCK # Genesis block's work\n+        self.log.info(\"Testing relay across node %d (minChainWork = %d)\", 1, self.node_min_work[1])\n+\n+        starting_blockcount = self.nodes[2].getblockcount()\n+\n+        num_blocks_to_generate = int((self.node_min_work[1] - starting_chain_work) / REGTEST_WORK_PER_BLOCK)\n+        self.log.info(\"Generating %d blocks on node0\", num_blocks_to_generate)\n+        hashes = self.nodes[0].generate(num_blocks_to_generate)\n+\n+        self.log.info(\"Node0 current chain work: %s\", self.nodes[0].getblockheader(hashes[-1])['chainwork'])\n+\n+        # Sleep a few seconds and verify that node2 didn't get any new blocks\n+        # or headers.  We sleep, rather than sync_blocks(node0, node1) because\n+        # it's reasonable either way for node1 to get the blocks, or not get\n+        # them (since they're below node1's minchainwork).\n+        time.sleep(3)\n+\n+        self.log.info(\"Verifying node 2 has no more blocks than before\")\n+        self.log.info(\"Blockcounts: %s\", [n.getblockcount() for n in self.nodes])\n+        # Node2 shouldn't have any new headers yet, because node1 should not\n+        # have relayed anything.\n+        assert_equal(len(self.nodes[2].getchaintips()), 1)\n+        assert_equal(self.nodes[2].getchaintips()[0]['height'], 0)\n+\n+        assert self.nodes[1].getbestblockhash() != self.nodes[0].getbestblockhash()\n+        assert_equal(self.nodes[2].getblockcount(), starting_blockcount)\n+\n+        self.log.info(\"Generating one more block\")\n+        self.nodes[0].generate(1)\n+\n+        self.log.info(\"Verifying nodes are all synced\")\n+        self.sync_all()\n+        self.log.info(\"Blockcounts: %s\", [n.getblockcount() for n in self.nodes])\n+\n+if __name__ == '__main__':\n+    MinimumChainWorkTest().main()"
      },
      {
        "sha": "8dbe6247ee5ed5eb6d9c919ed81bdb52c1c5b79d",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eac64bb7a3b6aba747403b23b3b1d3609843f8db/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eac64bb7a3b6aba747403b23b3b1d3609843f8db/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=eac64bb7a3b6aba747403b23b3b1d3609843f8db",
        "patch": "@@ -121,6 +121,7 @@\n     'bip65-cltv-p2p.py',\n     'uptime.py',\n     'resendwallettransactions.py',\n+    'minchainwork.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      }
    ]
  }
]