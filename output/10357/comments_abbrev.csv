gmaxwell,2017-05-08T21:22:45Z,"Yea, sure, conceptack as a hidden setting.",https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-299994877,299994877,
sdaftuar,2017-05-09T11:59:10Z,I just realized this doesn't quite work cleanly with #10345; closing for now.,https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-300141728,300141728,
sdaftuar,2017-06-13T21:42:04Z,"This needed a rebase.\n\n@jnewbery Thanks for the review.  I addressed or responded to most of your comments.  I think the only thing I didn't do was require that the `-minimumchainwork` command line value start with ""0x"", mostly because I struggled to (a) figure out how to concisely explain that to the user in the help message, and (b) I noticed that GetHex() already doesn't print a ""0x"", so it",https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-308257212,308257212,
jnewbery,2017-06-14T18:11:15Z,"tested ACK https://github.com/bitcoin/bitcoin/pull/10357/commits/f1041efca442dd0b56dbfdd99dedcef333a90e75. Very nice work with the test coverage for the new `IsHexNumber()` util function.\n\nAs for not requiring a leading `0x`, I think that's fine. The only minor problem I could see is someone entering a decimal number and the parser interpreting it as hex. That's now mitigated by:\n- the help ",https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-308513984,308513984,
laanwj,2017-06-26T12:40:22Z,"Concept ACK.\nMy only remark on this is that it's unfortunate that after all the work we did to move things into a consensus parameters structure and pass it around, this moves `nMinimumChainWork` back to a global :(\n",https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-311047480,311047480,
sdaftuar,2017-06-29T17:42:50Z,"> My only remark on this is that it's unfortunate that after all the work we did to move things into a consensus parameters structure and pass it around, this moves nMinimumChainWork back to a global :(\n\nI agree -- any suggestions for a better paradigm for user-configurable, chain-specific parameters?",https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-312041113,312041113,
sdaftuar,2017-08-03T18:35:25Z,"Perhaps this is too late for 0.15, but just wanted to mention that 0.15 will include another usage of nMinimumChainWork (#10345) that advanced users may sometimes want to work around.",https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-320053988,320053988,
laanwj,2017-08-22T06:16:00Z,"> I agree -- any suggestions for a better paradigm for user-configurable, chain-specific parameters?\n\nI wish we'd left some of the chain parameters mutable, at least during the init process, so they don't have to migrate back to globals to override their value.\n\n> Perhaps this is too late for 0.15\n\nYes, needs rebase though.",https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-323929689,323929689,
sdaftuar,2017-08-31T17:14:17Z,"Rebased.  \n\n@laanwj I'd prefer to not refactor the chain parameters here, and leave that work for a future PR -- it seems that there are other PRs in progress (eg #8994) separately addressing how that code is organized; let me know if you disagree.",https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-326362670,326362670,
laanwj,2017-08-31T19:47:33Z,"@sdaftuar Sure, I was just expressing my sadness there that the idea of\nwell-encapsulated chain parameters didn't work out. I certainly did not\nmean it as a blocker.\n\nOn Aug 31, 2017 10:14 AM, ""Suhas Daftuar"" <notifications@github.com> wrote:\n\n> Rebased.\n>\n> @laanwj <https://github.com/laanwj> I'd prefer to not refactor the chain\n> parameters here, and leave that work for a future PR -- i",https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-326401803,326401803,
meshcollider,2017-09-04T03:50:28Z,utACK https://github.com/bitcoin/bitcoin/commit/317cc116a7c64e66525936927baba1bfdb4bfaf7,https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-326860269,326860269,
sdaftuar,2017-09-05T16:55:12Z,"@jnewbery Mostly addressed your nits I think (just renamed the confusing `it` variable to `c`, and added a comment).  Previous version is here for comparison: https://github.com/sdaftuar/bitcoin/commit/317cc116a7c64e66525936927baba1bfdb4bfaf7\n\nI think you're totally right that we could simplify this (and possibly other) tests by just adding a way to know if a node is in IBD.  I'd like to do th",https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-327238023,327238023,
sdaftuar,2017-09-05T19:10:03Z,Actually this needed a rebase due to the test framework changes.,https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-327273715,327273715,
laanwj,2017-09-06T16:35:32Z,"> I think you're totally right that we could simplify this (and possibly other) tests by just adding a way to know if a node is in IBD. I'd like to do that, but I'm not sure it makes sense to complicate this PR with discussion over how that information should be made available.\n\nYes, I think it makes sense to discuss (there's arguments for and against it re: proper testing), but let's not exte",https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-327541365,327541365,
laanwj,2017-09-06T16:57:06Z,utACK eac64bb,https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-327547597,327547597,
MarcoFalke,2017-09-06T20:43:55Z,post merge utACK eac64bb7a3b6aba747403b23b3b1d3609843f8db,https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-327607353,327607353,
MarcoFalke,2017-11-02T16:57:59Z,"Tagging for backport, as the 0.15.0.2 tests rely on this.",https://github.com/bitcoin/bitcoin/pull/10357#issuecomment-341488415,341488415,
jnewbery,2017-06-08T21:04:47Z,"I suggest:\n- always log the nMinimumChainWork and default value (even if it hasn't been overwritten in config) \n- issue a stronger warning in the log if `-minimumchainwork` is set lower than the default value eg ""nMinimumChainWork is set below the default value. This node may sync to a chain which is not the known most-work blockchain.""",https://github.com/bitcoin/bitcoin/pull/10357#discussion_r120998668,120998668,src/init.cpp
jnewbery,2017-06-08T21:05:10Z,"suggest ""Minimum work assumed to exist on a valid chain *in hex*""",https://github.com/bitcoin/bitcoin/pull/10357#discussion_r120998733,120998733,src/init.cpp
jnewbery,2017-06-08T21:19:57Z,"default number of nodes in the base class is 4, so you don't need to override this here.",https://github.com/bitcoin/bitcoin/pull/10357#discussion_r121001613,121001613,test/functional/minchainwork.py
jnewbery,2017-06-08T21:25:10Z,"The default test topology is a chain node0 <-> node1 <-> node2 <-> node3, so you don't need to override this method. You may want to move the comment into the module docstring.",https://github.com/bitcoin/bitcoin/pull/10357#discussion_r121002605,121002605,test/functional/minchainwork.py
jnewbery,2017-06-08T21:25:43Z,Use `REGTEST_WORK_PER_BLOCK` instead of hardcoding this?,https://github.com/bitcoin/bitcoin/pull/10357#discussion_r121002725,121002725,test/functional/minchainwork.py
jnewbery,2017-06-08T21:26:05Z,"I think this `2` refers to work per block? In that case, replace with `REGTEST_WORK_PER_BLOCK`",https://github.com/bitcoin/bitcoin/pull/10357#discussion_r121002803,121002803,test/functional/minchainwork.py
sdaftuar,2017-06-13T21:36:57Z,"Regarding the stronger warning: it's hard to exactly say what may happen if nMinimumChainWork is too low, as it's just an anti-DoS threshold.  There's no reason to think that we would then sync to something that's not the most-work blockchain, unless there were some other attack going on.\n\nI decided that since this is already a hidden option it's sufficient to just log a warning if the value i",https://github.com/bitcoin/bitcoin/pull/10357#discussion_r121803599,121803599,src/init.cpp
sdaftuar,2017-06-13T21:36:59Z,"I ended up changing this test to use 3 nodes, but I wanted to fully specify the topology since the test depends on it -- eg if someone were to change the default I thought it would be unfortunate if the test then broke.",https://github.com/bitcoin/bitcoin/pull/10357#discussion_r121803608,121803608,test/functional/minchainwork.py
sdaftuar,2017-06-14T12:59:04Z,"On further thought, perhaps I should add a warning if you set it above the default value?  Because that could actually prevent you from syncing.",https://github.com/bitcoin/bitcoin/pull/10357#discussion_r121938454,121938454,src/init.cpp
jnewbery,2017-06-14T18:07:33Z,"If someone changed the default topology, it'd be unfortunate if a lot of tests *didn't* break! (since the topology is fundamental assumption for how the test nodes should behave)\n\nAnyway, this was just a style nit - I have no objection to keeping the `setup_network()` override.",https://github.com/bitcoin/bitcoin/pull/10357#discussion_r122022548,122022548,test/functional/minchainwork.py
jnewbery,2017-08-31T19:20:07Z,"`auto it` is confusing for me since `it` isn't an iterator and `substr` is returning a string object. Obviously you can for loop over a string since it's a sequence of chars. Perhaps this would be clearer:\n\n```\nfor (const signed char c : str.substr(starting_location)) {\n    if (HexDigit(c) < 0) return false;\n```",https://github.com/bitcoin/bitcoin/pull/10357#discussion_r136425531,136425531,src/utilstrencodings.cpp
jnewbery,2017-08-31T19:21:09Z,"Perhaps add a comment. `Return false for empty string or ""0x""`. It may also be clearer to place this at the top of the function.",https://github.com/bitcoin/bitcoin/pull/10357#discussion_r136425757,136425757,src/utilstrencodings.cpp
