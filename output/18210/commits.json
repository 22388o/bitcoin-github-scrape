[
  {
    "sha": "bd7e530f010d43816bb05d6f1590d1cd36cdaa2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDdlNTMwZjAxMGQ0MzgxNmJiMDVkNmYxNTkwZDFjZDM2Y2RhYTJj",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2020-02-25T19:05:48Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2020-06-02T06:03:02Z"
      },
      "message": "This PR adds initial support for type hints checking in python scripts.\n\nSupport for type hints was introduced in Python 3.5. Type hints make it easier to read and review code in my opinion. Also an IDE may discover a potential bug sooner. Yet, as PEP 484 says: \"It should also be emphasized that Python will remain a dynamically typed language, and the authors have no desire to ever make type hints mandatory, even by convention.\"\n\nMypy is used in lint-python.sh to do the type checking. The package is standard so there is little chance that it will be abandoned. Mypy checks that type hints in source code are correct when they are not, it fails with an error.\n\nUseful resources:\n\n* https://docs.python.org/3.5/library/typing.html\n* https://www.python.org/dev/peps/pep-0484/",
      "tree": {
        "sha": "b6d140aa5fe2cf2b851d2b6e140e26eaa44e996a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6d140aa5fe2cf2b851d2b6e140e26eaa44e996a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bc7751cadbd038faf8ac1d62cda23fcf00d4cc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bc7751cadbd038faf8ac1d62cda23fcf00d4cc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bc7751cadbd038faf8ac1d62cda23fcf00d4cc2"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 45,
      "deletions": 33
    },
    "files": [
      {
        "sha": "23b609026503de4a540a828ae099ed72b0e3b043",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=bd7e530f010d43816bb05d6f1590d1cd36cdaa2c",
        "patch": "@@ -127,6 +127,7 @@ linux-build\n win32-build\n test/config.ini\n test/cache/*\n+test/.mypy_cache/\n \n !src/leveldb*/Makefile\n "
      },
      {
        "sha": "26b576c1ae26fd065679bb30bdce2348de5bc196",
        "filename": "ci/lint/04_install.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/ci/lint/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/ci/lint/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/04_install.sh?ref=bd7e530f010d43816bb05d6f1590d1cd36cdaa2c",
        "patch": "@@ -9,6 +9,7 @@ export LC_ALL=C\n travis_retry pip3 install codespell==1.15.0\n travis_retry pip3 install flake8==3.7.8\n travis_retry pip3 install yq\n+travis_retry pip3 install mypy==0.700\n \n SHELLCHECK_VERSION=v0.6.0\n curl -s \"https://storage.googleapis.com/shellcheck/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz\" | tar --xz -xf - --directory /tmp/"
      },
      {
        "sha": "aff5f714f2b858d159a25cccc4146588b933aed7",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=bd7e530f010d43816bb05d6f1590d1cd36cdaa2c",
        "patch": "@@ -26,10 +26,12 @@ don't have test cases for.\n   The Travis linter also checks this, but [possibly not in all cases](https://github.com/bitcoin/bitcoin/pull/14884#discussion_r239585126).\n - See [the python lint script](/test/lint/lint-python.sh) that checks for violations that\n   could lead to bugs and issues in the test code.\n+- Use [type hints](https://docs.python.org/3/library/typing.html) in your code to improve code readability\n+  and to detect possible bugs earlier.\n - Avoid wildcard imports\n - Use a module-level docstring to describe what the test is testing, and how it\n   is testing it.\n-- When subclassing the BitcoinTestFramwork, place overrides for the\n+- When subclassing the BitcoinTestFramework, place overrides for the\n   `set_test_params()`, `add_options()` and `setup_xxxx()` methods at the top of\n   the subclass, then locally-defined helper methods, then the `run_test()` method.\n - Use `'{}'.format(x)` for string formatting, not `'%s' % x`.\n@@ -45,7 +47,7 @@ don't have test cases for.\n     - `rpc` for tests for individual RPC methods or features, eg `rpc_listtransactions.py`\n     - `tool` for tests for tools, eg `tool_wallet.py`\n     - `wallet` for tests for wallet features, eg `wallet_keypool.py`\n-- use an underscore to separate words\n+- Use an underscore to separate words\n     - exception: for tests for specific RPCs or command line options which don't include underscores, name the test after the exact RPC or argument name, eg `rpc_decodescript.py`, not `rpc_decode_script.py`\n - Don't use the redundant word `test` in the name, eg `interface_zmq.py`, not `interface_zmq_test.py`\n "
      },
      {
        "sha": "6e72db1d966c03ce027995a5ee058d039c7a891b",
        "filename": "test/functional/data/invalid_txs.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/test/functional/data/invalid_txs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/test/functional/data/invalid_txs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/invalid_txs.py?ref=bd7e530f010d43816bb05d6f1590d1cd36cdaa2c",
        "patch": "@@ -21,6 +21,7 @@\n \"\"\"\n import abc\n \n+from typing import Optional\n from test_framework.messages import (\n     COutPoint,\n     CTransaction,\n@@ -56,7 +57,7 @@ class BadTxTemplate:\n     __metaclass__ = abc.ABCMeta\n \n     # The expected error code given by bitcoind upon submission of the tx.\n-    reject_reason = \"\"\n+    reject_reason = \"\"  # type: Optional[str]\n \n     # Only specified if it differs from mempool acceptance error.\n     block_reject_reason = \"\""
      },
      {
        "sha": "8803086213116ff6811daca5c440095b8f58ede3",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=bd7e530f010d43816bb05d6f1590d1cd36cdaa2c",
        "patch": "@@ -295,7 +295,7 @@ def func_wrapper(self, *args, **kwargs):\n \n         return func_wrapper\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_non_witness_transaction(self):\n         \"\"\"See if sending a regular transaction works, and create a utxo to use in later tests.\"\"\"\n         # Mine a block with an anyone-can-spend coinbase,\n@@ -324,7 +324,7 @@ def test_non_witness_transaction(self):\n         self.utxo.append(UTXO(tx.sha256, 0, 49 * 100000000))\n         self.nodes[0].generate(1)\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_unnecessary_witness_before_segwit_activation(self):\n         \"\"\"Verify that blocks with witnesses are rejected before activation.\"\"\"\n \n@@ -355,7 +355,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_block_relay(self):\n         \"\"\"Test that block requests to NODE_WITNESS peer are with MSG_WITNESS_FLAG.\n \n@@ -451,7 +451,7 @@ def test_block_relay(self):\n             self.old_node.announce_tx_and_wait_for_getdata(block4.vtx[0])\n             assert block4.sha256 not in self.old_node.getdataset\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_v0_outputs_arent_spendable(self):\n         \"\"\"Test that v0 outputs aren't spendable before segwit activation.\n \n@@ -533,7 +533,7 @@ def test_v0_outputs_arent_spendable(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(txid, 2, value))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_getblocktemplate_before_lockin(self):\n         txid = int(self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1), 16)\n \n@@ -559,7 +559,7 @@ def test_getblocktemplate_before_lockin(self):\n         self.nodes[0].generate(1)\n         self.sync_blocks()\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_witness_tx_relay_before_segwit_activation(self):\n \n         # Generate a transaction that doesn't require a witness, but send it\n@@ -601,7 +601,7 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx_hash, 0, tx_value))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_standardness_v0(self):\n         \"\"\"Test V0 txout standardness.\n \n@@ -679,7 +679,7 @@ def test_standardness_v0(self):\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n \n-    @subtest\n+    @subtest  # type: ignore\n     def advance_to_segwit_active(self):\n         \"\"\"Mine enough blocks to activate segwit.\"\"\"\n         assert not softfork_active(self.nodes[0], 'segwit')\n@@ -690,7 +690,7 @@ def advance_to_segwit_active(self):\n         assert softfork_active(self.nodes[0], 'segwit')\n         self.segwit_active = True\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_p2sh_witness(self):\n         \"\"\"Test P2SH wrapped witness programs.\"\"\"\n \n@@ -759,7 +759,7 @@ def test_p2sh_witness(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(spend_tx.sha256, 0, spend_tx.vout[0].nValue))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_witness_commitments(self):\n         \"\"\"Test witness commitments.\n \n@@ -849,7 +849,7 @@ def test_witness_commitments(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_block_malleability(self):\n \n         # Make sure that a block that has too big a virtual size\n@@ -889,7 +889,7 @@ def test_block_malleability(self):\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(0)]\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_witness_block_size(self):\n         # TODO: Test that non-witness carrying blocks can't exceed 1MB\n         # Skipping this test for now; this is covered in p2p-fullblocktest.py\n@@ -967,7 +967,7 @@ def test_witness_block_size(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_submit_block(self):\n         \"\"\"Test that submitblock adds the nonce automatically when possible.\"\"\"\n         block = self.build_next_block()\n@@ -1003,7 +1003,7 @@ def test_submit_block(self):\n         # Tip should not advance!\n         assert self.nodes[0].getbestblockhash() != block_2.hash\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_extra_witness_data(self):\n         \"\"\"Test extra witness data in a transaction.\"\"\"\n \n@@ -1076,7 +1076,7 @@ def test_extra_witness_data(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_max_witness_push_length(self):\n         \"\"\"Test that witness stack can only allow up to 520 byte pushes.\"\"\"\n \n@@ -1113,7 +1113,7 @@ def test_max_witness_push_length(self):\n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_max_witness_program_length(self):\n         \"\"\"Test that witness outputs greater than 10kB can't be spent.\"\"\"\n \n@@ -1161,7 +1161,7 @@ def test_max_witness_program_length(self):\n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_witness_input_length(self):\n         \"\"\"Test that vin length must match vtxinwit length.\"\"\"\n \n@@ -1243,7 +1243,7 @@ def serialize_with_witness(self):\n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_tx_relay_after_segwit_activation(self):\n         \"\"\"Test transaction relay after segwit activation.\n \n@@ -1336,7 +1336,7 @@ def test_tx_relay_after_segwit_activation(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_segwit_versions(self):\n         \"\"\"Test validity of future segwit version transactions.\n \n@@ -1418,7 +1418,7 @@ def test_segwit_versions(self):\n         # Add utxo to our list\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_premature_coinbase_witness_spend(self):\n \n         block = self.build_next_block()\n@@ -1453,7 +1453,7 @@ def test_premature_coinbase_witness_spend(self):\n         test_witness_block(self.nodes[0], self.test_node, block2, accepted=True)\n         self.sync_blocks()\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_uncompressed_pubkey(self):\n         \"\"\"Test uncompressed pubkey validity in segwit transactions.\n \n@@ -1558,7 +1558,7 @@ def test_uncompressed_pubkey(self):\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         self.utxo.append(UTXO(tx5.sha256, 0, tx5.vout[0].nValue))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_signature_version_1(self):\n \n         key = ECKey()\n@@ -1740,7 +1740,7 @@ def test_signature_version_1(self):\n         for i in range(len(tx.vout)):\n             self.utxo.append(UTXO(tx.sha256, i, tx.vout[i].nValue))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_non_standard_witness_blinding(self):\n         \"\"\"Test behavior of unnecessary witnesses in transactions does not blind the node for the transaction\"\"\"\n \n@@ -1794,7 +1794,7 @@ def test_non_standard_witness_blinding(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_non_standard_witness(self):\n         \"\"\"Test detection of non-standard P2WSH witness\"\"\"\n         pad = chr(1).encode('latin-1')\n@@ -1894,7 +1894,7 @@ def test_non_standard_witness(self):\n \n         self.utxo.pop(0)\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n@@ -1916,7 +1916,7 @@ def test_upgrade_after_activation(self):\n             assert_equal(self.nodes[0].getblock(block_hash), self.nodes[2].getblock(block_hash))\n             height -= 1\n \n-    @subtest\n+    @subtest  # type: ignore\n     def test_witness_sigops(self):\n         \"\"\"Test sigop counting is correct inside witnesses.\"\"\"\n "
      },
      {
        "sha": "bc1b5b26fc58f72c094235ed4bd8eb7243d6d04d",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=bd7e530f010d43816bb05d6f1590d1cd36cdaa2c",
        "patch": "@@ -9,6 +9,7 @@\n import hashlib\n import struct\n import unittest\n+from typing import List, Dict\n \n from .messages import (\n     CTransaction,\n@@ -21,7 +22,7 @@\n )\n \n MAX_SCRIPT_ELEMENT_SIZE = 520\n-OPCODE_NAMES = {}\n+OPCODE_NAMES = {}  # type: Dict[CScriptOp, str]\n \n def hash160(s):\n     return hashlib.new('ripemd160', sha256(s)).digest()\n@@ -37,7 +38,7 @@ def bn2vch(v):\n     # Serialize to bytes\n     return encoded_v.to_bytes(n_bytes, 'little')\n \n-_opcode_instances = []\n+_opcode_instances = []  # type: List[CScriptOp]\n class CScriptOp(int):\n     \"\"\"A single script opcode\"\"\"\n     __slots__ = ()"
      },
      {
        "sha": "8e0da5295df2fe692957dd68a6f7c4561cc98fd6",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=bd7e530f010d43816bb05d6f1590d1cd36cdaa2c",
        "patch": "@@ -91,6 +91,9 @@ class BitcoinTestFramework(metaclass=BitcoinTestMetaClass):\n \n     This class also contains various public and private helper methods.\"\"\"\n \n+    chain = None  # type: str\n+    setup_clean_chain = None  # type: bool\n+\n     def __init__(self):\n         \"\"\"Sets test framework defaults. Do not override this method. Instead, override the set_test_params() method\"\"\"\n         self.chain = 'regtest'\n@@ -407,7 +410,7 @@ def run_test(self):\n \n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n-    def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None, binary_cli=None, versions=None):\n+    def add_nodes(self, num_nodes: int, extra_args=None, *, rpchost=None, binary=None, binary_cli=None, versions=None):\n         \"\"\"Instantiate TestNode objects.\n \n         Should only be called once after the nodes have been specified in"
      },
      {
        "sha": "1517407700572af2771be18f8342b7dab8710bbf",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=bd7e530f010d43816bb05d6f1590d1cd36cdaa2c",
        "patch": "@@ -42,7 +42,7 @@\n if os.name != 'nt' or sys.getwindowsversion() >= (10, 0, 14393):\n     if os.name == 'nt':\n         import ctypes\n-        kernel32 = ctypes.windll.kernel32\n+        kernel32 = ctypes.windll.kernel32  # type: ignore\n         ENABLE_VIRTUAL_TERMINAL_PROCESSING = 4\n         STD_OUTPUT_HANDLE = -11\n         STD_ERROR_HANDLE = -12"
      },
      {
        "sha": "b9aa6c799b03e8ce6e870fd52b70ac7adf7f4432",
        "filename": "test/lint/lint-python.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/test/lint/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7e530f010d43816bb05d6f1590d1cd36cdaa2c/test/lint/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python.sh?ref=bd7e530f010d43816bb05d6f1590d1cd36cdaa2c",
        "patch": "@@ -7,6 +7,7 @@\n # Check for specified flake8 warnings in python files.\n \n export LC_ALL=C\n+export MYPY_CACHE_DIR=\"${BASE_ROOT_DIR}/test/.mypy_cache\"\n \n enabled=(\n     E101 # indentation contains mixed spaces and tabs\n@@ -96,3 +97,5 @@ PYTHONWARNINGS=\"ignore\" flake8 --ignore=B,C,E,F,I,N,W --select=$(IFS=\",\"; echo \"\n         echo \"$@\"\n     fi\n )\n+\n+mypy --ignore-missing-imports $(git ls-files \"test/functional/*.py\")\n\\ No newline at end of file"
      }
    ]
  }
]