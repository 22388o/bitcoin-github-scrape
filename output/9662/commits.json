[
  {
    "sha": "9995a602a639b64a749545b7c3bafbf67f97324f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTk1YTYwMmE2MzliNjRhNzQ5NTQ1YjdjM2JhZmJmNjdmOTczMjRm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-16T13:22:18Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-07-12T09:30:21Z"
      },
      "message": "Add facility to store wallet flags (64 bits)",
      "tree": {
        "sha": "2fd0c1cf77980214e7190642c842d1603f0ee530",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fd0c1cf77980214e7190642c842d1603f0ee530"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9995a602a639b64a749545b7c3bafbf67f97324f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAltHH60ACgkQHrd2uwPH\nki3Udg/+NLogYamdGaOfOHeOPYORaW647BbI0BpxqUU02LOpivAEceARBUeLA1ek\nH7hLmiJUNMGYJMIKVa4oIRxWpvaWLptVUGxb3am2nr1FMHDiCtiijeINBcqOO47k\nQNm7UGkF+ILstgALvDH7HSg2AgC3WzCyMe81f2hnEtGSiGqY8SjSjCf3PpncXAwQ\nyx4O4Y5HooOkW1/EzSs50Zc28UMktKKY6mmNselDzgMFASJVAO2B43wq+RSoNsQI\nLh++qQ7lra7scjFPbfrNhunR2o487SmetXGf9/XXQNS9O5JLfw68nHIVzjAyU0YI\nZSC4hTvxFp+nTp38EyjIhP+TjLMmQfULVtjW5TjS6bpSrogZBeaket2GpRjCHn7G\nJBNFUvgQ/lynGABStiLJS05SJHGL4B+vMWuo0VtS6rP2TytiKLW5I1F9/1tWfyjS\nnVZ3OjF0LCfZ2xOZLXJ5m4Y7tnChp32OPp6v23XTJsSieJrI1493NTe6KtcIef1U\nsZOT1kPa3Gy9F9KRgyMlN7xm1OrJQn+4VAcG76HX3HbmUmT9CPSMyzuo3WnnjXiR\n7u6vCL3TRqiB8252wYSCkytlMYqGu9I4J28bpMPpRG0NKvm2cZKNrN+R6alhIcIL\nqOND6AZIJZD4PQIv34M5jKxZ1Zj9xz3oMwvPLEE2Qn2jUZc4Nmg=\n=78Km\n-----END PGP SIGNATURE-----",
        "payload": "tree 2fd0c1cf77980214e7190642c842d1603f0ee530\nparent 5ba77df15de92deb35bfd501d4635aed3236af30\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1487251338 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1531387821 +0100\n\nAdd facility to store wallet flags (64 bits)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9995a602a639b64a749545b7c3bafbf67f97324f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9995a602a639b64a749545b7c3bafbf67f97324f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9995a602a639b64a749545b7c3bafbf67f97324f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ba77df15de92deb35bfd501d4635aed3236af30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ba77df15de92deb35bfd501d4635aed3236af30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ba77df15de92deb35bfd501d4635aed3236af30"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 43,
      "deletions": 1
    },
    "files": [
      {
        "sha": "48ace544c47a7cda3253fe8fd2d15cdd443f57d7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9995a602a639b64a749545b7c3bafbf67f97324f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9995a602a639b64a749545b7c3bafbf67f97324f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9995a602a639b64a749545b7c3bafbf67f97324f",
        "patch": "@@ -1526,6 +1526,28 @@ bool CWallet::IsHDEnabled() const\n     return !hdChain.seed_id.IsNull();\n }\n \n+void CWallet::SetWalletFlag(uint64_t flags)\n+{\n+    LOCK(cs_wallet);\n+    m_wallet_flags |= flags;\n+    if (!WalletBatch(*database).WriteWalletFlags(m_wallet_flags))\n+        throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n+}\n+\n+bool CWallet::IsWalletFlagSet(uint64_t flag)\n+{\n+    return (m_wallet_flags & flag);\n+}\n+\n+void CWallet::SetWalletFlags(uint64_t overwriteFlags, bool memonly)\n+{\n+    LOCK(cs_wallet);\n+    m_wallet_flags = overwriteFlags;\n+    if (!memonly && !WalletBatch(*database).WriteWalletFlags(m_wallet_flags)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n+    }\n+}\n+\n int64_t CWalletTx::GetTxTime() const\n {\n     int64_t n = nTimeSmart;"
      },
      {
        "sha": "c88fbe8b9619cebd5a8e318784301d085035e46e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9995a602a639b64a749545b7c3bafbf67f97324f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9995a602a639b64a749545b7c3bafbf67f97324f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9995a602a639b64a749545b7c3bafbf67f97324f",
        "patch": "@@ -723,6 +723,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     std::set<int64_t> set_pre_split_keypool;\n     int64_t m_max_keypool_index = 0;\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n+    std::atomic<uint64_t> m_wallet_flags{0};\n \n     int64_t nTimeFirstKey = 0;\n \n@@ -1190,6 +1191,15 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /** Whether a given output is spendable by this wallet */\n     bool OutputEligibleForSpending(const COutput& output, const CoinEligibilityFilter& eligibility_filter) const;\n+\n+    /** set a single wallet flag */\n+    void SetWalletFlag(uint64_t flags);\n+\n+    /** check if a certain wallet flag is set */\n+    bool IsWalletFlagSet(uint64_t flag);\n+\n+    /** overwrite all flags by the given uint64_t */\n+    void SetWalletFlags(uint64_t overwriteFlags, bool memOnly);\n };\n \n /** A key allocated from the key pool. */"
      },
      {
        "sha": "8caf7e4e66d7ae98a3a7ea3b56350d9bbcdeac14",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9995a602a639b64a749545b7c3bafbf67f97324f/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9995a602a639b64a749545b7c3bafbf67f97324f/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=9995a602a639b64a749545b7c3bafbf67f97324f",
        "patch": "@@ -510,7 +510,11 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: SetHDChain failed\";\n                 return false;\n             }\n-        } else if (strType != \"bestblock\" && strType != \"bestblock_nomerkle\"){\n+        } else if (strType == \"flags\") {\n+            uint64_t flags;\n+            ssValue >> flags;\n+            pwallet->SetWalletFlags(flags, true);\n+        } else if (strType != \"bestblock\" && strType != \"bestblock_nomerkle\") {\n             wss.m_unknown_records++;\n         }\n     } catch (...)\n@@ -840,6 +844,11 @@ bool WalletBatch::WriteHDChain(const CHDChain& chain)\n     return WriteIC(std::string(\"hdchain\"), chain);\n }\n \n+bool WalletBatch::WriteWalletFlags(const uint64_t flags)\n+{\n+    return WriteIC(std::string(\"flags\"), flags);\n+}\n+\n bool WalletBatch::TxnBegin()\n {\n     return m_batch.TxnBegin();"
      },
      {
        "sha": "674d1c22012c06b06ff5f0e90c7fed4552cc5fcb",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9995a602a639b64a749545b7c3bafbf67f97324f/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9995a602a639b64a749545b7c3bafbf67f97324f/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=9995a602a639b64a749545b7c3bafbf67f97324f",
        "patch": "@@ -234,6 +234,7 @@ class WalletBatch\n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);\n \n+    bool WriteWalletFlags(const uint64_t flags);\n     //! Begin a new transaction\n     bool TxnBegin();\n     //! Commit current transaction"
      }
    ]
  },
  {
    "sha": "cebefba0855cee7fbcb9474b34e6779369e8e9ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWJlZmJhMDg1NWNlZTdmYmNiOTQ3NGIzNGU2Nzc5MzY5ZThlOWNl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-05T06:53:39Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-07-12T19:31:57Z"
      },
      "message": "Add option to disable private keys during internal wallet creation",
      "tree": {
        "sha": "d19414305e656bb6951f43714c777e0853a57c6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d19414305e656bb6951f43714c777e0853a57c6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cebefba0855cee7fbcb9474b34e6779369e8e9ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAltHrLUACgkQHrd2uwPH\nki3AMg//UuxkJB8W/Qsmp6WxM3IUj7ija6E4Er3CzpXQyp2lE3bI3iiHSRrsQMPS\nU2o/xURv3oT0WXXVjfGweXs1NBjJ7VGwm0KuE6HuRLqezN75wY2jS5Bx9BMhHEms\nxaRgoOfUXSGvEcK56b3IbA+1bzFvg3klv5Pe1pOBrerAyu7JltiUHsbEqOklMgBb\n2BtSqqNjlXYBReOe65GsvXy1RD5naOpW6jk9Z6kCmos5ETZVPOgWpfULMm/z1R57\n2w1oHLLBieXwhVuE6n6E9HUDN8fSbGmPPfYG+xjZd1Lr86/N3SZVH95xARWM+DPW\ngewsXA+QoIm/bi9aJRgSaejbvO5D/ZWoTM6SSms5yLEpOJ5rUPz3ukmh3W9BScLw\nVFu6h5n3T/xgvTG+yYHQGda9izEPwKmiz7bvO2x+IVmFb9LmnM2L7jhPsxEiqrj3\nNFubr4SmPOYPmSJzCA85u2dULTO9oVnCrayd1M5qg6r9Q+GnsY29+HGRxN61yHBU\n4qxlOaxQlC4ZDcM+HZZss/IVR03Tjy9VoGv+ZKK/2z/PAw5aWo/+JwWV0FGBzSlr\nTdK345RnK7i4m2UneTn/6Jf/ulsr/NeHLuxnLj6kZB2An4HX9KNi0juzsRet9haa\n+P7HT951fEExuxxZbvvhFxpNzfpN3EU4Z/VPzCyIre1+hRF/JNk=\n=fQ7s\n-----END PGP SIGNATURE-----",
        "payload": "tree d19414305e656bb6951f43714c777e0853a57c6a\nparent 9995a602a639b64a749545b7c3bafbf67f97324f\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1493967219 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1531423917 +0100\n\nAdd option to disable private keys during internal wallet creation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cebefba0855cee7fbcb9474b34e6779369e8e9ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cebefba0855cee7fbcb9474b34e6779369e8e9ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cebefba0855cee7fbcb9474b34e6779369e8e9ce/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9995a602a639b64a749545b7c3bafbf67f97324f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9995a602a639b64a749545b7c3bafbf67f97324f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9995a602a639b64a749545b7c3bafbf67f97324f"
      }
    ],
    "stats": {
      "total": 123,
      "additions": 95,
      "deletions": 28
    },
    "files": [
      {
        "sha": "6377b2886feae8abcc479216dc0f7b4a6247a875",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 13,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cebefba0855cee7fbcb9474b34e6779369e8e9ce/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cebefba0855cee7fbcb9474b34e6779369e8e9ce/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=cebefba0855cee7fbcb9474b34e6779369e8e9ce",
        "patch": "@@ -160,6 +160,10 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getnewaddress\", \"\")\n         );\n \n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n+    }\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     // Parse the label first so we don't generate a key if there's an error\n@@ -267,6 +271,10 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getrawchangeaddress\", \"\")\n        );\n \n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n+    }\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     if (!pwallet->IsLocked()) {\n@@ -2499,6 +2507,10 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n         );\n \n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n+    }\n+\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n@@ -2983,19 +2995,20 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"Returns an object containing various wallet state info.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"walletname\\\": xxxxx,             (string) the wallet name\\n\"\n-            \"  \\\"walletversion\\\": xxxxx,          (numeric) the wallet version\\n\"\n-            \"  \\\"balance\\\": xxxxxxx,              (numeric) the total confirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"unconfirmed_balance\\\": xxx,      (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"immature_balance\\\": xxxxxx,      (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"txcount\\\": xxxxxxx,              (numeric) the total number of transactions in the wallet\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,         (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\\n\"\n-            \"  \\\"keypoolsize\\\": xxxx,             (numeric) how many new keys are pre-generated (only counts external keys)\\n\"\n-            \"  \\\"keypoolsize_hd_internal\\\": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n-            \"  \\\"unlocked_until\\\": ttt,           (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,              (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"hdseedid\\\": \\\"<hash160>\\\"          (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\\n\"\n-            \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\"     (string, optional) alias for hdseedid retained for backwards-compatibility. Will be removed in V0.18.\\n\"\n+            \"  \\\"walletname\\\": xxxxx,               (string) the wallet name\\n\"\n+            \"  \\\"walletversion\\\": xxxxx,            (numeric) the wallet version\\n\"\n+            \"  \\\"balance\\\": xxxxxxx,                (numeric) the total confirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"unconfirmed_balance\\\": xxx,        (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"immature_balance\\\": xxxxxx,        (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"txcount\\\": xxxxxxx,                (numeric) the total number of transactions in the wallet\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,           (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoolsize\\\": xxxx,               (numeric) how many new keys are pre-generated (only counts external keys)\\n\"\n+            \"  \\\"keypoolsize_hd_internal\\\": xxxx,   (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n+            \"  \\\"unlocked_until\\\": ttt,             (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,                (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"hdseedid\\\": \\\"<hash160>\\\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\\n\"\n+            \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\"       (string, optional) alias for hdseedid retained for backwards-compatibility. Will be removed in V0.18.\\n\"\n+            \"  \\\"private_keys_enabled\\\": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -3031,6 +3044,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n         obj.pushKV(\"hdseedid\", seed_id.GetHex());\n         obj.pushKV(\"hdmasterkeyid\", seed_id.GetHex());\n     }\n+    obj.pushKV(\"private_keys_enabled\", !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n     return obj;\n }\n "
      },
      {
        "sha": "0656994ace5c404fba910cbf70dcd894440466fc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 8,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cebefba0855cee7fbcb9474b34e6779369e8e9ce/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cebefba0855cee7fbcb9474b34e6779369e8e9ce/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cebefba0855cee7fbcb9474b34e6779369e8e9ce",
        "patch": "@@ -164,6 +164,7 @@ const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n \n CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)\n {\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n@@ -1465,6 +1466,7 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n \n CPubKey CWallet::GenerateNewSeed()\n {\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n     CKey key;\n     key.MakeNewKey(true);\n     return DeriveNewSeed(key);\n@@ -1539,13 +1541,19 @@ bool CWallet::IsWalletFlagSet(uint64_t flag)\n     return (m_wallet_flags & flag);\n }\n \n-void CWallet::SetWalletFlags(uint64_t overwriteFlags, bool memonly)\n+bool CWallet::SetWalletFlags(uint64_t overwriteFlags, bool memonly)\n {\n     LOCK(cs_wallet);\n     m_wallet_flags = overwriteFlags;\n+    if (((overwriteFlags & g_known_wallet_flags) >> 32) ^ (overwriteFlags >> 32)) {\n+        // contains unknown non-tolerable wallet flags\n+        return false;\n+    }\n     if (!memonly && !WalletBatch(*database).WriteWalletFlags(m_wallet_flags)) {\n         throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n     }\n+\n+    return true;\n }\n \n int64_t CWalletTx::GetTxTime() const\n@@ -2793,6 +2801,10 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                 //  post-backup change.\n \n                 // Reserve a new key pair from key pool\n+                if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+                    strFailReason = _(\"Can't generate a change-address key. Private keys are disabled for this wallet.\");\n+                    return false;\n+                }\n                 CPubKey vchPubKey;\n                 bool ret;\n                 ret = reservekey.GetReservedKey(vchPubKey, true);\n@@ -3193,7 +3205,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     {\n         LOCK(cs_KeyStore);\n         // This wallet is in its first run if all of these are empty\n-        fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty();\n+        fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty() && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     }\n \n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n@@ -3317,6 +3329,9 @@ const std::string& CWallet::GetLabelName(const CScript& scriptPubKey) const\n  */\n bool CWallet::NewKeyPool()\n {\n+    if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        return false;\n+    }\n     {\n         LOCK(cs_wallet);\n         WalletBatch batch(*database);\n@@ -3375,6 +3390,9 @@ void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n+    if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        return false;\n+    }\n     {\n         LOCK(cs_wallet);\n \n@@ -3499,6 +3517,10 @@ void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n \n bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n {\n+    if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        return false;\n+    }\n+\n     CKeyPool keypool;\n     {\n         LOCK(cs_wallet);\n@@ -4038,7 +4060,7 @@ bool CWallet::Verify(std::string wallet_file, bool salvage_wallet, std::string&\n     return WalletBatch::VerifyDatabaseFile(wallet_path, warning_string, error_string);\n }\n \n-std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name, const fs::path& path)\n+std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name, const fs::path& path, uint64_t wallet_creation_flags)\n {\n     const std::string& walletFile = name;\n \n@@ -4163,18 +4185,33 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n         }\n         walletInstance->SetMinVersion(FEATURE_LATEST);\n \n-        // generate a new seed\n-        CPubKey seed = walletInstance->GenerateNewSeed();\n-        if (!walletInstance->SetHDSeed(seed))\n-            throw std::runtime_error(std::string(__func__) + \": Storing HD seed failed\");\n+        if ((wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            //selective allow to set flags\n+            walletInstance->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+        } else {\n+            // generate a new seed\n+            CPubKey seed = walletInstance->GenerateNewSeed();\n+            if (!walletInstance->SetHDSeed(seed)) {\n+                throw std::runtime_error(std::string(__func__) + \": Storing HD seed failed\");\n+            }\n+        }\n \n         // Top up the keypool\n-        if (!walletInstance->TopUpKeyPool()) {\n+        if (!walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !walletInstance->TopUpKeyPool()) {\n             InitError(_(\"Unable to generate initial keys\") += \"\\n\");\n             return nullptr;\n         }\n \n         walletInstance->ChainStateFlushed(chainActive.GetLocator());\n+    } else if (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS) {\n+        // Make it impossible to disable private keys after creation\n+        InitError(strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\"), walletFile));\n+        return NULL;\n+    } else if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        LOCK(walletInstance->cs_KeyStore);\n+        if (!walletInstance->mapKeys.empty() || !walletInstance->mapCryptedKeys.empty()) {\n+            InitWarning(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\"), walletFile));\n+        }\n     } else if (gArgs.IsArgSet(\"-usehd\")) {\n         bool useHD = gArgs.GetBoolArg(\"-usehd\", true);\n         if (walletInstance->IsHDEnabled() && !useHD) {"
      },
      {
        "sha": "443b8f0f53b80a97cb406c3c16c1862c364e98de",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cebefba0855cee7fbcb9474b34e6779369e8e9ce/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cebefba0855cee7fbcb9474b34e6779369e8e9ce/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cebefba0855cee7fbcb9474b34e6779369e8e9ce",
        "patch": "@@ -113,6 +113,16 @@ constexpr OutputType DEFAULT_ADDRESS_TYPE{OutputType::P2SH_SEGWIT};\n //! Default for -changetype\n constexpr OutputType DEFAULT_CHANGE_TYPE{OutputType::CHANGE_AUTO};\n \n+enum WalletFlags : uint64_t {\n+    // wallet flags in the upper section (> 1 << 31) will lead to not opening the wallet if flag is unknown\n+    // unkown wallet flags in the lower section <= (1 << 31) will be tolerated\n+\n+    // will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)\n+    WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),\n+};\n+\n+static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n+\n /** A key pool entry */\n class CKeyPool\n {\n@@ -1132,7 +1142,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     static bool Verify(std::string wallet_file, bool salvage_wallet, std::string& error_string, std::string& warning_string);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static std::shared_ptr<CWallet> CreateWalletFromFile(const std::string& name, const fs::path& path);\n+    static std::shared_ptr<CWallet> CreateWalletFromFile(const std::string& name, const fs::path& path, uint64_t wallet_creation_flags = 0);\n \n     /**\n      * Wallet post-init setup\n@@ -1198,8 +1208,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /** check if a certain wallet flag is set */\n     bool IsWalletFlagSet(uint64_t flag);\n \n-    /** overwrite all flags by the given uint64_t */\n-    void SetWalletFlags(uint64_t overwriteFlags, bool memOnly);\n+    /** overwrite all flags by the given uint64_t\n+       returns false if unknown, non-tolerable flags are present */\n+    bool SetWalletFlags(uint64_t overwriteFlags, bool memOnly);\n };\n \n /** A key allocated from the key pool. */"
      },
      {
        "sha": "020b7c798922348b5851782b1e5c602fb3a0b72b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cebefba0855cee7fbcb9474b34e6779369e8e9ce/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cebefba0855cee7fbcb9474b34e6779369e8e9ce/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=cebefba0855cee7fbcb9474b34e6779369e8e9ce",
        "patch": "@@ -513,7 +513,10 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         } else if (strType == \"flags\") {\n             uint64_t flags;\n             ssValue >> flags;\n-            pwallet->SetWalletFlags(flags, true);\n+            if (!pwallet->SetWalletFlags(flags, true)) {\n+                strErr = \"Error reading wallet database: Unknown non-tolerable wallet flags found\";\n+                return false;\n+            }\n         } else if (strType != \"bestblock\" && strType != \"bestblock_nomerkle\") {\n             wss.m_unknown_records++;\n         }\n@@ -574,10 +577,12 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n             {\n                 // losing keys is considered a catastrophic error, anything else\n                 // we assume the user can live with:\n-                if (IsKeyType(strType) || strType == \"defaultkey\")\n+                if (IsKeyType(strType) || strType == \"defaultkey\") {\n                     result = DBErrors::CORRUPT;\n-                else\n-                {\n+                } else if(strType == \"flags\") {\n+                    // reading the wallet flags can only fail if unknown flags are present\n+                    result = DBErrors::TOO_NEW;\n+                } else {\n                     // Leave other errors alone, if we try to fix them we might make things worse.\n                     fNoncriticalErrors = true; // ... but do warn the user there is something wrong.\n                     if (strType == \"tx\")"
      }
    ]
  },
  {
    "sha": "2f15c2bc20d583b4c1788da78c9c635c36e03ed0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjE1YzJiYzIwZDU4M2I0YzE3ODhkYTc4YzljNjM1YzM2ZTAzZWQw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-06-13T18:35:41Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-07-12T19:32:07Z"
      },
      "message": "Add disable privatekeys option to createwallet",
      "tree": {
        "sha": "c60e476b62da2a729fdc5a3bb9afd96bc54edbeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c60e476b62da2a729fdc5a3bb9afd96bc54edbeb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f15c2bc20d583b4c1788da78c9c635c36e03ed0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAltHrLcACgkQHrd2uwPH\nki1pVxAAqqNtnIwyNnhqX2O3UkGb57Bp6QnntirufWoLQsn/hG7oJ73yX8sxYQRC\nCvLVz0dchYwDfzpQduKU+vrH9DJtLtEHlmY9b15U8LtoCpzyjNjRRaywHMDBLgJX\nVYzl5WtOXjksgYNYge5/07vTOXFDKCl9VFr45MZFzIipAtPOyFObRV7k18KJRq85\nGMblof4Dd0SLbTa2Yz0ltbicp0AjbYnOJti7nEi2EC29glt6dZtSnsPG5S/66n95\nL4ns0PFZRw6TUn3u75j24yD2NJPMIyUARYD+Hr5xq34oQmbzpZr88FrvSTdSkNEu\ngDSqhF17IfQYjvV9tduHo9paovc9hAD6GPpaGgjZbtzMdjcOaeRTxJEI2jDDvivq\n8vPE55kbJRUeu4XXQ0QS95oHGiqR7XkWLGLKyVpmY8gCS9U9yxoQY5hoeaWOy3FO\nmy26OVfQE3BvtvYs+8SASIeLygSgrrz0x0lF05u4NaGwYn7jOBoeK8oeWNprHZlU\nN/p6MKvWsMueelto1PlqdSM3Thbjx3WWQgAqTtrzeCCZBlIkSggqR78rAKE/DAYN\nWXlZF9unIrRBudF5HD1bqDAgtQoOaKy+VYRSTOdQ4VVqyzbiICJXgWMxVt+GYSgM\n03SlEufImoeTxAcFbT3ahfZ9AsstRTgAHb3nsDTINNAMBVKp9+M=\n=8n0y\n-----END PGP SIGNATURE-----",
        "payload": "tree c60e476b62da2a729fdc5a3bb9afd96bc54edbeb\nparent cebefba0855cee7fbcb9474b34e6779369e8e9ce\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1528914941 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1531423927 +0100\n\nAdd disable privatekeys option to createwallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f15c2bc20d583b4c1788da78c9c635c36e03ed0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f15c2bc20d583b4c1788da78c9c635c36e03ed0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f15c2bc20d583b4c1788da78c9c635c36e03ed0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cebefba0855cee7fbcb9474b34e6779369e8e9ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cebefba0855cee7fbcb9474b34e6779369e8e9ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cebefba0855cee7fbcb9474b34e6779369e8e9ce"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0d35c15a9ea003c65b757798a1120ffb4def7651",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f15c2bc20d583b4c1788da78c9c635c36e03ed0/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f15c2bc20d583b4c1788da78c9c635c36e03ed0/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=2f15c2bc20d583b4c1788da78c9c635c36e03ed0",
        "patch": "@@ -155,6 +155,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"echojson\", 9, \"arg9\" },\n     { \"rescanblockchain\", 0, \"start_height\"},\n     { \"rescanblockchain\", 1, \"stop_height\"},\n+    { \"createwallet\", 1, \"disable_private_keys\"},\n };\n \n class CRPCConvertTable"
      },
      {
        "sha": "f263974bc03434fb0b7b8a7cffd0f9c9e73371b5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f15c2bc20d583b4c1788da78c9c635c36e03ed0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f15c2bc20d583b4c1788da78c9c635c36e03ed0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2f15c2bc20d583b4c1788da78c9c635c36e03ed0",
        "patch": "@@ -3135,12 +3135,13 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n static UniValue createwallet(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"createwallet \\\"wallet_name\\\"\\n\"\n+            \"createwallet \\\"wallet_name\\\" ( disable_private_keys )\\n\"\n             \"\\nCreates and loads a new wallet.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"wallet_name\\\"    (string, required) The name for the new wallet. If this is a path, the wallet will be created at the path location.\\n\"\n+            \"1. \\\"wallet_name\\\"          (string, required) The name for the new wallet. If this is a path, the wallet will be created at the path location.\\n\"\n+            \"2. disable_private_keys   (boolean, optional, default: false) Disable the possibility of private keys (only watchonlys are possible in this mode).\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"name\\\" :    <wallet_name>,        (string) The wallet name if created successfully. If the wallet was created using a full path, the wallet_name will be the full path.\\n\"\n@@ -3155,6 +3156,11 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     std::string error;\n     std::string warning;\n \n+    bool disable_privatekeys = false;\n+    if (!request.params[1].isNull()) {\n+        disable_privatekeys = request.params[1].get_bool();\n+    }\n+\n     fs::path wallet_path = fs::absolute(wallet_name, GetWalletDir());\n     if (fs::symlink_status(wallet_path).type() != fs::file_not_found) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet \" + wallet_name + \" already exists.\");\n@@ -3165,7 +3171,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(wallet_name, fs::absolute(wallet_name, GetWalletDir()));\n+    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(wallet_name, fs::absolute(wallet_name, GetWalletDir()), (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0));\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet creation failed.\");\n     }\n@@ -4430,7 +4436,7 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             \"addwitnessaddress\",                &addwitnessaddress,             {\"address\",\"p2sh\"} },\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n-    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\"} },\n+    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },"
      }
    ]
  },
  {
    "sha": "c7b8f343e99d9d53ea353ddce9a977f1886caf30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2I4ZjM0M2U5OWQ5ZDUzZWEzNTNkZGNlOWE5NzdmMTg4NmNhZjMw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-01T12:54:28Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-07-12T19:32:07Z"
      },
      "message": "[Qt] Disable creating receive addresses when private keys are disabled",
      "tree": {
        "sha": "91d1f8eadc33cd093c721d1c1be41f502e10c16b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91d1f8eadc33cd093c721d1c1be41f502e10c16b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7b8f343e99d9d53ea353ddce9a977f1886caf30",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAltHrLcACgkQHrd2uwPH\nki2yBg//b2Kb9n3fMFu7XlNyPQmXmkZ2Lm8e/jn/GySY0JjBaMp9G0QhtE4ExZyj\nIbSVw7Ja+gEL0Yzt2ctI7jbYXqp05ix/E5ZYb7gZaffrh3Be1Ph2V0HRB2AxntZf\ngMwMeNlSJYS8Su156g0VvF0NTHg+QNAPznAZ1+rGM13PmbFheWQBQhHojvMYFCJy\n6xGM26ycQHt0WAWhXKThXj833QulzVQCTv0May0qeggjNlowg+DL63xR7/68wgCl\nalFaT0Ccl36VpeIVaiYRIef1yYy+cYENjHEidBlSNAX+s2sd7vV8PbCAHsAfi4/m\nqrHTPNFTkP0amcaV4DjljDOWBPpJKI8JQtroaZGRTRgB7ucpjXrnVYopdOM5uAaZ\nh5jTeUrlpbOofQd5xz9Ot/N+psAhBQGlh897pFaPiM/4J0Va2UyyF1+9OurLIWvE\nI7Cxa4tn9U/duN6VdxS5soyILueERhM1hZ5t66J7TSdjG+ipxV8NVtdCYyanDdw/\nKf7Jf68LcMXr80u9dEmUfL1eki9YzweDbITJ60Tfd7jI6PQGMXyfZ0lJ6lpy4C9G\nuGcnDTEy8wdrunXKgcM0fz6prtunGWYTd60AVrBSViEIMjhhdl9KIkU/0IHD+yqc\nv9U4TGeQSmLX0+rK0Wz1Phl4x5rrkrx0iqOJGHHcelPb0XSkKLc=\n=EP9y\n-----END PGP SIGNATURE-----",
        "payload": "tree 91d1f8eadc33cd093c721d1c1be41f502e10c16b\nparent 2f15c2bc20d583b4c1788da78c9c635c36e03ed0\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1485953668 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1531423927 +0100\n\n[Qt] Disable creating receive addresses when private keys are disabled\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b8f343e99d9d53ea353ddce9a977f1886caf30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b8f343e99d9d53ea353ddce9a977f1886caf30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b8f343e99d9d53ea353ddce9a977f1886caf30/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f15c2bc20d583b4c1788da78c9c635c36e03ed0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f15c2bc20d583b4c1788da78c9c635c36e03ed0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f15c2bc20d583b4c1788da78c9c635c36e03ed0"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2c450676c90f1ba867185ef91e1ac685bb5af025",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b8f343e99d9d53ea353ddce9a977f1886caf30/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b8f343e99d9d53ea353ddce9a977f1886caf30/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=c7b8f343e99d9d53ea353ddce9a977f1886caf30",
        "patch": "@@ -426,6 +426,7 @@ class WalletImpl : public Wallet\n     }\n     unsigned int getConfirmTarget() override { return m_wallet.m_confirm_target; }\n     bool hdEnabled() override { return m_wallet.IsHDEnabled(); }\n+    bool IsWalletFlagSet(uint64_t flag) override { return m_wallet.IsWalletFlagSet(flag); }\n     OutputType getDefaultAddressType() override { return m_wallet.m_default_address_type; }\n     OutputType getDefaultChangeType() override { return m_wallet.m_default_change_type; }\n     std::unique_ptr<Handler> handleUnload(UnloadFn fn) override"
      },
      {
        "sha": "ae54d424426649cab986bf8f16c8e00d5435f095",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b8f343e99d9d53ea353ddce9a977f1886caf30/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b8f343e99d9d53ea353ddce9a977f1886caf30/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=c7b8f343e99d9d53ea353ddce9a977f1886caf30",
        "patch": "@@ -236,6 +236,9 @@ class Wallet\n     // Return whether HD enabled.\n     virtual bool hdEnabled() = 0;\n \n+    // check if a certain wallet flag is set.\n+    virtual bool IsWalletFlagSet(uint64_t flag) = 0;\n+\n     // Get default address type.\n     virtual OutputType getDefaultAddressType() = 0;\n "
      },
      {
        "sha": "8c430e0af147d412502a950cdd18772582666c1f",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b8f343e99d9d53ea353ddce9a977f1886caf30/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b8f343e99d9d53ea353ddce9a977f1886caf30/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=c7b8f343e99d9d53ea353ddce9a977f1886caf30",
        "patch": "@@ -99,6 +99,9 @@ void ReceiveCoinsDialog::setModel(WalletModel *_model)\n         } else {\n             ui->useBech32->setCheckState(Qt::Unchecked);\n         }\n+\n+        // eventually disable the main receive button if private key operations are disabled\n+        ui->receiveButton->setEnabled(!model->privateKeysDisabled());\n     }\n }\n "
      },
      {
        "sha": "cd55b40b7135a53e654b35ea1d2ce9cbf6973abe",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b8f343e99d9d53ea353ddce9a977f1886caf30/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b8f343e99d9d53ea353ddce9a977f1886caf30/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=c7b8f343e99d9d53ea353ddce9a977f1886caf30",
        "patch": "@@ -558,6 +558,11 @@ bool WalletModel::isWalletEnabled()\n    return !gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET);\n }\n \n+bool WalletModel::privateKeysDisabled() const\n+{\n+    return m_wallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+}\n+\n QString WalletModel::getWalletName() const\n {\n     return QString::fromStdString(m_wallet->getWalletName());"
      },
      {
        "sha": "d8935c2fa8fde4186533fdbeb63cf08657fc6282",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b8f343e99d9d53ea353ddce9a977f1886caf30/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b8f343e99d9d53ea353ddce9a977f1886caf30/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=c7b8f343e99d9d53ea353ddce9a977f1886caf30",
        "patch": "@@ -197,6 +197,7 @@ class WalletModel : public QObject\n     bool bumpFee(uint256 hash);\n \n     static bool isWalletEnabled();\n+    bool privateKeysDisabled() const;\n \n     interfaces::Node& node() const { return m_node; }\n     interfaces::Wallet& wallet() const { return *m_wallet; }"
      }
    ]
  },
  {
    "sha": "4704e5f074e57782d058404a594a7313cf170cf0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzA0ZTVmMDc0ZTU3NzgyZDA1ODQwNGE1OTRhNzMxM2NmMTcwY2Yw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-06-13T19:19:06Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-07-12T19:32:07Z"
      },
      "message": "[QA] add createwallet disableprivatekey test",
      "tree": {
        "sha": "20807d03702e8367a4eb877651c3ec684df4024b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20807d03702e8367a4eb877651c3ec684df4024b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4704e5f074e57782d058404a594a7313cf170cf0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAltHrLcACgkQHrd2uwPH\nki3xGA/6A9i3Jz/Z87kF+BXo2SW1tvhVJWjxchIfyg7UCt990pImKmQyYEV/ttAQ\nOToBgo1rweizZZ9REc4rzdajAfEaCaGnsuHzzNVa9hAtAOwE0d3JGzLhYEhuws1w\nKg04UwCkatno47BWG4KPswo+R0kOy04iefth9bG4bBCza4FpiccjT7W1VoqSnvbc\nutSP7YaFSr1Viby3j7ENSZLcmbY15wPJ/nnJQ8vRxhqnWL9WIAPAjAMiZZMBXKIj\nNjOaWjgZj7dSbRYHDRILA54FHdZ1XbmWCjzH1hpflEwk3snTiD2PgqYO0FslI2PE\nJCGWHwD8z44G1KV80OTc8jTey1spcGIbUeQ675vHo+zvKZHSfjnQRc0Ml8wX4kpB\nUnsUQQmz2TKpgJnaB5txVQVaJd2vy8WMp4tfSdJfQw/fAYE/6kONocvfgXovqyS9\niKKYcWYxvzL9qMlqajlFGi71R23G+076tiVhwYxbgS0x7nJBwNujfOEZdUNm1tEQ\nYdOfGCKg4i5j0Wg8RCJn+Owu/kKpJc/0ma+BwuQoAEU/bcIoit951SA56DmDQxA+\nW/JKjLo676ks1xMOnXsjH7F8cu9JN8RAg7m8A9Zg+wftVE8Lj/Y2bxe9ATlBhK6w\nwxPTpqx0kPpz2M2kb8Gu59i5DJzfr0y4w4MzFXHSVQ3RlVKRuqs=\n=H/lH\n-----END PGP SIGNATURE-----",
        "payload": "tree 20807d03702e8367a4eb877651c3ec684df4024b\nparent c7b8f343e99d9d53ea353ddce9a977f1886caf30\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1528917546 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1531423927 +0100\n\n[QA] add createwallet disableprivatekey test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4704e5f074e57782d058404a594a7313cf170cf0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4704e5f074e57782d058404a594a7313cf170cf0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4704e5f074e57782d058404a594a7313cf170cf0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7b8f343e99d9d53ea353ddce9a977f1886caf30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b8f343e99d9d53ea353ddce9a977f1886caf30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b8f343e99d9d53ea353ddce9a977f1886caf30"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "62e01cba356d5437f4bb105d2c831d330c8fc06f",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4704e5f074e57782d058404a594a7313cf170cf0/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4704e5f074e57782d058404a594a7313cf170cf0/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=4704e5f074e57782d058404a594a7313cf170cf0",
        "patch": "@@ -363,4 +363,13 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 2U);\n }\n \n+BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n+{\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"dummy\", WalletDatabase::CreateDummy());\n+    wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+    BOOST_CHECK(!wallet->TopUpKeyPool(1000));\n+    CPubKey pubkey;\n+    BOOST_CHECK(!wallet->GetKeyFromPool(pubkey, false));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "da44e6ede9f5a11002639f3d0911cdcb82eb5086",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4704e5f074e57782d058404a594a7313cf170cf0/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4704e5f074e57782d058404a594a7313cf170cf0/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=4704e5f074e57782d058404a594a7313cf170cf0",
        "patch": "@@ -98,6 +98,8 @@\n     'mempool_persist.py',\n     'wallet_multiwallet.py',\n     'wallet_multiwallet.py --usecli',\n+    'wallet_disableprivatekeys.py',\n+    'wallet_disableprivatekeys.py --usecli',\n     'interface_http.py',\n     'rpc_users.py',\n     'feature_proxy.py',"
      },
      {
        "sha": "0ba2cfe9bef54dd6a53836c5b1381ef4f97d327d",
        "filename": "test/functional/wallet_disableprivatekeys.py",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4704e5f074e57782d058404a594a7313cf170cf0/test/functional/wallet_disableprivatekeys.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4704e5f074e57782d058404a594a7313cf170cf0/test/functional/wallet_disableprivatekeys.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disableprivatekeys.py?ref=4704e5f074e57782d058404a594a7313cf170cf0",
        "patch": "@@ -0,0 +1,32 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test disable-privatekeys mode.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class DisablePrivateKeysTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.supports_cli = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test disableprivatekeys creation.\")\n+        self.nodes[0].createwallet('w1', True)\n+        self.nodes[0].createwallet('w2')\n+        w1 = node.get_wallet_rpc('w1')\n+        w2 = node.get_wallet_rpc('w2')\n+        assert_raises_rpc_error(-4,\"Error: Private keys are disabled for this wallet\", w1.getnewaddress)\n+        assert_raises_rpc_error(-4,\"Error: Private keys are disabled for this wallet\", w1.getrawchangeaddress)\n+        w1.importpubkey(w2.getaddressinfo(w2.getnewaddress())['pubkey'])\n+\n+if __name__ == '__main__':\n+    DisablePrivateKeysTest().main()"
      }
    ]
  },
  {
    "sha": "a3fa4d6a6acf19d640a1d5879a00aa1f059e2380",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2ZhNGQ2YTZhY2YxOWQ2NDBhMWQ1ODc5YTAwYWExZjA1OWUyMzgw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-06-14T19:38:01Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-07-12T19:32:07Z"
      },
      "message": "QA: Fix bug in -usecli logic that converts booleans to non-lowercase strings",
      "tree": {
        "sha": "aede42773da07536d3cc9f9b2a14384de3689b3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aede42773da07536d3cc9f9b2a14384de3689b3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3fa4d6a6acf19d640a1d5879a00aa1f059e2380",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAltHrLcACgkQHrd2uwPH\nki0zqA//QrOexNEk1gNzwTm42qbwRbPZpe/dSRPZcCgpeTFJ3hY/V18hLy9uHQZQ\nIpKvpAv0zYU2NWKihfxtDllHUxD/0gbCOO2D2SUkwx2PfAdgbqMX9bdc+oC5i902\n+tKvBrGb9bzBdsZNQBaSV7nfXgidEuGlQrhyFUAbyiBgtiDcmWGJfmiwO+s2QfI9\nmJd27pFI4TU8EfwlWnjH5A2KduPuoZnidtGU+g+v1+G7TUEAux6414r1kCICoetN\ntIQc+qhFtm47WQSvLUM9EqA2ksRwrLXeIfdzh6g4A5k0p3lTPKCDnwkGp3y9EIOB\nZIwlwXmz62tSLgbbUoHPLjvluL+ZQuPlB3yMx3ZT/lEW41espWlwTKxHDIhA+0jR\nNMmaDlikevxfy3Q13itvHoo2vNpPHvswIvFvruOpk/KegRte2i/XWuBWyTkz2Nu9\nDiatO2Ugt/ISxA2VoK+4s3JDHSXWuCWA1PbaNfzvvCECBx5hLFkx5phhT2HDvKy3\nTMg+TEU67dZPqowQ+xjTAjF/ELigYIdGCZuxlylcfnYpJEIVCd7I/ssUjYIw7b4A\nzyB8NavsX8/ZK1K3GPB08nxttl4tpFW3L/mXDjAOaUaHIPF9UICNiS7odiKF+8AH\ntNDMlXjnIZz+dDWu/rZsTqEHbPce13f5CBPy/Hn38PlX0T1v13I=\n=Kkrh\n-----END PGP SIGNATURE-----",
        "payload": "tree aede42773da07536d3cc9f9b2a14384de3689b3d\nparent 4704e5f074e57782d058404a594a7313cf170cf0\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1529005081 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1531423927 +0100\n\nQA: Fix bug in -usecli logic that converts booleans to non-lowercase strings\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3fa4d6a6acf19d640a1d5879a00aa1f059e2380",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3fa4d6a6acf19d640a1d5879a00aa1f059e2380",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3fa4d6a6acf19d640a1d5879a00aa1f059e2380/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4704e5f074e57782d058404a594a7313cf170cf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4704e5f074e57782d058404a594a7313cf170cf0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4704e5f074e57782d058404a594a7313cf170cf0"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "50942aec40b344b3c31c171f504788cd3afd8de9",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3fa4d6a6acf19d640a1d5879a00aa1f059e2380/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3fa4d6a6acf19d640a1d5879a00aa1f059e2380/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=a3fa4d6a6acf19d640a1d5879a00aa1f059e2380",
        "patch": "@@ -351,8 +351,7 @@ def batch(self, requests):\n \n     def send_cli(self, command=None, *args, **kwargs):\n         \"\"\"Run bitcoin-cli command. Deserializes returned string as python object.\"\"\"\n-\n-        pos_args = [str(arg) for arg in args]\n+        pos_args = [str(arg).lower() if type(arg) is bool else str(arg) for arg in args]\n         named_args = [str(key) + \"=\" + str(value) for (key, value) in kwargs.items()]\n         assert not (pos_args and named_args), \"Cannot use positional arguments and named arguments in the same bitcoin-cli call\"\n         p_args = [self.binary, \"-datadir=\" + self.datadir] + self.options"
      }
    ]
  }
]