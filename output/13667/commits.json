[
  {
    "sha": "a1a998cf24c0cf1232e44ec8eaf2ad6875ab5153",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWE5OThjZjI0YzBjZjEyMzJlNDRlYzhlYWYyYWQ2ODc1YWI1MTUz",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2018-07-15T09:17:50Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2018-07-15T14:38:33Z"
      },
      "message": "wallet: Fix backupwallet for multiwallets\n\nbackupwallet was broken for multiwallets in their own directories\n(i.e. something like DATADIR/wallets/mywallet/wallet.dat).  In this\ncase, the backup would use DATADIR/wallets/wallet.dat as source file\nand not take the specific wallet's directory into account.\n\nThis led to either an error during the backup (if the wrong source\nfile was not present) or would silently back up the wrong wallet;\nespecially the latter behaviour can be quite bad for users.",
      "tree": {
        "sha": "6249e34b5f3cdd184eaba9425371d028d157bd2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6249e34b5f3cdd184eaba9425371d028d157bd2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1a998cf24c0cf1232e44ec8eaf2ad6875ab5153",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1a998cf24c0cf1232e44ec8eaf2ad6875ab5153",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1a998cf24c0cf1232e44ec8eaf2ad6875ab5153",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1a998cf24c0cf1232e44ec8eaf2ad6875ab5153/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8803c9132a78d8182bd828a29f7051fc7688f934",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8803c9132a78d8182bd828a29f7051fc7688f934",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8803c9132a78d8182bd828a29f7051fc7688f934"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 33,
      "deletions": 5
    },
    "files": [
      {
        "sha": "00964b8cc827789c0c1bb0a0c394d8ad3b50cf5e",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1a998cf24c0cf1232e44ec8eaf2ad6875ab5153/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1a998cf24c0cf1232e44ec8eaf2ad6875ab5153/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=a1a998cf24c0cf1232e44ec8eaf2ad6875ab5153",
        "patch": "@@ -768,7 +768,7 @@ bool BerkeleyDatabase::Backup(const std::string& strDest)\n                 env->mapFileUseCount.erase(strFile);\n \n                 // Copy wallet file\n-                fs::path pathSrc = GetWalletDir() / strFile;\n+                fs::path pathSrc = env->Directory() / strFile;\n                 fs::path pathDest(strDest);\n                 if (fs::is_directory(pathDest))\n                     pathDest /= strFile;"
      },
      {
        "sha": "e2938dba3b9fee62261da4f33845d709787d8aec",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 32,
        "deletions": 4,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1a998cf24c0cf1232e44ec8eaf2ad6875ab5153/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1a998cf24c0cf1232e44ec8eaf2ad6875ab5153/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=a1a998cf24c0cf1232e44ec8eaf2ad6875ab5153",
        "patch": "@@ -30,6 +30,11 @@ def run_test(self):\n         wallet_dir = lambda *p: data_dir('wallets', *p)\n         wallet = lambda name: node.get_wallet_rpc(name)\n \n+        def wallet_file(name):\n+            if os.path.isdir(wallet_dir(name)):\n+                return wallet_dir(name, \"wallet.dat\")\n+            return wallet_dir(name)\n+\n         # check wallet.dat is created\n         self.stop_nodes()\n         assert_equal(os.path.isfile(wallet_dir('wallet.dat')), True)\n@@ -43,6 +48,12 @@ def run_test(self):\n         # directory paths) can be loaded\n         os.rename(wallet_dir(\"wallet.dat\"), wallet_dir(\"w8\"))\n \n+        # create another dummy wallet for use in testing backups later\n+        self.start_node(0, [])\n+        self.stop_nodes()\n+        empty_wallet = os.path.join(self.options.tmpdir, 'empty.dat')\n+        os.rename(wallet_dir(\"wallet.dat\"), empty_wallet)\n+\n         # restart node with a mix of wallet names:\n         #   w1, w2, w3 - to verify new wallets created when non-existing paths specified\n         #   w          - to verify wallet name matching works when one wallet path is prefix of another\n@@ -59,10 +70,7 @@ def run_test(self):\n         # check that all requested wallets were created\n         self.stop_node(0)\n         for wallet_name in wallet_names:\n-            if os.path.isdir(wallet_dir(wallet_name)):\n-                assert_equal(os.path.isfile(wallet_dir(wallet_name, \"wallet.dat\")), True)\n-            else:\n-                assert_equal(os.path.isfile(wallet_dir(wallet_name)), True)\n+            assert_equal(os.path.isfile(wallet_file(wallet_name)), True)\n \n         # should not initialize if wallet path can't be created\n         exp_stderr = \"boost::filesystem::create_directory: (The system cannot find the path specified|Not a directory):\"\n@@ -265,5 +273,25 @@ def run_test(self):\n         assert_equal(self.nodes[0].listwallets(), ['w1'])\n         assert_equal(w1.getwalletinfo()['walletname'], 'w1')\n \n+        # Test backing up and restoring wallets\n+        self.log.info(\"Test wallet backup\")\n+        self.restart_node(0, ['-nowallet'])\n+        for wallet_name in wallet_names:\n+            self.nodes[0].loadwallet(wallet_name)\n+        for wallet_name in wallet_names:\n+            rpc = self.nodes[0].get_wallet_rpc(wallet_name)\n+            addr = rpc.getnewaddress()\n+            backup = os.path.join(self.options.tmpdir, 'backup.dat')\n+            rpc.backupwallet(backup)\n+            self.nodes[0].unloadwallet(wallet_name)\n+            shutil.copyfile(empty_wallet, wallet_file(wallet_name))\n+            self.nodes[0].loadwallet(wallet_name)\n+            assert_equal(rpc.getaddressinfo(addr)['ismine'], False)\n+            self.nodes[0].unloadwallet(wallet_name)\n+            shutil.copyfile(backup, wallet_file(wallet_name))\n+            self.nodes[0].loadwallet(wallet_name)\n+            assert_equal(rpc.getaddressinfo(addr)['ismine'], True)\n+\n+\n if __name__ == '__main__':\n     MultiWalletTest().main()"
      }
    ]
  }
]