[
  {
    "sha": "fa560cc6c493764efc2f2f1702d45286060fe15f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTU2MGNjNmM0OTM3NjRlZmMyZjJmMTcwMmQ0NTI4NjA2MGZlMTVm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-21T07:15:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-21T07:08:08Z"
      },
      "message": "test: Intermittent issue in feature_blockfilterindex_prune",
      "tree": {
        "sha": "cd3c9977b38a6200a44360fdc91589b63cbda855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd3c9977b38a6200a44360fdc91589b63cbda855"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa560cc6c493764efc2f2f1702d45286060fe15f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhLbQv9FUq2ZsyOj4GILdysahAa1BWDE4GgC2eguDhAhDqZb2aUbS1Ic/3fDSn7\nJCq/Z5KyHEunCkWxk9m1DPrJtMMrE4OGwb6N481P9Eg/Ka44CmvOBpNZ/r6O/Eph\nQxqZTBTnj/Lu7ehw/ieD210mgF8yR+G5EkZ4h+RoCI+8ZmqjRhnuD/y374lGSzOt\nUOGPrbfdAlgLvB+nQCbyF3ss1X3pGw8dpo9FgOonHBmZLSu4j6xnWIeeX4uYSVcq\nGxxKmr/O6oZu6hmYwO031kLS5b/BBWhTMz02Uz1Yt5Nj9IVLri30SrKVyBEca7uW\nfUWfaPWte92xAQFqpSB4qWGl1Jaa4ifOWV7dDVZNAUCu+58EQjJgMb9clYFz8eMY\ncgXYmUS5/GBtowTbR3QG9dedp8fA3cgEDKyE0Rsc4/g5Oq4efiWrZpgfMm1PeAmO\n/Ubeugm2x4BtrizxiqKFlba/oLnYWGLJJ0yxWN8qpvHmUAm1G/3QmUootNH26kZY\ndX4Mxsk0\n=Ud2o\n-----END PGP SIGNATURE-----",
        "payload": "tree cd3c9977b38a6200a44360fdc91589b63cbda855\nparent 828bb776d29cbdfad3937ba100c428e3244c652f\nauthor MarcoFalke <falke.marco@gmail.com> 1613891732 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1613891288 +0100\n\ntest: Intermittent issue in feature_blockfilterindex_prune\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa560cc6c493764efc2f2f1702d45286060fe15f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa560cc6c493764efc2f2f1702d45286060fe15f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa560cc6c493764efc2f2f1702d45286060fe15f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "828bb776d29cbdfad3937ba100c428e3244c652f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/828bb776d29cbdfad3937ba100c428e3244c652f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/828bb776d29cbdfad3937ba100c428e3244c652f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6648e8ecd93aa0d91087d57f5f5ba1ec7a360d87",
        "filename": "test/functional/feature_blockfilterindex_prune.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa560cc6c493764efc2f2f1702d45286060fe15f/test/functional/feature_blockfilterindex_prune.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa560cc6c493764efc2f2f1702d45286060fe15f/test/functional/feature_blockfilterindex_prune.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blockfilterindex_prune.py?ref=fa560cc6c493764efc2f2f1702d45286060fe15f",
        "patch": "@@ -5,8 +5,9 @@\n \"\"\"Test blockfilterindex in conjunction with prune.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n-    assert_raises_rpc_error,\n+    assert_equal,\n     assert_greater_than,\n+    assert_raises_rpc_error,\n )\n \n \n@@ -16,17 +17,18 @@ def set_test_params(self):\n         self.extra_args = [[\"-fastprune\", \"-prune=1\"], [\"-fastprune\", \"-prune=1\", \"-blockfilterindex=1\"]]\n \n     def run_test(self):\n-        # test basic pruning compatibility & filter access of pruned blocks\n         self.log.info(\"check if we can access a blockfilter when pruning is enabled but no blocks are actually pruned\")\n+        self.wait_until(lambda: self.nodes[1].getindexinfo() == {'basic block filter index': {'synced': True, 'best_block_height': 200}})\n         assert len(self.nodes[1].getblockfilter(self.nodes[1].getbestblockhash())['filter']) > 0\n         # Mine two batches of blocks to avoid hitting NODE_NETWORK_LIMITED_MIN_BLOCKS disconnection\n         self.nodes[1].generate(250)\n         self.sync_all()\n         self.nodes[1].generate(250)\n         self.sync_all()\n+        self.wait_until(lambda: self.nodes[1].getindexinfo() == {'basic block filter index': {'synced': True, 'best_block_height': 700}})\n         self.log.info(\"prune some blocks\")\n         pruneheight = self.nodes[1].pruneblockchain(400)\n-        assert pruneheight != 0\n+        assert_equal(pruneheight, 250)\n         self.log.info(\"check if we can access the tips blockfilter when we have pruned some blocks\")\n         assert len(self.nodes[1].getblockfilter(self.nodes[1].getbestblockhash())['filter']) > 0\n         self.log.info(\"check if we can access the blockfilter of a pruned block\")"
      }
    ]
  }
]