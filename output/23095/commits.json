[
  {
    "sha": "512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
    "node_id": "C_kwDOABII59oAKDUxMmRjZjdkNWI3ZmY4MTVjZTRmZWMyZDZmZTI3Y2JiMTNhYTNlMzM",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-09-25T09:48:37Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-10-27T05:55:09Z"
      },
      "message": "refactor: Use C++17 std::clamp\n\nThis change improves code readability.",
      "tree": {
        "sha": "974e4bd3da3acb16ac98a2b1037bc075fa9dd15c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/974e4bd3da3acb16ac98a2b1037bc075fa9dd15c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmF46b0ACgkQQQEIES5+\nqB8PHw//WbILTvrpniAVz77RLeyMC+X/zXlZ2troDw7zsCHLaiJW2CPs4hyX47CA\nCG0xl59M1YnObiQSxLsUv6xWulRUqbp28/ENol3BKmwmHK9pC0aHi+SJgu3PHcY5\nTQEjrvna7Cgpe3yCUbzU+9htlHdAXHDph5EAbo0zPWqsEwDZal9LIW1BBiAg2QQ7\nN+4iXQGE0nJMclxHdKFa5xZIOhsLYCA7mutYJY8H2twJOPnyvartJI3YMX/TQ5wN\nJxXE9Q4Lzz9CeSlw9WE7Z7Vk3/HQ4iZdbeqcQBAgb0SnVipbxQZf4n9W2SYHjp7k\nPeWzeQCFnvj93aFvmyEOMnK99iQ1W6e+9Tf3XXWCS9oGkB83XGAMCbkNBRFvtfrM\nkV/4C/IrC9IR/q9aD6gKZD1xq2/1ZD1ZyGhsXR111iSn0jMevdqX9H/DOdU4za5T\nYm/pw+cBsrnA7R1YoXlDIBMPlMXowv/2Tnch14KWRot98uK2LdKAJrocMgqeNWS+\n2u/7//FPKJ2ridKPSiEHKa2H67aiL5UEkn4Zgz82sSQ84q8dfLyk7jtQdAS8LZ52\nuDQ3rj58OH1Jy2HrbHV+FgMQvO+PEo5xalaLy1AS/oe+h66vKZUbyhI6tRYJlkNB\nWUoe+BFUI4Zap7cQvuaUCZm9Br6gCpNxZMzMYJAx9rvhcaY0x1o=\n=R9Qn\n-----END PGP SIGNATURE-----",
        "payload": "tree 974e4bd3da3acb16ac98a2b1037bc075fa9dd15c\nparent e77d9679fd0c6ad3be997e6160ccdbfc11ac7be7\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1632563317 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1635314109 +0300\n\nrefactor: Use C++17 std::clamp\n\nThis change improves code readability.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e77d9679fd0c6ad3be997e6160ccdbfc11ac7be7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e77d9679fd0c6ad3be997e6160ccdbfc11ac7be7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e77d9679fd0c6ad3be997e6160ccdbfc11ac7be7"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 30,
      "deletions": 19
    },
    "files": [
      {
        "sha": "3036604dfb180114125c2198e2f8386cf00b34c0",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
        "patch": "@@ -11,6 +11,7 @@\n #include <util/threadnames.h>\n \n #include <algorithm>\n+#include <cassert>\n #include <vector>\n \n template <typename T>\n@@ -110,7 +111,7 @@ class CCheckQueue\n                 //   all workers finish approximately simultaneously.\n                 // * Try to account for idle jobs which will instantly start helping.\n                 // * Don't do batches smaller than 1 (duh), or larger than nBatchSize.\n-                nNow = std::max(1U, std::min(nBatchSize, (unsigned int)queue.size() / (nTotal + nIdle + 1)));\n+                nNow = std::clamp<unsigned int>(queue.size() / (nTotal + nIdle + 1), 1, nBatchSize);\n                 vChecks.resize(nNow);\n                 for (unsigned int i = 0; i < nNow; i++) {\n                     // We want the lock on the m_mutex to be as short as possible, so swap jobs from the global\n@@ -137,6 +138,7 @@ class CCheckQueue\n     explicit CCheckQueue(unsigned int nBatchSizeIn)\n         : nBatchSize(nBatchSizeIn)\n     {\n+        assert(nBatchSize >= 1);\n     }\n \n     //! Create a pool of new worker threads."
      },
      {
        "sha": "57cde0379d47e3135f34b0347ff52fba20f3ad29",
        "filename": "src/common/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/common/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/common/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/common/bloom.cpp?ref=512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
        "patch": "@@ -163,7 +163,7 @@ CRollingBloomFilter::CRollingBloomFilter(const unsigned int nElements, const dou\n     double logFpRate = log(fpRate);\n     /* The optimal number of hash functions is log(fpRate) / log(0.5), but\n      * restrict it to the range 1-50. */\n-    nHashFuncs = std::max(1, std::min((int)round(logFpRate / log(0.5)), 50));\n+    nHashFuncs = std::clamp<int>(round(logFpRate / log(0.5)), 1, 50);\n     /* In this rolling bloom filter, we'll store between 2 and 3 generations of nElements / 2 entries. */\n     nEntriesPerGeneration = (nElements + 1) / 2;\n     uint32_t nMaxElements = nEntriesPerGeneration * 3;"
      },
      {
        "sha": "8214d5bc7f8f2c485b2fc3b4096e96f94dadcbd1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
        "patch": "@@ -69,6 +69,7 @@\n #include <validationinterface.h>\n #include <walletinitinterface.h>\n \n+#include <algorithm>\n #include <functional>\n #include <set>\n #include <stdint.h>\n@@ -1254,7 +1255,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     if (!ignores_incoming_txs) node.fee_estimator = std::make_unique<CBlockPolicyEstimator>();\n \n     assert(!node.mempool);\n-    int check_ratio = std::min<int>(std::max<int>(args.GetIntArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n+    int check_ratio = std::clamp<int>(args.GetIntArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0, 1000000);\n     node.mempool = std::make_unique<CTxMemPool>(node.fee_estimator.get(), check_ratio);\n \n     assert(!node.chainman);"
      },
      {
        "sha": "48fdbbc3268fe76a45247edd1f7954b13d900880",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
        "patch": "@@ -64,7 +64,7 @@ BlockAssembler::BlockAssembler(CChainState& chainstate, const CTxMemPool& mempoo\n {\n     blockMinFeeRate = options.blockMinFeeRate;\n     // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n-    nBlockMaxWeight = std::max<size_t>(4000, std::min<size_t>(MAX_BLOCK_WEIGHT - 4000, options.nBlockMaxWeight));\n+    nBlockMaxWeight = std::clamp<size_t>(options.nBlockMaxWeight, 4000, MAX_BLOCK_WEIGHT - 4000);\n }\n \n static BlockAssembler::Options DefaultOptions()"
      },
      {
        "sha": "3352f951d023cd011d7421eb83d752015fc95360",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
        "patch": "@@ -35,6 +35,8 @@\n #include <QSettings>\n #include <QTextDocument>\n \n+#include <algorithm>\n+\n static constexpr std::array confTargets{2, 4, 6, 12, 24, 48, 144, 504, 1008};\n int getConfTargetForIndex(int index) {\n     if (index+1 > static_cast<int>(confTargets.size())) {\n@@ -125,7 +127,7 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n         settings.setValue(\"nTransactionFee\", (qint64)DEFAULT_PAY_TX_FEE);\n     ui->groupFee->setId(ui->radioSmartFee, 0);\n     ui->groupFee->setId(ui->radioCustomFee, 1);\n-    ui->groupFee->button((int)std::max(0, std::min(1, settings.value(\"nFeeRadio\").toInt())))->setChecked(true);\n+    ui->groupFee->button(std::clamp<int>(settings.value(\"nFeeRadio\").toInt(), 0, 1))->setChecked(true);\n     ui->customFee->SetAllowEmpty(false);\n     ui->customFee->setValue(settings.value(\"nTransactionFee\").toLongLong());\n     minimizeFeeSection(settings.value(\"fFeeSectionMinimized\").toBool());"
      },
      {
        "sha": "ed593041c3ef977be705f7d2bd0f5844bae153ba",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
        "patch": "@@ -96,7 +96,7 @@ void InitSignatureCache()\n {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetIntArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::clamp<int>(gArgs.GetIntArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2, 0, MAX_MAX_SIG_CACHE_SIZE) * ((size_t)1 << 20);\n     size_t nElems = signatureCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for signature cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);"
      },
      {
        "sha": "3e2c50d1834ed4e5f110eea976718bc84e651064",
        "filename": "src/test/fuzz/checkqueue.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/test/fuzz/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/test/fuzz/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/checkqueue.cpp?ref=512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
        "patch": "@@ -36,7 +36,7 @@ FUZZ_TARGET(checkqueue)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n \n-    const unsigned int batch_size = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 1024);\n+    const unsigned int batch_size = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, 1024);\n     CCheckQueue<DumbCheck> check_queue_1{batch_size};\n     CCheckQueue<DumbCheck> check_queue_2{batch_size};\n     std::vector<DumbCheck> checks_1;"
      },
      {
        "sha": "2fab5e0fcf625ff90e52d616358cc1f1d00ad58b",
        "filename": "src/test/fuzz/prevector.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/test/fuzz/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/test/fuzz/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/prevector.cpp?ref=512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
        "patch": "@@ -6,12 +6,14 @@\n #include <test/fuzz/fuzz.h>\n \n #include <prevector.h>\n-#include <vector>\n \n #include <reverse_iterator.h>\n #include <serialize.h>\n #include <streams.h>\n \n+#include <algorithm>\n+#include <vector>\n+\n namespace {\n \n template <unsigned int N, typename T>\n@@ -216,7 +218,7 @@ FUZZ_TARGET(prevector)\n             test.insert(prov.ConsumeIntegralInRange<size_t>(0, test.size()), prov.ConsumeIntegral<int>());\n             break;\n         case 1:\n-            test.resize(std::max(0, std::min(30, (int)test.size() + prov.ConsumeIntegralInRange<int>(0, 4) - 2)));\n+            test.resize(std::clamp((int)test.size() + prov.ConsumeIntegralInRange<int>(0, 4) - 2, 0, 30));\n             break;\n         case 2:\n             test.insert(prov.ConsumeIntegralInRange<size_t>(0, test.size()), 1 + prov.ConsumeBool(), prov.ConsumeIntegral<int>());"
      },
      {
        "sha": "2225fb66cf2175c539b86c01ad9a42567fe76a25",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
        "patch": "@@ -3,7 +3,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <prevector.h>\n-#include <vector>\n \n #include <reverse_iterator.h>\n #include <serialize.h>\n@@ -13,6 +12,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n+#include <algorithm>\n+#include <vector>\n+\n BOOST_FIXTURE_TEST_SUITE(prevector_tests, TestingSetup)\n \n template<unsigned int N, typename T>\n@@ -226,7 +228,7 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n                 test.erase(InsecureRandRange(test.size()));\n             }\n             if (InsecureRandBits(3) == 2) {\n-                int new_size = std::max(0, std::min(30, (int)test.size() + (int)InsecureRandRange(5) - 2));\n+                int new_size = std::clamp((int)test.size() + (int)InsecureRandRange(5) - 2, 0, 30);\n                 test.resize(new_size);\n             }\n             if (InsecureRandBits(3) == 3) {"
      },
      {
        "sha": "3ad2ecf118a29894c61bb5e0f43f3135c67d64db",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
        "patch": "@@ -55,6 +55,7 @@\n #include <validationinterface.h>\n #include <warnings.h>\n \n+#include <algorithm>\n #include <numeric>\n #include <optional>\n #include <string>\n@@ -1263,7 +1264,7 @@ void InitScriptExecutionCache() {\n     g_scriptExecutionCacheHasher.Write(nonce.begin(), 32);\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetIntArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::clamp<int>(gArgs.GetIntArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2, 0, MAX_MAX_SIG_CACHE_SIZE) * ((size_t)1 << 20);\n     size_t nElems = g_scriptExecutionCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n@@ -3789,7 +3790,7 @@ bool CVerifyDB::VerifyDB(\n     // Verify blocks in the best chain\n     if (nCheckDepth <= 0 || nCheckDepth > chainstate.m_chain.Height())\n         nCheckDepth = chainstate.m_chain.Height();\n-    nCheckLevel = std::max(0, std::min(4, nCheckLevel));\n+    nCheckLevel = std::clamp(nCheckLevel, 0, 4);\n     LogPrintf(\"Verifying last %i blocks at level %i\\n\", nCheckDepth, nCheckLevel);\n     CCoinsViewCache coins(&coinsview);\n     CBlockIndex* pindex;\n@@ -3802,7 +3803,7 @@ bool CVerifyDB::VerifyDB(\n     const bool is_snapshot_cs{!chainstate.m_from_snapshot_blockhash};\n \n     for (pindex = chainstate.m_chain.Tip(); pindex && pindex->pprev; pindex = pindex->pprev) {\n-        const int percentageDone = std::max(1, std::min(99, (int)(((double)(chainstate.m_chain.Height() - pindex->nHeight)) / (double)nCheckDepth * (nCheckLevel >= 4 ? 50 : 100))));\n+        const int percentageDone = std::clamp<int>(((double)(chainstate.m_chain.Height() - pindex->nHeight)) / (double)nCheckDepth * (nCheckLevel >= 4 ? 50 : 100), 1, 99);\n         if (reportDone < percentageDone/10) {\n             // report every 10% step\n             LogPrintf(\"[%d%%]...\", percentageDone); /* Continued */\n@@ -3861,7 +3862,7 @@ bool CVerifyDB::VerifyDB(\n     // check level 4: try reconnecting blocks\n     if (nCheckLevel >= 4) {\n         while (pindex != chainstate.m_chain.Tip()) {\n-            const int percentageDone = std::max(1, std::min(99, 100 - (int)(((double)(chainstate.m_chain.Height() - pindex->nHeight)) / (double)nCheckDepth * 50)));\n+            const int percentageDone = std::clamp<int>(100 - (int)(((double)(chainstate.m_chain.Height() - pindex->nHeight)) / (double)nCheckDepth * 50), 1, 99);\n             if (reportDone < percentageDone/10) {\n                 // report every 10% step\n                 LogPrintf(\"[%d%%]...\", percentageDone); /* Continued */"
      },
      {
        "sha": "c010b3019a4d4b6202da4e67b35d57176b3678d2",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
        "patch": "@@ -20,6 +20,7 @@\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n \n+#include <algorithm>\n #include <stdint.h>\n #include <tuple>\n \n@@ -565,7 +566,7 @@ RPCHelpMan importwallet()\n         std::vector<std::tuple<CKey, int64_t, bool, std::string>> keys;\n         std::vector<std::pair<CScript, int64_t>> scripts;\n         while (file.good()) {\n-            pwallet->chain().showProgress(\"\", std::max(1, std::min(50, (int)(((double)file.tellg() / (double)nFilesize) * 100))), false);\n+            pwallet->chain().showProgress(\"\", std::clamp<int>((double)file.tellg() / (double)nFilesize * 100, 1, 50), false);\n             std::string line;\n             std::getline(file, line);\n             if (line.empty() || line[0] == '#')\n@@ -609,7 +610,7 @@ RPCHelpMan importwallet()\n         double total = (double)(keys.size() + scripts.size());\n         double progress = 0;\n         for (const auto& key_tuple : keys) {\n-            pwallet->chain().showProgress(\"\", std::max(50, std::min(75, (int)((progress / total) * 100) + 50)), false);\n+            pwallet->chain().showProgress(\"\", std::clamp<int>(progress / total * 100 + 50, 50, 75), false);\n             const CKey& key = std::get<0>(key_tuple);\n             int64_t time = std::get<1>(key_tuple);\n             bool has_label = std::get<2>(key_tuple);\n@@ -634,7 +635,7 @@ RPCHelpMan importwallet()\n             progress++;\n         }\n         for (const auto& script_pair : scripts) {\n-            pwallet->chain().showProgress(\"\", std::max(50, std::min(75, (int)((progress / total) * 100) + 50)), false);\n+            pwallet->chain().showProgress(\"\", std::clamp<int>(progress / total * 100 + 50, 50, 75), false);\n             const CScript& script = script_pair.first;\n             int64_t time = script_pair.second;\n "
      },
      {
        "sha": "b84bbf6ba938d07a5db87f1b70a9170625a5baa6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33",
        "patch": "@@ -1617,7 +1617,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n             m_scanning_progress = 0;\n         }\n         if (block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n-            ShowProgress(strprintf(\"%s \" + _(\"Rescanning\u2026\").translated, GetDisplayName()), std::max(1, std::min(99, (int)(m_scanning_progress * 100))));\n+            ShowProgress(strprintf(\"%s \" + _(\"Rescanning\u2026\").translated, GetDisplayName()), std::clamp<int>(m_scanning_progress * 100, 1, 99));\n         }\n         if (GetTime() >= nNow + 60) {\n             nNow = GetTime();"
      }
    ]
  }
]