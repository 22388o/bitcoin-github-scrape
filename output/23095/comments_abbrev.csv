DrahtBot,2021-09-25 14:40:35,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23497](https://github.com/bitcoin/bitcoin/pull/23497) (Add `src/node/` and `src/wallet/` code to `node::` and `wallet::`",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-927130703,927130703,
theStack,2021-09-26 21:03:08,Concept ACK,https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-927370277,927370277,
jarolrod,2021-09-27 02:38:05,"Concept ACK\n\n`std::clamp` is standard in C++17 and is certainly a nice cleanup versus the existing code. Additionally, this is not a breaking change for windows builders as this is available since VS2015.",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-927464779,927464779,
kiminuo,2021-09-27 07:43:10,"Concept ACK\n\nI wonder whether this is a good candidate or not: https://github.com/bitcoin/bitcoin/blob/58c25bdcea9b95348e639180932b388d4bda8157/src/rpc/blockchain.cpp#L1859 ",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-927614230,927614230,
hebasto,2021-09-27 08:24:40,"@kiminuo \n\n> I wonder whether this is a good candidate or not:\n> \n> https://github.com/bitcoin/bitcoin/blob/58c25bdcea9b95348e639180932b388d4bda8157/src/rpc/blockchain.cpp#L1859\n\nSome tests fail with this line being changed.",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-927644289,927644289,
kiminuo,2021-09-27 08:34:56,"> @kiminuo\n> \n> > I wonder whether this is a good candidate or not:\n> > https://github.com/bitcoin/bitcoin/blob/58c25bdcea9b95348e639180932b388d4bda8157/src/rpc/blockchain.cpp#L1859\n\nIn case you think it is a good candidate for changing to `std::clamp`, it would be helpful to post how you changed the line and a test failure details. ",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-927651324,927651324,
hebasto,2021-09-27 08:43:23,"@kiminuo \n> In case you think it is a good candidate for changing to `std::clamp`, it would be helpful to post how you changed the line and a test failure details.\n\n~Here are the [branch](https://github.com/hebasto/bitcoin/commits/210925-clamp-DEMO) and [tests](https://cirrus-ci.com/build/4764240100720640).~\n\nBranch: 7583dee2776b053928542cd82bf89e053cf4388d\nCI tests: https://cirrus-ci.",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-927656832,927656832,
laanwj,2021-09-27 11:11:05,"Ouch-if tests fail that means the behavior is not the same. I think we should be careful here. For the C++11 transition we even had an explicit rule not to do all-over-the-place code modernization like this, it's very easy to accidentally introduce a bug. I'm all for using `clamp` but might be better to introduce it when code is changed anyway.",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-927761870,927761870,
MarcoFalke,2021-09-27 11:22:50,"This is not a trivial replacement. With std::min/max the argument order doesn't matter (min(a,b)==min(b,a)). However, with `std::clamp`, the order must be exactly right and there is only one correct order.",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-927779377,927779377,
martinus,2021-09-27 11:23:28,"I think the test has failed because `std::clamp`'s behavior is undefined when when the lo value is bigger than the hi value. For `std::clamp(blockcount, 0, pindex->nHeight - 1)` this is possible when `pindex->nHeight==0`\n\n> the order must be exactly right and there is only one correct order.\n\nNot only that, there can be cases where there is no order that is always correct :)",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-927780250,927780250,
hebasto,2021-09-28 07:54:39,"Updated 82c4e71025d0958b4066325731874863e1323a0e -> bf4838e6456fa744911a886356529656a16c19ed ([pr23095.04](https://github.com/hebasto/bitcoin/commits/pr23095.04) -> [pr23095.05](https://github.com/hebasto/bitcoin/commits/pr23095.05)):\n\n- rebased\n- addressed comments",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-928946761,928946761,
hebasto,2021-09-29 08:24:33,"Updated bf4838e6456fa744911a886356529656a16c19ed -> 665353fa65da110a9bd2b981029bf5ba9e1b9de3 ([pr23095.05](https://github.com/hebasto/bitcoin/commits/pr23095.05) -> [pr23095.06](https://github.com/hebasto/bitcoin/commits/pr23095.06), [diff](https://github.com/hebasto/bitcoin/compare/pr23095.05..pr23095.06)):\n\n- fixed fuzz test",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-929953601,929953601,
hebasto,2021-10-27 06:14:03,Updated 665353fa65da110a9bd2b981029bf5ba9e1b9de3 -> 512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33 ([pr23095.06](https://github.com/hebasto/bitcoin/commits/pr23095.06) -> [pr23095.07](https://github.com/hebasto/bitcoin/commits/pr23095.07)) due to the conflict with #23137.,https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-952575636,952575636,
laanwj,2021-11-09 13:38:42,"Code review ACK 512dcf7d5b7ff815ce4fec2d6fe27cbb13aa3e33\nI checked all the changes and they look correct to me.",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-964159995,964159995,
MarcoFalke,2021-11-09 13:48:53,"Slightly tend toward NACK. It is non-trivial to review (https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-927779377) and easily introduces UB, if the second or third argument are not compile time constants (https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-927780250).\n\n",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-964167867,964167867,
hebasto,2021-11-21 19:49:01,"> It is non-trivial to review ([#23095 (comment)](https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-927779377)) and easily introduces UB.\n\nClosing.",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-974883196,974883196,
MarcoFalke,2021-11-22 10:09:54,"Maybe write a `Clamp<int64_t, /*min=*/-1, /*max=*/3>(var);` wrapper that has static asserts built in, and another one `Clamp` that copies `std::clamp`'s signature that asserts/throws/returns optional on UB?",https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-975360161,975360161,
martinus,2021-09-27 11:31:49,"Not sure if this can ever happen, but when `nBatchSize==0` this will now have undefined behavior. Previously the result used to be 1.",https://github.com/bitcoin/bitcoin/pull/23095#discussion_r716603915,716603915,src/checkqueue.h
martinus,2021-09-27 11:35:56,"If `fd_max - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS - NUM_FDS_MESSAGE_CAPTURE` is negative then `nMaxConnections` used to be 0, but now the result is undefined",https://github.com/bitcoin/bitcoin/pull/23095#discussion_r716606412,716606412,src/init.cpp
hebasto,2021-09-27 11:46:05,Right. Would `assert(nBatchSize >= 1);` in the `CCheckQueue` constructor be enough?,https://github.com/bitcoin/bitcoin/pull/23095#discussion_r716612774,716612774,src/checkqueue.h
martinus,2021-09-28 04:45:52,"I'd put it right above the clamp, or not use clamp when there's a possibility that that could happen",https://github.com/bitcoin/bitcoin/pull/23095#discussion_r717219327,717219327,src/checkqueue.h
hebasto,2021-09-28 07:58:41,"I thought again, and [put the assertion into the constructor](https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-928946761) because it is constructor's job to establish safe invariants for a class instance.",https://github.com/bitcoin/bitcoin/pull/23095#discussion_r717322471,717322471,src/checkqueue.h
hebasto,2021-09-28 08:00:11,This change [dropped](https://github.com/bitcoin/bitcoin/pull/23095#issuecomment-928946761).,https://github.com/bitcoin/bitcoin/pull/23095#discussion_r717323624,717323624,src/init.cpp
laanwj,2021-11-09 13:36:53,Can we please add a static assert that `MAX_BLOCK_WEIGHT >= 8000`?,https://github.com/bitcoin/bitcoin/pull/23095#discussion_r745621563,745621563,src/miner.cpp
MarcoFalke,2021-11-09 13:50:36,"Wouldn't it be better to have a clamp function that does this by default, internally and at compile time? The condition must hold for all call sites.",https://github.com/bitcoin/bitcoin/pull/23095#discussion_r745633506,745633506,src/miner.cpp
laanwj,2021-11-17 11:59:25,"Though in most cases it's not possible to verify it at compile time, this would handle only the 'between two constexpr' case. In other cases there might be non-trivial error handling.",https://github.com/bitcoin/bitcoin/pull/23095#discussion_r751172031,751172031,src/miner.cpp
MarcoFalke,2021-11-17 12:03:43,"For the cases where it is not possible to verify at compile time, crashing the node seems preferable over UB. Or is this something that sanitizers can spot?",https://github.com/bitcoin/bitcoin/pull/23095#discussion_r751174943,751174943,src/miner.cpp
