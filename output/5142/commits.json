[
  {
    "sha": "2fdc3351d72af2ad26280cd0ca07c2ae4080db55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmRjMzM1MWQ3MmFmMmFkMjYyODBjZDBjYTA3YzJhZTQwODBkYjU1",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-10-25T08:46:54Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-10-25T08:46:54Z"
      },
      "message": "Update comments in chain to be doxygen compatible",
      "tree": {
        "sha": "8f774ac07277f56c156f29e248aa50d10603fedc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f774ac07277f56c156f29e248aa50d10603fedc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fdc3351d72af2ad26280cd0ca07c2ae4080db55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fdc3351d72af2ad26280cd0ca07c2ae4080db55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fdc3351d72af2ad26280cd0ca07c2ae4080db55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fdc3351d72af2ad26280cd0ca07c2ae4080db55/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b847e0139eae06f4ea3c44ae414dc0110598a1be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b847e0139eae06f4ea3c44ae414dc0110598a1be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b847e0139eae06f4ea3c44ae414dc0110598a1be"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 42,
      "deletions": 38
    },
    "files": [
      {
        "sha": "e13c0478614bb8ccc1e19bf1969ef1823ce8db97",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fdc3351d72af2ad26280cd0ca07c2ae4080db55/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fdc3351d72af2ad26280cd0ca07c2ae4080db55/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=2fdc3351d72af2ad26280cd0ca07c2ae4080db55",
        "patch": "@@ -7,8 +7,9 @@\n \n using namespace std;\n \n-// CChain implementation\n-\n+/**\n+ * CChain implementation\n+ */\n void CChain::SetTip(CBlockIndex *pindex) {\n     if (pindex == NULL) {\n         vChain.clear();"
      },
      {
        "sha": "07e72d3498db7748728a689323ee8e1f72bc0c80",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 39,
        "deletions": 36,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fdc3351d72af2ad26280cd0ca07c2ae4080db55/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fdc3351d72af2ad26280cd0ca07c2ae4080db55/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=2fdc3351d72af2ad26280cd0ca07c2ae4080db55",
        "patch": "@@ -50,38 +50,40 @@ struct CDiskBlockPos\n };\n \n enum BlockStatus {\n-    // Unused.\n+    //! Unused.\n     BLOCK_VALID_UNKNOWN      =    0,\n \n-    // Parsed, version ok, hash satisfies claimed PoW, 1 <= vtx count <= max, timestamp not in future\n+    //! Parsed, version ok, hash satisfies claimed PoW, 1 <= vtx count <= max, timestamp not in future\n     BLOCK_VALID_HEADER       =    1,\n \n-    // All parent headers found, difficulty matches, timestamp >= median previous, checkpoint. Implies all parents\n-    // are also at least TREE.\n+    //! All parent headers found, difficulty matches, timestamp >= median previous, checkpoint. Implies all parents\n+    //! are also at least TREE.\n     BLOCK_VALID_TREE         =    2,\n \n-    // Only first tx is coinbase, 2 <= coinbase input script length <= 100, transactions valid, no duplicate txids,\n-    // sigops, size, merkle root. Implies all parents are at least TREE but not necessarily TRANSACTIONS. When all\n-    // parent blocks also have TRANSACTIONS, CBlockIndex::nChainTx will be set.\n+    /**\n+     * Only first tx is coinbase, 2 <= coinbase input script length <= 100, transactions valid, no duplicate txids,\n+     * sigops, size, merkle root. Implies all parents are at least TREE but not necessarily TRANSACTIONS. When all\n+     * parent blocks also have TRANSACTIONS, CBlockIndex::nChainTx will be set.\n+     */\n     BLOCK_VALID_TRANSACTIONS =    3,\n \n-    // Outputs do not overspend inputs, no double spends, coinbase output ok, immature coinbase spends, BIP30.\n-    // Implies all parents are also at least CHAIN.\n+    //! Outputs do not overspend inputs, no double spends, coinbase output ok, immature coinbase spends, BIP30.\n+    //! Implies all parents are also at least CHAIN.\n     BLOCK_VALID_CHAIN        =    4,\n \n-    // Scripts & signatures ok. Implies all parents are also at least SCRIPTS.\n+    //! Scripts & signatures ok. Implies all parents are also at least SCRIPTS.\n     BLOCK_VALID_SCRIPTS      =    5,\n \n-    // All validity bits.\n+    //! All validity bits.\n     BLOCK_VALID_MASK         =   BLOCK_VALID_HEADER | BLOCK_VALID_TREE | BLOCK_VALID_TRANSACTIONS |\n                                  BLOCK_VALID_CHAIN | BLOCK_VALID_SCRIPTS,\n \n-    BLOCK_HAVE_DATA          =    8, // full block available in blk*.dat\n-    BLOCK_HAVE_UNDO          =   16, // undo data available in rev*.dat\n+    BLOCK_HAVE_DATA          =    8, //! full block available in blk*.dat\n+    BLOCK_HAVE_UNDO          =   16, //! undo data available in rev*.dat\n     BLOCK_HAVE_MASK          =   BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO,\n \n-    BLOCK_FAILED_VALID       =   32, // stage after last reached validness failed\n-    BLOCK_FAILED_CHILD       =   64, // descends from failed block\n+    BLOCK_FAILED_VALID       =   32, //! stage after last reached validness failed\n+    BLOCK_FAILED_CHILD       =   64, //! descends from failed block\n     BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,\n };\n \n@@ -93,49 +95,50 @@ enum BlockStatus {\n class CBlockIndex\n {\n public:\n-    // pointer to the hash of the block, if any. memory is owned by this CBlockIndex\n+    //! pointer to the hash of the block, if any. memory is owned by this CBlockIndex\n     const uint256* phashBlock;\n \n-    // pointer to the index of the predecessor of this block\n+    //! pointer to the index of the predecessor of this block\n     CBlockIndex* pprev;\n \n-    // pointer to the index of some further predecessor of this block\n+    //! pointer to the index of some further predecessor of this block\n     CBlockIndex* pskip;\n \n-    // height of the entry in the chain. The genesis block has height 0\n+    //! height of the entry in the chain. The genesis block has height 0\n     int nHeight;\n \n-    // Which # file this block is stored in (blk?????.dat)\n+    //! Which # file this block is stored in (blk?????.dat)\n     int nFile;\n \n-    // Byte offset within blk?????.dat where this block's data is stored\n+    //! Byte offset within blk?????.dat where this block's data is stored\n     unsigned int nDataPos;\n \n-    // Byte offset within rev?????.dat where this block's undo data is stored\n+    //! Byte offset within rev?????.dat where this block's undo data is stored\n     unsigned int nUndoPos;\n \n-    // (memory only) Total amount of work (expected number of hashes) in the chain up to and including this block\n+    //! (memory only) Total amount of work (expected number of hashes) in the chain up to and including this block\n     uint256 nChainWork;\n \n-    // Number of transactions in this block.\n-    // Note: in a potential headers-first mode, this number cannot be relied upon\n+    //! Number of transactions in this block.\n+    //! Note: in a potential headers-first mode, this number cannot be relied upon\n     unsigned int nTx;\n \n-    // (memory only) Number of transactions in the chain up to and including this block.\n-    // This value will be non-zero only if and only if transactions for this block and all its parents are available.\n-    unsigned int nChainTx; // change to 64-bit type when necessary; won't happen before 2030\n+    //! (memory only) Number of transactions in the chain up to and including this block.\n+    //! This value will be non-zero only if and only if transactions for this block and all its parents are available.\n+    //! Change to 64-bit type when necessary; won't happen before 2030\n+    unsigned int nChainTx;\n \n-    // Verification status of this block. See enum BlockStatus\n+    //! Verification status of this block. See enum BlockStatus\n     unsigned int nStatus;\n \n-    // block header\n+    //! block header\n     int nVersion;\n     uint256 hashMerkleRoot;\n     unsigned int nTime;\n     unsigned int nBits;\n     unsigned int nNonce;\n \n-    // (memory only) Sequencial id assigned to distinguish order in which blocks are received.\n+    //! (memory only) Sequential id assigned to distinguish order in which blocks are received.\n     uint32_t nSequenceId;\n \n     void SetNull()\n@@ -254,7 +257,7 @@ class CBlockIndex\n             GetBlockHash().ToString());\n     }\n \n-    // Check whether this block index entry is valid up to the passed validity level.\n+    //! Check whether this block index entry is valid up to the passed validity level.\n     bool IsValid(enum BlockStatus nUpTo = BLOCK_VALID_TRANSACTIONS) const\n     {\n         assert(!(nUpTo & ~BLOCK_VALID_MASK)); // Only validity flags allowed.\n@@ -263,8 +266,8 @@ class CBlockIndex\n         return ((nStatus & BLOCK_VALID_MASK) >= nUpTo);\n     }\n \n-    // Raise the validity level of this block index entry.\n-    // Returns true if the validity was changed.\n+    //! Raise the validity level of this block index entry.\n+    //! Returns true if the validity was changed.\n     bool RaiseValidity(enum BlockStatus nUpTo)\n     {\n         assert(!(nUpTo & ~BLOCK_VALID_MASK)); // Only validity flags allowed.\n@@ -277,10 +280,10 @@ class CBlockIndex\n         return false;\n     }\n \n-    // Build the skiplist pointer for this entry.\n+    //! Build the skiplist pointer for this entry.\n     void BuildSkip();\n \n-    // Efficiently find an ancestor of this block.\n+    //! Efficiently find an ancestor of this block.\n     CBlockIndex* GetAncestor(int height);\n     const CBlockIndex* GetAncestor(int height) const;\n };"
      }
    ]
  },
  {
    "sha": "f2e03ffae92ec1333c0eb724835ad56138f54716",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmUwM2ZmYWU5MmVjMTMzM2MwZWI3MjQ4MzVhZDU2MTM4ZjU0NzE2",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-10-25T09:24:16Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-10-25T09:24:16Z"
      },
      "message": "Update comments in chainparams to be doxygen compatible",
      "tree": {
        "sha": "e9b046adeb7946b691981f804e423f758a4d030d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9b046adeb7946b691981f804e423f758a4d030d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2e03ffae92ec1333c0eb724835ad56138f54716",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2e03ffae92ec1333c0eb724835ad56138f54716",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2e03ffae92ec1333c0eb724835ad56138f54716",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2e03ffae92ec1333c0eb724835ad56138f54716/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fdc3351d72af2ad26280cd0ca07c2ae4080db55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fdc3351d72af2ad26280cd0ca07c2ae4080db55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fdc3351d72af2ad26280cd0ca07c2ae4080db55"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 90,
      "deletions": 81
    },
    "files": [
      {
        "sha": "9ffc369b405cf3a327524bf51ac788e9a32d16ed",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 42,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2e03ffae92ec1333c0eb724835ad56138f54716/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2e03ffae92ec1333c0eb724835ad56138f54716/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=f2e03ffae92ec1333c0eb724835ad56138f54716",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chainparams.h\"\n@@ -23,11 +23,11 @@ struct SeedSpec6 {\n \n #include \"chainparamsseeds.h\"\n \n-//\n-// Main network\n-//\n+/**\n+ * Main network\n+ */\n \n-// Convert the pnSeeds6 array into usable address objects.\n+//! Convert the pnSeeds6 array into usable address objects.\n static void convertSeed6(std::vector<CAddress> &vSeedsOut, const SeedSpec6 *data, unsigned int count)\n {\n     // It'll only connect to one or two seed nodes because once it connects,\n@@ -45,11 +45,13 @@ static void convertSeed6(std::vector<CAddress> &vSeedsOut, const SeedSpec6 *data\n     }\n }\n \n-    // What makes a good checkpoint block?\n-    // + Is surrounded by blocks with reasonable timestamps\n-    //   (no blocks before with a timestamp after, none after with\n-    //    timestamp before)\n-    // + Contains no strange transactions\n+/**\n+ * What makes a good checkpoint block?\n+ * + Is surrounded by blocks with reasonable timestamps\n+ *   (no blocks before with a timestamp after, none after with\n+ *    timestamp before)\n+ * + Contains no strange transactions\n+ */\n static Checkpoints::MapCheckpoints mapCheckpoints =\n         boost::assign::map_list_of\n         ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n@@ -101,9 +103,11 @@ class CMainParams : public CChainParams {\n     CMainParams() {\n         networkID = CBaseChainParams::MAIN;\n         strNetworkID = \"main\";\n-        // The message start string is designed to be unlikely to occur in normal data.\n-        // The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n-        // a large 4-byte int at any alignment.\n+        /** \n+         * The message start string is designed to be unlikely to occur in normal data.\n+         * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n+         * a large 4-byte int at any alignment.\n+         */\n         pchMessageStart[0] = 0xf9;\n         pchMessageStart[1] = 0xbe;\n         pchMessageStart[2] = 0xb4;\n@@ -119,14 +123,16 @@ class CMainParams : public CChainParams {\n         nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         nTargetSpacing = 10 * 60;\n \n-        // Build the genesis block. Note that the output of the genesis coinbase cannot\n-        // be spent as it did not originally exist in the database.\n-        //\n-        // CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n-        //   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n-        //     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n-        //     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n-        //   vMerkleTree: 4a5e1e\n+        /**\n+         * Build the genesis block. Note that the output of the genesis coinbase cannot\n+         * be spent as it did not originally exist in the database.\n+         * \n+         * CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n+         *   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n+         *     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n+         *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n+         *   vMerkleTree: 4a5e1e\n+         */\n         const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n         CMutableTransaction txNew;\n         txNew.vin.resize(1);\n@@ -178,18 +184,19 @@ class CMainParams : public CChainParams {\n };\n static CMainParams mainParams;\n \n-//\n-// Testnet (v3)\n-//\n-\n+/**\n+ * Testnet (v3)\n+ */\n class CTestNetParams : public CMainParams {\n public:\n     CTestNetParams() {\n         networkID = CBaseChainParams::TESTNET;\n         strNetworkID = \"test\";\n-        // The message start string is designed to be unlikely to occur in normal data.\n-        // The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n-        // a large 4-byte int at any alignment.\n+        /** \n+         * The message start string is designed to be unlikely to occur in normal data.\n+         * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n+         * a large 4-byte int at any alignment.\n+         */\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -200,10 +207,10 @@ class CTestNetParams : public CMainParams {\n         nRejectBlockOutdatedMajority = 75;\n         nToCheckBlockUpgradeMajority = 100;\n         nMinerThreads = 0;\n-        nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        nTargetTimespan = 14 * 24 * 60 * 60; //! two weeks\n         nTargetSpacing = 10 * 60;\n \n-        // Modify the testnet genesis block so the timestamp is valid for a later start.\n+        //! Modify the testnet genesis block so the timestamp is valid for a later start.\n         genesis.nTime = 1296688602;\n         genesis.nNonce = 414098458;\n         hashGenesisBlock = genesis.GetHash();\n@@ -239,9 +246,9 @@ class CTestNetParams : public CMainParams {\n };\n static CTestNetParams testNetParams;\n \n-//\n-// Regression test\n-//\n+/**\n+ * Regression test\n+ */\n class CRegTestParams : public CTestNetParams {\n public:\n     CRegTestParams() {\n@@ -256,7 +263,7 @@ class CRegTestParams : public CTestNetParams {\n         nRejectBlockOutdatedMajority = 950;\n         nToCheckBlockUpgradeMajority = 1000;\n         nMinerThreads = 1;\n-        nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        nTargetTimespan = 14 * 24 * 60 * 60; //! two weeks\n         nTargetSpacing = 10 * 60;\n         bnProofOfWorkLimit = ~uint256(0) >> 1;\n         genesis.nTime = 1296688602;\n@@ -266,8 +273,8 @@ class CRegTestParams : public CTestNetParams {\n         nDefaultPort = 18444;\n         assert(hashGenesisBlock == uint256(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n \n-        vFixedSeeds.clear(); // Regtest mode doesn't have any fixed seeds.\n-        vSeeds.clear();  // Regtest mode doesn't have any DNS seeds.\n+        vFixedSeeds.clear(); //! Regtest mode doesn't have any fixed seeds.\n+        vSeeds.clear();  //! Regtest mode doesn't have any DNS seeds.\n \n         fRequireRPCPassword = false;\n         fMiningRequiresPeers = false;\n@@ -284,17 +291,17 @@ class CRegTestParams : public CTestNetParams {\n };\n static CRegTestParams regTestParams;\n \n-//\n-// Unit test\n-//\n+/**\n+ * Unit test\n+ */\n class CUnitTestParams : public CMainParams, public CModifiableParams {\n public:\n     CUnitTestParams() {\n         networkID = CBaseChainParams::UNITTEST;\n         strNetworkID = \"unittest\";\n         nDefaultPort = 18445;\n-        vFixedSeeds.clear();\n-        vSeeds.clear();  // Regtest mode doesn't have any DNS seeds.\n+        vFixedSeeds.clear(); //! Unit test mode doesn't have any fixed seeds.\n+        vSeeds.clear();  //! Unit test mode doesn't have any DNS seeds.\n \n         fRequireRPCPassword = false;\n         fMiningRequiresPeers = false;\n@@ -309,7 +316,7 @@ class CUnitTestParams : public CMainParams, public CModifiableParams {\n         return data;\n     }\n \n-    // Published setters to allow changing values in unit test cases\n+    //! Published setters to allow changing values in unit test cases\n     virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }\n     virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }\n     virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)  { nRejectBlockOutdatedMajority=anRejectBlockOutdatedMajority; }"
      },
      {
        "sha": "6eba970cccb21507a80fa4cd9aaa8e68c42a4c51",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2e03ffae92ec1333c0eb724835ad56138f54716/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2e03ffae92ec1333c0eb724835ad56138f54716/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=f2e03ffae92ec1333c0eb724835ad56138f54716",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_CHAIN_PARAMS_H\n@@ -47,34 +47,33 @@ class CChainParams\n     int GetDefaultPort() const { return nDefaultPort; }\n     const uint256& ProofOfWorkLimit() const { return bnProofOfWorkLimit; }\n     int SubsidyHalvingInterval() const { return nSubsidyHalvingInterval; }\n-    /* Used to check majorities for block version upgrade */\n+    /** Used to check majorities for block version upgrade */\n     int EnforceBlockUpgradeMajority() const { return nEnforceBlockUpgradeMajority; }\n     int RejectBlockOutdatedMajority() const { return nRejectBlockOutdatedMajority; }\n     int ToCheckBlockUpgradeMajority() const { return nToCheckBlockUpgradeMajority; }\n \n-    /* Used if GenerateBitcoins is called with a negative number of threads */\n+    /** Used if GenerateBitcoins is called with a negative number of threads */\n     int DefaultMinerThreads() const { return nMinerThreads; }\n     const CBlock& GenesisBlock() const { return genesis; }\n     bool RequireRPCPassword() const { return fRequireRPCPassword; }\n-    /* Make miner wait to have peers to avoid wasting work */\n+    /** Make miner wait to have peers to avoid wasting work */\n     bool MiningRequiresPeers() const { return fMiningRequiresPeers; }\n-    /* Default value for -checkmempool argument */\n+    /** Default value for -checkmempool argument */\n     bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n-    /* Allow mining of a min-difficulty block */\n+    /** Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n-    /* Skip proof-of-work check: allow mining of any difficulty block */\n+    /** Skip proof-of-work check: allow mining of any difficulty block */\n     bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n-    /* Make standard checks */\n+    /** Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n     int64_t TargetSpacing() const { return nTargetSpacing; }\n     int64_t Interval() const { return nTargetTimespan / nTargetSpacing; }\n-    /* Make miner stop after a block is found. In RPC, don't return\n-     * until nGenProcLimit blocks are generated */\n+    /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n-    /* In the future use NetworkIDString() for RPC fields */\n+    /** In the future use NetworkIDString() for RPC fields */\n     bool TestnetToBeDeprecatedFieldRPC() const { return fTestnetToBeDeprecatedFieldRPC; }\n-    /* Return the BIP70 network string (main, test or regtest) */\n+    /** Return the BIP70 network string (main, test or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n@@ -85,7 +84,7 @@ class CChainParams\n \n     uint256 hashGenesisBlock;\n     MessageStartChars pchMessageStart;\n-    // Raw pub key bytes for the broadcast alert signing key.\n+    //! Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;\n     uint256 bnProofOfWorkLimit;\n@@ -112,14 +111,15 @@ class CChainParams\n     bool fTestnetToBeDeprecatedFieldRPC;\n };\n \n-/** Modifiable parameters interface is used by test cases to adapt the parameters in order\n-*** to test specific features more easily. Test cases should always restore the previous\n-*** values after finalization.\n-**/\n+/** \n+ * Modifiable parameters interface is used by test cases to adapt the parameters in order\n+ * to test specific features more easily. Test cases should always restore the previous\n+ * values after finalization.\n+ */\n \n class CModifiableParams {\n public:\n-    // Published setters to allow changing values in unit test cases\n+    //! Published setters to allow changing values in unit test cases\n     virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval) =0;\n     virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)=0;\n     virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)=0;\n@@ -139,7 +139,7 @@ const CChainParams &Params();\n /** Return parameters for the given network. */\n CChainParams &Params(CBaseChainParams::Network network);\n \n-/** Get modifyable network parameters (UNITTEST only) */\n+/** Get modifiable network parameters (UNITTEST only) */\n CModifiableParams *ModifiableParams();\n \n /** Sets the params returned by Params() to those for the given network. */"
      },
      {
        "sha": "8646a31603c01978956206214020062ec0d5e67f",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 14,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2e03ffae92ec1333c0eb724835ad56138f54716/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2e03ffae92ec1333c0eb724835ad56138f54716/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=f2e03ffae92ec1333c0eb724835ad56138f54716",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chainparamsbase.h\"\n@@ -13,10 +13,9 @@\n \n using namespace boost::assign;\n \n-//\n-// Main network\n-//\n-\n+/**\n+ * Main network\n+ */\n class CBaseMainParams : public CBaseChainParams\n {\n public:\n@@ -28,9 +27,9 @@ class CBaseMainParams : public CBaseChainParams\n };\n static CBaseMainParams mainParams;\n \n-//\n-// Testnet (v3)\n-//\n+/**\n+ * Testnet (v3)\n+ */\n class CBaseTestNetParams : public CBaseMainParams\n {\n public:\n@@ -43,9 +42,9 @@ class CBaseTestNetParams : public CBaseMainParams\n };\n static CBaseTestNetParams testNetParams;\n \n-//\n-// Regression test\n-//\n+/*\n+ * Regression test\n+ */\n class CBaseRegTestParams : public CBaseTestNetParams\n {\n public:\n@@ -57,9 +56,9 @@ class CBaseRegTestParams : public CBaseTestNetParams\n };\n static CBaseRegTestParams regTestParams;\n \n-//\n-// Unit test\n-//\n+/*\n+ * Unit test\n+ */\n class CBaseUnitTestParams : public CBaseMainParams\n {\n public:"
      },
      {
        "sha": "4042b8c879bc4393374795a23fd5c24b539e2a20",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2e03ffae92ec1333c0eb724835ad56138f54716/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2e03ffae92ec1333c0eb724835ad56138f54716/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=f2e03ffae92ec1333c0eb724835ad56138f54716",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_CHAIN_PARAMS_BASE_H"
      },
      {
        "sha": "c3323c48bd5df3ae626020d2dbddffc39593adeb",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2e03ffae92ec1333c0eb724835ad56138f54716/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2e03ffae92ec1333c0eb724835ad56138f54716/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=f2e03ffae92ec1333c0eb724835ad56138f54716",
        "patch": "@@ -1,10 +1,13 @@\n #ifndef H_CHAINPARAMSSEEDS\n #define H_CHAINPARAMSSEEDS\n-// List of fixed seed nodes for the bitcoin network\n-// AUTOGENERATED by contrib/devtools/generate-seeds.py\n \n-// Each line contains a 16-byte IPv6 address and a port.\n-// IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\n+/**\n+ * List of fixed seed nodes for the bitcoin network\n+ * AUTOGENERATED by contrib/devtools/generate-seeds.py\n+ * \n+ * Each line contains a 16-byte IPv6 address and a port.\n+ * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\n+ */\n static SeedSpec6 pnSeed6_main[] = {\n     {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2e,0x69,0x6a,0x7e}, 8333},\n     {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa2,0xd1,0x04,0x7d}, 8333},"
      }
    ]
  },
  {
    "sha": "02fe12dcf4414eaff0161c6b5df7334135958485",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmZlMTJkY2Y0NDE0ZWFmZjAxNjFjNmI1ZGY3MzM0MTM1OTU4NDg1",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-10-28T02:10:59Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-10-28T02:10:59Z"
      },
      "message": "Update generate-seeds.py to produce doxygen compatible comments",
      "tree": {
        "sha": "3cff0c244d0e38cd7437be03271d82f8898cd3bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cff0c244d0e38cd7437be03271d82f8898cd3bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02fe12dcf4414eaff0161c6b5df7334135958485",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02fe12dcf4414eaff0161c6b5df7334135958485",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02fe12dcf4414eaff0161c6b5df7334135958485",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02fe12dcf4414eaff0161c6b5df7334135958485/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2e03ffae92ec1333c0eb724835ad56138f54716",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2e03ffae92ec1333c0eb724835ad56138f54716",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2e03ffae92ec1333c0eb724835ad56138f54716"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5f067405607889fc4995ed8b76d8cf40a8874658",
        "filename": "share/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fe12dcf4414eaff0161c6b5df7334135958485/share/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fe12dcf4414eaff0161c6b5df7334135958485/share/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/seeds/generate-seeds.py?ref=02fe12dcf4414eaff0161c6b5df7334135958485",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/python\n # Copyright (c) 2014 Wladmir J. van der Laan\n-# Distributed under the MIT/X11 software license, see the accompanying\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n Script to generate list of seed nodes for chainparams.cpp.\n@@ -116,10 +116,13 @@ def main():\n     indir = sys.argv[1]\n     g.write('#ifndef H_CHAINPARAMSSEEDS\\n')\n     g.write('#define H_CHAINPARAMSSEEDS\\n')\n-    g.write('// List of fixed seed nodes for the bitcoin network\\n')\n-    g.write('// AUTOGENERATED by contrib/devtools/generate-seeds.py\\n\\n')\n-    g.write('// Each line contains a 16-byte IPv6 address and a port.\\n')\n-    g.write('// IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\\n')\n+    g.write('/**\\n')\n+    g.write(' * List of fixed seed nodes for the bitcoin network\\n')\n+    g.write(' * AUTOGENERATED by share/seeds/generate-seeds.py\\n')\n+    g.write(' *\\n')\n+    g.write(' * Each line contains a 16-byte IPv6 address and a port.\\n')\n+    g.write(' * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\\n')\n+    g.write(' */\\n')\n     with open(os.path.join(indir,'nodes_main.txt'),'r') as f:\n         process_nodes(g, f, 'pnSeed6_main', 8333)\n     g.write('\\n')"
      }
    ]
  }
]