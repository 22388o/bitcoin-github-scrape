[
  {
    "sha": "047a15405a5a906b0f4437d13a90dad1064a8385",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDdhMTU0MDVhNWE5MDZiMGY0NDM3ZDEzYTkwZGFkMTA2NGE4Mzg1",
    "commit": {
      "author": {
        "name": "Shawn Wilkinson",
        "email": "me@super3.org",
        "date": "2015-04-22T04:06:39Z"
      },
      "committer": {
        "name": "Shawn Wilkinson",
        "email": "me@super3.org",
        "date": "2015-05-09T16:23:54Z"
      },
      "message": "Documentation in Markdown for Depends Dir\n\nDocumentation more readable when viewed on Github.\n\nDocumentation Fix",
      "tree": {
        "sha": "0075a0e7749335b08cd0a240b495ccf664841c50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0075a0e7749335b08cd0a240b495ccf664841c50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/047a15405a5a906b0f4437d13a90dad1064a8385",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/047a15405a5a906b0f4437d13a90dad1064a8385",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/047a15405a5a906b0f4437d13a90dad1064a8385",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/047a15405a5a906b0f4437d13a90dad1064a8385/comments",
    "author": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6ea3bcede1cbbf89486b9d67329e0110c4624ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6ea3bcede1cbbf89486b9d67329e0110c4624ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6ea3bcede1cbbf89486b9d67329e0110c4624ae"
      }
    ],
    "stats": {
      "total": 360,
      "additions": 188,
      "deletions": 172
    },
    "files": [
      {
        "sha": "74f9ef3f205ec0e12f6ac9e75f03da81dd7d96e7",
        "filename": "depends/README.md",
        "status": "renamed",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/047a15405a5a906b0f4437d13a90dad1064a8385/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/047a15405a5a906b0f4437d13a90dad1064a8385/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=047a15405a5a906b0f4437d13a90dad1064a8385",
        "patch": "@@ -1,28 +1,26 @@\n-This is a system of building and caching dependencies necessary for building\n-Bitcoin.\n-\n+This is a system of building and caching dependencies necessary for building Bitcoin. \n There are several features that make it different from most similar systems:\n \n-- It is designed to be builder and host agnostic\n+### It is designed to be builder and host agnostic\n \n In theory, binaries for any target OS/architecture can be created, from a\n builder running any OS/architecture. In practice, build-side tools must be\n specified when the defaults don't fit, and packages must be amended to work\n on new hosts. For now, a build architecture of x86_64 is assumed, either on\n Linux or OSX.\n \n-- No reliance on timestamps\n+### No reliance on timestamps\n \n File presence is used to determine what needs to be built. This makes the\n results distributable and easily digestable by automated builders.\n \n-- Each build only has its specified dependencies available at build-time.\n+### Each build only has its specified dependencies available at build-time.\n \n For each build, the sysroot is wiped and the (recursive) dependencies are\n installed. This makes each build deterministic, since there will never be any\n unknown files available to cause side-effects.\n \n-- Each package is cached and only rebuilt as needed.\n+### Each package is cached and only rebuilt as needed.\n \n Before building, a unique build-id is generated for each package. This id\n consists of a hash of all files used to build the package (Makefiles, packages,\n@@ -32,7 +30,7 @@ any other package that depends on it. If any of the main makefiles (Makefile,\n funcs.mk, etc) are changed, all packages will be rebuilt. After building, the\n results are cached into a tarball that can be re-used and distributed.\n \n-- Package build results are (relatively) deterministic.\n+### Package build results are (relatively) deterministic.\n \n Each package is configured and patched so that it will yield the same\n build-results with each consequent build, within a reasonable set of\n@@ -41,13 +39,13 @@ beyond the scope of this system. Additionally, the toolchain itself must be\n capable of deterministic results. When revisions are properly bumped, a cached\n build should represent an exact single payload.\n \n-- Sources are fetched and verified automatically\n+### Sources are fetched and verified automatically\n \n Each package must define its source location and checksum. The build will fail\n if the fetched source does not match. Sources may be pre-seeded and/or cached\n as desired.\n \n-- Self-cleaning\n+### Self-cleaning\n \n Build and staging dirs are wiped after use, and any previous version of a\n cached result is removed following a successful build. Automated builders",
        "previous_filename": "depends/README"
      },
      {
        "sha": "5ab7ed7dee0063888e4c042dc5946e363178b030",
        "filename": "depends/README.packages",
        "status": "removed",
        "additions": 0,
        "deletions": 128,
        "changes": 128,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6ea3bcede1cbbf89486b9d67329e0110c4624ae/depends/README.packages",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6ea3bcede1cbbf89486b9d67329e0110c4624ae/depends/README.packages",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.packages?ref=b6ea3bcede1cbbf89486b9d67329e0110c4624ae",
        "patch": "@@ -1,128 +0,0 @@\n-Each recipe consists of 3 main parts: defining identifiers, setting build\n-variables, and defining build commands.\n-\n-The package \"mylib\" will be used here as an example\n-\n-General tips:\n-mylib_foo is written as $(package)_foo in order to make recipes more similar.\n-\n-Identifiers:\n-Each package is required to define at least these variables:\n-  $(package)_version:\n-    Version of the upstream library or program. If there is no version, a\n-    placeholder such as 1.0 can be used.\n-  $(package)_download_path:\n-    Location of the upstream source, without the file-name. Usually http or\n-    ftp.\n-  $(package)_file_name:\n-    The upstream source filename available at the download path.\n-  $(package)_sha256_hash:\n-    The sha256 hash of the upstream file\n-\n-These variables are optional:\n-  $(package)_build_subdir:\n-    cd to this dir before running configure/build/stage commands.\n-  $(package)_download_file:\n-    The file-name of the upstream source if it differs from how it should be\n-    stored locally. This can be used to avoid storing file-names with strange\n-    characters.\n-  $(package)_dependencies:\n-    Names of any other packages that this one depends on.\n-  $(package)_patches:\n-    Filenames of any patches needed to build the package\n-\n-\n-Build Variables:\n-After defining the main identifiers, build variables may be added or customized\n-before running the build commands. They should be added to a function called\n-$(package)_set_vars. For example:\n-\n-define $(package)_set_vars\n-...\n-endef\n-\n-Most variables can be prefixed with the host, architecture, or both, to make\n-the modifications specific to that case. For example:\n-\n-  Universal:         $(package)_cc=gcc\n-  Linux only:        $(package)_linux_cc=gcc\n-  x86_64 only:       $(package)_x86_64_cc = gcc\n-  x86_64 linux only: $(package)_x86_64_linux_cc = gcc\n-\n-These variables may be set to override or append their default values.\n-  $(package)_cc\n-  $(package)_cxx\n-  $(package)_objc\n-  $(package)_objcxx\n-  $(package)_ar\n-  $(package)_ranlib\n-  $(package)_libtool\n-  $(package)_nm\n-  $(package)_cflags\n-  $(package)_cxxflags\n-  $(package)_ldflags\n-  $(package)_cppflags\n-  $(package)_config_env\n-  $(package)_build_env\n-  $(package)_stage_env\n-  $(package)_build_opts\n-  $(package)_config_opts\n-\n-The *_env variables are used to add environment variables to the respective\n-commands.\n-\n-Many variables respect a debug/release suffix as well, in order to use them for\n-only the appropriate build config. For example:\n-  $(package)_cflags_release = -O3\n-  $(package)_cflags_i686_debug = -g\n-  $(package)_config_opts_release = --disable-debug\n-\n-These will be used in addition to the options that do not specify\n-debug/release. All builds are considered to be release unless DEBUG=1 is set by\n-the user.\n-\n-Other variables may be defined as needed.\n-\n-Build commands:\n-\n-  For each build, a unique build dir and staging dir are created. For example,\n-  work/build/mylib/1.0-1adac830f6e and work/staging/mylib/1.0-1adac830f6e.\n-\n-  The following build commands are available for each recipe:\n-\n-  $(package)_fetch_cmds:\n-    Runs from: build dir\n-    Fetch the source file. If undefined, it will be fetched and verified\n-    against its hash.\n-  $(package)_extract_cmds:\n-    Runs from: build dir\n-    Verify the source file against its hash and extract it. If undefined, the\n-    source is assumed to be a tarball.\n-  $(package)_preprocess_cmds:\n-    Runs from: build dir/$(package)_build_subdir\n-    Preprocess the source as necessary. If undefined, does nothing.\n-  $(package)_config_cmds:\n-    Runs from: build dir/$(package)_build_subdir\n-    Configure the source. If undefined, does nothing.\n-  $(package)_build_cmds:\n-    Runs from: build dir/$(package)_build_subdir\n-    Build the source. If undefined, does nothing.\n-  $(package)_stage_cmds:\n-    Runs from: build dir/$(package)_build_subdir\n-    Stage the build results. If undefined, does nothing.\n-\n-  The following variables are available for each recipe:\n-  $(1)_staging_dir: package's destination sysroot path\n-  $(1)_staging_prefix_dir: prefix path inside of the package's staging dir\n-  $(1)_extract_dir: path to the package's extracted sources\n-  $(1)_build_dir: path where configure/build/stage commands will be run\n-  $(1)_patch_dir: path where the package's patches (if any) are found\n-\n-Notes on build commands:\n-\n-For packages built with autotools, $($(package)_autoconf) can be used in the\n-configure step to (usually) correctly configure automatically. Any\n-$($(package)_config_opts) will be appended.\n-\n-Most autotools projects can be properly staged using:\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install"
      },
      {
        "sha": "24e1231d8265f60f54af3ca2f9ece954b0c48452",
        "filename": "depends/README.usage",
        "status": "removed",
        "additions": 0,
        "deletions": 34,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6ea3bcede1cbbf89486b9d67329e0110c4624ae/depends/README.usage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6ea3bcede1cbbf89486b9d67329e0110c4624ae/depends/README.usage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.usage?ref=b6ea3bcede1cbbf89486b9d67329e0110c4624ae",
        "patch": "@@ -1,34 +0,0 @@\n-To build dependencies for the current arch+OS:\n-    make\n-To build for another arch/OS:\n-  make HOST=host-platform-triplet && make HOST=host-platform-triplet\n-  (For example: make HOST=i686-w64-mingw32 -j4)\n-\n-A prefix will be generated that's suitable for plugging into Bitcoin's\n-configure. In the above example, a dir named i686-w64-mingw32 will be\n-created. To use it for Bitcoin:\n-\n-./configure --prefix=`pwd`/depends/i686-w64-mingw32\n-\n-No other options are needed, the paths are automatically configured.\n-\n-Dependency Options:\n-The following can be set when running make: make FOO=bar\n-\n-SOURCES_PATH: downloaded sources will be placed here\n-BASE_CACHE: built packages will be placed here\n-SDK_PATH: Path where sdk's can be found (used by OSX)\n-FALLBACK_DOWNLOAD_PATH: If a source file can't be fetched, try here before giving up\n-NO_QT: Don't download/build/cache qt and its dependencies\n-NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n-NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n-DEBUG: disable some optimizations and enable more runtime checking\n-\n-If some packages are not built, for example 'make NO_WALLET=1', the appropriate\n-options will be passed to bitcoin's configure. In this case, --disable-wallet.\n-\n-Additional targets:\n-download: run 'make download' to fetch all sources without building them\n-download-osx: run 'make download-osx' to fetch all sources needed for osx builds\n-download-win: run 'make download-win' to fetch all sources needed for win builds\n-download-linux: run 'make download-linux' to fetch all sources needed for linux builds"
      },
      {
        "sha": "b52448cd0e20992ea0dcc41234ccb846dd75991c",
        "filename": "depends/README_PACKAGES.md",
        "status": "added",
        "additions": 143,
        "deletions": 0,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/047a15405a5a906b0f4437d13a90dad1064a8385/depends/README_PACKAGES.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/047a15405a5a906b0f4437d13a90dad1064a8385/depends/README_PACKAGES.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README_PACKAGES.md?ref=047a15405a5a906b0f4437d13a90dad1064a8385",
        "patch": "@@ -0,0 +1,143 @@\n+Each recipe consists of 3 main parts: defining identifiers, setting build\n+variables, and defining build commands.\n+\n+The package \"mylib\" will be used here as an example\n+\n+General tips:\n+mylib_foo is written as $(package)_foo in order to make recipes more similar.\n+\n+## Identifiers\n+Each package is required to define at least these variables:\n+\n+\t$(package)_version:\n+\tVersion of the upstream library or program. If there is no version, a\n+\tplaceholder such as 1.0 can be used.\n+\n+\t$(package)_download_path:\n+\tLocation of the upstream source, without the file-name. Usually http or\n+\tftp.\n+\n+\t$(package)_file_name:\n+\tThe upstream source filename available at the download path.\n+\n+\t$(package)_sha256_hash:\n+\tThe sha256 hash of the upstream file\n+\n+These variables are optional:\n+\n+\t$(package)_build_subdir:\n+\tcd to this dir before running configure/build/stage commands.\n+\t\n+\t$(package)_download_file:\n+\tThe file-name of the upstream source if it differs from how it should be\n+\tstored locally. This can be used to avoid storing file-names with strange\n+\tcharacters.\n+\t\n+\t$(package)_dependencies:\n+\tNames of any other packages that this one depends on.\n+\t\n+\t$(package)_patches:\n+\tFilenames of any patches needed to build the package\n+\n+\n+## Build Variables:\n+After defining the main identifiers, build variables may be added or customized\n+before running the build commands. They should be added to a function called\n+$(package)_set_vars. For example:\n+\n+\tdefine $(package)_set_vars\n+\t...\n+\tendef\n+\n+Most variables can be prefixed with the host, architecture, or both, to make\n+the modifications specific to that case. For example:\n+\n+\tUniversal:         $(package)_cc=gcc\n+\tLinux only:        $(package)_linux_cc=gcc\n+\tx86_64 only:       $(package)_x86_64_cc = gcc\n+\tx86_64 linux only: $(package)_x86_64_linux_cc = gcc\n+\n+These variables may be set to override or append their default values.\n+\n+\t$(package)_cc\n+\t$(package)_cxx\n+\t$(package)_objc\n+\t$(package)_objcxx\n+\t$(package)_ar\n+\t$(package)_ranlib\n+\t$(package)_libtool\n+\t$(package)_nm\n+\t$(package)_cflags\n+\t$(package)_cxxflags\n+\t$(package)_ldflags\n+\t$(package)_cppflags\n+\t$(package)_config_env\n+\t$(package)_build_env\n+\t$(package)_stage_env\n+\t$(package)_build_opts\n+\t$(package)_config_opts\n+\n+The *_env variables are used to add environment variables to the respective\n+commands.\n+\n+Many variables respect a debug/release suffix as well, in order to use them for\n+only the appropriate build config. For example:\n+\n+\t$(package)_cflags_release = -O3\n+\t$(package)_cflags_i686_debug = -g\n+\t$(package)_config_opts_release = --disable-debug\n+\n+These will be used in addition to the options that do not specify\n+debug/release. All builds are considered to be release unless DEBUG=1 is set by\n+the user. Other variables may be defined as needed.\n+\n+## Build commands:\n+\n+  For each build, a unique build dir and staging dir are created. For example,\n+  `work/build/mylib/1.0-1adac830f6e` and `work/staging/mylib/1.0-1adac830f6e`.\n+\n+  The following build commands are available for each recipe:\n+\n+\t$(package)_fetch_cmds:\n+\tRuns from: build dir\n+\tFetch the source file. If undefined, it will be fetched and verified\n+\tagainst its hash.\n+\n+\t$(package)_extract_cmds:\n+\tRuns from: build dir\n+\tVerify the source file against its hash and extract it. If undefined, the\n+\tsource is assumed to be a tarball.\n+\n+\t$(package)_preprocess_cmds:\n+\tRuns from: build dir/$(package)_build_subdir\n+\tPreprocess the source as necessary. If undefined, does nothing.\n+\n+\t$(package)_config_cmds:\n+\tRuns from: build dir/$(package)_build_subdir\n+\tConfigure the source. If undefined, does nothing.\n+\n+\t$(package)_build_cmds:\n+\tRuns from: build dir/$(package)_build_subdir\n+\tBuild the source. If undefined, does nothing.\n+\n+\t$(package)_stage_cmds:\n+\tRuns from: build dir/$(package)_build_subdir\n+\tStage the build results. If undefined, does nothing.\n+\n+  The following variables are available for each recipe:\n+\t\n+\t$(1)_staging_dir: package's destination sysroot path\n+\t$(1)_staging_prefix_dir: prefix path inside of the package's staging dir\n+\t$(1)_extract_dir: path to the package's extracted sources\n+\t$(1)_build_dir: path where configure/build/stage commands will be run\n+\t$(1)_patch_dir: path where the package's patches (if any) are found\n+\n+Notes on build commands:\n+\n+For packages built with autotools, $($(package)_autoconf) can be used in the\n+configure step to (usually) correctly configure automatically. Any\n+$($(package)_config_opts) will be appended.\n+\n+Most autotools projects can be properly staged using:\n+\n+\t$(MAKE) DESTDIR=$($(package)_staging_dir) install"
      },
      {
        "sha": "428e2e13505c2dbe7fd368e41d78c1ebdd42abdf",
        "filename": "depends/README_USAGE.md",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/047a15405a5a906b0f4437d13a90dad1064a8385/depends/README_USAGE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/047a15405a5a906b0f4437d13a90dad1064a8385/depends/README_USAGE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README_USAGE.md?ref=047a15405a5a906b0f4437d13a90dad1064a8385",
        "patch": "@@ -0,0 +1,37 @@\n+To build dependencies for the current arch+OS:\n+\n+    make\n+\n+To build for another arch/OS:\n+\n+\tmake HOST=host-platform-triplet\n+\n+A prefix will be generated that's suitable for plugging into Bitcoin's\n+configure. In the above example, a dir named i686-w64-mingw32 will be\n+created. To use it for Bitcoin:\n+\n+\t./configure --prefix=`pwd`/depends/i686-w64-mingw32\n+\n+No other options are needed, the paths are automatically configured.\n+\n+Dependency Options:\n+The following can be set when running make: make FOO=bar\n+\n+\tSOURCES_PATH: downloaded sources will be placed here\n+\tBASE_CACHE: built packages will be placed here\n+\tSDK_PATH: Path where sdk's can be found (used by OSX)\n+\tFALLBACK_DOWNLOAD_PATH: If a source file can't be fetched, try here before giving up\n+\tNO_QT: Don't download/build/cache qt and its dependencies\n+\tNO_WALLET: Don't download/build/cache libs needed to enable the wallet\n+\tNO_UPNP: Don't download/build/cache packages needed for enabling upnp\n+\tDEBUG: disable some optimizations and enable more runtime checking\n+\n+If some packages are not built, for example `make NO_WALLET=1`, the appropriate\n+options will be passed to bitcoin's configure. In this case, `--disable-wallet`.\n+\n+Additional targets:\n+\n+\tdownload: run 'make download' to fetch all sources without building them\n+\tdownload-osx: run 'make download-osx' to fetch all sources needed for osx builds\n+\tdownload-win: run 'make download-win' to fetch all sources needed for win builds\n+\tdownload-linux: run 'make download-linux' to fetch all sources needed for linux builds"
      }
    ]
  }
]