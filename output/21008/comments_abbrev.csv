DrahtBot,2021-01-26 09:33:42,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/21008#issuecomment-767419966,767419966,
theStack,2021-01-26 11:09:50,Asked to mark this as draft since the test now fails on two cirrus instances. Have to investigate deeper what the problem is and how to properly reproduce it... locally 1000 test runs passed successfully.,https://github.com/bitcoin/bitcoin/pull/21008#issuecomment-767472907,767472907,
MarcoFalke,2021-01-26 11:33:33,"You might want to try with `--valgrind`, which makes races more likely to happen locally",https://github.com/bitcoin/bitcoin/pull/21008#issuecomment-767484513,767484513,
theStack,2021-01-27 19:54:40,"@MarcoFalke: Thanks, that helped a lot! On master, running via `--valgrind` leads to a failed test run quite quickly on my machine.\n\nThe PR is ready for review now. The problem of my original approach was that most tests needed nodes 0 and 1 to have the same tip. So, after this robust ""sync up"" setup approach of repeatedly generating blocks, node 1 has to catch up. Added a parameter ""sync_bloc",https://github.com/bitcoin/bitcoin/pull/21008#issuecomment-768537851,768537851,
jonatack,2021-01-28 18:10:27,"Concept ACK, will be great to robustify this test.\n\nSo far your script has run the test 25 times without errors for me (other than an unrelated issue that the test runner `--valgrind` option raises for me in general (not just on this test), but `valgrind test/functional/interface_zmq.py` works fine).\n\n```\n------------------------\n----- test run 25 -----\n------------------------\n==4",https://github.com/bitcoin/bitcoin/pull/21008#issuecomment-769274857,769274857,
theStack,2021-01-29 01:32:35,Force-pushed with changes suggested by @jonatack (https://github.com/bitcoin/bitcoin/pull/21008#discussion_r566331714 and https://github.com/bitcoin/bitcoin/pull/21008#discussion_r566336615).,https://github.com/bitcoin/bitcoin/pull/21008#issuecomment-769512370,769512370,
theStack,2021-02-09 23:02:31,Force-pushed with a rebase on master and suggestions by jonatack (https://github.com/bitcoin/bitcoin/pull/21008#discussion_r566907134 and https://github.com/bitcoin/bitcoin/pull/21008#discussion_r566908151).,https://github.com/bitcoin/bitcoin/pull/21008#issuecomment-776302267,776302267,
jonatack,2021-01-28 18:53:36,"c02f9a188 maybe general-case it with the existing explanation in `wallet_avoidreuse.py`\n```python\n        # This test isn't testing txn relay/timing, so set whitelist on the\n        # peers for instant txn relay. This speeds up the test run time 2-3x.\n        self.extra_args = [[""-whitelist=noban@127.0.0.1""]] * self.num_nodes\n```",https://github.com/bitcoin/bitcoin/pull/21008#discussion_r566331714,566331714,test/functional/interface_zmq.py
jonatack,2021-01-28 19:01:42,a8ddb26150 I didn't understand why we disconnect here only to connect again on returning to the two callers for which the default `sync_blocks=true`.,https://github.com/bitcoin/bitcoin/pull/21008#discussion_r566336615,566336615,test/functional/interface_zmq.py
theStack,2021-01-29 01:21:21,"Agree that this was unnecessarily complicated. Changed the setup routine to _always_ connect nodes 0 and 1 (which is needed for the block sync anways, that is used in every subtest except the last one) and disconnect in the subtest if necessary. ",https://github.com/bitcoin/bitcoin/pull/21008#discussion_r566517474,566517474,test/functional/interface_zmq.py
theStack,2021-01-29 01:29:04,"Thanks, I like the clear explanation and used it. My initial reason for not using the whitelist parameter on all nodes was that for node0 they would be overwritten in the setup routine. But simply adding `self.extra_args[0]` to the extra_args parameter for the `restart_node` call also tackles this.",https://github.com/bitcoin/bitcoin/pull/21008#discussion_r566520087,566520087,test/functional/interface_zmq.py
jonatack,2021-01-29 15:38:24,"nit, can enforce named args with \n```suggestion\n    def setup_zmq_test(self, services, *, recv_timeout=60, sync_blocks=True):\n```\nor alternatively for all args\n```diff\n@@ -88,7 +88,7 @@ class ZMQTest (BitcoinTestFramework):\n \n     # Restart node with the specified zmq notifications enabled, subscribe to\n     # all of them and return the corresponding ZMQSubscriber objects.\n-   ",https://github.com/bitcoin/bitcoin/pull/21008#discussion_r566907134,566907134,test/functional/interface_zmq.py
jonatack,2021-01-29 15:39:53,"nit, maybe add a comment clarifying why sync_blocks must be false (the test hangs without it)",https://github.com/bitcoin/bitcoin/pull/21008#discussion_r566908151,566908151,test/functional/interface_zmq.py
theStack,2021-02-09 23:00:51,"Thanks, I decided for the first variant, i.e. enforcing named args for `recv_timeout` and `sync_blocks`.",https://github.com/bitcoin/bitcoin/pull/21008#discussion_r573309757,573309757,test/functional/interface_zmq.py
theStack,2021-02-09 23:01:03,"Thanks, done.",https://github.com/bitcoin/bitcoin/pull/21008#discussion_r573309850,573309850,test/functional/interface_zmq.py
