MarcoFalke,2019-01-16T17:17:07Z,Do you have any benchmarks that show this is actually faster?,https://github.com/bitcoin/bitcoin/pull/15182#issuecomment-454862890,454862890,
laanwj,2019-01-16T17:37:09Z,"> Do you have any benchmarks that show this is actually faster?\n\nI wouldn't expect much performance gain, these are small vectors. I think reserving is mostly a gain when there's a large number of pushes.\n\nHow did you come to optimizing these specific functions? Did they show up in a profiling result?\n",https://github.com/bitcoin/bitcoin/pull/15182#issuecomment-454870021,454870021,
promag,2019-01-16T17:39:57Z,This code isn't performance critical. IMO simple code is preferred.,https://github.com/bitcoin/bitcoin/pull/15182#issuecomment-454871002,454871002,
shahzadlone,2019-01-16T17:40:34Z,"As long as size is bigger than 1, it is mostly useful(which is most likely the case). For example:\n\n******************[Incase of NO-reserve]******************:\nsize = 1; initial cap = 1. No Re-Allocations needed.\nTotal Cost: 0 Re-Allocation\n\nsize = 2; initial cap = 1. so needs 1 Re-Allocation, in this case so becomes (prev_cap * 2):\nsize = 2; initial cap = 2.\nTotal Cost: 1 Re-Alloc",https://github.com/bitcoin/bitcoin/pull/15182#issuecomment-454871229,454871229,
shahzadlone,2019-01-16T17:42:23Z,"Agreed it's not critically important, but it is better code practice to reserve if you know the size.\n",https://github.com/bitcoin/bitcoin/pull/15182#issuecomment-454871851,454871851,
promag,2019-01-16T17:45:39Z,Current code is worst since it calls each function twice.,https://github.com/bitcoin/bitcoin/pull/15182#issuecomment-454872965,454872965,
laanwj,2019-01-16T18:35:38Z,"Sorry, I'm going to close this, there is no agreement to make this change.",https://github.com/bitcoin/bitcoin/pull/15182#issuecomment-454890243,454890243,
