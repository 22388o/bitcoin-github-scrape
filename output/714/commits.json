[
  {
    "sha": "7546ad986fc27aff8bd5f81848f291fb686f1938",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTQ2YWQ5ODZmYzI3YWZmOGJkNWY4MTg0OGYyOTFmYjY4NmYxOTM4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-07-04T20:05:49Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-01-02T02:03:34Z"
      },
      "message": "Execute a command when best block changes (-blocknotify=<cmd>)",
      "tree": {
        "sha": "35fd99848e7a94765385fdb706b98d3d2a529a13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35fd99848e7a94765385fdb706b98d3d2a529a13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7546ad986fc27aff8bd5f81848f291fb686f1938",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7546ad986fc27aff8bd5f81848f291fb686f1938",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7546ad986fc27aff8bd5f81848f291fb686f1938",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7546ad986fc27aff8bd5f81848f291fb686f1938/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "821462017860c780badf42cb50c3796575e0e053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/821462017860c780badf42cb50c3796575e0e053",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/821462017860c780badf42cb50c3796575e0e053"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 76,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fbe59209d0fd021ba1bd48291ef3794011c7f53d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7546ad986fc27aff8bd5f81848f291fb686f1938/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7546ad986fc27aff8bd5f81848f291fb686f1938/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7546ad986fc27aff8bd5f81848f291fb686f1938",
        "patch": "@@ -222,6 +222,7 @@ bool AppInit2(int argc, char* argv[])\n             \"  -rpcport=<port>  \\t\\t  \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332)\") + \"\\n\" +\n             \"  -rpcallowip=<ip> \\t\\t  \" + _(\"Allow JSON-RPC connections from specified IP address\") + \"\\n\" +\n             \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\" +\n+            \"  -blocknotify=<cmd>  \"     + _(\"Execute this command when the best block changes\") + \"\\n\" +\n             \"  -keypool=<n>     \\t  \"   + _(\"Set key pool size to <n> (default: 100)\") + \"\\n\" +\n             \"  -rescan          \\t  \"   + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\";\n "
      },
      {
        "sha": "2584703828fb475cc466c79101f8d4b07e64f10e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 1,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7546ad986fc27aff8bd5f81848f291fb686f1938/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7546ad986fc27aff8bd5f81848f291fb686f1938/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7546ad986fc27aff8bd5f81848f291fb686f1938",
        "patch": "@@ -2,6 +2,20 @@\n // Copyright (c) 2011 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifdef WIN32\n+#include <winbase.h>\n+#else\n+#include <errno.h>\n+#endif\n+#include <stdio.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n #include \"headers.h\"\n #include \"checkpoints.h\"\n #include \"db.h\"\n@@ -1189,7 +1203,8 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n     }\n \n     // Update best block in wallet (so we can detect restored wallets)\n-    if (!IsInitialBlockDownload())\n+    bool fInitialDownload = IsInitialBlockDownload();\n+    if (!fInitialDownload)\n     {\n         const CBlockLocator locator(pindexNew);\n         ::SetBestChain(locator);\n@@ -1204,6 +1219,65 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n     nTransactionsUpdated++;\n     printf(\"SetBestChain: new best=%s  height=%d  work=%s\\n\", hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str());\n \n+    if (!fInitialDownload)\n+    {\n+        // Support block notification\n+        std::string strCmd = GetArg(\"-blocknotify\", \"\");\n+        if (!strCmd.empty())\n+        {\n+#ifndef WIN32\n+            fflush(stdout);\n+            pid_t nPid = fork();\n+            if (!nPid)\n+            {\n+                if ((nPid = fork()) != 0)\n+                    // middle\n+                    _Exit(nPid < 0);\n+                // child\n+#endif\n+                try\n+                {\n+                    std::string::size_type nPos;\n+                    while ((nPos = strCmd.find(\"%s\")) != std::string::npos)\n+                        strCmd.replace(nPos, 2, hash.GetHex());\n+#ifndef WIN32\n+                }\n+                catch (...)\n+                {\n+                    printf(\"BlockNotify: Exception preparing command\\n\");\n+                    fflush(stdout);\n+                    _exit(1);\n+                }\n+                execl(\"/bin/sh\", \"/bin/sh\", \"-c\", strCmd.c_str(), NULL);\n+                printf(\"BlockNotify: Failed to exec: %s\\n\", strerror(errno));\n+                fflush(stdout);\n+                _exit(2);\n+            }\n+            else\n+            if (nPid == -1)\n+                printf(\"BlockNotify: Failed to fork: %s\\n\", strerror(errno));\n+            else\n+                waitpid(nPid, NULL, 0);\n+#else\n+                // inside the 'try' block...\n+                STARTUPINFO si;\n+                PROCESS_INFORMATION pi;\n+\n+                memset(&si, 0, sizeof(si));\n+                si.cb = sizeof(si);\n+                memset(&pi, 0, sizeof(pi));\n+\n+                if (!CreateProcess(NULL, strCmd.c_str(), NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi))\n+                    printf(\"BlockNotify: CreateProcess failed (%d)\\n\", GetLastError());\n+            }\n+            catch (...)\n+            {\n+                printf(\"BlockNotify: Error occurred\\n\");\n+            }\n+#endif\n+        }\n+    }\n+\n     return true;\n }\n "
      }
    ]
  }
]