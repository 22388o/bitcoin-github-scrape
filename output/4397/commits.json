[
  {
    "sha": "9e9ca2b6710a0a0e600b9412b54d22b6b1f706b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTljYTJiNjcxMGEwYTBlNjAwYjk0MTJiNTRkMjJiNmIxZjcwNmIy",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-06-24T07:03:18Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-06-26T09:01:23Z"
      },
      "message": "small cleanup of #ifdefs in BindListenPort()\n\n- SO_NOSIGPIPE isn't available on WIN32 so merge the 2 non-WIN32 blocks\n- use predefined names from header for IPV6_PROTECTION_LEVEL and\n  PROTECTION_LEVEL_UNRESTRICTED",
      "tree": {
        "sha": "4acfda8752d477c191684dd0276e0d68d1be10e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4acfda8752d477c191684dd0276e0d68d1be10e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e9ca2b6710a0a0e600b9412b54d22b6b1f706b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e9ca2b6710a0a0e600b9412b54d22b6b1f706b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e9ca2b6710a0a0e600b9412b54d22b6b1f706b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e9ca2b6710a0a0e600b9412b54d22b6b1f706b2/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "343feecf562a39e7d898ece2fd745fcb9d4c90e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/343feecf562a39e7d898ece2fd745fcb9d4c90e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/343feecf562a39e7d898ece2fd745fcb9d4c90e9"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 15,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8f47489c8b24824e69c70dc781fa902913e04b83",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e9ca2b6710a0a0e600b9412b54d22b6b1f706b2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e9ca2b6710a0a0e600b9412b54d22b6b1f706b2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9e9ca2b6710a0a0e600b9412b54d22b6b1f706b2",
        "patch": "@@ -36,6 +36,17 @@\n #define MSG_NOSIGNAL 0\n #endif\n \n+// Fix for ancient MinGW versions, that don't have defined these in ws2tcpip.h.\n+// Todo: Can be removed when our pull-tester is upgraded to a modern MinGW version.\n+#ifdef WIN32\n+#ifndef PROTECTION_LEVEL_UNRESTRICTED\n+#define PROTECTION_LEVEL_UNRESTRICTED 10\n+#endif\n+#ifndef IPV6_PROTECTION_LEVEL\n+#define IPV6_PROTECTION_LEVEL 23\n+#endif\n+#endif\n+\n using namespace std;\n using namespace boost;\n \n@@ -1587,18 +1598,16 @@ bool BindListenPort(const CService &addrBind, string& strError)\n         return false;\n     }\n \n+#ifndef WIN32\n #ifdef SO_NOSIGPIPE\n     // Different way of disabling SIGPIPE on BSD\n     setsockopt(hListenSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&nOne, sizeof(int));\n #endif\n-\n-#ifndef WIN32\n     // Allow binding if the port is still in TIME_WAIT state after\n-    // the program was closed and restarted.  Not an issue on windows.\n+    // the program was closed and restarted. Not an issue on windows!\n     setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (void*)&nOne, sizeof(int));\n #endif\n \n-\n #ifdef WIN32\n     // Set to non-blocking, incoming connections will also inherit this\n     if (ioctlsocket(hListenSocket, FIONBIO, (u_long*)&nOne) == SOCKET_ERROR)\n@@ -1622,10 +1631,8 @@ bool BindListenPort(const CService &addrBind, string& strError)\n #endif\n #endif\n #ifdef WIN32\n-        int nProtLevel = 10 /* PROTECTION_LEVEL_UNRESTRICTED */;\n-        int nParameterId = 23 /* IPV6_PROTECTION_LEVEl */;\n-        // this call is allowed to fail\n-        setsockopt(hListenSocket, IPPROTO_IPV6, nParameterId, (const char*)&nProtLevel, sizeof(int));\n+        int nProtLevel = PROTECTION_LEVEL_UNRESTRICTED;\n+        setsockopt(hListenSocket, IPPROTO_IPV6, IPV6_PROTECTION_LEVEL, (const char*)&nProtLevel, sizeof(int));\n #endif\n     }\n "
      }
    ]
  },
  {
    "sha": "5d59921237ecb5a301ac37e0b97eb9c371a43d11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDU5OTIxMjM3ZWNiNWEzMDFhYzM3ZTBiOTdlYjljMzcxYTQzZDEx",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-06-24T07:09:45Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-06-26T09:01:24Z"
      },
      "message": "add missing BOOST_FOREACH indentation in ThreadSocketHandler()",
      "tree": {
        "sha": "31ad9662286991d04894059d78f1d2412afb778e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31ad9662286991d04894059d78f1d2412afb778e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d59921237ecb5a301ac37e0b97eb9c371a43d11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d59921237ecb5a301ac37e0b97eb9c371a43d11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d59921237ecb5a301ac37e0b97eb9c371a43d11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d59921237ecb5a301ac37e0b97eb9c371a43d11/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "9e9ca2b6710a0a0e600b9412b54d22b6b1f706b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e9ca2b6710a0a0e600b9412b54d22b6b1f706b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e9ca2b6710a0a0e600b9412b54d22b6b1f706b2"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 41,
      "deletions": 40
    },
    "files": [
      {
        "sha": "934c45ca4cc338f0e821cf20ba3857f9cfc15f25",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 40,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d59921237ecb5a301ac37e0b97eb9c371a43d11/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d59921237ecb5a301ac37e0b97eb9c371a43d11/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5d59921237ecb5a301ac37e0b97eb9c371a43d11",
        "patch": "@@ -827,7 +827,6 @@ void ThreadSocketHandler()\n             uiInterface.NotifyNumConnectionsChanged(nPrevNodeCount);\n         }\n \n-\n         //\n         // Find which sockets have data to receive\n         //\n@@ -849,6 +848,7 @@ void ThreadSocketHandler()\n             hSocketMax = max(hSocketMax, hListenSocket);\n             have_fds = true;\n         }\n+\n         {\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes)\n@@ -909,58 +909,59 @@ void ThreadSocketHandler()\n             MilliSleep(timeout.tv_usec/1000);\n         }\n \n-\n         //\n         // Accept new connections\n         //\n         BOOST_FOREACH(SOCKET hListenSocket, vhListenSocket)\n-        if (hListenSocket != INVALID_SOCKET && FD_ISSET(hListenSocket, &fdsetRecv))\n         {\n-            struct sockaddr_storage sockaddr;\n-            socklen_t len = sizeof(sockaddr);\n-            SOCKET hSocket = accept(hListenSocket, (struct sockaddr*)&sockaddr, &len);\n-            CAddress addr;\n-            int nInbound = 0;\n-\n-            if (hSocket != INVALID_SOCKET)\n-                if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n-                    LogPrintf(\"Warning: Unknown socket family\\n\");\n-\n+            if (hListenSocket != INVALID_SOCKET && FD_ISSET(hListenSocket, &fdsetRecv))\n             {\n-                LOCK(cs_vNodes);\n-                BOOST_FOREACH(CNode* pnode, vNodes)\n-                    if (pnode->fInbound)\n-                        nInbound++;\n-            }\n+                struct sockaddr_storage sockaddr;\n+                socklen_t len = sizeof(sockaddr);\n+                SOCKET hSocket = accept(hListenSocket, (struct sockaddr*)&sockaddr, &len);\n+                CAddress addr;\n+                int nInbound = 0;\n+\n+                if (hSocket != INVALID_SOCKET)\n+                    if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n+                        LogPrintf(\"Warning: Unknown socket family\\n\");\n \n-            if (hSocket == INVALID_SOCKET)\n-            {\n-                int nErr = WSAGetLastError();\n-                if (nErr != WSAEWOULDBLOCK)\n-                    LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n-            }\n-            else if (nInbound >= nMaxConnections - MAX_OUTBOUND_CONNECTIONS)\n-            {\n-                closesocket(hSocket);\n-            }\n-            else if (CNode::IsBanned(addr))\n-            {\n-                LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n-                closesocket(hSocket);\n-            }\n-            else\n-            {\n-                LogPrint(\"net\", \"accepted connection %s\\n\", addr.ToString());\n-                CNode* pnode = new CNode(hSocket, addr, \"\", true);\n-                pnode->AddRef();\n                 {\n                     LOCK(cs_vNodes);\n-                    vNodes.push_back(pnode);\n+                    BOOST_FOREACH(CNode* pnode, vNodes)\n+                        if (pnode->fInbound)\n+                            nInbound++;\n+                }\n+\n+                if (hSocket == INVALID_SOCKET)\n+                {\n+                    int nErr = WSAGetLastError();\n+                    if (nErr != WSAEWOULDBLOCK)\n+                        LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n+                }\n+                else if (nInbound >= nMaxConnections - MAX_OUTBOUND_CONNECTIONS)\n+                {\n+                    closesocket(hSocket);\n+                }\n+                else if (CNode::IsBanned(addr))\n+                {\n+                    LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n+                    closesocket(hSocket);\n+                }\n+                else\n+                {\n+                    LogPrint(\"net\", \"accepted connection %s\\n\", addr.ToString());\n+                    CNode* pnode = new CNode(hSocket, addr, \"\", true);\n+                    pnode->AddRef();\n+\n+                    {\n+                        LOCK(cs_vNodes);\n+                        vNodes.push_back(pnode);\n+                    }\n                 }\n             }\n         }\n \n-\n         //\n         // Service each socket\n         //"
      }
    ]
  }
]