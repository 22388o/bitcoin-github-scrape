hebasto,2020-07-19 16:25:54,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-660671704,660671704,
jonatack,2020-07-19 16:57:32,Concept/approach ACK.,https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-660675922,660675922,
JeremyRubin,2020-07-19 17:24:11,"Concept ACK on this PR.\n\nlite approach NACK on ""Making the mempool optional for a ""blocksonly"" operation mode"", it should be in it's own flag as there are some other reasons to keep a mempool around even in blocksonly.",https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-660679408,660679408,
DrahtBot,2020-07-20 00:02:02,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19872 (Avoid locking CTxMemPool::cs recursively in some cases by hebasto)\n* #19865 (scripted-diff: Restore AssertLockHel",https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-660731029,660731029,
naumenkogs,2020-07-20 07:16:19,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-660849582,660849582,
jnewbery,2020-07-20 10:51:05,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-660954582,660954582,
MarcoFalke,2020-07-21 07:34:20,"> ... empty mempool to test correctness of your transactions wrt to policy (testmempoolaccept)\n\nI don't modify `testmempoolaccept` behavior in this refactoring pull at all. If you think it should change, I suggest opening a separate behavior-changing pull reqeust. Though, with an empty mempool, a lot of the benefits of `testmempoolaccept` will be lost. So if the behavior is changed, I recommen",https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-661688687,661688687,
ariard,2020-07-21 14:31:38,"> I don't modify testmempoolaccept behavior in this refactoring pull at all.\n\nI was aware of this PR not changing behavior , my comment was more an opinion on whether or not we should tight `blocksonly` and `withoutmempool` features under same flag in future works.",https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-661897357,661897357,
practicalswift,2020-07-25 17:01:35,Concept ACK: decoupling is good,https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-663877605,663877605,
jamesob,2020-07-28 14:32:36,"Concept ACK, will make some time to review this soon.",https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-665076373,665076373,
practicalswift,2020-08-14 15:27:32,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-674129385,674129385,
jnewbery,2020-08-31 15:37:03,"plz sir, when ready for review?",https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-683856244,683856244,
MarcoFalke,2020-08-31 15:40:59,yall pls review #19848 ,https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-683858729,683858729,
MarcoFalke,2020-09-05 17:39:06,This is now ready for review,https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-687640301,687640301,
jnewbery,2020-09-06 20:40:26,utACK fafb381af8279b2d2ca768df0bf68d7eb036a2f9,https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-687895960,687895960,
promag,2020-09-07 07:56:53,Code review ACK fafb381af8279b2d2ca768df0bf68d7eb036a2f9.,https://github.com/bitcoin/bitcoin/pull/19556#issuecomment-688122670,688122670,
ariard,2020-07-20 22:21:29,In fact I think you can do better than returning an UNKNOWN state if you check that all parents are part of coin cache and transaction doesn't explicitly signal you can return a FINAL state ?,https://github.com/bitcoin/bitcoin/pull/19556#discussion_r457724631,457724631,src/policy/rbf.cpp
jnewbery,2020-07-21 13:38:06,Why not make this a pointer now if the idea is to eventually make mempool optional?,https://github.com/bitcoin/bitcoin/pull/19556#discussion_r458102776,458102776,src/init.cpp
jnewbery,2020-07-21 13:52:48,"It seems like a slightly odd interface for other components to be passing a mempool reference to a validation method. I think ideally, this would be part of a public interface for validation, which would hold its own mempool reference. For now, this is an improvement over having a mempool global.",https://github.com/bitcoin/bitcoin/pull/19556#discussion_r458113702,458113702,src/validation.h
jnewbery,2020-07-21 13:54:42,"It's odd that we'd be fetching a mempool reference for a function that never needs a mempool (gettxoutproof always refers to transactions that are confirmed in the chain, not in the mempool). Presumably this will be removed at some point in the future when the `GetTransaction()` interface is cleaned up, or when mempool becomes optional? Would it be worth having a comment here for now?",https://github.com/bitcoin/bitcoin/pull/19556#discussion_r458115142,458115142,src/rpc/rawtransaction.cpp
hebasto,2020-07-22 03:39:21,"fad153aff300d310dcd65539bbcaafbf00fbd167\nCould this function differ from https://github.com/bitcoin/bitcoin/blob/fad153aff300d310dcd65539bbcaafbf00fbd167/src/policy/rbf.cpp#L42\nby name, not only by signature?",https://github.com/bitcoin/bitcoin/pull/19556#discussion_r458514881,458514881,src/policy/rbf.cpp
promag,2020-07-23 08:46:27,"fa571a9d36fe6f54ff15e5bc9b14df6317fdf53d\n\nATM the caller has the mempool so this looks fine to me.",https://github.com/bitcoin/bitcoin/pull/19556#discussion_r459301115,459301115,src/init.cpp
MarcoFalke,2020-07-26 07:38:20,"Instead of a comment, I fixed the confusion in #19589 ",https://github.com/bitcoin/bitcoin/pull/19556#discussion_r460492397,460492397,src/rpc/rawtransaction.cpp
MarcoFalke,2020-07-26 17:16:02,"Thx, changed to optional mempool",https://github.com/bitcoin/bitcoin/pull/19556#discussion_r460551559,460551559,src/init.cpp
MarcoFalke,2020-07-26 17:17:19,"why? And, any suggestions I could take?",https://github.com/bitcoin/bitcoin/pull/19556#discussion_r460551685,460551685,src/policy/rbf.cpp
darosior,2020-09-06 14:09:03,nit: could this be passed as a `persistentMempool` bool parameter to try to contain the configuration/command line argument logic in init.cpp ? (Even if there is gArgs logic elsewhere in validation.cpp ..),https://github.com/bitcoin/bitcoin/pull/19556#discussion_r484074678,484074678,src/validation.cpp
darosior,2020-09-06 14:12:37,"This is the only call to the standalone `LoadMempool` function, so --in a follow-up-- its body could be moved here (or as a CTxMempool method) ?",https://github.com/bitcoin/bitcoin/pull/19556#discussion_r484075106,484075106,src/validation.cpp
MarcoFalke,2020-09-06 15:04:54,"There is a fuzzer that uses the standalone function. (Pull might not be merged yet, though)",https://github.com/bitcoin/bitcoin/pull/19556#discussion_r484080696,484080696,src/validation.cpp
MarcoFalke,2020-09-06 15:05:11,#19259 ,https://github.com/bitcoin/bitcoin/pull/19556#discussion_r484080729,484080729,src/validation.cpp
MarcoFalke,2020-09-06 15:07:35,"Actually, module-specific arg parsing and configuration should be moved *out* of init.cpp. For example, the wallet settings have been moved out of init as well.",https://github.com/bitcoin/bitcoin/pull/19556#discussion_r484080995,484080995,src/validation.cpp
darosior,2020-09-06 15:22:06,"Ok, thanks.",https://github.com/bitcoin/bitcoin/pull/19556#discussion_r484082532,484082532,src/validation.cpp
jnewbery,2020-09-06 20:45:10,"This comment is outdated (the mempool is being constructed, not just made available). If you retouch the PR, can you update the comment?",https://github.com/bitcoin/bitcoin/pull/19556#discussion_r484112175,484112175,src/init.cpp
MarcoFalke,2020-09-07 04:58:52,"Good point. The comment should probably be removed because now that it is no longer a global, it is clear from the code where it is passed in.",https://github.com/bitcoin/bitcoin/pull/19556#discussion_r484183336,484183336,src/init.cpp
