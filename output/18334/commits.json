[
  {
    "sha": "fa156999695ddaeb016d8320bee62f8d96679d55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE1Njk5OTY5NWRkYWViMDE2ZDgzMjBiZWU2MmY4ZDk2Njc5ZDU1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-12T17:36:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-25T10:45:43Z"
      },
      "message": "test: Add basic test for BIP 37",
      "tree": {
        "sha": "1bae058d0c4e08422ec41392c063c677158dfb06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bae058d0c4e08422ec41392c063c677158dfb06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa156999695ddaeb016d8320bee62f8d96679d55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiHigwAoVUI1c9QhyHtZPivwVtG7GY3NfX5EivILqGyDVVtMvLbrb1PU8gmBYFt\n3IWb/2NsXx462NCkNG2PszgfY271c+/V96sAylcAPIt5URmH7FrNyuBN8FN+374w\ngWiySI/OQx/KuA/uIFI5ErUD0mZDTHfGI/Pggkr2ELXwxLb6NGQYtHaV9fQ2IVku\nNHy57wO9iZ+srGWH2kL/aUMlthqGGRrpU1wp35a3Nki7xtUVvSVsfNRvKdKbYprq\nAHIfI0hLB+rbKaVdalzA1cx1tkR/aMKpfd6mHngZlif3MMspdOzYarE0wVOW8N15\n1FzNNOG2SMFW4l2r6A7aKNEJZjiLNc7zIuI0lwUC9E32Sl/0re7iTsgCg4haxyIE\nqGrs6xb8ybWZSbJTQp/Lyy1Z9jxBvfkHb/3klkvu4pgRUAx7xrl+P6JYgIDNrN1G\n5hQHpr9EfBeuUFrb61le7EcbhNeuaeTpKWPsOKY/9IkZGZCjM9fT634TePXs59JW\n38tdCrOT\n=mDXL\n-----END PGP SIGNATURE-----",
        "payload": "tree 1bae058d0c4e08422ec41392c063c677158dfb06\nparent 2737197ff39f98b0fbdf0fe913c1a7c8ee0f318c\nauthor MarcoFalke <falke.marco@gmail.com> 1584034606 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1585133143 -0400\n\ntest: Add basic test for BIP 37\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa156999695ddaeb016d8320bee62f8d96679d55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa156999695ddaeb016d8320bee62f8d96679d55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa156999695ddaeb016d8320bee62f8d96679d55/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2737197ff39f98b0fbdf0fe913c1a7c8ee0f318c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2737197ff39f98b0fbdf0fe913c1a7c8ee0f318c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2737197ff39f98b0fbdf0fe913c1a7c8ee0f318c"
      }
    ],
    "stats": {
      "total": 165,
      "additions": 161,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a22ee914831648333e5cb1c388b75250326b820a",
        "filename": "test/functional/p2p_filter.py",
        "status": "added",
        "additions": 102,
        "deletions": 0,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa156999695ddaeb016d8320bee62f8d96679d55/test/functional/p2p_filter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa156999695ddaeb016d8320bee62f8d96679d55/test/functional/p2p_filter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_filter.py?ref=fa156999695ddaeb016d8320bee62f8d96679d55",
        "patch": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    mininode_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        with mininode_lock:\n+            filter_node.last_message.pop(\"merkleblock\", None)\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.wait_for_merkleblock()\n+        assert not filter_node.tx_received\n+\n+        self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert not filter_node.merkleblock_received\n+        assert not filter_node.tx_received\n+\n+        self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n+        filter_node.merkleblock_received = False\n+        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n+        filter_node.wait_for_tx(txid)\n+        assert not filter_node.merkleblock_received\n+\n+\n+if __name__ == '__main__':\n+    FilterTest().main()"
      },
      {
        "sha": "9e87ad62a1247e852f379814e968a4d78e2f068f",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 41,
        "deletions": 4,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa156999695ddaeb016d8320bee62f8d96679d55/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa156999695ddaeb016d8320bee62f8d96679d55/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=fa156999695ddaeb016d8320bee62f8d96679d55",
        "patch": "@@ -51,6 +51,7 @@\n \n MSG_TX = 1\n MSG_BLOCK = 2\n+MSG_FILTERED_BLOCK = 3\n MSG_WITNESS_FLAG = 1 << 30\n MSG_TYPE_MASK = 0xffffffff >> 2\n \n@@ -225,10 +226,11 @@ class CInv:\n \n     typemap = {\n         0: \"Error\",\n-        1: \"TX\",\n-        2: \"Block\",\n-        1|MSG_WITNESS_FLAG: \"WitnessTx\",\n-        2|MSG_WITNESS_FLAG : \"WitnessBlock\",\n+        MSG_TX: \"TX\",\n+        MSG_BLOCK: \"Block\",\n+        MSG_TX | MSG_WITNESS_FLAG: \"WitnessTx\",\n+        MSG_BLOCK | MSG_WITNESS_FLAG: \"WitnessBlock\",\n+        MSG_FILTERED_BLOCK: \"filtered Block\",\n         4: \"CompactBlock\"\n     }\n \n@@ -1318,6 +1320,41 @@ def __repr__(self):\n         return \"msg_headers(headers=%s)\" % repr(self.headers)\n \n \n+class msg_merkleblock:\n+    command = b\"merkleblock\"\n+\n+    def deserialize(self, f):\n+        pass  # Placeholder for now\n+\n+\n+class msg_filterload:\n+    __slots__ = (\"data\", \"nHashFuncs\", \"nTweak\", \"nFlags\")\n+    command = b\"filterload\"\n+\n+    def __init__(self, data=b'00', nHashFuncs=0, nTweak=0, nFlags=0):\n+        self.data = data\n+        self.nHashFuncs = nHashFuncs\n+        self.nTweak = nTweak\n+        self.nFlags = nFlags\n+\n+    def deserialize(self, f):\n+        self.data = deser_string(f)\n+        self.nHashFuncs = struct.unpack(\"<I\", f.read(4))[0]\n+        self.nTweak = struct.unpack(\"<I\", f.read(4))[0]\n+        self.nFlags = struct.unpack(\"<B\", f.read(1))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += ser_string(self.data)\n+        r += struct.pack(\"<I\", self.nHashFuncs)\n+        r += struct.pack(\"<I\", self.nTweak)\n+        r += struct.pack(\"<B\", self.nFlags)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_filterload(data={}, nHashFuncs={}, nTweak={}, nFlags={})\".format(\n+            self.data, self.nHashFuncs, self.nTweak, self.nFlags)\n+\n \n class msg_feefilter:\n     __slots__ = (\"feerate\",)"
      },
      {
        "sha": "b760e7e1f36c6f8934136dab2fae795b66270181",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa156999695ddaeb016d8320bee62f8d96679d55/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa156999695ddaeb016d8320bee62f8d96679d55/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=fa156999695ddaeb016d8320bee62f8d96679d55",
        "patch": "@@ -30,6 +30,7 @@\n     msg_blocktxn,\n     msg_cmpctblock,\n     msg_feefilter,\n+    msg_filterload,\n     msg_getaddr,\n     msg_getblocks,\n     msg_getblocktxn,\n@@ -38,6 +39,7 @@\n     msg_headers,\n     msg_inv,\n     msg_mempool,\n+    msg_merkleblock,\n     msg_notfound,\n     msg_ping,\n     msg_pong,\n@@ -62,6 +64,7 @@\n     b\"blocktxn\": msg_blocktxn,\n     b\"cmpctblock\": msg_cmpctblock,\n     b\"feefilter\": msg_feefilter,\n+    b\"filterload\": msg_filterload,\n     b\"getaddr\": msg_getaddr,\n     b\"getblocks\": msg_getblocks,\n     b\"getblocktxn\": msg_getblocktxn,\n@@ -70,6 +73,7 @@\n     b\"headers\": msg_headers,\n     b\"inv\": msg_inv,\n     b\"mempool\": msg_mempool,\n+    b\"merkleblock\": msg_merkleblock,\n     b\"notfound\": msg_notfound,\n     b\"ping\": msg_ping,\n     b\"pong\": msg_pong,\n@@ -318,13 +322,15 @@ def on_block(self, message): pass\n     def on_blocktxn(self, message): pass\n     def on_cmpctblock(self, message): pass\n     def on_feefilter(self, message): pass\n+    def on_filterload(self, message): pass\n     def on_getaddr(self, message): pass\n     def on_getblocks(self, message): pass\n     def on_getblocktxn(self, message): pass\n     def on_getdata(self, message): pass\n     def on_getheaders(self, message): pass\n     def on_headers(self, message): pass\n     def on_mempool(self, message): pass\n+    def on_merkleblock(self, message): pass\n     def on_notfound(self, message): pass\n     def on_pong(self, message): pass\n     def on_reject(self, message): pass\n@@ -385,6 +391,17 @@ def test_function():\n \n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n+    def wait_for_merkleblock(self, timeout=60):\n+        def test_function():\n+            assert self.is_connected\n+            last_filtered_block = self.last_message.get('merkleblock')\n+            if not last_filtered_block:\n+                return False\n+            # TODO change this method to take a hash value and only return true if the correct block has been received\n+            return True\n+\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n     def wait_for_getdata(self, timeout=60):\n         \"\"\"Waits for a getdata message.\n "
      },
      {
        "sha": "9b868020e12f963f42aa0b2c299d0c208f26dddd",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa156999695ddaeb016d8320bee62f8d96679d55/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa156999695ddaeb016d8320bee62f8d96679d55/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=fa156999695ddaeb016d8320bee62f8d96679d55",
        "patch": "@@ -148,6 +148,7 @@\n     'rpc_net.py',\n     'wallet_keypool.py',\n     'p2p_mempool.py',\n+    'p2p_filter.py',\n     'rpc_setban.py',\n     'p2p_blocksonly.py',\n     'mining_prioritisetransaction.py',"
      }
    ]
  }
]