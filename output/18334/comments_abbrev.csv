DrahtBot,2020-03-12 20:53:07,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18446 (test: Add test for wtxid transaction relay by fjahr)\n* #18261 (Erlay: bandwidth-efficient transaction relay proto",https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-598413317,598413317,
MarcoFalke,2020-03-24 13:38:01,Addressed feedback by @theStack ,https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-603243555,603243555,
MarcoFalke,2020-03-24 23:49:21,">  Just out of curiousity, how did you create the bloom filter data in practice? Is there like a toolset available for playing around with bloom filters? Or did you go for the manual, programmatic way, i.e. creating CBloomFilter instance based on the bitcoind codebase, insert()ing the scriptPubKey and hex-dumping the filter's vData contents?\n\nI did what you assumed. Instead of hexdump I sent i",https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-603563025,603563025,
MarcoFalke,2020-03-24 23:50:23,"Just to be make sure: This test is not complete and can be extended/improved in the future. Though, I don't have any interest in doing that myself atm. This task will be opened as a good first issue.",https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-603563323,603563323,
MarcoFalke,2020-03-27 23:55:01,Anything left to do here?,https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605360868,605360868,
theStack,2020-03-29 10:51:04,"> Anything left to do here?\n\nI am still sceptical about the point of the two remaining `.sync_with_ping()`s in the context of this test. Having skimmed through all of its uses in other functional tests, I identified three use-cases for `.sync_with_ping()`:\n* ensuring that the version exchange with the test node already happened\n* ensuring that messages that have been sent from the test nod",https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605617660,605617660,
MarcoFalke,2020-03-29 11:50:25,"The rationale is the same, I assume that an ""imaginary"" message (obviously it doesn't exist on the wire, because that would be a bug) can at most take 3 ping-pong round trips. (Assuming also immediate tx relay). I am not sure what I could replace the delay with that would make more sense. If I use a plain `time.sleep`, I wouldn't know what to pass as argument, because I don't know the time it take",https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605624202,605624202,
practicalswift,2020-03-29 12:31:47,"Code review ACK fa156999695ddaeb016d8320bee62f8d96679d55 -- more testing coverage is better than less testing coverage\n\nImprovements can be done in a followup.",https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605628907,605628907,
MarcoFalke,2020-03-29 15:37:40,"@practicalswift I don't want to just merge this as long as there are outstanding concerns from @theStack . I don't know how to address them, so removing that test case temporarily and adding it back when they are figured out would be an option.",https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605655656,605655656,
theStack,2020-03-29 16:17:26,"@MarcoFalke: It was not my intention to block this PR -- indeed I think _not_ merging this PR would be far worse than having a test with a small synchronization controversy (that only comes from one single person so far). The pattern of `sync_with_ping()`ing the same node more than once in a row for synchronization purposes has never been used so far in any functional tests, which raised my doubts",https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605661086,605661086,
theStack,2020-03-22 20:03:20,"Could add a short comment on what this filter's dimensions are based upon (w.r.t. target parameters number of elements N, false positive rate P)?",https://github.com/bitcoin/bitcoin/pull/18334#discussion_r396134933,396134933,test/functional/p2p_filter.py
theStack,2020-03-22 20:48:52,"This looks fishy, can two consecutive `sync_with_ping()` calls actually help more for synchronization than just one? To my understanding, `sync_with_ping` is only helpful whenever a node is already processing a received message and we want to guarantee that the processing is finished. I don't see how you could ""wait for messages"" with that.\nWe neither know that at the start of the first `sync_wi",https://github.com/bitcoin/bitcoin/pull/18334#discussion_r396139141,396139141,test/functional/p2p_filter.py
MarcoFalke,2020-03-24 13:36:34,"Thanks, extended the comment to state the filter parameters.",https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397156367,397156367,test/functional/p2p_filter.py
MarcoFalke,2020-03-24 13:37:38,"Thanks, replaced with `filter_node.wait_for_tx(txid)`, which is a stricter check that also passes when immediate tx relay is disabled.",https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397157123,397157123,test/functional/p2p_filter.py
theStack,2020-03-24 21:04:15,"I think `sync_with_ping()` doesn't help here for reliable synchronization as well, as in theory there could still arrive a new message at the filter node after the asserts (same argumentation as my code-review comment a few lines above). Maybe using `wait_until` on `filter_node.merkleblock_received` would make it more robust?",https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397459811,397459811,test/functional/p2p_filter.py
theStack,2020-03-24 21:14:52,"I don't think this helps for synchronization here, see code-review comment above.",https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397465360,397465360,test/functional/p2p_filter.py
MarcoFalke,2020-03-24 23:47:51,A wait_until on `filter_node.merkleblock_received` does return immediately when the `        assert filter_node.merkleblock_received` has passed. I don't see how this could help anything.,https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397529298,397529298,test/functional/p2p_filter.py
theStack,2020-03-25 10:05:45,"What I meant was removing the `sync_with_ping()`s completely (as they effectively only serve as hidden delays, they don't do anything for reliable synchronization -- the expected messages could in theory still appear after) and replacing the `assert filter_node.merkleblock_received` with a `wait_until`-pendant, similar like you did on the subtests 1 and 4 on the latest force-push (https://github.c",https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397735934,397735934,test/functional/p2p_filter.py
MarcoFalke,2020-03-25 10:47:13,Replaced with `filter_node.wait_for_merkleblock()`.,https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397760775,397760775,test/functional/p2p_filter.py
MarcoFalke,2020-03-25 10:47:41,This can not be replaced with a `wait_for` unless I am mistaken,https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397761055,397761055,test/functional/p2p_filter.py
theStack,2020-03-25 11:34:42,"Agreed, `wait_for` is not an option here -- it's always problematic to assert that something was _not_ received, as we never know for sure that it couldn't still come in in the future. I don't know a better way here than to just wait for some arbitrary time between the `.sendtoaddress()` call and the `asserts` :confused:",https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397787108,397787108,test/functional/p2p_filter.py
