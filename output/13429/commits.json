[
  {
    "sha": "984d72ec659361d8c1a6f3c6864e839a807817a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODRkNzJlYzY1OTM2MWQ4YzFhNmYzYzY4NjRlODM5YTgwNzgxN2E3",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-06-11T05:19:07Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-07-23T01:37:00Z"
      },
      "message": "Return the script type from Solver\n\nBecause false is synonymous with TX_NONSTANDARD, this conveys the same\ninformation and makes the handling explicitly based on script type,\nsimplifying each call site.\n\nPrior to this change it was common for the return value to be ignored,\nor for the return value and TX_NONSTANDARD to be redundantly handled.",
      "tree": {
        "sha": "893e16d6f36458f1925bb54bca43fc7674336e82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/893e16d6f36458f1925bb54bca43fc7674336e82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/984d72ec659361d8c1a6f3c6864e839a807817a7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJbVTE8AAoJEG7l83hfeLNFLD0IAJBUDaC9BS26sqjHfEMz3wrs\nDW2GZM755K1Gok09zuek+IAOS4kMwxGgKwLyigdfM/6k+vqfIveDHPvugkEINrzL\nPnf5hVK/MeMmes7K7d2m07Yq67N5tW0fRghUnjv52sCu9zZ/1wqxPJHyfx94u0h8\nqkAz3vZoiUB+GWeEgMgfvSYCyQN0/XbDAgPw6Ads/TsHDGetDyzkQ1CaSJsaVgdU\nOhv3KwJnoiHCL5FP5S/4DYEL5gjMAToSUt0F+PXNeBTJG1LgWfBAXRdKrF15Mkc3\nJbHzKNDKOZ8kncAgzSULn9E3WvLTbicrKwOFXJdYBI39dzNWqfenB438sF4Yqd8=\n=mYks\n-----END PGP SIGNATURE-----",
        "payload": "tree 893e16d6f36458f1925bb54bca43fc7674336e82\nparent 0a34593ddb7a6d10c19533754d7a23345a155986\nauthor Ben Woosley <ben.woosley@gmail.com> 1528694347 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1532309820 -0400\n\nReturn the script type from Solver\n\nBecause false is synonymous with TX_NONSTANDARD, this conveys the same\ninformation and makes the handling explicitly based on script type,\nsimplifying each call site.\n\nPrior to this change it was common for the return value to be ignored,\nor for the return value and TX_NONSTANDARD to be redundantly handled.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/984d72ec659361d8c1a6f3c6864e839a807817a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/984d72ec659361d8c1a6f3c6864e839a807817a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/984d72ec659361d8c1a6f3c6864e839a807817a7/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a34593ddb7a6d10c19533754d7a23345a155986",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a34593ddb7a6d10c19533754d7a23345a155986",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a34593ddb7a6d10c19533754d7a23345a155986"
      }
    ],
    "stats": {
      "total": 160,
      "additions": 62,
      "deletions": 98
    },
    "files": [
      {
        "sha": "4bc0eab0116e7a38c9dd2fc63c31f84241d551db",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/984d72ec659361d8c1a6f3c6864e839a807817a7/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/984d72ec659361d8c1a6f3c6864e839a807817a7/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=984d72ec659361d8c1a6f3c6864e839a807817a7",
        "patch": "@@ -164,11 +164,11 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n                     insert(COutPoint(hash, i));\n                 else if ((nFlags & BLOOM_UPDATE_MASK) == BLOOM_UPDATE_P2PUBKEY_ONLY)\n                 {\n-                    txnouttype type;\n                     std::vector<std::vector<unsigned char> > vSolutions;\n-                    if (Solver(txout.scriptPubKey, type, vSolutions) &&\n-                            (type == TX_PUBKEY || type == TX_MULTISIG))\n+                    txnouttype type = Solver(txout.scriptPubKey, vSolutions);\n+                    if (type == TX_PUBKEY || type == TX_MULTISIG) {\n                         insert(COutPoint(hash, i));\n+                    }\n                 }\n                 break;\n             }"
      },
      {
        "sha": "ec6a7d1321d68a3c752a063027025f26a63faee0",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/984d72ec659361d8c1a6f3c6864e839a807817a7/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/984d72ec659361d8c1a6f3c6864e839a807817a7/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=984d72ec659361d8c1a6f3c6864e839a807817a7",
        "patch": "@@ -141,8 +141,7 @@ void ScriptToUniv(const CScript& script, UniValue& out, bool include_address)\n     out.pushKV(\"hex\", HexStr(script.begin(), script.end()));\n \n     std::vector<std::vector<unsigned char>> solns;\n-    txnouttype type;\n-    Solver(script, type, solns);\n+    txnouttype type = Solver(script, solns);\n     out.pushKV(\"type\", GetTxnOutputType(type));\n \n     CTxDestination address;"
      },
      {
        "sha": "f1ba09d4d26a6f5e56e688be51ccc60ae59be693",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/984d72ec659361d8c1a6f3c6864e839a807817a7/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/984d72ec659361d8c1a6f3c6864e839a807817a7/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=984d72ec659361d8c1a6f3c6864e839a807817a7",
        "patch": "@@ -57,11 +57,11 @@ bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n {\n     std::vector<std::vector<unsigned char> > vSolutions;\n-    if (!Solver(scriptPubKey, whichType, vSolutions))\n-        return false;\n+    whichType = Solver(scriptPubKey, vSolutions);\n \n-    if (whichType == TX_MULTISIG)\n-    {\n+    if (whichType == TX_NONSTANDARD || whichType == TX_WITNESS_UNKNOWN) {\n+        return false;\n+    } else if (whichType == TX_MULTISIG) {\n         unsigned char m = vSolutions.front()[0];\n         unsigned char n = vSolutions.back()[0];\n         // Support up to x-of-3 multisig txns as standard\n@@ -70,10 +70,11 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n         if (m < 1 || m > n)\n             return false;\n     } else if (whichType == TX_NULL_DATA &&\n-               (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes))\n+               (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes)) {\n           return false;\n+    }\n \n-    return whichType != TX_NONSTANDARD && whichType != TX_WITNESS_UNKNOWN;\n+    return true;\n }\n \n bool IsStandardTx(const CTransaction& tx, std::string& reason)\n@@ -166,14 +167,10 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n         std::vector<std::vector<unsigned char> > vSolutions;\n-        txnouttype whichType;\n-        // get the scriptPubKey corresponding to this input:\n-        const CScript& prevScript = prev.scriptPubKey;\n-        if (!Solver(prevScript, whichType, vSolutions))\n+        txnouttype whichType = Solver(prev.scriptPubKey, vSolutions);\n+        if (whichType == TX_NONSTANDARD) {\n             return false;\n-\n-        if (whichType == TX_SCRIPTHASH)\n-        {\n+        } else if (whichType == TX_SCRIPTHASH) {\n             std::vector<std::vector<unsigned char> > stack;\n             // convert the scriptSig into a stack, so we can inspect the redeemScript\n             if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SigVersion::BASE))"
      },
      {
        "sha": "eed70d730f81247d242deaced156227bc19a8d7c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/984d72ec659361d8c1a6f3c6864e839a807817a7/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/984d72ec659361d8c1a6f3c6864e839a807817a7/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=984d72ec659361d8c1a6f3c6864e839a807817a7",
        "patch": "@@ -627,9 +627,8 @@ static UniValue decodescript(const JSONRPCRequest& request)\n         // P2SH and witness programs cannot be wrapped in P2WSH, if this script\n         // is a witness program, don't return addresses for a segwit programs.\n         if (type.get_str() == \"pubkey\" || type.get_str() == \"pubkeyhash\" || type.get_str() == \"multisig\" || type.get_str() == \"nonstandard\") {\n-            txnouttype which_type;\n             std::vector<std::vector<unsigned char>> solutions_data;\n-            Solver(script, which_type, solutions_data);\n+            txnouttype which_type = Solver(script, solutions_data);\n             // Uncompressed pubkeys cannot be used with segwit checksigs.\n             // If the script contains an uncompressed pubkey, skip encoding of a segwit program.\n             if ((which_type == TX_PUBKEY) || (which_type == TX_MULTISIG)) {"
      },
      {
        "sha": "7e7087663a3b9d64c88e4334653cc4e7c2e276b9",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/984d72ec659361d8c1a6f3c6864e839a807817a7/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/984d72ec659361d8c1a6f3c6864e839a807817a7/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=984d72ec659361d8c1a6f3c6864e839a807817a7",
        "patch": "@@ -60,8 +60,7 @@ IsMineResult IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey,\n     IsMineResult ret = IsMineResult::NO;\n \n     std::vector<valtype> vSolutions;\n-    txnouttype whichType;\n-    Solver(scriptPubKey, whichType, vSolutions);\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n \n     CKeyID keyID;\n     switch (whichType)"
      },
      {
        "sha": "f0090800aa58a2295be0becf86e1c7b1231eb459",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/984d72ec659361d8c1a6f3c6864e839a807817a7/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/984d72ec659361d8c1a6f3c6864e839a807817a7/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=984d72ec659361d8c1a6f3c6864e839a807817a7",
        "patch": "@@ -102,8 +102,7 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n     std::vector<unsigned char> sig;\n \n     std::vector<valtype> vSolutions;\n-    if (!Solver(scriptPubKey, whichTypeRet, vSolutions))\n-        return false;\n+    whichTypeRet = Solver(scriptPubKey, vSolutions);\n \n     switch (whichTypeRet)\n     {\n@@ -314,9 +313,8 @@ SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nI\n     }\n \n     // Get scripts\n-    txnouttype script_type;\n     std::vector<std::vector<unsigned char>> solutions;\n-    Solver(txout.scriptPubKey, script_type, solutions);\n+    txnouttype script_type = Solver(txout.scriptPubKey, solutions);\n     SigVersion sigversion = SigVersion::BASE;\n     CScript next_script = txout.scriptPubKey;\n \n@@ -327,7 +325,7 @@ SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nI\n         next_script = std::move(redeem_script);\n \n         // Get redeemScript type\n-        Solver(next_script, script_type, solutions);\n+        script_type = Solver(next_script, solutions);\n         stack.script.pop_back();\n     }\n     if (script_type == TX_WITNESS_V0_SCRIPTHASH && !stack.witness.empty() && !stack.witness.back().empty()) {\n@@ -337,7 +335,7 @@ SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nI\n         next_script = std::move(witness_script);\n \n         // Get witnessScript type\n-        Solver(next_script, script_type, solutions);\n+        script_type = Solver(next_script, solutions);\n         stack.witness.pop_back();\n         stack.script = std::move(stack.witness);\n         stack.witness.clear();"
      },
      {
        "sha": "d309420d35ea1e76d37c8bf6d0e127101c4ef857",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 36,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/984d72ec659361d8c1a6f3c6864e839a807817a7/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/984d72ec659361d8c1a6f3c6864e839a807817a7/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=984d72ec659361d8c1a6f3c6864e839a807817a7",
        "patch": "@@ -87,41 +87,36 @@ static bool MatchMultisig(const CScript& script, unsigned int& required, std::ve\n     return (it + 1 == script.end());\n }\n \n-bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet)\n+txnouttype Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned char>>& vSolutionsRet)\n {\n     vSolutionsRet.clear();\n \n     // Shortcut for pay-to-script-hash, which are more constrained than the other types:\n     // it is always OP_HASH160 20 [20 byte hash] OP_EQUAL\n     if (scriptPubKey.IsPayToScriptHash())\n     {\n-        typeRet = TX_SCRIPTHASH;\n         std::vector<unsigned char> hashBytes(scriptPubKey.begin()+2, scriptPubKey.begin()+22);\n         vSolutionsRet.push_back(hashBytes);\n-        return true;\n+        return TX_SCRIPTHASH;\n     }\n \n     int witnessversion;\n     std::vector<unsigned char> witnessprogram;\n     if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n         if (witnessversion == 0 && witnessprogram.size() == WITNESS_V0_KEYHASH_SIZE) {\n-            typeRet = TX_WITNESS_V0_KEYHASH;\n             vSolutionsRet.push_back(witnessprogram);\n-            return true;\n+            return TX_WITNESS_V0_KEYHASH;\n         }\n         if (witnessversion == 0 && witnessprogram.size() == WITNESS_V0_SCRIPTHASH_SIZE) {\n-            typeRet = TX_WITNESS_V0_SCRIPTHASH;\n             vSolutionsRet.push_back(witnessprogram);\n-            return true;\n+            return TX_WITNESS_V0_SCRIPTHASH;\n         }\n         if (witnessversion != 0) {\n-            typeRet = TX_WITNESS_UNKNOWN;\n             vSolutionsRet.push_back(std::vector<unsigned char>{(unsigned char)witnessversion});\n             vSolutionsRet.push_back(std::move(witnessprogram));\n-            return true;\n+            return TX_WITNESS_UNKNOWN;\n         }\n-        typeRet = TX_NONSTANDARD;\n-        return false;\n+        return TX_NONSTANDARD;\n     }\n \n     // Provably prunable, data-carrying output\n@@ -130,47 +125,39 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n     // byte passes the IsPushOnly() test we don't care what exactly is in the\n     // script.\n     if (scriptPubKey.size() >= 1 && scriptPubKey[0] == OP_RETURN && scriptPubKey.IsPushOnly(scriptPubKey.begin()+1)) {\n-        typeRet = TX_NULL_DATA;\n-        return true;\n+        return TX_NULL_DATA;\n     }\n \n     std::vector<unsigned char> data;\n     if (MatchPayToPubkey(scriptPubKey, data)) {\n-        typeRet = TX_PUBKEY;\n         vSolutionsRet.push_back(std::move(data));\n-        return true;\n+        return TX_PUBKEY;\n     }\n \n     if (MatchPayToPubkeyHash(scriptPubKey, data)) {\n-        typeRet = TX_PUBKEYHASH;\n         vSolutionsRet.push_back(std::move(data));\n-        return true;\n+        return TX_PUBKEYHASH;\n     }\n \n     unsigned int required;\n     std::vector<std::vector<unsigned char>> keys;\n     if (MatchMultisig(scriptPubKey, required, keys)) {\n-        typeRet = TX_MULTISIG;\n         vSolutionsRet.push_back({static_cast<unsigned char>(required)}); // safe as required is in range 1..16\n         vSolutionsRet.insert(vSolutionsRet.end(), keys.begin(), keys.end());\n         vSolutionsRet.push_back({static_cast<unsigned char>(keys.size())}); // safe as size is in range 1..16\n-        return true;\n+        return TX_MULTISIG;\n     }\n \n     vSolutionsRet.clear();\n-    typeRet = TX_NONSTANDARD;\n-    return false;\n+    return TX_NONSTANDARD;\n }\n \n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n {\n     std::vector<valtype> vSolutions;\n-    txnouttype whichType;\n-    if (!Solver(scriptPubKey, whichType, vSolutions))\n-        return false;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n \n-    if (whichType == TX_PUBKEY)\n-    {\n+    if (whichType == TX_PUBKEY) {\n         CPubKey pubKey(vSolutions[0]);\n         if (!pubKey.IsValid())\n             return false;\n@@ -212,11 +199,11 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet)\n {\n     addressRet.clear();\n-    typeRet = TX_NONSTANDARD;\n     std::vector<valtype> vSolutions;\n-    if (!Solver(scriptPubKey, typeRet, vSolutions))\n+    typeRet = Solver(scriptPubKey, vSolutions);\n+    if (typeRet == TX_NONSTANDARD) {\n         return false;\n-    if (typeRet == TX_NULL_DATA){\n+    } else if (typeRet == TX_NULL_DATA) {\n         // This is data, not addresses\n         return false;\n     }\n@@ -324,14 +311,12 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n \n CScript GetScriptForWitness(const CScript& redeemscript)\n {\n-    txnouttype typ;\n     std::vector<std::vector<unsigned char> > vSolutions;\n-    if (Solver(redeemscript, typ, vSolutions)) {\n-        if (typ == TX_PUBKEY) {\n-            return GetScriptForDestination(WitnessV0KeyHash(Hash160(vSolutions[0].begin(), vSolutions[0].end())));\n-        } else if (typ == TX_PUBKEYHASH) {\n-            return GetScriptForDestination(WitnessV0KeyHash(vSolutions[0]));\n-        }\n+    txnouttype typ = Solver(redeemscript, vSolutions);\n+    if (typ == TX_PUBKEY) {\n+        return GetScriptForDestination(WitnessV0KeyHash(Hash160(vSolutions[0].begin(), vSolutions[0].end())));\n+    } else if (typ == TX_PUBKEYHASH) {\n+        return GetScriptForDestination(WitnessV0KeyHash(vSolutions[0]));\n     }\n     return GetScriptForDestination(WitnessV0ScriptHash(redeemscript));\n }"
      },
      {
        "sha": "4728b056dd14356ffba1fd46a779f5172626f51e",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/984d72ec659361d8c1a6f3c6864e839a807817a7/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/984d72ec659361d8c1a6f3c6864e839a807817a7/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=984d72ec659361d8c1a6f3c6864e839a807817a7",
        "patch": "@@ -135,11 +135,10 @@ const char* GetTxnOutputType(txnouttype t);\n  * script hash, for P2PKH it will contain the key hash, etc.\n  *\n  * @param[in]   scriptPubKey   Script to parse\n- * @param[out]  typeRet        The script type\n  * @param[out]  vSolutionsRet  Vector of parsed pubkeys and hashes\n- * @return                     True if script matches standard template\n+ * @return                     The script type. TX_NONSTANDARD represents a failed solve.\n  */\n-bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n+txnouttype Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned char>>& vSolutionsRet);\n \n /**\n  * Parse a standard scriptPubKey for the destination address. Assigns result to"
      },
      {
        "sha": "ded0a8ac1abab3475263121adaafd78653d517ba",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 29,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/984d72ec659361d8c1a6f3c6864e839a807817a7/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/984d72ec659361d8c1a6f3c6864e839a807817a7/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=984d72ec659361d8c1a6f3c6864e839a807817a7",
        "patch": "@@ -25,31 +25,27 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n     }\n \n     CScript s;\n-    txnouttype whichType;\n     std::vector<std::vector<unsigned char> > solutions;\n \n     // TX_PUBKEY\n     s.clear();\n     s << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n-    BOOST_CHECK(Solver(s, whichType, solutions));\n-    BOOST_CHECK_EQUAL(whichType, TX_PUBKEY);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_PUBKEY);\n     BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0]));\n \n     // TX_PUBKEYHASH\n     s.clear();\n     s << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-    BOOST_CHECK(Solver(s, whichType, solutions));\n-    BOOST_CHECK_EQUAL(whichType, TX_PUBKEYHASH);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_PUBKEYHASH);\n     BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0].GetID()));\n \n     // TX_SCRIPTHASH\n     CScript redeemScript(s); // initialize with leftover P2PKH script\n     s.clear();\n     s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n-    BOOST_CHECK(Solver(s, whichType, solutions));\n-    BOOST_CHECK_EQUAL(whichType, TX_SCRIPTHASH);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_SCRIPTHASH);\n     BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(CScriptID(redeemScript)));\n \n@@ -59,8 +55,7 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n         ToByteVector(pubkeys[0]) <<\n         ToByteVector(pubkeys[1]) <<\n         OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(Solver(s, whichType, solutions));\n-    BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_MULTISIG);\n     BOOST_CHECK_EQUAL(solutions.size(), 4U);\n     BOOST_CHECK(solutions[0] == std::vector<unsigned char>({1}));\n     BOOST_CHECK(solutions[1] == ToByteVector(pubkeys[0]));\n@@ -73,8 +68,7 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n         ToByteVector(pubkeys[1]) <<\n         ToByteVector(pubkeys[2]) <<\n         OP_3 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(Solver(s, whichType, solutions));\n-    BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_MULTISIG);\n     BOOST_CHECK_EQUAL(solutions.size(), 5U);\n     BOOST_CHECK(solutions[0] == std::vector<unsigned char>({2}));\n     BOOST_CHECK(solutions[1] == ToByteVector(pubkeys[0]));\n@@ -88,15 +82,13 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n         std::vector<unsigned char>({0}) <<\n         std::vector<unsigned char>({75}) <<\n         std::vector<unsigned char>({255});\n-    BOOST_CHECK(Solver(s, whichType, solutions));\n-    BOOST_CHECK_EQUAL(whichType, TX_NULL_DATA);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NULL_DATA);\n     BOOST_CHECK_EQUAL(solutions.size(), 0U);\n \n     // TX_WITNESS_V0_KEYHASH\n     s.clear();\n     s << OP_0 << ToByteVector(pubkeys[0].GetID());\n-    BOOST_CHECK(Solver(s, whichType, solutions));\n-    BOOST_CHECK_EQUAL(whichType, TX_WITNESS_V0_KEYHASH);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_WITNESS_V0_KEYHASH);\n     BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0].GetID()));\n \n@@ -107,16 +99,14 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n \n     s.clear();\n     s << OP_0 << ToByteVector(scriptHash);\n-    BOOST_CHECK(Solver(s, whichType, solutions));\n-    BOOST_CHECK_EQUAL(whichType, TX_WITNESS_V0_SCRIPTHASH);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_WITNESS_V0_SCRIPTHASH);\n     BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(scriptHash));\n \n     // TX_NONSTANDARD\n     s.clear();\n     s << OP_9 << OP_ADD << OP_11 << OP_EQUAL;\n-    BOOST_CHECK(!Solver(s, whichType, solutions));\n-    BOOST_CHECK_EQUAL(whichType, TX_NONSTANDARD);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)\n@@ -127,53 +117,52 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)\n     pubkey = key.GetPubKey();\n \n     CScript s;\n-    txnouttype whichType;\n     std::vector<std::vector<unsigned char> > solutions;\n \n     // TX_PUBKEY with incorrectly sized pubkey\n     s.clear();\n     s << std::vector<unsigned char>(30, 0x01) << OP_CHECKSIG;\n-    BOOST_CHECK(!Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n \n     // TX_PUBKEYHASH with incorrectly sized key hash\n     s.clear();\n     s << OP_DUP << OP_HASH160 << ToByteVector(pubkey) << OP_EQUALVERIFY << OP_CHECKSIG;\n-    BOOST_CHECK(!Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n \n     // TX_SCRIPTHASH with incorrectly sized script hash\n     s.clear();\n     s << OP_HASH160 << std::vector<unsigned char>(21, 0x01) << OP_EQUAL;\n-    BOOST_CHECK(!Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n \n     // TX_MULTISIG 0/2\n     s.clear();\n     s << OP_0 << ToByteVector(pubkey) << OP_1 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(!Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n \n     // TX_MULTISIG 2/1\n     s.clear();\n     s << OP_2 << ToByteVector(pubkey) << OP_1 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(!Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n \n     // TX_MULTISIG n = 2 with 1 pubkey\n     s.clear();\n     s << OP_1 << ToByteVector(pubkey) << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(!Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n \n     // TX_MULTISIG n = 1 with 0 pubkeys\n     s.clear();\n     s << OP_1 << OP_1 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(!Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n \n     // TX_NULL_DATA with other opcodes\n     s.clear();\n     s << OP_RETURN << std::vector<unsigned char>({75}) << OP_ADD;\n-    BOOST_CHECK(!Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n \n     // TX_WITNESS with incorrect program size\n     s.clear();\n     s << OP_0 << std::vector<unsigned char>(19, 0x01);\n-    BOOST_CHECK(!Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)"
      },
      {
        "sha": "eb1e5ba3fb3995caebead0aa51832a138bcd879d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/984d72ec659361d8c1a6f3c6864e839a807817a7/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/984d72ec659361d8c1a6f3c6864e839a807817a7/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=984d72ec659361d8c1a6f3c6864e839a807817a7",
        "patch": "@@ -4021,9 +4021,8 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n     void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n     {\n         // Always present: script type and redeemscript\n-        txnouttype which_type;\n         std::vector<std::vector<unsigned char>> solutions_data;\n-        Solver(subscript, which_type, solutions_data);\n+        txnouttype which_type = Solver(subscript, solutions_data);\n         obj.pushKV(\"script\", GetTxnOutputType(which_type));\n         obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n "
      }
    ]
  }
]