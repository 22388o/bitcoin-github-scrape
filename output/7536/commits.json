[
  {
    "sha": "f31b6b899568e976eb9c18bc899e9e8328b524b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzFiNmI4OTk1NjhlOTc2ZWI5YzE4YmM4OTllOWU4MzI4YjUyNGI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-15T14:50:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-15T16:14:30Z"
      },
      "message": "test: test leading space for ParseHex\n\nBerkeleyDB dump files have key and value lines indented.\nThe salvage code passes these to ParseHex as-is.\nCheck this in the tests (should just pass with current code).",
      "tree": {
        "sha": "803fcdb36c3b8d0b95886018d640ce64ed7f0b38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/803fcdb36c3b8d0b95886018d640ce64ed7f0b38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f31b6b899568e976eb9c18bc899e9e8328b524b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f31b6b899568e976eb9c18bc899e9e8328b524b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f31b6b899568e976eb9c18bc899e9e8328b524b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f31b6b899568e976eb9c18bc899e9e8328b524b5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf1e113311fe225c9a3a78f9d0fb5e43974573b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf1e113311fe225c9a3a78f9d0fb5e43974573b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf1e113311fe225c9a3a78f9d0fb5e43974573b7"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "43e8ae9b369cd0d1a21c4931a7c065d7e7be8a0a",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f31b6b899568e976eb9c18bc899e9e8328b524b5/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f31b6b899568e976eb9c18bc899e9e8328b524b5/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=f31b6b899568e976eb9c18bc899e9e8328b524b5",
        "patch": "@@ -60,6 +60,10 @@ BOOST_AUTO_TEST_CASE(util_ParseHex)\n     result = ParseHex(\"12 34 56 78\");\n     BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n \n+    // Leading space must be supported (used in CDBEnv::Salvage)\n+    result = ParseHex(\" 89 34 56 78\");\n+    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+\n     // Stop parsing at invalid value\n     result = ParseHex(\"1234 invalid 1234\");\n     BOOST_CHECK(result.size() == 2 && result[0] == 0x12 && result[1] == 0x34);"
      },
      {
        "sha": "6af5413a9e7560b06d6bf9710255d27b991730f2",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f31b6b899568e976eb9c18bc899e9e8328b524b5/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f31b6b899568e976eb9c18bc899e9e8328b524b5/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=f31b6b899568e976eb9c18bc899e9e8328b524b5",
        "patch": "@@ -193,9 +193,9 @@ bool CDBEnv::Salvage(const std::string& strFile, bool fAggressive, std::vector<C\n     // Format of bdb dump is ascii lines:\n     // header lines...\n     // HEADER=END\n-    // hexadecimal key\n-    // hexadecimal value\n-    // ... repeated\n+    //  hexadecimal key\n+    //  hexadecimal value\n+    //  ... repeated\n     // DATA=END\n \n     string strLine;"
      }
    ]
  }
]