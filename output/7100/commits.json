[
  {
    "sha": "3602ed8f66d696c28dda6f0faf6abc05dba542b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjAyZWQ4ZjY2ZDY5NmMyOGRkYTZmMGZhZjZhYmMwNWRiYTU0MmI1",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-26T05:25:30Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-26T05:25:30Z"
      },
      "message": "Replace setInventoryKnown with a rolling bloom filter.\n\nMruset setInventoryKnown was reduced to a remarkably small 1000\n entries as a side effect of sendbuffer size reductions in 2012.\n\nThis removes setInventoryKnown filtering from merkleBlock responses\n because false positives there are especially unattractive and\n also because I'm not sure if there aren't race conditions around\n the relay pool that would cause some transactions there to\n be suppressed. (Also, ProcessGetData was accessing\n setInventoryKnown without taking the required lock.)",
      "tree": {
        "sha": "0c7026b289dc297ad0dd17e5c1d30a57cf83b6c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c7026b289dc297ad0dd17e5c1d30a57cf83b6c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3602ed8f66d696c28dda6f0faf6abc05dba542b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3602ed8f66d696c28dda6f0faf6abc05dba542b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3602ed8f66d696c28dda6f0faf6abc05dba542b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3602ed8f66d696c28dda6f0faf6abc05dba542b5/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b2ddc558e1cddb5ff54fd2d9e375793021a908e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b2ddc558e1cddb5ff54fd2d9e375793021a908e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b2ddc558e1cddb5ff54fd2d9e375793021a908e"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "3ffbf90881c6f0bde01ab36f460f7b77678ab39c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3602ed8f66d696c28dda6f0faf6abc05dba542b5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3602ed8f66d696c28dda6f0faf6abc05dba542b5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3602ed8f66d696c28dda6f0faf6abc05dba542b5",
        "patch": "@@ -3908,8 +3908,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             // however we MUST always provide at least what the remote peer needs\n                             typedef std::pair<unsigned int, uint256> PairType;\n                             BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n-                                if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, pair.second)))\n-                                    pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n+                                pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n                         }\n                         // else\n                             // no response\n@@ -5118,7 +5117,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             vInvWait.reserve(pto->vInventoryToSend.size());\n             BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n             {\n-                if (pto->setInventoryKnown.count(inv))\n+                if (pto->setInventoryKnown.contains(inv.hash))\n                     continue;\n \n                 // trickle out tx inv to protect privacy\n@@ -5139,9 +5138,9 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     }\n                 }\n \n-                // returns true if wasn't already contained in the set\n-                if (pto->setInventoryKnown.insert(inv).second)\n+                if (!pto->setInventoryKnown.contains(inv.hash))\n                 {\n+                    pto->setInventoryKnown.insert(inv.hash);\n                     vInv.push_back(inv);\n                     if (vInv.size() >= 1000)\n                     {"
      },
      {
        "sha": "d0d85897488279091cad48e25b4a57e3ca72cdfd",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3602ed8f66d696c28dda6f0faf6abc05dba542b5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3602ed8f66d696c28dda6f0faf6abc05dba542b5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3602ed8f66d696c28dda6f0faf6abc05dba542b5",
        "patch": "@@ -2343,7 +2343,7 @@ unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addrKnown(5000, 0.001),\n-    setInventoryKnown(SendBufferSize() / 1000)\n+    setInventoryKnown(50000, 0.000001)\n {\n     nServices = 0;\n     hSocket = hSocketIn;\n@@ -2370,6 +2370,7 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     nSendOffset = 0;\n     hashContinue = uint256();\n     nStartingHeight = -1;\n+    setInventoryKnown.reset();\n     fGetAddr = false;\n     fRelayTxes = false;\n     pfilter = new CBloomFilter();"
      },
      {
        "sha": "b5cd5091ea9ed194158a5c568da2fcf822055e52",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3602ed8f66d696c28dda6f0faf6abc05dba542b5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3602ed8f66d696c28dda6f0faf6abc05dba542b5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3602ed8f66d696c28dda6f0faf6abc05dba542b5",
        "patch": "@@ -379,7 +379,7 @@ class CNode\n     std::set<uint256> setKnown;\n \n     // inventory based relay\n-    mruset<CInv> setInventoryKnown;\n+    CRollingBloomFilter setInventoryKnown;\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n     std::multimap<int64_t, CInv> mapAskFor;\n@@ -484,15 +484,15 @@ class CNode\n     {\n         {\n             LOCK(cs_inventory);\n-            setInventoryKnown.insert(inv);\n+            setInventoryKnown.insert(inv.hash);\n         }\n     }\n \n     void PushInventory(const CInv& inv)\n     {\n         {\n             LOCK(cs_inventory);\n-            if (!setInventoryKnown.count(inv))\n+            if (!setInventoryKnown.contains(inv.hash))\n                 vInventoryToSend.push_back(inv);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "7fdf4fdc324f6b6243da9fd0b271d595c696f62f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmRmNGZkYzMyNGY2YjYyNDNkYTlmZDBiMjcxZDU5NWM2OTZmNjJm",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-28T13:19:59Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-28T13:19:59Z"
      },
      "message": "Remove mruset as it is no longer used.",
      "tree": {
        "sha": "5b290a15e9e3943e6843a5d47237d8b62d8ffdb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b290a15e9e3943e6843a5d47237d8b62d8ffdb3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fdf4fdc324f6b6243da9fd0b271d595c696f62f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fdf4fdc324f6b6243da9fd0b271d595c696f62f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fdf4fdc324f6b6243da9fd0b271d595c696f62f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fdf4fdc324f6b6243da9fd0b271d595c696f62f/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3602ed8f66d696c28dda6f0faf6abc05dba542b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3602ed8f66d696c28dda6f0faf6abc05dba542b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3602ed8f66d696c28dda6f0faf6abc05dba542b5"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 0,
      "deletions": 149
    },
    "files": [
      {
        "sha": "5d9fc9e49dfcea5717e20624eb20eae8ce094f65",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fdf4fdc324f6b6243da9fd0b271d595c696f62f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fdf4fdc324f6b6243da9fd0b271d595c696f62f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7fdf4fdc324f6b6243da9fd0b271d595c696f62f",
        "patch": "@@ -116,7 +116,6 @@ BITCOIN_CORE_H = \\\n   memusage.h \\\n   merkleblock.h \\\n   miner.h \\\n-  mruset.h \\\n   net.h \\\n   netbase.h \\\n   noui.h \\"
      },
      {
        "sha": "ddfb7d9679d866ca1f12279041c645743152216b",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fdf4fdc324f6b6243da9fd0b271d595c696f62f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fdf4fdc324f6b6243da9fd0b271d595c696f62f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=7fdf4fdc324f6b6243da9fd0b271d595c696f62f",
        "patch": "@@ -58,7 +58,6 @@ BITCOIN_TESTS =\\\n   test/main_tests.cpp \\\n   test/mempool_tests.cpp \\\n   test/miner_tests.cpp \\\n-  test/mruset_tests.cpp \\\n   test/multisig_tests.cpp \\\n   test/netbase_tests.cpp \\\n   test/pmt_tests.cpp \\"
      },
      {
        "sha": "398aa173bf1e3c788e35a388116becc16d7ba201",
        "filename": "src/mruset.h",
        "status": "removed",
        "additions": 0,
        "deletions": 65,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3602ed8f66d696c28dda6f0faf6abc05dba542b5/src/mruset.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3602ed8f66d696c28dda6f0faf6abc05dba542b5/src/mruset.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mruset.h?ref=3602ed8f66d696c28dda6f0faf6abc05dba542b5",
        "patch": "@@ -1,65 +0,0 @@\n-// Copyright (c) 2012-2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_MRUSET_H\n-#define BITCOIN_MRUSET_H\n-\n-#include <set>\n-#include <vector>\n-#include <utility>\n-\n-/** STL-like set container that only keeps the most recent N elements. */\n-template <typename T>\n-class mruset\n-{\n-public:\n-    typedef T key_type;\n-    typedef T value_type;\n-    typedef typename std::set<T>::iterator iterator;\n-    typedef typename std::set<T>::const_iterator const_iterator;\n-    typedef typename std::set<T>::size_type size_type;\n-\n-protected:\n-    std::set<T> set;\n-    std::vector<iterator> order;\n-    size_type first_used;\n-    size_type first_unused;\n-    const size_type nMaxSize;\n-\n-public:\n-    mruset(size_type nMaxSizeIn = 1) : nMaxSize(nMaxSizeIn) { clear(); }\n-    iterator begin() const { return set.begin(); }\n-    iterator end() const { return set.end(); }\n-    size_type size() const { return set.size(); }\n-    bool empty() const { return set.empty(); }\n-    iterator find(const key_type& k) const { return set.find(k); }\n-    size_type count(const key_type& k) const { return set.count(k); }\n-    void clear()\n-    {\n-        set.clear();\n-        order.assign(nMaxSize, set.end());\n-        first_used = 0;\n-        first_unused = 0;\n-    }\n-    bool inline friend operator==(const mruset<T>& a, const mruset<T>& b) { return a.set == b.set; }\n-    bool inline friend operator==(const mruset<T>& a, const std::set<T>& b) { return a.set == b; }\n-    bool inline friend operator<(const mruset<T>& a, const mruset<T>& b) { return a.set < b.set; }\n-    std::pair<iterator, bool> insert(const key_type& x)\n-    {\n-        std::pair<iterator, bool> ret = set.insert(x);\n-        if (ret.second) {\n-            if (set.size() == nMaxSize + 1) {\n-                set.erase(order[first_used]);\n-                order[first_used] = set.end();\n-                if (++first_used == nMaxSize) first_used = 0;\n-            }\n-            order[first_unused] = ret.first;\n-            if (++first_unused == nMaxSize) first_unused = 0;\n-        }\n-        return ret;\n-    }\n-    size_type max_size() const { return nMaxSize; }\n-};\n-\n-#endif // BITCOIN_MRUSET_H"
      },
      {
        "sha": "36fddb26b972fc0abd3073a66c62dc3f8e5c00c0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fdf4fdc324f6b6243da9fd0b271d595c696f62f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fdf4fdc324f6b6243da9fd0b271d595c696f62f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7fdf4fdc324f6b6243da9fd0b271d595c696f62f",
        "patch": "@@ -9,7 +9,6 @@\n #include \"bloom.h\"\n #include \"compat.h\"\n #include \"limitedmap.h\"\n-#include \"mruset.h\"\n #include \"netbase.h\"\n #include \"protocol.h\"\n #include \"random.h\""
      },
      {
        "sha": "2b68f8899eea83a3eee676deaf7a62e549aeb290",
        "filename": "src/test/mruset_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 81,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3602ed8f66d696c28dda6f0faf6abc05dba542b5/src/test/mruset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3602ed8f66d696c28dda6f0faf6abc05dba542b5/src/test/mruset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mruset_tests.cpp?ref=3602ed8f66d696c28dda6f0faf6abc05dba542b5",
        "patch": "@@ -1,81 +0,0 @@\n-// Copyright (c) 2012-2013 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"mruset.h\"\n-\n-#include \"random.h\"\n-#include \"util.h\"\n-#include \"test/test_bitcoin.h\"\n-\n-#include <set>\n-\n-#include <boost/test/unit_test.hpp>\n-\n-#define NUM_TESTS 16\n-#define MAX_SIZE 100\n-\n-using namespace std;\n-\n-BOOST_FIXTURE_TEST_SUITE(mruset_tests, BasicTestingSetup)\n-\n-BOOST_AUTO_TEST_CASE(mruset_test)\n-{\n-    // The mruset being tested.\n-    mruset<int> mru(5000);\n-\n-    // Run the test 10 times.\n-    for (int test = 0; test < 10; test++) {\n-        // Reset mru.\n-        mru.clear();\n-\n-        // A deque + set to simulate the mruset.\n-        std::deque<int> rep;\n-        std::set<int> all;\n-\n-        // Insert 10000 random integers below 15000.\n-        for (int j=0; j<10000; j++) {\n-            int add = GetRandInt(15000);\n-            mru.insert(add);\n-\n-            // Add the number to rep/all as well.\n-            if (all.count(add) == 0) {\n-               all.insert(add);\n-               rep.push_back(add);\n-               if (all.size() == 5001) {\n-                   all.erase(rep.front());\n-                   rep.pop_front();\n-               }\n-            }\n-\n-            // Do a full comparison between mru and the simulated mru every 1000 and every 5001 elements.\n-            if (j % 1000 == 0 || j % 5001 == 0) {\n-                mruset<int> mru2 = mru; // Also try making a copy\n-\n-                // Check that all elements that should be in there, are in there.\n-                BOOST_FOREACH(int x, rep) {\n-                    BOOST_CHECK(mru.count(x));\n-                    BOOST_CHECK(mru2.count(x));\n-                }\n-\n-                // Check that all elements that are in there, should be in there.\n-                BOOST_FOREACH(int x, mru) {\n-                    BOOST_CHECK(all.count(x));\n-                }\n-\n-                // Check that all elements that are in there, should be in there.\n-                BOOST_FOREACH(int x, mru2) {\n-                    BOOST_CHECK(all.count(x));\n-                }\n-\n-                for (int t = 0; t < 10; t++) {\n-                    int r = GetRandInt(15000);\n-                    BOOST_CHECK(all.count(r) == mru.count(r));\n-                    BOOST_CHECK(all.count(r) == mru2.count(r));\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "7dd88dd10abe337da7a047ec4955bec6cdb27ddd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGQ4OGRkMTBhYmUzMzdkYTdhMDQ3ZWM0OTU1YmVjNmNkYjI3ZGRk",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-29T09:52:51Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-29T10:03:29Z"
      },
      "message": "Rename setInventoryKnown filterInventoryKnown",
      "tree": {
        "sha": "227b0c2c50637f6466366b1948ea81b153c8f28b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/227b0c2c50637f6466366b1948ea81b153c8f28b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7dd88dd10abe337da7a047ec4955bec6cdb27ddd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dd88dd10abe337da7a047ec4955bec6cdb27ddd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7dd88dd10abe337da7a047ec4955bec6cdb27ddd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dd88dd10abe337da7a047ec4955bec6cdb27ddd/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fdf4fdc324f6b6243da9fd0b271d595c696f62f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fdf4fdc324f6b6243da9fd0b271d595c696f62f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fdf4fdc324f6b6243da9fd0b271d595c696f62f"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "97939f228aa11957b424628294a34cc0150a7b92",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dd88dd10abe337da7a047ec4955bec6cdb27ddd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dd88dd10abe337da7a047ec4955bec6cdb27ddd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7dd88dd10abe337da7a047ec4955bec6cdb27ddd",
        "patch": "@@ -5117,7 +5117,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             vInvWait.reserve(pto->vInventoryToSend.size());\n             BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n             {\n-                if (pto->setInventoryKnown.contains(inv.hash))\n+                if (pto->filterInventoryKnown.contains(inv.hash))\n                     continue;\n \n                 // trickle out tx inv to protect privacy\n@@ -5138,9 +5138,9 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     }\n                 }\n \n-                if (!pto->setInventoryKnown.contains(inv.hash))\n+                if (!pto->filterInventoryKnown.contains(inv.hash))\n                 {\n-                    pto->setInventoryKnown.insert(inv.hash);\n+                    pto->filterInventoryKnown.insert(inv.hash);\n                     vInv.push_back(inv);\n                     if (vInv.size() >= 1000)\n                     {"
      },
      {
        "sha": "786c12b8edfef8f0823a10e9794eff8357b75c09",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dd88dd10abe337da7a047ec4955bec6cdb27ddd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dd88dd10abe337da7a047ec4955bec6cdb27ddd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7dd88dd10abe337da7a047ec4955bec6cdb27ddd",
        "patch": "@@ -2343,7 +2343,7 @@ unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addrKnown(5000, 0.001),\n-    setInventoryKnown(50000, 0.000001)\n+    filterInventoryKnown(50000, 0.000001)\n {\n     nServices = 0;\n     hSocket = hSocketIn;\n@@ -2370,7 +2370,7 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     nSendOffset = 0;\n     hashContinue = uint256();\n     nStartingHeight = -1;\n-    setInventoryKnown.reset();\n+    filterInventoryKnown.reset();\n     fGetAddr = false;\n     fRelayTxes = false;\n     pfilter = new CBloomFilter();"
      },
      {
        "sha": "2852d27f5365eefcafef26225d76fa745f12322b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dd88dd10abe337da7a047ec4955bec6cdb27ddd/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dd88dd10abe337da7a047ec4955bec6cdb27ddd/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7dd88dd10abe337da7a047ec4955bec6cdb27ddd",
        "patch": "@@ -378,7 +378,7 @@ class CNode\n     std::set<uint256> setKnown;\n \n     // inventory based relay\n-    CRollingBloomFilter setInventoryKnown;\n+    CRollingBloomFilter filterInventoryKnown;\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n     std::multimap<int64_t, CInv> mapAskFor;\n@@ -483,15 +483,15 @@ class CNode\n     {\n         {\n             LOCK(cs_inventory);\n-            setInventoryKnown.insert(inv.hash);\n+            filterInventoryKnown.insert(inv.hash);\n         }\n     }\n \n     void PushInventory(const CInv& inv)\n     {\n         {\n             LOCK(cs_inventory);\n-            if (!setInventoryKnown.contains(inv.hash))\n+            if (!filterInventoryKnown.contains(inv.hash))\n                 vInventoryToSend.push_back(inv);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "4448ff695f59f36dd4970c660dac1dd971050a76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDQ4ZmY2OTVmNTlmMzZkZDQ5NzBjNjYwZGFjMWRkOTcxMDUwYTc2",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-29T09:56:00Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-29T10:03:29Z"
      },
      "message": "Only use filterInventoryKnown with MSG_TX inventory messages.\n\nPreviously this logic could erroneously filter a MSG_BLOCK inventory message.",
      "tree": {
        "sha": "1aa8a8412941fc6c209d72dcee33a6275e607328",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1aa8a8412941fc6c209d72dcee33a6275e607328"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4448ff695f59f36dd4970c660dac1dd971050a76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4448ff695f59f36dd4970c660dac1dd971050a76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4448ff695f59f36dd4970c660dac1dd971050a76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4448ff695f59f36dd4970c660dac1dd971050a76/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7dd88dd10abe337da7a047ec4955bec6cdb27ddd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dd88dd10abe337da7a047ec4955bec6cdb27ddd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7dd88dd10abe337da7a047ec4955bec6cdb27ddd"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dbeaaf7dabad01534f8ea81a461c98eb1780ca48",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4448ff695f59f36dd4970c660dac1dd971050a76/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4448ff695f59f36dd4970c660dac1dd971050a76/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4448ff695f59f36dd4970c660dac1dd971050a76",
        "patch": "@@ -491,8 +491,9 @@ class CNode\n     {\n         {\n             LOCK(cs_inventory);\n-            if (!filterInventoryKnown.contains(inv.hash))\n-                vInventoryToSend.push_back(inv);\n+            if (inv.type == MSG_TX && filterInventoryKnown.contains(inv.hash))\n+                return;\n+            vInventoryToSend.push_back(inv);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "8a0465b59d70d7aed86233d6d2178128066062b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTA0NjViNTlkNzBkN2FlZDg2MjMzZDZkMjE3ODEyODA2NjA2MmI0",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-29T22:10:31Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-29T22:10:31Z"
      },
      "message": "Actually only use filterInventoryKnown with MSG_TX inventory messages.\n\nPreviously this logic could erroneously filter a MSG_BLOCK inventory message.",
      "tree": {
        "sha": "73f9d0969c7ae0c0b206bbe5d2dc096c3506df3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73f9d0969c7ae0c0b206bbe5d2dc096c3506df3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a0465b59d70d7aed86233d6d2178128066062b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a0465b59d70d7aed86233d6d2178128066062b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a0465b59d70d7aed86233d6d2178128066062b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a0465b59d70d7aed86233d6d2178128066062b4/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4448ff695f59f36dd4970c660dac1dd971050a76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4448ff695f59f36dd4970c660dac1dd971050a76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4448ff695f59f36dd4970c660dac1dd971050a76"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 7,
      "deletions": 9
    },
    "files": [
      {
        "sha": "3480ed1b868ec0283d908b8c1c28e851a837a7cd",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0465b59d70d7aed86233d6d2178128066062b4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0465b59d70d7aed86233d6d2178128066062b4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8a0465b59d70d7aed86233d6d2178128066062b4",
        "patch": "@@ -5117,7 +5117,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             vInvWait.reserve(pto->vInventoryToSend.size());\n             BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n             {\n-                if (pto->filterInventoryKnown.contains(inv.hash))\n+                if (inv.type == MSG_TX && pto->filterInventoryKnown.contains(inv.hash))\n                     continue;\n \n                 // trickle out tx inv to protect privacy\n@@ -5138,15 +5138,13 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     }\n                 }\n \n-                if (!pto->filterInventoryKnown.contains(inv.hash))\n+                pto->filterInventoryKnown.insert(inv.hash);\n+\n+                vInv.push_back(inv);\n+                if (vInv.size() >= 1000)\n                 {\n-                    pto->filterInventoryKnown.insert(inv.hash);\n-                    vInv.push_back(inv);\n-                    if (vInv.size() >= 1000)\n-                    {\n-                        pto->PushMessage(\"inv\", vInv);\n-                        vInv.clear();\n-                    }\n+                    pto->PushMessage(\"inv\", vInv);\n+                    vInv.clear();\n                 }\n             }\n             pto->vInventoryToSend = vInvWait;"
      }
    ]
  }
]