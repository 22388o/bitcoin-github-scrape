[
  {
    "sha": "f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmZiN2FjZGE0YWVmZDAxYjhlZjZjZDc3MDYzYmZjMGM0ZjRhYjM2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-04T00:49:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-12-05T07:47:12Z"
      },
      "message": "Move CTxInWitness inside CTxIn",
      "tree": {
        "sha": "311a5d4ee2b12057eb6cab17a0226f17cdc53eef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/311a5d4ee2b12057eb6cab17a0226f17cdc53eef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d04aebaec7bbf4095bd4f6a715eb6ee834857115",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d04aebaec7bbf4095bd4f6a715eb6ee834857115",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d04aebaec7bbf4095bd4f6a715eb6ee834857115"
      }
    ],
    "stats": {
      "total": 272,
      "additions": 96,
      "deletions": 176
    },
    "files": [
      {
        "sha": "4aca1c7eb3d4b56bf81904c085148ab791826ef4",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -36,7 +36,6 @@ static CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, co\n     txSpend.nLockTime = 0;\n     txSpend.vin.resize(1);\n     txSpend.vout.resize(1);\n-    txSpend.wit.vtxinwit.resize(1);\n     txSpend.vin[0].prevout.hash = txCredit.GetHash();\n     txSpend.vin[0].prevout.n = 0;\n     txSpend.vin[0].scriptSig = scriptSig;\n@@ -68,7 +67,7 @@ static void VerifyScriptBench(benchmark::State& state)\n     CScript witScriptPubkey = CScript() << OP_DUP << OP_HASH160 << ToByteVector(pubkeyHash) << OP_EQUALVERIFY << OP_CHECKSIG;\n     CTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n     CMutableTransaction txSpend = BuildSpendingTransaction(scriptSig, txCredit);\n-    CScriptWitness& witness = txSpend.wit.vtxinwit[0].scriptWitness;\n+    CScriptWitness& witness = txSpend.vin[0].scriptWitness;\n     witness.stack.emplace_back();\n     key.Sign(SignatureHash(witScriptPubkey, txSpend, 0, SIGHASH_ALL, txCredit.vout[0].nValue, SIGVERSION_WITNESS_V0), witness.stack.back(), 0);\n     witness.stack.back().push_back(static_cast<unsigned char>(SIGHASH_ALL));\n@@ -80,7 +79,7 @@ static void VerifyScriptBench(benchmark::State& state)\n         bool success = VerifyScript(\n             txSpend.vin[0].scriptSig,\n             txCredit.vout[0].scriptPubKey,\n-            &txSpend.wit.vtxinwit[0].scriptWitness,\n+            &txSpend.vin[0].scriptWitness,\n             flags,\n             MutableTransactionSignatureChecker(&txSpend, 0, txCredit.vout[0].nValue),\n             &err);"
      },
      {
        "sha": "816687a45d146bd5caf68dd7e5387158440b588a",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -494,7 +494,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n             sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i));\n         UpdateTransaction(mergedTx, i, sigdata);\n \n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "80f6216ee216d1fd39904206c382ea6359babd1c",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 7,
        "deletions": 23,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -18,35 +18,19 @@ static inline size_t RecursiveDynamicUsage(const COutPoint& out) {\n }\n \n static inline size_t RecursiveDynamicUsage(const CTxIn& in) {\n-    return RecursiveDynamicUsage(in.scriptSig) + RecursiveDynamicUsage(in.prevout);\n-}\n-\n-static inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n-    return RecursiveDynamicUsage(out.scriptPubKey);\n-}\n-\n-static inline size_t RecursiveDynamicUsage(const CScriptWitness& scriptWit) {\n-    size_t mem = memusage::DynamicUsage(scriptWit.stack);\n-    for (std::vector<std::vector<unsigned char> >::const_iterator it = scriptWit.stack.begin(); it != scriptWit.stack.end(); it++) {\n-        mem += memusage::DynamicUsage(*it);\n+    size_t mem = RecursiveDynamicUsage(in.scriptSig) + RecursiveDynamicUsage(in.prevout) + memusage::DynamicUsage(in.scriptWitness.stack);\n+    for (std::vector<std::vector<unsigned char> >::const_iterator it = in.scriptWitness.stack.begin(); it != in.scriptWitness.stack.end(); it++) {\n+         mem += memusage::DynamicUsage(*it);\n     }\n     return mem;\n }\n \n-static inline size_t RecursiveDynamicUsage(const CTxInWitness& txinwit) {\n-    return RecursiveDynamicUsage(txinwit.scriptWitness);\n-}\n-\n-static inline size_t RecursiveDynamicUsage(const CTxWitness& txwit) {\n-    size_t mem = memusage::DynamicUsage(txwit.vtxinwit);\n-    for (std::vector<CTxInWitness>::const_iterator it = txwit.vtxinwit.begin(); it != txwit.vtxinwit.end(); it++) {\n-        mem += RecursiveDynamicUsage(*it);\n-    }\n-    return mem;\n+static inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n+    return RecursiveDynamicUsage(out.scriptPubKey);\n }\n \n static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n-    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout) + RecursiveDynamicUsage(tx.wit);\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n     for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n         mem += RecursiveDynamicUsage(*it);\n     }\n@@ -57,7 +41,7 @@ static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n }\n \n static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n-    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout) + RecursiveDynamicUsage(tx.wit);\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n     for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n         mem += RecursiveDynamicUsage(*it);\n     }"
      },
      {
        "sha": "11257185976d747367b50610e6869daa30258863",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -168,9 +168,9 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n             o.pushKV(\"asm\", ScriptToAsmStr(txin.scriptSig, true));\n             o.pushKV(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n             in.pushKV(\"scriptSig\", o);\n-            if (!tx.wit.IsNull() && i < tx.wit.vtxinwit.size() && !tx.wit.vtxinwit[i].IsNull()) {\n+            if (!tx.vin[i].scriptWitness.IsNull()) {\n                 UniValue txinwitness(UniValue::VARR);\n-                for (const auto& item : tx.wit.vtxinwit[i].scriptWitness.stack) {\n+                for (const auto& item : tx.vin[i].scriptWitness.stack) {\n                     txinwitness.push_back(HexStr(item.begin(), item.end()));\n                 }\n                 in.pushKV(\"txinwitness\", txinwitness);"
      },
      {
        "sha": "b48b9cee49be5718529e995392c592edc989246d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -245,7 +245,7 @@ bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& packa\n     BOOST_FOREACH (const CTxMemPool::txiter it, package) {\n         if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n             return false;\n-        if (!fIncludeWitness && !it->GetTx().wit.IsNull())\n+        if (!fIncludeWitness && it->GetTx().HasWitness())\n             return false;\n         if (fNeedSizeAccounting) {\n             uint64_t nTxSize = ::GetSerializeSize(it->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n@@ -554,7 +554,7 @@ void BlockAssembler::addPriorityTxs()\n         }\n \n         // cannot accept witness transactions into a non-witness block\n-        if (!fIncludeWitness && !iter->GetTx().wit.IsNull())\n+        if (!fIncludeWitness && iter->GetTx().HasWitness())\n             continue;\n \n         // If tx is dependent on other mempool txs which haven't yet been included"
      },
      {
        "sha": "3ff5ccc18f0d553e0aa61bb85d0ed3cbd8398fa6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -1666,7 +1666,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // Probably non-standard or insufficient fee/priority\n                         LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n-                        if (orphanTx.wit.IsNull() && !stateDummy.CorruptionPossible()) {\n+                        if (!orphanTx.HasWitness() && !stateDummy.CorruptionPossible()) {\n                             // Do not use rejection cache for witness transactions or\n                             // witness-stripped transactions, as they can have been malleated.\n                             // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n@@ -1708,7 +1708,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 LogPrint(\"mempool\", \"not keeping orphan with rejected parents %s\\n\",tx.GetHash().ToString());\n             }\n         } else {\n-            if (tx.wit.IsNull() && !state.CorruptionPossible()) {\n+            if (!tx.HasWitness() && !state.CorruptionPossible()) {\n                 // Do not use rejection cache for witness transactions or\n                 // witness-stripped transactions, as they can have been malleated.\n                 // See https://github.com/bitcoin/bitcoin/issues/8279 for details."
      },
      {
        "sha": "d318a0997c0dc51cf13845f798246c883dff999e",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -163,7 +163,7 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     {\n         // We don't care if witness for this input is empty, since it must not be bloated.\n         // If the script is invalid without witness, it would be caught sooner or later during validation.\n-        if (tx.wit.vtxinwit[i].IsNull())\n+        if (tx.vin[i].scriptWitness.IsNull())\n             continue;\n \n         const CTxOut &prev = mapInputs.GetOutputFor(tx.vin[i]);\n@@ -192,13 +192,13 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n \n         // Check P2WSH standard limits\n         if (witnessversion == 0 && witnessprogram.size() == 32) {\n-            if (tx.wit.vtxinwit[i].scriptWitness.stack.back().size() > MAX_STANDARD_P2WSH_SCRIPT_SIZE)\n+            if (tx.vin[i].scriptWitness.stack.back().size() > MAX_STANDARD_P2WSH_SCRIPT_SIZE)\n                 return false;\n-            size_t sizeWitnessStack = tx.wit.vtxinwit[i].scriptWitness.stack.size() - 1;\n+            size_t sizeWitnessStack = tx.vin[i].scriptWitness.stack.size() - 1;\n             if (sizeWitnessStack > MAX_STANDARD_P2WSH_STACK_ITEMS)\n                 return false;\n             for (unsigned int j = 0; j < sizeWitnessStack; j++) {\n-                if (tx.wit.vtxinwit[i].scriptWitness.stack[j].size() > MAX_STANDARD_P2WSH_STACK_ITEM_SIZE)\n+                if (tx.vin[i].scriptWitness.stack[j].size() > MAX_STANDARD_P2WSH_STACK_ITEM_SIZE)\n                     return false;\n             }\n         }"
      },
      {
        "sha": "faf3637d743956a0e26af2833219f6dddb799815",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -55,7 +55,7 @@ std::string CTxOut::ToString() const\n }\n \n CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}\n-CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), wit(tx.wit), nLockTime(tx.nLockTime) {}\n+CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {}\n \n uint256 CMutableTransaction::GetHash() const\n {\n@@ -74,8 +74,8 @@ uint256 CTransaction::GetWitnessHash() const\n \n /* For backward compatibility, the hash is initialized to 0. TODO: remove the need for this default constructor entirely. */\n CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0), hash() {}\n-CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), wit(tx.wit), nLockTime(tx.nLockTime), hash(ComputeHash()) {}\n-CTransaction::CTransaction(CMutableTransaction &&tx) : nVersion(tx.nVersion), vin(std::move(tx.vin)), vout(std::move(tx.vout)), wit(std::move(tx.wit)), nLockTime(tx.nLockTime), hash(ComputeHash()) {}\n+CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime), hash(ComputeHash()) {}\n+CTransaction::CTransaction(CMutableTransaction &&tx) : nVersion(tx.nVersion), vin(std::move(tx.vin)), vout(std::move(tx.vout)), nLockTime(tx.nLockTime), hash(ComputeHash()) {}\n \n CAmount CTransaction::GetValueOut() const\n {\n@@ -131,8 +131,8 @@ std::string CTransaction::ToString() const\n         nLockTime);\n     for (unsigned int i = 0; i < vin.size(); i++)\n         str += \"    \" + vin[i].ToString() + \"\\n\";\n-    for (unsigned int i = 0; i < wit.vtxinwit.size(); i++)\n-        str += \"    \" + wit.vtxinwit[i].scriptWitness.ToString() + \"\\n\";\n+    for (unsigned int i = 0; i < vin.size(); i++)\n+        str += \"    \" + vin[i].scriptWitness.ToString() + \"\\n\";\n     for (unsigned int i = 0; i < vout.size(); i++)\n         str += \"    \" + vout[i].ToString() + \"\\n\";\n     return str;"
      },
      {
        "sha": "79393fa949277021d078aee64cda1981e282ca34",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 31,
        "deletions": 68,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -65,6 +65,7 @@ class CTxIn\n     COutPoint prevout;\n     CScript scriptSig;\n     uint32_t nSequence;\n+    CScriptWitness scriptWitness; //! Only serialized through CTransaction\n \n     /* Setting nSequence to this value for every input in a transaction\n      * disables nLockTime. */\n@@ -211,62 +212,6 @@ class CTxOut\n     std::string ToString() const;\n };\n \n-class CTxInWitness\n-{\n-public:\n-    CScriptWitness scriptWitness;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        READWRITE(scriptWitness.stack);\n-    }\n-\n-    bool IsNull() const { return scriptWitness.IsNull(); }\n-\n-    CTxInWitness() { }\n-};\n-\n-class CTxWitness\n-{\n-public:\n-    /** In case vtxinwit is missing, all entries are treated as if they were empty CTxInWitnesses */\n-    std::vector<CTxInWitness> vtxinwit;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    bool IsEmpty() const { return vtxinwit.empty(); }\n-\n-    bool IsNull() const\n-    {\n-        for (size_t n = 0; n < vtxinwit.size(); n++) {\n-            if (!vtxinwit[n].IsNull()) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    void SetNull()\n-    {\n-        vtxinwit.clear();\n-    }\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        for (size_t n = 0; n < vtxinwit.size(); n++) {\n-            READWRITE(vtxinwit[n]);\n-        }\n-        if (IsNull()) {\n-            /* It's illegal to encode a witness when all vtxinwit entries are empty. */\n-            throw std::ios_base::failure(\"Superfluous witness record\");\n-        }\n-    }\n-};\n-\n struct CMutableTransaction;\n \n /**\n@@ -294,7 +239,6 @@ inline void UnserializeTransaction(TxType& tx, Stream& s) {\n     unsigned char flags = 0;\n     tx.vin.clear();\n     tx.vout.clear();\n-    tx.wit.SetNull();\n     /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n     s >> tx.vin;\n     if (tx.vin.size() == 0 && fAllowWitness) {\n@@ -311,8 +255,9 @@ inline void UnserializeTransaction(TxType& tx, Stream& s) {\n     if ((flags & 1) && fAllowWitness) {\n         /* The witness flag is present, and we support witnesses. */\n         flags ^= 1;\n-        tx.wit.vtxinwit.resize(tx.vin.size());\n-        s >> tx.wit;\n+        for (size_t i = 0; i < tx.vin.size(); i++) {\n+            s >> tx.vin[i].scriptWitness.stack;\n+        }\n     }\n     if (flags) {\n         /* Unknown flag in the serialization */\n@@ -328,10 +273,9 @@ inline void SerializeTransaction(const TxType& tx, Stream& s) {\n     s << tx.nVersion;\n     unsigned char flags = 0;\n     // Consistency check\n-    assert(tx.wit.vtxinwit.size() <= tx.vin.size());\n     if (fAllowWitness) {\n         /* Check whether witnesses need to be serialized. */\n-        if (!tx.wit.IsNull()) {\n+        if (tx.HasWitness()) {\n             flags |= 1;\n         }\n     }\n@@ -345,11 +289,7 @@ inline void SerializeTransaction(const TxType& tx, Stream& s) {\n     s << tx.vout;\n     if (flags & 1) {\n         for (size_t i = 0; i < tx.vin.size(); i++) {\n-            if (i < tx.wit.vtxinwit.size()) {\n-                s << tx.wit.vtxinwit[i];\n-            } else {\n-                s << CTxInWitness();\n-            }\n+            s << tx.vin[i].scriptWitness.stack;\n         }\n     }\n     s << tx.nLockTime;\n@@ -379,7 +319,6 @@ class CTransaction\n     const int32_t nVersion;\n     const std::vector<CTxIn> vin;\n     const std::vector<CTxOut> vout;\n-    CTxWitness wit; // Not const: can change without invalidating the txid cache\n     const uint32_t nLockTime;\n \n private:\n@@ -451,6 +390,16 @@ class CTransaction\n     }\n \n     std::string ToString() const;\n+\n+    bool HasWitness() const\n+    {\n+        for (size_t i = 0; i < vin.size(); i++) {\n+            if (!vin[i].scriptWitness.IsNull()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n };\n \n /** A mutable version of CTransaction. */\n@@ -459,7 +408,6 @@ struct CMutableTransaction\n     int32_t nVersion;\n     std::vector<CTxIn> vin;\n     std::vector<CTxOut> vout;\n-    CTxWitness wit;\n     uint32_t nLockTime;\n \n     CMutableTransaction();\n@@ -485,6 +433,21 @@ struct CMutableTransaction\n      * fly, as opposed to GetHash() in CTransaction, which uses a cached result.\n      */\n     uint256 GetHash() const;\n+\n+    friend bool operator==(const CMutableTransaction& a, const CMutableTransaction& b)\n+    {\n+        return a.GetHash() == b.GetHash();\n+    }\n+\n+    bool HasWitness() const\n+    {\n+        for (size_t i = 0; i < vin.size(); i++) {\n+            if (!vin[i].scriptWitness.IsNull()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n };\n \n typedef std::shared_ptr<const CTransaction> CTransactionRef;"
      },
      {
        "sha": "b13aa4de34f07ee0108afddfb0849d1b3a1c70cb",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -82,16 +82,13 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n             o.push_back(Pair(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n             in.push_back(Pair(\"scriptSig\", o));\n         }\n-        if (!tx.wit.IsNull()) {\n-            if (!tx.wit.vtxinwit[i].IsNull()) {\n+        if (tx.HasWitness()) {\n                 UniValue txinwitness(UniValue::VARR);\n-                for (unsigned int j = 0; j < tx.wit.vtxinwit[i].scriptWitness.stack.size(); j++) {\n-                    std::vector<unsigned char> item = tx.wit.vtxinwit[i].scriptWitness.stack[j];\n+                for (unsigned int j = 0; j < tx.vin[i].scriptWitness.stack.size(); j++) {\n+                    std::vector<unsigned char> item = tx.vin[i].scriptWitness.stack[j];\n                     txinwitness.push_back(HexStr(item.begin(), item.end()));\n                 }\n                 in.push_back(Pair(\"txinwitness\", txinwitness));\n-            }\n-\n         }\n         in.push_back(Pair(\"sequence\", (int64_t)txin.nSequence));\n         vin.push_back(in);\n@@ -840,7 +837,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         UpdateTransaction(mergedTx, i, sigdata);\n \n         ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n             TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n         }\n     }"
      },
      {
        "sha": "be7fa5d3b79b467aa7f05d133f8fe6c580a16b2c",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -93,8 +93,9 @@ static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptP\n \n         // Regardless of the verification result, the tx did not error.\n         set_error(err, bitcoinconsensus_ERR_OK);\n+\n         PrecomputedTransactionData txdata(tx);\n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, amount, txdata), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), &tx.vin[nIn].scriptWitness, flags, TransactionSignatureChecker(&tx, nIn, amount, txdata), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "76419c1495f7d19bdd7693b46bb159f05cc496fe",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -656,6 +656,8 @@ struct CScriptWitness\n \n     bool IsNull() const { return stack.empty(); }\n \n+    void SetNull() { stack.clear(); stack.shrink_to_fit(); }\n+\n     std::string ToString() const;\n };\n "
      },
      {
        "sha": "b008df259178dca0111b4f42eae211a8c4989aab",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -194,20 +194,15 @@ SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nI\n     SignatureData data;\n     assert(tx.vin.size() > nIn);\n     data.scriptSig = tx.vin[nIn].scriptSig;\n-    if (tx.wit.vtxinwit.size() > nIn) {\n-        data.scriptWitness = tx.wit.vtxinwit[nIn].scriptWitness;\n-    }\n+    data.scriptWitness = tx.vin[nIn].scriptWitness;\n     return data;\n }\n \n void UpdateTransaction(CMutableTransaction& tx, unsigned int nIn, const SignatureData& data)\n {\n     assert(tx.vin.size() > nIn);\n     tx.vin[nIn].scriptSig = data.scriptSig;\n-    if (!data.scriptWitness.IsNull() || tx.wit.vtxinwit.size() > nIn) {\n-        tx.wit.vtxinwit.resize(tx.vin.size());\n-        tx.wit.vtxinwit[nIn].scriptWitness = data.scriptWitness;\n-    }\n+    tx.vin[nIn].scriptWitness = data.scriptWitness;\n }\n \n bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)"
      },
      {
        "sha": "84498c5f1058c93e33b84dc805eb189158623d8e",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -145,8 +145,7 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CSc\n     txSpend.nLockTime = 0;\n     txSpend.vin.resize(1);\n     txSpend.vout.resize(1);\n-    txSpend.wit.vtxinwit.resize(1);\n-    txSpend.wit.vtxinwit[0].scriptWitness = scriptWitness;\n+    txSpend.vin[0].scriptWitness = scriptWitness;\n     txSpend.vin[0].prevout.hash = txCredit.GetHash();\n     txSpend.vin[0].prevout.n = 0;\n     txSpend.vin[0].scriptSig = scriptSig;"
      },
      {
        "sha": "3488a0befc4878ee250502aa36f1bc048407f3a7",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 21,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -73,7 +73,7 @@ ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction\n {\n     ScriptError error;\n     CTransaction inputi(input);\n-    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, inputi.wit.vtxinwit.size() > 0 ? &inputi.wit.vtxinwit[0].scriptWitness : NULL, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue), &error);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue), &error);\n     BOOST_CHECK((ret == true) == (error == SCRIPT_ERR_OK));\n \n     return error;\n@@ -84,13 +84,12 @@ ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction\n  * and witness such that spendingTx spends output zero of creationTx.\n  * Also inserts creationTx's output into the coins view.\n  */\n-void BuildTxs(CMutableTransaction& spendingTx, CCoinsViewCache& coins, CMutableTransaction& creationTx, const CScript& scriptPubKey, const CScript& scriptSig, const CTxInWitness& witness)\n+void BuildTxs(CMutableTransaction& spendingTx, CCoinsViewCache& coins, CMutableTransaction& creationTx, const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& witness)\n {\n     creationTx.nVersion = 1;\n     creationTx.vin.resize(1);\n     creationTx.vin[0].prevout.SetNull();\n     creationTx.vin[0].scriptSig = CScript();\n-    creationTx.wit.vtxinwit.resize(1);\n     creationTx.vout.resize(1);\n     creationTx.vout[0].nValue = 1;\n     creationTx.vout[0].scriptPubKey = scriptPubKey;\n@@ -100,8 +99,7 @@ void BuildTxs(CMutableTransaction& spendingTx, CCoinsViewCache& coins, CMutableT\n     spendingTx.vin[0].prevout.hash = creationTx.GetHash();\n     spendingTx.vin[0].prevout.n = 0;\n     spendingTx.vin[0].scriptSig = scriptSig;\n-    spendingTx.wit.vtxinwit.resize(1);\n-    spendingTx.wit.vtxinwit[0] = witness;\n+    spendingTx.vin[0].scriptWitness = witness;\n     spendingTx.vout.resize(1);\n     spendingTx.vout[0].nValue = 1;\n     spendingTx.vout[0].scriptPubKey = CScript();\n@@ -133,7 +131,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         // Do not use a valid signature to avoid using wallet operations.\n         CScript scriptSig = CScript() << OP_0 << OP_0;\n \n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CTxInWitness());\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CScriptWitness());\n         // Legacy counting only includes signature operations in scriptSigs and scriptPubKeys\n         // of a transaction and does not take the actual executed sig operations into account.\n         // spendingTx in itself does not contain a signature operation.\n@@ -151,7 +149,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n         CScript scriptSig = CScript() << OP_0 << OP_0 << ToByteVector(redeemScript);\n \n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CTxInWitness());\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CScriptWitness());\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2 * WITNESS_SCALE_FACTOR);\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n     }\n@@ -161,14 +159,12 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript p2pk = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n         CScript scriptPubKey = GetScriptForWitness(p2pk);\n         CScript scriptSig = CScript();\n-        CTxInWitness witness;\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n-        witness.scriptWitness = scriptWitness;\n \n \n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 1);\n         // No signature operations if we don't verify the witness.\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags & ~SCRIPT_VERIFY_WITNESS) == 0);\n@@ -177,10 +173,10 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         // The sig op cost for witness version != 0 is zero.\n         assert(scriptPubKey[0] == 0x00);\n         scriptPubKey[0] = 0x51;\n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 0);\n         scriptPubKey[0] = 0x00;\n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n \n         // The witness of a coinbase transaction is not taken into account.\n         spendingTx.vin[0].prevout.SetNull();\n@@ -193,13 +189,11 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript scriptSig = GetScriptForWitness(p2pk);\n         CScript scriptPubKey = GetScriptForDestination(CScriptID(scriptSig));\n         scriptSig = CScript() << ToByteVector(scriptSig);\n-        CTxInWitness witness;\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n-        witness.scriptWitness = scriptWitness;\n \n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 1);\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_EQUALVERIFY);\n     }\n@@ -209,14 +203,12 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript witnessScript = CScript() << 1 << ToByteVector(pubkey) << ToByteVector(pubkey) << 2 << OP_CHECKMULTISIGVERIFY;\n         CScript scriptPubKey = GetScriptForWitness(witnessScript);\n         CScript scriptSig = CScript();\n-        CTxInWitness witness;\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n-        witness.scriptWitness = scriptWitness;\n \n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags & ~SCRIPT_VERIFY_WITNESS) == 0);\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n@@ -228,14 +220,12 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript redeemScript = GetScriptForWitness(witnessScript);\n         CScript scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n         CScript scriptSig = CScript() << ToByteVector(redeemScript);\n-        CTxInWitness witness;\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(witnessScript.begin(), witnessScript.end()));\n-        witness.scriptWitness = scriptWitness;\n \n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, witness);\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2);\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n     }"
      },
      {
        "sha": "cd9294c7a9c76bbede86969e48128a73b511b7fb",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -170,7 +170,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                     amount = mapprevOutValues[tx.vin[i].prevout];\n                 }\n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n-                const CScriptWitness *witness = (i < tx.wit.vtxinwit.size()) ? &tx.wit.vtxinwit[i].scriptWitness : NULL;\n+                const CScriptWitness *witness = &tx.vin[i].scriptWitness;\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n                                                  witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err),\n                                     strTest);\n@@ -254,7 +254,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                 if (mapprevOutValues.count(tx.vin[i].prevout)) {\n                     amount = mapprevOutValues[tx.vin[i].prevout];\n                 }\n-                const CScriptWitness *witness = (i < tx.wit.vtxinwit.size()) ? &tx.wit.vtxinwit[i].scriptWitness : NULL;\n+                const CScriptWitness *witness = &tx.vin[i].scriptWitness;\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n                                       witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err);\n             }\n@@ -351,7 +351,6 @@ void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, C\n     outputm.vin.resize(1);\n     outputm.vin[0].prevout.SetNull();\n     outputm.vin[0].scriptSig = CScript();\n-    outputm.wit.vtxinwit.resize(1);\n     outputm.vout.resize(1);\n     outputm.vout[0].nValue = 1;\n     outputm.vout[0].scriptPubKey = outscript;\n@@ -362,14 +361,12 @@ void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, C\n     assert(output->vin[0] == outputm.vin[0]);\n     assert(output->vout.size() == 1);\n     assert(output->vout[0] == outputm.vout[0]);\n-    assert(output->wit.vtxinwit.size() == 0);\n \n     CMutableTransaction inputm;\n     inputm.nVersion = 1;\n     inputm.vin.resize(1);\n     inputm.vin[0].prevout.hash = output->GetHash();\n     inputm.vin[0].prevout.n = 0;\n-    inputm.wit.vtxinwit.resize(1);\n     inputm.vout.resize(1);\n     inputm.vout[0].nValue = 1;\n     inputm.vout[0].scriptPubKey = CScript();\n@@ -382,20 +379,14 @@ void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, C\n     assert(input.vin[0] == inputm.vin[0]);\n     assert(input.vout.size() == 1);\n     assert(input.vout[0] == inputm.vout[0]);\n-    if (inputm.wit.IsNull()) {\n-        assert(input.wit.IsNull());\n-    } else {\n-        assert(!input.wit.IsNull());\n-        assert(input.wit.vtxinwit.size() == 1);\n-        assert(input.wit.vtxinwit[0].scriptWitness.stack == inputm.wit.vtxinwit[0].scriptWitness.stack);\n-    }\n+    assert(input.vin[0].scriptWitness.stack == inputm.vin[0].scriptWitness.stack);\n }\n \n void CheckWithFlag(const CTransactionRef& output, const CMutableTransaction& input, int flags, bool success)\n {\n     ScriptError error;\n     CTransaction inputi(input);\n-    bool ret = VerifyScript(inputi.vin[0].scriptSig, output->vout[0].scriptPubKey, inputi.wit.vtxinwit.size() > 0 ? &inputi.wit.vtxinwit[0].scriptWitness : NULL, flags, TransactionSignatureChecker(&inputi, 0, output->vout[0].nValue), &error);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output->vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(&inputi, 0, output->vout[0].nValue), &error);\n     assert(ret == success);\n }\n "
      },
      {
        "sha": "9a080181134e94146535a60bbc64ab5962a1f63c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -446,7 +446,7 @@ int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& i\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n         const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n-        nSigOps += CountWitnessSigOps(tx.vin[i].scriptSig, prevout.scriptPubKey, i < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[i].scriptWitness : NULL, flags);\n+        nSigOps += CountWitnessSigOps(tx.vin[i].scriptSig, prevout.scriptPubKey, &tx.vin[i].scriptWitness, flags);\n     }\n     return nSigOps;\n }\n@@ -550,7 +550,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n \n     // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n     bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus());\n-    if (!GetBoolArg(\"-prematurewitness\",false) && !tx.wit.IsNull() && !witnessEnabled) {\n+    if (!GetBoolArg(\"-prematurewitness\",false) && tx.HasWitness() && !witnessEnabled) {\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n     }\n \n@@ -672,7 +672,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n         // Check for non-standard witness in P2WSH\n-        if (!tx.wit.IsNull() && fRequireStandard && !IsWitnessStandard(tx, view))\n+        if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view))\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-witness-nonstandard\", true);\n \n         int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n@@ -912,7 +912,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n             // need to turn both off, and compare against just turning off CLEANSTACK\n             // to see if the failure is specifically due to witness validation.\n-            if (tx.wit.IsNull() && CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, txdata) &&\n+            if (!tx.HasWitness() && CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, txdata) &&\n                 !CheckInputs(tx, state, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, txdata)) {\n                 // Only the witness is missing, so the transaction itself may be fine.\n                 state.SetCorruptionPossible();\n@@ -1304,7 +1304,7 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)\n \n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    const CScriptWitness *witness = (nIn < ptxTo->wit.vtxinwit.size()) ? &ptxTo->wit.vtxinwit[nIn].scriptWitness : NULL;\n+    const CScriptWitness *witness = &ptxTo->vin[nIn].scriptWitness;\n     if (!VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, amount, cacheStore, *txdata), &error)) {\n         return false;\n     }\n@@ -2846,11 +2846,10 @@ void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPr\n {\n     int commitpos = GetWitnessCommitmentIndex(block);\n     static const std::vector<unsigned char> nonce(32, 0x00);\n-    if (commitpos != -1 && IsWitnessEnabled(pindexPrev, consensusParams) && block.vtx[0]->wit.IsEmpty()) {\n+    if (commitpos != -1 && IsWitnessEnabled(pindexPrev, consensusParams) && !block.vtx[0]->HasWitness()) {\n         CMutableTransaction tx(*block.vtx[0]);\n-        tx.wit.vtxinwit.resize(1);\n-        tx.wit.vtxinwit[0].scriptWitness.stack.resize(1);\n-        tx.wit.vtxinwit[0].scriptWitness.stack[0] = nonce;\n+        tx.vin[0].scriptWitness.stack.resize(1);\n+        tx.vin[0].scriptWitness.stack[0] = nonce;\n         block.vtx[0] = MakeTransactionRef(std::move(tx));\n     }\n }\n@@ -2958,10 +2957,10 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n             // The malleation check is ignored; as the transaction tree itself\n             // already does not permit it, it is impossible to trigger in the\n             // witness tree.\n-            if (block.vtx[0]->wit.vtxinwit.size() != 1 || block.vtx[0]->wit.vtxinwit[0].scriptWitness.stack.size() != 1 || block.vtx[0]->wit.vtxinwit[0].scriptWitness.stack[0].size() != 32) {\n+            if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n                 return state.DoS(100, false, REJECT_INVALID, \"bad-witness-nonce-size\", true, strprintf(\"%s : invalid witness nonce size\", __func__));\n             }\n-            CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0]->wit.vtxinwit[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n+            CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0]->vin[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n             if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n                 return state.DoS(100, false, REJECT_INVALID, \"bad-witness-merkle-match\", true, strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n@@ -2972,7 +2971,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam\n     if (!fHaveWitness) {\n         for (size_t i = 0; i < block.vtx.size(); i++) {\n-            if (!block.vtx[i]->wit.IsNull()) {\n+            if (block.vtx[i]->HasWitness()) {\n                 return state.DoS(100, false, REJECT_INVALID, \"unexpected-witness\", true, strprintf(\"%s : unexpected witness data found\", __func__));\n             }\n         }"
      },
      {
        "sha": "2ef4802a1084e2d4d8e4a81108e76dac6466bbce",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f6fb7acda4aefd01b8ef6cd77063bfc0c4f4ab36",
        "patch": "@@ -2301,7 +2301,6 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 nChangePosInOut = nChangePosRequest;\n                 txNew.vin.clear();\n                 txNew.vout.clear();\n-                txNew.wit.SetNull();\n                 wtxNew.fFromMe = true;\n                 bool fFirst = true;\n \n@@ -2488,9 +2487,10 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                 // Remove scriptSigs if we used dummy signatures for fee calculation\n                 if (!sign) {\n-                    BOOST_FOREACH (CTxIn& vin, txNew.vin)\n+                    BOOST_FOREACH (CTxIn& vin, txNew.vin) {\n                         vin.scriptSig = CScript();\n-                    txNew.wit.SetNull();\n+                        vin.scriptWitness.SetNull();\n+                    }\n                 }\n \n                 // Embed the constructed transaction data in wtxNew."
      }
    ]
  }
]