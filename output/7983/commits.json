[
  {
    "sha": "58f954ac711cc0f3864c95936f31c69a5875b468",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGY5NTRhYzcxMWNjMGYzODY0Yzk1OTM2ZjMxYzY5YTU4NzViNDY4",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2016-05-01T09:45:27Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2016-05-01T09:45:27Z"
      },
      "message": "Use std::unique_ptr instead of auto_ptr.\n\nWith C++11 available, we can use std::unique_ptr instead of the (now\ndeprecated) std::auto_ptr.  Also use std::unique_ptr in httpserver.cpp\nto resolve an XXX remark there and simplify the code.",
      "tree": {
        "sha": "f7d174703f6ed9f7b5189d94438cf68e62519e16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7d174703f6ed9f7b5189d94438cf68e62519e16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58f954ac711cc0f3864c95936f31c69a5875b468",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58f954ac711cc0f3864c95936f31c69a5875b468",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58f954ac711cc0f3864c95936f31c69a5875b468",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58f954ac711cc0f3864c95936f31c69a5875b468/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ad104190465d8d65c2344bbe10dcf3df025d86c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ad104190465d8d65c2344bbe10dcf3df025d86c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ad104190465d8d65c2344bbe10dcf3df025d86c"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 14,
      "deletions": 20
    },
    "files": [
      {
        "sha": "64a0c31dd47f2400b476d6d3fb477e8c76b43eca",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 18,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58f954ac711cc0f3864c95936f31c69a5875b468/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58f954ac711cc0f3864c95936f31c69a5875b468/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=58f954ac711cc0f3864c95936f31c69a5875b468",
        "patch": "@@ -34,6 +34,10 @@\n #endif\n #endif\n \n+#include <deque>\n+#include <memory>\n+#include <utility>\n+\n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/foreach.hpp>\n #include <boost/scoped_ptr.hpp>\n@@ -71,8 +75,7 @@ class WorkQueue\n     /** Mutex protects entire object */\n     CWaitableCriticalSection cs;\n     CConditionVariable cond;\n-    /* XXX in C++11 we can use std::unique_ptr here and avoid manual cleanup */\n-    std::deque<WorkItem*> queue;\n+    std::deque<std::unique_ptr<WorkItem>> queue;\n     bool running;\n     size_t maxDepth;\n     int numThreads;\n@@ -101,24 +104,14 @@ class WorkQueue\n                                  numThreads(0)\n     {\n     }\n-    /*( Precondition: worker threads have all stopped\n-     * (call WaitExit)\n-     */\n-    ~WorkQueue()\n-    {\n-        while (!queue.empty()) {\n-            delete queue.front();\n-            queue.pop_front();\n-        }\n-    }\n     /** Enqueue a work item */\n     bool Enqueue(WorkItem* item)\n     {\n         boost::unique_lock<boost::mutex> lock(cs);\n         if (queue.size() >= maxDepth) {\n             return false;\n         }\n-        queue.push_back(item);\n+        queue.push_back(std::unique_ptr<WorkItem>(item));\n         cond.notify_one();\n         return true;\n     }\n@@ -127,18 +120,17 @@ class WorkQueue\n     {\n         ThreadCounter count(*this);\n         while (running) {\n-            WorkItem* i = 0;\n+            std::unique_ptr<WorkItem> i;\n             {\n                 boost::unique_lock<boost::mutex> lock(cs);\n                 while (running && queue.empty())\n                     cond.wait(lock);\n                 if (!running)\n                     break;\n-                i = queue.front();\n+                i = std::move(queue.front());\n                 queue.pop_front();\n             }\n             (*i)();\n-            delete i;\n         }\n     }\n     /** Interrupt and exit loops */\n@@ -252,7 +244,7 @@ static std::string RequestMethodString(HTTPRequest::RequestMethod m)\n /** HTTP request callback */\n static void http_request_cb(struct evhttp_request* req, void* arg)\n {\n-    std::auto_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n+    std::unique_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n \n     LogPrint(\"http\", \"Received a %s request for %s from %s\\n\",\n              RequestMethodString(hreq->GetRequestMethod()), hreq->GetURI(), hreq->GetPeer().ToString());\n@@ -288,7 +280,7 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n \n     // Dispatch to worker thread\n     if (i != iend) {\n-        std::auto_ptr<HTTPWorkItem> item(new HTTPWorkItem(hreq.release(), path, i->handler));\n+        std::unique_ptr<HTTPWorkItem> item(new HTTPWorkItem(hreq.release(), path, i->handler));\n         assert(workQueue);\n         if (workQueue->Enqueue(item.get()))\n             item.release(); /* if true, queue took ownership */"
      },
      {
        "sha": "d4aec3cef7ff0aaa3da82bacc10020656fb99d77",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58f954ac711cc0f3864c95936f31c69a5875b468/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58f954ac711cc0f3864c95936f31c69a5875b468/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=58f954ac711cc0f3864c95936f31c69a5875b468",
        "patch": "@@ -27,6 +27,7 @@\n \n #include <boost/thread.hpp>\n #include <boost/tuple/tuple.hpp>\n+#include <memory>\n #include <queue>\n \n using namespace std;\n@@ -74,7 +75,7 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn)\n {\n     // Create new block\n-    auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n+    std::unique_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n     if(!pblocktemplate.get())\n         return NULL;\n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience"
      },
      {
        "sha": "eeb86756b10d89771f2454ee5b5d430e28ab5398",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58f954ac711cc0f3864c95936f31c69a5875b468/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58f954ac711cc0f3864c95936f31c69a5875b468/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=58f954ac711cc0f3864c95936f31c69a5875b468",
        "patch": "@@ -21,6 +21,7 @@\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n \n+#include <memory>\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n@@ -111,7 +112,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd)\n     {\n-        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(Params(), coinbaseScript->reserveScript));\n+        std::unique_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(Params(), coinbaseScript->reserveScript));\n         if (!pblocktemplate.get())\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         CBlock *pblock = &pblocktemplate->block;"
      }
    ]
  }
]