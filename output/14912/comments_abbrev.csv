Sjors,2018-12-15T11:22:06Z,"Now that #14491 has been rebased, the `hww` branch I'm building off should also soon be rebased. At that point I can rebase and make Travis happy. In addition, I'll be able to leverage #14646 to clean up my descriptor related code (I'm currently using string concatenation to build descriptors). I have a few other spring cleaning items on my todo list too.\n\nSee also the [wallet meeting notes](h",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-447561259,447561259,
DrahtBot,2018-12-17T20:12:41Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16542](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16542.html) (Return more specific errors about invalid d",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-447982606,447982606,
jonasschnelli,2018-12-18T19:12:36Z,"Great work!\nI think the signer API (calling an external script/application) seems fine. We should make sure all calls are non-blocking sync it could be, that the signer application has a GUI and requires user interaction on all non-obvious commands like ""displayaddress"". Also, the device could require initialisation which could be triggered by a first display/sign command.",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-448335664,448335664,
Sjors,2018-12-20T11:44:39Z,"@jonasschnelli I have a idea on how to allow asynchronous interaction. That also makes sense if  you're using an online service with a 48 hour cool down period.\n\nThe `signtransaction` command (called by `processpsbt` in this PR) could take an optional ephemeral public key argument. The commands then immediately returns with a UUID and a timestamp for when the client should come back. We could ",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-448970210,448970210,
Sjors,2019-01-18T17:28:00Z,"I added a `signersend` RPC method which Just Works(tm) by combining the functionality of `walletcreatefundedpsbt`, `signerprocesspsbt`, `finalizepsbt` and `sendrawtransaction`. Updated the documentation.\n\nAddressed some of the nits. Still much to improve in terms of code quality, and I'm waiting on multiple upstream pull requests.\n\nThe most useful review at this point is to test the workfl",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-455624882,455624882,
Sjors,2019-01-19T18:08:53Z,"Rebased on the latest `hww` branch. Moved a bunch of things to `wallet/rpcsigner.cpp`.\n\n@ken2812221 any idea how I can make AppVeyor happy? My guess is that it doesn't like `runCommandParseJSON()` in `system.cpp`\n\n<img width=""899"" alt=""schermafbeelding 2019-01-19 om 19 08 39"" src=""https://user-images.githubusercontent.com/10217/51430571-a5a20980-1c1d-11e9-87b4-f4dab92e4dc3.png"">\n",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-455802298,455802298,
Sjors,2019-01-24T11:16:40Z,"* updated to incorporate the latest changes in https://github.com/achow101/HWI/pull/73 and \nhttps://github.com/achow101/bitcoin/tree/hww\n* added (BIP32) `account` argument to `signerfetchkeys` (will add custom descriptor arguments later)\n* using `RPCHelpMan` (surviving the Travis linter again)\n* using inferred descriptor for `signerdisplayaddress`\n* included commits from #14978 to clean ",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-457161230,457161230,
Sjors,2019-02-02T13:20:49Z,"I changed `signerfetchkeys` to use `getxpub` instead of `getkeys`. You can now use the `master` branch of HWI, except for [displayaddress](https://github.com/bitcoin-core/HWI/pull/117).\n\nI'll deal with the rebase once a bit more upstream stuff is merged.",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-459964623,459964623,
jonasschnelli,2019-02-14T02:17:36Z,"Conceptually, I think we should initially create the option to allow a wallet to contain a main descriptor (main xpub). The scripts may be derived in-mem only during wallet load. If a form of ""getnewaddress"" (receive address) (child-pub-key-derviation) is supported, the wallet may want to remain the used child key indexes for the metadata storage rather than the pubkeyhash.",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-463458567,463458567,
meshcollider,2019-02-14T23:56:28Z,Time for a big rebase ðŸŽ‰ ,https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-463851398,463851398,
Sjors,2019-02-15T12:12:12Z,"Giant rebase done! I created separate pull request for a number of commits in order to keep discussion a bit focussed here. Please check the list at the bottom of the PR description before commenting.\n\nThere's still two significant todo's (plus cleanup) before this is really read for review, but more high level feedback is always welcome:\n\n1. A way to construct descriptors from code, to ge",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-464026454,464026454,
Sjors,2019-03-08T14:30:11Z,Rebased! I changed `signerfetchkeys` to call `hwi.py getdescriptors` (https://github.com/bitcoin-core/HWI/pull/137).,https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-470947271,470947271,
jnewbery,2019-04-29T23:03:04Z,"#15713 adds a `broadcastTransaction()` chain interface method which is required here, so would remove one of the commits from this PR.",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-487773426,487773426,
luke-jr,2019-05-01T06:10:19Z,I don't understand why users would apparently need to use new RPCs to achieve the same things they can already do?,https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-488217804,488217804,
Sjors,2019-05-03T12:15:32Z,"@luke-jr that's true for `enumerate` which does exactly the same as `hwi.py enumerate`. But fetching keys, sending transactions and (as a followup) doing RBF is very tedious without these RPC methods. The same goes for generating a new receive address in the wallet and displaying it on the device.\n\nThe longer term goal is to get this functionality in the GUI, so I also see the RPC as a foundat",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-489075526,489075526,
Sjors,2019-05-14T18:57:15Z,"I cleaned up `signerfetchkeys` a bit. It now takes advantage of (still to be discussed) #15590 `Descriptor->IsSegWit()` and `Descriptor->GetAddressType()` to pick the right descriptor for the given `-addresstype` and `-changetype`.\n\nThe RPC documentation warns the user not switch address types for the wallet (due to BIP44/49/84 interoperability), though in the long run native descriptor wallet",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-492365485,492365485,
jb55,2019-05-24T14:30:54Z,"Instead of adding more complexity into the core wallet, shouldn't all this logic be handled externally? For example: I was envisioning importing all of your hw wallet keys into core. When you want to spend you would just ask core to give you a partially signed transaction from some of your unspent outputs.\n\nI guess I'm confused as to why you would need core to call some external signer when PS",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-495655047,495655047,
Sjors,2019-06-07T13:24:43Z,"Rebased and dropped `signersend` from this PR, moved it to #15876 (which also contains fee bump support).",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-499883356,499883356,
Sjors,2019-07-11T14:55:14Z,"I'm considering rebasing* this on top of #16341 (aka ""box""), by introducing a `ExternalSignerScriptPubKeyMan`. It can be make a bit safer in the process.\n\n1. move all of `externalsigner.{h,cpp}` into a `ExternalSignerScriptPubKeyMan`\n2. Get rid of `signerfetchkeys` RPC; `createwallet` and `keypoolrefill` cover this\n3. `SetupGeneration`: this would call `getdescriptors` on the device at wal",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-510520757,510520757,
Sjors,2019-08-02T18:46:55Z,"Rebased now that #15911 is merged. Dropped a few commits that should have been in #15876 and aren't needed anyway after #15713. Removed the need for the unit test to add private keys to the  keypool (closing #15414).\n\nI'll keep this and the convenience methods in #15876 up to date and work on a ""boxed"" version in a separate PR.",https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-517806668,517806668,
Sjors,2019-08-03T11:05:21Z,Here's a simple rebase on top of a native descriptor wallet #16528 (benefit: gives access to full BIP44/49/84 address tree): https://github.com/Sjors/bitcoin/tree/2019/08/hww-box,https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-517916318,517916318,
Sjors,2019-08-04T21:43:57Z,Closing in favor of the native descriptor edition in #16546.,https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-518038772,518038772,
practicalswift,2018-12-18T16:19:33Z,The documentation format is incorrect here :-),https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242604518,242604518,src/wallet/rpcwallet.h
practicalswift,2018-12-18T16:20:53Z,`ExternalSigner signer` shadows `UniValue signer` :-),https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242605089,242605089,src/wallet/externalsigner.cpp
practicalswift,2018-12-18T16:22:38Z,The type of `i` should match the type of `range_start` to avoid implicit precision losing conversion?,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242605811,242605811,src/wallet/rpcdump.cpp
practicalswift,2018-12-18T16:23:17Z,Should be dropped since unused?,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242606157,242606157,src/wallet/rpcdump.cpp
practicalswift,2018-12-18T16:24:28Z,"Make signedness changing implicit conversion explicit? Also, remove redundant initialization to zero on the line above? Merge the two lines.",https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242606739,242606739,src/wallet/rpcdump.cpp
practicalswift,2018-12-18T16:29:39Z,Initialize to zero?,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242608963,242608963,src/util/system.cpp
practicalswift,2018-12-18T16:31:09Z,"Should be ""fingerprint"" :-)",https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242609613,242609613,src/wallet/rpcwallet.cpp
practicalswift,2018-12-18T16:38:09Z,"I haven't reviewed this use of `popen(â€¦)` closer, but please note the recommendations/risks with regards to `popen(â€¦)` used described in the CERT secure coding guidelines (more specifically rule ENV33-C).",https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242612528,242612528,src/util/system.cpp
practicalswift,2018-12-18T16:38:57Z,`keypath` should be const reference?,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242612922,242612922,src/util/strencodings.cpp
practicalswift,2018-12-18T16:42:48Z,Nit: Could use `command.empty()`? :-),https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242614487,242614487,src/wallet/rpcwallet.cpp
practicalswift,2018-12-18T16:43:39Z,Should be const reference? :-),https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242614853,242614853,src/wallet/externalsigner.cpp
practicalswift,2018-12-18T16:43:54Z,Should be const reference? :-),https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242614951,242614951,src/wallet/externalsigner.cpp
practicalswift,2018-12-18T16:44:29Z,Use string equality operator instead of `compare` :-),https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242615222,242615222,src/wallet/externalsigner.cpp
practicalswift,2018-12-18T16:47:04Z,`signer` can be `nullptr` here if the check on L4016 is correct?,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242616373,242616373,src/wallet/rpcwallet.cpp
practicalswift,2018-12-18T16:47:38Z,Same here: `signer` can be `nullptr` here if the check on L4016 is correct?,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242616597,242616597,src/wallet/rpcwallet.cpp
practicalswift,2018-12-18T16:48:58Z,`keypath` should be const reference?,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242617121,242617121,src/util/strencodings.h
practicalswift,2018-12-18T16:50:23Z,Nit: Could use `std::copy` instead?,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242617685,242617685,src/wallet/rpcdump.cpp
practicalswift,2018-12-18T16:50:51Z,Same here: Could you `std::copy`?,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242617864,242617864,src/wallet/rpcdump.cpp
practicalswift,2018-12-18T16:52:53Z,Missing space before `(`. Consider running new code through `clang-format` :-),https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242618665,242618665,src/wallet/rpcdump.cpp
practicalswift,2018-12-18T16:53:15Z,Same here: Missing whitespace before `(`.,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242618820,242618820,src/wallet/rpcdump.cpp
practicalswift,2018-12-18T16:53:47Z,Remove space before `;` :-),https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242619074,242619074,src/wallet/rpcwallet.cpp
practicalswift,2018-12-18T16:55:41Z,Indentation is not a multiple of four :-),https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242619836,242619836,test/functional/wallet_importmulti.py
practicalswift,2018-12-18T16:57:56Z,"Should be ""derivation"" :-)",https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242620899,242620899,src/wallet/rpcdump.cpp
practicalswift,2018-12-18T16:58:46Z,Unused?,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r242621312,242621312,src/wallet/rpcwallet.cpp
Sjors,2018-12-20T11:32:33Z,"Thanks, I'll look into how that's supposed to work...",https://github.com/bitcoin/bitcoin/pull/14912#discussion_r243240204,243240204,src/wallet/rpcwallet.h
Sjors,2018-12-20T11:34:16Z,The compiler didn't like it when I initialized using `gArgs.GetArg`.,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r243240638,243240638,src/wallet/rpcdump.cpp
Sjors,2018-12-20T11:35:50Z,"This is straight from stack overflow, so certainly needs more review... I'm surprised how complicated it is to just read some JSON from `stdout`.",https://github.com/bitcoin/bitcoin/pull/14912#discussion_r243241046,243241046,src/util/system.cpp
Sjors,2019-01-18T17:10:24Z,Upstream,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249118973,249118973,test/functional/wallet_importmulti.py
Sjors,2019-01-18T17:13:22Z,Upstream,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249119860,249119860,src/wallet/rpcdump.cpp
Sjors,2019-01-18T17:13:34Z,(fixed upstream),https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249119912,249119912,src/wallet/rpcdump.cpp
ken2812221,2019-01-20T18:30:27Z,`popen` and `pclose` are unix-like only. You can't use them on Windows. IMO you could use boost process instead.,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249290295,249290295,src/util/system.cpp
promag,2019-01-20T18:32:30Z,I think we don't depend on boost process.,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249290368,249290368,src/util/system.cpp
ken2812221,2019-01-20T18:43:02Z,I know. But this is the simplest way if this is really necessary to call another process. I don't think that any one here know how to use Windows `CreateProcess` API.,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249290710,249290710,src/util/system.cpp
practicalswift,2019-01-22T08:37:10Z,`txhex` should be const ref?,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249681804,249681804,src/rpc/rawtransaction.cpp
practicalswift,2019-01-22T08:39:13Z,`error` shadows function `error` from L62 in `src/util/system.h`.,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249682373,249682373,src/wallet/rpcsigner.cpp
practicalswift,2019-01-22T09:13:33Z,"`compare` is more efficient than `find` when checking prefixes, right?\n\nWhat about `StartsWith(inferredDescriptor, ""wpkh"")` instead?\n\n```\nstatic inline bool StartsWith(const std::string& input, const std::string& prefix) {\n    return input.size() >= prefix.size() && input.compare(0, prefix.size(), prefix) == 0;\n}\n```",https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249693754,249693754,src/wallet/rpcsigner.cpp
Sjors,2019-01-22T17:11:15Z,"I plan to ditch this part of the code, so no need to improve it :-)",https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249876959,249876959,src/wallet/rpcsigner.cpp
ryanofsky,2019-01-22T18:42:16Z,"It would be reasonable to call `_popen` function here on windows or `#define popen _popen`: https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/system-wsystem.\n\nYou do need to be very careful about special characters passed in the command string, but it should be ok if you stick to hex/base64.",https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249910603,249910603,src/util/system.cpp
ken2812221,2019-01-22T19:20:35Z,`_popen` would only work in console program. See https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/popen-wpopen. So it doesn't work in Qt.,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r249924733,249924733,src/util/system.cpp
MarcoFalke,2019-02-02T21:50:26Z,"The result is ""null"", not """". This causes the crash.",https://github.com/bitcoin/bitcoin/pull/14912#discussion_r253279565,253279565,src/wallet/rpcsigner.cpp
Sjors,2019-02-02T22:00:12Z,Fixed!,https://github.com/bitcoin/bitcoin/pull/14912#discussion_r253279783,253279783,src/wallet/rpcsigner.cpp
