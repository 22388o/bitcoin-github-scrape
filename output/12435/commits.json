[
  {
    "sha": "d87d60aaa98ee149360f4cc812209a380b806c67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODdkNjBhYWE5OGVlMTQ5MzYwZjRjYzgxMjIwOWEzODBiODA2YzY3",
    "commit": {
      "author": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2018-02-14T03:25:04Z"
      },
      "committer": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2018-02-19T00:06:52Z"
      },
      "message": "RPC: Strict JSON-RPC 2.0 compliance (gated behind flag)",
      "tree": {
        "sha": "894ed0b0b88a7d9d7dda7d338823678a591893cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/894ed0b0b88a7d9d7dda7d338823678a591893cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d87d60aaa98ee149360f4cc812209a380b806c67",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d87d60aaa98ee149360f4cc812209a380b806c67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d87d60aaa98ee149360f4cc812209a380b806c67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d87d60aaa98ee149360f4cc812209a380b806c67/comments",
    "author": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b"
      }
    ],
    "stats": {
      "total": 243,
      "additions": 198,
      "deletions": 45
    },
    "files": [
      {
        "sha": "fa1cc82ce7e730ed45e053e959ca85eed036713f",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87d60aaa98ee149360f4cc812209a380b806c67/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87d60aaa98ee149360f4cc812209a380b806c67/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=d87d60aaa98ee149360f4cc812209a380b806c67",
        "patch": "@@ -180,21 +180,21 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         // Set the URI\n         jreq.URI = req->GetURI();\n \n-        std::string strReply;\n-        // singleton request\n+        UniValue ret;\n         if (valRequest.isObject()) {\n-            jreq.parse(valRequest);\n-\n-            UniValue result = tableRPC.execute(jreq);\n+            ret = JSONRPCExecOne(jreq, valRequest);\n+        } else if (valRequest.isArray()) {\n+            ret = JSONRPCExecBatch(jreq, valRequest.get_array());\n+        } else {\n+            throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n+        }\n \n-            // Send reply\n-            strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n+        if (ret.isNull()) {\n+            // JSON-RPC 2.0: return nothing at all\n+            return false;\n+        }\n \n-        // array of requests\n-        } else if (valRequest.isArray())\n-            strReply = JSONRPCExecBatch(jreq, valRequest.get_array());\n-        else\n-            throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n+        std::string strReply(ret.write() + \"\\n\");\n \n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strReply);"
      },
      {
        "sha": "6548740cfb0955a712608f68f03ee583d7cd38b4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87d60aaa98ee149360f4cc812209a380b806c67/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87d60aaa98ee149360f4cc812209a380b806c67/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d87d60aaa98ee149360f4cc812209a380b806c67",
        "patch": "@@ -980,6 +980,9 @@ bool AppInitParameterInteraction()\n     if (gArgs.IsArgSet(\"-blockminsize\"))\n         InitWarning(\"Unsupported argument -blockminsize ignored.\");\n \n+    if (gArgs.IsArgSet(\"-strictjsonrpcspec\"))\n+        fStrictJSONRPCSpec = true;\n+\n     // Checkmempool and checkblockindex default to true in regtest mode\n     int ratio = std::min<int>(std::max<int>(gArgs.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n     if (ratio != 0) {"
      },
      {
        "sha": "5b483e72282c1f7d146e807664d66e01957a8693",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 6,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87d60aaa98ee149360f4cc812209a380b806c67/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87d60aaa98ee149360f4cc812209a380b806c67/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=d87d60aaa98ee149360f4cc812209a380b806c67",
        "patch": "@@ -21,11 +21,18 @@\n  *\n  * 1.0 spec: http://json-rpc.org/wiki/specification\n  * 1.2 spec: http://jsonrpc.org/historical/json-rpc-over-http.html\n+ *\n+ * By passing -strictjsonrpcspec one can force Bitcoin to speak strict 2.0.\n+ *\n  */\n \n+bool fStrictJSONRPCSpec = false;\n+\n UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id)\n {\n     UniValue request(UniValue::VOBJ);\n+    if (fStrictJSONRPCSpec)\n+        request.pushKV(\"jsonrpc\", \"2.0\");\n     request.pushKV(\"method\", strMethod);\n     request.pushKV(\"params\", params);\n     request.pushKV(\"id\", id);\n@@ -35,12 +42,24 @@ UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params,\n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id)\n {\n     UniValue reply(UniValue::VOBJ);\n-    if (!error.isNull())\n-        reply.pushKV(\"result\", NullUniValue);\n-    else\n-        reply.pushKV(\"result\", result);\n-    reply.pushKV(\"error\", error);\n-    reply.pushKV(\"id\", id);\n+    if (fStrictJSONRPCSpec) {\n+        // New, JSON-RPC 2.0 compliant behaviour\n+        if (!result.isNull() && error.isNull())\n+            reply.pushKV(\"result\", result);\n+        else\n+            reply.pushKV(\"error\", error);\n+        reply.pushKV(\"jsonrpc\", \"2.0\");\n+        reply.pushKV(\"id\", id);\n+    } else {\n+        // Old, mixed 1.0/1.1/2.0 behaviour (incompatible with clients that\n+        //      expect strict compliance with JSON-RPC 2.0)\n+        if (!error.isNull())\n+            reply.pushKV(\"result\", NullUniValue);\n+        else\n+            reply.pushKV(\"result\", result);\n+        reply.pushKV(\"error\", error);\n+        reply.pushKV(\"id\", id);\n+    }\n     return reply;\n }\n "
      },
      {
        "sha": "d62de358ccc473bbf9726400a1f1d713c0e975b0",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87d60aaa98ee149360f4cc812209a380b806c67/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87d60aaa98ee149360f4cc812209a380b806c67/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=d87d60aaa98ee149360f4cc812209a380b806c67",
        "patch": "@@ -15,6 +15,8 @@\n \n #include <univalue.h>\n \n+extern bool fStrictJSONRPCSpec;\n+\n //! HTTP status codes\n enum HTTPStatusCode\n {"
      },
      {
        "sha": "8e48f9d4b9073afa636fd2d5372f80287ee6404f",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 15,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87d60aaa98ee149360f4cc812209a380b806c67/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87d60aaa98ee149360f4cc812209a380b806c67/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=d87d60aaa98ee149360f4cc812209a380b806c67",
        "patch": "@@ -351,15 +351,29 @@ bool RPCIsInWarmup(std::string *outStatus)\n     return fRPCInWarmup;\n }\n \n-void JSONRPCRequest::parse(const UniValue& valRequest)\n+void JSONRPCRequest::parse(const UniValue& valRequest, bool *is_notification)\n {\n     // Parse request\n     if (!valRequest.isObject())\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Invalid Request object\");\n     const UniValue& request = valRequest.get_obj();\n \n-    // Parse id now so errors from here on will have the id\n-    id = find_value(request, \"id\");\n+    enum UniValue::keystatus status;\n+    id = find_value(request, \"id\", &status);\n+    if (status == UniValue::KEY_NOT_PRESENT) {\n+        if (is_notification) { *is_notification = true; }\n+    } // we just leave it otherwise, don't care\n+\n+    // JSON-RPC 2.0 compliance\n+    if (fStrictJSONRPCSpec) {\n+        UniValue valJsonRPC = find_value(request, \"jsonrpc\");\n+        if (valJsonRPC.isNull())\n+            throw JSONRPCError(RPC_INVALID_REQUEST, \"Missing jsonrpc field\");\n+        if (!valJsonRPC.isStr())\n+            throw JSONRPCError(RPC_INVALID_REQUEST, \"jsonrpc field must be a string\");\n+        if (valJsonRPC.get_str() != \"2.0\")\n+            throw JSONRPCError(RPC_INVALID_REQUEST, \"jsonrpc field must be equal to '2.0'\");\n+    }\n \n     // Parse method\n     UniValue valMethod = find_value(request, \"method\");\n@@ -387,36 +401,51 @@ bool IsDeprecatedRPCEnabled(const std::string& method)\n     return find(enabled_methods.begin(), enabled_methods.end(), method) != enabled_methods.end();\n }\n \n-static UniValue JSONRPCExecOne(JSONRPCRequest jreq, const UniValue& req)\n+UniValue JSONRPCExecOne(JSONRPCRequest jreq, const UniValue& req)\n {\n     UniValue rpc_result(UniValue::VOBJ);\n \n     try {\n-        jreq.parse(req);\n+        bool is_notification = false;\n+        if (fStrictJSONRPCSpec) {\n+            jreq.parse(req, &is_notification);\n+            // If is_notification, we still need to execute, so we\n+            //     don't return until a few lines down here.\n+        } else {\n+            jreq.parse(req);\n+        }\n \n         UniValue result = tableRPC.execute(jreq);\n+        if (is_notification) return NullUniValue;\n+\n         rpc_result = JSONRPCReplyObj(result, NullUniValue, jreq.id);\n-    }\n-    catch (const UniValue& objError)\n-    {\n+    } catch (const UniValue& objError) {\n         rpc_result = JSONRPCReplyObj(NullUniValue, objError, jreq.id);\n-    }\n-    catch (const std::exception& e)\n-    {\n+    } catch (const std::exception& e) {\n         rpc_result = JSONRPCReplyObj(NullUniValue,\n                                      JSONRPCError(RPC_PARSE_ERROR, e.what()), jreq.id);\n     }\n \n     return rpc_result;\n }\n \n-std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq)\n+UniValue JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq)\n {\n     UniValue ret(UniValue::VARR);\n-    for (unsigned int reqIdx = 0; reqIdx < vReq.size(); reqIdx++)\n-        ret.push_back(JSONRPCExecOne(jreq, vReq[reqIdx]));\n+    for (unsigned int reqIdx = 0; reqIdx < vReq.size(); reqIdx++) {\n+        UniValue singleret;\n+        singleret = JSONRPCExecOne(jreq, vReq[reqIdx]);\n+        if (fStrictJSONRPCSpec && singleret.isNull())\n+            // fStrictJSONRPCSpec check doubled up here.\n+            continue;\n+        ret.push_back(singleret);\n+    }\n+\n+    if (ret.size() == 0) {\n+        return NullUniValue;\n+    }\n \n-    return ret.write() + \"\\n\";\n+    return ret;\n }\n \n /**"
      },
      {
        "sha": "31904c9690fd3a1a359a3c9b7ea222da8ef8faed",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87d60aaa98ee149360f4cc812209a380b806c67/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87d60aaa98ee149360f4cc812209a380b806c67/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=d87d60aaa98ee149360f4cc812209a380b806c67",
        "patch": "@@ -47,7 +47,7 @@ class JSONRPCRequest\n     std::string authUser;\n \n     JSONRPCRequest() : id(NullUniValue), params(NullUniValue), fHelp(false) {}\n-    void parse(const UniValue& valRequest);\n+    void parse(const UniValue& valRequest, bool *is_notification=nullptr);\n };\n \n /** Query whether RPC is running */\n@@ -191,7 +191,8 @@ extern std::string HelpExampleRpc(const std::string& methodname, const std::stri\n bool StartRPC();\n void InterruptRPC();\n void StopRPC();\n-std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq);\n+UniValue JSONRPCExecOne(JSONRPCRequest jreq, const UniValue& req);\n+UniValue JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq);\n \n // Retrieves any serialization flags requested in command line argument\n int RPCSerializationFlags();"
      },
      {
        "sha": "f68fb31ddcea50a06b424ebd49eebbac3a4c9300",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87d60aaa98ee149360f4cc812209a380b806c67/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87d60aaa98ee149360f4cc812209a380b806c67/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=d87d60aaa98ee149360f4cc812209a380b806c67",
        "patch": "@@ -14,12 +14,15 @@\n #include <map>\n #include <cassert>\n \n+#include <stdexcept>\n+\n #include <sstream>        // .get_int64()\n #include <utility>        // std::pair\n \n class UniValue {\n public:\n     enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n+    enum keystatus { KEY_NOT_PRESENT, KEY_PRESENT };\n \n     UniValue() { typ = VNULL; }\n     UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n@@ -180,7 +183,7 @@ class UniValue {\n     bool push_back(std::pair<std::string,UniValue> pear) {\n         return pushKV(pear.first, pear.second);\n     }\n-    friend const UniValue& find_value( const UniValue& obj, const std::string& name);\n+    friend const UniValue& find_value(const UniValue& obj, const std::string& name, enum UniValue::keystatus *status);\n };\n \n //\n@@ -302,6 +305,6 @@ static inline bool json_isspace(int ch)\n \n extern const UniValue NullUniValue;\n \n-const UniValue& find_value( const UniValue& obj, const std::string& name);\n+const UniValue& find_value(const UniValue& obj, const std::string& name, enum UniValue::keystatus *status=NULL);\n \n #endif // __UNIVALUE_H__"
      },
      {
        "sha": "5eaae7fc2e6f8269c7cf56fb00c564033617bd77",
        "filename": "src/univalue/lib/univalue.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87d60aaa98ee149360f4cc812209a380b806c67/src/univalue/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87d60aaa98ee149360f4cc812209a380b806c67/src/univalue/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue.cpp?ref=d87d60aaa98ee149360f4cc812209a380b806c67",
        "patch": "@@ -233,12 +233,15 @@ const char *uvTypeName(UniValue::VType t)\n     return NULL;\n }\n \n-const UniValue& find_value(const UniValue& obj, const std::string& name)\n+const UniValue& find_value(const UniValue& obj, const std::string& name, enum UniValue::keystatus *status)\n {\n-    for (unsigned int i = 0; i < obj.keys.size(); i++)\n-        if (obj.keys[i] == name)\n+    for (unsigned int i = 0; i < obj.keys.size(); i++) {\n+        if (obj.keys[i] == name) {\n+            if (status) { *status = UniValue::KEY_PRESENT; }\n             return obj.values.at(i);\n+        }\n+    }\n \n+    if (status) { *status = UniValue::KEY_NOT_PRESENT; }\n     return NullUniValue;\n }\n-"
      },
      {
        "sha": "1ef66a96a87ac0d0dcbd4e6f92e3b63f6154ef79",
        "filename": "test/functional/interface_jsonrpc2.py",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87d60aaa98ee149360f4cc812209a380b806c67/test/functional/interface_jsonrpc2.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87d60aaa98ee149360f4cc812209a380b806c67/test/functional/interface_jsonrpc2.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_jsonrpc2.py?ref=d87d60aaa98ee149360f4cc812209a380b806c67",
        "patch": "@@ -0,0 +1,84 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the JSON-RPC 2.0 strict support.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+from test_framework.authproxy import JSONRPCException\n+\n+import http.client\n+import urllib.parse\n+import json\n+\n+class JSONRPC2Test(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-strictjsonrpcspec\"]]\n+        self.skip_rpc_check = True\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n+        authpair = url.username + ':' + url.password\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+\n+        # jsonrpc field must exist\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        out1 = conn.getresponse().read()\n+        obj1 = json.loads(out1.decode(\"utf-8\"))\n+        assert \"error\" in obj1\n+        assert \"result\" not in obj1\n+        assert_equal(obj1[\"error\"][\"code\"], -32600) # The JSON sent is not a valid Request object.\n+        assert_equal(obj1[\"error\"][\"message\"], \"Missing jsonrpc field\")\n+\n+        # jsonrpc field MUST be exactly \"2.0\"\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\", \"jsonrpc\": \"dog\"}', headers)\n+        out2 = conn.getresponse().read()\n+        obj2 = json.loads(out2.decode(\"utf-8\"))\n+        assert \"error\" in obj2 # result OR error\n+        assert \"result\" not in obj2\n+        assert_equal(obj2[\"error\"][\"code\"], -32600) # The JSON sent is not a valid Request object.\n+        assert_equal(obj2[\"error\"][\"message\"], \"jsonrpc field must be equal to '2.0'\")\n+\n+        # Notifications (no id) should be ignored (no response)\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\", \"jsonrpc\": \"2.0\"}', headers)\n+        out3 = conn.getresponse().read()\n+        assert_equal(out3, b\"Unhandled request\")\n+\n+        # Valid request - id SHOULD normally not be null, but can be.\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\", \"id\": null, \"jsonrpc\": \"2.0\"}', headers)\n+        out4 = conn.getresponse().read()\n+        obj4 = json.loads(out4.decode(\"utf-8\"))\n+        assert \"result\" in obj4\n+        assert \"error\" not in obj4 # result _or_ error\n+        assert obj4[\"result\"] is not None\n+        assert_equal(obj4[\"id\"], None)\n+        assert_equal(obj4[\"jsonrpc\"], \"2.0\")\n+\n+        # Notifications within batch requests should be ignored\n+        conn.request('POST', '/', json.dumps([\n+            {\"method\": \"getbestblockhash\", \"id\": \"2\", \"jsonrpc\": \"2.0\"},\n+            {\"method\": \"getbestblockhash\", \"jsonrpc\": \"2.0\"},\n+        ]), headers)\n+        out4 = conn.getresponse().read()\n+        obj4 = json.loads(out4.decode(\"utf-8\"))\n+        assert len(obj4) == 1\n+\n+        # Empty batch requests should be ignored (no response), not \"[]\"\n+        conn.request('POST', '/', json.dumps([\n+            {\"method\": \"getbestblockhash\", \"jsonrpc\": \"2.0\"},\n+            {\"method\": \"getbestblockhash\", \"jsonrpc\": \"2.0\"},\n+        ]), headers)\n+        out5 = conn.getresponse().read()\n+        assert_equal(out5, b\"Unhandled request\")\n+\n+if __name__ == '__main__':\n+    JSONRPC2Test().main ()"
      },
      {
        "sha": "a1edc77f7ac94cd88ea054b1a4971c74caa8ea8b",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87d60aaa98ee149360f4cc812209a380b806c67/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87d60aaa98ee149360f4cc812209a380b806c67/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=d87d60aaa98ee149360f4cc812209a380b806c67",
        "patch": "@@ -26,7 +26,7 @@\n \n - HTTP connections persist for the life of the AuthServiceProxy object\n   (if server supports HTTP/1.1)\n-- sends protocol 'version', per JSON-RPC 1.1\n+- sends protocol 'jsonrpc', per JSON-RPC 2.0\n - sends proper, incrementing 'id'\n - sends Basic HTTP authentication headers\n - parses all JSON numbers that look like floats as Decimal\n@@ -126,16 +126,24 @@ def get_request(self, *args, **argsn):\n                                    json.dumps(args, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         if args and argsn:\n             raise ValueError('Cannot handle both named and positional arguments')\n-        return {'version': '1.1',\n+        return {'jsonrpc': '2.0',\n                 'method': self._service_name,\n                 'params': args or argsn,\n                 'id': AuthServiceProxy.__id_count}\n \n     def __call__(self, *args, **argsn):\n         postdata = json.dumps(self.get_request(*args, **argsn), default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n         response = self._request('POST', self.__url.path, postdata.encode('utf-8'))\n-        if response['error'] is not None:\n-            raise JSONRPCException(response['error'])\n+\n+        try:\n+            err = response['error']\n+        except KeyError:\n+            # Likely we're in JSON-RPC 2.0 mode, which doesn't return error\n+            #   if result is in the response\n+            err = None\n+\n+        if err is not None:\n+            raise JSONRPCException(err)\n         elif 'result' not in response:\n             raise JSONRPCException({\n                 'code': -343, 'message': 'missing JSON-RPC result'})"
      },
      {
        "sha": "8d29de5395af9da7cf0ab4c9effcc9d80ac5d254",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87d60aaa98ee149360f4cc812209a380b806c67/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87d60aaa98ee149360f4cc812209a380b806c67/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d87d60aaa98ee149360f4cc812209a380b806c67",
        "patch": "@@ -93,6 +93,7 @@\n     'mempool_spend_coinbase.py',\n     'mempool_reorg.py',\n     'mempool_persist.py',\n+    'interface_jsonrpc2.py',\n     'wallet_multiwallet.py',\n     'wallet_multiwallet.py --usecli',\n     'interface_http.py',"
      }
    ]
  }
]