laanwj,2018-02-15T08:40:21Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-365859137,365859137,
esotericnonsense,2018-02-16T21:35:49Z,Tests are failing on the latest commit. Looking in to it.,https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-366365032,366365032,
esotericnonsense,2018-02-16T21:45:20Z,doh!,https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-366367128,366367128,
jamesob,2018-02-16T21:51:55Z,[Squash needed](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits) at some point.,https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-366368711,366368711,
jonasschnelli,2018-02-17T11:20:35Z,"Nice. Concept ACK.\nTravis is failing because of the subtree change that is separately opened in https://github.com/bitcoin-core/univalue/pull/12",https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-366434702,366434702,
esotericnonsense,2018-02-19T00:05:48Z,"My attempt to squash this seems to have gone awfully wrong. Trying to fix it up...\n\nedit: should be fine now.",https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-366560884,366560884,
meshcollider,2018-03-07T14:52:20Z,Related: https://github.com/bitcoin/bitcoin/issues/2960,https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-371163092,371163092,
laanwj,2018-04-24T09:22:53Z,(travis failure is due to subtree check for univalue),https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-383864592,383864592,
DrahtBot,2018-07-20T20:29:39Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 151 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-406718327,406718327,
DrahtBot,2018-09-10T18:23:11Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-420011972,420011972,
laanwj,2018-09-12T14:25:31Z,"Closing this for now, and adding ""up for grabs"" tag. Let me know if you want to start work on this again and I'll reopenâ€¦",https://github.com/bitcoin/bitcoin/pull/12435#issuecomment-420668007,420668007,
meshcollider,2018-02-15T05:31:19Z,"univalue changes need to be submitted upstream, not here :)",https://github.com/bitcoin/bitcoin/pull/12435#discussion_r168383219,168383219,src/univalue/include/univalue.h
laanwj,2018-02-15T08:40:36Z,He did that (see OP).,https://github.com/bitcoin/bitcoin/pull/12435#discussion_r168407197,168407197,src/univalue/include/univalue.h
conscott,2018-02-15T13:18:41Z,"I commented in the [univalue PR](https://github.com/bitcoin-core/univalue/pull/12) that this catch should probably be for a derived class of `std::exception`, not `int`. If this is the case, there will be no need to re-throw, as the std:exception handler will catch all else below. ",https://github.com/bitcoin/bitcoin/pull/12435#discussion_r168471791,168471791,src/rpc/server.cpp
laanwj,2018-02-15T15:08:31Z,"Yes, throwing an int is really weird.",https://github.com/bitcoin/bitcoin/pull/12435#discussion_r168503180,168503180,src/rpc/server.cpp
jamesob,2018-02-15T18:38:35Z,Does this create different behavior for degenerate returns when not passing `-strictjsonrpcspec`? ,https://github.com/bitcoin/bitcoin/pull/12435#discussion_r168568755,168568755,src/httprpc.cpp
jamesob,2018-02-15T18:39:26Z,"Could just do `std::string strReply(ret.write() + ""\n"");`",https://github.com/bitcoin/bitcoin/pull/12435#discussion_r168568996,168568996,src/httprpc.cpp
jamesob,2018-02-15T18:41:03Z,"Should this have some kind of `g` prefix given it's a global? Also, may want to use snake_case.",https://github.com/bitcoin/bitcoin/pull/12435#discussion_r168569443,168569443,src/rpc/protocol.cpp
conscott,2018-02-15T19:23:45Z,These exception constructors are usually made `explicit` to prevent implicit conversion. You can see [uint_error](https://github.com/bitcoin/bitcoin/blob/master/src/arith_uint256.h#L18-L21) as an example. ,https://github.com/bitcoin/bitcoin/pull/12435#discussion_r168581402,168581402,src/univalue/include/univalue.h
laanwj,2018-04-23T17:13:12Z,Are you sure this univalue API change is really necessary? You could find out if the key is there with an additional call to `Univalue::exists`? (or am I missing something),https://github.com/bitcoin/bitcoin/pull/12435#discussion_r183471457,183471457,src/univalue/include/univalue.h
laanwj,2018-04-23T17:19:08Z,"Yes, should be `g_strict_jsonrpc_spec` or such w/ the new guidelines.",https://github.com/bitcoin/bitcoin/pull/12435#discussion_r183473171,183473171,src/rpc/protocol.cpp
