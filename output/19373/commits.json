[
  {
    "sha": "bd93e32292c96b671e71223032ff8f660ce27c5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDkzZTMyMjkyYzk2YjY3MWU3MTIyMzAzMmZmOGY2NjBjZTI3YzVk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-06-24T13:48:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-06-24T16:41:45Z"
      },
      "message": "refactor: Replace HexStr(o.begin(), o.end()) with HexStr(o)\n\nHexStr can be called with anything that bas `begin()` and `end()` functions,\nso clean up the redundant calls.",
      "tree": {
        "sha": "0aa7480acb3fa0162f49ab989bd40a8274acffe0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0aa7480acb3fa0162f49ab989bd40a8274acffe0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd93e32292c96b671e71223032ff8f660ce27c5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd93e32292c96b671e71223032ff8f660ce27c5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd93e32292c96b671e71223032ff8f660ce27c5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd93e32292c96b671e71223032ff8f660ce27c5d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "205b87d2f6bd01285de50ba742e32e4ab1298b13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/205b87d2f6bd01285de50ba742e32e4ab1298b13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/205b87d2f6bd01285de50ba742e32e4ab1298b13"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 43,
      "deletions": 43
    },
    "files": [
      {
        "sha": "429c9c5a1a5da6e8f51947c82c283492efff255e",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -131,13 +131,13 @@ std::string EncodeHexTx(const CTransaction& tx, const int serializeFlags)\n {\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | serializeFlags);\n     ssTx << tx;\n-    return HexStr(ssTx.begin(), ssTx.end());\n+    return HexStr(ssTx);\n }\n \n void ScriptToUniv(const CScript& script, UniValue& out, bool include_address)\n {\n     out.pushKV(\"asm\", ScriptToAsmStr(script));\n-    out.pushKV(\"hex\", HexStr(script.begin(), script.end()));\n+    out.pushKV(\"hex\", HexStr(script));\n \n     std::vector<std::vector<unsigned char>> solns;\n     txnouttype type = Solver(script, solns);\n@@ -158,7 +158,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n \n     out.pushKV(\"asm\", ScriptToAsmStr(scriptPubKey));\n     if (fIncludeHex)\n-        out.pushKV(\"hex\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+        out.pushKV(\"hex\", HexStr(scriptPubKey));\n \n     if (!ExtractDestinations(scriptPubKey, type, addresses, nRequired) || type == TX_PUBKEY) {\n         out.pushKV(\"type\", GetTxnOutputType(type));\n@@ -190,19 +190,19 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n         const CTxIn& txin = tx.vin[i];\n         UniValue in(UniValue::VOBJ);\n         if (tx.IsCoinBase())\n-            in.pushKV(\"coinbase\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+            in.pushKV(\"coinbase\", HexStr(txin.scriptSig));\n         else {\n             in.pushKV(\"txid\", txin.prevout.hash.GetHex());\n             in.pushKV(\"vout\", (int64_t)txin.prevout.n);\n             UniValue o(UniValue::VOBJ);\n             o.pushKV(\"asm\", ScriptToAsmStr(txin.scriptSig, true));\n-            o.pushKV(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+            o.pushKV(\"hex\", HexStr(txin.scriptSig));\n             in.pushKV(\"scriptSig\", o);\n         }\n         if (!tx.vin[i].scriptWitness.IsNull()) {\n             UniValue txinwitness(UniValue::VARR);\n             for (const auto& item : tx.vin[i].scriptWitness.stack) {\n-                txinwitness.push_back(HexStr(item.begin(), item.end()));\n+                txinwitness.push_back(HexStr(item));\n             }\n             in.pushKV(\"txinwitness\", txinwitness);\n         }"
      },
      {
        "sha": "8cb594a03b16275ee7e42220ea3677a3631cc42b",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -188,7 +188,7 @@ static bool rest_headers(const util::Ref& context,\n             ssHeader << pindex->GetBlockHeader();\n         }\n \n-        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n         return true;\n@@ -253,7 +253,7 @@ static bool rest_block(HTTPRequest* req,\n     case RetFormat::HEX: {\n         CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n         ssBlock << block;\n-        std::string strHex = HexStr(ssBlock.begin(), ssBlock.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssBlock) + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n         return true;\n@@ -391,7 +391,7 @@ static bool rest_tx(const util::Ref& context, HTTPRequest* req, const std::strin\n         CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n         ssTx << tx;\n \n-        std::string strHex = HexStr(ssTx.begin(), ssTx.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssTx) + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n         return true;\n@@ -556,7 +556,7 @@ static bool rest_getutxos(const util::Ref& context, HTTPRequest* req, const std:\n     case RetFormat::HEX: {\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n         ssGetUTXOResponse << ::ChainActive().Height() << ::ChainActive().Tip()->GetBlockHash() << bitmap << outs;\n-        std::string strHex = HexStr(ssGetUTXOResponse.begin(), ssGetUTXOResponse.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssGetUTXOResponse) + \"\\n\";\n \n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);"
      },
      {
        "sha": "64f8a5bb3b23c79b0f199b0f6a0d8d0038c74089",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -779,7 +779,7 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n     {\n         CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n         ssBlock << pblockindex->GetBlockHeader();\n-        std::string strHex = HexStr(ssBlock.begin(), ssBlock.end());\n+        std::string strHex = HexStr(ssBlock);\n         return strHex;\n     }\n \n@@ -905,7 +905,7 @@ static UniValue getblock(const JSONRPCRequest& request)\n     {\n         CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n         ssBlock << block;\n-        std::string strHex = HexStr(ssBlock.begin(), ssBlock.end());\n+        std::string strHex = HexStr(ssBlock);\n         return strHex;\n     }\n \n@@ -2159,7 +2159,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             UniValue unspent(UniValue::VOBJ);\n             unspent.pushKV(\"txid\", outpoint.hash.GetHex());\n             unspent.pushKV(\"vout\", (int32_t)outpoint.n);\n-            unspent.pushKV(\"scriptPubKey\", HexStr(txo.scriptPubKey.begin(), txo.scriptPubKey.end()));\n+            unspent.pushKV(\"scriptPubKey\", HexStr(txo.scriptPubKey));\n             unspent.pushKV(\"desc\", descriptors[txo.scriptPubKey]);\n             unspent.pushKV(\"amount\", ValueFromAmount(txo.nValue));\n             unspent.pushKV(\"height\", (int32_t)coin.nHeight);"
      },
      {
        "sha": "fee6a893eb79361437f677fd478bbb9c51388434",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -873,7 +873,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.pushKV(\"height\", (int64_t)(pindexPrev->nHeight+1));\n \n     if (!pblocktemplate->vchCoinbaseCommitment.empty()) {\n-        result.pushKV(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end()));\n+        result.pushKV(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment));\n     }\n \n     return result;"
      },
      {
        "sha": "53d38f4e115347b8d7c8c853a8108812a223099d",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -63,7 +63,7 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n         ret.pushKV(\"address\", currentAddress);\n \n         CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+        ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey));\n \n         UniValue detail = DescribeAddress(dest);\n         ret.pushKVs(detail);\n@@ -131,7 +131,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n \n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"address\", EncodeDestination(dest));\n-    result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));\n+    result.pushKV(\"redeemScript\", HexStr(inner));\n     result.pushKV(\"descriptor\", descriptor->ToString());\n \n     return result;"
      },
      {
        "sha": "a53b91c4bc2901f35aa818fa395e2f86a52a142b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -305,7 +305,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n     CDataStream ssMB(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n     CMerkleBlock mb(block, setTxids);\n     ssMB << mb;\n-    std::string strHex = HexStr(ssMB.begin(), ssMB.end());\n+    std::string strHex = HexStr(ssMB);\n     return strHex;\n }\n \n@@ -1186,7 +1186,7 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n         if (!input.final_script_witness.IsNull()) {\n             UniValue txinwitness(UniValue::VARR);\n             for (const auto& item : input.final_script_witness.stack) {\n-                txinwitness.push_back(HexStr(item.begin(), item.end()));\n+                txinwitness.push_back(HexStr(item));\n             }\n             in.pushKV(\"final_scriptwitness\", txinwitness);\n         }"
      },
      {
        "sha": "1031716b4a0e2fa45940b5506e6ca5f51caad096",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -138,10 +138,10 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     entry.pushKV(\"vout\", (uint64_t)txin.prevout.n);\n     UniValue witness(UniValue::VARR);\n     for (unsigned int i = 0; i < txin.scriptWitness.stack.size(); i++) {\n-        witness.push_back(HexStr(txin.scriptWitness.stack[i].begin(), txin.scriptWitness.stack[i].end()));\n+        witness.push_back(HexStr(txin.scriptWitness.stack[i]));\n     }\n     entry.pushKV(\"witness\", witness);\n-    entry.pushKV(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+    entry.pushKV(\"scriptSig\", HexStr(txin.scriptSig));\n     entry.pushKV(\"sequence\", (uint64_t)txin.nSequence);\n     entry.pushKV(\"error\", strMessage);\n     vErrorsRet.push_back(entry);"
      },
      {
        "sha": "54ea352a72c50a28c7939ffbf9a0e1e61f8e383f",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -224,7 +224,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         obj.pushKV(\"isscript\", false);\n         obj.pushKV(\"iswitness\", true);\n         obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n+        obj.pushKV(\"witness_program\", HexStr(id));\n         return obj;\n     }\n \n@@ -234,7 +234,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         obj.pushKV(\"isscript\", true);\n         obj.pushKV(\"iswitness\", true);\n         obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n+        obj.pushKV(\"witness_program\", HexStr(id));\n         return obj;\n     }\n "
      },
      {
        "sha": "2634d3ad4fb8202a74e97c624756776f9ac080d5",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -235,7 +235,7 @@ class ConstPubkeyProvider final : public PubkeyProvider\n     }\n     bool IsRange() const override { return false; }\n     size_t GetSize() const override { return m_pubkey.size(); }\n-    std::string ToString() const override { return HexStr(m_pubkey.begin(), m_pubkey.end()); }\n+    std::string ToString() const override { return HexStr(m_pubkey); }\n     bool ToPrivateString(const SigningProvider& arg, std::string& ret) const override\n     {\n         CKey key;\n@@ -583,7 +583,7 @@ class RawDescriptor final : public DescriptorImpl\n {\n     const CScript m_script;\n protected:\n-    std::string ToStringExtra() const override { return HexStr(m_script.begin(), m_script.end()); }\n+    std::string ToStringExtra() const override { return HexStr(m_script); }\n     std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript*, FlatSigningProvider&) const override { return Vector(m_script); }\n public:\n     RawDescriptor(CScript script) : DescriptorImpl({}, {}, \"raw\"), m_script(std::move(script)) {}"
      },
      {
        "sha": "173ec5e3d9222ff8d6562ac2caba1431ac309f58",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -538,7 +538,7 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     CDataStream tmp(SER_DISK, CLIENT_VERSION);\n     uint64_t x = 3000000000ULL;\n     tmp << VARINT(x);\n-    BOOST_CHECK_EQUAL(HexStr(tmp.begin(), tmp.end()), \"8a95c0bb00\");\n+    BOOST_CHECK_EQUAL(HexStr(tmp), \"8a95c0bb00\");\n     CDataStream ss5(ParseHex(\"00008a95c0bb00\"), SER_DISK, CLIENT_VERSION);\n     try {\n         Coin cc5;"
      },
      {
        "sha": "5d7065dafb789fc805ae4e0af419938d77c0359e",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -216,7 +216,7 @@ void DoCheck(const std::string& prv, const std::string& pub, int flags, const st\n \n             // For each of the produced scripts, verify solvability, and when possible, try to sign a transaction spending it.\n             for (size_t n = 0; n < spks.size(); ++n) {\n-                BOOST_CHECK_EQUAL(ref[n], HexStr(spks[n].begin(), spks[n].end()));\n+                BOOST_CHECK_EQUAL(ref[n], HexStr(spks[n]));\n                 BOOST_CHECK_EQUAL(IsSolvable(Merge(key_provider, script_provider), spks[n]), (flags & UNSOLVABLE) == 0);\n \n                 if (flags & SIGNABLE) {"
      },
      {
        "sha": "0d89d4228a370f04921508f5df5894f407c2cc98",
        "filename": "src/test/fuzz/decode_tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/test/fuzz/decode_tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/test/fuzz/decode_tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/decode_tx.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -14,7 +14,7 @@\n \n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n-    const std::string tx_hex = HexStr(std::string{buffer.begin(), buffer.end()});\n+    const std::string tx_hex = HexStr(buffer);\n     CMutableTransaction mtx;\n     const bool result_none = DecodeHexTx(mtx, tx_hex, false, false);\n     const bool result_try_witness = DecodeHexTx(mtx, tx_hex, false, true);"
      },
      {
        "sha": "58735545c9fa2f2913edbfa8840e384ecc0149d4",
        "filename": "src/test/fuzz/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/test/fuzz/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/test/fuzz/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/key.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -108,7 +108,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         assert(pubkey.IsCompressed());\n         assert(pubkey.IsValid());\n         assert(pubkey.IsFullyValid());\n-        assert(HexToPubKey(HexStr(pubkey.begin(), pubkey.end())) == pubkey);\n+        assert(HexToPubKey(HexStr(pubkey)) == pubkey);\n         assert(GetAllDestinationsForKey(pubkey).size() == 3);\n     }\n "
      },
      {
        "sha": "c0bb92258b8a7e63d79aa68677f9644e875afa0b",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -141,7 +141,7 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n         ss << txTo;\n \n         std::cout << \"\\t[\\\"\" ;\n-        std::cout << HexStr(ss.begin(), ss.end()) << \"\\\", \\\"\";\n+        std::cout << HexStr(ss) << \"\\\", \\\"\";\n         std::cout << HexStr(scriptCode) << \"\\\", \";\n         std::cout << nIn << \", \";\n         std::cout << nHashType << \", \\\"\";"
      },
      {
        "sha": "6a1048539fa3788f8467f4277f4a0cd2440f1659",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -817,7 +817,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n             create_time = FormatISO8601DateTime(it->second.nCreateTime);\n         }\n         if(spk_man.GetCScript(scriptid, script)) {\n-            file << strprintf(\"%s %s script=1\", HexStr(script.begin(), script.end()), create_time);\n+            file << strprintf(\"%s %s script=1\", HexStr(script), create_time);\n             file << strprintf(\" # addr=%s\\n\", address);\n         }\n     }\n@@ -1193,7 +1193,7 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         // Check whether we have any work to do\n         for (const CScript& script : script_pub_keys) {\n             if (pwallet->IsMine(script) & ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script (\\\"\" + HexStr(script.begin(), script.end()) + \"\\\")\");\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script (\\\"\" + HexStr(script) + \"\\\")\");\n             }\n         }\n "
      },
      {
        "sha": "11ab7a6434332f1cb1d3972b872ad5ea04522395",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -964,7 +964,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n \n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"address\", EncodeDestination(dest));\n-    result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));\n+    result.pushKV(\"redeemScript\", HexStr(inner));\n     result.pushKV(\"descriptor\", descriptor->ToString());\n     return result;\n }\n@@ -2870,7 +2870,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                     const CScriptID& hash = CScriptID(boost::get<ScriptHash>(address));\n                     CScript redeemScript;\n                     if (provider->GetCScript(hash, redeemScript)) {\n-                        entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n+                        entry.pushKV(\"redeemScript\", HexStr(redeemScript));\n                         // Now check if the redeemScript is actually a P2WSH script\n                         CTxDestination witness_destination;\n                         if (redeemScript.IsPayToWitnessScriptHash()) {\n@@ -2882,7 +2882,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                             CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n                             CScript witnessScript;\n                             if (provider->GetCScript(id, witnessScript)) {\n-                                entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+                                entry.pushKV(\"witnessScript\", HexStr(witnessScript));\n                             }\n                         }\n                     }\n@@ -2892,13 +2892,13 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                     CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n                     CScript witnessScript;\n                     if (provider->GetCScript(id, witnessScript)) {\n-                        entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+                        entry.pushKV(\"witnessScript\", HexStr(witnessScript));\n                     }\n                 }\n             }\n         }\n \n-        entry.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+        entry.pushKV(\"scriptPubKey\", HexStr(scriptPubKey));\n         entry.pushKV(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue));\n         entry.pushKV(\"confirmations\", out.nDepth);\n         entry.pushKV(\"spendable\", out.fSpendable);\n@@ -3491,7 +3491,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n         std::vector<std::vector<unsigned char>> solutions_data;\n         txnouttype which_type = Solver(subscript, solutions_data);\n         obj.pushKV(\"script\", GetTxnOutputType(which_type));\n-        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+        obj.pushKV(\"hex\", HexStr(subscript));\n \n         CTxDestination embedded;\n         if (ExtractDestination(subscript, embedded)) {\n@@ -3502,7 +3502,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n             UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n             subobj.pushKVs(wallet_detail);\n             subobj.pushKV(\"address\", EncodeDestination(embedded));\n-            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript));\n             // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n             if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n             obj.pushKV(\"embedded\", std::move(subobj));\n@@ -3513,7 +3513,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n             UniValue pubkeys(UniValue::VARR);\n             for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n                 CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n-                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+                pubkeys.push_back(HexStr(key));\n             }\n             obj.pushKV(\"pubkeys\", std::move(pubkeys));\n         }\n@@ -3669,7 +3669,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     ret.pushKV(\"address\", currentAddress);\n \n     CScript scriptPubKey = GetScriptForDestination(dest);\n-    ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+    ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey));\n \n     std::unique_ptr<SigningProvider> provider = pwallet->GetSolvingProvider(scriptPubKey);\n "
      },
      {
        "sha": "3f85a48ff33a6cea4b5b47f907e1e76d2c3a9a2b",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -63,7 +63,7 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n     // Get the final tx\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << psbtx;\n-    std::string final_hex = HexStr(ssTx.begin(), ssTx.end());\n+    std::string final_hex = HexStr(ssTx);\n     BOOST_CHECK_EQUAL(final_hex, \"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88701042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000\");\n \n     // Mutate the transaction so that one of the inputs is invalid"
      },
      {
        "sha": "10ddfa22efd1c82fb91e4cb798de85a241fb2ba3",
        "filename": "src/wallet/test/wallet_crypto_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd93e32292c96b671e71223032ff8f660ce27c5d/src/wallet/test/wallet_crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd93e32292c96b671e71223032ff8f660ce27c5d/src/wallet/test/wallet_crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_crypto_tests.cpp?ref=bd93e32292c96b671e71223032ff8f660ce27c5d",
        "patch": "@@ -24,10 +24,10 @@ static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, cons\n \n     if(!correctKey.empty())\n         BOOST_CHECK_MESSAGE(memcmp(crypt.vchKey.data(), correctKey.data(), crypt.vchKey.size()) == 0, \\\n-            HexStr(crypt.vchKey.begin(), crypt.vchKey.end()) + std::string(\" != \") + HexStr(correctKey.begin(), correctKey.end()));\n+            HexStr(crypt.vchKey) + std::string(\" != \") + HexStr(correctKey));\n     if(!correctIV.empty())\n         BOOST_CHECK_MESSAGE(memcmp(crypt.vchIV.data(), correctIV.data(), crypt.vchIV.size()) == 0,\n-            HexStr(crypt.vchIV.begin(), crypt.vchIV.end()) + std::string(\" != \") + HexStr(correctIV.begin(), correctIV.end()));\n+            HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correctIV));\n }\n \n static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,"
      }
    ]
  }
]