laanwj,2019-10-01 10:12:48,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17009#issuecomment-536968852,536968852,
jonatack,2019-10-01 15:25:41,Concept ACK. Will try to test this soon.,https://github.com/bitcoin/bitcoin/pull/17009#issuecomment-537090048,537090048,
DrahtBot,2019-10-03 20:39:31,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17129](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17129.html) (tests: Add fuzzing harness for miniscript::",https://github.com/bitcoin/bitcoin/pull/17009#issuecomment-538118862,538118862,
MarcoFalke,2019-10-14 13:27:14,"ACK 7e50abcc29dc5fde24a1b3e57c6316eabda35e2e\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 7e50abcc29dc5fde24a1b3e57c6316eabda35e2e\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUidXQwAq4GO999vR/OJASwj9LLmukMWUhvY04RwBHGUho2xHLi2V1YL1q/f5c",https://github.com/bitcoin/bitcoin/pull/17009#issuecomment-541677256,541677256,
MarcoFalke,2019-10-01 12:39:09,"Looks fine to do this change, even if we were to switch to a different class (like https://cs.chromium.org/chromium/src/third_party/libFuzzer/src/utils/FuzzedDataProvider.h?rcl=b9f51dc8c98065df0c8da13c051046f5bab833db), the input data remains read-only.",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r330032648,330032648,src/test/fuzz/fuzz.h
MarcoFalke,2019-10-01 12:41:24,"See the documentation: ""The seed corpus to run on (must contain subfolders for each fuzz target)""\n\nthe idea was to give the user feedback when the seeds were missing by accident",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r330033610,330033610,test/fuzz/test_runner.py
MarcoFalke,2019-10-01 12:43:46,Can you explain why the flags are hardcoded (as opposed to be read from the input)?,https://github.com/bitcoin/bitcoin/pull/17009#discussion_r330034628,330034628,src/test/fuzz/eval_script.cpp
MarcoFalke,2019-10-01 12:52:11,"not sure if this helps, but there is a `static bool IsValidFlagCombination` helper",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r330038405,330038405,src/test/fuzz/eval_script.cpp
practicalswift,2019-10-01 13:20:40,"The consequence of that is that Travis fails when adding a new fuzzer (like in this case prior to adding that change). That's not how we want things to work, right? :)",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r330052245,330052245,test/fuzz/test_runner.py
practicalswift,2019-10-01 15:25:21,"Yes, fuzzing inputs are passed read-only by convention for all in-process fuzzers I've ever used. And `FuzzedDataProvider` is great :)",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r330122025,330122025,src/test/fuzz/fuzz.h
MarcoFalke,2019-10-01 15:46:29,I think we do want this (as a reminder to generate seeds and upload them for travis),https://github.com/bitcoin/bitcoin/pull/17009#discussion_r330133627,330133627,test/fuzz/test_runner.py
practicalswift,2019-10-02 07:47:07,"I think that creates a inter-repo dependency that is not warranted: the build for https://github.com/bitcoin/bitcoin should not break due to https://github.com/bitcoin-core/qa-assets not being updated. I suggest moving this checking to a cron job or to https://github.com/bitcoin-core/qa-assets.\n\nOur fuzzing framework is currently in a really really poor state: to fix that we want to make it su",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r330410011,330410011,test/fuzz/test_runner.py
practicalswift,2019-10-02 08:44:26,"It is a trade-off: while reading the flags could increase coverage it would also greatly increase the search space in a way that is not trivial for a fuzzer to reduce intelligently (AFAICT). Based on my reading of how `flags` are affecting the code paths taken in `EvalScript` I came to the conclusion that `{0U, std::numeric_limits<unsigned int>::max()}` seemed like a good way to limit search space",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r330432946,330432946,src/test/fuzz/eval_script.cpp
MarcoFalke,2019-10-02 12:59:45,"It might give you the same line coverage, but not the same path coverage. E.g. CLTV and CSV are always both enabled or both disabled, but never only one of them is enabled. Do you have any reading suggestions for me that explain your intuition that the fuzzer will conceptually have a harder time covering the search space when the input data is used to decide which code path to take?",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r330533701,330533701,src/test/fuzz/eval_script.cpp
practicalswift,2019-10-02 14:27:18,I'll try to find a link :)  I've now switched to reading `flags` from input using the excellent `FuzzedDataProvider` helper. I'm sure that will work out well too :),https://github.com/bitcoin/bitcoin/pull/17009#discussion_r330581609,330581609,src/test/fuzz/eval_script.cpp
practicalswift,2019-10-02 14:28:04,I'm now using suppressions in `fuzz/test_runner.py` to resolve this.,https://github.com/bitcoin/bitcoin/pull/17009#discussion_r330582125,330582125,test/fuzz/test_runner.py
MarcoFalke,2019-10-04 13:30:44,"Could split up this commit, so that other pull request don't conflict with this one?",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r331502028,331502028,src/test/fuzz/fuzz.h
MarcoFalke,2019-10-04 15:28:58,@practicalswift ^ ;),https://github.com/bitcoin/bitcoin/pull/17009#discussion_r331560561,331560561,src/test/fuzz/fuzz.h
practicalswift,2019-10-07 08:35:02,I've now moved this change to a separate PR to make this PR non-conflicting with others. I hope that was the correct reading of the suggestion :),https://github.com/bitcoin/bitcoin/pull/17009#discussion_r331899009,331899009,src/test/fuzz/fuzz.h
MarcoFalke,2019-10-07 16:40:16,"style-nit: Looks like this creates another copy of the buffer.\n\nCould be solved by making `test_one_input` pass either a reference of a vector or a fuzzed data provider at compile time (with a compile flag)?\n\nFeel free to ignore.",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r332121557,332121557,src/test/fuzz/eval_script.cpp
MarcoFalke,2019-10-07 16:41:39,Could put this into a separate commit to explain in the commit body where it is taken from exactly (repo+commit)?,https://github.com/bitcoin/bitcoin/pull/17009#discussion_r332122179,332122179,src/test/fuzz/FuzzedDataProvider.h
practicalswift,2019-10-08 15:18:25,Good point! Fixed!,https://github.com/bitcoin/bitcoin/pull/17009#discussion_r332574460,332574460,src/test/fuzz/FuzzedDataProvider.h
MarcoFalke,2019-10-10 21:08:42,can remove all of this?,https://github.com/bitcoin/bitcoin/pull/17009#discussion_r333736220,333736220,test/fuzz/test_runner.py
practicalswift,2019-10-10 21:14:40,Done! :),https://github.com/bitcoin/bitcoin/pull/17009#discussion_r333738627,333738627,test/fuzz/test_runner.py
MarcoFalke,2019-10-11 14:41:57,"why is this needed? The fuzzer should be able to learn it trivially.\n\nAlso, you are limiting the script to have a size greater or equal to one",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r334026370,334026370,src/test/fuzz/eval_script.cpp
practicalswift,2019-10-11 15:32:15,"Unfortunately needed to not trigger the following UBSan warnings in Chromium's `FuzzedDataProvider.h` :)\n\nWithout:\n\n```\n$ src/test/fuzz/eval_script\nINFO: Seed: 2056324753\nINFO: Loaded 1 modules   (453398 inline 8-bit counters): 453398 [0x563c78576048, 0x563c785e4b5e),\nINFO: Loaded 1 PC tables (453398 PCs): 453398 [0x563c785e4b60,0x563c78ccfcc0),\nINFO: -max_len is not provided; li",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r334050912,334050912,src/test/fuzz/eval_script.cpp
MarcoFalke,2019-10-11 17:15:03,"Why doesn't that make the fuzzer fail and exit?\n\nedit:\n\nThis is concerning:\n\n\n```\n$ src/test/fuzz/eval_script -runs=1 ../btc_qa_assets/fuzz_seed_corpus/eval_script\nINFO: Seed: 353817634\nINFO: Loaded 1 modules   (428917 inline 8-bit counters): 428917 [0x55d5861db100, 0x55d586243c75), \nINFO: Loaded 1 PC tables (428917 PCs): 428917 [0x55d586243c78,0x55d5868cf3c8), \nINFO:     1",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r334091486,334091486,src/test/fuzz/eval_script.cpp
MarcoFalke,2019-10-11 17:15:47,"Anyway, the check should be `<`, not `<=`, otherwise you are limiting the script to have a size greater or equal to one\n",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r334091717,334091717,src/test/fuzz/eval_script.cpp
practicalswift,2019-10-12 16:21:49,"@MarcoFalke I think you forgot to set `UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1:exitcode=1` :)\n\nI think this is the behaviour you expected:\n\n```\n$ UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1:exitcode=1 src/test/fuzz/eval_script -runs=1 ../btc_qa_assets/fuzz_seed_corpus/eval_script\nINFO: Seed: 3606842015\nINFO: Loaded 1 modules   (453402 inline 8-bit counters): 453402 [0x5",https://github.com/bitcoin/bitcoin/pull/17009#discussion_r334244313,334244313,src/test/fuzz/eval_script.cpp
