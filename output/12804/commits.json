[
  {
    "sha": "5a67c0524e5dc98d0e387f189545bc99863916d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTY3YzA1MjRlNWRjOThkMGUzODdmMTg5NTQ1YmM5OTg2MzkxNmQ0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-27T21:18:01Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-28T19:35:35Z"
      },
      "message": "[tests] Fix intermittent rpc_net.py failure.\n\nrpc_net.py would intermittently fail on Travis, probably\ndue to assuming that two consecutive RPC calls were atomic.\nFix this by only testing that amounts are bounded above and\nbelow rather than equal.",
      "tree": {
        "sha": "bde76578e11001882f152ba5783583f2b1f98783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bde76578e11001882f152ba5783583f2b1f98783"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a67c0524e5dc98d0e387f189545bc99863916d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a67c0524e5dc98d0e387f189545bc99863916d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a67c0524e5dc98d0e387f189545bc99863916d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a67c0524e5dc98d0e387f189545bc99863916d4/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac898b689c660df8a79cc64997dda66d36eb59dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac898b689c660df8a79cc64997dda66d36eb59dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac898b689c660df8a79cc64997dda66d36eb59dd"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 21,
      "deletions": 13
    },
    "files": [
      {
        "sha": "72b5f4748feab65319d16f502b1ea60897239961",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 21,
        "deletions": 13,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a67c0524e5dc98d0e387f189545bc99863916d4/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a67c0524e5dc98d0e387f189545bc99863916d4/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=5a67c0524e5dc98d0e387f189545bc99863916d4",
        "patch": "@@ -10,6 +10,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_greater_than_or_equal,\n     assert_raises_rpc_error,\n     connect_nodes_bi,\n     p2p_port,\n@@ -33,26 +34,34 @@ def _test_connection_count(self):\n         assert_equal(self.nodes[0].getconnectioncount(), 2)\n \n     def _test_getnettotals(self):\n-        # check that getnettotals totalbytesrecv and totalbytessent\n-        # are consistent with getpeerinfo\n+        # getnettotals totalbytesrecv and totalbytessent should be\n+        # consistent with getpeerinfo. Since the RPC calls are not atomic,\n+        # and messages might have been recvd or sent between RPC calls, call\n+        # getnettotals before and after and verify that the returned values\n+        # from getpeerinfo are bounded by those values.\n+        net_totals_before = self.nodes[0].getnettotals()\n         peer_info = self.nodes[0].getpeerinfo()\n+        net_totals_after = self.nodes[0].getnettotals()\n         assert_equal(len(peer_info), 2)\n-        net_totals = self.nodes[0].getnettotals()\n-        assert_equal(sum([peer['bytesrecv'] for peer in peer_info]),\n-                     net_totals['totalbytesrecv'])\n-        assert_equal(sum([peer['bytessent'] for peer in peer_info]),\n-                     net_totals['totalbytessent'])\n+        peers_recv = sum([peer['bytesrecv'] for peer in peer_info])\n+        peers_sent = sum([peer['bytessent'] for peer in peer_info])\n+\n+        assert_greater_than_or_equal(peers_recv, net_totals_before['totalbytesrecv'])\n+        assert_greater_than_or_equal(net_totals_after['totalbytesrecv'], peers_recv)\n+        assert_greater_than_or_equal(peers_sent, net_totals_before['totalbytessent'])\n+        assert_greater_than_or_equal(net_totals_after['totalbytessent'], peers_sent)\n+\n         # test getnettotals and getpeerinfo by doing a ping\n         # the bytes sent/received should change\n         # note ping and pong are 32 bytes each\n         self.nodes[0].ping()\n-        wait_until(lambda: (net_totals['totalbytessent'] + 32*2) == self.nodes[0].getnettotals()['totalbytessent'], timeout=1)\n-        wait_until(lambda: (net_totals['totalbytesrecv'] + 32*2) == self.nodes[0].getnettotals()['totalbytesrecv'], timeout=1)\n+        wait_until(lambda: (self.nodes[0].getnettotals()['totalbytessent'] >= net_totals_after['totalbytessent'] + 32 * 2), timeout=1)\n+        wait_until(lambda: (self.nodes[0].getnettotals()['totalbytesrecv'] >= net_totals_after['totalbytesrecv'] + 32 * 2), timeout=1)\n \n         peer_info_after_ping = self.nodes[0].getpeerinfo()\n         for before, after in zip(peer_info, peer_info_after_ping):\n-            assert_equal(before['bytesrecv_per_msg']['pong'] + 32, after['bytesrecv_per_msg']['pong'])\n-            assert_equal(before['bytessent_per_msg']['ping'] + 32, after['bytessent_per_msg']['ping'])\n+            assert_greater_than_or_equal(after['bytesrecv_per_msg']['pong'], before['bytesrecv_per_msg']['pong'] + 32)\n+            assert_greater_than_or_equal(after['bytessent_per_msg']['ping'], before['bytessent_per_msg']['ping'] + 32)\n \n     def _test_getnetworkinginfo(self):\n         assert_equal(self.nodes[0].getnetworkinfo()['networkactive'], True)\n@@ -78,8 +87,7 @@ def _test_getaddednodeinfo(self):\n         assert_equal(len(added_nodes), 1)\n         assert_equal(added_nodes[0]['addednode'], ip_port)\n         # check that a non-existent node returns an error\n-        assert_raises_rpc_error(-24, \"Node has not been added\",\n-                              self.nodes[0].getaddednodeinfo, '1.1.1.1')\n+        assert_raises_rpc_error(-24, \"Node has not been added\", self.nodes[0].getaddednodeinfo, '1.1.1.1')\n \n     def _test_getpeerinfo(self):\n         peer_info = [x.getpeerinfo() for x in self.nodes]"
      }
    ]
  }
]