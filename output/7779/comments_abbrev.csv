sdaftuar,2016-04-06T15:24:28Z,"No strong feelings, but this seems reasonable to me. (I was never sure I understood how these flags were supposed to work, so this seems clearer than before.)\n\nutACK\n",https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-206425944,206425944,
jtimon,2016-04-06T23:35:40Z,"thank you! \nTo be clear, I don't think the second commit should be merged. It would be one thing we could replace with a flag for policy-only segwit or something in the future, just an example. I'll leave it for now, but it's not intended to be merged. Next comment I remove it.\n",https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-206620924,206620924,
jtimon,2016-04-14T14:43:51Z,Should I remove the second commit already or just close the PR for lack of interest?\n,https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-209978271,209978271,
sipa,2016-04-14T14:51:50Z,It feels like a layer violation to let the script intepreter define the flags that block-level consensus can use (including things that have no effect on script validation).\n,https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-209984424,209984424,
jtimon,2016-04-14T16:55:23Z,"@sipa Thank you for bringing that up, that's the concern I expected.\nIn the same way, when/if we create tx validation flags for say, tx, header, block...\nIt will feel like a layer violation that the block validation flags are in the same enum as the tx validation flags, won't it?\nSo the real question is, how many different enums do we want for consensus validation flags?\n\nTo me, the answer is",https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-210047290,210047290,
sipa,2016-06-02T14:53:09Z,"@jtimon That's an interesting discussion, and it is related to the question of how the code should be layered a) by (script,tx,block,blockchain) or b) by (primitives,serialization,validation/consensus,signing), as all combinations of these are possible. If we primarily organize by b, then it makes sense to have only one set of consensus flags. But what if we want to extend the usage of scripts bey",https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-223316643,223316643,
jtimon,2016-07-16T19:34:50Z,"Should I close for now, until #8345 gets some review?\n",https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-233147114,233147114,
jtimon,2016-07-16T19:37:46Z,"The only short term solution I see to the ""layer violation"" concern I see is moving the flags outside script/interpreter, maybe to consensus/flags.h.\n",https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-233147237,233147237,
sipa,2016-07-16T20:04:12Z,"I think we just need two types of flags: consensus flags and script flags.\n\nThe consensus logic (above script) computes the script flags to pass down, but they're otherwise independent.\n",https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-233148429,233148429,
jtimon,2016-07-17T09:16:05Z,"But why? What's so wrong about separating the flags out of interpreter (to say consensus/flags.h)?\nWhat's so cool about having the flags separated (in two or more, but as said before I prefer 2 over any greater number, just prefer 1).\nThat will mean that (at least) verifyTx will have to take two parameters: scriptFlags, restOfConsensusFlags.\nWhy? Really, is there an advantage I am missing?\n",https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-233172846,233172846,
sipa,2016-07-17T10:33:54Z,"No, VerifyTx would just take consensusflags. These would include things\nlike BIP16, BIP30, BIP34, BIP65, BIP66, CSV, ...\n\nVerifyTx would translate those to the corresponding script verify flags;\nnamely the things that are already script verification flags. Not all\nconsensus flags translate to script verification flags (BIP30 and BIP34 do\nnot for example); some would translate to multiple (st",https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-233175509,233175509,
jtimon,2016-07-17T10:57:29Z,"Ok, so we whould have consensus flags and script flags and most of them would be duplicated in both. Then we can have a translator function or something that gives you the corresponding script flags for some given consensus flags. Is that your proposed solution?\nSeems unnecessarily complicated, but perhaps only because I may still not be understanding the concern, so let's make sure I got that ri",https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-233176385,233176385,
sipa,2016-07-17T11:01:50Z,"Yes, that is my proposed solution.\n\nJust because both the script interpreter and the block/tx validation logic are part of consensus does not mean there can not be any clean abstraction between them. And currently, script is one of the few well-modularized parts of the code already; there is no need to break that abstraction.\n",https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-233176515,233176515,
jtimon,2016-07-17T11:20:40Z,"I understand the general point, I guess I just don't consider that what I describe in my example counts as breaking that abstraction. The script part would not be depending on any functionality, only flags, constants that may or may not use.\nAnyway, I'll think more about your proposed solution, maybe code it to see what it looks like. But I have a strong feeling that I won't like it.\n",https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-233177155,233177155,
jtimon,2016-12-03T12:23:16Z,Replaced by #9271,https://github.com/bitcoin/bitcoin/pull/7779#issuecomment-264636206,264636206,
