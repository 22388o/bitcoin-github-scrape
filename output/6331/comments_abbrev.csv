sipa,2015-06-24T15:51:14Z,Untested ACK. This is one of the few places where I think boost shines.\n,https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-114922628,114922628,
sipa,2015-06-24T15:51:43Z,"It would be nice to see how much the block creation code could be sped up and simplified with this, though.\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-114922915,114922915,
ashleyholman,2015-06-27T12:06:02Z,"If this gets merged, the next thing I would look at is changing CreateNewBlock to use the indexes.\n\nBut first I need to fix the bug from #6292 because the CreateNewBlock code currently calculates priorities correctly, whereas these indexes use CTxMemPoolEntry::GetPriority which gives incorrect results.\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-116024487,116024487,
luke-jr,2015-06-27T17:46:53Z,"@ashleyholman One thing to consider is that these things are policy, so need to be easily modified by the end user - especially for miners. Obviously we're far from that with the current code, but I wouldn't want to make the situation worse (I'm not saying this PR does, but it's something to keep in mind).\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-116108233,116108233,
dgenr8,2015-07-08T18:11:47Z,"Multiple indexes are great but, the building-block for eviction policy will probably take the form of an enhanced ""priority"" calc that depends on fees, and anything else that's required.\n\nSeparate indexes leave unsolved the problem of how to combine them to find the next tx to evict.\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-119681982,119681982,
sipa,2015-07-08T18:15:03Z,It's one step towards it.\n,https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-119683191,119683191,
dgenr8,2015-07-08T18:25:18Z,"@sipa Completely agree.   At least 2 indexes are needed - txid and ""priority"".\n\nEDIT: @morcos by quoted ""priority"" I mean the same thing as ""effective fee"" or fees with fee deltas applied.  Another name for it is an _objective function_ (that which is to be maximized).\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-119689012,119689012,
morcos,2015-07-08T19:20:13Z,"Continuing to support transaction priority (as defined by coin age) seems more trouble that its worth.  However, by combining this with #6357, it'll be easy and efficient to keep the existing policies in place.  I did some timing tests on the first 7 days of July and there was some small increase in the average of 250ms to connect a block.  Calling recalcPriorities took about 2ms.  In the busy spa",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-119703575,119703575,
dgenr8,2015-07-08T21:38:17Z,"@mikehearn insight: mempool DoS attack may be mitigated through some reliance on coin age priority, as coin age is not something that can be trivially bought on the spot, unlike fee priority.\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-119739092,119739092,
ashleyholman,2015-07-09T10:50:54Z,@morcos thanks for measuring the recalcPriorities performance\n,https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-119907677,119907677,
jgarzik,2015-07-10T14:24:05Z,"Drop the priority index, IMO\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120421409,120421409,
sipa,2015-07-10T15:32:05Z,"@wumpus @jgarzik @pstratem @gmaxwell @morcos @ashleyholman @jtimon @luke-jr Ping to get attention of the people involved here.\n\nThere are a bunch of related but not quite compatible changes being made here (better indexes, limited mempool, removing priority, accounting memory usage). I think we need to figure out what to do here at a higher level.\n\n1) Remain compatible with the existing priori",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120437240,120437240,
jtimon,2015-07-10T16:00:27Z,"I think my preference is a mix between 3 and 4.\nI would prefer a single heuristic function that doesn't need to be recalculated with every block.\nMy preference: `priority(tx, utxo) = fee(tx) / (size(tx) + delta_utxo_size(tx, utxo))`\nNote that `delta_utxo_size(tx, utxo)` can be negative but `size(tx) + delta_utxo_size(tx, utxo)` shouldn't.\nIn fact, we could make a `consensus_size(tx, utxo) = si",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120444547,120444547,
sipa,2015-07-10T16:04:18Z,"@jtimon I wasn't even talking about specific policy we would like to see implemented, but rather about what type the ""framework"" should support. (3) and (4) cannot do the same thing as policy now. (4) doesn't have any policy in the mix at all for prioritization of transactions.\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120445376,120445376,
morcos,2015-07-10T16:04:44Z,"I think I'd vote for 1.  Not because I really care about keeping priority, but because I don't want the controversy of removing it to delay the other needed improvements.  I can see two downsides to 1.  There is some additional memory footprint and complication by maintaining correct priorities, but I think the efficiency hit is tolerable.  And the issue about defining ""correct"" mempool limiting. ",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120445454,120445454,
sipa,2015-07-10T16:11:46Z,"@morcos My largest objection to 1 is that it makes implementing limiting the mempool harder, and (2) can be made to do the (almost?) same thing, but needs a larger code change.\n\nI don't think we can make mempool limiting an edge case. Adjusting the relayfee works preventive, while mempool limiting works on-the-fly. \n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120447860,120447860,
jtimon,2015-07-10T16:13:22Z,"> @jtimon I wasn't even talking about specific policy we would like to see implemented, but rather about what type the ""framework"" should support.\n\nOk, then I'd like a unified `Priority(const CTransaction& tx, const CCoinsViewCache& mapInputs)` function and a single unified space: no separated space for low fee transactions. If I understood you correctly, that's the same as 3.\n\n> (3) and (4) c",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120448498,120448498,
sipa,2015-07-10T16:15:04Z,@jtimon (3) and (4) cannot update the score after acceptance into the mempool. Priority is time-dependent (needs to be recomputed after every block).\n,https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120448889,120448889,
jtimon,2015-07-10T16:21:23Z,"> @jtimon (3) and (4) cannot update the score after acceptance into the mempool.\n\nYes, that's why I said ""single heuristic function that doesn't need to be recalculated"".\n\n> Priority is time-dependent (needs to be recomputed after every block).\n\nOh, I'm talking about redefining what priority means: to a single unified heuristic for ordering transactions that takes size, fees and the change i",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120450191,120450191,
morcos,2015-07-10T16:22:55Z,"@sipa I'm trying to understand how it makes limiting the mempool harder?  Do you mean that high priority transactions might accidentally be booted?   That's the problem that I'm saying exists regardless.  If you boot by fee, then you might end up with high fee (but for some other reason unlikely to be mined) tx's sticking around in your mempool forever.  If you boot by time, then you might acciden",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120450481,120450481,
jgarzik,2015-07-10T16:40:05Z,"As I noted on IRC:  I think the current multi-index patch is fine _for the current codebase_.  It is most aligned with current code (fee, priority)\n\nThus concept ACK for as-is implementation.\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120454992,120454992,
sipa,2015-07-10T16:48:22Z,"@jtimon No, that's just 3. I guess it was just a semantics discussion.\n\nPut another way:\n(a) Do we need a separate fee area and priority area (1), or is a unified score sufficient (continue)?\n(b) Does the unified score need to be height dependent (2), or can it be computed only at mempool entrance (continue)\n(c) Does the only-once-computed score need to be policy dependent at all (3) or does ",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120456691,120456691,
jtimon,2015-07-10T17:08:25Z,"Ok, so I think the best is 3: a unified score is sufficient and it can be computed only at mempool entrance, but it needs to be a function so that we can support different policies with different scores in the future (so nack 4).\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120461921,120461921,
sipa,2015-07-10T17:23:52Z,"Ok, suggested deployment:\n- Merge this (#6331) without the priority-based index (@ashleyholman, if you agree, can you remove the priority code here?)\n- Implement block size (as in #6281) limiting using this index, using actual usage stats (#6410).\n- Generalize the feerate here to a unified policy-dependent score (effectively removing the priority as it exists today, as in #6405).\n- Implement b",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120464993,120464993,
morcos,2015-07-10T17:43:17Z,@sipa ACK for suggested deployment plan.\n,https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120475275,120475275,
jtimon,2015-07-10T18:14:16Z,"@sipa the overall plan doesn't sound bad, but some points:\nFor #6281 would CTxMemPool::removeOldTransactions work better if we introduce a time index here like morcos proposes?\n\nAlso, I think your third point ""Generalize the feerate here to a unified policy-dependent score (effectively removing the priority as it exists today, as in #6405).""\nCan be divided in 2:\n1) Replace the pure feerate in",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120483624,120483624,
ashleyholman,2015-07-11T10:34:04Z,"@sipa I have removed the priority index.  The fee-rate index previously used priority as a secondary ordering, so I have now changed that to use nTime instead.  Ie. when the fee-rate is equal, the index will favour older transactions.\n\n@jtimon I can add an index on time, but first I would like to understand the reasoning for CTxMemPool::removeOldTransactions.  I've posted a comment in #6281 to c",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120603044,120603044,
jtimon,2015-07-11T12:40:40Z,"@ashleyholman sure, that it's something that could be always added later anyway (for example, in #6281 ).\n\nWhat about replacing CompareTxMemPoolEntryByFee with something that calls an independent function instead of calling CTxMemPoolEntry::GetFeeRate() ?\nIt can be functionally identical as what you have (ie: the independent function also looks returns the feerate), but it will make it easier t",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120614499,120614499,
sipa,2015-07-11T12:45:43Z,"@jtimon You might as well just replace the feerate field in CTxMemPoolEntry with a score field, and call a policy function to compute the score when creating the entry, and then simply compare the scores. Alternatively, you definitely have to pass the CTxMemPoolEntry and not CTransaction, as you can't compute the feerate from a CTransaction.\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120614666,120614666,
petertodd,2015-07-11T13:16:56Z,"Concept ACK @sipa's unified priority ideas.\n\nDone right this should make implementing CPFP reasonably easy, as the child can have a high priority, meaning ""mine this tx, and whatever txs it depends on"" Block creation then needs to be taught to to keep a list of already included txs; if it has a list of already spent txouts we can easily implement CPFP RBF scorched-earth by simply not removing do",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120615914,120615914,
jtimon,2015-07-11T14:05:20Z,"@ashleyholman What I'm saying above, corrected and in code (on top of fad00fb7 ): https://github.com/bitcoin/bitcoin/commit/f86244ea960cb0a9fabf7c89886061034c46774b\nAlso, I think https://github.com/bitcoin/bitcoin/pull/6331/files#diff-8304b3e94624036c3673f31eeb7e9de0R83 removes the need for the time index.\n\n@sipa Yes, there were some wrong things in what I said. I decided that it would be faste",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120623510,120623510,
sipa,2015-07-11T14:09:55Z,"@jtimon I fully agree that the sorting order should be something controlled by policy. I think there are more urgent issues than that now, though.\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120624911,120624911,
sipa,2015-07-11T14:10:59Z,@ashleyholman See rebased version of this PR on top of #6410 inside #6421. \n,https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120625109,120625109,
jtimon,2015-07-11T14:17:06Z,"@sipa The point is that my proposal is functionally equivalent and almost diff-free (compared to the total PR diff) if it is done in this PR. If it is not done in this PR, it can be done later with a less clean history and more work as additional costs. In terms of git history bike-shedding, this is the perfect time and place to do this, precisely because it's almost free to do so (nothing is depe",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120625327,120625327,
sipa,2015-07-11T14:18:12Z,"@jtimon I'm sorry, but I have no time to deal with that right now.\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120625388,120625388,
ashleyholman,2015-07-11T14:43:09Z,"@jtimon looks good to me.  The only thing I wonder about is the nHeight ordering which is still inside the comparator.  I wonder if there's a nice way to move that inside the policy as well.  Maybe the comparator function has to be provided by the policy class?\n\nBTW I'm not sure how to fetch your commit down into my local repository, because github isn't telling me which repo/branch it's from.\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120626618,120626618,
jtimon,2015-07-11T14:52:36Z,"Since @sipa is worried that introducing policy may slow this down, here's an even simpler fixup commit ( https://github.com/bitcoin/bitcoin/commit/1bae6755ade6a4158477fcb19ef6af70f9704fd7 ) that would solve my concerns, which I will try to summarize.\nI'm fine with using the feeRate alone as the heuristics/score for the new index, but let's not get married to it, we don't know what the score will ",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120626988,120626988,
petertodd,2015-07-11T15:01:01Z,"Keep in mind that some of @sipa's fixes may wind up getting backported  to v0.10.x as a emergency hot fix, so it pays to keep them as minimal as possible.\n\nOn 11 July 2015 10:53:14 GMT-04:00, ""Jorge Timón"" notifications@github.com wrote:\n\n> Since @sipa is worried that introducing policy may slow this down,\n> here's an even simpler fixup commit (\n> https://github.com/bitcoin/bitcoin/commit/1b",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120627646,120627646,
jtimon,2015-07-11T15:05:11Z,"@petertodd I believe my current suggestion is very minimal and portable (no less than the current PR, since it only adds a single-line function that can be easily pasted in previous versions).\nMy suggestion isn't actually not functionally equivalent but superior: the PR as it stands is ~~dividing~~multiplying the score by 1000 for no good reason.\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120627819,120627819,
petertodd,2015-07-11T15:07:46Z,"Sure, so make it a separate pull-req to make that easy to evaluate; easier to cherry pick if its separate.\n\nOn 11 July 2015 11:05:50 GMT-04:00, ""Jorge Timón"" notifications@github.com wrote:\n\n> @petertodd I believe my current suggestion is very minimal and portable\n> (no less than the current PR, since it only adds a single-line function\n> that can be easily pasted in previous versions).\n> M",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120627951,120627951,
jtimon,2015-07-11T15:08:35Z,"@petertodd No, it is better to cherry pick this one if ashleyholman squashes my commit.\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120627989,120627989,
sipa,2015-07-11T15:09:45Z,"@jtimon The code in that commit looks perfectly fine to me, but I don't think there's a benefit to including it now.\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120628033,120628033,
jtimon,2015-07-11T15:14:32Z,"@sipa the only benefit is that it won't have to be introduced in the future (when it won't be free total-diff-of-this-PR-wise [well, it's actually +4 for the new function but ""just now"" is as cheap as it can get diff-wise]).\nWhat is the disadvantage? That's totally what I'm missing.\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120629695,120629695,
jtimon,2015-07-11T15:31:54Z,"IMO the question is why would CTxMemPoolEntry::feeRate ever need to be replaced by CTxMemPoolEntry::nScore if CTxMemPoolEntry::feeRate hasn't been introduced yet, forget about the independent function if you want:\n\n```\n    nScore = _nFee / nTxSize;\n```\n\nor even (to be fully-funcationally equivalent to the current PR)\n\n```\n    nScore = _nFee * 1000 / nTxSize;\n```\n\nis enough for me: full",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120634244,120634244,
jtimon,2015-07-11T16:12:06Z,Nits commit rebased.\n,https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120636401,120636401,
ashleyholman,2015-07-11T21:25:38Z,"@jtimon I see your point, but I think that keeping each patch understandable and isolated is just as important as minimizing the lines changed.\n\nThis patch is more readable if it is just introducing an index on fee rate without trying to genericize the policy at the same time.  A future patch could externalize the policy while introducing the score variable(s).\n",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120662462,120662462,
jtimon,2015-07-11T21:38:05Z,"@ashleyholman The code (that doesn't contain anything related to policy) is here https://github.com/jtimon/bitcoin/commits/pr-6331-0.11.99\n\n@sipa whatever call it nRevenueScore instead of nScore or even feeRate, but there's not reason to use CFeeRate instead of int64_t.\nWhat is the disadvantage of using int64_t instead of CFeeRate. Or, what is the advantage of doing the opposite?\n\nThe main ad",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120662917,120662917,
mikehearn,2015-07-14T12:23:07Z,"Priority cannot be removed without breaking things for current users and programs that rely on it. In particular, priority is the main reason that a transaction that undershoots on fee will still confirm eventually, which lends significant robustness. And priority is probably very useful for ensuring that at least some legitimate transactions confirm even if someone is burning fee money to flood t",https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-121221282,121221282,
ashleyholman,2015-07-14T13:12:26Z,This work has been rolled into #6421 so I'll close this off now.\n,https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-121234366,121234366,
sipa,2015-06-24T15:42:29Z,Indentation style is 4 spaces per level.\n,https://github.com/bitcoin/bitcoin/pull/6331#discussion_r33161485,33161485,src/test/mempool_tests.cpp
sipa,2015-06-24T15:53:07Z,"I think we want to know priorities aimed for the next block's height, as that is where the transactions are expected to end up.\n",https://github.com/bitcoin/bitcoin/pull/6331#discussion_r33162696,33162696,src/main.cpp
sipa,2015-06-24T15:56:46Z,"Nit: I think that over time we will want this to be primarily a non-ordered set (because hash-based lookups are faster). Something like transaction_map or indexed_transaction_map would maybe be more appropriate? Maybe define it inside CTxMempool, so it is more clearly scoped.\n",https://github.com/bitcoin/bitcoin/pull/6331#discussion_r33163140,33163140,src/txmempool.h
ashleyholman,2015-06-24T18:51:35Z,For the unordered index I need a hash function for uint256 because the build fails when it defaults to `boost::hash<uint256>`.  I think you mentioned to me before about some existing code that does this and prevents a dos case - where do I find that function?\n,https://github.com/bitcoin/bitcoin/pull/6331#discussion_r33182254,33182254,src/txmempool.h
sipa,2015-06-24T18:53:22Z,"Don't bother about that now.\n\nI just mean that an ""unordered transaction set"" is not what this intends to function as. It's just how the current implementation works.\n\nAs I said, a nit.\n",https://github.com/bitcoin/bitcoin/pull/6331#discussion_r33182418,33182418,src/txmempool.h
ashleyholman,2015-06-24T19:03:58Z,What about indexed_transaction_set since the indexes have a set-like interface?\n,https://github.com/bitcoin/bitcoin/pull/6331#discussion_r33183459,33183459,src/txmempool.h
sipa,2015-06-26T11:09:09Z,Sounds good to me.\n,https://github.com/bitcoin/bitcoin/pull/6331#discussion_r33346732,33346732,src/txmempool.h
morcos,2015-06-26T17:58:03Z,"@sipa, wouldn't it be better to go ahead and make that change now?  We're looking up transactions by hash in the mempool all the time (for instance `CCoinsViewMemPool::GetCoins`).  I'm not sure what the efficiency difference is, but given that its currently a hash lookup, its probably not something we should make slower.\n",https://github.com/bitcoin/bitcoin/pull/6331#discussion_r33379346,33379346,src/txmempool.h
morcos,2015-06-26T19:02:08Z,"oops, silly me..  std::map is ordered\n",https://github.com/bitcoin/bitcoin/pull/6331#discussion_r33385453,33385453,src/txmempool.h
sipa,2015-06-26T19:13:13Z,"It is nontrivial to make boost::multi_index_container work with salted hash\nfunctions (you want to avoid the ability for network players to produce\ntransactions that collide in the hashtable). I've tried myself, so I think\nit's reasonable to first get this in without. One of the advantages of\nboost::multi_index_container is that changing the indexes should be easy.\n",https://github.com/bitcoin/bitcoin/pull/6331#discussion_r33386474,33386474,src/txmempool.h
ashleyholman,2015-06-27T12:00:14Z,Fixed in latest commit\n,https://github.com/bitcoin/bitcoin/pull/6331#discussion_r33412259,33412259,src/test/mempool_tests.cpp
ashleyholman,2015-06-27T12:01:25Z,"Fixed in latest commit.  Also moved the recalcPriorities call to happen after UpdateTip(), because I didn't think the priority recalc was important enough to delay updating the tip.\n",https://github.com/bitcoin/bitcoin/pull/6331#discussion_r33412267,33412267,src/main.cpp
ashleyholman,2015-06-27T12:02:47Z,I've now renamed it to CTxMemPool::indexed_transaction_set in my latest commit.\n,https://github.com/bitcoin/bitcoin/pull/6331#discussion_r33412276,33412276,src/txmempool.h
