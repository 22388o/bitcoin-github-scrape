[
  {
    "sha": "f27cd7ed6d6bbe242a64ecabf581edd498bc65e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjdjZDdlZDZkNmJiZTI0MmE2NGVjYWJmNTgxZWRkNDk4YmM2NWU3",
    "commit": {
      "author": {
        "name": "Ashley Holman",
        "email": "dscvlt@gmail.com",
        "date": "2015-06-24T08:32:20Z"
      },
      "committer": {
        "name": "Ashley Holman",
        "email": "dscvlt@gmail.com",
        "date": "2015-06-24T08:57:50Z"
      },
      "message": "TxMemPool: Change mapTx to a boost::multi_index_container\n\nIndexes on:\n- Tx Hash\n- Fee Rate (fee-per-kb)\n- Priority (at current chain height)",
      "tree": {
        "sha": "ba935c5ea11cd2ffbe98d083934796fad0ee3a22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba935c5ea11cd2ffbe98d083934796fad0ee3a22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7/comments",
    "author": {
      "login": "ashleyholman",
      "id": 549484,
      "node_id": "MDQ6VXNlcjU0OTQ4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/549484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ashleyholman",
      "html_url": "https://github.com/ashleyholman",
      "followers_url": "https://api.github.com/users/ashleyholman/followers",
      "following_url": "https://api.github.com/users/ashleyholman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ashleyholman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ashleyholman/subscriptions",
      "organizations_url": "https://api.github.com/users/ashleyholman/orgs",
      "repos_url": "https://api.github.com/users/ashleyholman/repos",
      "events_url": "https://api.github.com/users/ashleyholman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ashleyholman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ashleyholman",
      "id": 549484,
      "node_id": "MDQ6VXNlcjU0OTQ4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/549484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ashleyholman",
      "html_url": "https://github.com/ashleyholman",
      "followers_url": "https://api.github.com/users/ashleyholman/followers",
      "following_url": "https://api.github.com/users/ashleyholman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ashleyholman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ashleyholman/subscriptions",
      "organizations_url": "https://api.github.com/users/ashleyholman/orgs",
      "repos_url": "https://api.github.com/users/ashleyholman/repos",
      "events_url": "https://api.github.com/users/ashleyholman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ashleyholman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91389e51c78ae3565b037e31dd5382b52bd75136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91389e51c78ae3565b037e31dd5382b52bd75136",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91389e51c78ae3565b037e31dd5382b52bd75136"
      }
    ],
    "stats": {
      "total": 213,
      "additions": 182,
      "deletions": 31
    },
    "files": [
      {
        "sha": "602a299bc1decabe8714c960501544646e04b837",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f27cd7ed6d6bbe242a64ecabf581edd498bc65e7",
        "patch": "@@ -2155,6 +2155,7 @@ bool static DisconnectTip(CValidationState &state) {\n             mempool.remove(tx, removed, true);\n     }\n     mempool.removeCoinbaseSpends(pcoinsTip, pindexDelete->nHeight);\n+    mempool.recalcPriorities(pindexDelete->pprev->nHeight);\n     mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n@@ -2216,6 +2217,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     // Remove conflicting transactions from the mempool.\n     list<CTransaction> txConflicted;\n     mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, txConflicted, !IsInitialBlockDownload());\n+    mempool.recalcPriorities(pindexNew->nHeight);\n     mempool.check(pcoinsTip);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew);"
      },
      {
        "sha": "ae7a19a263de1b43e9f9569068d07009f08ed300",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=f27cd7ed6d6bbe242a64ecabf581edd498bc65e7",
        "patch": "@@ -15,6 +15,7 @@\n #include \"pow.h\"\n #include \"primitives/transaction.h\"\n #include \"timedata.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #ifdef ENABLE_WALLET\n@@ -149,10 +150,10 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         // This vector will be sorted into a priority queue:\n         vector<TxPriority> vecPriority;\n         vecPriority.reserve(mempool.mapTx.size());\n-        for (map<uint256, CTxMemPoolEntry>::iterator mi = mempool.mapTx.begin();\n+        for (ordered_transaction_set::iterator mi = mempool.mapTx.begin();\n              mi != mempool.mapTx.end(); ++mi)\n         {\n-            const CTransaction& tx = mi->second.GetTx();\n+            const CTransaction& tx = mi->GetTx();\n             if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, pblock->nTime))\n                 continue;\n \n@@ -187,7 +188,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                     }\n                     mapDependers[txin.prevout.hash].push_back(porphan);\n                     porphan->setDependsOn.insert(txin.prevout.hash);\n-                    nTotalIn += mempool.mapTx[txin.prevout.hash].GetTx().vout[txin.prevout.n].nValue;\n+                    nTotalIn += mempool.mapTx.find(txin.prevout.hash)->GetTx().vout[txin.prevout.n].nValue;\n                     continue;\n                 }\n                 const CCoins* coins = view.AccessCoins(txin.prevout.hash);\n@@ -217,7 +218,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                 porphan->feeRate = feeRate;\n             }\n             else\n-                vecPriority.push_back(TxPriority(dPriority, feeRate, &mi->second.GetTx()));\n+                vecPriority.push_back(TxPriority(dPriority, feeRate, &(mi->GetTx())));\n         }\n \n         // Collect transactions into block"
      },
      {
        "sha": "408667c814b9b057db9774db54ca88d60072b178",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=f27cd7ed6d6bbe242a64ecabf581edd498bc65e7",
        "patch": "@@ -187,10 +187,9 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n     {\n         LOCK(mempool.cs);\n         UniValue o(UniValue::VOBJ);\n-        BOOST_FOREACH(const PAIRTYPE(uint256, CTxMemPoolEntry)& entry, mempool.mapTx)\n+        BOOST_FOREACH(const CTxMemPoolEntry& e, mempool.mapTx)\n         {\n-            const uint256& hash = entry.first;\n-            const CTxMemPoolEntry& e = entry.second;\n+            const uint256& hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n             info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));"
      },
      {
        "sha": "edaed2134f37e036a794ddd6af0f6f9aee1b95fa",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=f27cd7ed6d6bbe242a64ecabf581edd498bc65e7",
        "patch": "@@ -101,4 +101,67 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     removed.clear();\n }\n \n+BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n+{\n+  CTxMemPool pool(CFeeRate(0));\n+\n+  /* 3rd highest fee, 2nd highest priority */\n+  CMutableTransaction tx1 = CMutableTransaction();\n+  tx1.vout.resize(1);\n+  tx1.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+  tx1.vout[0].nValue = 10 * COIN;\n+  pool.addUnchecked(tx1.GetHash(), CTxMemPoolEntry(tx1, 10000LL, 0, 10.0, 1, true));\n+\n+  /* highest fee, 3rd highest priority */\n+  CMutableTransaction tx2 = CMutableTransaction();\n+  tx2.vout.resize(1);\n+  tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+  tx2.vout[0].nValue = 2 * COIN;\n+  pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 20000LL, 0, 9.0, 1, true));\n+\n+  /* lowest fee, highest priority */\n+  CMutableTransaction tx3 = CMutableTransaction();\n+  tx3.vout.resize(1);\n+  tx3.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+  tx3.vout[0].nValue = 5 * COIN;\n+  pool.addUnchecked(tx3.GetHash(), CTxMemPoolEntry(tx3, 0LL, 0, 100.0, 1, true));\n+\n+  /* 2nd highest fee, lowest priority */\n+  CMutableTransaction tx4 = CMutableTransaction();\n+  tx4.vout.resize(1);\n+  tx4.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+  tx4.vout[0].nValue = 6 * COIN;\n+  pool.addUnchecked(tx4.GetHash(), CTxMemPoolEntry(tx4, 15000LL, 0, 1.0, 1, true));\n+\n+  // there should be 4 transactions in the mempool\n+  BOOST_CHECK_EQUAL(pool.size(), 4);\n+\n+  // Check the fee-rate index is in order, should be tx2, tx4, tx1, tx3\n+  ordered_transaction_set::nth_index<1>::type::iterator it = pool.mapTx.get<1>().begin();\n+  BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx2.GetHash().ToString());\n+  BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx4.GetHash().ToString());\n+  BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx1.GetHash().ToString());\n+  BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx3.GetHash().ToString());\n+  BOOST_CHECK(it == pool.mapTx.get<1>().end());\n+\n+  // Check the priority index is in order, should be tx3, tx1, tx2, tx4\n+  ordered_transaction_set::nth_index<2>::type::iterator it2 = pool.mapTx.get<2>().begin();\n+  BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx3.GetHash().ToString());\n+  BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx1.GetHash().ToString());\n+  BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx2.GetHash().ToString());\n+  BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx4.GetHash().ToString());\n+  BOOST_CHECK(it2 == pool.mapTx.get<2>().end());\n+\n+  // Now advance the height of the mempool by 1 block\n+  pool.recalcPriorities(2);\n+\n+  // Check the priority index has been adjusted.  Should be tx1, tx4, tx3, tx2\n+  ordered_transaction_set::nth_index<2>::type::iterator it3 = pool.mapTx.get<2>().begin();\n+  BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx1.GetHash().ToString());\n+  BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx4.GetHash().ToString());\n+  BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx3.GetHash().ToString());\n+  BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx2.GetHash().ToString());\n+  BOOST_CHECK(it3 == pool.mapTx.get<2>().end());\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "48e460582ca4a41935643bb0d93ff7799964a39e",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 23,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f27cd7ed6d6bbe242a64ecabf581edd498bc65e7",
        "patch": "@@ -18,19 +18,22 @@\n using namespace std;\n \n CTxMemPoolEntry::CTxMemPoolEntry():\n-    nFee(0), nTxSize(0), nModSize(0), nTime(0), dPriority(0.0), hadNoDependencies(false)\n+    nFee(0), nTxSize(0), nModSize(0), nTime(0), dPriority(0.0),\n+    dCurrentPriority(0.0), hadNoDependencies(false)\n {\n     nHeight = MEMPOOL_HEIGHT;\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _dPriority,\n                                  unsigned int _nHeight, bool poolHasNoInputsOf):\n-    tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority), nHeight(_nHeight),\n+    tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority),\n+    dCurrentPriority(_dPriority), nHeight(_nHeight),\n     hadNoDependencies(poolHasNoInputsOf)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n+    feeRate = CFeeRate(nFee, nTxSize);\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -95,8 +98,8 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     // Used by main.cpp AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n     LOCK(cs);\n-    mapTx[hash] = entry;\n-    const CTransaction& tx = mapTx[hash].GetTx();\n+    mapTx.insert(entry);\n+    const CTransaction& tx = mapTx.find(hash)->GetTx();\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n         mapNextTx[tx.vin[i].prevout] = CInPoint(&tx, i);\n     nTransactionsUpdated++;\n@@ -107,6 +110,29 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n }\n \n \n+struct update_priority\n+{\n+    update_priority (unsigned int h) : height(h) {}\n+\n+    void operator() (CTxMemPoolEntry &e)\n+    {\n+        e.recalcCurrentPriority(height);\n+    }\n+private:\n+    unsigned int height;\n+};\n+\n+void CTxMemPool::recalcPriorities(unsigned int nBlockHeight)\n+{\n+    LOCK(cs);\n+    for (ordered_transaction_set::nth_index<0>::type::iterator it = mapTx.begin();\n+         it != mapTx.end(); it++)\n+    {\n+        mapTx.modify(it, update_priority(nBlockHeight));\n+    }\n+}\n+\n+\n void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& removed, bool fRecursive)\n {\n     // Remove transaction from memory pool\n@@ -132,7 +158,7 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n             txToRemove.pop_front();\n             if (!mapTx.count(hash))\n                 continue;\n-            const CTransaction& tx = mapTx[hash].GetTx();\n+            const CTransaction& tx = mapTx.find(hash)->GetTx();\n             if (fRecursive) {\n                 for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                     std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n@@ -145,7 +171,7 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n                 mapNextTx.erase(txin.prevout);\n \n             removed.push_back(tx);\n-            totalTxSize -= mapTx[hash].GetTxSize();\n+            totalTxSize -= mapTx.find(hash)->GetTxSize();\n             mapTx.erase(hash);\n             nTransactionsUpdated++;\n             minerPolicyEstimator->removeTx(hash);\n@@ -158,10 +184,10 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n     // Remove transactions spending a coinbase which are now immature\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n-    for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n-        const CTransaction& tx = it->second.GetTx();\n+    for (ordered_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+        const CTransaction& tx = it->GetTx();\n         BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-            std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+            ordered_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end())\n                 continue;\n             const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n@@ -206,8 +232,10 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n     {\n         uint256 hash = tx.GetHash();\n-        if (mapTx.count(hash))\n-            entries.push_back(mapTx[hash]);\n+\n+        ordered_transaction_set::iterator i = mapTx.find(hash);\n+        if (i != mapTx.end())\n+            entries.push_back(*i);\n     }\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n     {\n@@ -242,16 +270,16 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n     LOCK(cs);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n-    for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (ordered_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n-        checkTotal += it->second.GetTxSize();\n-        const CTransaction& tx = it->second.GetTx();\n+        checkTotal += it->GetTxSize();\n+        const CTransaction& tx = it->GetTx();\n         bool fDependsWait = false;\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n-            std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+            ordered_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {\n-                const CTransaction& tx2 = it2->second.GetTx();\n+                const CTransaction& tx2 = it2->GetTx();\n                 assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n                 fDependsWait = true;\n             } else {\n@@ -266,7 +294,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             i++;\n         }\n         if (fDependsWait)\n-            waitingOnDependants.push_back(&it->second);\n+            waitingOnDependants.push_back(&(*it));\n         else {\n             CValidationState state;\n             assert(CheckInputs(tx, state, mempoolDuplicate, false, 0, false, NULL));\n@@ -290,8 +318,8 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     }\n     for (std::map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); it++) {\n         uint256 hash = it->second.ptx->GetHash();\n-        map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(hash);\n-        const CTransaction& tx = it2->second.GetTx();\n+        ordered_transaction_set::const_iterator it2 = mapTx.find(hash);\n+        const CTransaction& tx = it2->GetTx();\n         assert(it2 != mapTx.end());\n         assert(&tx == it->second.ptx);\n         assert(tx.vin.size() > it->second.n);\n@@ -307,16 +335,16 @@ void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n \n     LOCK(cs);\n     vtxid.reserve(mapTx.size());\n-    for (map<uint256, CTxMemPoolEntry>::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n-        vtxid.push_back((*mi).first);\n+    for (ordered_transaction_set::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n+        vtxid.push_back(mi->GetTx().GetHash());\n }\n \n bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n {\n     LOCK(cs);\n-    map<uint256, CTxMemPoolEntry>::const_iterator i = mapTx.find(hash);\n+    ordered_transaction_set::const_iterator i = mapTx.find(hash);\n     if (i == mapTx.end()) return false;\n-    result = i->second.GetTx();\n+    result = i->GetTx();\n     return true;\n }\n "
      },
      {
        "sha": "a94ed1e0c54224eabc447b440d80c47e6644963c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 59,
        "deletions": 1,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=f27cd7ed6d6bbe242a64ecabf581edd498bc65e7",
        "patch": "@@ -12,6 +12,8 @@\n #include \"coins.h\"\n #include \"primitives/transaction.h\"\n #include \"sync.h\"\n+#include \"boost/multi_index_container.hpp\"\n+#include \"boost/multi_index/ordered_index.hpp\"\n \n class CAutoFile;\n \n@@ -40,8 +42,10 @@ class CTxMemPoolEntry\n     CAmount nFee; //! Cached to avoid expensive parent-transaction lookups\n     size_t nTxSize; //! ... and avoid recomputing tx size\n     size_t nModSize; //! ... and modified size for priority\n+    CFeeRate feeRate; //! ... and fee per kB\n     int64_t nTime; //! Local time when entering the mempool\n     double dPriority; //! Priority when entering the mempool\n+    double dCurrentPriority; //! Priority at next block height\n     unsigned int nHeight; //! Chain height when entering the mempool\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n \n@@ -53,13 +57,66 @@ class CTxMemPoolEntry\n \n     const CTransaction& GetTx() const { return this->tx; }\n     double GetPriority(unsigned int currentHeight) const;\n+    double GetCurrentPriority() const { return dCurrentPriority; }\n     CAmount GetFee() const { return nFee; }\n+    CFeeRate GetFeeRate() const { return feeRate; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n+    void recalcCurrentPriority (unsigned int height) { dCurrentPriority = GetPriority(height); }\n };\n \n+// extracts a TxMemPoolEntry's transaction hash\n+struct mempoolentry_txid\n+{\n+    typedef uint256 result_type;\n+    result_type operator() (const CTxMemPoolEntry &entry) const\n+    {\n+        return entry.GetTx().GetHash();\n+    }\n+};\n+\n+class CompareTxMemPoolEntryByPriority\n+{\n+public:\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    {\n+        if (a.GetCurrentPriority() == b.GetCurrentPriority())\n+            return a.GetFeeRate() > b.GetFeeRate();\n+        return a.GetCurrentPriority() > b.GetCurrentPriority();\n+    }\n+};\n+\n+class CompareTxMemPoolEntryByFee\n+{\n+public:\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    {\n+        if (a.GetFeeRate() == b.GetFeeRate())\n+            return a.GetCurrentPriority() > b.GetCurrentPriority();\n+        return a.GetFeeRate() > b.GetFeeRate();\n+    }\n+};\n+\n+typedef boost::multi_index_container<\n+    CTxMemPoolEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by txid\n+        boost::multi_index::ordered_unique<mempoolentry_txid>,\n+        // sorted by fee rate\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::identity<CTxMemPoolEntry>,\n+            CompareTxMemPoolEntryByFee\n+        >,\n+        // sorted by priority\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::identity<CTxMemPoolEntry>,\n+            CompareTxMemPoolEntryByPriority\n+        >\n+    >\n+> ordered_transaction_set;\n+\n class CBlockPolicyEstimator;\n \n /** An inpoint - a combination of a transaction and an index n into its vin */\n@@ -96,7 +153,7 @@ class CTxMemPool\n \n public:\n     mutable CCriticalSection cs;\n-    std::map<uint256, CTxMemPoolEntry> mapTx;\n+    ordered_transaction_set mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n     std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n \n@@ -121,6 +178,7 @@ class CTxMemPool\n     void clear();\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);\n+    void recalcPriorities(unsigned int nBlockHeight);\n     unsigned int GetTransactionsUpdated() const;\n     void AddTransactionsUpdated(unsigned int n);\n     /**"
      }
    ]
  },
  {
    "sha": "362bf769edc6f15495a78461902d54d649c83c08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjJiZjc2OWVkYzZmMTU0OTVhNzg0NjE5MDJkNTRkNjQ5YzgzYzA4",
    "commit": {
      "author": {
        "name": "Ashley Holman",
        "email": "dscvlt@gmail.com",
        "date": "2015-06-27T11:56:51Z"
      },
      "committer": {
        "name": "Ashley Holman",
        "email": "dscvlt@gmail.com",
        "date": "2015-06-27T11:56:51Z"
      },
      "message": "Code review fixups:\n\n- Rename ordered_transaction_set to indexed_transaction_set and move typedef\n  inside CTxMemPool\n- Use chain height + 1 for mempool priority calculation (also moved the\n  calculation to happen after updating the tip, so it doesn't delay the block\n  being added to the active chain)\n- Fix indentation of test case",
      "tree": {
        "sha": "08725ca8d9153205654d66d7933ff1b5efca5f38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08725ca8d9153205654d66d7933ff1b5efca5f38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/362bf769edc6f15495a78461902d54d649c83c08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/362bf769edc6f15495a78461902d54d649c83c08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/362bf769edc6f15495a78461902d54d649c83c08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/362bf769edc6f15495a78461902d54d649c83c08/comments",
    "author": {
      "login": "ashleyholman",
      "id": 549484,
      "node_id": "MDQ6VXNlcjU0OTQ4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/549484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ashleyholman",
      "html_url": "https://github.com/ashleyholman",
      "followers_url": "https://api.github.com/users/ashleyholman/followers",
      "following_url": "https://api.github.com/users/ashleyholman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ashleyholman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ashleyholman/subscriptions",
      "organizations_url": "https://api.github.com/users/ashleyholman/orgs",
      "repos_url": "https://api.github.com/users/ashleyholman/repos",
      "events_url": "https://api.github.com/users/ashleyholman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ashleyholman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ashleyholman",
      "id": 549484,
      "node_id": "MDQ6VXNlcjU0OTQ4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/549484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ashleyholman",
      "html_url": "https://github.com/ashleyholman",
      "followers_url": "https://api.github.com/users/ashleyholman/followers",
      "following_url": "https://api.github.com/users/ashleyholman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ashleyholman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ashleyholman/subscriptions",
      "organizations_url": "https://api.github.com/users/ashleyholman/orgs",
      "repos_url": "https://api.github.com/users/ashleyholman/repos",
      "events_url": "https://api.github.com/users/ashleyholman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ashleyholman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f27cd7ed6d6bbe242a64ecabf581edd498bc65e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f27cd7ed6d6bbe242a64ecabf581edd498bc65e7"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 92,
      "deletions": 90
    },
    "files": [
      {
        "sha": "7b122271dab30b879e43c4760dd2b12d39bbe55f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362bf769edc6f15495a78461902d54d649c83c08/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362bf769edc6f15495a78461902d54d649c83c08/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=362bf769edc6f15495a78461902d54d649c83c08",
        "patch": "@@ -2155,10 +2155,11 @@ bool static DisconnectTip(CValidationState &state) {\n             mempool.remove(tx, removed, true);\n     }\n     mempool.removeCoinbaseSpends(pcoinsTip, pindexDelete->nHeight);\n-    mempool.recalcPriorities(pindexDelete->pprev->nHeight);\n     mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n+    // Recalculate priorities of mempool transactions\n+    mempool.recalcPriorities(pindexDelete->nHeight);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n@@ -2217,10 +2218,11 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     // Remove conflicting transactions from the mempool.\n     list<CTransaction> txConflicted;\n     mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, txConflicted, !IsInitialBlockDownload());\n-    mempool.recalcPriorities(pindexNew->nHeight);\n     mempool.check(pcoinsTip);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew);\n+    // Recalculate priorities of mempool transactions\n+    mempool.recalcPriorities(pindexNew->nHeight+1);\n     // Tell wallet about transactions that went from mempool\n     // to conflicted:\n     BOOST_FOREACH(const CTransaction &tx, txConflicted) {"
      },
      {
        "sha": "d323692934e54d34f3970e5df1655649975f25c3",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362bf769edc6f15495a78461902d54d649c83c08/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362bf769edc6f15495a78461902d54d649c83c08/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=362bf769edc6f15495a78461902d54d649c83c08",
        "patch": "@@ -150,7 +150,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         // This vector will be sorted into a priority queue:\n         vector<TxPriority> vecPriority;\n         vecPriority.reserve(mempool.mapTx.size());\n-        for (ordered_transaction_set::iterator mi = mempool.mapTx.begin();\n+        for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n              mi != mempool.mapTx.end(); ++mi)\n         {\n             const CTransaction& tx = mi->GetTx();"
      },
      {
        "sha": "261b0bcf59aa6e41805e24f8304211affed24f83",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 59,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362bf769edc6f15495a78461902d54d649c83c08/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362bf769edc6f15495a78461902d54d649c83c08/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=362bf769edc6f15495a78461902d54d649c83c08",
        "patch": "@@ -103,65 +103,65 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n \n BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n {\n-  CTxMemPool pool(CFeeRate(0));\n-\n-  /* 3rd highest fee, 2nd highest priority */\n-  CMutableTransaction tx1 = CMutableTransaction();\n-  tx1.vout.resize(1);\n-  tx1.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n-  tx1.vout[0].nValue = 10 * COIN;\n-  pool.addUnchecked(tx1.GetHash(), CTxMemPoolEntry(tx1, 10000LL, 0, 10.0, 1, true));\n-\n-  /* highest fee, 3rd highest priority */\n-  CMutableTransaction tx2 = CMutableTransaction();\n-  tx2.vout.resize(1);\n-  tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n-  tx2.vout[0].nValue = 2 * COIN;\n-  pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 20000LL, 0, 9.0, 1, true));\n-\n-  /* lowest fee, highest priority */\n-  CMutableTransaction tx3 = CMutableTransaction();\n-  tx3.vout.resize(1);\n-  tx3.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n-  tx3.vout[0].nValue = 5 * COIN;\n-  pool.addUnchecked(tx3.GetHash(), CTxMemPoolEntry(tx3, 0LL, 0, 100.0, 1, true));\n-\n-  /* 2nd highest fee, lowest priority */\n-  CMutableTransaction tx4 = CMutableTransaction();\n-  tx4.vout.resize(1);\n-  tx4.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n-  tx4.vout[0].nValue = 6 * COIN;\n-  pool.addUnchecked(tx4.GetHash(), CTxMemPoolEntry(tx4, 15000LL, 0, 1.0, 1, true));\n-\n-  // there should be 4 transactions in the mempool\n-  BOOST_CHECK_EQUAL(pool.size(), 4);\n-\n-  // Check the fee-rate index is in order, should be tx2, tx4, tx1, tx3\n-  ordered_transaction_set::nth_index<1>::type::iterator it = pool.mapTx.get<1>().begin();\n-  BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx2.GetHash().ToString());\n-  BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx4.GetHash().ToString());\n-  BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx1.GetHash().ToString());\n-  BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx3.GetHash().ToString());\n-  BOOST_CHECK(it == pool.mapTx.get<1>().end());\n-\n-  // Check the priority index is in order, should be tx3, tx1, tx2, tx4\n-  ordered_transaction_set::nth_index<2>::type::iterator it2 = pool.mapTx.get<2>().begin();\n-  BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx3.GetHash().ToString());\n-  BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx1.GetHash().ToString());\n-  BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx2.GetHash().ToString());\n-  BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx4.GetHash().ToString());\n-  BOOST_CHECK(it2 == pool.mapTx.get<2>().end());\n-\n-  // Now advance the height of the mempool by 1 block\n-  pool.recalcPriorities(2);\n-\n-  // Check the priority index has been adjusted.  Should be tx1, tx4, tx3, tx2\n-  ordered_transaction_set::nth_index<2>::type::iterator it3 = pool.mapTx.get<2>().begin();\n-  BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx1.GetHash().ToString());\n-  BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx4.GetHash().ToString());\n-  BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx3.GetHash().ToString());\n-  BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx2.GetHash().ToString());\n-  BOOST_CHECK(it3 == pool.mapTx.get<2>().end());\n+    CTxMemPool pool(CFeeRate(0));\n+\n+    /* 3rd highest fee, 2nd highest priority */\n+    CMutableTransaction tx1 = CMutableTransaction();\n+    tx1.vout.resize(1);\n+    tx1.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+    tx1.vout[0].nValue = 10 * COIN;\n+    pool.addUnchecked(tx1.GetHash(), CTxMemPoolEntry(tx1, 10000LL, 0, 10.0, 1, true));\n+\n+    /* highest fee, 3rd highest priority */\n+    CMutableTransaction tx2 = CMutableTransaction();\n+    tx2.vout.resize(1);\n+    tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+    tx2.vout[0].nValue = 2 * COIN;\n+    pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 20000LL, 0, 9.0, 1, true));\n+\n+    /* lowest fee, highest priority */\n+    CMutableTransaction tx3 = CMutableTransaction();\n+    tx3.vout.resize(1);\n+    tx3.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+    tx3.vout[0].nValue = 5 * COIN;\n+    pool.addUnchecked(tx3.GetHash(), CTxMemPoolEntry(tx3, 0LL, 0, 100.0, 1, true));\n+\n+    /* 2nd highest fee, lowest priority */\n+    CMutableTransaction tx4 = CMutableTransaction();\n+    tx4.vout.resize(1);\n+    tx4.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+    tx4.vout[0].nValue = 6 * COIN;\n+    pool.addUnchecked(tx4.GetHash(), CTxMemPoolEntry(tx4, 15000LL, 0, 1.0, 1, true));\n+\n+    // there should be 4 transactions in the mempool\n+    BOOST_CHECK_EQUAL(pool.size(), 4);\n+\n+    // Check the fee-rate index is in order, should be tx2, tx4, tx1, tx3\n+    CTxMemPool::indexed_transaction_set::nth_index<1>::type::iterator it = pool.mapTx.get<1>().begin();\n+    BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx2.GetHash().ToString());\n+    BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx4.GetHash().ToString());\n+    BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx1.GetHash().ToString());\n+    BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx3.GetHash().ToString());\n+    BOOST_CHECK(it == pool.mapTx.get<1>().end());\n+\n+    // Check the priority index is in order, should be tx3, tx1, tx2, tx4\n+    CTxMemPool::indexed_transaction_set::nth_index<2>::type::iterator it2 = pool.mapTx.get<2>().begin();\n+    BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx3.GetHash().ToString());\n+    BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx1.GetHash().ToString());\n+    BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx2.GetHash().ToString());\n+    BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx4.GetHash().ToString());\n+    BOOST_CHECK(it2 == pool.mapTx.get<2>().end());\n+\n+    // Now advance the height of the mempool by 1 block\n+    pool.recalcPriorities(2);\n+\n+    // Check the priority index has been adjusted.  Should be tx1, tx4, tx3, tx2\n+    CTxMemPool::indexed_transaction_set::nth_index<2>::type::iterator it3 = pool.mapTx.get<2>().begin();\n+    BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx1.GetHash().ToString());\n+    BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx4.GetHash().ToString());\n+    BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx3.GetHash().ToString());\n+    BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx2.GetHash().ToString());\n+    BOOST_CHECK(it3 == pool.mapTx.get<2>().end());\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "9680da7b54021ca8b486321aef13ffde01fdcbec",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362bf769edc6f15495a78461902d54d649c83c08/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362bf769edc6f15495a78461902d54d649c83c08/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=362bf769edc6f15495a78461902d54d649c83c08",
        "patch": "@@ -125,7 +125,7 @@ struct update_priority\n void CTxMemPool::recalcPriorities(unsigned int nBlockHeight)\n {\n     LOCK(cs);\n-    for (ordered_transaction_set::nth_index<0>::type::iterator it = mapTx.begin();\n+    for (indexed_transaction_set::nth_index<0>::type::iterator it = mapTx.begin();\n          it != mapTx.end(); it++)\n     {\n         mapTx.modify(it, update_priority(nBlockHeight));\n@@ -184,10 +184,10 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n     // Remove transactions spending a coinbase which are now immature\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n-    for (ordered_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n         BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-            ordered_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+            indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end())\n                 continue;\n             const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n@@ -233,7 +233,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n     {\n         uint256 hash = tx.GetHash();\n \n-        ordered_transaction_set::iterator i = mapTx.find(hash);\n+        indexed_transaction_set::iterator i = mapTx.find(hash);\n         if (i != mapTx.end())\n             entries.push_back(*i);\n     }\n@@ -270,14 +270,14 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n     LOCK(cs);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n-    for (ordered_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         checkTotal += it->GetTxSize();\n         const CTransaction& tx = it->GetTx();\n         bool fDependsWait = false;\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n-            ordered_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+            indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {\n                 const CTransaction& tx2 = it2->GetTx();\n                 assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n@@ -318,7 +318,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     }\n     for (std::map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); it++) {\n         uint256 hash = it->second.ptx->GetHash();\n-        ordered_transaction_set::const_iterator it2 = mapTx.find(hash);\n+        indexed_transaction_set::const_iterator it2 = mapTx.find(hash);\n         const CTransaction& tx = it2->GetTx();\n         assert(it2 != mapTx.end());\n         assert(&tx == it->second.ptx);\n@@ -335,14 +335,14 @@ void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n \n     LOCK(cs);\n     vtxid.reserve(mapTx.size());\n-    for (ordered_transaction_set::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n+    for (indexed_transaction_set::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n         vtxid.push_back(mi->GetTx().GetHash());\n }\n \n bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n {\n     LOCK(cs);\n-    ordered_transaction_set::const_iterator i = mapTx.find(hash);\n+    indexed_transaction_set::const_iterator i = mapTx.find(hash);\n     if (i == mapTx.end()) return false;\n     result = i->GetTx();\n     return true;"
      },
      {
        "sha": "99b18547c1c92c410151b3d702b68a4a859808f9",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362bf769edc6f15495a78461902d54d649c83c08/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362bf769edc6f15495a78461902d54d649c83c08/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=362bf769edc6f15495a78461902d54d649c83c08",
        "patch": "@@ -99,24 +99,6 @@ class CompareTxMemPoolEntryByFee\n     }\n };\n \n-typedef boost::multi_index_container<\n-    CTxMemPoolEntry,\n-    boost::multi_index::indexed_by<\n-        // sorted by txid\n-        boost::multi_index::ordered_unique<mempoolentry_txid>,\n-        // sorted by fee rate\n-        boost::multi_index::ordered_non_unique<\n-            boost::multi_index::identity<CTxMemPoolEntry>,\n-            CompareTxMemPoolEntryByFee\n-        >,\n-        // sorted by priority\n-        boost::multi_index::ordered_non_unique<\n-            boost::multi_index::identity<CTxMemPoolEntry>,\n-            CompareTxMemPoolEntryByPriority\n-        >\n-    >\n-> ordered_transaction_set;\n-\n class CBlockPolicyEstimator;\n \n /** An inpoint - a combination of a transaction and an index n into its vin */\n@@ -152,8 +134,26 @@ class CTxMemPool\n     uint64_t totalTxSize; //! sum of all mempool tx' byte sizes\n \n public:\n+    typedef boost::multi_index_container<\n+        CTxMemPoolEntry,\n+        boost::multi_index::indexed_by<\n+            // sorted by txid\n+            boost::multi_index::ordered_unique<mempoolentry_txid>,\n+            // sorted by fee rate\n+            boost::multi_index::ordered_non_unique<\n+                boost::multi_index::identity<CTxMemPoolEntry>,\n+                CompareTxMemPoolEntryByFee\n+            >,\n+            // sorted by priority\n+            boost::multi_index::ordered_non_unique<\n+                boost::multi_index::identity<CTxMemPoolEntry>,\n+                CompareTxMemPoolEntryByPriority\n+            >\n+        >\n+    > indexed_transaction_set;\n+\n     mutable CCriticalSection cs;\n-    ordered_transaction_set mapTx;\n+    indexed_transaction_set mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n     std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n "
      }
    ]
  },
  {
    "sha": "55bb08e5f882af8bba8b077fcb582883ba26795c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWJiMDhlNWY4ODJhZjhiYmE4YjA3N2ZjYjU4Mjg4M2JhMjY3OTVj",
    "commit": {
      "author": {
        "name": "Ashley Holman",
        "email": "dscvlt@gmail.com",
        "date": "2015-07-11T08:45:49Z"
      },
      "committer": {
        "name": "Ashley Holman",
        "email": "dscvlt@gmail.com",
        "date": "2015-07-11T08:45:49Z"
      },
      "message": "Merge remote-tracking branch 'BITCOIN/master' into mempool_multiindex",
      "tree": {
        "sha": "f1aa1537b5fabb1dd0bbeb35895b404d1d025a5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1aa1537b5fabb1dd0bbeb35895b404d1d025a5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55bb08e5f882af8bba8b077fcb582883ba26795c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55bb08e5f882af8bba8b077fcb582883ba26795c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55bb08e5f882af8bba8b077fcb582883ba26795c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55bb08e5f882af8bba8b077fcb582883ba26795c/comments",
    "author": {
      "login": "ashleyholman",
      "id": 549484,
      "node_id": "MDQ6VXNlcjU0OTQ4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/549484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ashleyholman",
      "html_url": "https://github.com/ashleyholman",
      "followers_url": "https://api.github.com/users/ashleyholman/followers",
      "following_url": "https://api.github.com/users/ashleyholman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ashleyholman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ashleyholman/subscriptions",
      "organizations_url": "https://api.github.com/users/ashleyholman/orgs",
      "repos_url": "https://api.github.com/users/ashleyholman/repos",
      "events_url": "https://api.github.com/users/ashleyholman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ashleyholman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ashleyholman",
      "id": 549484,
      "node_id": "MDQ6VXNlcjU0OTQ4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/549484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ashleyholman",
      "html_url": "https://github.com/ashleyholman",
      "followers_url": "https://api.github.com/users/ashleyholman/followers",
      "following_url": "https://api.github.com/users/ashleyholman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ashleyholman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ashleyholman/subscriptions",
      "organizations_url": "https://api.github.com/users/ashleyholman/orgs",
      "repos_url": "https://api.github.com/users/ashleyholman/repos",
      "events_url": "https://api.github.com/users/ashleyholman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ashleyholman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "362bf769edc6f15495a78461902d54d649c83c08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/362bf769edc6f15495a78461902d54d649c83c08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/362bf769edc6f15495a78461902d54d649c83c08"
      },
      {
        "sha": "5121c68657fb90baa50b709adcc48348c4876783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5121c68657fb90baa50b709adcc48348c4876783",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5121c68657fb90baa50b709adcc48348c4876783"
      }
    ],
    "stats": {
      "total": 5158,
      "additions": 3666,
      "deletions": 1492
    },
    "files": [
      {
        "sha": "594d98c39f9c6112090c5b30052db4cbfff798ab",
        "filename": "README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -58,6 +58,10 @@ lots of money.\n Developers are strongly encouraged to write unit tests for new code, and to\n submit new unit tests for old code. Unit tests can be compiled and run (assuming they weren't disabled in configure) with: `make check`\n \n+There are also regression and integration tests of the RPC interface, written\n+in Python, that are run automatically on the build server.\n+These tests can be run with: `qa/pull-tester/rpc-tests.sh`\n+\n Every pull request is built for both Windows and Linux on a dedicated server,\n and unit and sanity tests are automatically run. The binaries produced may be\n used for manual QA testing \u2014 a link to them will appear in a comment on the"
      },
      {
        "sha": "2a73050e0e624b98c7df76e70f617d73f2848422",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -14,21 +14,26 @@ remotes:\n files:\n - \"osslsigncode-1.7.1.tar.gz\"\n - \"osslsigncode-Backports-to-1.7.1.patch\"\n-- \"bitcoin-win32-setup.exe\"\n-- \"bitcoin-win64-setup.exe\"\n+- \"bitcoin-win-unsigned.tar.gz\"\n script: |\n   BUILD_DIR=`pwd`\n   SIGDIR=${BUILD_DIR}/signature/win\n+  UNSIGNED_DIR=${BUILD_DIR}/unsigned\n \n   echo \"f9a8cdb38b9c309326764ebc937cba1523a3a751a7ab05df3ecc99d18ae466c9  osslsigncode-1.7.1.tar.gz\" | sha256sum -c\n   echo \"a8c4e9cafba922f89de0df1f2152e7be286aba73f78505169bc351a7938dd911  osslsigncode-Backports-to-1.7.1.patch\" | sha256sum -c\n \n+  mkdir -p ${UNSIGNED_DIR}\n+  tar -C ${UNSIGNED_DIR} -xf bitcoin-win-unsigned.tar.gz\n+\n   tar xf osslsigncode-1.7.1.tar.gz\n   cd osslsigncode-1.7.1\n   patch -p1 < ${BUILD_DIR}/osslsigncode-Backports-to-1.7.1.patch\n \n   ./configure --without-gsf --without-curl --disable-dependency-tracking\n   make\n-\n-  ./osslsigncode attach-signature -in ${BUILD_DIR}/bitcoin-win32-setup.exe -out ${OUTDIR}/bitcoin-win32-setup-signed.exe -sigin ${SIGDIR}/bitcoin-win32-setup.exe.pem\n-  ./osslsigncode attach-signature -in ${BUILD_DIR}/bitcoin-win64-setup.exe -out ${OUTDIR}/bitcoin-win64-setup-signed.exe -sigin ${SIGDIR}/bitcoin-win64-setup.exe.pem\n+  find ${UNSIGNED_DIR} -name \"*-unsigned.exe\" | while read i; do\n+    INFILE=\"`basename \"${i}\"`\"\n+    OUTFILE=\"`echo \"${INFILE}\" | sed s/-unsigned//`\"\n+    ./osslsigncode attach-signature -in \"${i}\" -out \"${OUTDIR}/${OUTFILE}\" -sigin \"${SIGDIR}/${INFILE}.pem\"\n+  done"
      },
      {
        "sha": "966820ec510641705e8533ac322a66acf41b7e1b",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -84,6 +84,8 @@ script: |\n   pushd temp\n   tar xf ../$SOURCEDIST\n   find bitcoin-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n+  mkdir -p $OUTDIR/src\n+  cp ../$SOURCEDIST $OUTDIR/src\n   popd\n \n   ORIGPATH=\"$PATH\"\n@@ -109,7 +111,8 @@ script: |\n     find ${DISTNAME} -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n     cd ../..\n   done\n-  mkdir -p $OUTDIR/src\n-  mv $SOURCEDIST $OUTDIR/src\n+  cd $OUTDIR\n+  rename 's/-setup\\.exe$/-setup-unsigned.exe/' *-setup.exe\n+  find . -name \"*-setup-unsigned.exe\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz\n   mv ${OUTDIR}/${DISTNAME}-x86_64-*.zip ${OUTDIR}/${DISTNAME}-win64.zip\n   mv ${OUTDIR}/${DISTNAME}-i686-*.zip ${OUTDIR}/${DISTNAME}-win32.zip"
      },
      {
        "sha": "eda1a96fb4fcbaf3a61cafcd80368b5104ec0f56",
        "filename": "contrib/init/bitcoind.openrc",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/init/bitcoind.openrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/init/bitcoind.openrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrc?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -32,7 +32,11 @@ required_files=\"${BITCOIND_CONFIGFILE}\"\n start_stop_daemon_args=\"-u ${BITCOIND_USER} \\\n \t\t\t-N ${BITCOIND_NICE} -w 2000\"\n pidfile=\"${BITCOIND_PIDFILE}\"\n-retry=60\n+\n+# The retry schedule to use when stopping the daemon. Could be either\n+# a timeout in seconds or multiple signal/timeout pairs (like\n+# \"SIGKILL/180 SIGTERM/300\")\n+retry=\"${BITCOIND_SIGTERM_TIMEOUT}\"\n \n depend() {\n \tneed localmount net"
      },
      {
        "sha": "0cbff6d30d2d66bbafaaf2205f4dd7609b2113a1",
        "filename": "contrib/init/bitcoind.openrcconf",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/init/bitcoind.openrcconf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/init/bitcoind.openrcconf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrcconf?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -25,3 +25,9 @@\n # Additional options (avoid -conf and -datadir, use flags above)\n BITCOIND_OPTS=\"-disablewallet\"\n \n+# The timeout in seconds OpenRC will wait for bitcoind to terminate\n+# after a SIGTERM has been raised.\n+# Note that this will be mapped as argument to start-stop-daemon's\n+# '--retry' option, which means you can specify a retry schedule\n+# here. For more information see man 8 start-stop-daemon.\n+BITCOIND_SIGTERM_TIMEOUT=60"
      },
      {
        "sha": "63647fa11aac256cbaf3a3b374cc527e92dcfcca",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -1,7 +1,7 @@\n ### Seeds ###\n \n Utility to generate the seeds.txt list that is compiled into the client\n-(see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and [share/seeds](/share/seeds)).\n+(see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and other utilities in [contrib/seeds](/contrib/seeds)).\n \n The 512 seeds compiled into the 0.10 release were created from sipa's DNS seed data, like this:\n "
      },
      {
        "sha": "167c219c6e02b9ddbc6cfe7883c97f13bb4548f8",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "renamed",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -77,6 +77,9 @@ def parse_spec(s, defaultport):\n     if match: # ipv6\n         host = match.group(1)\n         port = match.group(2)\n+    elif s.count(':') > 1: # ipv6, no port\n+        host = s\n+        port = ''\n     else:\n         (host,_,port) = s.partition(':')\n \n@@ -118,7 +121,7 @@ def main():\n     g.write('#define BITCOIN_CHAINPARAMSSEEDS_H\\n')\n     g.write('/**\\n')\n     g.write(' * List of fixed seed nodes for the bitcoin network\\n')\n-    g.write(' * AUTOGENERATED by share/seeds/generate-seeds.py\\n')\n+    g.write(' * AUTOGENERATED by contrib/seeds/generate-seeds.py\\n')\n     g.write(' *\\n')\n     g.write(' * Each line contains a 16-byte IPv6 address and a port.\\n')\n     g.write(' * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\\n')",
        "previous_filename": "share/seeds/generate-seeds.py"
      },
      {
        "sha": "4072405ef509a80176bf7314b46eca525cffe1da",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 67,
        "deletions": 16,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -22,26 +22,50 @@\n import re\n import sys\n import dns.resolver\n+import collections\n \n-PATTERN_IPV4 = re.compile(r\"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):8333$\")\n-PATTERN_AGENT = re.compile(r\"^(\\/Satoshi:0.8.6\\/|\\/Satoshi:0.9.(2|3)\\/|\\/Satoshi:0.10.\\d{1,2}\\/)$\")\n+PATTERN_IPV4 = re.compile(r\"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):(\\d+)$\")\n+PATTERN_IPV6 = re.compile(r\"^\\[([0-9a-z:]+)\\]:(\\d+)$\")\n+PATTERN_ONION = re.compile(r\"^([abcdefghijklmnopqrstuvwxyz234567]{16}\\.onion):(\\d+)$\")\n+PATTERN_AGENT = re.compile(r\"^(\\/Satoshi:0\\.8\\.6\\/|\\/Satoshi:0\\.9\\.(2|3|4|5)\\/|\\/Satoshi:0\\.10\\.\\d{1,2}\\/|\\/Satoshi:0\\.11\\.\\d{1,2}\\/)$\")\n \n def parseline(line):\n     sline = line.split()\n     if len(sline) < 11:\n        return None\n-    # Match only IPv4\n     m = PATTERN_IPV4.match(sline[0])\n+    sortkey = None\n+    ip = None\n     if m is None:\n-        return None\n-    # Do IPv4 sanity check\n-    ip = 0\n-    for i in range(0,4):\n-        if int(m.group(i+2)) < 0 or int(m.group(i+2)) > 255:\n+        m = PATTERN_IPV6.match(sline[0])\n+        if m is None:\n+            m = PATTERN_ONION.match(sline[0])\n+            if m is None:\n+                return None\n+            else:\n+                net = 'onion'\n+                ipstr = sortkey = m.group(1)\n+                port = int(m.group(2))\n+        else:\n+            net = 'ipv6'\n+            if m.group(1) in ['::']: # Not interested in localhost\n+                return None\n+            ipstr = m.group(1)\n+            sortkey = ipstr # XXX parse IPv6 into number, could use name_to_ipv6 from generate-seeds\n+            port = int(m.group(2))\n+    else:\n+        # Do IPv4 sanity check\n+        ip = 0\n+        for i in range(0,4):\n+            if int(m.group(i+2)) < 0 or int(m.group(i+2)) > 255:\n+                return None\n+            ip = ip + (int(m.group(i+2)) << (8*(3-i)))\n+        if ip == 0:\n             return None\n-        ip = ip + (int(m.group(i+2)) << (8*(3-i)))\n-    if ip == 0:\n-        return None\n+        net = 'ipv4'\n+        sortkey = ip\n+        ipstr = m.group(1)\n+        port = int(m.group(6))\n     # Skip bad results.\n     if sline[1] == 0:\n         return None\n@@ -59,21 +83,37 @@ def parseline(line):\n     blocks = int(sline[8])\n     # Construct result.\n     return {\n-        'ip': m.group(1),\n+        'net': net,\n+        'ip': ipstr,\n+        'port': port,\n         'ipnum': ip,\n         'uptime': uptime30,\n         'lastsuccess': lastsuccess,\n         'version': version,\n         'agent': agent,\n         'service': service,\n         'blocks': blocks,\n+        'sortkey': sortkey,\n     }\n \n+def filtermultiport(ips):\n+    '''Filter out hosts with more nodes per IP'''\n+    hist = collections.defaultdict(list)\n+    for ip in ips:\n+        hist[ip['sortkey']].append(ip)\n+    return [value[0] for (key,value) in hist.items() if len(value)==1]\n+\n # Based on Greg Maxwell's seed_filter.py\n def filterbyasn(ips, max_per_asn, max_total):\n+    # Sift out ips by type\n+    ips_ipv4 = [ip for ip in ips if ip['net'] == 'ipv4']\n+    ips_ipv6 = [ip for ip in ips if ip['net'] == 'ipv6']\n+    ips_onion = [ip for ip in ips if ip['net'] == 'onion']\n+\n+    # Filter IPv4 by ASN\n     result = []\n     asn_count = {}\n-    for ip in ips:\n+    for ip in ips_ipv4:\n         if len(result) == max_total:\n             break\n         try:\n@@ -86,13 +126,19 @@ def filterbyasn(ips, max_per_asn, max_total):\n             result.append(ip)\n         except:\n             sys.stderr.write('ERR: Could not resolve ASN for \"' + ip['ip'] + '\"\\n')\n+\n+    # TODO: filter IPv6 by ASN\n+\n+    # Add back non-IPv4\n+    result.extend(ips_ipv6)\n+    result.extend(ips_onion)\n     return result\n \n def main():\n     lines = sys.stdin.readlines()\n     ips = [parseline(line) for line in lines]\n \n-    # Skip entries with valid IPv4 address.\n+    # Skip entries with valid address.\n     ips = [ip for ip in ips if ip is not None]\n     # Skip entries from suspicious hosts.\n     ips = [ip for ip in ips if ip['ip'] not in SUSPICIOUS_HOSTS]\n@@ -106,13 +152,18 @@ def main():\n     ips = [ip for ip in ips if PATTERN_AGENT.match(ip['agent'])]\n     # Sort by availability (and use last success as tie breaker)\n     ips.sort(key=lambda x: (x['uptime'], x['lastsuccess'], x['ip']), reverse=True)\n+    # Filter out hosts with multiple bitcoin ports, these are likely abusive\n+    ips = filtermultiport(ips)\n     # Look up ASNs and limit results, both per ASN and globally.\n     ips = filterbyasn(ips, MAX_SEEDS_PER_ASN, NSEEDS)\n     # Sort the results by IP address (for deterministic output).\n-    ips.sort(key=lambda x: (x['ipnum']))\n+    ips.sort(key=lambda x: (x['net'], x['sortkey']))\n \n     for ip in ips:\n-        print ip['ip']\n+        if ip['net'] == 'ipv6':\n+            print '[%s]:%i' % (ip['ip'], ip['port'])\n+        else:\n+            print '%s:%i' % (ip['ip'], ip['port'])\n \n if __name__ == '__main__':\n     main()"
      },
      {
        "sha": "17339d514af892b878f449e84032ebde5151e31f",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "added",
        "additions": 879,
        "deletions": 0,
        "changes": 879,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -0,0 +1,879 @@\n+1.34.168.128:8333\n+1.202.128.218:8333\n+2.30.0.210:8333\n+5.9.96.203:8333\n+5.45.71.130:8333\n+5.45.98.141:8333\n+5.102.145.68:8333\n+5.135.160.77:8333\n+5.189.134.246:8333\n+5.199.164.132:8333\n+5.249.135.102:8333\n+8.19.44.110:8333\n+8.22.230.8:8333\n+14.200.200.145:8333\n+18.228.0.188:8333\n+18.228.0.200:8333\n+23.24.168.97:8333\n+23.28.35.227:8333\n+23.92.76.170:8333\n+23.99.64.119:8333\n+23.228.166.128:8333\n+23.229.45.32:8333\n+24.8.105.128:8333\n+24.16.69.137:8333\n+24.94.98.96:8333\n+24.102.118.7:8333\n+24.118.166.228:8333\n+24.122.133.49:8333\n+24.166.97.162:8333\n+24.213.235.242:8333\n+24.226.107.64:8333\n+24.228.192.171:8333\n+27.140.133.18:8333\n+31.41.40.25:8333\n+31.43.101.59:8333\n+31.184.195.181:8333\n+31.193.139.66:8333\n+37.200.70.102:8333\n+37.205.10.151:8333\n+42.3.106.227:8333\n+42.60.133.106:8333\n+45.56.85.231:8333\n+45.56.102.228:8333\n+45.79.130.235:8333\n+46.28.204.61:11101\n+46.38.235.229:8333\n+46.59.2.74:8333\n+46.101.132.37:8333\n+46.101.168.50:8333\n+46.163.76.230:8333\n+46.166.161.103:8333\n+46.182.132.100:8333\n+46.223.36.94:8333\n+46.227.66.132:8333\n+46.227.66.138:8333\n+46.239.107.74:8333\n+46.249.39.100:8333\n+46.250.98.108:8333\n+50.7.37.114:8333\n+50.81.53.151:8333\n+50.115.43.253:8333\n+50.116.20.87:8333\n+50.116.33.92:8333\n+50.125.167.245:8333\n+50.143.9.51:8333\n+50.188.192.133:8333\n+54.77.162.76:8333\n+54.153.97.109:8333\n+54.165.192.125:8333\n+58.96.105.85:8333\n+59.167.196.135:8333\n+60.29.227.163:8333\n+61.35.225.19:8333\n+62.43.130.178:8333\n+62.109.49.26:8333\n+62.202.0.97:8333\n+62.210.66.227:8333\n+62.210.192.169:8333\n+64.74.98.205:8333\n+64.156.193.100:8333\n+64.203.102.86:8333\n+64.229.142.48:8333\n+65.96.193.165:8333\n+66.30.3.7:8333\n+66.114.33.49:8333\n+66.118.133.194:8333\n+66.135.10.126:8333\n+66.172.10.4:8333\n+66.194.38.250:8333\n+66.194.38.253:8333\n+66.215.192.104:8333\n+67.60.98.115:8333\n+67.164.35.36:8333\n+67.191.162.244:8333\n+67.207.195.77:8333\n+67.219.233.140:8333\n+67.221.193.55:8333\n+67.228.162.228:8333\n+68.50.67.199:8333\n+68.62.3.203:8333\n+68.65.205.226:9000\n+68.106.42.191:8333\n+68.150.181.198:8333\n+68.196.196.106:8333\n+68.224.194.81:8333\n+69.46.5.194:8333\n+69.50.171.238:8333\n+69.64.43.152:8333\n+69.65.41.13:8333\n+69.90.132.200:8333\n+69.143.1.243:8333\n+69.146.98.216:8333\n+69.165.246.38:8333\n+69.207.6.135:8333\n+69.251.208.26:8333\n+70.38.1.101:8333\n+70.38.9.66:8333\n+70.90.2.18:8333\n+71.58.228.226:8333\n+71.199.11.189:8333\n+71.199.193.202:8333\n+71.205.232.181:8333\n+71.236.200.162:8333\n+72.24.73.186:8333\n+72.52.130.110:8333\n+72.53.111.37:8333\n+72.235.38.70:8333\n+73.31.171.149:8333\n+73.32.137.72:8333\n+73.137.133.238:8333\n+73.181.192.103:8333\n+73.190.2.60:8333\n+73.195.192.137:8333\n+73.222.35.117:8333\n+74.57.199.180:8333\n+74.82.233.205:8333\n+74.85.66.82:8333\n+74.101.224.127:8333\n+74.113.69.16:8333\n+74.122.235.68:8333\n+74.193.68.141:8333\n+74.208.164.219:8333\n+75.100.37.122:8333\n+75.145.149.169:8333\n+75.168.34.20:8333\n+76.20.44.240:8333\n+76.100.70.17:8333\n+76.168.3.239:8333\n+76.186.140.103:8333\n+77.92.68.221:8333\n+77.109.101.142:8333\n+77.110.11.86:8333\n+77.242.108.18:8333\n+78.46.96.150:9020\n+78.84.100.95:8333\n+79.132.230.144:8333\n+79.133.43.63:8333\n+79.160.76.153:8333\n+79.169.34.24:8333\n+79.188.7.78:8333\n+80.217.226.25:8333\n+80.223.100.179:8333\n+80.240.129.221:8333\n+81.1.173.243:8333\n+81.7.11.50:8333\n+81.7.16.17:8333\n+81.66.111.3:8333\n+81.80.9.71:8333\n+81.140.43.138:8333\n+81.171.34.37:8333\n+81.174.247.50:8333\n+81.181.155.53:8333\n+81.184.5.253:8333\n+81.187.69.130:8333\n+81.230.3.84:8333\n+82.42.128.51:8333\n+82.74.226.21:8333\n+82.142.75.50:8333\n+82.199.102.10:8333\n+82.200.205.30:8333\n+82.221.108.21:8333\n+82.221.128.35:8333\n+82.238.124.41:8333\n+82.242.0.245:8333\n+83.76.123.110:8333\n+83.150.9.196:8333\n+83.162.196.192:8333\n+83.162.234.224:8333\n+83.170.104.91:8333\n+83.255.66.118:8334\n+84.2.34.104:8333\n+84.45.98.91:8333\n+84.47.161.150:8333\n+84.212.192.131:8333\n+84.215.169.101:8333\n+84.238.140.176:8333\n+84.245.71.31:8333\n+85.17.4.212:8333\n+85.114.128.134:8333\n+85.159.237.191:8333\n+85.166.130.189:8333\n+85.199.4.228:8333\n+85.214.66.168:8333\n+85.214.195.210:8333\n+85.229.0.73:8333\n+86.21.96.45:8333\n+87.48.42.199:8333\n+87.81.143.82:8333\n+87.81.251.72:8333\n+87.104.24.185:8333\n+87.104.168.104:8333\n+87.117.234.71:8333\n+87.118.96.197:8333\n+87.145.12.57:8333\n+87.159.170.190:8333\n+88.150.168.160:8333\n+88.208.0.79:8333\n+88.208.0.149:8333\n+88.214.194.226:8343\n+89.1.11.32:8333\n+89.36.235.108:8333\n+89.67.96.2:15321\n+89.98.16.41:8333\n+89.108.72.195:8333\n+89.156.35.157:8333\n+89.163.227.28:8333\n+89.212.33.237:8333\n+89.212.160.165:8333\n+89.231.96.83:8333\n+89.248.164.64:8333\n+90.149.193.199:8333\n+91.77.239.245:8333\n+91.106.194.97:8333\n+91.126.77.77:8333\n+91.134.38.195:8333\n+91.156.97.181:8333\n+91.207.68.144:8333\n+91.209.77.101:8333\n+91.214.200.205:8333\n+91.220.131.242:8333\n+91.220.163.18:8333\n+91.233.23.35:8333\n+92.13.96.93:8333\n+92.14.74.114:8333\n+92.27.7.209:8333\n+92.221.228.13:8333\n+92.255.207.73:8333\n+93.72.167.148:8333\n+93.74.163.234:8333\n+93.123.174.66:8333\n+93.152.166.29:8333\n+93.181.45.188:8333\n+94.19.12.244:8333\n+94.190.227.112:8333\n+94.198.135.29:8333\n+94.224.162.65:8333\n+94.226.107.86:8333\n+94.242.198.161:8333\n+95.31.10.209:8333\n+95.65.72.244:8333\n+95.84.162.95:8333\n+95.90.139.46:8333\n+95.183.49.27:8005\n+95.215.47.133:8333\n+96.23.67.85:8333\n+96.44.166.190:8333\n+97.93.225.74:8333\n+98.26.0.34:8333\n+98.27.225.102:8333\n+98.229.117.229:8333\n+98.249.68.125:8333\n+98.255.5.155:8333\n+99.101.240.114:8333\n+101.100.174.138:8333\n+101.251.203.6:8333\n+103.3.60.61:8333\n+103.30.42.189:8333\n+103.224.165.48:8333\n+104.36.83.233:8333\n+104.37.129.22:8333\n+104.54.192.251:8333\n+104.128.228.252:8333\n+104.128.230.185:8334\n+104.130.161.47:8333\n+104.131.33.60:8333\n+104.143.0.156:8333\n+104.156.111.72:8333\n+104.167.111.84:8333\n+104.193.40.248:8333\n+104.197.7.174:8333\n+104.197.8.250:8333\n+104.223.1.133:8333\n+104.236.97.140:8333\n+104.238.128.214:8333\n+104.238.130.182:8333\n+106.38.234.84:8333\n+106.185.36.204:8333\n+107.6.4.145:8333\n+107.150.2.6:8333\n+107.150.40.234:8333\n+107.155.108.130:8333\n+107.161.182.115:8333\n+107.170.66.231:8333\n+107.190.128.226:8333\n+107.191.106.115:8333\n+108.16.2.61:8333\n+109.70.4.168:8333\n+109.162.35.196:8333\n+109.163.235.239:8333\n+109.190.196.220:8333\n+109.191.39.60:8333\n+109.234.106.191:8333\n+109.238.81.82:8333\n+114.76.147.27:8333\n+115.28.224.127:8333\n+115.68.110.82:18333\n+118.97.79.218:8333\n+118.189.207.197:8333\n+119.228.96.233:8333\n+120.147.178.81:8333\n+121.41.123.5:8333\n+121.67.5.230:8333\n+122.107.143.110:8333\n+123.2.170.98:8333\n+123.110.65.94:8333\n+123.193.139.19:8333\n+125.239.160.41:8333\n+128.101.162.193:8333\n+128.111.73.10:8333\n+128.140.229.73:8333\n+128.175.195.31:8333\n+128.199.107.63:8333\n+128.199.192.153:8333\n+128.253.3.193:20020\n+129.123.7.7:8333\n+130.89.160.234:8333\n+131.72.139.164:8333\n+131.191.112.98:8333\n+133.1.134.162:8333\n+134.19.132.53:8333\n+137.226.34.42:8333\n+141.41.2.172:8333\n+141.255.128.204:8333\n+142.217.12.106:8333\n+143.215.129.126:8333\n+146.0.32.101:8337\n+147.229.13.199:8333\n+149.210.133.244:8333\n+149.210.162.187:8333\n+150.101.163.241:8333\n+151.236.11.189:8333\n+153.121.66.211:8333\n+154.20.2.139:8333\n+159.253.23.132:8333\n+162.209.106.123:8333\n+162.210.198.184:8333\n+162.218.65.121:8333\n+162.222.161.49:8333\n+162.243.132.6:8333\n+162.243.132.58:8333\n+162.248.99.164:53011\n+162.248.102.117:8333\n+163.158.35.110:8333\n+164.15.10.189:8333\n+164.40.134.171:8333\n+166.230.71.67:8333\n+167.160.161.199:8333\n+168.103.195.250:8333\n+168.144.27.112:8333\n+168.158.129.29:8333\n+170.75.162.86:8333\n+172.90.99.174:8333\n+172.245.5.156:8333\n+173.23.166.47:8333\n+173.32.11.194:8333\n+173.34.203.76:8333\n+173.171.1.52:8333\n+173.175.136.13:8333\n+173.230.228.139:8333\n+173.247.193.70:8333\n+174.49.132.28:8333\n+174.52.202.72:8333\n+174.53.76.87:8333\n+174.109.33.28:8333\n+176.28.12.169:8333\n+176.35.182.214:8333\n+176.36.33.113:8333\n+176.36.33.121:8333\n+176.58.96.173:8333\n+176.121.76.84:8333\n+178.62.70.16:8333\n+178.62.111.26:8333\n+178.76.169.59:8333\n+178.79.131.32:8333\n+178.162.199.216:8333\n+178.175.134.35:8333\n+178.248.111.4:8333\n+178.254.1.170:8333\n+178.254.34.161:8333\n+179.43.143.120:8333\n+179.208.156.198:8333\n+180.200.128.58:8333\n+183.78.169.108:8333\n+183.96.96.152:8333\n+184.68.2.46:8333\n+184.73.160.160:8333\n+184.94.227.58:8333\n+184.152.68.163:8333\n+185.7.35.114:8333\n+185.28.76.179:8333\n+185.31.160.202:8333\n+185.45.192.129:8333\n+185.66.140.15:8333\n+186.2.167.23:8333\n+186.220.101.142:8333\n+188.26.5.33:8333\n+188.75.136.146:8333\n+188.120.194.140:8333\n+188.121.5.150:8333\n+188.138.0.114:8333\n+188.138.33.239:8333\n+188.166.0.82:8333\n+188.182.108.129:8333\n+188.191.97.208:8333\n+188.226.198.102:8001\n+190.10.9.217:8333\n+190.75.143.144:8333\n+190.139.102.146:8333\n+191.237.64.28:8333\n+192.3.131.61:8333\n+192.99.225.3:8333\n+192.110.160.122:8333\n+192.146.137.1:8333\n+192.183.198.204:8333\n+192.203.228.71:8333\n+193.0.109.3:8333\n+193.12.238.204:8333\n+193.91.200.85:8333\n+193.234.225.156:8333\n+194.6.233.38:8333\n+194.63.143.136:8333\n+194.126.100.246:8333\n+195.134.99.195:8333\n+195.159.111.98:8333\n+195.159.226.139:8333\n+195.197.175.190:8333\n+198.48.199.108:8333\n+198.57.208.134:8333\n+198.57.210.27:8333\n+198.62.109.223:8333\n+198.167.140.8:8333\n+198.167.140.18:8333\n+199.91.173.234:8333\n+199.127.226.245:8333\n+199.180.134.116:8333\n+200.7.96.99:8333\n+201.160.106.86:8333\n+202.55.87.45:8333\n+202.60.68.242:8333\n+202.60.69.232:8333\n+202.124.109.103:8333\n+203.30.197.77:8333\n+203.88.160.43:8333\n+203.151.140.14:8333\n+203.219.14.204:8333\n+205.147.40.62:8333\n+207.235.39.214:8333\n+207.244.73.8:8333\n+208.12.64.225:8333\n+208.76.200.200:8333\n+209.40.96.121:8333\n+209.126.107.176:8333\n+209.141.40.149:8333\n+209.190.75.59:8333\n+209.208.111.142:8333\n+210.54.34.164:8333\n+211.72.66.229:8333\n+212.51.144.42:8333\n+212.112.33.157:8333\n+212.116.72.63:8333\n+212.126.14.122:8333\n+213.66.205.194:8333\n+213.111.196.21:8333\n+213.122.107.102:8333\n+213.136.75.175:8333\n+213.155.7.24:8333\n+213.163.64.31:8333\n+213.163.64.208:8333\n+213.165.86.136:8333\n+213.184.8.22:8333\n+216.15.78.182:8333\n+216.55.143.154:8333\n+216.115.235.32:8333\n+216.126.226.166:8333\n+216.145.67.87:8333\n+216.169.141.169:8333\n+216.249.92.230:8333\n+216.250.138.230:8333\n+217.20.171.43:8333\n+217.23.2.71:8333\n+217.23.2.242:8333\n+217.25.9.76:8333\n+217.40.226.169:8333\n+217.123.98.9:8333\n+217.155.36.62:8333\n+217.172.32.18:20993\n+218.61.196.202:8333\n+218.231.205.41:8333\n+220.233.77.200:8333\n+223.18.226.85:8333\n+223.197.203.82:8333\n+223.255.166.142:8333\n+[2001:1291:2bf:1::100]:8333\n+[2001:1418:100:5c2::2]:8333\n+[2001:16d8:dd24:0:86c9:681e:f931:256]:8333\n+[2001:19f0:1624:e6::579d:9428]:8333\n+[2001:19f0:300:1340:225:90ff:fec9:2b6d]:8333\n+[2001:19f0:4009:1405::64]:8333\n+[2001:1b40:5000:2e::3fb0:6571]:8333\n+[2001:410:a000:4050:8463:90b0:fffb:4e58]:8333\n+[2001:410:a002:cafe:8463:90b0:fffb:4e58]:8333\n+[2001:41d0:1:541e::1]:8333\n+[2001:41d0:1:6a34::3]:8333\n+[2001:41d0:1:6cd3::]:8333\n+[2001:41d0:1:8b26::1]:8333\n+[2001:41d0:1:a33d::1]:8333\n+[2001:41d0:1:b855::1]:8333\n+[2001:41d0:1:c139::1]:8333\n+[2001:41d0:1:c8d7::1]:8333\n+[2001:41d0:1:dd3f::1]:8333\n+[2001:41d0:1:e29d::1]:8333\n+[2001:41d0:1:f59f::33]:8333\n+[2001:41d0:1:f7cc::1]:8333\n+[2001:41d0:1:ff87::1]:8333\n+[2001:41d0:2:2f05::1]:8333\n+[2001:41d0:2:37c3::]:8200\n+[2001:41d0:2:3e13::1]:8333\n+[2001:41d0:2:8619::]:8333\n+[2001:41d0:2:9c94::1]:8333\n+[2001:41d0:2:a24f::]:8333\n+[2001:41d0:2:adbf::]:8333\n+[2001:41d0:2:b721::1]:8333\n+[2001:41d0:2:ee52::1]:8333\n+[2001:41d0:2:f1a5::]:8333\n+[2001:41d0:2:fa54::1]:8333\n+[2001:41d0:51:1::2036]:8333\n+[2001:41d0:52:a00::1a1]:8333\n+[2001:41d0:52:cff::6f5]:8333\n+[2001:41d0:52:d00::2c0]:8333\n+[2001:41d0:52:d00::cf2]:8333\n+[2001:41d0:8:1087::1]:8333\n+[2001:41d0:8:4a3c::b7c]:8333\n+[2001:41d0:8:6728::]:8333\n+[2001:41d0:8:b779::1]:8333\n+[2001:41d0:8:c30f::1]:8333\n+[2001:41d0:8:d2b2::1]:8333\n+[2001:41d0:8:d5c3::1]:8333\n+[2001:41d0:8:eb8b::]:8333\n+[2001:41d0:a:16d0::1]:8333\n+[2001:41d0:a:2b18::1]:8333\n+[2001:41d0:a:3a9c::1]:8333\n+[2001:41d0:a:4903::]:8333\n+[2001:41d0:a:57b::1]:8333\n+[2001:41d0:a:5c7a::]:8333\n+[2001:41d0:a:6c29::1]:8333\n+[2001:41d0:a:f482::1]:8333\n+[2001:41d0:b:854:b7c:b7c:b7c:b7c]:8333\n+[2001:41d0:d:111c::]:8333\n+[2001:44b8:4116:7801:4216:7eff:fe78:3fe4]:8333\n+[2001:470:1f08:837::2]:8333\n+[2001:470:1f08:c33::2]:8333\n+[2001:470:1f09:bca:218:7dff:fe10:be33]:8333\n+[2001:470:1f0f:22d::212:26]:8333\n+[2001:470:1f11:12d5::ae1:5611]:8333\n+[2001:470:1f14:57a::2]:8333\n+[2001:470:1f14:7d::2]:8333\n+[2001:470:1f15:57c::1]:8333\n+[2001:470:1f15:dda:3d9a:3f11:9a56:ed64]:8333\n+[2001:470:25:482::2]:8333\n+[2001:470:25:e4::2]:8333\n+[2001:470:4:26b::2]:8333\n+[2001:470:5f:5f::232]:8333\n+[2001:470:66:119::2]:8333\n+[2001:470:67:39d::71]:8333\n+[2001:470:6c4f::cafe]:8333\n+[2001:470:8:2e1::43]:8333\n+[2001:470:90a7:96::afe:6021]:8333\n+[2001:470:95c1::2]:8333\n+[2001:470:b1d0:ffff::1000]:8333\n+[2001:470:c1f2:3::201]:8333\n+[2001:470:d00d:0:3664:a9ff:fe9a:5150]:8333\n+[2001:470:e250:0:211:11ff:feb9:924c]:8333\n+[2001:4800:7817:101:be76:4eff:fe04:dc52]:8333\n+[2001:4800:7819:104:be76:4eff:fe04:7809]:8333\n+[2001:4800:7819:104:be76:4eff:fe05:c828]:8333\n+[2001:4802:7800:2:30d7:1775:ff20:1858]:8333\n+[2001:4802:7802:101:be76:4eff:fe20:256]:8333\n+[2001:4802:7802:103:be76:4eff:fe20:2de8]:8333\n+[2001:4830:1100:2e8::2]:8333\n+[2001:4ba0:fff7:181:dead::1]:8333\n+[2001:4ba0:fffa:5d::93]:8333\n+[2001:4ba0:ffff:1be:1:1005:0:1]:8335\n+[2001:4c48:110:101:216:3eff:fe24:1162]:8333\n+[2001:4dd0:f101::32]:8333\n+[2001:4dd0:ff00:867f::3]:8333\n+[2001:4dd0:ff00:9a67::9]:8333\n+[2001:4dd0:ff00:9c55:c23f:d5ff:fe6c:7ee9]:8333\n+[2001:5c0:1400:b::3cc7]:8333\n+[2001:5c0:1400:b::3d01]:8333\n+[2001:5c0:1400:b::8df]:8333\n+[2001:5c0:1501:300::3]:8333\n+[2001:610:1b19::3]:8333\n+[2001:620:500:fff0:f21f:afff:fecf:91cc]:8333\n+[2001:67c:1220:80c:ad:8de2:f7e2:c784]:8333\n+[2001:67c:21ec:1000::b]:8333\n+[2001:6f8:1296:0:76d4:35ff:feba:1d26]:8333\n+[2001:840:f000:4250:3e4a:92ff:fe6d:145f]:8333\n+[2001:8d8:840:500::39:1ae]:8333\n+[2001:980:efd8:0:21:de4a:2709:912]:8333\n+[2001:981:46:1::3]:8333\n+[2001:981:9319:2:c0:a8:c8:8]:8333\n+[2001:9d8:cafe:3::91]:8333\n+[2001:ad0:1:1:26be:5ff:fe25:959d]:8333\n+[2001:ba8:1f1:f34c::2]:8333\n+[2001:bc8:381c:100::1]:8333\n+[2002:175c:4caa::175c:4caa]:8333\n+[2002:4404:82f1:0:8d55:8fbb:15fa:f4e0]:8333\n+[2002:4475:2233:0:21f:5bff:fe33:9f70]:8333\n+[2002:596c:48c3::596c:48c3]:8333\n+[2002:8c6d:6521:9617:12bf:48ff:fed8:1724]:8333\n+[2002:a646:5e6a::1:2]:8333\n+[2002:b009:20c5::b009:20c5]:8333\n+[2400:8900::f03c:91ff:fe6e:823e]:8333\n+[2400:8900::f03c:91ff:fe70:d164]:8333\n+[2400:8901::f03c:91ff:fe37:9761]:8333\n+[2403:4200:403:2::ff]:8333\n+[2403:b800:1000:64:40a:e9ff:fe5f:94c1]:8333\n+[2403:b800:1000:64:9879:17ff:fe6a:a59f]:8333\n+[2600:3c00::f03c:91ff:fe18:59b2]:8333\n+[2600:3c00::f03c:91ff:fe37:a4b1]:8333\n+[2600:3c00::f03c:91ff:fe56:2973]:8333\n+[2600:3c00::f03c:91ff:fe6e:7297]:8333\n+[2600:3c00::f03c:91ff:fe84:8a6e]:8333\n+[2600:3c01::f03c:91ff:fe18:6adf]:8333\n+[2600:3c01::f03c:91ff:fe18:e217]:8333\n+[2600:3c01::f03c:91ff:fe33:1b31]:8333\n+[2600:3c01::f03c:91ff:fe33:2fe1]:8333\n+[2600:3c01::f03c:91ff:fe33:a03f]:8333\n+[2600:3c01::f03c:91ff:fe50:5e06]:8333\n+[2600:3c01::f03c:91ff:fe56:d645]:8333\n+[2600:3c01::f03c:91ff:fe6e:a3dc]:8333\n+[2600:3c01::f03c:91ff:fe89:a659]:8333\n+[2600:3c02::f03c:91ff:fe6e:6f0b]:8333\n+[2600:3c03::f03c:91ff:fe33:f6fb]:8333\n+[2600:3c03::f03c:91ff:fe50:5fa7]:8333\n+[2600:3c03::f03c:91ff:fe6e:1803]:8333\n+[2600:3c03::f03c:91ff:fe6e:4ac0]:8333\n+[2601:6:4800:47f:1e4e:1f4d:332c:3bf6]:8333\n+[2601:d:5400:fed:8d54:c1e8:7ed7:d45e]:8333\n+[2602:100:4b8f:6d2a:20c:29ff:feaf:c4c2]:8333\n+[2602:ffc5:1f::1f:2d61]:8333\n+[2602:ffc5:1f::1f:9211]:8333\n+[2602:ffc5::ffc5:b844]:8333\n+[2602:ffe8:100:2::457:936b]:8333\n+[2602:ffea:1001:125::2ad4]:8333\n+[2602:ffea:1001:6ff::837d]:8333\n+[2602:ffea:1001:72b::578b]:8333\n+[2602:ffea:1001:77a::9cae]:8333\n+[2602:ffea:1:2fe::6bc8]:8333\n+[2602:ffea:1:701::7968]:8333\n+[2602:ffea:1:70d::82ec]:8333\n+[2602:ffea:1:9ff::e957]:8333\n+[2602:ffea:1:a5d::4acb]:8333\n+[2602:ffea:a::24c4:d9fd]:8333\n+[2602:ffea:a::c06:ae32]:8333\n+[2604:0:c1:100:1ec1:deff:fe54:2235]:8333\n+[2604:180:1:1af::42a9]:8333\n+[2604:180::b208:398]:8333\n+[2604:2880::6072:aed]:8333\n+[2604:4080:1114:0:3285:a9ff:fe93:850c]:8333\n+[2604:7c00:17:3d0::5a4d]:8333\n+[2604:9a00:2100:a009:2::]:8333\n+[2604:a880:1:20::22a:4001]:8333\n+[2604:a880:800:10::752:f001]:8333\n+[2604:c00:88:32:216:3eff:fee4:fcca]:8333\n+[2604:c00:88:32:216:3eff:fef5:bc21]:8333\n+[2605:7980:1:2::1761:3d4e]:8333\n+[2605:e000:1417:4068:223:32ff:fe96:e2d]:8333\n+[2606:6000:a441:9903:5054:ff:fe78:66ff]:8333\n+[2606:df00:2::ae85:8fc6]:8333\n+[2607:5300:100:200::e7f]:8333\n+[2607:5300:10::a1]:8333\n+[2607:5300:60:116e::1]:8333\n+[2607:5300:60:1535::]:8333\n+[2607:5300:60:1b32::1]:8333\n+[2607:5300:60:2337::1]:8333\n+[2607:5300:60:2b90::1]:8333\n+[2607:5300:60:2d99::1]:8333\n+[2607:5300:60:3cb::1]:8333\n+[2607:5300:60:4a85::]:8333\n+[2607:5300:60:5112:0:2:4af5:63fe]:8333\n+[2607:5300:60:6dd5::]:8333\n+[2607:5300:60:a91::1]:8333\n+[2607:f1c0:820:1500::7f:3f44]:8333\n+[2607:f1c0:848:1000::48:943c]:8333\n+[2607:f948:0:1::7]:8333\n+[2607:fcd0:100:2300::4ad:e594]:8333\n+[2607:fcd0:100:2300::659e:9cb3]:8333\n+[2607:fcd0:100:2300::c74b:a8ae]:8333\n+[2607:fcd0:100:2300::d82:d8c2]:8333\n+[2607:fcd0:100:4300::8795:2fa8]:8333\n+[2607:fcd0:daaa:901::9561:e043]:8333\n+[2a00:1178:2:43:5054:ff:fee7:2eb6]:8333\n+[2a00:1328:e100:cc42:230:48ff:fe92:55d]:8333\n+[2a00:14f0:e000:80d2:cd1a::1]:8333\n+[2a00:16d8:c::5b6a:c261]:8333\n+[2a00:61e0:4083:6d01:6852:1376:e972:2091]:8333\n+[2a00:c98:2030:a02f:2::2]:8333\n+[2a01:1b0:7999:402::131]:8333\n+[2a01:1e8:e100:811c:700f:65f0:f72a:1084]:8333\n+[2a01:238:42da:c500:6546:1293:5422:ab40]:8333\n+[2a01:348:6:473::2]:8333\n+[2a01:368:e010:2::2]:8333\n+[2a01:430:17:1::ffff:549]:8333\n+[2a01:430:17:1::ffff:830]:8333\n+[2a01:488:66:1000:53a9:d04:0:1]:8333\n+[2a01:488:66:1000:57e6:578c:0:1]:8333\n+[2a01:488:66:1000:b01c:178d:0:1]:8333\n+[2a01:488:67:1000:523:fdce:0:1]:8333\n+[2a01:488:67:1000:b01c:30ab:0:1]:8333\n+[2a01:4f8:100:24aa::2]:8333\n+[2a01:4f8:100:44e7::2]:8333\n+[2a01:4f8:100:5128::2]:8333\n+[2a01:4f8:100:84a7::1:1]:8333\n+[2a01:4f8:110:516c::2]:8333\n+[2a01:4f8:110:536e::2]:8333\n+[2a01:4f8:120:62e6::2]:8333\n+[2a01:4f8:120:702e::2]:8333\n+[2a01:4f8:120:8005::2]:8333\n+[2a01:4f8:120:8203::2]:8333\n+[2a01:4f8:120:8422::2]:8333\n+[2a01:4f8:121:11eb::2]:8333\n+[2a01:4f8:121:261::2]:8333\n+[2a01:4f8:130:242b::10]:8333\n+[2a01:4f8:130:242b::5]:8333\n+[2a01:4f8:130:2468::3]:8333\n+[2a01:4f8:130:632c::2]:8333\n+[2a01:4f8:130:6366::2]:8333\n+[2a01:4f8:130:6426::2]:8333\n+[2a01:4f8:130:934f::2]:8333\n+[2a01:4f8:131:2070::2]:8333\n+[2a01:4f8:131:54a2::2]:8333\n+[2a01:4f8:140:80ad::2]:8333\n+[2a01:4f8:141:186::2]:8333\n+[2a01:4f8:150:210b::2]:8333\n+[2a01:4f8:150:2263::5]:8333\n+[2a01:4f8:150:2349::2]:8333\n+[2a01:4f8:150:61ee::2]:8333\n+[2a01:4f8:150:7088:5054:ff:fe45:bff2]:8333\n+[2a01:4f8:150:8324::2]:9001\n+[2a01:4f8:151:1d8::2]:8333\n+[2a01:4f8:151:5128::2]:8333\n+[2a01:4f8:151:6347::2]:9001\n+[2a01:4f8:161:526d::2]:8333\n+[2a01:4f8:161:9349::2]:8333\n+[2a01:4f8:162:23c6::2]:8333\n+[2a01:4f8:162:4348::2]:8333\n+[2a01:4f8:162:7345::2]:8333\n+[2a01:4f8:162:7383::2]:8333\n+[2a01:4f8:162:74e3::2]:8333\n+[2a01:4f8:190:6065::2]:8333\n+[2a01:4f8:190:6349::2]:8333\n+[2a01:4f8:190:64c9::2]:8333\n+[2a01:4f8:190:91ce::2]:8333\n+[2a01:4f8:191:2194::83]:8333\n+[2a01:4f8:191:40a1::2]:8333\n+[2a01:4f8:191:4a7::2]:8333\n+[2a01:4f8:191:63b4:5000::1]:8333\n+[2a01:4f8:191:7121::2]:8333\n+[2a01:4f8:191:83a2::2]:8333\n+[2a01:4f8:191:93c4::2]:8333\n+[2a01:4f8:192:60a9:0:1:5:2]:8333\n+[2a01:4f8:192:73b2::2]:8333\n+[2a01:4f8:192:8098::2]:8333\n+[2a01:4f8:192:db::2]:8333\n+[2a01:4f8:200:1012::2]:8333\n+[2a01:4f8:200:22e3::2]:8333\n+[2a01:4f8:200:414e::2]:8333\n+[2a01:4f8:200:63af::222]:8333\n+[2a01:4f8:200:71e3:78b4:f3ff:fead:e8cf]:8333\n+[2a01:4f8:201:5164::2]:8333\n+[2a01:4f8:201:6011::4]:8333\n+[2a01:4f8:201:60d5::2]:8333\n+[2a01:4f8:202:53c3::2]:8333\n+[2a01:4f8:210:24aa::2]:8333\n+[2a01:4f8:210:502f::2]:8333\n+[2a01:4f8:211:14cf::2]:8333\n+[2a01:4f8:211:1a59::2]:8333\n+[2a01:4f8:211:2ac1::2]:8333\n+[2a01:4f8:211:cca::2]:8333\n+[2a01:4f8:a0:22a5::2]:8333\n+[2a01:4f8:a0:5023::2]:8333\n+[2a01:4f8:a0:5243::2]:8333\n+[2a01:4f8:a0:74c8::2]:8333\n+[2a01:4f8:a0:8227::2]:8333\n+[2a01:4f8:a0:822d::2]:8333\n+[2a01:4f8:d13:2183::2]:8333\n+[2a01:608:ffff:a009:8bf5:879d:e51a:f837]:8333\n+[2a01:79d:469e:ed94:c23f:d5ff:fe65:20c5]:8333\n+[2a01:7c8:aab5:3e6:5054:ff:fed7:4e54]:8333\n+[2a01:7e00::f03c:91ff:fe18:301e]:8333\n+[2a01:7e00::f03c:91ff:fe18:7749]:8333\n+[2a01:7e00::f03c:91ff:fe33:2d67]:8333\n+[2a01:7e00::f03c:91ff:fe33:347c]:8333\n+[2a01:7e00::f03c:91ff:fe33:ae50]:8333\n+[2a01:7e00::f03c:91ff:fe56:6b5c]:8333\n+[2a01:7e00::f03c:91ff:fe56:bee6]:8333\n+[2a01:7e00::f03c:91ff:fe69:4895]:8333\n+[2a01:7e00::f03c:91ff:fe69:9912]:8333\n+[2a01:7e00::f03c:91ff:fe6e:26ee]:8333\n+[2a01:7e00::f03c:91ff:fe73:42f1]:8333\n+[2a01:7e00::f03c:91ff:fe84:434f]:8333\n+[2a01:7e00::f03c:91ff:fe84:b36b]:8333\n+[2a01:7e00::f03c:91ff:fe89:1faa]:8333\n+[2a01:7e00::f03c:91ff:fe98:816]:8333\n+[2a01:7e00::f03c:91ff:fedb:352e]:8333\n+[2a01:7e00::f03c:91ff:fedb:4a1d]:8333\n+[2a01:e34:edbb:6750:224:1dff:fe89:3897]:8333\n+[2a01:e35:2f1d:3fb0:7187:c7ba:bcfc:80ce]:8333\n+[2a01:e35:8787:96f0:9032:9297:39ae:496d]:8333\n+[2a01:e35:8a3f:47c0:c617:feff:fe3c:9fbd]:8333\n+[2a01:e35:8b66:6a0:4900:9dfd:d841:d025]:8333\n+[2a02:168:4a01::39]:8333\n+[2a02:168:5404:2:c23f:d5ff:fe6a:512e]:8333\n+[2a02:180:1:1::5b8f:538c]:8333\n+[2a02:2028:1016::2]:8333\n+[2a02:2528:503:2::14]:8333\n+[2a02:2528:503:2::15]:8333\n+[2a02:2528:ff00:81a6:21e:c5ff:fe8d:f9a5]:8333\n+[2a02:2770:5:0:21a:4aff:fee4:c7db]:8333\n+[2a02:2770:8:0:21a:4aff:fe7b:3dcd]:8333\n+[2a02:348:5e:5a29::1]:8333\n+[2a02:7aa0:1619::202f:c06a]:8333\n+[2a02:8109:8e40:35fc:ba27:ebff:feae:cf16]:8333\n+[2a02:af8:6:1500::1:130]:8333\n+[2a02:c200:0:10:1:0:6314:2222]:8333\n+[2a02:c200:0:10:2:3:3295:1]:8332\n+[2a02:c200:0:10:3:0:5449:1]:8333\n+[2a02:c200:1:10:2:3:5899:1]:8333\n+[2a02:c200:1:10::2705:1]:8333\n+[2a02:ce80:0:20::1]:8333\n+[2a02:fe0:c321:27e0:6ef0:49ff:fe11:a61d]:8333\n+[2a03:4000:2:496::8]:8333\n+[2a03:b0c0:0:1010::62:f001]:8333\n+[2a03:f80:ed16:ca7:ea75:b12d:2af:9e2a]:8333\n+3ffk7iumtx3cegbi.onion:8333\n+3hshaantu6ot4upz.onion:8333\n+45c5lc77qgpikafy.onion:8333\n+77mx2jsxaoyesz2p.onion:8333\n+7g7j54btiaxhtsiy.onion:8333\n+b6fr7dlbu2kpiysf.onion:8333\n+bitcoincfqcssig5.onion:8333\n+bitcoinostk4e4re.onion:8333\n+bmutjfrj5btseddb.onion:8333\n+drp4pvejybx2ejdr.onion:8333\n+gixnv56d63buypan.onion:8333\n+h2vlpudzphzqxutd.onion:8333\n+hhiv5pnxenvbf4am.onion:8333\n+lzxpkn6ptp3ohh63.onion:8333\n+msphsgfiqfq5stne.onion:8333\n+ncwk3lutemffcpc4.onion:8333\n+okdzjarwekbshnof.onion:8333\n+sjdomi4yb2dwkjbc.onion:8333\n+uvwozwxlihntigbb.onion:8333\n+v6ylz45dn5ybpk4d.onion:8333\n+vk3qjdehyy4dwcxw.onion:8333\n+vqpye2k5rcqvj5mq.onion:8333\n+xudkoztdfrsuyyou.onion:8333\n+z55v4ostefnwfy32.onion:8333"
      },
      {
        "sha": "98365ee505ced2410cdc7ea841bf52198b405662",
        "filename": "contrib/seeds/nodes_test.txt",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/seeds/nodes_test.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/contrib/seeds/nodes_test.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_test.txt?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -0,0 +1,11 @@\n+# List of fixed seed nodes for testnet\n+\n+# Onion nodes\n+thfsmmn2jbitcoin.onion\n+it2pj4f7657g3rhi.onion\n+nkf5e6b7pl4jfd4a.onion\n+4zhkir2ofl7orfom.onion\n+t6xj6wilh4ytvcs7.onion\n+i6y6ivorwakd7nw3.onion\n+ubqj4rsu3nqtxmtp.onion\n+"
      },
      {
        "sha": "1ba01362db645e92fa523c0c5c0203caa913e9db",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -26,13 +26,11 @@ The HTTP request and response are both handled entirely in-memory, thus making m\n With the /notxdetails/ option JSON response will only contain the transaction hash instead of the complete transaction details. The option only affects the JSON response.\n \n ####Blockheaders\n-`GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex>`\n+`GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`\n \n Given a block hash,\n Returns <COUNT> amount of blockheaders in upward direction.\n \n-JSON is not supported.\n-\n ####Chaininfos\n `GET /rest/chaininfo.json`\n "
      },
      {
        "sha": "c6da1a4586e971ff3925517b59d5575f9f438853",
        "filename": "doc/assets-attribution.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/doc/assets-attribution.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/doc/assets-attribution.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.md?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -6,7 +6,7 @@ The following is a list of assets used in the bitcoin source and their proper at\n ### Info\n * Icon Pack: Typicons (http://typicons.com)\n * Designer: Stephen Hutchings (and more)\n-* License: CC BY-SA\n+* License: MIT\n * Site: [https://github.com/stephenhutchings/typicons.font](https://github.com/stephenhutchings/typicons.font)\n \n ### Assets Used\n@@ -30,7 +30,7 @@ Jonas Schnelli\n ### Info\n * Designer: Jonas Schnelli\n * Bitcoin Icon: (based on the original bitcoin logo from Bitboy)\n-* Some icons are based on Stephan Hutchings Typicons (these are under CC BY-SA license)\n+* Some icons are based on Stephan Hutchings Typicons\n * License: MIT\n \n ### Assets Used"
      },
      {
        "sha": "5ecb9334f5481ce53eeec248aa82aca411be263d",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -25,7 +25,7 @@ Release Process\n \n ###update gitian\n \n- In order to take advantage of the new caching features in gitian, be sure to update to a recent version (e9741525c or higher is recommended)\n+ In order to take advantage of the new caching features in gitian, be sure to update to a recent version (`e9741525c` or later is recommended)\n \n ###perform gitian builds\n \n@@ -66,30 +66,29 @@ Release Process\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n \tmv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n \t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-win --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\tmv build/out/bitcoin-*.zip ../\n-\tmv build/out/bitcoin-*-win64-setup.exe inputs/bitcoin-win64-setup.exe\n-\tmv build/out/bitcoin-*-win32-setup.exe inputs/bitcoin-win32-setup.exe\n+\t./bin/gsign --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+\tmv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n+\tmv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n \t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-\tmv build/out/bitcoin-*-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n+\tmv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n \tmv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../\n \tpopd\n   Build output expected:\n \n   1. source tarball (bitcoin-${VERSION}.tar.gz)\n-  2. linux 32-bit and 64-bit binaries dist tarballs (bitcoin-${VERSION}-linux[32|64].tar.gz)\n-  3. windows 32-bit and 64-bit unsigned installers and dist zips (bitcoin-${VERSION}-win[32|64]-setup.exe, bitcoin-${VERSION}-win[32|64].zip)\n-  4. OSX unsigned installer (bitcoin-${VERSION}-osx-unsigned.dmg)\n-  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|win|osx-unsigned>/(your gitian key)/\n+  2. linux 32-bit and 64-bit dist tarballs (bitcoin-${VERSION}-linux[32|64].tar.gz)\n+  3. windows 32-bit and 64-bit unsigned installers and dist zips (bitcoin-${VERSION}-win[32|64]-setup-unsigned.exe, bitcoin-${VERSION}-win[32|64].zip)\n+  4. OSX unsigned installer and dist tarball (bitcoin-${VERSION}-osx-unsigned.dmg, bitcoin-${VERSION}-osx64.tar.gz)\n+  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your gitian key)/\n \n ###Next steps:\n \n Commit your signature to gitian.sigs:\n \n \tpushd gitian.sigs\n \tgit add ${VERSION}-linux/${SIGNER}\n-\tgit add ${VERSION}-win/${SIGNER}\n+\tgit add ${VERSION}-win-unsigned/${SIGNER}\n \tgit add ${VERSION}-osx-unsigned/${SIGNER}\n \tgit commit -a\n \tgit push  # Assuming you can push to the gitian.sigs tree\n@@ -112,8 +111,8 @@ Commit your signature to gitian.sigs:\n \tpushd ./gitian-builder\n \t./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\tmv build/out/bitcoin-win64-setup-signed.exe ../bitcoin-${VERSION}-win64-setup.exe\n-\tmv build/out/bitcoin-win32-setup-signed.exe ../bitcoin-${VERSION}-win32-setup.exe\n+\tmv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n+\tmv build/out/bitcoin-*win32-setup.exe ../bitcoin-${VERSION}-win32-setup.exe\n \tpopd\n \n Commit your signature for the signed OSX/Windows binaries:"
      },
      {
        "sha": "0ef1b1eda80d5ac39d539258768b37d74b13f93f",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -19,8 +19,8 @@ testScripts=(\n     'wallet.py'\n     'listtransactions.py'\n     'mempool_resurrect_test.py'\n-    'txn_doublespend.py'\n     'txn_doublespend.py --mineblock'\n+    'txn_clone.py'\n     'getchaintips.py'\n     'rawtransactions.py'\n     'rest.py'\n@@ -34,18 +34,21 @@ testScripts=(\n     'signrawtransactions.py'\n     'walletbackup.py'\n     'nodehandling.py'\n+    'reindex.py'\n+    'decodescript.py'\n );\n testScriptsExt=(\n     'bipdersig-p2p.py'\n     'bipdersig.py'\n     'getblocktemplate_longpoll.py'\n     'getblocktemplate_proposals.py'\n+    'txn_doublespend.py'\n+    'txn_clone.py --mineblock'\n     'pruning.py'\n     'forknotify.py'\n     'invalidateblock.py'\n     'keypool.py'\n     'receivedby.py'\n-    'reindex.py'\n     'rpcbind_test.py'\n #   'script_test.py'\n     'smartfees.py'"
      },
      {
        "sha": "ce3bc94ef7d51f1d89a73943b5cd12a80c006cd4",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "added",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -0,0 +1,116 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class DecodeScriptTest(BitcoinTestFramework):\n+    \"\"\"Tests decoding scripts via RPC command \"decodescript\".\"\"\"\n+\n+    def setup_chain(self):\n+        print('Initializing test directory ' + self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 1)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(1, self.options.tmpdir)\n+        self.is_network_split = False\n+\n+    def decodescript_script_sig(self):\n+        signature = '304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001'\n+        push_signature = '48' + signature\n+        public_key = '03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2'\n+        push_public_key = '21' + public_key\n+\n+        # below are test cases for all of the standard transaction types\n+\n+        # 1) P2PK scriptSig\n+        # the scriptSig of a public key scriptPubKey simply pushes a signature onto the stack\n+        rpc_result = self.nodes[0].decodescript(push_signature)\n+        assert_equal(signature, rpc_result['asm'])\n+\n+        # 2) P2PKH scriptSig\n+        rpc_result = self.nodes[0].decodescript(push_signature + push_public_key)\n+        assert_equal(signature + ' ' + public_key, rpc_result['asm'])\n+\n+        # 3) multisig scriptSig\n+        # this also tests the leading portion of a P2SH multisig scriptSig\n+        # OP_0 <A sig> <B sig>\n+        rpc_result = self.nodes[0].decodescript('00' + push_signature + push_signature)\n+        assert_equal('0 ' + signature + ' ' + signature, rpc_result['asm'])\n+\n+        # 4) P2SH scriptSig\n+        # an empty P2SH redeemScript is valid and makes for a very simple test case.\n+        # thus, such a spending scriptSig would just need to pass the outer redeemScript\n+        # hash test and leave true on the top of the stack.\n+        rpc_result = self.nodes[0].decodescript('5100')\n+        assert_equal('1 0', rpc_result['asm'])\n+\n+        # 5) null data scriptSig - no such thing because null data scripts can not be spent.\n+        # thus, no test case for that standard transaction type is here.\n+\n+    def decodescript_script_pub_key(self):\n+        public_key = '03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2'\n+        push_public_key = '21' + public_key\n+        public_key_hash = '11695b6cd891484c2d49ec5aa738ec2b2f897777'\n+        push_public_key_hash = '14' + public_key_hash\n+\n+        # below are test cases for all of the standard transaction types\n+\n+        # 1) P2PK scriptPubKey\n+        # <pubkey> OP_CHECKSIG\n+        rpc_result = self.nodes[0].decodescript(push_public_key + 'ac')\n+        assert_equal(public_key + ' OP_CHECKSIG', rpc_result['asm'])\n+\n+        # 2) P2PKH scriptPubKey\n+        # OP_DUP OP_HASH160 <PubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n+        rpc_result = self.nodes[0].decodescript('76a9' + push_public_key_hash + '88ac')\n+        assert_equal('OP_DUP OP_HASH160 ' + public_key_hash + ' OP_EQUALVERIFY OP_CHECKSIG', rpc_result['asm'])\n+\n+        # 3) multisig scriptPubKey\n+        # <m> <A pubkey> <B pubkey> <C pubkey> <n> OP_CHECKMULTISIG\n+        # just imagine that the pub keys used below are different.\n+        # for our purposes here it does not matter that they are the same even though it is unrealistic.\n+        rpc_result = self.nodes[0].decodescript('52' + push_public_key + push_public_key + push_public_key + '53ae')\n+        assert_equal('2 ' + public_key + ' ' + public_key + ' ' + public_key +  ' 3 OP_CHECKMULTISIG', rpc_result['asm'])\n+\n+        # 4) P2SH scriptPubKey\n+        # OP_HASH160 <Hash160(redeemScript)> OP_EQUAL.\n+        # push_public_key_hash here should actually be the hash of a redeem script.\n+        # but this works the same for purposes of this test.\n+        rpc_result = self.nodes[0].decodescript('a9' + push_public_key_hash + '87')\n+        assert_equal('OP_HASH160 ' + public_key_hash + ' OP_EQUAL', rpc_result['asm'])\n+\n+        # 5) null data scriptPubKey\n+        # use a signature look-alike here to make sure that we do not decode random data as a signature.\n+        # this matters if/when signature sighash decoding comes along.\n+        # would want to make sure that no such decoding takes place in this case.\n+        signature_imposter = '48304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001'\n+        # OP_RETURN <data>\n+        rpc_result = self.nodes[0].decodescript('6a' + signature_imposter)\n+        assert_equal('OP_RETURN ' + signature_imposter[2:], rpc_result['asm'])\n+\n+        # 6) a CLTV redeem script. redeem scripts are in-effect scriptPubKey scripts, so adding a test here.\n+        # OP_NOP2 is also known as OP_CHECKLOCKTIMEVERIFY.\n+        # just imagine that the pub keys used below are different.\n+        # for our purposes here it does not matter that they are the same even though it is unrealistic.\n+        #\n+        # OP_IF\n+        #   <receiver-pubkey> OP_CHECKSIGVERIFY\n+        # OP_ELSE\n+        #   <lock-until> OP_NOP2 OP_DROP\n+        # OP_ENDIF\n+        # <sender-pubkey> OP_CHECKSIG\n+        #\n+        # lock until block 500,000\n+        rpc_result = self.nodes[0].decodescript('63' + push_public_key + 'ad670320a107b17568' + push_public_key + 'ac')\n+        assert_equal('OP_IF ' + public_key + ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_NOP2 OP_DROP OP_ENDIF ' + public_key + ' OP_CHECKSIG', rpc_result['asm'])\n+\n+    def run_test(self):\n+        self.decodescript_script_sig()\n+        self.decodescript_script_pub_key()\n+\n+if __name__ == '__main__':\n+    DecodeScriptTest().main()\n+"
      },
      {
        "sha": "d89cfcf59bdcb5fac6d1a012c2910151c948fef3",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -48,7 +48,25 @@ def run_test(self):\n         assert_equal(len(self.nodes[2].listbanned()), 0)\n         self.nodes[2].clearbanned()\n         assert_equal(len(self.nodes[2].listbanned()), 0)\n-        \n+\n+        ##test persisted banlist\n+        self.nodes[2].setban(\"127.0.0.0/32\", \"add\")\n+        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n+        self.nodes[2].setban(\"192.168.0.1\", \"add\", 1) #ban for 1 seconds\n+        self.nodes[2].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000) #ban for 1000 seconds\n+        listBeforeShutdown = self.nodes[2].listbanned();\n+        assert_equal(\"192.168.0.1/255.255.255.255\", listBeforeShutdown[2]['address']) #must be here\n+        time.sleep(2) #make 100% sure we expired 192.168.0.1 node time\n+\n+        #stop node\n+        stop_node(self.nodes[2], 2)\n+\n+        self.nodes[2] = start_node(2, self.options.tmpdir)\n+        listAfterShutdown = self.nodes[2].listbanned();\n+        assert_equal(\"127.0.0.0/255.255.255.0\", listAfterShutdown[0]['address'])\n+        assert_equal(\"127.0.0.0/255.255.255.255\", listAfterShutdown[1]['address'])\n+        assert_equal(\"2001:4000::/ffff:e000:0:0:0:0:0:0\", listAfterShutdown[2]['address'])\n+\n         ###########################\n         # RPC disconnectnode test #\n         ###########################"
      },
      {
        "sha": "1a2d326cc3b8aa8a751355133c5f4ddc6cafd510",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 35,
        "deletions": 4,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -235,12 +235,43 @@ def run_test(self):\n         assert_equal(response_header_str.encode(\"hex\")[0:160], response_header_hex_str[0:160])\n \n         # check json format\n-        json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(json_obj['hash'], bb_hash)\n+        block_json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n+        block_json_obj = json.loads(block_json_string)\n+        assert_equal(block_json_obj['hash'], bb_hash)\n+\n+        # compare with json block header\n+        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n+        assert_equal(response_header_json.status, 200)\n+        response_header_json_str = response_header_json.read()\n+        json_obj = json.loads(response_header_json_str)\n+        assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n+        assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n+\n+        #compare with normal RPC block response\n+        rpc_block_json = self.nodes[0].getblock(bb_hash)\n+        assert_equal(json_obj[0]['hash'],               rpc_block_json['hash'])\n+        assert_equal(json_obj[0]['confirmations'],      rpc_block_json['confirmations'])\n+        assert_equal(json_obj[0]['height'],             rpc_block_json['height'])\n+        assert_equal(json_obj[0]['version'],            rpc_block_json['version'])\n+        assert_equal(json_obj[0]['merkleroot'],         rpc_block_json['merkleroot'])\n+        assert_equal(json_obj[0]['time'],               rpc_block_json['time'])\n+        assert_equal(json_obj[0]['nonce'],              rpc_block_json['nonce'])\n+        assert_equal(json_obj[0]['bits'],               rpc_block_json['bits'])\n+        assert_equal(json_obj[0]['difficulty'],         rpc_block_json['difficulty'])\n+        assert_equal(json_obj[0]['chainwork'],          rpc_block_json['chainwork'])\n+        assert_equal(json_obj[0]['previousblockhash'],  rpc_block_json['previousblockhash'])\n+\n+        #see if we can get 5 headers in one response\n+        self.nodes[1].generate(5)\n+        self.sync_all()\n+        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n+        assert_equal(response_header_json.status, 200)\n+        response_header_json_str = response_header_json.read()\n+        json_obj = json.loads(response_header_json_str)\n+        assert_equal(len(json_obj), 5) #now we should have 5 header objects\n \n         # do tx test\n-        tx_hash = json_obj['tx'][0]['txid'];\n+        tx_hash = block_json_obj['tx'][0]['txid'];\n         json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"json\")\n         json_obj = json.loads(json_string)\n         assert_equal(json_obj['txid'], tx_hash)"
      },
      {
        "sha": "e8ced0e5bbd7b3090cfc49f463801beb6aee76a6",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "added",
        "additions": 169,
        "deletions": 0,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -0,0 +1,169 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test proper accounting with an equivalent malleability clone\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.authproxy import AuthServiceProxy, JSONRPCException\n+from decimal import Decimal\n+from test_framework.util import *\n+import os\n+import shutil\n+\n+class TxnMallTest(BitcoinTestFramework):\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n+                          help=\"Test double-spend of 1-confirmed transaction\")\n+\n+    def setup_network(self):\n+        # Start with split network:\n+        return super(TxnMallTest, self).setup_network(True)\n+\n+    def run_test(self):\n+        # All nodes should start with 1,250 BTC:\n+        starting_balance = 1250\n+        for i in range(4):\n+            assert_equal(self.nodes[i].getbalance(), starting_balance)\n+            self.nodes[i].getnewaddress(\"\")  # bug workaround, coins generated assigned to first getnewaddress!\n+\n+        # Assign coins to foo and bar accounts:\n+        self.nodes[0].settxfee(.001)\n+\n+        node0_address_foo = self.nodes[0].getnewaddress(\"foo\")\n+        fund_foo_txid = self.nodes[0].sendfrom(\"\", node0_address_foo, 1219)\n+        fund_foo_tx = self.nodes[0].gettransaction(fund_foo_txid)\n+\n+        node0_address_bar = self.nodes[0].getnewaddress(\"bar\")\n+        fund_bar_txid = self.nodes[0].sendfrom(\"\", node0_address_bar, 29)\n+        fund_bar_tx = self.nodes[0].gettransaction(fund_bar_txid)\n+\n+        assert_equal(self.nodes[0].getbalance(\"\"),\n+                     starting_balance - 1219 - 29 + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"])\n+\n+        # Coins are sent to node1_address\n+        node1_address = self.nodes[1].getnewaddress(\"from0\")\n+\n+        # Send tx1, and another transaction tx2 that won't be cloned \n+        txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 40, 0)\n+        txid2 = self.nodes[0].sendfrom(\"bar\", node1_address, 20, 0)\n+\n+        # Construct a clone of tx1, to be malleated \n+        rawtx1 = self.nodes[0].getrawtransaction(txid1,1)\n+        clone_inputs = [{\"txid\":rawtx1[\"vin\"][0][\"txid\"],\"vout\":rawtx1[\"vin\"][0][\"vout\"]}]\n+        clone_outputs = {rawtx1[\"vout\"][0][\"scriptPubKey\"][\"addresses\"][0]:rawtx1[\"vout\"][0][\"value\"],\n+                         rawtx1[\"vout\"][1][\"scriptPubKey\"][\"addresses\"][0]:rawtx1[\"vout\"][1][\"value\"]}\n+        clone_raw = self.nodes[0].createrawtransaction(clone_inputs, clone_outputs)\n+\n+        # 3 hex manipulations on the clone are required\n+\n+        # manipulation 1. sequence is at version+#inputs+input+sigstub\n+        posseq = 2*(4+1+36+1)\n+        seqbe = '%08x' % rawtx1[\"vin\"][0][\"sequence\"]\n+        clone_raw = clone_raw[:posseq] + seqbe[6:8] + seqbe[4:6] + seqbe[2:4] + seqbe[0:2] + clone_raw[posseq + 8:]\n+\n+        # manipulation 2. createrawtransaction randomizes the order of its outputs, so swap them if necessary.\n+        # output 0 is at version+#inputs+input+sigstub+sequence+#outputs\n+        # 40 BTC serialized is 00286bee00000000\n+        pos0 = 2*(4+1+36+1+4+1)\n+        hex40 = \"00286bee00000000\"\n+        output_len = 16 + 2 + 2 * int(\"0x\" + clone_raw[pos0 + 16 : pos0 + 16 + 2], 0)\n+        if (rawtx1[\"vout\"][0][\"value\"] == 40 and clone_raw[pos0 : pos0 + 16] != hex40 or\n+            rawtx1[\"vout\"][0][\"value\"] != 40 and clone_raw[pos0 : pos0 + 16] == hex40):\n+            output0 = clone_raw[pos0 : pos0 + output_len]\n+            output1 = clone_raw[pos0 + output_len : pos0 + 2 * output_len]\n+            clone_raw = clone_raw[:pos0] + output1 + output0 + clone_raw[pos0 + 2 * output_len:]\n+\n+        # manipulation 3. locktime is after outputs\n+        poslt = pos0 + 2 * output_len\n+        ltbe = '%08x' % rawtx1[\"locktime\"]\n+        clone_raw = clone_raw[:poslt] + ltbe[6:8] + ltbe[4:6] + ltbe[2:4] + ltbe[0:2] + clone_raw[poslt + 8:]\n+\n+        # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n+        # Don't send the clone anywhere yet\n+        tx1_clone = self.nodes[0].signrawtransaction(clone_raw, None, None, \"ALL|ANYONECANPAY\")\n+        assert_equal(tx1_clone[\"complete\"], True)\n+\n+        # Have node0 mine a block, if requested:\n+        if (self.options.mine_block):\n+            self.nodes[0].generate(1)\n+            sync_blocks(self.nodes[0:2])\n+\n+        tx1 = self.nodes[0].gettransaction(txid1)\n+        tx2 = self.nodes[0].gettransaction(txid2)\n+\n+        # Node0's balance should be starting balance, plus 50BTC for another\n+        # matured block, minus tx1 and tx2 amounts, and minus transaction fees:\n+        expected = starting_balance + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"]\n+        if self.options.mine_block: expected += 50\n+        expected += tx1[\"amount\"] + tx1[\"fee\"]\n+        expected += tx2[\"amount\"] + tx2[\"fee\"]\n+        assert_equal(self.nodes[0].getbalance(), expected)\n+\n+        # foo and bar accounts should be debited:\n+        assert_equal(self.nodes[0].getbalance(\"foo\", 0), 1219 + tx1[\"amount\"] + tx1[\"fee\"])\n+        assert_equal(self.nodes[0].getbalance(\"bar\", 0), 29 + tx2[\"amount\"] + tx2[\"fee\"])\n+\n+        if self.options.mine_block:\n+            assert_equal(tx1[\"confirmations\"], 1)\n+            assert_equal(tx2[\"confirmations\"], 1)\n+            # Node1's \"from0\" balance should be both transaction amounts:\n+            assert_equal(self.nodes[1].getbalance(\"from0\"), -(tx1[\"amount\"] + tx2[\"amount\"]))\n+        else:\n+            assert_equal(tx1[\"confirmations\"], 0)\n+            assert_equal(tx2[\"confirmations\"], 0)\n+\n+        # Send clone and its parent to miner\n+        self.nodes[2].sendrawtransaction(fund_foo_tx[\"hex\"])\n+        txid1_clone = self.nodes[2].sendrawtransaction(tx1_clone[\"hex\"])\n+        # ... mine a block...\n+        self.nodes[2].generate(1)\n+\n+        # Reconnect the split network, and sync chain:\n+        connect_nodes(self.nodes[1], 2)\n+        self.nodes[2].sendrawtransaction(fund_bar_tx[\"hex\"])\n+        self.nodes[2].sendrawtransaction(tx2[\"hex\"])\n+        self.nodes[2].generate(1)  # Mine another block to make sure we sync\n+        sync_blocks(self.nodes)\n+\n+        # Re-fetch transaction info:\n+        tx1 = self.nodes[0].gettransaction(txid1)\n+        tx1_clone = self.nodes[0].gettransaction(txid1_clone)\n+        tx2 = self.nodes[0].gettransaction(txid2)\n+        \n+        # Verify expected confirmations\n+        assert_equal(tx1[\"confirmations\"], -1)\n+        assert_equal(tx1_clone[\"confirmations\"], 2)\n+        assert_equal(tx2[\"confirmations\"], 1)\n+\n+        # Check node0's total balance; should be same as before the clone, + 100 BTC for 2 matured,\n+        # less possible orphaned matured subsidy\n+        expected += 100\n+        if (self.options.mine_block): \n+            expected -= 50\n+        assert_equal(self.nodes[0].getbalance(), expected)\n+        assert_equal(self.nodes[0].getbalance(\"*\", 0), expected)\n+\n+        # Check node0's individual account balances.\n+        # \"foo\" should have been debited by the equivalent clone of tx1\n+        assert_equal(self.nodes[0].getbalance(\"foo\"), 1219 + tx1[\"amount\"] + tx1[\"fee\"])\n+        # \"bar\" should have been debited by (possibly unconfirmed) tx2\n+        assert_equal(self.nodes[0].getbalance(\"bar\", 0), 29 + tx2[\"amount\"] + tx2[\"fee\"])\n+        # \"\" should have starting balance, less funding txes, plus subsidies\n+        assert_equal(self.nodes[0].getbalance(\"\", 0), starting_balance\n+                                                                - 1219\n+                                                                + fund_foo_tx[\"fee\"]\n+                                                                -   29\n+                                                                + fund_bar_tx[\"fee\"]\n+                                                                +  100)\n+\n+        # Node1's \"from0\" account balance\n+        assert_equal(self.nodes[1].getbalance(\"from0\", 0), -(tx1[\"amount\"] + tx2[\"amount\"]))\n+\n+if __name__ == '__main__':\n+    TxnMallTest().main()\n+"
      },
      {
        "sha": "36081127b4dbd4f14cbabedbe73f005163ad31cc",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 52,
        "deletions": 27,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Test proper accounting with malleable transactions\n+# Test proper accounting with a double-spend conflict\n #\n \n from test_framework.test_framework import BitcoinTestFramework\n@@ -31,28 +31,40 @@ def run_test(self):\n             self.nodes[i].getnewaddress(\"\")  # bug workaround, coins generated assigned to first getnewaddress!\n         \n         # Assign coins to foo and bar accounts:\n-        self.nodes[0].move(\"\", \"foo\", 1220)\n-        self.nodes[0].move(\"\", \"bar\", 30)\n-        assert_equal(self.nodes[0].getbalance(\"\"), 0)\n+        node0_address_foo = self.nodes[0].getnewaddress(\"foo\")\n+        fund_foo_txid = self.nodes[0].sendfrom(\"\", node0_address_foo, 1219)\n+        fund_foo_tx = self.nodes[0].gettransaction(fund_foo_txid)\n+\n+        node0_address_bar = self.nodes[0].getnewaddress(\"bar\")\n+        fund_bar_txid = self.nodes[0].sendfrom(\"\", node0_address_bar, 29)\n+        fund_bar_tx = self.nodes[0].gettransaction(fund_bar_txid)\n+\n+        assert_equal(self.nodes[0].getbalance(\"\"),\n+                     starting_balance - 1219 - 29 + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"])\n \n         # Coins are sent to node1_address\n         node1_address = self.nodes[1].getnewaddress(\"from0\")\n \n-        # First: use raw transaction API to send 1210 BTC to node1_address,\n+        # First: use raw transaction API to send 1240 BTC to node1_address,\n         # but don't broadcast:\n-        (total_in, inputs) = gather_inputs(self.nodes[0], 1210)\n-        change_address = self.nodes[0].getnewaddress(\"foo\")\n+        doublespend_fee = Decimal('-.02')\n+        rawtx_input_0 = {}\n+        rawtx_input_0[\"txid\"] = fund_foo_txid\n+        rawtx_input_0[\"vout\"] = find_output(self.nodes[0], fund_foo_txid, 1219)\n+        rawtx_input_1 = {}\n+        rawtx_input_1[\"txid\"] = fund_bar_txid\n+        rawtx_input_1[\"vout\"] = find_output(self.nodes[0], fund_bar_txid, 29)\n+        inputs = [rawtx_input_0, rawtx_input_1]\n+        change_address = self.nodes[0].getnewaddress()\n         outputs = {}\n-        outputs[change_address] = 40\n-        outputs[node1_address] = 1210\n+        outputs[node1_address] = 1240\n+        outputs[change_address] = 1248 - 1240 + doublespend_fee\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n         doublespend = self.nodes[0].signrawtransaction(rawtx)\n         assert_equal(doublespend[\"complete\"], True)\n \n-        # Create two transaction from node[0] to node[1]; the\n-        # second must spend change from the first because the first\n-        # spends all mature inputs:\n-        txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 1210, 0)\n+        # Create two spends using 1 50 BTC coin each\n+        txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 40, 0)\n         txid2 = self.nodes[0].sendfrom(\"bar\", node1_address, 20, 0)\n         \n         # Have node0 mine a block:\n@@ -64,16 +76,16 @@ def run_test(self):\n         tx2 = self.nodes[0].gettransaction(txid2)\n \n         # Node0's balance should be starting balance, plus 50BTC for another\n-        # matured block, minus 1210, minus 20, and minus transaction fees:\n-        expected = starting_balance\n+        # matured block, minus 40, minus 20, and minus transaction fees:\n+        expected = starting_balance + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"]\n         if self.options.mine_block: expected += 50\n         expected += tx1[\"amount\"] + tx1[\"fee\"]\n         expected += tx2[\"amount\"] + tx2[\"fee\"]\n         assert_equal(self.nodes[0].getbalance(), expected)\n \n         # foo and bar accounts should be debited:\n-        assert_equal(self.nodes[0].getbalance(\"foo\"), 1220+tx1[\"amount\"]+tx1[\"fee\"])\n-        assert_equal(self.nodes[0].getbalance(\"bar\"), 30+tx2[\"amount\"]+tx2[\"fee\"])\n+        assert_equal(self.nodes[0].getbalance(\"foo\", 0), 1219+tx1[\"amount\"]+tx1[\"fee\"])\n+        assert_equal(self.nodes[0].getbalance(\"bar\", 0), 29+tx2[\"amount\"]+tx2[\"fee\"])\n \n         if self.options.mine_block:\n             assert_equal(tx1[\"confirmations\"], 1)\n@@ -84,8 +96,10 @@ def run_test(self):\n             assert_equal(tx1[\"confirmations\"], 0)\n             assert_equal(tx2[\"confirmations\"], 0)\n         \n-        # Now give doublespend to miner:\n-        mutated_txid = self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n+        # Now give doublespend and its parents to miner:\n+        self.nodes[2].sendrawtransaction(fund_foo_tx[\"hex\"])\n+        self.nodes[2].sendrawtransaction(fund_bar_tx[\"hex\"])\n+        self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n         # ... mine a block...\n         self.nodes[2].generate(1)\n \n@@ -103,17 +117,28 @@ def run_test(self):\n         assert_equal(tx2[\"confirmations\"], -1)\n \n         # Node0's total balance should be starting balance, plus 100BTC for \n-        # two more matured blocks, minus 1210 for the double-spend:\n-        expected = starting_balance + 100 - 1210\n+        # two more matured blocks, minus 1240 for the double-spend, plus fees (which are\n+        # negative):\n+        expected = starting_balance + 100 - 1240 + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"] + doublespend_fee\n         assert_equal(self.nodes[0].getbalance(), expected)\n         assert_equal(self.nodes[0].getbalance(\"*\"), expected)\n \n-        # foo account should be debited, but bar account should not:\n-        assert_equal(self.nodes[0].getbalance(\"foo\"), 1220-1210)\n-        assert_equal(self.nodes[0].getbalance(\"bar\"), 30)\n-\n-        # Node1's \"from\" account balance should be just the mutated send:\n-        assert_equal(self.nodes[1].getbalance(\"from0\"), 1210)\n+        # Final \"\" balance is starting_balance - amount moved to accounts - doublespend + subsidies +\n+        # fees (which are negative)\n+        assert_equal(self.nodes[0].getbalance(\"foo\"), 1219)\n+        assert_equal(self.nodes[0].getbalance(\"bar\"), 29)\n+        assert_equal(self.nodes[0].getbalance(\"\"), starting_balance\n+                                                              -1219\n+                                                              -  29\n+                                                              -1240\n+                                                              + 100\n+                                                              + fund_foo_tx[\"fee\"]\n+                                                              + fund_bar_tx[\"fee\"]\n+                                                              + doublespend_fee)\n+\n+        # Node1's \"from0\" account balance should be just the doublespend:\n+        assert_equal(self.nodes[1].getbalance(\"from0\"), 1240)\n \n if __name__ == '__main__':\n     TxnMallTest().main()\n+"
      },
      {
        "sha": "3dba6d8a6482996b4e9fc9cd4c134b41aecae080",
        "filename": "share/seeds/nodes_main.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 540,
        "changes": 540,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362bf769edc6f15495a78461902d54d649c83c08/share/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362bf769edc6f15495a78461902d54d649c83c08/share/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/seeds/nodes_main.txt?ref=362bf769edc6f15495a78461902d54d649c83c08",
        "patch": "@@ -1,540 +0,0 @@\n-# List of fixed seed nodes for main network\n-\n-# IPv4 nodes (generated using contrib/seeds/makeseeds.py)\n-1.33.197.110\n-1.34.180.245\n-1.202.128.218\n-2.35.195.25\n-5.100.123.19\n-5.175.145.169\n-5.199.133.193\n-5.199.151.10\n-5.228.1.230\n-14.200.200.145\n-18.228.0.188\n-18.228.0.200\n-23.30.243.153\n-23.88.232.49\n-23.99.105.9\n-23.226.137.208\n-23.227.177.161\n-23.227.191.50\n-23.229.45.32\n-23.236.144.69\n-23.253.148.113\n-23.253.241.22\n-23.255.227.231\n-24.20.205.222\n-24.23.120.252\n-24.94.98.96\n-24.98.95.201\n-24.111.90.55\n-24.119.119.105\n-24.138.25.149\n-31.3.214.45\n-31.186.87.46\n-31.186.101.98\n-31.186.250.186\n-31.204.153.107\n-37.44.16.231\n-37.44.44.11\n-37.120.168.204\n-37.143.86.26\n-37.187.75.24\n-37.188.68.169\n-37.192.95.150\n-37.201.246.116\n-37.205.10.140\n-46.10.210.17\n-46.19.138.154\n-46.28.204.123\n-46.28.205.67\n-46.38.235.229\n-46.163.76.230\n-46.166.162.91\n-46.173.190.50\n-46.227.66.132\n-46.229.238.187\n-46.236.116.209\n-47.55.14.65\n-50.7.252.229\n-50.46.159.91\n-50.78.49.181\n-50.78.231.57\n-50.79.153.65\n-50.116.34.44\n-50.126.86.253\n-50.142.41.23\n-50.199.113.193\n-50.200.78.107\n-50.206.138.177\n-50.252.52.49\n-54.165.25.75\n-54.169.107.40\n-54.179.190.56\n-54.187.82.121\n-54.246.85.246\n-58.74.7.205\n-58.96.183.121\n-61.62.58.38\n-61.63.91.72\n-61.63.91.112\n-61.72.211.228\n-62.43.40.154\n-62.43.130.178\n-62.80.185.213\n-62.109.49.26\n-62.173.139.58\n-62.181.238.186\n-62.210.114.127\n-63.141.228.138\n-63.153.213.78\n-63.223.84.145\n-63.251.88.112\n-64.31.110.50\n-64.34.121.45\n-64.114.6.42\n-64.140.125.98\n-64.156.193.100\n-65.30.47.116\n-65.35.132.177\n-65.96.193.165\n-65.111.189.26\n-66.68.10.30\n-66.114.33.250\n-66.130.46.63\n-66.175.215.135\n-66.190.253.165\n-66.194.38.254\n-66.244.98.111\n-67.162.238.30\n-67.169.255.17\n-67.183.173.25\n-67.219.233.140\n-67.227.240.115\n-67.247.222.71\n-68.43.114.66\n-68.52.33.36\n-68.198.245.241\n-69.12.226.165\n-69.13.198.188\n-69.15.179.62\n-69.39.239.47\n-69.47.45.87\n-69.62.217.206\n-69.64.42.31\n-69.64.81.61\n-69.67.219.200\n-69.90.132.157\n-69.94.30.177\n-69.136.175.241\n-70.61.97.228\n-70.123.118.132\n-71.59.152.182\n-71.198.248.151\n-71.200.242.89\n-71.225.179.157\n-72.14.187.51\n-72.38.34.180\n-72.52.72.187\n-72.91.144.182\n-72.167.49.217\n-72.201.243.55\n-72.223.60.249\n-72.228.153.102\n-73.26.101.228\n-73.50.158.200\n-73.181.204.170\n-74.57.199.180\n-74.63.222.226\n-74.81.231.21\n-74.193.126.82\n-74.207.235.164\n-75.83.197.114\n-75.144.114.9\n-76.112.5.247\n-76.174.20.247\n-77.37.240.142\n-77.57.202.107\n-77.172.123.53\n-77.221.91.253\n-77.235.48.48\n-77.245.78.2\n-78.8.58.249\n-78.27.191.182\n-78.129.236.141\n-78.131.88.47\n-78.157.205.6\n-79.132.230.144\n-79.143.188.155\n-79.160.221.140\n-79.161.111.114\n-80.100.189.3\n-80.147.140.121\n-80.203.75.133\n-80.220.99.227\n-80.222.20.169\n-80.241.1.7\n-81.23.191.243\n-81.38.11.202\n-81.80.9.71\n-81.110.213.165\n-81.133.155.237\n-81.171.34.37\n-81.181.155.180\n-82.39.156.137\n-82.73.161.95\n-82.130.45.40\n-82.165.153.47\n-82.168.128.133\n-82.179.225.118\n-82.194.245.158\n-82.199.102.10\n-82.211.30.243\n-82.217.133.145\n-82.221.128.35\n-82.221.131.177\n-82.233.225.205\n-83.0.249.146\n-83.89.31.249\n-83.128.29.231\n-83.128.253.142\n-83.143.130.56\n-83.150.2.99\n-83.150.9.196\n-83.161.64.45\n-83.212.103.212\n-83.212.111.114\n-83.246.75.8\n-83.254.81.31\n-83.254.150.54\n-84.2.34.104\n-84.15.61.60\n-84.17.25.135\n-84.42.144.19\n-84.212.210.135\n-84.215.165.231\n-84.238.140.176\n-84.240.31.184\n-85.25.214.137\n-85.139.163.132\n-85.199.4.228\n-85.214.61.209\n-85.214.108.77\n-86.123.16.17\n-87.48.42.199\n-87.104.168.104\n-87.229.73.171\n-87.236.196.77\n-88.97.56.98\n-88.134.178.89\n-88.150.233.19\n-88.168.133.3\n-88.208.18.246\n-88.208.33.202\n-89.18.28.21\n-89.85.220.84\n-89.163.227.28\n-89.184.83.60\n-89.231.96.83\n-89.236.49.117\n-91.90.66.209\n-91.106.194.97\n-91.134.75.115\n-91.152.193.36\n-91.152.219.35\n-91.197.10.234\n-91.209.77.101\n-91.210.106.147\n-91.214.200.205\n-91.223.115.38\n-91.234.48.232\n-91.250.86.18\n-92.27.7.209\n-92.255.207.73\n-93.74.163.234\n-93.84.114.106\n-93.152.166.29\n-93.171.216.221\n-93.185.177.71\n-94.19.12.244\n-94.42.115.50\n-94.79.177.206\n-94.136.147.119\n-94.143.245.5\n-94.188.50.39\n-94.190.227.112\n-94.198.135.29\n-94.226.107.86\n-94.242.219.90\n-94.242.229.168\n-94.244.160.84\n-95.31.10.209\n-95.85.25.41\n-95.105.161.136\n-95.154.165.45\n-95.154.200.216\n-95.167.109.125\n-95.211.125.231\n-95.211.216.235\n-96.33.25.17\n-96.43.130.178\n-97.118.8.236\n-98.102.6.125\n-98.202.20.45\n-98.217.125.225\n-98.234.210.111\n-98.237.20.123\n-98.255.144.176\n-99.113.64.43\n-99.229.22.8\n-103.1.212.19\n-103.30.42.189\n-103.224.165.48\n-103.243.94.140\n-104.131.107.107\n-104.131.116.184\n-104.143.0.156\n-104.219.184.9\n-106.185.38.174\n-107.6.4.145\n-107.150.8.27\n-107.150.33.20\n-107.170.228.129\n-107.170.240.173\n-108.51.20.86\n-108.61.149.222\n-108.61.151.172\n-108.161.129.247\n-108.170.140.21\n-109.60.211.216\n-109.73.42.36\n-109.73.172.138\n-109.163.235.239\n-109.190.196.220\n-109.201.135.216\n-109.228.152.2\n-109.228.154.81\n-109.230.220.125\n-109.234.156.218\n-109.235.49.27\n-109.235.69.84\n-112.124.71.0\n-113.146.68.251\n-115.29.17.82\n-115.70.176.17\n-117.41.162.184\n-118.27.8.170\n-119.230.7.211\n-119.246.71.52\n-121.172.8.100\n-122.128.109.148\n-123.231.224.63\n-128.175.195.31\n-128.199.164.96\n-128.199.254.244\n-129.97.69.76\n-129.123.7.7\n-129.123.7.39\n-129.186.17.17\n-131.247.169.190\n-133.242.209.63\n-134.102.94.38\n-134.119.17.145\n-137.116.160.176\n-137.226.34.42\n-138.210.217.170\n-141.255.166.194\n-143.215.129.126\n-144.76.244.19\n-146.148.52.162\n-146.148.80.57\n-146.185.19.30\n-146.185.142.86\n-146.185.253.51\n-148.251.6.214\n-149.154.155.235\n-149.210.133.244\n-151.224.248.252\n-153.121.75.229\n-153.127.251.67\n-154.20.2.139\n-157.13.61.5\n-158.58.173.48\n-159.253.23.132\n-162.209.110.218\n-162.213.254.205\n-162.239.254.100\n-162.242.150.39\n-162.243.81.138\n-162.243.235.56\n-162.244.79.16\n-162.245.217.119\n-162.248.102.117\n-162.251.108.53\n-162.254.149.139\n-162.255.116.78\n-166.70.94.106\n-167.88.45.124\n-167.88.120.210\n-173.26.49.43\n-173.30.14.6\n-173.80.114.197\n-173.167.214.243\n-173.208.219.108\n-173.220.67.156\n-173.236.101.34\n-173.246.107.34\n-173.255.237.241\n-174.2.213.209\n-174.51.23.224\n-174.51.123.159\n-174.57.212.121\n-174.109.33.28\n-175.126.124.91\n-175.126.124.92\n-176.10.116.242\n-176.36.35.126\n-176.36.99.222\n-176.124.110.47\n-176.194.33.44\n-176.223.201.198\n-178.62.26.83\n-178.62.36.48\n-178.62.212.141\n-178.62.254.59\n-178.78.250.3\n-178.155.86.226\n-178.175.134.35\n-178.248.111.4\n-178.254.1.170\n-178.254.34.161\n-179.43.114.14\n-182.213.208.28\n-184.68.2.46\n-184.72.238.42\n-184.94.226.34\n-184.94.227.58\n-184.107.139.58\n-184.107.206.45\n-185.10.48.117\n-185.21.216.156\n-185.38.47.224\n-185.45.192.129\n-185.53.129.230\n-185.53.131.114\n-185.55.53.61\n-185.55.53.63\n-185.61.119.2\n-185.61.148.203\n-186.2.167.23\n-188.92.75.178\n-188.122.92.134\n-188.138.9.208\n-188.165.209.148\n-188.226.206.239\n-190.10.8.124\n-190.10.10.147\n-192.0.130.142\n-192.3.89.159\n-192.73.234.138\n-192.75.95.107\n-192.95.100.102\n-192.155.84.181\n-192.169.233.206\n-192.198.93.86\n-192.227.135.216\n-193.0.109.3\n-193.77.50.208\n-193.109.68.62\n-193.150.121.37\n-193.224.69.98\n-194.79.8.37\n-194.141.86.10\n-195.12.180.94\n-195.56.63.10\n-195.116.93.93\n-195.154.174.226\n-195.159.111.98\n-195.169.138.2\n-195.189.126.35\n-195.197.175.190\n-197.242.93.82\n-198.11.214.147\n-198.49.41.21\n-199.33.124.186\n-199.204.186.146\n-199.233.238.115\n-199.241.189.66\n-202.60.68.242\n-202.60.69.232\n-203.183.151.39\n-203.219.14.204\n-204.44.123.109\n-204.44.123.162\n-204.45.120.178\n-206.190.134.44\n-206.248.184.127\n-207.244.73.8\n-208.66.30.27\n-209.81.9.223\n-209.105.243.229\n-209.126.70.159\n-209.140.30.169\n-209.165.128.235\n-209.190.2.242\n-210.66.254.236\n-210.73.27.33\n-211.72.66.229\n-212.25.37.124\n-212.71.235.114\n-212.71.252.109\n-212.114.48.31\n-212.174.151.118\n-213.66.205.194\n-213.129.248.139\n-213.136.87.34\n-213.165.82.133\n-213.167.17.6\n-213.179.158.253\n-213.189.53.125\n-213.222.208.93\n-216.49.158.161\n-216.55.143.154\n-216.131.91.100\n-216.245.206.181\n-216.250.138.230\n-217.11.225.189\n-217.23.6.133\n-217.75.88.178\n-217.172.143.140\n-217.195.169.209\n-217.196.248.106\n-219.138.161.162\n-222.167.248.90\n-223.18.254.55\n-\n-# Onion nodes\n-bitcoinostk4e4re.onion:8333\n-5k4vwyy5stro33fb.onion:8333\n-zy3kdqowmrb7xm7h.onion:8333\n-e3tn727fywnioxrc.onion:8333\n-kjy2eqzk4zwi5zd3.onion:8333\n-pt2awtcs2ulm75ig.onion:8333\n-td7tgof3imei3fm6.onion:8333\n-czsbwh4pq4mh3izl.onion:8333\n-xdnigz4qn5dbbw2t.onion:8333\n-ymnsfdejmc74vcfb.onion:7033\n-jxrvw5iqizppbgml.onion:8333\n-bk5ejfe56xakvtkk.onion:8333\n-szsm43ou7otwwyfv.onion:8333\n-5ghqw4wj6hpgfvdg.onion:8333\n-evolynhit7shzeet.onion:8333\n-4crhf372poejlc44.onion:8333\n-tfu4kqfhsw5slqp2.onion:8333\n-i2r5tbaizb75h26f.onion:8333\n-btcnet3utgzyz2bf.onion:8333\n-vso3r6cmjoomhhgg.onion:8333\n-pqosrh6wfaucet32.onion:8333\n-zy3kdqowmrb7xm7h.onion:8333\n-r4de4zf4lyniu4mx.onion:8444"
      },
      {
        "sha": "71782836feb433d40f4ea56020099b42193aaee7",
        "filename": "share/seeds/nodes_test.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362bf769edc6f15495a78461902d54d649c83c08/share/seeds/nodes_test.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362bf769edc6f15495a78461902d54d649c83c08/share/seeds/nodes_test.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/seeds/nodes_test.txt?ref=362bf769edc6f15495a78461902d54d649c83c08",
        "patch": "@@ -1,5 +0,0 @@\n-# List of fixed seed nodes for testnet\n-\n-# Onion nodes\n-thfsmmn2jbitcoin.onion\n-it2pj4f7657g3rhi.onion"
      },
      {
        "sha": "b82c6dc37abad125f713b45cdd97be9b1aa19ee6",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -111,6 +111,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   noui.h \\\n   policy/fees.h \\\n+  policy/policy.h \\\n   pow.h \\\n   primitives/block.h \\\n   primitives/transaction.h \\\n@@ -176,6 +177,7 @@ libbitcoin_server_a_SOURCES = \\\n   net.cpp \\\n   noui.cpp \\\n   policy/fees.cpp \\\n+  policy/policy.cpp \\\n   pow.cpp \\\n   rest.cpp \\\n   rpcblockchain.cpp \\"
      },
      {
        "sha": "903777ba510844f5dca1f0aa23889e0aaed48d63",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -190,6 +190,15 @@ int CommandLineRPC(int argc, char *argv[])\n                         throw CConnectionFailed(\"server in warmup\");\n                     strPrint = \"error: \" + error.write();\n                     nRet = abs(code);\n+                    if (error.isObject())\n+                    {\n+                        UniValue errCode = find_value(error, \"code\");\n+                        UniValue errMsg  = find_value(error, \"message\");\n+                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n+\n+                        if (errMsg.isStr())\n+                            strPrint += \"error message:\\n\"+errMsg.get_str();\n+                    }\n                 } else {\n                     // Result\n                     if (result.isNull())"
      },
      {
        "sha": "9ad57d5c6f3652efdc3c38629ebf5be90ad35b84",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -8,6 +8,7 @@\n #include \"consensus/consensus.h\"\n #include \"core_io.h\"\n #include \"keystore.h\"\n+#include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "cd31f98c5944061f7b51e67014284be8ffb86bef",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -50,7 +50,6 @@ class CMainParams : public CChainParams {\n         pchMessageStart[3] = 0xd9;\n         vAlertPubKey = ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\");\n         nDefaultPort = 8333;\n-        nMinerThreads = 0;\n         nPruneAfterHeight = 100000;\n \n         /**\n@@ -147,7 +146,6 @@ class CTestNetParams : public CMainParams {\n         pchMessageStart[3] = 0x07;\n         vAlertPubKey = ParseHex(\"04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a\");\n         nDefaultPort = 18333;\n-        nMinerThreads = 0;\n         nPruneAfterHeight = 1000;\n \n         //! Modify the testnet genesis block so the timestamp is valid for a later start.\n@@ -206,7 +204,6 @@ class CRegTestParams : public CTestNetParams {\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n-        nMinerThreads = 1;\n         genesis.nTime = 1296688602;\n         genesis.nBits = 0x207fffff;\n         genesis.nNonce = 2;"
      },
      {
        "sha": "c10d6d6467cd44eb7a2bc512fb46ce5be2647865",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -50,8 +50,6 @@ class CChainParams\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n \n-    /** Used if GenerateBitcoins is called with a negative number of threads */\n-    int DefaultMinerThreads() const { return nMinerThreads; }\n     const CBlock& GenesisBlock() const { return genesis; }\n     bool RequireRPCPassword() const { return fRequireRPCPassword; }\n     /** Make miner wait to have peers to avoid wasting work */\n@@ -79,7 +77,6 @@ class CChainParams\n     //! Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;\n-    int nMinerThreads;\n     uint64_t nPruneAfterHeight;\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];"
      },
      {
        "sha": "423362859f34bd39ed6262bc0f86d73a761af7db",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 811,
        "deletions": 462,
        "changes": 1273,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c"
      },
      {
        "sha": "f937844e9f7e15391537db3aea9cdfadd1a94617",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -12,7 +12,5 @@ static const unsigned int MAX_BLOCK_SIZE = 1000000;\n static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n-/** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n-static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "4addc663c88b55a68fb263c5016ac2f11df0bed1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 19,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -18,6 +18,7 @@\n #include \"main.h\"\n #include \"miner.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"rpcserver.h\"\n #include \"script/standard.h\"\n #include \"scheduler.h\"\n@@ -156,8 +157,8 @@ void Shutdown()\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n         pwalletMain->Flush(false);\n-    GenerateBitcoins(false, NULL, 0);\n #endif\n+    GenerateBitcoins(false, 0, Params());\n     StopNode();\n     UnregisterNodeSignals(GetNodeSignals());\n \n@@ -283,7 +284,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n-        -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n+        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\"));\n #endif\n@@ -329,6 +330,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+    strUsage += HelpMessageOpt(\"-whiteconnections=<n>\", strprintf(_(\"Reserve this many inbound connections for whitelisted peers (default: %d)\"), 0));\n \n #ifdef ENABLE_WALLET\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n@@ -370,10 +372,8 @@ std::string HelpMessage(HelpMessageMode mode)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n-#ifdef ENABLE_WALLET\n     strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n-#endif\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n     strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n@@ -396,6 +396,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n \n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n \n@@ -724,16 +726,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n     }\n \n-    // Make sure enough file descriptors are available\n-    int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n-    nMaxConnections = GetArg(\"-maxconnections\", 125);\n-    nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n-    int nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS);\n-    if (nFD < MIN_CORE_FILEDESCRIPTORS)\n-        return InitError(_(\"Not enough file descriptors available.\"));\n-    if (nFD - MIN_CORE_FILEDESCRIPTORS < nMaxConnections)\n-        nMaxConnections = nFD - MIN_CORE_FILEDESCRIPTORS;\n-\n     // if using block pruning, then disable txindex\n     if (GetArg(\"-prune\", 0)) {\n         if (GetBoolArg(\"-txindex\", false))\n@@ -744,6 +736,47 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n #endif\n     }\n+    \n+    // Make sure enough file descriptors are available\n+    int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n+    int nUserMaxConnections = GetArg(\"-maxconnections\", 125);\n+    nMaxConnections = std::max(nUserMaxConnections, 0);\n+    int nUserWhiteConnections = GetArg(\"-whiteconnections\", 0);\n+    nWhiteConnections = std::max(nUserWhiteConnections, 0);\n+\n+    if ((mapArgs.count(\"-whitelist\")) || (mapArgs.count(\"-whitebind\"))) {\n+        if (!(mapArgs.count(\"-maxconnections\"))) {\n+            // User is using whitelist feature,\n+            // but did not specify -maxconnections parameter.\n+            // Silently increase the default to compensate,\n+            // so that the whitelist connection reservation feature\n+            // does not inadvertently reduce the default\n+            // inbound connection capacity of the network.\n+            nMaxConnections += nWhiteConnections;\n+        }\n+    } else {\n+        // User not using whitelist feature.\n+        // Silently disable connection reservation,\n+        // for the same reason as above.\n+        nWhiteConnections = 0;\n+    }\n+\n+    // Trim requested connection counts, to fit into system limitations\n+    nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n+    int nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS);\n+    if (nFD < MIN_CORE_FILEDESCRIPTORS)\n+        return InitError(_(\"Not enough file descriptors available.\"));\n+    nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS, nMaxConnections);\n+\n+    if (nMaxConnections < nUserMaxConnections)\n+        InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n+\n+    // Connection capacity is prioritized in this order:\n+    // outbound connections (hardcoded to 8),\n+    // then whitelisted connections,\n+    // then non-whitelisted connections get whatever's left (if any).\n+    if ((nWhiteConnections > 0) && (nWhiteConnections >= (nMaxConnections - 8)))\n+        InitWarning(strprintf(_(\"All non-whitelisted incoming connections will be dropped, because -whiteconnections is %d and -maxconnections is only %d.\"), nWhiteConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n \n@@ -774,7 +807,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (nScriptCheckThreads <= 0)\n-        nScriptCheckThreads += boost::thread::hardware_concurrency();\n+        nScriptCheckThreads += GetNumCores();\n     if (nScriptCheckThreads <= 1)\n         nScriptCheckThreads = 0;\n     else if (nScriptCheckThreads > MAX_SCRIPTCHECK_THREADS)\n@@ -819,6 +852,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));\n     }\n \n+    fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !Params().RequireStandard());\n+    if (Params().RequireStandard() && !fRequireStandard)\n+        return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n+\n #ifdef ENABLE_WALLET\n     if (mapArgs.count(\"-mintxfee\"))\n     {\n@@ -868,6 +905,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     fAlerts = GetBoolArg(\"-alerts\", DEFAULT_ALERTS);\n \n+    // Option to startup with mocktime set (used for regression testing):\n+    SetMockTime(GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n+\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     // Initialize elliptic curve code\n@@ -913,6 +953,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"Using data directory %s\\n\", strDataDir);\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile().string());\n     LogPrintf(\"Using at most %i connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n+    if (nWhiteConnections > 0)\n+        LogPrintf(\"Reserving %i of these connections for whitelisted inbound peers\\n\", nWhiteConnections);\n     std::ostringstream strErrors;\n \n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n@@ -1436,11 +1478,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                                          boost::ref(cs_main), boost::cref(pindexBestHeader), nPowTargetSpacing);\n     scheduler.scheduleEvery(f, nPowTargetSpacing);\n \n-#ifdef ENABLE_WALLET\n     // Generate coins in the background\n-    if (pwalletMain)\n-        GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain, GetArg(\"-genproclimit\", 1));\n-#endif\n+    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", 1), Params());\n \n     // ********************************************************* Step 11: finished\n "
      },
      {
        "sha": "4689b32a6953a1bdc5ad0d681282c470406d8f64",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 163,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -11,10 +11,12 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n@@ -57,6 +59,7 @@ bool fTxIndex = false;\n bool fHavePruned = false;\n bool fPruneMode = false;\n bool fIsBareMultisigStd = true;\n+bool fRequireStandard = true;\n bool fCheckBlockIndex = false;\n bool fCheckpointsEnabled = true;\n size_t nCoinCacheUsage = 5000 * 300;\n@@ -434,13 +437,14 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n \n         // Iterate over those blocks in vToFetch (in forward direction), adding the ones that\n         // are not yet downloaded and not in flight to vBlocks. In the mean time, update\n-        // pindexLastCommonBlock as long as all ancestors are already downloaded.\n+        // pindexLastCommonBlock as long as all ancestors are already downloaded, or if it's\n+        // already part of our chain (and therefore don't need it even if pruned).\n         BOOST_FOREACH(CBlockIndex* pindex, vToFetch) {\n             if (!pindex->IsValid(BLOCK_VALID_TREE)) {\n                 // We consider the chain that this peer is on invalid.\n                 return;\n             }\n-            if (pindex->nStatus & BLOCK_HAVE_DATA) {\n+            if (pindex->nStatus & BLOCK_HAVE_DATA || chainActive.Contains(pindex)) {\n                 if (pindex->nChainTx)\n                     state->pindexLastCommonBlock = pindex;\n             } else if (mapBlocksInFlight.count(pindex->GetBlockHash()) == 0) {\n@@ -603,76 +607,6 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     return nEvicted;\n }\n \n-\n-\n-\n-\n-\n-\n-bool IsStandardTx(const CTransaction& tx, string& reason)\n-{\n-    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n-        reason = \"version\";\n-        return false;\n-    }\n-\n-    // Extremely large transactions with lots of inputs can cost the network\n-    // almost as much to process as they cost the sender in fees, because\n-    // computing signature hashes is O(ninputs*txsize). Limiting transactions\n-    // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n-    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n-    if (sz >= MAX_STANDARD_TX_SIZE) {\n-        reason = \"tx-size\";\n-        return false;\n-    }\n-\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n-        // keys. (remember the 520 byte limit on redeemScript size) That works\n-        // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)+3=1627\n-        // bytes of scriptSig, which we round off to 1650 bytes for some minor\n-        // future-proofing. That's also enough to spend a 20-of-20\n-        // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n-        // considered standard)\n-        if (txin.scriptSig.size() > 1650) {\n-            reason = \"scriptsig-size\";\n-            return false;\n-        }\n-        if (!txin.scriptSig.IsPushOnly()) {\n-            reason = \"scriptsig-not-pushonly\";\n-            return false;\n-        }\n-    }\n-\n-    unsigned int nDataOut = 0;\n-    txnouttype whichType;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n-            reason = \"scriptpubkey\";\n-            return false;\n-        }\n-\n-        if (whichType == TX_NULL_DATA)\n-            nDataOut++;\n-        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n-            reason = \"bare-multisig\";\n-            return false;\n-        } else if (txout.IsDust(::minRelayTxFee)) {\n-            reason = \"dust\";\n-            return false;\n-        }\n-    }\n-\n-    // only one OP_RETURN txout is permitted\n-    if (nDataOut > 1) {\n-        reason = \"multi-op-return\";\n-        return false;\n-    }\n-\n-    return true;\n-}\n-\n bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {\n     if (tx.nLockTime == 0)\n@@ -691,74 +625,6 @@ bool CheckFinalTx(const CTransaction &tx)\n     return IsFinalTx(tx, chainActive.Height() + 1, GetAdjustedTime());\n }\n \n-/**\n- * Check transaction inputs to mitigate two\n- * potential denial-of-service attacks:\n- *\n- * 1. scriptSigs with extra data stuffed into them,\n- *    not consumed by scriptPubKey (or P2SH script)\n- * 2. P2SH scripts with a crazy number of expensive\n- *    CHECKSIG/CHECKMULTISIG operations\n- */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n-{\n-    if (tx.IsCoinBase())\n-        return true; // Coinbases don't use vin normally\n-\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n-\n-        vector<vector<unsigned char> > vSolutions;\n-        txnouttype whichType;\n-        // get the scriptPubKey corresponding to this input:\n-        const CScript& prevScript = prev.scriptPubKey;\n-        if (!Solver(prevScript, whichType, vSolutions))\n-            return false;\n-        int nArgsExpected = ScriptSigArgsExpected(whichType, vSolutions);\n-        if (nArgsExpected < 0)\n-            return false;\n-\n-        // Transactions with extra stuff in their scriptSigs are\n-        // non-standard. Note that this EvalScript() call will\n-        // be quick, because if there are any operations\n-        // beside \"push data\" in the scriptSig\n-        // IsStandardTx() will have already returned false\n-        // and this method isn't called.\n-        vector<vector<unsigned char> > stack;\n-        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n-            return false;\n-\n-        if (whichType == TX_SCRIPTHASH)\n-        {\n-            if (stack.empty())\n-                return false;\n-            CScript subscript(stack.back().begin(), stack.back().end());\n-            vector<vector<unsigned char> > vSolutions2;\n-            txnouttype whichType2;\n-            if (Solver(subscript, whichType2, vSolutions2))\n-            {\n-                int tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n-                if (tmpExpected < 0)\n-                    return false;\n-                nArgsExpected += tmpExpected;\n-            }\n-            else\n-            {\n-                // Any other Script with less than 15 sigops OK:\n-                unsigned int sigops = subscript.GetSigOpCount(true);\n-                // ... extra data left on the stack after execution is OK, too:\n-                return (sigops <= MAX_P2SH_SIGOPS);\n-            }\n-        }\n-\n-        if (stack.size() != (unsigned int)nArgsExpected)\n-            return false;\n-    }\n-\n-    return true;\n-}\n-\n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n {\n     unsigned int nSigOps = 0;\n@@ -899,7 +765,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n-    if (Params().RequireStandard() && !IsStandardTx(tx, reason))\n+    if (fRequireStandard && !IsStandardTx(tx, reason))\n         return state.DoS(0,\n                          error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n                          REJECT_NONSTANDARD, reason);\n@@ -970,7 +836,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (Params().RequireStandard() && !AreInputsStandard(tx, view))\n+        if (fRequireStandard && !AreInputsStandard(tx, view))\n             return error(\"AcceptToMemoryPool: nonstandard transaction input\");\n \n         // Check that the transaction doesn't have an excessive number of\n@@ -2813,36 +2679,37 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     uint256 hash = block.GetHash();\n     BlockMap::iterator miSelf = mapBlockIndex.find(hash);\n     CBlockIndex *pindex = NULL;\n-    if (miSelf != mapBlockIndex.end()) {\n-        // Block header is already known.\n-        pindex = miSelf->second;\n-        if (ppindex)\n-            *ppindex = pindex;\n-        if (pindex->nStatus & BLOCK_FAILED_MASK)\n-            return state.Invalid(error(\"%s: block is marked invalid\", __func__), 0, \"duplicate\");\n-        return true;\n-    }\n+    if (hash != chainparams.GetConsensus().hashGenesisBlock) {\n \n-    if (!CheckBlockHeader(block, state))\n-        return false;\n+        if (miSelf != mapBlockIndex.end()) {\n+            // Block header is already known.\n+            pindex = miSelf->second;\n+            if (ppindex)\n+                *ppindex = pindex;\n+            if (pindex->nStatus & BLOCK_FAILED_MASK)\n+                return state.Invalid(error(\"%s: block is marked invalid\", __func__), 0, \"duplicate\");\n+            return true;\n+        }\n \n-    // Get prev block index\n-    CBlockIndex* pindexPrev = NULL;\n-    if (hash != chainparams.GetConsensus().hashGenesisBlock) {\n+        if (!CheckBlockHeader(block, state))\n+            return false;\n+\n+        // Get prev block index\n+        CBlockIndex* pindexPrev = NULL;\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n             return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n-    }\n-    assert(pindexPrev);\n-    if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, hash))\n-        return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n-    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n-        return false;\n+        assert(pindexPrev);\n+        if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, hash))\n+            return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n+        if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n+            return false;\n+    }\n     if (pindex == NULL)\n         pindex = AddToBlockIndex(block);\n \n@@ -4961,7 +4828,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n                 else\n                 {\n-                    CNode::Ban(pto->addr);\n+                    CNode::Ban(pto->addr, BanReasonNodeMisbehaving);\n                 }\n             }\n             state.fShouldBan = false;"
      },
      {
        "sha": "ce18bd709f592a433d478a3112d2fded6c368133",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 38,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -14,7 +14,6 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"coins.h\"\n-#include \"consensus/consensus.h\"\n #include \"net.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n@@ -47,19 +46,8 @@ class CValidationState;\n \n struct CNodeStateStats;\n \n-/** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n-static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n-/** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n-static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n /** Default for accepting alerts from the P2P network. */\n static const bool DEFAULT_ALERTS = true;\n-/** The maximum size for transactions we're willing to relay/mine */\n-static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n-/** Maximum number of signature check operations in an IsStandard() P2SH script */\n-static const unsigned int MAX_P2SH_SIGOPS = 15;\n-/** The maximum number of sigops we're willing to relay/mine in a single tx */\n-static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n@@ -111,6 +99,7 @@ extern bool fReindex;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern bool fIsBareMultisigStd;\n+extern bool fRequireStandard;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;\n@@ -131,7 +120,7 @@ extern bool fPruneMode;\n /** Number of MiB of block files that we're trying to stay below. */\n extern uint64_t nPruneTarget;\n /** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of chainActive.Tip() will not be pruned. */\n-static const signed int MIN_BLOCKS_TO_KEEP = 288;\n+static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n \n // Require that user allocate at least 550MB for block & undo files (blk???.dat and rev???.dat)\n // At 1MB per block, 288 blocks = 288MB.\n@@ -141,7 +130,7 @@ static const signed int MIN_BLOCKS_TO_KEEP = 288;\n // full block file chunks, we need the high water mark which triggers the prune to be\n // one 128MB block file + added 15% undo data = 147MB greater for a total of 545MB\n // Setting the target to > than 550MB will make it likely we can respect the target.\n-static const signed int MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n+static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n /** Register with a network node to receive its signals */\n void RegisterNodeSignals(CNodeSignals& nodeSignals);\n@@ -273,25 +262,6 @@ struct CDiskTxPos : public CDiskBlockPos\n \n CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n \n-/**\n- * Check transaction inputs, and make sure any\n- * pay-to-script-hash transactions are evaluating IsStandard scripts\n- * \n- * Why bother? To avoid denial-of-service attacks; an attacker\n- * can submit a standard HASH... OP_EQUAL transaction,\n- * which will get accepted into blocks. The redemption\n- * script can be anything; an attacker could use a very\n- * expensive-to-check-upon-redemption script like:\n- *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n- */\n-\n-/** \n- * Check for standard transaction types\n- * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n- * @return True if all inputs (scriptSigs) use only standard transaction forms\n- */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n-\n /** \n  * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n  * @return number of sigops this transaction's outputs will produce when spent\n@@ -323,11 +293,6 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n /** Context-independent validity checks */\n bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n \n-/** Check for standard transaction types\n- * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n- */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n-\n /**\n  * Check if transaction is final and can be included in a block with the\n  * specified height and time. Consensus critical."
      },
      {
        "sha": "49100b9ddb1b3871ad743e470617e9943fe85286",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 40,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -12,15 +12,14 @@\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"primitives/transaction.h\"\n #include \"timedata.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n-#ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n-#endif\n+#include \"validationinterface.h\"\n \n #include <boost/thread.hpp>\n #include <boost/tuple/tuple.hpp>\n@@ -363,7 +362,6 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n }\n \n-#ifdef ENABLE_WALLET\n //////////////////////////////////////////////////////////////////////////////\n //\n // Internal miner\n@@ -402,17 +400,7 @@ bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phas\n     }\n }\n \n-CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n-{\n-    CPubKey pubkey;\n-    if (!reservekey.GetReservedKey(pubkey))\n-        return NULL;\n-\n-    CScript scriptPubKey = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n-    return CreateNewBlock(scriptPubKey);\n-}\n-\n-static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n+static bool ProcessBlockFound(CBlock* pblock, const CChainParams& chainparams)\n {\n     LogPrintf(\"%s\\n\", pblock->ToString());\n     LogPrintf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue));\n@@ -424,14 +412,8 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n             return error(\"BitcoinMiner: generated block is stale\");\n     }\n \n-    // Remove key from key pool\n-    reservekey.KeepKey();\n-\n-    // Track how many getdata requests this block gets\n-    {\n-        LOCK(wallet.cs_wallet);\n-        wallet.mapRequestCount[pblock->GetHash()] = 0;\n-    }\n+    // Inform about the new block\n+    GetMainSignals().BlockFound(pblock->GetHash());\n \n     // Process this block the same as if we had received it from another node\n     CValidationState state;\n@@ -441,18 +423,22 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n     return true;\n }\n \n-void static BitcoinMiner(CWallet *pwallet)\n+void static BitcoinMiner(const CChainParams& chainparams)\n {\n     LogPrintf(\"BitcoinMiner started\\n\");\n     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n     RenameThread(\"bitcoin-miner\");\n-    const CChainParams& chainparams = Params();\n \n-    // Each thread has its own key and counter\n-    CReserveKey reservekey(pwallet);\n     unsigned int nExtraNonce = 0;\n \n+    boost::shared_ptr<CReserveScript> coinbaseScript;\n+    GetMainSignals().ScriptForMining(coinbaseScript);\n+\n     try {\n+        //throw an error if no script was provided\n+        if (!coinbaseScript->reserveScript.size())\n+            throw std::runtime_error(\"No coinbase script available (mining requires a wallet)\");\n+\n         while (true) {\n             if (chainparams.MiningRequiresPeers()) {\n                 // Busy-wait for the network to come online so we don't waste time mining\n@@ -475,7 +461,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             unsigned int nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n             CBlockIndex* pindexPrev = chainActive.Tip();\n \n-            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n+            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript->reserveScript));\n             if (!pblocktemplate.get())\n             {\n                 LogPrintf(\"Error in BitcoinMiner: Keypool ran out, please call keypoolrefill before restarting the mining thread\\n\");\n@@ -507,8 +493,9 @@ void static BitcoinMiner(CWallet *pwallet)\n                         SetThreadPriority(THREAD_PRIORITY_NORMAL);\n                         LogPrintf(\"BitcoinMiner:\\n\");\n                         LogPrintf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n-                        ProcessBlockFound(pblock, *pwallet, reservekey);\n+                        ProcessBlockFound(pblock, chainparams);\n                         SetThreadPriority(THREAD_PRIORITY_LOWEST);\n+                        coinbaseScript->KeepScript();\n \n                         // In regression test mode, stop mining after a block is found.\n                         if (chainparams.MineBlocksOnDemand())\n@@ -552,17 +539,12 @@ void static BitcoinMiner(CWallet *pwallet)\n     }\n }\n \n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads)\n+void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams)\n {\n     static boost::thread_group* minerThreads = NULL;\n \n-    if (nThreads < 0) {\n-        // In regtest threads defaults to 1\n-        if (Params().DefaultMinerThreads())\n-            nThreads = Params().DefaultMinerThreads();\n-        else\n-            nThreads = boost::thread::hardware_concurrency();\n-    }\n+    if (nThreads < 0)\n+        nThreads = GetNumCores();\n \n     if (minerThreads != NULL)\n     {\n@@ -576,7 +558,5 @@ void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads)\n \n     minerThreads = new boost::thread_group();\n     for (int i = 0; i < nThreads; i++)\n-        minerThreads->create_thread(boost::bind(&BitcoinMiner, pwallet));\n+        minerThreads->create_thread(boost::bind(&BitcoinMiner, boost::cref(chainparams)));\n }\n-\n-#endif // ENABLE_WALLET"
      },
      {
        "sha": "777a091967d720eeb51a28e264cc4a9f2afb223f",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -11,6 +11,7 @@\n #include <stdint.h>\n \n class CBlockIndex;\n+class CChainParams;\n class CReserveKey;\n class CScript;\n class CWallet;\n@@ -24,10 +25,9 @@ struct CBlockTemplate\n };\n \n /** Run the miner threads */\n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads);\n+void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams);\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n-CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);"
      },
      {
        "sha": "2c7ba0ca79748e517a1ee5525acb64b2b69a35e9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 224,
        "deletions": 25,
        "changes": 249,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -79,6 +79,7 @@ uint64_t nLocalHostNonce = 0;\n static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = 125;\n+int nWhiteConnections = 0;\n bool fAddressesInitialized = false;\n \n vector<CNode*> vNodes;\n@@ -443,26 +444,28 @@ void CNode::PushVersion()\n \n \n \n-std::map<CSubNet, int64_t> CNode::setBanned;\n+banmap_t CNode::setBanned;\n CCriticalSection CNode::cs_setBanned;\n+bool CNode::setBannedIsDirty;\n \n void CNode::ClearBanned()\n {\n     LOCK(cs_setBanned);\n     setBanned.clear();\n+    setBannedIsDirty = true;\n }\n \n bool CNode::IsBanned(CNetAddr ip)\n {\n     bool fResult = false;\n     {\n         LOCK(cs_setBanned);\n-        for (std::map<CSubNet, int64_t>::iterator it = setBanned.begin(); it != setBanned.end(); it++)\n+        for (banmap_t::iterator it = setBanned.begin(); it != setBanned.end(); it++)\n         {\n             CSubNet subNet = (*it).first;\n-            int64_t t = (*it).second;\n+            CBanEntry banEntry = (*it).second;\n \n-            if(subNet.Match(ip) && GetTime() < t)\n+            if(subNet.Match(ip) && GetTime() < banEntry.nBanUntil)\n                 fResult = true;\n         }\n     }\n@@ -474,50 +477,99 @@ bool CNode::IsBanned(CSubNet subnet)\n     bool fResult = false;\n     {\n         LOCK(cs_setBanned);\n-        std::map<CSubNet, int64_t>::iterator i = setBanned.find(subnet);\n+        banmap_t::iterator i = setBanned.find(subnet);\n         if (i != setBanned.end())\n         {\n-            int64_t t = (*i).second;\n-            if (GetTime() < t)\n+            CBanEntry banEntry = (*i).second;\n+            if (GetTime() < banEntry.nBanUntil)\n                 fResult = true;\n         }\n     }\n     return fResult;\n }\n \n-void CNode::Ban(const CNetAddr& addr, int64_t bantimeoffset, bool sinceUnixEpoch) {\n-    CSubNet subNet(addr.ToString()+(addr.IsIPv4() ? \"/32\" : \"/128\"));\n-    Ban(subNet, bantimeoffset, sinceUnixEpoch);\n+void CNode::Ban(const CNetAddr& addr, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n+    CSubNet subNet(addr);\n+    Ban(subNet, banReason, bantimeoffset, sinceUnixEpoch);\n }\n \n-void CNode::Ban(const CSubNet& subNet, int64_t bantimeoffset, bool sinceUnixEpoch) {\n-    int64_t banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n-    if (bantimeoffset > 0)\n-        banTime = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n+void CNode::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n+    CBanEntry banEntry(GetTime());\n+    banEntry.banReason = banReason;\n+    if (bantimeoffset <= 0)\n+    {\n+        bantimeoffset = GetArg(\"-bantime\", 60*60*24); // Default 24-hour ban\n+        sinceUnixEpoch = false;\n+    }\n+    banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n+\n \n     LOCK(cs_setBanned);\n-    if (setBanned[subNet] < banTime)\n-        setBanned[subNet] = banTime;\n+    if (setBanned[subNet].nBanUntil < banEntry.nBanUntil)\n+        setBanned[subNet] = banEntry;\n+\n+    setBannedIsDirty = true;\n }\n \n bool CNode::Unban(const CNetAddr &addr) {\n-    CSubNet subNet(addr.ToString()+(addr.IsIPv4() ? \"/32\" : \"/128\"));\n+    CSubNet subNet(addr);\n     return Unban(subNet);\n }\n \n bool CNode::Unban(const CSubNet &subNet) {\n     LOCK(cs_setBanned);\n     if (setBanned.erase(subNet))\n+    {\n+        setBannedIsDirty = true;\n         return true;\n+    }\n     return false;\n }\n \n-void CNode::GetBanned(std::map<CSubNet, int64_t> &banMap)\n+void CNode::GetBanned(banmap_t &banMap)\n {\n     LOCK(cs_setBanned);\n     banMap = setBanned; //create a thread safe copy\n }\n \n+void CNode::SetBanned(const banmap_t &banMap)\n+{\n+    LOCK(cs_setBanned);\n+    setBanned = banMap;\n+    setBannedIsDirty = true;\n+}\n+\n+void CNode::SweepBanned()\n+{\n+    int64_t now = GetTime();\n+\n+    LOCK(cs_setBanned);\n+    banmap_t::iterator it = setBanned.begin();\n+    while(it != setBanned.end())\n+    {\n+        CBanEntry banEntry = (*it).second;\n+        if(now > banEntry.nBanUntil)\n+        {\n+            setBanned.erase(it++);\n+            setBannedIsDirty = true;\n+        }\n+        else\n+            ++it;\n+    }\n+}\n+\n+bool CNode::BannedSetIsDirty()\n+{\n+    LOCK(cs_setBanned);\n+    return setBannedIsDirty;\n+}\n+\n+void CNode::SetBannedSetDirty(bool dirty)\n+{\n+    LOCK(cs_setBanned); //reuse setBanned lock for the isDirty flag\n+    setBannedIsDirty = dirty;\n+}\n+\n \n std::vector<CSubNet> CNode::vWhitelistedRange;\n CCriticalSection CNode::cs_vWhitelistedRange;\n@@ -877,6 +929,7 @@ void ThreadSocketHandler()\n                 SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n                 CAddress addr;\n                 int nInbound = 0;\n+                int nMaxInbound = nMaxConnections - MAX_OUTBOUND_CONNECTIONS;\n \n                 if (hSocket != INVALID_SOCKET)\n                     if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n@@ -896,8 +949,14 @@ void ThreadSocketHandler()\n                     if (nErr != WSAEWOULDBLOCK)\n                         LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n                 }\n-                else if (nInbound >= nMaxConnections - MAX_OUTBOUND_CONNECTIONS)\n+                else if (nInbound >= nMaxInbound)\n                 {\n+                    LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n+                    CloseSocket(hSocket);\n+                }\n+                else if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n+                {\n+                    LogPrint(\"net\", \"connection from %s dropped (non-whitelisted)\\n\", addr.ToString());\n                     CloseSocket(hSocket);\n                 }\n                 else if (CNode::IsBanned(addr) && !whitelisted)\n@@ -911,6 +970,8 @@ void ThreadSocketHandler()\n                     pnode->AddRef();\n                     pnode->fWhitelisted = whitelisted;\n \n+                    LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n+\n                     {\n                         LOCK(cs_vNodes);\n                         vNodes.push_back(pnode);\n@@ -1212,6 +1273,17 @@ void DumpAddresses()\n            addrman.size(), GetTimeMillis() - nStart);\n }\n \n+void DumpData()\n+{\n+    DumpAddresses();\n+\n+    if (CNode::BannedSetIsDirty())\n+    {\n+        DumpBanlist();\n+        CNode::SetBannedSetDirty(false);\n+    }\n+}\n+\n void static ProcessOneShot()\n {\n     string strDest;\n@@ -1650,6 +1722,17 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (!adb.Read(addrman))\n             LogPrintf(\"Invalid or missing peers.dat; recreating\\n\");\n     }\n+\n+    //try to read stored banlist\n+    CBanDB bandb;\n+    banmap_t banmap;\n+    if (!bandb.Read(banmap))\n+        LogPrintf(\"Invalid or missing banlist.dat; recreating\\n\");\n+\n+    CNode::SetBanned(banmap); //thread save setter\n+    CNode::SetBannedSetDirty(false); //no need to write down just read or nonexistent data\n+    CNode::SweepBanned(); //sweap out unused entries\n+\n     LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\",\n            addrman.size(), GetTimeMillis() - nStart);\n     fAddressesInitialized = true;\n@@ -1690,7 +1773,7 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n     threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"msghand\", &ThreadMessageHandler));\n \n     // Dump network addresses\n-    scheduler.scheduleEvery(&DumpAddresses, DUMP_ADDRESSES_INTERVAL);\n+    scheduler.scheduleEvery(&DumpData, DUMP_ADDRESSES_INTERVAL);\n }\n \n bool StopNode()\n@@ -1703,7 +1786,7 @@ bool StopNode()\n \n     if (fAddressesInitialized)\n     {\n-        DumpAddresses();\n+        DumpData();\n         fAddressesInitialized = false;\n     }\n \n@@ -1907,11 +1990,11 @@ bool CAddrDB::Read(CAddrMan& addr)\n         return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n \n     // use file size to size memory buffer\n-    int fileSize = boost::filesystem::file_size(pathAddr);\n-    int dataSize = fileSize - sizeof(uint256);\n+    uint64_t fileSize = boost::filesystem::file_size(pathAddr);\n+    uint64_t dataSize = 0;\n     // Don't try to resize to a negative number if file is small\n-    if (dataSize < 0)\n-        dataSize = 0;\n+    if (fileSize >= sizeof(uint256))\n+        dataSize = fileSize - sizeof(uint256);\n     vector<unsigned char> vchData;\n     vchData.resize(dataSize);\n     uint256 hashIn;\n@@ -2107,3 +2190,119 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     LEAVE_CRITICAL_SECTION(cs_vSend);\n }\n+\n+//\n+// CBanDB\n+//\n+\n+CBanDB::CBanDB()\n+{\n+    pathBanlist = GetDataDir() / \"banlist.dat\";\n+}\n+\n+bool CBanDB::Write(const banmap_t& banSet)\n+{\n+    // Generate random temporary filename\n+    unsigned short randv = 0;\n+    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n+    std::string tmpfn = strprintf(\"banlist.dat.%04x\", randv);\n+\n+    // serialize banlist, checksum data up to that point, then append csum\n+    CDataStream ssBanlist(SER_DISK, CLIENT_VERSION);\n+    ssBanlist << FLATDATA(Params().MessageStart());\n+    ssBanlist << banSet;\n+    uint256 hash = Hash(ssBanlist.begin(), ssBanlist.end());\n+    ssBanlist << hash;\n+\n+    // open temp output file, and associate with CAutoFile\n+    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+\n+    // Write and commit header, data\n+    try {\n+        fileout << ssBanlist;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n+    }\n+    FileCommit(fileout.Get());\n+    fileout.fclose();\n+\n+    // replace existing banlist.dat, if any, with new banlist.dat.XXXX\n+    if (!RenameOver(pathTmp, pathBanlist))\n+        return error(\"%s: Rename-into-place failed\", __func__);\n+\n+    return true;\n+}\n+\n+bool CBanDB::Read(banmap_t& banSet)\n+{\n+    // open input file, and associate with CAutoFile\n+    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n+\n+    // use file size to size memory buffer\n+    uint64_t fileSize = boost::filesystem::file_size(pathBanlist);\n+    uint64_t dataSize = 0;\n+    // Don't try to resize to a negative number if file is small\n+    if (fileSize >= sizeof(uint256))\n+        dataSize = fileSize - sizeof(uint256);\n+    vector<unsigned char> vchData;\n+    vchData.resize(dataSize);\n+    uint256 hashIn;\n+\n+    // read data and checksum from file\n+    try {\n+        filein.read((char *)&vchData[0], dataSize);\n+        filein >> hashIn;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    filein.fclose();\n+\n+    CDataStream ssBanlist(vchData, SER_DISK, CLIENT_VERSION);\n+\n+    // verify stored checksum matches input data\n+    uint256 hashTmp = Hash(ssBanlist.begin(), ssBanlist.end());\n+    if (hashIn != hashTmp)\n+        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n+\n+    unsigned char pchMsgTmp[4];\n+    try {\n+        // de-serialize file header (network specific magic number) and ..\n+        ssBanlist >> FLATDATA(pchMsgTmp);\n+\n+        // ... verify the network matches ours\n+        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n+            return error(\"%s: Invalid network magic number\", __func__);\n+        \n+        // de-serialize address data into one CAddrMan object\n+        ssBanlist >> banSet;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    \n+    return true;\n+}\n+\n+void DumpBanlist()\n+{\n+    int64_t nStart = GetTimeMillis();\n+\n+    CNode::SweepBanned(); //clean unused entires (if bantime has expired)\n+\n+    CBanDB bandb;\n+    banmap_t banmap;\n+    CNode::GetBanned(banmap);\n+    bandb.Write(banmap);\n+\n+    LogPrint(\"net\", \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n+             banmap.size(), GetTimeMillis() - nStart);\n+}"
      },
      {
        "sha": "86d74e21741b54f5f8445d29bf3eca16fc6aaa13",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 97,
        "deletions": 4,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -141,7 +141,20 @@ extern bool fListen;\n extern uint64_t nLocalServices;\n extern uint64_t nLocalHostNonce;\n extern CAddrMan addrman;\n+\n+// The allocation of connections against the maximum allowed (nMaxConnections)\n+// is prioritized as follows:\n+// 1st: Outbound connections (MAX_OUTBOUND_CONNECTIONS)\n+// 2nd: Inbound connections from whitelisted peers (nWhiteConnections)\n+// 3rd: Inbound connections from non-whitelisted peers\n+// Thus, the number of connection slots for the general public to use is:\n+// nMaxConnections - (MAX_OUTBOUND_CONNECTIONS + nWhiteConnections)\n+// Any additional inbound connections beyond limits will be immediately closed\n+\n+/** Maximum number of connections to simultaneously allow (aka connection slots) */\n extern int nMaxConnections;\n+/** Number of connection slots to reserve for inbound from whitelisted peers */\n+extern int nWhiteConnections;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n@@ -228,8 +241,66 @@ class CNetMessage {\n };\n \n \n+typedef enum BanReason\n+{\n+    BanReasonUnknown          = 0,\n+    BanReasonNodeMisbehaving  = 1,\n+    BanReasonManuallyAdded    = 2\n+} BanReason;\n+\n+class CBanEntry\n+{\n+public:\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    int64_t nCreateTime;\n+    int64_t nBanUntil;\n+    uint8_t banReason;\n+\n+    CBanEntry()\n+    {\n+        SetNull();\n+    }\n+\n+    CBanEntry(int64_t nCreateTimeIn)\n+    {\n+        SetNull();\n+        nCreateTime = nCreateTimeIn;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(nCreateTime);\n+        READWRITE(nBanUntil);\n+        READWRITE(banReason);\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CBanEntry::CURRENT_VERSION;\n+        nCreateTime = 0;\n+        nBanUntil = 0;\n+        banReason = BanReasonUnknown;\n+    }\n \n+    std::string banReasonToString()\n+    {\n+        switch (banReason) {\n+        case BanReasonNodeMisbehaving:\n+            return \"node misbehabing\";\n+        case BanReasonManuallyAdded:\n+            return \"manually added\";\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+};\n \n+typedef std::map<CSubNet, CBanEntry> banmap_t;\n \n /** Information about a peer */\n class CNode\n@@ -285,8 +356,9 @@ class CNode\n \n     // Denial-of-service detection/prevention\n     // Key is IP address, value is banned-until-time\n-    static std::map<CSubNet, int64_t> setBanned;\n+    static banmap_t setBanned;\n     static CCriticalSection cs_setBanned;\n+    static bool setBannedIsDirty;\n \n     // Whitelisted ranges. Any node connecting from these is automatically\n     // whitelisted (as well as those connecting to whitelisted binds).\n@@ -608,11 +680,19 @@ class CNode\n     static void ClearBanned(); // needed for unit testing\n     static bool IsBanned(CNetAddr ip);\n     static bool IsBanned(CSubNet subnet);\n-    static void Ban(const CNetAddr &ip, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    static void Ban(const CSubNet &subNet, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    static void Ban(const CNetAddr &ip, const BanReason &banReason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    static void Ban(const CSubNet &subNet, const BanReason &banReason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n     static bool Unban(const CNetAddr &ip);\n     static bool Unban(const CSubNet &ip);\n-    static void GetBanned(std::map<CSubNet, int64_t> &banmap);\n+    static void GetBanned(banmap_t &banmap);\n+    static void SetBanned(const banmap_t &banmap);\n+\n+    //!check is the banlist has unwritten changes\n+    static bool BannedSetIsDirty();\n+    //!set the \"dirty\" flag for the banlist\n+    static void SetBannedSetDirty(bool dirty=true);\n+    //!clean unused entires (if bantime has expired)\n+    static void SweepBanned();\n \n     void copyStats(CNodeStats &stats);\n \n@@ -644,4 +724,17 @@ class CAddrDB\n     bool Read(CAddrMan& addr);\n };\n \n+/** Access to the banlist database (banlist.dat) */\n+class CBanDB\n+{\n+private:\n+    boost::filesystem::path pathBanlist;\n+public:\n+    CBanDB();\n+    bool Write(const banmap_t& banSet);\n+    bool Read(banmap_t& banSet);\n+};\n+\n+void DumpBanlist();\n+\n #endif // BITCOIN_NET_H"
      },
      {
        "sha": "c9fc7d67f7cc85b701cb5db8a5ce571f8fa5ea5f",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -1291,6 +1291,13 @@ CSubNet::CSubNet(const std::string &strSubnet, bool fAllowLookup)\n         network.ip[x] &= netmask[x];\n }\n \n+CSubNet::CSubNet(const CNetAddr &addr):\n+    valid(addr.IsValid())\n+{\n+    memset(netmask, 255, sizeof(netmask));\n+    network = addr;\n+}\n+\n bool CSubNet::Match(const CNetAddr &addr) const\n {\n     if (!valid || !addr.IsValid())"
      },
      {
        "sha": "6f8882b8527a5c2846bfc0e331200d6664c902e7",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -118,6 +118,9 @@ class CSubNet\n         CSubNet();\n         explicit CSubNet(const std::string &strSubnet, bool fAllowLookup = false);\n \n+        //constructor for single ip subnet (<ipv4>/32 or <ipv6>/128)\n+        explicit CSubNet(const CNetAddr &addr);\n+\n         bool Match(const CNetAddr &addr) const;\n \n         std::string ToString() const;\n@@ -126,6 +129,15 @@ class CSubNet\n         friend bool operator==(const CSubNet& a, const CSubNet& b);\n         friend bool operator!=(const CSubNet& a, const CSubNet& b);\n         friend bool operator<(const CSubNet& a, const CSubNet& b);\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+            READWRITE(network);\n+            READWRITE(FLATDATA(netmask));\n+            READWRITE(FLATDATA(valid));\n+        }\n };\n \n /** A combination of a network address (CNetAddr) and a (TCP) port */"
      },
      {
        "sha": "169fef4af4602dfe327d8311ab90bd714c5e12f4",
        "filename": "src/policy/policy.cpp",
        "status": "added",
        "additions": 178,
        "deletions": 0,
        "changes": 178,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"main.h\"\n+#include \"tinyformat.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n+{\n+    std::vector<std::vector<unsigned char> > vSolutions;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n+        return false;\n+\n+    if (whichType == TX_MULTISIG)\n+    {\n+        unsigned char m = vSolutions.front()[0];\n+        unsigned char n = vSolutions.back()[0];\n+        // Support up to x-of-3 multisig txns as standard\n+        if (n < 1 || n > 3)\n+            return false;\n+        if (m < 1 || m > n)\n+            return false;\n+    }\n+\n+    return whichType != TX_NONSTANDARD;\n+}\n+\n+bool IsStandardTx(const CTransaction& tx, std::string& reason)\n+{\n+    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n+        reason = \"version\";\n+        return false;\n+    }\n+\n+    // Extremely large transactions with lots of inputs can cost the network\n+    // almost as much to process as they cost the sender in fees, because\n+    // computing signature hashes is O(ninputs*txsize). Limiting transactions\n+    // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n+    if (sz >= MAX_STANDARD_TX_SIZE) {\n+        reason = \"tx-size\";\n+        return false;\n+    }\n+\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n+        // keys. (remember the 520 byte limit on redeemScript size) That works\n+        // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)+3=1627\n+        // bytes of scriptSig, which we round off to 1650 bytes for some minor\n+        // future-proofing. That's also enough to spend a 20-of-20\n+        // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n+        // considered standard)\n+        if (txin.scriptSig.size() > 1650) {\n+            reason = \"scriptsig-size\";\n+            return false;\n+        }\n+        if (!txin.scriptSig.IsPushOnly()) {\n+            reason = \"scriptsig-not-pushonly\";\n+            return false;\n+        }\n+    }\n+\n+    unsigned int nDataOut = 0;\n+    txnouttype whichType;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n+        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n+            reason = \"scriptpubkey\";\n+            return false;\n+        }\n+\n+        if (whichType == TX_NULL_DATA)\n+            nDataOut++;\n+        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n+            reason = \"bare-multisig\";\n+            return false;\n+        } else if (txout.IsDust(::minRelayTxFee)) {\n+            reason = \"dust\";\n+            return false;\n+        }\n+    }\n+\n+    // only one OP_RETURN txout is permitted\n+    if (nDataOut > 1) {\n+        reason = \"multi-op-return\";\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    if (tx.IsCoinBase())\n+        return true; // Coinbases don't use vin normally\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n+\n+        std::vector<std::vector<unsigned char> > vSolutions;\n+        txnouttype whichType;\n+        // get the scriptPubKey corresponding to this input:\n+        const CScript& prevScript = prev.scriptPubKey;\n+        if (!Solver(prevScript, whichType, vSolutions))\n+            return false;\n+        int nArgsExpected = ScriptSigArgsExpected(whichType, vSolutions);\n+        if (nArgsExpected < 0)\n+            return false;\n+\n+        // Transactions with extra stuff in their scriptSigs are\n+        // non-standard. Note that this EvalScript() call will\n+        // be quick, because if there are any operations\n+        // beside \"push data\" in the scriptSig\n+        // IsStandardTx() will have already returned false\n+        // and this method isn't called.\n+        std::vector<std::vector<unsigned char> > stack;\n+        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n+            return false;\n+\n+        if (whichType == TX_SCRIPTHASH)\n+        {\n+            if (stack.empty())\n+                return false;\n+            CScript subscript(stack.back().begin(), stack.back().end());\n+            std::vector<std::vector<unsigned char> > vSolutions2;\n+            txnouttype whichType2;\n+            if (Solver(subscript, whichType2, vSolutions2))\n+            {\n+                int tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n+                if (tmpExpected < 0)\n+                    return false;\n+                nArgsExpected += tmpExpected;\n+            }\n+            else\n+            {\n+                // Any other Script with less than 15 sigops OK:\n+                unsigned int sigops = subscript.GetSigOpCount(true);\n+                // ... extra data left on the stack after execution is OK, too:\n+                return (sigops <= MAX_P2SH_SIGOPS);\n+            }\n+        }\n+\n+        if (stack.size() != (unsigned int)nArgsExpected)\n+            return false;\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "1551aecde8c33eab3dd9ba74fbced371671ac0ca",
        "filename": "src/policy/policy.h",
        "status": "added",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_H\n+#define BITCOIN_POLICY_H\n+\n+#include \"consensus/consensus.h\"\n+#include \"script/interpreter.h\"\n+#include \"script/standard.h\"\n+\n+#include <string>\n+\n+class CCoinsViewCache;\n+\n+/** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n+static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n+static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n+/** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n+static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n+/** The maximum size for transactions we're willing to relay/mine */\n+static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n+/** Maximum number of signature check operations in an IsStandard() P2SH script */\n+static const unsigned int MAX_P2SH_SIGOPS = 15;\n+/** The maximum number of sigops we're willing to relay/mine in a single tx */\n+static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n+/**\n+ * Standard script verification flags that standard transactions will comply\n+ * with. However scripts violating these flags may still be present in valid\n+ * blocks and we must accept those blocks.\n+ */\n+static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n+                                                         SCRIPT_VERIFY_DERSIG |\n+                                                         SCRIPT_VERIFY_STRICTENC |\n+                                                         SCRIPT_VERIFY_MINIMALDATA |\n+                                                         SCRIPT_VERIFY_NULLDUMMY |\n+                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n+                                                         SCRIPT_VERIFY_CLEANSTACK |\n+                                                         SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n+\n+/** For convenience, standard but not mandatory verify flags. */\n+static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n+\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n+    /**\n+     * Check for standard transaction types\n+     * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n+     */\n+bool IsStandardTx(const CTransaction& tx, std::string& reason);\n+    /**\n+     * Check for standard transaction types\n+     * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n+     * @return True if all inputs (scriptSigs) use only standard transaction forms\n+     */\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+\n+#endif // BITCOIN_POLICY_H"
      },
      {
        "sha": "54635f1d548a3030522224480509e9922584871a",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -254,8 +254,7 @@ void AddressBookPage::done(int retval)\n     // Figure out which address was selected, and return it\n     QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n \n-    foreach (QModelIndex index, indexes)\n-    {\n+    foreach (const QModelIndex& index, indexes) {\n         QVariant address = table->model()->data(index);\n         returnValue = address.toString();\n     }"
      },
      {
        "sha": "07250e72c2cfbbc7f7fcc5abea66724ee2afc61b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -48,6 +48,7 @@\n #include <QThread>\n #include <QTimer>\n #include <QTranslator>\n+#include <QSslConfiguration>\n \n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>\n@@ -515,6 +516,13 @@ int main(int argc, char *argv[])\n #ifdef Q_OS_MAC\n     QApplication::setAttribute(Qt::AA_DontShowIconsInMenus);\n #endif\n+#if QT_VERSION >= 0x050500\n+    // Because of the POODLE attack it is recommended to disable SSLv3 (https://disablessl3.com/),\n+    // so set SSL protocols to TLS1.0+.\n+    QSslConfiguration sslconf = QSslConfiguration::defaultConfiguration();\n+    sslconf.setProtocol(QSsl::TlsV1_0OrLater);\n+    QSslConfiguration::setDefaultConfiguration(sslconf);\n+#endif\n \n     // Register meta types used for QMetaObject::invokeMethod\n     qRegisterMetaType< bool* >();"
      },
      {
        "sha": "5ac11324d96820f94e7ec98de29788c458216e4d",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -53,9 +53,9 @@ int ClientModel::getNumConnections(unsigned int flags) const\n         return vNodes.size();\n \n     int nNum = 0;\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n-    if (flags & (pnode->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT))\n-        nNum++;\n+    BOOST_FOREACH(const CNode* pnode, vNodes)\n+        if (flags & (pnode->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT))\n+            nNum++;\n \n     return nNum;\n }"
      },
      {
        "sha": "eea450353385f7aa9d67c28f0458f42dcc794739",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -118,7 +118,7 @@ CoinControlDialog::CoinControlDialog(QWidget *parent) :\n     // (un)select all\n     connect(ui->pushButtonSelectAll, SIGNAL(clicked()), this, SLOT(buttonSelectAllClicked()));\n \n-    // change coin control first column label due Qt4 bug. \n+    // change coin control first column label due Qt4 bug.\n     // see https://github.com/bitcoin/bitcoin/issues/5716\n     ui->treeWidget->headerItem()->setText(COLUMN_CHECKBOX, QString());\n \n@@ -492,8 +492,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     coinControl->ListSelected(vCoinControl);\n     model->getOutputs(vCoinControl, vOutputs);\n \n-    BOOST_FOREACH(const COutput& out, vOutputs)\n-    {\n+    BOOST_FOREACH(const COutput& out, vOutputs) {\n         // unselect already spent, very unlikely scenario, this could happen\n         // when selected are spent elsewhere, like rpc or another computer\n         uint256 txhash = out.tx->GetHash();\n@@ -691,8 +690,7 @@ void CoinControlDialog::updateView()\n     map<QString, vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);\n \n-    BOOST_FOREACH(PAIRTYPE(QString, vector<COutput>) coins, mapCoins)\n-    {\n+    BOOST_FOREACH(const PAIRTYPE(QString, vector<COutput>)& coins, mapCoins) {\n         QTreeWidgetItem *itemWalletAddress = new QTreeWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         QString sWalletAddress = coins.first;\n@@ -719,8 +717,7 @@ void CoinControlDialog::updateView()\n         double dPrioritySum = 0;\n         int nChildren = 0;\n         int nInputSum = 0;\n-        BOOST_FOREACH(const COutput& out, coins.second)\n-        {\n+        BOOST_FOREACH(const COutput& out, coins.second) {\n             int nInputSize = 0;\n             nSum += out.tx->vout[out.i].nValue;\n             nChildren++;"
      },
      {
        "sha": "87c727335eb83d902b5291e0bb26dd9abf3a939d",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -42,7 +42,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     /* Main elements init */\n     ui->databaseCache->setMinimum(nMinDbCache);\n     ui->databaseCache->setMaximum(nMaxDbCache);\n-    ui->threadsScriptVerif->setMinimum(-(int)boost::thread::hardware_concurrency());\n+    ui->threadsScriptVerif->setMinimum(-GetNumCores());\n     ui->threadsScriptVerif->setMaximum(MAX_SCRIPTCHECK_THREADS);\n \n     /* Network elements init */"
      },
      {
        "sha": "fd225f51a665130b2dff216adbbc23e57d3ae98f",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -185,8 +185,7 @@ void ReceiveCoinsDialog::on_showRequestButton_clicked()\n         return;\n     QModelIndexList selection = ui->recentRequestsView->selectionModel()->selectedRows();\n \n-    foreach (QModelIndex index, selection)\n-    {\n+    foreach (const QModelIndex& index, selection) {\n         on_recentRequestsView_doubleClicked(index);\n     }\n }"
      },
      {
        "sha": "dfe01495f7366c94915b6243fa6ae4627f7f6f91",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -20,7 +20,7 @@\n \n using namespace std;\n \n-static const int MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n+static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n \n enum RetFormat {\n     RF_UNDEF,\n@@ -65,6 +65,7 @@ class RestErr\n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n extern UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n+extern UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n static RestErr RESTERR(enum HTTPStatusCode status, string message)\n {\n@@ -134,23 +135,23 @@ static bool rest_headers(AcceptedConnection* conn,\n     if (!ParseHashStr(hashStr, hash))\n         throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n-    std::vector<CBlockHeader> headers;\n+    std::vector<const CBlockIndex *> headers;\n     headers.reserve(count);\n     {\n         LOCK(cs_main);\n         BlockMap::const_iterator it = mapBlockIndex.find(hash);\n         const CBlockIndex *pindex = (it != mapBlockIndex.end()) ? it->second : NULL;\n         while (pindex != NULL && chainActive.Contains(pindex)) {\n-            headers.push_back(pindex->GetBlockHeader());\n+            headers.push_back(pindex);\n             if (headers.size() == (unsigned long)count)\n                 break;\n             pindex = chainActive.Next(pindex);\n         }\n     }\n \n     CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n-    BOOST_FOREACH(const CBlockHeader &header, headers) {\n-        ssHeader << header;\n+    BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n+        ssHeader << pindex->GetBlockHeader();\n     }\n \n     switch (rf) {\n@@ -166,6 +167,16 @@ static bool rest_headers(AcceptedConnection* conn,\n         return true;\n     }\n \n+    case RF_JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n+            jsonHeaders.push_back(blockheaderToJSON(pindex));\n+        }\n+        string strJSON = jsonHeaders.write() + \"\\n\";\n+        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        return true;\n+    }\n+\n     default: {\n         throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n     }"
      },
      {
        "sha": "15a8d57f77bc0a89a10a729882aae4498799a9be",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 132,
        "deletions": 1,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -51,6 +51,31 @@ double GetDifficulty(const CBlockIndex* blockindex)\n     return dDiff;\n }\n \n+UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n+{\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"hash\", blockindex->GetBlockHash().GetHex()));\n+    int confirmations = -1;\n+    // Only report confirmations if the block is on the main chain\n+    if (chainActive.Contains(blockindex))\n+        confirmations = chainActive.Height() - blockindex->nHeight + 1;\n+    result.push_back(Pair(\"confirmations\", confirmations));\n+    result.push_back(Pair(\"height\", blockindex->nHeight));\n+    result.push_back(Pair(\"version\", blockindex->nVersion));\n+    result.push_back(Pair(\"merkleroot\", blockindex->hashMerkleRoot.GetHex()));\n+    result.push_back(Pair(\"time\", (int64_t)blockindex->nTime));\n+    result.push_back(Pair(\"nonce\", (uint64_t)blockindex->nNonce));\n+    result.push_back(Pair(\"bits\", strprintf(\"%08x\", blockindex->nBits)));\n+    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n+    result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n+\n+    if (blockindex->pprev)\n+        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n+    CBlockIndex *pnext = chainActive.Next(blockindex);\n+    if (pnext)\n+        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n+    return result;\n+}\n \n UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false)\n {\n@@ -92,7 +117,6 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     return result;\n }\n \n-\n UniValue getblockcount(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -254,6 +278,62 @@ UniValue getblockhash(const UniValue& params, bool fHelp)\n     return pblockindex->GetBlockHash().GetHex();\n }\n \n+UniValue getblockheader(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"getblockheader \\\"hash\\\" ( verbose )\\n\"\n+            \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n+            \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n+            \"2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data\\n\"\n+            \"\\nResult (for verbose = true):\\n\"\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+            \"\\nResult (for verbose=false):\\n\"\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+            + HelpExampleRpc(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    std::string strHash = params[0].get_str();\n+    uint256 hash(uint256S(strHash));\n+\n+    bool fVerbose = true;\n+    if (params.size() > 1)\n+        fVerbose = params[1].get_bool();\n+\n+    if (mapBlockIndex.count(hash) == 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+\n+    CBlockIndex* pblockindex = mapBlockIndex[hash];\n+\n+    if (!fVerbose)\n+    {\n+        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n+        ssBlock << pblockindex->GetBlockHeader();\n+        std::string strHex = HexStr(ssBlock.begin(), ssBlock.end());\n+        return strHex;\n+    }\n+\n+    return blockheaderToJSON(pblockindex);\n+}\n+\n UniValue getblock(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -468,6 +548,36 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n     return CVerifyDB().VerifyDB(pcoinsTip, nCheckLevel, nCheckDepth);\n }\n \n+/** Implementation of IsSuperMajority with better feedback */\n+static UniValue SoftForkMajorityDesc(int minVersion, CBlockIndex* pindex, int nRequired, const Consensus::Params& consensusParams)\n+{\n+    int nFound = 0;\n+    CBlockIndex* pstart = pindex;\n+    for (int i = 0; i < consensusParams.nMajorityWindow && pstart != NULL; i++)\n+    {\n+        if (pstart->nVersion >= minVersion)\n+            ++nFound;\n+        pstart = pstart->pprev;\n+    }\n+\n+    UniValue rv(UniValue::VOBJ);\n+    rv.push_back(Pair(\"status\", nFound >= nRequired));\n+    rv.push_back(Pair(\"found\", nFound));\n+    rv.push_back(Pair(\"required\", nRequired));\n+    rv.push_back(Pair(\"window\", consensusParams.nMajorityWindow));\n+    return rv;\n+}\n+\n+static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+{\n+    UniValue rv(UniValue::VOBJ);\n+    rv.push_back(Pair(\"id\", name));\n+    rv.push_back(Pair(\"version\", version));\n+    rv.push_back(Pair(\"enforce\", SoftForkMajorityDesc(version, pindex, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams)));\n+    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams.nMajorityRejectBlockOutdated, consensusParams)));\n+    return rv;\n+}\n+\n UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -483,6 +593,19 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"  \\\"difficulty\\\": xxxxxx,     (numeric) the current difficulty\\n\"\n             \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n+            \"  \\\"softforks\\\": [            (array) status of softforks in progress\\n\"\n+            \"     {\\n\"\n+            \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\"\n+            \"        \\\"version\\\": xx,         (numeric) block version\\n\"\n+            \"        \\\"enforce\\\": {           (object) progress toward enforcing the softfork rules for new-version blocks\\n\"\n+            \"           \\\"status\\\": xx,       (boolean) true if threshold reached\\n\"\n+            \"           \\\"found\\\": xx,        (numeric) number of blocks with the new version found\\n\"\n+            \"           \\\"required\\\": xx,     (numeric) number of blocks required to trigger\\n\"\n+            \"           \\\"window\\\": xx,       (numeric) maximum size of examined window of recent blocks\\n\"\n+            \"        },\\n\"\n+            \"        \\\"reject\\\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \\\"enforce\\\")\\n\"\n+            \"     }, ...\\n\"\n+            \"  ]\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getblockchaininfo\", \"\")\n@@ -500,6 +623,14 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"verificationprogress\",  Checkpoints::GuessVerificationProgress(Params().Checkpoints(), chainActive.Tip())));\n     obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n     obj.push_back(Pair(\"pruned\",                fPruneMode));\n+\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    CBlockIndex* tip = chainActive.Tip();\n+    UniValue softforks(UniValue::VARR);\n+    softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n+    softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n+    obj.push_back(Pair(\"softforks\",             softforks));\n+\n     if (fPruneMode)\n     {\n         CBlockIndex *block = chainActive.Tip();"
      },
      {
        "sha": "b41e960e8a314ee154df551fb8b3fb746bf8be98",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -71,6 +71,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listunspent\", 1 },\n     { \"listunspent\", 2 },\n     { \"getblock\", 1 },\n+    { \"getblockheader\", 1 },\n     { \"gettransaction\", 1 },\n     { \"getrawtransaction\", 1 },\n     { \"createrawtransaction\", 0 },"
      },
      {
        "sha": "9c6fb10af08ed412121efdf376867eaf39198d69",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 17,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -16,13 +16,11 @@\n #include \"rpcserver.h\"\n #include \"util.h\"\n #include \"validationinterface.h\"\n-#ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n-#endif\n \n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n+#include <boost/shared_ptr.hpp>\n \n #include \"univalue/univalue.h\"\n \n@@ -92,7 +90,6 @@ UniValue getnetworkhashps(const UniValue& params, bool fHelp)\n     return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n }\n \n-#ifdef ENABLE_WALLET\n UniValue getgenerate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -127,16 +124,20 @@ UniValue generate(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"generate\", \"11\")\n         );\n \n-    if (pwalletMain == NULL)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n     if (!Params().MineBlocksOnDemand())\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"This method can only be used on regtest\");\n \n     int nHeightStart = 0;\n     int nHeightEnd = 0;\n     int nHeight = 0;\n     int nGenerate = params[0].get_int();\n-    CReserveKey reservekey(pwalletMain);\n+\n+    boost::shared_ptr<CReserveScript> coinbaseScript;\n+    GetMainSignals().ScriptForMining(coinbaseScript);\n+\n+    //throw an error if no script was provided\n+    if (!coinbaseScript->reserveScript.size())\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n \n     {   // Don't keep cs_main locked\n         LOCK(cs_main);\n@@ -148,9 +149,9 @@ UniValue generate(const UniValue& params, bool fHelp)\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd)\n     {\n-        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n+        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript->reserveScript));\n         if (!pblocktemplate.get())\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Wallet keypool empty\");\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         CBlock *pblock = &pblocktemplate->block;\n         {\n             LOCK(cs_main);\n@@ -166,11 +167,13 @@ UniValue generate(const UniValue& params, bool fHelp)\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n+\n+        //mark script as important because it was used at least for one coinbase output\n+        coinbaseScript->KeepScript();\n     }\n     return blockHashes;\n }\n \n-\n UniValue setgenerate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -193,8 +196,6 @@ UniValue setgenerate(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"setgenerate\", \"true, 1\")\n         );\n \n-    if (pwalletMain == NULL)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n     if (Params().MineBlocksOnDemand())\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Use the generate method instead of setgenerate on this network\");\n \n@@ -212,12 +213,10 @@ UniValue setgenerate(const UniValue& params, bool fHelp)\n \n     mapArgs[\"-gen\"] = (fGenerate ? \"1\" : \"0\");\n     mapArgs [\"-genproclimit\"] = itostr(nGenProcLimit);\n-    GenerateBitcoins(fGenerate, pwalletMain, nGenProcLimit);\n+    GenerateBitcoins(fGenerate, nGenProcLimit, Params());\n \n     return NullUniValue;\n }\n-#endif\n-\n \n UniValue getmininginfo(const UniValue& params, bool fHelp)\n {\n@@ -257,9 +256,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"testnet\",          Params().TestnetToBeDeprecatedFieldRPC()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n-#ifdef ENABLE_WALLET\n     obj.push_back(Pair(\"generate\",         getgenerate(params, false)));\n-#endif\n     return obj;\n }\n "
      },
      {
        "sha": "cab57d7027a1082fdfe0d73726bd865f0ecc46aa",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -378,10 +378,19 @@ UniValue setmocktime(const UniValue& params, bool fHelp)\n     if (!Params().MineBlocksOnDemand())\n         throw runtime_error(\"setmocktime for regression testing (-regtest mode) only\");\n \n-    LOCK(cs_main);\n+    // cs_vNodes is locked and node send/receive times are updated\n+    // atomically with the time change to prevent peers from being\n+    // disconnected because we think we haven't communicated with them\n+    // in a long time.\n+    LOCK2(cs_main, cs_vNodes);\n \n     RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n     SetMockTime(params[0].get_int64());\n \n+    uint64_t t = GetTime();\n+    BOOST_FOREACH(CNode* pnode, vNodes) {\n+        pnode->nLastSend = pnode->nLastRecv = t;\n+    }\n+\n     return NullUniValue;\n }"
      },
      {
        "sha": "dd631905fd478a8a4c655541dc8c456115097b9a",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -515,7 +515,7 @@ UniValue setban(const UniValue& params, bool fHelp)\n         if (params.size() == 4 && params[3].isTrue())\n             absolute = true;\n \n-        isSubnet ? CNode::Ban(subNet, banTime, absolute) : CNode::Ban(netAddr, banTime, absolute);\n+        isSubnet ? CNode::Ban(subNet, BanReasonManuallyAdded, banTime, absolute) : CNode::Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n \n         //disconnect possible nodes\n         while(CNode *bannedNode = (isSubnet ? FindNode(subNet) : FindNode(netAddr)))\n@@ -527,6 +527,7 @@ UniValue setban(const UniValue& params, bool fHelp)\n             throw JSONRPCError(RPC_MISC_ERROR, \"Error: Unban failed\");\n     }\n \n+    DumpBanlist(); //store banlist to disk\n     return NullUniValue;\n }\n \n@@ -541,15 +542,19 @@ UniValue listbanned(const UniValue& params, bool fHelp)\n                             + HelpExampleRpc(\"listbanned\", \"\")\n                             );\n \n-    std::map<CSubNet, int64_t> banMap;\n+    banmap_t banMap;\n     CNode::GetBanned(banMap);\n \n     UniValue bannedAddresses(UniValue::VARR);\n-    for (std::map<CSubNet, int64_t>::iterator it = banMap.begin(); it != banMap.end(); it++)\n+    for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); it++)\n     {\n+        CBanEntry banEntry = (*it).second;\n         UniValue rec(UniValue::VOBJ);\n         rec.push_back(Pair(\"address\", (*it).first.ToString()));\n-        rec.push_back(Pair(\"banned_untill\", (*it).second));\n+        rec.push_back(Pair(\"banned_until\", banEntry.nBanUntil));\n+        rec.push_back(Pair(\"ban_created\", banEntry.nCreateTime));\n+        rec.push_back(Pair(\"ban_reason\", banEntry.banReasonToString()));\n+\n         bannedAddresses.push_back(rec);\n     }\n \n@@ -568,6 +573,7 @@ UniValue clearbanned(const UniValue& params, bool fHelp)\n                             );\n \n     CNode::ClearBanned();\n+    DumpBanlist(); //store banlist to disk\n \n     return NullUniValue;\n }"
      },
      {
        "sha": "7d1db0b60eae95538b2ef5d73b239daa58bb097b",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -11,6 +11,7 @@\n #include \"main.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "aeb51fed562d617edbff6f34425cd86d9514b370",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -124,7 +124,7 @@ CAmount AmountFromValue(const UniValue& value)\n     if (!value.isReal() && !value.isNum())\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number\");\n     CAmount amount;\n-    if (!ParseMoney(value.getValStr(), amount))\n+    if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n     if (!MoneyRange(amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Amount out of range\");\n@@ -289,6 +289,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"blockchain\",         \"getblockcount\",          &getblockcount,          true  },\n     { \"blockchain\",         \"getblock\",               &getblock,               true  },\n     { \"blockchain\",         \"getblockhash\",           &getblockhash,           true  },\n+    { \"blockchain\",         \"getblockheader\",         &getblockheader,         true  },\n     { \"blockchain\",         \"getchaintips\",           &getchaintips,           true  },\n     { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true  },\n     { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true  },\n@@ -306,12 +307,10 @@ static const CRPCCommand vRPCCommands[] =\n     { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true  },\n     { \"mining\",             \"submitblock\",            &submitblock,            true  },\n \n-#ifdef ENABLE_WALLET\n     /* Coin generation */\n     { \"generating\",         \"getgenerate\",            &getgenerate,            true  },\n     { \"generating\",         \"setgenerate\",            &setgenerate,            true  },\n     { \"generating\",         \"generate\",               &generate,               true  },\n-#endif\n \n     /* Raw transactions */\n     { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true  },\n@@ -932,13 +931,6 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n         if (!valRequest.read(strRequest))\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n \n-        // Return immediately if in warmup\n-        {\n-            LOCK(cs_rpcWarmup);\n-            if (fRPCInWarmup)\n-                throw JSONRPCError(RPC_IN_WARMUP, rpcWarmupStatus);\n-        }\n-\n         string strReply;\n \n         // singleton request\n@@ -1010,6 +1002,13 @@ void ServiceConnection(AcceptedConnection *conn)\n \n UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params) const\n {\n+    // Return immediately if in warmup\n+    {\n+        LOCK(cs_rpcWarmup);\n+        if (fRPCInWarmup)\n+            throw JSONRPCError(RPC_IN_WARMUP, rpcWarmupStatus);\n+    }\n+\n     // Find method\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n     if (!pcmd)"
      },
      {
        "sha": "89d3980223e5a5e72e24e41755a73356b670ea2a",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -234,6 +234,7 @@ extern UniValue settxfee(const UniValue& params, bool fHelp);\n extern UniValue getmempoolinfo(const UniValue& params, bool fHelp);\n extern UniValue getrawmempool(const UniValue& params, bool fHelp);\n extern UniValue getblockhash(const UniValue& params, bool fHelp);\n+extern UniValue getblockheader(const UniValue& params, bool fHelp);\n extern UniValue getblock(const UniValue& params, bool fHelp);\n extern UniValue gettxoutsetinfo(const UniValue& params, bool fHelp);\n extern UniValue gettxout(const UniValue& params, bool fHelp);"
      },
      {
        "sha": "0b78fdf5a8eed9c6c3e06ff3ab26a5a224ff1ab2",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 81,
        "deletions": 2,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -335,9 +335,51 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 // Control\n                 //\n                 case OP_NOP:\n-                break;\n+                    break;\n+\n+                case OP_CHECKLOCKTIMEVERIFY:\n+                {\n+                    if (!(flags & SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {\n+                        // not enabled; treat as a NOP2\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                        }\n+                        break;\n+                    }\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // Note that elsewhere numeric opcodes are limited to\n+                    // operands in the range -2**31+1 to 2**31-1, however it is\n+                    // legal for opcodes to produce results exceeding that\n+                    // range. This limitation is implemented by CScriptNum's\n+                    // default 4-byte limit.\n+                    //\n+                    // If we kept to that limit we'd have a year 2038 problem,\n+                    // even though the nLockTime field in transactions\n+                    // themselves is uint32 which only becomes meaningless\n+                    // after the year 2106.\n+                    //\n+                    // Thus as a special case we tell CScriptNum to accept up\n+                    // to 5-byte bignums, which are good until 2**39-1, well\n+                    // beyond the 2**32-1 limit of the nLockTime field itself.\n+                    const CScriptNum nLockTime(stacktop(-1), fRequireMinimal, 5);\n+\n+                    // In the rare event that the argument may be < 0 due to\n+                    // some arithmetic being done first, you can always use\n+                    // 0 MAX CHECKLOCKTIMEVERIFY.\n+                    if (nLockTime < 0)\n+                        return set_error(serror, SCRIPT_ERR_NEGATIVE_LOCKTIME);\n+\n+                    // Actually compare the specified lock time with the transaction.\n+                    if (!checker.CheckLockTime(nLockTime))\n+                        return set_error(serror, SCRIPT_ERR_UNSATISFIED_LOCKTIME);\n+\n+                    break;\n+                }\n \n-                case OP_NOP1: case OP_NOP2: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n+                case OP_NOP1: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n                 case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\n                 {\n                     if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n@@ -1084,6 +1126,43 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     return true;\n }\n \n+bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // There are two times of nLockTime: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nLockTime < LOCKTIME_THRESHOLD.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nLockTime being tested is the same as\n+    // the nLockTime in the transaction.\n+    if (!(\n+        (txTo->nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo->nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+    ))\n+        return false;\n+\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nLockTime > (int64_t)txTo->nLockTime)\n+        return false;\n+\n+    // Finally the nLockTime feature can be disabled and thus\n+    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n+    // finalized by setting nSequence to maxint. The\n+    // transaction would be allowed into the blockchain, making\n+    // the opcode ineffective.\n+    //\n+    // Testing if this vin is not final is sufficient to\n+    // prevent this condition. Alternatively we could test all\n+    // inputs, but testing just this input minimizes the data\n+    // required to prove correct CHECKLOCKTIMEVERIFY execution.\n+    if (txTo->vin[nIn].IsFinal())\n+        return false;\n+\n+    return true;\n+}\n+\n+\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);"
      },
      {
        "sha": "35d572f0ad8c10a507fd6fa760f6c2948bfd1834",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -76,6 +76,11 @@ enum\n     // (softfork safe, BIP62 rule 6)\n     // Note: CLEANSTACK should never be used without P2SH.\n     SCRIPT_VERIFY_CLEANSTACK = (1U << 8),\n+\n+    // Verify CHECKLOCKTIMEVERIFY\n+    //\n+    // See BIP65 for details.\n+    SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),\n };\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n@@ -88,6 +93,11 @@ class BaseSignatureChecker\n         return false;\n     }\n \n+    virtual bool CheckLockTime(const CScriptNum& nLockTime) const\n+    {\n+         return false;\n+    }\n+\n     virtual ~BaseSignatureChecker() {}\n };\n \n@@ -103,6 +113,7 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n public:\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n+    bool CheckLockTime(const CScriptNum& nLockTime) const;\n };\n \n class MutableTransactionSignatureChecker : public TransactionSignatureChecker"
      },
      {
        "sha": "e39ca57f4fbe94b5be929f722d5c19ec708906b2",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -19,6 +19,10 @@\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n \n+// Threshold for nLockTime: below this value it is interpreted as block number,\n+// otherwise as UNIX timestamp.\n+static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n+\n template <typename T>\n std::vector<unsigned char> ToByteVector(const T& in)\n {\n@@ -151,6 +155,7 @@ enum opcodetype\n     // expansion\n     OP_NOP1 = 0xb0,\n     OP_NOP2 = 0xb1,\n+    OP_CHECKLOCKTIMEVERIFY = OP_NOP2,\n     OP_NOP3 = 0xb2,\n     OP_NOP4 = 0xb3,\n     OP_NOP5 = 0xb4,\n@@ -196,7 +201,10 @@ class CScriptNum\n         m_value = n;\n     }\n \n-    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal)\n+    static const size_t nDefaultMaxNumSize = 4;\n+\n+    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal,\n+                        const size_t nMaxNumSize = nDefaultMaxNumSize)\n     {\n         if (vch.size() > nMaxNumSize) {\n             throw scriptnum_error(\"script number overflow\");\n@@ -319,8 +327,6 @@ class CScriptNum\n         return result;\n     }\n \n-    static const size_t nMaxNumSize = 4;\n-\n private:\n     static int64_t set_vch(const std::vector<unsigned char>& vch)\n     {\n@@ -603,4 +609,13 @@ class CScript : public std::vector<unsigned char>\n     }\n };\n \n+class CReserveScript\n+{\n+public:\n+    CScript reserveScript;\n+    virtual void KeepScript() {}\n+    CReserveScript() {}\n+    virtual ~CReserveScript() {}\n+};\n+\n #endif // BITCOIN_SCRIPT_SCRIPT_H"
      },
      {
        "sha": "f1aa1fb408ae57ee4d89e860e5f24211c709af44",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -47,6 +47,10 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"OP_RETURN was encountered\";\n         case SCRIPT_ERR_UNBALANCED_CONDITIONAL:\n             return \"Invalid OP_IF construction\";\n+        case SCRIPT_ERR_NEGATIVE_LOCKTIME:\n+            return \"Negative locktime\";\n+        case SCRIPT_ERR_UNSATISFIED_LOCKTIME:\n+            return \"Locktime requirement not satisfied\";\n         case SCRIPT_ERR_SIG_HASHTYPE:\n             return \"Signature hash type missing or not understood\";\n         case SCRIPT_ERR_SIG_DER:"
      },
      {
        "sha": "bb10b8a2932a53eb72342581a95b6b712d41a4d2",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -35,6 +35,10 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_INVALID_ALTSTACK_OPERATION,\n     SCRIPT_ERR_UNBALANCED_CONDITIONAL,\n \n+    /* OP_CHECKLOCKTIMEVERIFY */\n+    SCRIPT_ERR_NEGATIVE_LOCKTIME,\n+    SCRIPT_ERR_UNSATISFIED_LOCKTIME,\n+\n     /* BIP62 */\n     SCRIPT_ERR_SIG_HASHTYPE,\n     SCRIPT_ERR_SIG_DER,"
      },
      {
        "sha": "8b43183b6dd5027b247c10f9005edc5006eb5b5a",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -5,9 +5,10 @@\n \n #include \"script/sign.h\"\n \n-#include \"primitives/transaction.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n+#include \"policy/policy.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/standard.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "66657127ab85cf47c5c63ad8ea960a16978d2035",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -180,26 +180,6 @@ int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned c\n     return -1;\n }\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n-{\n-    vector<valtype> vSolutions;\n-    if (!Solver(scriptPubKey, whichType, vSolutions))\n-        return false;\n-\n-    if (whichType == TX_MULTISIG)\n-    {\n-        unsigned char m = vSolutions.front()[0];\n-        unsigned char n = vSolutions.back()[0];\n-        // Support up to x-of-3 multisig txns as standard\n-        if (n < 1 || n > 3)\n-            return false;\n-        if (m < 1 || m > n)\n-            return false;\n-    }\n-\n-    return whichType != TX_NONSTANDARD;\n-}\n-\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n {\n     vector<valtype> vSolutions;"
      },
      {
        "sha": "46ae5f9f10389f8825dc2fa0f3d64f4542639c69",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -39,22 +39,6 @@ extern unsigned nMaxDatacarrierBytes;\n  */\n static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n \n-/**\n- * Standard script verification flags that standard transactions will comply\n- * with. However scripts violating these flags may still be present in valid\n- * blocks and we must accept those blocks.\n- */\n-static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n-                                                         SCRIPT_VERIFY_DERSIG |\n-                                                         SCRIPT_VERIFY_STRICTENC |\n-                                                         SCRIPT_VERIFY_MINIMALDATA |\n-                                                         SCRIPT_VERIFY_NULLDUMMY |\n-                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n-                                                         SCRIPT_VERIFY_CLEANSTACK;\n-\n-/** For convenience, standard but not mandatory verify flags. */\n-static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n-\n enum txnouttype\n {\n     TX_NONSTANDARD,\n@@ -85,7 +69,6 @@ const char* GetTxnOutputType(txnouttype t);\n \n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n "
      },
      {
        "sha": "afd35af5031ea71e096a45a4ced2be6e55d8036e",
        "filename": "src/test/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/bitcoin-util-test.json?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -52,7 +52,7 @@\n     [\"-create\",\n      \"in=4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485:0\",\n      \"set=privatekeys:[\\\"5HpHagT65TZzG1PH3CSu63k8DbpvD8s5ip4nEB3kEsreAnchuDf\\\"]\",\n-     \"set=prevtxs:[{\\\"txid\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485\\\",\\\"vout\\\":0,\\\"scriptPubKey\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485\\\"}]\",\n+     \"set=prevtxs:[{\\\"txid\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485\\\",\\\"vout\\\":0,\\\"scriptPubKey\\\":\\\"76a91491b24bf9f5288532960ac687abb035127b1d28a588ac\\\"}]\",\n      \"sign=ALL\",\n      \"outaddr=0.001:193P6LtvS4nCnkDvM9uXn1gsSRqh4aDAz7\"],\n     \"output_cmp\": \"txcreatesign.hex\""
      },
      {
        "sha": "20bdbd08a5c4f1cb1272cf6488b200aa3447ecba",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -120,6 +120,78 @@\n [[[\"a955032f4d6b0c9bfe8cad8f00a8933790b9c1dc28c82e0f48e75b35da0e4944\", 0, \"IF CODESEPARATOR ENDIF 0x21 0x0378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71 CHECKSIGVERIFY CODESEPARATOR 1\"]],\n \"010000000144490eda355be7480f2ec828dcc1b9903793a8008fad8cfe9b0c6b4d2f0355a9000000004a483045022100fa4a74ba9fd59c59f46c3960cf90cbe0d2b743c471d24a3d5d6db6002af5eebb02204d70ec490fd0f7055a7c45f86514336e3a7f03503dacecabb247fc23f15c83510100ffffffff010000000000000000016a00000000\", \"P2SH\"],\n \n+[\"CHECKLOCKTIMEVERIFY tests\"],\n+\n+[\"By-height locks, with argument just beyond tx nLockTime\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000fe64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000001 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000feffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument missing\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000001b1010000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument negative with by-blockheight nLockTime=0\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument negative with by-blocktime nLockTime=500,000,000\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000004005194b1010000000100000000000000000002000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Input locked\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b1ffffffff0100000000000000000002000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Another input being unlocked isn't sufficient; the CHECKLOCKTIMEVERIFY-using input must be unlocked\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"] ,\n+  [\"0000000000000000000000000000000000000000000000000000000000000200\", 1, \"1\"]],\n+\"010000000200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00020000000000000000000000000000000000000000000000000000000000000100000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument/tx height/time mismatch, both versions\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b100000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument 2^32 with nLockTime=2^32-1\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967296 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Same, but with nLockTime=2^31-1\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffff7f\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"6 byte non-minimally-encoded arguments are invalid even in their contents are valid\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x06 0x000000000000 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Failure due to failing CHECKLOCKTIMEVERIFY in scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b1000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Failure due to failing CHECKLOCKTIMEVERIFY in redeemScript\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "24fff575c1d8aea0ec9543cd4380fcd8b2059f14",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -187,5 +187,47 @@\n \"0100000002dbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce000000006b4830450221009627444320dc5ef8d7f68f35010b4c050a6ed0d96b67a84db99fda9c9de58b1e02203e4b4aaa019e012e65d69b487fdf8719df72f488fa91506a80c49a33929f1fd50121022b78b756e2258af13779c1a1f37ea6800259716ca4b7f0b87610e0bf3ab52a01ffffffffdbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce010000009300483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303ffffffff01a0860100000000001976a9149bc0bbdd3024da4d0c38ed1aecf5c68dd1d3fa1288ac00000000\", \"P2SH\"],\n \n \n+[\"CHECKLOCKTIMEVERIFY tests\"],\n+\n+[\"By-height locks, with argument == 0 and == tx nLockTime\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Any non-maxint nSequence is fine\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000feffffff0100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"The argument can be calculated rather than created directly by a PUSHDATA\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 1ADD NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Perhaps even by an ADD producing a 5-byte result that is out of bounds for other opcodes\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483647 2147483647 ADD NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000feffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"5 byte non-minimally-encoded arguments are valid\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x05 0x0000000000 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Valid CHECKLOCKTIMEVERIFY in scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b1000000000100000000000000000001000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Valid CHECKLOCKTIMEVERIFY in redeemScript\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000001000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "a46fcc88cbc99db4f212bb70adf1c3422b2d251c",
        "filename": "src/test/data/txcreatesign.hex",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/data/txcreatesign.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/data/txcreatesign.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatesign.hex?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -1 +1 @@\n-01000000018594c5bdcaec8f06b78b596f31cd292a294fd031e24eec716f43dac91ea7494d0000000000ffffffff01a0860100000000001976a9145834479edbbe0539b31ffd3a8f8ebadc2165ed0188ac00000000\n+01000000018594c5bdcaec8f06b78b596f31cd292a294fd031e24eec716f43dac91ea7494d000000008b48304502210096a75056c9e2cc62b7214777b3d2a592cfda7092520126d4ebfcd6d590c99bd8022051bb746359cf98c0603f3004477eac68701132380db8facba19c89dc5ab5c5e201410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ffffffff01a0860100000000001976a9145834479edbbe0539b31ffd3a8f8ebadc2165ed0188ac00000000"
      },
      {
        "sha": "b65c299adcbaa3f17e35cc4542802f45de7d106e",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/interpreter.h\""
      },
      {
        "sha": "7154476c7c21d50e74a496a85fc413efff098591",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -143,6 +143,17 @@ BOOST_AUTO_TEST_CASE(subnet_test)\n     BOOST_CHECK(CSubNet(\"1:2:3:4:5:6:7:8/128\").IsValid());\n     BOOST_CHECK(!CSubNet(\"1:2:3:4:5:6:7:8/129\").IsValid());\n     BOOST_CHECK(!CSubNet(\"fuzzy\").IsValid());\n+\n+    //CNetAddr constructor test\n+    BOOST_CHECK(CSubNet(CNetAddr(\"127.0.0.1\")).IsValid());\n+    BOOST_CHECK(CSubNet(CNetAddr(\"127.0.0.1\")).Match(CNetAddr(\"127.0.0.1\")));\n+    BOOST_CHECK(!CSubNet(CNetAddr(\"127.0.0.1\")).Match(CNetAddr(\"127.0.0.2\")));\n+    BOOST_CHECK(CSubNet(CNetAddr(\"127.0.0.1\")).ToString() == \"127.0.0.1/255.255.255.255\");\n+\n+    BOOST_CHECK(CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).IsValid());\n+    BOOST_CHECK(CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).Match(CNetAddr(\"1:2:3:4:5:6:7:8\")));\n+    BOOST_CHECK(!CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).Match(CNetAddr(\"1:2:3:4:5:6:7:9\")));\n+    BOOST_CHECK(CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).ToString() == \"1:2:3:4:5:6:7:8/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "25599beafca49e9dcc31b8e5a8c2ea9427430bdb",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -142,6 +142,24 @@ BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"1.00000000\")), 100000000LL);\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"20999999.9999999\")), 2099999999999990LL);\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"20999999.99999999\")), 2099999999999999LL);\n+\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"1e-8\")), COIN/100000000);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.1e-7\")), COIN/100000000);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.01e-6\")), COIN/100000000);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.0000000000000000000000000000000000000000000000000000000000000000000000000001e+68\")), COIN/100000000);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"10000000000000000000000000000000000000000000000000000000000000000e-64\")), COIN);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000e64\")), COIN);\n+\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e-9\")), UniValue); //should fail\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"0.000000019\")), UniValue); //should fail\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.00000001000000\")), 1LL); //should pass, cut trailing 0\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"19e-9\")), UniValue); //should fail\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.19e-6\")), 19); //should pass, leading 0 is present\n+\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"92233720368.54775808\")), UniValue); //overflow error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e+11\")), UniValue); //overflow error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e11\")), UniValue); //overflow error signless\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"93e+9\")), UniValue); //overflow error\n }\n \n BOOST_AUTO_TEST_CASE(json_parse_errors)\n@@ -151,6 +169,9 @@ BOOST_AUTO_TEST_CASE(json_parse_errors)\n     // Valid, with leading or trailing whitespace\n     BOOST_CHECK_EQUAL(ParseNonRFCJSONValue(\" 1.0\").get_real(), 1.0);\n     BOOST_CHECK_EQUAL(ParseNonRFCJSONValue(\"1.0 \").get_real(), 1.0);\n+\n+    BOOST_CHECK_THROW(AmountFromValue(ParseNonRFCJSONValue(\".19e-6\")), std::runtime_error); //should fail, missing leading 0, therefore invalid JSON\n+    BOOST_CHECK_EQUAL(AmountFromValue(ParseNonRFCJSONValue(\"0.00000000000000000000000000000000000001e+30 \")), 1);\n     // Invalid, initial garbage\n     BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"[1.0\"), std::runtime_error);\n     BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"a1.0\"), std::runtime_error);\n@@ -199,7 +220,7 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n     adr = find_value(o1, \"address\");\n-    UniValue banned_until = find_value(o1, \"banned_untill\");\n+    UniValue banned_until = find_value(o1, \"banned_until\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.0\");\n     BOOST_CHECK_EQUAL(banned_until.get_int64(), 1607731200); // absolute time check\n \n@@ -210,7 +231,7 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n     adr = find_value(o1, \"address\");\n-    banned_until = find_value(o1, \"banned_untill\");\n+    banned_until = find_value(o1, \"banned_until\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.0\");\n     int64_t now = GetTime();    \n     BOOST_CHECK(banned_until.get_int64() > now);"
      },
      {
        "sha": "16c9a4a868e9af296279afaa1625f596af5072f4",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -5,6 +5,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "d95724dbe17b7d89ab7bba5c103ca75645dcf52c",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -145,7 +145,7 @@ static void RunCreate(const int64_t& num)\n {\n     CheckCreateInt(num);\n     CScriptNum scriptnum(num);\n-    if (scriptnum.getvch().size() <= CScriptNum::nMaxNumSize)\n+    if (scriptnum.getvch().size() <= CScriptNum::nDefaultMaxNumSize)\n         CheckCreateVch(num);\n     else\n     {"
      },
      {
        "sha": "260524f7cc605879c666bb003cf9c0a42c964111",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -12,6 +12,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n \n@@ -41,7 +42,8 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"MINIMALDATA\"), (unsigned int)SCRIPT_VERIFY_MINIMALDATA)\n     (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY)\n     (string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n-    (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK);\n+    (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK)\n+    (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY);\n \n unsigned int ParseScriptFlags(string strFlags)\n {"
      },
      {
        "sha": "16bc8d30f63f79ea20feaa8da742995a47ff38d0",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -286,7 +286,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n }\n \n static const char *json1 =\n-\"[1.10000000,{\\\"key1\\\":\\\"str\\\\u0000\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian\\\"}}]\";\n+\"[1.10000000,{\\\"key1\\\":\\\"str\\\\u0000\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian http://test.com\\\"}}]\";\n \n BOOST_AUTO_TEST_CASE(univalue_readwrite)\n {"
      },
      {
        "sha": "e956cc5b90dfd3e289f4ee0edbf7a9b15b1c942d",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -418,4 +418,70 @@ BOOST_AUTO_TEST_CASE(test_FormatSubVersion)\n     BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments),std::string(\"/Test:0.9.99(comment1)/\"));\n     BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments2),std::string(\"/Test:0.9.99(comment1; comment2)/\"));\n }\n+\n+BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n+{\n+    int64_t amount = 0;\n+    BOOST_CHECK(ParseFixedPoint(\"0\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 0LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 100000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"0.0\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 0LL);\n+    BOOST_CHECK(ParseFixedPoint(\"-0.1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, -10000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1.1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 110000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1.10000000000000000\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 110000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1.1e1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 1100000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1.1e-1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 11000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1000\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 100000000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"-1000\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, -100000000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"0.00000001\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 1LL);\n+    BOOST_CHECK(ParseFixedPoint(\"0.0000000100000000\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 1LL);\n+    BOOST_CHECK(ParseFixedPoint(\"-0.00000001\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, -1LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1000000000.00000001\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 100000000000000001LL);\n+    BOOST_CHECK(ParseFixedPoint(\"9999999999.99999999\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 999999999999999999LL);\n+    BOOST_CHECK(ParseFixedPoint(\"-9999999999.99999999\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, -999999999999999999LL);\n+\n+    BOOST_CHECK(!ParseFixedPoint(\"\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"a-1000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-a1000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-1000a\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-01000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"00.1\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\".1\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"--0.1\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"0.000000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-0.000000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"0.00000001000000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-10000000000.00000000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"10000000000.00000000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-10000000000.00000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"10000000000.00000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-10000000000.00000009\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"10000000000.00000009\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-99999999999.99999999\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"99999909999.09999999\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"92233720368.54775807\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"92233720368.54775808\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-92233720368.54775808\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-92233720368.54775809\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"1.1e\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"1.1e-\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "c2ccc767b89f6ef8e4a0defafedd8fa659ff2e9f",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -192,7 +192,7 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n                 continue;\n             const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n             if (fSanityCheck) assert(coins);\n-            if (!coins || (coins->IsCoinBase() && nMemPoolHeight - coins->nHeight < COINBASE_MATURITY)) {\n+            if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n                 transactionsToRemove.push_back(tx);\n                 break;\n             }"
      },
      {
        "sha": "5e5a4d4aed43a8a03cf1dbaa24323075ddcac0d9",
        "filename": "src/univalue/gen.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/univalue/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/univalue/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/gen.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -22,7 +22,6 @@ static void initJsonEscape()\n {\n     escapes[(int)'\"'] = \"\\\\\\\"\";\n     escapes[(int)'\\\\'] = \"\\\\\\\\\";\n-    escapes[(int)'/'] = \"\\\\/\";\n     escapes[(int)'\\b'] = \"\\\\b\";\n     escapes[(int)'\\f'] = \"\\\\f\";\n     escapes[(int)'\\n'] = \"\\\\n\";"
      },
      {
        "sha": "4133b24ca11f85814a85359131c22bf20b3bfcaf",
        "filename": "src/univalue/univalue_escapes.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/univalue/univalue_escapes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/univalue/univalue_escapes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_escapes.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -49,7 +49,7 @@ static const char *escapes[256] = {\n \tNULL,\n \tNULL,\n \tNULL,\n-\t\"\\\\/\",\n+\tNULL,\n \tNULL,\n \tNULL,\n \tNULL,"
      },
      {
        "sha": "bb7df23205db3ca14705935ef9a7d373b55a855b",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -756,3 +756,13 @@ void SetThreadPriority(int nPriority)\n #endif // PRIO_THREAD\n #endif // WIN32\n }\n+\n+int GetNumCores()\n+{\n+#if BOOST_VERSION >= 105600\n+    return boost::thread::physical_concurrency();\n+#else // Must fall back to hardware_concurrency, which unfortunately counts virtual cores\n+    return boost::thread::hardware_concurrency();\n+#endif\n+}\n+"
      },
      {
        "sha": "6019e25015147887c5c55cc7a3890acb88aa1de9",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -199,6 +199,13 @@ std::string HelpMessageGroup(const std::string& message);\n  */\n std::string HelpMessageOpt(const std::string& option, const std::string& message);\n \n+/**\n+ * Return the number of physical cores available on the current system.\n+ * @note This does not count virtual cores, such as those provided by HyperThreading\n+ * when boost is newer than 1.56.\n+ */\n+int GetNumCores();\n+\n void SetThreadPriority(int nPriority);\n void RenameThread(const char* name);\n "
      },
      {
        "sha": "7208ca9474974aa71cde6d296de059ad28b5524f",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 120,
        "deletions": 0,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -538,3 +538,123 @@ int atoi(const std::string& str)\n {\n     return atoi(str.c_str());\n }\n+\n+/** Upper bound for mantissa.\n+ * 10^18-1 is the largest arbitrary decimal that will fit in a signed 64-bit integer.\n+ * Larger integers cannot consist of arbitrary combinations of 0-9:\n+ *\n+ *   999999999999999999  1^18-1\n+ *  9223372036854775807  (1<<63)-1  (max int64_t)\n+ *  9999999999999999999  1^19-1     (would overflow)\n+ */\n+static const int64_t UPPER_BOUND = 1000000000000000000LL - 1LL;\n+\n+/** Helper function for ParseFixedPoint */\n+static inline bool ProcessMantissaDigit(char ch, int64_t &mantissa, int &mantissa_tzeros)\n+{\n+    if(ch == '0')\n+        ++mantissa_tzeros;\n+    else {\n+        for (int i=0; i<=mantissa_tzeros; ++i) {\n+            if (mantissa > (UPPER_BOUND / 10LL))\n+                return false; /* overflow */\n+            mantissa *= 10;\n+        }\n+        mantissa += ch - '0';\n+        mantissa_tzeros = 0;\n+    }\n+    return true;\n+}\n+\n+bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n+{\n+    int64_t mantissa = 0;\n+    int64_t exponent = 0;\n+    int mantissa_tzeros = 0;\n+    bool mantissa_sign = false;\n+    bool exponent_sign = false;\n+    int ptr = 0;\n+    int end = val.size();\n+    int point_ofs = 0;\n+\n+    if (ptr < end && val[ptr] == '-') {\n+        mantissa_sign = true;\n+        ++ptr;\n+    }\n+    if (ptr < end)\n+    {\n+        if (val[ptr] == '0') {\n+            /* pass single 0 */\n+            ++ptr;\n+        } else if (val[ptr] >= '1' && val[ptr] <= '9') {\n+            while (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n+                if (!ProcessMantissaDigit(val[ptr], mantissa, mantissa_tzeros))\n+                    return false; /* overflow */\n+                ++ptr;\n+            }\n+        } else return false; /* missing expected digit */\n+    } else return false; /* empty string or loose '-' */\n+    if (ptr < end && val[ptr] == '.')\n+    {\n+        ++ptr;\n+        if (ptr < end && val[ptr] >= '0' && val[ptr] <= '9')\n+        {\n+            while (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n+                if (!ProcessMantissaDigit(val[ptr], mantissa, mantissa_tzeros))\n+                    return false; /* overflow */\n+                ++ptr;\n+                ++point_ofs;\n+            }\n+        } else return false; /* missing expected digit */\n+    }\n+    if (ptr < end && (val[ptr] == 'e' || val[ptr] == 'E'))\n+    {\n+        ++ptr;\n+        if (ptr < end && val[ptr] == '+')\n+            ++ptr;\n+        else if (ptr < end && val[ptr] == '-') {\n+            exponent_sign = true;\n+            ++ptr;\n+        }\n+        if (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n+            while (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n+                if (exponent > (UPPER_BOUND / 10LL))\n+                    return false; /* overflow */\n+                exponent = exponent * 10 + val[ptr] - '0';\n+                ++ptr;\n+            }\n+        } else return false; /* missing expected digit */\n+    }\n+    if (ptr != end)\n+        return false; /* trailing garbage */\n+\n+    /* finalize exponent */\n+    if (exponent_sign)\n+        exponent = -exponent;\n+    exponent = exponent - point_ofs + mantissa_tzeros;\n+\n+    /* finalize mantissa */\n+    if (mantissa_sign)\n+        mantissa = -mantissa;\n+\n+    /* convert to one 64-bit fixed-point value */\n+    exponent += decimals;\n+    if (exponent < 0)\n+        return false; /* cannot represent values smaller than 10^-decimals */\n+    if (exponent >= 18)\n+        return false; /* cannot represent values larger than or equal to 10^(18-decimals) */\n+\n+    for (int i=0; i < exponent; ++i) {\n+        if (mantissa > (UPPER_BOUND / 10LL) || mantissa < -(UPPER_BOUND / 10LL))\n+            return false; /* overflow */\n+        mantissa *= 10;\n+    }\n+    if (mantissa > UPPER_BOUND || mantissa < -UPPER_BOUND)\n+        return false; /* overflow */\n+\n+    if (amount_out)\n+        *amount_out = mantissa;\n+\n+    return true;\n+}\n+"
      },
      {
        "sha": "dcd56751f2eb7bbef14dd0576fb1916202a55ccc",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -109,4 +109,11 @@ bool TimingResistantEqual(const T& a, const T& b)\n     return accumulator == 0;\n }\n \n+/** Parse number as fixed point according to JSON number syntax.\n+ * See http://json.org/number.gif\n+ * @returns true on success, false on error.\n+ * @note The result must be in the range (-10^18,10^18), otherwise an overflow error will trigger.\n+ */\n+bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n+\n #endif // BITCOIN_UTILSTRENCODINGS_H"
      },
      {
        "sha": "d365f0300849e4295949cbbb7df1bc91dcb587de",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -19,9 +19,13 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1));\n     g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+    g_signals.ScriptForMining.connect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n+    g_signals.BlockFound.connect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n+    g_signals.BlockFound.disconnect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n+    g_signals.ScriptForMining.disconnect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1));\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -31,6 +35,8 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n }\n \n void UnregisterAllValidationInterfaces() {\n+    g_signals.BlockFound.disconnect_all_slots();\n+    g_signals.ScriptForMining.disconnect_all_slots();\n     g_signals.BlockChecked.disconnect_all_slots();\n     g_signals.Broadcast.disconnect_all_slots();\n     g_signals.Inventory.disconnect_all_slots();"
      },
      {
        "sha": "fb0ce0bdaac44333a4ac8278534280c70ff06b85",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -7,9 +7,11 @@\n #define BITCOIN_VALIDATIONINTERFACE_H\n \n #include <boost/signals2/signal.hpp>\n+#include <boost/shared_ptr.hpp>\n \n class CBlock;\n struct CBlockLocator;\n+class CReserveScript;\n class CTransaction;\n class CValidationInterface;\n class CValidationState;\n@@ -34,6 +36,8 @@ class CValidationInterface {\n     virtual void Inventory(const uint256 &hash) {}\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime) {}\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n+    virtual void GetScriptForMining(boost::shared_ptr<CReserveScript>&) {};\n+    virtual void ResetRequestCount(const uint256 &hash) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n@@ -52,6 +56,10 @@ struct CMainSignals {\n     boost::signals2::signal<void (int64_t nBestBlockTime)> Broadcast;\n     /** Notifies listeners of a block validation result */\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    /** Notifies listeners that a key for mining is required (coinbase) */\n+    boost::signals2::signal<void (boost::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    /** Notifies listeners that a block has been successfully mined */\n+    boost::signals2::signal<void (const uint256 &)> BlockFound;\n };\n \n CMainSignals& GetMainSignals();"
      },
      {
        "sha": "7b3cd9803b31e5c81b0a2153dcc646f06506d59a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -12,6 +12,7 @@\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\"\n@@ -419,6 +420,7 @@ void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n         const uint256& hash = it->second;\n         CWalletTx* copyTo = &mapWallet[hash];\n         if (copyFrom == copyTo) continue;\n+        if (!copyFrom->IsEquivalentTo(*copyTo)) continue;\n         copyTo->mapValue = copyFrom->mapValue;\n         copyTo->vOrderForm = copyFrom->vOrderForm;\n         // fTimeReceivedIsTxTime not copied on purpose\n@@ -1330,6 +1332,15 @@ bool CWalletTx::IsTrusted() const\n     return true;\n }\n \n+bool CWalletTx::IsEquivalentTo(const CWalletTx& tx) const\n+{\n+        CMutableTransaction tx1 = *this;\n+        CMutableTransaction tx2 = tx;\n+        for (unsigned int i = 0; i < tx1.vin.size(); i++) tx1.vin[i].scriptSig = CScript();\n+        for (unsigned int i = 0; i < tx2.vin.size(); i++) tx2.vin[i].scriptSig = CScript();\n+        return CTransaction(tx1) == CTransaction(tx2);\n+}\n+\n std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime)\n {\n     std::vector<uint256> result;\n@@ -2583,6 +2594,17 @@ void CWallet::UpdatedTransaction(const uint256 &hashTx)\n     }\n }\n \n+void CWallet::GetScriptForMining(boost::shared_ptr<CReserveScript> &script)\n+{\n+    boost::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n+    CPubKey pubkey;\n+    if (!rKey->GetReservedKey(pubkey))\n+        return;\n+\n+    script = rKey;\n+    script->reserveScript = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n+}\n+\n void CWallet::LockCoin(COutPoint& output)\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins"
      },
      {
        "sha": "003266ba19a6f2123df5822131e49f4e98095f25",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55bb08e5f882af8bba8b077fcb582883ba26795c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55bb08e5f882af8bba8b077fcb582883ba26795c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=55bb08e5f882af8bba8b077fcb582883ba26795c",
        "patch": "@@ -28,6 +28,8 @@\n #include <utility>\n #include <vector>\n \n+#include <boost/shared_ptr.hpp>\n+\n /**\n  * Settings\n  */\n@@ -376,6 +378,9 @@ class CWalletTx : public CMerkleTx\n         return (GetDebit(filter) > 0);\n     }\n \n+    // True if only scriptSigs are different\n+    bool IsEquivalentTo(const CWalletTx& tx) const;\n+\n     bool IsTrusted() const;\n \n     bool WriteToDisk(CWalletDB *pwalletdb);\n@@ -680,6 +685,13 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n+    void GetScriptForMining(boost::shared_ptr<CReserveScript> &script);\n+    void ResetRequestCount(const uint256 &hash)\n+    {\n+        LOCK(cs_wallet);\n+        mapRequestCount[hash] = 0;\n+    };\n+    \n     unsigned int GetKeyPoolSize()\n     {\n         AssertLockHeld(cs_wallet); // setKeyPool\n@@ -735,7 +747,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n };\n \n /** A key allocated from the key pool. */\n-class CReserveKey\n+class CReserveKey : public CReserveScript\n {\n protected:\n     CWallet* pwallet;\n@@ -756,6 +768,7 @@ class CReserveKey\n     void ReturnKey();\n     bool GetReservedKey(CPubKey &pubkey);\n     void KeepKey();\n+    void KeepScript() { KeepKey(); }\n };\n \n "
      }
    ]
  },
  {
    "sha": "fad00fb74f2ff2d81c76ef2729b0e248d2f8368c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQwMGZiNzRmMmZmMmQ4MWM3NmVmMjcyOWIwZTI0OGQyZjgzNjhj",
    "commit": {
      "author": {
        "name": "Ashley Holman",
        "email": "dscvlt@gmail.com",
        "date": "2015-07-11T08:57:46Z"
      },
      "committer": {
        "name": "Ashley Holman",
        "email": "dscvlt@gmail.com",
        "date": "2015-07-11T10:29:19Z"
      },
      "message": "Remove priority index.",
      "tree": {
        "sha": "ee82d6abe12f3110a62f80b76646ad7049818013",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee82d6abe12f3110a62f80b76646ad7049818013"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad00fb74f2ff2d81c76ef2729b0e248d2f8368c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad00fb74f2ff2d81c76ef2729b0e248d2f8368c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad00fb74f2ff2d81c76ef2729b0e248d2f8368c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad00fb74f2ff2d81c76ef2729b0e248d2f8368c/comments",
    "author": {
      "login": "ashleyholman",
      "id": 549484,
      "node_id": "MDQ6VXNlcjU0OTQ4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/549484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ashleyholman",
      "html_url": "https://github.com/ashleyholman",
      "followers_url": "https://api.github.com/users/ashleyholman/followers",
      "following_url": "https://api.github.com/users/ashleyholman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ashleyholman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ashleyholman/subscriptions",
      "organizations_url": "https://api.github.com/users/ashleyholman/orgs",
      "repos_url": "https://api.github.com/users/ashleyholman/repos",
      "events_url": "https://api.github.com/users/ashleyholman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ashleyholman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ashleyholman",
      "id": 549484,
      "node_id": "MDQ6VXNlcjU0OTQ4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/549484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ashleyholman",
      "html_url": "https://github.com/ashleyholman",
      "followers_url": "https://api.github.com/users/ashleyholman/followers",
      "following_url": "https://api.github.com/users/ashleyholman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ashleyholman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ashleyholman/subscriptions",
      "organizations_url": "https://api.github.com/users/ashleyholman/orgs",
      "repos_url": "https://api.github.com/users/ashleyholman/repos",
      "events_url": "https://api.github.com/users/ashleyholman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ashleyholman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55bb08e5f882af8bba8b077fcb582883ba26795c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55bb08e5f882af8bba8b077fcb582883ba26795c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55bb08e5f882af8bba8b077fcb582883ba26795c"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 17,
      "deletions": 77
    },
    "files": [
      {
        "sha": "03c09f0a279fe7062405d6787d7672c30e9be646",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad00fb74f2ff2d81c76ef2729b0e248d2f8368c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad00fb74f2ff2d81c76ef2729b0e248d2f8368c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fad00fb74f2ff2d81c76ef2729b0e248d2f8368c",
        "patch": "@@ -2024,8 +2024,6 @@ bool static DisconnectTip(CValidationState &state) {\n     mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n-    // Recalculate priorities of mempool transactions\n-    mempool.recalcPriorities(pindexDelete->nHeight);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n@@ -2087,8 +2085,6 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     mempool.check(pcoinsTip);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew);\n-    // Recalculate priorities of mempool transactions\n-    mempool.recalcPriorities(pindexNew->nHeight+1);\n     // Tell wallet about transactions that went from mempool\n     // to conflicted:\n     BOOST_FOREACH(const CTransaction &tx, txConflicted) {"
      },
      {
        "sha": "85971f018f393ef23d4dd17b07c16c29b44c266e",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 25,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad00fb74f2ff2d81c76ef2729b0e248d2f8368c/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad00fb74f2ff2d81c76ef2729b0e248d2f8368c/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=fad00fb74f2ff2d81c76ef2729b0e248d2f8368c",
        "patch": "@@ -105,63 +105,52 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n {\n     CTxMemPool pool(CFeeRate(0));\n \n-    /* 3rd highest fee, 2nd highest priority */\n+    /* 3rd highest fee */\n     CMutableTransaction tx1 = CMutableTransaction();\n     tx1.vout.resize(1);\n     tx1.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx1.vout[0].nValue = 10 * COIN;\n     pool.addUnchecked(tx1.GetHash(), CTxMemPoolEntry(tx1, 10000LL, 0, 10.0, 1, true));\n \n-    /* highest fee, 3rd highest priority */\n+    /* highest fee */\n     CMutableTransaction tx2 = CMutableTransaction();\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx2.vout[0].nValue = 2 * COIN;\n     pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 20000LL, 0, 9.0, 1, true));\n \n-    /* lowest fee, highest priority */\n+    /* lowest fee */\n     CMutableTransaction tx3 = CMutableTransaction();\n     tx3.vout.resize(1);\n     tx3.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx3.vout[0].nValue = 5 * COIN;\n     pool.addUnchecked(tx3.GetHash(), CTxMemPoolEntry(tx3, 0LL, 0, 100.0, 1, true));\n \n-    /* 2nd highest fee, lowest priority */\n+    /* 2nd highest fee */\n     CMutableTransaction tx4 = CMutableTransaction();\n     tx4.vout.resize(1);\n     tx4.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx4.vout[0].nValue = 6 * COIN;\n     pool.addUnchecked(tx4.GetHash(), CTxMemPoolEntry(tx4, 15000LL, 0, 1.0, 1, true));\n \n+    /* equal fee rate to tx1, but newer */\n+    CMutableTransaction tx5 = CMutableTransaction();\n+    tx5.vout.resize(1);\n+    tx5.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+    tx5.vout[0].nValue = 11 * COIN;\n+    pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 10000LL, 1, 10.0, 1, true));\n+\n     // there should be 4 transactions in the mempool\n-    BOOST_CHECK_EQUAL(pool.size(), 4);\n+    BOOST_CHECK_EQUAL(pool.size(), 5);\n \n-    // Check the fee-rate index is in order, should be tx2, tx4, tx1, tx3\n+    // Check the fee-rate index is in order, should be tx2, tx4, tx1, tx5, tx3\n     CTxMemPool::indexed_transaction_set::nth_index<1>::type::iterator it = pool.mapTx.get<1>().begin();\n     BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx2.GetHash().ToString());\n     BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx4.GetHash().ToString());\n     BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx1.GetHash().ToString());\n+    BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx5.GetHash().ToString());\n     BOOST_CHECK_EQUAL(it++->GetTx().GetHash().ToString(), tx3.GetHash().ToString());\n     BOOST_CHECK(it == pool.mapTx.get<1>().end());\n-\n-    // Check the priority index is in order, should be tx3, tx1, tx2, tx4\n-    CTxMemPool::indexed_transaction_set::nth_index<2>::type::iterator it2 = pool.mapTx.get<2>().begin();\n-    BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx3.GetHash().ToString());\n-    BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx1.GetHash().ToString());\n-    BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx2.GetHash().ToString());\n-    BOOST_CHECK_EQUAL(it2++->GetTx().GetHash().ToString(), tx4.GetHash().ToString());\n-    BOOST_CHECK(it2 == pool.mapTx.get<2>().end());\n-\n-    // Now advance the height of the mempool by 1 block\n-    pool.recalcPriorities(2);\n-\n-    // Check the priority index has been adjusted.  Should be tx1, tx4, tx3, tx2\n-    CTxMemPool::indexed_transaction_set::nth_index<2>::type::iterator it3 = pool.mapTx.get<2>().begin();\n-    BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx1.GetHash().ToString());\n-    BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx4.GetHash().ToString());\n-    BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx3.GetHash().ToString());\n-    BOOST_CHECK_EQUAL(it3++->GetTx().GetHash().ToString(), tx2.GetHash().ToString());\n-    BOOST_CHECK(it3 == pool.mapTx.get<2>().end());\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "a1550d42d22de97a0b3462496c23b3564b78b0c1",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 27,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad00fb74f2ff2d81c76ef2729b0e248d2f8368c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad00fb74f2ff2d81c76ef2729b0e248d2f8368c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=fad00fb74f2ff2d81c76ef2729b0e248d2f8368c",
        "patch": "@@ -18,17 +18,15 @@\n using namespace std;\n \n CTxMemPoolEntry::CTxMemPoolEntry():\n-    nFee(0), nTxSize(0), nModSize(0), nTime(0), dPriority(0.0),\n-    dCurrentPriority(0.0), hadNoDependencies(false)\n+    nFee(0), nTxSize(0), nModSize(0), nTime(0), dPriority(0.0), hadNoDependencies(false)\n {\n     nHeight = MEMPOOL_HEIGHT;\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _dPriority,\n                                  unsigned int _nHeight, bool poolHasNoInputsOf):\n-    tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority),\n-    dCurrentPriority(_dPriority), nHeight(_nHeight),\n+    tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority), nHeight(_nHeight),\n     hadNoDependencies(poolHasNoInputsOf)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n@@ -110,29 +108,6 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n }\n \n \n-struct update_priority\n-{\n-    update_priority (unsigned int h) : height(h) {}\n-\n-    void operator() (CTxMemPoolEntry &e)\n-    {\n-        e.recalcCurrentPriority(height);\n-    }\n-private:\n-    unsigned int height;\n-};\n-\n-void CTxMemPool::recalcPriorities(unsigned int nBlockHeight)\n-{\n-    LOCK(cs);\n-    for (indexed_transaction_set::nth_index<0>::type::iterator it = mapTx.begin();\n-         it != mapTx.end(); it++)\n-    {\n-        mapTx.modify(it, update_priority(nBlockHeight));\n-    }\n-}\n-\n-\n void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& removed, bool fRecursive)\n {\n     // Remove transaction from memory pool"
      },
      {
        "sha": "2c4e37ff9bef29e0e7625fe6e2c324086bb14fe2",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 21,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad00fb74f2ff2d81c76ef2729b0e248d2f8368c/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad00fb74f2ff2d81c76ef2729b0e248d2f8368c/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=fad00fb74f2ff2d81c76ef2729b0e248d2f8368c",
        "patch": "@@ -45,7 +45,6 @@ class CTxMemPoolEntry\n     CFeeRate feeRate; //! ... and fee per kB\n     int64_t nTime; //! Local time when entering the mempool\n     double dPriority; //! Priority when entering the mempool\n-    double dCurrentPriority; //! Priority at next block height\n     unsigned int nHeight; //! Chain height when entering the mempool\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n \n@@ -57,14 +56,12 @@ class CTxMemPoolEntry\n \n     const CTransaction& GetTx() const { return this->tx; }\n     double GetPriority(unsigned int currentHeight) const;\n-    double GetCurrentPriority() const { return dCurrentPriority; }\n     CAmount GetFee() const { return nFee; }\n     CFeeRate GetFeeRate() const { return feeRate; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n-    void recalcCurrentPriority (unsigned int height) { dCurrentPriority = GetPriority(height); }\n };\n \n // extracts a TxMemPoolEntry's transaction hash\n@@ -77,24 +74,13 @@ struct mempoolentry_txid\n     }\n };\n \n-class CompareTxMemPoolEntryByPriority\n-{\n-public:\n-    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n-    {\n-        if (a.GetCurrentPriority() == b.GetCurrentPriority())\n-            return a.GetFeeRate() > b.GetFeeRate();\n-        return a.GetCurrentPriority() > b.GetCurrentPriority();\n-    }\n-};\n-\n class CompareTxMemPoolEntryByFee\n {\n public:\n     bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n     {\n         if (a.GetFeeRate() == b.GetFeeRate())\n-            return a.GetCurrentPriority() > b.GetCurrentPriority();\n+            return a.GetTime() < b.GetTime();\n         return a.GetFeeRate() > b.GetFeeRate();\n     }\n };\n@@ -143,11 +129,6 @@ class CTxMemPool\n             boost::multi_index::ordered_non_unique<\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n                 CompareTxMemPoolEntryByFee\n-            >,\n-            // sorted by priority\n-            boost::multi_index::ordered_non_unique<\n-                boost::multi_index::identity<CTxMemPoolEntry>,\n-                CompareTxMemPoolEntryByPriority\n             >\n         >\n     > indexed_transaction_set;\n@@ -178,7 +159,6 @@ class CTxMemPool\n     void clear();\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);\n-    void recalcPriorities(unsigned int nBlockHeight);\n     unsigned int GetTransactionsUpdated() const;\n     void AddTransactionsUpdated(unsigned int n);\n     /**"
      }
    ]
  }
]