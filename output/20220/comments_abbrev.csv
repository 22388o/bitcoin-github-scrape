jonatack,2020-10-23 10:57:10,Pushed a few improvements. Should be ready for review.,https://github.com/bitcoin/bitcoin/pull/20220#issuecomment-715268966,715268966,
jonatack,2020-10-26 20:47:28,"@Xekyo thanks for the excellent feedback--I have been building on it, writing more tests, finding a few more things, will push an update tomorrow.",https://github.com/bitcoin/bitcoin/pull/20220#issuecomment-716813756,716813756,
DrahtBot,2020-10-27 05:48:46,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20250 (Bugfix: RPC/Wallet: Make BTC/kB and sat/B fee modes work sanely by luke-jr)\n* #17211 (Allow fundrawtransaction an",https://github.com/bitcoin/bitcoin/pull/20220#issuecomment-717000109,717000109,
jonatack,2020-10-27 21:25:21,"Hopefully addressed the (excellent) review feedback and also added missing explicit fee rate coverage in `wallet_basic.py` for RPCs sendtoaddress and sendmany and in `wallet_send.py` for RPC send. Found some bugs and inconsistent behavior in RPC send, some of which I notated with `TODO` comments in the tests, but left the fixes for follow-ups as I've spent a ton of time here already going through ",https://github.com/bitcoin/bitcoin/pull/20220#issuecomment-717549366,717549366,
Xekyo,2020-10-28 03:38:09,Just seeing this now. Aiming to take a look tomorrow.,https://github.com/bitcoin/bitcoin/pull/20220#issuecomment-717675094,717675094,
jonatack,2020-10-28 23:27:44,"Thanks @Xekyo, updated units and comments per `git diff c80e227 0be2900`.\n\n<details><summary><code>git diff c80e227 0be2900</code></summary><p>\n\n```diff\ndiff --git a/test/functional/rpc_fundrawtransaction.py b/test/functional/rpc_fundrawtransaction.py\nindex a0e1d1b8a3..85ecb40354 100755\n--- a/test/functional/rpc_fundrawtransaction.py\n+++ b/test/functional/rpc_fundrawtransaction.py",https://github.com/bitcoin/bitcoin/pull/20220#issuecomment-718265863,718265863,
Xekyo,2020-10-29 00:09:29,"Just ran the functional tests (for the previous commit I reviewed), which takes a surprisingly long time. Luckily, the first hit on an internet search for how to run the functional tests was this guide by some Jon Atack, made it really easy to get set up. :laughing: ",https://github.com/bitcoin/bitcoin/pull/20220#issuecomment-718278451,718278451,
Xekyo,2020-10-29 00:17:01,"Changes look great to me. \nutack `0be2900` \ncurrently running functional tests.",https://github.com/bitcoin/bitcoin/pull/20220#issuecomment-718280719,718280719,
sipa,2020-10-29 00:25:35,"@Xekyo You can run them in parallel; if you have sufficient RAM pretty extremely even. `test_runner.py -j60` works fine on my 4-core 32 GiB RAM system, taking 3m46s. A lot of the time consists of processes waiting for each other, so it's not actually CPU bound.",https://github.com/bitcoin/bitcoin/pull/20220#issuecomment-718283509,718283509,
jonatack,2020-10-29 00:34:06,> You can run them in parallel; if you have sufficient RAM pretty extremely even. `test_runner.py -j60` works fine on my 4-core 32 GIB RAM system\n\nGood point; I'll mention that in the guide.,https://github.com/bitcoin/bitcoin/pull/20220#issuecomment-718286085,718286085,
Xekyo,2020-10-29 00:37:33,tack (functional tests only) 0be29000c011dec0722481dbebb159873da6fa54,https://github.com/bitcoin/bitcoin/pull/20220#issuecomment-718287029,718287029,
jonatack,2020-11-02 12:50:52,"> @Xekyo You can run them in parallel; if you have sufficient RAM pretty extremely even. `test_runner.py -j60` works fine on my 4-core 32 GiB RAM system, taking 3m46s. A lot of the time consists of processes waiting for each other, so it's not actually CPU bound.\n\nI have a sloow 4-core 32GB RAM laptop and `test/functional/test_runner.py -j60` does run much faster--good tip.",https://github.com/bitcoin/bitcoin/pull/20220#issuecomment-720452130,720452130,
jonatack,2020-11-04 08:42:07,"Thank you @Xekyo, @kallewoof and @meshcollider!",https://github.com/bitcoin/bitcoin/pull/20220#issuecomment-721593631,721593631,
jonatack,2020-10-22 17:06:14,This action is performed in `SetFeeEstimateMode()` and calling it in bumpfee beforehand causes an error when explicit feerates are used (issue #20219).,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r510322471,510322471,src/wallet/rpcwallet.cpp
Xekyo,2020-10-23 20:13:59,"Isn't the `BTC_MODE then essentially a duplicate of the `{""fee_rate"": â€¦}` option?",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511134364,511134364,test/functional/wallet_bumpfee.py
Xekyo,2020-10-23 20:16:29,"I don't understand this change. Is this not referring to the ""fee_rate"" argument below?",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511135422,511135422,test/functional/wallet_bumpfee.py
Xekyo,2020-10-23 20:20:13,So much clearer! :+1: ,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511136927,511136927,src/wallet/rpcwallet.cpp
Xekyo,2020-10-23 20:25:22,"Style nit: line 183 uses ""feerate"", 184 uses ""fee rate"". I'd prefer ""feerate"" per Optech style guide, but if the error message currently is ""fee rate"", it might be nicer to keep it homogeneous.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511139081,511139081,test/functional/wallet_bumpfee.py
Xekyo,2020-10-23 20:32:37,"That's an odd name clash, that the error complains about the missing ""fee rate"", but it's actually `conf_target` that's missing. I assume that was part of the items that #19543 was meant to address?",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511142032,511142032,test/functional/wallet_bumpfee.py
Xekyo,2020-10-23 20:36:15,"Okay, I guess this is a prime example of what is meant to get addressed in #19543. `conf_target` actually being a feerate is fairly icky.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511143512,511143512,test/functional/wallet_bumpfee.py
Xekyo,2020-10-23 20:40:58,Nit: `msg` is a bit unspecific. Could be for example `msg_both` or `error_both`,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511145359,511145359,test/functional/wallet_bumpfee.py
Xekyo,2020-10-23 20:44:29,Potential missing test case: what would happen if we specified something lower than `minRelayTxFeerate` here?,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511146854,511146854,test/functional/wallet_bumpfee.py
Xekyo,2020-10-23 20:48:31,TIL how to iterate through a dictionary in python. :),https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511148504,511148504,test/functional/wallet_bumpfee.py
Xekyo,2020-10-23 21:00:05,"This is a bit hard to review. My approach would currently be to check line by line whether all test cases are accounted for but that would probably be easier if the reordering of code and the refactoring to traverse the test cases had been separated into two commits. What would a reviewer usually be expected to do here?\n\nAlternatively, I suspect that there might be better diff tools that can f",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511153062,511153062,test/functional/wallet_bumpfee.py
Xekyo,2020-10-23 21:02:04,What is the advantage of this construction over the previous line?,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511153839,511153839,src/rpc/util.cpp
Xekyo,2020-10-23 21:09:21,Would this not fail if the value of the input was between `MAX_INT` if `max_target` were between `MAX_INT` and `MAX_UNSIGNED_INT`?,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511156476,511156476,src/rpc/util.cpp
Xekyo,2020-10-23 21:10:47,"I assume this is safe, because `max_target` is 1000 blocks, but I did spend a few minutes staring at this.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511157014,511157014,src/rpc/util.cpp
Xekyo,2020-10-23 21:14:19,"So now we have `fee rate`, `feeRate` and `fee_rate` in one PR. The horrors. :sweat_smile: ",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511158281,511158281,test/functional/rpc_fundrawtransaction.py
Xekyo,2020-10-23 21:17:12,"Nit: since this is an address and amount, how about ""receiver_output""?",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511159365,511159365,test/functional/rpc_psbt.py
Xekyo,2020-10-23 21:19:17,"Nit: ""K"" is the symbol for Kelvin, it's ""kB"", also remove spacing like below for consistency. :nerd_face: ",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511160072,511160072,test/functional/rpc_psbt.py
Xekyo,2020-10-23 21:22:52,"Still getting used to this, but totally see what you're doing now. :)",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511161360,511161360,test/functional/rpc_psbt.py
Xekyo,2020-10-23 21:28:43,"Probably not the right place to bring this up, but the explicit specifying of the unit does seem really error prone as mentioned in the comments of #19543 before. ",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511163315,511163315,test/functional/rpc_psbt.py
Xekyo,2020-10-23 21:34:44,"Zero often being some sort of special case, what happens with values between 0 and 0.00001000? Maybe we should also test `0.00000999`.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511165359,511165359,test/functional/rpc_psbt.py
Xekyo,2020-10-23 21:35:37,"Oh my, great improvement!",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511165699,511165699,src/wallet/rpcwallet.cpp
jonatack,2020-10-23 21:49:02,"Little: constness, and while changing the line, updated the style. It's not essential, to be sure. Initially, the function was touched to fix the error message. Then, I saw the function has two C-style type conversions and replaced them with one preferred static cast (per https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es49-if-you-must-use-a-cast-use-a-named-cast). Then, made the non-",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511170366,511170366,src/rpc/util.cpp
jonatack,2020-10-23 21:54:29,Yes. It would be good to replace this with the fixed-unit `feerate_sat_vb` argument before the 0.21 branch-off. Edit: I have a changeset for that but I guess it's too late though.,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511172152,511172152,test/functional/rpc_psbt.py
jonatack,2020-10-23 21:56:39,"Agreed--started doing just that today for the new arg in [`0f2eb16` (#20231)](https://github.com/bitcoin/bitcoin/pull/20231/commits/0f2eb167ddfa7d2612708d09e05189f969699121#diff-047f185450ff2093df390b522db9b6aa1c87353abf7e7a99c00390db8c707f6eR375), will update here.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511172884,511172884,test/functional/rpc_psbt.py
jonatack,2020-10-24 14:20:03,"I agree, it's a redundant feature here that adds to the confusion...and it also uses a different code path so the test is needed. ",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511469087,511469087,test/functional/wallet_bumpfee.py
jonatack,2020-10-24 14:41:40,"Sorry about that. Yes, there are a few options. In this case, a helpful one might be\n\n`git show 6fa5686 -w --color-moved=dimmed-zebra`\n\nFor other cases, maybe git show or git diff with `--word-diff`.\n\nOr to ignore all added lines having a matching identical removed line (empty result proves move-only):\n\n`git diff 6fa5686f~1..6fa5686f | grep -E '^[+-][^+-]' | cut -b2- | sort | uniq ",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511474549,511474549,test/functional/wallet_bumpfee.py
jonatack,2020-10-24 14:50:29,"Good idea. Changed it to an `outputs` array like in the help:\n```diff\n         inputs = [{""txid"": txid, ""vout"": p2wpkh_pos}, {""txid"": txid, ""vout"": p2sh_p2wpkh_pos}, {""txid"": txid, ""vout"": p2pkh_pos}]\n-        addr = {self.nodes[1].getnewaddress(): 29.99}\n+        outputs = [{self.nodes[1].getnewaddress(): 29.99}]\n```\n",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511476668,511476668,test/functional/rpc_psbt.py
jonatack,2020-10-24 14:52:45,Done.,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511477245,511477245,test/functional/rpc_psbt.py
jonatack,2020-10-24 14:54:24,Reverted. This line goes away in the following commit.,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511477688,511477688,test/functional/wallet_bumpfee.py
jonatack,2020-10-24 14:58:34,"Done, changed to `error_both`.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511478300,511478300,test/functional/wallet_bumpfee.py
jonatack,2020-10-24 15:01:55,"Added\n```python\nfor unit, feerate in {""SAT/B"": 0.99999999, ""BTC/KB"": 0.00000999}.items():\n    self.log.info(""- raises RPC error 'fee rate too low' if conf_target {} and estimate_mode {} are passed"".format(feerate, unit))\n    assert_raises_rpc_error(-4, ""Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)"",\n        lambda: self.nodes[1].walletcreate",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511479304,511479304,test/functional/rpc_psbt.py
jonatack,2020-10-24 15:14:46,"Nice find! added:\n```diff\n-        assert_raises_rpc_error(-8, ""Insufficient total fee"", rbf_node.bumpfee, rbfid, {""fee_rate"": INSUFFICIENT})\n+        for options in [{""fee_rate"": INSUFFICIENT}, {""conf_target"": INSUFFICIENT, ""estimate_mode"": BTC_MODE}, {""conf_target"": 1, ""estimate_mode"": SAT_MODE}]:\n+            assert_raises_rpc_error(-8, ""Insufficient total fee"", rbf_node.bumpfee, rbfid,",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511482368,511482368,test/functional/wallet_bumpfee.py
jonatack,2020-10-24 15:52:46,"Good find. Fixed the error message to now print `Selected estimate_mode <MODE> requires a fee rate to be specified in conf_target` and updated the tests.\n```diff\n+++ b/src/wallet/rpcwallet.cpp\n@@ -214,7 +214,7 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n \n     if (cc.m_fee_mode == FeeEstimateMode::BTC_KB || cc.m_fee_mode == FeeEstimateMode::SAT_B) ",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511486145,511486145,test/functional/wallet_bumpfee.py
jonatack,2020-10-24 17:16:50,"Updated the log message to ""fee rate"".",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r511493888,511493888,test/functional/wallet_bumpfee.py
jonatack,2020-10-27 21:18:15,Done in fc572172,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513038521,513038521,test/functional/wallet_bumpfee.py
jonatack,2020-10-27 21:19:18,Done in 1697a40,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513039023,513039023,test/functional/wallet_bumpfee.py
Xekyo,2020-10-28 19:17:48,Nit: `bTc`?,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513700393,513700393,test/functional/wallet_basic.py
Xekyo,2020-10-28 19:19:17,"Nit: I think that's a fee rate, not an absolute fee.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513701195,513701195,test/functional/wallet_basic.py
Xekyo,2020-10-28 19:19:48,"This should say ""fee rate"" rather than ""fee"".",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513701478,513701478,test/functional/wallet_basic.py
Xekyo,2020-10-28 19:20:00,"This should say ""fee rate"" rather than ""fee"".",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513701599,513701599,test/functional/wallet_basic.py
Xekyo,2020-10-28 19:22:20,"Nit: Inconsistency between 257 and 259, once it's `sat/B` once `sat/b`. \n\nThere seem to be a lot of case variations in the following code on the `sat/b` and `BTc/Kb`. I'm not sure whether that is on purpose to test the case insensitivity. I'll err on pointing them out when I notice. Feel free to ignore if that's on purpose and I'm just not grokking the reason.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513702864,513702864,test/functional/wallet_basic.py
Xekyo,2020-10-28 19:23:15,"This should say ""fee rate"" rather than ""fee"".\n\nThe phrase ""explicit fee"" would imply to me that an absolute amount of satoshis is used rather than a fee rate. That's why I'm pointing it out.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513703330,513703330,test/functional/wallet_basic.py
Xekyo,2020-10-28 19:24:15,Nit: `SAT/b`,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513703918,513703918,test/functional/wallet_basic.py
Xekyo,2020-10-28 19:26:29,"Okay, lemme check this out locally and run this incantation on it. :)",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513705249,513705249,test/functional/wallet_bumpfee.py
Xekyo,2020-10-28 19:48:08,"`git diff 2d8eba8~1..2d8eba8 | grep -E '^[+-][^+-]' | cut -b2- | sort | uniq -c | grep -v '^ *2'` led to weird output for me. It appears to break the new diff viewer I'm currently trying. I also hope I didn't accidentally summon an imp. :sweat_smile: \n\nAlright, the `git show 2d8eba8 -w --color-moved=dimmed_zebra` did the trick for me. Thanks for teaching me!\n",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513717032,513717032,test/functional/wallet_bumpfee.py
Xekyo,2020-10-28 19:55:01,Nit: `BTc/Kb`?,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513721009,513721009,test/functional/wallet_basic.py
Xekyo,2020-10-28 20:01:01,"I just saw the value below in the `estimate_mode` the input in 260 is matching. I conclude that the string is case-insensitive, and the purpose was to test the insensitivity. I'd prefer an approach where a single style was used across all tests, and then one test checked the case insensitivity of the estimate_mode explicitly, but I don't think it's pertinent to make the actual change in this PR.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513724524,513724524,test/functional/wallet_basic.py
Xekyo,2020-10-28 20:03:36,"Wonderful, thanks!",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513725954,513725954,test/functional/wallet_bumpfee.py
Xekyo,2020-10-28 20:12:02,"I was originally thinking here:\n\n> I'm confused by the ` {""conf_target"": 1, ""estimate_mode"": SAT_MODE}`. Fitting the theme, I would expect the `conf_target` to be below `minRelayTxFeeRate`. But IIUC, 1 sat/B would be exactly the `minRelayTxFeeRate`. Is it possible that this should be â€¦ oh. â€¦ `INSUFFICIENT` also appears to be exactly the `minRelayTxFeeRate`. â€¦ Oh, this is for bumping. Duh.\n\",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513730504,513730504,test/functional/wallet_bumpfee.py
Xekyo,2020-10-28 20:25:13,"Nit: Since this is new code, I'm surprised by the variations in the estimate_mode case, but not feeling strongly about it.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513737635,513737635,test/functional/rpc_fundrawtransaction.py
Xekyo,2020-10-28 20:26:07,:+1: ,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513738107,513738107,test/functional/rpc_fundrawtransaction.py
Xekyo,2020-10-28 20:27:54,"Nit: kelvinbytes\n\nI know, I know, ""kilo"" is the odd one out because generally the prefixes for multiples are capitalized. Just being a bit of a unit nerd here.\n\n(To be clear, when I mark a comment with ""Nit:"" I consider it optional for the author to address it.)",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513739278,513739278,test/functional/rpc_psbt.py
Xekyo,2020-10-28 20:32:04,Love how much more readable the tests below become. Good improvement.,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513741651,513741651,test/functional/rpc_psbt.py
Xekyo,2020-10-28 20:38:56,"I noticed that both `arg_estimate_mode` and `estimate_mode` appear in these test parameters. That seems odd. I wonder whether both pertain to the same value. If one of them would supersede the other, and that happened to be `arg_estimate_mode`, we would actually only be testing for `economical` here. If they actually do refer both to the same value, they should probably both be set to `=mode`.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513745170,513745170,test/functional/wallet_send.py
Xekyo,2020-10-28 20:43:32,"The only difference I see in this line is that it now uses `arg_conf_target` where `conf_target` was used in 284 and `arg_estimate_mode` where `estimate_mode` was used. Potentially, the sanitation for those parameters are different?",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513747612,513747612,test/functional/wallet_send.py
Xekyo,2020-10-28 20:46:14,"I see that the third argument here has changed from `""wallet default""` to `""wallet -txconfirmtarget""`, but it's not clear to me what the effect of that would be.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513749048,513749048,src/wallet/rpcwallet.cpp
jonatack,2020-10-28 22:03:00,"Good point. In the `send` RPC, `conf_target` and `estimate_mode` can be both args (`arg_estimate_mode` in this test file) and options (`estimate_mode` in this test file).\n\nThere seem to be some oddities or bugs in the `send` RPC related to this, as described in https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513789526. The send RPC is marked as experimental, but these should be fixed",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513788941,513788941,test/functional/wallet_send.py
jonatack,2020-10-28 22:04:27,"Yes, there seems to be a bug in the `send` RPC: per the code in `wallet/rpcwallet.cpp`, these should behave the same whether passed as an arg or an option, but they do not.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513789526,513789526,test/functional/wallet_send.py
jonatack,2020-10-28 22:09:52,"This is the RPC help output the user sees. The idea was to make the `conf_target` help correct (some were missing the sat/B mention), consistent and helpful across the 6 RPCs. The txconfirmtarget mention in some of the `conf_target` helps seems more useful info than just ""wallet default"", so I made them all the same/consistent. Open to disagreement about that :) ",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513791924,513791924,src/wallet/rpcwallet.cpp
jonatack,2020-10-28 22:10:07,done,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513792048,513792048,test/functional/rpc_psbt.py
jonatack,2020-10-28 22:10:30,made them all the same,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513792227,513792227,test/functional/rpc_fundrawtransaction.py
jonatack,2020-10-28 22:12:53,"I suppose I'll make them all proper-cased in wallet_basic, and lowercased in fundrawtransaction, so they are less jarring while still testing the case insensitivity.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513793167,513793167,test/functional/wallet_basic.py
jonatack,2020-10-28 22:13:31,"agree, done",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513793418,513793418,test/functional/wallet_basic.py
jonatack,2020-10-28 22:13:50,"good eye, done",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513793536,513793536,test/functional/wallet_basic.py
jonatack,2020-10-28 22:14:05,done,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513793606,513793606,test/functional/wallet_basic.py
jonatack,2020-10-28 22:14:13,done,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513793675,513793675,test/functional/wallet_basic.py
jonatack,2020-10-28 22:14:19,Good eye! Done,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513793717,513793717,test/functional/wallet_basic.py
jonatack,2020-10-28 22:31:44,"e.g. before\n```\n7. conf_target      (numeric, optional, default=wallet default) Confirmation target (in blocks), or fee rate (for BTC/kB or sat/B estimate modes)\n```\nafter\n```\n7. conf_target      (numeric, optional, default=wallet -txconfirmtarget) Confirmation target (in blocks)\n                    or fee rate (for BTC/kB and sat/B estimate modes)\n```",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513800841,513800841,src/wallet/rpcwallet.cpp
jonatack,2020-10-28 22:53:00,"Oh wait, in wallet_basic.py I'd rather not touch the units in the original tests by @kallewoof. They were set this way on purpose. See closed PR #20041 that wanted to change them.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513808799,513808799,test/functional/wallet_basic.py
jonatack,2020-10-28 22:55:55,"I'll add ""case insensitive"" to the logging so it's clear to future readers of the test code.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513809879,513809879,test/functional/wallet_basic.py
Xekyo,2020-10-29 00:01:52,"Okay, since this is only in a test, it may be fine to keep track of it, but not get too hung up on fixing every little bit before the merge.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513832017,513832017,test/functional/wallet_send.py
Xekyo,2020-10-29 00:03:15,I see. That looks like a good change to me.,https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513832348,513832348,src/wallet/rpcwallet.cpp
Xekyo,2020-10-29 00:19:12,"Cool, thanks for digging up the context. I still think it would be better to test case insensitivity of an argument in one dedicated test and then make all the other tests use the canonical writing, but it's definitely out of scope here.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513836967,513836967,test/functional/wallet_basic.py
jonatack,2020-10-29 00:31:06,"Agree, and in a way that's what we've done: The added tests use canonical units and the original tests in wallet_basic.py do case insensitive testing of the units and are now described as such.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513840343,513840343,test/functional/wallet_basic.py
kallewoof,2020-11-02 04:01:04,"I like the original better on this one, but I'm fine with the change.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r515729855,515729855,src/wallet/rpcwallet.cpp
jonatack,2020-11-02 12:45:26,"Thanks @kallewoof--the idea was to help users know what estimatesmartfee is and where to look for more info without grepping the codebase, even though it's less exact than writing, say, ""using CBlockPolicyEstimator::estimateSmartFee in src/fees.cpp"". I don't feel strongly about it though. ",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r515946353,515946353,src/wallet/rpcwallet.cpp
jonatack,2020-11-05 06:26:53,"> Yes, there seems to be a bug in the `send` RPC: per the code in `wallet/rpcwallet.cpp`, these should behave the same whether passed as an arg or an option, but they do not.\n\nFixed in #20305.",https://github.com/bitcoin/bitcoin/pull/20220#discussion_r517817389,517817389,test/functional/wallet_send.py
