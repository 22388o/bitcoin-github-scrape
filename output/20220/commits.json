[
  {
    "sha": "052427eef1c9da84c474c5161b1910d3328ef0da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTI0MjdlZWYxYzlkYTg0YzQ3NGM1MTYxYjE5MTBkMzMyOGVmMGRh",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-22T13:50:03Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-24T20:03:11Z"
      },
      "message": "wallet, bugfix: fix bumpfee with explicit fee rate modes",
      "tree": {
        "sha": "05f34b3457d46971b54cbd82b07d9b5364a1d976",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05f34b3457d46971b54cbd82b07d9b5364a1d976"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/052427eef1c9da84c474c5161b1910d3328ef0da",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+UiK4ACgkQT1chs9Dj\nkh2/zRAAiIi3vwXJBM0rP6ExGOadc/NZk8lxaBIJ2X4Yxz9uV1W7TqBzkBTbpUGZ\nUAeIkziQ4BqYIvQjZc0p3a9LT7r2eyLDR+ZuDNE0ZtTIlN5enxMRu0xP8b9Y4xm9\nHNV9QVmriEnB6LOMRyvtp7hO5JcwICenPIbD3nz3w4e5yYOrZnNOg9TI/wHfYSWZ\nOiUTiV8f0UhWfiz1Pw9bvdLyr1PpT+doEzlmFjpZtWv7fWIhkDzyVAQQ02urtun+\nvQXRqEEsaM403dqNHLFnHWUnxTFnITQh4nj+Q265LDbq+PF93XKGOK0KAoJPyWKA\n6GN1XsK4zp32iKC3mQbTsTJvjgTcx59O1JpYKw+HGOdbKS1JeOaHNMfFm+o1HqFP\nEHQcWctEgRK8XobyrYRw788hGRwdtkSXNUkhB66O/8lIzptnOt5D61FS2vdrxud2\nLI0W8hBesLnP/LSvt37xDkmVT95vgctUX2DbXkoEWUkbd0MaHMFpJYFzPGVOG4Ln\nLXZHxy9vJsuwSnhOypbCCpTfz7uhPt/jGPTsiouvKCTjix5GtVbSwUxPUIpeHHV1\nj2bf3zdf67UxtzpOlHF6DASFRpRBYkpSC0ZAcDNCYWOsWjRNXhQqiOb8pMFny0Ya\nYB+tKS2UOzFJRVdsl1Fhzb7UQw7s4pMZhaes3ceT/S0qbLh/clE=\n=jujL\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwINHWaLfPEzIDQrDizBqq/FPurdWunsxS69XObeNCRxWlCP/wEAK60I4UOU/L\nD3uKuumSkxwI8QRflIiw8AgFLvJSEGuH7wCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEAnrQX1Yk1hyJX48qZjv\n8rEI8QRflIiy8AgUqFFIXC9E6QCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2Fs\nZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEECz31QHUnftY5d6/gUdqJcI8QRflIiw\n8AjXG4xbiS5q+wCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxs\nYXh5LmNvbfAQnPEvehQA1zhRTS+KKayfBAjxBF+UiK/wCHtTffY6kGp4AIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 05f34b3457d46971b54cbd82b07d9b5364a1d976\nparent 80c8a02f1b4f6ad2b5c02595d66a74db22373ed4\nauthor Jon Atack <jon@atack.com> 1603374603 +0200\ncommitter Jon Atack <jon@atack.com> 1603569791 +0200\n\nwallet, bugfix: fix bumpfee with explicit fee rate modes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/052427eef1c9da84c474c5161b1910d3328ef0da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/052427eef1c9da84c474c5161b1910d3328ef0da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/052427eef1c9da84c474c5161b1910d3328ef0da/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80c8a02f1b4f6ad2b5c02595d66a74db22373ed4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80c8a02f1b4f6ad2b5c02595d66a74db22373ed4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80c8a02f1b4f6ad2b5c02595d66a74db22373ed4"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "46e27bb4bfb036df38d59d6363bb69d1f20543e6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/052427eef1c9da84c474c5161b1910d3328ef0da/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/052427eef1c9da84c474c5161b1910d3328ef0da/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=052427eef1c9da84c474c5161b1910d3328ef0da",
        "patch": "@@ -3461,7 +3461,6 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n             if (options.exists(\"fee_rate\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n             }\n-            coin_control.m_confirm_target = ParseConfirmTarget(conf_target, pwallet->chain().estimateMaxBlocks());\n         } else if (options.exists(\"fee_rate\")) {\n             CFeeRate fee_rate(AmountFromValue(options[\"fee_rate\"]));\n             if (fee_rate <= CFeeRate(0)) {"
      },
      {
        "sha": "7dac2d7eaf798e637bb4ecedf902a5cbab822ce3",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/052427eef1c9da84c474c5161b1910d3328ef0da/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/052427eef1c9da84c474c5161b1910d3328ef0da/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=052427eef1c9da84c474c5161b1910d3328ef0da",
        "patch": "@@ -17,7 +17,7 @@\n import io\n \n from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness\n-from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction\n+from test_framework.messages import BIP125_SEQUENCE_NUMBER, COIN, CTransaction\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -36,6 +36,8 @@\n HIGH         = 0.00500000\n TOO_HIGH     = 1.00000000\n \n+BTC_MODE = \"BTC/kB\"\n+SAT_MODE = \"sat/B\"\n \n class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -77,8 +79,8 @@ def run_test(self):\n         self.log.info(\"Running tests\")\n         dest_address = peer_node.getnewaddress()\n         self.test_invalid_parameters(rbf_node, dest_address)\n-        test_simple_bumpfee_succeeds(self, \"default\", rbf_node, peer_node, dest_address)\n-        test_simple_bumpfee_succeeds(self, \"fee_rate\", rbf_node, peer_node, dest_address)\n+        for mode in [\"default\", \"fee_rate\", BTC_MODE, SAT_MODE]:\n+            test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address)\n         test_feerate_args(self, rbf_node, peer_node, dest_address)\n         test_segwit_bumpfee_succeeds(self, rbf_node, dest_address)\n         test_nonrbf_bumpfee_fails(self, peer_node, dest_address)\n@@ -132,6 +134,13 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     if mode == \"fee_rate\":\n         bumped_psbt = rbf_node.psbtbumpfee(rbfid, {\"fee_rate\": NORMAL})\n         bumped_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\": NORMAL})\n+    elif mode == BTC_MODE:\n+        bumped_psbt = rbf_node.psbtbumpfee(rbfid, {\"conf_target\": NORMAL, \"estimate_mode\": BTC_MODE})\n+        bumped_tx = rbf_node.bumpfee(rbfid, {\"conf_target\": NORMAL, \"estimate_mode\": BTC_MODE})\n+    elif mode == SAT_MODE:\n+        sat_fee = NORMAL * COIN / 1000  # convert NORMAL from BTC/kB to sat/B\n+        bumped_psbt = rbf_node.psbtbumpfee(rbfid, {\"conf_target\": sat_fee, \"estimate_mode\": SAT_MODE})\n+        bumped_tx = rbf_node.bumpfee(rbfid, {\"conf_target\": sat_fee, \"estimate_mode\": SAT_MODE})\n     else:\n         bumped_psbt = rbf_node.psbtbumpfee(rbfid)\n         bumped_tx = rbf_node.bumpfee(rbfid)"
      }
    ]
  },
  {
    "sha": "fc5721723d34f76f9e1ffd2e31f274ea6b22f894",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzU3MjE3MjNkMzRmNzZmOWUxZmZkMmUzMWYyNzRlYTZiMjJmODk0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-24T17:48:04Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-24T22:35:38Z"
      },
      "message": "wallet: fix SetFeeEstimateMode() error message\n\nto clarify for the user the confusing error message that the missing fee rate\nneeds to be set in the conf_target param/option.",
      "tree": {
        "sha": "83da373059ecdf20290f7b7a8ba76a4971fd1fc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83da373059ecdf20290f7b7a8ba76a4971fd1fc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc5721723d34f76f9e1ffd2e31f274ea6b22f894",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+UrFgACgkQT1chs9Dj\nkh3FLw/8Dnv1/Oq9FUxq/2Y9aKLi9wxdV3ImXywBYhT5zmFEVug1t7UkWydvGONn\n/s13dAQFb3xF0lUaqFVgupzWPBAsBa4Bl4dvHW3t2wyBcSn5zA0bw0t3hc8j5zuo\n2cAoZTSwRObWV81xCmwsGW0XSew/cjrrOcQi0t17Ck62lvuBoPeByHQ5UALmY5ce\nptc2KfApsOHz1f8h5DbvHxPkYaQf3Y5D5QzL/Pv2rhqLg+B6EDIPFhQZ/GyXREgY\n6SpbqJ3vWasRWZRLeZlGmAqc9VO7I3TjZS6aoeYvwpKAgSJ9uJdGHrtevJXAkzXO\n7HbuIBKljE8l3y9x6vkryUu1IufVo5zjEEBYPSXqUqWbDQBrd91CqJ6qvtk5w6I3\nd768KA+jtlBJiZ+vzH7i2Iggvn49JL8x8ptMixBOPA52/+V7WXob8aksPWsxE6M9\nHC0HkYb1bTsolN+VFJFfED9/OO9k5QM1ubn2FjoUzhL6wU9NPl2S5WJZBfBCarU1\nGqn9UxVzahsAUidpKhtF4HPMsrwolhM/vvGQewnrprzSGOFMnx4E0o1U3LCGPyTt\nvKtERXLgiPg5p28VKfORZNjqnKtkVwcWpqGZozae+h4HWPMUEFe+jjmd+Knn9bjD\n3dgVBP0e8sCnbW4qKv6qwxg8Izu6BVcNXDFT0qm9C+5HenCPLRQ=\n=o5EW\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIAS/6oBY2wggs+aa0zSuWFzhwCiZsLT7gKZkoVjXYsj4CP/wEHhjgMtFTadN\nQb4eEXeN7K0I8QRflKxb8AiJbOC/FW88GwCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEIlWyN6SxxHeGwRveL+FEwQI\n8QRflKxZ8AgnN9yq7pGuvACD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbf/wELlO4y0XtgSOIzK2tAl9bMwI8QRflKxa8Ai19jt4Oz9P\nCwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVz\ndGFtcHMub3Jn8BDnqbPNtcKR2QoBVhmvRbq1CPEEX5SsWvAIV9SSO+0J8XYAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 83da373059ecdf20290f7b7a8ba76a4971fd1fc1\nparent 052427eef1c9da84c474c5161b1910d3328ef0da\nauthor Jon Atack <jon@atack.com> 1603561684 +0200\ncommitter Jon Atack <jon@atack.com> 1603578938 +0200\n\nwallet: fix SetFeeEstimateMode() error message\n\nto clarify for the user the confusing error message that the missing fee rate\nneeds to be set in the conf_target param/option.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc5721723d34f76f9e1ffd2e31f274ea6b22f894",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc5721723d34f76f9e1ffd2e31f274ea6b22f894",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc5721723d34f76f9e1ffd2e31f274ea6b22f894/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "052427eef1c9da84c474c5161b1910d3328ef0da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/052427eef1c9da84c474c5161b1910d3328ef0da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/052427eef1c9da84c474c5161b1910d3328ef0da"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "614227fde2a4075ac9f374ea528614c351d3abd8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc5721723d34f76f9e1ffd2e31f274ea6b22f894/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc5721723d34f76f9e1ffd2e31f274ea6b22f894/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fc5721723d34f76f9e1ffd2e31f274ea6b22f894",
        "patch": "@@ -214,7 +214,7 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n \n     if (cc.m_fee_mode == FeeEstimateMode::BTC_KB || cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n         if (estimate_param.isNull()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Selected estimate_mode requires a fee rate\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Selected estimate_mode %s requires a fee rate to be specified in conf_target\", estimate_mode.get_str()));\n         }\n \n         CAmount fee_rate = AmountFromValue(estimate_param);"
      },
      {
        "sha": "7edcf41beaedc6285a137df0ed26d25f9a4585c6",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc5721723d34f76f9e1ffd2e31f274ea6b22f894/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc5721723d34f76f9e1ffd2e31f274ea6b22f894/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fc5721723d34f76f9e1ffd2e31f274ea6b22f894",
        "patch": "@@ -228,7 +228,7 @@ def run_test(self):\n \n         # Sendmany with explicit fee (BTC/kB)\n         # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\",\n+        assert_raises_rpc_error(-8, \"Selected estimate_mode bTc/kB requires a fee rate to be specified in conf_target\",\n             self.nodes[2].sendmany,\n             amounts={ address: 10 },\n             estimate_mode='bTc/kB')\n@@ -254,7 +254,7 @@ def run_test(self):\n \n         # Sendmany with explicit fee (SAT/B)\n         # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\",\n+        assert_raises_rpc_error(-8, \"Selected estimate_mode sat/b requires a fee rate to be specified in conf_target\",\n             self.nodes[2].sendmany,\n             amounts={ address: 10 },\n             estimate_mode='sat/b')\n@@ -421,7 +421,7 @@ def run_test(self):\n             assert prebalance > 2\n             address = self.nodes[1].getnewaddress()\n             # Throw if no conf_target provided\n-            assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\",\n+            assert_raises_rpc_error(-8, \"Selected estimate_mode BTc/Kb requires a fee rate to be specified in conf_target\",\n                 self.nodes[2].sendtoaddress,\n                 address=address,\n                 amount=1.0,\n@@ -455,7 +455,7 @@ def run_test(self):\n             assert prebalance > 2\n             address = self.nodes[1].getnewaddress()\n             # Throw if no conf_target provided\n-            assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\",\n+            assert_raises_rpc_error(-8, \"Selected estimate_mode SAT/b requires a fee rate to be specified in conf_target\",\n                 self.nodes[2].sendtoaddress,\n                 address=address,\n                 amount=1.0,"
      }
    ]
  },
  {
    "sha": "1697a40b6f841a54ee0d9744ed7fd09034b0ddad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjk3YTQwYjZmODQxYTU0ZWUwZDk3NDRlZDdmZDA5MDM0YjBkZGFk",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-06-27T03:53:17Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-27T20:33:37Z"
      },
      "message": "wallet: improve bumpfee error/help, add explicit fee rate coverage",
      "tree": {
        "sha": "5ad59e4d102dd3f205cbbd92ce4bb001edaf5efc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ad59e4d102dd3f205cbbd92ce4bb001edaf5efc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1697a40b6f841a54ee0d9744ed7fd09034b0ddad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+YhCIACgkQT1chs9Dj\nkh27pA//af8tcYQaa446cmGRA7F5A5HpDMuCyacO3eyXBNh4Yvk/Qd7kGmyo5RYe\nu9+aHV9Vtjw8/FEPY1ytPQj1nOcRxrvqapiIym0bVtl0Y7K6I8wE6fAo8stNgGep\nWFqsWYAdkm9+8o2gx/DBaH+AvtxU2Xo9Q1NVU8ixWnY8RaNAfaH1kVS0gL4J7JGS\nqPt4G4f/RhptKuagOZcCUhJX34nEGzptzgE++Qs+csfcRH4CpirDIsU15eOBj1st\niYjogRhKm5wAzQBXQKTv4UPCN2ZMNXZNbMRX7nASZlEND3EP0LnJSRLTC7DQYbQs\nfjUQnPm+dV5GRtttsKLA6JN6GJ17byRXrIwbE4BA2tjv3gn3/w2Pf47GtsqA6hz4\nyNI77y/fdrkyBk0cvrCWRRSVsixxjGh25CaKo8Ye1C+1NuQ0v6UWEp78BrLQkbY6\npwdOJbtWoZB5y9DMLGRgSLlRJPhdmLnsAKbJeVKh8DZi8b6imjyRMbtOEe05VyZv\nBT/xZAQ3h95lsWyuuJaXuZnnqmjXc6tEBwSu+eJZGoRPtSejzssSmT7U6dDutcM1\naqgaWjIoIAdBydaTfwgiyPAQu4aqqkLonlIZ/QH+qUW434K3d5UdPoEYzRs1PWPh\nXmBtHhBJHIESAay4AxiiCNwnM7ycXBMXeZucsa23A/J1PjICYik=\n=wE60\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGoLbqC47bQUpQhGQE8izbvuy6dJPcTN2mS+kEh53uI5CP/wEA04hyKHcucy\njqTYS61FRLAI8QRfmIQj8AjpSFNfubiHHACD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQWsFat8z/jwjJkva8\nhEGJEwjxBF+YhCPwCIqpWpVtP6UPAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQdUwY1/Sj3elq3agPRneI/Ajx\nBF+YhCbwCABAUWyAX/VrAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRh\nci5ldGVybml0eXdhbGwuY29t8BDVufkQ8mdKRoEibd9H1X5HCPEEX5iEI/AI7wte\nK9Ih6acAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 5ad59e4d102dd3f205cbbd92ce4bb001edaf5efc\nparent fc5721723d34f76f9e1ffd2e31f274ea6b22f894\nauthor Jon Atack <jon@atack.com> 1593229997 +0200\ncommitter Jon Atack <jon@atack.com> 1603830817 +0100\n\nwallet: improve bumpfee error/help, add explicit fee rate coverage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1697a40b6f841a54ee0d9744ed7fd09034b0ddad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1697a40b6f841a54ee0d9744ed7fd09034b0ddad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1697a40b6f841a54ee0d9744ed7fd09034b0ddad/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc5721723d34f76f9e1ffd2e31f274ea6b22f894",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc5721723d34f76f9e1ffd2e31f274ea6b22f894",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc5721723d34f76f9e1ffd2e31f274ea6b22f894"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 43,
      "deletions": 12
    },
    "files": [
      {
        "sha": "9bb09dda16d8bb1dfb01e19259eca958a68ca2c4",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1697a40b6f841a54ee0d9744ed7fd09034b0ddad/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1697a40b6f841a54ee0d9744ed7fd09034b0ddad/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1697a40b6f841a54ee0d9744ed7fd09034b0ddad",
        "patch": "@@ -3039,7 +3039,7 @@ static RPCHelpMan listunspent()\n     };\n }\n \n-void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options, CCoinControl& coinControl)\n+void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, const UniValue& options, CCoinControl& coinControl)\n {\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -3373,7 +3373,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n         \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\\n\"\n         \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n         \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n-        \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n+        \"By default, the new fee will be calculated automatically using the estimatesmartfee RPC.\\n\"\n         \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n         \"Alternatively, the user can specify a fee_rate (\" + CURRENCY_UNIT + \" per kB) for the new transaction.\\n\"\n         \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n@@ -3459,7 +3459,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n \n         if (!conf_target.isNull()) {\n             if (options.exists(\"fee_rate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n             }\n         } else if (options.exists(\"fee_rate\")) {\n             CFeeRate fee_rate(AmountFromValue(options[\"fee_rate\"]));\n@@ -4115,7 +4115,7 @@ static RPCHelpMan send()\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n-            // be overriden by options.add_inputs.\n+            // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(pwallet, rawTx, fee, change_position, options, coin_control);\n "
      },
      {
        "sha": "e3766c673ec9220b27e15948a637e6d0575942b0",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 39,
        "deletions": 8,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1697a40b6f841a54ee0d9744ed7fd09034b0ddad/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1697a40b6f841a54ee0d9744ed7fd09034b0ddad/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=1697a40b6f841a54ee0d9744ed7fd09034b0ddad",
        "patch": "@@ -173,19 +173,50 @@ def test_feerate_args(self, rbf_node, peer_node, dest_address):\n     self.sync_mempools((rbf_node, peer_node))\n     assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n \n-    assert_raises_rpc_error(-8, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\", rbf_node.bumpfee, rbfid, {\"fee_rate\": NORMAL, \"confTarget\": 1})\n-\n     assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n-    assert_raises_rpc_error(-8, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\", rbf_node.bumpfee, rbfid, {\"fee_rate\":0.00001, \"confTarget\": 1})\n-\n-    # Bumping to just above minrelay should fail to increase total fee enough, at least\n-    assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})\n \n+    # For each fee mode, bumping to just above minrelay should fail to increase the total fee enough.\n+    for options in [{\"fee_rate\": INSUFFICIENT}, {\"conf_target\": INSUFFICIENT, \"estimate_mode\": BTC_MODE}, {\"conf_target\": 1, \"estimate_mode\": SAT_MODE}]:\n+        assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, options)\n     assert_raises_rpc_error(-3, \"Amount out of range\", rbf_node.bumpfee, rbfid, {\"fee_rate\": -1})\n-\n     assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n-    self.clear_mempool()\n \n+    self.log.info(\"Test explicit fee rate raises RPC error if estimate_mode is passed without a conf_target\")\n+    for unit, fee_rate in {\"SAT/B\": 10, \"BTC/KB\": NORMAL}.items():\n+        assert_raises_rpc_error(-8, \"Selected estimate_mode {} requires a fee rate to be specified in conf_target\".format(unit),\n+                                rbf_node.bumpfee, rbfid, {\"fee_rate\": fee_rate, \"estimate_mode\": unit})\n+\n+    self.log.info(\"Test explicit fee rate raises RPC error if both fee_rate and conf_target are passed\")\n+    error_both = \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation \" \\\n+                 \"target in blocks for automatic fee estimation, or an explicit fee rate.\"\n+    assert_raises_rpc_error(-8, error_both, rbf_node.bumpfee, rbfid, {\"conf_target\": NORMAL, \"fee_rate\": NORMAL})\n+\n+    self.log.info(\"Test invalid conf_target settings\")\n+    for field in [\"confTarget\", \"conf_target\"]:\n+        assert_raises_rpc_error(-8, error_both, rbf_node.bumpfee, rbfid, {field: 1, \"fee_rate\": NORMAL})\n+    too_high = \"is too high (cannot be higher than -maxtxfee\"\n+    assert_raises_rpc_error(-4, too_high, lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": BTC_MODE, \"conf_target\": 2009}))\n+    assert_raises_rpc_error(-4, too_high, lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": SAT_MODE, \"conf_target\": 2009 * 10000}))\n+\n+    self.log.info(\"Test invalid estimate_mode settings\")\n+    for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n+        assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n+                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": v, \"fee_rate\": NORMAL}))\n+    for mode in [\"foo\", Decimal(\"3.141592\")]:\n+        assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": NORMAL}))\n+\n+    self.log.info(\"Test invalid fee_rate settings\")\n+    for mode in [\"unset\", \"economical\", \"conservative\", BTC_MODE, SAT_MODE]:\n+        self.log.debug(\"{}\".format(mode))\n+        for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n+            assert_raises_rpc_error(-3, \"Expected type number for fee_rate, got {}\".format(k),\n+                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": v}))\n+        assert_raises_rpc_error(-3, \"Amount out of range\",\n+                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": -1}))\n+        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": 0}))\n+    self.clear_mempool()\n \n def test_segwit_bumpfee_succeeds(self, rbf_node, dest_address):\n     self.log.info('Test that segwit-sourcing bumpfee works')"
      }
    ]
  },
  {
    "sha": "2d8eba8f8425a2515022d51f1f5b4911329fbf55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDhlYmE4Zjg0MjVhMjUxNTAyMmQ1MWYxZjViNDkxMTMyOWZiZjU1",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-22T15:01:10Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-27T20:33:43Z"
      },
      "message": "wallet: combine redundant bumpfee invalid params and args tests\n\nmight be best reviewed with:\n\ngit show COMMIT_HASH -w --color-moved=dimmed-zebra",
      "tree": {
        "sha": "6e198d33017e6ac71da34301a583f7554aa97adb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e198d33017e6ac71da34301a583f7554aa97adb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d8eba8f8425a2515022d51f1f5b4911329fbf55",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+YhEIACgkQT1chs9Dj\nkh1HwhAAtbwtwdCJ6kDVMZOq1GrBvnYd2tdGAwfcf2YTdly2sqx8JAxPMJcqb1lc\ngWcp6lkpAn1pq4Y+v6SAcH5PIIZkfM/5Zi9zuId6+FjUT3+GcT6L8robYkPlRx1k\n+PahM5XgKxaAS0dKL+7aVIsl2rHFWj06ok/5S0XPPjM9j/kh0AtLibIx1oKlPYyp\n7qT+f9sRzv9ALGz4G2LhVfSrmZglH67vRwluvSPS/LbXd9E7bTWgk1C67pyRlWbu\nl8pW/tSTXlBRpGjDkjEMz+tC/lHXAbDmV9IeQktB4hgCJyjkMGmlnrPyPdhphM/9\neVQsXyZBkAKG9/ZMRkpUpBqNO0h8ivKgpEoQ9LWg7H2/JHIMDuGqHqGfbwL50Ezz\nOlqCKs9KqqBQOxg216DOudPBFrgdp7jzOiE5/rMTG9MpBwhSHiPfNoG3B/fhhLBV\n0EDiTZI0gSDV6HygiM0bYl9JQxJ/BVQPHw+/EO9g4Dqh5OWrFO1Jt9unrfOqVf0e\n3H/cZN75q1XkJVeYFEYdbM7ak4Fw8OYYfttXnm6Xi60nSMDeJM2iqPl5HvTzrI/N\nGL0iujzUBGDfVOM/zdKzSdfFwQD9hMic+E4RJSW2lYe9/hSBTArlmDdmaWp4s5i8\nCfriGvMTX/xM5lxyEA/BuO1tx06pRyGBZlCOrwUOGF2rs2Jrthk=\n=hSpn\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDxXAWuYAZUT6cedr51/eMgVhjr40I/ER+qHNP9lA6OUCP/wEEEZvUwuoFlH\nBGX/tFXMWPUI8QRfmIRD8Aid143mlblBDwCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQgikGPiqXmYWtvKL2\nk4t4KgjxBF+YhEXwCD/cCHeYCu4vAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5j\nYWxlbmRhci5ldGVybml0eXdhbGwuY29t//AQvtzIqLYTjXmPfX9udMPwJwjxBF+Y\nhEPwCExYKXDOsA+nAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRh\nbGxheHkuY29t8BDLMEm28ulbrzMkACSMfO9OCPEEX5iEQ/AI8/5uv5KbX8sAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 6e198d33017e6ac71da34301a583f7554aa97adb\nparent 1697a40b6f841a54ee0d9744ed7fd09034b0ddad\nauthor Jon Atack <jon@atack.com> 1603378870 +0200\ncommitter Jon Atack <jon@atack.com> 1603830823 +0100\n\nwallet: combine redundant bumpfee invalid params and args tests\n\nmight be best reviewed with:\n\ngit show COMMIT_HASH -w --color-moved=dimmed-zebra\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d8eba8f8425a2515022d51f1f5b4911329fbf55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d8eba8f8425a2515022d51f1f5b4911329fbf55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d8eba8f8425a2515022d51f1f5b4911329fbf55/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1697a40b6f841a54ee0d9744ed7fd09034b0ddad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1697a40b6f841a54ee0d9744ed7fd09034b0ddad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1697a40b6f841a54ee0d9744ed7fd09034b0ddad"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 51,
      "deletions": 75
    },
    "files": [
      {
        "sha": "20d243699ffaee415c2394eeb8c429a3c9da399d",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 51,
        "deletions": 75,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d8eba8f8425a2515022d51f1f5b4911329fbf55/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d8eba8f8425a2515022d51f1f5b4911329fbf55/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=2d8eba8f8425a2515022d51f1f5b4911329fbf55",
        "patch": "@@ -78,10 +78,9 @@ def run_test(self):\n \n         self.log.info(\"Running tests\")\n         dest_address = peer_node.getnewaddress()\n-        self.test_invalid_parameters(rbf_node, dest_address)\n         for mode in [\"default\", \"fee_rate\", BTC_MODE, SAT_MODE]:\n             test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address)\n-        test_feerate_args(self, rbf_node, peer_node, dest_address)\n+        self.test_invalid_parameters(rbf_node, peer_node, dest_address)\n         test_segwit_bumpfee_succeeds(self, rbf_node, dest_address)\n         test_nonrbf_bumpfee_fails(self, peer_node, dest_address)\n         test_notmine_bumpfee_fails(self, rbf_node, peer_node, dest_address)\n@@ -100,28 +99,56 @@ def run_test(self):\n         test_small_output_with_feerate_succeeds(self, rbf_node, dest_address)\n         test_no_more_inputs_fails(self, rbf_node, dest_address)\n \n-    def test_invalid_parameters(self, node, dest_address):\n-        txid = spend_one_input(node, dest_address)\n-        # invalid estimate mode\n-        assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", node.bumpfee, txid, {\n-            \"estimate_mode\": \"moo\",\n-        })\n-        assert_raises_rpc_error(-3, \"Expected type string\", node.bumpfee, txid, {\n-            \"estimate_mode\": 38,\n-        })\n-        assert_raises_rpc_error(-3, \"Expected type string\", node.bumpfee, txid, {\n-            \"estimate_mode\": {\n-                \"foo\": \"bar\",\n-            },\n-        })\n-        assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", node.bumpfee, txid, {\n-            \"estimate_mode\": Decimal(\"3.141592\"),\n-        })\n-        # confTarget and conf_target\n-        assert_raises_rpc_error(-8, \"confTarget and conf_target options should not both be set\", node.bumpfee, txid, {\n-            \"confTarget\": 123,\n-            \"conf_target\": 456,\n-        })\n+    def test_invalid_parameters(self, rbf_node, peer_node, dest_address):\n+        self.log.info('Test invalid parameters')\n+        rbfid = spend_one_input(rbf_node, dest_address)\n+        self.sync_mempools((rbf_node, peer_node))\n+        assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n+\n+        assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n+        assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n+\n+        # For each fee mode, bumping to just above minrelay should fail to increase the total fee enough.\n+        for options in [{\"fee_rate\": INSUFFICIENT}, {\"conf_target\": INSUFFICIENT, \"estimate_mode\": BTC_MODE}, {\"conf_target\": 1, \"estimate_mode\": SAT_MODE}]:\n+            assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, options)\n+\n+        self.log.info(\"Test explicit fee rate raises RPC error if estimate_mode is passed without a conf_target\")\n+        for unit, fee_rate in {\"SAT/B\": 100, \"BTC/KB\": NORMAL}.items():\n+            assert_raises_rpc_error(-8, \"Selected estimate_mode {} requires a fee rate to be specified in conf_target\".format(unit),\n+                                    rbf_node.bumpfee, rbfid, {\"fee_rate\": fee_rate, \"estimate_mode\": unit})\n+\n+        self.log.info(\"Test explicit fee rate raises RPC error if both fee_rate and conf_target are passed\")\n+        error_both = \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation \" \\\n+                     \"target in blocks for automatic fee estimation, or an explicit fee rate.\"\n+        assert_raises_rpc_error(-8, error_both, rbf_node.bumpfee, rbfid, {\"conf_target\": NORMAL, \"fee_rate\": NORMAL})\n+\n+        self.log.info(\"Test invalid conf_target settings\")\n+        assert_raises_rpc_error(-8, \"confTarget and conf_target options should not both be set\",\n+                                rbf_node.bumpfee, rbfid, {\"confTarget\": 123, \"conf_target\": 456})\n+        for field in [\"confTarget\", \"conf_target\"]:\n+            assert_raises_rpc_error(-4, \"is too high (cannot be higher than -maxtxfee\",\n+                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": BTC_MODE, \"conf_target\": 2009}))\n+            assert_raises_rpc_error(-4, \"is too high (cannot be higher than -maxtxfee\",\n+                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": SAT_MODE, \"conf_target\": 2009 * 10000}))\n+\n+        self.log.info(\"Test invalid estimate_mode settings\")\n+        for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n+            assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n+                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": v, \"fee_rate\": NORMAL}))\n+        for mode in [\"foo\", Decimal(\"3.141592\")]:\n+            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": NORMAL}))\n+\n+        self.log.info(\"Test invalid fee_rate settings\")\n+        for mode in [\"unset\", \"economical\", \"conservative\", BTC_MODE, SAT_MODE]:\n+            self.log.debug(\"{}\".format(mode))\n+            for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n+                assert_raises_rpc_error(-3, \"Expected type number for fee_rate, got {}\".format(k),\n+                                        lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": v}))\n+                assert_raises_rpc_error(-3, \"Amount out of range\",\n+                                        lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": -1}))\n+                assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+                                        lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": 0}))\n         self.clear_mempool()\n \n \n@@ -167,57 +194,6 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     self.clear_mempool()\n \n \n-def test_feerate_args(self, rbf_node, peer_node, dest_address):\n-    self.log.info('Test fee_rate args')\n-    rbfid = spend_one_input(rbf_node, dest_address)\n-    self.sync_mempools((rbf_node, peer_node))\n-    assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n-\n-    assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n-\n-    # For each fee mode, bumping to just above minrelay should fail to increase the total fee enough.\n-    for options in [{\"fee_rate\": INSUFFICIENT}, {\"conf_target\": INSUFFICIENT, \"estimate_mode\": BTC_MODE}, {\"conf_target\": 1, \"estimate_mode\": SAT_MODE}]:\n-        assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, options)\n-    assert_raises_rpc_error(-3, \"Amount out of range\", rbf_node.bumpfee, rbfid, {\"fee_rate\": -1})\n-    assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n-\n-    self.log.info(\"Test explicit fee rate raises RPC error if estimate_mode is passed without a conf_target\")\n-    for unit, fee_rate in {\"SAT/B\": 10, \"BTC/KB\": NORMAL}.items():\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode {} requires a fee rate to be specified in conf_target\".format(unit),\n-                                rbf_node.bumpfee, rbfid, {\"fee_rate\": fee_rate, \"estimate_mode\": unit})\n-\n-    self.log.info(\"Test explicit fee rate raises RPC error if both fee_rate and conf_target are passed\")\n-    error_both = \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation \" \\\n-                 \"target in blocks for automatic fee estimation, or an explicit fee rate.\"\n-    assert_raises_rpc_error(-8, error_both, rbf_node.bumpfee, rbfid, {\"conf_target\": NORMAL, \"fee_rate\": NORMAL})\n-\n-    self.log.info(\"Test invalid conf_target settings\")\n-    for field in [\"confTarget\", \"conf_target\"]:\n-        assert_raises_rpc_error(-8, error_both, rbf_node.bumpfee, rbfid, {field: 1, \"fee_rate\": NORMAL})\n-    too_high = \"is too high (cannot be higher than -maxtxfee\"\n-    assert_raises_rpc_error(-4, too_high, lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": BTC_MODE, \"conf_target\": 2009}))\n-    assert_raises_rpc_error(-4, too_high, lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": SAT_MODE, \"conf_target\": 2009 * 10000}))\n-\n-    self.log.info(\"Test invalid estimate_mode settings\")\n-    for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n-        assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n-                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": v, \"fee_rate\": NORMAL}))\n-    for mode in [\"foo\", Decimal(\"3.141592\")]:\n-        assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n-                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": NORMAL}))\n-\n-    self.log.info(\"Test invalid fee_rate settings\")\n-    for mode in [\"unset\", \"economical\", \"conservative\", BTC_MODE, SAT_MODE]:\n-        self.log.debug(\"{}\".format(mode))\n-        for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n-            assert_raises_rpc_error(-3, \"Expected type number for fee_rate, got {}\".format(k),\n-                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": v}))\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": -1}))\n-        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n-                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": 0}))\n-    self.clear_mempool()\n-\n def test_segwit_bumpfee_succeeds(self, rbf_node, dest_address):\n     self.log.info('Test that segwit-sourcing bumpfee works')\n     # Create a transaction with segwit output, then create an RBF transaction"
      }
    ]
  },
  {
    "sha": "3ac7b0c6f1c68e74a84d868a454f508bada6b09d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWM3YjBjNmYxYzY4ZTc0YTg0ZDg2OGE0NTRmNTA4YmFkYTZiMDlk",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-19T09:35:10Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-28T23:21:57Z"
      },
      "message": "wallet: fundrawtx fee rate coverage, fixup ParseConfirmTarget()",
      "tree": {
        "sha": "a9c660cddd1819a6044c9c5c60befc196e81b092",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9c660cddd1819a6044c9c5c60befc196e81b092"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ac7b0c6f1c68e74a84d868a454f508bada6b09d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+Z/RYACgkQT1chs9Dj\nkh31fQ/9HAXeHCz6AY1PzPQ/2b7iUIU/wCRBaZQFZHaWacfnwM0qopEm7Bphr0xx\ncA3L8eCAr0zTHwBb/Gy1EquNJatmjBl/Xst9nTCbIpMfHbvhXmv7AdOdAY8pBw/j\no0uZ1S7kZIK72iZ4rsof58pUlgVFaJezuoa50Nl7wTvoLku3O0jbYw/KLK+y1xSs\ngDEHqjIO2ZVEkttE23vfB/a7ydWB51YvANZm27Vn2Vg8xo4wVPU5kCRGAMYcsD/c\nPqT7TSX83YPTQ1+VGM6XyzJk9Fd2H+bWuUXD9rVzLMZvYhv5Et2H661a9etGC5jY\nuBqi6Jf59YX3B7YXqFViKJY3Fm8nJ/+ojsQJeuuFNI/zPrdGv7pVGXLMsIwnI218\nGEnXkWB0C9UYyZyk3YuMjd4iHJOooqPVH+3r1xiCzKHIOo9u/wGmsmSLjyxZRtDC\noHyM+r7hWyWS7LL4KQAUJrClPyacA6gdj8+vcKaRSltpGQm+kg9p8RxHOKHK9yIr\nhr/EKdn+GYlWSh00dPSj0O1lR7OKEdzcdtOlFbHvJkr7r+9mW8+Hf39KKNFyEzT+\nn2fATe5+TeLiWpB/SARtvgnfB98a8ZEHXoNEGhQkXQPAUHzWEnEP5Az3Twk5XhXZ\nhm79H7FB3ooyw7JgvT3vyRZAfcQvGBP5z1foy6YXXhr6O+YH4Jo=\n=uCcp\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIAP/DEcwLFL8vCvX9flk/lfr2whYsiHI9Ncs5e6fQb3MCP/wECmBOMammxgl\nhjQ3h9weSFwI8QRfmf0Z8AjFoY7CxzIy1gCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEFfYnm2napW2wvrvK3EJ3zoI\n8QRfmf0X8AiGAK/Y8IuNPQCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVu\nZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEJyPhU46ES8OmawEhGXVGVgI8QRfmf0X\n8Ajh3NkFqA6rVACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BDlhLp4NWCK2qQs5fGwp71cCPEEX5n9F/AI81/z\n1OH3EUIAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree a9c660cddd1819a6044c9c5c60befc196e81b092\nparent 2d8eba8f8425a2515022d51f1f5b4911329fbf55\nauthor Jon Atack <jon@atack.com> 1603100110 +0200\ncommitter Jon Atack <jon@atack.com> 1603927317 +0100\n\nwallet: fundrawtx fee rate coverage, fixup ParseConfirmTarget()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ac7b0c6f1c68e74a84d868a454f508bada6b09d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ac7b0c6f1c68e74a84d868a454f508bada6b09d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ac7b0c6f1c68e74a84d868a454f508bada6b09d/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d8eba8f8425a2515022d51f1f5b4911329fbf55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d8eba8f8425a2515022d51f1f5b4911329fbf55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d8eba8f8425a2515022d51f1f5b4911329fbf55"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 60,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1b21587b6dc79bc8d8b2fd3f5865518c6d9c00b6",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ac7b0c6f1c68e74a84d868a454f508bada6b09d/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ac7b0c6f1c68e74a84d868a454f508bada6b09d/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=3ac7b0c6f1c68e74a84d868a454f508bada6b09d",
        "patch": "@@ -272,11 +272,12 @@ UniValue DescribeAddress(const CTxDestination& dest)\n \n unsigned int ParseConfirmTarget(const UniValue& value, unsigned int max_target)\n {\n-    int target = value.get_int();\n-    if (target < 1 || (unsigned int)target > max_target) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid conf_target, must be between %u - %u\", 1, max_target));\n+    const int target{value.get_int()};\n+    const unsigned int unsigned_target{static_cast<unsigned int>(target)};\n+    if (target < 1 || unsigned_target > max_target) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid conf_target, must be between %u and %u\", 1, max_target));\n     }\n-    return (unsigned int)target;\n+    return unsigned_target;\n }\n \n RPCErrorCode RPCErrorFromTransactionError(TransactionError terr)"
      },
      {
        "sha": "85ecb4035425d0457a0a29be6f59e04bfb86a84f",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ac7b0c6f1c68e74a84d868a454f508bada6b09d/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ac7b0c6f1c68e74a84d868a454f508bada6b09d/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=3ac7b0c6f1c68e74a84d868a454f508bada6b09d",
        "patch": "@@ -7,6 +7,7 @@\n from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n+    assert_approx,\n     assert_equal,\n     assert_fee_amount,\n     assert_greater_than,\n@@ -89,6 +90,7 @@ def run_test(self):\n         self.test_op_return()\n         self.test_watchonly()\n         self.test_all_watched_funds()\n+        self.test_feerate_with_conf_target_and_estimate_mode()\n         self.test_option_feerate()\n         self.test_address_reuse()\n         self.test_option_subtract_fee_from_outputs()\n@@ -672,6 +674,59 @@ def test_option_feerate(self):\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n+    def test_feerate_with_conf_target_and_estimate_mode(self):\n+        self.log.info(\"Test fundrawtxn passing an explicit fee rate using conf_target and estimate_mode\")\n+        node = self.nodes[3]\n+        # Make sure there is exactly one input so coin selection can't skew the result.\n+        assert_equal(len(node.listunspent(1)), 1)\n+        inputs = []\n+        outputs = {node.getnewaddress() : 1}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        for unit, fee_rate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n+            self.log.info(\"Test fundrawtxn with conf_target {} estimate_mode {} produces expected fee\".format(fee_rate, unit))\n+            # With no arguments passed, expect fee of 141 sats/b.\n+            assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n+            # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.\n+            result = node.fundrawtransaction(rawtx, {\"conf_target\": fee_rate, \"estimate_mode\": unit})\n+            assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n+\n+        for field, fee_rate in {\"conf_target\": 0.1, \"estimate_mode\": \"sat/b\"}.items():\n+            self.log.info(\"Test fundrawtxn raises RPC error if both feeRate and {} are passed\".format(field))\n+            assert_raises_rpc_error(\n+                -8, \"Cannot specify both {} and feeRate\".format(field),\n+                lambda: node.fundrawtransaction(rawtx, {\"feeRate\": 0.1, field: fee_rate}))\n+\n+        self.log.info(\"Test fundrawtxn with invalid estimate_mode settings\")\n+        for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n+            assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n+                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": v, \"conf_target\": 0.1}))\n+        for mode in [\"foo\", Decimal(\"3.141592\")]:\n+            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": 0.1}))\n+\n+        self.log.info(\"Test fundrawtxn with invalid conf_target settings\")\n+        for mode in [\"unset\", \"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n+            self.log.debug(\"{}\".format(mode))\n+            for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n+                assert_raises_rpc_error(-3, \"Expected type number for conf_target, got {}\".format(k),\n+                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": v}))\n+            if mode in [\"btc/kb\", \"sat/b\"]:\n+                assert_raises_rpc_error(-3, \"Amount out of range\",\n+                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": -1}))\n+                assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": 0}))\n+            else:\n+                for n in [-1, 0, 1009]:\n+                    assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",\n+                        lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": n}))\n+\n+        for unit, fee_rate in {\"sat/B\": 0.99999999, \"BTC/kB\": 0.00000999}.items():\n+            self.log.info(\"- raises RPC error 'fee rate too low' if conf_target {} and estimate_mode {} are passed\".format(fee_rate, unit))\n+            assert_raises_rpc_error(-4, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": unit, \"conf_target\": fee_rate, \"add_inputs\": True}))\n+\n+\n     def test_address_reuse(self):\n         \"\"\"Test no address reuse occurs.\"\"\"\n         self.log.info(\"Test fundrawtxn does not reuse addresses\")"
      }
    ]
  },
  {
    "sha": "6e1ea4273e52fdcd86c87628aa595c03a071ca8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTFlYTQyNzNlNTJmZGNkODZjODc2MjhhYTU5NWMwM2EwNzFjYThj",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-06-26T14:05:03Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-28T23:22:00Z"
      },
      "message": "test: refactor for walletcreatefundedpsbt fee rate coverage",
      "tree": {
        "sha": "0983a7e7744c169d821aedc62ac3a86dd80f5467",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0983a7e7744c169d821aedc62ac3a86dd80f5467"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e1ea4273e52fdcd86c87628aa595c03a071ca8c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+Z/RgACgkQT1chs9Dj\nkh1O/g/9HlL8ibylnQY5BnSUBS0nEq1YFm1WWsEeyKGA5IxyL6FbHZ7uoxPLa89R\n2BvHV+du0JFMcYEk0cvEvo15r6PiO8IwQoxuLdGkgk557wO+kFftDKUInnjyF0cc\nJ3WkkYXxKrDx4Hph3WHTJsoK05y5yJ1mC6hWAGSsRT+mjDWaensA/+C5mD+FwbWL\n9AyF5+aVf9M6nbdB8x39yKRhTN2Q33zR4/gjafz1iDrMY1WLVSrAvKDSfKup84ss\nWkx1pbAldRPAYxd/Gi27F1BozLvsjBYUVcQy+1aAxa6YgQwLcsWxxRYIP+FaOo3W\nXvOlxwVkK+pT1JYFvuebpWCIsZcs8s7z23ecWOhCbBLahjHat/A5/z9es0ObQOao\nUHMPAfd6vFbGHjC88BLGIn0DQ/W+RRes2nZktSAZ0kWxLD5rcBFHsFRzacbclD2U\nNGEEHrTE9XBgz1Aptz6XIpCqG+lCpyQ5iq+FAsB0ZRPgCXaWkhq/RDlZKO7M9ogH\norpvF2/DP741FiEHxZ2DvLLHPI4A/Jd604woKLxm0KQv91+FOQcYItLU8xVIOBkg\nKdS86liNefxWNYGnTEtzTdoFY9ruVl95pWj/J6jdQAlQ7KsqgEVu6acP+0PinM24\nbSS8aYvUAEav9qXpuAoo7KvcEDytj8Ms1CFpJ7ss/zpVr5w1j4w=\n=jDW/\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIO4CfzPScYKsHu9rH0KN+l6qfUqFAdh4VduiPoPh6GrXCP/wECg3syLbgqHQ\nkF4wK3zH7CQI8QRfmf0Z8Ah7wo0DvnpeEACD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEEzCnVes8mN+u/Qu1SNPuMgI8QRfmf0Z\n8Ahb5HRwmi2rlQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQdurLNqy1Vuo4JTC49r+8MAjxBF+Z/RvwCDSt\ndbWlGunJAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t8BB+jmoDW+dZd8UVQVdQs41YCPEEX5n9GfAIaB0gZRlmgMYAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 0983a7e7744c169d821aedc62ac3a86dd80f5467\nparent 3ac7b0c6f1c68e74a84d868a454f508bada6b09d\nauthor Jon Atack <jon@atack.com> 1593180303 +0200\ncommitter Jon Atack <jon@atack.com> 1603927320 +0100\n\ntest: refactor for walletcreatefundedpsbt fee rate coverage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e1ea4273e52fdcd86c87628aa595c03a071ca8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e1ea4273e52fdcd86c87628aa595c03a071ca8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e1ea4273e52fdcd86c87628aa595c03a071ca8c/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ac7b0c6f1c68e74a84d868a454f508bada6b09d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ac7b0c6f1c68e74a84d868a454f508bada6b09d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ac7b0c6f1c68e74a84d868a454f508bada6b09d"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 11,
      "deletions": 6
    },
    "files": [
      {
        "sha": "2bac77de81349259afb1e02ae0ce0059f26967aa",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e1ea4273e52fdcd86c87628aa595c03a071ca8c/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e1ea4273e52fdcd86c87628aa595c03a071ca8c/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=6e1ea4273e52fdcd86c87628aa595c03a071ca8c",
        "patch": "@@ -174,8 +174,11 @@ def run_test(self):\n             elif out['scriptPubKey']['addresses'][0] == p2pkh:\n                 p2pkh_pos = out['n']\n \n+        inputs = [{\"txid\": txid, \"vout\": p2wpkh_pos}, {\"txid\": txid, \"vout\": p2sh_p2wpkh_pos}, {\"txid\": txid, \"vout\": p2pkh_pos}]\n+        outputs = [{self.nodes[1].getnewaddress(): 29.99}]\n+\n         # spend single key from node 1\n-        created_psbt = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99})\n+        created_psbt = self.nodes[1].walletcreatefundedpsbt(inputs, outputs)\n         walletprocesspsbt_out = self.nodes[1].walletprocesspsbt(created_psbt['psbt'])\n         # Make sure it has both types of UTXOs\n         decoded = self.nodes[1].decodepsbt(walletprocesspsbt_out['psbt'])\n@@ -186,15 +189,17 @@ def run_test(self):\n         assert_equal(walletprocesspsbt_out['complete'], True)\n         self.nodes[1].sendrawtransaction(self.nodes[1].finalizepsbt(walletprocesspsbt_out['psbt'])['hex'])\n \n-        # feeRate of 0.1 BTC / KB produces a total fee slightly below -maxtxfee (~0.05280000):\n-        res = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n+        self.log.info(\"Test walletcreatefundedpsbt feeRate of 0.1 BTC/kB produces a total fee at or slightly below -maxtxfee (~0.05290000)\")\n+        res = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n         assert_approx(res[\"fee\"], 0.055, 0.005)\n \n-        # feeRate of 10 BTC / KB produces a total fee well above -maxtxfee\n+        self.log.info(\"Test walletcreatefundedpsbt feeRate of 10 BTC/KB produces total fee well above -maxtxfee and raises RPC error\")\n         # previously this was silently capped at -maxtxfee\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[1].walletcreatefundedpsbt, [{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 10, \"add_inputs\": True})\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[1].walletcreatefundedpsbt, [{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():1}, 0, {\"feeRate\": 10, \"add_inputs\": False})\n+        for bool_add, outputs_array in {True: outputs, False: [{self.nodes[1].getnewaddress(): 1}]}.items():\n+            assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\",\n+                self.nodes[1].walletcreatefundedpsbt, inputs, outputs_array, 0, {\"feeRate\": 10, \"add_inputs\": bool_add})\n \n+        self.log.info(\"Test various PSBT operations\")\n         # partially sign multisig things with node 1\n         psbtx = wmulti.walletcreatefundedpsbt(inputs=[{\"txid\":txid,\"vout\":p2wsh_pos},{\"txid\":txid,\"vout\":p2sh_pos},{\"txid\":txid,\"vout\":p2sh_p2wsh_pos}], outputs={self.nodes[1].getnewaddress():29.99}, options={'changeAddress': self.nodes[1].getrawchangeaddress()})['psbt']\n         walletprocesspsbt_out = self.nodes[1].walletprocesspsbt(psbtx)"
      }
    ]
  },
  {
    "sha": "44e7bfa60313e4ae67da49e5ba4535038b71b453",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NGU3YmZhNjAzMTNlNGFlNjdkYTQ5ZTViYTQ1MzUwMzhiNzFiNDUz",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-06-26T14:06:43Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-28T23:22:02Z"
      },
      "message": "wallet: add walletcreatefundedpsbt explicit fee rate coverage",
      "tree": {
        "sha": "4d4d917123f1123970c43e729bb3b766574e0126",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d4d917123f1123970c43e729bb3b766574e0126"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44e7bfa60313e4ae67da49e5ba4535038b71b453",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+Z/RoACgkQT1chs9Dj\nkh16eA//YBh/GU0m1WlBibuwmv17Q4N1/AyXz0wsX/19uTxg/45rTnElG3D6mWDH\nxkVW9PTI+3e7Yy7UyL5aFkZkgM3Tjcfeq1jB5rMeG7XJW2gcH37YKcoCFi7Ijw9S\n3O9U+fhStqbvOqfDDKkXlZILFzKeYUTzUp23xslZopA5nXYX1ttzJqNhAA1gvptg\nbgsmzTLP1TmGCz0DQoBrECg6LLmOmQwMW1gkpOPUrbSEGyFGzv5J/1B4kXyMs1aO\nrsm4EcciEiOco0ahQoOASASMdzA7yhygdJlTxdfOMYFGBBvGS3fOfSZ0U72PnesJ\n0Uj0z3UaYc3GAW8dOASvcbZ5zAUxR5BgULFyOAYwmwU/Ja3zOLV22Y8m/FbDpk63\nYTGiZK1pQYLTePSuibllfXJ3tV0k5Z3SxuDz+w71XtAyV2Mv208vTNz8poWZkKfQ\nHxixW5khBl1CwWFi9bBhrNpBQSxyzBW7c3uHe2EloKBb9dcoRD6DaUfPAAy0CcTA\nQfcg1vfOPdgXEhg8iny3iqq3d/fuH28RcAx7bR77I1TQNgIDL2RpFbmaCAlCUM5o\nfM7dDGepaEsrWgTiUcjQRpBJZIyy0z4FfsaYqJK9V2/z2zq0oh0MTajenPIUsfb/\nnbOVmN3AykE+IfaeE2Wx6m35TElriAqFEZjQsRrM0sVtS9/UYMo=\n=C8YN\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHZJY57UMrXfVHA82Nmax4iPYg/M4cGwgHnNrmbpt/6BCP/wEAWE7cEDinXK\noVSlZn8DsD0I8QRfmf0d8AhEkHmF08Ja5gCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEBulmqVK2Uq6mAhdQ/j2BesI\n8QRfmf0b8AhcBnYUSwdfZgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbf/wEC796REqZJgj/0DPwVyYib8I8QRfmf0b8AhL3HmCo2fb\nCwCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZ/AQnRfHj5ZyL4U+QYJPgjP18gjxBF+Z/RvwCJDCT0JE8iFIAIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 4d4d917123f1123970c43e729bb3b766574e0126\nparent 6e1ea4273e52fdcd86c87628aa595c03a071ca8c\nauthor Jon Atack <jon@atack.com> 1593180403 +0200\ncommitter Jon Atack <jon@atack.com> 1603927322 +0100\n\nwallet: add walletcreatefundedpsbt explicit fee rate coverage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44e7bfa60313e4ae67da49e5ba4535038b71b453",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44e7bfa60313e4ae67da49e5ba4535038b71b453",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44e7bfa60313e4ae67da49e5ba4535038b71b453/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e1ea4273e52fdcd86c87628aa595c03a071ca8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e1ea4273e52fdcd86c87628aa595c03a071ca8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e1ea4273e52fdcd86c87628aa595c03a071ca8c"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 46,
      "deletions": 1
    },
    "files": [
      {
        "sha": "28bcc516c6abf1d201ae40d075a1ec94615d3a86",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 46,
        "deletions": 1,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44e7bfa60313e4ae67da49e5ba4535038b71b453/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44e7bfa60313e4ae67da49e5ba4535038b71b453/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=44e7bfa60313e4ae67da49e5ba4535038b71b453",
        "patch": "@@ -193,7 +193,52 @@ def run_test(self):\n         res = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n         assert_approx(res[\"fee\"], 0.055, 0.005)\n \n-        self.log.info(\"Test walletcreatefundedpsbt feeRate of 10 BTC/KB produces total fee well above -maxtxfee and raises RPC error\")\n+        self.log.info(\"Test walletcreatefundedpsbt explicit fee rate with conf_target and estimate_mode\")\n+        for unit, fee_rate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n+            fee = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"conf_target\": fee_rate, \"estimate_mode\": unit, \"add_inputs\": True})[\"fee\"]\n+            self.log.info(\"- conf_target {}, estimate_mode {} produces fee {} at or slightly below -maxtxfee (~0.05290000)\".format(fee_rate, unit, fee))\n+            assert_approx(fee, vexp=0.055, vspan=0.005)\n+\n+        for field, fee_rate in {\"conf_target\": 0.1, \"estimate_mode\": \"sat/b\"}.items():\n+            self.log.info(\"- raises RPC error if both feeRate and {} are passed\".format(field))\n+            assert_raises_rpc_error(-8, \"Cannot specify both {} and feeRate\".format(field),\n+                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.1, field: fee_rate, \"add_inputs\": True}))\n+\n+        self.log.info(\"- raises RPC error with invalid estimate_mode settings\")\n+        for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n+            assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n+                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": v, \"conf_target\": 0.1, \"add_inputs\": True}))\n+        for mode in [\"foo\", Decimal(\"3.141592\")]:\n+            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": 0.1, \"add_inputs\": True}))\n+\n+        self.log.info(\"- raises RPC error if estimate_mode is passed without a conf_target\")\n+        for unit in [\"SAT/B\", \"BTC/KB\"]:\n+            assert_raises_rpc_error(-8, \"Selected estimate_mode {} requires a fee rate to be specified in conf_target\".format(unit),\n+                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": unit}))\n+\n+        self.log.info(\"- raises RPC error with invalid conf_target settings\")\n+        for mode in [\"unset\", \"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n+            self.log.debug(\"{}\".format(mode))\n+            for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n+                assert_raises_rpc_error(-3, \"Expected type number for conf_target, got {}\".format(k),\n+                    lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": v, \"add_inputs\": True}))\n+            if mode in [\"btc/kb\", \"sat/b\"]:\n+                assert_raises_rpc_error(-3, \"Amount out of range\",\n+                    lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": -1, \"add_inputs\": True}))\n+                assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+                    lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": 0, \"add_inputs\": True}))\n+            else:\n+                for n in [-1, 0, 1009]:\n+                    assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",\n+                        lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": n, \"add_inputs\": True}))\n+\n+        for unit, fee_rate in {\"SAT/B\": 0.99999999, \"BTC/KB\": 0.00000999}.items():\n+            self.log.info(\"- raises RPC error 'fee rate too low' if conf_target {} and estimate_mode {} are passed\".format(fee_rate, unit))\n+            assert_raises_rpc_error(-4, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": unit, \"conf_target\": fee_rate, \"add_inputs\": True}))\n+\n+        self.log.info(\"Test walletcreatefundedpsbt feeRate of 10 BTC/kB produces total fee well above -maxtxfee and raises RPC error\")\n         # previously this was silently capped at -maxtxfee\n         for bool_add, outputs_array in {True: outputs, False: [{self.nodes[1].getnewaddress(): 1}]}.items():\n             assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\","
      }
    ]
  },
  {
    "sha": "dd341e602d5160fc621c0299179b91403756b61d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDM0MWU2MDJkNTE2MGZjNjIxYzAyOTkxNzliOTE0MDM3NTZiNjFk",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-25T19:52:17Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-28T23:22:04Z"
      },
      "message": "wallet: add sendtoaddress/sendmany explicit fee rate coverage",
      "tree": {
        "sha": "4129570c5e961310248b67921832399b7155caa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4129570c5e961310248b67921832399b7155caa4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd341e602d5160fc621c0299179b91403756b61d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+Z/RwACgkQT1chs9Dj\nkh2+Qg/+MHUeZLELAv+s+YLZfH08/7/UH1cc+lyiqOeo5m0pk0RHhbItsni9T0LG\nw5xSIg5SjaflGX/Y4bgfbmtS1cOJuZ9Woyhyu22ofpsRLX0KHWmo/t7RWRlZEJg4\no0dOsN/TZIiNGz3pQ5HoNmfqCYRkPrjFRtCikndXvNROKnoXOaY0YENZaSoOqcYB\nKae3UYHuRZ7/Mzg6fE8qlBpuZw0avQk5GYosPuwhQL8kCFPD+Ytcy/N9a3VE7U8H\n58rZ5pa7I+i2LPyO+iAAQatuqCeS37bRuhaPmB1oaySLAmr2vOE0Lb1NZpGOU/ft\ndIxKdoPGjiGwqpoLm1JfGtnbcRrLZwJRDp1VUQ05lFk4P2sFhOZ6DMR9Tpw6YxX0\na85gUR+cpsT92GxyEFPJlN6vnrZl02raZyhN89Cv/ggn0NSfHEosuZak9ejWiqUT\ndbknrE2GJaKZURWkgfAIWOwtKPtHUVBAFTQk+yeLuV2oHOODHF49dQQ/wH8Z8F2/\n/FmC73UcxZ9g0Iwz4zZz2TqqyOi/rpCDp5Qdj3uBYN+J7VDdmrnZo66ynHD1bj7q\nis5oZL9iQcBa+flptnGiSMEIRMM1P195DK6DpmgHnkJsjoAfGzXGe9jZSZy3Md4y\ntKV6FKG/XFola+vhGR8OAqU4xkQ1CKDlUpuHlngazd7UWC9Oh3M=\n=lUCs\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGu57KdyqxSt4K6vX8NoB6VT7RFW83OjmvIKdvqq7ZMWCP/wEDl//ZLh01mK\n8Vdj2d+GE3MI8QRfmf0d8AimJjd+3PngbQCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEHJGs4RSrABx6jJHDTwP\nq0YI8QRfmf0d8Ag9uh2qX5hYlwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQnu6ZXj6suKVLWv8Sulr0Ywjx\nBF+Z/R3wCE+G2M77JLE0AIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5j\nYXRhbGxheHkuY29t8BDRl7FxK2gIsz7WeRfY118eCPEEX5n9H/AIXHc85uAypegA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 4129570c5e961310248b67921832399b7155caa4\nparent 44e7bfa60313e4ae67da49e5ba4535038b71b453\nauthor Jon Atack <jon@atack.com> 1603655537 +0100\ncommitter Jon Atack <jon@atack.com> 1603927324 +0100\n\nwallet: add sendtoaddress/sendmany explicit fee rate coverage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd341e602d5160fc621c0299179b91403756b61d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd341e602d5160fc621c0299179b91403756b61d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd341e602d5160fc621c0299179b91403756b61d/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44e7bfa60313e4ae67da49e5ba4535038b71b453",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44e7bfa60313e4ae67da49e5ba4535038b71b453",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44e7bfa60313e4ae67da49e5ba4535038b71b453"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 19,
      "deletions": 6
    },
    "files": [
      {
        "sha": "411ae3db29c474e666999ef313fbee09e5f80cdf",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 19,
        "deletions": 6,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd341e602d5160fc621c0299179b91403756b61d/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd341e602d5160fc621c0299179b91403756b61d/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=dd341e602d5160fc621c0299179b91403756b61d",
        "patch": "@@ -210,6 +210,8 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n+        self.log.info(\"Test sendmany\")\n+\n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('', {address: 10}, 0, \"\", [])\n         self.nodes[2].generate(1)\n@@ -226,7 +228,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n-        # Sendmany with explicit fee (BTC/kB)\n+        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as BTC/kB)\")\n         # Throw if no conf_target provided\n         assert_raises_rpc_error(-8, \"Selected estimate_mode bTc/kB requires a fee rate to be specified in conf_target\",\n             self.nodes[2].sendmany,\n@@ -252,7 +254,7 @@ def run_test(self):\n         node_0_bal += Decimal('10')\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n-        # Sendmany with explicit fee (SAT/B)\n+        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as sat/B)\")\n         # Throw if no conf_target provided\n         assert_raises_rpc_error(-8, \"Selected estimate_mode sat/b requires a fee rate to be specified in conf_target\",\n             self.nodes[2].sendmany,\n@@ -280,6 +282,12 @@ def run_test(self):\n         node_0_bal += Decimal('10')\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n+        # Test setting explicit fee rate just below the minimum.\n+        for unit, fee_rate in {\"BTC/kB\": 0.00000999, \"sat/B\": 0.99999999}.items():\n+            self.log.info(\"Test sendmany raises 'fee rate too low' if conf_target {} and estimate_mode {} are passed\".format(fee_rate, unit))\n+            assert_raises_rpc_error(-6, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+                self.nodes[2].sendmany, amounts={address: 10}, estimate_mode=unit, conf_target=fee_rate)\n+\n         self.start_node(3, self.nodes[3].extra_args)\n         connect_nodes(self.nodes[0], 3)\n         self.sync_all()\n@@ -413,8 +421,7 @@ def run_test(self):\n             self.nodes[0].generate(1)\n             self.sync_all(self.nodes[0:3])\n \n-            # send with explicit btc/kb fee\n-            self.log.info(\"test explicit fee (sendtoaddress as btc/kb)\")\n+            self.log.info(\"Test case-insensitive explicit fee rate (sendtoaddress as BTC/kB)\")\n             self.nodes[0].generate(1)\n             self.sync_all(self.nodes[0:3])\n             prebalance = self.nodes[2].getbalance()\n@@ -447,9 +454,9 @@ def run_test(self):\n             fee = prebalance - postbalance - Decimal('1')\n             assert_fee_amount(fee, tx_size, Decimal('0.00002500'))\n \n-            # send with explicit sat/b fee\n             self.sync_all(self.nodes[0:3])\n-            self.log.info(\"test explicit fee (sendtoaddress as sat/b)\")\n+\n+            self.log.info(\"Test case-insensitive explicit fee rate (sendtoaddress as sat/B)\")\n             self.nodes[0].generate(1)\n             prebalance = self.nodes[2].getbalance()\n             assert prebalance > 2\n@@ -481,6 +488,12 @@ def run_test(self):\n             fee = prebalance - postbalance - Decimal('1')\n             assert_fee_amount(fee, tx_size, Decimal('0.00002000'))\n \n+            # Test setting explicit fee rate just below the minimum.\n+            for unit, fee_rate in {\"BTC/kB\": 0.00000999, \"sat/B\": 0.99999999}.items():\n+                self.log.info(\"Test sendtoaddress raises 'fee rate too low' if conf_target {} and estimate_mode {} are passed\".format(fee_rate, unit))\n+                assert_raises_rpc_error(-6, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+                    self.nodes[2].sendtoaddress, address=address, amount=1, estimate_mode=unit, conf_target=fee_rate)\n+\n             # 2. Import address from node2 to node1\n             self.nodes[1].importaddress(address_to_import)\n "
      }
    ]
  },
  {
    "sha": "603c0050837ec65765208dd54dde354145fbe098",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDNjMDA1MDgzN2VjNjU3NjUyMDhkZDU0ZGRlMzU0MTQ1ZmJlMDk4",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-25T19:53:38Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-28T23:22:08Z"
      },
      "message": "wallet: add rpc send explicit fee rate coverage",
      "tree": {
        "sha": "e3ba2b3c61184e5e3254ea79df00b9312dd46296",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3ba2b3c61184e5e3254ea79df00b9312dd46296"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/603c0050837ec65765208dd54dde354145fbe098",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+Z/SAACgkQT1chs9Dj\nkh3gGA/9FfVIzHQ48bPoIQDbQ/2UA6mIiweeZeZNhis4zNpk6xIYaNzyYANP7idt\nZc4koqojXe5XruTD/XqXqxF+X6Z05MKNK3jBf4n0WoWOiRbvGVqHLV+RYDEl4gV1\nJseNxKAFemY+0++ivl3GZ4li2nRVD02l/GWzroJONkM7I18N8XYzwR8Bw/x7sPgp\nRAFGQ9iFIHLzH31HyOnj+PmivTJb8bd1m7JnSa3MPj7l1V6sdEuK8JoFAMWXDrMo\nPN4Bk8J+LesrJtaU8DwnaIHREafdpDQkvS7rCuOl9jCNnZo99GXCXae93t9y6iJu\nzC+vdokzpFMLm4VnU7UXXV3vIJ+pecqx+dyOXxAjCz8MSTafBdh1l8C9Y6yhyhUf\nMx3dVPdX5cEHrJ4AYOncohQ3G9/iLBrgZP+kLhHlrIxLWxjAhmgpypJCZ2SzO/JX\ne9uFx/tpUwJVAvXRt8LVmNyQezOqO2r4qHLjajEl6x9VCC1Lb0AXz5cE3e0THovj\nI0TU+CmSYS8JvalepnfWg2b2WtFGxqr+J7Rl8AyRzeFVqHidMh70itADN7SAQ6ey\nutOC/ymMFiFGLhYgIq1sy0vFIwFbRVjpdP/hi6vkfIc+IobUqHVkJIsaHfTmXPA0\n7dyN1YgeI9GCIZ7yNE9N4Tsw/ufafEn/fgz5+P++BIQJ21s9xEo=\n=HdMF\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHQ3mVpnoqzLdhneqSDjckHf39CmN/Yd3dA2ek6eRh2NCP/wEADAwcW8lJm8\n8/gIbaQPMuoI8QRfmf0j8AghUe9nBUrLXQCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wECroME1Pw06RNYl6haWYCIEI\n8QRfmf0h8AgBufiDsTXOjwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQfLXpjq8ELzJjktNRKH0nswjxBF+Z\n/SHwCL8Fn/LqlBnTAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRh\nbGxheHkuY29t8BDuYCDXYEvQRu14/bvqT1ZrCPEEX5n9IfAIfCbIWkksFpgAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree e3ba2b3c61184e5e3254ea79df00b9312dd46296\nparent dd341e602d5160fc621c0299179b91403756b61d\nauthor Jon Atack <jon@atack.com> 1603655618 +0100\ncommitter Jon Atack <jon@atack.com> 1603927328 +0100\n\nwallet: add rpc send explicit fee rate coverage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/603c0050837ec65765208dd54dde354145fbe098",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/603c0050837ec65765208dd54dde354145fbe098",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/603c0050837ec65765208dd54dde354145fbe098/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd341e602d5160fc621c0299179b91403756b61d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd341e602d5160fc621c0299179b91403756b61d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd341e602d5160fc621c0299179b91403756b61d"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 58,
      "deletions": 12
    },
    "files": [
      {
        "sha": "5840a244044191edfe54e753b3e0f28e84fd65f6",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 58,
        "deletions": 12,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/603c0050837ec65765208dd54dde354145fbe098/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/603c0050837ec65765208dd54dde354145fbe098/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=603c0050837ec65765208dd54dde354145fbe098",
        "patch": "@@ -97,6 +97,8 @@ def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n             except AssertionError:\n                 # Provide debug info if the test fails\n                 self.log.error(\"Unexpected successful result:\")\n+                self.log.error(arg_conf_target)\n+                self.log.error(arg_estimate_mode)\n                 self.log.error(options)\n                 res = from_wallet.send(outputs=outputs, conf_target=arg_conf_target, estimate_mode=arg_estimate_mode, options=options)\n                 self.log.error(res)\n@@ -224,8 +226,10 @@ def run_test(self):\n         assert_equal(self.nodes[1].decodepsbt(res1[\"psbt\"])[\"fee\"],\n                      self.nodes[1].decodepsbt(res2[\"psbt\"])[\"fee\"])\n         # but not at the same time\n-        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\",\n-                       conf_target=1, estimate_mode=\"economical\", add_to_wallet=False, expect_error=(-8,\"Use either conf_target and estimate_mode or the options dictionary to control fee rate\"))\n+        for mode in [\"unset\", \"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\",\n+                conf_target=1, estimate_mode=mode, add_to_wallet=False,\n+                expect_error=(-8, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\"))\n \n         self.log.info(\"Create PSBT from watch-only wallet w3, sign with w2...\")\n         res = self.test_send(from_wallet=w3, to_wallet=w1, amount=1)\n@@ -246,19 +250,61 @@ def run_test(self):\n         res = w2.walletprocesspsbt(res[\"psbt\"])\n         assert res[\"complete\"]\n \n-        self.log.info(\"Set fee rate...\")\n+        self.log.info(\"Test setting explicit fee rate\")\n+        res1 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\", add_to_wallet=False)\n+        res2 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=1, estimate_mode=\"economical\", add_to_wallet=False)\n+        assert_equal(self.nodes[1].decodepsbt(res1[\"psbt\"])[\"fee\"], self.nodes[1].decodepsbt(res2[\"psbt\"])[\"fee\"])\n+\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.00007, estimate_mode=\"btc/kb\", add_to_wallet=False)\n+        fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n+        assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00007\"))\n+\n         res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=2, estimate_mode=\"sat/b\", add_to_wallet=False)\n         fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n         assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00002\"))\n-        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=-1, estimate_mode=\"sat/b\",\n-                       expect_error=(-3, \"Amount out of range\"))\n-        # Fee rate of 0.1 satoshi per byte should throw an error\n-        # TODO: error should use sat/b\n-        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\",\n-                       expect_error=(-4, \"Fee rate (0.00000100 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n-\n-        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.000001, estimate_mode=\"BTC/KB\",\n-                       expect_error=(-4, \"Fee rate (0.00000100 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n+\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=0.00004531, arg_estimate_mode=\"btc/kb\", add_to_wallet=False)\n+        fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n+        assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00004531\"))\n+\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=3, arg_estimate_mode=\"sat/b\", add_to_wallet=False)\n+        fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n+        assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00003\"))\n+\n+        # TODO: This test should pass with all modes, e.g. with the next line uncommented, for consistency with the other explicit feerate RPCs.\n+        # for mode in [\"unset\", \"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n+        for mode in [\"btc/kb\", \"sat/b\"]:\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=-1, estimate_mode=mode,\n+                expect_error=(-3, \"Amount out of range\"))\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0, estimate_mode=mode,\n+                expect_error=(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n+\n+        for mode in [\"foo\", Decimal(\"3.141592\")]:\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=mode,\n+                expect_error=(-8, \"Invalid estimate_mode parameter\"))\n+            # TODO: these 2 equivalent sends with an invalid estimate_mode arg should both fail, but they do not...why?\n+            # self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=0.1, arg_estimate_mode=mode,\n+            #     expect_error=(-8, \"Invalid estimate_mode parameter\"))\n+            # assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", lambda: w0.send({w1.getnewaddress(): 1}, 0.1, mode))\n+\n+        # TODO: These tests should pass for consistency with the other explicit feerate RPCs, but they do not.\n+        # for mode in [\"unset\", \"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n+        #     self.log.debug(\"{}\".format(mode))\n+        #     for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n+        #         self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=v, estimate_mode=mode,\n+        #             expect_error=(-3, \"Expected type number for conf_target, got {}\".format(k)))\n+\n+        # TODO: error should use sat/B instead of BTC/kB if sat/B is selected.\n+        # Test setting explicit fee rate just below the minimum.\n+        for unit, fee_rate in {\"sat/B\": 0.99999999, \"BTC/kB\": 0.00000999}.items():\n+            self.log.info(\"Explicit fee rate raises RPC error 'fee rate too low' if conf_target {} and estimate_mode {} are passed\".format(fee_rate, unit))\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=fee_rate, estimate_mode=unit,\n+                expect_error=(-4, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n+\n+        self.log.info(\"Explicit fee rate raises RPC error if estimate_mode is passed without a conf_target\")\n+        for unit, fee_rate in {\"sat/B\": 100, \"BTC/kB\": 0.001}.items():\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, estimate_mode=unit,\n+                expect_error=(-8, \"Selected estimate_mode {} requires a fee rate to be specified in conf_target\".format(unit)))\n \n         # TODO: Return hex if fee rate is below -maxmempool\n         # res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\", add_to_wallet=False)"
      }
    ]
  },
  {
    "sha": "778b9be40667876c705e586849ea9c9e44cf451c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzhiOWJlNDA2Njc4NzZjNzA1ZTU4Njg0OWVhOWM5ZTQ0Y2Y0NTFj",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-19T12:23:35Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-28T23:22:10Z"
      },
      "message": "wallet, rpc: fix send subtract_fee_from_outputs help",
      "tree": {
        "sha": "8831f3f425d717ffd8c927e6c578b89f188d5de2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8831f3f425d717ffd8c927e6c578b89f188d5de2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/778b9be40667876c705e586849ea9c9e44cf451c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+Z/SIACgkQT1chs9Dj\nkh0GIw//eEiazvRd2JAZOM9xh7anDUZQjBnZ1Bn3E8qa+0xhWgwBl+IYxnwSGejZ\ntYOGTl3k5abbA9OCEowF2VZIsCJ9j5mTglz8+Ib7cW4b12PzpEV0XbKmb7FG2xdl\nhb/CLML53IjZRH4S8z9asHtNe1M8rICiW8NDUp4Z5eZXw5bZps5dSik+RlUH76hd\nml2L+MSX0an0onxcYEjGOKoS6ceXWplFhoGxlhQBsCsxvu5KsUQMyJqxpUtsEuIf\nihWCjPHO5fJh+EsDGsuAg235qGAspQRUa7yPgDeDsa8RLo9y+Wu403ACD6egL3Hz\nGDmV2uiiw2M5Zm24CBv+AezkuCH9vY76Y+qc8TFBf2oAHS+DcYgi+OUgajuXkZFA\njpC8QrUvNC571tTx0agmOnNhShdasg1VWrNYnLGjqOtW7JkSxE/C+txgkfKb4bSp\nnCcN3n9nO6Pdsv5aKfzc05wbc8ag0vBLk141BgrHnH3hjNcvFzdPu+1SMzTt9V8P\nVxsyfCGYYQGv5ZTqzK8gDvVPflaU1/yfJ3aGn/Um49xthFEem1dkgfpFHj52ubJ1\nVI6nq7kYskB4TQ3FRAL/vNbHnac35A9u0NUzYHF984iAC1HSBYLJUGorhCnxjNhg\no35Vi5pPb5FR8iBjtdf2i2jv6YbiQB+opZCgg2yjUB0L3y2PMnE=\n=UgDm\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILRGOQvD3gtX3g9H6W6RKFQQUaImv/9oNIxZ3bg6CAHdCP/wEFKZO6Of+gqv\nJV+RwHIF7BQI8SDAwrqqqASaqd78xV5s9ybZfiLW94jUH5H3qyq1jkR6mgjxBF+Z\n/SPwCPEnLI9yXcOPAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BBmYwLyBSAKs/AoKmXXcUW7CPEgaQB00zmv\nlJkBgbKe9FIdHGyi/ADAM7kIYDvl4vE4J1oI8QRfmf0j8AioxvyxuPmRXACD3+MN\nLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEH/53xxf\numSSJHH18Te02IcI8QRfmf0l8AhjXzEMP4MrewCD3+MNLvkMjikoaHR0cHM6Ly9m\naW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQxwHFwcy+d/K/2Szwjwuo\nvQjxBF+Z/SPwCPlqOGGSEWC4AIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 8831f3f425d717ffd8c927e6c578b89f188d5de2\nparent 603c0050837ec65765208dd54dde354145fbe098\nauthor Jon Atack <jon@atack.com> 1603110215 +0200\ncommitter Jon Atack <jon@atack.com> 1603927330 +0100\n\nwallet, rpc: fix send subtract_fee_from_outputs help\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/778b9be40667876c705e586849ea9c9e44cf451c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/778b9be40667876c705e586849ea9c9e44cf451c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/778b9be40667876c705e586849ea9c9e44cf451c/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "603c0050837ec65765208dd54dde354145fbe098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/603c0050837ec65765208dd54dde354145fbe098",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/603c0050837ec65765208dd54dde354145fbe098"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "02d7fce94e176d8f3d77c72bfd55c3e1c9f2ad88",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/778b9be40667876c705e586849ea9c9e44cf451c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/778b9be40667876c705e586849ea9c9e44cf451c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=778b9be40667876c705e586849ea9c9e44cf451c",
        "patch": "@@ -4034,7 +4034,7 @@ static RPCHelpMan send()\n                     {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n                     {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n                     {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n-                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A JSON array of integers.\\n\"\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Outputs to subtract the fee from, specified as integer indices.\\n\"\n                     \"The fee will be equally deducted from the amount of each specified output.\\n\"\n                     \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                     \"If no outputs are specified here, the sender pays the fee.\","
      }
    ]
  },
  {
    "sha": "0be29000c011dec0722481dbebb159873da6fa54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmUyOTAwMGMwMTFkZWMwNzIyNDgxZGJlYmIxNTk4NzNkYTZmYTU0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-22T15:19:38Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-28T23:22:12Z"
      },
      "message": "rpc: update conf_target helps for correctness/consistency\n\nfor sendtoaddress, sendmany, send, fundrawtransaction, walletcreatefundedpsbt, bumpfee",
      "tree": {
        "sha": "0ec4e2563ec2763d4451adfcb0441d0c48031215",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ec4e2563ec2763d4451adfcb0441d0c48031215"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0be29000c011dec0722481dbebb159873da6fa54",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+Z/SQACgkQT1chs9Dj\nkh3cvA//Q1AWppizm81PzcAgszpMMVoNd0I/B1PntbOSwBfLmEo5MlLekEVdjPY2\n2KQfNFbVovtO2ax+YUEIm02BTBlR3t78/n3JEsZx6PbbW86W9AyRdd9ZhT5wM5Q5\nhomX58yRffS5FzeuZmDkktLx9Sed9JedeNfLnc54Q8/DfEwteBk07NSjFFEl+aGc\nXhjPzn0d8QmWZBJdOZUJBDf4sSHgwz4zjkDey8/I5qFJmCpzu6KANDXMO1fZYB+a\nctVTTP1D6JgRpXtwLzjEESmfUa6ws0U7tjNEjJk6exRLoB+zejl8AzCYmBoAWW5/\nYfcDaMyOKHV0ApoeMI1EAw3RL5n3hii9Q+wcKxNu2n/pXwMIJ+szAqU8/AV04sql\nO1qkcEgZl6M/qBA6Bd81rcJp2bMtTyAr/syGni9fw1EWwequEjd/+IdHcWMxG1mp\ncaRN5wvOV4eHu2ZiHsGf6j7dy6pblirkUhLJ++ZaSuLNNRm9B5JYhMYSTIrklE9N\n7bLkpIKwgqByJxEigfFfZaJiNibAV+2xeiI4QLBWNPuzeooSScVX4sHLP0QhHwmj\n0f+xAC5WgXf+BGcnx61XuKalaDuvW+OBcSE37f9yHxRQtYshPmGqYFy26R8BofLj\nu30wfBk+ex9DipTmSd6597bvSgBSTugPdI+4Sbblq+OcHtoUUw0=\n=tcTj\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFZX6ngknkh1a+7NUx+Vbwsa2DPcV+KSed3IFM75A65FCP/wEI/t19D0n56t\nuM84hrtXKUQI8QRfmf0n8AjEEyrWGbuPsACD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEJml94UfZPtLUt0aDQAAdHsI\n8QRfmf0l8Ag1ST1wcORo7gCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQxs/RqYXN5SEoS3kMfRQiAQjxBF+Z\n/SXwCEnkpdXgSSO5AIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BD7Xbv8FlrDBzNMBKfsI+YuCPEEX5n9JfAIJqct\nxbCdnMUAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 0ec4e2563ec2763d4451adfcb0441d0c48031215\nparent 778b9be40667876c705e586849ea9c9e44cf451c\nauthor Jon Atack <jon@atack.com> 1603379978 +0200\ncommitter Jon Atack <jon@atack.com> 1603927332 +0100\n\nrpc: update conf_target helps for correctness/consistency\n\nfor sendtoaddress, sendmany, send, fundrawtransaction, walletcreatefundedpsbt, bumpfee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0be29000c011dec0722481dbebb159873da6fa54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0be29000c011dec0722481dbebb159873da6fa54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0be29000c011dec0722481dbebb159873da6fa54/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "778b9be40667876c705e586849ea9c9e44cf451c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/778b9be40667876c705e586849ea9c9e44cf451c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/778b9be40667876c705e586849ea9c9e44cf451c"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 16,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d4255d9eac8380dd878c0e08cf32dbbac6828cc2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be29000c011dec0722481dbebb159873da6fa54/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be29000c011dec0722481dbebb159873da6fa54/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0be29000c011dec0722481dbebb159873da6fa54",
        "patch": "@@ -440,7 +440,8 @@ static RPCHelpMan sendtoaddress()\n                     {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* default */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n                                          \"The recipient will receive less bitcoins than you enter in the amount field.\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n+                                         \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n@@ -868,7 +869,8 @@ static RPCHelpMan sendmany()\n                         },\n                     },\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n+                                       \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, return extra infomration about the transaction.\"},\n@@ -3205,7 +3207,8 @@ static RPCHelpMan fundrawtransaction()\n                             },\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                                                           \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n+                                                          \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                         },\n@@ -3382,10 +3385,11 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n             {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n             {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                 {\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n-                    {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'conf_target'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \" per kB\\n\"\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n+                             \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'conf_target'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \"/kB.\\n\"\n                              \"Specify a fee rate instead of relying on the built-in fee estimator.\\n\"\n-                             \"Must be at least 0.0001 \" + CURRENCY_UNIT + \" per kB higher than the current transaction fee rate.\\n\"},\n+                             \"Must be at least 0.0001 \" + CURRENCY_UNIT + \"/kB higher than the current transaction fee rate.\\n\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n                              \"marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n                              \"be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n@@ -4008,7 +4012,8 @@ static RPCHelpMan send()\n                     },\n                 },\n             },\n-            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n+                    \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                         \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n             {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n@@ -4018,7 +4023,8 @@ static RPCHelpMan send()\n                     {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n                     {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n                     {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n+                            \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n@@ -4356,7 +4362,8 @@ static RPCHelpMan walletcreatefundedpsbt()\n                             },\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                                                           \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"fall back to wallet's confirmation target (txconfirmtarget)\", \"Confirmation target (in blocks)\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n+                                                          \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                             \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                         },"
      }
    ]
  }
]