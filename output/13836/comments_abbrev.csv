domob1812,2018-08-01T16:50:47Z,"I don't know if adding this new method is desired.  I would have found it useful from time to time, but mostly related to testing (and not production use).  For instance, it can be useful in combination with `invalidateblock` to prevent the transactions from invalidated blocks from getting remined (if that is desired).\n\nFeel free to close if you think this is not useful to have.",https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-409643589,409643589,
jonasschnelli,2018-08-02T06:51:48Z,"Yes. Why not.\nConcept ACK",https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-409825072,409825072,
MarcoFalke,2018-08-02T16:36:29Z,Should probably run a `CTxMemPool::check` after the clean and throw if the check fails?,https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-409989820,409989820,
domob1812,2018-08-02T17:02:45Z,"@MarcoFalke:  If we are worried that `CTxMemPool::clean` might leave the mempool in an inconsistent state, then we should add the `check` to `clean` (not the RPC invocation of it), right?  I don't think this is particularly necessary, but I can surely add it ""just in case"".  (But as I said, I think the proper place would be in `CTxMemPool::clean` and not the new RPC call.)\n\nEDIT: That said, it",https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-409998033,409998033,
domob1812,2018-08-02T17:15:56Z,"I've now added a call to `check` to the RPC (see my previous comment - while I think the check belongs semantically into `clear`, it requires to lock `cs_main` and I think it is better to do that in the RPC than in `clear`).\n\n`mapDeltas` is a good observation - this seems to not be caught by `check`, either.  I'll add a test for consistently between `mapDeltas` and `mapTx` there separately.",https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-410002224,410002224,
promag,2018-08-03T11:15:46Z,"@skeees made an excellent observation. Maybe add tests involving unconfirmed wallet transactions after clearing the mempool? Also try to include other RPC's related to the mempool, like `sendrawtransaction`, `abandontransaction` and `testmempoolaccept`?",https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-410223086,410223086,
domob1812,2018-08-03T19:07:37Z,"I've now split out the test into a new `mempool_clear.py` file, which I think fits better (especially if we want to have more extensive tests).  The test already has an unconfirmed wallet transaction that gets cleared from the mempool and then verifies that it is still unconfirmed after mining a block.\n\nI'm not sure what exactly you are thinking about with other mempool-related functions.  In ",https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-410348365,410348365,
promag,2018-08-12T01:01:30Z,"> I'm not sure what exactly you are thinking about with other mempool-related functions\n\nJust a way to say that their functionality is preserved after `clearmempool`. For instance, `sendrawtransaction tx -> clearmempool -> sendrawtransaction tx` should work?",https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-412311296,412311296,
sipa,2018-08-12T01:22:42Z,"What would this RPC be useful for? It seems pretty ill advised to expose it for production use, and for testing it can always be accomplished by restarting the node (and wiping mempool.dat).",https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-412311971,412311971,
DrahtBot,2018-08-12T01:43:21Z,<!--e57a25ab6845829454e8d69fc972939a-->No more conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-412312636,412312636,
domob1812,2018-08-12T09:28:15Z,"@sipa:  The situation where I would have found it useful from time to time is certainly testing (not production).  You are right that restarting with wiping `mempool.dat` can reproduce the same effect, but especially the latter is at least some hassle to do.  (And honestly, when I last wanted to do it, I played around with `-nopersistmempool` but wasn't able to get it working - I didn't think abou",https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-412330200,412330200,
promag,2018-08-18T18:14:12Z,@sipa correct me if I'm wrong (can't test ATM) but a new wallet transaction could be rejected and this would allow to add it?,https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-414076729,414076729,
sipa,2018-08-18T18:26:46Z,"@promag Yes, but other nodes will still reject it. Permitting is locally seems a bad idea in that case (and at the least a privacy leak).",https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-414077497,414077497,
laanwj,2018-09-11T07:05:39Z,">What would this RPC be useful for? It seems pretty ill advised to expose it for production use, and for testing it can always be accomplished by restarting the node (and wiping mempool.dat).\n\nI agree with @sipa here. This has much foot-shooting potential and, besides for a few developer corner cases, doesn't seem worth the maintenance and testing hassle.\n\n(in practice, methods such as thi",https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-420170011,420170011,
domob1812,2018-09-24T19:20:52Z,"Agreed - I also don't see much use besides testing, so perhaps it is safer not to add this generally.",https://github.com/bitcoin/bitcoin/pull/13836#issuecomment-424093544,424093544,
MarcoFalke,2018-08-01T16:57:34Z,"If it is only for testing, it shoulnd't be mentioned in the release notes?",https://github.com/bitcoin/bitcoin/pull/13836#discussion_r206956324,206956324,doc/release-notes.md
domob1812,2018-08-01T17:08:10Z,"I don't know about the exact policy and included it here to have them ""complete"".  But of course I'm happy to remove the mention if it is common to not include changes that are not meant (mainly) for end users.",https://github.com/bitcoin/bitcoin/pull/13836#discussion_r206959831,206959831,doc/release-notes.md
jamesob,2018-08-01T17:09:15Z,Could return the number of evicted txns to be more useful.,https://github.com/bitcoin/bitcoin/pull/13836#discussion_r206960137,206960137,src/rpc/blockchain.cpp
jamesob,2018-08-01T17:13:12Z,Are we missing some lock acquisitions here (e.g. `mempool.cs`)?,https://github.com/bitcoin/bitcoin/pull/13836#discussion_r206961387,206961387,src/rpc/blockchain.cpp
promag,2018-08-01T17:19:20Z,Then return an object which can have more keys in the future.,https://github.com/bitcoin/bitcoin/pull/13836#discussion_r206963500,206963500,src/rpc/blockchain.cpp
domob1812,2018-08-01T17:30:36Z,"I thought so first myself, but `CTxMempool::clear` explicitly locks for you.",https://github.com/bitcoin/bitcoin/pull/13836#discussion_r206967000,206967000,src/rpc/blockchain.cpp
domob1812,2018-08-01T17:31:15Z,"Yes, that makes sense.  If you generally think having this method is useful, I'll add a useful return value to it (e.g. starting with the number of evicated tx).",https://github.com/bitcoin/bitcoin/pull/13836#discussion_r206967204,206967204,src/rpc/blockchain.cpp
jamesob,2018-08-01T18:23:36Z,"Oh right, my mistake.",https://github.com/bitcoin/bitcoin/pull/13836#discussion_r206983654,206983654,src/rpc/blockchain.cpp
domob1812,2018-08-02T09:04:24Z,Removed.,https://github.com/bitcoin/bitcoin/pull/13836#discussion_r207152453,207152453,doc/release-notes.md
domob1812,2018-08-02T09:04:47Z,"Changed the RPC to return a JSON object, with `nTx` holding the number of evicted transactions.",https://github.com/bitcoin/bitcoin/pull/13836#discussion_r207152573,207152573,src/rpc/blockchain.cpp
promag,2018-08-02T12:43:00Z,Use same key as?https://github.com/bitcoin/bitcoin/blob/990e182587999dba33f2a8172cc39d4a20d2e207/src/rpc/blockchain.cpp#L1423,https://github.com/bitcoin/bitcoin/pull/13836#discussion_r207210950,207210950,src/rpc/blockchain.cpp
domob1812,2018-08-02T15:23:07Z,"Yeah, that makes sense.  (`nTx` was based on `getblock`, but `getmempoolinfo` is of course more relevant in this context.)  Will update the commit accordingly.",https://github.com/bitcoin/bitcoin/pull/13836#discussion_r207269166,207269166,src/rpc/blockchain.cpp
skeees,2018-08-02T16:10:25Z,maybe call this `transactions_removed` or something more informative,https://github.com/bitcoin/bitcoin/pull/13836#discussion_r207286083,207286083,src/rpc/blockchain.cpp
skeees,2018-08-02T16:11:02Z,is there a future safety benefit to calling the toplevel `mempool.clear()` here? ,https://github.com/bitcoin/bitcoin/pull/13836#discussion_r207286291,207286291,src/rpc/blockchain.cpp
domob1812,2018-08-02T17:13:16Z,"Changed.  `size` is consistent with `getmempoolinfo`, but in that context ""size"" is clearly more descriptive than for `clearmempool`.  I agree that here `transactions_removed` is a better name.",https://github.com/bitcoin/bitcoin/pull/13836#discussion_r207305333,207305333,src/rpc/blockchain.cpp
domob1812,2018-08-02T17:13:51Z,Why not - changed to `clear`.  (Especially since `_clear` does not `AssertLockHeld(cs)`.),https://github.com/bitcoin/bitcoin/pull/13836#discussion_r207305504,207305504,src/rpc/blockchain.cpp
luke-jr,2018-08-26T03:15:00Z,`mapDeltas` probably *shouldn't* be cleared...?,https://github.com/bitcoin/bitcoin/pull/13836#discussion_r212813785,212813785,src/txmempool.cpp
luke-jr,2018-08-26T03:15:49Z,Deltas aren't necessarily in the pool (needed to prioritise ones that would be rejected otherwise).,https://github.com/bitcoin/bitcoin/pull/13836#discussion_r212813795,212813795,src/txmempool.cpp
