sipa,2015-05-12T09:19:31Z,"We should do something like this, but it won't help without also having\nsome means of advertizing that we can relay blocks, as right now, nobody\nshould even be connecting to pruned nodes (which advertize as spv nodes).\n",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-101207642,101207642,
cozz,2015-05-12T09:29:35Z,"@sipa Can you point me to the code, where we dont connect to pruned nodes, please?\nBecause I assumed we dont distinguish on service-bits in the connection logic.\n",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-101211657,101211657,
sipa,2015-05-12T10:08:42Z,"Unsure, addnode may work, but automatic discovery shouldn't.\n",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-101221514,101221514,
cozz,2015-05-12T10:21:02Z,"So you dont know the code? Didnt you write the address-manager?\n\nWell, I will go bother and test now, if a node without NODE_NETWORK announces his ip, and whether or not we add it and connect to it with the address-manager. Because exactly that is, what I was assuming.\n",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-101224062,101224062,
cozz,2015-05-12T13:25:08Z,"So I dont know how to test this NODE_NETWORK thing.\n\nThe address-manager does not care about nServices, so from my understanding, there is no difference between NODE_NETWORK-nodes and non-NODE_NETWORK-nodes.\nWe make a difference after we have connected in the version message, but not before.\n\nI any case this pull request does not hurt. Block relay is highest priority, and I believe we really ",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-101275210,101275210,
petertodd,2015-05-12T14:39:42Z,"ACK concept.\n\nI don't think this pull-req should be gated on whether or not we advertise that other nodes should connect to us; relaying is always valuable to ensure the P2P network is well connected. Note how if you start a node with -listen=0 you'll never have anyone connect to you, yet we still relay blocks. The same logic should apply here.\n\nWhat I don't get is why make this dependent on t",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-101303688,101303688,
cozz,2015-05-12T16:16:47Z,"@petertodd The code I added only cares about the height of the other node, for both nStartingHeight and pindexBestKnownBlock. The reason is that this avoids, that the other node asks us for blocks we dont have.  If we know, that the other has at least what we have (minus 288), nothing can go wrong. \nThe code already is executed for (!fInitialDownload), which is based on our height. So there must ",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-101335936,101335936,
petertodd,2015-05-12T16:41:00Z,"@cozz Whoops, yeah, brainfart on my part. That exception is reasonable, although the fact we need it is annoying. :( Pity that we still deal with stalling peers so badly.\n\nDefinitely agree re: the total disabling. Heck, I even argue that SPV nodes should be forwarding blocks.\n",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-101343867,101343867,
sdaftuar,2015-05-12T19:17:18Z,"I made a couple code comments, but in reviewing this I noticed another issue.\n\nI think pruning nodes should respond to a ""getblocks"" message differently than non-pruning nodes, so that they don't ever generate an inv for a block they don't have on disk.  I haven't generated this scenario in a test yet, but I believe it's possible to be in a situation where an 0.9 (or earlier) node could send a g",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-101392030,101392030,
sipa,2015-05-12T19:34:38Z,"@sdaftuar Sounds very reasonable to me. 0.8 and 0.9 should never fetch\nanything that was not inv'ed, as far as I know.\n\nFor 0.10, we should only inv in case the last common ancestor of\npindexLastCommonBlock and the block being inved is not pruned (otherwise we\nmay trigger an async fetch that crosses pruned block ranges). That is\nprobably a safe mechanism in any case.Sorry if the code already",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-101395228,101395228,
cozz,2015-05-12T22:11:52Z,"Fixed nits.\n\nSo I believe this pruning feature might be better to be declared as ""experimental"" for 0.11, if there is such limited usefulness and potential negative side effects. For example besides block relay, if a lot of nodes decide to use this feature, then the address-manager gets ""spammed"" with pruned nodes.\nNon-pruned nodes should have priority over pruned ones, as for address-relay and",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-101437734,101437734,
sipa,2015-05-13T00:26:22Z,"Hmm, @sdaftuar mentions that 0.10 does not download from fClient nodes. That's not entirely true - the direct fetching loop (in immediate response to an inv) may fetch from anyone who sends an inv, but the asynchronous fetching won't. That means that even with this code, 0.10 and up will not be able to retrieve a reorg from a pruned peer.\n",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-101467065,101467065,
sdaftuar,2015-05-13T00:48:37Z,"@sipa Sorry if I was unclear but yes that was what I was referring to when I said 0.10 wouldn't download non-inv'ed blocks except from NODE_NETWORK peers.  I agree that it seems unfortunate that 0.10 clients specifically wouldn't be able to retrieve a reorg from a pruned peer (while 0.8/0.9 would, via their getblocks logic).  Perhaps we should consider #5307 with some small cap on the number of bl",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-101470810,101470810,
sdaftuar,2015-05-14T13:33:54Z,"EDIT: the suggestion I posted in this comment doesn't actually work; inv's received for blocks that are already in mapBlockIndex don't get directly fetched, so this approach wouldn't help 0.10/0.11 nodes receive reorg's after all.  #5307 may still be an option if we think this is important...\n\n~~Another idea: perhaps pruning nodes could behave differently when they're responding to a ""getheaders",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-102037520,102037520,
laanwj,2015-05-16T08:15:55Z,Continued in #6148\n,https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-102586701,102586701,
laanwj,2015-05-16T08:17:00Z,"OH misundertood, #6148 is not based on this, but is a different implementation reopening.\n",https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-102586735,102586735,
cozz,2015-05-16T11:40:39Z,Closing for #6148 \n\nWe only announce what we have and not delete that soon anyway. And the asynchronous fetching is not called for pruned nodes. So what I did here is not even necessary.\n,https://github.com/bitcoin/bitcoin/pull/6122#issuecomment-102614040,102614040,
sdaftuar,2015-05-12T18:23:30Z,Comment above needs to be updated.\n,https://github.com/bitcoin/bitcoin/pull/6122#discussion_r30164434,30164434,src/main.cpp
sdaftuar,2015-05-12T18:23:31Z,I believe you need to hold cs_main for this.\n,https://github.com/bitcoin/bitcoin/pull/6122#discussion_r30164435,30164435,src/main.cpp
