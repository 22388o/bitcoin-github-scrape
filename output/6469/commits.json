[
  {
    "sha": "a7d17982187d506fe271f8fdcc42c0f5ef814c50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2QxNzk4MjE4N2Q1MDZmZTI3MWY4ZmRjYzQyYzBmNWVmODE0YzUw",
    "commit": {
      "author": {
        "name": "lsqtzj",
        "email": "lsqtzj@qq.com",
        "date": "2015-07-23T16:53:48Z"
      },
      "committer": {
        "name": "lsqtzj",
        "email": "lsqtzj@qq.com",
        "date": "2015-07-23T16:53:48Z"
      },
      "message": "Merge pull request #1 from bitcoin/master\n\nupdate",
      "tree": {
        "sha": "19021d0c8d5bf2cd672b4e127e93e489606e98e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19021d0c8d5bf2cd672b4e127e93e489606e98e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7d17982187d506fe271f8fdcc42c0f5ef814c50",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d17982187d506fe271f8fdcc42c0f5ef814c50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7d17982187d506fe271f8fdcc42c0f5ef814c50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d17982187d506fe271f8fdcc42c0f5ef814c50/comments",
    "author": {
      "login": "lsqtzj",
      "id": 4635861,
      "node_id": "MDQ6VXNlcjQ2MzU4NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4635861?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsqtzj",
      "html_url": "https://github.com/lsqtzj",
      "followers_url": "https://api.github.com/users/lsqtzj/followers",
      "following_url": "https://api.github.com/users/lsqtzj/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsqtzj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsqtzj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsqtzj/subscriptions",
      "organizations_url": "https://api.github.com/users/lsqtzj/orgs",
      "repos_url": "https://api.github.com/users/lsqtzj/repos",
      "events_url": "https://api.github.com/users/lsqtzj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsqtzj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lsqtzj",
      "id": 4635861,
      "node_id": "MDQ6VXNlcjQ2MzU4NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4635861?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsqtzj",
      "html_url": "https://github.com/lsqtzj",
      "followers_url": "https://api.github.com/users/lsqtzj/followers",
      "following_url": "https://api.github.com/users/lsqtzj/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsqtzj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsqtzj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsqtzj/subscriptions",
      "organizations_url": "https://api.github.com/users/lsqtzj/orgs",
      "repos_url": "https://api.github.com/users/lsqtzj/repos",
      "events_url": "https://api.github.com/users/lsqtzj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsqtzj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab0ec6790355473e96176ec3c2c2b1564ddb296d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab0ec6790355473e96176ec3c2c2b1564ddb296d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab0ec6790355473e96176ec3c2c2b1564ddb296d"
      },
      {
        "sha": "d2464dfee928cdd4194516e9bc8b541c22972ab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2464dfee928cdd4194516e9bc8b541c22972ab9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2464dfee928cdd4194516e9bc8b541c22972ab9"
      }
    ],
    "stats": {
      "total": 8153,
      "additions": 5836,
      "deletions": 2317
    },
    "files": [
      {
        "sha": "ab68d8fa6d96269d630f4771bb7757060b558c9f",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -202,6 +202,8 @@ check-local:\n \t@qa/pull-tester/run-bitcoind-for-test.sh $(JAVA) -jar $(JAVA_COMPARISON_TOOL) qa/tmp/compTool $(COMPARISON_TOOL_REORG_TESTS) 2>&1\n endif\n \n+dist_noinst_SCRIPTS = autogen.sh\n+\n EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.sh qa/pull-tester/run-bitcoin-cli qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)"
      },
      {
        "sha": "594d98c39f9c6112090c5b30052db4cbfff798ab",
        "filename": "README.md",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -34,7 +34,7 @@ development team members simply pulls it.\n \n If it is a *more complicated or potentially controversial* change, then the patch\n submitter will be asked to start a discussion (if they haven't already) on the\n-[mailing list](http://sourceforge.net/mailarchive/forum.php?forum_name=bitcoin-development).\n+[mailing list](https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev)\n \n The patch will be accepted if there is broad consensus that it is a good thing.\n Developers should expect to rework and resubmit patches if the code doesn't\n@@ -58,6 +58,10 @@ lots of money.\n Developers are strongly encouraged to write unit tests for new code, and to\n submit new unit tests for old code. Unit tests can be compiled and run (assuming they weren't disabled in configure) with: `make check`\n \n+There are also regression and integration tests of the RPC interface, written\n+in Python, that are run automatically on the build server.\n+These tests can be run with: `qa/pull-tester/rpc-tests.sh`\n+\n Every pull request is built for both Windows and Linux on a dedicated server,\n and unit and sanity tests are automatically run. The binaries produced may be\n used for manual QA testing \u2014 a link to them will appear in a comment on the"
      },
      {
        "sha": "7f90b5f395cb8948bbe3a13d801cc3b9718e9174",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -147,12 +147,13 @@ AC_ARG_ENABLE([debug],\n     [enable_debug=no])\n \n if test \"x$enable_debug\" = xyes; then\n+    CPPFLAGS=\"$CPPFLAGS -DDEBUG -DDEBUG_LOCKORDER\"\n     if test \"x$GCC\" = xyes; then\n-        CFLAGS=\"-g3 -O0 -DDEBUG\"\n+        CFLAGS=\"$CFLAGS -g3 -O0\"\n     fi\n     \n     if test \"x$GXX\" = xyes; then\n-        CXXFLAGS=\"-g3 -O0 -DDEBUG\"\n+        CXXFLAGS=\"$CXXFLAGS -g3 -O0\"\n     fi\n fi \n \n@@ -162,7 +163,7 @@ fi\n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter\"\n fi\n-CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n+CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n   [AS_HELP_STRING([--with-utils],"
      },
      {
        "sha": "55ebcaab425243bdf61d5566a29dfd5e745213b6",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -2,8 +2,7 @@ Format: http://svn.debian.org/wsvn/dep/web/deps/dep5.mdwn?rev=174\n Upstream-Name: Bitcoin\n Upstream-Contact: Satoshi Nakamoto <satoshin@gmx.com>\n  irc://#bitcoin@freenode.net\n-Source: http://sourceforge.net/projects/bitcoin/files/\n- https://github.com/bitcoin/bitcoin\n+Source: https://github.com/bitcoin/bitcoin\n \n Files: *\n Copyright: 2009-2012, Bitcoin Core Developers"
      },
      {
        "sha": "36d7b01264e914cfa9b18a35e53478244df8f0bb",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -8,10 +8,11 @@ packages:\n - \"libc6:i386\"\n - \"faketime\"\n reference_datetime: \"2015-06-01 00:00:00\"\n-remotes: []\n+remotes:\n+- \"url\": \"https://github.com/bitcoin/bitcoin-detached-sigs.git\"\n+  \"dir\": \"signature\"\n files:\n - \"bitcoin-osx-unsigned.tar.gz\"\n-- \"signature.tar.gz\"\n script: |\n   WRAP_DIR=$HOME/wrapped\n   mkdir -p ${WRAP_DIR}\n@@ -32,6 +33,6 @@ script: |\n   SIGNED=bitcoin-osx-signed.dmg\n \n   tar -xf ${UNSIGNED}\n-  ./detached-sig-apply.sh ${UNSIGNED} signature.tar.gz\n+  ./detached-sig-apply.sh ${UNSIGNED} signature/osx\n   ${WRAP_DIR}/genisoimage -no-cache-inodes -D -l -probe -V \"Bitcoin-Core\" -no-pad -r -apple -o uncompressed.dmg signed-app\n   ${WRAP_DIR}/dmg dmg uncompressed.dmg ${OUTDIR}/${SIGNED}"
      },
      {
        "sha": "2a73050e0e624b98c7df76e70f617d73f2848422",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "added",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -0,0 +1,39 @@\n+---\n+name: \"bitcoin-win-signer\"\n+suites:\n+- \"precise\"\n+architectures:\n+- \"amd64\"\n+packages:\n+- \"libssl-dev\"\n+- \"autoconf\"\n+reference_datetime: \"2015-06-01 00:00:00\"\n+remotes:\n+- \"url\": \"https://github.com/bitcoin/bitcoin-detached-sigs.git\"\n+  \"dir\": \"signature\"\n+files:\n+- \"osslsigncode-1.7.1.tar.gz\"\n+- \"osslsigncode-Backports-to-1.7.1.patch\"\n+- \"bitcoin-win-unsigned.tar.gz\"\n+script: |\n+  BUILD_DIR=`pwd`\n+  SIGDIR=${BUILD_DIR}/signature/win\n+  UNSIGNED_DIR=${BUILD_DIR}/unsigned\n+\n+  echo \"f9a8cdb38b9c309326764ebc937cba1523a3a751a7ab05df3ecc99d18ae466c9  osslsigncode-1.7.1.tar.gz\" | sha256sum -c\n+  echo \"a8c4e9cafba922f89de0df1f2152e7be286aba73f78505169bc351a7938dd911  osslsigncode-Backports-to-1.7.1.patch\" | sha256sum -c\n+\n+  mkdir -p ${UNSIGNED_DIR}\n+  tar -C ${UNSIGNED_DIR} -xf bitcoin-win-unsigned.tar.gz\n+\n+  tar xf osslsigncode-1.7.1.tar.gz\n+  cd osslsigncode-1.7.1\n+  patch -p1 < ${BUILD_DIR}/osslsigncode-Backports-to-1.7.1.patch\n+\n+  ./configure --without-gsf --without-curl --disable-dependency-tracking\n+  make\n+  find ${UNSIGNED_DIR} -name \"*-unsigned.exe\" | while read i; do\n+    INFILE=\"`basename \"${i}\"`\"\n+    OUTFILE=\"`echo \"${INFILE}\" | sed s/-unsigned//`\"\n+    ./osslsigncode attach-signature -in \"${i}\" -out \"${OUTDIR}/${OUTFILE}\" -sigin \"${SIGDIR}/${INFILE}.pem\"\n+  done"
      },
      {
        "sha": "966820ec510641705e8533ac322a66acf41b7e1b",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -84,6 +84,8 @@ script: |\n   pushd temp\n   tar xf ../$SOURCEDIST\n   find bitcoin-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n+  mkdir -p $OUTDIR/src\n+  cp ../$SOURCEDIST $OUTDIR/src\n   popd\n \n   ORIGPATH=\"$PATH\"\n@@ -109,7 +111,8 @@ script: |\n     find ${DISTNAME} -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n     cd ../..\n   done\n-  mkdir -p $OUTDIR/src\n-  mv $SOURCEDIST $OUTDIR/src\n+  cd $OUTDIR\n+  rename 's/-setup\\.exe$/-setup-unsigned.exe/' *-setup.exe\n+  find . -name \"*-setup-unsigned.exe\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz\n   mv ${OUTDIR}/${DISTNAME}-x86_64-*.zip ${OUTDIR}/${DISTNAME}-win64.zip\n   mv ${OUTDIR}/${DISTNAME}-i686-*.zip ${OUTDIR}/${DISTNAME}-win32.zip"
      },
      {
        "sha": "928a74b3155da22877d1b6ad32fa2a7cb745e0ba",
        "filename": "contrib/gitian-downloader/cdecker-key.pgp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-downloader/cdecker-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-downloader/cdecker-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/cdecker-key.pgp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50"
      },
      {
        "sha": "71a42e514881bc6383531ea2c82c93998453245e",
        "filename": "contrib/gitian-downloader/centaur1-key.pgp",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-downloader/centaur1-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-downloader/centaur1-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/centaur1-key.pgp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -0,0 +1,30 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: GnuPG v1.4.12 (GNU/Linux)\n+\n+mQENBFTjy20BCAC7q/tpPQ9tdEALpDqe8kpVAT5ysOJDLDeFEE1J5O8NuDFuibiN\n+XYkb2nAt4Vdr23in9z0LAiTSgr7znndnab/rOSn6pXbXQfLTHrSnAeClTHVQVPSq\n+m5kNg1vWvNxFtIpZ/fGsc6LLmIHxdgeLn+NOpvNx7RzF/N5ctX51vMxMUeDq3daZ\n+tLneJVRj5tXHRJcjW62cyiNFasYAZ3JC8wjwzr0SOndc7kygbEVCTWNkTAGd1Lax\n+KSJW6TjhBPK7j+RljS5nfx/Tf+OG4AoA7/53593YL7Shfx8rwWVIeF4nS6efFnuf\n+eIj+aS5haGyFvNgw8DE7QUCrPiUxeA8wuXu7ABEBAAG0H2NlbnRhdXIgPGNlbnRh\n+dXJAcGhvbmVib29rLmNvbT6JATgEEwECACIFAlTjy20CGwMGCwkIBwMCBhUIAgkK\n+CwQWAgMBAh4BAheAAAoJEP+V+qlxaXQF8r4IAKnE8D9AOTdM/YvYxpCeI6ndEUUs\n+8NcotpbIBJ67vr1Dsot7Ee0PrmIYOiInA+T81lPUDecJYrnemVefhquiyJ5VJ4/d\n+z2zUKBfxjeOsj/PHgcowVxMco8fNEWQa2fZX6X8RVADIsUnIIwpRFVUcbssK/3xJ\n+k46vjWwYNQywht/ZgFBesOgywyz5GozmwrK6TixJxKk8M69GFz2fHhJjp1bxDZuk\n+Rs3YmWeOcCasoJ6GbvIboKQSPHGyEOCqIuiBL63YMa0n1FU0ooDteNZ04eRinIhc\n+fo9JC66fQrUFn8CmmRTtdZOrZ/efYjQtfLAunCkzSM3p6DE9u4Y7d8E5Ar65AQ0E\n+VOPLbQEIANhxtouZuQmw+k89toBWXw75s+csxKHKZuhw8QntaFyFYq3IOnIeV1sK\n+PRENkWsqDInjEM8k9eZ6pnS11EQ1rrFffss+mprTbL3I4S489tJETYZKHrmmox7h\n+ustRi5eXBEmGeKW0mqpb/9r4okpTaIfs+EJ4C9jj0ghWkqU0acyzanJiUY/0R46F\n+vPfGfHnhZ5TAl3eiL0H2JkF6taG8K1XOLemahdZHE9wJh0ZFWnDDkA1l6j2rtYga\n+jEi/ucOp5GkmumxbFiVgponDBqBpsscRrCV6SbZs9gz3dQNgqe5A3CKGZRuVCY6s\n+djRJelgqCF5+dV0fAT0oF3C/3E5KAgcAEQEAAYkBHwQYAQIACQUCVOPLbQIbDAAK\n+CRD/lfqpcWl0BUSxCACjEFwQSHcfZINWD+KdNMayxyHQlBwsEDX+xQkgnn+/Q3hW\n+9VI3SSSfFV3ustlUa3IaNHwuWzsrSqG6mLG47LAQ6vPAWVh723gVCpyJf42Oms/e\n+qeyn0f/PT/6RuNMXQeHbfddmRp4PFjyKOms5Bmf3oi4t4JSvOS4yABBBKzhDQYC9\n+e+qv6Y1sDYpSiCxstQLzIHKiB5bfZ8Szfk09EyyLdqLGkiB0MFhHoXWwQxKiLVc+\n+xNFj2a/jw0rQVgN5DZgHBWU5WqvS5CWIczi+2S9MFI26iBhCn3urZToaaQ/DObqC\n+qmekFrJ/GOj5vB1Mm014lWjG2X3EovLZ1XkgWI7W\n+=vtNZ\n+-----END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "c0048d336e5e365da5d91f9a47db453d9614922d",
        "filename": "contrib/gitian-downloader/linux-download-config",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-downloader/linux-download-config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-downloader/linux-download-config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/linux-download-config?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -3,7 +3,7 @@ name: bitcoin\n urls:\n - http://bitcoin.org/bitcoin-latest-linux-gitian.zip\n rss:\n-- url: http://sourceforge.net/api/file/index/project-id/244765/mtime/desc/limit/100/rss\n+- url: \n   xpath: //item/link/text()\n   pattern: bitcoin-\\d+.\\d+.\\d+-linux-gitian.zip\n signers:"
      },
      {
        "sha": "0ad3bdd4f3e3faf0e8c20fa5259bf3660a395782",
        "filename": "contrib/gitian-downloader/win32-download-config",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-downloader/win32-download-config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-downloader/win32-download-config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/win32-download-config?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -3,7 +3,7 @@ name: bitcoin\n urls:\n - http://bitcoin.org/bitcoin-latest-win32-gitian.zip\n rss:\n-- url: http://sourceforge.net/api/file/index/project-id/244765/mtime/desc/limit/100/rss\n+- url: \n   xpath: //item/link/text()\n   pattern: bitcoin-\\d+.\\d+.\\d+-win32-gitian.zip\n signers:"
      },
      {
        "sha": "eda1a96fb4fcbaf3a61cafcd80368b5104ec0f56",
        "filename": "contrib/init/bitcoind.openrc",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/init/bitcoind.openrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/init/bitcoind.openrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrc?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -32,7 +32,11 @@ required_files=\"${BITCOIND_CONFIGFILE}\"\n start_stop_daemon_args=\"-u ${BITCOIND_USER} \\\n \t\t\t-N ${BITCOIND_NICE} -w 2000\"\n pidfile=\"${BITCOIND_PIDFILE}\"\n-retry=60\n+\n+# The retry schedule to use when stopping the daemon. Could be either\n+# a timeout in seconds or multiple signal/timeout pairs (like\n+# \"SIGKILL/180 SIGTERM/300\")\n+retry=\"${BITCOIND_SIGTERM_TIMEOUT}\"\n \n depend() {\n \tneed localmount net"
      },
      {
        "sha": "0cbff6d30d2d66bbafaaf2205f4dd7609b2113a1",
        "filename": "contrib/init/bitcoind.openrcconf",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/init/bitcoind.openrcconf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/init/bitcoind.openrcconf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrcconf?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -25,3 +25,9 @@\n # Additional options (avoid -conf and -datadir, use flags above)\n BITCOIND_OPTS=\"-disablewallet\"\n \n+# The timeout in seconds OpenRC will wait for bitcoind to terminate\n+# after a SIGTERM has been raised.\n+# Note that this will be mapped as argument to start-stop-daemon's\n+# '--retry' option, which means you can specify a retry schedule\n+# here. For more information see man 8 start-stop-daemon.\n+BITCOIND_SIGTERM_TIMEOUT=60"
      },
      {
        "sha": "06f278f3b3c710ed237ee81b1357970b583bd457",
        "filename": "contrib/linearize/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/linearize/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/linearize/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/README.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -3,7 +3,7 @@ Construct a linear, no-fork, best version of the blockchain.\n \n ## Step 1: Download hash list\n \n-   $ ./linearize-hashes.py linearize.cfg > hashlist.txt\n+    $ ./linearize-hashes.py linearize.cfg > hashlist.txt\n \n Required configuration file settings for linearize-hashes:\n * RPC: rpcuser, rpcpassword\n@@ -14,7 +14,7 @@ Optional config file setting for linearize-hashes:\n \n ## Step 2: Copy local block data\n \n-   $ ./linearize-data.py linearize.cfg\n+    $ ./linearize-data.py linearize.cfg\n \n Required configuration file settings:\n * \"input\": bitcoind blocks/ directory containing blkNNNNN.dat\n@@ -26,7 +26,7 @@ output.\n \n Optional config file setting for linearize-data:\n * \"netmagic\": network magic number\n-* \"max_out_sz\": maximum output file size (default 1000*1000*1000)\n+* \"max_out_sz\": maximum output file size (default `1000*1000*1000`)\n * \"split_timestamp\": Split files when a new month is first seen, in addition to\n reaching a maximum file size.\n * \"file_timestamp\": Set each file's last-modified time to that of the"
      },
      {
        "sha": "0f6fde2a6e05216873f29cb8ec47d416f5c484d3",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -12,6 +12,7 @@\n import struct\n import re\n import os\n+import os.path\n import base64\n import httplib\n import sys\n@@ -115,19 +116,20 @@ def __init__(self, settings, blkindex, blkmap):\n \t\t\tself.setFileTime = True\n \t\tif settings['split_timestamp'] != 0:\n \t\t\tself.timestampSplit = True\n-        # Extents and cache for out-of-order blocks\n+\t\t# Extents and cache for out-of-order blocks\n \t\tself.blockExtents = {}\n \t\tself.outOfOrderData = {}\n \t\tself.outOfOrderSize = 0 # running total size for items in outOfOrderData\n \n \tdef writeBlock(self, inhdr, blk_hdr, rawblock):\n-\t\tif not self.fileOutput and ((self.outsz + self.inLen) > self.maxOutSz):\n+\t\tblockSizeOnDisk = len(inhdr) + len(blk_hdr) + len(rawblock)\n+\t\tif not self.fileOutput and ((self.outsz + blockSizeOnDisk) > self.maxOutSz):\n \t\t\tself.outF.close()\n \t\t\tif self.setFileTime:\n \t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n \t\t\tself.outF = None\n \t\t\tself.outFname = None\n-\t\t\tself.outFn = outFn + 1\n+\t\t\tself.outFn = self.outFn + 1\n \t\t\tself.outsz = 0\n \n \t\t(blkDate, blkTS) = get_blk_dt(blk_hdr)\n@@ -147,7 +149,7 @@ def writeBlock(self, inhdr, blk_hdr, rawblock):\n \t\t\tif self.fileOutput:\n \t\t\t\toutFname = self.settings['output_file']\n \t\t\telse:\n-\t\t\t\toutFname = \"%s/blk%05d.dat\" % (self.settings['output'], outFn)\n+\t\t\t\toutFname = os.path.join(self.settings['output'], \"blk%05d.dat\" % self.outFn)\n \t\t\tprint(\"Output file \" + outFname)\n \t\t\tself.outF = open(outFname, \"wb\")\n \n@@ -165,7 +167,7 @@ def writeBlock(self, inhdr, blk_hdr, rawblock):\n \t\t\t\t\t(self.blkCountIn, self.blkCountOut, len(self.blkindex), 100.0 * self.blkCountOut / len(self.blkindex)))\n \n \tdef inFileName(self, fn):\n-\t\treturn \"%s/blk%05d.dat\" % (self.settings['input'], fn)\n+\t\treturn os.path.join(self.settings['input'], \"blk%05d.dat\" % fn)\n \n \tdef fetchBlock(self, extent):\n \t\t'''Fetch block contents from disk given extents'''"
      },
      {
        "sha": "781fe315edab5046fca0ce5dc59090cfe44760ae",
        "filename": "contrib/macdeploy/detached-sig-apply.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/macdeploy/detached-sig-apply.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/macdeploy/detached-sig-apply.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-apply.sh?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -20,7 +20,7 @@ fi\n \n rm -rf ${TEMPDIR} && mkdir -p ${TEMPDIR}\n tar -C ${TEMPDIR} -xf ${UNSIGNED}\n-tar -C ${TEMPDIR} -xf ${SIGNATURE}\n+cp -rf \"${SIGNATURE}\"/* ${TEMPDIR}\n \n if [ -z \"${PAGESTUFF}\" ]; then\n   PAGESTUFF=${TEMPDIR}/pagestuff"
      },
      {
        "sha": "89a2da32f7a1c9ea34bc4798dbe642c5f2901013",
        "filename": "contrib/macdeploy/detached-sig-create.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/macdeploy/detached-sig-create.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/macdeploy/detached-sig-create.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-create.sh?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -7,6 +7,7 @@ CODESIGN=codesign\n TEMPDIR=sign.temp\n TEMPLIST=${TEMPDIR}/signatures.txt\n OUT=signature.tar.gz\n+OUTROOT=osx\n \n if [ ! -n \"$1\" ]; then\n   echo \"usage: $0 <codesign args>\"\n@@ -23,7 +24,7 @@ grep -v CodeResources < \"${TEMPLIST}\" | while read i; do\n   TARGETFILE=\"${BUNDLE}/`echo \"${i}\" | sed \"s|.*${BUNDLE}/||\"`\"\n   SIZE=`pagestuff \"$i\" -p | tail -2 | grep size | sed 's/[^0-9]*//g'`\n   OFFSET=`pagestuff \"$i\" -p | tail -2 | grep offset | sed 's/[^0-9]*//g'`\n-  SIGNFILE=\"${TEMPDIR}/${TARGETFILE}.sign\"\n+  SIGNFILE=\"${TEMPDIR}/${OUTROOT}/${TARGETFILE}.sign\"\n   DIRNAME=\"`dirname \"${SIGNFILE}\"`\"\n   mkdir -p \"${DIRNAME}\"\n   echo \"Adding detached signature for: ${TARGETFILE}. Size: ${SIZE}. Offset: ${OFFSET}\"\n@@ -32,7 +33,7 @@ done\n \n grep CodeResources < \"${TEMPLIST}\" | while read i; do\n   TARGETFILE=\"${BUNDLE}/`echo \"${i}\" | sed \"s|.*${BUNDLE}/||\"`\"\n-  RESOURCE=\"${TEMPDIR}/${TARGETFILE}\"\n+  RESOURCE=\"${TEMPDIR}/${OUTROOT}/${TARGETFILE}\"\n   DIRNAME=\"`dirname \"${RESOURCE}\"`\"\n   mkdir -p \"${DIRNAME}\"\n   echo \"Adding resource for: \"${TARGETFILE}\"\""
      },
      {
        "sha": "63647fa11aac256cbaf3a3b374cc527e92dcfcca",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,7 +1,7 @@\n ### Seeds ###\n \n Utility to generate the seeds.txt list that is compiled into the client\n-(see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and [share/seeds](/share/seeds)).\n+(see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and other utilities in [contrib/seeds](/contrib/seeds)).\n \n The 512 seeds compiled into the 0.10 release were created from sipa's DNS seed data, like this:\n "
      },
      {
        "sha": "167c219c6e02b9ddbc6cfe7883c97f13bb4548f8",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "renamed",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -77,6 +77,9 @@ def parse_spec(s, defaultport):\n     if match: # ipv6\n         host = match.group(1)\n         port = match.group(2)\n+    elif s.count(':') > 1: # ipv6, no port\n+        host = s\n+        port = ''\n     else:\n         (host,_,port) = s.partition(':')\n \n@@ -118,7 +121,7 @@ def main():\n     g.write('#define BITCOIN_CHAINPARAMSSEEDS_H\\n')\n     g.write('/**\\n')\n     g.write(' * List of fixed seed nodes for the bitcoin network\\n')\n-    g.write(' * AUTOGENERATED by share/seeds/generate-seeds.py\\n')\n+    g.write(' * AUTOGENERATED by contrib/seeds/generate-seeds.py\\n')\n     g.write(' *\\n')\n     g.write(' * Each line contains a 16-byte IPv6 address and a port.\\n')\n     g.write(' * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\\n')",
        "previous_filename": "share/seeds/generate-seeds.py"
      },
      {
        "sha": "4072405ef509a80176bf7314b46eca525cffe1da",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 67,
        "deletions": 16,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -22,26 +22,50 @@\n import re\n import sys\n import dns.resolver\n+import collections\n \n-PATTERN_IPV4 = re.compile(r\"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):8333$\")\n-PATTERN_AGENT = re.compile(r\"^(\\/Satoshi:0.8.6\\/|\\/Satoshi:0.9.(2|3)\\/|\\/Satoshi:0.10.\\d{1,2}\\/)$\")\n+PATTERN_IPV4 = re.compile(r\"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):(\\d+)$\")\n+PATTERN_IPV6 = re.compile(r\"^\\[([0-9a-z:]+)\\]:(\\d+)$\")\n+PATTERN_ONION = re.compile(r\"^([abcdefghijklmnopqrstuvwxyz234567]{16}\\.onion):(\\d+)$\")\n+PATTERN_AGENT = re.compile(r\"^(\\/Satoshi:0\\.8\\.6\\/|\\/Satoshi:0\\.9\\.(2|3|4|5)\\/|\\/Satoshi:0\\.10\\.\\d{1,2}\\/|\\/Satoshi:0\\.11\\.\\d{1,2}\\/)$\")\n \n def parseline(line):\n     sline = line.split()\n     if len(sline) < 11:\n        return None\n-    # Match only IPv4\n     m = PATTERN_IPV4.match(sline[0])\n+    sortkey = None\n+    ip = None\n     if m is None:\n-        return None\n-    # Do IPv4 sanity check\n-    ip = 0\n-    for i in range(0,4):\n-        if int(m.group(i+2)) < 0 or int(m.group(i+2)) > 255:\n+        m = PATTERN_IPV6.match(sline[0])\n+        if m is None:\n+            m = PATTERN_ONION.match(sline[0])\n+            if m is None:\n+                return None\n+            else:\n+                net = 'onion'\n+                ipstr = sortkey = m.group(1)\n+                port = int(m.group(2))\n+        else:\n+            net = 'ipv6'\n+            if m.group(1) in ['::']: # Not interested in localhost\n+                return None\n+            ipstr = m.group(1)\n+            sortkey = ipstr # XXX parse IPv6 into number, could use name_to_ipv6 from generate-seeds\n+            port = int(m.group(2))\n+    else:\n+        # Do IPv4 sanity check\n+        ip = 0\n+        for i in range(0,4):\n+            if int(m.group(i+2)) < 0 or int(m.group(i+2)) > 255:\n+                return None\n+            ip = ip + (int(m.group(i+2)) << (8*(3-i)))\n+        if ip == 0:\n             return None\n-        ip = ip + (int(m.group(i+2)) << (8*(3-i)))\n-    if ip == 0:\n-        return None\n+        net = 'ipv4'\n+        sortkey = ip\n+        ipstr = m.group(1)\n+        port = int(m.group(6))\n     # Skip bad results.\n     if sline[1] == 0:\n         return None\n@@ -59,21 +83,37 @@ def parseline(line):\n     blocks = int(sline[8])\n     # Construct result.\n     return {\n-        'ip': m.group(1),\n+        'net': net,\n+        'ip': ipstr,\n+        'port': port,\n         'ipnum': ip,\n         'uptime': uptime30,\n         'lastsuccess': lastsuccess,\n         'version': version,\n         'agent': agent,\n         'service': service,\n         'blocks': blocks,\n+        'sortkey': sortkey,\n     }\n \n+def filtermultiport(ips):\n+    '''Filter out hosts with more nodes per IP'''\n+    hist = collections.defaultdict(list)\n+    for ip in ips:\n+        hist[ip['sortkey']].append(ip)\n+    return [value[0] for (key,value) in hist.items() if len(value)==1]\n+\n # Based on Greg Maxwell's seed_filter.py\n def filterbyasn(ips, max_per_asn, max_total):\n+    # Sift out ips by type\n+    ips_ipv4 = [ip for ip in ips if ip['net'] == 'ipv4']\n+    ips_ipv6 = [ip for ip in ips if ip['net'] == 'ipv6']\n+    ips_onion = [ip for ip in ips if ip['net'] == 'onion']\n+\n+    # Filter IPv4 by ASN\n     result = []\n     asn_count = {}\n-    for ip in ips:\n+    for ip in ips_ipv4:\n         if len(result) == max_total:\n             break\n         try:\n@@ -86,13 +126,19 @@ def filterbyasn(ips, max_per_asn, max_total):\n             result.append(ip)\n         except:\n             sys.stderr.write('ERR: Could not resolve ASN for \"' + ip['ip'] + '\"\\n')\n+\n+    # TODO: filter IPv6 by ASN\n+\n+    # Add back non-IPv4\n+    result.extend(ips_ipv6)\n+    result.extend(ips_onion)\n     return result\n \n def main():\n     lines = sys.stdin.readlines()\n     ips = [parseline(line) for line in lines]\n \n-    # Skip entries with valid IPv4 address.\n+    # Skip entries with valid address.\n     ips = [ip for ip in ips if ip is not None]\n     # Skip entries from suspicious hosts.\n     ips = [ip for ip in ips if ip['ip'] not in SUSPICIOUS_HOSTS]\n@@ -106,13 +152,18 @@ def main():\n     ips = [ip for ip in ips if PATTERN_AGENT.match(ip['agent'])]\n     # Sort by availability (and use last success as tie breaker)\n     ips.sort(key=lambda x: (x['uptime'], x['lastsuccess'], x['ip']), reverse=True)\n+    # Filter out hosts with multiple bitcoin ports, these are likely abusive\n+    ips = filtermultiport(ips)\n     # Look up ASNs and limit results, both per ASN and globally.\n     ips = filterbyasn(ips, MAX_SEEDS_PER_ASN, NSEEDS)\n     # Sort the results by IP address (for deterministic output).\n-    ips.sort(key=lambda x: (x['ipnum']))\n+    ips.sort(key=lambda x: (x['net'], x['sortkey']))\n \n     for ip in ips:\n-        print ip['ip']\n+        if ip['net'] == 'ipv6':\n+            print '[%s]:%i' % (ip['ip'], ip['port'])\n+        else:\n+            print '%s:%i' % (ip['ip'], ip['port'])\n \n if __name__ == '__main__':\n     main()"
      },
      {
        "sha": "17339d514af892b878f449e84032ebde5151e31f",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "added",
        "additions": 879,
        "deletions": 0,
        "changes": 879,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -0,0 +1,879 @@\n+1.34.168.128:8333\n+1.202.128.218:8333\n+2.30.0.210:8333\n+5.9.96.203:8333\n+5.45.71.130:8333\n+5.45.98.141:8333\n+5.102.145.68:8333\n+5.135.160.77:8333\n+5.189.134.246:8333\n+5.199.164.132:8333\n+5.249.135.102:8333\n+8.19.44.110:8333\n+8.22.230.8:8333\n+14.200.200.145:8333\n+18.228.0.188:8333\n+18.228.0.200:8333\n+23.24.168.97:8333\n+23.28.35.227:8333\n+23.92.76.170:8333\n+23.99.64.119:8333\n+23.228.166.128:8333\n+23.229.45.32:8333\n+24.8.105.128:8333\n+24.16.69.137:8333\n+24.94.98.96:8333\n+24.102.118.7:8333\n+24.118.166.228:8333\n+24.122.133.49:8333\n+24.166.97.162:8333\n+24.213.235.242:8333\n+24.226.107.64:8333\n+24.228.192.171:8333\n+27.140.133.18:8333\n+31.41.40.25:8333\n+31.43.101.59:8333\n+31.184.195.181:8333\n+31.193.139.66:8333\n+37.200.70.102:8333\n+37.205.10.151:8333\n+42.3.106.227:8333\n+42.60.133.106:8333\n+45.56.85.231:8333\n+45.56.102.228:8333\n+45.79.130.235:8333\n+46.28.204.61:11101\n+46.38.235.229:8333\n+46.59.2.74:8333\n+46.101.132.37:8333\n+46.101.168.50:8333\n+46.163.76.230:8333\n+46.166.161.103:8333\n+46.182.132.100:8333\n+46.223.36.94:8333\n+46.227.66.132:8333\n+46.227.66.138:8333\n+46.239.107.74:8333\n+46.249.39.100:8333\n+46.250.98.108:8333\n+50.7.37.114:8333\n+50.81.53.151:8333\n+50.115.43.253:8333\n+50.116.20.87:8333\n+50.116.33.92:8333\n+50.125.167.245:8333\n+50.143.9.51:8333\n+50.188.192.133:8333\n+54.77.162.76:8333\n+54.153.97.109:8333\n+54.165.192.125:8333\n+58.96.105.85:8333\n+59.167.196.135:8333\n+60.29.227.163:8333\n+61.35.225.19:8333\n+62.43.130.178:8333\n+62.109.49.26:8333\n+62.202.0.97:8333\n+62.210.66.227:8333\n+62.210.192.169:8333\n+64.74.98.205:8333\n+64.156.193.100:8333\n+64.203.102.86:8333\n+64.229.142.48:8333\n+65.96.193.165:8333\n+66.30.3.7:8333\n+66.114.33.49:8333\n+66.118.133.194:8333\n+66.135.10.126:8333\n+66.172.10.4:8333\n+66.194.38.250:8333\n+66.194.38.253:8333\n+66.215.192.104:8333\n+67.60.98.115:8333\n+67.164.35.36:8333\n+67.191.162.244:8333\n+67.207.195.77:8333\n+67.219.233.140:8333\n+67.221.193.55:8333\n+67.228.162.228:8333\n+68.50.67.199:8333\n+68.62.3.203:8333\n+68.65.205.226:9000\n+68.106.42.191:8333\n+68.150.181.198:8333\n+68.196.196.106:8333\n+68.224.194.81:8333\n+69.46.5.194:8333\n+69.50.171.238:8333\n+69.64.43.152:8333\n+69.65.41.13:8333\n+69.90.132.200:8333\n+69.143.1.243:8333\n+69.146.98.216:8333\n+69.165.246.38:8333\n+69.207.6.135:8333\n+69.251.208.26:8333\n+70.38.1.101:8333\n+70.38.9.66:8333\n+70.90.2.18:8333\n+71.58.228.226:8333\n+71.199.11.189:8333\n+71.199.193.202:8333\n+71.205.232.181:8333\n+71.236.200.162:8333\n+72.24.73.186:8333\n+72.52.130.110:8333\n+72.53.111.37:8333\n+72.235.38.70:8333\n+73.31.171.149:8333\n+73.32.137.72:8333\n+73.137.133.238:8333\n+73.181.192.103:8333\n+73.190.2.60:8333\n+73.195.192.137:8333\n+73.222.35.117:8333\n+74.57.199.180:8333\n+74.82.233.205:8333\n+74.85.66.82:8333\n+74.101.224.127:8333\n+74.113.69.16:8333\n+74.122.235.68:8333\n+74.193.68.141:8333\n+74.208.164.219:8333\n+75.100.37.122:8333\n+75.145.149.169:8333\n+75.168.34.20:8333\n+76.20.44.240:8333\n+76.100.70.17:8333\n+76.168.3.239:8333\n+76.186.140.103:8333\n+77.92.68.221:8333\n+77.109.101.142:8333\n+77.110.11.86:8333\n+77.242.108.18:8333\n+78.46.96.150:9020\n+78.84.100.95:8333\n+79.132.230.144:8333\n+79.133.43.63:8333\n+79.160.76.153:8333\n+79.169.34.24:8333\n+79.188.7.78:8333\n+80.217.226.25:8333\n+80.223.100.179:8333\n+80.240.129.221:8333\n+81.1.173.243:8333\n+81.7.11.50:8333\n+81.7.16.17:8333\n+81.66.111.3:8333\n+81.80.9.71:8333\n+81.140.43.138:8333\n+81.171.34.37:8333\n+81.174.247.50:8333\n+81.181.155.53:8333\n+81.184.5.253:8333\n+81.187.69.130:8333\n+81.230.3.84:8333\n+82.42.128.51:8333\n+82.74.226.21:8333\n+82.142.75.50:8333\n+82.199.102.10:8333\n+82.200.205.30:8333\n+82.221.108.21:8333\n+82.221.128.35:8333\n+82.238.124.41:8333\n+82.242.0.245:8333\n+83.76.123.110:8333\n+83.150.9.196:8333\n+83.162.196.192:8333\n+83.162.234.224:8333\n+83.170.104.91:8333\n+83.255.66.118:8334\n+84.2.34.104:8333\n+84.45.98.91:8333\n+84.47.161.150:8333\n+84.212.192.131:8333\n+84.215.169.101:8333\n+84.238.140.176:8333\n+84.245.71.31:8333\n+85.17.4.212:8333\n+85.114.128.134:8333\n+85.159.237.191:8333\n+85.166.130.189:8333\n+85.199.4.228:8333\n+85.214.66.168:8333\n+85.214.195.210:8333\n+85.229.0.73:8333\n+86.21.96.45:8333\n+87.48.42.199:8333\n+87.81.143.82:8333\n+87.81.251.72:8333\n+87.104.24.185:8333\n+87.104.168.104:8333\n+87.117.234.71:8333\n+87.118.96.197:8333\n+87.145.12.57:8333\n+87.159.170.190:8333\n+88.150.168.160:8333\n+88.208.0.79:8333\n+88.208.0.149:8333\n+88.214.194.226:8343\n+89.1.11.32:8333\n+89.36.235.108:8333\n+89.67.96.2:15321\n+89.98.16.41:8333\n+89.108.72.195:8333\n+89.156.35.157:8333\n+89.163.227.28:8333\n+89.212.33.237:8333\n+89.212.160.165:8333\n+89.231.96.83:8333\n+89.248.164.64:8333\n+90.149.193.199:8333\n+91.77.239.245:8333\n+91.106.194.97:8333\n+91.126.77.77:8333\n+91.134.38.195:8333\n+91.156.97.181:8333\n+91.207.68.144:8333\n+91.209.77.101:8333\n+91.214.200.205:8333\n+91.220.131.242:8333\n+91.220.163.18:8333\n+91.233.23.35:8333\n+92.13.96.93:8333\n+92.14.74.114:8333\n+92.27.7.209:8333\n+92.221.228.13:8333\n+92.255.207.73:8333\n+93.72.167.148:8333\n+93.74.163.234:8333\n+93.123.174.66:8333\n+93.152.166.29:8333\n+93.181.45.188:8333\n+94.19.12.244:8333\n+94.190.227.112:8333\n+94.198.135.29:8333\n+94.224.162.65:8333\n+94.226.107.86:8333\n+94.242.198.161:8333\n+95.31.10.209:8333\n+95.65.72.244:8333\n+95.84.162.95:8333\n+95.90.139.46:8333\n+95.183.49.27:8005\n+95.215.47.133:8333\n+96.23.67.85:8333\n+96.44.166.190:8333\n+97.93.225.74:8333\n+98.26.0.34:8333\n+98.27.225.102:8333\n+98.229.117.229:8333\n+98.249.68.125:8333\n+98.255.5.155:8333\n+99.101.240.114:8333\n+101.100.174.138:8333\n+101.251.203.6:8333\n+103.3.60.61:8333\n+103.30.42.189:8333\n+103.224.165.48:8333\n+104.36.83.233:8333\n+104.37.129.22:8333\n+104.54.192.251:8333\n+104.128.228.252:8333\n+104.128.230.185:8334\n+104.130.161.47:8333\n+104.131.33.60:8333\n+104.143.0.156:8333\n+104.156.111.72:8333\n+104.167.111.84:8333\n+104.193.40.248:8333\n+104.197.7.174:8333\n+104.197.8.250:8333\n+104.223.1.133:8333\n+104.236.97.140:8333\n+104.238.128.214:8333\n+104.238.130.182:8333\n+106.38.234.84:8333\n+106.185.36.204:8333\n+107.6.4.145:8333\n+107.150.2.6:8333\n+107.150.40.234:8333\n+107.155.108.130:8333\n+107.161.182.115:8333\n+107.170.66.231:8333\n+107.190.128.226:8333\n+107.191.106.115:8333\n+108.16.2.61:8333\n+109.70.4.168:8333\n+109.162.35.196:8333\n+109.163.235.239:8333\n+109.190.196.220:8333\n+109.191.39.60:8333\n+109.234.106.191:8333\n+109.238.81.82:8333\n+114.76.147.27:8333\n+115.28.224.127:8333\n+115.68.110.82:18333\n+118.97.79.218:8333\n+118.189.207.197:8333\n+119.228.96.233:8333\n+120.147.178.81:8333\n+121.41.123.5:8333\n+121.67.5.230:8333\n+122.107.143.110:8333\n+123.2.170.98:8333\n+123.110.65.94:8333\n+123.193.139.19:8333\n+125.239.160.41:8333\n+128.101.162.193:8333\n+128.111.73.10:8333\n+128.140.229.73:8333\n+128.175.195.31:8333\n+128.199.107.63:8333\n+128.199.192.153:8333\n+128.253.3.193:20020\n+129.123.7.7:8333\n+130.89.160.234:8333\n+131.72.139.164:8333\n+131.191.112.98:8333\n+133.1.134.162:8333\n+134.19.132.53:8333\n+137.226.34.42:8333\n+141.41.2.172:8333\n+141.255.128.204:8333\n+142.217.12.106:8333\n+143.215.129.126:8333\n+146.0.32.101:8337\n+147.229.13.199:8333\n+149.210.133.244:8333\n+149.210.162.187:8333\n+150.101.163.241:8333\n+151.236.11.189:8333\n+153.121.66.211:8333\n+154.20.2.139:8333\n+159.253.23.132:8333\n+162.209.106.123:8333\n+162.210.198.184:8333\n+162.218.65.121:8333\n+162.222.161.49:8333\n+162.243.132.6:8333\n+162.243.132.58:8333\n+162.248.99.164:53011\n+162.248.102.117:8333\n+163.158.35.110:8333\n+164.15.10.189:8333\n+164.40.134.171:8333\n+166.230.71.67:8333\n+167.160.161.199:8333\n+168.103.195.250:8333\n+168.144.27.112:8333\n+168.158.129.29:8333\n+170.75.162.86:8333\n+172.90.99.174:8333\n+172.245.5.156:8333\n+173.23.166.47:8333\n+173.32.11.194:8333\n+173.34.203.76:8333\n+173.171.1.52:8333\n+173.175.136.13:8333\n+173.230.228.139:8333\n+173.247.193.70:8333\n+174.49.132.28:8333\n+174.52.202.72:8333\n+174.53.76.87:8333\n+174.109.33.28:8333\n+176.28.12.169:8333\n+176.35.182.214:8333\n+176.36.33.113:8333\n+176.36.33.121:8333\n+176.58.96.173:8333\n+176.121.76.84:8333\n+178.62.70.16:8333\n+178.62.111.26:8333\n+178.76.169.59:8333\n+178.79.131.32:8333\n+178.162.199.216:8333\n+178.175.134.35:8333\n+178.248.111.4:8333\n+178.254.1.170:8333\n+178.254.34.161:8333\n+179.43.143.120:8333\n+179.208.156.198:8333\n+180.200.128.58:8333\n+183.78.169.108:8333\n+183.96.96.152:8333\n+184.68.2.46:8333\n+184.73.160.160:8333\n+184.94.227.58:8333\n+184.152.68.163:8333\n+185.7.35.114:8333\n+185.28.76.179:8333\n+185.31.160.202:8333\n+185.45.192.129:8333\n+185.66.140.15:8333\n+186.2.167.23:8333\n+186.220.101.142:8333\n+188.26.5.33:8333\n+188.75.136.146:8333\n+188.120.194.140:8333\n+188.121.5.150:8333\n+188.138.0.114:8333\n+188.138.33.239:8333\n+188.166.0.82:8333\n+188.182.108.129:8333\n+188.191.97.208:8333\n+188.226.198.102:8001\n+190.10.9.217:8333\n+190.75.143.144:8333\n+190.139.102.146:8333\n+191.237.64.28:8333\n+192.3.131.61:8333\n+192.99.225.3:8333\n+192.110.160.122:8333\n+192.146.137.1:8333\n+192.183.198.204:8333\n+192.203.228.71:8333\n+193.0.109.3:8333\n+193.12.238.204:8333\n+193.91.200.85:8333\n+193.234.225.156:8333\n+194.6.233.38:8333\n+194.63.143.136:8333\n+194.126.100.246:8333\n+195.134.99.195:8333\n+195.159.111.98:8333\n+195.159.226.139:8333\n+195.197.175.190:8333\n+198.48.199.108:8333\n+198.57.208.134:8333\n+198.57.210.27:8333\n+198.62.109.223:8333\n+198.167.140.8:8333\n+198.167.140.18:8333\n+199.91.173.234:8333\n+199.127.226.245:8333\n+199.180.134.116:8333\n+200.7.96.99:8333\n+201.160.106.86:8333\n+202.55.87.45:8333\n+202.60.68.242:8333\n+202.60.69.232:8333\n+202.124.109.103:8333\n+203.30.197.77:8333\n+203.88.160.43:8333\n+203.151.140.14:8333\n+203.219.14.204:8333\n+205.147.40.62:8333\n+207.235.39.214:8333\n+207.244.73.8:8333\n+208.12.64.225:8333\n+208.76.200.200:8333\n+209.40.96.121:8333\n+209.126.107.176:8333\n+209.141.40.149:8333\n+209.190.75.59:8333\n+209.208.111.142:8333\n+210.54.34.164:8333\n+211.72.66.229:8333\n+212.51.144.42:8333\n+212.112.33.157:8333\n+212.116.72.63:8333\n+212.126.14.122:8333\n+213.66.205.194:8333\n+213.111.196.21:8333\n+213.122.107.102:8333\n+213.136.75.175:8333\n+213.155.7.24:8333\n+213.163.64.31:8333\n+213.163.64.208:8333\n+213.165.86.136:8333\n+213.184.8.22:8333\n+216.15.78.182:8333\n+216.55.143.154:8333\n+216.115.235.32:8333\n+216.126.226.166:8333\n+216.145.67.87:8333\n+216.169.141.169:8333\n+216.249.92.230:8333\n+216.250.138.230:8333\n+217.20.171.43:8333\n+217.23.2.71:8333\n+217.23.2.242:8333\n+217.25.9.76:8333\n+217.40.226.169:8333\n+217.123.98.9:8333\n+217.155.36.62:8333\n+217.172.32.18:20993\n+218.61.196.202:8333\n+218.231.205.41:8333\n+220.233.77.200:8333\n+223.18.226.85:8333\n+223.197.203.82:8333\n+223.255.166.142:8333\n+[2001:1291:2bf:1::100]:8333\n+[2001:1418:100:5c2::2]:8333\n+[2001:16d8:dd24:0:86c9:681e:f931:256]:8333\n+[2001:19f0:1624:e6::579d:9428]:8333\n+[2001:19f0:300:1340:225:90ff:fec9:2b6d]:8333\n+[2001:19f0:4009:1405::64]:8333\n+[2001:1b40:5000:2e::3fb0:6571]:8333\n+[2001:410:a000:4050:8463:90b0:fffb:4e58]:8333\n+[2001:410:a002:cafe:8463:90b0:fffb:4e58]:8333\n+[2001:41d0:1:541e::1]:8333\n+[2001:41d0:1:6a34::3]:8333\n+[2001:41d0:1:6cd3::]:8333\n+[2001:41d0:1:8b26::1]:8333\n+[2001:41d0:1:a33d::1]:8333\n+[2001:41d0:1:b855::1]:8333\n+[2001:41d0:1:c139::1]:8333\n+[2001:41d0:1:c8d7::1]:8333\n+[2001:41d0:1:dd3f::1]:8333\n+[2001:41d0:1:e29d::1]:8333\n+[2001:41d0:1:f59f::33]:8333\n+[2001:41d0:1:f7cc::1]:8333\n+[2001:41d0:1:ff87::1]:8333\n+[2001:41d0:2:2f05::1]:8333\n+[2001:41d0:2:37c3::]:8200\n+[2001:41d0:2:3e13::1]:8333\n+[2001:41d0:2:8619::]:8333\n+[2001:41d0:2:9c94::1]:8333\n+[2001:41d0:2:a24f::]:8333\n+[2001:41d0:2:adbf::]:8333\n+[2001:41d0:2:b721::1]:8333\n+[2001:41d0:2:ee52::1]:8333\n+[2001:41d0:2:f1a5::]:8333\n+[2001:41d0:2:fa54::1]:8333\n+[2001:41d0:51:1::2036]:8333\n+[2001:41d0:52:a00::1a1]:8333\n+[2001:41d0:52:cff::6f5]:8333\n+[2001:41d0:52:d00::2c0]:8333\n+[2001:41d0:52:d00::cf2]:8333\n+[2001:41d0:8:1087::1]:8333\n+[2001:41d0:8:4a3c::b7c]:8333\n+[2001:41d0:8:6728::]:8333\n+[2001:41d0:8:b779::1]:8333\n+[2001:41d0:8:c30f::1]:8333\n+[2001:41d0:8:d2b2::1]:8333\n+[2001:41d0:8:d5c3::1]:8333\n+[2001:41d0:8:eb8b::]:8333\n+[2001:41d0:a:16d0::1]:8333\n+[2001:41d0:a:2b18::1]:8333\n+[2001:41d0:a:3a9c::1]:8333\n+[2001:41d0:a:4903::]:8333\n+[2001:41d0:a:57b::1]:8333\n+[2001:41d0:a:5c7a::]:8333\n+[2001:41d0:a:6c29::1]:8333\n+[2001:41d0:a:f482::1]:8333\n+[2001:41d0:b:854:b7c:b7c:b7c:b7c]:8333\n+[2001:41d0:d:111c::]:8333\n+[2001:44b8:4116:7801:4216:7eff:fe78:3fe4]:8333\n+[2001:470:1f08:837::2]:8333\n+[2001:470:1f08:c33::2]:8333\n+[2001:470:1f09:bca:218:7dff:fe10:be33]:8333\n+[2001:470:1f0f:22d::212:26]:8333\n+[2001:470:1f11:12d5::ae1:5611]:8333\n+[2001:470:1f14:57a::2]:8333\n+[2001:470:1f14:7d::2]:8333\n+[2001:470:1f15:57c::1]:8333\n+[2001:470:1f15:dda:3d9a:3f11:9a56:ed64]:8333\n+[2001:470:25:482::2]:8333\n+[2001:470:25:e4::2]:8333\n+[2001:470:4:26b::2]:8333\n+[2001:470:5f:5f::232]:8333\n+[2001:470:66:119::2]:8333\n+[2001:470:67:39d::71]:8333\n+[2001:470:6c4f::cafe]:8333\n+[2001:470:8:2e1::43]:8333\n+[2001:470:90a7:96::afe:6021]:8333\n+[2001:470:95c1::2]:8333\n+[2001:470:b1d0:ffff::1000]:8333\n+[2001:470:c1f2:3::201]:8333\n+[2001:470:d00d:0:3664:a9ff:fe9a:5150]:8333\n+[2001:470:e250:0:211:11ff:feb9:924c]:8333\n+[2001:4800:7817:101:be76:4eff:fe04:dc52]:8333\n+[2001:4800:7819:104:be76:4eff:fe04:7809]:8333\n+[2001:4800:7819:104:be76:4eff:fe05:c828]:8333\n+[2001:4802:7800:2:30d7:1775:ff20:1858]:8333\n+[2001:4802:7802:101:be76:4eff:fe20:256]:8333\n+[2001:4802:7802:103:be76:4eff:fe20:2de8]:8333\n+[2001:4830:1100:2e8::2]:8333\n+[2001:4ba0:fff7:181:dead::1]:8333\n+[2001:4ba0:fffa:5d::93]:8333\n+[2001:4ba0:ffff:1be:1:1005:0:1]:8335\n+[2001:4c48:110:101:216:3eff:fe24:1162]:8333\n+[2001:4dd0:f101::32]:8333\n+[2001:4dd0:ff00:867f::3]:8333\n+[2001:4dd0:ff00:9a67::9]:8333\n+[2001:4dd0:ff00:9c55:c23f:d5ff:fe6c:7ee9]:8333\n+[2001:5c0:1400:b::3cc7]:8333\n+[2001:5c0:1400:b::3d01]:8333\n+[2001:5c0:1400:b::8df]:8333\n+[2001:5c0:1501:300::3]:8333\n+[2001:610:1b19::3]:8333\n+[2001:620:500:fff0:f21f:afff:fecf:91cc]:8333\n+[2001:67c:1220:80c:ad:8de2:f7e2:c784]:8333\n+[2001:67c:21ec:1000::b]:8333\n+[2001:6f8:1296:0:76d4:35ff:feba:1d26]:8333\n+[2001:840:f000:4250:3e4a:92ff:fe6d:145f]:8333\n+[2001:8d8:840:500::39:1ae]:8333\n+[2001:980:efd8:0:21:de4a:2709:912]:8333\n+[2001:981:46:1::3]:8333\n+[2001:981:9319:2:c0:a8:c8:8]:8333\n+[2001:9d8:cafe:3::91]:8333\n+[2001:ad0:1:1:26be:5ff:fe25:959d]:8333\n+[2001:ba8:1f1:f34c::2]:8333\n+[2001:bc8:381c:100::1]:8333\n+[2002:175c:4caa::175c:4caa]:8333\n+[2002:4404:82f1:0:8d55:8fbb:15fa:f4e0]:8333\n+[2002:4475:2233:0:21f:5bff:fe33:9f70]:8333\n+[2002:596c:48c3::596c:48c3]:8333\n+[2002:8c6d:6521:9617:12bf:48ff:fed8:1724]:8333\n+[2002:a646:5e6a::1:2]:8333\n+[2002:b009:20c5::b009:20c5]:8333\n+[2400:8900::f03c:91ff:fe6e:823e]:8333\n+[2400:8900::f03c:91ff:fe70:d164]:8333\n+[2400:8901::f03c:91ff:fe37:9761]:8333\n+[2403:4200:403:2::ff]:8333\n+[2403:b800:1000:64:40a:e9ff:fe5f:94c1]:8333\n+[2403:b800:1000:64:9879:17ff:fe6a:a59f]:8333\n+[2600:3c00::f03c:91ff:fe18:59b2]:8333\n+[2600:3c00::f03c:91ff:fe37:a4b1]:8333\n+[2600:3c00::f03c:91ff:fe56:2973]:8333\n+[2600:3c00::f03c:91ff:fe6e:7297]:8333\n+[2600:3c00::f03c:91ff:fe84:8a6e]:8333\n+[2600:3c01::f03c:91ff:fe18:6adf]:8333\n+[2600:3c01::f03c:91ff:fe18:e217]:8333\n+[2600:3c01::f03c:91ff:fe33:1b31]:8333\n+[2600:3c01::f03c:91ff:fe33:2fe1]:8333\n+[2600:3c01::f03c:91ff:fe33:a03f]:8333\n+[2600:3c01::f03c:91ff:fe50:5e06]:8333\n+[2600:3c01::f03c:91ff:fe56:d645]:8333\n+[2600:3c01::f03c:91ff:fe6e:a3dc]:8333\n+[2600:3c01::f03c:91ff:fe89:a659]:8333\n+[2600:3c02::f03c:91ff:fe6e:6f0b]:8333\n+[2600:3c03::f03c:91ff:fe33:f6fb]:8333\n+[2600:3c03::f03c:91ff:fe50:5fa7]:8333\n+[2600:3c03::f03c:91ff:fe6e:1803]:8333\n+[2600:3c03::f03c:91ff:fe6e:4ac0]:8333\n+[2601:6:4800:47f:1e4e:1f4d:332c:3bf6]:8333\n+[2601:d:5400:fed:8d54:c1e8:7ed7:d45e]:8333\n+[2602:100:4b8f:6d2a:20c:29ff:feaf:c4c2]:8333\n+[2602:ffc5:1f::1f:2d61]:8333\n+[2602:ffc5:1f::1f:9211]:8333\n+[2602:ffc5::ffc5:b844]:8333\n+[2602:ffe8:100:2::457:936b]:8333\n+[2602:ffea:1001:125::2ad4]:8333\n+[2602:ffea:1001:6ff::837d]:8333\n+[2602:ffea:1001:72b::578b]:8333\n+[2602:ffea:1001:77a::9cae]:8333\n+[2602:ffea:1:2fe::6bc8]:8333\n+[2602:ffea:1:701::7968]:8333\n+[2602:ffea:1:70d::82ec]:8333\n+[2602:ffea:1:9ff::e957]:8333\n+[2602:ffea:1:a5d::4acb]:8333\n+[2602:ffea:a::24c4:d9fd]:8333\n+[2602:ffea:a::c06:ae32]:8333\n+[2604:0:c1:100:1ec1:deff:fe54:2235]:8333\n+[2604:180:1:1af::42a9]:8333\n+[2604:180::b208:398]:8333\n+[2604:2880::6072:aed]:8333\n+[2604:4080:1114:0:3285:a9ff:fe93:850c]:8333\n+[2604:7c00:17:3d0::5a4d]:8333\n+[2604:9a00:2100:a009:2::]:8333\n+[2604:a880:1:20::22a:4001]:8333\n+[2604:a880:800:10::752:f001]:8333\n+[2604:c00:88:32:216:3eff:fee4:fcca]:8333\n+[2604:c00:88:32:216:3eff:fef5:bc21]:8333\n+[2605:7980:1:2::1761:3d4e]:8333\n+[2605:e000:1417:4068:223:32ff:fe96:e2d]:8333\n+[2606:6000:a441:9903:5054:ff:fe78:66ff]:8333\n+[2606:df00:2::ae85:8fc6]:8333\n+[2607:5300:100:200::e7f]:8333\n+[2607:5300:10::a1]:8333\n+[2607:5300:60:116e::1]:8333\n+[2607:5300:60:1535::]:8333\n+[2607:5300:60:1b32::1]:8333\n+[2607:5300:60:2337::1]:8333\n+[2607:5300:60:2b90::1]:8333\n+[2607:5300:60:2d99::1]:8333\n+[2607:5300:60:3cb::1]:8333\n+[2607:5300:60:4a85::]:8333\n+[2607:5300:60:5112:0:2:4af5:63fe]:8333\n+[2607:5300:60:6dd5::]:8333\n+[2607:5300:60:a91::1]:8333\n+[2607:f1c0:820:1500::7f:3f44]:8333\n+[2607:f1c0:848:1000::48:943c]:8333\n+[2607:f948:0:1::7]:8333\n+[2607:fcd0:100:2300::4ad:e594]:8333\n+[2607:fcd0:100:2300::659e:9cb3]:8333\n+[2607:fcd0:100:2300::c74b:a8ae]:8333\n+[2607:fcd0:100:2300::d82:d8c2]:8333\n+[2607:fcd0:100:4300::8795:2fa8]:8333\n+[2607:fcd0:daaa:901::9561:e043]:8333\n+[2a00:1178:2:43:5054:ff:fee7:2eb6]:8333\n+[2a00:1328:e100:cc42:230:48ff:fe92:55d]:8333\n+[2a00:14f0:e000:80d2:cd1a::1]:8333\n+[2a00:16d8:c::5b6a:c261]:8333\n+[2a00:61e0:4083:6d01:6852:1376:e972:2091]:8333\n+[2a00:c98:2030:a02f:2::2]:8333\n+[2a01:1b0:7999:402::131]:8333\n+[2a01:1e8:e100:811c:700f:65f0:f72a:1084]:8333\n+[2a01:238:42da:c500:6546:1293:5422:ab40]:8333\n+[2a01:348:6:473::2]:8333\n+[2a01:368:e010:2::2]:8333\n+[2a01:430:17:1::ffff:549]:8333\n+[2a01:430:17:1::ffff:830]:8333\n+[2a01:488:66:1000:53a9:d04:0:1]:8333\n+[2a01:488:66:1000:57e6:578c:0:1]:8333\n+[2a01:488:66:1000:b01c:178d:0:1]:8333\n+[2a01:488:67:1000:523:fdce:0:1]:8333\n+[2a01:488:67:1000:b01c:30ab:0:1]:8333\n+[2a01:4f8:100:24aa::2]:8333\n+[2a01:4f8:100:44e7::2]:8333\n+[2a01:4f8:100:5128::2]:8333\n+[2a01:4f8:100:84a7::1:1]:8333\n+[2a01:4f8:110:516c::2]:8333\n+[2a01:4f8:110:536e::2]:8333\n+[2a01:4f8:120:62e6::2]:8333\n+[2a01:4f8:120:702e::2]:8333\n+[2a01:4f8:120:8005::2]:8333\n+[2a01:4f8:120:8203::2]:8333\n+[2a01:4f8:120:8422::2]:8333\n+[2a01:4f8:121:11eb::2]:8333\n+[2a01:4f8:121:261::2]:8333\n+[2a01:4f8:130:242b::10]:8333\n+[2a01:4f8:130:242b::5]:8333\n+[2a01:4f8:130:2468::3]:8333\n+[2a01:4f8:130:632c::2]:8333\n+[2a01:4f8:130:6366::2]:8333\n+[2a01:4f8:130:6426::2]:8333\n+[2a01:4f8:130:934f::2]:8333\n+[2a01:4f8:131:2070::2]:8333\n+[2a01:4f8:131:54a2::2]:8333\n+[2a01:4f8:140:80ad::2]:8333\n+[2a01:4f8:141:186::2]:8333\n+[2a01:4f8:150:210b::2]:8333\n+[2a01:4f8:150:2263::5]:8333\n+[2a01:4f8:150:2349::2]:8333\n+[2a01:4f8:150:61ee::2]:8333\n+[2a01:4f8:150:7088:5054:ff:fe45:bff2]:8333\n+[2a01:4f8:150:8324::2]:9001\n+[2a01:4f8:151:1d8::2]:8333\n+[2a01:4f8:151:5128::2]:8333\n+[2a01:4f8:151:6347::2]:9001\n+[2a01:4f8:161:526d::2]:8333\n+[2a01:4f8:161:9349::2]:8333\n+[2a01:4f8:162:23c6::2]:8333\n+[2a01:4f8:162:4348::2]:8333\n+[2a01:4f8:162:7345::2]:8333\n+[2a01:4f8:162:7383::2]:8333\n+[2a01:4f8:162:74e3::2]:8333\n+[2a01:4f8:190:6065::2]:8333\n+[2a01:4f8:190:6349::2]:8333\n+[2a01:4f8:190:64c9::2]:8333\n+[2a01:4f8:190:91ce::2]:8333\n+[2a01:4f8:191:2194::83]:8333\n+[2a01:4f8:191:40a1::2]:8333\n+[2a01:4f8:191:4a7::2]:8333\n+[2a01:4f8:191:63b4:5000::1]:8333\n+[2a01:4f8:191:7121::2]:8333\n+[2a01:4f8:191:83a2::2]:8333\n+[2a01:4f8:191:93c4::2]:8333\n+[2a01:4f8:192:60a9:0:1:5:2]:8333\n+[2a01:4f8:192:73b2::2]:8333\n+[2a01:4f8:192:8098::2]:8333\n+[2a01:4f8:192:db::2]:8333\n+[2a01:4f8:200:1012::2]:8333\n+[2a01:4f8:200:22e3::2]:8333\n+[2a01:4f8:200:414e::2]:8333\n+[2a01:4f8:200:63af::222]:8333\n+[2a01:4f8:200:71e3:78b4:f3ff:fead:e8cf]:8333\n+[2a01:4f8:201:5164::2]:8333\n+[2a01:4f8:201:6011::4]:8333\n+[2a01:4f8:201:60d5::2]:8333\n+[2a01:4f8:202:53c3::2]:8333\n+[2a01:4f8:210:24aa::2]:8333\n+[2a01:4f8:210:502f::2]:8333\n+[2a01:4f8:211:14cf::2]:8333\n+[2a01:4f8:211:1a59::2]:8333\n+[2a01:4f8:211:2ac1::2]:8333\n+[2a01:4f8:211:cca::2]:8333\n+[2a01:4f8:a0:22a5::2]:8333\n+[2a01:4f8:a0:5023::2]:8333\n+[2a01:4f8:a0:5243::2]:8333\n+[2a01:4f8:a0:74c8::2]:8333\n+[2a01:4f8:a0:8227::2]:8333\n+[2a01:4f8:a0:822d::2]:8333\n+[2a01:4f8:d13:2183::2]:8333\n+[2a01:608:ffff:a009:8bf5:879d:e51a:f837]:8333\n+[2a01:79d:469e:ed94:c23f:d5ff:fe65:20c5]:8333\n+[2a01:7c8:aab5:3e6:5054:ff:fed7:4e54]:8333\n+[2a01:7e00::f03c:91ff:fe18:301e]:8333\n+[2a01:7e00::f03c:91ff:fe18:7749]:8333\n+[2a01:7e00::f03c:91ff:fe33:2d67]:8333\n+[2a01:7e00::f03c:91ff:fe33:347c]:8333\n+[2a01:7e00::f03c:91ff:fe33:ae50]:8333\n+[2a01:7e00::f03c:91ff:fe56:6b5c]:8333\n+[2a01:7e00::f03c:91ff:fe56:bee6]:8333\n+[2a01:7e00::f03c:91ff:fe69:4895]:8333\n+[2a01:7e00::f03c:91ff:fe69:9912]:8333\n+[2a01:7e00::f03c:91ff:fe6e:26ee]:8333\n+[2a01:7e00::f03c:91ff:fe73:42f1]:8333\n+[2a01:7e00::f03c:91ff:fe84:434f]:8333\n+[2a01:7e00::f03c:91ff:fe84:b36b]:8333\n+[2a01:7e00::f03c:91ff:fe89:1faa]:8333\n+[2a01:7e00::f03c:91ff:fe98:816]:8333\n+[2a01:7e00::f03c:91ff:fedb:352e]:8333\n+[2a01:7e00::f03c:91ff:fedb:4a1d]:8333\n+[2a01:e34:edbb:6750:224:1dff:fe89:3897]:8333\n+[2a01:e35:2f1d:3fb0:7187:c7ba:bcfc:80ce]:8333\n+[2a01:e35:8787:96f0:9032:9297:39ae:496d]:8333\n+[2a01:e35:8a3f:47c0:c617:feff:fe3c:9fbd]:8333\n+[2a01:e35:8b66:6a0:4900:9dfd:d841:d025]:8333\n+[2a02:168:4a01::39]:8333\n+[2a02:168:5404:2:c23f:d5ff:fe6a:512e]:8333\n+[2a02:180:1:1::5b8f:538c]:8333\n+[2a02:2028:1016::2]:8333\n+[2a02:2528:503:2::14]:8333\n+[2a02:2528:503:2::15]:8333\n+[2a02:2528:ff00:81a6:21e:c5ff:fe8d:f9a5]:8333\n+[2a02:2770:5:0:21a:4aff:fee4:c7db]:8333\n+[2a02:2770:8:0:21a:4aff:fe7b:3dcd]:8333\n+[2a02:348:5e:5a29::1]:8333\n+[2a02:7aa0:1619::202f:c06a]:8333\n+[2a02:8109:8e40:35fc:ba27:ebff:feae:cf16]:8333\n+[2a02:af8:6:1500::1:130]:8333\n+[2a02:c200:0:10:1:0:6314:2222]:8333\n+[2a02:c200:0:10:2:3:3295:1]:8332\n+[2a02:c200:0:10:3:0:5449:1]:8333\n+[2a02:c200:1:10:2:3:5899:1]:8333\n+[2a02:c200:1:10::2705:1]:8333\n+[2a02:ce80:0:20::1]:8333\n+[2a02:fe0:c321:27e0:6ef0:49ff:fe11:a61d]:8333\n+[2a03:4000:2:496::8]:8333\n+[2a03:b0c0:0:1010::62:f001]:8333\n+[2a03:f80:ed16:ca7:ea75:b12d:2af:9e2a]:8333\n+3ffk7iumtx3cegbi.onion:8333\n+3hshaantu6ot4upz.onion:8333\n+45c5lc77qgpikafy.onion:8333\n+77mx2jsxaoyesz2p.onion:8333\n+7g7j54btiaxhtsiy.onion:8333\n+b6fr7dlbu2kpiysf.onion:8333\n+bitcoincfqcssig5.onion:8333\n+bitcoinostk4e4re.onion:8333\n+bmutjfrj5btseddb.onion:8333\n+drp4pvejybx2ejdr.onion:8333\n+gixnv56d63buypan.onion:8333\n+h2vlpudzphzqxutd.onion:8333\n+hhiv5pnxenvbf4am.onion:8333\n+lzxpkn6ptp3ohh63.onion:8333\n+msphsgfiqfq5stne.onion:8333\n+ncwk3lutemffcpc4.onion:8333\n+okdzjarwekbshnof.onion:8333\n+sjdomi4yb2dwkjbc.onion:8333\n+uvwozwxlihntigbb.onion:8333\n+v6ylz45dn5ybpk4d.onion:8333\n+vk3qjdehyy4dwcxw.onion:8333\n+vqpye2k5rcqvj5mq.onion:8333\n+xudkoztdfrsuyyou.onion:8333\n+z55v4ostefnwfy32.onion:8333"
      },
      {
        "sha": "98365ee505ced2410cdc7ea841bf52198b405662",
        "filename": "contrib/seeds/nodes_test.txt",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/seeds/nodes_test.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/seeds/nodes_test.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_test.txt?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -0,0 +1,11 @@\n+# List of fixed seed nodes for testnet\n+\n+# Onion nodes\n+thfsmmn2jbitcoin.onion\n+it2pj4f7657g3rhi.onion\n+nkf5e6b7pl4jfd4a.onion\n+4zhkir2ofl7orfom.onion\n+t6xj6wilh4ytvcs7.onion\n+i6y6ivorwakd7nw3.onion\n+ubqj4rsu3nqtxmtp.onion\n+"
      },
      {
        "sha": "d27a701344877b0af8857f5466d12b999658399b",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,9 +1,8 @@\n package=boost\n-$(package)_version=1_55_0\n-$(package)_download_path=http://sourceforge.net/projects/boost/files/boost/1.55.0\n+$(package)_version=1_58_0\n+$(package)_download_path=http://sourceforge.net/projects/boost/files/boost/1.58.0\n $(package)_file_name=$(package)_$($(package)_version).tar.bz2\n-$(package)_sha256_hash=fff00023dd79486d444c8e29922f4072e1d451fc5a4d2b6075852ead7f2b7b52\n-$(package)_patches=darwin_boost_atomic-1.patch darwin_boost_atomic-2.patch\n+$(package)_sha256_hash=fdfc204fc33ec79c99b9a74944c3e54bd78be4f7f15e260c0e2700a36dc7d3e5\n \n define $(package)_set_vars\n $(package)_config_opts_release=variant=release\n@@ -26,8 +25,6 @@ $(package)_cxxflags_linux=-fPIC\n endef\n \n define $(package)_preprocess_cmds\n-  patch -p2 < $($(package)_patch_dir)/darwin_boost_atomic-1.patch && \\\n-  patch -p2 < $($(package)_patch_dir)/darwin_boost_atomic-2.patch && \\\n   echo \"using $(boost_toolset_$(host_os)) : : $($(package)_cxx) : <cxxflags>\\\"$($(package)_cxxflags) $($(package)_cppflags)\\\" <linkflags>\\\"$($(package)_ldflags)\\\" <archiver>\\\"$(boost_archiver_$(host_os))\\\" <striper>\\\"$(host_STRIP)\\\"  <ranlib>\\\"$(host_RANLIB)\\\" <rc>\\\"$(host_WINDRES)\\\" : ;\" > user-config.jam\n endef\n "
      },
      {
        "sha": "e6573986f731d91b629563441661baf58d770f1a",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,8 +1,8 @@\n package=miniupnpc\n-$(package)_version=1.9.20140701\n+$(package)_version=1.9.20150609\n $(package)_download_path=http://miniupnp.free.fr/files\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=26f3985bad7768b8483b793448ae49414cdc4451d0ec83e7c1944367e15f9f07\n+$(package)_sha256_hash=86e6ccec5b660ba6889893d1f3fca21db087c6466b1a90f495a1f87ab1cd1c36\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\""
      },
      {
        "sha": "745d7a3982c168c5927fdc60c91fd0f415ba41d5",
        "filename": "depends/packages/native_ccache.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,8 +1,8 @@\n package=native_ccache\n-$(package)_version=3.1.9\n+$(package)_version=3.2.2\n $(package)_download_path=http://samba.org/ftp/ccache\n $(package)_file_name=ccache-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=04d3e2e438ac8d4cc4b110b68cdd61bd59226c6588739a4a386869467f5ced7c\n+$(package)_sha256_hash=440f5e15141cc72d2bfff467c977020979810eb800882e3437ad1a7153cce7b2\n \n define $(package)_set_vars\n $(package)_config_opts="
      },
      {
        "sha": "e0ae0cec700e921cdfc6c4bdc9760467655dcb4d",
        "filename": "depends/packages/native_comparisontool.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/packages/native_comparisontool.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/packages/native_comparisontool.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_comparisontool.mk?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,8 +1,8 @@\n package=native_comparisontool\n-$(package)_version=0f7b5d8\n-$(package)_download_path=https://github.com/TheBlueMatt/test-scripts/raw/38b490a2599d422b12d5ce8f165792f63fd8f54f\n+$(package)_version=8c6666f\n+$(package)_download_path=https://github.com/theuni/bitcoind-comparisontool/raw/master\n $(package)_file_name=pull-tests-$($(package)_version).jar\n-$(package)_sha256_hash=ecd43b988a8b673b483e4f69f931596360a5e90fc415c75c4c259faa690df198\n+$(package)_sha256_hash=a865332b3827abcde684ab79f5f43c083b0b6a4c97ff5508c79f29fee24f11cd\n $(package)_install_dirname=BitcoindComparisonTool_jar\n $(package)_install_filename=BitcoindComparisonTool.jar\n "
      },
      {
        "sha": "ce50b366fa74f3fbed838624f9d7ec58396ace02",
        "filename": "depends/packages/native_protobuf.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/packages/native_protobuf.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/packages/native_protobuf.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_protobuf.mk?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,8 +1,8 @@\n package=native_protobuf\n-$(package)_version=2.5.0\n-$(package)_download_path=https://protobuf.googlecode.com/files\n+$(package)_version=2.6.1\n+$(package)_download_path=https://github.com/google/protobuf/releases/download/v$($(package)_version)\n $(package)_file_name=protobuf-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=13bfc5ae543cf3aa180ac2485c0bc89495e3ae711fc6fab4f8ffe90dfb4bb677\n+$(package)_sha256_hash=ee445612d544d885ae240ffbcbf9267faa9f593b7b101f21d58beceb92661910\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-shared"
      },
      {
        "sha": "7b21247133f42754d8c67ad940e2ce77357acb98",
        "filename": "depends/packages/qrencode.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/packages/qrencode.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/packages/qrencode.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qrencode.mk?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,8 +1,8 @@\n package=qrencode\n-$(package)_version=3.4.3\n+$(package)_version=3.4.4\n $(package)_download_path=https://fukuchi.org/works/qrencode/\n $(package)_file_name=qrencode-$(qrencode_version).tar.bz2\n-$(package)_sha256_hash=dfd71487513c871bad485806bfd1fdb304dedc84d2b01a8fb8e0940b50597a98\n+$(package)_sha256_hash=efe5188b1ddbcbf98763b819b146be6a90481aac30cfc8d858ab78a19cde1fa5\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-shared -without-tools --disable-sdltest"
      },
      {
        "sha": "04514c593a101078af216a67bd905b5c615ded53",
        "filename": "depends/patches/boost/gcc_5_no_cxx11.patch",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/patches/boost/gcc_5_no_cxx11.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/patches/boost/gcc_5_no_cxx11.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/boost/gcc_5_no_cxx11.patch?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -0,0 +1,37 @@\n+From eec808554936ae068b23df07ab54d4dc6302a695 Mon Sep 17 00:00:00 2001\n+From: jzmaddock <jzmaddock@gmail.com>\n+Date: Sat, 23 Aug 2014 09:38:02 +0100\n+Subject: [PATCH] Fix BOOST_NO_CXX11_VARIADIC_TEMPLATES definition - the\n+ feature was introduced in GCC 4.4.\n+\n+---\n+ include/boost/config/compiler/gcc.hpp | 9 +--------\n+ 1 file changed, 1 insertion(+), 8 deletions(-)\n+\n+diff --git a/include/boost/config/compiler/gcc.hpp b/include/boost/config/compiler/gcc.hpp\n+index f37159d..97d8a18 100644\n+--- a/include/boost/config/compiler/gcc.hpp\n++++ b/include/boost/config/compiler/gcc.hpp\n+@@ -154,14 +154,6 @@\n+ #  define BOOST_NO_CXX11_FUNCTION_TEMPLATE_DEFAULT_ARGS\n+ #  define BOOST_NO_CXX11_RVALUE_REFERENCES\n+ #  define BOOST_NO_CXX11_STATIC_ASSERT\n+-\n+-// Variadic templates compiler:\n+-//   http://www.generic-programming.org/~dgregor/cpp/variadic-templates.html\n+-#  if defined(__VARIADIC_TEMPLATES) || (__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4) && defined(__GXX_EXPERIMENTAL_CXX0X__))\n+-#    define BOOST_HAS_VARIADIC_TMPL\n+-#  else\n+-#    define BOOST_NO_CXX11_VARIADIC_TEMPLATES\n+-#  endif\n+ #endif\n+ \n+ // C++0x features in 4.4.n and later\n+@@ -176,6 +168,7 @@\n+ #  define BOOST_NO_CXX11_DELETED_FUNCTIONS\n+ #  define BOOST_NO_CXX11_TRAILING_RESULT_TYPES\n+ #  define BOOST_NO_CXX11_INLINE_NAMESPACES\n++#  define BOOST_NO_CXX11_VARIADIC_TEMPLATES\n+ #endif\n+ \n+ #if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)"
      },
      {
        "sha": "7b0c39d3834f53722b7f6773810d982cad077b53",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -58,6 +58,7 @@ The Bitcoin repo's [root README](https://github.com/bitcoin/bitcoin/blob/master/\n - [Translation Strings Policy](translation_strings_policy.md)\n - [Unit Tests](unit-tests.md)\n - [Unauthenticated REST Interface](REST-interface.md)\n+- [Shared Libraries](shared-libraries.md)\n - [BIPS](bips.md)\n - [Dnsseed Policy](dnsseed-policy.md)\n "
      },
      {
        "sha": "ac7cd45f7002a2d0d11d0505da3b61e3e784c687",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -9,29 +9,24 @@ Supported API\n ####Transactions\n `GET /rest/tx/<TX-HASH>.<bin|hex|json>`\n \n-Given a transaction hash,\n-Returns a transaction, in binary, hex-encoded binary or JSON formats.\n+Given a transaction hash: returns a transaction in binary, hex-encoded binary, or JSON formats.\n \n For full TX query capability, one must enable the transaction index via \"txindex=1\" command line / configuration option.\n \n ####Blocks\n `GET /rest/block/<BLOCK-HASH>.<bin|hex|json>`\n `GET /rest/block/notxdetails/<BLOCK-HASH>.<bin|hex|json>`\n \n-Given a block hash,\n-Returns a block, in binary, hex-encoded binary or JSON formats.\n+Given a block hash: returns a block, in binary, hex-encoded binary or JSON formats.\n \n The HTTP request and response are both handled entirely in-memory, thus making maximum memory usage at least 2.66MB (1 MB max block, plus hex encoding) per request.\n \n With the /notxdetails/ option JSON response will only contain the transaction hash instead of the complete transaction details. The option only affects the JSON response.\n \n ####Blockheaders\n-`GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex>`\n+`GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`\n \n-Given a block hash,\n-Returns <COUNT> amount of blockheaders in upward direction.\n-\n-JSON is not supported.\n+Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n \n ####Chaininfos\n `GET /rest/chaininfo.json`\n@@ -45,6 +40,9 @@ Only supports JSON as output format.\n * difficulty : (numeric) the current difficulty\n * verificationprogress : (numeric) estimate of verification progress [0..1]\n * chainwork : (string) total amount of work in active chain, in hexadecimal\n+* pruned : (boolean) if the blocks are subject to pruning\n+* pruneheight : (numeric) heighest block available\n+* softforks : (array) status of softforks in progress\n \n ####Query UTXO set\n `GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`\n@@ -81,4 +79,4 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n \n Risks\n -------------\n-Running a webbrowser on the same node with a REST enabled bitcoind can be a risk. Accessing prepared XSS websites could read out tx/block data of your node by placing links like `<script src=\"http://127.0.0.1:8332/rest/tx/1234567890.json\">` which might break the nodes privacy.\n+Running a web browser on the same node with a REST enabled bitcoind can be a risk. Accessing prepared XSS websites could read out tx/block data of your node by placing links like `<script src=\"http://127.0.0.1:8332/rest/tx/1234567890.json\">` which might break the nodes privacy."
      },
      {
        "sha": "c6da1a4586e971ff3925517b59d5575f9f438853",
        "filename": "doc/assets-attribution.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/assets-attribution.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/assets-attribution.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -6,7 +6,7 @@ The following is a list of assets used in the bitcoin source and their proper at\n ### Info\n * Icon Pack: Typicons (http://typicons.com)\n * Designer: Stephen Hutchings (and more)\n-* License: CC BY-SA\n+* License: MIT\n * Site: [https://github.com/stephenhutchings/typicons.font](https://github.com/stephenhutchings/typicons.font)\n \n ### Assets Used\n@@ -30,7 +30,7 @@ Jonas Schnelli\n ### Info\n * Designer: Jonas Schnelli\n * Bitcoin Icon: (based on the original bitcoin logo from Bitboy)\n-* Some icons are based on Stephan Hutchings Typicons (these are under CC BY-SA license)\n+* Some icons are based on Stephan Hutchings Typicons\n * License: MIT\n \n ### Assets Used"
      },
      {
        "sha": "dc319dd1c47ce3e8cb92aa0f29b15399b4210b82",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 24,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -32,33 +32,10 @@ Instructions: Homebrew\n \n #### Install dependencies using Homebrew\n \n-        brew install autoconf automake libtool boost miniupnpc openssl pkg-config protobuf qt5\n+        brew install autoconf automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf qt5\n \n NOTE: Building with Qt4 is still supported, however, could result in a broken UI. As such, building with Qt5 is recommended.\n \n-#### Installing berkeley-db4 using Homebrew\n-\n-The homebrew package for berkeley-db4 has been broken for some time.  It will install without Java though.\n-\n-Running this command takes you into brew's interactive mode, which allows you to configure, make, and install by hand:\n-```\n-$ brew install https://raw.github.com/homebrew/homebrew/master/Library/Formula/berkeley-db4.rb -\u2013without-java \n-```\n-\n-The rest of these commands are run inside brew interactive mode:\n-```\n-/private/tmp/berkeley-db4-UGpd0O/db-4.8.30 $ cd ..\n-/private/tmp/berkeley-db4-UGpd0O $ db-4.8.30/dist/configure --prefix=/usr/local/Cellar/berkeley-db4/4.8.30 --mandir=/usr/local/Cellar/berkeley-db4/4.8.30/share/man --enable-cxx\n-/private/tmp/berkeley-db4-UGpd0O $ make\n-/private/tmp/berkeley-db4-UGpd0O $ make install\n-/private/tmp/berkeley-db4-UGpd0O $ exit\n-```\n-\n-After exiting, you'll get a warning that the install is keg-only, which means it wasn't symlinked to `/usr/local`.  You don't need it to link it to build bitcoin, but if you want to, here's how:\n-\n-    $ brew link --force berkeley-db4\n-\n-\n ### Building `bitcoind`\n \n 1. Clone the github tree to get the source code and go into the directory."
      },
      {
        "sha": "92aed7725e12e1c3af29254d493a8d3d56a8c62e",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 13,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -59,7 +59,7 @@ Build requirements:\n \n \tsudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev\n \t\n-for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed:\n+For Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed:\n \n \tsudo apt-get install libboost-all-dev\n \n@@ -72,18 +72,7 @@ for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be inst\n  Ubuntu 12.04 and later have packages for libdb5.1-dev and libdb5.1++-dev,\n  but using these will break binary wallet compatibility, and is not recommended.\n \n-for Debian 7 (Wheezy) and later:\n- The oldstable repository contains db4.8 packages.\n- Add the following line to /etc/apt/sources.list,\n- replacing [mirror] with any official debian mirror.\n-\n-\tdeb http://[mirror]/debian/ oldstable main\n-\n-To enable the change run\n-\n-\tsudo apt-get update\n-\n-for other Debian & Ubuntu (with ppa):\n+For other Debian & Ubuntu (with ppa):\n \n \tsudo apt-get install libdb4.8-dev libdb4.8++-dev\n "
      },
      {
        "sha": "814ae3876a38fff1a7c81be6487a8fd4b94cca3c",
        "filename": "doc/dnsseed-policy.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/dnsseed-policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/dnsseed-policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dnsseed-policy.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -43,7 +43,8 @@ related to the DNS seed operation.\n \n If these expectations cannot be satisfied the operator should\n discontinue providing services and contact the active Bitcoin\n-Core development team as well as posting on bitcoin-development.\n+Core development team as well as posting on\n+[bitcoin-dev](https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev).\n \n Behavior outside of these expectations may be reasonable in some\n situations but should be discussed in public in advance."
      },
      {
        "sha": "630b3c04a7bafc67a601b9792d1b2bcbaf15506c",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -74,7 +74,7 @@ In the VirtualBox GUI click \"Create\" and choose the following parameters in the\n - Disk size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n - Push the `Create` button\n \n-Get the [Debian 7.8 net installer](http://cdimage.debian.org/debian-cd/7.8.0/amd64/iso-cd/debian-7.8.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n+Get the [Debian 7.8 net installer](http://cdimage.debian.org/cdimage/archive/7.8.0/amd64/iso-cd/debian-7.8.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n This DVD image can be validated using a SHA256 hashing tool, for example on\n Unixy OSes by entering the following in a terminal:\n "
      },
      {
        "sha": "d5ac70380f9622f2eabc46dcff40d68aa9ca2a56",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -4,6 +4,21 @@ release-notes at release time)\n Notable changes\n ===============\n \n+Random-cookie RPC authentication\n+---------------------------------\n+\n+When no `-rpcpassword` is specified, the daemon now uses a special 'cookie'\n+file for authentication. This file is generated with random content when the\n+daemon starts, and deleted when it exits. Its contents are used as\n+authentication token. Read access to this file controls who can access through\n+RPC. By default it is stored in the data directory but its location can be\n+overridden with the option `-rpccookiefile`.\n+\n+This is similar to Tor's CookieAuthentication: see\n+https://www.torproject.org/docs/tor-manual.html.en\n+\n+This allows running bitcoind without having to do any manual configuration.\n+\n Example header\n ----------------------\n "
      },
      {
        "sha": "5ecb9334f5481ce53eeec248aa82aca411be263d",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 26,
        "deletions": 21,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -25,7 +25,7 @@ Release Process\n \n ###update gitian\n \n- In order to take advantage of the new caching features in gitian, be sure to update to a recent version (e9741525c or higher is recommended)\n+ In order to take advantage of the new caching features in gitian, be sure to update to a recent version (`e9741525c` or later is recommended)\n \n ###perform gitian builds\n \n@@ -41,6 +41,8 @@ Release Process\n ###fetch and build inputs: (first time, or when dependency versions change)\n  \n \tmkdir -p inputs\n+\twget -P inputs https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n+\twget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n \n  Register and download the Apple SDK: (see OSX Readme for details)\n  \n@@ -64,51 +66,60 @@ Release Process\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n \tmv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n \t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-win --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+\t./bin/gsign --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+\tmv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n \tmv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n \t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-\tmv build/out/bitcoin-*-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n+\tmv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n \tmv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../\n \tpopd\n   Build output expected:\n \n   1. source tarball (bitcoin-${VERSION}.tar.gz)\n-  2. linux 32-bit and 64-bit binaries dist tarballs (bitcoin-${VERSION}-linux[32|64].tar.gz)\n-  3. windows 32-bit and 64-bit installers and dist zips (bitcoin-${VERSION}-win[32|64]-setup.exe, bitcoin-${VERSION}-win[32|64].zip)\n-  4. OSX unsigned installer (bitcoin-${VERSION}-osx-unsigned.dmg)\n-  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|win|osx-unsigned>/(your gitian key)/\n+  2. linux 32-bit and 64-bit dist tarballs (bitcoin-${VERSION}-linux[32|64].tar.gz)\n+  3. windows 32-bit and 64-bit unsigned installers and dist zips (bitcoin-${VERSION}-win[32|64]-setup-unsigned.exe, bitcoin-${VERSION}-win[32|64].zip)\n+  4. OSX unsigned installer and dist tarball (bitcoin-${VERSION}-osx-unsigned.dmg, bitcoin-${VERSION}-osx64.tar.gz)\n+  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your gitian key)/\n \n ###Next steps:\n \n Commit your signature to gitian.sigs:\n \n \tpushd gitian.sigs\n \tgit add ${VERSION}-linux/${SIGNER}\n-\tgit add ${VERSION}-win/${SIGNER}\n+\tgit add ${VERSION}-win-unsigned/${SIGNER}\n \tgit add ${VERSION}-osx-unsigned/${SIGNER}\n \tgit commit -a\n \tgit push  # Assuming you can push to the gitian.sigs tree\n \tpopd\n \n-  Wait for OSX detached signature:\n-\tOnce the OSX build has 3 matching signatures, Gavin will sign it with the apple App-Store key.\n-\tHe will then upload a detached signature to be combined with the unsigned app to create a signed binary.\n+  Wait for Windows/OSX detached signatures:\n+\tOnce the Windows/OSX builds each have 3 matching signatures, they will be signed with their respective release keys.\n+\tDetached signatures will then be committed to the bitcoin-detached-sigs repository, which can be combined with the unsigned apps to create signed binaries.\n \n   Create the signed OSX binary:\n \n \tpushd ./gitian-builder\n-\t# Fetch the signature as instructed by Gavin\n-\tcp signature.tar.gz inputs/\n-\t./bin/gbuild -i ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+\t./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n \tmv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n \tpopd\n \n-Commit your signature for the signed OSX binary:\n+  Create the signed Windows binaries:\n+\n+\tpushd ./gitian-builder\n+\t./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+\t./bin/gsign --signer $SIGNER --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+\tmv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n+\tmv build/out/bitcoin-*win32-setup.exe ../bitcoin-${VERSION}-win32-setup.exe\n+\tpopd\n+\n+Commit your signature for the signed OSX/Windows binaries:\n \n \tpushd gitian.sigs\n \tgit add ${VERSION}-osx-signed/${SIGNER}\n+\tgit add ${VERSION}-win-signed/${SIGNER}\n \tgit commit -a\n \tgit push  # Assuming you can push to the gitian.sigs tree\n \tpopd\n@@ -117,12 +128,6 @@ Commit your signature for the signed OSX binary:\n \n ### After 3 or more people have gitian-built and their results match:\n \n-- Perform code-signing.\n-\n-    - Code-sign Windows -setup.exe (in a Windows virtual machine using signtool)\n-\n-  Note: only Gavin has the code-signing keys currently.\n-\n - Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n ```bash\n sha256sum * > SHA256SUMS"
      },
      {
        "sha": "1fc32112ceabc6c9fa93a3cd9a363c4b08e69c58",
        "filename": "doc/shared-libraries.md",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/shared-libraries.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/shared-libraries.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/shared-libraries.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -0,0 +1,42 @@\n+Shared Libraries\n+================\n+\n+## bitcoinconsensus\n+\n+The purpose of this library is to make the verification functionality that is critical to Bitcoin's consensus available to other applications, e.g. to language bindings.\n+\n+### API\n+\n+The interface is defined in the C header `bitcoinconsensus.h` located in  `src/script/bitcoinconsensus.h`.\n+\n+#### Version\n+\n+`bitcoinconsensus_version` returns an `unsigned int` with the the API version *(currently at an experimental `0`)*.\n+\n+#### Script Validation\n+\n+`bitcoinconsensus_verify_script` returns an `int` with the status of the verification. It will be `1` if the input script correctly spends the previous output `scriptPubKey`.\n+\n+##### Parameters\n+- `const unsigned char *scriptPubKey` - The previous output script that encumbers spending.\n+- `unsigned int scriptPubKeyLen` - The number of bytes for the `scriptPubKey`.\n+- `const unsigned char *txTo` - The transaction with the input that is spending the previous output.\n+- `unsigned int txToLen` - The number of bytes for the `txTo`.\n+- `unsigned int nIn` - The index of the input in `txTo` that spends the `scriptPubKey`.\n+- `unsigned int flags` - The script validation flags *(see below)*.\n+- `bitcoinconsensus_error* err` - Will have the error/success code for the operation *(see below)*.\n+\n+##### Script Flags\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE`\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH` - Evaluate P2SH ([BIP16](https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki)) subscripts\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG` - Enforce strict DER ([BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)) compliance\n+\n+##### Errors\n+- `bitcoinconsensus_ERR_OK` - No errors with input parameters *(see the return value of `bitcoinconsensus_verify_script` for the verification status)*\n+- `bitcoinconsensus_ERR_TX_INDEX` - An invalid index for `txTo`\n+- `bitcoinconsensus_ERR_TX_SIZE_MISMATCH` - `txToLen` did not match with the size of `txTo`\n+- `bitcoinconsensus_ERR_DESERIALIZE` - An error deserializing `txTo`\n+\n+### Example Implementations\n+- [NBitcoin](https://github.com/NicolasDorier/NBitcoin/blob/master/NBitcoin/Script.cs#L814) (.NET Bindings)\n+- [node-libbitcoinconsensus](https://github.com/bitpay/node-libbitcoinconsensus) (Node.js Bindings)"
      },
      {
        "sha": "cf72a55b2090da476cb32facc7aa4a14ea24b942",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -64,6 +64,44 @@ Avoid dividing up a message into fragments. Translators see every string separat\n There have been difficulties with use of HTML in translation strings; translators should not be able to accidentally affect the formatting of messages.\n This may sometimes be at conflict with the recommendation in the previous section.\n \n+### Plurals\n+\n+Plurals can be complex in some languages. A quote from the gettext documentation:\n+\n+    In Polish we use e.g. plik (file) this way:\n+    1 plik,\n+    2,3,4 pliki,\n+    5-21 pliko'w,\n+    22-24 pliki,\n+    25-31 pliko'w\n+    and so on\n+\n+In Qt code use tr's third argument for optional plurality. For example:\n+\n+    tr(\"%n hour(s)\",\"\",secs/HOUR_IN_SECONDS);\n+    tr(\"%n day(s)\",\"\",secs/DAY_IN_SECONDS);\n+    tr(\"%n week(s)\",\"\",secs/WEEK_IN_SECONDS);\n+\n+This adds `<numerusform>`s to the respective `.ts` file, which can be translated separately depending on the language. In English, this is simply:\n+\n+    <message numerus=\"yes\">\n+        <source>%n active connection(s) to Bitcoin network</source>\n+        <translation>\n+            <numerusform>%n active connection to Bitcoin network</numerusform>\n+            <numerusform>%n active connections to Bitcoin network</numerusform>\n+        </translation>\n+    </message>\n+\n+Where it is possible try to avoid embedding numbers into the flow of the string at all. e.g.\n+\n+    WARNING: check your network connection, %d blocks received in the last %d hours (%d expected)\n+\n+versus\n+\n+    WARNING: check your network connection, less blocks (%d) were received in the last %n hours than expected (%d).\n+\n+The second example reduces the number of pluralized words that translators have to handle from three to one, at no cost to comprehensibility of the sentence.\n+\n ### String freezes\n \n During a string freeze (often before a major release), no translation strings are to be added, modified or removed."
      },
      {
        "sha": "72a282bc006d9029c25c6141c2b576f4e9f0010e",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -19,8 +19,8 @@ testScripts=(\n     'wallet.py'\n     'listtransactions.py'\n     'mempool_resurrect_test.py'\n-    'txn_doublespend.py'\n     'txn_doublespend.py --mineblock'\n+    'txn_clone.py'\n     'getchaintips.py'\n     'rawtransactions.py'\n     'rest.py'\n@@ -30,26 +30,30 @@ testScripts=(\n     'zapwallettxes.py'\n     'proxy_test.py'\n     'merkle_blocks.py'\n+    'fundrawtransaction.py'\n     'signrawtransactions.py'\n     'walletbackup.py'\n+    'nodehandling.py'\n+    'reindex.py'\n+    'decodescript.py'\n );\n testScriptsExt=(\n     'bipdersig-p2p.py'\n     'bipdersig.py'\n     'getblocktemplate_longpoll.py'\n     'getblocktemplate_proposals.py'\n+    'txn_doublespend.py'\n+    'txn_clone.py --mineblock'\n     'pruning.py'\n     'forknotify.py'\n     'invalidateblock.py'\n     'keypool.py'\n     'receivedby.py'\n-    'reindex.py'\n     'rpcbind_test.py'\n #   'script_test.py'\n     'smartfees.py'\n     'maxblocksinflight.py'\n     'invalidblockrequest.py'\n-    'rawtransactions.py'\n #    'forknotify.py'\n     'p2p-acceptblock.py'\n );"
      },
      {
        "sha": "cfda8fe91f8af7dcc277e4fb3c5ef43d5d386bce",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -12,10 +12,6 @@ Base class for new regression tests.\n ### [test_framework/util.py](test_framework/util.py)\n Generally useful functions.\n \n-Bash-based tests, to be ported to Python:\n------------------------------------------\n-- conflictedbalance.sh : More testing of malleable transaction handling\n-\n Notes\n =====\n \n@@ -25,7 +21,7 @@ Run all possible tests with `qa/pull-tester/rpc-tests.sh -extended`.\n \n Possible options:\n \n-````\n+```\n -h, --help       show this help message and exit\n   --nocleanup      Leave bitcoinds and test.* datadir on exit or error\n   --noshutdown     Don't stop bitcoinds after the test execution"
      },
      {
        "sha": "7e4409737437a139b105a0c83e295d1de5a34acb",
        "filename": "qa/rpc-tests/conflictedbalance.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 147,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab0ec6790355473e96176ec3c2c2b1564ddb296d/qa/rpc-tests/conflictedbalance.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab0ec6790355473e96176ec3c2c2b1564ddb296d/qa/rpc-tests/conflictedbalance.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/conflictedbalance.sh?ref=ab0ec6790355473e96176ec3c2c2b1564ddb296d",
        "patch": "@@ -1,147 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test marking of spent outputs\n-\n-# Create a transaction graph with four transactions,\n-# A/B/C/D\n-# C spends A\n-# D spends B and C\n-\n-# Then simulate C being mutated, to create C'\n-#  that is mined.\n-# A is still (correctly) considered spent.\n-# B should be treated as unspent\n-\n-if [ $# -lt 1 ]; then\n-        echo \"Usage: $0 path_to_binaries\"\n-        echo \"e.g. $0 ../../src\"\n-        echo \"Env vars BITCOIND and BITCOINCLI may be used to specify the exact binaries used\"\n-        exit 1\n-fi\n-\n-set -f\n-\n-BITCOIND=${BITCOIND:-${1}/bitcoind}\n-CLI=${BITCOINCLI:-${1}/bitcoin-cli}\n-\n-DIR=\"${BASH_SOURCE%/*}\"\n-SENDANDWAIT=\"${DIR}/send.sh\"\n-if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n-. \"$DIR/util.sh\"\n-\n-D=$(mktemp -d test.XXXXX)\n-\n-# Two nodes; one will play the part of merchant, the\n-# other an evil transaction-mutating miner.\n-\n-D1=${D}/node1\n-CreateDataDir $D1 port=11000 rpcport=11001\n-B1ARGS=\"-datadir=$D1 -debug=mempool\"\n-$BITCOIND $B1ARGS &\n-B1PID=$!\n-\n-D2=${D}/node2\n-CreateDataDir $D2 port=11010 rpcport=11011\n-B2ARGS=\"-datadir=$D2 -debug=mempool\"\n-$BITCOIND $B2ARGS &\n-B2PID=$!\n-\n-# Wait until both nodes are at the same block number\n-function WaitBlocks {\n-    while :\n-    do\n-        sleep 1\n-        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n-        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n-        if (( BLOCKS1 == BLOCKS2 ))\n-        then\n-            break\n-        fi\n-    done\n-}\n-\n-# Wait until node has $N peers\n-function WaitPeers {\n-    while :\n-    do\n-        declare -i PEERS=$( $CLI $1 getconnectioncount )\n-        if (( PEERS == \"$2\" ))\n-        then\n-            break\n-        fi\n-        sleep 1\n-    done\n-}\n-\n-echo \"Generating test blockchain...\"\n-\n-# Start with B2 connected to B1:\n-$CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n-WaitPeers \"$B1ARGS\" 1\n-\n-# 2 block, 50 XBT each == 100 XBT\n-# These will be transactions \"A\" and \"B\"\n-$CLI $B1ARGS generate 2\n-\n-WaitBlocks\n-# 100 blocks, 0 mature == 0 XBT\n-$CLI $B2ARGS generate 100\n-WaitBlocks\n-\n-CheckBalance \"$B1ARGS\" 100\n-CheckBalance \"$B2ARGS\" 0\n-\n-# restart B2 with no connection\n-$CLI $B2ARGS stop > /dev/null 2>&1\n-wait $B2PID\n-$BITCOIND $B2ARGS &\n-B2PID=$!\n-\n-B1ADDRESS=$( $CLI $B1ARGS getnewaddress )\n-B2ADDRESS=$( $CLI $B2ARGS getnewaddress )\n-\n-# Transaction C: send-to-self, spend A\n-TXID_C=$( $CLI $B1ARGS sendtoaddress $B1ADDRESS 50.0)\n-\n-# Transaction D: spends B and C\n-TXID_D=$( $CLI $B1ARGS sendtoaddress $B2ADDRESS 100.0)\n-\n-CheckBalance \"$B1ARGS\" 0\n-\n-# Mutate TXID_C and add it to B2's memory pool:\n-RAWTX_C=$( $CLI $B1ARGS getrawtransaction $TXID_C )\n-\n-# ... mutate C to create C'\n-L=${RAWTX_C:82:2}\n-NEWLEN=$( printf \"%x\" $(( 16#$L + 1 )) )\n-MUTATEDTX_C=${RAWTX_C:0:82}${NEWLEN}4c${RAWTX_C:84}\n-# ... give mutated tx1 to B2:\n-MUTATEDTXID=$( $CLI $B2ARGS sendrawtransaction $MUTATEDTX_C )\n-\n-echo \"TXID_C: \" $TXID_C\n-echo \"Mutated: \" $MUTATEDTXID\n-\n-# Re-connect nodes, and have both nodes mine some blocks:\n-$CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n-WaitPeers \"$B1ARGS\" 1\n-\n-# Having B2 mine the next block puts the mutated\n-# transaction C in the chain:\n-$CLI $B2ARGS generate 1\n-WaitBlocks\n-\n-# B1 should still be able to spend 100, because D is conflicted\n-# so does not count as a spend of B\n-CheckBalance \"$B1ARGS\" 100\n-\n-$CLI $B2ARGS stop > /dev/null 2>&1\n-wait $B2PID\n-$CLI $B1ARGS stop > /dev/null 2>&1\n-wait $B1PID\n-\n-echo \"Tests successful, cleaning up\"\n-rm -rf $D\n-exit 0"
      },
      {
        "sha": "ce3bc94ef7d51f1d89a73943b5cd12a80c006cd4",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "added",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -0,0 +1,116 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class DecodeScriptTest(BitcoinTestFramework):\n+    \"\"\"Tests decoding scripts via RPC command \"decodescript\".\"\"\"\n+\n+    def setup_chain(self):\n+        print('Initializing test directory ' + self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 1)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(1, self.options.tmpdir)\n+        self.is_network_split = False\n+\n+    def decodescript_script_sig(self):\n+        signature = '304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001'\n+        push_signature = '48' + signature\n+        public_key = '03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2'\n+        push_public_key = '21' + public_key\n+\n+        # below are test cases for all of the standard transaction types\n+\n+        # 1) P2PK scriptSig\n+        # the scriptSig of a public key scriptPubKey simply pushes a signature onto the stack\n+        rpc_result = self.nodes[0].decodescript(push_signature)\n+        assert_equal(signature, rpc_result['asm'])\n+\n+        # 2) P2PKH scriptSig\n+        rpc_result = self.nodes[0].decodescript(push_signature + push_public_key)\n+        assert_equal(signature + ' ' + public_key, rpc_result['asm'])\n+\n+        # 3) multisig scriptSig\n+        # this also tests the leading portion of a P2SH multisig scriptSig\n+        # OP_0 <A sig> <B sig>\n+        rpc_result = self.nodes[0].decodescript('00' + push_signature + push_signature)\n+        assert_equal('0 ' + signature + ' ' + signature, rpc_result['asm'])\n+\n+        # 4) P2SH scriptSig\n+        # an empty P2SH redeemScript is valid and makes for a very simple test case.\n+        # thus, such a spending scriptSig would just need to pass the outer redeemScript\n+        # hash test and leave true on the top of the stack.\n+        rpc_result = self.nodes[0].decodescript('5100')\n+        assert_equal('1 0', rpc_result['asm'])\n+\n+        # 5) null data scriptSig - no such thing because null data scripts can not be spent.\n+        # thus, no test case for that standard transaction type is here.\n+\n+    def decodescript_script_pub_key(self):\n+        public_key = '03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2'\n+        push_public_key = '21' + public_key\n+        public_key_hash = '11695b6cd891484c2d49ec5aa738ec2b2f897777'\n+        push_public_key_hash = '14' + public_key_hash\n+\n+        # below are test cases for all of the standard transaction types\n+\n+        # 1) P2PK scriptPubKey\n+        # <pubkey> OP_CHECKSIG\n+        rpc_result = self.nodes[0].decodescript(push_public_key + 'ac')\n+        assert_equal(public_key + ' OP_CHECKSIG', rpc_result['asm'])\n+\n+        # 2) P2PKH scriptPubKey\n+        # OP_DUP OP_HASH160 <PubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n+        rpc_result = self.nodes[0].decodescript('76a9' + push_public_key_hash + '88ac')\n+        assert_equal('OP_DUP OP_HASH160 ' + public_key_hash + ' OP_EQUALVERIFY OP_CHECKSIG', rpc_result['asm'])\n+\n+        # 3) multisig scriptPubKey\n+        # <m> <A pubkey> <B pubkey> <C pubkey> <n> OP_CHECKMULTISIG\n+        # just imagine that the pub keys used below are different.\n+        # for our purposes here it does not matter that they are the same even though it is unrealistic.\n+        rpc_result = self.nodes[0].decodescript('52' + push_public_key + push_public_key + push_public_key + '53ae')\n+        assert_equal('2 ' + public_key + ' ' + public_key + ' ' + public_key +  ' 3 OP_CHECKMULTISIG', rpc_result['asm'])\n+\n+        # 4) P2SH scriptPubKey\n+        # OP_HASH160 <Hash160(redeemScript)> OP_EQUAL.\n+        # push_public_key_hash here should actually be the hash of a redeem script.\n+        # but this works the same for purposes of this test.\n+        rpc_result = self.nodes[0].decodescript('a9' + push_public_key_hash + '87')\n+        assert_equal('OP_HASH160 ' + public_key_hash + ' OP_EQUAL', rpc_result['asm'])\n+\n+        # 5) null data scriptPubKey\n+        # use a signature look-alike here to make sure that we do not decode random data as a signature.\n+        # this matters if/when signature sighash decoding comes along.\n+        # would want to make sure that no such decoding takes place in this case.\n+        signature_imposter = '48304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001'\n+        # OP_RETURN <data>\n+        rpc_result = self.nodes[0].decodescript('6a' + signature_imposter)\n+        assert_equal('OP_RETURN ' + signature_imposter[2:], rpc_result['asm'])\n+\n+        # 6) a CLTV redeem script. redeem scripts are in-effect scriptPubKey scripts, so adding a test here.\n+        # OP_NOP2 is also known as OP_CHECKLOCKTIMEVERIFY.\n+        # just imagine that the pub keys used below are different.\n+        # for our purposes here it does not matter that they are the same even though it is unrealistic.\n+        #\n+        # OP_IF\n+        #   <receiver-pubkey> OP_CHECKSIGVERIFY\n+        # OP_ELSE\n+        #   <lock-until> OP_NOP2 OP_DROP\n+        # OP_ENDIF\n+        # <sender-pubkey> OP_CHECKSIG\n+        #\n+        # lock until block 500,000\n+        rpc_result = self.nodes[0].decodescript('63' + push_public_key + 'ad670320a107b17568' + push_public_key + 'ac')\n+        assert_equal('OP_IF ' + public_key + ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_NOP2 OP_DROP OP_ENDIF ' + public_key + ' OP_CHECKSIG', rpc_result['asm'])\n+\n+    def run_test(self):\n+        self.decodescript_script_sig()\n+        self.decodescript_script_pub_key()\n+\n+if __name__ == '__main__':\n+    DecodeScriptTest().main()\n+"
      },
      {
        "sha": "ce52247b2e4b9b08b63846610cd0904ad1188967",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "added",
        "additions": 545,
        "deletions": 0,
        "changes": 545,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -0,0 +1,545 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from pprint import pprint\n+from time import sleep\n+\n+# Create one-input, one-output, no-fee transaction:\n+class RawTransactionsTest(BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir)\n+\n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        print \"Mining blocks...\"\n+        feeTolerance = Decimal(0.00000002) #if the fee's positive delta is higher than this value tests will fail, neg. delta always fail the tests\n+\n+        self.nodes[2].generate(1)\n+        self.sync_all()\n+        self.nodes[0].generate(101)\n+        self.sync_all()\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5);\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0);\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0);\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        ###############\n+        # simple test #\n+        ###############\n+        inputs  = [ ]\n+        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        assert_equal(len(dec_tx['vin']) > 0, True) #test if we have enought inputs\n+\n+        ##############################\n+        # simple test with two coins #\n+        ##############################\n+        inputs  = [ ]\n+        outputs = { self.nodes[0].getnewaddress() : 2.2 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        assert_equal(len(dec_tx['vin']) > 0, True) #test if we have enough inputs\n+\n+        ##############################\n+        # simple test with two coins #\n+        ##############################\n+        inputs  = [ ]\n+        outputs = { self.nodes[0].getnewaddress() : 2.6 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        assert_equal(len(dec_tx['vin']) > 0, True)\n+        assert_equal(dec_tx['vin'][0]['scriptSig']['hex'], '')\n+\n+\n+        ################################\n+        # simple test with two outputs #\n+        ################################\n+        inputs  = [ ]\n+        outputs = { self.nodes[0].getnewaddress() : 2.6, self.nodes[1].getnewaddress() : 2.5 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']\n+\n+        assert_equal(len(dec_tx['vin']) > 0, True)\n+        assert_equal(dec_tx['vin'][0]['scriptSig']['hex'], '')\n+\n+\n+        #########################################################################\n+        # test a fundrawtransaction with a VIN greater than the required amount #\n+        #########################################################################\n+        utx = False\n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 5.0:\n+                utx = aUtx\n+                break;\n+\n+        assert_equal(utx!=False, True)\n+\n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n+        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']\n+\n+        assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n+\n+\n+\n+        #####################################################################\n+        # test a fundrawtransaction with which will not get a change output #\n+        #####################################################################\n+        utx = False\n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 5.0:\n+                utx = aUtx\n+                break;\n+\n+        assert_equal(utx!=False, True)\n+\n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n+        outputs = { self.nodes[0].getnewaddress() : Decimal(5.0) - fee - feeTolerance }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']\n+\n+        assert_equal(rawtxfund['changepos'], -1)\n+        assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n+\n+\n+\n+        #########################################################################\n+        # test a fundrawtransaction with a VIN smaller than the required amount #\n+        #########################################################################\n+        utx = False\n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 1.0:\n+                utx = aUtx\n+                break;\n+\n+        assert_equal(utx!=False, True)\n+\n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n+        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+\n+        # 4-byte version + 1-byte vin count + 36-byte prevout then script_len\n+        rawtx = rawtx[:82] + \"0100\" + rawtx[84:]\n+\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+        assert_equal(\"00\", dec_tx['vin'][0]['scriptSig']['hex'])\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        matchingOuts = 0\n+        for i, out in enumerate(dec_tx['vout']):\n+            totalOut += out['value']\n+            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+                matchingOuts+=1\n+            else:\n+                assert_equal(i, rawtxfund['changepos'])\n+\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+        assert_equal(\"00\", dec_tx['vin'][0]['scriptSig']['hex'])\n+\n+        assert_equal(matchingOuts, 1)\n+        assert_equal(len(dec_tx['vout']), 2)\n+\n+\n+        ###########################################\n+        # test a fundrawtransaction with two VINs #\n+        ###########################################\n+        utx  = False\n+        utx2 = False\n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 1.0:\n+                utx = aUtx\n+            if aUtx['amount'] == 5.0:\n+                utx2 = aUtx\n+\n+\n+        assert_equal(utx!=False, True)\n+\n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n+        outputs = { self.nodes[0].getnewaddress() : 6.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        matchingOuts = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']\n+            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+                matchingOuts+=1\n+\n+        assert_equal(matchingOuts, 1)\n+        assert_equal(len(dec_tx['vout']), 2)\n+\n+        matchingIns = 0\n+        for vinOut in dec_tx['vin']:\n+            for vinIn in inputs:\n+                if vinIn['txid'] == vinOut['txid']:\n+                    matchingIns+=1\n+\n+        assert_equal(matchingIns, 2) #we now must see two vins identical to vins given as params\n+\n+        #########################################################\n+        # test a fundrawtransaction with two VINs and two vOUTs #\n+        #########################################################\n+        utx  = False\n+        utx2 = False\n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 1.0:\n+                utx = aUtx\n+            if aUtx['amount'] == 5.0:\n+                utx2 = aUtx\n+\n+\n+        assert_equal(utx!=False, True)\n+\n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n+        outputs = { self.nodes[0].getnewaddress() : 6.0, self.nodes[0].getnewaddress() : 1.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        matchingOuts = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']\n+            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+                matchingOuts+=1\n+\n+        assert_equal(matchingOuts, 2)\n+        assert_equal(len(dec_tx['vout']), 3)\n+\n+        ##############################################\n+        # test a fundrawtransaction with invalid vin #\n+        ##############################################\n+        listunspent = self.nodes[2].listunspent()\n+        inputs  = [ {'txid' : \"1c7f966dab21119bac53213a2bc7532bff1fa844c124fd750a7d0b1332440bd1\", 'vout' : 0} ] #invalid vin!\n+        outputs = { self.nodes[0].getnewaddress() : 1.0}\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        errorString = \"\"\n+        try:\n+            rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        except JSONRPCException,e:\n+            errorString = e.error['message']\n+\n+        assert_equal(\"Insufficient\" in errorString, True);\n+\n+\n+\n+        ############################################################\n+        #compare fee of a standard pubkeyhash transaction\n+        inputs = []\n+        outputs = {self.nodes[1].getnewaddress():1.1}\n+        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n+\n+        #create same transaction over sendtoaddress\n+        txId = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1.1);\n+        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n+\n+        #compare fee\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n+        ############################################################\n+\n+        ############################################################\n+        #compare fee of a standard pubkeyhash transaction with multiple outputs\n+        inputs = []\n+        outputs = {self.nodes[1].getnewaddress():1.1,self.nodes[1].getnewaddress():1.2,self.nodes[1].getnewaddress():0.1,self.nodes[1].getnewaddress():1.3,self.nodes[1].getnewaddress():0.2,self.nodes[1].getnewaddress():0.3}\n+        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n+        #create same transaction over sendtoaddress\n+        txId = self.nodes[0].sendmany(\"\", outputs);\n+        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n+\n+        #compare fee\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n+        ############################################################\n+\n+\n+        ############################################################\n+        #compare fee of a 2of2 multisig p2sh transaction\n+\n+        # create 2of2 addr\n+        addr1 = self.nodes[1].getnewaddress()\n+        addr2 = self.nodes[1].getnewaddress()\n+\n+        addr1Obj = self.nodes[1].validateaddress(addr1)\n+        addr2Obj = self.nodes[1].validateaddress(addr2)\n+\n+        mSigObj = self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])\n+\n+        inputs = []\n+        outputs = {mSigObj:1.1}\n+        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n+\n+        #create same transaction over sendtoaddress\n+        txId = self.nodes[0].sendtoaddress(mSigObj, 1.1);\n+        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n+\n+        #compare fee\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n+        ############################################################\n+\n+\n+        ############################################################\n+        #compare fee of a standard pubkeyhash transaction\n+\n+        # create 4of5 addr\n+        addr1 = self.nodes[1].getnewaddress()\n+        addr2 = self.nodes[1].getnewaddress()\n+        addr3 = self.nodes[1].getnewaddress()\n+        addr4 = self.nodes[1].getnewaddress()\n+        addr5 = self.nodes[1].getnewaddress()\n+\n+        addr1Obj = self.nodes[1].validateaddress(addr1)\n+        addr2Obj = self.nodes[1].validateaddress(addr2)\n+        addr3Obj = self.nodes[1].validateaddress(addr3)\n+        addr4Obj = self.nodes[1].validateaddress(addr4)\n+        addr5Obj = self.nodes[1].validateaddress(addr5)\n+\n+        mSigObj = self.nodes[1].addmultisigaddress(4, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey'], addr4Obj['pubkey'], addr5Obj['pubkey']])\n+\n+        inputs = []\n+        outputs = {mSigObj:1.1}\n+        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n+\n+        #create same transaction over sendtoaddress\n+        txId = self.nodes[0].sendtoaddress(mSigObj, 1.1);\n+        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n+\n+        #compare fee\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n+        ############################################################\n+\n+\n+        ############################################################\n+        # spend a 2of2 multisig transaction over fundraw\n+\n+        # create 2of2 addr\n+        addr1 = self.nodes[2].getnewaddress()\n+        addr2 = self.nodes[2].getnewaddress()\n+\n+        addr1Obj = self.nodes[2].validateaddress(addr1)\n+        addr2Obj = self.nodes[2].validateaddress(addr2)\n+\n+        mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])\n+\n+\n+        # send 1.2 BTC to msig addr\n+        txId = self.nodes[0].sendtoaddress(mSigObj, 1.2);\n+        self.sync_all()\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+\n+        oldBalance = self.nodes[1].getbalance()\n+        inputs = []\n+        outputs = {self.nodes[1].getnewaddress():1.1}\n+        rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[2].fundrawtransaction(rawTx)\n+\n+        signedTx = self.nodes[2].signrawtransaction(fundedTx['hex'])\n+        txId = self.nodes[2].sendrawtransaction(signedTx['hex'])\n+        self.sync_all()\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+\n+        # make sure funds are received at node1\n+        assert_equal(oldBalance+Decimal('1.10000000'), self.nodes[1].getbalance())\n+\n+        ############################################################\n+        # locked wallet test\n+        self.nodes[1].encryptwallet(\"test\")\n+        self.nodes.pop(1)\n+        stop_nodes(self.nodes)\n+        wait_bitcoinds()\n+\n+        self.nodes = start_nodes(3, self.options.tmpdir)\n+\n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+        error = False\n+        try:\n+            self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.2);\n+        except:\n+            error = True\n+        assert(error)\n+\n+        oldBalance = self.nodes[0].getbalance()\n+\n+        inputs = []\n+        outputs = {self.nodes[0].getnewaddress():1.1}\n+        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n+\n+        #now we need to unlock\n+        self.nodes[1].walletpassphrase(\"test\", 100)\n+        signedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n+        txId = self.nodes[1].sendrawtransaction(signedTx['hex'])\n+        self.sync_all()\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+\n+        # make sure funds are received at node1\n+        assert_equal(oldBalance+Decimal('51.10000000'), self.nodes[0].getbalance())\n+\n+\n+\n+        ###############################################\n+        # multiple (~19) inputs tx test | Compare fee #\n+        ###############################################\n+\n+        #empty node1, send some small coins from node0 to node1\n+        self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True);\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        for i in range(0,20):\n+            self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01);\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        #fund a tx with ~20 small inputs\n+        inputs = []\n+        outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n+        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n+\n+        #create same transaction over sendtoaddress\n+        txId = self.nodes[1].sendmany(\"\", outputs);\n+        signedFee = self.nodes[1].getrawmempool(True)[txId]['fee']\n+\n+        #compare fee\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        assert(feeDelta >= 0 and feeDelta <= feeTolerance*19) #~19 inputs\n+\n+\n+        #############################################\n+        # multiple (~19) inputs tx test | sign/send #\n+        #############################################\n+\n+        #again, empty node1, send some small coins from node0 to node1\n+        self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True);\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        for i in range(0,20):\n+            self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01);\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        #fund a tx with ~20 small inputs\n+        oldBalance = self.nodes[0].getbalance()\n+\n+        inputs = []\n+        outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n+        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n+        fundedAndSignedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n+        txId = self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        assert_equal(oldBalance+Decimal('50.19000000'), self.nodes[0].getbalance()) #0.19+block reward\n+\n+        #####################################################\n+        # test fundrawtransaction with OP_RETURN and no vin #\n+        #####################################################\n+\n+        rawtx   = \"0100000000010000000000000000066a047465737400000000\"\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        assert_equal(len(dec_tx['vin']), 0)\n+        assert_equal(len(dec_tx['vout']), 1)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+\n+        assert_greater_than(len(dec_tx['vin']), 0) # at least one vin\n+        assert_equal(len(dec_tx['vout']), 2) # one change output added\n+\n+\n+if __name__ == '__main__':\n+    RawTransactionsTest().main()"
      },
      {
        "sha": "8ccb8212869589a3a6d45aac37d2978041cf7d1f",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Test REST interface\n+# Test rpc http basics\n #\n \n from test_framework.test_framework import BitcoinTestFramework\n@@ -20,83 +20,83 @@\n except ImportError:\n     import urlparse\n \n-class HTTPBasicsTest (BitcoinTestFramework):        \n+class HTTPBasicsTest (BitcoinTestFramework):\n     def setup_nodes(self):\n         return start_nodes(4, self.options.tmpdir, extra_args=[['-rpckeepalive=1'], ['-rpckeepalive=0'], [], []])\n \n-    def run_test(self):        \n-        \n+    def run_test(self):\n+\n         #################################################\n         # lowlevel check for http persistent connection #\n         #################################################\n         url = urlparse.urlparse(self.nodes[0].url)\n         authpair = url.username + ':' + url.password\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n-        \n+\n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n-        \n+\n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         conn.close()\n-        \n+\n         #same should be if we add keep-alive because this should be the std. behaviour\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair), \"Connection\": \"keep-alive\"}\n-        \n+\n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n-        \n+\n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         conn.close()\n-        \n+\n         #now do the same with \"Connection: close\"\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair), \"Connection\":\"close\"}\n-        \n+\n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, False) #now the connection must be closed after the response        \n-        \n+        assert_equal(conn.sock!=None, False) #now the connection must be closed after the response\n+\n         #node1 (2nd node) is running with disabled keep-alive option\n         urlNode1 = urlparse.urlparse(self.nodes[1].url)\n         authpair = urlNode1.username + ':' + urlNode1.password\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n-                \n+\n         conn = httplib.HTTPConnection(urlNode1.hostname, urlNode1.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, False) #connection must be closed because keep-alive was set to false\n-        \n+\n         #node2 (third node) is running with standard keep-alive parameters which means keep-alive is off\n         urlNode2 = urlparse.urlparse(self.nodes[2].url)\n         authpair = urlNode2.username + ':' + urlNode2.password\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n-                \n+\n         conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #connection must be closed because bitcoind should use keep-alive by default\n-        \n+\n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      },
      {
        "sha": "d89cfcf59bdcb5fac6d1a012c2910151c948fef3",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -0,0 +1,87 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test node handling\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import base64\n+\n+try:\n+    import http.client as httplib\n+except ImportError:\n+    import httplib\n+try:\n+    import urllib.parse as urlparse\n+except ImportError:\n+    import urlparse\n+\n+class NodeHandlingTest (BitcoinTestFramework):\n+    def run_test(self):\n+        ###########################\n+        # setban/listbanned tests #\n+        ###########################\n+        assert_equal(len(self.nodes[2].getpeerinfo()), 4) #we should have 4 nodes at this point\n+        self.nodes[2].setban(\"127.0.0.1\", \"add\")\n+        time.sleep(3) #wait till the nodes are disconected\n+        assert_equal(len(self.nodes[2].getpeerinfo()), 0) #all nodes must be disconnected at this point\n+        assert_equal(len(self.nodes[2].listbanned()), 1)\n+        self.nodes[2].clearbanned()\n+        assert_equal(len(self.nodes[2].listbanned()), 0)\n+        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n+        assert_equal(len(self.nodes[2].listbanned()), 1)\n+        try:\n+            self.nodes[2].setban(\"127.0.0.1\", \"add\") #throws exception because 127.0.0.1 is within range 127.0.0.0/24\n+        except:\n+            pass\n+        assert_equal(len(self.nodes[2].listbanned()), 1) #still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n+        try:\n+            self.nodes[2].setban(\"127.0.0.1\", \"remove\")\n+        except:\n+            pass\n+        assert_equal(len(self.nodes[2].listbanned()), 1)\n+        self.nodes[2].setban(\"127.0.0.0/24\", \"remove\")\n+        assert_equal(len(self.nodes[2].listbanned()), 0)\n+        self.nodes[2].clearbanned()\n+        assert_equal(len(self.nodes[2].listbanned()), 0)\n+\n+        ##test persisted banlist\n+        self.nodes[2].setban(\"127.0.0.0/32\", \"add\")\n+        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n+        self.nodes[2].setban(\"192.168.0.1\", \"add\", 1) #ban for 1 seconds\n+        self.nodes[2].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000) #ban for 1000 seconds\n+        listBeforeShutdown = self.nodes[2].listbanned();\n+        assert_equal(\"192.168.0.1/255.255.255.255\", listBeforeShutdown[2]['address']) #must be here\n+        time.sleep(2) #make 100% sure we expired 192.168.0.1 node time\n+\n+        #stop node\n+        stop_node(self.nodes[2], 2)\n+\n+        self.nodes[2] = start_node(2, self.options.tmpdir)\n+        listAfterShutdown = self.nodes[2].listbanned();\n+        assert_equal(\"127.0.0.0/255.255.255.0\", listAfterShutdown[0]['address'])\n+        assert_equal(\"127.0.0.0/255.255.255.255\", listAfterShutdown[1]['address'])\n+        assert_equal(\"2001:4000::/ffff:e000:0:0:0:0:0:0\", listAfterShutdown[2]['address'])\n+\n+        ###########################\n+        # RPC disconnectnode test #\n+        ###########################\n+        url = urlparse.urlparse(self.nodes[1].url)\n+        self.nodes[0].disconnectnode(url.hostname+\":\"+str(p2p_port(1)))\n+        time.sleep(2) #disconnecting a node needs a little bit of time\n+        for node in self.nodes[0].getpeerinfo():\n+            assert(node['addr'] != url.hostname+\":\"+str(p2p_port(1)))\n+\n+        connect_nodes_bi(self.nodes,0,1) #reconnect the node\n+        found = False\n+        for node in self.nodes[0].getpeerinfo():\n+            if node['addr'] == url.hostname+\":\"+str(p2p_port(1)):\n+                found = True\n+        assert(found)\n+\n+if __name__ == '__main__':\n+    NodeHandlingTest ().main ()"
      },
      {
        "sha": "3623c1616236b655aba2a1b61ba78f8e27b0fb8b",
        "filename": "qa/rpc-tests/proxy_test.py",
        "status": "modified",
        "additions": 48,
        "deletions": 14,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/proxy_test.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -68,10 +68,10 @@ def setup_nodes(self):\n             ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf1.addr),'-proxyrandomize=1'], \n             ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf1.addr),'-onion=%s:%i' % (self.conf2.addr),'-proxyrandomize=0'], \n             ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf2.addr),'-proxyrandomize=1'], \n-            ['-listen', '-debug=net', '-debug=proxy', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0']\n+            ['-listen', '-debug=net', '-debug=proxy', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n             ])\n \n-    def node_test(self, node, proxies, auth):\n+    def node_test(self, node, proxies, auth, test_onion=True):\n         rv = []\n         # Test: outgoing IPv4 connection through node\n         node.addnode(\"15.61.23.23:1234\", \"onetry\")\n@@ -99,17 +99,18 @@ def node_test(self, node, proxies, auth):\n             assert_equal(cmd.password, None)\n         rv.append(cmd)\n \n-        # Test: outgoing onion connection through node\n-        node.addnode(\"bitcoinostk4e4re.onion:8333\", \"onetry\")\n-        cmd = proxies[2].queue.get()\n-        assert(isinstance(cmd, Socks5Command))\n-        assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n-        assert_equal(cmd.addr, \"bitcoinostk4e4re.onion\")\n-        assert_equal(cmd.port, 8333)\n-        if not auth:\n-            assert_equal(cmd.username, None)\n-            assert_equal(cmd.password, None)\n-        rv.append(cmd)\n+        if test_onion:\n+            # Test: outgoing onion connection through node\n+            node.addnode(\"bitcoinostk4e4re.onion:8333\", \"onetry\")\n+            cmd = proxies[2].queue.get()\n+            assert(isinstance(cmd, Socks5Command))\n+            assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n+            assert_equal(cmd.addr, \"bitcoinostk4e4re.onion\")\n+            assert_equal(cmd.port, 8333)\n+            if not auth:\n+                assert_equal(cmd.username, None)\n+                assert_equal(cmd.password, None)\n+            rv.append(cmd)\n \n         # Test: outgoing DNS name connection through node\n         node.addnode(\"node.noumenon:8333\", \"onetry\")\n@@ -139,8 +140,41 @@ def run_test(self):\n         assert_equal(len(credentials), 4)\n \n         # proxy on IPv6 localhost\n-        self.node_test(self.nodes[3], [self.serv3, self.serv3, self.serv3, self.serv3], False)\n+        self.node_test(self.nodes[3], [self.serv3, self.serv3, self.serv3, self.serv3], False, False)\n+\n+        def networks_dict(d):\n+            r = {}\n+            for x in d['networks']:\n+                r[x['name']] = x\n+            return r\n+\n+        # test RPC getnetworkinfo\n+        n0 = networks_dict(self.nodes[0].getnetworkinfo())\n+        for net in ['ipv4','ipv6','onion']:\n+            assert_equal(n0[net]['proxy'], '%s:%i' % (self.conf1.addr))\n+            assert_equal(n0[net]['proxy_randomize_credentials'], True)\n+        assert_equal(n0['onion']['reachable'], True)\n+\n+        n1 = networks_dict(self.nodes[1].getnetworkinfo())\n+        for net in ['ipv4','ipv6']:\n+            assert_equal(n1[net]['proxy'], '%s:%i' % (self.conf1.addr))\n+            assert_equal(n1[net]['proxy_randomize_credentials'], False)\n+        assert_equal(n1['onion']['proxy'], '%s:%i' % (self.conf2.addr))\n+        assert_equal(n1['onion']['proxy_randomize_credentials'], False)\n+        assert_equal(n1['onion']['reachable'], True)\n         \n+        n2 = networks_dict(self.nodes[2].getnetworkinfo())\n+        for net in ['ipv4','ipv6','onion']:\n+            assert_equal(n2[net]['proxy'], '%s:%i' % (self.conf2.addr))\n+            assert_equal(n2[net]['proxy_randomize_credentials'], True)\n+        assert_equal(n2['onion']['reachable'], True)\n+\n+        n3 = networks_dict(self.nodes[3].getnetworkinfo())\n+        for net in ['ipv4','ipv6']:\n+            assert_equal(n3[net]['proxy'], '[%s]:%i' % (self.conf3.addr))\n+            assert_equal(n3[net]['proxy_randomize_credentials'], False)\n+        assert_equal(n3['onion']['reachable'], False)\n+\n if __name__ == '__main__':\n     ProxyTest().main()\n "
      },
      {
        "sha": "173faf736ec85c522320fa0b5787fed2dd006def",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -40,6 +40,7 @@ def run_test(self):\n \n         #prepare some coins for multiple *rawtransaction commands\n         self.nodes[2].generate(1)\n+        self.sync_all()\n         self.nodes[0].generate(101)\n         self.sync_all()\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5);"
      },
      {
        "sha": "1a2d326cc3b8aa8a751355133c5f4ddc6cafd510",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 35,
        "deletions": 4,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -235,12 +235,43 @@ def run_test(self):\n         assert_equal(response_header_str.encode(\"hex\")[0:160], response_header_hex_str[0:160])\n \n         # check json format\n-        json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(json_obj['hash'], bb_hash)\n+        block_json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n+        block_json_obj = json.loads(block_json_string)\n+        assert_equal(block_json_obj['hash'], bb_hash)\n+\n+        # compare with json block header\n+        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n+        assert_equal(response_header_json.status, 200)\n+        response_header_json_str = response_header_json.read()\n+        json_obj = json.loads(response_header_json_str)\n+        assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n+        assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n+\n+        #compare with normal RPC block response\n+        rpc_block_json = self.nodes[0].getblock(bb_hash)\n+        assert_equal(json_obj[0]['hash'],               rpc_block_json['hash'])\n+        assert_equal(json_obj[0]['confirmations'],      rpc_block_json['confirmations'])\n+        assert_equal(json_obj[0]['height'],             rpc_block_json['height'])\n+        assert_equal(json_obj[0]['version'],            rpc_block_json['version'])\n+        assert_equal(json_obj[0]['merkleroot'],         rpc_block_json['merkleroot'])\n+        assert_equal(json_obj[0]['time'],               rpc_block_json['time'])\n+        assert_equal(json_obj[0]['nonce'],              rpc_block_json['nonce'])\n+        assert_equal(json_obj[0]['bits'],               rpc_block_json['bits'])\n+        assert_equal(json_obj[0]['difficulty'],         rpc_block_json['difficulty'])\n+        assert_equal(json_obj[0]['chainwork'],          rpc_block_json['chainwork'])\n+        assert_equal(json_obj[0]['previousblockhash'],  rpc_block_json['previousblockhash'])\n+\n+        #see if we can get 5 headers in one response\n+        self.nodes[1].generate(5)\n+        self.sync_all()\n+        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n+        assert_equal(response_header_json.status, 200)\n+        response_header_json_str = response_header_json.read()\n+        json_obj = json.loads(response_header_json_str)\n+        assert_equal(len(json_obj), 5) #now we should have 5 header objects\n \n         # do tx test\n-        tx_hash = json_obj['tx'][0]['txid'];\n+        tx_hash = block_json_obj['tx'][0]['txid'];\n         json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"json\")\n         json_obj = json.loads(json_string)\n         assert_equal(json_obj['txid'], tx_hash)"
      },
      {
        "sha": "2d54cc6ded4233af6ddf89f80d9de9bb24e96a32",
        "filename": "qa/rpc-tests/send.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 31,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab0ec6790355473e96176ec3c2c2b1564ddb296d/qa/rpc-tests/send.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab0ec6790355473e96176ec3c2c2b1564ddb296d/qa/rpc-tests/send.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/send.sh?ref=ab0ec6790355473e96176ec3c2c2b1564ddb296d",
        "patch": "@@ -1,31 +0,0 @@\n-#!/bin/bash\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-TIMEOUT=10\n-SIGNAL=HUP\n-PIDFILE=.send.pid\n-if [ $# -eq 0 ]; then\n-  echo -e \"Usage:\\t$0 <cmd>\"\n-  echo -e \"\\tRuns <cmd> and wait ${TIMEOUT} seconds or until SIG${SIGNAL} is received.\"\n-  echo -e \"\\tReturns: 0 if SIG${SIGNAL} is received, 1 otherwise.\"\n-  echo -e \"Or:\\t$0 -STOP\"\n-  echo -e \"\\tsends SIG${SIGNAL} to running send.sh\"\n-  exit 0\n-fi\n-\n-if [ $1 = \"-STOP\" ]; then\n-  if [ -s ${PIDFILE} ]; then\n-      kill -s ${SIGNAL} $(<$PIDFILE 2>/dev/null) 2>/dev/null\n-  fi\n-  exit 0\n-fi\n-\n-trap '[[ ${PID} ]] && kill ${PID}' ${SIGNAL}\n-trap 'rm -f ${PIDFILE}' EXIT\n-echo $$ > ${PIDFILE}\n-\"$@\"\n-sleep ${TIMEOUT} & PID=$!\n-wait ${PID} && exit 1\n-\n-exit 0"
      },
      {
        "sha": "e8ced0e5bbd7b3090cfc49f463801beb6aee76a6",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "added",
        "additions": 169,
        "deletions": 0,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -0,0 +1,169 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test proper accounting with an equivalent malleability clone\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.authproxy import AuthServiceProxy, JSONRPCException\n+from decimal import Decimal\n+from test_framework.util import *\n+import os\n+import shutil\n+\n+class TxnMallTest(BitcoinTestFramework):\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n+                          help=\"Test double-spend of 1-confirmed transaction\")\n+\n+    def setup_network(self):\n+        # Start with split network:\n+        return super(TxnMallTest, self).setup_network(True)\n+\n+    def run_test(self):\n+        # All nodes should start with 1,250 BTC:\n+        starting_balance = 1250\n+        for i in range(4):\n+            assert_equal(self.nodes[i].getbalance(), starting_balance)\n+            self.nodes[i].getnewaddress(\"\")  # bug workaround, coins generated assigned to first getnewaddress!\n+\n+        # Assign coins to foo and bar accounts:\n+        self.nodes[0].settxfee(.001)\n+\n+        node0_address_foo = self.nodes[0].getnewaddress(\"foo\")\n+        fund_foo_txid = self.nodes[0].sendfrom(\"\", node0_address_foo, 1219)\n+        fund_foo_tx = self.nodes[0].gettransaction(fund_foo_txid)\n+\n+        node0_address_bar = self.nodes[0].getnewaddress(\"bar\")\n+        fund_bar_txid = self.nodes[0].sendfrom(\"\", node0_address_bar, 29)\n+        fund_bar_tx = self.nodes[0].gettransaction(fund_bar_txid)\n+\n+        assert_equal(self.nodes[0].getbalance(\"\"),\n+                     starting_balance - 1219 - 29 + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"])\n+\n+        # Coins are sent to node1_address\n+        node1_address = self.nodes[1].getnewaddress(\"from0\")\n+\n+        # Send tx1, and another transaction tx2 that won't be cloned \n+        txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 40, 0)\n+        txid2 = self.nodes[0].sendfrom(\"bar\", node1_address, 20, 0)\n+\n+        # Construct a clone of tx1, to be malleated \n+        rawtx1 = self.nodes[0].getrawtransaction(txid1,1)\n+        clone_inputs = [{\"txid\":rawtx1[\"vin\"][0][\"txid\"],\"vout\":rawtx1[\"vin\"][0][\"vout\"]}]\n+        clone_outputs = {rawtx1[\"vout\"][0][\"scriptPubKey\"][\"addresses\"][0]:rawtx1[\"vout\"][0][\"value\"],\n+                         rawtx1[\"vout\"][1][\"scriptPubKey\"][\"addresses\"][0]:rawtx1[\"vout\"][1][\"value\"]}\n+        clone_raw = self.nodes[0].createrawtransaction(clone_inputs, clone_outputs)\n+\n+        # 3 hex manipulations on the clone are required\n+\n+        # manipulation 1. sequence is at version+#inputs+input+sigstub\n+        posseq = 2*(4+1+36+1)\n+        seqbe = '%08x' % rawtx1[\"vin\"][0][\"sequence\"]\n+        clone_raw = clone_raw[:posseq] + seqbe[6:8] + seqbe[4:6] + seqbe[2:4] + seqbe[0:2] + clone_raw[posseq + 8:]\n+\n+        # manipulation 2. createrawtransaction randomizes the order of its outputs, so swap them if necessary.\n+        # output 0 is at version+#inputs+input+sigstub+sequence+#outputs\n+        # 40 BTC serialized is 00286bee00000000\n+        pos0 = 2*(4+1+36+1+4+1)\n+        hex40 = \"00286bee00000000\"\n+        output_len = 16 + 2 + 2 * int(\"0x\" + clone_raw[pos0 + 16 : pos0 + 16 + 2], 0)\n+        if (rawtx1[\"vout\"][0][\"value\"] == 40 and clone_raw[pos0 : pos0 + 16] != hex40 or\n+            rawtx1[\"vout\"][0][\"value\"] != 40 and clone_raw[pos0 : pos0 + 16] == hex40):\n+            output0 = clone_raw[pos0 : pos0 + output_len]\n+            output1 = clone_raw[pos0 + output_len : pos0 + 2 * output_len]\n+            clone_raw = clone_raw[:pos0] + output1 + output0 + clone_raw[pos0 + 2 * output_len:]\n+\n+        # manipulation 3. locktime is after outputs\n+        poslt = pos0 + 2 * output_len\n+        ltbe = '%08x' % rawtx1[\"locktime\"]\n+        clone_raw = clone_raw[:poslt] + ltbe[6:8] + ltbe[4:6] + ltbe[2:4] + ltbe[0:2] + clone_raw[poslt + 8:]\n+\n+        # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n+        # Don't send the clone anywhere yet\n+        tx1_clone = self.nodes[0].signrawtransaction(clone_raw, None, None, \"ALL|ANYONECANPAY\")\n+        assert_equal(tx1_clone[\"complete\"], True)\n+\n+        # Have node0 mine a block, if requested:\n+        if (self.options.mine_block):\n+            self.nodes[0].generate(1)\n+            sync_blocks(self.nodes[0:2])\n+\n+        tx1 = self.nodes[0].gettransaction(txid1)\n+        tx2 = self.nodes[0].gettransaction(txid2)\n+\n+        # Node0's balance should be starting balance, plus 50BTC for another\n+        # matured block, minus tx1 and tx2 amounts, and minus transaction fees:\n+        expected = starting_balance + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"]\n+        if self.options.mine_block: expected += 50\n+        expected += tx1[\"amount\"] + tx1[\"fee\"]\n+        expected += tx2[\"amount\"] + tx2[\"fee\"]\n+        assert_equal(self.nodes[0].getbalance(), expected)\n+\n+        # foo and bar accounts should be debited:\n+        assert_equal(self.nodes[0].getbalance(\"foo\", 0), 1219 + tx1[\"amount\"] + tx1[\"fee\"])\n+        assert_equal(self.nodes[0].getbalance(\"bar\", 0), 29 + tx2[\"amount\"] + tx2[\"fee\"])\n+\n+        if self.options.mine_block:\n+            assert_equal(tx1[\"confirmations\"], 1)\n+            assert_equal(tx2[\"confirmations\"], 1)\n+            # Node1's \"from0\" balance should be both transaction amounts:\n+            assert_equal(self.nodes[1].getbalance(\"from0\"), -(tx1[\"amount\"] + tx2[\"amount\"]))\n+        else:\n+            assert_equal(tx1[\"confirmations\"], 0)\n+            assert_equal(tx2[\"confirmations\"], 0)\n+\n+        # Send clone and its parent to miner\n+        self.nodes[2].sendrawtransaction(fund_foo_tx[\"hex\"])\n+        txid1_clone = self.nodes[2].sendrawtransaction(tx1_clone[\"hex\"])\n+        # ... mine a block...\n+        self.nodes[2].generate(1)\n+\n+        # Reconnect the split network, and sync chain:\n+        connect_nodes(self.nodes[1], 2)\n+        self.nodes[2].sendrawtransaction(fund_bar_tx[\"hex\"])\n+        self.nodes[2].sendrawtransaction(tx2[\"hex\"])\n+        self.nodes[2].generate(1)  # Mine another block to make sure we sync\n+        sync_blocks(self.nodes)\n+\n+        # Re-fetch transaction info:\n+        tx1 = self.nodes[0].gettransaction(txid1)\n+        tx1_clone = self.nodes[0].gettransaction(txid1_clone)\n+        tx2 = self.nodes[0].gettransaction(txid2)\n+        \n+        # Verify expected confirmations\n+        assert_equal(tx1[\"confirmations\"], -1)\n+        assert_equal(tx1_clone[\"confirmations\"], 2)\n+        assert_equal(tx2[\"confirmations\"], 1)\n+\n+        # Check node0's total balance; should be same as before the clone, + 100 BTC for 2 matured,\n+        # less possible orphaned matured subsidy\n+        expected += 100\n+        if (self.options.mine_block): \n+            expected -= 50\n+        assert_equal(self.nodes[0].getbalance(), expected)\n+        assert_equal(self.nodes[0].getbalance(\"*\", 0), expected)\n+\n+        # Check node0's individual account balances.\n+        # \"foo\" should have been debited by the equivalent clone of tx1\n+        assert_equal(self.nodes[0].getbalance(\"foo\"), 1219 + tx1[\"amount\"] + tx1[\"fee\"])\n+        # \"bar\" should have been debited by (possibly unconfirmed) tx2\n+        assert_equal(self.nodes[0].getbalance(\"bar\", 0), 29 + tx2[\"amount\"] + tx2[\"fee\"])\n+        # \"\" should have starting balance, less funding txes, plus subsidies\n+        assert_equal(self.nodes[0].getbalance(\"\", 0), starting_balance\n+                                                                - 1219\n+                                                                + fund_foo_tx[\"fee\"]\n+                                                                -   29\n+                                                                + fund_bar_tx[\"fee\"]\n+                                                                +  100)\n+\n+        # Node1's \"from0\" account balance\n+        assert_equal(self.nodes[1].getbalance(\"from0\", 0), -(tx1[\"amount\"] + tx2[\"amount\"]))\n+\n+if __name__ == '__main__':\n+    TxnMallTest().main()\n+"
      },
      {
        "sha": "36081127b4dbd4f14cbabedbe73f005163ad31cc",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 52,
        "deletions": 27,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Test proper accounting with malleable transactions\n+# Test proper accounting with a double-spend conflict\n #\n \n from test_framework.test_framework import BitcoinTestFramework\n@@ -31,28 +31,40 @@ def run_test(self):\n             self.nodes[i].getnewaddress(\"\")  # bug workaround, coins generated assigned to first getnewaddress!\n         \n         # Assign coins to foo and bar accounts:\n-        self.nodes[0].move(\"\", \"foo\", 1220)\n-        self.nodes[0].move(\"\", \"bar\", 30)\n-        assert_equal(self.nodes[0].getbalance(\"\"), 0)\n+        node0_address_foo = self.nodes[0].getnewaddress(\"foo\")\n+        fund_foo_txid = self.nodes[0].sendfrom(\"\", node0_address_foo, 1219)\n+        fund_foo_tx = self.nodes[0].gettransaction(fund_foo_txid)\n+\n+        node0_address_bar = self.nodes[0].getnewaddress(\"bar\")\n+        fund_bar_txid = self.nodes[0].sendfrom(\"\", node0_address_bar, 29)\n+        fund_bar_tx = self.nodes[0].gettransaction(fund_bar_txid)\n+\n+        assert_equal(self.nodes[0].getbalance(\"\"),\n+                     starting_balance - 1219 - 29 + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"])\n \n         # Coins are sent to node1_address\n         node1_address = self.nodes[1].getnewaddress(\"from0\")\n \n-        # First: use raw transaction API to send 1210 BTC to node1_address,\n+        # First: use raw transaction API to send 1240 BTC to node1_address,\n         # but don't broadcast:\n-        (total_in, inputs) = gather_inputs(self.nodes[0], 1210)\n-        change_address = self.nodes[0].getnewaddress(\"foo\")\n+        doublespend_fee = Decimal('-.02')\n+        rawtx_input_0 = {}\n+        rawtx_input_0[\"txid\"] = fund_foo_txid\n+        rawtx_input_0[\"vout\"] = find_output(self.nodes[0], fund_foo_txid, 1219)\n+        rawtx_input_1 = {}\n+        rawtx_input_1[\"txid\"] = fund_bar_txid\n+        rawtx_input_1[\"vout\"] = find_output(self.nodes[0], fund_bar_txid, 29)\n+        inputs = [rawtx_input_0, rawtx_input_1]\n+        change_address = self.nodes[0].getnewaddress()\n         outputs = {}\n-        outputs[change_address] = 40\n-        outputs[node1_address] = 1210\n+        outputs[node1_address] = 1240\n+        outputs[change_address] = 1248 - 1240 + doublespend_fee\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n         doublespend = self.nodes[0].signrawtransaction(rawtx)\n         assert_equal(doublespend[\"complete\"], True)\n \n-        # Create two transaction from node[0] to node[1]; the\n-        # second must spend change from the first because the first\n-        # spends all mature inputs:\n-        txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 1210, 0)\n+        # Create two spends using 1 50 BTC coin each\n+        txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 40, 0)\n         txid2 = self.nodes[0].sendfrom(\"bar\", node1_address, 20, 0)\n         \n         # Have node0 mine a block:\n@@ -64,16 +76,16 @@ def run_test(self):\n         tx2 = self.nodes[0].gettransaction(txid2)\n \n         # Node0's balance should be starting balance, plus 50BTC for another\n-        # matured block, minus 1210, minus 20, and minus transaction fees:\n-        expected = starting_balance\n+        # matured block, minus 40, minus 20, and minus transaction fees:\n+        expected = starting_balance + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"]\n         if self.options.mine_block: expected += 50\n         expected += tx1[\"amount\"] + tx1[\"fee\"]\n         expected += tx2[\"amount\"] + tx2[\"fee\"]\n         assert_equal(self.nodes[0].getbalance(), expected)\n \n         # foo and bar accounts should be debited:\n-        assert_equal(self.nodes[0].getbalance(\"foo\"), 1220+tx1[\"amount\"]+tx1[\"fee\"])\n-        assert_equal(self.nodes[0].getbalance(\"bar\"), 30+tx2[\"amount\"]+tx2[\"fee\"])\n+        assert_equal(self.nodes[0].getbalance(\"foo\", 0), 1219+tx1[\"amount\"]+tx1[\"fee\"])\n+        assert_equal(self.nodes[0].getbalance(\"bar\", 0), 29+tx2[\"amount\"]+tx2[\"fee\"])\n \n         if self.options.mine_block:\n             assert_equal(tx1[\"confirmations\"], 1)\n@@ -84,8 +96,10 @@ def run_test(self):\n             assert_equal(tx1[\"confirmations\"], 0)\n             assert_equal(tx2[\"confirmations\"], 0)\n         \n-        # Now give doublespend to miner:\n-        mutated_txid = self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n+        # Now give doublespend and its parents to miner:\n+        self.nodes[2].sendrawtransaction(fund_foo_tx[\"hex\"])\n+        self.nodes[2].sendrawtransaction(fund_bar_tx[\"hex\"])\n+        self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n         # ... mine a block...\n         self.nodes[2].generate(1)\n \n@@ -103,17 +117,28 @@ def run_test(self):\n         assert_equal(tx2[\"confirmations\"], -1)\n \n         # Node0's total balance should be starting balance, plus 100BTC for \n-        # two more matured blocks, minus 1210 for the double-spend:\n-        expected = starting_balance + 100 - 1210\n+        # two more matured blocks, minus 1240 for the double-spend, plus fees (which are\n+        # negative):\n+        expected = starting_balance + 100 - 1240 + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"] + doublespend_fee\n         assert_equal(self.nodes[0].getbalance(), expected)\n         assert_equal(self.nodes[0].getbalance(\"*\"), expected)\n \n-        # foo account should be debited, but bar account should not:\n-        assert_equal(self.nodes[0].getbalance(\"foo\"), 1220-1210)\n-        assert_equal(self.nodes[0].getbalance(\"bar\"), 30)\n-\n-        # Node1's \"from\" account balance should be just the mutated send:\n-        assert_equal(self.nodes[1].getbalance(\"from0\"), 1210)\n+        # Final \"\" balance is starting_balance - amount moved to accounts - doublespend + subsidies +\n+        # fees (which are negative)\n+        assert_equal(self.nodes[0].getbalance(\"foo\"), 1219)\n+        assert_equal(self.nodes[0].getbalance(\"bar\"), 29)\n+        assert_equal(self.nodes[0].getbalance(\"\"), starting_balance\n+                                                              -1219\n+                                                              -  29\n+                                                              -1240\n+                                                              + 100\n+                                                              + fund_foo_tx[\"fee\"]\n+                                                              + fund_bar_tx[\"fee\"]\n+                                                              + doublespend_fee)\n+\n+        # Node1's \"from0\" account balance should be just the doublespend:\n+        assert_equal(self.nodes[1].getbalance(\"from0\"), 1240)\n \n if __name__ == '__main__':\n     TxnMallTest().main()\n+"
      },
      {
        "sha": "c2b7004308094ce0362fa61ae8f81250753ce20a",
        "filename": "qa/rpc-tests/util.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 103,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab0ec6790355473e96176ec3c2c2b1564ddb296d/qa/rpc-tests/util.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab0ec6790355473e96176ec3c2c2b1564ddb296d/qa/rpc-tests/util.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.sh?ref=ab0ec6790355473e96176ec3c2c2b1564ddb296d",
        "patch": "@@ -1,103 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Functions used by more than one test\n-\n-function echoerr {\n-  echo \"$@\" 1>&2;\n-}\n-\n-# Usage: ExtractKey <key> \"<json_object_string>\"\n-# Warning: this will only work for the very-well-behaved\n-# JSON produced by bitcoind, do NOT use it to try to\n-# parse arbitrary/nested/etc JSON.\n-function ExtractKey {\n-    echo $2 | tr -d ' \"{}\\n' | awk -v RS=',' -F: \"\\$1 ~ /$1/ { print \\$2}\"\n-}\n-\n-function CreateDataDir {\n-  DIR=$1\n-  mkdir -p $DIR\n-  CONF=$DIR/bitcoin.conf\n-  echo \"regtest=1\" >> $CONF\n-  echo \"keypool=2\" >> $CONF\n-  echo \"rpcuser=rt\" >> $CONF\n-  echo \"rpcpassword=rt\" >> $CONF\n-  echo \"rpcwait=1\" >> $CONF\n-  echo \"walletnotify=${SENDANDWAIT} -STOP\" >> $CONF\n-  shift\n-  while (( \"$#\" )); do\n-      echo $1 >> $CONF\n-      shift\n-  done\n-}\n-\n-function AssertEqual {\n-  if (( $( echo \"$1 == $2\" | bc ) == 0 ))\n-  then\n-    echoerr \"AssertEqual: $1 != $2\"\n-    declare -f CleanUp > /dev/null 2>&1\n-    if [[ $? -eq 0 ]] ; then\n-        CleanUp\n-    fi\n-    exit 1\n-  fi\n-}\n-\n-# CheckBalance -datadir=... amount account minconf\n-function CheckBalance {\n-  declare -i EXPECT=\"$2\"\n-  B=$( $CLI $1 getbalance $3 $4 )\n-  if (( $( echo \"$B == $EXPECT\" | bc ) == 0 ))\n-  then\n-    echoerr \"bad balance: $B (expected $2)\"\n-    declare -f CleanUp > /dev/null 2>&1\n-    if [[ $? -eq 0 ]] ; then\n-        CleanUp\n-    fi\n-    exit 1\n-  fi\n-}\n-\n-# Use: Address <datadir> [account]\n-function Address {\n-  $CLI $1 getnewaddress $2\n-}\n-\n-# Send from to amount\n-function Send {\n-  from=$1\n-  to=$2\n-  amount=$3\n-  address=$(Address $to)\n-  txid=$( ${SENDANDWAIT} $CLI $from sendtoaddress $address $amount )\n-}\n-\n-# Use: Unspent <datadir> <n'th-last-unspent> <var>\n-function Unspent {\n-  local r=$( $CLI $1 listunspent | awk -F'[ |:,\"]+' \"\\$2 ~ /$3/ { print \\$3 }\" | tail -n $2 | head -n 1)\n-  echo $r\n-}\n-\n-# Use: CreateTxn1 <datadir> <n'th-last-unspent> <destaddress>\n-# produces hex from signrawtransaction\n-function CreateTxn1 {\n-  TXID=$(Unspent $1 $2 txid)\n-  AMOUNT=$(Unspent $1 $2 amount)\n-  VOUT=$(Unspent $1 $2 vout)\n-  RAWTXN=$( $CLI $1 createrawtransaction \"[{\\\"txid\\\":\\\"$TXID\\\",\\\"vout\\\":$VOUT}]\" \"{\\\"$3\\\":$AMOUNT}\")\n-  ExtractKey hex \"$( $CLI $1 signrawtransaction $RAWTXN )\"\n-}\n-\n-# Use: SendRawTxn <datadir> <hex_txn_data>\n-function SendRawTxn {\n-  ${SENDANDWAIT} $CLI $1 sendrawtransaction $2\n-}\n-\n-# Use: GetBlocks <datadir>\n-# returns number of blocks from getinfo\n-function GetBlocks {\n-    $CLI $1 getblockcount\n-}"
      },
      {
        "sha": "3dba6d8a6482996b4e9fc9cd4c134b41aecae080",
        "filename": "share/seeds/nodes_main.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 540,
        "changes": 540,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab0ec6790355473e96176ec3c2c2b1564ddb296d/share/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab0ec6790355473e96176ec3c2c2b1564ddb296d/share/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/seeds/nodes_main.txt?ref=ab0ec6790355473e96176ec3c2c2b1564ddb296d",
        "patch": "@@ -1,540 +0,0 @@\n-# List of fixed seed nodes for main network\n-\n-# IPv4 nodes (generated using contrib/seeds/makeseeds.py)\n-1.33.197.110\n-1.34.180.245\n-1.202.128.218\n-2.35.195.25\n-5.100.123.19\n-5.175.145.169\n-5.199.133.193\n-5.199.151.10\n-5.228.1.230\n-14.200.200.145\n-18.228.0.188\n-18.228.0.200\n-23.30.243.153\n-23.88.232.49\n-23.99.105.9\n-23.226.137.208\n-23.227.177.161\n-23.227.191.50\n-23.229.45.32\n-23.236.144.69\n-23.253.148.113\n-23.253.241.22\n-23.255.227.231\n-24.20.205.222\n-24.23.120.252\n-24.94.98.96\n-24.98.95.201\n-24.111.90.55\n-24.119.119.105\n-24.138.25.149\n-31.3.214.45\n-31.186.87.46\n-31.186.101.98\n-31.186.250.186\n-31.204.153.107\n-37.44.16.231\n-37.44.44.11\n-37.120.168.204\n-37.143.86.26\n-37.187.75.24\n-37.188.68.169\n-37.192.95.150\n-37.201.246.116\n-37.205.10.140\n-46.10.210.17\n-46.19.138.154\n-46.28.204.123\n-46.28.205.67\n-46.38.235.229\n-46.163.76.230\n-46.166.162.91\n-46.173.190.50\n-46.227.66.132\n-46.229.238.187\n-46.236.116.209\n-47.55.14.65\n-50.7.252.229\n-50.46.159.91\n-50.78.49.181\n-50.78.231.57\n-50.79.153.65\n-50.116.34.44\n-50.126.86.253\n-50.142.41.23\n-50.199.113.193\n-50.200.78.107\n-50.206.138.177\n-50.252.52.49\n-54.165.25.75\n-54.169.107.40\n-54.179.190.56\n-54.187.82.121\n-54.246.85.246\n-58.74.7.205\n-58.96.183.121\n-61.62.58.38\n-61.63.91.72\n-61.63.91.112\n-61.72.211.228\n-62.43.40.154\n-62.43.130.178\n-62.80.185.213\n-62.109.49.26\n-62.173.139.58\n-62.181.238.186\n-62.210.114.127\n-63.141.228.138\n-63.153.213.78\n-63.223.84.145\n-63.251.88.112\n-64.31.110.50\n-64.34.121.45\n-64.114.6.42\n-64.140.125.98\n-64.156.193.100\n-65.30.47.116\n-65.35.132.177\n-65.96.193.165\n-65.111.189.26\n-66.68.10.30\n-66.114.33.250\n-66.130.46.63\n-66.175.215.135\n-66.190.253.165\n-66.194.38.254\n-66.244.98.111\n-67.162.238.30\n-67.169.255.17\n-67.183.173.25\n-67.219.233.140\n-67.227.240.115\n-67.247.222.71\n-68.43.114.66\n-68.52.33.36\n-68.198.245.241\n-69.12.226.165\n-69.13.198.188\n-69.15.179.62\n-69.39.239.47\n-69.47.45.87\n-69.62.217.206\n-69.64.42.31\n-69.64.81.61\n-69.67.219.200\n-69.90.132.157\n-69.94.30.177\n-69.136.175.241\n-70.61.97.228\n-70.123.118.132\n-71.59.152.182\n-71.198.248.151\n-71.200.242.89\n-71.225.179.157\n-72.14.187.51\n-72.38.34.180\n-72.52.72.187\n-72.91.144.182\n-72.167.49.217\n-72.201.243.55\n-72.223.60.249\n-72.228.153.102\n-73.26.101.228\n-73.50.158.200\n-73.181.204.170\n-74.57.199.180\n-74.63.222.226\n-74.81.231.21\n-74.193.126.82\n-74.207.235.164\n-75.83.197.114\n-75.144.114.9\n-76.112.5.247\n-76.174.20.247\n-77.37.240.142\n-77.57.202.107\n-77.172.123.53\n-77.221.91.253\n-77.235.48.48\n-77.245.78.2\n-78.8.58.249\n-78.27.191.182\n-78.129.236.141\n-78.131.88.47\n-78.157.205.6\n-79.132.230.144\n-79.143.188.155\n-79.160.221.140\n-79.161.111.114\n-80.100.189.3\n-80.147.140.121\n-80.203.75.133\n-80.220.99.227\n-80.222.20.169\n-80.241.1.7\n-81.23.191.243\n-81.38.11.202\n-81.80.9.71\n-81.110.213.165\n-81.133.155.237\n-81.171.34.37\n-81.181.155.180\n-82.39.156.137\n-82.73.161.95\n-82.130.45.40\n-82.165.153.47\n-82.168.128.133\n-82.179.225.118\n-82.194.245.158\n-82.199.102.10\n-82.211.30.243\n-82.217.133.145\n-82.221.128.35\n-82.221.131.177\n-82.233.225.205\n-83.0.249.146\n-83.89.31.249\n-83.128.29.231\n-83.128.253.142\n-83.143.130.56\n-83.150.2.99\n-83.150.9.196\n-83.161.64.45\n-83.212.103.212\n-83.212.111.114\n-83.246.75.8\n-83.254.81.31\n-83.254.150.54\n-84.2.34.104\n-84.15.61.60\n-84.17.25.135\n-84.42.144.19\n-84.212.210.135\n-84.215.165.231\n-84.238.140.176\n-84.240.31.184\n-85.25.214.137\n-85.139.163.132\n-85.199.4.228\n-85.214.61.209\n-85.214.108.77\n-86.123.16.17\n-87.48.42.199\n-87.104.168.104\n-87.229.73.171\n-87.236.196.77\n-88.97.56.98\n-88.134.178.89\n-88.150.233.19\n-88.168.133.3\n-88.208.18.246\n-88.208.33.202\n-89.18.28.21\n-89.85.220.84\n-89.163.227.28\n-89.184.83.60\n-89.231.96.83\n-89.236.49.117\n-91.90.66.209\n-91.106.194.97\n-91.134.75.115\n-91.152.193.36\n-91.152.219.35\n-91.197.10.234\n-91.209.77.101\n-91.210.106.147\n-91.214.200.205\n-91.223.115.38\n-91.234.48.232\n-91.250.86.18\n-92.27.7.209\n-92.255.207.73\n-93.74.163.234\n-93.84.114.106\n-93.152.166.29\n-93.171.216.221\n-93.185.177.71\n-94.19.12.244\n-94.42.115.50\n-94.79.177.206\n-94.136.147.119\n-94.143.245.5\n-94.188.50.39\n-94.190.227.112\n-94.198.135.29\n-94.226.107.86\n-94.242.219.90\n-94.242.229.168\n-94.244.160.84\n-95.31.10.209\n-95.85.25.41\n-95.105.161.136\n-95.154.165.45\n-95.154.200.216\n-95.167.109.125\n-95.211.125.231\n-95.211.216.235\n-96.33.25.17\n-96.43.130.178\n-97.118.8.236\n-98.102.6.125\n-98.202.20.45\n-98.217.125.225\n-98.234.210.111\n-98.237.20.123\n-98.255.144.176\n-99.113.64.43\n-99.229.22.8\n-103.1.212.19\n-103.30.42.189\n-103.224.165.48\n-103.243.94.140\n-104.131.107.107\n-104.131.116.184\n-104.143.0.156\n-104.219.184.9\n-106.185.38.174\n-107.6.4.145\n-107.150.8.27\n-107.150.33.20\n-107.170.228.129\n-107.170.240.173\n-108.51.20.86\n-108.61.149.222\n-108.61.151.172\n-108.161.129.247\n-108.170.140.21\n-109.60.211.216\n-109.73.42.36\n-109.73.172.138\n-109.163.235.239\n-109.190.196.220\n-109.201.135.216\n-109.228.152.2\n-109.228.154.81\n-109.230.220.125\n-109.234.156.218\n-109.235.49.27\n-109.235.69.84\n-112.124.71.0\n-113.146.68.251\n-115.29.17.82\n-115.70.176.17\n-117.41.162.184\n-118.27.8.170\n-119.230.7.211\n-119.246.71.52\n-121.172.8.100\n-122.128.109.148\n-123.231.224.63\n-128.175.195.31\n-128.199.164.96\n-128.199.254.244\n-129.97.69.76\n-129.123.7.7\n-129.123.7.39\n-129.186.17.17\n-131.247.169.190\n-133.242.209.63\n-134.102.94.38\n-134.119.17.145\n-137.116.160.176\n-137.226.34.42\n-138.210.217.170\n-141.255.166.194\n-143.215.129.126\n-144.76.244.19\n-146.148.52.162\n-146.148.80.57\n-146.185.19.30\n-146.185.142.86\n-146.185.253.51\n-148.251.6.214\n-149.154.155.235\n-149.210.133.244\n-151.224.248.252\n-153.121.75.229\n-153.127.251.67\n-154.20.2.139\n-157.13.61.5\n-158.58.173.48\n-159.253.23.132\n-162.209.110.218\n-162.213.254.205\n-162.239.254.100\n-162.242.150.39\n-162.243.81.138\n-162.243.235.56\n-162.244.79.16\n-162.245.217.119\n-162.248.102.117\n-162.251.108.53\n-162.254.149.139\n-162.255.116.78\n-166.70.94.106\n-167.88.45.124\n-167.88.120.210\n-173.26.49.43\n-173.30.14.6\n-173.80.114.197\n-173.167.214.243\n-173.208.219.108\n-173.220.67.156\n-173.236.101.34\n-173.246.107.34\n-173.255.237.241\n-174.2.213.209\n-174.51.23.224\n-174.51.123.159\n-174.57.212.121\n-174.109.33.28\n-175.126.124.91\n-175.126.124.92\n-176.10.116.242\n-176.36.35.126\n-176.36.99.222\n-176.124.110.47\n-176.194.33.44\n-176.223.201.198\n-178.62.26.83\n-178.62.36.48\n-178.62.212.141\n-178.62.254.59\n-178.78.250.3\n-178.155.86.226\n-178.175.134.35\n-178.248.111.4\n-178.254.1.170\n-178.254.34.161\n-179.43.114.14\n-182.213.208.28\n-184.68.2.46\n-184.72.238.42\n-184.94.226.34\n-184.94.227.58\n-184.107.139.58\n-184.107.206.45\n-185.10.48.117\n-185.21.216.156\n-185.38.47.224\n-185.45.192.129\n-185.53.129.230\n-185.53.131.114\n-185.55.53.61\n-185.55.53.63\n-185.61.119.2\n-185.61.148.203\n-186.2.167.23\n-188.92.75.178\n-188.122.92.134\n-188.138.9.208\n-188.165.209.148\n-188.226.206.239\n-190.10.8.124\n-190.10.10.147\n-192.0.130.142\n-192.3.89.159\n-192.73.234.138\n-192.75.95.107\n-192.95.100.102\n-192.155.84.181\n-192.169.233.206\n-192.198.93.86\n-192.227.135.216\n-193.0.109.3\n-193.77.50.208\n-193.109.68.62\n-193.150.121.37\n-193.224.69.98\n-194.79.8.37\n-194.141.86.10\n-195.12.180.94\n-195.56.63.10\n-195.116.93.93\n-195.154.174.226\n-195.159.111.98\n-195.169.138.2\n-195.189.126.35\n-195.197.175.190\n-197.242.93.82\n-198.11.214.147\n-198.49.41.21\n-199.33.124.186\n-199.204.186.146\n-199.233.238.115\n-199.241.189.66\n-202.60.68.242\n-202.60.69.232\n-203.183.151.39\n-203.219.14.204\n-204.44.123.109\n-204.44.123.162\n-204.45.120.178\n-206.190.134.44\n-206.248.184.127\n-207.244.73.8\n-208.66.30.27\n-209.81.9.223\n-209.105.243.229\n-209.126.70.159\n-209.140.30.169\n-209.165.128.235\n-209.190.2.242\n-210.66.254.236\n-210.73.27.33\n-211.72.66.229\n-212.25.37.124\n-212.71.235.114\n-212.71.252.109\n-212.114.48.31\n-212.174.151.118\n-213.66.205.194\n-213.129.248.139\n-213.136.87.34\n-213.165.82.133\n-213.167.17.6\n-213.179.158.253\n-213.189.53.125\n-213.222.208.93\n-216.49.158.161\n-216.55.143.154\n-216.131.91.100\n-216.245.206.181\n-216.250.138.230\n-217.11.225.189\n-217.23.6.133\n-217.75.88.178\n-217.172.143.140\n-217.195.169.209\n-217.196.248.106\n-219.138.161.162\n-222.167.248.90\n-223.18.254.55\n-\n-# Onion nodes\n-bitcoinostk4e4re.onion:8333\n-5k4vwyy5stro33fb.onion:8333\n-zy3kdqowmrb7xm7h.onion:8333\n-e3tn727fywnioxrc.onion:8333\n-kjy2eqzk4zwi5zd3.onion:8333\n-pt2awtcs2ulm75ig.onion:8333\n-td7tgof3imei3fm6.onion:8333\n-czsbwh4pq4mh3izl.onion:8333\n-xdnigz4qn5dbbw2t.onion:8333\n-ymnsfdejmc74vcfb.onion:7033\n-jxrvw5iqizppbgml.onion:8333\n-bk5ejfe56xakvtkk.onion:8333\n-szsm43ou7otwwyfv.onion:8333\n-5ghqw4wj6hpgfvdg.onion:8333\n-evolynhit7shzeet.onion:8333\n-4crhf372poejlc44.onion:8333\n-tfu4kqfhsw5slqp2.onion:8333\n-i2r5tbaizb75h26f.onion:8333\n-btcnet3utgzyz2bf.onion:8333\n-vso3r6cmjoomhhgg.onion:8333\n-pqosrh6wfaucet32.onion:8333\n-zy3kdqowmrb7xm7h.onion:8333\n-r4de4zf4lyniu4mx.onion:8444"
      },
      {
        "sha": "71782836feb433d40f4ea56020099b42193aaee7",
        "filename": "share/seeds/nodes_test.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab0ec6790355473e96176ec3c2c2b1564ddb296d/share/seeds/nodes_test.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab0ec6790355473e96176ec3c2c2b1564ddb296d/share/seeds/nodes_test.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/seeds/nodes_test.txt?ref=ab0ec6790355473e96176ec3c2c2b1564ddb296d",
        "patch": "@@ -1,5 +0,0 @@\n-# List of fixed seed nodes for testnet\n-\n-# Onion nodes\n-thfsmmn2jbitcoin.onion\n-it2pj4f7657g3rhi.onion"
      },
      {
        "sha": "cc8dded413361c7a81c7bee8ea0cfe34d32ab4db",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -94,6 +94,7 @@ BITCOIN_CORE_H = \\\n   consensus/params.h \\\n   consensus/validation.h \\\n   core_io.h \\\n+  core_memusage.h \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n   hash.h \\\n@@ -111,6 +112,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   noui.h \\\n   policy/fees.h \\\n+  policy/policy.h \\\n   pow.h \\\n   primitives/block.h \\\n   primitives/transaction.h \\\n@@ -176,6 +178,7 @@ libbitcoin_server_a_SOURCES = \\\n   net.cpp \\\n   noui.cpp \\\n   policy/fees.cpp \\\n+  policy/policy.cpp \\\n   pow.cpp \\\n   rest.cpp \\\n   rpcblockchain.cpp \\"
      },
      {
        "sha": "2ec3468e060de5fc59cd93031dfd25cc14b40ec5",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -322,7 +322,7 @@ RES_MOVIES = $(wildcard qt/res/movies/spinner-*.png)\n BITCOIN_RC = qt/res/bitcoin-qt-res.rc\n \n BITCOIN_QT_INCLUDES = -I$(builddir)/qt -I$(srcdir)/qt -I$(srcdir)/qt/forms \\\n-  -I$(builddir)/qt/forms\n+  -I$(builddir)/qt/forms -DQT_NO_KEYWORDS\n \n qt_libbitcoinqt_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_DBUS_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)"
      },
      {
        "sha": "b605f4351dc83399013bb88e798799c546ca467a",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -8,8 +8,6 @@\n #include \"serialize.h\"\n #include \"streams.h\"\n \n-using namespace std;\n-\n int CAddrInfo::GetTriedBucket(const uint256& nKey) const\n {\n     uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetKey()).GetHash().GetCheapHash();\n@@ -68,7 +66,7 @@ double CAddrInfo::GetChance(int64_t nNow) const\n         fChance *= 0.01;\n \n     // deprioritize 66% after each failed attempt, but at most 1/28th to avoid the search taking forever or overly penalizing outages.\n-    fChance *= pow(0.66, min(nAttempts, 8));\n+    fChance *= pow(0.66, std::min(nAttempts, 8));\n \n     return fChance;\n }\n@@ -258,7 +256,7 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n         bool fCurrentlyOnline = (GetAdjustedTime() - addr.nTime < 24 * 60 * 60);\n         int64_t nUpdateInterval = (fCurrentlyOnline ? 60 * 60 : 24 * 60 * 60);\n         if (addr.nTime && (!pinfo->nTime || pinfo->nTime < addr.nTime - nUpdateInterval - nTimePenalty))\n-            pinfo->nTime = max((int64_t)0, addr.nTime - nTimePenalty);\n+            pinfo->nTime = std::max((int64_t)0, addr.nTime - nTimePenalty);\n \n         // add services\n         pinfo->nServices |= addr.nServices;\n@@ -283,7 +281,7 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n             return false;\n     } else {\n         pinfo = Create(addr, source, &nId);\n-        pinfo->nTime = max((int64_t)0, (int64_t)pinfo->nTime - nTimePenalty);\n+        pinfo->nTime = std::max((int64_t)0, (int64_t)pinfo->nTime - nTimePenalty);\n         nNew++;\n         fNew = true;\n     }"
      },
      {
        "sha": "2623d89809ba26ae3762b423edaef88b135ac45e",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -458,7 +458,7 @@ class CAddrMan\n     }\n \n     //! Return the number of (unique) addresses in all tables.\n-    int size()\n+    size_t size() const\n     {\n         return vRandom.size();\n     }"
      },
      {
        "sha": "1c5a3128749341be78517424bf8b1d1dd18c280d",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 8,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -97,12 +97,6 @@ static bool AppInitRPC(int argc, char* argv[])\n \n UniValue CallRPC(const string& strMethod, const UniValue& params)\n {\n-    if (mapArgs[\"-rpcuser\"] == \"\" && mapArgs[\"-rpcpassword\"] == \"\")\n-        throw runtime_error(strprintf(\n-            _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n-              \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n-                GetConfigFile().string().c_str()));\n-\n     // Connect to localhost\n     bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n     boost::asio::io_service io_service;\n@@ -116,10 +110,24 @@ UniValue CallRPC(const string& strMethod, const UniValue& params)\n     if (!fConnected)\n         throw CConnectionFailed(\"couldn't connect to server\");\n \n+    // Find credentials to use\n+    std::string strRPCUserColonPass;\n+    if (mapArgs[\"-rpcpassword\"] == \"\") {\n+        // Try fall back to cookie-based authentication if no password is provided\n+        if (!GetAuthCookie(&strRPCUserColonPass)) {\n+            throw runtime_error(strprintf(\n+                _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n+                  \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n+                    GetConfigFile().string().c_str()));\n+\n+        }\n+    } else {\n+        strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n+    }\n+\n     // HTTP basic authentication\n-    string strUserPass64 = EncodeBase64(mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"]);\n     map<string, string> mapRequestHeaders;\n-    mapRequestHeaders[\"Authorization\"] = string(\"Basic \") + strUserPass64;\n+    mapRequestHeaders[\"Authorization\"] = string(\"Basic \") + EncodeBase64(strRPCUserColonPass);\n \n     // Send request\n     string strRequest = JSONRPCRequest(strMethod, params, 1);\n@@ -190,6 +198,15 @@ int CommandLineRPC(int argc, char *argv[])\n                         throw CConnectionFailed(\"server in warmup\");\n                     strPrint = \"error: \" + error.write();\n                     nRet = abs(code);\n+                    if (error.isObject())\n+                    {\n+                        UniValue errCode = find_value(error, \"code\");\n+                        UniValue errMsg  = find_value(error, \"message\");\n+                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n+\n+                        if (errMsg.isStr())\n+                            strPrint += \"error message:\\n\"+errMsg.get_str();\n+                    }\n                 } else {\n                     // Result\n                     if (result.isNull())"
      },
      {
        "sha": "9ad57d5c6f3652efdc3c38629ebf5be90ad35b84",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -8,6 +8,7 @@\n #include \"consensus/consensus.h\"\n #include \"core_io.h\"\n #include \"keystore.h\"\n+#include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "95e20bf61bc18630c4d8f928e486c8ba1b1d094e",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 41,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -16,6 +16,45 @@ using namespace std;\n \n #include \"chainparamsseeds.h\"\n \n+static CBlock CreateGenesisBlock(const char* pszTimestamp, CScript genesisOutputScript, uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n+{\n+    CMutableTransaction txNew;\n+    txNew.nVersion = 1;\n+    txNew.vin.resize(1);\n+    txNew.vout.resize(1);\n+    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n+    txNew.vout[0].nValue = genesisReward;\n+    txNew.vout[0].scriptPubKey = genesisOutputScript;\n+\n+    CBlock genesis;\n+    genesis.nTime    = nTime;\n+    genesis.nBits    = nBits;\n+    genesis.nNonce   = nNonce;\n+    genesis.nVersion = nVersion;\n+    genesis.vtx.push_back(txNew);\n+    genesis.hashPrevBlock.SetNull();\n+    genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n+    return genesis;\n+}\n+\n+/**\n+ * Build the genesis block. Note that the output of its generation\n+ * transaction cannot be spent since it did not originally exist in the\n+ * database.\n+ *\n+ * CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n+ *   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n+ *     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n+ *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n+ *   vMerkleTree: 4a5e1e\n+ */\n+static CBlock CreateGenesisBlock(uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n+{\n+    const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n+    CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n+}\n+\n /**\n  * Main network\n  */\n@@ -50,36 +89,9 @@ class CMainParams : public CChainParams {\n         pchMessageStart[3] = 0xd9;\n         vAlertPubKey = ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\");\n         nDefaultPort = 8333;\n-        nMinerThreads = 0;\n         nPruneAfterHeight = 100000;\n \n-        /**\n-         * Build the genesis block. Note that the output of its generation\n-         * transaction cannot be spent since it did not originally exist in the\n-         * database.\n-         *\n-         * CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n-         *   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n-         *     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n-         *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n-         *   vMerkleTree: 4a5e1e\n-         */\n-        const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-        CMutableTransaction txNew;\n-        txNew.nVersion = 1;\n-        txNew.vin.resize(1);\n-        txNew.vout.resize(1);\n-        txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n-        txNew.vout[0].nValue = 50 * COIN;\n-        txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-        genesis.vtx.push_back(txNew);\n-        genesis.hashPrevBlock.SetNull();\n-        genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n-        genesis.nVersion = 1;\n-        genesis.nTime    = 1231006505;\n-        genesis.nBits    = 0x1d00ffff;\n-        genesis.nNonce   = 2083236893;\n-\n+        genesis = CreateGenesisBlock();\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n@@ -99,7 +111,6 @@ class CMainParams : public CChainParams {\n \n         vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));\n \n-        fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = true;\n@@ -133,26 +144,27 @@ static CMainParams mainParams;\n /**\n  * Testnet (v3)\n  */\n-class CTestNetParams : public CMainParams {\n+class CTestNetParams : public CChainParams {\n public:\n     CTestNetParams() {\n         strNetworkID = \"test\";\n+        consensus.nSubsidyHalvingInterval = 210000;\n         consensus.nMajorityEnforceBlockUpgrade = 51;\n         consensus.nMajorityRejectBlockOutdated = 75;\n         consensus.nMajorityWindow = 100;\n+        consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n         pchMessageStart[3] = 0x07;\n         vAlertPubKey = ParseHex(\"04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a\");\n         nDefaultPort = 18333;\n-        nMinerThreads = 0;\n         nPruneAfterHeight = 1000;\n \n-        //! Modify the testnet genesis block so the timestamp is valid for a later start.\n-        genesis.nTime = 1296688602;\n-        genesis.nNonce = 414098458;\n+        genesis = CreateGenesisBlock(1296688602, 414098458);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n \n@@ -171,7 +183,6 @@ class CTestNetParams : public CMainParams {\n \n         vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_test, pnSeed6_test + ARRAYLEN(pnSeed6_test));\n \n-        fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = false;\n@@ -193,7 +204,7 @@ static CTestNetParams testNetParams;\n /**\n  * Regression test\n  */\n-class CRegTestParams : public CTestNetParams {\n+class CRegTestParams : public CChainParams {\n public:\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n@@ -202,14 +213,14 @@ class CRegTestParams : public CTestNetParams {\n         consensus.nMajorityRejectBlockOutdated = 950;\n         consensus.nMajorityWindow = 1000;\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowTargetSpacing = 10 * 60;\n+        consensus.fPowAllowMinDifficultyBlocks = true;\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n-        nMinerThreads = 1;\n-        genesis.nTime = 1296688602;\n-        genesis.nBits = 0x207fffff;\n-        genesis.nNonce = 2;\n+        genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n         assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n@@ -218,7 +229,6 @@ class CRegTestParams : public CTestNetParams {\n         vFixedSeeds.clear(); //! Regtest mode doesn't have any fixed seeds.\n         vSeeds.clear();  //! Regtest mode doesn't have any DNS seeds.\n \n-        fRequireRPCPassword = false;\n         fMiningRequiresPeers = false;\n         fDefaultConsistencyChecks = true;\n         fRequireStandard = false;\n@@ -232,6 +242,11 @@ class CRegTestParams : public CTestNetParams {\n             0,\n             0\n         };\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n     }\n };\n static CRegTestParams regTestParams;"
      },
      {
        "sha": "66d865b620d1bcd16e88ff18b8c5089d98045648",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -50,10 +50,7 @@ class CChainParams\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n \n-    /** Used if GenerateBitcoins is called with a negative number of threads */\n-    int DefaultMinerThreads() const { return nMinerThreads; }\n     const CBlock& GenesisBlock() const { return genesis; }\n-    bool RequireRPCPassword() const { return fRequireRPCPassword; }\n     /** Make miner wait to have peers to avoid wasting work */\n     bool MiningRequiresPeers() const { return fMiningRequiresPeers; }\n     /** Default value for -checkmempool and -checkblockindex argument */\n@@ -79,14 +76,12 @@ class CChainParams\n     //! Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;\n-    int nMinerThreads;\n     uint64_t nPruneAfterHeight;\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n     std::string strNetworkID;\n     CBlock genesis;\n     std::vector<SeedSpec6> vFixedSeeds;\n-    bool fRequireRPCPassword;\n     bool fMiningRequiresPeers;\n     bool fDefaultConsistencyChecks;\n     bool fRequireStandard;"
      },
      {
        "sha": "9c87bf21548a70402ac06b8e1eefaa0f30ae659b",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -25,7 +25,7 @@ static CBaseMainParams mainParams;\n /**\n  * Testnet (v3)\n  */\n-class CBaseTestNetParams : public CBaseMainParams\n+class CBaseTestNetParams : public CBaseChainParams\n {\n public:\n     CBaseTestNetParams()\n@@ -39,11 +39,12 @@ static CBaseTestNetParams testNetParams;\n /*\n  * Regression test\n  */\n-class CBaseRegTestParams : public CBaseTestNetParams\n+class CBaseRegTestParams : public CBaseChainParams\n {\n public:\n     CBaseRegTestParams()\n     {\n+        nRPCPort = 18332;\n         strDataDir = \"regtest\";\n     }\n };"
      },
      {
        "sha": "423362859f34bd39ed6262bc0f86d73a761af7db",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 811,
        "deletions": 462,
        "changes": 1273,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50"
      },
      {
        "sha": "3e8de83c395389a3a7db7df42dae8d050b8c8ea0",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -12,6 +12,8 @@ class CCoinControl\n {\n public:\n     CTxDestination destChange;\n+    //! If false, allows unselected inputs, but requires all selected inputs be used\n+    bool fAllowOtherInputs;\n \n     CCoinControl()\n     {\n@@ -21,6 +23,7 @@ class CCoinControl\n     void SetNull()\n     {\n         destChange = CNoDestination();\n+        fAllowOtherInputs = false;\n         setSelected.clear();\n     }\n \n@@ -50,7 +53,7 @@ class CCoinControl\n         setSelected.clear();\n     }\n \n-    void ListSelected(std::vector<COutPoint>& vOutpoints)\n+    void ListSelected(std::vector<COutPoint>& vOutpoints) const\n     {\n         vOutpoints.assign(setSelected.begin(), setSelected.end());\n     }"
      },
      {
        "sha": "f02949de53528d0ab03c9853d081c4b0b431bade",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -83,7 +83,7 @@ CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const\n         // version as fresh.\n         ret->second.flags = CCoinsCacheEntry::FRESH;\n     }\n-    cachedCoinsUsage += memusage::DynamicUsage(ret->second.coins);\n+    cachedCoinsUsage += ret->second.coins.DynamicMemoryUsage();\n     return ret;\n }\n \n@@ -110,7 +110,7 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n             ret.first->second.flags = CCoinsCacheEntry::FRESH;\n         }\n     } else {\n-        cachedCoinUsage = memusage::DynamicUsage(ret.first->second.coins);\n+        cachedCoinUsage = ret.first->second.coins.DynamicMemoryUsage();\n     }\n     // Assume that whenever ModifyCoins is called, the entry will be modified.\n     ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n@@ -159,21 +159,21 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                     assert(it->second.flags & CCoinsCacheEntry::FRESH);\n                     CCoinsCacheEntry& entry = cacheCoins[it->first];\n                     entry.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += memusage::DynamicUsage(entry.coins);\n+                    cachedCoinsUsage += entry.coins.DynamicMemoryUsage();\n                     entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n                 }\n             } else {\n                 if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n                     // The grandparent does not have an entry, and the child is\n                     // modified and being pruned. This means we can just delete\n                     // it from the parent.\n-                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n                     cacheCoins.erase(itUs);\n                 } else {\n                     // A normal modification.\n-                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n                     itUs->second.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage += itUs->second.coins.DynamicMemoryUsage();\n                     itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n                 }\n             }\n@@ -261,6 +261,6 @@ CCoinsModifier::~CCoinsModifier()\n         cache.cacheCoins.erase(it);\n     } else {\n         // If the coin still exists after the modification, add the new usage\n-        cache.cachedCoinsUsage += memusage::DynamicUsage(it->second.coins);\n+        cache.cachedCoinsUsage += it->second.coins.DynamicMemoryUsage();\n     }\n }"
      },
      {
        "sha": "bf4a777b8a9022e9cbac6e4ed9c4452639019d85",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_COINS_H\n \n #include \"compressor.h\"\n+#include \"core_memusage.h\"\n #include \"memusage.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -257,8 +258,7 @@ class CCoins\n     size_t DynamicMemoryUsage() const {\n         size_t ret = memusage::DynamicUsage(vout);\n         BOOST_FOREACH(const CTxOut &out, vout) {\n-            const std::vector<unsigned char> *script = &out.scriptPubKey;\n-            ret += memusage::DynamicUsage(*script);\n+            ret += RecursiveDynamicUsage(out.scriptPubKey);\n         }\n         return ret;\n     }"
      },
      {
        "sha": "5378c2c761fe8d8124e448941688fc555ddbdb88",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -92,4 +92,12 @@ typedef u_int SOCKET;\n size_t strnlen( const char *start, size_t max_len);\n #endif // HAVE_DECL_STRNLEN\n \n+bool static inline IsSelectableSocket(SOCKET s) {\n+#ifdef WIN32\n+    return true;\n+#else\n+    return (s < FD_SETSIZE);\n+#endif\n+}\n+\n #endif // BITCOIN_COMPAT_H"
      },
      {
        "sha": "f937844e9f7e15391537db3aea9cdfadd1a94617",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -12,7 +12,5 @@ static const unsigned int MAX_BLOCK_SIZE = 1000000;\n static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n-/** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n-static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "711135bb444390b85d895e7fab3d3788bedf1e99",
        "filename": "src/core_memusage.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_MEMUSAGE_H\n+#define BITCOIN_CORE_MEMUSAGE_H\n+\n+#include \"primitives/transaction.h\"\n+#include \"primitives/block.h\"\n+#include \"memusage.h\"\n+\n+static inline size_t RecursiveDynamicUsage(const CScript& script) {\n+    return memusage::DynamicUsage(*static_cast<const std::vector<unsigned char>*>(&script));\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const COutPoint& out) {\n+    return 0;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTxIn& in) {\n+    return RecursiveDynamicUsage(in.scriptSig) + RecursiveDynamicUsage(in.prevout);\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n+    return RecursiveDynamicUsage(out.scriptPubKey);\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n+    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n+    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CBlock& block) {\n+    size_t mem = memusage::DynamicUsage(block.vtx) + memusage::DynamicUsage(block.vMerkleTree);\n+    for (std::vector<CTransaction>::const_iterator it = block.vtx.begin(); it != block.vtx.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CBlockLocator& locator) {\n+    return memusage::DynamicUsage(locator.vHave);\n+}\n+\n+#endif // BITCOIN_CORE_MEMUSAGE_H"
      },
      {
        "sha": "ecf05d95b42fd0d4e7df2260d9995b46482eac2f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 91,
        "deletions": 39,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -18,6 +18,7 @@\n #include \"main.h\"\n #include \"miner.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"rpcserver.h\"\n #include \"script/standard.h\"\n #include \"scheduler.h\"\n@@ -156,8 +157,8 @@ void Shutdown()\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n         pwalletMain->Flush(false);\n-    GenerateBitcoins(false, NULL, 0);\n #endif\n+    GenerateBitcoins(false, 0, Params());\n     StopNode();\n     UnregisterNodeSignals(GetNodeSignals());\n \n@@ -266,6 +267,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     // Do not translate _(...) -help-debug options, Many technical terms, and only a very small audience, so is unnecessary stress to translators.\n     string strUsage = HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n+    strUsage += HelpMessageOpt(\"-alerts\", strprintf(_(\"Receive and display P2P network alerts (default: %u)\"), DEFAULT_ALERTS));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n     strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288));\n@@ -282,7 +284,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n-        -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n+        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\"));\n #endif\n@@ -328,6 +330,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+    strUsage += HelpMessageOpt(\"-whiteconnections=<n>\", strprintf(_(\"Reserve this many inbound connections for whitelisted peers (default: %d)\"), 0));\n \n #ifdef ENABLE_WALLET\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n@@ -369,10 +372,8 @@ std::string HelpMessage(HelpMessageMode mode)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n-#ifdef ENABLE_WALLET\n     strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n-#endif\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n     strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n@@ -395,6 +396,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n \n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n \n@@ -665,6 +668,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n     fLogIPs = GetBoolArg(\"-logips\", false);\n \n+    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n+    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n+\n     // when specifying an explicit binding address, you want to listen on it\n     // even when -connect or -proxy is specified\n     if (mapArgs.count(\"-bind\")) {\n@@ -723,16 +729,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n     }\n \n-    // Make sure enough file descriptors are available\n-    int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n-    nMaxConnections = GetArg(\"-maxconnections\", 125);\n-    nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n-    int nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS);\n-    if (nFD < MIN_CORE_FILEDESCRIPTORS)\n-        return InitError(_(\"Not enough file descriptors available.\"));\n-    if (nFD - MIN_CORE_FILEDESCRIPTORS < nMaxConnections)\n-        nMaxConnections = nFD - MIN_CORE_FILEDESCRIPTORS;\n-\n     // if using block pruning, then disable txindex\n     if (GetArg(\"-prune\", 0)) {\n         if (GetBoolArg(\"-txindex\", false))\n@@ -743,6 +739,47 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n #endif\n     }\n+    \n+    // Make sure enough file descriptors are available\n+    int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n+    int nUserMaxConnections = GetArg(\"-maxconnections\", 125);\n+    nMaxConnections = std::max(nUserMaxConnections, 0);\n+    int nUserWhiteConnections = GetArg(\"-whiteconnections\", 0);\n+    nWhiteConnections = std::max(nUserWhiteConnections, 0);\n+\n+    if ((mapArgs.count(\"-whitelist\")) || (mapArgs.count(\"-whitebind\"))) {\n+        if (!(mapArgs.count(\"-maxconnections\"))) {\n+            // User is using whitelist feature,\n+            // but did not specify -maxconnections parameter.\n+            // Silently increase the default to compensate,\n+            // so that the whitelist connection reservation feature\n+            // does not inadvertently reduce the default\n+            // inbound connection capacity of the network.\n+            nMaxConnections += nWhiteConnections;\n+        }\n+    } else {\n+        // User not using whitelist feature.\n+        // Silently disable connection reservation,\n+        // for the same reason as above.\n+        nWhiteConnections = 0;\n+    }\n+\n+    // Trim requested connection counts, to fit into system limitations\n+    nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n+    int nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS);\n+    if (nFD < MIN_CORE_FILEDESCRIPTORS)\n+        return InitError(_(\"Not enough file descriptors available.\"));\n+    nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS, nMaxConnections);\n+\n+    if (nMaxConnections < nUserMaxConnections)\n+        InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n+\n+    // Connection capacity is prioritized in this order:\n+    // outbound connections (hardcoded to 8),\n+    // then whitelisted connections,\n+    // then non-whitelisted connections get whatever's left (if any).\n+    if ((nWhiteConnections > 0) && (nWhiteConnections >= (nMaxConnections - 8)))\n+        InitWarning(strprintf(_(\"All non-whitelisted incoming connections will be dropped, because -whiteconnections is %d and -maxconnections is only %d.\"), nWhiteConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n \n@@ -773,7 +810,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (nScriptCheckThreads <= 0)\n-        nScriptCheckThreads += boost::thread::hardware_concurrency();\n+        nScriptCheckThreads += GetNumCores();\n     if (nScriptCheckThreads <= 1)\n         nScriptCheckThreads = 0;\n     else if (nScriptCheckThreads > MAX_SCRIPTCHECK_THREADS)\n@@ -818,6 +855,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));\n     }\n \n+    fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !Params().RequireStandard());\n+    if (Params().RequireStandard() && !fRequireStandard)\n+        return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n+\n #ifdef ENABLE_WALLET\n     if (mapArgs.count(\"-mintxfee\"))\n     {\n@@ -865,6 +906,11 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", true);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n+    fAlerts = GetBoolArg(\"-alerts\", DEFAULT_ALERTS);\n+\n+    // Option to startup with mocktime set (used for regression testing):\n+    SetMockTime(GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n+\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     // Initialize elliptic curve code\n@@ -898,8 +944,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #endif\n     if (GetBoolArg(\"-shrinkdebugfile\", !fDebug))\n         ShrinkDebugFile();\n-    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n-    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n+\n+    if (fPrintToDebugLog)\n+        OpenDebugLog();\n+\n     LogPrintf(\"Using OpenSSL version %s\\n\", SSLeay_version(SSLEAY_VERSION));\n #ifdef ENABLE_WALLET\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n@@ -910,6 +958,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"Using data directory %s\\n\", strDataDir);\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile().string());\n     LogPrintf(\"Using at most %i connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n+    if (nWhiteConnections > 0)\n+        LogPrintf(\"Reserving %i of these connections for whitelisted inbound peers\\n\", nWhiteConnections);\n     std::ostringstream strErrors;\n \n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n@@ -984,31 +1034,36 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    proxyType addrProxy;\n-    bool fProxy = false;\n-    if (mapArgs.count(\"-proxy\")) {\n-        addrProxy = proxyType(CService(mapArgs[\"-proxy\"], 9050), GetBoolArg(\"-proxyrandomize\", true));\n+    bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", true);\n+    // -proxy sets a proxy for all outgoing network traffic\n+    // -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default\n+    std::string proxyArg = GetArg(\"-proxy\", \"\");\n+    if (proxyArg != \"\" && proxyArg != \"0\") {\n+        proxyType addrProxy = proxyType(CService(proxyArg, 9050), proxyRandomize);\n         if (!addrProxy.IsValid())\n-            return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), mapArgs[\"-proxy\"]));\n+            return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), proxyArg));\n \n         SetProxy(NET_IPV4, addrProxy);\n         SetProxy(NET_IPV6, addrProxy);\n+        SetProxy(NET_TOR, addrProxy);\n         SetNameProxy(addrProxy);\n-        fProxy = true;\n+        SetReachable(NET_TOR); // by default, -proxy sets onion as reachable, unless -noonion later\n     }\n \n-    // -onion can override normal proxy, -noonion disables connecting to .onion entirely\n-    if (!(mapArgs.count(\"-onion\") && mapArgs[\"-onion\"] == \"0\") &&\n-        (fProxy || mapArgs.count(\"-onion\"))) {\n-        proxyType addrOnion;\n-        if (!mapArgs.count(\"-onion\"))\n-            addrOnion = addrProxy;\n-        else\n-            addrOnion = proxyType(CService(mapArgs[\"-onion\"], 9050), GetBoolArg(\"-proxyrandomize\", true));\n-        if (!addrOnion.IsValid())\n-            return InitError(strprintf(_(\"Invalid -onion address: '%s'\"), mapArgs[\"-onion\"]));\n-        SetProxy(NET_TOR, addrOnion);\n-        SetReachable(NET_TOR);\n+    // -onion can be used to set only a proxy for .onion, or override normal proxy for .onion addresses\n+    // -noonion (or -onion=0) disables connecting to .onion entirely\n+    // An empty string is used to not override the onion proxy (in which case it defaults to -proxy set above, or none)\n+    std::string onionArg = GetArg(\"-onion\", \"\");\n+    if (onionArg != \"\") {\n+        if (onionArg == \"0\") { // Handle -noonion/-onion=0\n+            SetReachable(NET_TOR, false); // set onions as unreachable\n+        } else {\n+            proxyType addrOnion = proxyType(CService(onionArg, 9050), proxyRandomize);\n+            if (!addrOnion.IsValid())\n+                return InitError(strprintf(_(\"Invalid -onion address: '%s'\"), onionArg));\n+            SetProxy(NET_TOR, addrOnion);\n+            SetReachable(NET_TOR);\n+        }\n     }\n \n     // see Step 2: parameter interactions for more information about these\n@@ -1428,11 +1483,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                                          boost::ref(cs_main), boost::cref(pindexBestHeader), nPowTargetSpacing);\n     scheduler.scheduleEvery(f, nPowTargetSpacing);\n \n-#ifdef ENABLE_WALLET\n     // Generate coins in the background\n-    if (pwalletMain)\n-        GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain, GetArg(\"-genproclimit\", 1));\n-#endif\n+    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", 1), Params());\n \n     // ********************************************************* Step 11: finished\n "
      },
      {
        "sha": "54f9f89c4dd631f102f461531f321a627f2c27be",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 173,
        "changes": 213,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -11,10 +11,12 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n@@ -57,10 +59,12 @@ bool fTxIndex = false;\n bool fHavePruned = false;\n bool fPruneMode = false;\n bool fIsBareMultisigStd = true;\n+bool fRequireStandard = true;\n bool fCheckBlockIndex = false;\n bool fCheckpointsEnabled = true;\n size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n+bool fAlerts = DEFAULT_ALERTS;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n CFeeRate minRelayTxFee = CFeeRate(1000);\n@@ -71,9 +75,9 @@ struct COrphanTx {\n     CTransaction tx;\n     NodeId fromPeer;\n };\n-map<uint256, COrphanTx> mapOrphanTransactions;\n-map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n-void EraseOrphansFor(NodeId peer);\n+map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);;\n+map<uint256, set<uint256> > mapOrphanTransactionsByPrev GUARDED_BY(cs_main);;\n+void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Returns true if there are nRequired or more blocks of minVersion or above\n@@ -433,13 +437,14 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n \n         // Iterate over those blocks in vToFetch (in forward direction), adding the ones that\n         // are not yet downloaded and not in flight to vBlocks. In the mean time, update\n-        // pindexLastCommonBlock as long as all ancestors are already downloaded.\n+        // pindexLastCommonBlock as long as all ancestors are already downloaded, or if it's\n+        // already part of our chain (and therefore don't need it even if pruned).\n         BOOST_FOREACH(CBlockIndex* pindex, vToFetch) {\n             if (!pindex->IsValid(BLOCK_VALID_TREE)) {\n                 // We consider the chain that this peer is on invalid.\n                 return;\n             }\n-            if (pindex->nStatus & BLOCK_HAVE_DATA) {\n+            if (pindex->nStatus & BLOCK_HAVE_DATA || chainActive.Contains(pindex)) {\n                 if (pindex->nChainTx)\n                     state->pindexLastCommonBlock = pindex;\n             } else if (mapBlocksInFlight.count(pindex->GetBlockHash()) == 0) {\n@@ -522,7 +527,7 @@ CBlockTreeDB *pblocktree = NULL;\n // mapOrphanTransactions\n //\n \n-bool AddOrphanTx(const CTransaction& tx, NodeId peer)\n+bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     uint256 hash = tx.GetHash();\n     if (mapOrphanTransactions.count(hash))\n@@ -552,7 +557,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer)\n     return true;\n }\n \n-void static EraseOrphanTx(uint256 hash)\n+void static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n@@ -586,7 +591,7 @@ void EraseOrphansFor(NodeId peer)\n }\n \n \n-unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n+unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     unsigned int nEvicted = 0;\n     while (mapOrphanTransactions.size() > nMaxOrphans)\n@@ -602,76 +607,6 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     return nEvicted;\n }\n \n-\n-\n-\n-\n-\n-\n-bool IsStandardTx(const CTransaction& tx, string& reason)\n-{\n-    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n-        reason = \"version\";\n-        return false;\n-    }\n-\n-    // Extremely large transactions with lots of inputs can cost the network\n-    // almost as much to process as they cost the sender in fees, because\n-    // computing signature hashes is O(ninputs*txsize). Limiting transactions\n-    // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n-    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n-    if (sz >= MAX_STANDARD_TX_SIZE) {\n-        reason = \"tx-size\";\n-        return false;\n-    }\n-\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n-        // keys. (remember the 520 byte limit on redeemScript size) That works\n-        // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)+3=1627\n-        // bytes of scriptSig, which we round off to 1650 bytes for some minor\n-        // future-proofing. That's also enough to spend a 20-of-20\n-        // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n-        // considered standard)\n-        if (txin.scriptSig.size() > 1650) {\n-            reason = \"scriptsig-size\";\n-            return false;\n-        }\n-        if (!txin.scriptSig.IsPushOnly()) {\n-            reason = \"scriptsig-not-pushonly\";\n-            return false;\n-        }\n-    }\n-\n-    unsigned int nDataOut = 0;\n-    txnouttype whichType;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n-            reason = \"scriptpubkey\";\n-            return false;\n-        }\n-\n-        if (whichType == TX_NULL_DATA)\n-            nDataOut++;\n-        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n-            reason = \"bare-multisig\";\n-            return false;\n-        } else if (txout.IsDust(::minRelayTxFee)) {\n-            reason = \"dust\";\n-            return false;\n-        }\n-    }\n-\n-    // only one OP_RETURN txout is permitted\n-    if (nDataOut > 1) {\n-        reason = \"multi-op-return\";\n-        return false;\n-    }\n-\n-    return true;\n-}\n-\n bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {\n     if (tx.nLockTime == 0)\n@@ -690,74 +625,6 @@ bool CheckFinalTx(const CTransaction &tx)\n     return IsFinalTx(tx, chainActive.Height() + 1, GetAdjustedTime());\n }\n \n-/**\n- * Check transaction inputs to mitigate two\n- * potential denial-of-service attacks:\n- *\n- * 1. scriptSigs with extra data stuffed into them,\n- *    not consumed by scriptPubKey (or P2SH script)\n- * 2. P2SH scripts with a crazy number of expensive\n- *    CHECKSIG/CHECKMULTISIG operations\n- */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n-{\n-    if (tx.IsCoinBase())\n-        return true; // Coinbases don't use vin normally\n-\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n-\n-        vector<vector<unsigned char> > vSolutions;\n-        txnouttype whichType;\n-        // get the scriptPubKey corresponding to this input:\n-        const CScript& prevScript = prev.scriptPubKey;\n-        if (!Solver(prevScript, whichType, vSolutions))\n-            return false;\n-        int nArgsExpected = ScriptSigArgsExpected(whichType, vSolutions);\n-        if (nArgsExpected < 0)\n-            return false;\n-\n-        // Transactions with extra stuff in their scriptSigs are\n-        // non-standard. Note that this EvalScript() call will\n-        // be quick, because if there are any operations\n-        // beside \"push data\" in the scriptSig\n-        // IsStandardTx() will have already returned false\n-        // and this method isn't called.\n-        vector<vector<unsigned char> > stack;\n-        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n-            return false;\n-\n-        if (whichType == TX_SCRIPTHASH)\n-        {\n-            if (stack.empty())\n-                return false;\n-            CScript subscript(stack.back().begin(), stack.back().end());\n-            vector<vector<unsigned char> > vSolutions2;\n-            txnouttype whichType2;\n-            if (Solver(subscript, whichType2, vSolutions2))\n-            {\n-                int tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n-                if (tmpExpected < 0)\n-                    return false;\n-                nArgsExpected += tmpExpected;\n-            }\n-            else\n-            {\n-                // Any other Script with less than 15 sigops OK:\n-                unsigned int sigops = subscript.GetSigOpCount(true);\n-                // ... extra data left on the stack after execution is OK, too:\n-                return (sigops <= MAX_P2SH_SIGOPS);\n-            }\n-        }\n-\n-        if (stack.size() != (unsigned int)nArgsExpected)\n-            return false;\n-    }\n-\n-    return true;\n-}\n-\n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n {\n     unsigned int nSigOps = 0;\n@@ -898,7 +765,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n-    if (Params().RequireStandard() && !IsStandardTx(tx, reason))\n+    if (fRequireStandard && !IsStandardTx(tx, reason))\n         return state.DoS(0,\n                          error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n                          REJECT_NONSTANDARD, reason);\n@@ -969,7 +836,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (Params().RequireStandard() && !AreInputsStandard(tx, view))\n+        if (fRequireStandard && !AreInputsStandard(tx, view))\n             return error(\"AcceptToMemoryPool: nonstandard transaction input\");\n \n         // Check that the transaction doesn't have an excessive number of\n@@ -2192,15 +2059,14 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     LogPrint(\"bench\", \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n     {\n         CCoinsViewCache view(pcoinsTip);\n-        CInv inv(MSG_BLOCK, pindexNew->GetBlockHash());\n         bool rv = ConnectBlock(*pblock, state, pindexNew, view);\n         GetMainSignals().BlockChecked(*pblock, state);\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n             return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n-        mapBlockSource.erase(inv.hash);\n+        mapBlockSource.erase(pindexNew->GetBlockHash());\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n         LogPrint(\"bench\", \"  - Connect total: %.2fms [%.2fs]\\n\", (nTime3 - nTime2) * 0.001, nTimeConnectTotal * 0.000001);\n         assert(view.Flush());\n@@ -2808,36 +2674,37 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     uint256 hash = block.GetHash();\n     BlockMap::iterator miSelf = mapBlockIndex.find(hash);\n     CBlockIndex *pindex = NULL;\n-    if (miSelf != mapBlockIndex.end()) {\n-        // Block header is already known.\n-        pindex = miSelf->second;\n-        if (ppindex)\n-            *ppindex = pindex;\n-        if (pindex->nStatus & BLOCK_FAILED_MASK)\n-            return state.Invalid(error(\"%s: block is marked invalid\", __func__), 0, \"duplicate\");\n-        return true;\n-    }\n+    if (hash != chainparams.GetConsensus().hashGenesisBlock) {\n \n-    if (!CheckBlockHeader(block, state))\n-        return false;\n+        if (miSelf != mapBlockIndex.end()) {\n+            // Block header is already known.\n+            pindex = miSelf->second;\n+            if (ppindex)\n+                *ppindex = pindex;\n+            if (pindex->nStatus & BLOCK_FAILED_MASK)\n+                return state.Invalid(error(\"%s: block is marked invalid\", __func__), 0, \"duplicate\");\n+            return true;\n+        }\n \n-    // Get prev block index\n-    CBlockIndex* pindexPrev = NULL;\n-    if (hash != chainparams.GetConsensus().hashGenesisBlock) {\n+        if (!CheckBlockHeader(block, state))\n+            return false;\n+\n+        // Get prev block index\n+        CBlockIndex* pindexPrev = NULL;\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n             return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n-    }\n-    assert(pindexPrev);\n-    if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, hash))\n-        return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n-    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n-        return false;\n+        assert(pindexPrev);\n+        if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, hash))\n+            return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n+        if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n+            return false;\n+    }\n     if (pindex == NULL)\n         pindex = AddToBlockIndex(block);\n \n@@ -3782,7 +3649,7 @@ std::string GetWarnings(const std::string& strFor)\n //\n \n \n-bool static AlreadyHave(const CInv& inv)\n+bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     switch (inv.type)\n     {\n@@ -4626,7 +4493,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == \"alert\")\n+    else if (fAlerts && strCommand == \"alert\")\n     {\n         CAlert alert;\n         vRecv >> alert;\n@@ -4956,7 +4823,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n                 else\n                 {\n-                    CNode::Ban(pto->addr);\n+                    CNode::Ban(pto->addr, BanReasonNodeMisbehaving);\n                 }\n             }\n             state.fShouldBan = false;"
      },
      {
        "sha": "ce18bd709f592a433d478a3112d2fded6c368133",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 38,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -14,7 +14,6 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"coins.h\"\n-#include \"consensus/consensus.h\"\n #include \"net.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n@@ -47,17 +46,8 @@ class CValidationState;\n \n struct CNodeStateStats;\n \n-/** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n-static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n-/** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n-static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n-/** The maximum size for transactions we're willing to relay/mine */\n-static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n-/** Maximum number of signature check operations in an IsStandard() P2SH script */\n-static const unsigned int MAX_P2SH_SIGOPS = 15;\n-/** The maximum number of sigops we're willing to relay/mine in a single tx */\n-static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n+/** Default for accepting alerts from the P2P network. */\n+static const bool DEFAULT_ALERTS = true;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n@@ -109,10 +99,12 @@ extern bool fReindex;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern bool fIsBareMultisigStd;\n+extern bool fRequireStandard;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;\n extern CFeeRate minRelayTxFee;\n+extern bool fAlerts;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;\n@@ -128,7 +120,7 @@ extern bool fPruneMode;\n /** Number of MiB of block files that we're trying to stay below. */\n extern uint64_t nPruneTarget;\n /** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of chainActive.Tip() will not be pruned. */\n-static const signed int MIN_BLOCKS_TO_KEEP = 288;\n+static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n \n // Require that user allocate at least 550MB for block & undo files (blk???.dat and rev???.dat)\n // At 1MB per block, 288 blocks = 288MB.\n@@ -138,7 +130,7 @@ static const signed int MIN_BLOCKS_TO_KEEP = 288;\n // full block file chunks, we need the high water mark which triggers the prune to be\n // one 128MB block file + added 15% undo data = 147MB greater for a total of 545MB\n // Setting the target to > than 550MB will make it likely we can respect the target.\n-static const signed int MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n+static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n /** Register with a network node to receive its signals */\n void RegisterNodeSignals(CNodeSignals& nodeSignals);\n@@ -270,25 +262,6 @@ struct CDiskTxPos : public CDiskBlockPos\n \n CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n \n-/**\n- * Check transaction inputs, and make sure any\n- * pay-to-script-hash transactions are evaluating IsStandard scripts\n- * \n- * Why bother? To avoid denial-of-service attacks; an attacker\n- * can submit a standard HASH... OP_EQUAL transaction,\n- * which will get accepted into blocks. The redemption\n- * script can be anything; an attacker could use a very\n- * expensive-to-check-upon-redemption script like:\n- *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n- */\n-\n-/** \n- * Check for standard transaction types\n- * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n- * @return True if all inputs (scriptSigs) use only standard transaction forms\n- */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n-\n /** \n  * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n  * @return number of sigops this transaction's outputs will produce when spent\n@@ -320,11 +293,6 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n /** Context-independent validity checks */\n bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n \n-/** Check for standard transaction types\n- * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n- */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n-\n /**\n  * Check if transaction is final and can be included in a block with the\n  * specified height and time. Consensus critical."
      },
      {
        "sha": "be3964df1bf4121a47c998c8580e74ab39b07263",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 16,
        "deletions": 15,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -11,6 +11,7 @@\n #include <set>\n #include <vector>\n \n+#include <boost/foreach.hpp>\n #include <boost/unordered_set.hpp>\n #include <boost/unordered_map.hpp>\n \n@@ -20,19 +21,27 @@ namespace memusage\n /** Compute the total memory used by allocating alloc bytes. */\n static size_t MallocUsage(size_t alloc);\n \n+/** Dynamic memory usage for built-in types is zero. */\n+static inline size_t DynamicUsage(const int8_t& v) { return 0; }\n+static inline size_t DynamicUsage(const uint8_t& v) { return 0; }\n+static inline size_t DynamicUsage(const int16_t& v) { return 0; }\n+static inline size_t DynamicUsage(const uint16_t& v) { return 0; }\n+static inline size_t DynamicUsage(const int32_t& v) { return 0; }\n+static inline size_t DynamicUsage(const uint32_t& v) { return 0; }\n+static inline size_t DynamicUsage(const int64_t& v) { return 0; }\n+static inline size_t DynamicUsage(const uint64_t& v) { return 0; }\n+static inline size_t DynamicUsage(const float& v) { return 0; }\n+static inline size_t DynamicUsage(const double& v) { return 0; }\n+template<typename X> static inline size_t DynamicUsage(X * const &v) { return 0; }\n+template<typename X> static inline size_t DynamicUsage(const X * const &v) { return 0; }\n+\n /** Compute the memory used for dynamically allocated but owned data structures.\n  *  For generic data types, this is *not* recursive. DynamicUsage(vector<vector<int> >)\n  *  will compute the memory used for the vector<int>'s, but not for the ints inside.\n  *  This is for efficiency reasons, as these functions are intended to be fast. If\n  *  application data structures require more accurate inner accounting, they should\n- *  do the recursion themselves, or use more efficient caching + updating on modification.\n+ *  iterate themselves, or use more efficient caching + updating on modification.\n  */\n-template<typename X> static size_t DynamicUsage(const std::vector<X>& v);\n-template<typename X> static size_t DynamicUsage(const std::set<X>& s);\n-template<typename X, typename Y> static size_t DynamicUsage(const std::map<X, Y>& m);\n-template<typename X, typename Y> static size_t DynamicUsage(const boost::unordered_set<X, Y>& s);\n-template<typename X, typename Y, typename Z> static size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& s);\n-template<typename X> static size_t DynamicUsage(const X& x);\n \n static inline size_t MallocUsage(size_t alloc)\n {\n@@ -98,14 +107,6 @@ static inline size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& m)\n     return MallocUsage(sizeof(boost_unordered_node<std::pair<const X, Y> >)) * m.size() + MallocUsage(sizeof(void*) * m.bucket_count());\n }\n \n-// Dispatch to class method as fallback\n-\n-template<typename X>\n-static inline size_t DynamicUsage(const X& x)\n-{\n-    return x.DynamicMemoryUsage();\n-}\n-\n }\n \n #endif"
      },
      {
        "sha": "5e575f45f18fea615a66aef514f4f71923bd081c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 40,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -12,14 +12,13 @@\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"primitives/transaction.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n-#ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n-#endif\n+#include \"validationinterface.h\"\n \n #include <boost/thread.hpp>\n #include <boost/tuple/tuple.hpp>\n@@ -362,7 +361,6 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n }\n \n-#ifdef ENABLE_WALLET\n //////////////////////////////////////////////////////////////////////////////\n //\n // Internal miner\n@@ -401,17 +399,7 @@ bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phas\n     }\n }\n \n-CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n-{\n-    CPubKey pubkey;\n-    if (!reservekey.GetReservedKey(pubkey))\n-        return NULL;\n-\n-    CScript scriptPubKey = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n-    return CreateNewBlock(scriptPubKey);\n-}\n-\n-static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n+static bool ProcessBlockFound(CBlock* pblock, const CChainParams& chainparams)\n {\n     LogPrintf(\"%s\\n\", pblock->ToString());\n     LogPrintf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue));\n@@ -423,14 +411,8 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n             return error(\"BitcoinMiner: generated block is stale\");\n     }\n \n-    // Remove key from key pool\n-    reservekey.KeepKey();\n-\n-    // Track how many getdata requests this block gets\n-    {\n-        LOCK(wallet.cs_wallet);\n-        wallet.mapRequestCount[pblock->GetHash()] = 0;\n-    }\n+    // Inform about the new block\n+    GetMainSignals().BlockFound(pblock->GetHash());\n \n     // Process this block the same as if we had received it from another node\n     CValidationState state;\n@@ -440,18 +422,22 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n     return true;\n }\n \n-void static BitcoinMiner(CWallet *pwallet)\n+void static BitcoinMiner(const CChainParams& chainparams)\n {\n     LogPrintf(\"BitcoinMiner started\\n\");\n     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n     RenameThread(\"bitcoin-miner\");\n-    const CChainParams& chainparams = Params();\n \n-    // Each thread has its own key and counter\n-    CReserveKey reservekey(pwallet);\n     unsigned int nExtraNonce = 0;\n \n+    boost::shared_ptr<CReserveScript> coinbaseScript;\n+    GetMainSignals().ScriptForMining(coinbaseScript);\n+\n     try {\n+        //throw an error if no script was provided\n+        if (!coinbaseScript->reserveScript.size())\n+            throw std::runtime_error(\"No coinbase script available (mining requires a wallet)\");\n+\n         while (true) {\n             if (chainparams.MiningRequiresPeers()) {\n                 // Busy-wait for the network to come online so we don't waste time mining\n@@ -474,7 +460,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             unsigned int nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n             CBlockIndex* pindexPrev = chainActive.Tip();\n \n-            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n+            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript->reserveScript));\n             if (!pblocktemplate.get())\n             {\n                 LogPrintf(\"Error in BitcoinMiner: Keypool ran out, please call keypoolrefill before restarting the mining thread\\n\");\n@@ -506,8 +492,9 @@ void static BitcoinMiner(CWallet *pwallet)\n                         SetThreadPriority(THREAD_PRIORITY_NORMAL);\n                         LogPrintf(\"BitcoinMiner:\\n\");\n                         LogPrintf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n-                        ProcessBlockFound(pblock, *pwallet, reservekey);\n+                        ProcessBlockFound(pblock, chainparams);\n                         SetThreadPriority(THREAD_PRIORITY_LOWEST);\n+                        coinbaseScript->KeepScript();\n \n                         // In regression test mode, stop mining after a block is found.\n                         if (chainparams.MineBlocksOnDemand())\n@@ -551,17 +538,12 @@ void static BitcoinMiner(CWallet *pwallet)\n     }\n }\n \n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads)\n+void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams)\n {\n     static boost::thread_group* minerThreads = NULL;\n \n-    if (nThreads < 0) {\n-        // In regtest threads defaults to 1\n-        if (Params().DefaultMinerThreads())\n-            nThreads = Params().DefaultMinerThreads();\n-        else\n-            nThreads = boost::thread::hardware_concurrency();\n-    }\n+    if (nThreads < 0)\n+        nThreads = GetNumCores();\n \n     if (minerThreads != NULL)\n     {\n@@ -575,7 +557,5 @@ void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads)\n \n     minerThreads = new boost::thread_group();\n     for (int i = 0; i < nThreads; i++)\n-        minerThreads->create_thread(boost::bind(&BitcoinMiner, pwallet));\n+        minerThreads->create_thread(boost::bind(&BitcoinMiner, boost::cref(chainparams)));\n }\n-\n-#endif // ENABLE_WALLET"
      },
      {
        "sha": "777a091967d720eeb51a28e264cc4a9f2afb223f",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -11,6 +11,7 @@\n #include <stdint.h>\n \n class CBlockIndex;\n+class CChainParams;\n class CReserveKey;\n class CScript;\n class CWallet;\n@@ -24,10 +25,9 @@ struct CBlockTemplate\n };\n \n /** Run the miner threads */\n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads);\n+void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams);\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n-CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);"
      },
      {
        "sha": "5cb6527c9baf7978619a85b9ae793e7257708dd5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 287,
        "deletions": 18,
        "changes": 305,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -79,6 +79,7 @@ uint64_t nLocalHostNonce = 0;\n static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = 125;\n+int nWhiteConnections = 0;\n bool fAddressesInitialized = false;\n \n vector<CNode*> vNodes;\n@@ -332,6 +333,15 @@ CNode* FindNode(const CNetAddr& ip)\n     return NULL;\n }\n \n+CNode* FindNode(const CSubNet& subNet)\n+{\n+    LOCK(cs_vNodes);\n+    BOOST_FOREACH(CNode* pnode, vNodes)\n+    if (subNet.Match((CNetAddr)pnode->addr))\n+        return (pnode);\n+    return NULL;\n+}\n+\n CNode* FindNode(const std::string& addrName)\n {\n     LOCK(cs_vNodes);\n@@ -376,6 +386,12 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest)\n     if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, Params().GetDefaultPort(), nConnectTimeout, &proxyConnectionFailed) :\n                   ConnectSocket(addrConnect, hSocket, nConnectTimeout, &proxyConnectionFailed))\n     {\n+        if (!IsSelectableSocket(hSocket)) {\n+            LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n+            CloseSocket(hSocket);\n+            return NULL;\n+        }\n+\n         addrman.Attempt(addrConnect);\n \n         // Add node\n@@ -434,38 +450,130 @@ void CNode::PushVersion()\n \n \n \n-std::map<CNetAddr, int64_t> CNode::setBanned;\n+banmap_t CNode::setBanned;\n CCriticalSection CNode::cs_setBanned;\n+bool CNode::setBannedIsDirty;\n \n void CNode::ClearBanned()\n {\n+    LOCK(cs_setBanned);\n     setBanned.clear();\n+    setBannedIsDirty = true;\n }\n \n bool CNode::IsBanned(CNetAddr ip)\n {\n     bool fResult = false;\n     {\n         LOCK(cs_setBanned);\n-        std::map<CNetAddr, int64_t>::iterator i = setBanned.find(ip);\n-        if (i != setBanned.end())\n+        for (banmap_t::iterator it = setBanned.begin(); it != setBanned.end(); it++)\n         {\n-            int64_t t = (*i).second;\n-            if (GetTime() < t)\n+            CSubNet subNet = (*it).first;\n+            CBanEntry banEntry = (*it).second;\n+\n+            if(subNet.Match(ip) && GetTime() < banEntry.nBanUntil)\n                 fResult = true;\n         }\n     }\n     return fResult;\n }\n \n-bool CNode::Ban(const CNetAddr &addr) {\n-    int64_t banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n+bool CNode::IsBanned(CSubNet subnet)\n+{\n+    bool fResult = false;\n     {\n         LOCK(cs_setBanned);\n-        if (setBanned[addr] < banTime)\n-            setBanned[addr] = banTime;\n+        banmap_t::iterator i = setBanned.find(subnet);\n+        if (i != setBanned.end())\n+        {\n+            CBanEntry banEntry = (*i).second;\n+            if (GetTime() < banEntry.nBanUntil)\n+                fResult = true;\n+        }\n     }\n-    return true;\n+    return fResult;\n+}\n+\n+void CNode::Ban(const CNetAddr& addr, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n+    CSubNet subNet(addr);\n+    Ban(subNet, banReason, bantimeoffset, sinceUnixEpoch);\n+}\n+\n+void CNode::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n+    CBanEntry banEntry(GetTime());\n+    banEntry.banReason = banReason;\n+    if (bantimeoffset <= 0)\n+    {\n+        bantimeoffset = GetArg(\"-bantime\", 60*60*24); // Default 24-hour ban\n+        sinceUnixEpoch = false;\n+    }\n+    banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n+\n+\n+    LOCK(cs_setBanned);\n+    if (setBanned[subNet].nBanUntil < banEntry.nBanUntil)\n+        setBanned[subNet] = banEntry;\n+\n+    setBannedIsDirty = true;\n+}\n+\n+bool CNode::Unban(const CNetAddr &addr) {\n+    CSubNet subNet(addr);\n+    return Unban(subNet);\n+}\n+\n+bool CNode::Unban(const CSubNet &subNet) {\n+    LOCK(cs_setBanned);\n+    if (setBanned.erase(subNet))\n+    {\n+        setBannedIsDirty = true;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void CNode::GetBanned(banmap_t &banMap)\n+{\n+    LOCK(cs_setBanned);\n+    banMap = setBanned; //create a thread safe copy\n+}\n+\n+void CNode::SetBanned(const banmap_t &banMap)\n+{\n+    LOCK(cs_setBanned);\n+    setBanned = banMap;\n+    setBannedIsDirty = true;\n+}\n+\n+void CNode::SweepBanned()\n+{\n+    int64_t now = GetTime();\n+\n+    LOCK(cs_setBanned);\n+    banmap_t::iterator it = setBanned.begin();\n+    while(it != setBanned.end())\n+    {\n+        CBanEntry banEntry = (*it).second;\n+        if(now > banEntry.nBanUntil)\n+        {\n+            setBanned.erase(it++);\n+            setBannedIsDirty = true;\n+        }\n+        else\n+            ++it;\n+    }\n+}\n+\n+bool CNode::BannedSetIsDirty()\n+{\n+    LOCK(cs_setBanned);\n+    return setBannedIsDirty;\n+}\n+\n+void CNode::SetBannedSetDirty(bool dirty)\n+{\n+    LOCK(cs_setBanned); //reuse setBanned lock for the isDirty flag\n+    setBannedIsDirty = dirty;\n }\n \n \n@@ -827,6 +935,7 @@ void ThreadSocketHandler()\n                 SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n                 CAddress addr;\n                 int nInbound = 0;\n+                int nMaxInbound = nMaxConnections - MAX_OUTBOUND_CONNECTIONS;\n \n                 if (hSocket != INVALID_SOCKET)\n                     if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n@@ -846,8 +955,19 @@ void ThreadSocketHandler()\n                     if (nErr != WSAEWOULDBLOCK)\n                         LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n                 }\n-                else if (nInbound >= nMaxConnections - MAX_OUTBOUND_CONNECTIONS)\n+                else if (!IsSelectableSocket(hSocket))\n+                {\n+                    LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n+                    CloseSocket(hSocket);\n+                }\n+                else if (nInbound >= nMaxInbound)\n+                {\n+                    LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n+                    CloseSocket(hSocket);\n+                }\n+                else if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n                 {\n+                    LogPrint(\"net\", \"connection from %s dropped (non-whitelisted)\\n\", addr.ToString());\n                     CloseSocket(hSocket);\n                 }\n                 else if (CNode::IsBanned(addr) && !whitelisted)\n@@ -861,6 +981,8 @@ void ThreadSocketHandler()\n                     pnode->AddRef();\n                     pnode->fWhitelisted = whitelisted;\n \n+                    LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n+\n                     {\n                         LOCK(cs_vNodes);\n                         vNodes.push_back(pnode);\n@@ -1162,6 +1284,17 @@ void DumpAddresses()\n            addrman.size(), GetTimeMillis() - nStart);\n }\n \n+void DumpData()\n+{\n+    DumpAddresses();\n+\n+    if (CNode::BannedSetIsDirty())\n+    {\n+        DumpBanlist();\n+        CNode::SetBannedSetDirty(false);\n+    }\n+}\n+\n void static ProcessOneShot()\n {\n     string strDest;\n@@ -1475,6 +1608,13 @@ bool BindListenPort(const CService &addrBind, string& strError, bool fWhiteliste\n         LogPrintf(\"%s\\n\", strError);\n         return false;\n     }\n+    if (!IsSelectableSocket(hListenSocket))\n+    {\n+        strError = \"Error: Couldn't create a listenable socket for incoming connections\";\n+        LogPrintf(\"%s\\n\", strError);\n+        return false;\n+    }\n+\n \n #ifndef WIN32\n #ifdef SO_NOSIGPIPE\n@@ -1600,6 +1740,17 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (!adb.Read(addrman))\n             LogPrintf(\"Invalid or missing peers.dat; recreating\\n\");\n     }\n+\n+    //try to read stored banlist\n+    CBanDB bandb;\n+    banmap_t banmap;\n+    if (!bandb.Read(banmap))\n+        LogPrintf(\"Invalid or missing banlist.dat; recreating\\n\");\n+\n+    CNode::SetBanned(banmap); //thread save setter\n+    CNode::SetBannedSetDirty(false); //no need to write down just read or nonexistent data\n+    CNode::SweepBanned(); //sweap out unused entries\n+\n     LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\",\n            addrman.size(), GetTimeMillis() - nStart);\n     fAddressesInitialized = true;\n@@ -1640,7 +1791,7 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n     threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"msghand\", &ThreadMessageHandler));\n \n     // Dump network addresses\n-    scheduler.scheduleEvery(&DumpAddresses, DUMP_ADDRESSES_INTERVAL);\n+    scheduler.scheduleEvery(&DumpData, DUMP_ADDRESSES_INTERVAL);\n }\n \n bool StopNode()\n@@ -1653,7 +1804,7 @@ bool StopNode()\n \n     if (fAddressesInitialized)\n     {\n-        DumpAddresses();\n+        DumpData();\n         fAddressesInitialized = false;\n     }\n \n@@ -1857,11 +2008,11 @@ bool CAddrDB::Read(CAddrMan& addr)\n         return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n \n     // use file size to size memory buffer\n-    int fileSize = boost::filesystem::file_size(pathAddr);\n-    int dataSize = fileSize - sizeof(uint256);\n+    uint64_t fileSize = boost::filesystem::file_size(pathAddr);\n+    uint64_t dataSize = 0;\n     // Don't try to resize to a negative number if file is small\n-    if (dataSize < 0)\n-        dataSize = 0;\n+    if (fileSize >= sizeof(uint256))\n+        dataSize = fileSize - sizeof(uint256);\n     vector<unsigned char> vchData;\n     vchData.resize(dataSize);\n     uint256 hashIn;\n@@ -2032,8 +2183,10 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n         Fuzz(GetArg(\"-fuzzmessagestest\", 10));\n \n     if (ssSend.size() == 0)\n+    {\n+        LEAVE_CRITICAL_SECTION(cs_vSend);\n         return;\n-\n+    }\n     // Set the size\n     unsigned int nSize = ssSend.size() - CMessageHeader::HEADER_SIZE;\n     WriteLE32((uint8_t*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], nSize);\n@@ -2057,3 +2210,119 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     LEAVE_CRITICAL_SECTION(cs_vSend);\n }\n+\n+//\n+// CBanDB\n+//\n+\n+CBanDB::CBanDB()\n+{\n+    pathBanlist = GetDataDir() / \"banlist.dat\";\n+}\n+\n+bool CBanDB::Write(const banmap_t& banSet)\n+{\n+    // Generate random temporary filename\n+    unsigned short randv = 0;\n+    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n+    std::string tmpfn = strprintf(\"banlist.dat.%04x\", randv);\n+\n+    // serialize banlist, checksum data up to that point, then append csum\n+    CDataStream ssBanlist(SER_DISK, CLIENT_VERSION);\n+    ssBanlist << FLATDATA(Params().MessageStart());\n+    ssBanlist << banSet;\n+    uint256 hash = Hash(ssBanlist.begin(), ssBanlist.end());\n+    ssBanlist << hash;\n+\n+    // open temp output file, and associate with CAutoFile\n+    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+\n+    // Write and commit header, data\n+    try {\n+        fileout << ssBanlist;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n+    }\n+    FileCommit(fileout.Get());\n+    fileout.fclose();\n+\n+    // replace existing banlist.dat, if any, with new banlist.dat.XXXX\n+    if (!RenameOver(pathTmp, pathBanlist))\n+        return error(\"%s: Rename-into-place failed\", __func__);\n+\n+    return true;\n+}\n+\n+bool CBanDB::Read(banmap_t& banSet)\n+{\n+    // open input file, and associate with CAutoFile\n+    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n+\n+    // use file size to size memory buffer\n+    uint64_t fileSize = boost::filesystem::file_size(pathBanlist);\n+    uint64_t dataSize = 0;\n+    // Don't try to resize to a negative number if file is small\n+    if (fileSize >= sizeof(uint256))\n+        dataSize = fileSize - sizeof(uint256);\n+    vector<unsigned char> vchData;\n+    vchData.resize(dataSize);\n+    uint256 hashIn;\n+\n+    // read data and checksum from file\n+    try {\n+        filein.read((char *)&vchData[0], dataSize);\n+        filein >> hashIn;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    filein.fclose();\n+\n+    CDataStream ssBanlist(vchData, SER_DISK, CLIENT_VERSION);\n+\n+    // verify stored checksum matches input data\n+    uint256 hashTmp = Hash(ssBanlist.begin(), ssBanlist.end());\n+    if (hashIn != hashTmp)\n+        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n+\n+    unsigned char pchMsgTmp[4];\n+    try {\n+        // de-serialize file header (network specific magic number) and ..\n+        ssBanlist >> FLATDATA(pchMsgTmp);\n+\n+        // ... verify the network matches ours\n+        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n+            return error(\"%s: Invalid network magic number\", __func__);\n+        \n+        // de-serialize address data into one CAddrMan object\n+        ssBanlist >> banSet;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    \n+    return true;\n+}\n+\n+void DumpBanlist()\n+{\n+    int64_t nStart = GetTimeMillis();\n+\n+    CNode::SweepBanned(); //clean unused entires (if bantime has expired)\n+\n+    CBanDB bandb;\n+    banmap_t banmap;\n+    CNode::GetBanned(banmap);\n+    bandb.Write(banmap);\n+\n+    LogPrint(\"net\", \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n+             banmap.size(), GetTimeMillis() - nStart);\n+}"
      },
      {
        "sha": "86d74e21741b54f5f8445d29bf3eca16fc6aaa13",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 102,
        "deletions": 2,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -66,6 +66,7 @@ unsigned int SendBufferSize();\n void AddOneShot(const std::string& strDest);\n void AddressCurrentlyConnected(const CService& addr);\n CNode* FindNode(const CNetAddr& ip);\n+CNode* FindNode(const CSubNet& subNet);\n CNode* FindNode(const std::string& addrName);\n CNode* FindNode(const CService& ip);\n CNode* ConnectNode(CAddress addrConnect, const char *pszDest = NULL);\n@@ -140,7 +141,20 @@ extern bool fListen;\n extern uint64_t nLocalServices;\n extern uint64_t nLocalHostNonce;\n extern CAddrMan addrman;\n+\n+// The allocation of connections against the maximum allowed (nMaxConnections)\n+// is prioritized as follows:\n+// 1st: Outbound connections (MAX_OUTBOUND_CONNECTIONS)\n+// 2nd: Inbound connections from whitelisted peers (nWhiteConnections)\n+// 3rd: Inbound connections from non-whitelisted peers\n+// Thus, the number of connection slots for the general public to use is:\n+// nMaxConnections - (MAX_OUTBOUND_CONNECTIONS + nWhiteConnections)\n+// Any additional inbound connections beyond limits will be immediately closed\n+\n+/** Maximum number of connections to simultaneously allow (aka connection slots) */\n extern int nMaxConnections;\n+/** Number of connection slots to reserve for inbound from whitelisted peers */\n+extern int nWhiteConnections;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n@@ -227,8 +241,66 @@ class CNetMessage {\n };\n \n \n+typedef enum BanReason\n+{\n+    BanReasonUnknown          = 0,\n+    BanReasonNodeMisbehaving  = 1,\n+    BanReasonManuallyAdded    = 2\n+} BanReason;\n+\n+class CBanEntry\n+{\n+public:\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    int64_t nCreateTime;\n+    int64_t nBanUntil;\n+    uint8_t banReason;\n+\n+    CBanEntry()\n+    {\n+        SetNull();\n+    }\n+\n+    CBanEntry(int64_t nCreateTimeIn)\n+    {\n+        SetNull();\n+        nCreateTime = nCreateTimeIn;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(nCreateTime);\n+        READWRITE(nBanUntil);\n+        READWRITE(banReason);\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CBanEntry::CURRENT_VERSION;\n+        nCreateTime = 0;\n+        nBanUntil = 0;\n+        banReason = BanReasonUnknown;\n+    }\n \n+    std::string banReasonToString()\n+    {\n+        switch (banReason) {\n+        case BanReasonNodeMisbehaving:\n+            return \"node misbehabing\";\n+        case BanReasonManuallyAdded:\n+            return \"manually added\";\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+};\n \n+typedef std::map<CSubNet, CBanEntry> banmap_t;\n \n /** Information about a peer */\n class CNode\n@@ -284,8 +356,9 @@ class CNode\n \n     // Denial-of-service detection/prevention\n     // Key is IP address, value is banned-until-time\n-    static std::map<CNetAddr, int64_t> setBanned;\n+    static banmap_t setBanned;\n     static CCriticalSection cs_setBanned;\n+    static bool setBannedIsDirty;\n \n     // Whitelisted ranges. Any node connecting from these is automatically\n     // whitelisted (as well as those connecting to whitelisted binds).\n@@ -606,7 +679,21 @@ class CNode\n     // new code.\n     static void ClearBanned(); // needed for unit testing\n     static bool IsBanned(CNetAddr ip);\n-    static bool Ban(const CNetAddr &ip);\n+    static bool IsBanned(CSubNet subnet);\n+    static void Ban(const CNetAddr &ip, const BanReason &banReason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    static void Ban(const CSubNet &subNet, const BanReason &banReason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    static bool Unban(const CNetAddr &ip);\n+    static bool Unban(const CSubNet &ip);\n+    static void GetBanned(banmap_t &banmap);\n+    static void SetBanned(const banmap_t &banmap);\n+\n+    //!check is the banlist has unwritten changes\n+    static bool BannedSetIsDirty();\n+    //!set the \"dirty\" flag for the banlist\n+    static void SetBannedSetDirty(bool dirty=true);\n+    //!clean unused entires (if bantime has expired)\n+    static void SweepBanned();\n+\n     void copyStats(CNodeStats &stats);\n \n     static bool IsWhitelistedRange(const CNetAddr &ip);\n@@ -637,4 +724,17 @@ class CAddrDB\n     bool Read(CAddrMan& addr);\n };\n \n+/** Access to the banlist database (banlist.dat) */\n+class CBanDB\n+{\n+private:\n+    boost::filesystem::path pathBanlist;\n+public:\n+    CBanDB();\n+    bool Write(const banmap_t& banSet);\n+    bool Read(banmap_t& banSet);\n+};\n+\n+void DumpBanlist();\n+\n #endif // BITCOIN_NET_H"
      },
      {
        "sha": "b7e2e57917bb1ee39dbc1689f2ee95d6273aa1fd",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -266,6 +266,9 @@ bool static InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSock\n         } else { // Other error or blocking\n             int nErr = WSAGetLastError();\n             if (nErr == WSAEINPROGRESS || nErr == WSAEWOULDBLOCK || nErr == WSAEINVAL) {\n+                if (!IsSelectableSocket(hSocket)) {\n+                    return false;\n+                }\n                 struct timeval tval = MillisToTimeval(std::min(endTime - curTime, maxWait));\n                 fd_set fdset;\n                 FD_ZERO(&fdset);\n@@ -1291,6 +1294,13 @@ CSubNet::CSubNet(const std::string &strSubnet, bool fAllowLookup)\n         network.ip[x] &= netmask[x];\n }\n \n+CSubNet::CSubNet(const CNetAddr &addr):\n+    valid(addr.IsValid())\n+{\n+    memset(netmask, 255, sizeof(netmask));\n+    network = addr;\n+}\n+\n bool CSubNet::Match(const CNetAddr &addr) const\n {\n     if (!valid || !addr.IsValid())\n@@ -1330,6 +1340,11 @@ bool operator!=(const CSubNet& a, const CSubNet& b)\n     return !(a==b);\n }\n \n+bool operator<(const CSubNet& a, const CSubNet& b)\n+{\n+    return (a.network < b.network || (a.network == b.network && memcmp(a.netmask, b.netmask, 16) < 0));\n+}\n+\n #ifdef WIN32\n std::string NetworkErrorString(int err)\n {"
      },
      {
        "sha": "6f8882b8527a5c2846bfc0e331200d6664c902e7",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -118,13 +118,26 @@ class CSubNet\n         CSubNet();\n         explicit CSubNet(const std::string &strSubnet, bool fAllowLookup = false);\n \n+        //constructor for single ip subnet (<ipv4>/32 or <ipv6>/128)\n+        explicit CSubNet(const CNetAddr &addr);\n+\n         bool Match(const CNetAddr &addr) const;\n \n         std::string ToString() const;\n         bool IsValid() const;\n \n         friend bool operator==(const CSubNet& a, const CSubNet& b);\n         friend bool operator!=(const CSubNet& a, const CSubNet& b);\n+        friend bool operator<(const CSubNet& a, const CSubNet& b);\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+            READWRITE(network);\n+            READWRITE(FLATDATA(netmask));\n+            READWRITE(FLATDATA(valid));\n+        }\n };\n \n /** A combination of a network address (CNetAddr) and a (TCP) port */"
      },
      {
        "sha": "169fef4af4602dfe327d8311ab90bd714c5e12f4",
        "filename": "src/policy/policy.cpp",
        "status": "added",
        "additions": 178,
        "deletions": 0,
        "changes": 178,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"main.h\"\n+#include \"tinyformat.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n+{\n+    std::vector<std::vector<unsigned char> > vSolutions;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n+        return false;\n+\n+    if (whichType == TX_MULTISIG)\n+    {\n+        unsigned char m = vSolutions.front()[0];\n+        unsigned char n = vSolutions.back()[0];\n+        // Support up to x-of-3 multisig txns as standard\n+        if (n < 1 || n > 3)\n+            return false;\n+        if (m < 1 || m > n)\n+            return false;\n+    }\n+\n+    return whichType != TX_NONSTANDARD;\n+}\n+\n+bool IsStandardTx(const CTransaction& tx, std::string& reason)\n+{\n+    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n+        reason = \"version\";\n+        return false;\n+    }\n+\n+    // Extremely large transactions with lots of inputs can cost the network\n+    // almost as much to process as they cost the sender in fees, because\n+    // computing signature hashes is O(ninputs*txsize). Limiting transactions\n+    // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n+    if (sz >= MAX_STANDARD_TX_SIZE) {\n+        reason = \"tx-size\";\n+        return false;\n+    }\n+\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n+        // keys. (remember the 520 byte limit on redeemScript size) That works\n+        // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)+3=1627\n+        // bytes of scriptSig, which we round off to 1650 bytes for some minor\n+        // future-proofing. That's also enough to spend a 20-of-20\n+        // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n+        // considered standard)\n+        if (txin.scriptSig.size() > 1650) {\n+            reason = \"scriptsig-size\";\n+            return false;\n+        }\n+        if (!txin.scriptSig.IsPushOnly()) {\n+            reason = \"scriptsig-not-pushonly\";\n+            return false;\n+        }\n+    }\n+\n+    unsigned int nDataOut = 0;\n+    txnouttype whichType;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n+        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n+            reason = \"scriptpubkey\";\n+            return false;\n+        }\n+\n+        if (whichType == TX_NULL_DATA)\n+            nDataOut++;\n+        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n+            reason = \"bare-multisig\";\n+            return false;\n+        } else if (txout.IsDust(::minRelayTxFee)) {\n+            reason = \"dust\";\n+            return false;\n+        }\n+    }\n+\n+    // only one OP_RETURN txout is permitted\n+    if (nDataOut > 1) {\n+        reason = \"multi-op-return\";\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    if (tx.IsCoinBase())\n+        return true; // Coinbases don't use vin normally\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n+\n+        std::vector<std::vector<unsigned char> > vSolutions;\n+        txnouttype whichType;\n+        // get the scriptPubKey corresponding to this input:\n+        const CScript& prevScript = prev.scriptPubKey;\n+        if (!Solver(prevScript, whichType, vSolutions))\n+            return false;\n+        int nArgsExpected = ScriptSigArgsExpected(whichType, vSolutions);\n+        if (nArgsExpected < 0)\n+            return false;\n+\n+        // Transactions with extra stuff in their scriptSigs are\n+        // non-standard. Note that this EvalScript() call will\n+        // be quick, because if there are any operations\n+        // beside \"push data\" in the scriptSig\n+        // IsStandardTx() will have already returned false\n+        // and this method isn't called.\n+        std::vector<std::vector<unsigned char> > stack;\n+        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n+            return false;\n+\n+        if (whichType == TX_SCRIPTHASH)\n+        {\n+            if (stack.empty())\n+                return false;\n+            CScript subscript(stack.back().begin(), stack.back().end());\n+            std::vector<std::vector<unsigned char> > vSolutions2;\n+            txnouttype whichType2;\n+            if (Solver(subscript, whichType2, vSolutions2))\n+            {\n+                int tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n+                if (tmpExpected < 0)\n+                    return false;\n+                nArgsExpected += tmpExpected;\n+            }\n+            else\n+            {\n+                // Any other Script with less than 15 sigops OK:\n+                unsigned int sigops = subscript.GetSigOpCount(true);\n+                // ... extra data left on the stack after execution is OK, too:\n+                return (sigops <= MAX_P2SH_SIGOPS);\n+            }\n+        }\n+\n+        if (stack.size() != (unsigned int)nArgsExpected)\n+            return false;\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "1551aecde8c33eab3dd9ba74fbced371671ac0ca",
        "filename": "src/policy/policy.h",
        "status": "added",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_H\n+#define BITCOIN_POLICY_H\n+\n+#include \"consensus/consensus.h\"\n+#include \"script/interpreter.h\"\n+#include \"script/standard.h\"\n+\n+#include <string>\n+\n+class CCoinsViewCache;\n+\n+/** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n+static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n+static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n+/** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n+static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n+/** The maximum size for transactions we're willing to relay/mine */\n+static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n+/** Maximum number of signature check operations in an IsStandard() P2SH script */\n+static const unsigned int MAX_P2SH_SIGOPS = 15;\n+/** The maximum number of sigops we're willing to relay/mine in a single tx */\n+static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n+/**\n+ * Standard script verification flags that standard transactions will comply\n+ * with. However scripts violating these flags may still be present in valid\n+ * blocks and we must accept those blocks.\n+ */\n+static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n+                                                         SCRIPT_VERIFY_DERSIG |\n+                                                         SCRIPT_VERIFY_STRICTENC |\n+                                                         SCRIPT_VERIFY_MINIMALDATA |\n+                                                         SCRIPT_VERIFY_NULLDUMMY |\n+                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n+                                                         SCRIPT_VERIFY_CLEANSTACK |\n+                                                         SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n+\n+/** For convenience, standard but not mandatory verify flags. */\n+static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n+\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n+    /**\n+     * Check for standard transaction types\n+     * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n+     */\n+bool IsStandardTx(const CTransaction& tx, std::string& reason);\n+    /**\n+     * Check for standard transaction types\n+     * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n+     * @return True if all inputs (scriptSigs) use only standard transaction forms\n+     */\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+\n+#endif // BITCOIN_POLICY_H"
      },
      {
        "sha": "2a457cdae78c523a0d4f8526dc51273af2c3ec31",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -141,10 +141,13 @@ class CTxOut\n         // which has units satoshis-per-kilobyte.\n         // If you'd pay more than 1/3 in fees\n         // to spend something, then we consider it dust.\n-        // A typical txout is 34 bytes big, and will\n+        // A typical spendable txout is 34 bytes big, and will\n         // need a CTxIn of at least 148 bytes to spend:\n-        // so dust is a txout less than 546 satoshis \n+        // so dust is a spendable txout less than 546 satoshis\n         // with default minRelayTxFee.\n+        if (scriptPubKey.IsUnspendable())\n+            return 0;\n+\n         size_t nSize = GetSerializeSize(SER_DISK,0)+148u;\n         return 3*minRelayTxFee.GetFee(nSize);\n     }"
      },
      {
        "sha": "af6801919c5643b6993a8605f6ad6e99310e54cf",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -254,8 +254,7 @@ void AddressBookPage::done(int retval)\n     // Figure out which address was selected, and return it\n     QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n \n-    foreach (QModelIndex index, indexes)\n-    {\n+    Q_FOREACH (const QModelIndex& index, indexes) {\n         QVariant address = table->model()->data(index);\n         returnValue = address.toString();\n     }"
      },
      {
        "sha": "09634ce336623214c02a64901ca840b56cdbb4e5",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -45,7 +45,7 @@ class AddressBookPage : public QDialog\n     void setModel(AddressTableModel *model);\n     const QString &getReturnValue() const { return returnValue; }\n \n-public slots:\n+public Q_SLOTS:\n     void done(int retval);\n \n private:\n@@ -59,7 +59,7 @@ public slots:\n     QAction *deleteAction; // to be able to explicitly disable it\n     QString newAddressToSelect;\n \n-private slots:\n+private Q_SLOTS:\n     /** Delete currently selected address entry */\n     void on_deleteAddress_clicked();\n     /** Create a new address for receiving coins and / or add a new address book entry */\n@@ -80,7 +80,7 @@ private slots:\n     /** New entry/entries were added to address table */\n     void selectNewAddress(const QModelIndex &parent, int begin, int /*end*/);\n \n-signals:\n+Q_SIGNALS:\n     void sendCoins(QString addr);\n };\n "
      },
      {
        "sha": "c5ac07cfc29626f808f71afba38fbc037a6a3267",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -450,5 +450,5 @@ int AddressTableModel::lookupAddress(const QString &address) const\n \n void AddressTableModel::emitDataChanged(int idx)\n {\n-    emit dataChanged(index(idx, 0, QModelIndex()), index(idx, columns.length()-1, QModelIndex()));\n+    Q_EMIT dataChanged(index(idx, 0, QModelIndex()), index(idx, columns.length()-1, QModelIndex()));\n }"
      },
      {
        "sha": "2b7475c4e2997ed31803a47bef6074d498543729",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -84,7 +84,7 @@ class AddressTableModel : public QAbstractTableModel\n     /** Notify listeners that data changed. */\n     void emitDataChanged(int index);\n \n-public slots:\n+public Q_SLOTS:\n     /* Update address list from core.\n      */\n     void updateEntry(const QString &address, const QString &label, bool isMine, const QString &purpose, int status);"
      },
      {
        "sha": "d4d832825a38211d1acecb234cd47da88d90ddfa",
        "filename": "src/qt/askpassphrasedialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/askpassphrasedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/askpassphrasedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -40,7 +40,7 @@ class AskPassphraseDialog : public QDialog\n     WalletModel *model;\n     bool fCapsLock;\n \n-private slots:\n+private Q_SLOTS:\n     void textChanged();\n \n protected:"
      },
      {
        "sha": "ec02c4be9f8f7874f0f99eeb81e78a2e5b96daaa",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 11,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -48,6 +48,7 @@\n #include <QThread>\n #include <QTimer>\n #include <QTranslator>\n+#include <QSslConfiguration>\n \n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>\n@@ -168,11 +169,11 @@ class BitcoinCore: public QObject\n public:\n     explicit BitcoinCore();\n \n-public slots:\n+public Q_SLOTS:\n     void initialize();\n     void shutdown();\n \n-signals:\n+Q_SIGNALS:\n     void initializeResult(int retval);\n     void shutdownResult(int retval);\n     void runawayException(const QString &message);\n@@ -215,13 +216,13 @@ class BitcoinApplication: public QApplication\n     /// Get window identifier of QMainWindow (BitcoinGUI)\n     WId getMainWinId() const;\n \n-public slots:\n+public Q_SLOTS:\n     void initializeResult(int retval);\n     void shutdownResult(int retval);\n     /// Handle runaway exceptions. Shows a message box with the problem and quits the program.\n     void handleRunawayException(const QString &message);\n \n-signals:\n+Q_SIGNALS:\n     void requestedInitialize();\n     void requestedShutdown();\n     void stopThread();\n@@ -252,7 +253,7 @@ BitcoinCore::BitcoinCore():\n void BitcoinCore::handleRunawayException(const std::exception *e)\n {\n     PrintExceptionContinue(e, \"Runaway exception\");\n-    emit runawayException(QString::fromStdString(strMiscWarning));\n+    Q_EMIT runawayException(QString::fromStdString(strMiscWarning));\n }\n \n void BitcoinCore::initialize()\n@@ -268,7 +269,7 @@ void BitcoinCore::initialize()\n              */\n             StartDummyRPCThread();\n         }\n-        emit initializeResult(rv);\n+        Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);\n     } catch (...) {\n@@ -285,7 +286,7 @@ void BitcoinCore::shutdown()\n         threadGroup.join_all();\n         Shutdown();\n         qDebug() << __func__ << \": Shutdown finished\";\n-        emit shutdownResult(1);\n+        Q_EMIT shutdownResult(1);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);\n     } catch (...) {\n@@ -314,7 +315,7 @@ BitcoinApplication::~BitcoinApplication()\n     if(coreThread)\n     {\n         qDebug() << __func__ << \": Stopping thread\";\n-        emit stopThread();\n+        Q_EMIT stopThread();\n         coreThread->wait();\n         qDebug() << __func__ << \": Stopped thread\";\n     }\n@@ -385,7 +386,7 @@ void BitcoinApplication::requestInitialize()\n {\n     qDebug() << __func__ << \": Requesting initialize\";\n     startThread();\n-    emit requestedInitialize();\n+    Q_EMIT requestedInitialize();\n }\n \n void BitcoinApplication::requestShutdown()\n@@ -408,7 +409,7 @@ void BitcoinApplication::requestShutdown()\n     ShutdownWindow::showShutdownWindow(window);\n \n     // Request shutdown from core thread\n-    emit requestedShutdown();\n+    Q_EMIT requestedShutdown();\n }\n \n void BitcoinApplication::initializeResult(int retval)\n@@ -448,7 +449,7 @@ void BitcoinApplication::initializeResult(int retval)\n         {\n             window->show();\n         }\n-        emit splashFinished(window);\n+        Q_EMIT splashFinished(window);\n \n #ifdef ENABLE_WALLET\n         // Now that initialization/startup is done, process any command-line\n@@ -515,6 +516,13 @@ int main(int argc, char *argv[])\n #ifdef Q_OS_MAC\n     QApplication::setAttribute(Qt::AA_DontShowIconsInMenus);\n #endif\n+#if QT_VERSION >= 0x050500\n+    // Because of the POODLE attack it is recommended to disable SSLv3 (https://disablessl3.com/),\n+    // so set SSL protocols to TLS1.0+.\n+    QSslConfiguration sslconf = QSslConfiguration::defaultConfiguration();\n+    sslconf.setProtocol(QSsl::TlsV1_0OrLater);\n+    QSslConfiguration::setDefaultConfiguration(sslconf);\n+#endif\n \n     // Register meta types used for QMetaObject::invokeMethod\n     qRegisterMetaType< bool* >();"
      },
      {
        "sha": "d19b9fd4afa6433b7448dd8a02484591d4fd5273",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -61,7 +61,7 @@ class AmountSpinBox: public QAbstractSpinBox\n     void setValue(const CAmount& value)\n     {\n         lineEdit()->setText(BitcoinUnits::format(currentUnit, value, false, BitcoinUnits::separatorAlways));\n-        emit valueChanged();\n+        Q_EMIT valueChanged();\n     }\n \n     void stepBy(int steps)\n@@ -184,7 +184,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         return rv;\n     }\n \n-signals:\n+Q_SIGNALS:\n     void valueChanged();\n };\n "
      },
      {
        "sha": "3703b1f8d7364a878e46a3220531c3eefcda1010",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -56,7 +56,7 @@ class BitcoinAmountField: public QWidget\n     */\n     QWidget *setupTabChain(QWidget *prev);\n \n-signals:\n+Q_SIGNALS:\n     void valueChanged();\n \n protected:\n@@ -67,7 +67,7 @@ class BitcoinAmountField: public QWidget\n     AmountSpinBox *amount;\n     QValueComboBox *unit;\n \n-private slots:\n+private Q_SLOTS:\n     void unitChanged(int idx);\n \n };"
      },
      {
        "sha": "396435f12b1bb30329d2b937f48a1c8109af9c1b",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -600,7 +600,7 @@ void BitcoinGUI::openClicked()\n     OpenURIDialog dlg(this);\n     if(dlg.exec())\n     {\n-        emit receivedURI(dlg.getURI());\n+        Q_EMIT receivedURI(dlg.getURI());\n     }\n }\n \n@@ -886,9 +886,9 @@ void BitcoinGUI::dropEvent(QDropEvent *event)\n {\n     if(event->mimeData()->hasUrls())\n     {\n-        foreach(const QUrl &uri, event->mimeData()->urls())\n+        Q_FOREACH(const QUrl &uri, event->mimeData()->urls())\n         {\n-            emit receivedURI(uri.toString());\n+            Q_EMIT receivedURI(uri.toString());\n         }\n     }\n     event->acceptProposedAction();\n@@ -1050,7 +1050,7 @@ UnitDisplayStatusBarControl::UnitDisplayStatusBarControl() :\n     QList<BitcoinUnits::Unit> units = BitcoinUnits::availableUnits();\n     int max_width = 0;\n     const QFontMetrics fm(font());\n-    foreach (const BitcoinUnits::Unit unit, units)\n+    Q_FOREACH (const BitcoinUnits::Unit unit, units)\n     {\n         max_width = qMax(max_width, fm.width(BitcoinUnits::name(unit)));\n     }\n@@ -1069,7 +1069,7 @@ void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)\n void UnitDisplayStatusBarControl::createContextMenu()\n {\n     menu = new QMenu();\n-    foreach(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n+    Q_FOREACH(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n     {\n         QAction *menuAction = new QAction(QString(BitcoinUnits::name(u)), this);\n         menuAction->setData(QVariant(u));"
      },
      {
        "sha": "4e50b1712a0965ea75010edab95db46c07c938ff",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -136,11 +136,11 @@ class BitcoinGUI : public QMainWindow\n     /** Disconnect core signals from GUI client */\n     void unsubscribeFromCoreSignals();\n \n-signals:\n+Q_SIGNALS:\n     /** Signal raised when a URI was entered or dragged to the GUI */\n     void receivedURI(const QString &uri);\n \n-public slots:\n+public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n@@ -168,7 +168,7 @@ public slots:\n     void incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address, const QString& label);\n #endif // ENABLE_WALLET\n \n-private slots:\n+private Q_SLOTS:\n #ifdef ENABLE_WALLET\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n@@ -232,7 +232,7 @@ class UnitDisplayStatusBarControl : public QLabel\n     /** Creates context menu, its actions, and wires up all the relevant signals for mouse events. */\n     void createContextMenu();\n \n-private slots:\n+private Q_SLOTS:\n     /** When Display Units are changed on OptionsModel it will refresh the display text of the control on the status bar */\n     void updateDisplayUnit(int newUnits);\n     /** Tells underlying optionsModel to update its current display unit. */"
      },
      {
        "sha": "92a9ef279df2aab4291828d595f1422e3890f340",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -53,9 +53,9 @@ int ClientModel::getNumConnections(unsigned int flags) const\n         return vNodes.size();\n \n     int nNum = 0;\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n-    if (flags & (pnode->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT))\n-        nNum++;\n+    BOOST_FOREACH(const CNode* pnode, vNodes)\n+        if (flags & (pnode->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT))\n+            nNum++;\n \n     return nNum;\n }\n@@ -117,15 +117,15 @@ void ClientModel::updateTimer()\n         cachedReindexing = fReindex;\n         cachedImporting = fImporting;\n \n-        emit numBlocksChanged(newNumBlocks, newBlockDate);\n+        Q_EMIT numBlocksChanged(newNumBlocks, newBlockDate);\n     }\n \n-    emit bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n+    Q_EMIT bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n }\n \n void ClientModel::updateNumConnections(int numConnections)\n {\n-    emit numConnectionsChanged(numConnections);\n+    Q_EMIT numConnectionsChanged(numConnections);\n }\n \n void ClientModel::updateAlert(const QString &hash, int status)\n@@ -138,11 +138,11 @@ void ClientModel::updateAlert(const QString &hash, int status)\n         CAlert alert = CAlert::getAlertByHash(hash_256);\n         if(!alert.IsNull())\n         {\n-            emit message(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), CClientUIInterface::ICON_ERROR);\n+            Q_EMIT message(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), CClientUIInterface::ICON_ERROR);\n         }\n     }\n \n-    emit alertsChanged(getStatusBarWarnings());\n+    Q_EMIT alertsChanged(getStatusBarWarnings());\n }\n \n bool ClientModel::inInitialBlockDownload() const"
      },
      {
        "sha": "68434f404c39cfef67e9ff0ebcea5ca05c9e82ed",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -82,7 +82,7 @@ class ClientModel : public QObject\n     void subscribeToCoreSignals();\n     void unsubscribeFromCoreSignals();\n \n-signals:\n+Q_SIGNALS:\n     void numConnectionsChanged(int count);\n     void numBlocksChanged(int count, const QDateTime& blockDate);\n     void alertsChanged(const QString &warnings);\n@@ -94,7 +94,7 @@ class ClientModel : public QObject\n     // Show progress dialog e.g. for verifychain\n     void showProgress(const QString &title, int nProgress);\n \n-public slots:\n+public Q_SLOTS:\n     void updateTimer();\n     void updateNumConnections(int numConnections);\n     void updateAlert(const QString &hash, int status);"
      },
      {
        "sha": "778dbcb1ca3dc760f7a54dbcf0a2f1fbc7a22bbe",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 15,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -30,7 +30,6 @@\n #include <QTreeWidget>\n #include <QTreeWidgetItem>\n \n-using namespace std;\n QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n bool CoinControlDialog::fSubtractFeeFromAmount = false;\n@@ -118,7 +117,7 @@ CoinControlDialog::CoinControlDialog(QWidget *parent) :\n     // (un)select all\n     connect(ui->pushButtonSelectAll, SIGNAL(clicked()), this, SLOT(buttonSelectAllClicked()));\n \n-    // change coin control first column label due Qt4 bug. \n+    // change coin control first column label due Qt4 bug.\n     // see https://github.com/bitcoin/bitcoin/issues/5716\n     ui->treeWidget->headerItem()->setText(COLUMN_CHECKBOX, QString());\n \n@@ -442,7 +441,7 @@ QString CoinControlDialog::getPriorityLabel(double dPriority, double mempoolEsti\n // shows count of locked unspent outputs\n void CoinControlDialog::updateLabelLocked()\n {\n-    vector<COutPoint> vOutpts;\n+    std::vector<COutPoint> vOutpts;\n     model->listLockedCoins(vOutpts);\n     if (vOutpts.size() > 0)\n     {\n@@ -461,13 +460,13 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     CAmount nPayAmount = 0;\n     bool fDust = false;\n     CMutableTransaction txDummy;\n-    foreach(const CAmount &amount, CoinControlDialog::payAmounts)\n+    Q_FOREACH(const CAmount &amount, CoinControlDialog::payAmounts)\n     {\n         nPayAmount += amount;\n \n         if (amount > 0)\n         {\n-            CTxOut txout(amount, (CScript)vector<unsigned char>(24, 0));\n+            CTxOut txout(amount, (CScript)std::vector<unsigned char>(24, 0));\n             txDummy.vout.push_back(txout);\n             if (txout.IsDust(::minRelayTxFee))\n                fDust = true;\n@@ -487,13 +486,12 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     int nQuantityUncompressed   = 0;\n     bool fAllowFree             = false;\n \n-    vector<COutPoint> vCoinControl;\n-    vector<COutput>   vOutputs;\n+    std::vector<COutPoint> vCoinControl;\n+    std::vector<COutput>   vOutputs;\n     coinControl->ListSelected(vCoinControl);\n     model->getOutputs(vCoinControl, vOutputs);\n \n-    BOOST_FOREACH(const COutput& out, vOutputs)\n-    {\n+    BOOST_FOREACH(const COutput& out, vOutputs) {\n         // unselect already spent, very unlikely scenario, this could happen\n         // when selected are spent elsewhere, like rpc or another computer\n         uint256 txhash = out.tx->GetHash();\n@@ -569,7 +567,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             // Never create dust outputs; if we would, just add the dust to the fee.\n             if (nChange > 0 && nChange < CENT)\n             {\n-                CTxOut txout(nChange, (CScript)vector<unsigned char>(24, 0));\n+                CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n                 if (txout.IsDust(::minRelayTxFee))\n                 {\n                     if (CoinControlDialog::fSubtractFeeFromAmount) // dust-change will be raised until no dust\n@@ -688,11 +686,10 @@ void CoinControlDialog::updateView()\n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n     double mempoolEstimatePriority = mempool.estimatePriority(nTxConfirmTarget);\n \n-    map<QString, vector<COutput> > mapCoins;\n+    std::map<QString, std::vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);\n \n-    BOOST_FOREACH(PAIRTYPE(QString, vector<COutput>) coins, mapCoins)\n-    {\n+    BOOST_FOREACH(const PAIRTYPE(QString, std::vector<COutput>)& coins, mapCoins) {\n         QTreeWidgetItem *itemWalletAddress = new QTreeWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         QString sWalletAddress = coins.first;\n@@ -719,8 +716,7 @@ void CoinControlDialog::updateView()\n         double dPrioritySum = 0;\n         int nChildren = 0;\n         int nInputSum = 0;\n-        BOOST_FOREACH(const COutput& out, coins.second)\n-        {\n+        BOOST_FOREACH(const COutput& out, coins.second) {\n             int nInputSize = 0;\n             nSum += out.tx->vout[out.i].nValue;\n             nChildren++;"
      },
      {
        "sha": "0566b02c965a9b7f905dd60eccc9a1299425bf2e",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -102,7 +102,7 @@ class CoinControlDialog : public QDialog\n         return column;\n     }\n \n-private slots:\n+private Q_SLOTS:\n     void showMenu(const QPoint &);\n     void copyAmount();\n     void copyLabel();"
      },
      {
        "sha": "d59fce2d41c13e940871d687aa2edc6f174911e7",
        "filename": "src/qt/editaddressdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/editaddressdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/editaddressdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -40,7 +40,7 @@ class EditAddressDialog : public QDialog\n     QString getAddress() const;\n     void setAddress(const QString &address);\n \n-public slots:\n+public Q_SLOTS:\n     void accept();\n \n private:"
      },
      {
        "sha": "0ac3db6327ce1fc98ba0407ecba5b388a7803d78",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -169,7 +169,7 @@ namespace GUIUtil\n             void setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode);\n             void resizeColumn(int nColumnIndex, int width);\n \n-        private slots:\n+        private Q_SLOTS:\n             void on_sectionResized(int logicalIndex, int oldSize, int newSize);\n             void on_geometriesChanged();\n     };"
      },
      {
        "sha": "117969758c4617582990077eff8c6bc5388c6fce",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -42,10 +42,10 @@ class FreespaceChecker : public QObject\n         ST_ERROR\n     };\n \n-public slots:\n+public Q_SLOTS:\n     void check();\n \n-signals:\n+Q_SIGNALS:\n     void reply(int status, const QString &message, quint64 available);\n \n private:\n@@ -102,7 +102,7 @@ void FreespaceChecker::check()\n         replyStatus = ST_ERROR;\n         replyMessage = tr(\"Cannot create data directory here.\");\n     }\n-    emit reply(replyStatus, replyMessage, freeBytesAvailable);\n+    Q_EMIT reply(replyStatus, replyMessage, freeBytesAvailable);\n }\n \n \n@@ -121,7 +121,7 @@ Intro::~Intro()\n {\n     delete ui;\n     /* Ensure thread is finished before it is deleted */\n-    emit stopThread();\n+    Q_EMIT stopThread();\n     thread->wait();\n }\n \n@@ -277,7 +277,7 @@ void Intro::checkPath(const QString &dataDir)\n     if(!signalled)\n     {\n         signalled = true;\n-        emit requestCheck();\n+        Q_EMIT requestCheck();\n     }\n     mutex.unlock();\n }"
      },
      {
        "sha": "50783f7225c1f51c4e67ed3a835486fbb4e5aa3f",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -43,14 +43,14 @@ class Intro : public QDialog\n      */\n     static QString getDefaultDataDirectory();\n \n-signals:\n+Q_SIGNALS:\n     void requestCheck();\n     void stopThread();\n \n-public slots:\n+public Q_SLOTS:\n     void setStatus(int status, const QString &message, quint64 bytesAvailable);\n \n-private slots:\n+private Q_SLOTS:\n     void on_dataDirectory_textChanged(const QString &arg1);\n     void on_ellipsisButton_clicked();\n     void on_dataDirDefault_clicked();"
      },
      {
        "sha": "8bd867c1034ba471ff5b23b71c74b4937c72bb02",
        "filename": "src/qt/macdockiconhandler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/macdockiconhandler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/macdockiconhandler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -30,7 +30,7 @@ class MacDockIconHandler : public QObject\n     static void cleanup();\n     void handleDockIconClickEvent();\n \n-signals:\n+Q_SIGNALS:\n     void dockIconClicked();\n \n private:"
      },
      {
        "sha": "a41d39d51e3b2fde851b109276e3a66c605f2e67",
        "filename": "src/qt/macdockiconhandler.mm",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/macdockiconhandler.mm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/macdockiconhandler.mm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.mm?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -130,5 +130,5 @@ void setupDockClickHandler() {\n         this->mainWindow->show();\n     }\n \n-    emit this->dockIconClicked();\n+    Q_EMIT this->dockIconClicked();\n }"
      },
      {
        "sha": "f2a15e9c346bb050687704d4a8ad2d28de6d6a49",
        "filename": "src/qt/notificator.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/notificator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/notificator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -40,7 +40,7 @@ class Notificator: public QObject\n         Critical        /**< An error occurred */\n     };\n \n-public slots:\n+public Q_SLOTS:\n     /** Show notification message.\n        @param[in] cls    general message class\n        @param[in] title  title shown with message"
      },
      {
        "sha": "28b8f56ca6f0f1597ed45b9b038e850b0250bffa",
        "filename": "src/qt/openuridialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/openuridialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/openuridialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -21,10 +21,10 @@ class OpenURIDialog : public QDialog\n \n     QString getURI();\n \n-protected slots:\n+protected Q_SLOTS:\n     void accept();\n \n-private slots:\n+private Q_SLOTS:\n     void on_selectFileButton_clicked();\n \n private:"
      },
      {
        "sha": "173bed3b6250bb008f2440f0d10342dac752fd85",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -42,7 +42,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     /* Main elements init */\n     ui->databaseCache->setMinimum(nMinDbCache);\n     ui->databaseCache->setMaximum(nMaxDbCache);\n-    ui->threadsScriptVerif->setMinimum(-(int)boost::thread::hardware_concurrency());\n+    ui->threadsScriptVerif->setMinimum(-GetNumCores());\n     ui->threadsScriptVerif->setMaximum(MAX_SCRIPTCHECK_THREADS);\n \n     /* Network elements init */\n@@ -73,7 +73,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     /* Display elements init */\n     QDir translations(\":translations\");\n     ui->lang->addItem(QString(\"(\") + tr(\"default\") + QString(\")\"), QVariant(\"\"));\n-    foreach(const QString &langStr, translations.entryList())\n+    Q_FOREACH(const QString &langStr, translations.entryList())\n     {\n         QLocale locale(langStr);\n \n@@ -281,7 +281,7 @@ bool OptionsDialog::eventFilter(QObject *object, QEvent *event)\n     {\n         if(object == ui->proxyIp)\n         {\n-            emit proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n+            Q_EMIT proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n         }\n     }\n     return QDialog::eventFilter(object, event);"
      },
      {
        "sha": "fa983e798cce7cf740e77889ded05c105c7f7ef3",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -33,7 +33,7 @@ class OptionsDialog : public QDialog\n protected:\n     bool eventFilter(QObject *object, QEvent *event);\n \n-private slots:\n+private Q_SLOTS:\n     /* enable OK button */\n     void enableOkButton();\n     /* disable OK button */\n@@ -48,7 +48,7 @@ private slots:\n     void clearStatusLabel();\n     void doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n \n-signals:\n+Q_SIGNALS:\n     void proxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n \n private:"
      },
      {
        "sha": "b4ce8191d0f523f316b2ddbcee6bfba7f4db31a1",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -286,7 +286,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n         case CoinControlFeatures:\n             fCoinControlFeatures = value.toBool();\n             settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n-            emit coinControlFeaturesChanged(fCoinControlFeatures);\n+            Q_EMIT coinControlFeaturesChanged(fCoinControlFeatures);\n             break;\n         case DatabaseCache:\n             if (settings.value(\"nDatabaseCache\") != value) {\n@@ -311,7 +311,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n         }\n     }\n \n-    emit dataChanged(index, index);\n+    Q_EMIT dataChanged(index, index);\n \n     return successful;\n }\n@@ -324,7 +324,7 @@ void OptionsModel::setDisplayUnit(const QVariant &value)\n         QSettings settings;\n         nDisplayUnit = value.toInt();\n         settings.setValue(\"nDisplayUnit\", nDisplayUnit);\n-        emit displayUnitChanged(nDisplayUnit);\n+        Q_EMIT displayUnitChanged(nDisplayUnit);\n     }\n }\n "
      },
      {
        "sha": "fc26d65b04773b497f06eb32f3090c25198de785",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -81,7 +81,7 @@ class OptionsModel : public QAbstractListModel\n     /// Add option to list of GUI options overridden through command line/config file\n     void addOverriddenOption(const std::string &option);\n \n-signals:\n+Q_SIGNALS:\n     void displayUnitChanged(int unit);\n     void coinControlFeaturesChanged(bool);\n };"
      },
      {
        "sha": "bbd95ef4789c08612bb925b96c722590af535f53",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -142,7 +142,7 @@ OverviewPage::OverviewPage(QWidget *parent) :\n void OverviewPage::handleTransactionClicked(const QModelIndex &index)\n {\n     if(filter)\n-        emit transactionClicked(filter->mapToSource(index));\n+        Q_EMIT transactionClicked(filter->mapToSource(index));\n }\n \n OverviewPage::~OverviewPage()"
      },
      {
        "sha": "de5ac345dadc3aaada272c71c13a6c6ec1b8b165",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -35,11 +35,11 @@ class OverviewPage : public QWidget\n     void setWalletModel(WalletModel *walletModel);\n     void showOutOfSyncWarning(bool fShow);\n \n-public slots:\n+public Q_SLOTS:\n     void setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n                     const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n-signals:\n+Q_SIGNALS:\n     void transactionClicked(const QModelIndex &index);\n \n private:\n@@ -56,7 +56,7 @@ public slots:\n     TxViewDelegate *txdelegate;\n     TransactionFilterProxy *filter;\n \n-private slots:\n+private Q_SLOTS:\n     void updateDisplayUnit();\n     void handleTransactionClicked(const QModelIndex &index);\n     void updateAlerts(const QString &warnings);"
      },
      {
        "sha": "78a783dea4680c6e17a34e1fea4c79cf53560380",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -19,8 +19,6 @@\n #include <QDebug>\n #include <QSslCertificate>\n \n-using namespace std;\n-\n class SSLVerifyError : public std::runtime_error\n {\n public:\n@@ -49,7 +47,7 @@ bool PaymentRequestPlus::parse(const QByteArray& data)\n     return true;\n }\n \n-bool PaymentRequestPlus::SerializeToString(string* output) const\n+bool PaymentRequestPlus::SerializeToString(std::string* output) const\n {\n     return paymentRequest.SerializeToString(output);\n }"
      },
      {
        "sha": "6481b0046e7603ba6d8fb2d97431f5202c9acf0c",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 32,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -46,8 +46,6 @@\n #include <QUrlQuery>\n #endif\n \n-using namespace std;\n-\n const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; // milliseconds\n const QString BITCOIN_IPC_PREFIX(\"bitcoin:\");\n // BIP70 payment protocol messages\n@@ -148,7 +146,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n     int nRootCerts = 0;\n     const QDateTime currentTime = QDateTime::currentDateTime();\n \n-    foreach (const QSslCertificate& cert, certList) {\n+    Q_FOREACH (const QSslCertificate& cert, certList) {\n         // Don't log NULL certificates\n         if (cert.isNull())\n             continue;\n@@ -201,7 +199,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n // when uiReady() is called.\n //\n // Warning: ipcSendCommandLine() is called early in init,\n-// so don't use \"emit message()\", but \"QMessageBox::\"!\n+// so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n //\n void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n {\n@@ -269,7 +267,7 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n bool PaymentServer::ipcSendCommandLine()\n {\n     bool fResult = false;\n-    foreach (const QString& r, savedPaymentRequests)\n+    Q_FOREACH (const QString& r, savedPaymentRequests)\n     {\n         QLocalSocket* socket = new QLocalSocket();\n         socket->connectToServer(ipcServerName(), QIODevice::WriteOnly);\n@@ -326,7 +324,7 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :\n         uriServer = new QLocalServer(this);\n \n         if (!uriServer->listen(name)) {\n-            // constructor is called early in init, so don't use \"emit message()\" here\n+            // constructor is called early in init, so don't use \"Q_EMIT message()\" here\n             QMessageBox::critical(0, tr(\"Payment request error\"),\n                 tr(\"Cannot start bitcoin: click-to-pay handler\"));\n         }\n@@ -394,7 +392,7 @@ void PaymentServer::uiReady()\n     initNetManager();\n \n     saveURIs = false;\n-    foreach (const QString& s, savedPaymentRequests)\n+    Q_FOREACH (const QString& s, savedPaymentRequests)\n     {\n         handleURIOrFile(s);\n     }\n@@ -431,7 +429,7 @@ void PaymentServer::handleURIOrFile(const QString& s)\n             else\n             {\n                 qWarning() << \"PaymentServer::handleURIOrFile: Invalid URL: \" << fetchUrl;\n-                emit message(tr(\"URI handling\"),\n+                Q_EMIT message(tr(\"URI handling\"),\n                     tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n                     CClientUIInterface::ICON_WARNING);\n             }\n@@ -445,14 +443,14 @@ void PaymentServer::handleURIOrFile(const QString& s)\n             {\n                 CBitcoinAddress address(recipient.address.toStdString());\n                 if (!address.IsValid()) {\n-                    emit message(tr(\"URI handling\"), tr(\"Invalid payment address %1\").arg(recipient.address),\n+                    Q_EMIT message(tr(\"URI handling\"), tr(\"Invalid payment address %1\").arg(recipient.address),\n                         CClientUIInterface::MSG_ERROR);\n                 }\n                 else\n-                    emit receivedPaymentRequest(recipient);\n+                    Q_EMIT receivedPaymentRequest(recipient);\n             }\n             else\n-                emit message(tr(\"URI handling\"),\n+                Q_EMIT message(tr(\"URI handling\"),\n                     tr(\"URI cannot be parsed! This can be caused by an invalid Bitcoin address or malformed URI parameters.\"),\n                     CClientUIInterface::ICON_WARNING);\n \n@@ -466,12 +464,12 @@ void PaymentServer::handleURIOrFile(const QString& s)\n         SendCoinsRecipient recipient;\n         if (!readPaymentRequestFromFile(s, request))\n         {\n-            emit message(tr(\"Payment request file handling\"),\n+            Q_EMIT message(tr(\"Payment request file handling\"),\n                 tr(\"Payment request file cannot be read! This can be caused by an invalid payment request file.\"),\n                 CClientUIInterface::ICON_WARNING);\n         }\n         else if (processPaymentRequest(request, recipient))\n-            emit receivedPaymentRequest(recipient);\n+            Q_EMIT receivedPaymentRequest(recipient);\n \n         return;\n     }\n@@ -500,7 +498,7 @@ void PaymentServer::handleURIConnection()\n \n //\n // Warning: readPaymentRequestFromFile() is used in ipcSendCommandLine()\n-// so don't use \"emit message()\", but \"QMessageBox::\"!\n+// so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n //\n bool PaymentServer::readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request)\n {\n@@ -533,7 +531,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n     if (request.IsInitialized()) {\n         // Payment request network matches client network?\n         if (!verifyNetwork(request.getDetails())) {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n+            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n             return false;\n@@ -542,13 +540,13 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n         // Make sure any payment requests involved are still valid.\n         // This is re-checked just before sending coins in WalletModel::sendCoins().\n         if (verifyExpired(request.getDetails())) {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Payment request expired.\"),\n+            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Payment request expired.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n             return false;\n         }\n     } else {\n-        emit message(tr(\"Payment request error\"), tr(\"Payment request is not initialized.\"),\n+        Q_EMIT message(tr(\"Payment request error\"), tr(\"Payment request is not initialized.\"),\n             CClientUIInterface::MSG_ERROR);\n \n         return false;\n@@ -562,7 +560,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n     QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    foreach(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    Q_FOREACH(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {\n@@ -573,7 +571,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n             // Unauthenticated payment requests to custom bitcoin addresses are not supported\n             // (there is no good way to tell the user where they are paying in a way they'd\n             // have a chance of understanding).\n-            emit message(tr(\"Payment request rejected\"),\n+            Q_EMIT message(tr(\"Payment request rejected\"),\n                 tr(\"Unverified payment requests to custom payment scripts are unsupported.\"),\n                 CClientUIInterface::MSG_ERROR);\n             return false;\n@@ -583,14 +581,14 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n         // but CAmount is defined as int64_t. Because of that we need to verify that amounts are in a valid range\n         // and no overflow has happened.\n         if (!verifyAmount(sendingTo.second)) {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n             return false;\n         }\n \n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n         if (txOut.IsDust(::minRelayTxFee)) {\n-            emit message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n+            Q_EMIT message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second)),\n                 CClientUIInterface::MSG_ERROR);\n \n@@ -600,7 +598,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n         recipient.amount += sendingTo.second;\n         // Also verify that the final amount is still in a valid range after adding additional amounts.\n         if (!verifyAmount(recipient.amount)) {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n             return false;\n         }\n     }\n@@ -647,7 +645,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     // Create a new refund address, or re-use:\n     QString account = tr(\"Refund from %1\").arg(recipient.authenticatedMerchant);\n     std::string strAccount = account.toStdString();\n-    set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n+    std::set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n     if (!refundAddresses.empty()) {\n         CScript s = GetScriptForDestination(*refundAddresses.begin());\n         payments::Output* refund_to = payment.add_refund_to();\n@@ -694,7 +692,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             .arg(BIP70_MAX_PAYMENTREQUEST_SIZE);\n \n         qWarning() << QString(\"PaymentServer::%1:\").arg(__func__) << msg;\n-        emit message(tr(\"Payment request DoS protection\"), msg, CClientUIInterface::MSG_ERROR);\n+        Q_EMIT message(tr(\"Payment request DoS protection\"), msg, CClientUIInterface::MSG_ERROR);\n         return;\n     }\n \n@@ -704,7 +702,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             .arg(reply->errorString());\n \n         qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n-        emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n+        Q_EMIT message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         return;\n     }\n \n@@ -718,12 +716,12 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n         if (!request.parse(data))\n         {\n             qWarning() << \"PaymentServer::netRequestFinished: Error parsing payment request\";\n-            emit message(tr(\"Payment request error\"),\n+            Q_EMIT message(tr(\"Payment request error\"),\n                 tr(\"Payment request cannot be parsed!\"),\n                 CClientUIInterface::MSG_ERROR);\n         }\n         else if (processPaymentRequest(request, recipient))\n-            emit receivedPaymentRequest(recipient);\n+            Q_EMIT receivedPaymentRequest(recipient);\n \n         return;\n     }\n@@ -736,11 +734,11 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n                 .arg(reply->request().url().toString());\n \n             qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n-            emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n+            Q_EMIT message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         }\n         else\n         {\n-            emit receivedPaymentACK(GUIUtil::HtmlEscape(paymentACK.memo()));\n+            Q_EMIT receivedPaymentACK(GUIUtil::HtmlEscape(paymentACK.memo()));\n         }\n     }\n }\n@@ -750,11 +748,11 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n     Q_UNUSED(reply);\n \n     QString errString;\n-    foreach (const QSslError& err, errs) {\n+    Q_FOREACH (const QSslError& err, errs) {\n         qWarning() << \"PaymentServer::reportSslErrors: \" << err;\n         errString += err.errorString() + \"\\n\";\n     }\n-    emit message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);\n+    Q_EMIT message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);\n }\n \n void PaymentServer::setOptionsModel(OptionsModel *optionsModel)\n@@ -765,7 +763,7 @@ void PaymentServer::setOptionsModel(OptionsModel *optionsModel)\n void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n {\n     // currently we don't futher process or store the paymentACK message\n-    emit message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n+    Q_EMIT message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n }\n \n bool PaymentServer::verifyNetwork(const payments::PaymentDetails& requestDetails)"
      },
      {
        "sha": "5df0a14cf74cd530c661668082be2e456260f7ee",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -98,7 +98,7 @@ class PaymentServer : public QObject\n     // Verify the payment request amount is valid\n     static bool verifyAmount(const CAmount& requestAmount);\n \n-signals:\n+Q_SIGNALS:\n     // Fired when a valid payment request is received\n     void receivedPaymentRequest(SendCoinsRecipient);\n \n@@ -108,7 +108,7 @@ class PaymentServer : public QObject\n     // Fired when a message should be reported to the user\n     void message(const QString &title, const QString &message, unsigned int style);\n \n-public slots:\n+public Q_SLOTS:\n     // Signal this when the main window's UI is ready\n     // to display payment requests to the user\n     void uiReady();\n@@ -119,7 +119,7 @@ public slots:\n     // Handle an incoming URI, URI with local file scheme or file\n     void handleURIOrFile(const QString& s);\n \n-private slots:\n+private Q_SLOTS:\n     void handleURIConnection();\n     void netRequestFinished(QNetworkReply*);\n     void reportSslErrors(QNetworkReply*, const QList<QSslError> &);"
      },
      {
        "sha": "85339166b0e486b35227812054d1f93f58c905b9",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -63,7 +63,7 @@ class PeerTablePriv\n #if QT_VERSION >= 0x040700\n             cachedNodeStats.reserve(vNodes.size());\n #endif\n-            foreach (CNode* pnode, vNodes)\n+            Q_FOREACH (CNode* pnode, vNodes)\n             {\n                 CNodeCombinedStats stats;\n                 stats.nodeStateStats.nMisbehavior = 0;\n@@ -92,7 +92,7 @@ class PeerTablePriv\n         // build index map\n         mapNodeRows.clear();\n         int row = 0;\n-        foreach (const CNodeCombinedStats& stats, cachedNodeStats)\n+        Q_FOREACH (const CNodeCombinedStats& stats, cachedNodeStats)\n             mapNodeRows.insert(std::pair<NodeId, int>(stats.nodeStats.nodeid, row++));\n     }\n \n@@ -220,9 +220,9 @@ const CNodeCombinedStats *PeerTableModel::getNodeStats(int idx)\n \n void PeerTableModel::refresh()\n {\n-    emit layoutAboutToBeChanged();\n+    Q_EMIT layoutAboutToBeChanged();\n     priv->refreshPeers();\n-    emit layoutChanged();\n+    Q_EMIT layoutChanged();\n }\n \n int PeerTableModel::getRowByNodeId(NodeId nodeid)"
      },
      {
        "sha": "fcb89b7611f423d0abdc7025b94e6fc976348428",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -68,7 +68,7 @@ class PeerTableModel : public QAbstractTableModel\n     void sort(int column, Qt::SortOrder order);\n     /*@}*/\n \n-public slots:\n+public Q_SLOTS:\n     void refresh();\n \n private:"
      },
      {
        "sha": "8665acda5ea67cd80b1a8328944f906ba776ad09",
        "filename": "src/qt/qvalidatedlineedit.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/qvalidatedlineedit.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/qvalidatedlineedit.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -27,11 +27,11 @@ class QValidatedLineEdit : public QLineEdit\n     bool valid;\n     const QValidator *checkValidator;\n \n-public slots:\n+public Q_SLOTS:\n     void setValid(bool valid);\n     void setEnabled(bool enabled);\n \n-private slots:\n+private Q_SLOTS:\n     void markValid();\n     void checkValidity();\n };"
      },
      {
        "sha": "800436661f2312c733b8bd8c4f19c81259c447ce",
        "filename": "src/qt/qvaluecombobox.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/qvaluecombobox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/qvaluecombobox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -27,5 +27,5 @@ void QValueComboBox::setRole(int role)\n \n void QValueComboBox::handleSelectionChanged(int idx)\n {\n-    emit valueChanged();\n+    Q_EMIT valueChanged();\n }"
      },
      {
        "sha": "5b20e6a5a4ac503a596fc4382ceb43b2f21352c3",
        "filename": "src/qt/qvaluecombobox.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/qvaluecombobox.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/qvaluecombobox.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -24,13 +24,13 @@ class QValueComboBox : public QComboBox\n     /** Specify model role to use as ordinal value (defaults to Qt::UserRole) */\n     void setRole(int role);\n \n-signals:\n+Q_SIGNALS:\n     void valueChanged();\n \n private:\n     int role;\n \n-private slots:\n+private Q_SLOTS:\n     void handleSelectionChanged(int idx);\n };\n "
      },
      {
        "sha": "43b46c63b52913a0a97b12f48f30e5bcf303e77e",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -185,8 +185,7 @@ void ReceiveCoinsDialog::on_showRequestButton_clicked()\n         return;\n     QModelIndexList selection = ui->recentRequestsView->selectionModel()->selectedRows();\n \n-    foreach (QModelIndex index, selection)\n-    {\n+    Q_FOREACH (const QModelIndex& index, selection) {\n         on_recentRequestsView_doubleClicked(index);\n     }\n }"
      },
      {
        "sha": "6bb159482bf56a2902274dfeb2cf00b143c97149",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -44,7 +44,7 @@ class ReceiveCoinsDialog : public QDialog\n \n     void setModel(WalletModel *model);\n \n-public slots:\n+public Q_SLOTS:\n     void clear();\n     void reject();\n     void accept();\n@@ -60,7 +60,7 @@ public slots:\n     void copyColumnToClipboard(int column);\n     virtual void resizeEvent(QResizeEvent *event);\n \n-private slots:\n+private Q_SLOTS:\n     void on_receiveButton_clicked();\n     void on_showRequestButton_clicked();\n     void on_removeRequestButton_clicked();"
      },
      {
        "sha": "69f84ebbd725326f6f2d25c1759ba1737f57aaaf",
        "filename": "src/qt/receiverequestdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/receiverequestdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/receiverequestdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -32,7 +32,7 @@ class QRImageWidget : public QLabel\n     explicit QRImageWidget(QWidget *parent = 0);\n     QImage exportImage();\n \n-public slots:\n+public Q_SLOTS:\n     void saveImage();\n     void copyImage();\n \n@@ -55,7 +55,7 @@ class ReceiveRequestDialog : public QDialog\n     void setModel(OptionsModel *model);\n     void setInfo(const SendCoinsRecipient &info);\n \n-private slots:\n+private Q_SLOTS:\n     void on_btnCopyURI_clicked();\n     void on_btnCopyAddress_clicked();\n "
      },
      {
        "sha": "5692a7aaef392f3d3ca7cd84a8eabffc581fb08a",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -119,7 +119,7 @@ QVariant RecentRequestsTableModel::headerData(int section, Qt::Orientation orien\n void RecentRequestsTableModel::updateAmountColumnTitle()\n {\n     columns[Amount] = getAmountTitle();\n-    emit headerDataChanged(Qt::Horizontal,Amount,Amount);\n+    Q_EMIT headerDataChanged(Qt::Horizontal,Amount,Amount);\n }\n \n /** Gets title for amount column including current display unit if optionsModel reference available. */\n@@ -214,7 +214,7 @@ void RecentRequestsTableModel::addNewRequest(RecentRequestEntry &recipient)\n void RecentRequestsTableModel::sort(int column, Qt::SortOrder order)\n {\n     qSort(list.begin(), list.end(), RecentRequestEntryLessThan(column, order));\n-    emit dataChanged(index(0, 0, QModelIndex()), index(list.size() - 1, NUMBER_OF_COLUMNS - 1, QModelIndex()));\n+    Q_EMIT dataChanged(index(0, 0, QModelIndex()), index(list.size() - 1, NUMBER_OF_COLUMNS - 1, QModelIndex()));\n }\n \n void RecentRequestsTableModel::updateDisplayUnit()"
      },
      {
        "sha": "64faa72d455b9a2fac2082eafc994ab4bccc3ca3",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -89,7 +89,7 @@ class RecentRequestsTableModel: public QAbstractTableModel\n     void addNewRequest(const std::string &recipient);\n     void addNewRequest(RecentRequestEntry &recipient);\n \n-public slots:\n+public Q_SLOTS:\n     void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);\n     void updateDisplayUnit();\n "
      },
      {
        "sha": "2fafb83d43ea330faf141dd65aca62c37bcc628a",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -60,10 +60,10 @@ class RPCExecutor : public QObject\n {\n     Q_OBJECT\n \n-public slots:\n+public Q_SLOTS:\n     void request(const QString &command);\n \n-signals:\n+Q_SIGNALS:\n     void reply(int category, const QString &command);\n };\n \n@@ -95,7 +95,7 @@ bool parseCommandLine(std::vector<std::string> &args, const std::string &strComm\n         STATE_ESCAPE_DOUBLEQUOTED\n     } state = STATE_EATING_SPACES;\n     std::string curarg;\n-    foreach(char ch, strCommand)\n+    Q_FOREACH(char ch, strCommand)\n     {\n         switch(state)\n         {\n@@ -158,7 +158,7 @@ void RPCExecutor::request(const QString &command)\n     std::vector<std::string> args;\n     if(!parseCommandLine(args, command.toStdString()))\n     {\n-        emit reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n+        Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n         return;\n     }\n     if(args.empty())\n@@ -180,24 +180,24 @@ void RPCExecutor::request(const QString &command)\n         else\n             strPrint = result.write(2);\n \n-        emit reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n+        Q_EMIT reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n     }\n     catch (UniValue& objError)\n     {\n         try // Nice formatting for standard-format error\n         {\n             int code = find_value(objError, \"code\").get_int();\n             std::string message = find_value(objError, \"message\").get_str();\n-            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(message) + \" (code \" + QString::number(code) + \")\");\n+            Q_EMIT reply(RPCConsole::CMD_ERROR, QString::fromStdString(message) + \" (code \" + QString::number(code) + \")\");\n         }\n         catch (const std::runtime_error&) // raised when converting to invalid type, i.e. missing code or message\n         {   // Show raw JSON object\n-            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(objError.write()));\n+            Q_EMIT reply(RPCConsole::CMD_ERROR, QString::fromStdString(objError.write()));\n         }\n     }\n     catch (const std::exception& e)\n     {\n-        emit reply(RPCConsole::CMD_ERROR, QString(\"Error: \") + QString::fromStdString(e.what()));\n+        Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Error: \") + QString::fromStdString(e.what()));\n     }\n }\n \n@@ -245,7 +245,7 @@ RPCConsole::RPCConsole(QWidget *parent) :\n RPCConsole::~RPCConsole()\n {\n     GUIUtil::saveWindowGeometry(\"nRPCConsoleWindow\", this);\n-    emit stopExecutor();\n+    Q_EMIT stopExecutor();\n     delete ui;\n }\n \n@@ -431,7 +431,7 @@ void RPCConsole::on_lineEdit_returnPressed()\n     if(!cmd.isEmpty())\n     {\n         message(CMD_REQUEST, cmd);\n-        emit cmdRequest(cmd);\n+        Q_EMIT cmdRequest(cmd);\n         // Remove command, if already in history\n         history.removeOne(cmd);\n         // Append command to history\n@@ -687,7 +687,7 @@ void RPCConsole::disconnectSelectedNode()\n     QString strNode = GUIUtil::getEntryData(ui->peerWidget, 0, PeerTableModel::Address);\n     // Find the node, disconnect it and clear the selected node\n     if (CNode *bannedNode = FindNode(strNode.toStdString())) {\n-        bannedNode->CloseSocketDisconnect();\n+        bannedNode->fDisconnect = true;\n         clearSelectedNode();\n     }\n }"
      },
      {
        "sha": "6f42aa08b79e11765afa17c0c3e3c8f0e3ff32af",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -46,7 +46,7 @@ class RPCConsole: public QWidget\n     virtual bool eventFilter(QObject* obj, QEvent *event);\n     void keyPressEvent(QKeyEvent *);\n \n-private slots:\n+private Q_SLOTS:\n     void on_lineEdit_returnPressed();\n     void on_tabWidget_currentChanged(int index);\n     /** open the debug.log from the current datadir */\n@@ -61,7 +61,7 @@ private slots:\n     /** Show custom context menu on Peers tab */\n     void showMenu(const QPoint& point);\n \n-public slots:\n+public Q_SLOTS:\n     void clear();\n     void message(int category, const QString &message, bool html = false);\n     /** Set number of connections shown in the UI */\n@@ -79,7 +79,7 @@ public slots:\n     /** Disconnect a selected node on the Peers tab */\n     void disconnectSelectedNode();\n \n-signals:\n+Q_SIGNALS:\n     // For RPC command executor\n     void stopExecutor();\n     void cmdRequest(const QString &command);"
      },
      {
        "sha": "e13cd714a632007edb0306d2820d930b8a8b845a",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -251,7 +251,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     // Format confirmation message\n     QStringList formatted;\n-    foreach(const SendCoinsRecipient &rcp, currentTransaction.getRecipients())\n+    Q_FOREACH(const SendCoinsRecipient &rcp, currentTransaction.getRecipients())\n     {\n         // generate bold amount string\n         QString amount = \"<b>\" + BitcoinUnits::formatHtmlWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n@@ -305,7 +305,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     questionString.append(\"<hr />\");\n     CAmount totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n     QStringList alternativeUnits;\n-    foreach(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n+    Q_FOREACH(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n     {\n         if(u != model->getOptionsModel()->getDisplayUnit())\n             alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n@@ -540,7 +540,7 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         return;\n     }\n \n-    emit message(tr(\"Send Coins\"), msgParams.first, msgParams.second);\n+    Q_EMIT message(tr(\"Send Coins\"), msgParams.first, msgParams.second);\n }\n \n void SendCoinsDialog::minimizeFeeSection(bool fMinimize)"
      },
      {
        "sha": "c833da84b2ef2c78564b33e5c4b2171e545eb8ca",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -45,7 +45,7 @@ class SendCoinsDialog : public QDialog\n     void pasteEntry(const SendCoinsRecipient &rv);\n     bool handlePaymentRequest(const SendCoinsRecipient &recipient);\n \n-public slots:\n+public Q_SLOTS:\n     void clear();\n     void reject();\n     void accept();\n@@ -62,13 +62,13 @@ public slots:\n     bool fFeeMinimized;\n \n     // Process WalletModel::SendCoinsReturn and generate a pair consisting\n-    // of a message and message flags for use in emit message().\n+    // of a message and message flags for use in Q_EMIT message().\n     // Additional parameter msgArg can be used via .arg(msgArg).\n     void processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg = QString());\n     void minimizeFeeSection(bool fMinimize);\n     void updateFeeMinimizedLabel();\n \n-private slots:\n+private Q_SLOTS:\n     void on_sendButton_clicked();\n     void on_buttonChooseFee_clicked();\n     void on_buttonMinimizeFee_clicked();\n@@ -93,7 +93,7 @@ private slots:\n     void updateSmartFeeLabel();\n     void updateGlobalFeeVariables();\n \n-signals:\n+Q_SIGNALS:\n     // Fired when a message should be reported to the user\n     void message(const QString &title, const QString &message, unsigned int style);\n };"
      },
      {
        "sha": "90a8cbdc4ea42097aa2dcc2d7f4c88349995bc25",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -114,7 +114,7 @@ void SendCoinsEntry::clear()\n \n void SendCoinsEntry::deleteClicked()\n {\n-    emit removeEntry(this);\n+    Q_EMIT removeEntry(this);\n }\n \n bool SendCoinsEntry::validate()"
      },
      {
        "sha": "d7e655fdc3991f78e073ea8bb62cff5ea0287d7c",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -45,15 +45,15 @@ class SendCoinsEntry : public QStackedWidget\n \n     void setFocus();\n \n-public slots:\n+public Q_SLOTS:\n     void clear();\n \n-signals:\n+Q_SIGNALS:\n     void removeEntry(SendCoinsEntry *entry);\n     void payAmountChanged();\n     void subtractFeeFromAmountChanged();\n \n-private slots:\n+private Q_SLOTS:\n     void deleteClicked();\n     void on_payTo_textChanged(const QString &address);\n     void on_addressBookButton_clicked();"
      },
      {
        "sha": "bf841e4f8b3f26fdd52ed97bee3068a2e18c6dde",
        "filename": "src/qt/signverifymessagedialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/signverifymessagedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/signverifymessagedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -35,7 +35,7 @@ class SignVerifyMessageDialog : public QDialog\n     Ui::SignVerifyMessageDialog *ui;\n     WalletModel *model;\n \n-private slots:\n+private Q_SLOTS:\n     /* sign message */\n     void on_addressBookButton_SM_clicked();\n     void on_pasteButton_SM_clicked();"
      },
      {
        "sha": "29d16d4eae2d6bea46075bfbafe7fb147cb19076",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -27,7 +27,7 @@ class SplashScreen : public QWidget\n     void paintEvent(QPaintEvent *event);\n     void closeEvent(QCloseEvent *event);\n \n-public slots:\n+public Q_SLOTS:\n     /** Slot to call finish() method as it's not defined as slot */\n     void slotFinish(QWidget *mainWin);\n "
      },
      {
        "sha": "b28934cd313579871b0cb12ddd7abd756d1368a5",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -195,7 +195,7 @@ void PaymentServerTests::paymentServerTests()\n     QVERIFY(r.paymentRequest.IsInitialized());\n     // Extract address and amount from the request\n     QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n-    foreach (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    Q_FOREACH (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest))\n             QCOMPARE(PaymentServer::verifyAmount(sendingTo.second), false);"
      },
      {
        "sha": "71d61fcbe77c3acdf8273edba4902fdd2027609c",
        "filename": "src/qt/test/paymentservertests.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/test/paymentservertests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/test/paymentservertests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -14,7 +14,7 @@ class PaymentServerTests : public QObject\n {\n     Q_OBJECT\n \n-private slots:\n+private Q_SLOTS:\n     void paymentServerTests();\n };\n \n@@ -25,7 +25,7 @@ class RecipientCatcher : public QObject\n {\n     Q_OBJECT\n \n-public slots:\n+public Q_SLOTS:\n     void getRecipient(SendCoinsRecipient r);\n \n public:"
      },
      {
        "sha": "434169dcde0cf20cca56b9a6804b0400a7c717a5",
        "filename": "src/qt/test/uritests.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/test/uritests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/test/uritests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/uritests.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -12,7 +12,7 @@ class URITests : public QObject\n {\n     Q_OBJECT\n \n-private slots:\n+private Q_SLOTS:\n     void uriTests();\n };\n "
      },
      {
        "sha": "9b67445bc0f428d4577bc5e23a30e72541161143",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -139,10 +139,10 @@ void TrafficGraphWidget::updateRates()\n     }\n \n     float tmax = 0.0f;\n-    foreach(float f, vSamplesIn) {\n+    Q_FOREACH(float f, vSamplesIn) {\n         if(f > tmax) tmax = f;\n     }\n-    foreach(float f, vSamplesOut) {\n+    Q_FOREACH(float f, vSamplesOut) {\n         if(f > tmax) tmax = f;\n     }\n     fMax = tmax;"
      },
      {
        "sha": "6336a8d1446465f8ce7b4bed68e7bef4adf455e0",
        "filename": "src/qt/trafficgraphwidget.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/trafficgraphwidget.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/trafficgraphwidget.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -27,7 +27,7 @@ class TrafficGraphWidget : public QWidget\n protected:\n     void paintEvent(QPaintEvent *);\n \n-public slots:\n+public Q_SLOTS:\n     void updateRates();\n     void setGraphRangeMins(int mins);\n     void clear();"
      },
      {
        "sha": "af78a51d0fc3f58e6397ab3a11e971dd6e16d93c",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -21,8 +21,6 @@\n #include <stdint.h>\n #include <string>\n \n-using namespace std;\n-\n QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n {\n     AssertLockHeld(cs_main);\n@@ -243,14 +241,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + TransactionRecord::formatSubTxId(wtx.GetHash(), rec->idx) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-    foreach (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n+    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n         if (r.first == \"Message\")\n             strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n     //\n     // PaymentRequest info:\n     //\n-    foreach (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n+    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n     {\n         if (r.first == \"PaymentRequest\")\n         {"
      },
      {
        "sha": "e3d64387f71033d6b9d6195395c8096fd17ec00c",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -142,7 +142,7 @@ class TransactionTablePriv\n                 {\n                     parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex+toInsert.size()-1);\n                     int insert_idx = lowerIndex;\n-                    foreach(const TransactionRecord &rec, toInsert)\n+                    Q_FOREACH(const TransactionRecord &rec, toInsert)\n                     {\n                         cachedWallet.insert(insert_idx, rec);\n                         insert_idx += 1;\n@@ -245,7 +245,7 @@ TransactionTableModel::~TransactionTableModel()\n void TransactionTableModel::updateAmountColumnTitle()\n {\n     columns[Amount] = BitcoinUnits::getAmountColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n-    emit headerDataChanged(Qt::Horizontal,Amount,Amount);\n+    Q_EMIT headerDataChanged(Qt::Horizontal,Amount,Amount);\n }\n \n void TransactionTableModel::updateTransaction(const QString &hash, int status, bool showTransaction)\n@@ -262,8 +262,8 @@ void TransactionTableModel::updateConfirmations()\n     // Invalidate status (number of confirmations) and (possibly) description\n     //  for all rows. Qt is smart enough to only actually request the data for the\n     //  visible rows.\n-    emit dataChanged(index(0, Status), index(priv->size()-1, Status));\n-    emit dataChanged(index(0, ToAddress), index(priv->size()-1, ToAddress));\n+    Q_EMIT dataChanged(index(0, Status), index(priv->size()-1, Status));\n+    Q_EMIT dataChanged(index(0, ToAddress), index(priv->size()-1, ToAddress));\n }\n \n int TransactionTableModel::rowCount(const QModelIndex &parent) const\n@@ -650,7 +650,7 @@ void TransactionTableModel::updateDisplayUnit()\n {\n     // emit dataChanged to update Amount column with the current unit\n     updateAmountColumnTitle();\n-    emit dataChanged(index(0, Amount), index(priv->size()-1, Amount));\n+    Q_EMIT dataChanged(index(0, Amount), index(priv->size()-1, Amount));\n }\n \n // queue notifications to show a non freezing progress dialog e.g. for rescan"
      },
      {
        "sha": "25c82c764bd81f102b55010a06a3608fafccc5cf",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -98,7 +98,7 @@ class TransactionTableModel : public QAbstractTableModel\n     QVariant txWatchonlyDecoration(const TransactionRecord *wtx) const;\n     QVariant txAddressDecoration(const TransactionRecord *wtx) const;\n \n-public slots:\n+public Q_SLOTS:\n     /* New transaction, or transaction changed status */\n     void updateTransaction(const QString &hash, int status, bool showTransaction);\n     void updateConfirmations();"
      },
      {
        "sha": "998789b3ae453a2e1203570b200878a5e50f75ad",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -341,11 +341,11 @@ void TransactionView::exportClicked()\n     writer.addColumn(tr(\"ID\"), 0, TransactionTableModel::TxIDRole);\n \n     if(!writer.write()) {\n-        emit message(tr(\"Exporting Failed\"), tr(\"There was an error trying to save the transaction history to %1.\").arg(filename),\n+        Q_EMIT message(tr(\"Exporting Failed\"), tr(\"There was an error trying to save the transaction history to %1.\").arg(filename),\n             CClientUIInterface::MSG_ERROR);\n     }\n     else {\n-        emit message(tr(\"Exporting Successful\"), tr(\"The transaction history was successfully saved to %1.\").arg(filename),\n+        Q_EMIT message(tr(\"Exporting Successful\"), tr(\"The transaction history was successfully saved to %1.\").arg(filename),\n             CClientUIInterface::MSG_INFORMATION);\n     }\n }"
      },
      {
        "sha": "6c35362be4e3116e38fec8f9d96e724cb64c5909",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -83,7 +83,7 @@ class TransactionView : public QWidget\n \n     bool eventFilter(QObject *obj, QEvent *event);\n \n-private slots:\n+private Q_SLOTS:\n     void contextualMenu(const QPoint &);\n     void dateRangeChanged();\n     void showDetails();\n@@ -95,13 +95,13 @@ private slots:\n     void openThirdPartyTxUrl(QString url);\n     void updateWatchOnlyColumn(bool fHaveWatchOnly);\n \n-signals:\n+Q_SIGNALS:\n     void doubleClicked(const QModelIndex&);\n \n     /**  Fired when a message should be reported to the user */\n     void message(const QString &title, const QString &message, unsigned int style);\n \n-public slots:\n+public Q_SLOTS:\n     void chooseDate(int idx);\n     void chooseType(int idx);\n     void chooseWatchonly(int idx);"
      },
      {
        "sha": "5e26f3e01b6bbd174823ef44e02880b51ccbee1f",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -84,7 +84,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         QTextCharFormat bold;\n         bold.setFontWeight(QFont::Bold);\n \n-        foreach (const QString &line, coreOptions.split(\"\\n\")) {\n+        Q_FOREACH (const QString &line, coreOptions.split(\"\\n\")) {\n             if (line.startsWith(\"  -\"))\n             {\n                 cursor.currentTable()->appendRows(1);"
      },
      {
        "sha": "47282ae2d0504587b044d50998adec9b1b6b9f89",
        "filename": "src/qt/utilitydialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/utilitydialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/utilitydialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -31,7 +31,7 @@ class HelpMessageDialog : public QDialog\n     Ui::HelpMessageDialog *ui;\n     QString text;\n \n-private slots:\n+private Q_SLOTS:\n     void on_okButton_accepted();\n };\n "
      },
      {
        "sha": "5a5e2ab944311ddd657d7825204932e179153c16",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -47,7 +47,7 @@ class WalletFrame : public QFrame\n \n     WalletView *currentWalletView();\n \n-public slots:\n+public Q_SLOTS:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n     /** Switch to history (transactions) page */"
      },
      {
        "sha": "168a0255ffd39abbc5d6ec95236ec8a55621bcf0",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -25,8 +25,6 @@\n #include <QSet>\n #include <QTimer>\n \n-using namespace std;\n-\n WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n     transactionTableModel(0),\n@@ -107,7 +105,7 @@ void WalletModel::updateStatus()\n     EncryptionStatus newEncryptionStatus = getEncryptionStatus();\n \n     if(cachedEncryptionStatus != newEncryptionStatus)\n-        emit encryptionStatusChanged(newEncryptionStatus);\n+        Q_EMIT encryptionStatusChanged(newEncryptionStatus);\n }\n \n void WalletModel::pollBalanceChanged()\n@@ -159,7 +157,7 @@ void WalletModel::checkBalanceChanged()\n         cachedWatchOnlyBalance = newWatchOnlyBalance;\n         cachedWatchUnconfBalance = newWatchUnconfBalance;\n         cachedWatchImmatureBalance = newWatchImmatureBalance;\n-        emit balanceChanged(newBalance, newUnconfirmedBalance, newImmatureBalance,\n+        Q_EMIT balanceChanged(newBalance, newUnconfirmedBalance, newImmatureBalance,\n                             newWatchOnlyBalance, newWatchUnconfBalance, newWatchImmatureBalance);\n     }\n }\n@@ -180,7 +178,7 @@ void WalletModel::updateAddressBook(const QString &address, const QString &label\n void WalletModel::updateWatchOnlyFlag(bool fHaveWatchonly)\n {\n     fHaveWatchOnly = fHaveWatchonly;\n-    emit notifyWatchonlyChanged(fHaveWatchonly);\n+    Q_EMIT notifyWatchonlyChanged(fHaveWatchonly);\n }\n \n bool WalletModel::validateAddress(const QString &address)\n@@ -205,7 +203,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     int nAddresses = 0;\n \n     // Pre-check input data for validity\n-    foreach(const SendCoinsRecipient &rcp, recipients)\n+    Q_FOREACH(const SendCoinsRecipient &rcp, recipients)\n     {\n         if (rcp.fSubtractFeeFromAmount)\n             fSubtractFeeFromAmount = true;\n@@ -285,7 +283,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             {\n                 return SendCoinsReturn(AmountWithFeeExceedsBalance);\n             }\n-            emit message(tr(\"Send Coins\"), QString::fromStdString(strFailReason),\n+            Q_EMIT message(tr(\"Send Coins\"), QString::fromStdString(strFailReason),\n                          CClientUIInterface::MSG_ERROR);\n             return TransactionCreationFailed;\n         }\n@@ -306,7 +304,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         LOCK2(cs_main, wallet->cs_wallet);\n         CWalletTx *newTx = transaction.getTransaction();\n \n-        foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n+        Q_FOREACH(const SendCoinsRecipient &rcp, transaction.getRecipients())\n         {\n             if (rcp.paymentRequest.IsInitialized())\n             {\n@@ -337,7 +335,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n \n     // Add addresses / update labels that we've sent to to the address book,\n     // and emit coinsSent signal for each recipient\n-    foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n+    Q_FOREACH(const SendCoinsRecipient &rcp, transaction.getRecipients())\n     {\n         // Don't touch the address book when we have a payment request\n         if (!rcp.paymentRequest.IsInitialized())\n@@ -361,7 +359,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n                 }\n             }\n         }\n-        emit coinsSent(wallet, rcp, transaction_array);\n+        Q_EMIT coinsSent(wallet, rcp, transaction_array);\n     }\n     checkBalanceChanged(); // update balance immediately, otherwise there could be a short noticeable delay until pollBalanceChanged hits\n \n@@ -521,7 +519,7 @@ WalletModel::UnlockContext WalletModel::requestUnlock()\n     if(was_locked)\n     {\n         // Request UI to unlock wallet\n-        emit requireUnlock();\n+        Q_EMIT requireUnlock();\n     }\n     // If wallet is still locked, unlock was failed or cancelled, mark context as invalid\n     bool valid = getEncryptionStatus() != Locked;"
      },
      {
        "sha": "40bc623543ff73942cf665a46b82c4c79b6d5bb4",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -227,7 +227,7 @@ class WalletModel : public QObject\n     void unsubscribeFromCoreSignals();\n     void checkBalanceChanged();\n \n-signals:\n+Q_SIGNALS:\n     // Signal that balance in wallet changed\n     void balanceChanged(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n                         const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n@@ -252,7 +252,7 @@ class WalletModel : public QObject\n     // Watch-only address added\n     void notifyWatchonlyChanged(bool fHaveWatchonly);\n \n-public slots:\n+public Q_SLOTS:\n     /* Wallet status might have changed */\n     void updateStatus();\n     /* New transaction, or transaction changed status */"
      },
      {
        "sha": "6a9b2d5bd31152bb2d7ce400e5aceb3659b73298",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -81,7 +81,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n CAmount WalletModelTransaction::getTotalTransactionAmount()\n {\n     CAmount totalTransactionAmount = 0;\n-    foreach(const SendCoinsRecipient &rcp, recipients)\n+    Q_FOREACH(const SendCoinsRecipient &rcp, recipients)\n     {\n         totalTransactionAmount += rcp.amount;\n     }"
      },
      {
        "sha": "c5f556b444f227a92745f1f750841e4b333d495e",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -153,7 +153,7 @@ void WalletView::processNewTransaction(const QModelIndex& parent, int start, int\n     QString address = ttm->data(index, TransactionTableModel::AddressRole).toString();\n     QString label = ttm->data(index, TransactionTableModel::LabelRole).toString();\n \n-    emit incomingTransaction(date, walletModel->getOptionsModel()->getDisplayUnit(), amount, type, address, label);\n+    Q_EMIT incomingTransaction(date, walletModel->getOptionsModel()->getDisplayUnit(), amount, type, address, label);\n }\n \n void WalletView::gotoOverviewPage()\n@@ -215,7 +215,7 @@ void WalletView::showOutOfSyncWarning(bool fShow)\n \n void WalletView::updateEncryptionStatus()\n {\n-    emit encryptionStatusChanged(walletModel->getEncryptionStatus());\n+    Q_EMIT encryptionStatusChanged(walletModel->getEncryptionStatus());\n }\n \n void WalletView::encryptWallet(bool status)\n@@ -239,11 +239,11 @@ void WalletView::backupWallet()\n         return;\n \n     if (!walletModel->backupWallet(filename)) {\n-        emit message(tr(\"Backup Failed\"), tr(\"There was an error trying to save the wallet data to %1.\").arg(filename),\n+        Q_EMIT message(tr(\"Backup Failed\"), tr(\"There was an error trying to save the wallet data to %1.\").arg(filename),\n             CClientUIInterface::MSG_ERROR);\n         }\n     else {\n-        emit message(tr(\"Backup Successful\"), tr(\"The wallet data was successfully saved to %1.\").arg(filename),\n+        Q_EMIT message(tr(\"Backup Successful\"), tr(\"The wallet data was successfully saved to %1.\").arg(filename),\n             CClientUIInterface::MSG_INFORMATION);\n     }\n }"
      },
      {
        "sha": "87c5d7bfbfda53d1035c412d8d0510ed028955a7",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -65,7 +65,7 @@ class WalletView : public QStackedWidget\n \n     QProgressDialog *progressDialog;\n \n-public slots:\n+public Q_SLOTS:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n     /** Switch to history (transactions) page */\n@@ -105,7 +105,7 @@ public slots:\n     /** Show progress dialog e.g. for rescan */\n     void showProgress(const QString &title, int nProgress);\n \n-signals:\n+Q_SIGNALS:\n     /** Signal that we want to show the main window */\n     void showNormalIfMinimized();\n     /**  Fired when a message should be reported to the user */"
      },
      {
        "sha": "dfe01495f7366c94915b6243fa6ae4627f7f6f91",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -20,7 +20,7 @@\n \n using namespace std;\n \n-static const int MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n+static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n \n enum RetFormat {\n     RF_UNDEF,\n@@ -65,6 +65,7 @@ class RestErr\n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n extern UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n+extern UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n static RestErr RESTERR(enum HTTPStatusCode status, string message)\n {\n@@ -134,23 +135,23 @@ static bool rest_headers(AcceptedConnection* conn,\n     if (!ParseHashStr(hashStr, hash))\n         throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n-    std::vector<CBlockHeader> headers;\n+    std::vector<const CBlockIndex *> headers;\n     headers.reserve(count);\n     {\n         LOCK(cs_main);\n         BlockMap::const_iterator it = mapBlockIndex.find(hash);\n         const CBlockIndex *pindex = (it != mapBlockIndex.end()) ? it->second : NULL;\n         while (pindex != NULL && chainActive.Contains(pindex)) {\n-            headers.push_back(pindex->GetBlockHeader());\n+            headers.push_back(pindex);\n             if (headers.size() == (unsigned long)count)\n                 break;\n             pindex = chainActive.Next(pindex);\n         }\n     }\n \n     CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n-    BOOST_FOREACH(const CBlockHeader &header, headers) {\n-        ssHeader << header;\n+    BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n+        ssHeader << pindex->GetBlockHeader();\n     }\n \n     switch (rf) {\n@@ -166,6 +167,16 @@ static bool rest_headers(AcceptedConnection* conn,\n         return true;\n     }\n \n+    case RF_JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n+            jsonHeaders.push_back(blockheaderToJSON(pindex));\n+        }\n+        string strJSON = jsonHeaders.write() + \"\\n\";\n+        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        return true;\n+    }\n+\n     default: {\n         throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n     }"
      },
      {
        "sha": "f1c5ffe0500580c40313a1aecaa254bb58944bff",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 136,
        "deletions": 3,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -51,6 +51,31 @@ double GetDifficulty(const CBlockIndex* blockindex)\n     return dDiff;\n }\n \n+UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n+{\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"hash\", blockindex->GetBlockHash().GetHex()));\n+    int confirmations = -1;\n+    // Only report confirmations if the block is on the main chain\n+    if (chainActive.Contains(blockindex))\n+        confirmations = chainActive.Height() - blockindex->nHeight + 1;\n+    result.push_back(Pair(\"confirmations\", confirmations));\n+    result.push_back(Pair(\"height\", blockindex->nHeight));\n+    result.push_back(Pair(\"version\", blockindex->nVersion));\n+    result.push_back(Pair(\"merkleroot\", blockindex->hashMerkleRoot.GetHex()));\n+    result.push_back(Pair(\"time\", (int64_t)blockindex->nTime));\n+    result.push_back(Pair(\"nonce\", (uint64_t)blockindex->nNonce));\n+    result.push_back(Pair(\"bits\", strprintf(\"%08x\", blockindex->nBits)));\n+    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n+    result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n+\n+    if (blockindex->pprev)\n+        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n+    CBlockIndex *pnext = chainActive.Next(blockindex);\n+    if (pnext)\n+        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n+    return result;\n+}\n \n UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false)\n {\n@@ -92,7 +117,6 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     return result;\n }\n \n-\n UniValue getblockcount(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -255,6 +279,62 @@ UniValue getblockhash(const UniValue& params, bool fHelp)\n     return pblockindex->GetBlockHash().GetHex();\n }\n \n+UniValue getblockheader(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"getblockheader \\\"hash\\\" ( verbose )\\n\"\n+            \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n+            \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n+            \"2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data\\n\"\n+            \"\\nResult (for verbose = true):\\n\"\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+            \"\\nResult (for verbose=false):\\n\"\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+            + HelpExampleRpc(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    std::string strHash = params[0].get_str();\n+    uint256 hash(uint256S(strHash));\n+\n+    bool fVerbose = true;\n+    if (params.size() > 1)\n+        fVerbose = params[1].get_bool();\n+\n+    if (mapBlockIndex.count(hash) == 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+\n+    CBlockIndex* pblockindex = mapBlockIndex[hash];\n+\n+    if (!fVerbose)\n+    {\n+        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n+        ssBlock << pblockindex->GetBlockHeader();\n+        std::string strHex = HexStr(ssBlock.begin(), ssBlock.end());\n+        return strHex;\n+    }\n+\n+    return blockheaderToJSON(pblockindex);\n+}\n+\n UniValue getblock(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -345,8 +425,6 @@ UniValue gettxoutsetinfo(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n         );\n \n-    LOCK(cs_main);\n-\n     UniValue ret(UniValue::VOBJ);\n \n     CCoinsStats stats;\n@@ -471,6 +549,36 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n     return CVerifyDB().VerifyDB(pcoinsTip, nCheckLevel, nCheckDepth);\n }\n \n+/** Implementation of IsSuperMajority with better feedback */\n+static UniValue SoftForkMajorityDesc(int minVersion, CBlockIndex* pindex, int nRequired, const Consensus::Params& consensusParams)\n+{\n+    int nFound = 0;\n+    CBlockIndex* pstart = pindex;\n+    for (int i = 0; i < consensusParams.nMajorityWindow && pstart != NULL; i++)\n+    {\n+        if (pstart->nVersion >= minVersion)\n+            ++nFound;\n+        pstart = pstart->pprev;\n+    }\n+\n+    UniValue rv(UniValue::VOBJ);\n+    rv.push_back(Pair(\"status\", nFound >= nRequired));\n+    rv.push_back(Pair(\"found\", nFound));\n+    rv.push_back(Pair(\"required\", nRequired));\n+    rv.push_back(Pair(\"window\", consensusParams.nMajorityWindow));\n+    return rv;\n+}\n+\n+static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+{\n+    UniValue rv(UniValue::VOBJ);\n+    rv.push_back(Pair(\"id\", name));\n+    rv.push_back(Pair(\"version\", version));\n+    rv.push_back(Pair(\"enforce\", SoftForkMajorityDesc(version, pindex, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams)));\n+    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams.nMajorityRejectBlockOutdated, consensusParams)));\n+    return rv;\n+}\n+\n UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -486,6 +594,21 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"  \\\"difficulty\\\": xxxxxx,     (numeric) the current difficulty\\n\"\n             \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n+            \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\"\n+            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) heighest block available\\n\"\n+            \"  \\\"softforks\\\": [            (array) status of softforks in progress\\n\"\n+            \"     {\\n\"\n+            \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\"\n+            \"        \\\"version\\\": xx,         (numeric) block version\\n\"\n+            \"        \\\"enforce\\\": {           (object) progress toward enforcing the softfork rules for new-version blocks\\n\"\n+            \"           \\\"status\\\": xx,       (boolean) true if threshold reached\\n\"\n+            \"           \\\"found\\\": xx,        (numeric) number of blocks with the new version found\\n\"\n+            \"           \\\"required\\\": xx,     (numeric) number of blocks required to trigger\\n\"\n+            \"           \\\"window\\\": xx,       (numeric) maximum size of examined window of recent blocks\\n\"\n+            \"        },\\n\"\n+            \"        \\\"reject\\\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \\\"enforce\\\")\\n\"\n+            \"     }, ...\\n\"\n+            \"  ]\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getblockchaininfo\", \"\")\n@@ -503,6 +626,14 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"verificationprogress\",  Checkpoints::GuessVerificationProgress(Params().Checkpoints(), chainActive.Tip())));\n     obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n     obj.push_back(Pair(\"pruned\",                fPruneMode));\n+\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    CBlockIndex* tip = chainActive.Tip();\n+    UniValue softforks(UniValue::VARR);\n+    softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n+    softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n+    obj.push_back(Pair(\"softforks\",             softforks));\n+\n     if (fPruneMode)\n     {\n         CBlockIndex *block = chainActive.Tip();\n@@ -629,6 +760,7 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"size\\\": xxxxx                (numeric) Current tx count\\n\"\n             \"  \\\"bytes\\\": xxxxx               (numeric) Sum of all tx sizes\\n\"\n+            \"  \\\"usage\\\": xxxxx               (numeric) Total memory usage for the mempool\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmempoolinfo\", \"\")\n@@ -638,6 +770,7 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n     UniValue ret(UniValue::VOBJ);\n     ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n     ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n+    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n \n     return ret;\n }"
      },
      {
        "sha": "b41e960e8a314ee154df551fb8b3fb746bf8be98",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -71,13 +71,15 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listunspent\", 1 },\n     { \"listunspent\", 2 },\n     { \"getblock\", 1 },\n+    { \"getblockheader\", 1 },\n     { \"gettransaction\", 1 },\n     { \"getrawtransaction\", 1 },\n     { \"createrawtransaction\", 0 },\n     { \"createrawtransaction\", 1 },\n     { \"signrawtransaction\", 1 },\n     { \"signrawtransaction\", 2 },\n     { \"sendrawtransaction\", 1 },\n+    { \"fundrawtransaction\", 1 },\n     { \"gettxout\", 1 },\n     { \"gettxout\", 2 },\n     { \"gettxoutproof\", 0 },\n@@ -93,6 +95,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"estimatepriority\", 0 },\n     { \"prioritisetransaction\", 1 },\n     { \"prioritisetransaction\", 2 },\n+    { \"setban\", 2 },\n+    { \"setban\", 3 },\n };\n \n class CRPCConvertTable"
      },
      {
        "sha": "703b0ee6537b0135c27cf249e0a7191fa82f0e9e",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 29,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -16,13 +16,11 @@\n #include \"rpcserver.h\"\n #include \"util.h\"\n #include \"validationinterface.h\"\n-#ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n-#endif\n \n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n+#include <boost/shared_ptr.hpp>\n \n #include \"univalue/univalue.h\"\n \n@@ -92,7 +90,6 @@ UniValue getnetworkhashps(const UniValue& params, bool fHelp)\n     return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n }\n \n-#ifdef ENABLE_WALLET\n UniValue getgenerate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -127,16 +124,20 @@ UniValue generate(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"generate\", \"11\")\n         );\n \n-    if (pwalletMain == NULL)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n     if (!Params().MineBlocksOnDemand())\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"This method can only be used on regtest\");\n \n     int nHeightStart = 0;\n     int nHeightEnd = 0;\n     int nHeight = 0;\n     int nGenerate = params[0].get_int();\n-    CReserveKey reservekey(pwalletMain);\n+\n+    boost::shared_ptr<CReserveScript> coinbaseScript;\n+    GetMainSignals().ScriptForMining(coinbaseScript);\n+\n+    //throw an error if no script was provided\n+    if (!coinbaseScript->reserveScript.size())\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n \n     {   // Don't keep cs_main locked\n         LOCK(cs_main);\n@@ -148,9 +149,9 @@ UniValue generate(const UniValue& params, bool fHelp)\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd)\n     {\n-        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n+        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript->reserveScript));\n         if (!pblocktemplate.get())\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Wallet keypool empty\");\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         CBlock *pblock = &pblocktemplate->block;\n         {\n             LOCK(cs_main);\n@@ -166,11 +167,13 @@ UniValue generate(const UniValue& params, bool fHelp)\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n+\n+        //mark script as important because it was used at least for one coinbase output\n+        coinbaseScript->KeepScript();\n     }\n     return blockHashes;\n }\n \n-\n UniValue setgenerate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -193,8 +196,6 @@ UniValue setgenerate(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"setgenerate\", \"true, 1\")\n         );\n \n-    if (pwalletMain == NULL)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n     if (Params().MineBlocksOnDemand())\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Use the generate method instead of setgenerate on this network\");\n \n@@ -212,12 +213,10 @@ UniValue setgenerate(const UniValue& params, bool fHelp)\n \n     mapArgs[\"-gen\"] = (fGenerate ? \"1\" : \"0\");\n     mapArgs [\"-genproclimit\"] = itostr(nGenProcLimit);\n-    GenerateBitcoins(fGenerate, pwalletMain, nGenProcLimit);\n+    GenerateBitcoins(fGenerate, nGenProcLimit, Params());\n \n     return NullUniValue;\n }\n-#endif\n-\n \n UniValue getmininginfo(const UniValue& params, bool fHelp)\n {\n@@ -257,9 +256,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"testnet\",          Params().TestnetToBeDeprecatedFieldRPC()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n-#ifdef ENABLE_WALLET\n     obj.push_back(Pair(\"generate\",         getgenerate(params, false)));\n-#endif\n     return obj;\n }\n \n@@ -669,16 +666,15 @@ UniValue estimatefee(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"estimatefee nblocks\\n\"\n-            \"\\nEstimates the approximate fee per kilobyte\\n\"\n-            \"needed for a transaction to begin confirmation\\n\"\n-            \"within nblocks blocks.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks     (numeric)\\n\"\n             \"\\nResult:\\n\"\n-            \"n :    (numeric) estimated fee-per-kilobyte\\n\"\n+            \"n              (numeric) estimated fee-per-kilobyte\\n\"\n             \"\\n\"\n-            \"-1.0 is returned if not enough transactions and\\n\"\n-            \"blocks have been observed to make an estimate.\\n\"\n+            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"have been observed to make an estimate.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );\n@@ -701,16 +697,15 @@ UniValue estimatepriority(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"estimatepriority nblocks\\n\"\n-            \"\\nEstimates the approximate priority\\n\"\n-            \"a zero-fee transaction needs to begin confirmation\\n\"\n-            \"within nblocks blocks.\\n\"\n+            \"\\nEstimates the approximate priority a zero-fee transaction needs to begin\\n\"\n+            \"confirmation within nblocks blocks.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks     (numeric)\\n\"\n             \"\\nResult:\\n\"\n-            \"n :    (numeric) estimated priority\\n\"\n+            \"n              (numeric) estimated priority\\n\"\n             \"\\n\"\n-            \"-1.0 is returned if not enough transactions and\\n\"\n-            \"blocks have been observed to make an estimate.\\n\"\n+            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"have been observed to make an estimate.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatepriority\", \"6\")\n             );"
      },
      {
        "sha": "cab57d7027a1082fdfe0d73726bd865f0ecc46aa",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -109,20 +109,14 @@ UniValue getinfo(const UniValue& params, bool fHelp)\n #ifdef ENABLE_WALLET\n class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n {\n-private:\n-    isminetype mine;\n-\n public:\n-    DescribeAddressVisitor(isminetype mineIn) : mine(mineIn) {}\n-\n     UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n \n     UniValue operator()(const CKeyID &keyID) const {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n         obj.push_back(Pair(\"isscript\", false));\n-        if (mine == ISMINE_SPENDABLE) {\n-            pwalletMain->GetPubKey(keyID, vchPubKey);\n+        if (pwalletMain->GetPubKey(keyID, vchPubKey)) {\n             obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n             obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n         }\n@@ -131,10 +125,9 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n \n     UniValue operator()(const CScriptID &scriptID) const {\n         UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n         obj.push_back(Pair(\"isscript\", true));\n-        if (mine != ISMINE_NO) {\n-            CScript subscript;\n-            pwalletMain->GetCScript(scriptID, subscript);\n+        if (pwalletMain->GetCScript(scriptID, subscript)) {\n             std::vector<CTxDestination> addresses;\n             txnouttype whichType;\n             int nRequired;\n@@ -200,11 +193,9 @@ UniValue validateaddress(const UniValue& params, bool fHelp)\n #ifdef ENABLE_WALLET\n         isminetype mine = pwalletMain ? IsMine(*pwalletMain, dest) : ISMINE_NO;\n         ret.push_back(Pair(\"ismine\", (mine & ISMINE_SPENDABLE) ? true : false));\n-        if (mine != ISMINE_NO) {\n-            ret.push_back(Pair(\"iswatchonly\", (mine & ISMINE_WATCH_ONLY) ? true: false));\n-            UniValue detail = boost::apply_visitor(DescribeAddressVisitor(mine), dest);\n-            ret.pushKVs(detail);\n-        }\n+        ret.push_back(Pair(\"iswatchonly\", (mine & ISMINE_WATCH_ONLY) ? true: false));\n+        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n+        ret.pushKVs(detail);\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n             ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));\n #endif\n@@ -387,10 +378,19 @@ UniValue setmocktime(const UniValue& params, bool fHelp)\n     if (!Params().MineBlocksOnDemand())\n         throw runtime_error(\"setmocktime for regression testing (-regtest mode) only\");\n \n-    LOCK(cs_main);\n+    // cs_vNodes is locked and node send/receive times are updated\n+    // atomically with the time change to prevent peers from being\n+    // disconnected because we think we haven't communicated with them\n+    // in a long time.\n+    LOCK2(cs_main, cs_vNodes);\n \n     RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n     SetMockTime(params[0].get_int64());\n \n+    uint64_t t = GetTime();\n+    BOOST_FOREACH(CNode* pnode, vNodes) {\n+        pnode->nLastSend = pnode->nLastRecv = t;\n+    }\n+\n     return NullUniValue;\n }"
      },
      {
        "sha": "dd631905fd478a8a4c655541dc8c456115097b9a",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 136,
        "deletions": 0,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -214,6 +214,28 @@ UniValue addnode(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n+UniValue disconnectnode(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"disconnectnode \\\"node\\\" \\n\"\n+            \"\\nImmediately disconnects from the specified node.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n+            + HelpExampleRpc(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n+        );\n+\n+    CNode* pNode = FindNode(params[0].get_str());\n+    if (pNode == NULL)\n+        throw JSONRPCError(RPC_CLIENT_NODE_NOT_CONNECTED, \"Node not found in connected nodes\");\n+\n+    pNode->fDisconnect = true;\n+\n+    return NullUniValue;\n+}\n+\n UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -408,6 +430,7 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"  ]\\n\"\n+            \"  \\\"warnings\\\": \\\"...\\\"                    (string) any network warnings (such as alert messages) \\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getnetworkinfo\", \"\")\n@@ -439,5 +462,118 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n         }\n     }\n     obj.push_back(Pair(\"localaddresses\", localAddresses));\n+    obj.push_back(Pair(\"warnings\",       GetWarnings(\"statusbar\")));\n     return obj;\n }\n+\n+UniValue setban(const UniValue& params, bool fHelp)\n+{\n+    string strCommand;\n+    if (params.size() >= 2)\n+        strCommand = params[1].get_str();\n+    if (fHelp || params.size() < 2 ||\n+        (strCommand != \"add\" && strCommand != \"remove\"))\n+        throw runtime_error(\n+                            \"setban \\\"ip(/netmask)\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n+                            \"\\nAttempts add or remove a IP/Subnet from the banned list.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"ip(/netmask)\\\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)\\n\"\n+                            \"2. \\\"command\\\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list\\n\"\n+                            \"3. \\\"bantime\\\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n+                            \"4. \\\"absolute\\\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"setban\", \"\\\"192.168.0.6\\\" \\\"add\\\" 86400\")\n+                            + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")\n+                            + HelpExampleRpc(\"setban\", \"\\\"192.168.0.6\\\", \\\"add\\\" 86400\")\n+                            );\n+\n+    CSubNet subNet;\n+    CNetAddr netAddr;\n+    bool isSubnet = false;\n+\n+    if (params[0].get_str().find(\"/\") != string::npos)\n+        isSubnet = true;\n+\n+    if (!isSubnet)\n+        netAddr = CNetAddr(params[0].get_str());\n+    else\n+        subNet = CSubNet(params[0].get_str());\n+\n+    if (! (isSubnet ? subNet.IsValid() : netAddr.IsValid()) )\n+        throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Invalid IP/Subnet\");\n+\n+    if (strCommand == \"add\")\n+    {\n+        if (isSubnet ? CNode::IsBanned(subNet) : CNode::IsBanned(netAddr))\n+            throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n+\n+        int64_t banTime = 0; //use standard bantime if not specified\n+        if (params.size() >= 3 && !params[2].isNull())\n+            banTime = params[2].get_int64();\n+\n+        bool absolute = false;\n+        if (params.size() == 4 && params[3].isTrue())\n+            absolute = true;\n+\n+        isSubnet ? CNode::Ban(subNet, BanReasonManuallyAdded, banTime, absolute) : CNode::Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n+\n+        //disconnect possible nodes\n+        while(CNode *bannedNode = (isSubnet ? FindNode(subNet) : FindNode(netAddr)))\n+            bannedNode->fDisconnect = true;\n+    }\n+    else if(strCommand == \"remove\")\n+    {\n+        if (!( isSubnet ? CNode::Unban(subNet) : CNode::Unban(netAddr) ))\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Error: Unban failed\");\n+    }\n+\n+    DumpBanlist(); //store banlist to disk\n+    return NullUniValue;\n+}\n+\n+UniValue listbanned(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+                            \"listbanned\\n\"\n+                            \"\\nList all banned IPs/Subnets.\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"listbanned\", \"\")\n+                            + HelpExampleRpc(\"listbanned\", \"\")\n+                            );\n+\n+    banmap_t banMap;\n+    CNode::GetBanned(banMap);\n+\n+    UniValue bannedAddresses(UniValue::VARR);\n+    for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); it++)\n+    {\n+        CBanEntry banEntry = (*it).second;\n+        UniValue rec(UniValue::VOBJ);\n+        rec.push_back(Pair(\"address\", (*it).first.ToString()));\n+        rec.push_back(Pair(\"banned_until\", banEntry.nBanUntil));\n+        rec.push_back(Pair(\"ban_created\", banEntry.nCreateTime));\n+        rec.push_back(Pair(\"ban_reason\", banEntry.banReasonToString()));\n+\n+        bannedAddresses.push_back(rec);\n+    }\n+\n+    return bannedAddresses;\n+}\n+\n+UniValue clearbanned(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+                            \"clearbanned\\n\"\n+                            \"\\nClear all banned IPs.\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"clearbanned\", \"\")\n+                            + HelpExampleRpc(\"clearbanned\", \"\")\n+                            );\n+\n+    CNode::ClearBanned();\n+    DumpBanlist(); //store banlist to disk\n+\n+    return NullUniValue;\n+}"
      },
      {
        "sha": "2e5c9137340869641f4773b36a65a2605d7c5542",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 1,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -6,13 +6,15 @@\n #include \"rpcprotocol.h\"\n \n #include \"clientversion.h\"\n+#include \"random.h\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"utiltime.h\"\n #include \"version.h\"\n \n #include <stdint.h>\n+#include <fstream>\n \n #include <boost/algorithm/string.hpp>\n #include <boost/asio.hpp>\n@@ -251,7 +253,6 @@ int ReadHTTPMessage(std::basic_istream<char>& stream, map<string,\n  * \n  * 1.0 spec: http://json-rpc.org/wiki/specification\n  * 1.2 spec: http://jsonrpc.org/historical/json-rpc-over-http.html\n- * http://www.codeproject.com/KB/recipes/JSON_Spirit.aspx\n  */\n \n string JSONRPCRequest(const string& strMethod, const UniValue& params, const UniValue& id)\n@@ -288,3 +289,68 @@ UniValue JSONRPCError(int code, const string& message)\n     error.push_back(Pair(\"message\", message));\n     return error;\n }\n+\n+/** Username used when cookie authentication is in use (arbitrary, only for\n+ * recognizability in debugging/logging purposes)\n+ */\n+static const std::string COOKIEAUTH_USER = \"__cookie__\";\n+/** Default name for auth cookie file */\n+static const std::string COOKIEAUTH_FILE = \".cookie\";\n+\n+boost::filesystem::path GetAuthCookieFile()\n+{\n+    boost::filesystem::path path(GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE));\n+    if (!path.is_complete()) path = GetDataDir() / path;\n+    return path;\n+}\n+\n+bool GenerateAuthCookie(std::string *cookie_out)\n+{\n+    unsigned char rand_pwd[32];\n+    GetRandBytes(rand_pwd, 32);\n+    std::string cookie = COOKIEAUTH_USER + \":\" + EncodeBase64(&rand_pwd[0],32);\n+\n+    /** the umask determines what permissions are used to create this file -\n+     * these are set to 077 in init.cpp unless overridden with -sysperms.\n+     */\n+    std::ofstream file;\n+    boost::filesystem::path filepath = GetAuthCookieFile();\n+    file.open(filepath.string().c_str());\n+    if (!file.is_open()) {\n+        LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath.string());\n+        return false;\n+    }\n+    file << cookie;\n+    file.close();\n+    LogPrintf(\"Generated RPC authentication cookie %s\\n\", filepath.string());\n+\n+    if (cookie_out)\n+        *cookie_out = cookie;\n+    return true;\n+}\n+\n+bool GetAuthCookie(std::string *cookie_out)\n+{\n+    std::ifstream file;\n+    std::string cookie;\n+    boost::filesystem::path filepath = GetAuthCookieFile();\n+    file.open(filepath.string().c_str());\n+    if (!file.is_open())\n+        return false;\n+    std::getline(file, cookie);\n+    file.close();\n+\n+    if (cookie_out)\n+        *cookie_out = cookie;\n+    return true;\n+}\n+\n+void DeleteAuthCookie()\n+{\n+    try {\n+        boost::filesystem::remove(GetAuthCookieFile());\n+    } catch (const boost::filesystem::filesystem_error& e) {\n+        LogPrintf(\"%s: Unable to remove random auth cookie file: %s\\n\", __func__, e.what());\n+    }\n+}\n+"
      },
      {
        "sha": "2360ec2c60673f16efcf552fd232458a3ecd2e42",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -14,6 +14,7 @@\n #include <boost/iostreams/stream.hpp>\n #include <boost/asio.hpp>\n #include <boost/asio/ssl.hpp>\n+#include <boost/filesystem.hpp>\n \n #include \"univalue/univalue.h\"\n \n@@ -63,6 +64,8 @@ enum RPCErrorCode\n     RPC_CLIENT_IN_INITIAL_DOWNLOAD  = -10, //! Still downloading initial blocks\n     RPC_CLIENT_NODE_ALREADY_ADDED   = -23, //! Node is already added\n     RPC_CLIENT_NODE_NOT_ADDED       = -24, //! Node has not been added before\n+    RPC_CLIENT_NODE_NOT_CONNECTED   = -29, //! Node to disconnect not found in connected nodes\n+    RPC_CLIENT_INVALID_IP_OR_SUBNET = -30, //! Invalid IP/Subnet\n \n     //! Wallet errors\n     RPC_WALLET_ERROR                = -4,  //! Unspecified problem with wallet (key not found etc.)\n@@ -163,4 +166,13 @@ UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const Un\n std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n UniValue JSONRPCError(int code, const std::string& message);\n \n+/** Get name of RPC authentication cookie file */\n+boost::filesystem::path GetAuthCookieFile();\n+/** Generate a new RPC authentication cookie and write it to disk */\n+bool GenerateAuthCookie(std::string *cookie_out);\n+/** Read the RPC authentication cookie from disk */\n+bool GetAuthCookie(std::string *cookie_out);\n+/** Delete RPC authentication cookie from disk */\n+void DeleteAuthCookie();\n+\n #endif // BITCOIN_RPCPROTOCOL_H"
      },
      {
        "sha": "7d1db0b60eae95538b2ef5d73b239daa58bb097b",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -11,6 +11,7 @@\n #include \"main.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "bcad06a0c119be8d295b10b8f523561cbbee25cb",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 31,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -124,7 +124,7 @@ CAmount AmountFromValue(const UniValue& value)\n     if (!value.isReal() && !value.isNum())\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number\");\n     CAmount amount;\n-    if (!ParseMoney(value.getValStr(), amount))\n+    if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n     if (!MoneyRange(amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Amount out of range\");\n@@ -273,18 +273,23 @@ static const CRPCCommand vRPCCommands[] =\n     /* P2P networking */\n     { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true  },\n     { \"network\",            \"addnode\",                &addnode,                true  },\n+    { \"network\",            \"disconnectnode\",         &disconnectnode,         true  },\n     { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true  },\n     { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true  },\n     { \"network\",            \"getnettotals\",           &getnettotals,           true  },\n     { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true  },\n     { \"network\",            \"ping\",                   &ping,                   true  },\n+    { \"network\",            \"setban\",                 &setban,                 true  },\n+    { \"network\",            \"listbanned\",             &listbanned,             true  },\n+    { \"network\",            \"clearbanned\",            &clearbanned,            true  },\n \n     /* Block chain and UTXO */\n     { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true  },\n     { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true  },\n     { \"blockchain\",         \"getblockcount\",          &getblockcount,          true  },\n     { \"blockchain\",         \"getblock\",               &getblock,               true  },\n     { \"blockchain\",         \"getblockhash\",           &getblockhash,           true  },\n+    { \"blockchain\",         \"getblockheader\",         &getblockheader,         true  },\n     { \"blockchain\",         \"getchaintips\",           &getchaintips,           true  },\n     { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true  },\n     { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true  },\n@@ -302,12 +307,10 @@ static const CRPCCommand vRPCCommands[] =\n     { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true  },\n     { \"mining\",             \"submitblock\",            &submitblock,            true  },\n \n-#ifdef ENABLE_WALLET\n     /* Coin generation */\n     { \"generating\",         \"getgenerate\",            &getgenerate,            true  },\n     { \"generating\",         \"setgenerate\",            &setgenerate,            true  },\n     { \"generating\",         \"generate\",               &generate,               true  },\n-#endif\n \n     /* Raw transactions */\n     { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true  },\n@@ -316,6 +319,9 @@ static const CRPCCommand vRPCCommands[] =\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true  },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false },\n     { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false }, /* uses wallet if enabled */\n+#ifdef ENABLE_WALLET\n+    { \"rawtransactions\",    \"fundrawtransaction\",     &fundrawtransaction,     false },\n+#endif\n \n     /* Utility functions */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true  },\n@@ -591,28 +597,18 @@ void StartRPCThreads()\n         strAllowed += subnet.ToString() + \" \";\n     LogPrint(\"rpc\", \"Allowing RPC connections from: %s\\n\", strAllowed);\n \n-    strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n-    if (((mapArgs[\"-rpcpassword\"] == \"\") ||\n-         (mapArgs[\"-rpcuser\"] == mapArgs[\"-rpcpassword\"])) && Params().RequireRPCPassword())\n+    if (mapArgs[\"-rpcpassword\"] == \"\")\n     {\n-        unsigned char rand_pwd[32];\n-        GetRandBytes(rand_pwd, 32);\n-        uiInterface.ThreadSafeMessageBox(strprintf(\n-            _(\"To use bitcoind, or the -server option to bitcoin-qt, you must set an rpcpassword in the configuration file:\\n\"\n-              \"%s\\n\"\n-              \"It is recommended you use the following random password:\\n\"\n-              \"rpcuser=bitcoinrpc\\n\"\n-              \"rpcpassword=%s\\n\"\n-              \"(you do not need to remember this password)\\n\"\n-              \"The username and password MUST NOT be the same.\\n\"\n-              \"If the file does not exist, create it with owner-readable-only file permissions.\\n\"\n-              \"It is also recommended to set alertnotify so you are notified of problems;\\n\"\n-              \"for example: alertnotify=echo %%s | mail -s \\\"Bitcoin Alert\\\" admin@foo.com\\n\"),\n-                GetConfigFile().string(),\n-                EncodeBase58(&rand_pwd[0],&rand_pwd[0]+32)),\n-                \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::SECURE);\n-        StartShutdown();\n-        return;\n+        LogPrintf(\"No rpcpassword set - using random cookie authentication\\n\");\n+        if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n+            uiInterface.ThreadSafeMessageBox(\n+                _(\"Error: A fatal internal error occured, see debug.log for details\"), // Same message as AbortNode\n+                \"\", CClientUIInterface::MSG_ERROR);\n+            StartShutdown();\n+            return;\n+        }\n+    } else {\n+        strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n     }\n \n     assert(rpc_io_service == NULL);\n@@ -763,6 +759,8 @@ void StopRPCThreads()\n     }\n     deadlineTimers.clear();\n \n+    DeleteAuthCookie();\n+\n     rpc_io_service->stop();\n     g_rpcSignals.Stopped();\n     if (rpc_worker_group != NULL)\n@@ -925,13 +923,6 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n         if (!valRequest.read(strRequest))\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n \n-        // Return immediately if in warmup\n-        {\n-            LOCK(cs_rpcWarmup);\n-            if (fRPCInWarmup)\n-                throw JSONRPCError(RPC_IN_WARMUP, rpcWarmupStatus);\n-        }\n-\n         string strReply;\n \n         // singleton request\n@@ -1003,6 +994,13 @@ void ServiceConnection(AcceptedConnection *conn)\n \n UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params) const\n {\n+    // Return immediately if in warmup\n+    {\n+        LOCK(cs_rpcWarmup);\n+        if (fRPCInWarmup)\n+            throw JSONRPCError(RPC_IN_WARMUP, rpcWarmupStatus);\n+    }\n+\n     // Find method\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n     if (!pcmd)"
      },
      {
        "sha": "89d3980223e5a5e72e24e41755a73356b670ea2a",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -151,8 +151,12 @@ extern UniValue getconnectioncount(const UniValue& params, bool fHelp); // in rp\n extern UniValue getpeerinfo(const UniValue& params, bool fHelp);\n extern UniValue ping(const UniValue& params, bool fHelp);\n extern UniValue addnode(const UniValue& params, bool fHelp);\n+extern UniValue disconnectnode(const UniValue& params, bool fHelp);\n extern UniValue getaddednodeinfo(const UniValue& params, bool fHelp);\n extern UniValue getnettotals(const UniValue& params, bool fHelp);\n+extern UniValue setban(const UniValue& params, bool fHelp);\n+extern UniValue listbanned(const UniValue& params, bool fHelp);\n+extern UniValue clearbanned(const UniValue& params, bool fHelp);\n \n extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n extern UniValue importprivkey(const UniValue& params, bool fHelp);\n@@ -217,6 +221,7 @@ extern UniValue listlockunspent(const UniValue& params, bool fHelp);\n extern UniValue createrawtransaction(const UniValue& params, bool fHelp);\n extern UniValue decoderawtransaction(const UniValue& params, bool fHelp);\n extern UniValue decodescript(const UniValue& params, bool fHelp);\n+extern UniValue fundrawtransaction(const UniValue& params, bool fHelp);\n extern UniValue signrawtransaction(const UniValue& params, bool fHelp);\n extern UniValue sendrawtransaction(const UniValue& params, bool fHelp);\n extern UniValue gettxoutproof(const UniValue& params, bool fHelp);\n@@ -229,6 +234,7 @@ extern UniValue settxfee(const UniValue& params, bool fHelp);\n extern UniValue getmempoolinfo(const UniValue& params, bool fHelp);\n extern UniValue getrawmempool(const UniValue& params, bool fHelp);\n extern UniValue getblockhash(const UniValue& params, bool fHelp);\n+extern UniValue getblockheader(const UniValue& params, bool fHelp);\n extern UniValue getblock(const UniValue& params, bool fHelp);\n extern UniValue gettxoutsetinfo(const UniValue& params, bool fHelp);\n extern UniValue gettxout(const UniValue& params, bool fHelp);"
      },
      {
        "sha": "d5bb588b712961aa7eb8a1bb4c452ed6452af8b3",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -50,8 +50,10 @@ void CScheduler::serviceQueue()\n                 // Keep waiting until timeout\n             }\n #else\n+            // Some boost versions have a conflicting overload of wait_until that returns void.\n+            // Explicitly use a template here to avoid hitting that overload.\n             while (!shouldStop() && !taskQueue.empty() &&\n-                   newTaskScheduled.wait_until(lock, taskQueue.begin()->first) != boost::cv_status::timeout) {\n+                   newTaskScheduled.wait_until<>(lock, taskQueue.begin()->first) != boost::cv_status::timeout) {\n                 // Keep waiting until timeout\n             }\n #endif"
      },
      {
        "sha": "0b78fdf5a8eed9c6c3e06ff3ab26a5a224ff1ab2",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 81,
        "deletions": 2,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -335,9 +335,51 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 // Control\n                 //\n                 case OP_NOP:\n-                break;\n+                    break;\n+\n+                case OP_CHECKLOCKTIMEVERIFY:\n+                {\n+                    if (!(flags & SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {\n+                        // not enabled; treat as a NOP2\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                        }\n+                        break;\n+                    }\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // Note that elsewhere numeric opcodes are limited to\n+                    // operands in the range -2**31+1 to 2**31-1, however it is\n+                    // legal for opcodes to produce results exceeding that\n+                    // range. This limitation is implemented by CScriptNum's\n+                    // default 4-byte limit.\n+                    //\n+                    // If we kept to that limit we'd have a year 2038 problem,\n+                    // even though the nLockTime field in transactions\n+                    // themselves is uint32 which only becomes meaningless\n+                    // after the year 2106.\n+                    //\n+                    // Thus as a special case we tell CScriptNum to accept up\n+                    // to 5-byte bignums, which are good until 2**39-1, well\n+                    // beyond the 2**32-1 limit of the nLockTime field itself.\n+                    const CScriptNum nLockTime(stacktop(-1), fRequireMinimal, 5);\n+\n+                    // In the rare event that the argument may be < 0 due to\n+                    // some arithmetic being done first, you can always use\n+                    // 0 MAX CHECKLOCKTIMEVERIFY.\n+                    if (nLockTime < 0)\n+                        return set_error(serror, SCRIPT_ERR_NEGATIVE_LOCKTIME);\n+\n+                    // Actually compare the specified lock time with the transaction.\n+                    if (!checker.CheckLockTime(nLockTime))\n+                        return set_error(serror, SCRIPT_ERR_UNSATISFIED_LOCKTIME);\n+\n+                    break;\n+                }\n \n-                case OP_NOP1: case OP_NOP2: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n+                case OP_NOP1: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n                 case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\n                 {\n                     if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n@@ -1084,6 +1126,43 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     return true;\n }\n \n+bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // There are two times of nLockTime: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nLockTime < LOCKTIME_THRESHOLD.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nLockTime being tested is the same as\n+    // the nLockTime in the transaction.\n+    if (!(\n+        (txTo->nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo->nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+    ))\n+        return false;\n+\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nLockTime > (int64_t)txTo->nLockTime)\n+        return false;\n+\n+    // Finally the nLockTime feature can be disabled and thus\n+    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n+    // finalized by setting nSequence to maxint. The\n+    // transaction would be allowed into the blockchain, making\n+    // the opcode ineffective.\n+    //\n+    // Testing if this vin is not final is sufficient to\n+    // prevent this condition. Alternatively we could test all\n+    // inputs, but testing just this input minimizes the data\n+    // required to prove correct CHECKLOCKTIMEVERIFY execution.\n+    if (txTo->vin[nIn].IsFinal())\n+        return false;\n+\n+    return true;\n+}\n+\n+\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);"
      },
      {
        "sha": "35d572f0ad8c10a507fd6fa760f6c2948bfd1834",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -76,6 +76,11 @@ enum\n     // (softfork safe, BIP62 rule 6)\n     // Note: CLEANSTACK should never be used without P2SH.\n     SCRIPT_VERIFY_CLEANSTACK = (1U << 8),\n+\n+    // Verify CHECKLOCKTIMEVERIFY\n+    //\n+    // See BIP65 for details.\n+    SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),\n };\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n@@ -88,6 +93,11 @@ class BaseSignatureChecker\n         return false;\n     }\n \n+    virtual bool CheckLockTime(const CScriptNum& nLockTime) const\n+    {\n+         return false;\n+    }\n+\n     virtual ~BaseSignatureChecker() {}\n };\n \n@@ -103,6 +113,7 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n public:\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n+    bool CheckLockTime(const CScriptNum& nLockTime) const;\n };\n \n class MutableTransactionSignatureChecker : public TransactionSignatureChecker"
      },
      {
        "sha": "e39ca57f4fbe94b5be929f722d5c19ec708906b2",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -19,6 +19,10 @@\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n \n+// Threshold for nLockTime: below this value it is interpreted as block number,\n+// otherwise as UNIX timestamp.\n+static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n+\n template <typename T>\n std::vector<unsigned char> ToByteVector(const T& in)\n {\n@@ -151,6 +155,7 @@ enum opcodetype\n     // expansion\n     OP_NOP1 = 0xb0,\n     OP_NOP2 = 0xb1,\n+    OP_CHECKLOCKTIMEVERIFY = OP_NOP2,\n     OP_NOP3 = 0xb2,\n     OP_NOP4 = 0xb3,\n     OP_NOP5 = 0xb4,\n@@ -196,7 +201,10 @@ class CScriptNum\n         m_value = n;\n     }\n \n-    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal)\n+    static const size_t nDefaultMaxNumSize = 4;\n+\n+    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal,\n+                        const size_t nMaxNumSize = nDefaultMaxNumSize)\n     {\n         if (vch.size() > nMaxNumSize) {\n             throw scriptnum_error(\"script number overflow\");\n@@ -319,8 +327,6 @@ class CScriptNum\n         return result;\n     }\n \n-    static const size_t nMaxNumSize = 4;\n-\n private:\n     static int64_t set_vch(const std::vector<unsigned char>& vch)\n     {\n@@ -603,4 +609,13 @@ class CScript : public std::vector<unsigned char>\n     }\n };\n \n+class CReserveScript\n+{\n+public:\n+    CScript reserveScript;\n+    virtual void KeepScript() {}\n+    CReserveScript() {}\n+    virtual ~CReserveScript() {}\n+};\n+\n #endif // BITCOIN_SCRIPT_SCRIPT_H"
      },
      {
        "sha": "f1aa1fb408ae57ee4d89e860e5f24211c709af44",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -47,6 +47,10 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"OP_RETURN was encountered\";\n         case SCRIPT_ERR_UNBALANCED_CONDITIONAL:\n             return \"Invalid OP_IF construction\";\n+        case SCRIPT_ERR_NEGATIVE_LOCKTIME:\n+            return \"Negative locktime\";\n+        case SCRIPT_ERR_UNSATISFIED_LOCKTIME:\n+            return \"Locktime requirement not satisfied\";\n         case SCRIPT_ERR_SIG_HASHTYPE:\n             return \"Signature hash type missing or not understood\";\n         case SCRIPT_ERR_SIG_DER:"
      },
      {
        "sha": "bb10b8a2932a53eb72342581a95b6b712d41a4d2",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -35,6 +35,10 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_INVALID_ALTSTACK_OPERATION,\n     SCRIPT_ERR_UNBALANCED_CONDITIONAL,\n \n+    /* OP_CHECKLOCKTIMEVERIFY */\n+    SCRIPT_ERR_NEGATIVE_LOCKTIME,\n+    SCRIPT_ERR_UNSATISFIED_LOCKTIME,\n+\n     /* BIP62 */\n     SCRIPT_ERR_SIG_HASHTYPE,\n     SCRIPT_ERR_SIG_DER,"
      },
      {
        "sha": "8b43183b6dd5027b247c10f9005edc5006eb5b5a",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 1,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -5,9 +5,10 @@\n \n #include \"script/sign.h\"\n \n-#include \"primitives/transaction.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n+#include \"policy/policy.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/standard.h\"\n #include \"uint256.h\"\n \n@@ -275,3 +276,39 @@ CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecke\n \n     return CombineSignatures(scriptPubKey, checker, txType, vSolutions, stack1, stack2);\n }\n+\n+namespace {\n+/** Dummy signature checker which accepts all signatures. */\n+class DummySignatureChecker : public BaseSignatureChecker\n+{\n+public:\n+    DummySignatureChecker() {}\n+\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+    {\n+        return true;\n+    }\n+};\n+const DummySignatureChecker dummyChecker;\n+}\n+\n+const BaseSignatureChecker& DummySignatureCreator::Checker() const\n+{\n+    return dummyChecker;\n+}\n+\n+bool DummySignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const\n+{\n+    // Create a dummy signature that is a valid DER-encoding\n+    vchSig.assign(72, '\\000');\n+    vchSig[0] = 0x30;\n+    vchSig[1] = 69;\n+    vchSig[2] = 0x02;\n+    vchSig[3] = 33;\n+    vchSig[4] = 0x01;\n+    vchSig[4 + 33] = 0x02;\n+    vchSig[5 + 33] = 32;\n+    vchSig[6 + 33] = 0x01;\n+    vchSig[6 + 33 + 32] = SIGHASH_ALL;\n+    return true;\n+}"
      },
      {
        "sha": "13f45007dda574260769b1c6ea4b55ca4d3c5042",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -43,6 +43,14 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n     bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n };\n \n+/** A signature creator that just produces 72-byte empty signatyres. */\n+class DummySignatureCreator : public BaseSignatureCreator {\n+public:\n+    DummySignatureCreator(const CKeyStore* keystoreIn) : BaseSignatureCreator(keystoreIn) {}\n+    const BaseSignatureChecker& Checker() const;\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n+};\n+\n /** Produce a script signature using a generic signature creator. */\n bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, CScript& scriptSig);\n "
      },
      {
        "sha": "66657127ab85cf47c5c63ad8ea960a16978d2035",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -180,26 +180,6 @@ int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned c\n     return -1;\n }\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n-{\n-    vector<valtype> vSolutions;\n-    if (!Solver(scriptPubKey, whichType, vSolutions))\n-        return false;\n-\n-    if (whichType == TX_MULTISIG)\n-    {\n-        unsigned char m = vSolutions.front()[0];\n-        unsigned char n = vSolutions.back()[0];\n-        // Support up to x-of-3 multisig txns as standard\n-        if (n < 1 || n > 3)\n-            return false;\n-        if (m < 1 || m > n)\n-            return false;\n-    }\n-\n-    return whichType != TX_NONSTANDARD;\n-}\n-\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n {\n     vector<valtype> vSolutions;"
      },
      {
        "sha": "46ae5f9f10389f8825dc2fa0f3d64f4542639c69",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -39,22 +39,6 @@ extern unsigned nMaxDatacarrierBytes;\n  */\n static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n \n-/**\n- * Standard script verification flags that standard transactions will comply\n- * with. However scripts violating these flags may still be present in valid\n- * blocks and we must accept those blocks.\n- */\n-static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n-                                                         SCRIPT_VERIFY_DERSIG |\n-                                                         SCRIPT_VERIFY_STRICTENC |\n-                                                         SCRIPT_VERIFY_MINIMALDATA |\n-                                                         SCRIPT_VERIFY_NULLDUMMY |\n-                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n-                                                         SCRIPT_VERIFY_CLEANSTACK;\n-\n-/** For convenience, standard but not mandatory verify flags. */\n-static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n-\n enum txnouttype\n {\n     TX_NONSTANDARD,\n@@ -85,7 +69,6 @@ const char* GetTxnOutputType(txnouttype t);\n \n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n "
      },
      {
        "sha": "1837e8d53ddb12ff01f3edec7ba88224a152f1c0",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 10,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -33,20 +33,22 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n \n struct CLockLocation {\n-    CLockLocation(const char* pszName, const char* pszFile, int nLine)\n+    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn)\n     {\n         mutexName = pszName;\n         sourceFile = pszFile;\n         sourceLine = nLine;\n+        fTry = fTryIn;\n     }\n \n     std::string ToString() const\n     {\n-        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine);\n+        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine) + (fTry ? \" (TRY)\" : \"\");\n     }\n \n     std::string MutexName() const { return mutexName; }\n \n+    bool fTry;\n private:\n     std::string mutexName;\n     std::string sourceFile;\n@@ -62,23 +64,52 @@ static boost::thread_specific_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n+    // We attempt to not assert on probably-not deadlocks by assuming that\n+    // a try lock will immediately have otherwise bailed if it had\n+    // failed to get the lock\n+    // We do this by, for the locks which triggered the potential deadlock,\n+    // in either lockorder, checking that the second of the two which is locked\n+    // is only a TRY_LOCK, ignoring locks if they are reentrant.\n+    bool firstLocked = false;\n+    bool secondLocked = false;\n+    bool onlyMaybeDeadlock = false;\n+\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    firstLocked = false;\n+    secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    assert(onlyMaybeDeadlock);\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n@@ -101,10 +132,8 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n             lockorders[p1] = (*lockstack);\n \n             std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            if (lockorders.count(p2)) {\n+            if (lockorders.count(p2))\n                 potential_deadlock_detected(p1, lockorders[p2], lockorders[p1]);\n-                break;\n-            }\n         }\n     }\n     dd_mutex.unlock();\n@@ -119,7 +148,7 @@ static void pop_lock()\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n {\n-    push_lock(cs, CLockLocation(pszName, pszFile, nLine), fTry);\n+    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry), fTry);\n }\n \n void LeaveCritical()"
      },
      {
        "sha": "705647e4a55c70f9a7fa059486d2f9a49d3fdaf5",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -101,7 +101,7 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine);\n \n /** Wrapper around boost::unique_lock<Mutex> */\n template <typename Mutex>\n-class CMutexLock\n+class SCOPED_LOCKABLE CMutexLock\n {\n private:\n     boost::unique_lock<Mutex> lock;\n@@ -129,15 +129,15 @@ class CMutexLock\n     }\n \n public:\n-    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) : lock(mutexIn, boost::defer_lock)\n+    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : lock(mutexIn, boost::defer_lock)\n     {\n         if (fTry)\n             TryEnter(pszName, pszFile, nLine);\n         else\n             Enter(pszName, pszFile, nLine);\n     }\n \n-    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false)\n+    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(pmutexIn)\n     {\n         if (!pmutexIn) return;\n \n@@ -148,7 +148,7 @@ class CMutexLock\n             Enter(pszName, pszFile, nLine);\n     }\n \n-    ~CMutexLock()\n+    ~CMutexLock() UNLOCK_FUNCTION()\n     {\n         if (lock.owns_lock())\n             LeaveCritical();"
      },
      {
        "sha": "13d848311a037331269640ed2deaf06d1c0517b6",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -70,9 +70,9 @@ class CCoinsViewCacheTest : public CCoinsViewCache\n         // Manually recompute the dynamic usage of the whole data, and compare it.\n         size_t ret = memusage::DynamicUsage(cacheCoins);\n         for (CCoinsMap::iterator it = cacheCoins.begin(); it != cacheCoins.end(); it++) {\n-            ret += memusage::DynamicUsage(it->second.coins);\n+            ret += it->second.coins.DynamicMemoryUsage();\n         }\n-        BOOST_CHECK_EQUAL(memusage::DynamicUsage(*this), ret);\n+        BOOST_CHECK_EQUAL(DynamicMemoryUsage(), ret);\n     }\n \n };"
      },
      {
        "sha": "afd35af5031ea71e096a45a4ced2be6e55d8036e",
        "filename": "src/test/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/bitcoin-util-test.json?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -52,7 +52,7 @@\n     [\"-create\",\n      \"in=4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485:0\",\n      \"set=privatekeys:[\\\"5HpHagT65TZzG1PH3CSu63k8DbpvD8s5ip4nEB3kEsreAnchuDf\\\"]\",\n-     \"set=prevtxs:[{\\\"txid\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485\\\",\\\"vout\\\":0,\\\"scriptPubKey\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485\\\"}]\",\n+     \"set=prevtxs:[{\\\"txid\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485\\\",\\\"vout\\\":0,\\\"scriptPubKey\\\":\\\"76a91491b24bf9f5288532960ac687abb035127b1d28a588ac\\\"}]\",\n      \"sign=ALL\",\n      \"outaddr=0.001:193P6LtvS4nCnkDvM9uXn1gsSRqh4aDAz7\"],\n     \"output_cmp\": \"txcreatesign.hex\""
      },
      {
        "sha": "20bdbd08a5c4f1cb1272cf6488b200aa3447ecba",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -120,6 +120,78 @@\n [[[\"a955032f4d6b0c9bfe8cad8f00a8933790b9c1dc28c82e0f48e75b35da0e4944\", 0, \"IF CODESEPARATOR ENDIF 0x21 0x0378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71 CHECKSIGVERIFY CODESEPARATOR 1\"]],\n \"010000000144490eda355be7480f2ec828dcc1b9903793a8008fad8cfe9b0c6b4d2f0355a9000000004a483045022100fa4a74ba9fd59c59f46c3960cf90cbe0d2b743c471d24a3d5d6db6002af5eebb02204d70ec490fd0f7055a7c45f86514336e3a7f03503dacecabb247fc23f15c83510100ffffffff010000000000000000016a00000000\", \"P2SH\"],\n \n+[\"CHECKLOCKTIMEVERIFY tests\"],\n+\n+[\"By-height locks, with argument just beyond tx nLockTime\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000fe64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000001 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000feffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument missing\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000001b1010000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument negative with by-blockheight nLockTime=0\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument negative with by-blocktime nLockTime=500,000,000\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000004005194b1010000000100000000000000000002000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Input locked\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b1ffffffff0100000000000000000002000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Another input being unlocked isn't sufficient; the CHECKLOCKTIMEVERIFY-using input must be unlocked\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"] ,\n+  [\"0000000000000000000000000000000000000000000000000000000000000200\", 1, \"1\"]],\n+\"010000000200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00020000000000000000000000000000000000000000000000000000000000000100000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument/tx height/time mismatch, both versions\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b100000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Argument 2^32 with nLockTime=2^32-1\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967296 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Same, but with nLockTime=2^31-1\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffff7f\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"6 byte non-minimally-encoded arguments are invalid even in their contents are valid\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x06 0x000000000000 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Failure due to failing CHECKLOCKTIMEVERIFY in scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b1000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Failure due to failing CHECKLOCKTIMEVERIFY in redeemScript\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "24fff575c1d8aea0ec9543cd4380fcd8b2059f14",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -187,5 +187,47 @@\n \"0100000002dbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce000000006b4830450221009627444320dc5ef8d7f68f35010b4c050a6ed0d96b67a84db99fda9c9de58b1e02203e4b4aaa019e012e65d69b487fdf8719df72f488fa91506a80c49a33929f1fd50121022b78b756e2258af13779c1a1f37ea6800259716ca4b7f0b87610e0bf3ab52a01ffffffffdbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce010000009300483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303ffffffff01a0860100000000001976a9149bc0bbdd3024da4d0c38ed1aecf5c68dd1d3fa1288ac00000000\", \"P2SH\"],\n \n \n+[\"CHECKLOCKTIMEVERIFY tests\"],\n+\n+[\"By-height locks, with argument == 0 and == tx nLockTime\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Any non-maxint nSequence is fine\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000feffffff0100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"The argument can be calculated rather than created directly by a PUSHDATA\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 1ADD NOP2 1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Perhaps even by an ADD producing a 5-byte result that is out of bounds for other opcodes\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483647 2147483647 ADD NOP2 1\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000feffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"5 byte non-minimally-encoded arguments are valid\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x05 0x0000000000 NOP2 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Valid CHECKLOCKTIMEVERIFY in scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b1000000000100000000000000000001000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n+[\"Valid CHECKLOCKTIMEVERIFY in redeemScript\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n+\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000001000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "a46fcc88cbc99db4f212bb70adf1c3422b2d251c",
        "filename": "src/test/data/txcreatesign.hex",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/data/txcreatesign.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/data/txcreatesign.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatesign.hex?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1 +1 @@\n-01000000018594c5bdcaec8f06b78b596f31cd292a294fd031e24eec716f43dac91ea7494d0000000000ffffffff01a0860100000000001976a9145834479edbbe0539b31ffd3a8f8ebadc2165ed0188ac00000000\n+01000000018594c5bdcaec8f06b78b596f31cd292a294fd031e24eec716f43dac91ea7494d000000008b48304502210096a75056c9e2cc62b7214777b3d2a592cfda7092520126d4ebfcd6d590c99bd8022051bb746359cf98c0603f3004477eac68701132380db8facba19c89dc5ab5c5e201410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ffffffff01a0860100000000001976a9145834479edbbe0539b31ffd3a8f8ebadc2165ed0188ac00000000"
      },
      {
        "sha": "b65c299adcbaa3f17e35cc4542802f45de7d106e",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/interpreter.h\""
      },
      {
        "sha": "7154476c7c21d50e74a496a85fc413efff098591",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -143,6 +143,17 @@ BOOST_AUTO_TEST_CASE(subnet_test)\n     BOOST_CHECK(CSubNet(\"1:2:3:4:5:6:7:8/128\").IsValid());\n     BOOST_CHECK(!CSubNet(\"1:2:3:4:5:6:7:8/129\").IsValid());\n     BOOST_CHECK(!CSubNet(\"fuzzy\").IsValid());\n+\n+    //CNetAddr constructor test\n+    BOOST_CHECK(CSubNet(CNetAddr(\"127.0.0.1\")).IsValid());\n+    BOOST_CHECK(CSubNet(CNetAddr(\"127.0.0.1\")).Match(CNetAddr(\"127.0.0.1\")));\n+    BOOST_CHECK(!CSubNet(CNetAddr(\"127.0.0.1\")).Match(CNetAddr(\"127.0.0.2\")));\n+    BOOST_CHECK(CSubNet(CNetAddr(\"127.0.0.1\")).ToString() == \"127.0.0.1/255.255.255.255\");\n+\n+    BOOST_CHECK(CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).IsValid());\n+    BOOST_CHECK(CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).Match(CNetAddr(\"1:2:3:4:5:6:7:8\")));\n+    BOOST_CHECK(!CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).Match(CNetAddr(\"1:2:3:4:5:6:7:9\")));\n+    BOOST_CHECK(CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).ToString() == \"1:2:3:4:5:6:7:8/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "25599beafca49e9dcc31b8e5a8c2ea9427430bdb",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 104,
        "deletions": 0,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -142,6 +142,24 @@ BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"1.00000000\")), 100000000LL);\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"20999999.9999999\")), 2099999999999990LL);\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"20999999.99999999\")), 2099999999999999LL);\n+\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"1e-8\")), COIN/100000000);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.1e-7\")), COIN/100000000);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.01e-6\")), COIN/100000000);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.0000000000000000000000000000000000000000000000000000000000000000000000000001e+68\")), COIN/100000000);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"10000000000000000000000000000000000000000000000000000000000000000e-64\")), COIN);\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000e64\")), COIN);\n+\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e-9\")), UniValue); //should fail\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"0.000000019\")), UniValue); //should fail\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.00000001000000\")), 1LL); //should pass, cut trailing 0\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"19e-9\")), UniValue); //should fail\n+    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.19e-6\")), 19); //should pass, leading 0 is present\n+\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"92233720368.54775808\")), UniValue); //overflow error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e+11\")), UniValue); //overflow error\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e11\")), UniValue); //overflow error signless\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"93e+9\")), UniValue); //overflow error\n }\n \n BOOST_AUTO_TEST_CASE(json_parse_errors)\n@@ -151,6 +169,9 @@ BOOST_AUTO_TEST_CASE(json_parse_errors)\n     // Valid, with leading or trailing whitespace\n     BOOST_CHECK_EQUAL(ParseNonRFCJSONValue(\" 1.0\").get_real(), 1.0);\n     BOOST_CHECK_EQUAL(ParseNonRFCJSONValue(\"1.0 \").get_real(), 1.0);\n+\n+    BOOST_CHECK_THROW(AmountFromValue(ParseNonRFCJSONValue(\".19e-6\")), std::runtime_error); //should fail, missing leading 0, therefore invalid JSON\n+    BOOST_CHECK_EQUAL(AmountFromValue(ParseNonRFCJSONValue(\"0.00000000000000000000000000000000000001e+30 \")), 1);\n     // Invalid, initial garbage\n     BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"[1.0\"), std::runtime_error);\n     BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"a1.0\"), std::runtime_error);\n@@ -177,4 +198,87 @@ BOOST_AUTO_TEST_CASE(rpc_boostasiotocnetaddr)\n     BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::ffff:127.0.0.1\")).ToString(), \"127.0.0.1\");\n }\n \n+BOOST_AUTO_TEST_CASE(rpc_ban)\n+{\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n+    \n+    UniValue r;\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0 add\")));\n+    BOOST_CHECK_THROW(r = CallRPC(string(\"setban 127.0.0.0:8334\")), runtime_error); //portnumber for setban not allowed\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    UniValue ar = r.get_array();\n+    UniValue o1 = ar[0].get_obj();\n+    UniValue adr = find_value(o1, \"address\");\n+    BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.255\");\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"setban 127.0.0.0 remove\")));;\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    ar = r.get_array();\n+    BOOST_CHECK_EQUAL(ar.size(), 0);\n+\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0/24 add 1607731200 true\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    ar = r.get_array();\n+    o1 = ar[0].get_obj();\n+    adr = find_value(o1, \"address\");\n+    UniValue banned_until = find_value(o1, \"banned_until\");\n+    BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.0\");\n+    BOOST_CHECK_EQUAL(banned_until.get_int64(), 1607731200); // absolute time check\n+\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n+\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0/24 add 200\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    ar = r.get_array();\n+    o1 = ar[0].get_obj();\n+    adr = find_value(o1, \"address\");\n+    banned_until = find_value(o1, \"banned_until\");\n+    BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.0\");\n+    int64_t now = GetTime();    \n+    BOOST_CHECK(banned_until.get_int64() > now);\n+    BOOST_CHECK(banned_until.get_int64()-now <= 200);\n+\n+    // must throw an exception because 127.0.0.1 is in already banned suubnet range\n+    BOOST_CHECK_THROW(r = CallRPC(string(\"setban 127.0.0.1 add\")), runtime_error);\n+\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"setban 127.0.0.0/24 remove\")));;\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    ar = r.get_array();\n+    BOOST_CHECK_EQUAL(ar.size(), 0);\n+\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0/255.255.0.0 add\")));\n+    BOOST_CHECK_THROW(r = CallRPC(string(\"setban 127.0.1.1 add\")), runtime_error);\n+\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    ar = r.get_array();\n+    BOOST_CHECK_EQUAL(ar.size(), 0);\n+\n+\n+    BOOST_CHECK_THROW(r = CallRPC(string(\"setban test add\")), runtime_error); //invalid IP\n+\n+    //IPv6 tests\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban FE80:0000:0000:0000:0202:B3FF:FE1E:8329 add\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    ar = r.get_array();\n+    o1 = ar[0].get_obj();\n+    adr = find_value(o1, \"address\");\n+    BOOST_CHECK_EQUAL(adr.get_str(), \"fe80::202:b3ff:fe1e:8329/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n+\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 2001:db8::/30 add\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    ar = r.get_array();\n+    o1 = ar[0].get_obj();\n+    adr = find_value(o1, \"address\");\n+    BOOST_CHECK_EQUAL(adr.get_str(), \"2001:db8::/ffff:fffc:0:0:0:0:0:0\");\n+\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/128 add\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    ar = r.get_array();\n+    o1 = ar[0].get_obj();\n+    adr = find_value(o1, \"address\");\n+    BOOST_CHECK_EQUAL(adr.get_str(), \"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "9368963ff2f37a5e3b233011d6a234aa13be40e5",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -217,6 +217,12 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     UniValue arr = retValue.get_array();\n     BOOST_CHECK(arr.size() > 0);\n     BOOST_CHECK(CBitcoinAddress(arr[0].get_str()).Get() == demoAddress.Get());\n+\n+    /*********************************\n+     * \t     fundrawtransaction\n+     *********************************/\n+    BOOST_CHECK_THROW(CallRPC(\"fundrawtransaction 28z\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"fundrawtransaction 01000000000180969800000000001976a91450ce0a4b0ee0ddeb633da85199728b940ac3fe9488ac00000000\"), runtime_error);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "16c9a4a868e9af296279afaa1625f596af5072f4",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -5,6 +5,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "d95724dbe17b7d89ab7bba5c103ca75645dcf52c",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -145,7 +145,7 @@ static void RunCreate(const int64_t& num)\n {\n     CheckCreateInt(num);\n     CScriptNum scriptnum(num);\n-    if (scriptnum.getvch().size() <= CScriptNum::nMaxNumSize)\n+    if (scriptnum.getvch().size() <= CScriptNum::nDefaultMaxNumSize)\n         CheckCreateVch(num);\n     else\n     {"
      },
      {
        "sha": "260524f7cc605879c666bb003cf9c0a42c964111",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -12,6 +12,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n \n@@ -41,7 +42,8 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"MINIMALDATA\"), (unsigned int)SCRIPT_VERIFY_MINIMALDATA)\n     (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY)\n     (string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n-    (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK);\n+    (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK)\n+    (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY);\n \n unsigned int ParseScriptFlags(string strFlags)\n {"
      },
      {
        "sha": "16bc8d30f63f79ea20feaa8da742995a47ff38d0",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -286,7 +286,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n }\n \n static const char *json1 =\n-\"[1.10000000,{\\\"key1\\\":\\\"str\\\\u0000\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian\\\"}}]\";\n+\"[1.10000000,{\\\"key1\\\":\\\"str\\\\u0000\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian http://test.com\\\"}}]\";\n \n BOOST_AUTO_TEST_CASE(univalue_readwrite)\n {"
      },
      {
        "sha": "e956cc5b90dfd3e289f4ee0edbf7a9b15b1c942d",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -418,4 +418,70 @@ BOOST_AUTO_TEST_CASE(test_FormatSubVersion)\n     BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments),std::string(\"/Test:0.9.99(comment1)/\"));\n     BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments2),std::string(\"/Test:0.9.99(comment1; comment2)/\"));\n }\n+\n+BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n+{\n+    int64_t amount = 0;\n+    BOOST_CHECK(ParseFixedPoint(\"0\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 0LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 100000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"0.0\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 0LL);\n+    BOOST_CHECK(ParseFixedPoint(\"-0.1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, -10000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1.1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 110000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1.10000000000000000\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 110000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1.1e1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 1100000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1.1e-1\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 11000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1000\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 100000000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"-1000\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, -100000000000LL);\n+    BOOST_CHECK(ParseFixedPoint(\"0.00000001\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 1LL);\n+    BOOST_CHECK(ParseFixedPoint(\"0.0000000100000000\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 1LL);\n+    BOOST_CHECK(ParseFixedPoint(\"-0.00000001\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, -1LL);\n+    BOOST_CHECK(ParseFixedPoint(\"1000000000.00000001\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 100000000000000001LL);\n+    BOOST_CHECK(ParseFixedPoint(\"9999999999.99999999\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, 999999999999999999LL);\n+    BOOST_CHECK(ParseFixedPoint(\"-9999999999.99999999\", 8, &amount));\n+    BOOST_CHECK_EQUAL(amount, -999999999999999999LL);\n+\n+    BOOST_CHECK(!ParseFixedPoint(\"\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"a-1000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-a1000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-1000a\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-01000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"00.1\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\".1\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"--0.1\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"0.000000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-0.000000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"0.00000001000000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-10000000000.00000000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"10000000000.00000000\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-10000000000.00000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"10000000000.00000001\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-10000000000.00000009\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"10000000000.00000009\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-99999999999.99999999\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"99999909999.09999999\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"92233720368.54775807\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"92233720368.54775808\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-92233720368.54775808\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"-92233720368.54775809\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"1.1e\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"1.1e-\", 8, &amount));\n+    BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "935b7846762eeef6d946b09d5c1135e4af78a0af",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -147,7 +147,10 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n             return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }\n-    stats.nHeight = mapBlockIndex.find(GetBestBlock())->second->nHeight;\n+    {\n+        LOCK(cs_main);\n+        stats.nHeight = mapBlockIndex.find(stats.hashBlock)->second->nHeight;\n+    }\n     stats.hashSerialized = ss.GetHash();\n     stats.nTotalAmount = nTotalAmount;\n     return true;"
      },
      {
        "sha": "5bc06e50563dd931399299ac18f75664383fdfa0",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -18,7 +18,7 @@\n using namespace std;\n \n CTxMemPoolEntry::CTxMemPoolEntry():\n-    nFee(0), nTxSize(0), nModSize(0), nTime(0), dPriority(0.0), hadNoDependencies(false)\n+    nFee(0), nTxSize(0), nModSize(0), nUsageSize(0), nTime(0), dPriority(0.0), hadNoDependencies(false)\n {\n     nHeight = MEMPOOL_HEIGHT;\n }\n@@ -31,6 +31,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n+    nUsageSize = RecursiveDynamicUsage(tx);\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -101,6 +102,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n         mapNextTx[tx.vin[i].prevout] = CInPoint(&tx, i);\n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n+    cachedInnerUsage += entry.DynamicMemoryUsage();\n     minerPolicyEstimator->processTransaction(entry, fCurrentEstimate);\n \n     return true;\n@@ -146,6 +148,7 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n \n             removed.push_back(tx);\n             totalTxSize -= mapTx[hash].GetTxSize();\n+            cachedInnerUsage -= mapTx[hash].DynamicMemoryUsage();\n             mapTx.erase(hash);\n             nTransactionsUpdated++;\n             minerPolicyEstimator->removeTx(hash);\n@@ -166,7 +169,7 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n                 continue;\n             const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n             if (fSanityCheck) assert(coins);\n-            if (!coins || (coins->IsCoinBase() && nMemPoolHeight - coins->nHeight < COINBASE_MATURITY)) {\n+            if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n                 transactionsToRemove.push_back(tx);\n                 break;\n             }\n@@ -226,6 +229,7 @@ void CTxMemPool::clear()\n     mapTx.clear();\n     mapNextTx.clear();\n     totalTxSize = 0;\n+    cachedInnerUsage = 0;\n     ++nTransactionsUpdated;\n }\n \n@@ -237,6 +241,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     LogPrint(\"mempool\", \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n \n     uint64_t checkTotal = 0;\n+    uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n \n@@ -245,6 +250,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         checkTotal += it->second.GetTxSize();\n+        innerUsage += it->second.DynamicMemoryUsage();\n         const CTransaction& tx = it->second.GetTx();\n         bool fDependsWait = false;\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n@@ -299,6 +305,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     }\n \n     assert(totalTxSize == checkTotal);\n+    assert(innerUsage == cachedInnerUsage);\n }\n \n void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n@@ -419,3 +426,8 @@ bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {\n bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n     return mempool.exists(txid) || base->HaveCoins(txid);\n }\n+\n+size_t CTxMemPool::DynamicMemoryUsage() const {\n+    LOCK(cs);\n+    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}"
      },
      {
        "sha": "ea36ce1ad53e53bc19cbc93567ae86ae4afe4d78",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -40,6 +40,7 @@ class CTxMemPoolEntry\n     CAmount nFee; //! Cached to avoid expensive parent-transaction lookups\n     size_t nTxSize; //! ... and avoid recomputing tx size\n     size_t nModSize; //! ... and modified size for priority\n+    size_t nUsageSize; //! ... and total memory usage\n     int64_t nTime; //! Local time when entering the mempool\n     double dPriority; //! Priority when entering the mempool\n     unsigned int nHeight; //! Chain height when entering the mempool\n@@ -58,6 +59,7 @@ class CTxMemPoolEntry\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n+    size_t DynamicMemoryUsage() const { return nUsageSize; }\n };\n \n class CBlockPolicyEstimator;\n@@ -73,6 +75,7 @@ class CInPoint\n     CInPoint(const CTransaction* ptxIn, uint32_t nIn) { ptx = ptxIn; n = nIn; }\n     void SetNull() { ptx = NULL; n = (uint32_t) -1; }\n     bool IsNull() const { return (ptx == NULL && n == (uint32_t) -1); }\n+    size_t DynamicMemoryUsage() const { return 0; }\n };\n \n /**\n@@ -93,6 +96,7 @@ class CTxMemPool\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n     uint64_t totalTxSize; //! sum of all mempool tx' byte sizes\n+    uint64_t cachedInnerUsage; //! sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n public:\n     mutable CCriticalSection cs;\n@@ -139,6 +143,7 @@ class CTxMemPool\n         LOCK(cs);\n         return mapTx.size();\n     }\n+\n     uint64_t GetTotalTxSize()\n     {\n         LOCK(cs);\n@@ -162,6 +167,8 @@ class CTxMemPool\n     /** Write/Read estimates to disk */\n     bool WriteFeeEstimates(CAutoFile& fileout) const;\n     bool ReadFeeEstimates(CAutoFile& filein);\n+\n+    size_t DynamicMemoryUsage() const;\n };\n \n /** "
      },
      {
        "sha": "5e5a4d4aed43a8a03cf1dbaa24323075ddcac0d9",
        "filename": "src/univalue/gen.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/univalue/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/univalue/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/gen.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -22,7 +22,6 @@ static void initJsonEscape()\n {\n     escapes[(int)'\"'] = \"\\\\\\\"\";\n     escapes[(int)'\\\\'] = \"\\\\\\\\\";\n-    escapes[(int)'/'] = \"\\\\/\";\n     escapes[(int)'\\b'] = \"\\\\b\";\n     escapes[(int)'\\f'] = \"\\\\f\";\n     escapes[(int)'\\n'] = \"\\\\n\";"
      },
      {
        "sha": "4133b24ca11f85814a85359131c22bf20b3bfcaf",
        "filename": "src/univalue/univalue_escapes.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/univalue/univalue_escapes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/univalue/univalue_escapes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_escapes.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -49,7 +49,7 @@ static const char *escapes[256] = {\n \tNULL,\n \tNULL,\n \tNULL,\n-\t\"\\\\/\",\n+\tNULL,\n \tNULL,\n \tNULL,\n \tNULL,"
      },
      {
        "sha": "37d52037c07305d9085d390c0d80dbd4eed2d61b",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 96,
        "deletions": 27,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -83,6 +83,7 @@\n #include <boost/thread.hpp>\n #include <openssl/crypto.h>\n #include <openssl/rand.h>\n+#include <openssl/conf.h>\n \n // Work around clang compilation problem in Boost 1.46:\n // /usr/include/boost/program_options/detail/config_file.hpp:163:17: error: call to function 'to_internal' that is neither visible in the template definition nor found by argument-dependent lookup\n@@ -113,7 +114,7 @@ CTranslationInterface translationInterface;\n \n /** Init OpenSSL library multithreading support */\n static CCriticalSection** ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line)\n+void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n {\n     if (mode & CRYPTO_LOCK) {\n         ENTER_CRITICAL_SECTION(*ppmutexOpenSSL[i]);\n@@ -134,6 +135,13 @@ class CInit\n             ppmutexOpenSSL[i] = new CCriticalSection();\n         CRYPTO_set_locking_callback(locking_callback);\n \n+        // OpenSSL can optionally load a config file which lists optional loadable modules and engines.\n+        // We don't use them so we don't require the config. However some of our libs may call functions\n+        // which attempt to load the config file, possibly resulting in an exit() or crash if it is missing\n+        // or corrupt. Explicitly tell OpenSSL not to try to load the file. The result for our libs will be\n+        // that the config appears to have been loaded and there are no modules/engines available.\n+        OPENSSL_no_config();\n+\n #ifdef WIN32\n         // Seed OpenSSL PRNG with current contents of the screen\n         RAND_screen();\n@@ -167,23 +175,51 @@ instance_of_cinit;\n  */\n \n static boost::once_flag debugPrintInitFlag = BOOST_ONCE_INIT;\n+\n /**\n- * We use boost::call_once() to make sure these are initialized\n- * in a thread-safe manner the first time called:\n+ * We use boost::call_once() to make sure mutexDebugLog and\n+ * vMsgsBeforeOpenLog are initialized in a thread-safe manner.\n+ *\n+ * NOTE: fileout, mutexDebugLog and sometimes vMsgsBeforeOpenLog\n+ * are leaked on exit. This is ugly, but will be cleaned up by\n+ * the OS/libc. When the shutdown sequence is fully audited and\n+ * tested, explicit destruction of these objects can be implemented.\n  */\n static FILE* fileout = NULL;\n static boost::mutex* mutexDebugLog = NULL;\n+static list<string> *vMsgsBeforeOpenLog;\n+\n+static int FileWriteStr(const std::string &str, FILE *fp)\n+{\n+    return fwrite(str.data(), 1, str.size(), fp);\n+}\n \n static void DebugPrintInit()\n {\n-    assert(fileout == NULL);\n     assert(mutexDebugLog == NULL);\n+    mutexDebugLog = new boost::mutex();\n+    vMsgsBeforeOpenLog = new list<string>;\n+}\n+\n+void OpenDebugLog()\n+{\n+    boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n+    boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n+    assert(fileout == NULL);\n+    assert(vMsgsBeforeOpenLog);\n     boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n     fileout = fopen(pathDebug.string().c_str(), \"a\");\n     if (fileout) setbuf(fileout, NULL); // unbuffered\n \n-    mutexDebugLog = new boost::mutex();\n+    // dump buffered messages from before we opened the log\n+    while (!vMsgsBeforeOpenLog->empty()) {\n+        FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);\n+        vMsgsBeforeOpenLog->pop_front();\n+    }\n+\n+    delete vMsgsBeforeOpenLog;\n+    vMsgsBeforeOpenLog = NULL;\n }\n \n bool LogAcceptCategory(const char* category)\n@@ -215,44 +251,67 @@ bool LogAcceptCategory(const char* category)\n     return true;\n }\n \n+/**\n+ * fStartedNewLine is a state variable held by the calling context that will\n+ * suppress printing of the timestamp when multiple calls are made that don't\n+ * end in a newline. Initialize it to true, and hold it, in the calling context.\n+ */\n+static std::string LogTimestampStr(const std::string &str, bool *fStartedNewLine)\n+{\n+    string strStamped;\n+\n+    if (!fLogTimestamps)\n+        return str;\n+\n+    if (*fStartedNewLine)\n+        strStamped =  DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()) + ' ' + str;\n+    else\n+        strStamped = str;\n+\n+    if (!str.empty() && str[str.size()-1] == '\\n')\n+        *fStartedNewLine = true;\n+    else\n+        *fStartedNewLine = false;\n+\n+    return strStamped;\n+}\n+\n int LogPrintStr(const std::string &str)\n {\n     int ret = 0; // Returns total number of characters written\n+    static bool fStartedNewLine = true;\n     if (fPrintToConsole)\n     {\n         // print to console\n         ret = fwrite(str.data(), 1, str.size(), stdout);\n         fflush(stdout);\n     }\n-    else if (fPrintToDebugLog && AreBaseParamsConfigured())\n+    else if (fPrintToDebugLog)\n     {\n-        static bool fStartedNewLine = true;\n         boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n-\n-        if (fileout == NULL)\n-            return ret;\n-\n         boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n-        // reopen the log file, if requested\n-        if (fReopenDebugLog) {\n-            fReopenDebugLog = false;\n-            boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n-            if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n-                setbuf(fileout, NULL); // unbuffered\n-        }\n+        string strTimestamped = LogTimestampStr(str, &fStartedNewLine);\n \n-        // Debug print useful for profiling\n-        if (fLogTimestamps && fStartedNewLine)\n-            ret += fprintf(fileout, \"%s \", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()).c_str());\n-        if (!str.empty() && str[str.size()-1] == '\\n')\n-            fStartedNewLine = true;\n+        // buffer if we haven't opened the log yet\n+        if (fileout == NULL) {\n+            assert(vMsgsBeforeOpenLog);\n+            ret = strTimestamped.length();\n+            vMsgsBeforeOpenLog->push_back(strTimestamped);\n+        }\n         else\n-            fStartedNewLine = false;\n-\n-        ret = fwrite(str.data(), 1, str.size(), fileout);\n+        {\n+            // reopen the log file, if requested\n+            if (fReopenDebugLog) {\n+                fReopenDebugLog = false;\n+                boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n+                if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n+                    setbuf(fileout, NULL); // unbuffered\n+            }\n+\n+            ret = FileWriteStr(strTimestamped, fileout);\n+        }\n     }\n-\n     return ret;\n }\n \n@@ -756,3 +815,13 @@ void SetThreadPriority(int nPriority)\n #endif // PRIO_THREAD\n #endif // WIN32\n }\n+\n+int GetNumCores()\n+{\n+#if BOOST_VERSION >= 105600\n+    return boost::thread::physical_concurrency();\n+#else // Must fall back to hardware_concurrency, which unfortunately counts virtual cores\n+    return boost::thread::hardware_concurrency();\n+#endif\n+}\n+"
      },
      {
        "sha": "afc9a378bbaf82db7da0c1fcf40f5447c5fcda1b",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -125,6 +125,7 @@ void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map\n boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n boost::filesystem::path GetTempPath();\n+void OpenDebugLog();\n void ShrinkDebugFile();\n void runCommand(const std::string& strCommand);\n \n@@ -199,6 +200,13 @@ std::string HelpMessageGroup(const std::string& message);\n  */\n std::string HelpMessageOpt(const std::string& option, const std::string& message);\n \n+/**\n+ * Return the number of physical cores available on the current system.\n+ * @note This does not count virtual cores, such as those provided by HyperThreading\n+ * when boost is newer than 1.56.\n+ */\n+int GetNumCores();\n+\n void SetThreadPriority(int nPriority);\n void RenameThread(const char* name);\n "
      },
      {
        "sha": "7208ca9474974aa71cde6d296de059ad28b5524f",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 120,
        "deletions": 0,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -538,3 +538,123 @@ int atoi(const std::string& str)\n {\n     return atoi(str.c_str());\n }\n+\n+/** Upper bound for mantissa.\n+ * 10^18-1 is the largest arbitrary decimal that will fit in a signed 64-bit integer.\n+ * Larger integers cannot consist of arbitrary combinations of 0-9:\n+ *\n+ *   999999999999999999  1^18-1\n+ *  9223372036854775807  (1<<63)-1  (max int64_t)\n+ *  9999999999999999999  1^19-1     (would overflow)\n+ */\n+static const int64_t UPPER_BOUND = 1000000000000000000LL - 1LL;\n+\n+/** Helper function for ParseFixedPoint */\n+static inline bool ProcessMantissaDigit(char ch, int64_t &mantissa, int &mantissa_tzeros)\n+{\n+    if(ch == '0')\n+        ++mantissa_tzeros;\n+    else {\n+        for (int i=0; i<=mantissa_tzeros; ++i) {\n+            if (mantissa > (UPPER_BOUND / 10LL))\n+                return false; /* overflow */\n+            mantissa *= 10;\n+        }\n+        mantissa += ch - '0';\n+        mantissa_tzeros = 0;\n+    }\n+    return true;\n+}\n+\n+bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n+{\n+    int64_t mantissa = 0;\n+    int64_t exponent = 0;\n+    int mantissa_tzeros = 0;\n+    bool mantissa_sign = false;\n+    bool exponent_sign = false;\n+    int ptr = 0;\n+    int end = val.size();\n+    int point_ofs = 0;\n+\n+    if (ptr < end && val[ptr] == '-') {\n+        mantissa_sign = true;\n+        ++ptr;\n+    }\n+    if (ptr < end)\n+    {\n+        if (val[ptr] == '0') {\n+            /* pass single 0 */\n+            ++ptr;\n+        } else if (val[ptr] >= '1' && val[ptr] <= '9') {\n+            while (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n+                if (!ProcessMantissaDigit(val[ptr], mantissa, mantissa_tzeros))\n+                    return false; /* overflow */\n+                ++ptr;\n+            }\n+        } else return false; /* missing expected digit */\n+    } else return false; /* empty string or loose '-' */\n+    if (ptr < end && val[ptr] == '.')\n+    {\n+        ++ptr;\n+        if (ptr < end && val[ptr] >= '0' && val[ptr] <= '9')\n+        {\n+            while (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n+                if (!ProcessMantissaDigit(val[ptr], mantissa, mantissa_tzeros))\n+                    return false; /* overflow */\n+                ++ptr;\n+                ++point_ofs;\n+            }\n+        } else return false; /* missing expected digit */\n+    }\n+    if (ptr < end && (val[ptr] == 'e' || val[ptr] == 'E'))\n+    {\n+        ++ptr;\n+        if (ptr < end && val[ptr] == '+')\n+            ++ptr;\n+        else if (ptr < end && val[ptr] == '-') {\n+            exponent_sign = true;\n+            ++ptr;\n+        }\n+        if (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n+            while (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n+                if (exponent > (UPPER_BOUND / 10LL))\n+                    return false; /* overflow */\n+                exponent = exponent * 10 + val[ptr] - '0';\n+                ++ptr;\n+            }\n+        } else return false; /* missing expected digit */\n+    }\n+    if (ptr != end)\n+        return false; /* trailing garbage */\n+\n+    /* finalize exponent */\n+    if (exponent_sign)\n+        exponent = -exponent;\n+    exponent = exponent - point_ofs + mantissa_tzeros;\n+\n+    /* finalize mantissa */\n+    if (mantissa_sign)\n+        mantissa = -mantissa;\n+\n+    /* convert to one 64-bit fixed-point value */\n+    exponent += decimals;\n+    if (exponent < 0)\n+        return false; /* cannot represent values smaller than 10^-decimals */\n+    if (exponent >= 18)\n+        return false; /* cannot represent values larger than or equal to 10^(18-decimals) */\n+\n+    for (int i=0; i < exponent; ++i) {\n+        if (mantissa > (UPPER_BOUND / 10LL) || mantissa < -(UPPER_BOUND / 10LL))\n+            return false; /* overflow */\n+        mantissa *= 10;\n+    }\n+    if (mantissa > UPPER_BOUND || mantissa < -UPPER_BOUND)\n+        return false; /* overflow */\n+\n+    if (amount_out)\n+        *amount_out = mantissa;\n+\n+    return true;\n+}\n+"
      },
      {
        "sha": "dcd56751f2eb7bbef14dd0576fb1916202a55ccc",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -109,4 +109,11 @@ bool TimingResistantEqual(const T& a, const T& b)\n     return accumulator == 0;\n }\n \n+/** Parse number as fixed point according to JSON number syntax.\n+ * See http://json.org/number.gif\n+ * @returns true on success, false on error.\n+ * @note The result must be in the range (-10^18,10^18), otherwise an overflow error will trigger.\n+ */\n+bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n+\n #endif // BITCOIN_UTILSTRENCODINGS_H"
      },
      {
        "sha": "d365f0300849e4295949cbbb7df1bc91dcb587de",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -19,9 +19,13 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1));\n     g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+    g_signals.ScriptForMining.connect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n+    g_signals.BlockFound.connect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n+    g_signals.BlockFound.disconnect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n+    g_signals.ScriptForMining.disconnect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1));\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -31,6 +35,8 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n }\n \n void UnregisterAllValidationInterfaces() {\n+    g_signals.BlockFound.disconnect_all_slots();\n+    g_signals.ScriptForMining.disconnect_all_slots();\n     g_signals.BlockChecked.disconnect_all_slots();\n     g_signals.Broadcast.disconnect_all_slots();\n     g_signals.Inventory.disconnect_all_slots();"
      },
      {
        "sha": "fb0ce0bdaac44333a4ac8278534280c70ff06b85",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -7,9 +7,11 @@\n #define BITCOIN_VALIDATIONINTERFACE_H\n \n #include <boost/signals2/signal.hpp>\n+#include <boost/shared_ptr.hpp>\n \n class CBlock;\n struct CBlockLocator;\n+class CReserveScript;\n class CTransaction;\n class CValidationInterface;\n class CValidationState;\n@@ -34,6 +36,8 @@ class CValidationInterface {\n     virtual void Inventory(const uint256 &hash) {}\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime) {}\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n+    virtual void GetScriptForMining(boost::shared_ptr<CReserveScript>&) {};\n+    virtual void ResetRequestCount(const uint256 &hash) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n@@ -52,6 +56,10 @@ struct CMainSignals {\n     boost::signals2::signal<void (int64_t nBestBlockTime)> Broadcast;\n     /** Notifies listeners of a block validation result */\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    /** Notifies listeners that a key for mining is required (coinbase) */\n+    boost::signals2::signal<void (boost::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    /** Notifies listeners that a block has been successfully mined */\n+    boost::signals2::signal<void (const uint256 &)> BlockFound;\n };\n \n CMainSignals& GetMainSignals();"
      },
      {
        "sha": "e5bc653c33413b59d6e0d36e21077b7d925f45c7",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -43,7 +43,7 @@ void CDBEnv::EnvShutdown()\n     if (ret != 0)\n         LogPrintf(\"CDBEnv::EnvShutdown: Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n-        DbEnv(0).remove(path.string().c_str(), 0);\n+        DbEnv(0).remove(strPath.c_str(), 0);\n }\n \n void CDBEnv::Reset()\n@@ -78,10 +78,10 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n \n     boost::this_thread::interruption_point();\n \n-    path = pathIn;\n-    boost::filesystem::path pathLogDir = path / \"database\";\n+    strPath = pathIn.string();\n+    boost::filesystem::path pathLogDir = pathIn / \"database\";\n     TryCreateDirectory(pathLogDir);\n-    boost::filesystem::path pathErrorFile = path / \"db.log\";\n+    boost::filesystem::path pathErrorFile = pathIn / \"db.log\";\n     LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n@@ -98,7 +98,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     dbenv->set_flags(DB_AUTO_COMMIT, 1);\n     dbenv->set_flags(DB_TXN_WRITE_NOSYNC, 1);\n     dbenv->log_set_config(DB_LOG_AUTO_REMOVE, 1);\n-    int ret = dbenv->open(path.string().c_str(),\n+    int ret = dbenv->open(strPath.c_str(),\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -455,7 +455,7 @@ void CDBEnv::Flush(bool fShutdown)\n                 dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb)\n-                    boost::filesystem::remove_all(path / \"database\");\n+                    boost::filesystem::remove_all(boost::filesystem::path(strPath) / \"database\");\n             }\n         }\n     }"
      },
      {
        "sha": "64071caa3a21efd2b7de4bf79a0cf3e579d781a2",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -27,7 +27,9 @@ class CDBEnv\n private:\n     bool fDbEnvInit;\n     bool fMockDb;\n-    boost::filesystem::path path;\n+    // Don't change into boost::filesystem::path, as that can result in\n+    // shutdown problems/crashes caused by a static initialized internal pointer.\n+    std::string strPath;\n \n     void EnvShutdown();\n "
      },
      {
        "sha": "f6ca8cbb76d5ed50722c0078f6440989032291aa",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 3,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -476,7 +476,6 @@ UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n             addressInfo.push_back(CBitcoinAddress(address).ToString());\n             addressInfo.push_back(ValueFromAmount(balances[address]));\n             {\n-                LOCK(pwalletMain->cs_wallet);\n                 if (pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get()) != pwalletMain->mapAddressBook.end())\n                     addressInfo.push_back(pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get())->second.name);\n             }\n@@ -733,12 +732,12 @@ UniValue getbalance(const UniValue& params, bool fHelp)\n     if (params[0].get_str() == \"*\") {\n         // Calculate total balance a different way from GetBalance()\n         // (GetBalance() sums up all unspent TxOuts)\n-        // getbalance and getbalance '*' 0 should return the same number\n+        // getbalance and \"getbalance * 1 true\" should return the same number\n         CAmount nBalance = 0;\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n-            if (!wtx.IsTrusted() || wtx.GetBlocksToMaturity() > 0)\n+            if (!CheckFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n                 continue;\n \n             CAmount allFee;\n@@ -2201,6 +2200,7 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n             \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in btc/kb\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2219,6 +2219,7 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n     if (pwalletMain->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n+    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n     return obj;\n }\n \n@@ -2359,3 +2360,57 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"fundrawtransaction \\\"hexstring\\\"\\n\"\n+                            \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n+                            \"This will not modify existing inputs, and will add one change output to the outputs.\\n\"\n+                            \"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\\n\"\n+                            \"The inputs added will not be signed, use signrawtransaction for that.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) The fee added to the transaction\\n\"\n+                            \"  \\\"changepos\\\": n          (numeric) The position of the added change output, or -1\\n\"\n+                            \"}\\n\"\n+                            \"\\\"hex\\\"             \\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nCreate a transaction with no inputs\\n\"\n+                            + HelpExampleCli(\"createrawtransaction\", \"\\\"[]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n+                            \"\\nAdd sufficient unsigned inputs to meet the output value\\n\"\n+                            + HelpExampleCli(\"fundrawtransaction\", \"\\\"rawtransactionhex\\\"\") +\n+                            \"\\nSign the transaction\\n\"\n+                            + HelpExampleCli(\"signrawtransaction\", \"\\\"fundedtransactionhex\\\"\") +\n+                            \"\\nSend the transaction\\n\"\n+                            + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+\n+    // parse hex string from parameter\n+    CTransaction origTx;\n+    if (!DecodeHexTx(origTx, params[0].get_str()))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+\n+    CMutableTransaction tx(origTx);\n+    CAmount nFee;\n+    string strFailReason;\n+    int nChangePos = -1;\n+    if(!pwalletMain->FundTransaction(tx, nFee, nChangePos, strFailReason))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"hex\", EncodeHexTx(tx)));\n+    result.push_back(Pair(\"changepos\", nChangePos));\n+    result.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n+\n+    return result;\n+}"
      },
      {
        "sha": "7b3cd9803b31e5c81b0a2153dcc646f06506d59a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 136,
        "deletions": 11,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -12,6 +12,7 @@\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\"\n@@ -419,6 +420,7 @@ void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n         const uint256& hash = it->second;\n         CWalletTx* copyTo = &mapWallet[hash];\n         if (copyFrom == copyTo) continue;\n+        if (!copyFrom->IsEquivalentTo(*copyTo)) continue;\n         copyTo->mapValue = copyFrom->mapValue;\n         copyTo->vOrderForm = copyFrom->vOrderForm;\n         // fTimeReceivedIsTxTime not copied on purpose\n@@ -1330,6 +1332,15 @@ bool CWalletTx::IsTrusted() const\n     return true;\n }\n \n+bool CWalletTx::IsEquivalentTo(const CWalletTx& tx) const\n+{\n+        CMutableTransaction tx1 = *this;\n+        CMutableTransaction tx2 = tx;\n+        for (unsigned int i = 0; i < tx1.vin.size(); i++) tx1.vin[i].scriptSig = CScript();\n+        for (unsigned int i = 0; i < tx2.vin.size(); i++) tx2.vin[i].scriptSig = CScript();\n+        return CTransaction(tx1) == CTransaction(tx2);\n+}\n+\n std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime)\n {\n     std::vector<uint256> result;\n@@ -1509,7 +1520,7 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                 isminetype mine = IsMine(pcoin->vout[i]);\n                 if (!(IsSpent(wtxid, i)) && mine != ISMINE_NO &&\n                     !IsLockedCoin((*it).first, i) && (pcoin->vout[i].nValue > 0 || fIncludeZeroValue) &&\n-                    (!coinControl || !coinControl->HasSelected() || coinControl->IsSelected((*it).first, i)))\n+                    (!coinControl || !coinControl->HasSelected() || coinControl->fAllowOtherInputs || coinControl->IsSelected((*it).first, i)))\n                         vCoins.push_back(COutput(pcoin, i, nDepth, (mine & ISMINE_SPENDABLE) != ISMINE_NO));\n             }\n         }\n@@ -1669,25 +1680,108 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n     AvailableCoins(vCoins, true, coinControl);\n \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n-    if (coinControl && coinControl->HasSelected())\n+    if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs)\n     {\n         BOOST_FOREACH(const COutput& out, vCoins)\n         {\n-            if(!out.fSpendable)\n-                continue;\n+            if (!out.fSpendable)\n+                 continue;\n             nValueRet += out.tx->vout[out.i].nValue;\n             setCoinsRet.insert(make_pair(out.tx, out.i));\n         }\n         return (nValueRet >= nTargetValue);\n     }\n \n-    return (SelectCoinsMinConf(nTargetValue, 1, 6, vCoins, setCoinsRet, nValueRet) ||\n-            SelectCoinsMinConf(nTargetValue, 1, 1, vCoins, setCoinsRet, nValueRet) ||\n-            (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue, 0, 1, vCoins, setCoinsRet, nValueRet)));\n+    // calculate value from preset inputs and store them\n+    set<pair<const CWalletTx*, uint32_t> > setPresetCoins;\n+    CAmount nValueFromPresetInputs = 0;\n+\n+    std::vector<COutPoint> vPresetInputs;\n+    if (coinControl)\n+        coinControl->ListSelected(vPresetInputs);\n+    BOOST_FOREACH(const COutPoint& outpoint, vPresetInputs)\n+    {\n+        map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\n+        if (it != mapWallet.end())\n+        {\n+            const CWalletTx* pcoin = &it->second;\n+            // Clearly invalid input, fail\n+            if (pcoin->vout.size() <= outpoint.n)\n+                return false;\n+            nValueFromPresetInputs += pcoin->vout[outpoint.n].nValue;\n+            setPresetCoins.insert(make_pair(pcoin, outpoint.n));\n+        } else\n+            return false; // TODO: Allow non-wallet inputs\n+    }\n+\n+    // remove preset inputs from vCoins\n+    for (vector<COutput>::iterator it = vCoins.begin(); it != vCoins.end() && coinControl && coinControl->HasSelected();)\n+    {\n+        if (setPresetCoins.count(make_pair(it->tx, it->i)))\n+            it = vCoins.erase(it);\n+        else\n+            ++it;\n+    }\n+\n+    bool res = nTargetValue <= nValueFromPresetInputs ||\n+        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 6, vCoins, setCoinsRet, nValueRet) ||\n+        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 1, vCoins, setCoinsRet, nValueRet) ||\n+        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, vCoins, setCoinsRet, nValueRet));\n+\n+    // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible inputs to the coinset\n+    setCoinsRet.insert(setPresetCoins.begin(), setPresetCoins.end());\n+\n+    // add preset inputs to the total value selected\n+    nValueRet += nValueFromPresetInputs;\n+\n+    return res;\n }\n \n-bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason)\n+{\n+    vector<CRecipient> vecSend;\n+\n+    // Turn the txout set into a CRecipient vector\n+    BOOST_FOREACH(const CTxOut& txOut, tx.vout)\n+    {\n+        CRecipient recipient = {txOut.scriptPubKey, txOut.nValue, false};\n+        vecSend.push_back(recipient);\n+    }\n+\n+    CCoinControl coinControl;\n+    coinControl.fAllowOtherInputs = true;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        coinControl.Select(txin.prevout);\n+\n+    CReserveKey reservekey(this);\n+    CWalletTx wtx;\n+    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosRet, strFailReason, &coinControl, false))\n+        return false;\n+\n+    if (nChangePosRet != -1)\n+        tx.vout.insert(tx.vout.begin() + nChangePosRet, wtx.vout[nChangePosRet]);\n+\n+    // Add new txins (keeping original txin scriptSig/order)\n+    BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+    {\n+        bool found = false;\n+        BOOST_FOREACH(const CTxIn& origTxIn, tx.vin)\n+        {\n+            if (txin.prevout.hash == origTxIn.prevout.hash && txin.prevout.n == origTxIn.prevout.n)\n+            {\n+                found = true;\n+                break;\n+            }\n+        }\n+        if (!found)\n+            tx.vin.push_back(txin);\n+    }\n+\n+    return true;\n+}\n+\n+bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n+                                int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {\n     CAmount nValue = 0;\n     unsigned int nSubtractFeeFromAmount = 0;\n@@ -1890,23 +1984,43 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n \n                 // Sign\n                 int nIn = 0;\n+                CTransaction txNewConst(txNew);\n                 BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n-                    if (!SignSignature(*this, *coin.first, txNew, nIn++))\n+                {\n+                    bool signSuccess;\n+                    const CScript& scriptPubKey = coin.first->vout[coin.second].scriptPubKey;\n+                    CScript& scriptSigRes = txNew.vin[nIn].scriptSig;\n+                    if (sign)\n+                        signSuccess = ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, scriptSigRes);\n+                    else\n+                        signSuccess = ProduceSignature(DummySignatureCreator(this), scriptPubKey, scriptSigRes);\n+\n+                    if (!signSuccess)\n                     {\n                         strFailReason = _(\"Signing transaction failed\");\n                         return false;\n                     }\n+                    nIn++;\n+                }\n+\n+                unsigned int nBytes = ::GetSerializeSize(txNew, SER_NETWORK, PROTOCOL_VERSION);\n+\n+                // Remove scriptSigs if we used dummy signatures for fee calculation\n+                if (!sign) {\n+                    BOOST_FOREACH (CTxIn& vin, txNew.vin)\n+                        vin.scriptSig = CScript();\n+                }\n \n                 // Embed the constructed transaction data in wtxNew.\n                 *static_cast<CTransaction*>(&wtxNew) = CTransaction(txNew);\n \n                 // Limit size\n-                unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtxNew, SER_NETWORK, PROTOCOL_VERSION);\n                 if (nBytes >= MAX_STANDARD_TX_SIZE)\n                 {\n                     strFailReason = _(\"Transaction too large\");\n                     return false;\n                 }\n+\n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n                 // Can we complete this as a free transaction?\n@@ -2480,6 +2594,17 @@ void CWallet::UpdatedTransaction(const uint256 &hashTx)\n     }\n }\n \n+void CWallet::GetScriptForMining(boost::shared_ptr<CReserveScript> &script)\n+{\n+    boost::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n+    CPubKey pubkey;\n+    if (!rKey->GetReservedKey(pubkey))\n+        return;\n+\n+    script = rKey;\n+    script->reserveScript = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n+}\n+\n void CWallet::LockCoin(COutPoint& output)\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins"
      },
      {
        "sha": "003266ba19a6f2123df5822131e49f4e98095f25",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 17,
        "deletions": 3,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -28,6 +28,8 @@\n #include <utility>\n #include <vector>\n \n+#include <boost/shared_ptr.hpp>\n+\n /**\n  * Settings\n  */\n@@ -376,6 +378,9 @@ class CWalletTx : public CMerkleTx\n         return (GetDebit(filter) > 0);\n     }\n \n+    // True if only scriptSigs are different\n+    bool IsEquivalentTo(const CWalletTx& tx) const;\n+\n     bool IsTrusted() const;\n \n     bool WriteToDisk(CWalletDB *pwalletdb);\n@@ -625,8 +630,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n-    bool CreateTransaction(const std::vector<CRecipient>& vecSend,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason);\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet,\n+                           std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n     static CFeeRate minTxFee;\n@@ -679,6 +685,13 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n+    void GetScriptForMining(boost::shared_ptr<CReserveScript> &script);\n+    void ResetRequestCount(const uint256 &hash)\n+    {\n+        LOCK(cs_wallet);\n+        mapRequestCount[hash] = 0;\n+    };\n+    \n     unsigned int GetKeyPoolSize()\n     {\n         AssertLockHeld(cs_wallet); // setKeyPool\n@@ -734,7 +747,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n };\n \n /** A key allocated from the key pool. */\n-class CReserveKey\n+class CReserveKey : public CReserveScript\n {\n protected:\n     CWallet* pwallet;\n@@ -755,6 +768,7 @@ class CReserveKey\n     void ReturnKey();\n     bool GetReservedKey(CPubKey &pubkey);\n     void KeepKey();\n+    void KeepScript() { KeepKey(); }\n };\n \n "
      }
    ]
  },
  {
    "sha": "f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDE0YmU4ZWJjZDNmZDhhOGE3YTk2Zjg4ZWU0YTgzZGJlNjdjMGNj",
    "commit": {
      "author": {
        "name": "lsqtzj",
        "email": "lsqtzj@qq.com",
        "date": "2015-07-23T16:54:19Z"
      },
      "committer": {
        "name": "lsqtzj",
        "email": "lsqtzj@qq.com",
        "date": "2015-07-23T16:54:19Z"
      },
      "message": "Revert \"update\"",
      "tree": {
        "sha": "41bb168d41ff3e72f194e7c7e064e50f836451fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41bb168d41ff3e72f194e7c7e064e50f836451fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/comments",
    "author": {
      "login": "lsqtzj",
      "id": 4635861,
      "node_id": "MDQ6VXNlcjQ2MzU4NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4635861?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsqtzj",
      "html_url": "https://github.com/lsqtzj",
      "followers_url": "https://api.github.com/users/lsqtzj/followers",
      "following_url": "https://api.github.com/users/lsqtzj/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsqtzj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsqtzj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsqtzj/subscriptions",
      "organizations_url": "https://api.github.com/users/lsqtzj/orgs",
      "repos_url": "https://api.github.com/users/lsqtzj/repos",
      "events_url": "https://api.github.com/users/lsqtzj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsqtzj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lsqtzj",
      "id": 4635861,
      "node_id": "MDQ6VXNlcjQ2MzU4NjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4635861?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsqtzj",
      "html_url": "https://github.com/lsqtzj",
      "followers_url": "https://api.github.com/users/lsqtzj/followers",
      "following_url": "https://api.github.com/users/lsqtzj/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsqtzj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsqtzj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsqtzj/subscriptions",
      "organizations_url": "https://api.github.com/users/lsqtzj/orgs",
      "repos_url": "https://api.github.com/users/lsqtzj/repos",
      "events_url": "https://api.github.com/users/lsqtzj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsqtzj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7d17982187d506fe271f8fdcc42c0f5ef814c50"
      }
    ],
    "stats": {
      "total": 8153,
      "additions": 2317,
      "deletions": 5836
    },
    "files": [
      {
        "sha": "2f478e4b413c7c229568105bbc601da34bb4e544",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -202,8 +202,6 @@ check-local:\n \t@qa/pull-tester/run-bitcoind-for-test.sh $(JAVA) -jar $(JAVA_COMPARISON_TOOL) qa/tmp/compTool $(COMPARISON_TOOL_REORG_TESTS) 2>&1\n endif\n \n-dist_noinst_SCRIPTS = autogen.sh\n-\n EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.sh qa/pull-tester/run-bitcoin-cli qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)"
      },
      {
        "sha": "67c5ed5b414e948df0e6b5a9440205b04f384cfd",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -34,7 +34,7 @@ development team members simply pulls it.\n \n If it is a *more complicated or potentially controversial* change, then the patch\n submitter will be asked to start a discussion (if they haven't already) on the\n-[mailing list](https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev)\n+[mailing list](http://sourceforge.net/mailarchive/forum.php?forum_name=bitcoin-development).\n \n The patch will be accepted if there is broad consensus that it is a good thing.\n Developers should expect to rework and resubmit patches if the code doesn't\n@@ -58,10 +58,6 @@ lots of money.\n Developers are strongly encouraged to write unit tests for new code, and to\n submit new unit tests for old code. Unit tests can be compiled and run (assuming they weren't disabled in configure) with: `make check`\n \n-There are also regression and integration tests of the RPC interface, written\n-in Python, that are run automatically on the build server.\n-These tests can be run with: `qa/pull-tester/rpc-tests.sh`\n-\n Every pull request is built for both Windows and Linux on a dedicated server,\n and unit and sanity tests are automatically run. The binaries produced may be\n used for manual QA testing \u2014 a link to them will appear in a comment on the"
      },
      {
        "sha": "61b6a314af1fcba310c429633c35c9cbf9aa5611",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -147,13 +147,12 @@ AC_ARG_ENABLE([debug],\n     [enable_debug=no])\n \n if test \"x$enable_debug\" = xyes; then\n-    CPPFLAGS=\"$CPPFLAGS -DDEBUG -DDEBUG_LOCKORDER\"\n     if test \"x$GCC\" = xyes; then\n-        CFLAGS=\"$CFLAGS -g3 -O0\"\n+        CFLAGS=\"-g3 -O0 -DDEBUG\"\n     fi\n     \n     if test \"x$GXX\" = xyes; then\n-        CXXFLAGS=\"$CXXFLAGS -g3 -O0\"\n+        CXXFLAGS=\"-g3 -O0 -DDEBUG\"\n     fi\n fi \n \n@@ -163,7 +162,7 @@ fi\n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter\"\n fi\n-CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n   [AS_HELP_STRING([--with-utils],"
      },
      {
        "sha": "3741031f9ce0a281ef54e5474ed73587be59fe20",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -2,7 +2,8 @@ Format: http://svn.debian.org/wsvn/dep/web/deps/dep5.mdwn?rev=174\n Upstream-Name: Bitcoin\n Upstream-Contact: Satoshi Nakamoto <satoshin@gmx.com>\n  irc://#bitcoin@freenode.net\n-Source: https://github.com/bitcoin/bitcoin\n+Source: http://sourceforge.net/projects/bitcoin/files/\n+ https://github.com/bitcoin/bitcoin\n \n Files: *\n Copyright: 2009-2012, Bitcoin Core Developers"
      },
      {
        "sha": "c0c0b0c98b67020d69c80bd717d58f6b28487ed6",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -8,11 +8,10 @@ packages:\n - \"libc6:i386\"\n - \"faketime\"\n reference_datetime: \"2015-06-01 00:00:00\"\n-remotes:\n-- \"url\": \"https://github.com/bitcoin/bitcoin-detached-sigs.git\"\n-  \"dir\": \"signature\"\n+remotes: []\n files:\n - \"bitcoin-osx-unsigned.tar.gz\"\n+- \"signature.tar.gz\"\n script: |\n   WRAP_DIR=$HOME/wrapped\n   mkdir -p ${WRAP_DIR}\n@@ -33,6 +32,6 @@ script: |\n   SIGNED=bitcoin-osx-signed.dmg\n \n   tar -xf ${UNSIGNED}\n-  ./detached-sig-apply.sh ${UNSIGNED} signature/osx\n+  ./detached-sig-apply.sh ${UNSIGNED} signature.tar.gz\n   ${WRAP_DIR}/genisoimage -no-cache-inodes -D -l -probe -V \"Bitcoin-Core\" -no-pad -r -apple -o uncompressed.dmg signed-app\n   ${WRAP_DIR}/dmg dmg uncompressed.dmg ${OUTDIR}/${SIGNED}"
      },
      {
        "sha": "2a73050e0e624b98c7df76e70f617d73f2848422",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 39,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,39 +0,0 @@\n----\n-name: \"bitcoin-win-signer\"\n-suites:\n-- \"precise\"\n-architectures:\n-- \"amd64\"\n-packages:\n-- \"libssl-dev\"\n-- \"autoconf\"\n-reference_datetime: \"2015-06-01 00:00:00\"\n-remotes:\n-- \"url\": \"https://github.com/bitcoin/bitcoin-detached-sigs.git\"\n-  \"dir\": \"signature\"\n-files:\n-- \"osslsigncode-1.7.1.tar.gz\"\n-- \"osslsigncode-Backports-to-1.7.1.patch\"\n-- \"bitcoin-win-unsigned.tar.gz\"\n-script: |\n-  BUILD_DIR=`pwd`\n-  SIGDIR=${BUILD_DIR}/signature/win\n-  UNSIGNED_DIR=${BUILD_DIR}/unsigned\n-\n-  echo \"f9a8cdb38b9c309326764ebc937cba1523a3a751a7ab05df3ecc99d18ae466c9  osslsigncode-1.7.1.tar.gz\" | sha256sum -c\n-  echo \"a8c4e9cafba922f89de0df1f2152e7be286aba73f78505169bc351a7938dd911  osslsigncode-Backports-to-1.7.1.patch\" | sha256sum -c\n-\n-  mkdir -p ${UNSIGNED_DIR}\n-  tar -C ${UNSIGNED_DIR} -xf bitcoin-win-unsigned.tar.gz\n-\n-  tar xf osslsigncode-1.7.1.tar.gz\n-  cd osslsigncode-1.7.1\n-  patch -p1 < ${BUILD_DIR}/osslsigncode-Backports-to-1.7.1.patch\n-\n-  ./configure --without-gsf --without-curl --disable-dependency-tracking\n-  make\n-  find ${UNSIGNED_DIR} -name \"*-unsigned.exe\" | while read i; do\n-    INFILE=\"`basename \"${i}\"`\"\n-    OUTFILE=\"`echo \"${INFILE}\" | sed s/-unsigned//`\"\n-    ./osslsigncode attach-signature -in \"${i}\" -out \"${OUTDIR}/${OUTFILE}\" -sigin \"${SIGDIR}/${INFILE}.pem\"\n-  done"
      },
      {
        "sha": "20cfb298598c00e77d1f188628fae552dc51b8ab",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -84,8 +84,6 @@ script: |\n   pushd temp\n   tar xf ../$SOURCEDIST\n   find bitcoin-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n-  mkdir -p $OUTDIR/src\n-  cp ../$SOURCEDIST $OUTDIR/src\n   popd\n \n   ORIGPATH=\"$PATH\"\n@@ -111,8 +109,7 @@ script: |\n     find ${DISTNAME} -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n     cd ../..\n   done\n-  cd $OUTDIR\n-  rename 's/-setup\\.exe$/-setup-unsigned.exe/' *-setup.exe\n-  find . -name \"*-setup-unsigned.exe\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz\n+  mkdir -p $OUTDIR/src\n+  mv $SOURCEDIST $OUTDIR/src\n   mv ${OUTDIR}/${DISTNAME}-x86_64-*.zip ${OUTDIR}/${DISTNAME}-win64.zip\n   mv ${OUTDIR}/${DISTNAME}-i686-*.zip ${OUTDIR}/${DISTNAME}-win32.zip"
      },
      {
        "sha": "928a74b3155da22877d1b6ad32fa2a7cb745e0ba",
        "filename": "contrib/gitian-downloader/cdecker-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-downloader/cdecker-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-downloader/cdecker-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/cdecker-key.pgp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50"
      },
      {
        "sha": "71a42e514881bc6383531ea2c82c93998453245e",
        "filename": "contrib/gitian-downloader/centaur1-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 30,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-downloader/centaur1-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/gitian-downloader/centaur1-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/centaur1-key.pgp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,30 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1.4.12 (GNU/Linux)\n-\n-mQENBFTjy20BCAC7q/tpPQ9tdEALpDqe8kpVAT5ysOJDLDeFEE1J5O8NuDFuibiN\n-XYkb2nAt4Vdr23in9z0LAiTSgr7znndnab/rOSn6pXbXQfLTHrSnAeClTHVQVPSq\n-m5kNg1vWvNxFtIpZ/fGsc6LLmIHxdgeLn+NOpvNx7RzF/N5ctX51vMxMUeDq3daZ\n-tLneJVRj5tXHRJcjW62cyiNFasYAZ3JC8wjwzr0SOndc7kygbEVCTWNkTAGd1Lax\n-KSJW6TjhBPK7j+RljS5nfx/Tf+OG4AoA7/53593YL7Shfx8rwWVIeF4nS6efFnuf\n-eIj+aS5haGyFvNgw8DE7QUCrPiUxeA8wuXu7ABEBAAG0H2NlbnRhdXIgPGNlbnRh\n-dXJAcGhvbmVib29rLmNvbT6JATgEEwECACIFAlTjy20CGwMGCwkIBwMCBhUIAgkK\n-CwQWAgMBAh4BAheAAAoJEP+V+qlxaXQF8r4IAKnE8D9AOTdM/YvYxpCeI6ndEUUs\n-8NcotpbIBJ67vr1Dsot7Ee0PrmIYOiInA+T81lPUDecJYrnemVefhquiyJ5VJ4/d\n-z2zUKBfxjeOsj/PHgcowVxMco8fNEWQa2fZX6X8RVADIsUnIIwpRFVUcbssK/3xJ\n-k46vjWwYNQywht/ZgFBesOgywyz5GozmwrK6TixJxKk8M69GFz2fHhJjp1bxDZuk\n-Rs3YmWeOcCasoJ6GbvIboKQSPHGyEOCqIuiBL63YMa0n1FU0ooDteNZ04eRinIhc\n-fo9JC66fQrUFn8CmmRTtdZOrZ/efYjQtfLAunCkzSM3p6DE9u4Y7d8E5Ar65AQ0E\n-VOPLbQEIANhxtouZuQmw+k89toBWXw75s+csxKHKZuhw8QntaFyFYq3IOnIeV1sK\n-PRENkWsqDInjEM8k9eZ6pnS11EQ1rrFffss+mprTbL3I4S489tJETYZKHrmmox7h\n-ustRi5eXBEmGeKW0mqpb/9r4okpTaIfs+EJ4C9jj0ghWkqU0acyzanJiUY/0R46F\n-vPfGfHnhZ5TAl3eiL0H2JkF6taG8K1XOLemahdZHE9wJh0ZFWnDDkA1l6j2rtYga\n-jEi/ucOp5GkmumxbFiVgponDBqBpsscRrCV6SbZs9gz3dQNgqe5A3CKGZRuVCY6s\n-djRJelgqCF5+dV0fAT0oF3C/3E5KAgcAEQEAAYkBHwQYAQIACQUCVOPLbQIbDAAK\n-CRD/lfqpcWl0BUSxCACjEFwQSHcfZINWD+KdNMayxyHQlBwsEDX+xQkgnn+/Q3hW\n-9VI3SSSfFV3ustlUa3IaNHwuWzsrSqG6mLG47LAQ6vPAWVh723gVCpyJf42Oms/e\n-qeyn0f/PT/6RuNMXQeHbfddmRp4PFjyKOms5Bmf3oi4t4JSvOS4yABBBKzhDQYC9\n-e+qv6Y1sDYpSiCxstQLzIHKiB5bfZ8Szfk09EyyLdqLGkiB0MFhHoXWwQxKiLVc+\n-xNFj2a/jw0rQVgN5DZgHBWU5WqvS5CWIczi+2S9MFI26iBhCn3urZToaaQ/DObqC\n-qmekFrJ/GOj5vB1Mm014lWjG2X3EovLZ1XkgWI7W\n-=vtNZ\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "367d4c42169c0428662ed7ae733c7033d6d388dc",
        "filename": "contrib/gitian-downloader/linux-download-config",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/gitian-downloader/linux-download-config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/gitian-downloader/linux-download-config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/linux-download-config?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -3,7 +3,7 @@ name: bitcoin\n urls:\n - http://bitcoin.org/bitcoin-latest-linux-gitian.zip\n rss:\n-- url: \n+- url: http://sourceforge.net/api/file/index/project-id/244765/mtime/desc/limit/100/rss\n   xpath: //item/link/text()\n   pattern: bitcoin-\\d+.\\d+.\\d+-linux-gitian.zip\n signers:"
      },
      {
        "sha": "ef47918a1f0693a4862fac670e5d2c0440d93fae",
        "filename": "contrib/gitian-downloader/win32-download-config",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/gitian-downloader/win32-download-config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/gitian-downloader/win32-download-config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/win32-download-config?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -3,7 +3,7 @@ name: bitcoin\n urls:\n - http://bitcoin.org/bitcoin-latest-win32-gitian.zip\n rss:\n-- url: \n+- url: http://sourceforge.net/api/file/index/project-id/244765/mtime/desc/limit/100/rss\n   xpath: //item/link/text()\n   pattern: bitcoin-\\d+.\\d+.\\d+-win32-gitian.zip\n signers:"
      },
      {
        "sha": "a94f03680d34061bd3e92bab9dd54a36f521f797",
        "filename": "contrib/init/bitcoind.openrc",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/init/bitcoind.openrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/init/bitcoind.openrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrc?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -32,11 +32,7 @@ required_files=\"${BITCOIND_CONFIGFILE}\"\n start_stop_daemon_args=\"-u ${BITCOIND_USER} \\\n \t\t\t-N ${BITCOIND_NICE} -w 2000\"\n pidfile=\"${BITCOIND_PIDFILE}\"\n-\n-# The retry schedule to use when stopping the daemon. Could be either\n-# a timeout in seconds or multiple signal/timeout pairs (like\n-# \"SIGKILL/180 SIGTERM/300\")\n-retry=\"${BITCOIND_SIGTERM_TIMEOUT}\"\n+retry=60\n \n depend() {\n \tneed localmount net"
      },
      {
        "sha": "d8d7f58337460aea699ffea8eac36b17cc59d69d",
        "filename": "contrib/init/bitcoind.openrcconf",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/init/bitcoind.openrcconf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/init/bitcoind.openrcconf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrcconf?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -25,9 +25,3 @@\n # Additional options (avoid -conf and -datadir, use flags above)\n BITCOIND_OPTS=\"-disablewallet\"\n \n-# The timeout in seconds OpenRC will wait for bitcoind to terminate\n-# after a SIGTERM has been raised.\n-# Note that this will be mapped as argument to start-stop-daemon's\n-# '--retry' option, which means you can specify a retry schedule\n-# here. For more information see man 8 start-stop-daemon.\n-BITCOIND_SIGTERM_TIMEOUT=60"
      },
      {
        "sha": "157586e4d4e0a89a9ed9513be65f50933649b5bd",
        "filename": "contrib/linearize/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/linearize/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/linearize/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/README.md?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -3,7 +3,7 @@ Construct a linear, no-fork, best version of the blockchain.\n \n ## Step 1: Download hash list\n \n-    $ ./linearize-hashes.py linearize.cfg > hashlist.txt\n+   $ ./linearize-hashes.py linearize.cfg > hashlist.txt\n \n Required configuration file settings for linearize-hashes:\n * RPC: rpcuser, rpcpassword\n@@ -14,7 +14,7 @@ Optional config file setting for linearize-hashes:\n \n ## Step 2: Copy local block data\n \n-    $ ./linearize-data.py linearize.cfg\n+   $ ./linearize-data.py linearize.cfg\n \n Required configuration file settings:\n * \"input\": bitcoind blocks/ directory containing blkNNNNN.dat\n@@ -26,7 +26,7 @@ output.\n \n Optional config file setting for linearize-data:\n * \"netmagic\": network magic number\n-* \"max_out_sz\": maximum output file size (default `1000*1000*1000`)\n+* \"max_out_sz\": maximum output file size (default 1000*1000*1000)\n * \"split_timestamp\": Split files when a new month is first seen, in addition to\n reaching a maximum file size.\n * \"file_timestamp\": Set each file's last-modified time to that of the"
      },
      {
        "sha": "7947c6bf7263e49c5a263f3d283dc112a25f64cb",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -12,7 +12,6 @@\n import struct\n import re\n import os\n-import os.path\n import base64\n import httplib\n import sys\n@@ -116,20 +115,19 @@ def __init__(self, settings, blkindex, blkmap):\n \t\t\tself.setFileTime = True\n \t\tif settings['split_timestamp'] != 0:\n \t\t\tself.timestampSplit = True\n-\t\t# Extents and cache for out-of-order blocks\n+        # Extents and cache for out-of-order blocks\n \t\tself.blockExtents = {}\n \t\tself.outOfOrderData = {}\n \t\tself.outOfOrderSize = 0 # running total size for items in outOfOrderData\n \n \tdef writeBlock(self, inhdr, blk_hdr, rawblock):\n-\t\tblockSizeOnDisk = len(inhdr) + len(blk_hdr) + len(rawblock)\n-\t\tif not self.fileOutput and ((self.outsz + blockSizeOnDisk) > self.maxOutSz):\n+\t\tif not self.fileOutput and ((self.outsz + self.inLen) > self.maxOutSz):\n \t\t\tself.outF.close()\n \t\t\tif self.setFileTime:\n \t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n \t\t\tself.outF = None\n \t\t\tself.outFname = None\n-\t\t\tself.outFn = self.outFn + 1\n+\t\t\tself.outFn = outFn + 1\n \t\t\tself.outsz = 0\n \n \t\t(blkDate, blkTS) = get_blk_dt(blk_hdr)\n@@ -149,7 +147,7 @@ def writeBlock(self, inhdr, blk_hdr, rawblock):\n \t\t\tif self.fileOutput:\n \t\t\t\toutFname = self.settings['output_file']\n \t\t\telse:\n-\t\t\t\toutFname = os.path.join(self.settings['output'], \"blk%05d.dat\" % self.outFn)\n+\t\t\t\toutFname = \"%s/blk%05d.dat\" % (self.settings['output'], outFn)\n \t\t\tprint(\"Output file \" + outFname)\n \t\t\tself.outF = open(outFname, \"wb\")\n \n@@ -167,7 +165,7 @@ def writeBlock(self, inhdr, blk_hdr, rawblock):\n \t\t\t\t\t(self.blkCountIn, self.blkCountOut, len(self.blkindex), 100.0 * self.blkCountOut / len(self.blkindex)))\n \n \tdef inFileName(self, fn):\n-\t\treturn os.path.join(self.settings['input'], \"blk%05d.dat\" % fn)\n+\t\treturn \"%s/blk%05d.dat\" % (self.settings['input'], fn)\n \n \tdef fetchBlock(self, extent):\n \t\t'''Fetch block contents from disk given extents'''"
      },
      {
        "sha": "169f6904385e2b0772b7921cda4f435e2774b9bc",
        "filename": "contrib/macdeploy/detached-sig-apply.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/macdeploy/detached-sig-apply.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/macdeploy/detached-sig-apply.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-apply.sh?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -20,7 +20,7 @@ fi\n \n rm -rf ${TEMPDIR} && mkdir -p ${TEMPDIR}\n tar -C ${TEMPDIR} -xf ${UNSIGNED}\n-cp -rf \"${SIGNATURE}\"/* ${TEMPDIR}\n+tar -C ${TEMPDIR} -xf ${SIGNATURE}\n \n if [ -z \"${PAGESTUFF}\" ]; then\n   PAGESTUFF=${TEMPDIR}/pagestuff"
      },
      {
        "sha": "18f8661cea33e80dede43b9d763b131c51a90b96",
        "filename": "contrib/macdeploy/detached-sig-create.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/macdeploy/detached-sig-create.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/macdeploy/detached-sig-create.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-create.sh?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -7,7 +7,6 @@ CODESIGN=codesign\n TEMPDIR=sign.temp\n TEMPLIST=${TEMPDIR}/signatures.txt\n OUT=signature.tar.gz\n-OUTROOT=osx\n \n if [ ! -n \"$1\" ]; then\n   echo \"usage: $0 <codesign args>\"\n@@ -24,7 +23,7 @@ grep -v CodeResources < \"${TEMPLIST}\" | while read i; do\n   TARGETFILE=\"${BUNDLE}/`echo \"${i}\" | sed \"s|.*${BUNDLE}/||\"`\"\n   SIZE=`pagestuff \"$i\" -p | tail -2 | grep size | sed 's/[^0-9]*//g'`\n   OFFSET=`pagestuff \"$i\" -p | tail -2 | grep offset | sed 's/[^0-9]*//g'`\n-  SIGNFILE=\"${TEMPDIR}/${OUTROOT}/${TARGETFILE}.sign\"\n+  SIGNFILE=\"${TEMPDIR}/${TARGETFILE}.sign\"\n   DIRNAME=\"`dirname \"${SIGNFILE}\"`\"\n   mkdir -p \"${DIRNAME}\"\n   echo \"Adding detached signature for: ${TARGETFILE}. Size: ${SIZE}. Offset: ${OFFSET}\"\n@@ -33,7 +32,7 @@ done\n \n grep CodeResources < \"${TEMPLIST}\" | while read i; do\n   TARGETFILE=\"${BUNDLE}/`echo \"${i}\" | sed \"s|.*${BUNDLE}/||\"`\"\n-  RESOURCE=\"${TEMPDIR}/${OUTROOT}/${TARGETFILE}\"\n+  RESOURCE=\"${TEMPDIR}/${TARGETFILE}\"\n   DIRNAME=\"`dirname \"${RESOURCE}\"`\"\n   mkdir -p \"${DIRNAME}\"\n   echo \"Adding resource for: \"${TARGETFILE}\"\""
      },
      {
        "sha": "bc88201f0faec76552908fbe26b61f2de80aa8e2",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -1,7 +1,7 @@\n ### Seeds ###\n \n Utility to generate the seeds.txt list that is compiled into the client\n-(see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and other utilities in [contrib/seeds](/contrib/seeds)).\n+(see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and [share/seeds](/share/seeds)).\n \n The 512 seeds compiled into the 0.10 release were created from sipa's DNS seed data, like this:\n "
      },
      {
        "sha": "b831395f2c717d0ec8245a6dae1268f16c31372b",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 16,
        "deletions": 67,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -22,50 +22,26 @@\n import re\n import sys\n import dns.resolver\n-import collections\n \n-PATTERN_IPV4 = re.compile(r\"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):(\\d+)$\")\n-PATTERN_IPV6 = re.compile(r\"^\\[([0-9a-z:]+)\\]:(\\d+)$\")\n-PATTERN_ONION = re.compile(r\"^([abcdefghijklmnopqrstuvwxyz234567]{16}\\.onion):(\\d+)$\")\n-PATTERN_AGENT = re.compile(r\"^(\\/Satoshi:0\\.8\\.6\\/|\\/Satoshi:0\\.9\\.(2|3|4|5)\\/|\\/Satoshi:0\\.10\\.\\d{1,2}\\/|\\/Satoshi:0\\.11\\.\\d{1,2}\\/)$\")\n+PATTERN_IPV4 = re.compile(r\"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):8333$\")\n+PATTERN_AGENT = re.compile(r\"^(\\/Satoshi:0.8.6\\/|\\/Satoshi:0.9.(2|3)\\/|\\/Satoshi:0.10.\\d{1,2}\\/)$\")\n \n def parseline(line):\n     sline = line.split()\n     if len(sline) < 11:\n        return None\n+    # Match only IPv4\n     m = PATTERN_IPV4.match(sline[0])\n-    sortkey = None\n-    ip = None\n     if m is None:\n-        m = PATTERN_IPV6.match(sline[0])\n-        if m is None:\n-            m = PATTERN_ONION.match(sline[0])\n-            if m is None:\n-                return None\n-            else:\n-                net = 'onion'\n-                ipstr = sortkey = m.group(1)\n-                port = int(m.group(2))\n-        else:\n-            net = 'ipv6'\n-            if m.group(1) in ['::']: # Not interested in localhost\n-                return None\n-            ipstr = m.group(1)\n-            sortkey = ipstr # XXX parse IPv6 into number, could use name_to_ipv6 from generate-seeds\n-            port = int(m.group(2))\n-    else:\n-        # Do IPv4 sanity check\n-        ip = 0\n-        for i in range(0,4):\n-            if int(m.group(i+2)) < 0 or int(m.group(i+2)) > 255:\n-                return None\n-            ip = ip + (int(m.group(i+2)) << (8*(3-i)))\n-        if ip == 0:\n+        return None\n+    # Do IPv4 sanity check\n+    ip = 0\n+    for i in range(0,4):\n+        if int(m.group(i+2)) < 0 or int(m.group(i+2)) > 255:\n             return None\n-        net = 'ipv4'\n-        sortkey = ip\n-        ipstr = m.group(1)\n-        port = int(m.group(6))\n+        ip = ip + (int(m.group(i+2)) << (8*(3-i)))\n+    if ip == 0:\n+        return None\n     # Skip bad results.\n     if sline[1] == 0:\n         return None\n@@ -83,37 +59,21 @@ def parseline(line):\n     blocks = int(sline[8])\n     # Construct result.\n     return {\n-        'net': net,\n-        'ip': ipstr,\n-        'port': port,\n+        'ip': m.group(1),\n         'ipnum': ip,\n         'uptime': uptime30,\n         'lastsuccess': lastsuccess,\n         'version': version,\n         'agent': agent,\n         'service': service,\n         'blocks': blocks,\n-        'sortkey': sortkey,\n     }\n \n-def filtermultiport(ips):\n-    '''Filter out hosts with more nodes per IP'''\n-    hist = collections.defaultdict(list)\n-    for ip in ips:\n-        hist[ip['sortkey']].append(ip)\n-    return [value[0] for (key,value) in hist.items() if len(value)==1]\n-\n # Based on Greg Maxwell's seed_filter.py\n def filterbyasn(ips, max_per_asn, max_total):\n-    # Sift out ips by type\n-    ips_ipv4 = [ip for ip in ips if ip['net'] == 'ipv4']\n-    ips_ipv6 = [ip for ip in ips if ip['net'] == 'ipv6']\n-    ips_onion = [ip for ip in ips if ip['net'] == 'onion']\n-\n-    # Filter IPv4 by ASN\n     result = []\n     asn_count = {}\n-    for ip in ips_ipv4:\n+    for ip in ips:\n         if len(result) == max_total:\n             break\n         try:\n@@ -126,19 +86,13 @@ def filterbyasn(ips, max_per_asn, max_total):\n             result.append(ip)\n         except:\n             sys.stderr.write('ERR: Could not resolve ASN for \"' + ip['ip'] + '\"\\n')\n-\n-    # TODO: filter IPv6 by ASN\n-\n-    # Add back non-IPv4\n-    result.extend(ips_ipv6)\n-    result.extend(ips_onion)\n     return result\n \n def main():\n     lines = sys.stdin.readlines()\n     ips = [parseline(line) for line in lines]\n \n-    # Skip entries with valid address.\n+    # Skip entries with valid IPv4 address.\n     ips = [ip for ip in ips if ip is not None]\n     # Skip entries from suspicious hosts.\n     ips = [ip for ip in ips if ip['ip'] not in SUSPICIOUS_HOSTS]\n@@ -152,18 +106,13 @@ def main():\n     ips = [ip for ip in ips if PATTERN_AGENT.match(ip['agent'])]\n     # Sort by availability (and use last success as tie breaker)\n     ips.sort(key=lambda x: (x['uptime'], x['lastsuccess'], x['ip']), reverse=True)\n-    # Filter out hosts with multiple bitcoin ports, these are likely abusive\n-    ips = filtermultiport(ips)\n     # Look up ASNs and limit results, both per ASN and globally.\n     ips = filterbyasn(ips, MAX_SEEDS_PER_ASN, NSEEDS)\n     # Sort the results by IP address (for deterministic output).\n-    ips.sort(key=lambda x: (x['net'], x['sortkey']))\n+    ips.sort(key=lambda x: (x['ipnum']))\n \n     for ip in ips:\n-        if ip['net'] == 'ipv6':\n-            print '[%s]:%i' % (ip['ip'], ip['port'])\n-        else:\n-            print '%s:%i' % (ip['ip'], ip['port'])\n+        print ip['ip']\n \n if __name__ == '__main__':\n     main()"
      },
      {
        "sha": "17339d514af892b878f449e84032ebde5151e31f",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 879,
        "changes": 879,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,879 +0,0 @@\n-1.34.168.128:8333\n-1.202.128.218:8333\n-2.30.0.210:8333\n-5.9.96.203:8333\n-5.45.71.130:8333\n-5.45.98.141:8333\n-5.102.145.68:8333\n-5.135.160.77:8333\n-5.189.134.246:8333\n-5.199.164.132:8333\n-5.249.135.102:8333\n-8.19.44.110:8333\n-8.22.230.8:8333\n-14.200.200.145:8333\n-18.228.0.188:8333\n-18.228.0.200:8333\n-23.24.168.97:8333\n-23.28.35.227:8333\n-23.92.76.170:8333\n-23.99.64.119:8333\n-23.228.166.128:8333\n-23.229.45.32:8333\n-24.8.105.128:8333\n-24.16.69.137:8333\n-24.94.98.96:8333\n-24.102.118.7:8333\n-24.118.166.228:8333\n-24.122.133.49:8333\n-24.166.97.162:8333\n-24.213.235.242:8333\n-24.226.107.64:8333\n-24.228.192.171:8333\n-27.140.133.18:8333\n-31.41.40.25:8333\n-31.43.101.59:8333\n-31.184.195.181:8333\n-31.193.139.66:8333\n-37.200.70.102:8333\n-37.205.10.151:8333\n-42.3.106.227:8333\n-42.60.133.106:8333\n-45.56.85.231:8333\n-45.56.102.228:8333\n-45.79.130.235:8333\n-46.28.204.61:11101\n-46.38.235.229:8333\n-46.59.2.74:8333\n-46.101.132.37:8333\n-46.101.168.50:8333\n-46.163.76.230:8333\n-46.166.161.103:8333\n-46.182.132.100:8333\n-46.223.36.94:8333\n-46.227.66.132:8333\n-46.227.66.138:8333\n-46.239.107.74:8333\n-46.249.39.100:8333\n-46.250.98.108:8333\n-50.7.37.114:8333\n-50.81.53.151:8333\n-50.115.43.253:8333\n-50.116.20.87:8333\n-50.116.33.92:8333\n-50.125.167.245:8333\n-50.143.9.51:8333\n-50.188.192.133:8333\n-54.77.162.76:8333\n-54.153.97.109:8333\n-54.165.192.125:8333\n-58.96.105.85:8333\n-59.167.196.135:8333\n-60.29.227.163:8333\n-61.35.225.19:8333\n-62.43.130.178:8333\n-62.109.49.26:8333\n-62.202.0.97:8333\n-62.210.66.227:8333\n-62.210.192.169:8333\n-64.74.98.205:8333\n-64.156.193.100:8333\n-64.203.102.86:8333\n-64.229.142.48:8333\n-65.96.193.165:8333\n-66.30.3.7:8333\n-66.114.33.49:8333\n-66.118.133.194:8333\n-66.135.10.126:8333\n-66.172.10.4:8333\n-66.194.38.250:8333\n-66.194.38.253:8333\n-66.215.192.104:8333\n-67.60.98.115:8333\n-67.164.35.36:8333\n-67.191.162.244:8333\n-67.207.195.77:8333\n-67.219.233.140:8333\n-67.221.193.55:8333\n-67.228.162.228:8333\n-68.50.67.199:8333\n-68.62.3.203:8333\n-68.65.205.226:9000\n-68.106.42.191:8333\n-68.150.181.198:8333\n-68.196.196.106:8333\n-68.224.194.81:8333\n-69.46.5.194:8333\n-69.50.171.238:8333\n-69.64.43.152:8333\n-69.65.41.13:8333\n-69.90.132.200:8333\n-69.143.1.243:8333\n-69.146.98.216:8333\n-69.165.246.38:8333\n-69.207.6.135:8333\n-69.251.208.26:8333\n-70.38.1.101:8333\n-70.38.9.66:8333\n-70.90.2.18:8333\n-71.58.228.226:8333\n-71.199.11.189:8333\n-71.199.193.202:8333\n-71.205.232.181:8333\n-71.236.200.162:8333\n-72.24.73.186:8333\n-72.52.130.110:8333\n-72.53.111.37:8333\n-72.235.38.70:8333\n-73.31.171.149:8333\n-73.32.137.72:8333\n-73.137.133.238:8333\n-73.181.192.103:8333\n-73.190.2.60:8333\n-73.195.192.137:8333\n-73.222.35.117:8333\n-74.57.199.180:8333\n-74.82.233.205:8333\n-74.85.66.82:8333\n-74.101.224.127:8333\n-74.113.69.16:8333\n-74.122.235.68:8333\n-74.193.68.141:8333\n-74.208.164.219:8333\n-75.100.37.122:8333\n-75.145.149.169:8333\n-75.168.34.20:8333\n-76.20.44.240:8333\n-76.100.70.17:8333\n-76.168.3.239:8333\n-76.186.140.103:8333\n-77.92.68.221:8333\n-77.109.101.142:8333\n-77.110.11.86:8333\n-77.242.108.18:8333\n-78.46.96.150:9020\n-78.84.100.95:8333\n-79.132.230.144:8333\n-79.133.43.63:8333\n-79.160.76.153:8333\n-79.169.34.24:8333\n-79.188.7.78:8333\n-80.217.226.25:8333\n-80.223.100.179:8333\n-80.240.129.221:8333\n-81.1.173.243:8333\n-81.7.11.50:8333\n-81.7.16.17:8333\n-81.66.111.3:8333\n-81.80.9.71:8333\n-81.140.43.138:8333\n-81.171.34.37:8333\n-81.174.247.50:8333\n-81.181.155.53:8333\n-81.184.5.253:8333\n-81.187.69.130:8333\n-81.230.3.84:8333\n-82.42.128.51:8333\n-82.74.226.21:8333\n-82.142.75.50:8333\n-82.199.102.10:8333\n-82.200.205.30:8333\n-82.221.108.21:8333\n-82.221.128.35:8333\n-82.238.124.41:8333\n-82.242.0.245:8333\n-83.76.123.110:8333\n-83.150.9.196:8333\n-83.162.196.192:8333\n-83.162.234.224:8333\n-83.170.104.91:8333\n-83.255.66.118:8334\n-84.2.34.104:8333\n-84.45.98.91:8333\n-84.47.161.150:8333\n-84.212.192.131:8333\n-84.215.169.101:8333\n-84.238.140.176:8333\n-84.245.71.31:8333\n-85.17.4.212:8333\n-85.114.128.134:8333\n-85.159.237.191:8333\n-85.166.130.189:8333\n-85.199.4.228:8333\n-85.214.66.168:8333\n-85.214.195.210:8333\n-85.229.0.73:8333\n-86.21.96.45:8333\n-87.48.42.199:8333\n-87.81.143.82:8333\n-87.81.251.72:8333\n-87.104.24.185:8333\n-87.104.168.104:8333\n-87.117.234.71:8333\n-87.118.96.197:8333\n-87.145.12.57:8333\n-87.159.170.190:8333\n-88.150.168.160:8333\n-88.208.0.79:8333\n-88.208.0.149:8333\n-88.214.194.226:8343\n-89.1.11.32:8333\n-89.36.235.108:8333\n-89.67.96.2:15321\n-89.98.16.41:8333\n-89.108.72.195:8333\n-89.156.35.157:8333\n-89.163.227.28:8333\n-89.212.33.237:8333\n-89.212.160.165:8333\n-89.231.96.83:8333\n-89.248.164.64:8333\n-90.149.193.199:8333\n-91.77.239.245:8333\n-91.106.194.97:8333\n-91.126.77.77:8333\n-91.134.38.195:8333\n-91.156.97.181:8333\n-91.207.68.144:8333\n-91.209.77.101:8333\n-91.214.200.205:8333\n-91.220.131.242:8333\n-91.220.163.18:8333\n-91.233.23.35:8333\n-92.13.96.93:8333\n-92.14.74.114:8333\n-92.27.7.209:8333\n-92.221.228.13:8333\n-92.255.207.73:8333\n-93.72.167.148:8333\n-93.74.163.234:8333\n-93.123.174.66:8333\n-93.152.166.29:8333\n-93.181.45.188:8333\n-94.19.12.244:8333\n-94.190.227.112:8333\n-94.198.135.29:8333\n-94.224.162.65:8333\n-94.226.107.86:8333\n-94.242.198.161:8333\n-95.31.10.209:8333\n-95.65.72.244:8333\n-95.84.162.95:8333\n-95.90.139.46:8333\n-95.183.49.27:8005\n-95.215.47.133:8333\n-96.23.67.85:8333\n-96.44.166.190:8333\n-97.93.225.74:8333\n-98.26.0.34:8333\n-98.27.225.102:8333\n-98.229.117.229:8333\n-98.249.68.125:8333\n-98.255.5.155:8333\n-99.101.240.114:8333\n-101.100.174.138:8333\n-101.251.203.6:8333\n-103.3.60.61:8333\n-103.30.42.189:8333\n-103.224.165.48:8333\n-104.36.83.233:8333\n-104.37.129.22:8333\n-104.54.192.251:8333\n-104.128.228.252:8333\n-104.128.230.185:8334\n-104.130.161.47:8333\n-104.131.33.60:8333\n-104.143.0.156:8333\n-104.156.111.72:8333\n-104.167.111.84:8333\n-104.193.40.248:8333\n-104.197.7.174:8333\n-104.197.8.250:8333\n-104.223.1.133:8333\n-104.236.97.140:8333\n-104.238.128.214:8333\n-104.238.130.182:8333\n-106.38.234.84:8333\n-106.185.36.204:8333\n-107.6.4.145:8333\n-107.150.2.6:8333\n-107.150.40.234:8333\n-107.155.108.130:8333\n-107.161.182.115:8333\n-107.170.66.231:8333\n-107.190.128.226:8333\n-107.191.106.115:8333\n-108.16.2.61:8333\n-109.70.4.168:8333\n-109.162.35.196:8333\n-109.163.235.239:8333\n-109.190.196.220:8333\n-109.191.39.60:8333\n-109.234.106.191:8333\n-109.238.81.82:8333\n-114.76.147.27:8333\n-115.28.224.127:8333\n-115.68.110.82:18333\n-118.97.79.218:8333\n-118.189.207.197:8333\n-119.228.96.233:8333\n-120.147.178.81:8333\n-121.41.123.5:8333\n-121.67.5.230:8333\n-122.107.143.110:8333\n-123.2.170.98:8333\n-123.110.65.94:8333\n-123.193.139.19:8333\n-125.239.160.41:8333\n-128.101.162.193:8333\n-128.111.73.10:8333\n-128.140.229.73:8333\n-128.175.195.31:8333\n-128.199.107.63:8333\n-128.199.192.153:8333\n-128.253.3.193:20020\n-129.123.7.7:8333\n-130.89.160.234:8333\n-131.72.139.164:8333\n-131.191.112.98:8333\n-133.1.134.162:8333\n-134.19.132.53:8333\n-137.226.34.42:8333\n-141.41.2.172:8333\n-141.255.128.204:8333\n-142.217.12.106:8333\n-143.215.129.126:8333\n-146.0.32.101:8337\n-147.229.13.199:8333\n-149.210.133.244:8333\n-149.210.162.187:8333\n-150.101.163.241:8333\n-151.236.11.189:8333\n-153.121.66.211:8333\n-154.20.2.139:8333\n-159.253.23.132:8333\n-162.209.106.123:8333\n-162.210.198.184:8333\n-162.218.65.121:8333\n-162.222.161.49:8333\n-162.243.132.6:8333\n-162.243.132.58:8333\n-162.248.99.164:53011\n-162.248.102.117:8333\n-163.158.35.110:8333\n-164.15.10.189:8333\n-164.40.134.171:8333\n-166.230.71.67:8333\n-167.160.161.199:8333\n-168.103.195.250:8333\n-168.144.27.112:8333\n-168.158.129.29:8333\n-170.75.162.86:8333\n-172.90.99.174:8333\n-172.245.5.156:8333\n-173.23.166.47:8333\n-173.32.11.194:8333\n-173.34.203.76:8333\n-173.171.1.52:8333\n-173.175.136.13:8333\n-173.230.228.139:8333\n-173.247.193.70:8333\n-174.49.132.28:8333\n-174.52.202.72:8333\n-174.53.76.87:8333\n-174.109.33.28:8333\n-176.28.12.169:8333\n-176.35.182.214:8333\n-176.36.33.113:8333\n-176.36.33.121:8333\n-176.58.96.173:8333\n-176.121.76.84:8333\n-178.62.70.16:8333\n-178.62.111.26:8333\n-178.76.169.59:8333\n-178.79.131.32:8333\n-178.162.199.216:8333\n-178.175.134.35:8333\n-178.248.111.4:8333\n-178.254.1.170:8333\n-178.254.34.161:8333\n-179.43.143.120:8333\n-179.208.156.198:8333\n-180.200.128.58:8333\n-183.78.169.108:8333\n-183.96.96.152:8333\n-184.68.2.46:8333\n-184.73.160.160:8333\n-184.94.227.58:8333\n-184.152.68.163:8333\n-185.7.35.114:8333\n-185.28.76.179:8333\n-185.31.160.202:8333\n-185.45.192.129:8333\n-185.66.140.15:8333\n-186.2.167.23:8333\n-186.220.101.142:8333\n-188.26.5.33:8333\n-188.75.136.146:8333\n-188.120.194.140:8333\n-188.121.5.150:8333\n-188.138.0.114:8333\n-188.138.33.239:8333\n-188.166.0.82:8333\n-188.182.108.129:8333\n-188.191.97.208:8333\n-188.226.198.102:8001\n-190.10.9.217:8333\n-190.75.143.144:8333\n-190.139.102.146:8333\n-191.237.64.28:8333\n-192.3.131.61:8333\n-192.99.225.3:8333\n-192.110.160.122:8333\n-192.146.137.1:8333\n-192.183.198.204:8333\n-192.203.228.71:8333\n-193.0.109.3:8333\n-193.12.238.204:8333\n-193.91.200.85:8333\n-193.234.225.156:8333\n-194.6.233.38:8333\n-194.63.143.136:8333\n-194.126.100.246:8333\n-195.134.99.195:8333\n-195.159.111.98:8333\n-195.159.226.139:8333\n-195.197.175.190:8333\n-198.48.199.108:8333\n-198.57.208.134:8333\n-198.57.210.27:8333\n-198.62.109.223:8333\n-198.167.140.8:8333\n-198.167.140.18:8333\n-199.91.173.234:8333\n-199.127.226.245:8333\n-199.180.134.116:8333\n-200.7.96.99:8333\n-201.160.106.86:8333\n-202.55.87.45:8333\n-202.60.68.242:8333\n-202.60.69.232:8333\n-202.124.109.103:8333\n-203.30.197.77:8333\n-203.88.160.43:8333\n-203.151.140.14:8333\n-203.219.14.204:8333\n-205.147.40.62:8333\n-207.235.39.214:8333\n-207.244.73.8:8333\n-208.12.64.225:8333\n-208.76.200.200:8333\n-209.40.96.121:8333\n-209.126.107.176:8333\n-209.141.40.149:8333\n-209.190.75.59:8333\n-209.208.111.142:8333\n-210.54.34.164:8333\n-211.72.66.229:8333\n-212.51.144.42:8333\n-212.112.33.157:8333\n-212.116.72.63:8333\n-212.126.14.122:8333\n-213.66.205.194:8333\n-213.111.196.21:8333\n-213.122.107.102:8333\n-213.136.75.175:8333\n-213.155.7.24:8333\n-213.163.64.31:8333\n-213.163.64.208:8333\n-213.165.86.136:8333\n-213.184.8.22:8333\n-216.15.78.182:8333\n-216.55.143.154:8333\n-216.115.235.32:8333\n-216.126.226.166:8333\n-216.145.67.87:8333\n-216.169.141.169:8333\n-216.249.92.230:8333\n-216.250.138.230:8333\n-217.20.171.43:8333\n-217.23.2.71:8333\n-217.23.2.242:8333\n-217.25.9.76:8333\n-217.40.226.169:8333\n-217.123.98.9:8333\n-217.155.36.62:8333\n-217.172.32.18:20993\n-218.61.196.202:8333\n-218.231.205.41:8333\n-220.233.77.200:8333\n-223.18.226.85:8333\n-223.197.203.82:8333\n-223.255.166.142:8333\n-[2001:1291:2bf:1::100]:8333\n-[2001:1418:100:5c2::2]:8333\n-[2001:16d8:dd24:0:86c9:681e:f931:256]:8333\n-[2001:19f0:1624:e6::579d:9428]:8333\n-[2001:19f0:300:1340:225:90ff:fec9:2b6d]:8333\n-[2001:19f0:4009:1405::64]:8333\n-[2001:1b40:5000:2e::3fb0:6571]:8333\n-[2001:410:a000:4050:8463:90b0:fffb:4e58]:8333\n-[2001:410:a002:cafe:8463:90b0:fffb:4e58]:8333\n-[2001:41d0:1:541e::1]:8333\n-[2001:41d0:1:6a34::3]:8333\n-[2001:41d0:1:6cd3::]:8333\n-[2001:41d0:1:8b26::1]:8333\n-[2001:41d0:1:a33d::1]:8333\n-[2001:41d0:1:b855::1]:8333\n-[2001:41d0:1:c139::1]:8333\n-[2001:41d0:1:c8d7::1]:8333\n-[2001:41d0:1:dd3f::1]:8333\n-[2001:41d0:1:e29d::1]:8333\n-[2001:41d0:1:f59f::33]:8333\n-[2001:41d0:1:f7cc::1]:8333\n-[2001:41d0:1:ff87::1]:8333\n-[2001:41d0:2:2f05::1]:8333\n-[2001:41d0:2:37c3::]:8200\n-[2001:41d0:2:3e13::1]:8333\n-[2001:41d0:2:8619::]:8333\n-[2001:41d0:2:9c94::1]:8333\n-[2001:41d0:2:a24f::]:8333\n-[2001:41d0:2:adbf::]:8333\n-[2001:41d0:2:b721::1]:8333\n-[2001:41d0:2:ee52::1]:8333\n-[2001:41d0:2:f1a5::]:8333\n-[2001:41d0:2:fa54::1]:8333\n-[2001:41d0:51:1::2036]:8333\n-[2001:41d0:52:a00::1a1]:8333\n-[2001:41d0:52:cff::6f5]:8333\n-[2001:41d0:52:d00::2c0]:8333\n-[2001:41d0:52:d00::cf2]:8333\n-[2001:41d0:8:1087::1]:8333\n-[2001:41d0:8:4a3c::b7c]:8333\n-[2001:41d0:8:6728::]:8333\n-[2001:41d0:8:b779::1]:8333\n-[2001:41d0:8:c30f::1]:8333\n-[2001:41d0:8:d2b2::1]:8333\n-[2001:41d0:8:d5c3::1]:8333\n-[2001:41d0:8:eb8b::]:8333\n-[2001:41d0:a:16d0::1]:8333\n-[2001:41d0:a:2b18::1]:8333\n-[2001:41d0:a:3a9c::1]:8333\n-[2001:41d0:a:4903::]:8333\n-[2001:41d0:a:57b::1]:8333\n-[2001:41d0:a:5c7a::]:8333\n-[2001:41d0:a:6c29::1]:8333\n-[2001:41d0:a:f482::1]:8333\n-[2001:41d0:b:854:b7c:b7c:b7c:b7c]:8333\n-[2001:41d0:d:111c::]:8333\n-[2001:44b8:4116:7801:4216:7eff:fe78:3fe4]:8333\n-[2001:470:1f08:837::2]:8333\n-[2001:470:1f08:c33::2]:8333\n-[2001:470:1f09:bca:218:7dff:fe10:be33]:8333\n-[2001:470:1f0f:22d::212:26]:8333\n-[2001:470:1f11:12d5::ae1:5611]:8333\n-[2001:470:1f14:57a::2]:8333\n-[2001:470:1f14:7d::2]:8333\n-[2001:470:1f15:57c::1]:8333\n-[2001:470:1f15:dda:3d9a:3f11:9a56:ed64]:8333\n-[2001:470:25:482::2]:8333\n-[2001:470:25:e4::2]:8333\n-[2001:470:4:26b::2]:8333\n-[2001:470:5f:5f::232]:8333\n-[2001:470:66:119::2]:8333\n-[2001:470:67:39d::71]:8333\n-[2001:470:6c4f::cafe]:8333\n-[2001:470:8:2e1::43]:8333\n-[2001:470:90a7:96::afe:6021]:8333\n-[2001:470:95c1::2]:8333\n-[2001:470:b1d0:ffff::1000]:8333\n-[2001:470:c1f2:3::201]:8333\n-[2001:470:d00d:0:3664:a9ff:fe9a:5150]:8333\n-[2001:470:e250:0:211:11ff:feb9:924c]:8333\n-[2001:4800:7817:101:be76:4eff:fe04:dc52]:8333\n-[2001:4800:7819:104:be76:4eff:fe04:7809]:8333\n-[2001:4800:7819:104:be76:4eff:fe05:c828]:8333\n-[2001:4802:7800:2:30d7:1775:ff20:1858]:8333\n-[2001:4802:7802:101:be76:4eff:fe20:256]:8333\n-[2001:4802:7802:103:be76:4eff:fe20:2de8]:8333\n-[2001:4830:1100:2e8::2]:8333\n-[2001:4ba0:fff7:181:dead::1]:8333\n-[2001:4ba0:fffa:5d::93]:8333\n-[2001:4ba0:ffff:1be:1:1005:0:1]:8335\n-[2001:4c48:110:101:216:3eff:fe24:1162]:8333\n-[2001:4dd0:f101::32]:8333\n-[2001:4dd0:ff00:867f::3]:8333\n-[2001:4dd0:ff00:9a67::9]:8333\n-[2001:4dd0:ff00:9c55:c23f:d5ff:fe6c:7ee9]:8333\n-[2001:5c0:1400:b::3cc7]:8333\n-[2001:5c0:1400:b::3d01]:8333\n-[2001:5c0:1400:b::8df]:8333\n-[2001:5c0:1501:300::3]:8333\n-[2001:610:1b19::3]:8333\n-[2001:620:500:fff0:f21f:afff:fecf:91cc]:8333\n-[2001:67c:1220:80c:ad:8de2:f7e2:c784]:8333\n-[2001:67c:21ec:1000::b]:8333\n-[2001:6f8:1296:0:76d4:35ff:feba:1d26]:8333\n-[2001:840:f000:4250:3e4a:92ff:fe6d:145f]:8333\n-[2001:8d8:840:500::39:1ae]:8333\n-[2001:980:efd8:0:21:de4a:2709:912]:8333\n-[2001:981:46:1::3]:8333\n-[2001:981:9319:2:c0:a8:c8:8]:8333\n-[2001:9d8:cafe:3::91]:8333\n-[2001:ad0:1:1:26be:5ff:fe25:959d]:8333\n-[2001:ba8:1f1:f34c::2]:8333\n-[2001:bc8:381c:100::1]:8333\n-[2002:175c:4caa::175c:4caa]:8333\n-[2002:4404:82f1:0:8d55:8fbb:15fa:f4e0]:8333\n-[2002:4475:2233:0:21f:5bff:fe33:9f70]:8333\n-[2002:596c:48c3::596c:48c3]:8333\n-[2002:8c6d:6521:9617:12bf:48ff:fed8:1724]:8333\n-[2002:a646:5e6a::1:2]:8333\n-[2002:b009:20c5::b009:20c5]:8333\n-[2400:8900::f03c:91ff:fe6e:823e]:8333\n-[2400:8900::f03c:91ff:fe70:d164]:8333\n-[2400:8901::f03c:91ff:fe37:9761]:8333\n-[2403:4200:403:2::ff]:8333\n-[2403:b800:1000:64:40a:e9ff:fe5f:94c1]:8333\n-[2403:b800:1000:64:9879:17ff:fe6a:a59f]:8333\n-[2600:3c00::f03c:91ff:fe18:59b2]:8333\n-[2600:3c00::f03c:91ff:fe37:a4b1]:8333\n-[2600:3c00::f03c:91ff:fe56:2973]:8333\n-[2600:3c00::f03c:91ff:fe6e:7297]:8333\n-[2600:3c00::f03c:91ff:fe84:8a6e]:8333\n-[2600:3c01::f03c:91ff:fe18:6adf]:8333\n-[2600:3c01::f03c:91ff:fe18:e217]:8333\n-[2600:3c01::f03c:91ff:fe33:1b31]:8333\n-[2600:3c01::f03c:91ff:fe33:2fe1]:8333\n-[2600:3c01::f03c:91ff:fe33:a03f]:8333\n-[2600:3c01::f03c:91ff:fe50:5e06]:8333\n-[2600:3c01::f03c:91ff:fe56:d645]:8333\n-[2600:3c01::f03c:91ff:fe6e:a3dc]:8333\n-[2600:3c01::f03c:91ff:fe89:a659]:8333\n-[2600:3c02::f03c:91ff:fe6e:6f0b]:8333\n-[2600:3c03::f03c:91ff:fe33:f6fb]:8333\n-[2600:3c03::f03c:91ff:fe50:5fa7]:8333\n-[2600:3c03::f03c:91ff:fe6e:1803]:8333\n-[2600:3c03::f03c:91ff:fe6e:4ac0]:8333\n-[2601:6:4800:47f:1e4e:1f4d:332c:3bf6]:8333\n-[2601:d:5400:fed:8d54:c1e8:7ed7:d45e]:8333\n-[2602:100:4b8f:6d2a:20c:29ff:feaf:c4c2]:8333\n-[2602:ffc5:1f::1f:2d61]:8333\n-[2602:ffc5:1f::1f:9211]:8333\n-[2602:ffc5::ffc5:b844]:8333\n-[2602:ffe8:100:2::457:936b]:8333\n-[2602:ffea:1001:125::2ad4]:8333\n-[2602:ffea:1001:6ff::837d]:8333\n-[2602:ffea:1001:72b::578b]:8333\n-[2602:ffea:1001:77a::9cae]:8333\n-[2602:ffea:1:2fe::6bc8]:8333\n-[2602:ffea:1:701::7968]:8333\n-[2602:ffea:1:70d::82ec]:8333\n-[2602:ffea:1:9ff::e957]:8333\n-[2602:ffea:1:a5d::4acb]:8333\n-[2602:ffea:a::24c4:d9fd]:8333\n-[2602:ffea:a::c06:ae32]:8333\n-[2604:0:c1:100:1ec1:deff:fe54:2235]:8333\n-[2604:180:1:1af::42a9]:8333\n-[2604:180::b208:398]:8333\n-[2604:2880::6072:aed]:8333\n-[2604:4080:1114:0:3285:a9ff:fe93:850c]:8333\n-[2604:7c00:17:3d0::5a4d]:8333\n-[2604:9a00:2100:a009:2::]:8333\n-[2604:a880:1:20::22a:4001]:8333\n-[2604:a880:800:10::752:f001]:8333\n-[2604:c00:88:32:216:3eff:fee4:fcca]:8333\n-[2604:c00:88:32:216:3eff:fef5:bc21]:8333\n-[2605:7980:1:2::1761:3d4e]:8333\n-[2605:e000:1417:4068:223:32ff:fe96:e2d]:8333\n-[2606:6000:a441:9903:5054:ff:fe78:66ff]:8333\n-[2606:df00:2::ae85:8fc6]:8333\n-[2607:5300:100:200::e7f]:8333\n-[2607:5300:10::a1]:8333\n-[2607:5300:60:116e::1]:8333\n-[2607:5300:60:1535::]:8333\n-[2607:5300:60:1b32::1]:8333\n-[2607:5300:60:2337::1]:8333\n-[2607:5300:60:2b90::1]:8333\n-[2607:5300:60:2d99::1]:8333\n-[2607:5300:60:3cb::1]:8333\n-[2607:5300:60:4a85::]:8333\n-[2607:5300:60:5112:0:2:4af5:63fe]:8333\n-[2607:5300:60:6dd5::]:8333\n-[2607:5300:60:a91::1]:8333\n-[2607:f1c0:820:1500::7f:3f44]:8333\n-[2607:f1c0:848:1000::48:943c]:8333\n-[2607:f948:0:1::7]:8333\n-[2607:fcd0:100:2300::4ad:e594]:8333\n-[2607:fcd0:100:2300::659e:9cb3]:8333\n-[2607:fcd0:100:2300::c74b:a8ae]:8333\n-[2607:fcd0:100:2300::d82:d8c2]:8333\n-[2607:fcd0:100:4300::8795:2fa8]:8333\n-[2607:fcd0:daaa:901::9561:e043]:8333\n-[2a00:1178:2:43:5054:ff:fee7:2eb6]:8333\n-[2a00:1328:e100:cc42:230:48ff:fe92:55d]:8333\n-[2a00:14f0:e000:80d2:cd1a::1]:8333\n-[2a00:16d8:c::5b6a:c261]:8333\n-[2a00:61e0:4083:6d01:6852:1376:e972:2091]:8333\n-[2a00:c98:2030:a02f:2::2]:8333\n-[2a01:1b0:7999:402::131]:8333\n-[2a01:1e8:e100:811c:700f:65f0:f72a:1084]:8333\n-[2a01:238:42da:c500:6546:1293:5422:ab40]:8333\n-[2a01:348:6:473::2]:8333\n-[2a01:368:e010:2::2]:8333\n-[2a01:430:17:1::ffff:549]:8333\n-[2a01:430:17:1::ffff:830]:8333\n-[2a01:488:66:1000:53a9:d04:0:1]:8333\n-[2a01:488:66:1000:57e6:578c:0:1]:8333\n-[2a01:488:66:1000:b01c:178d:0:1]:8333\n-[2a01:488:67:1000:523:fdce:0:1]:8333\n-[2a01:488:67:1000:b01c:30ab:0:1]:8333\n-[2a01:4f8:100:24aa::2]:8333\n-[2a01:4f8:100:44e7::2]:8333\n-[2a01:4f8:100:5128::2]:8333\n-[2a01:4f8:100:84a7::1:1]:8333\n-[2a01:4f8:110:516c::2]:8333\n-[2a01:4f8:110:536e::2]:8333\n-[2a01:4f8:120:62e6::2]:8333\n-[2a01:4f8:120:702e::2]:8333\n-[2a01:4f8:120:8005::2]:8333\n-[2a01:4f8:120:8203::2]:8333\n-[2a01:4f8:120:8422::2]:8333\n-[2a01:4f8:121:11eb::2]:8333\n-[2a01:4f8:121:261::2]:8333\n-[2a01:4f8:130:242b::10]:8333\n-[2a01:4f8:130:242b::5]:8333\n-[2a01:4f8:130:2468::3]:8333\n-[2a01:4f8:130:632c::2]:8333\n-[2a01:4f8:130:6366::2]:8333\n-[2a01:4f8:130:6426::2]:8333\n-[2a01:4f8:130:934f::2]:8333\n-[2a01:4f8:131:2070::2]:8333\n-[2a01:4f8:131:54a2::2]:8333\n-[2a01:4f8:140:80ad::2]:8333\n-[2a01:4f8:141:186::2]:8333\n-[2a01:4f8:150:210b::2]:8333\n-[2a01:4f8:150:2263::5]:8333\n-[2a01:4f8:150:2349::2]:8333\n-[2a01:4f8:150:61ee::2]:8333\n-[2a01:4f8:150:7088:5054:ff:fe45:bff2]:8333\n-[2a01:4f8:150:8324::2]:9001\n-[2a01:4f8:151:1d8::2]:8333\n-[2a01:4f8:151:5128::2]:8333\n-[2a01:4f8:151:6347::2]:9001\n-[2a01:4f8:161:526d::2]:8333\n-[2a01:4f8:161:9349::2]:8333\n-[2a01:4f8:162:23c6::2]:8333\n-[2a01:4f8:162:4348::2]:8333\n-[2a01:4f8:162:7345::2]:8333\n-[2a01:4f8:162:7383::2]:8333\n-[2a01:4f8:162:74e3::2]:8333\n-[2a01:4f8:190:6065::2]:8333\n-[2a01:4f8:190:6349::2]:8333\n-[2a01:4f8:190:64c9::2]:8333\n-[2a01:4f8:190:91ce::2]:8333\n-[2a01:4f8:191:2194::83]:8333\n-[2a01:4f8:191:40a1::2]:8333\n-[2a01:4f8:191:4a7::2]:8333\n-[2a01:4f8:191:63b4:5000::1]:8333\n-[2a01:4f8:191:7121::2]:8333\n-[2a01:4f8:191:83a2::2]:8333\n-[2a01:4f8:191:93c4::2]:8333\n-[2a01:4f8:192:60a9:0:1:5:2]:8333\n-[2a01:4f8:192:73b2::2]:8333\n-[2a01:4f8:192:8098::2]:8333\n-[2a01:4f8:192:db::2]:8333\n-[2a01:4f8:200:1012::2]:8333\n-[2a01:4f8:200:22e3::2]:8333\n-[2a01:4f8:200:414e::2]:8333\n-[2a01:4f8:200:63af::222]:8333\n-[2a01:4f8:200:71e3:78b4:f3ff:fead:e8cf]:8333\n-[2a01:4f8:201:5164::2]:8333\n-[2a01:4f8:201:6011::4]:8333\n-[2a01:4f8:201:60d5::2]:8333\n-[2a01:4f8:202:53c3::2]:8333\n-[2a01:4f8:210:24aa::2]:8333\n-[2a01:4f8:210:502f::2]:8333\n-[2a01:4f8:211:14cf::2]:8333\n-[2a01:4f8:211:1a59::2]:8333\n-[2a01:4f8:211:2ac1::2]:8333\n-[2a01:4f8:211:cca::2]:8333\n-[2a01:4f8:a0:22a5::2]:8333\n-[2a01:4f8:a0:5023::2]:8333\n-[2a01:4f8:a0:5243::2]:8333\n-[2a01:4f8:a0:74c8::2]:8333\n-[2a01:4f8:a0:8227::2]:8333\n-[2a01:4f8:a0:822d::2]:8333\n-[2a01:4f8:d13:2183::2]:8333\n-[2a01:608:ffff:a009:8bf5:879d:e51a:f837]:8333\n-[2a01:79d:469e:ed94:c23f:d5ff:fe65:20c5]:8333\n-[2a01:7c8:aab5:3e6:5054:ff:fed7:4e54]:8333\n-[2a01:7e00::f03c:91ff:fe18:301e]:8333\n-[2a01:7e00::f03c:91ff:fe18:7749]:8333\n-[2a01:7e00::f03c:91ff:fe33:2d67]:8333\n-[2a01:7e00::f03c:91ff:fe33:347c]:8333\n-[2a01:7e00::f03c:91ff:fe33:ae50]:8333\n-[2a01:7e00::f03c:91ff:fe56:6b5c]:8333\n-[2a01:7e00::f03c:91ff:fe56:bee6]:8333\n-[2a01:7e00::f03c:91ff:fe69:4895]:8333\n-[2a01:7e00::f03c:91ff:fe69:9912]:8333\n-[2a01:7e00::f03c:91ff:fe6e:26ee]:8333\n-[2a01:7e00::f03c:91ff:fe73:42f1]:8333\n-[2a01:7e00::f03c:91ff:fe84:434f]:8333\n-[2a01:7e00::f03c:91ff:fe84:b36b]:8333\n-[2a01:7e00::f03c:91ff:fe89:1faa]:8333\n-[2a01:7e00::f03c:91ff:fe98:816]:8333\n-[2a01:7e00::f03c:91ff:fedb:352e]:8333\n-[2a01:7e00::f03c:91ff:fedb:4a1d]:8333\n-[2a01:e34:edbb:6750:224:1dff:fe89:3897]:8333\n-[2a01:e35:2f1d:3fb0:7187:c7ba:bcfc:80ce]:8333\n-[2a01:e35:8787:96f0:9032:9297:39ae:496d]:8333\n-[2a01:e35:8a3f:47c0:c617:feff:fe3c:9fbd]:8333\n-[2a01:e35:8b66:6a0:4900:9dfd:d841:d025]:8333\n-[2a02:168:4a01::39]:8333\n-[2a02:168:5404:2:c23f:d5ff:fe6a:512e]:8333\n-[2a02:180:1:1::5b8f:538c]:8333\n-[2a02:2028:1016::2]:8333\n-[2a02:2528:503:2::14]:8333\n-[2a02:2528:503:2::15]:8333\n-[2a02:2528:ff00:81a6:21e:c5ff:fe8d:f9a5]:8333\n-[2a02:2770:5:0:21a:4aff:fee4:c7db]:8333\n-[2a02:2770:8:0:21a:4aff:fe7b:3dcd]:8333\n-[2a02:348:5e:5a29::1]:8333\n-[2a02:7aa0:1619::202f:c06a]:8333\n-[2a02:8109:8e40:35fc:ba27:ebff:feae:cf16]:8333\n-[2a02:af8:6:1500::1:130]:8333\n-[2a02:c200:0:10:1:0:6314:2222]:8333\n-[2a02:c200:0:10:2:3:3295:1]:8332\n-[2a02:c200:0:10:3:0:5449:1]:8333\n-[2a02:c200:1:10:2:3:5899:1]:8333\n-[2a02:c200:1:10::2705:1]:8333\n-[2a02:ce80:0:20::1]:8333\n-[2a02:fe0:c321:27e0:6ef0:49ff:fe11:a61d]:8333\n-[2a03:4000:2:496::8]:8333\n-[2a03:b0c0:0:1010::62:f001]:8333\n-[2a03:f80:ed16:ca7:ea75:b12d:2af:9e2a]:8333\n-3ffk7iumtx3cegbi.onion:8333\n-3hshaantu6ot4upz.onion:8333\n-45c5lc77qgpikafy.onion:8333\n-77mx2jsxaoyesz2p.onion:8333\n-7g7j54btiaxhtsiy.onion:8333\n-b6fr7dlbu2kpiysf.onion:8333\n-bitcoincfqcssig5.onion:8333\n-bitcoinostk4e4re.onion:8333\n-bmutjfrj5btseddb.onion:8333\n-drp4pvejybx2ejdr.onion:8333\n-gixnv56d63buypan.onion:8333\n-h2vlpudzphzqxutd.onion:8333\n-hhiv5pnxenvbf4am.onion:8333\n-lzxpkn6ptp3ohh63.onion:8333\n-msphsgfiqfq5stne.onion:8333\n-ncwk3lutemffcpc4.onion:8333\n-okdzjarwekbshnof.onion:8333\n-sjdomi4yb2dwkjbc.onion:8333\n-uvwozwxlihntigbb.onion:8333\n-v6ylz45dn5ybpk4d.onion:8333\n-vk3qjdehyy4dwcxw.onion:8333\n-vqpye2k5rcqvj5mq.onion:8333\n-xudkoztdfrsuyyou.onion:8333\n-z55v4ostefnwfy32.onion:8333"
      },
      {
        "sha": "98365ee505ced2410cdc7ea841bf52198b405662",
        "filename": "contrib/seeds/nodes_test.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/seeds/nodes_test.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/contrib/seeds/nodes_test.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_test.txt?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,11 +0,0 @@\n-# List of fixed seed nodes for testnet\n-\n-# Onion nodes\n-thfsmmn2jbitcoin.onion\n-it2pj4f7657g3rhi.onion\n-nkf5e6b7pl4jfd4a.onion\n-4zhkir2ofl7orfom.onion\n-t6xj6wilh4ytvcs7.onion\n-i6y6ivorwakd7nw3.onion\n-ubqj4rsu3nqtxmtp.onion\n-"
      },
      {
        "sha": "f50828c546dae7c924629d9dfb859543aa6c3314",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -1,8 +1,9 @@\n package=boost\n-$(package)_version=1_58_0\n-$(package)_download_path=http://sourceforge.net/projects/boost/files/boost/1.58.0\n+$(package)_version=1_55_0\n+$(package)_download_path=http://sourceforge.net/projects/boost/files/boost/1.55.0\n $(package)_file_name=$(package)_$($(package)_version).tar.bz2\n-$(package)_sha256_hash=fdfc204fc33ec79c99b9a74944c3e54bd78be4f7f15e260c0e2700a36dc7d3e5\n+$(package)_sha256_hash=fff00023dd79486d444c8e29922f4072e1d451fc5a4d2b6075852ead7f2b7b52\n+$(package)_patches=darwin_boost_atomic-1.patch darwin_boost_atomic-2.patch\n \n define $(package)_set_vars\n $(package)_config_opts_release=variant=release\n@@ -25,6 +26,8 @@ $(package)_cxxflags_linux=-fPIC\n endef\n \n define $(package)_preprocess_cmds\n+  patch -p2 < $($(package)_patch_dir)/darwin_boost_atomic-1.patch && \\\n+  patch -p2 < $($(package)_patch_dir)/darwin_boost_atomic-2.patch && \\\n   echo \"using $(boost_toolset_$(host_os)) : : $($(package)_cxx) : <cxxflags>\\\"$($(package)_cxxflags) $($(package)_cppflags)\\\" <linkflags>\\\"$($(package)_ldflags)\\\" <archiver>\\\"$(boost_archiver_$(host_os))\\\" <striper>\\\"$(host_STRIP)\\\"  <ranlib>\\\"$(host_RANLIB)\\\" <rc>\\\"$(host_WINDRES)\\\" : ;\" > user-config.jam\n endef\n "
      },
      {
        "sha": "00101f1b91af4ed074dc8dfd9179afeb53689bb1",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -1,8 +1,8 @@\n package=miniupnpc\n-$(package)_version=1.9.20150609\n+$(package)_version=1.9.20140701\n $(package)_download_path=http://miniupnp.free.fr/files\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=86e6ccec5b660ba6889893d1f3fca21db087c6466b1a90f495a1f87ab1cd1c36\n+$(package)_sha256_hash=26f3985bad7768b8483b793448ae49414cdc4451d0ec83e7c1944367e15f9f07\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\""
      },
      {
        "sha": "3226e89a63eae9dd1aefece2db885580f4fa5d56",
        "filename": "depends/packages/native_ccache.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -1,8 +1,8 @@\n package=native_ccache\n-$(package)_version=3.2.2\n+$(package)_version=3.1.9\n $(package)_download_path=http://samba.org/ftp/ccache\n $(package)_file_name=ccache-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=440f5e15141cc72d2bfff467c977020979810eb800882e3437ad1a7153cce7b2\n+$(package)_sha256_hash=04d3e2e438ac8d4cc4b110b68cdd61bd59226c6588739a4a386869467f5ced7c\n \n define $(package)_set_vars\n $(package)_config_opts="
      },
      {
        "sha": "d1b86dc2de594f0e312fe8140da5785869f36a75",
        "filename": "depends/packages/native_comparisontool.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/depends/packages/native_comparisontool.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/depends/packages/native_comparisontool.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_comparisontool.mk?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -1,8 +1,8 @@\n package=native_comparisontool\n-$(package)_version=8c6666f\n-$(package)_download_path=https://github.com/theuni/bitcoind-comparisontool/raw/master\n+$(package)_version=0f7b5d8\n+$(package)_download_path=https://github.com/TheBlueMatt/test-scripts/raw/38b490a2599d422b12d5ce8f165792f63fd8f54f\n $(package)_file_name=pull-tests-$($(package)_version).jar\n-$(package)_sha256_hash=a865332b3827abcde684ab79f5f43c083b0b6a4c97ff5508c79f29fee24f11cd\n+$(package)_sha256_hash=ecd43b988a8b673b483e4f69f931596360a5e90fc415c75c4c259faa690df198\n $(package)_install_dirname=BitcoindComparisonTool_jar\n $(package)_install_filename=BitcoindComparisonTool.jar\n "
      },
      {
        "sha": "ed1a771f0d5eeb755f1fbda066f624e89c2ec3a1",
        "filename": "depends/packages/native_protobuf.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/depends/packages/native_protobuf.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/depends/packages/native_protobuf.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_protobuf.mk?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -1,8 +1,8 @@\n package=native_protobuf\n-$(package)_version=2.6.1\n-$(package)_download_path=https://github.com/google/protobuf/releases/download/v$($(package)_version)\n+$(package)_version=2.5.0\n+$(package)_download_path=https://protobuf.googlecode.com/files\n $(package)_file_name=protobuf-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=ee445612d544d885ae240ffbcbf9267faa9f593b7b101f21d58beceb92661910\n+$(package)_sha256_hash=13bfc5ae543cf3aa180ac2485c0bc89495e3ae711fc6fab4f8ffe90dfb4bb677\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-shared"
      },
      {
        "sha": "1ad329e94d7a171f0b91e7f421691ef1f9f4a337",
        "filename": "depends/packages/qrencode.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/depends/packages/qrencode.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/depends/packages/qrencode.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qrencode.mk?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -1,8 +1,8 @@\n package=qrencode\n-$(package)_version=3.4.4\n+$(package)_version=3.4.3\n $(package)_download_path=https://fukuchi.org/works/qrencode/\n $(package)_file_name=qrencode-$(qrencode_version).tar.bz2\n-$(package)_sha256_hash=efe5188b1ddbcbf98763b819b146be6a90481aac30cfc8d858ab78a19cde1fa5\n+$(package)_sha256_hash=dfd71487513c871bad485806bfd1fdb304dedc84d2b01a8fb8e0940b50597a98\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-shared -without-tools --disable-sdltest"
      },
      {
        "sha": "04514c593a101078af216a67bd905b5c615ded53",
        "filename": "depends/patches/boost/gcc_5_no_cxx11.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 37,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/patches/boost/gcc_5_no_cxx11.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/depends/patches/boost/gcc_5_no_cxx11.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/boost/gcc_5_no_cxx11.patch?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,37 +0,0 @@\n-From eec808554936ae068b23df07ab54d4dc6302a695 Mon Sep 17 00:00:00 2001\n-From: jzmaddock <jzmaddock@gmail.com>\n-Date: Sat, 23 Aug 2014 09:38:02 +0100\n-Subject: [PATCH] Fix BOOST_NO_CXX11_VARIADIC_TEMPLATES definition - the\n- feature was introduced in GCC 4.4.\n-\n----\n- include/boost/config/compiler/gcc.hpp | 9 +--------\n- 1 file changed, 1 insertion(+), 8 deletions(-)\n-\n-diff --git a/include/boost/config/compiler/gcc.hpp b/include/boost/config/compiler/gcc.hpp\n-index f37159d..97d8a18 100644\n---- a/include/boost/config/compiler/gcc.hpp\n-+++ b/include/boost/config/compiler/gcc.hpp\n-@@ -154,14 +154,6 @@\n- #  define BOOST_NO_CXX11_FUNCTION_TEMPLATE_DEFAULT_ARGS\n- #  define BOOST_NO_CXX11_RVALUE_REFERENCES\n- #  define BOOST_NO_CXX11_STATIC_ASSERT\n--\n--// Variadic templates compiler:\n--//   http://www.generic-programming.org/~dgregor/cpp/variadic-templates.html\n--#  if defined(__VARIADIC_TEMPLATES) || (__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4) && defined(__GXX_EXPERIMENTAL_CXX0X__))\n--#    define BOOST_HAS_VARIADIC_TMPL\n--#  else\n--#    define BOOST_NO_CXX11_VARIADIC_TEMPLATES\n--#  endif\n- #endif\n- \n- // C++0x features in 4.4.n and later\n-@@ -176,6 +168,7 @@\n- #  define BOOST_NO_CXX11_DELETED_FUNCTIONS\n- #  define BOOST_NO_CXX11_TRAILING_RESULT_TYPES\n- #  define BOOST_NO_CXX11_INLINE_NAMESPACES\n-+#  define BOOST_NO_CXX11_VARIADIC_TEMPLATES\n- #endif\n- \n- #if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)"
      },
      {
        "sha": "ecddf50d4b5d3fb0e162c096ce19f45e3e6b9e05",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -58,7 +58,6 @@ The Bitcoin repo's [root README](https://github.com/bitcoin/bitcoin/blob/master/\n - [Translation Strings Policy](translation_strings_policy.md)\n - [Unit Tests](unit-tests.md)\n - [Unauthenticated REST Interface](REST-interface.md)\n-- [Shared Libraries](shared-libraries.md)\n - [BIPS](bips.md)\n - [Dnsseed Policy](dnsseed-policy.md)\n "
      },
      {
        "sha": "2219ceb65f52454ebf4696b0921f0c2aeb1a067c",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -9,24 +9,29 @@ Supported API\n ####Transactions\n `GET /rest/tx/<TX-HASH>.<bin|hex|json>`\n \n-Given a transaction hash: returns a transaction in binary, hex-encoded binary, or JSON formats.\n+Given a transaction hash,\n+Returns a transaction, in binary, hex-encoded binary or JSON formats.\n \n For full TX query capability, one must enable the transaction index via \"txindex=1\" command line / configuration option.\n \n ####Blocks\n `GET /rest/block/<BLOCK-HASH>.<bin|hex|json>`\n `GET /rest/block/notxdetails/<BLOCK-HASH>.<bin|hex|json>`\n \n-Given a block hash: returns a block, in binary, hex-encoded binary or JSON formats.\n+Given a block hash,\n+Returns a block, in binary, hex-encoded binary or JSON formats.\n \n The HTTP request and response are both handled entirely in-memory, thus making maximum memory usage at least 2.66MB (1 MB max block, plus hex encoding) per request.\n \n With the /notxdetails/ option JSON response will only contain the transaction hash instead of the complete transaction details. The option only affects the JSON response.\n \n ####Blockheaders\n-`GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`\n+`GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex>`\n \n-Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n+Given a block hash,\n+Returns <COUNT> amount of blockheaders in upward direction.\n+\n+JSON is not supported.\n \n ####Chaininfos\n `GET /rest/chaininfo.json`\n@@ -40,9 +45,6 @@ Only supports JSON as output format.\n * difficulty : (numeric) the current difficulty\n * verificationprogress : (numeric) estimate of verification progress [0..1]\n * chainwork : (string) total amount of work in active chain, in hexadecimal\n-* pruned : (boolean) if the blocks are subject to pruning\n-* pruneheight : (numeric) heighest block available\n-* softforks : (array) status of softforks in progress\n \n ####Query UTXO set\n `GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`\n@@ -79,4 +81,4 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n \n Risks\n -------------\n-Running a web browser on the same node with a REST enabled bitcoind can be a risk. Accessing prepared XSS websites could read out tx/block data of your node by placing links like `<script src=\"http://127.0.0.1:8332/rest/tx/1234567890.json\">` which might break the nodes privacy.\n+Running a webbrowser on the same node with a REST enabled bitcoind can be a risk. Accessing prepared XSS websites could read out tx/block data of your node by placing links like `<script src=\"http://127.0.0.1:8332/rest/tx/1234567890.json\">` which might break the nodes privacy."
      },
      {
        "sha": "ebba64a61a83be22995f6c0bb67a55288f7db6a3",
        "filename": "doc/assets-attribution.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/assets-attribution.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/assets-attribution.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.md?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -6,7 +6,7 @@ The following is a list of assets used in the bitcoin source and their proper at\n ### Info\n * Icon Pack: Typicons (http://typicons.com)\n * Designer: Stephen Hutchings (and more)\n-* License: MIT\n+* License: CC BY-SA\n * Site: [https://github.com/stephenhutchings/typicons.font](https://github.com/stephenhutchings/typicons.font)\n \n ### Assets Used\n@@ -30,7 +30,7 @@ Jonas Schnelli\n ### Info\n * Designer: Jonas Schnelli\n * Bitcoin Icon: (based on the original bitcoin logo from Bitboy)\n-* Some icons are based on Stephan Hutchings Typicons\n+* Some icons are based on Stephan Hutchings Typicons (these are under CC BY-SA license)\n * License: MIT\n \n ### Assets Used"
      },
      {
        "sha": "913e72519fc90e72c1fcc407351ffba2df3d8c4c",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -32,10 +32,33 @@ Instructions: Homebrew\n \n #### Install dependencies using Homebrew\n \n-        brew install autoconf automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf qt5\n+        brew install autoconf automake libtool boost miniupnpc openssl pkg-config protobuf qt5\n \n NOTE: Building with Qt4 is still supported, however, could result in a broken UI. As such, building with Qt5 is recommended.\n \n+#### Installing berkeley-db4 using Homebrew\n+\n+The homebrew package for berkeley-db4 has been broken for some time.  It will install without Java though.\n+\n+Running this command takes you into brew's interactive mode, which allows you to configure, make, and install by hand:\n+```\n+$ brew install https://raw.github.com/homebrew/homebrew/master/Library/Formula/berkeley-db4.rb -\u2013without-java \n+```\n+\n+The rest of these commands are run inside brew interactive mode:\n+```\n+/private/tmp/berkeley-db4-UGpd0O/db-4.8.30 $ cd ..\n+/private/tmp/berkeley-db4-UGpd0O $ db-4.8.30/dist/configure --prefix=/usr/local/Cellar/berkeley-db4/4.8.30 --mandir=/usr/local/Cellar/berkeley-db4/4.8.30/share/man --enable-cxx\n+/private/tmp/berkeley-db4-UGpd0O $ make\n+/private/tmp/berkeley-db4-UGpd0O $ make install\n+/private/tmp/berkeley-db4-UGpd0O $ exit\n+```\n+\n+After exiting, you'll get a warning that the install is keg-only, which means it wasn't symlinked to `/usr/local`.  You don't need it to link it to build bitcoin, but if you want to, here's how:\n+\n+    $ brew link --force berkeley-db4\n+\n+\n ### Building `bitcoind`\n \n 1. Clone the github tree to get the source code and go into the directory."
      },
      {
        "sha": "f70bf7f1febf9deec6e004bc16238d512f8ae87a",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -59,7 +59,7 @@ Build requirements:\n \n \tsudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev\n \t\n-For Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed:\n+for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed:\n \n \tsudo apt-get install libboost-all-dev\n \n@@ -72,7 +72,18 @@ For Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be inst\n  Ubuntu 12.04 and later have packages for libdb5.1-dev and libdb5.1++-dev,\n  but using these will break binary wallet compatibility, and is not recommended.\n \n-For other Debian & Ubuntu (with ppa):\n+for Debian 7 (Wheezy) and later:\n+ The oldstable repository contains db4.8 packages.\n+ Add the following line to /etc/apt/sources.list,\n+ replacing [mirror] with any official debian mirror.\n+\n+\tdeb http://[mirror]/debian/ oldstable main\n+\n+To enable the change run\n+\n+\tsudo apt-get update\n+\n+for other Debian & Ubuntu (with ppa):\n \n \tsudo apt-get install libdb4.8-dev libdb4.8++-dev\n "
      },
      {
        "sha": "506e171153dceb3a197c55445c757f04a9bed856",
        "filename": "doc/dnsseed-policy.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/dnsseed-policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/dnsseed-policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dnsseed-policy.md?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -43,8 +43,7 @@ related to the DNS seed operation.\n \n If these expectations cannot be satisfied the operator should\n discontinue providing services and contact the active Bitcoin\n-Core development team as well as posting on\n-[bitcoin-dev](https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev).\n+Core development team as well as posting on bitcoin-development.\n \n Behavior outside of these expectations may be reasonable in some\n situations but should be discussed in public in advance."
      },
      {
        "sha": "1fa5b5f989ea63ca9f3adee4cc798888142785e2",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -74,7 +74,7 @@ In the VirtualBox GUI click \"Create\" and choose the following parameters in the\n - Disk size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n - Push the `Create` button\n \n-Get the [Debian 7.8 net installer](http://cdimage.debian.org/cdimage/archive/7.8.0/amd64/iso-cd/debian-7.8.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n+Get the [Debian 7.8 net installer](http://cdimage.debian.org/debian-cd/7.8.0/amd64/iso-cd/debian-7.8.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n This DVD image can be validated using a SHA256 hashing tool, for example on\n Unixy OSes by entering the following in a terminal:\n "
      },
      {
        "sha": "6bb8587d78794c763f86b6b3f1624823a7bde153",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -4,21 +4,6 @@ release-notes at release time)\n Notable changes\n ===============\n \n-Random-cookie RPC authentication\n----------------------------------\n-\n-When no `-rpcpassword` is specified, the daemon now uses a special 'cookie'\n-file for authentication. This file is generated with random content when the\n-daemon starts, and deleted when it exits. Its contents are used as\n-authentication token. Read access to this file controls who can access through\n-RPC. By default it is stored in the data directory but its location can be\n-overridden with the option `-rpccookiefile`.\n-\n-This is similar to Tor's CookieAuthentication: see\n-https://www.torproject.org/docs/tor-manual.html.en\n-\n-This allows running bitcoind without having to do any manual configuration.\n-\n Example header\n ----------------------\n "
      },
      {
        "sha": "d3109c6aa2e24f8f68a45eb2757ea818907ababb",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 21,
        "deletions": 26,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -25,7 +25,7 @@ Release Process\n \n ###update gitian\n \n- In order to take advantage of the new caching features in gitian, be sure to update to a recent version (`e9741525c` or later is recommended)\n+ In order to take advantage of the new caching features in gitian, be sure to update to a recent version (e9741525c or higher is recommended)\n \n ###perform gitian builds\n \n@@ -41,8 +41,6 @@ Release Process\n ###fetch and build inputs: (first time, or when dependency versions change)\n  \n \tmkdir -p inputs\n-\twget -P inputs https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n-\twget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n \n  Register and download the Apple SDK: (see OSX Readme for details)\n  \n@@ -66,60 +64,51 @@ Release Process\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n \tmv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n \t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\tmv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n+\t./bin/gsign --signer $SIGNER --release ${VERSION}-win --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n \tmv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n \t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-\tmv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n+\tmv build/out/bitcoin-*-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n \tmv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../\n \tpopd\n   Build output expected:\n \n   1. source tarball (bitcoin-${VERSION}.tar.gz)\n-  2. linux 32-bit and 64-bit dist tarballs (bitcoin-${VERSION}-linux[32|64].tar.gz)\n-  3. windows 32-bit and 64-bit unsigned installers and dist zips (bitcoin-${VERSION}-win[32|64]-setup-unsigned.exe, bitcoin-${VERSION}-win[32|64].zip)\n-  4. OSX unsigned installer and dist tarball (bitcoin-${VERSION}-osx-unsigned.dmg, bitcoin-${VERSION}-osx64.tar.gz)\n-  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your gitian key)/\n+  2. linux 32-bit and 64-bit binaries dist tarballs (bitcoin-${VERSION}-linux[32|64].tar.gz)\n+  3. windows 32-bit and 64-bit installers and dist zips (bitcoin-${VERSION}-win[32|64]-setup.exe, bitcoin-${VERSION}-win[32|64].zip)\n+  4. OSX unsigned installer (bitcoin-${VERSION}-osx-unsigned.dmg)\n+  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|win|osx-unsigned>/(your gitian key)/\n \n ###Next steps:\n \n Commit your signature to gitian.sigs:\n \n \tpushd gitian.sigs\n \tgit add ${VERSION}-linux/${SIGNER}\n-\tgit add ${VERSION}-win-unsigned/${SIGNER}\n+\tgit add ${VERSION}-win/${SIGNER}\n \tgit add ${VERSION}-osx-unsigned/${SIGNER}\n \tgit commit -a\n \tgit push  # Assuming you can push to the gitian.sigs tree\n \tpopd\n \n-  Wait for Windows/OSX detached signatures:\n-\tOnce the Windows/OSX builds each have 3 matching signatures, they will be signed with their respective release keys.\n-\tDetached signatures will then be committed to the bitcoin-detached-sigs repository, which can be combined with the unsigned apps to create signed binaries.\n+  Wait for OSX detached signature:\n+\tOnce the OSX build has 3 matching signatures, Gavin will sign it with the apple App-Store key.\n+\tHe will then upload a detached signature to be combined with the unsigned app to create a signed binary.\n \n   Create the signed OSX binary:\n \n \tpushd ./gitian-builder\n-\t./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+\t# Fetch the signature as instructed by Gavin\n+\tcp signature.tar.gz inputs/\n+\t./bin/gbuild -i ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n \tmv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n \tpopd\n \n-  Create the signed Windows binaries:\n-\n-\tpushd ./gitian-builder\n-\t./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\tmv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-\tmv build/out/bitcoin-*win32-setup.exe ../bitcoin-${VERSION}-win32-setup.exe\n-\tpopd\n-\n-Commit your signature for the signed OSX/Windows binaries:\n+Commit your signature for the signed OSX binary:\n \n \tpushd gitian.sigs\n \tgit add ${VERSION}-osx-signed/${SIGNER}\n-\tgit add ${VERSION}-win-signed/${SIGNER}\n \tgit commit -a\n \tgit push  # Assuming you can push to the gitian.sigs tree\n \tpopd\n@@ -128,6 +117,12 @@ Commit your signature for the signed OSX/Windows binaries:\n \n ### After 3 or more people have gitian-built and their results match:\n \n+- Perform code-signing.\n+\n+    - Code-sign Windows -setup.exe (in a Windows virtual machine using signtool)\n+\n+  Note: only Gavin has the code-signing keys currently.\n+\n - Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n ```bash\n sha256sum * > SHA256SUMS"
      },
      {
        "sha": "1fc32112ceabc6c9fa93a3cd9a363c4b08e69c58",
        "filename": "doc/shared-libraries.md",
        "status": "removed",
        "additions": 0,
        "deletions": 42,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/shared-libraries.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/doc/shared-libraries.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/shared-libraries.md?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,42 +0,0 @@\n-Shared Libraries\n-================\n-\n-## bitcoinconsensus\n-\n-The purpose of this library is to make the verification functionality that is critical to Bitcoin's consensus available to other applications, e.g. to language bindings.\n-\n-### API\n-\n-The interface is defined in the C header `bitcoinconsensus.h` located in  `src/script/bitcoinconsensus.h`.\n-\n-#### Version\n-\n-`bitcoinconsensus_version` returns an `unsigned int` with the the API version *(currently at an experimental `0`)*.\n-\n-#### Script Validation\n-\n-`bitcoinconsensus_verify_script` returns an `int` with the status of the verification. It will be `1` if the input script correctly spends the previous output `scriptPubKey`.\n-\n-##### Parameters\n-- `const unsigned char *scriptPubKey` - The previous output script that encumbers spending.\n-- `unsigned int scriptPubKeyLen` - The number of bytes for the `scriptPubKey`.\n-- `const unsigned char *txTo` - The transaction with the input that is spending the previous output.\n-- `unsigned int txToLen` - The number of bytes for the `txTo`.\n-- `unsigned int nIn` - The index of the input in `txTo` that spends the `scriptPubKey`.\n-- `unsigned int flags` - The script validation flags *(see below)*.\n-- `bitcoinconsensus_error* err` - Will have the error/success code for the operation *(see below)*.\n-\n-##### Script Flags\n-- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE`\n-- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH` - Evaluate P2SH ([BIP16](https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki)) subscripts\n-- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG` - Enforce strict DER ([BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)) compliance\n-\n-##### Errors\n-- `bitcoinconsensus_ERR_OK` - No errors with input parameters *(see the return value of `bitcoinconsensus_verify_script` for the verification status)*\n-- `bitcoinconsensus_ERR_TX_INDEX` - An invalid index for `txTo`\n-- `bitcoinconsensus_ERR_TX_SIZE_MISMATCH` - `txToLen` did not match with the size of `txTo`\n-- `bitcoinconsensus_ERR_DESERIALIZE` - An error deserializing `txTo`\n-\n-### Example Implementations\n-- [NBitcoin](https://github.com/NicolasDorier/NBitcoin/blob/master/NBitcoin/Script.cs#L814) (.NET Bindings)\n-- [node-libbitcoinconsensus](https://github.com/bitpay/node-libbitcoinconsensus) (Node.js Bindings)"
      },
      {
        "sha": "6824b1d8ef4cb4e6557b578fd7a01008e9359042",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 0,
        "deletions": 38,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -64,44 +64,6 @@ Avoid dividing up a message into fragments. Translators see every string separat\n There have been difficulties with use of HTML in translation strings; translators should not be able to accidentally affect the formatting of messages.\n This may sometimes be at conflict with the recommendation in the previous section.\n \n-### Plurals\n-\n-Plurals can be complex in some languages. A quote from the gettext documentation:\n-\n-    In Polish we use e.g. plik (file) this way:\n-    1 plik,\n-    2,3,4 pliki,\n-    5-21 pliko'w,\n-    22-24 pliki,\n-    25-31 pliko'w\n-    and so on\n-\n-In Qt code use tr's third argument for optional plurality. For example:\n-\n-    tr(\"%n hour(s)\",\"\",secs/HOUR_IN_SECONDS);\n-    tr(\"%n day(s)\",\"\",secs/DAY_IN_SECONDS);\n-    tr(\"%n week(s)\",\"\",secs/WEEK_IN_SECONDS);\n-\n-This adds `<numerusform>`s to the respective `.ts` file, which can be translated separately depending on the language. In English, this is simply:\n-\n-    <message numerus=\"yes\">\n-        <source>%n active connection(s) to Bitcoin network</source>\n-        <translation>\n-            <numerusform>%n active connection to Bitcoin network</numerusform>\n-            <numerusform>%n active connections to Bitcoin network</numerusform>\n-        </translation>\n-    </message>\n-\n-Where it is possible try to avoid embedding numbers into the flow of the string at all. e.g.\n-\n-    WARNING: check your network connection, %d blocks received in the last %d hours (%d expected)\n-\n-versus\n-\n-    WARNING: check your network connection, less blocks (%d) were received in the last %n hours than expected (%d).\n-\n-The second example reduces the number of pluralized words that translators have to handle from three to one, at no cost to comprehensibility of the sentence.\n-\n ### String freezes\n \n During a string freeze (often before a major release), no translation strings are to be added, modified or removed."
      },
      {
        "sha": "9b318650e939451b580691bf98cf6ecb0c9cfe72",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -19,8 +19,8 @@ testScripts=(\n     'wallet.py'\n     'listtransactions.py'\n     'mempool_resurrect_test.py'\n+    'txn_doublespend.py'\n     'txn_doublespend.py --mineblock'\n-    'txn_clone.py'\n     'getchaintips.py'\n     'rawtransactions.py'\n     'rest.py'\n@@ -30,30 +30,26 @@ testScripts=(\n     'zapwallettxes.py'\n     'proxy_test.py'\n     'merkle_blocks.py'\n-    'fundrawtransaction.py'\n     'signrawtransactions.py'\n     'walletbackup.py'\n-    'nodehandling.py'\n-    'reindex.py'\n-    'decodescript.py'\n );\n testScriptsExt=(\n     'bipdersig-p2p.py'\n     'bipdersig.py'\n     'getblocktemplate_longpoll.py'\n     'getblocktemplate_proposals.py'\n-    'txn_doublespend.py'\n-    'txn_clone.py --mineblock'\n     'pruning.py'\n     'forknotify.py'\n     'invalidateblock.py'\n     'keypool.py'\n     'receivedby.py'\n+    'reindex.py'\n     'rpcbind_test.py'\n #   'script_test.py'\n     'smartfees.py'\n     'maxblocksinflight.py'\n     'invalidblockrequest.py'\n+    'rawtransactions.py'\n #    'forknotify.py'\n     'p2p-acceptblock.py'\n );"
      },
      {
        "sha": "6221c93d8b93aaf98a59cdce184e34514a34c756",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -12,6 +12,10 @@ Base class for new regression tests.\n ### [test_framework/util.py](test_framework/util.py)\n Generally useful functions.\n \n+Bash-based tests, to be ported to Python:\n+-----------------------------------------\n+- conflictedbalance.sh : More testing of malleable transaction handling\n+\n Notes\n =====\n \n@@ -21,7 +25,7 @@ Run all possible tests with `qa/pull-tester/rpc-tests.sh -extended`.\n \n Possible options:\n \n-```\n+````\n -h, --help       show this help message and exit\n   --nocleanup      Leave bitcoinds and test.* datadir on exit or error\n   --noshutdown     Don't stop bitcoinds after the test execution"
      },
      {
        "sha": "7e4409737437a139b105a0c83e295d1de5a34acb",
        "filename": "qa/rpc-tests/conflictedbalance.sh",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/conflictedbalance.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/conflictedbalance.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/conflictedbalance.sh?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -0,0 +1,147 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# Test marking of spent outputs\n+\n+# Create a transaction graph with four transactions,\n+# A/B/C/D\n+# C spends A\n+# D spends B and C\n+\n+# Then simulate C being mutated, to create C'\n+#  that is mined.\n+# A is still (correctly) considered spent.\n+# B should be treated as unspent\n+\n+if [ $# -lt 1 ]; then\n+        echo \"Usage: $0 path_to_binaries\"\n+        echo \"e.g. $0 ../../src\"\n+        echo \"Env vars BITCOIND and BITCOINCLI may be used to specify the exact binaries used\"\n+        exit 1\n+fi\n+\n+set -f\n+\n+BITCOIND=${BITCOIND:-${1}/bitcoind}\n+CLI=${BITCOINCLI:-${1}/bitcoin-cli}\n+\n+DIR=\"${BASH_SOURCE%/*}\"\n+SENDANDWAIT=\"${DIR}/send.sh\"\n+if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n+. \"$DIR/util.sh\"\n+\n+D=$(mktemp -d test.XXXXX)\n+\n+# Two nodes; one will play the part of merchant, the\n+# other an evil transaction-mutating miner.\n+\n+D1=${D}/node1\n+CreateDataDir $D1 port=11000 rpcport=11001\n+B1ARGS=\"-datadir=$D1 -debug=mempool\"\n+$BITCOIND $B1ARGS &\n+B1PID=$!\n+\n+D2=${D}/node2\n+CreateDataDir $D2 port=11010 rpcport=11011\n+B2ARGS=\"-datadir=$D2 -debug=mempool\"\n+$BITCOIND $B2ARGS &\n+B2PID=$!\n+\n+# Wait until both nodes are at the same block number\n+function WaitBlocks {\n+    while :\n+    do\n+        sleep 1\n+        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n+        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n+        if (( BLOCKS1 == BLOCKS2 ))\n+        then\n+            break\n+        fi\n+    done\n+}\n+\n+# Wait until node has $N peers\n+function WaitPeers {\n+    while :\n+    do\n+        declare -i PEERS=$( $CLI $1 getconnectioncount )\n+        if (( PEERS == \"$2\" ))\n+        then\n+            break\n+        fi\n+        sleep 1\n+    done\n+}\n+\n+echo \"Generating test blockchain...\"\n+\n+# Start with B2 connected to B1:\n+$CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n+WaitPeers \"$B1ARGS\" 1\n+\n+# 2 block, 50 XBT each == 100 XBT\n+# These will be transactions \"A\" and \"B\"\n+$CLI $B1ARGS generate 2\n+\n+WaitBlocks\n+# 100 blocks, 0 mature == 0 XBT\n+$CLI $B2ARGS generate 100\n+WaitBlocks\n+\n+CheckBalance \"$B1ARGS\" 100\n+CheckBalance \"$B2ARGS\" 0\n+\n+# restart B2 with no connection\n+$CLI $B2ARGS stop > /dev/null 2>&1\n+wait $B2PID\n+$BITCOIND $B2ARGS &\n+B2PID=$!\n+\n+B1ADDRESS=$( $CLI $B1ARGS getnewaddress )\n+B2ADDRESS=$( $CLI $B2ARGS getnewaddress )\n+\n+# Transaction C: send-to-self, spend A\n+TXID_C=$( $CLI $B1ARGS sendtoaddress $B1ADDRESS 50.0)\n+\n+# Transaction D: spends B and C\n+TXID_D=$( $CLI $B1ARGS sendtoaddress $B2ADDRESS 100.0)\n+\n+CheckBalance \"$B1ARGS\" 0\n+\n+# Mutate TXID_C and add it to B2's memory pool:\n+RAWTX_C=$( $CLI $B1ARGS getrawtransaction $TXID_C )\n+\n+# ... mutate C to create C'\n+L=${RAWTX_C:82:2}\n+NEWLEN=$( printf \"%x\" $(( 16#$L + 1 )) )\n+MUTATEDTX_C=${RAWTX_C:0:82}${NEWLEN}4c${RAWTX_C:84}\n+# ... give mutated tx1 to B2:\n+MUTATEDTXID=$( $CLI $B2ARGS sendrawtransaction $MUTATEDTX_C )\n+\n+echo \"TXID_C: \" $TXID_C\n+echo \"Mutated: \" $MUTATEDTXID\n+\n+# Re-connect nodes, and have both nodes mine some blocks:\n+$CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n+WaitPeers \"$B1ARGS\" 1\n+\n+# Having B2 mine the next block puts the mutated\n+# transaction C in the chain:\n+$CLI $B2ARGS generate 1\n+WaitBlocks\n+\n+# B1 should still be able to spend 100, because D is conflicted\n+# so does not count as a spend of B\n+CheckBalance \"$B1ARGS\" 100\n+\n+$CLI $B2ARGS stop > /dev/null 2>&1\n+wait $B2PID\n+$CLI $B1ARGS stop > /dev/null 2>&1\n+wait $B1PID\n+\n+echo \"Tests successful, cleaning up\"\n+rm -rf $D\n+exit 0"
      },
      {
        "sha": "ce3bc94ef7d51f1d89a73943b5cd12a80c006cd4",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "removed",
        "additions": 0,
        "deletions": 116,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,116 +0,0 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n-class DecodeScriptTest(BitcoinTestFramework):\n-    \"\"\"Tests decoding scripts via RPC command \"decodescript\".\"\"\"\n-\n-    def setup_chain(self):\n-        print('Initializing test directory ' + self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 1)\n-\n-    def setup_network(self, split=False):\n-        self.nodes = start_nodes(1, self.options.tmpdir)\n-        self.is_network_split = False\n-\n-    def decodescript_script_sig(self):\n-        signature = '304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001'\n-        push_signature = '48' + signature\n-        public_key = '03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2'\n-        push_public_key = '21' + public_key\n-\n-        # below are test cases for all of the standard transaction types\n-\n-        # 1) P2PK scriptSig\n-        # the scriptSig of a public key scriptPubKey simply pushes a signature onto the stack\n-        rpc_result = self.nodes[0].decodescript(push_signature)\n-        assert_equal(signature, rpc_result['asm'])\n-\n-        # 2) P2PKH scriptSig\n-        rpc_result = self.nodes[0].decodescript(push_signature + push_public_key)\n-        assert_equal(signature + ' ' + public_key, rpc_result['asm'])\n-\n-        # 3) multisig scriptSig\n-        # this also tests the leading portion of a P2SH multisig scriptSig\n-        # OP_0 <A sig> <B sig>\n-        rpc_result = self.nodes[0].decodescript('00' + push_signature + push_signature)\n-        assert_equal('0 ' + signature + ' ' + signature, rpc_result['asm'])\n-\n-        # 4) P2SH scriptSig\n-        # an empty P2SH redeemScript is valid and makes for a very simple test case.\n-        # thus, such a spending scriptSig would just need to pass the outer redeemScript\n-        # hash test and leave true on the top of the stack.\n-        rpc_result = self.nodes[0].decodescript('5100')\n-        assert_equal('1 0', rpc_result['asm'])\n-\n-        # 5) null data scriptSig - no such thing because null data scripts can not be spent.\n-        # thus, no test case for that standard transaction type is here.\n-\n-    def decodescript_script_pub_key(self):\n-        public_key = '03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2'\n-        push_public_key = '21' + public_key\n-        public_key_hash = '11695b6cd891484c2d49ec5aa738ec2b2f897777'\n-        push_public_key_hash = '14' + public_key_hash\n-\n-        # below are test cases for all of the standard transaction types\n-\n-        # 1) P2PK scriptPubKey\n-        # <pubkey> OP_CHECKSIG\n-        rpc_result = self.nodes[0].decodescript(push_public_key + 'ac')\n-        assert_equal(public_key + ' OP_CHECKSIG', rpc_result['asm'])\n-\n-        # 2) P2PKH scriptPubKey\n-        # OP_DUP OP_HASH160 <PubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n-        rpc_result = self.nodes[0].decodescript('76a9' + push_public_key_hash + '88ac')\n-        assert_equal('OP_DUP OP_HASH160 ' + public_key_hash + ' OP_EQUALVERIFY OP_CHECKSIG', rpc_result['asm'])\n-\n-        # 3) multisig scriptPubKey\n-        # <m> <A pubkey> <B pubkey> <C pubkey> <n> OP_CHECKMULTISIG\n-        # just imagine that the pub keys used below are different.\n-        # for our purposes here it does not matter that they are the same even though it is unrealistic.\n-        rpc_result = self.nodes[0].decodescript('52' + push_public_key + push_public_key + push_public_key + '53ae')\n-        assert_equal('2 ' + public_key + ' ' + public_key + ' ' + public_key +  ' 3 OP_CHECKMULTISIG', rpc_result['asm'])\n-\n-        # 4) P2SH scriptPubKey\n-        # OP_HASH160 <Hash160(redeemScript)> OP_EQUAL.\n-        # push_public_key_hash here should actually be the hash of a redeem script.\n-        # but this works the same for purposes of this test.\n-        rpc_result = self.nodes[0].decodescript('a9' + push_public_key_hash + '87')\n-        assert_equal('OP_HASH160 ' + public_key_hash + ' OP_EQUAL', rpc_result['asm'])\n-\n-        # 5) null data scriptPubKey\n-        # use a signature look-alike here to make sure that we do not decode random data as a signature.\n-        # this matters if/when signature sighash decoding comes along.\n-        # would want to make sure that no such decoding takes place in this case.\n-        signature_imposter = '48304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001'\n-        # OP_RETURN <data>\n-        rpc_result = self.nodes[0].decodescript('6a' + signature_imposter)\n-        assert_equal('OP_RETURN ' + signature_imposter[2:], rpc_result['asm'])\n-\n-        # 6) a CLTV redeem script. redeem scripts are in-effect scriptPubKey scripts, so adding a test here.\n-        # OP_NOP2 is also known as OP_CHECKLOCKTIMEVERIFY.\n-        # just imagine that the pub keys used below are different.\n-        # for our purposes here it does not matter that they are the same even though it is unrealistic.\n-        #\n-        # OP_IF\n-        #   <receiver-pubkey> OP_CHECKSIGVERIFY\n-        # OP_ELSE\n-        #   <lock-until> OP_NOP2 OP_DROP\n-        # OP_ENDIF\n-        # <sender-pubkey> OP_CHECKSIG\n-        #\n-        # lock until block 500,000\n-        rpc_result = self.nodes[0].decodescript('63' + push_public_key + 'ad670320a107b17568' + push_public_key + 'ac')\n-        assert_equal('OP_IF ' + public_key + ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_NOP2 OP_DROP OP_ENDIF ' + public_key + ' OP_CHECKSIG', rpc_result['asm'])\n-\n-    def run_test(self):\n-        self.decodescript_script_sig()\n-        self.decodescript_script_pub_key()\n-\n-if __name__ == '__main__':\n-    DecodeScriptTest().main()\n-"
      },
      {
        "sha": "ce52247b2e4b9b08b63846610cd0904ad1188967",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "removed",
        "additions": 0,
        "deletions": 545,
        "changes": 545,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,545 +0,0 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from pprint import pprint\n-from time import sleep\n-\n-# Create one-input, one-output, no-fee transaction:\n-class RawTransactionsTest(BitcoinTestFramework):\n-\n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 3)\n-\n-    def setup_network(self, split=False):\n-        self.nodes = start_nodes(3, self.options.tmpdir)\n-\n-        connect_nodes_bi(self.nodes,0,1)\n-        connect_nodes_bi(self.nodes,1,2)\n-        connect_nodes_bi(self.nodes,0,2)\n-\n-        self.is_network_split=False\n-        self.sync_all()\n-\n-    def run_test(self):\n-        print \"Mining blocks...\"\n-        feeTolerance = Decimal(0.00000002) #if the fee's positive delta is higher than this value tests will fail, neg. delta always fail the tests\n-\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(101)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5);\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0);\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0);\n-        self.sync_all()\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        ###############\n-        # simple test #\n-        ###############\n-        inputs  = [ ]\n-        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        assert_equal(len(dec_tx['vin']) > 0, True) #test if we have enought inputs\n-\n-        ##############################\n-        # simple test with two coins #\n-        ##############################\n-        inputs  = [ ]\n-        outputs = { self.nodes[0].getnewaddress() : 2.2 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-\n-        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        assert_equal(len(dec_tx['vin']) > 0, True) #test if we have enough inputs\n-\n-        ##############################\n-        # simple test with two coins #\n-        ##############################\n-        inputs  = [ ]\n-        outputs = { self.nodes[0].getnewaddress() : 2.6 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-\n-        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        assert_equal(len(dec_tx['vin']) > 0, True)\n-        assert_equal(dec_tx['vin'][0]['scriptSig']['hex'], '')\n-\n-\n-        ################################\n-        # simple test with two outputs #\n-        ################################\n-        inputs  = [ ]\n-        outputs = { self.nodes[0].getnewaddress() : 2.6, self.nodes[1].getnewaddress() : 2.5 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-\n-        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        totalOut = 0\n-        for out in dec_tx['vout']:\n-            totalOut += out['value']\n-\n-        assert_equal(len(dec_tx['vin']) > 0, True)\n-        assert_equal(dec_tx['vin'][0]['scriptSig']['hex'], '')\n-\n-\n-        #########################################################################\n-        # test a fundrawtransaction with a VIN greater than the required amount #\n-        #########################################################################\n-        utx = False\n-        listunspent = self.nodes[2].listunspent()\n-        for aUtx in listunspent:\n-            if aUtx['amount'] == 5.0:\n-                utx = aUtx\n-                break;\n-\n-        assert_equal(utx!=False, True)\n-\n-        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n-        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n-\n-        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        totalOut = 0\n-        for out in dec_tx['vout']:\n-            totalOut += out['value']\n-\n-        assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n-\n-\n-\n-        #####################################################################\n-        # test a fundrawtransaction with which will not get a change output #\n-        #####################################################################\n-        utx = False\n-        listunspent = self.nodes[2].listunspent()\n-        for aUtx in listunspent:\n-            if aUtx['amount'] == 5.0:\n-                utx = aUtx\n-                break;\n-\n-        assert_equal(utx!=False, True)\n-\n-        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n-        outputs = { self.nodes[0].getnewaddress() : Decimal(5.0) - fee - feeTolerance }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n-\n-        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        totalOut = 0\n-        for out in dec_tx['vout']:\n-            totalOut += out['value']\n-\n-        assert_equal(rawtxfund['changepos'], -1)\n-        assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n-\n-\n-\n-        #########################################################################\n-        # test a fundrawtransaction with a VIN smaller than the required amount #\n-        #########################################################################\n-        utx = False\n-        listunspent = self.nodes[2].listunspent()\n-        for aUtx in listunspent:\n-            if aUtx['amount'] == 1.0:\n-                utx = aUtx\n-                break;\n-\n-        assert_equal(utx!=False, True)\n-\n-        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n-        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-\n-        # 4-byte version + 1-byte vin count + 36-byte prevout then script_len\n-        rawtx = rawtx[:82] + \"0100\" + rawtx[84:]\n-\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n-        assert_equal(\"00\", dec_tx['vin'][0]['scriptSig']['hex'])\n-\n-        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        totalOut = 0\n-        matchingOuts = 0\n-        for i, out in enumerate(dec_tx['vout']):\n-            totalOut += out['value']\n-            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n-                matchingOuts+=1\n-            else:\n-                assert_equal(i, rawtxfund['changepos'])\n-\n-        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n-        assert_equal(\"00\", dec_tx['vin'][0]['scriptSig']['hex'])\n-\n-        assert_equal(matchingOuts, 1)\n-        assert_equal(len(dec_tx['vout']), 2)\n-\n-\n-        ###########################################\n-        # test a fundrawtransaction with two VINs #\n-        ###########################################\n-        utx  = False\n-        utx2 = False\n-        listunspent = self.nodes[2].listunspent()\n-        for aUtx in listunspent:\n-            if aUtx['amount'] == 1.0:\n-                utx = aUtx\n-            if aUtx['amount'] == 5.0:\n-                utx2 = aUtx\n-\n-\n-        assert_equal(utx!=False, True)\n-\n-        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n-        outputs = { self.nodes[0].getnewaddress() : 6.0 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n-\n-        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        totalOut = 0\n-        matchingOuts = 0\n-        for out in dec_tx['vout']:\n-            totalOut += out['value']\n-            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n-                matchingOuts+=1\n-\n-        assert_equal(matchingOuts, 1)\n-        assert_equal(len(dec_tx['vout']), 2)\n-\n-        matchingIns = 0\n-        for vinOut in dec_tx['vin']:\n-            for vinIn in inputs:\n-                if vinIn['txid'] == vinOut['txid']:\n-                    matchingIns+=1\n-\n-        assert_equal(matchingIns, 2) #we now must see two vins identical to vins given as params\n-\n-        #########################################################\n-        # test a fundrawtransaction with two VINs and two vOUTs #\n-        #########################################################\n-        utx  = False\n-        utx2 = False\n-        listunspent = self.nodes[2].listunspent()\n-        for aUtx in listunspent:\n-            if aUtx['amount'] == 1.0:\n-                utx = aUtx\n-            if aUtx['amount'] == 5.0:\n-                utx2 = aUtx\n-\n-\n-        assert_equal(utx!=False, True)\n-\n-        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n-        outputs = { self.nodes[0].getnewaddress() : 6.0, self.nodes[0].getnewaddress() : 1.0 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n-\n-        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        totalOut = 0\n-        matchingOuts = 0\n-        for out in dec_tx['vout']:\n-            totalOut += out['value']\n-            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n-                matchingOuts+=1\n-\n-        assert_equal(matchingOuts, 2)\n-        assert_equal(len(dec_tx['vout']), 3)\n-\n-        ##############################################\n-        # test a fundrawtransaction with invalid vin #\n-        ##############################################\n-        listunspent = self.nodes[2].listunspent()\n-        inputs  = [ {'txid' : \"1c7f966dab21119bac53213a2bc7532bff1fa844c124fd750a7d0b1332440bd1\", 'vout' : 0} ] #invalid vin!\n-        outputs = { self.nodes[0].getnewaddress() : 1.0}\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-\n-        errorString = \"\"\n-        try:\n-            rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        except JSONRPCException,e:\n-            errorString = e.error['message']\n-\n-        assert_equal(\"Insufficient\" in errorString, True);\n-\n-\n-\n-        ############################################################\n-        #compare fee of a standard pubkeyhash transaction\n-        inputs = []\n-        outputs = {self.nodes[1].getnewaddress():1.1}\n-        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n-\n-        #create same transaction over sendtoaddress\n-        txId = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1.1);\n-        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n-\n-        #compare fee\n-        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n-        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n-        ############################################################\n-\n-        ############################################################\n-        #compare fee of a standard pubkeyhash transaction with multiple outputs\n-        inputs = []\n-        outputs = {self.nodes[1].getnewaddress():1.1,self.nodes[1].getnewaddress():1.2,self.nodes[1].getnewaddress():0.1,self.nodes[1].getnewaddress():1.3,self.nodes[1].getnewaddress():0.2,self.nodes[1].getnewaddress():0.3}\n-        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n-        #create same transaction over sendtoaddress\n-        txId = self.nodes[0].sendmany(\"\", outputs);\n-        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n-\n-        #compare fee\n-        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n-        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n-        ############################################################\n-\n-\n-        ############################################################\n-        #compare fee of a 2of2 multisig p2sh transaction\n-\n-        # create 2of2 addr\n-        addr1 = self.nodes[1].getnewaddress()\n-        addr2 = self.nodes[1].getnewaddress()\n-\n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[1].validateaddress(addr2)\n-\n-        mSigObj = self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])\n-\n-        inputs = []\n-        outputs = {mSigObj:1.1}\n-        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n-\n-        #create same transaction over sendtoaddress\n-        txId = self.nodes[0].sendtoaddress(mSigObj, 1.1);\n-        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n-\n-        #compare fee\n-        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n-        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n-        ############################################################\n-\n-\n-        ############################################################\n-        #compare fee of a standard pubkeyhash transaction\n-\n-        # create 4of5 addr\n-        addr1 = self.nodes[1].getnewaddress()\n-        addr2 = self.nodes[1].getnewaddress()\n-        addr3 = self.nodes[1].getnewaddress()\n-        addr4 = self.nodes[1].getnewaddress()\n-        addr5 = self.nodes[1].getnewaddress()\n-\n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[1].validateaddress(addr2)\n-        addr3Obj = self.nodes[1].validateaddress(addr3)\n-        addr4Obj = self.nodes[1].validateaddress(addr4)\n-        addr5Obj = self.nodes[1].validateaddress(addr5)\n-\n-        mSigObj = self.nodes[1].addmultisigaddress(4, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey'], addr4Obj['pubkey'], addr5Obj['pubkey']])\n-\n-        inputs = []\n-        outputs = {mSigObj:1.1}\n-        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n-\n-        #create same transaction over sendtoaddress\n-        txId = self.nodes[0].sendtoaddress(mSigObj, 1.1);\n-        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n-\n-        #compare fee\n-        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n-        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n-        ############################################################\n-\n-\n-        ############################################################\n-        # spend a 2of2 multisig transaction over fundraw\n-\n-        # create 2of2 addr\n-        addr1 = self.nodes[2].getnewaddress()\n-        addr2 = self.nodes[2].getnewaddress()\n-\n-        addr1Obj = self.nodes[2].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n-\n-        mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])\n-\n-\n-        # send 1.2 BTC to msig addr\n-        txId = self.nodes[0].sendtoaddress(mSigObj, 1.2);\n-        self.sync_all()\n-        self.nodes[1].generate(1)\n-        self.sync_all()\n-\n-        oldBalance = self.nodes[1].getbalance()\n-        inputs = []\n-        outputs = {self.nodes[1].getnewaddress():1.1}\n-        rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[2].fundrawtransaction(rawTx)\n-\n-        signedTx = self.nodes[2].signrawtransaction(fundedTx['hex'])\n-        txId = self.nodes[2].sendrawtransaction(signedTx['hex'])\n-        self.sync_all()\n-        self.nodes[1].generate(1)\n-        self.sync_all()\n-\n-        # make sure funds are received at node1\n-        assert_equal(oldBalance+Decimal('1.10000000'), self.nodes[1].getbalance())\n-\n-        ############################################################\n-        # locked wallet test\n-        self.nodes[1].encryptwallet(\"test\")\n-        self.nodes.pop(1)\n-        stop_nodes(self.nodes)\n-        wait_bitcoinds()\n-\n-        self.nodes = start_nodes(3, self.options.tmpdir)\n-\n-        connect_nodes_bi(self.nodes,0,1)\n-        connect_nodes_bi(self.nodes,1,2)\n-        connect_nodes_bi(self.nodes,0,2)\n-        self.is_network_split=False\n-        self.sync_all()\n-\n-        error = False\n-        try:\n-            self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.2);\n-        except:\n-            error = True\n-        assert(error)\n-\n-        oldBalance = self.nodes[0].getbalance()\n-\n-        inputs = []\n-        outputs = {self.nodes[0].getnewaddress():1.1}\n-        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n-\n-        #now we need to unlock\n-        self.nodes[1].walletpassphrase(\"test\", 100)\n-        signedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n-        txId = self.nodes[1].sendrawtransaction(signedTx['hex'])\n-        self.sync_all()\n-        self.nodes[1].generate(1)\n-        self.sync_all()\n-\n-        # make sure funds are received at node1\n-        assert_equal(oldBalance+Decimal('51.10000000'), self.nodes[0].getbalance())\n-\n-\n-\n-        ###############################################\n-        # multiple (~19) inputs tx test | Compare fee #\n-        ###############################################\n-\n-        #empty node1, send some small coins from node0 to node1\n-        self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True);\n-        self.sync_all()\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        for i in range(0,20):\n-            self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01);\n-        self.sync_all()\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        #fund a tx with ~20 small inputs\n-        inputs = []\n-        outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n-        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n-\n-        #create same transaction over sendtoaddress\n-        txId = self.nodes[1].sendmany(\"\", outputs);\n-        signedFee = self.nodes[1].getrawmempool(True)[txId]['fee']\n-\n-        #compare fee\n-        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n-        assert(feeDelta >= 0 and feeDelta <= feeTolerance*19) #~19 inputs\n-\n-\n-        #############################################\n-        # multiple (~19) inputs tx test | sign/send #\n-        #############################################\n-\n-        #again, empty node1, send some small coins from node0 to node1\n-        self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True);\n-        self.sync_all()\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        for i in range(0,20):\n-            self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01);\n-        self.sync_all()\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        #fund a tx with ~20 small inputs\n-        oldBalance = self.nodes[0].getbalance()\n-\n-        inputs = []\n-        outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n-        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n-        fundedAndSignedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n-        txId = self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n-        self.sync_all()\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-        assert_equal(oldBalance+Decimal('50.19000000'), self.nodes[0].getbalance()) #0.19+block reward\n-\n-        #####################################################\n-        # test fundrawtransaction with OP_RETURN and no vin #\n-        #####################################################\n-\n-        rawtx   = \"0100000000010000000000000000066a047465737400000000\"\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-\n-        assert_equal(len(dec_tx['vin']), 0)\n-        assert_equal(len(dec_tx['vout']), 1)\n-\n-        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-\n-        assert_greater_than(len(dec_tx['vin']), 0) # at least one vin\n-        assert_equal(len(dec_tx['vout']), 2) # one change output added\n-\n-\n-if __name__ == '__main__':\n-    RawTransactionsTest().main()"
      },
      {
        "sha": "64ba49df64d43e6bb1bd5c84900caf20da48e663",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Test rpc http basics\n+# Test REST interface\n #\n \n from test_framework.test_framework import BitcoinTestFramework\n@@ -20,83 +20,83 @@\n except ImportError:\n     import urlparse\n \n-class HTTPBasicsTest (BitcoinTestFramework):\n+class HTTPBasicsTest (BitcoinTestFramework):        \n     def setup_nodes(self):\n         return start_nodes(4, self.options.tmpdir, extra_args=[['-rpckeepalive=1'], ['-rpckeepalive=0'], [], []])\n \n-    def run_test(self):\n-\n+    def run_test(self):        \n+        \n         #################################################\n         # lowlevel check for http persistent connection #\n         #################################################\n         url = urlparse.urlparse(self.nodes[0].url)\n         authpair = url.username + ':' + url.password\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n-\n+        \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n-\n+        \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         conn.close()\n-\n+        \n         #same should be if we add keep-alive because this should be the std. behaviour\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair), \"Connection\": \"keep-alive\"}\n-\n+        \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n-\n+        \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         conn.close()\n-\n+        \n         #now do the same with \"Connection: close\"\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair), \"Connection\":\"close\"}\n-\n+        \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, False) #now the connection must be closed after the response\n-\n+        assert_equal(conn.sock!=None, False) #now the connection must be closed after the response        \n+        \n         #node1 (2nd node) is running with disabled keep-alive option\n         urlNode1 = urlparse.urlparse(self.nodes[1].url)\n         authpair = urlNode1.username + ':' + urlNode1.password\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n-\n+                \n         conn = httplib.HTTPConnection(urlNode1.hostname, urlNode1.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, False) #connection must be closed because keep-alive was set to false\n-\n+        \n         #node2 (third node) is running with standard keep-alive parameters which means keep-alive is off\n         urlNode2 = urlparse.urlparse(self.nodes[2].url)\n         authpair = urlNode2.username + ':' + urlNode2.password\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n-\n+                \n         conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #connection must be closed because bitcoind should use keep-alive by default\n-\n+        \n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      },
      {
        "sha": "d89cfcf59bdcb5fac6d1a012c2910151c948fef3",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "removed",
        "additions": 0,
        "deletions": 87,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,87 +0,0 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test node handling\n-#\n-\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-import base64\n-\n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n-\n-class NodeHandlingTest (BitcoinTestFramework):\n-    def run_test(self):\n-        ###########################\n-        # setban/listbanned tests #\n-        ###########################\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 4) #we should have 4 nodes at this point\n-        self.nodes[2].setban(\"127.0.0.1\", \"add\")\n-        time.sleep(3) #wait till the nodes are disconected\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 0) #all nodes must be disconnected at this point\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n-        self.nodes[2].clearbanned()\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n-        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n-        try:\n-            self.nodes[2].setban(\"127.0.0.1\", \"add\") #throws exception because 127.0.0.1 is within range 127.0.0.0/24\n-        except:\n-            pass\n-        assert_equal(len(self.nodes[2].listbanned()), 1) #still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n-        try:\n-            self.nodes[2].setban(\"127.0.0.1\", \"remove\")\n-        except:\n-            pass\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n-        self.nodes[2].setban(\"127.0.0.0/24\", \"remove\")\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n-        self.nodes[2].clearbanned()\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n-\n-        ##test persisted banlist\n-        self.nodes[2].setban(\"127.0.0.0/32\", \"add\")\n-        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n-        self.nodes[2].setban(\"192.168.0.1\", \"add\", 1) #ban for 1 seconds\n-        self.nodes[2].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000) #ban for 1000 seconds\n-        listBeforeShutdown = self.nodes[2].listbanned();\n-        assert_equal(\"192.168.0.1/255.255.255.255\", listBeforeShutdown[2]['address']) #must be here\n-        time.sleep(2) #make 100% sure we expired 192.168.0.1 node time\n-\n-        #stop node\n-        stop_node(self.nodes[2], 2)\n-\n-        self.nodes[2] = start_node(2, self.options.tmpdir)\n-        listAfterShutdown = self.nodes[2].listbanned();\n-        assert_equal(\"127.0.0.0/255.255.255.0\", listAfterShutdown[0]['address'])\n-        assert_equal(\"127.0.0.0/255.255.255.255\", listAfterShutdown[1]['address'])\n-        assert_equal(\"2001:4000::/ffff:e000:0:0:0:0:0:0\", listAfterShutdown[2]['address'])\n-\n-        ###########################\n-        # RPC disconnectnode test #\n-        ###########################\n-        url = urlparse.urlparse(self.nodes[1].url)\n-        self.nodes[0].disconnectnode(url.hostname+\":\"+str(p2p_port(1)))\n-        time.sleep(2) #disconnecting a node needs a little bit of time\n-        for node in self.nodes[0].getpeerinfo():\n-            assert(node['addr'] != url.hostname+\":\"+str(p2p_port(1)))\n-\n-        connect_nodes_bi(self.nodes,0,1) #reconnect the node\n-        found = False\n-        for node in self.nodes[0].getpeerinfo():\n-            if node['addr'] == url.hostname+\":\"+str(p2p_port(1)):\n-                found = True\n-        assert(found)\n-\n-if __name__ == '__main__':\n-    NodeHandlingTest ().main ()"
      },
      {
        "sha": "9a9b2f53007d4d4e90573cfa0f869f1c4e34068d",
        "filename": "qa/rpc-tests/proxy_test.py",
        "status": "modified",
        "additions": 14,
        "deletions": 48,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/proxy_test.py?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -68,10 +68,10 @@ def setup_nodes(self):\n             ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf1.addr),'-proxyrandomize=1'], \n             ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf1.addr),'-onion=%s:%i' % (self.conf2.addr),'-proxyrandomize=0'], \n             ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf2.addr),'-proxyrandomize=1'], \n-            ['-listen', '-debug=net', '-debug=proxy', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n+            ['-listen', '-debug=net', '-debug=proxy', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0']\n             ])\n \n-    def node_test(self, node, proxies, auth, test_onion=True):\n+    def node_test(self, node, proxies, auth):\n         rv = []\n         # Test: outgoing IPv4 connection through node\n         node.addnode(\"15.61.23.23:1234\", \"onetry\")\n@@ -99,18 +99,17 @@ def node_test(self, node, proxies, auth, test_onion=True):\n             assert_equal(cmd.password, None)\n         rv.append(cmd)\n \n-        if test_onion:\n-            # Test: outgoing onion connection through node\n-            node.addnode(\"bitcoinostk4e4re.onion:8333\", \"onetry\")\n-            cmd = proxies[2].queue.get()\n-            assert(isinstance(cmd, Socks5Command))\n-            assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n-            assert_equal(cmd.addr, \"bitcoinostk4e4re.onion\")\n-            assert_equal(cmd.port, 8333)\n-            if not auth:\n-                assert_equal(cmd.username, None)\n-                assert_equal(cmd.password, None)\n-            rv.append(cmd)\n+        # Test: outgoing onion connection through node\n+        node.addnode(\"bitcoinostk4e4re.onion:8333\", \"onetry\")\n+        cmd = proxies[2].queue.get()\n+        assert(isinstance(cmd, Socks5Command))\n+        assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n+        assert_equal(cmd.addr, \"bitcoinostk4e4re.onion\")\n+        assert_equal(cmd.port, 8333)\n+        if not auth:\n+            assert_equal(cmd.username, None)\n+            assert_equal(cmd.password, None)\n+        rv.append(cmd)\n \n         # Test: outgoing DNS name connection through node\n         node.addnode(\"node.noumenon:8333\", \"onetry\")\n@@ -140,41 +139,8 @@ def run_test(self):\n         assert_equal(len(credentials), 4)\n \n         # proxy on IPv6 localhost\n-        self.node_test(self.nodes[3], [self.serv3, self.serv3, self.serv3, self.serv3], False, False)\n-\n-        def networks_dict(d):\n-            r = {}\n-            for x in d['networks']:\n-                r[x['name']] = x\n-            return r\n-\n-        # test RPC getnetworkinfo\n-        n0 = networks_dict(self.nodes[0].getnetworkinfo())\n-        for net in ['ipv4','ipv6','onion']:\n-            assert_equal(n0[net]['proxy'], '%s:%i' % (self.conf1.addr))\n-            assert_equal(n0[net]['proxy_randomize_credentials'], True)\n-        assert_equal(n0['onion']['reachable'], True)\n-\n-        n1 = networks_dict(self.nodes[1].getnetworkinfo())\n-        for net in ['ipv4','ipv6']:\n-            assert_equal(n1[net]['proxy'], '%s:%i' % (self.conf1.addr))\n-            assert_equal(n1[net]['proxy_randomize_credentials'], False)\n-        assert_equal(n1['onion']['proxy'], '%s:%i' % (self.conf2.addr))\n-        assert_equal(n1['onion']['proxy_randomize_credentials'], False)\n-        assert_equal(n1['onion']['reachable'], True)\n+        self.node_test(self.nodes[3], [self.serv3, self.serv3, self.serv3, self.serv3], False)\n         \n-        n2 = networks_dict(self.nodes[2].getnetworkinfo())\n-        for net in ['ipv4','ipv6','onion']:\n-            assert_equal(n2[net]['proxy'], '%s:%i' % (self.conf2.addr))\n-            assert_equal(n2[net]['proxy_randomize_credentials'], True)\n-        assert_equal(n2['onion']['reachable'], True)\n-\n-        n3 = networks_dict(self.nodes[3].getnetworkinfo())\n-        for net in ['ipv4','ipv6']:\n-            assert_equal(n3[net]['proxy'], '[%s]:%i' % (self.conf3.addr))\n-            assert_equal(n3[net]['proxy_randomize_credentials'], False)\n-        assert_equal(n3['onion']['reachable'], False)\n-\n if __name__ == '__main__':\n     ProxyTest().main()\n "
      },
      {
        "sha": "1378514c84363fa2d8e37bf5f2c488f5d1a22e8d",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -40,7 +40,6 @@ def run_test(self):\n \n         #prepare some coins for multiple *rawtransaction commands\n         self.nodes[2].generate(1)\n-        self.sync_all()\n         self.nodes[0].generate(101)\n         self.sync_all()\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5);"
      },
      {
        "sha": "6c51b2fcd92966a5e23dbed612964d397808040c",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 4,
        "deletions": 35,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -235,43 +235,12 @@ def run_test(self):\n         assert_equal(response_header_str.encode(\"hex\")[0:160], response_header_hex_str[0:160])\n \n         # check json format\n-        block_json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n-        block_json_obj = json.loads(block_json_string)\n-        assert_equal(block_json_obj['hash'], bb_hash)\n-\n-        # compare with json block header\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n-        assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read()\n-        json_obj = json.loads(response_header_json_str)\n-        assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n-        assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n-\n-        #compare with normal RPC block response\n-        rpc_block_json = self.nodes[0].getblock(bb_hash)\n-        assert_equal(json_obj[0]['hash'],               rpc_block_json['hash'])\n-        assert_equal(json_obj[0]['confirmations'],      rpc_block_json['confirmations'])\n-        assert_equal(json_obj[0]['height'],             rpc_block_json['height'])\n-        assert_equal(json_obj[0]['version'],            rpc_block_json['version'])\n-        assert_equal(json_obj[0]['merkleroot'],         rpc_block_json['merkleroot'])\n-        assert_equal(json_obj[0]['time'],               rpc_block_json['time'])\n-        assert_equal(json_obj[0]['nonce'],              rpc_block_json['nonce'])\n-        assert_equal(json_obj[0]['bits'],               rpc_block_json['bits'])\n-        assert_equal(json_obj[0]['difficulty'],         rpc_block_json['difficulty'])\n-        assert_equal(json_obj[0]['chainwork'],          rpc_block_json['chainwork'])\n-        assert_equal(json_obj[0]['previousblockhash'],  rpc_block_json['previousblockhash'])\n-\n-        #see if we can get 5 headers in one response\n-        self.nodes[1].generate(5)\n-        self.sync_all()\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n-        assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read()\n-        json_obj = json.loads(response_header_json_str)\n-        assert_equal(len(json_obj), 5) #now we should have 5 header objects\n+        json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+        assert_equal(json_obj['hash'], bb_hash)\n \n         # do tx test\n-        tx_hash = block_json_obj['tx'][0]['txid'];\n+        tx_hash = json_obj['tx'][0]['txid'];\n         json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"json\")\n         json_obj = json.loads(json_string)\n         assert_equal(json_obj['txid'], tx_hash)"
      },
      {
        "sha": "2d54cc6ded4233af6ddf89f80d9de9bb24e96a32",
        "filename": "qa/rpc-tests/send.sh",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/send.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/send.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/send.sh?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -0,0 +1,31 @@\n+#!/bin/bash\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+TIMEOUT=10\n+SIGNAL=HUP\n+PIDFILE=.send.pid\n+if [ $# -eq 0 ]; then\n+  echo -e \"Usage:\\t$0 <cmd>\"\n+  echo -e \"\\tRuns <cmd> and wait ${TIMEOUT} seconds or until SIG${SIGNAL} is received.\"\n+  echo -e \"\\tReturns: 0 if SIG${SIGNAL} is received, 1 otherwise.\"\n+  echo -e \"Or:\\t$0 -STOP\"\n+  echo -e \"\\tsends SIG${SIGNAL} to running send.sh\"\n+  exit 0\n+fi\n+\n+if [ $1 = \"-STOP\" ]; then\n+  if [ -s ${PIDFILE} ]; then\n+      kill -s ${SIGNAL} $(<$PIDFILE 2>/dev/null) 2>/dev/null\n+  fi\n+  exit 0\n+fi\n+\n+trap '[[ ${PID} ]] && kill ${PID}' ${SIGNAL}\n+trap 'rm -f ${PIDFILE}' EXIT\n+echo $$ > ${PIDFILE}\n+\"$@\"\n+sleep ${TIMEOUT} & PID=$!\n+wait ${PID} && exit 1\n+\n+exit 0"
      },
      {
        "sha": "e8ced0e5bbd7b3090cfc49f463801beb6aee76a6",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "removed",
        "additions": 0,
        "deletions": 169,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,169 +0,0 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test proper accounting with an equivalent malleability clone\n-#\n-\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.authproxy import AuthServiceProxy, JSONRPCException\n-from decimal import Decimal\n-from test_framework.util import *\n-import os\n-import shutil\n-\n-class TxnMallTest(BitcoinTestFramework):\n-\n-    def add_options(self, parser):\n-        parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n-                          help=\"Test double-spend of 1-confirmed transaction\")\n-\n-    def setup_network(self):\n-        # Start with split network:\n-        return super(TxnMallTest, self).setup_network(True)\n-\n-    def run_test(self):\n-        # All nodes should start with 1,250 BTC:\n-        starting_balance = 1250\n-        for i in range(4):\n-            assert_equal(self.nodes[i].getbalance(), starting_balance)\n-            self.nodes[i].getnewaddress(\"\")  # bug workaround, coins generated assigned to first getnewaddress!\n-\n-        # Assign coins to foo and bar accounts:\n-        self.nodes[0].settxfee(.001)\n-\n-        node0_address_foo = self.nodes[0].getnewaddress(\"foo\")\n-        fund_foo_txid = self.nodes[0].sendfrom(\"\", node0_address_foo, 1219)\n-        fund_foo_tx = self.nodes[0].gettransaction(fund_foo_txid)\n-\n-        node0_address_bar = self.nodes[0].getnewaddress(\"bar\")\n-        fund_bar_txid = self.nodes[0].sendfrom(\"\", node0_address_bar, 29)\n-        fund_bar_tx = self.nodes[0].gettransaction(fund_bar_txid)\n-\n-        assert_equal(self.nodes[0].getbalance(\"\"),\n-                     starting_balance - 1219 - 29 + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"])\n-\n-        # Coins are sent to node1_address\n-        node1_address = self.nodes[1].getnewaddress(\"from0\")\n-\n-        # Send tx1, and another transaction tx2 that won't be cloned \n-        txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 40, 0)\n-        txid2 = self.nodes[0].sendfrom(\"bar\", node1_address, 20, 0)\n-\n-        # Construct a clone of tx1, to be malleated \n-        rawtx1 = self.nodes[0].getrawtransaction(txid1,1)\n-        clone_inputs = [{\"txid\":rawtx1[\"vin\"][0][\"txid\"],\"vout\":rawtx1[\"vin\"][0][\"vout\"]}]\n-        clone_outputs = {rawtx1[\"vout\"][0][\"scriptPubKey\"][\"addresses\"][0]:rawtx1[\"vout\"][0][\"value\"],\n-                         rawtx1[\"vout\"][1][\"scriptPubKey\"][\"addresses\"][0]:rawtx1[\"vout\"][1][\"value\"]}\n-        clone_raw = self.nodes[0].createrawtransaction(clone_inputs, clone_outputs)\n-\n-        # 3 hex manipulations on the clone are required\n-\n-        # manipulation 1. sequence is at version+#inputs+input+sigstub\n-        posseq = 2*(4+1+36+1)\n-        seqbe = '%08x' % rawtx1[\"vin\"][0][\"sequence\"]\n-        clone_raw = clone_raw[:posseq] + seqbe[6:8] + seqbe[4:6] + seqbe[2:4] + seqbe[0:2] + clone_raw[posseq + 8:]\n-\n-        # manipulation 2. createrawtransaction randomizes the order of its outputs, so swap them if necessary.\n-        # output 0 is at version+#inputs+input+sigstub+sequence+#outputs\n-        # 40 BTC serialized is 00286bee00000000\n-        pos0 = 2*(4+1+36+1+4+1)\n-        hex40 = \"00286bee00000000\"\n-        output_len = 16 + 2 + 2 * int(\"0x\" + clone_raw[pos0 + 16 : pos0 + 16 + 2], 0)\n-        if (rawtx1[\"vout\"][0][\"value\"] == 40 and clone_raw[pos0 : pos0 + 16] != hex40 or\n-            rawtx1[\"vout\"][0][\"value\"] != 40 and clone_raw[pos0 : pos0 + 16] == hex40):\n-            output0 = clone_raw[pos0 : pos0 + output_len]\n-            output1 = clone_raw[pos0 + output_len : pos0 + 2 * output_len]\n-            clone_raw = clone_raw[:pos0] + output1 + output0 + clone_raw[pos0 + 2 * output_len:]\n-\n-        # manipulation 3. locktime is after outputs\n-        poslt = pos0 + 2 * output_len\n-        ltbe = '%08x' % rawtx1[\"locktime\"]\n-        clone_raw = clone_raw[:poslt] + ltbe[6:8] + ltbe[4:6] + ltbe[2:4] + ltbe[0:2] + clone_raw[poslt + 8:]\n-\n-        # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n-        # Don't send the clone anywhere yet\n-        tx1_clone = self.nodes[0].signrawtransaction(clone_raw, None, None, \"ALL|ANYONECANPAY\")\n-        assert_equal(tx1_clone[\"complete\"], True)\n-\n-        # Have node0 mine a block, if requested:\n-        if (self.options.mine_block):\n-            self.nodes[0].generate(1)\n-            sync_blocks(self.nodes[0:2])\n-\n-        tx1 = self.nodes[0].gettransaction(txid1)\n-        tx2 = self.nodes[0].gettransaction(txid2)\n-\n-        # Node0's balance should be starting balance, plus 50BTC for another\n-        # matured block, minus tx1 and tx2 amounts, and minus transaction fees:\n-        expected = starting_balance + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"]\n-        if self.options.mine_block: expected += 50\n-        expected += tx1[\"amount\"] + tx1[\"fee\"]\n-        expected += tx2[\"amount\"] + tx2[\"fee\"]\n-        assert_equal(self.nodes[0].getbalance(), expected)\n-\n-        # foo and bar accounts should be debited:\n-        assert_equal(self.nodes[0].getbalance(\"foo\", 0), 1219 + tx1[\"amount\"] + tx1[\"fee\"])\n-        assert_equal(self.nodes[0].getbalance(\"bar\", 0), 29 + tx2[\"amount\"] + tx2[\"fee\"])\n-\n-        if self.options.mine_block:\n-            assert_equal(tx1[\"confirmations\"], 1)\n-            assert_equal(tx2[\"confirmations\"], 1)\n-            # Node1's \"from0\" balance should be both transaction amounts:\n-            assert_equal(self.nodes[1].getbalance(\"from0\"), -(tx1[\"amount\"] + tx2[\"amount\"]))\n-        else:\n-            assert_equal(tx1[\"confirmations\"], 0)\n-            assert_equal(tx2[\"confirmations\"], 0)\n-\n-        # Send clone and its parent to miner\n-        self.nodes[2].sendrawtransaction(fund_foo_tx[\"hex\"])\n-        txid1_clone = self.nodes[2].sendrawtransaction(tx1_clone[\"hex\"])\n-        # ... mine a block...\n-        self.nodes[2].generate(1)\n-\n-        # Reconnect the split network, and sync chain:\n-        connect_nodes(self.nodes[1], 2)\n-        self.nodes[2].sendrawtransaction(fund_bar_tx[\"hex\"])\n-        self.nodes[2].sendrawtransaction(tx2[\"hex\"])\n-        self.nodes[2].generate(1)  # Mine another block to make sure we sync\n-        sync_blocks(self.nodes)\n-\n-        # Re-fetch transaction info:\n-        tx1 = self.nodes[0].gettransaction(txid1)\n-        tx1_clone = self.nodes[0].gettransaction(txid1_clone)\n-        tx2 = self.nodes[0].gettransaction(txid2)\n-        \n-        # Verify expected confirmations\n-        assert_equal(tx1[\"confirmations\"], -1)\n-        assert_equal(tx1_clone[\"confirmations\"], 2)\n-        assert_equal(tx2[\"confirmations\"], 1)\n-\n-        # Check node0's total balance; should be same as before the clone, + 100 BTC for 2 matured,\n-        # less possible orphaned matured subsidy\n-        expected += 100\n-        if (self.options.mine_block): \n-            expected -= 50\n-        assert_equal(self.nodes[0].getbalance(), expected)\n-        assert_equal(self.nodes[0].getbalance(\"*\", 0), expected)\n-\n-        # Check node0's individual account balances.\n-        # \"foo\" should have been debited by the equivalent clone of tx1\n-        assert_equal(self.nodes[0].getbalance(\"foo\"), 1219 + tx1[\"amount\"] + tx1[\"fee\"])\n-        # \"bar\" should have been debited by (possibly unconfirmed) tx2\n-        assert_equal(self.nodes[0].getbalance(\"bar\", 0), 29 + tx2[\"amount\"] + tx2[\"fee\"])\n-        # \"\" should have starting balance, less funding txes, plus subsidies\n-        assert_equal(self.nodes[0].getbalance(\"\", 0), starting_balance\n-                                                                - 1219\n-                                                                + fund_foo_tx[\"fee\"]\n-                                                                -   29\n-                                                                + fund_bar_tx[\"fee\"]\n-                                                                +  100)\n-\n-        # Node1's \"from0\" account balance\n-        assert_equal(self.nodes[1].getbalance(\"from0\", 0), -(tx1[\"amount\"] + tx2[\"amount\"]))\n-\n-if __name__ == '__main__':\n-    TxnMallTest().main()\n-"
      },
      {
        "sha": "99dcdae55220896b7dc5206da6a40fe7638dda5d",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 27,
        "deletions": 52,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Test proper accounting with a double-spend conflict\n+# Test proper accounting with malleable transactions\n #\n \n from test_framework.test_framework import BitcoinTestFramework\n@@ -31,40 +31,28 @@ def run_test(self):\n             self.nodes[i].getnewaddress(\"\")  # bug workaround, coins generated assigned to first getnewaddress!\n         \n         # Assign coins to foo and bar accounts:\n-        node0_address_foo = self.nodes[0].getnewaddress(\"foo\")\n-        fund_foo_txid = self.nodes[0].sendfrom(\"\", node0_address_foo, 1219)\n-        fund_foo_tx = self.nodes[0].gettransaction(fund_foo_txid)\n-\n-        node0_address_bar = self.nodes[0].getnewaddress(\"bar\")\n-        fund_bar_txid = self.nodes[0].sendfrom(\"\", node0_address_bar, 29)\n-        fund_bar_tx = self.nodes[0].gettransaction(fund_bar_txid)\n-\n-        assert_equal(self.nodes[0].getbalance(\"\"),\n-                     starting_balance - 1219 - 29 + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"])\n+        self.nodes[0].move(\"\", \"foo\", 1220)\n+        self.nodes[0].move(\"\", \"bar\", 30)\n+        assert_equal(self.nodes[0].getbalance(\"\"), 0)\n \n         # Coins are sent to node1_address\n         node1_address = self.nodes[1].getnewaddress(\"from0\")\n \n-        # First: use raw transaction API to send 1240 BTC to node1_address,\n+        # First: use raw transaction API to send 1210 BTC to node1_address,\n         # but don't broadcast:\n-        doublespend_fee = Decimal('-.02')\n-        rawtx_input_0 = {}\n-        rawtx_input_0[\"txid\"] = fund_foo_txid\n-        rawtx_input_0[\"vout\"] = find_output(self.nodes[0], fund_foo_txid, 1219)\n-        rawtx_input_1 = {}\n-        rawtx_input_1[\"txid\"] = fund_bar_txid\n-        rawtx_input_1[\"vout\"] = find_output(self.nodes[0], fund_bar_txid, 29)\n-        inputs = [rawtx_input_0, rawtx_input_1]\n-        change_address = self.nodes[0].getnewaddress()\n+        (total_in, inputs) = gather_inputs(self.nodes[0], 1210)\n+        change_address = self.nodes[0].getnewaddress(\"foo\")\n         outputs = {}\n-        outputs[node1_address] = 1240\n-        outputs[change_address] = 1248 - 1240 + doublespend_fee\n+        outputs[change_address] = 40\n+        outputs[node1_address] = 1210\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n         doublespend = self.nodes[0].signrawtransaction(rawtx)\n         assert_equal(doublespend[\"complete\"], True)\n \n-        # Create two spends using 1 50 BTC coin each\n-        txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 40, 0)\n+        # Create two transaction from node[0] to node[1]; the\n+        # second must spend change from the first because the first\n+        # spends all mature inputs:\n+        txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 1210, 0)\n         txid2 = self.nodes[0].sendfrom(\"bar\", node1_address, 20, 0)\n         \n         # Have node0 mine a block:\n@@ -76,16 +64,16 @@ def run_test(self):\n         tx2 = self.nodes[0].gettransaction(txid2)\n \n         # Node0's balance should be starting balance, plus 50BTC for another\n-        # matured block, minus 40, minus 20, and minus transaction fees:\n-        expected = starting_balance + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"]\n+        # matured block, minus 1210, minus 20, and minus transaction fees:\n+        expected = starting_balance\n         if self.options.mine_block: expected += 50\n         expected += tx1[\"amount\"] + tx1[\"fee\"]\n         expected += tx2[\"amount\"] + tx2[\"fee\"]\n         assert_equal(self.nodes[0].getbalance(), expected)\n \n         # foo and bar accounts should be debited:\n-        assert_equal(self.nodes[0].getbalance(\"foo\", 0), 1219+tx1[\"amount\"]+tx1[\"fee\"])\n-        assert_equal(self.nodes[0].getbalance(\"bar\", 0), 29+tx2[\"amount\"]+tx2[\"fee\"])\n+        assert_equal(self.nodes[0].getbalance(\"foo\"), 1220+tx1[\"amount\"]+tx1[\"fee\"])\n+        assert_equal(self.nodes[0].getbalance(\"bar\"), 30+tx2[\"amount\"]+tx2[\"fee\"])\n \n         if self.options.mine_block:\n             assert_equal(tx1[\"confirmations\"], 1)\n@@ -96,10 +84,8 @@ def run_test(self):\n             assert_equal(tx1[\"confirmations\"], 0)\n             assert_equal(tx2[\"confirmations\"], 0)\n         \n-        # Now give doublespend and its parents to miner:\n-        self.nodes[2].sendrawtransaction(fund_foo_tx[\"hex\"])\n-        self.nodes[2].sendrawtransaction(fund_bar_tx[\"hex\"])\n-        self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n+        # Now give doublespend to miner:\n+        mutated_txid = self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n         # ... mine a block...\n         self.nodes[2].generate(1)\n \n@@ -117,28 +103,17 @@ def run_test(self):\n         assert_equal(tx2[\"confirmations\"], -1)\n \n         # Node0's total balance should be starting balance, plus 100BTC for \n-        # two more matured blocks, minus 1240 for the double-spend, plus fees (which are\n-        # negative):\n-        expected = starting_balance + 100 - 1240 + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"] + doublespend_fee\n+        # two more matured blocks, minus 1210 for the double-spend:\n+        expected = starting_balance + 100 - 1210\n         assert_equal(self.nodes[0].getbalance(), expected)\n         assert_equal(self.nodes[0].getbalance(\"*\"), expected)\n \n-        # Final \"\" balance is starting_balance - amount moved to accounts - doublespend + subsidies +\n-        # fees (which are negative)\n-        assert_equal(self.nodes[0].getbalance(\"foo\"), 1219)\n-        assert_equal(self.nodes[0].getbalance(\"bar\"), 29)\n-        assert_equal(self.nodes[0].getbalance(\"\"), starting_balance\n-                                                              -1219\n-                                                              -  29\n-                                                              -1240\n-                                                              + 100\n-                                                              + fund_foo_tx[\"fee\"]\n-                                                              + fund_bar_tx[\"fee\"]\n-                                                              + doublespend_fee)\n-\n-        # Node1's \"from0\" account balance should be just the doublespend:\n-        assert_equal(self.nodes[1].getbalance(\"from0\"), 1240)\n+        # foo account should be debited, but bar account should not:\n+        assert_equal(self.nodes[0].getbalance(\"foo\"), 1220-1210)\n+        assert_equal(self.nodes[0].getbalance(\"bar\"), 30)\n+\n+        # Node1's \"from\" account balance should be just the mutated send:\n+        assert_equal(self.nodes[1].getbalance(\"from0\"), 1210)\n \n if __name__ == '__main__':\n     TxnMallTest().main()\n-"
      },
      {
        "sha": "c2b7004308094ce0362fa61ae8f81250753ce20a",
        "filename": "qa/rpc-tests/util.sh",
        "status": "added",
        "additions": 103,
        "deletions": 0,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/util.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/qa/rpc-tests/util.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.sh?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# Functions used by more than one test\n+\n+function echoerr {\n+  echo \"$@\" 1>&2;\n+}\n+\n+# Usage: ExtractKey <key> \"<json_object_string>\"\n+# Warning: this will only work for the very-well-behaved\n+# JSON produced by bitcoind, do NOT use it to try to\n+# parse arbitrary/nested/etc JSON.\n+function ExtractKey {\n+    echo $2 | tr -d ' \"{}\\n' | awk -v RS=',' -F: \"\\$1 ~ /$1/ { print \\$2}\"\n+}\n+\n+function CreateDataDir {\n+  DIR=$1\n+  mkdir -p $DIR\n+  CONF=$DIR/bitcoin.conf\n+  echo \"regtest=1\" >> $CONF\n+  echo \"keypool=2\" >> $CONF\n+  echo \"rpcuser=rt\" >> $CONF\n+  echo \"rpcpassword=rt\" >> $CONF\n+  echo \"rpcwait=1\" >> $CONF\n+  echo \"walletnotify=${SENDANDWAIT} -STOP\" >> $CONF\n+  shift\n+  while (( \"$#\" )); do\n+      echo $1 >> $CONF\n+      shift\n+  done\n+}\n+\n+function AssertEqual {\n+  if (( $( echo \"$1 == $2\" | bc ) == 0 ))\n+  then\n+    echoerr \"AssertEqual: $1 != $2\"\n+    declare -f CleanUp > /dev/null 2>&1\n+    if [[ $? -eq 0 ]] ; then\n+        CleanUp\n+    fi\n+    exit 1\n+  fi\n+}\n+\n+# CheckBalance -datadir=... amount account minconf\n+function CheckBalance {\n+  declare -i EXPECT=\"$2\"\n+  B=$( $CLI $1 getbalance $3 $4 )\n+  if (( $( echo \"$B == $EXPECT\" | bc ) == 0 ))\n+  then\n+    echoerr \"bad balance: $B (expected $2)\"\n+    declare -f CleanUp > /dev/null 2>&1\n+    if [[ $? -eq 0 ]] ; then\n+        CleanUp\n+    fi\n+    exit 1\n+  fi\n+}\n+\n+# Use: Address <datadir> [account]\n+function Address {\n+  $CLI $1 getnewaddress $2\n+}\n+\n+# Send from to amount\n+function Send {\n+  from=$1\n+  to=$2\n+  amount=$3\n+  address=$(Address $to)\n+  txid=$( ${SENDANDWAIT} $CLI $from sendtoaddress $address $amount )\n+}\n+\n+# Use: Unspent <datadir> <n'th-last-unspent> <var>\n+function Unspent {\n+  local r=$( $CLI $1 listunspent | awk -F'[ |:,\"]+' \"\\$2 ~ /$3/ { print \\$3 }\" | tail -n $2 | head -n 1)\n+  echo $r\n+}\n+\n+# Use: CreateTxn1 <datadir> <n'th-last-unspent> <destaddress>\n+# produces hex from signrawtransaction\n+function CreateTxn1 {\n+  TXID=$(Unspent $1 $2 txid)\n+  AMOUNT=$(Unspent $1 $2 amount)\n+  VOUT=$(Unspent $1 $2 vout)\n+  RAWTXN=$( $CLI $1 createrawtransaction \"[{\\\"txid\\\":\\\"$TXID\\\",\\\"vout\\\":$VOUT}]\" \"{\\\"$3\\\":$AMOUNT}\")\n+  ExtractKey hex \"$( $CLI $1 signrawtransaction $RAWTXN )\"\n+}\n+\n+# Use: SendRawTxn <datadir> <hex_txn_data>\n+function SendRawTxn {\n+  ${SENDANDWAIT} $CLI $1 sendrawtransaction $2\n+}\n+\n+# Use: GetBlocks <datadir>\n+# returns number of blocks from getinfo\n+function GetBlocks {\n+    $CLI $1 getblockcount\n+}"
      },
      {
        "sha": "cdd683121856eacabb181055b009ec31204d5492",
        "filename": "share/seeds/generate-seeds.py",
        "status": "renamed",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/share/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/share/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/seeds/generate-seeds.py?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -77,9 +77,6 @@ def parse_spec(s, defaultport):\n     if match: # ipv6\n         host = match.group(1)\n         port = match.group(2)\n-    elif s.count(':') > 1: # ipv6, no port\n-        host = s\n-        port = ''\n     else:\n         (host,_,port) = s.partition(':')\n \n@@ -121,7 +118,7 @@ def main():\n     g.write('#define BITCOIN_CHAINPARAMSSEEDS_H\\n')\n     g.write('/**\\n')\n     g.write(' * List of fixed seed nodes for the bitcoin network\\n')\n-    g.write(' * AUTOGENERATED by contrib/seeds/generate-seeds.py\\n')\n+    g.write(' * AUTOGENERATED by share/seeds/generate-seeds.py\\n')\n     g.write(' *\\n')\n     g.write(' * Each line contains a 16-byte IPv6 address and a port.\\n')\n     g.write(' * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\\n')",
        "previous_filename": "contrib/seeds/generate-seeds.py"
      },
      {
        "sha": "3dba6d8a6482996b4e9fc9cd4c134b41aecae080",
        "filename": "share/seeds/nodes_main.txt",
        "status": "added",
        "additions": 540,
        "deletions": 0,
        "changes": 540,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/share/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/share/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/seeds/nodes_main.txt?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -0,0 +1,540 @@\n+# List of fixed seed nodes for main network\n+\n+# IPv4 nodes (generated using contrib/seeds/makeseeds.py)\n+1.33.197.110\n+1.34.180.245\n+1.202.128.218\n+2.35.195.25\n+5.100.123.19\n+5.175.145.169\n+5.199.133.193\n+5.199.151.10\n+5.228.1.230\n+14.200.200.145\n+18.228.0.188\n+18.228.0.200\n+23.30.243.153\n+23.88.232.49\n+23.99.105.9\n+23.226.137.208\n+23.227.177.161\n+23.227.191.50\n+23.229.45.32\n+23.236.144.69\n+23.253.148.113\n+23.253.241.22\n+23.255.227.231\n+24.20.205.222\n+24.23.120.252\n+24.94.98.96\n+24.98.95.201\n+24.111.90.55\n+24.119.119.105\n+24.138.25.149\n+31.3.214.45\n+31.186.87.46\n+31.186.101.98\n+31.186.250.186\n+31.204.153.107\n+37.44.16.231\n+37.44.44.11\n+37.120.168.204\n+37.143.86.26\n+37.187.75.24\n+37.188.68.169\n+37.192.95.150\n+37.201.246.116\n+37.205.10.140\n+46.10.210.17\n+46.19.138.154\n+46.28.204.123\n+46.28.205.67\n+46.38.235.229\n+46.163.76.230\n+46.166.162.91\n+46.173.190.50\n+46.227.66.132\n+46.229.238.187\n+46.236.116.209\n+47.55.14.65\n+50.7.252.229\n+50.46.159.91\n+50.78.49.181\n+50.78.231.57\n+50.79.153.65\n+50.116.34.44\n+50.126.86.253\n+50.142.41.23\n+50.199.113.193\n+50.200.78.107\n+50.206.138.177\n+50.252.52.49\n+54.165.25.75\n+54.169.107.40\n+54.179.190.56\n+54.187.82.121\n+54.246.85.246\n+58.74.7.205\n+58.96.183.121\n+61.62.58.38\n+61.63.91.72\n+61.63.91.112\n+61.72.211.228\n+62.43.40.154\n+62.43.130.178\n+62.80.185.213\n+62.109.49.26\n+62.173.139.58\n+62.181.238.186\n+62.210.114.127\n+63.141.228.138\n+63.153.213.78\n+63.223.84.145\n+63.251.88.112\n+64.31.110.50\n+64.34.121.45\n+64.114.6.42\n+64.140.125.98\n+64.156.193.100\n+65.30.47.116\n+65.35.132.177\n+65.96.193.165\n+65.111.189.26\n+66.68.10.30\n+66.114.33.250\n+66.130.46.63\n+66.175.215.135\n+66.190.253.165\n+66.194.38.254\n+66.244.98.111\n+67.162.238.30\n+67.169.255.17\n+67.183.173.25\n+67.219.233.140\n+67.227.240.115\n+67.247.222.71\n+68.43.114.66\n+68.52.33.36\n+68.198.245.241\n+69.12.226.165\n+69.13.198.188\n+69.15.179.62\n+69.39.239.47\n+69.47.45.87\n+69.62.217.206\n+69.64.42.31\n+69.64.81.61\n+69.67.219.200\n+69.90.132.157\n+69.94.30.177\n+69.136.175.241\n+70.61.97.228\n+70.123.118.132\n+71.59.152.182\n+71.198.248.151\n+71.200.242.89\n+71.225.179.157\n+72.14.187.51\n+72.38.34.180\n+72.52.72.187\n+72.91.144.182\n+72.167.49.217\n+72.201.243.55\n+72.223.60.249\n+72.228.153.102\n+73.26.101.228\n+73.50.158.200\n+73.181.204.170\n+74.57.199.180\n+74.63.222.226\n+74.81.231.21\n+74.193.126.82\n+74.207.235.164\n+75.83.197.114\n+75.144.114.9\n+76.112.5.247\n+76.174.20.247\n+77.37.240.142\n+77.57.202.107\n+77.172.123.53\n+77.221.91.253\n+77.235.48.48\n+77.245.78.2\n+78.8.58.249\n+78.27.191.182\n+78.129.236.141\n+78.131.88.47\n+78.157.205.6\n+79.132.230.144\n+79.143.188.155\n+79.160.221.140\n+79.161.111.114\n+80.100.189.3\n+80.147.140.121\n+80.203.75.133\n+80.220.99.227\n+80.222.20.169\n+80.241.1.7\n+81.23.191.243\n+81.38.11.202\n+81.80.9.71\n+81.110.213.165\n+81.133.155.237\n+81.171.34.37\n+81.181.155.180\n+82.39.156.137\n+82.73.161.95\n+82.130.45.40\n+82.165.153.47\n+82.168.128.133\n+82.179.225.118\n+82.194.245.158\n+82.199.102.10\n+82.211.30.243\n+82.217.133.145\n+82.221.128.35\n+82.221.131.177\n+82.233.225.205\n+83.0.249.146\n+83.89.31.249\n+83.128.29.231\n+83.128.253.142\n+83.143.130.56\n+83.150.2.99\n+83.150.9.196\n+83.161.64.45\n+83.212.103.212\n+83.212.111.114\n+83.246.75.8\n+83.254.81.31\n+83.254.150.54\n+84.2.34.104\n+84.15.61.60\n+84.17.25.135\n+84.42.144.19\n+84.212.210.135\n+84.215.165.231\n+84.238.140.176\n+84.240.31.184\n+85.25.214.137\n+85.139.163.132\n+85.199.4.228\n+85.214.61.209\n+85.214.108.77\n+86.123.16.17\n+87.48.42.199\n+87.104.168.104\n+87.229.73.171\n+87.236.196.77\n+88.97.56.98\n+88.134.178.89\n+88.150.233.19\n+88.168.133.3\n+88.208.18.246\n+88.208.33.202\n+89.18.28.21\n+89.85.220.84\n+89.163.227.28\n+89.184.83.60\n+89.231.96.83\n+89.236.49.117\n+91.90.66.209\n+91.106.194.97\n+91.134.75.115\n+91.152.193.36\n+91.152.219.35\n+91.197.10.234\n+91.209.77.101\n+91.210.106.147\n+91.214.200.205\n+91.223.115.38\n+91.234.48.232\n+91.250.86.18\n+92.27.7.209\n+92.255.207.73\n+93.74.163.234\n+93.84.114.106\n+93.152.166.29\n+93.171.216.221\n+93.185.177.71\n+94.19.12.244\n+94.42.115.50\n+94.79.177.206\n+94.136.147.119\n+94.143.245.5\n+94.188.50.39\n+94.190.227.112\n+94.198.135.29\n+94.226.107.86\n+94.242.219.90\n+94.242.229.168\n+94.244.160.84\n+95.31.10.209\n+95.85.25.41\n+95.105.161.136\n+95.154.165.45\n+95.154.200.216\n+95.167.109.125\n+95.211.125.231\n+95.211.216.235\n+96.33.25.17\n+96.43.130.178\n+97.118.8.236\n+98.102.6.125\n+98.202.20.45\n+98.217.125.225\n+98.234.210.111\n+98.237.20.123\n+98.255.144.176\n+99.113.64.43\n+99.229.22.8\n+103.1.212.19\n+103.30.42.189\n+103.224.165.48\n+103.243.94.140\n+104.131.107.107\n+104.131.116.184\n+104.143.0.156\n+104.219.184.9\n+106.185.38.174\n+107.6.4.145\n+107.150.8.27\n+107.150.33.20\n+107.170.228.129\n+107.170.240.173\n+108.51.20.86\n+108.61.149.222\n+108.61.151.172\n+108.161.129.247\n+108.170.140.21\n+109.60.211.216\n+109.73.42.36\n+109.73.172.138\n+109.163.235.239\n+109.190.196.220\n+109.201.135.216\n+109.228.152.2\n+109.228.154.81\n+109.230.220.125\n+109.234.156.218\n+109.235.49.27\n+109.235.69.84\n+112.124.71.0\n+113.146.68.251\n+115.29.17.82\n+115.70.176.17\n+117.41.162.184\n+118.27.8.170\n+119.230.7.211\n+119.246.71.52\n+121.172.8.100\n+122.128.109.148\n+123.231.224.63\n+128.175.195.31\n+128.199.164.96\n+128.199.254.244\n+129.97.69.76\n+129.123.7.7\n+129.123.7.39\n+129.186.17.17\n+131.247.169.190\n+133.242.209.63\n+134.102.94.38\n+134.119.17.145\n+137.116.160.176\n+137.226.34.42\n+138.210.217.170\n+141.255.166.194\n+143.215.129.126\n+144.76.244.19\n+146.148.52.162\n+146.148.80.57\n+146.185.19.30\n+146.185.142.86\n+146.185.253.51\n+148.251.6.214\n+149.154.155.235\n+149.210.133.244\n+151.224.248.252\n+153.121.75.229\n+153.127.251.67\n+154.20.2.139\n+157.13.61.5\n+158.58.173.48\n+159.253.23.132\n+162.209.110.218\n+162.213.254.205\n+162.239.254.100\n+162.242.150.39\n+162.243.81.138\n+162.243.235.56\n+162.244.79.16\n+162.245.217.119\n+162.248.102.117\n+162.251.108.53\n+162.254.149.139\n+162.255.116.78\n+166.70.94.106\n+167.88.45.124\n+167.88.120.210\n+173.26.49.43\n+173.30.14.6\n+173.80.114.197\n+173.167.214.243\n+173.208.219.108\n+173.220.67.156\n+173.236.101.34\n+173.246.107.34\n+173.255.237.241\n+174.2.213.209\n+174.51.23.224\n+174.51.123.159\n+174.57.212.121\n+174.109.33.28\n+175.126.124.91\n+175.126.124.92\n+176.10.116.242\n+176.36.35.126\n+176.36.99.222\n+176.124.110.47\n+176.194.33.44\n+176.223.201.198\n+178.62.26.83\n+178.62.36.48\n+178.62.212.141\n+178.62.254.59\n+178.78.250.3\n+178.155.86.226\n+178.175.134.35\n+178.248.111.4\n+178.254.1.170\n+178.254.34.161\n+179.43.114.14\n+182.213.208.28\n+184.68.2.46\n+184.72.238.42\n+184.94.226.34\n+184.94.227.58\n+184.107.139.58\n+184.107.206.45\n+185.10.48.117\n+185.21.216.156\n+185.38.47.224\n+185.45.192.129\n+185.53.129.230\n+185.53.131.114\n+185.55.53.61\n+185.55.53.63\n+185.61.119.2\n+185.61.148.203\n+186.2.167.23\n+188.92.75.178\n+188.122.92.134\n+188.138.9.208\n+188.165.209.148\n+188.226.206.239\n+190.10.8.124\n+190.10.10.147\n+192.0.130.142\n+192.3.89.159\n+192.73.234.138\n+192.75.95.107\n+192.95.100.102\n+192.155.84.181\n+192.169.233.206\n+192.198.93.86\n+192.227.135.216\n+193.0.109.3\n+193.77.50.208\n+193.109.68.62\n+193.150.121.37\n+193.224.69.98\n+194.79.8.37\n+194.141.86.10\n+195.12.180.94\n+195.56.63.10\n+195.116.93.93\n+195.154.174.226\n+195.159.111.98\n+195.169.138.2\n+195.189.126.35\n+195.197.175.190\n+197.242.93.82\n+198.11.214.147\n+198.49.41.21\n+199.33.124.186\n+199.204.186.146\n+199.233.238.115\n+199.241.189.66\n+202.60.68.242\n+202.60.69.232\n+203.183.151.39\n+203.219.14.204\n+204.44.123.109\n+204.44.123.162\n+204.45.120.178\n+206.190.134.44\n+206.248.184.127\n+207.244.73.8\n+208.66.30.27\n+209.81.9.223\n+209.105.243.229\n+209.126.70.159\n+209.140.30.169\n+209.165.128.235\n+209.190.2.242\n+210.66.254.236\n+210.73.27.33\n+211.72.66.229\n+212.25.37.124\n+212.71.235.114\n+212.71.252.109\n+212.114.48.31\n+212.174.151.118\n+213.66.205.194\n+213.129.248.139\n+213.136.87.34\n+213.165.82.133\n+213.167.17.6\n+213.179.158.253\n+213.189.53.125\n+213.222.208.93\n+216.49.158.161\n+216.55.143.154\n+216.131.91.100\n+216.245.206.181\n+216.250.138.230\n+217.11.225.189\n+217.23.6.133\n+217.75.88.178\n+217.172.143.140\n+217.195.169.209\n+217.196.248.106\n+219.138.161.162\n+222.167.248.90\n+223.18.254.55\n+\n+# Onion nodes\n+bitcoinostk4e4re.onion:8333\n+5k4vwyy5stro33fb.onion:8333\n+zy3kdqowmrb7xm7h.onion:8333\n+e3tn727fywnioxrc.onion:8333\n+kjy2eqzk4zwi5zd3.onion:8333\n+pt2awtcs2ulm75ig.onion:8333\n+td7tgof3imei3fm6.onion:8333\n+czsbwh4pq4mh3izl.onion:8333\n+xdnigz4qn5dbbw2t.onion:8333\n+ymnsfdejmc74vcfb.onion:7033\n+jxrvw5iqizppbgml.onion:8333\n+bk5ejfe56xakvtkk.onion:8333\n+szsm43ou7otwwyfv.onion:8333\n+5ghqw4wj6hpgfvdg.onion:8333\n+evolynhit7shzeet.onion:8333\n+4crhf372poejlc44.onion:8333\n+tfu4kqfhsw5slqp2.onion:8333\n+i2r5tbaizb75h26f.onion:8333\n+btcnet3utgzyz2bf.onion:8333\n+vso3r6cmjoomhhgg.onion:8333\n+pqosrh6wfaucet32.onion:8333\n+zy3kdqowmrb7xm7h.onion:8333\n+r4de4zf4lyniu4mx.onion:8444"
      },
      {
        "sha": "71782836feb433d40f4ea56020099b42193aaee7",
        "filename": "share/seeds/nodes_test.txt",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/share/seeds/nodes_test.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/share/seeds/nodes_test.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/seeds/nodes_test.txt?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -0,0 +1,5 @@\n+# List of fixed seed nodes for testnet\n+\n+# Onion nodes\n+thfsmmn2jbitcoin.onion\n+it2pj4f7657g3rhi.onion"
      },
      {
        "sha": "59618c4940d09ea853f1aface2e1790dbaf19ce8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -94,7 +94,6 @@ BITCOIN_CORE_H = \\\n   consensus/params.h \\\n   consensus/validation.h \\\n   core_io.h \\\n-  core_memusage.h \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n   hash.h \\\n@@ -112,7 +111,6 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   noui.h \\\n   policy/fees.h \\\n-  policy/policy.h \\\n   pow.h \\\n   primitives/block.h \\\n   primitives/transaction.h \\\n@@ -178,7 +176,6 @@ libbitcoin_server_a_SOURCES = \\\n   net.cpp \\\n   noui.cpp \\\n   policy/fees.cpp \\\n-  policy/policy.cpp \\\n   pow.cpp \\\n   rest.cpp \\\n   rpcblockchain.cpp \\"
      },
      {
        "sha": "6b7c42285d6e210b8a8853afd2dd1e48a67bf915",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -322,7 +322,7 @@ RES_MOVIES = $(wildcard qt/res/movies/spinner-*.png)\n BITCOIN_RC = qt/res/bitcoin-qt-res.rc\n \n BITCOIN_QT_INCLUDES = -I$(builddir)/qt -I$(srcdir)/qt -I$(srcdir)/qt/forms \\\n-  -I$(builddir)/qt/forms -DQT_NO_KEYWORDS\n+  -I$(builddir)/qt/forms\n \n qt_libbitcoinqt_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_DBUS_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)"
      },
      {
        "sha": "c41ee3f9fce566cc77a80629ba4e8f386161e691",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -8,6 +8,8 @@\n #include \"serialize.h\"\n #include \"streams.h\"\n \n+using namespace std;\n+\n int CAddrInfo::GetTriedBucket(const uint256& nKey) const\n {\n     uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetKey()).GetHash().GetCheapHash();\n@@ -66,7 +68,7 @@ double CAddrInfo::GetChance(int64_t nNow) const\n         fChance *= 0.01;\n \n     // deprioritize 66% after each failed attempt, but at most 1/28th to avoid the search taking forever or overly penalizing outages.\n-    fChance *= pow(0.66, std::min(nAttempts, 8));\n+    fChance *= pow(0.66, min(nAttempts, 8));\n \n     return fChance;\n }\n@@ -256,7 +258,7 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n         bool fCurrentlyOnline = (GetAdjustedTime() - addr.nTime < 24 * 60 * 60);\n         int64_t nUpdateInterval = (fCurrentlyOnline ? 60 * 60 : 24 * 60 * 60);\n         if (addr.nTime && (!pinfo->nTime || pinfo->nTime < addr.nTime - nUpdateInterval - nTimePenalty))\n-            pinfo->nTime = std::max((int64_t)0, addr.nTime - nTimePenalty);\n+            pinfo->nTime = max((int64_t)0, addr.nTime - nTimePenalty);\n \n         // add services\n         pinfo->nServices |= addr.nServices;\n@@ -281,7 +283,7 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n             return false;\n     } else {\n         pinfo = Create(addr, source, &nId);\n-        pinfo->nTime = std::max((int64_t)0, (int64_t)pinfo->nTime - nTimePenalty);\n+        pinfo->nTime = max((int64_t)0, (int64_t)pinfo->nTime - nTimePenalty);\n         nNew++;\n         fNew = true;\n     }"
      },
      {
        "sha": "373b0f39f3749ea386ea666d7172509df5eba994",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -458,7 +458,7 @@ class CAddrMan\n     }\n \n     //! Return the number of (unique) addresses in all tables.\n-    size_t size() const\n+    int size()\n     {\n         return vRandom.size();\n     }"
      },
      {
        "sha": "d451720141761021a817e8053ed9a904b07ccb02",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 25,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -97,6 +97,12 @@ static bool AppInitRPC(int argc, char* argv[])\n \n UniValue CallRPC(const string& strMethod, const UniValue& params)\n {\n+    if (mapArgs[\"-rpcuser\"] == \"\" && mapArgs[\"-rpcpassword\"] == \"\")\n+        throw runtime_error(strprintf(\n+            _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n+              \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n+                GetConfigFile().string().c_str()));\n+\n     // Connect to localhost\n     bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n     boost::asio::io_service io_service;\n@@ -110,24 +116,10 @@ UniValue CallRPC(const string& strMethod, const UniValue& params)\n     if (!fConnected)\n         throw CConnectionFailed(\"couldn't connect to server\");\n \n-    // Find credentials to use\n-    std::string strRPCUserColonPass;\n-    if (mapArgs[\"-rpcpassword\"] == \"\") {\n-        // Try fall back to cookie-based authentication if no password is provided\n-        if (!GetAuthCookie(&strRPCUserColonPass)) {\n-            throw runtime_error(strprintf(\n-                _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n-                  \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n-                    GetConfigFile().string().c_str()));\n-\n-        }\n-    } else {\n-        strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n-    }\n-\n     // HTTP basic authentication\n+    string strUserPass64 = EncodeBase64(mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"]);\n     map<string, string> mapRequestHeaders;\n-    mapRequestHeaders[\"Authorization\"] = string(\"Basic \") + EncodeBase64(strRPCUserColonPass);\n+    mapRequestHeaders[\"Authorization\"] = string(\"Basic \") + strUserPass64;\n \n     // Send request\n     string strRequest = JSONRPCRequest(strMethod, params, 1);\n@@ -198,15 +190,6 @@ int CommandLineRPC(int argc, char *argv[])\n                         throw CConnectionFailed(\"server in warmup\");\n                     strPrint = \"error: \" + error.write();\n                     nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-                    }\n                 } else {\n                     // Result\n                     if (result.isNull())"
      },
      {
        "sha": "45990f6bd8aa2d47482d98fa46a4afd423d166cc",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -8,7 +8,6 @@\n #include \"consensus/consensus.h\"\n #include \"core_io.h\"\n #include \"keystore.h\"\n-#include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "77854175186305890ff3a0eb2cbaeb29c485f667",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 56,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -16,45 +16,6 @@ using namespace std;\n \n #include \"chainparamsseeds.h\"\n \n-static CBlock CreateGenesisBlock(const char* pszTimestamp, CScript genesisOutputScript, uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n-{\n-    CMutableTransaction txNew;\n-    txNew.nVersion = 1;\n-    txNew.vin.resize(1);\n-    txNew.vout.resize(1);\n-    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n-    txNew.vout[0].nValue = genesisReward;\n-    txNew.vout[0].scriptPubKey = genesisOutputScript;\n-\n-    CBlock genesis;\n-    genesis.nTime    = nTime;\n-    genesis.nBits    = nBits;\n-    genesis.nNonce   = nNonce;\n-    genesis.nVersion = nVersion;\n-    genesis.vtx.push_back(txNew);\n-    genesis.hashPrevBlock.SetNull();\n-    genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n-    return genesis;\n-}\n-\n-/**\n- * Build the genesis block. Note that the output of its generation\n- * transaction cannot be spent since it did not originally exist in the\n- * database.\n- *\n- * CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n- *   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n- *     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n- *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n- *   vMerkleTree: 4a5e1e\n- */\n-static CBlock CreateGenesisBlock(uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n-{\n-    const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-    return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n-}\n-\n /**\n  * Main network\n  */\n@@ -89,9 +50,36 @@ class CMainParams : public CChainParams {\n         pchMessageStart[3] = 0xd9;\n         vAlertPubKey = ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\");\n         nDefaultPort = 8333;\n+        nMinerThreads = 0;\n         nPruneAfterHeight = 100000;\n \n-        genesis = CreateGenesisBlock();\n+        /**\n+         * Build the genesis block. Note that the output of its generation\n+         * transaction cannot be spent since it did not originally exist in the\n+         * database.\n+         *\n+         * CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n+         *   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n+         *     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n+         *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n+         *   vMerkleTree: 4a5e1e\n+         */\n+        const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n+        CMutableTransaction txNew;\n+        txNew.nVersion = 1;\n+        txNew.vin.resize(1);\n+        txNew.vout.resize(1);\n+        txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n+        txNew.vout[0].nValue = 50 * COIN;\n+        txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+        genesis.vtx.push_back(txNew);\n+        genesis.hashPrevBlock.SetNull();\n+        genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n+        genesis.nVersion = 1;\n+        genesis.nTime    = 1231006505;\n+        genesis.nBits    = 0x1d00ffff;\n+        genesis.nNonce   = 2083236893;\n+\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n@@ -111,6 +99,7 @@ class CMainParams : public CChainParams {\n \n         vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));\n \n+        fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = true;\n@@ -144,27 +133,26 @@ static CMainParams mainParams;\n /**\n  * Testnet (v3)\n  */\n-class CTestNetParams : public CChainParams {\n+class CTestNetParams : public CMainParams {\n public:\n     CTestNetParams() {\n         strNetworkID = \"test\";\n-        consensus.nSubsidyHalvingInterval = 210000;\n         consensus.nMajorityEnforceBlockUpgrade = 51;\n         consensus.nMajorityRejectBlockOutdated = 75;\n         consensus.nMajorityWindow = 100;\n-        consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n-        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-        consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n         pchMessageStart[3] = 0x07;\n         vAlertPubKey = ParseHex(\"04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a\");\n         nDefaultPort = 18333;\n+        nMinerThreads = 0;\n         nPruneAfterHeight = 1000;\n \n-        genesis = CreateGenesisBlock(1296688602, 414098458);\n+        //! Modify the testnet genesis block so the timestamp is valid for a later start.\n+        genesis.nTime = 1296688602;\n+        genesis.nNonce = 414098458;\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n \n@@ -183,6 +171,7 @@ class CTestNetParams : public CChainParams {\n \n         vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_test, pnSeed6_test + ARRAYLEN(pnSeed6_test));\n \n+        fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = false;\n@@ -204,7 +193,7 @@ static CTestNetParams testNetParams;\n /**\n  * Regression test\n  */\n-class CRegTestParams : public CChainParams {\n+class CRegTestParams : public CTestNetParams {\n public:\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n@@ -213,14 +202,14 @@ class CRegTestParams : public CChainParams {\n         consensus.nMajorityRejectBlockOutdated = 950;\n         consensus.nMajorityWindow = 1000;\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n-        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-        consensus.nPowTargetSpacing = 10 * 60;\n-        consensus.fPowAllowMinDifficultyBlocks = true;\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n-        genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff);\n+        nMinerThreads = 1;\n+        genesis.nTime = 1296688602;\n+        genesis.nBits = 0x207fffff;\n+        genesis.nNonce = 2;\n         consensus.hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n         assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n@@ -229,6 +218,7 @@ class CRegTestParams : public CChainParams {\n         vFixedSeeds.clear(); //! Regtest mode doesn't have any fixed seeds.\n         vSeeds.clear();  //! Regtest mode doesn't have any DNS seeds.\n \n+        fRequireRPCPassword = false;\n         fMiningRequiresPeers = false;\n         fDefaultConsistencyChecks = true;\n         fRequireStandard = false;\n@@ -242,11 +232,6 @@ class CRegTestParams : public CChainParams {\n             0,\n             0\n         };\n-        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n-        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n-        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n     }\n };\n static CRegTestParams regTestParams;"
      },
      {
        "sha": "8044b553e19a29be2fbb39e8960b2f83daa214d3",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -50,7 +50,10 @@ class CChainParams\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n \n+    /** Used if GenerateBitcoins is called with a negative number of threads */\n+    int DefaultMinerThreads() const { return nMinerThreads; }\n     const CBlock& GenesisBlock() const { return genesis; }\n+    bool RequireRPCPassword() const { return fRequireRPCPassword; }\n     /** Make miner wait to have peers to avoid wasting work */\n     bool MiningRequiresPeers() const { return fMiningRequiresPeers; }\n     /** Default value for -checkmempool and -checkblockindex argument */\n@@ -76,12 +79,14 @@ class CChainParams\n     //! Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;\n+    int nMinerThreads;\n     uint64_t nPruneAfterHeight;\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n     std::string strNetworkID;\n     CBlock genesis;\n     std::vector<SeedSpec6> vFixedSeeds;\n+    bool fRequireRPCPassword;\n     bool fMiningRequiresPeers;\n     bool fDefaultConsistencyChecks;\n     bool fRequireStandard;"
      },
      {
        "sha": "7d82d689ec45f9f96bcae66da6f196db4ee8323b",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -25,7 +25,7 @@ static CBaseMainParams mainParams;\n /**\n  * Testnet (v3)\n  */\n-class CBaseTestNetParams : public CBaseChainParams\n+class CBaseTestNetParams : public CBaseMainParams\n {\n public:\n     CBaseTestNetParams()\n@@ -39,12 +39,11 @@ static CBaseTestNetParams testNetParams;\n /*\n  * Regression test\n  */\n-class CBaseRegTestParams : public CBaseChainParams\n+class CBaseRegTestParams : public CBaseTestNetParams\n {\n public:\n     CBaseRegTestParams()\n     {\n-        nRPCPort = 18332;\n         strDataDir = \"regtest\";\n     }\n };"
      },
      {
        "sha": "6b6e5103f5fddce3439046d4ec0006a865730f53",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 462,
        "deletions": 811,
        "changes": 1273,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc"
      },
      {
        "sha": "92fae9847c3a1a177c1501ec3b42ccf884b49464",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -12,8 +12,6 @@ class CCoinControl\n {\n public:\n     CTxDestination destChange;\n-    //! If false, allows unselected inputs, but requires all selected inputs be used\n-    bool fAllowOtherInputs;\n \n     CCoinControl()\n     {\n@@ -23,7 +21,6 @@ class CCoinControl\n     void SetNull()\n     {\n         destChange = CNoDestination();\n-        fAllowOtherInputs = false;\n         setSelected.clear();\n     }\n \n@@ -53,7 +50,7 @@ class CCoinControl\n         setSelected.clear();\n     }\n \n-    void ListSelected(std::vector<COutPoint>& vOutpoints) const\n+    void ListSelected(std::vector<COutPoint>& vOutpoints)\n     {\n         vOutpoints.assign(setSelected.begin(), setSelected.end());\n     }"
      },
      {
        "sha": "a41d5a310d6b9cb9b9e0537c2b2c3a4f96fbd866",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -83,7 +83,7 @@ CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const\n         // version as fresh.\n         ret->second.flags = CCoinsCacheEntry::FRESH;\n     }\n-    cachedCoinsUsage += ret->second.coins.DynamicMemoryUsage();\n+    cachedCoinsUsage += memusage::DynamicUsage(ret->second.coins);\n     return ret;\n }\n \n@@ -110,7 +110,7 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n             ret.first->second.flags = CCoinsCacheEntry::FRESH;\n         }\n     } else {\n-        cachedCoinUsage = ret.first->second.coins.DynamicMemoryUsage();\n+        cachedCoinUsage = memusage::DynamicUsage(ret.first->second.coins);\n     }\n     // Assume that whenever ModifyCoins is called, the entry will be modified.\n     ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n@@ -159,21 +159,21 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                     assert(it->second.flags & CCoinsCacheEntry::FRESH);\n                     CCoinsCacheEntry& entry = cacheCoins[it->first];\n                     entry.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += entry.coins.DynamicMemoryUsage();\n+                    cachedCoinsUsage += memusage::DynamicUsage(entry.coins);\n                     entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n                 }\n             } else {\n                 if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n                     // The grandparent does not have an entry, and the child is\n                     // modified and being pruned. This means we can just delete\n                     // it from the parent.\n-                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n+                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n                     cacheCoins.erase(itUs);\n                 } else {\n                     // A normal modification.\n-                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n+                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n                     itUs->second.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += itUs->second.coins.DynamicMemoryUsage();\n+                    cachedCoinsUsage += memusage::DynamicUsage(itUs->second.coins);\n                     itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n                 }\n             }\n@@ -261,6 +261,6 @@ CCoinsModifier::~CCoinsModifier()\n         cache.cacheCoins.erase(it);\n     } else {\n         // If the coin still exists after the modification, add the new usage\n-        cache.cachedCoinsUsage += it->second.coins.DynamicMemoryUsage();\n+        cache.cachedCoinsUsage += memusage::DynamicUsage(it->second.coins);\n     }\n }"
      },
      {
        "sha": "a4671645df5db0e770b066481fb0d9d7e235a52c",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -7,7 +7,6 @@\n #define BITCOIN_COINS_H\n \n #include \"compressor.h\"\n-#include \"core_memusage.h\"\n #include \"memusage.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -258,7 +257,8 @@ class CCoins\n     size_t DynamicMemoryUsage() const {\n         size_t ret = memusage::DynamicUsage(vout);\n         BOOST_FOREACH(const CTxOut &out, vout) {\n-            ret += RecursiveDynamicUsage(out.scriptPubKey);\n+            const std::vector<unsigned char> *script = &out.scriptPubKey;\n+            ret += memusage::DynamicUsage(*script);\n         }\n         return ret;\n     }"
      },
      {
        "sha": "7a5438a11e67351ab809ede2667dbf90c14a4a5e",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -92,12 +92,4 @@ typedef u_int SOCKET;\n size_t strnlen( const char *start, size_t max_len);\n #endif // HAVE_DECL_STRNLEN\n \n-bool static inline IsSelectableSocket(SOCKET s) {\n-#ifdef WIN32\n-    return true;\n-#else\n-    return (s < FD_SETSIZE);\n-#endif\n-}\n-\n #endif // BITCOIN_COMPAT_H"
      },
      {
        "sha": "9c5b7d4ffb0ea7179ad0ff6a8c5b2b4688aef144",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -12,5 +12,7 @@ static const unsigned int MAX_BLOCK_SIZE = 1000000;\n static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n+/** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n+static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "711135bb444390b85d895e7fab3d3788bedf1e99",
        "filename": "src/core_memusage.h",
        "status": "removed",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,62 +0,0 @@\n-// Copyright (c) 2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_CORE_MEMUSAGE_H\n-#define BITCOIN_CORE_MEMUSAGE_H\n-\n-#include \"primitives/transaction.h\"\n-#include \"primitives/block.h\"\n-#include \"memusage.h\"\n-\n-static inline size_t RecursiveDynamicUsage(const CScript& script) {\n-    return memusage::DynamicUsage(*static_cast<const std::vector<unsigned char>*>(&script));\n-}\n-\n-static inline size_t RecursiveDynamicUsage(const COutPoint& out) {\n-    return 0;\n-}\n-\n-static inline size_t RecursiveDynamicUsage(const CTxIn& in) {\n-    return RecursiveDynamicUsage(in.scriptSig) + RecursiveDynamicUsage(in.prevout);\n-}\n-\n-static inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n-    return RecursiveDynamicUsage(out.scriptPubKey);\n-}\n-\n-static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n-    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n-    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n-        mem += RecursiveDynamicUsage(*it);\n-    }\n-    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n-        mem += RecursiveDynamicUsage(*it);\n-    }\n-    return mem;\n-}\n-\n-static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n-    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n-    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n-        mem += RecursiveDynamicUsage(*it);\n-    }\n-    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n-        mem += RecursiveDynamicUsage(*it);\n-    }\n-    return mem;\n-}\n-\n-static inline size_t RecursiveDynamicUsage(const CBlock& block) {\n-    size_t mem = memusage::DynamicUsage(block.vtx) + memusage::DynamicUsage(block.vMerkleTree);\n-    for (std::vector<CTransaction>::const_iterator it = block.vtx.begin(); it != block.vtx.end(); it++) {\n-        mem += RecursiveDynamicUsage(*it);\n-    }\n-    return mem;\n-}\n-\n-static inline size_t RecursiveDynamicUsage(const CBlockLocator& locator) {\n-    return memusage::DynamicUsage(locator.vHave);\n-}\n-\n-#endif // BITCOIN_CORE_MEMUSAGE_H"
      },
      {
        "sha": "b5f9a0310fb3488daa4fe99d664378c458c3c1c3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 91,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -18,7 +18,6 @@\n #include \"main.h\"\n #include \"miner.h\"\n #include \"net.h\"\n-#include \"policy/policy.h\"\n #include \"rpcserver.h\"\n #include \"script/standard.h\"\n #include \"scheduler.h\"\n@@ -157,8 +156,8 @@ void Shutdown()\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n         pwalletMain->Flush(false);\n+    GenerateBitcoins(false, NULL, 0);\n #endif\n-    GenerateBitcoins(false, 0, Params());\n     StopNode();\n     UnregisterNodeSignals(GetNodeSignals());\n \n@@ -267,7 +266,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     // Do not translate _(...) -help-debug options, Many technical terms, and only a very small audience, so is unnecessary stress to translators.\n     string strUsage = HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n-    strUsage += HelpMessageOpt(\"-alerts\", strprintf(_(\"Receive and display P2P network alerts (default: %u)\"), DEFAULT_ALERTS));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n     strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288));\n@@ -284,7 +282,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n-        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n+        -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\"));\n #endif\n@@ -330,7 +328,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n-    strUsage += HelpMessageOpt(\"-whiteconnections=<n>\", strprintf(_(\"Reserve this many inbound connections for whitelisted peers (default: %d)\"), 0));\n \n #ifdef ENABLE_WALLET\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n@@ -372,8 +369,10 @@ std::string HelpMessage(HelpMessageMode mode)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n+#ifdef ENABLE_WALLET\n     strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n+#endif\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n     strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n@@ -396,8 +395,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n \n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n \n@@ -668,9 +665,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n     fLogIPs = GetBoolArg(\"-logips\", false);\n \n-    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n-    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n-\n     // when specifying an explicit binding address, you want to listen on it\n     // even when -connect or -proxy is specified\n     if (mapArgs.count(\"-bind\")) {\n@@ -729,6 +723,16 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n     }\n \n+    // Make sure enough file descriptors are available\n+    int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n+    nMaxConnections = GetArg(\"-maxconnections\", 125);\n+    nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n+    int nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS);\n+    if (nFD < MIN_CORE_FILEDESCRIPTORS)\n+        return InitError(_(\"Not enough file descriptors available.\"));\n+    if (nFD - MIN_CORE_FILEDESCRIPTORS < nMaxConnections)\n+        nMaxConnections = nFD - MIN_CORE_FILEDESCRIPTORS;\n+\n     // if using block pruning, then disable txindex\n     if (GetArg(\"-prune\", 0)) {\n         if (GetBoolArg(\"-txindex\", false))\n@@ -739,47 +743,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n #endif\n     }\n-    \n-    // Make sure enough file descriptors are available\n-    int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n-    int nUserMaxConnections = GetArg(\"-maxconnections\", 125);\n-    nMaxConnections = std::max(nUserMaxConnections, 0);\n-    int nUserWhiteConnections = GetArg(\"-whiteconnections\", 0);\n-    nWhiteConnections = std::max(nUserWhiteConnections, 0);\n-\n-    if ((mapArgs.count(\"-whitelist\")) || (mapArgs.count(\"-whitebind\"))) {\n-        if (!(mapArgs.count(\"-maxconnections\"))) {\n-            // User is using whitelist feature,\n-            // but did not specify -maxconnections parameter.\n-            // Silently increase the default to compensate,\n-            // so that the whitelist connection reservation feature\n-            // does not inadvertently reduce the default\n-            // inbound connection capacity of the network.\n-            nMaxConnections += nWhiteConnections;\n-        }\n-    } else {\n-        // User not using whitelist feature.\n-        // Silently disable connection reservation,\n-        // for the same reason as above.\n-        nWhiteConnections = 0;\n-    }\n-\n-    // Trim requested connection counts, to fit into system limitations\n-    nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n-    int nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS);\n-    if (nFD < MIN_CORE_FILEDESCRIPTORS)\n-        return InitError(_(\"Not enough file descriptors available.\"));\n-    nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS, nMaxConnections);\n-\n-    if (nMaxConnections < nUserMaxConnections)\n-        InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n-\n-    // Connection capacity is prioritized in this order:\n-    // outbound connections (hardcoded to 8),\n-    // then whitelisted connections,\n-    // then non-whitelisted connections get whatever's left (if any).\n-    if ((nWhiteConnections > 0) && (nWhiteConnections >= (nMaxConnections - 8)))\n-        InitWarning(strprintf(_(\"All non-whitelisted incoming connections will be dropped, because -whiteconnections is %d and -maxconnections is only %d.\"), nWhiteConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n \n@@ -810,7 +773,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (nScriptCheckThreads <= 0)\n-        nScriptCheckThreads += GetNumCores();\n+        nScriptCheckThreads += boost::thread::hardware_concurrency();\n     if (nScriptCheckThreads <= 1)\n         nScriptCheckThreads = 0;\n     else if (nScriptCheckThreads > MAX_SCRIPTCHECK_THREADS)\n@@ -855,10 +818,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));\n     }\n \n-    fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !Params().RequireStandard());\n-    if (Params().RequireStandard() && !fRequireStandard)\n-        return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n-\n #ifdef ENABLE_WALLET\n     if (mapArgs.count(\"-mintxfee\"))\n     {\n@@ -906,11 +865,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", true);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n-    fAlerts = GetBoolArg(\"-alerts\", DEFAULT_ALERTS);\n-\n-    // Option to startup with mocktime set (used for regression testing):\n-    SetMockTime(GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n-\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     // Initialize elliptic curve code\n@@ -944,10 +898,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #endif\n     if (GetBoolArg(\"-shrinkdebugfile\", !fDebug))\n         ShrinkDebugFile();\n-\n-    if (fPrintToDebugLog)\n-        OpenDebugLog();\n-\n+    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n+    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n     LogPrintf(\"Using OpenSSL version %s\\n\", SSLeay_version(SSLEAY_VERSION));\n #ifdef ENABLE_WALLET\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n@@ -958,8 +910,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"Using data directory %s\\n\", strDataDir);\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile().string());\n     LogPrintf(\"Using at most %i connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n-    if (nWhiteConnections > 0)\n-        LogPrintf(\"Reserving %i of these connections for whitelisted inbound peers\\n\", nWhiteConnections);\n     std::ostringstream strErrors;\n \n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n@@ -1034,36 +984,31 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", true);\n-    // -proxy sets a proxy for all outgoing network traffic\n-    // -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default\n-    std::string proxyArg = GetArg(\"-proxy\", \"\");\n-    if (proxyArg != \"\" && proxyArg != \"0\") {\n-        proxyType addrProxy = proxyType(CService(proxyArg, 9050), proxyRandomize);\n+    proxyType addrProxy;\n+    bool fProxy = false;\n+    if (mapArgs.count(\"-proxy\")) {\n+        addrProxy = proxyType(CService(mapArgs[\"-proxy\"], 9050), GetBoolArg(\"-proxyrandomize\", true));\n         if (!addrProxy.IsValid())\n-            return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), proxyArg));\n+            return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), mapArgs[\"-proxy\"]));\n \n         SetProxy(NET_IPV4, addrProxy);\n         SetProxy(NET_IPV6, addrProxy);\n-        SetProxy(NET_TOR, addrProxy);\n         SetNameProxy(addrProxy);\n-        SetReachable(NET_TOR); // by default, -proxy sets onion as reachable, unless -noonion later\n+        fProxy = true;\n     }\n \n-    // -onion can be used to set only a proxy for .onion, or override normal proxy for .onion addresses\n-    // -noonion (or -onion=0) disables connecting to .onion entirely\n-    // An empty string is used to not override the onion proxy (in which case it defaults to -proxy set above, or none)\n-    std::string onionArg = GetArg(\"-onion\", \"\");\n-    if (onionArg != \"\") {\n-        if (onionArg == \"0\") { // Handle -noonion/-onion=0\n-            SetReachable(NET_TOR, false); // set onions as unreachable\n-        } else {\n-            proxyType addrOnion = proxyType(CService(onionArg, 9050), proxyRandomize);\n-            if (!addrOnion.IsValid())\n-                return InitError(strprintf(_(\"Invalid -onion address: '%s'\"), onionArg));\n-            SetProxy(NET_TOR, addrOnion);\n-            SetReachable(NET_TOR);\n-        }\n+    // -onion can override normal proxy, -noonion disables connecting to .onion entirely\n+    if (!(mapArgs.count(\"-onion\") && mapArgs[\"-onion\"] == \"0\") &&\n+        (fProxy || mapArgs.count(\"-onion\"))) {\n+        proxyType addrOnion;\n+        if (!mapArgs.count(\"-onion\"))\n+            addrOnion = addrProxy;\n+        else\n+            addrOnion = proxyType(CService(mapArgs[\"-onion\"], 9050), GetBoolArg(\"-proxyrandomize\", true));\n+        if (!addrOnion.IsValid())\n+            return InitError(strprintf(_(\"Invalid -onion address: '%s'\"), mapArgs[\"-onion\"]));\n+        SetProxy(NET_TOR, addrOnion);\n+        SetReachable(NET_TOR);\n     }\n \n     // see Step 2: parameter interactions for more information about these\n@@ -1483,8 +1428,11 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                                          boost::ref(cs_main), boost::cref(pindexBestHeader), nPowTargetSpacing);\n     scheduler.scheduleEvery(f, nPowTargetSpacing);\n \n+#ifdef ENABLE_WALLET\n     // Generate coins in the background\n-    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", 1), Params());\n+    if (pwalletMain)\n+        GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain, GetArg(\"-genproclimit\", 1));\n+#endif\n \n     // ********************************************************* Step 11: finished\n "
      },
      {
        "sha": "082ef6b6b23bffa61bf259e36728ef14a7c4759b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 173,
        "deletions": 40,
        "changes": 213,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -11,12 +11,10 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n-#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n-#include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n@@ -59,12 +57,10 @@ bool fTxIndex = false;\n bool fHavePruned = false;\n bool fPruneMode = false;\n bool fIsBareMultisigStd = true;\n-bool fRequireStandard = true;\n bool fCheckBlockIndex = false;\n bool fCheckpointsEnabled = true;\n size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n-bool fAlerts = DEFAULT_ALERTS;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n CFeeRate minRelayTxFee = CFeeRate(1000);\n@@ -75,9 +71,9 @@ struct COrphanTx {\n     CTransaction tx;\n     NodeId fromPeer;\n };\n-map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);;\n-map<uint256, set<uint256> > mapOrphanTransactionsByPrev GUARDED_BY(cs_main);;\n-void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+map<uint256, COrphanTx> mapOrphanTransactions;\n+map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n+void EraseOrphansFor(NodeId peer);\n \n /**\n  * Returns true if there are nRequired or more blocks of minVersion or above\n@@ -437,14 +433,13 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n \n         // Iterate over those blocks in vToFetch (in forward direction), adding the ones that\n         // are not yet downloaded and not in flight to vBlocks. In the mean time, update\n-        // pindexLastCommonBlock as long as all ancestors are already downloaded, or if it's\n-        // already part of our chain (and therefore don't need it even if pruned).\n+        // pindexLastCommonBlock as long as all ancestors are already downloaded.\n         BOOST_FOREACH(CBlockIndex* pindex, vToFetch) {\n             if (!pindex->IsValid(BLOCK_VALID_TREE)) {\n                 // We consider the chain that this peer is on invalid.\n                 return;\n             }\n-            if (pindex->nStatus & BLOCK_HAVE_DATA || chainActive.Contains(pindex)) {\n+            if (pindex->nStatus & BLOCK_HAVE_DATA) {\n                 if (pindex->nChainTx)\n                     state->pindexLastCommonBlock = pindex;\n             } else if (mapBlocksInFlight.count(pindex->GetBlockHash()) == 0) {\n@@ -527,7 +522,7 @@ CBlockTreeDB *pblocktree = NULL;\n // mapOrphanTransactions\n //\n \n-bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool AddOrphanTx(const CTransaction& tx, NodeId peer)\n {\n     uint256 hash = tx.GetHash();\n     if (mapOrphanTransactions.count(hash))\n@@ -557,7 +552,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n     return true;\n }\n \n-void static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+void static EraseOrphanTx(uint256 hash)\n {\n     map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n@@ -591,7 +586,7 @@ void EraseOrphansFor(NodeId peer)\n }\n \n \n-unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n {\n     unsigned int nEvicted = 0;\n     while (mapOrphanTransactions.size() > nMaxOrphans)\n@@ -607,6 +602,76 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n     return nEvicted;\n }\n \n+\n+\n+\n+\n+\n+\n+bool IsStandardTx(const CTransaction& tx, string& reason)\n+{\n+    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n+        reason = \"version\";\n+        return false;\n+    }\n+\n+    // Extremely large transactions with lots of inputs can cost the network\n+    // almost as much to process as they cost the sender in fees, because\n+    // computing signature hashes is O(ninputs*txsize). Limiting transactions\n+    // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n+    if (sz >= MAX_STANDARD_TX_SIZE) {\n+        reason = \"tx-size\";\n+        return false;\n+    }\n+\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n+        // keys. (remember the 520 byte limit on redeemScript size) That works\n+        // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)+3=1627\n+        // bytes of scriptSig, which we round off to 1650 bytes for some minor\n+        // future-proofing. That's also enough to spend a 20-of-20\n+        // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n+        // considered standard)\n+        if (txin.scriptSig.size() > 1650) {\n+            reason = \"scriptsig-size\";\n+            return false;\n+        }\n+        if (!txin.scriptSig.IsPushOnly()) {\n+            reason = \"scriptsig-not-pushonly\";\n+            return false;\n+        }\n+    }\n+\n+    unsigned int nDataOut = 0;\n+    txnouttype whichType;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n+        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n+            reason = \"scriptpubkey\";\n+            return false;\n+        }\n+\n+        if (whichType == TX_NULL_DATA)\n+            nDataOut++;\n+        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n+            reason = \"bare-multisig\";\n+            return false;\n+        } else if (txout.IsDust(::minRelayTxFee)) {\n+            reason = \"dust\";\n+            return false;\n+        }\n+    }\n+\n+    // only one OP_RETURN txout is permitted\n+    if (nDataOut > 1) {\n+        reason = \"multi-op-return\";\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {\n     if (tx.nLockTime == 0)\n@@ -625,6 +690,74 @@ bool CheckFinalTx(const CTransaction &tx)\n     return IsFinalTx(tx, chainActive.Height() + 1, GetAdjustedTime());\n }\n \n+/**\n+ * Check transaction inputs to mitigate two\n+ * potential denial-of-service attacks:\n+ *\n+ * 1. scriptSigs with extra data stuffed into them,\n+ *    not consumed by scriptPubKey (or P2SH script)\n+ * 2. P2SH scripts with a crazy number of expensive\n+ *    CHECKSIG/CHECKMULTISIG operations\n+ */\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    if (tx.IsCoinBase())\n+        return true; // Coinbases don't use vin normally\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n+\n+        vector<vector<unsigned char> > vSolutions;\n+        txnouttype whichType;\n+        // get the scriptPubKey corresponding to this input:\n+        const CScript& prevScript = prev.scriptPubKey;\n+        if (!Solver(prevScript, whichType, vSolutions))\n+            return false;\n+        int nArgsExpected = ScriptSigArgsExpected(whichType, vSolutions);\n+        if (nArgsExpected < 0)\n+            return false;\n+\n+        // Transactions with extra stuff in their scriptSigs are\n+        // non-standard. Note that this EvalScript() call will\n+        // be quick, because if there are any operations\n+        // beside \"push data\" in the scriptSig\n+        // IsStandardTx() will have already returned false\n+        // and this method isn't called.\n+        vector<vector<unsigned char> > stack;\n+        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n+            return false;\n+\n+        if (whichType == TX_SCRIPTHASH)\n+        {\n+            if (stack.empty())\n+                return false;\n+            CScript subscript(stack.back().begin(), stack.back().end());\n+            vector<vector<unsigned char> > vSolutions2;\n+            txnouttype whichType2;\n+            if (Solver(subscript, whichType2, vSolutions2))\n+            {\n+                int tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n+                if (tmpExpected < 0)\n+                    return false;\n+                nArgsExpected += tmpExpected;\n+            }\n+            else\n+            {\n+                // Any other Script with less than 15 sigops OK:\n+                unsigned int sigops = subscript.GetSigOpCount(true);\n+                // ... extra data left on the stack after execution is OK, too:\n+                return (sigops <= MAX_P2SH_SIGOPS);\n+            }\n+        }\n+\n+        if (stack.size() != (unsigned int)nArgsExpected)\n+            return false;\n+    }\n+\n+    return true;\n+}\n+\n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n {\n     unsigned int nSigOps = 0;\n@@ -765,7 +898,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n-    if (fRequireStandard && !IsStandardTx(tx, reason))\n+    if (Params().RequireStandard() && !IsStandardTx(tx, reason))\n         return state.DoS(0,\n                          error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n                          REJECT_NONSTANDARD, reason);\n@@ -836,7 +969,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (fRequireStandard && !AreInputsStandard(tx, view))\n+        if (Params().RequireStandard() && !AreInputsStandard(tx, view))\n             return error(\"AcceptToMemoryPool: nonstandard transaction input\");\n \n         // Check that the transaction doesn't have an excessive number of\n@@ -2059,14 +2192,15 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     LogPrint(\"bench\", \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n     {\n         CCoinsViewCache view(pcoinsTip);\n+        CInv inv(MSG_BLOCK, pindexNew->GetBlockHash());\n         bool rv = ConnectBlock(*pblock, state, pindexNew, view);\n         GetMainSignals().BlockChecked(*pblock, state);\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n             return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n-        mapBlockSource.erase(pindexNew->GetBlockHash());\n+        mapBlockSource.erase(inv.hash);\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n         LogPrint(\"bench\", \"  - Connect total: %.2fms [%.2fs]\\n\", (nTime3 - nTime2) * 0.001, nTimeConnectTotal * 0.000001);\n         assert(view.Flush());\n@@ -2674,37 +2808,36 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     uint256 hash = block.GetHash();\n     BlockMap::iterator miSelf = mapBlockIndex.find(hash);\n     CBlockIndex *pindex = NULL;\n-    if (hash != chainparams.GetConsensus().hashGenesisBlock) {\n-\n-        if (miSelf != mapBlockIndex.end()) {\n-            // Block header is already known.\n-            pindex = miSelf->second;\n-            if (ppindex)\n-                *ppindex = pindex;\n-            if (pindex->nStatus & BLOCK_FAILED_MASK)\n-                return state.Invalid(error(\"%s: block is marked invalid\", __func__), 0, \"duplicate\");\n-            return true;\n-        }\n+    if (miSelf != mapBlockIndex.end()) {\n+        // Block header is already known.\n+        pindex = miSelf->second;\n+        if (ppindex)\n+            *ppindex = pindex;\n+        if (pindex->nStatus & BLOCK_FAILED_MASK)\n+            return state.Invalid(error(\"%s: block is marked invalid\", __func__), 0, \"duplicate\");\n+        return true;\n+    }\n \n-        if (!CheckBlockHeader(block, state))\n-            return false;\n+    if (!CheckBlockHeader(block, state))\n+        return false;\n \n-        // Get prev block index\n-        CBlockIndex* pindexPrev = NULL;\n+    // Get prev block index\n+    CBlockIndex* pindexPrev = NULL;\n+    if (hash != chainparams.GetConsensus().hashGenesisBlock) {\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n             return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+    }\n+    assert(pindexPrev);\n+    if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, hash))\n+        return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n-        assert(pindexPrev);\n-        if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, hash))\n-            return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n+    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n+        return false;\n \n-        if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n-            return false;\n-    }\n     if (pindex == NULL)\n         pindex = AddToBlockIndex(block);\n \n@@ -3649,7 +3782,7 @@ std::string GetWarnings(const std::string& strFor)\n //\n \n \n-bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool static AlreadyHave(const CInv& inv)\n {\n     switch (inv.type)\n     {\n@@ -4493,7 +4626,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (fAlerts && strCommand == \"alert\")\n+    else if (strCommand == \"alert\")\n     {\n         CAlert alert;\n         vRecv >> alert;\n@@ -4823,7 +4956,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n                 else\n                 {\n-                    CNode::Ban(pto->addr, BanReasonNodeMisbehaving);\n+                    CNode::Ban(pto->addr);\n                 }\n             }\n             state.fShouldBan = false;"
      },
      {
        "sha": "d87fec78688b2079bb67105100c450a2d095323f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 38,
        "deletions": 6,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -14,6 +14,7 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"coins.h\"\n+#include \"consensus/consensus.h\"\n #include \"net.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n@@ -46,8 +47,17 @@ class CValidationState;\n \n struct CNodeStateStats;\n \n-/** Default for accepting alerts from the P2P network. */\n-static const bool DEFAULT_ALERTS = true;\n+/** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n+static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n+static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n+/** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n+static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n+/** The maximum size for transactions we're willing to relay/mine */\n+static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n+/** Maximum number of signature check operations in an IsStandard() P2SH script */\n+static const unsigned int MAX_P2SH_SIGOPS = 15;\n+/** The maximum number of sigops we're willing to relay/mine in a single tx */\n+static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n@@ -99,12 +109,10 @@ extern bool fReindex;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern bool fIsBareMultisigStd;\n-extern bool fRequireStandard;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;\n extern CFeeRate minRelayTxFee;\n-extern bool fAlerts;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;\n@@ -120,7 +128,7 @@ extern bool fPruneMode;\n /** Number of MiB of block files that we're trying to stay below. */\n extern uint64_t nPruneTarget;\n /** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of chainActive.Tip() will not be pruned. */\n-static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n+static const signed int MIN_BLOCKS_TO_KEEP = 288;\n \n // Require that user allocate at least 550MB for block & undo files (blk???.dat and rev???.dat)\n // At 1MB per block, 288 blocks = 288MB.\n@@ -130,7 +138,7 @@ static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n // full block file chunks, we need the high water mark which triggers the prune to be\n // one 128MB block file + added 15% undo data = 147MB greater for a total of 545MB\n // Setting the target to > than 550MB will make it likely we can respect the target.\n-static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n+static const signed int MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n /** Register with a network node to receive its signals */\n void RegisterNodeSignals(CNodeSignals& nodeSignals);\n@@ -262,6 +270,25 @@ struct CDiskTxPos : public CDiskBlockPos\n \n CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n \n+/**\n+ * Check transaction inputs, and make sure any\n+ * pay-to-script-hash transactions are evaluating IsStandard scripts\n+ * \n+ * Why bother? To avoid denial-of-service attacks; an attacker\n+ * can submit a standard HASH... OP_EQUAL transaction,\n+ * which will get accepted into blocks. The redemption\n+ * script can be anything; an attacker could use a very\n+ * expensive-to-check-upon-redemption script like:\n+ *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+ */\n+\n+/** \n+ * Check for standard transaction types\n+ * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n+ * @return True if all inputs (scriptSigs) use only standard transaction forms\n+ */\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+\n /** \n  * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n  * @return number of sigops this transaction's outputs will produce when spent\n@@ -293,6 +320,11 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n /** Context-independent validity checks */\n bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n \n+/** Check for standard transaction types\n+ * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n+ */\n+bool IsStandardTx(const CTransaction& tx, std::string& reason);\n+\n /**\n  * Check if transaction is final and can be included in a block with the\n  * specified height and time. Consensus critical."
      },
      {
        "sha": "9f7de9e2e165d595b60e0540bd68ce9bc1acc997",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 15,
        "deletions": 16,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -11,7 +11,6 @@\n #include <set>\n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/unordered_set.hpp>\n #include <boost/unordered_map.hpp>\n \n@@ -21,27 +20,19 @@ namespace memusage\n /** Compute the total memory used by allocating alloc bytes. */\n static size_t MallocUsage(size_t alloc);\n \n-/** Dynamic memory usage for built-in types is zero. */\n-static inline size_t DynamicUsage(const int8_t& v) { return 0; }\n-static inline size_t DynamicUsage(const uint8_t& v) { return 0; }\n-static inline size_t DynamicUsage(const int16_t& v) { return 0; }\n-static inline size_t DynamicUsage(const uint16_t& v) { return 0; }\n-static inline size_t DynamicUsage(const int32_t& v) { return 0; }\n-static inline size_t DynamicUsage(const uint32_t& v) { return 0; }\n-static inline size_t DynamicUsage(const int64_t& v) { return 0; }\n-static inline size_t DynamicUsage(const uint64_t& v) { return 0; }\n-static inline size_t DynamicUsage(const float& v) { return 0; }\n-static inline size_t DynamicUsage(const double& v) { return 0; }\n-template<typename X> static inline size_t DynamicUsage(X * const &v) { return 0; }\n-template<typename X> static inline size_t DynamicUsage(const X * const &v) { return 0; }\n-\n /** Compute the memory used for dynamically allocated but owned data structures.\n  *  For generic data types, this is *not* recursive. DynamicUsage(vector<vector<int> >)\n  *  will compute the memory used for the vector<int>'s, but not for the ints inside.\n  *  This is for efficiency reasons, as these functions are intended to be fast. If\n  *  application data structures require more accurate inner accounting, they should\n- *  iterate themselves, or use more efficient caching + updating on modification.\n+ *  do the recursion themselves, or use more efficient caching + updating on modification.\n  */\n+template<typename X> static size_t DynamicUsage(const std::vector<X>& v);\n+template<typename X> static size_t DynamicUsage(const std::set<X>& s);\n+template<typename X, typename Y> static size_t DynamicUsage(const std::map<X, Y>& m);\n+template<typename X, typename Y> static size_t DynamicUsage(const boost::unordered_set<X, Y>& s);\n+template<typename X, typename Y, typename Z> static size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& s);\n+template<typename X> static size_t DynamicUsage(const X& x);\n \n static inline size_t MallocUsage(size_t alloc)\n {\n@@ -107,6 +98,14 @@ static inline size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& m)\n     return MallocUsage(sizeof(boost_unordered_node<std::pair<const X, Y> >)) * m.size() + MallocUsage(sizeof(void*) * m.bucket_count());\n }\n \n+// Dispatch to class method as fallback\n+\n+template<typename X>\n+static inline size_t DynamicUsage(const X& x)\n+{\n+    return x.DynamicMemoryUsage();\n+}\n+\n }\n \n #endif"
      },
      {
        "sha": "f5919ca3af8938a4d9a49d51a3205b8c7bcc9546",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 20,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -12,13 +12,14 @@\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n-#include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"primitives/transaction.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n-#include \"validationinterface.h\"\n+#ifdef ENABLE_WALLET\n+#include \"wallet/wallet.h\"\n+#endif\n \n #include <boost/thread.hpp>\n #include <boost/tuple/tuple.hpp>\n@@ -361,6 +362,7 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n }\n \n+#ifdef ENABLE_WALLET\n //////////////////////////////////////////////////////////////////////////////\n //\n // Internal miner\n@@ -399,7 +401,17 @@ bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phas\n     }\n }\n \n-static bool ProcessBlockFound(CBlock* pblock, const CChainParams& chainparams)\n+CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n+{\n+    CPubKey pubkey;\n+    if (!reservekey.GetReservedKey(pubkey))\n+        return NULL;\n+\n+    CScript scriptPubKey = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n+    return CreateNewBlock(scriptPubKey);\n+}\n+\n+static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n {\n     LogPrintf(\"%s\\n\", pblock->ToString());\n     LogPrintf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue));\n@@ -411,8 +423,14 @@ static bool ProcessBlockFound(CBlock* pblock, const CChainParams& chainparams)\n             return error(\"BitcoinMiner: generated block is stale\");\n     }\n \n-    // Inform about the new block\n-    GetMainSignals().BlockFound(pblock->GetHash());\n+    // Remove key from key pool\n+    reservekey.KeepKey();\n+\n+    // Track how many getdata requests this block gets\n+    {\n+        LOCK(wallet.cs_wallet);\n+        wallet.mapRequestCount[pblock->GetHash()] = 0;\n+    }\n \n     // Process this block the same as if we had received it from another node\n     CValidationState state;\n@@ -422,22 +440,18 @@ static bool ProcessBlockFound(CBlock* pblock, const CChainParams& chainparams)\n     return true;\n }\n \n-void static BitcoinMiner(const CChainParams& chainparams)\n+void static BitcoinMiner(CWallet *pwallet)\n {\n     LogPrintf(\"BitcoinMiner started\\n\");\n     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n     RenameThread(\"bitcoin-miner\");\n+    const CChainParams& chainparams = Params();\n \n+    // Each thread has its own key and counter\n+    CReserveKey reservekey(pwallet);\n     unsigned int nExtraNonce = 0;\n \n-    boost::shared_ptr<CReserveScript> coinbaseScript;\n-    GetMainSignals().ScriptForMining(coinbaseScript);\n-\n     try {\n-        //throw an error if no script was provided\n-        if (!coinbaseScript->reserveScript.size())\n-            throw std::runtime_error(\"No coinbase script available (mining requires a wallet)\");\n-\n         while (true) {\n             if (chainparams.MiningRequiresPeers()) {\n                 // Busy-wait for the network to come online so we don't waste time mining\n@@ -460,7 +474,7 @@ void static BitcoinMiner(const CChainParams& chainparams)\n             unsigned int nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n             CBlockIndex* pindexPrev = chainActive.Tip();\n \n-            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript->reserveScript));\n+            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n             if (!pblocktemplate.get())\n             {\n                 LogPrintf(\"Error in BitcoinMiner: Keypool ran out, please call keypoolrefill before restarting the mining thread\\n\");\n@@ -492,9 +506,8 @@ void static BitcoinMiner(const CChainParams& chainparams)\n                         SetThreadPriority(THREAD_PRIORITY_NORMAL);\n                         LogPrintf(\"BitcoinMiner:\\n\");\n                         LogPrintf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n-                        ProcessBlockFound(pblock, chainparams);\n+                        ProcessBlockFound(pblock, *pwallet, reservekey);\n                         SetThreadPriority(THREAD_PRIORITY_LOWEST);\n-                        coinbaseScript->KeepScript();\n \n                         // In regression test mode, stop mining after a block is found.\n                         if (chainparams.MineBlocksOnDemand())\n@@ -538,12 +551,17 @@ void static BitcoinMiner(const CChainParams& chainparams)\n     }\n }\n \n-void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams)\n+void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads)\n {\n     static boost::thread_group* minerThreads = NULL;\n \n-    if (nThreads < 0)\n-        nThreads = GetNumCores();\n+    if (nThreads < 0) {\n+        // In regtest threads defaults to 1\n+        if (Params().DefaultMinerThreads())\n+            nThreads = Params().DefaultMinerThreads();\n+        else\n+            nThreads = boost::thread::hardware_concurrency();\n+    }\n \n     if (minerThreads != NULL)\n     {\n@@ -557,5 +575,7 @@ void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainpar\n \n     minerThreads = new boost::thread_group();\n     for (int i = 0; i < nThreads; i++)\n-        minerThreads->create_thread(boost::bind(&BitcoinMiner, boost::cref(chainparams)));\n+        minerThreads->create_thread(boost::bind(&BitcoinMiner, pwallet));\n }\n+\n+#endif // ENABLE_WALLET"
      },
      {
        "sha": "96a6b70ecd7e66766156942dd0e0c5fb673d6334",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -11,7 +11,6 @@\n #include <stdint.h>\n \n class CBlockIndex;\n-class CChainParams;\n class CReserveKey;\n class CScript;\n class CWallet;\n@@ -25,9 +24,10 @@ struct CBlockTemplate\n };\n \n /** Run the miner threads */\n-void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams);\n+void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads);\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n+CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);"
      },
      {
        "sha": "42ac0e50ea83dee1bb21eb5e148b2fee11d782a1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 287,
        "changes": 305,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -79,7 +79,6 @@ uint64_t nLocalHostNonce = 0;\n static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = 125;\n-int nWhiteConnections = 0;\n bool fAddressesInitialized = false;\n \n vector<CNode*> vNodes;\n@@ -333,15 +332,6 @@ CNode* FindNode(const CNetAddr& ip)\n     return NULL;\n }\n \n-CNode* FindNode(const CSubNet& subNet)\n-{\n-    LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n-    if (subNet.Match((CNetAddr)pnode->addr))\n-        return (pnode);\n-    return NULL;\n-}\n-\n CNode* FindNode(const std::string& addrName)\n {\n     LOCK(cs_vNodes);\n@@ -386,12 +376,6 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest)\n     if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, Params().GetDefaultPort(), nConnectTimeout, &proxyConnectionFailed) :\n                   ConnectSocket(addrConnect, hSocket, nConnectTimeout, &proxyConnectionFailed))\n     {\n-        if (!IsSelectableSocket(hSocket)) {\n-            LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n-            CloseSocket(hSocket);\n-            return NULL;\n-        }\n-\n         addrman.Attempt(addrConnect);\n \n         // Add node\n@@ -450,130 +434,38 @@ void CNode::PushVersion()\n \n \n \n-banmap_t CNode::setBanned;\n+std::map<CNetAddr, int64_t> CNode::setBanned;\n CCriticalSection CNode::cs_setBanned;\n-bool CNode::setBannedIsDirty;\n \n void CNode::ClearBanned()\n {\n-    LOCK(cs_setBanned);\n     setBanned.clear();\n-    setBannedIsDirty = true;\n }\n \n bool CNode::IsBanned(CNetAddr ip)\n {\n     bool fResult = false;\n     {\n         LOCK(cs_setBanned);\n-        for (banmap_t::iterator it = setBanned.begin(); it != setBanned.end(); it++)\n-        {\n-            CSubNet subNet = (*it).first;\n-            CBanEntry banEntry = (*it).second;\n-\n-            if(subNet.Match(ip) && GetTime() < banEntry.nBanUntil)\n-                fResult = true;\n-        }\n-    }\n-    return fResult;\n-}\n-\n-bool CNode::IsBanned(CSubNet subnet)\n-{\n-    bool fResult = false;\n-    {\n-        LOCK(cs_setBanned);\n-        banmap_t::iterator i = setBanned.find(subnet);\n+        std::map<CNetAddr, int64_t>::iterator i = setBanned.find(ip);\n         if (i != setBanned.end())\n         {\n-            CBanEntry banEntry = (*i).second;\n-            if (GetTime() < banEntry.nBanUntil)\n+            int64_t t = (*i).second;\n+            if (GetTime() < t)\n                 fResult = true;\n         }\n     }\n     return fResult;\n }\n \n-void CNode::Ban(const CNetAddr& addr, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n-    CSubNet subNet(addr);\n-    Ban(subNet, banReason, bantimeoffset, sinceUnixEpoch);\n-}\n-\n-void CNode::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n-    CBanEntry banEntry(GetTime());\n-    banEntry.banReason = banReason;\n-    if (bantimeoffset <= 0)\n-    {\n-        bantimeoffset = GetArg(\"-bantime\", 60*60*24); // Default 24-hour ban\n-        sinceUnixEpoch = false;\n-    }\n-    banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n-\n-\n-    LOCK(cs_setBanned);\n-    if (setBanned[subNet].nBanUntil < banEntry.nBanUntil)\n-        setBanned[subNet] = banEntry;\n-\n-    setBannedIsDirty = true;\n-}\n-\n-bool CNode::Unban(const CNetAddr &addr) {\n-    CSubNet subNet(addr);\n-    return Unban(subNet);\n-}\n-\n-bool CNode::Unban(const CSubNet &subNet) {\n-    LOCK(cs_setBanned);\n-    if (setBanned.erase(subNet))\n+bool CNode::Ban(const CNetAddr &addr) {\n+    int64_t banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n     {\n-        setBannedIsDirty = true;\n-        return true;\n-    }\n-    return false;\n-}\n-\n-void CNode::GetBanned(banmap_t &banMap)\n-{\n-    LOCK(cs_setBanned);\n-    banMap = setBanned; //create a thread safe copy\n-}\n-\n-void CNode::SetBanned(const banmap_t &banMap)\n-{\n-    LOCK(cs_setBanned);\n-    setBanned = banMap;\n-    setBannedIsDirty = true;\n-}\n-\n-void CNode::SweepBanned()\n-{\n-    int64_t now = GetTime();\n-\n-    LOCK(cs_setBanned);\n-    banmap_t::iterator it = setBanned.begin();\n-    while(it != setBanned.end())\n-    {\n-        CBanEntry banEntry = (*it).second;\n-        if(now > banEntry.nBanUntil)\n-        {\n-            setBanned.erase(it++);\n-            setBannedIsDirty = true;\n-        }\n-        else\n-            ++it;\n+        LOCK(cs_setBanned);\n+        if (setBanned[addr] < banTime)\n+            setBanned[addr] = banTime;\n     }\n-}\n-\n-bool CNode::BannedSetIsDirty()\n-{\n-    LOCK(cs_setBanned);\n-    return setBannedIsDirty;\n-}\n-\n-void CNode::SetBannedSetDirty(bool dirty)\n-{\n-    LOCK(cs_setBanned); //reuse setBanned lock for the isDirty flag\n-    setBannedIsDirty = dirty;\n+    return true;\n }\n \n \n@@ -935,7 +827,6 @@ void ThreadSocketHandler()\n                 SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n                 CAddress addr;\n                 int nInbound = 0;\n-                int nMaxInbound = nMaxConnections - MAX_OUTBOUND_CONNECTIONS;\n \n                 if (hSocket != INVALID_SOCKET)\n                     if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n@@ -955,19 +846,8 @@ void ThreadSocketHandler()\n                     if (nErr != WSAEWOULDBLOCK)\n                         LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n                 }\n-                else if (!IsSelectableSocket(hSocket))\n-                {\n-                    LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n-                }\n-                else if (nInbound >= nMaxInbound)\n-                {\n-                    LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n-                }\n-                else if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n+                else if (nInbound >= nMaxConnections - MAX_OUTBOUND_CONNECTIONS)\n                 {\n-                    LogPrint(\"net\", \"connection from %s dropped (non-whitelisted)\\n\", addr.ToString());\n                     CloseSocket(hSocket);\n                 }\n                 else if (CNode::IsBanned(addr) && !whitelisted)\n@@ -981,8 +861,6 @@ void ThreadSocketHandler()\n                     pnode->AddRef();\n                     pnode->fWhitelisted = whitelisted;\n \n-                    LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n-\n                     {\n                         LOCK(cs_vNodes);\n                         vNodes.push_back(pnode);\n@@ -1284,17 +1162,6 @@ void DumpAddresses()\n            addrman.size(), GetTimeMillis() - nStart);\n }\n \n-void DumpData()\n-{\n-    DumpAddresses();\n-\n-    if (CNode::BannedSetIsDirty())\n-    {\n-        DumpBanlist();\n-        CNode::SetBannedSetDirty(false);\n-    }\n-}\n-\n void static ProcessOneShot()\n {\n     string strDest;\n@@ -1608,13 +1475,6 @@ bool BindListenPort(const CService &addrBind, string& strError, bool fWhiteliste\n         LogPrintf(\"%s\\n\", strError);\n         return false;\n     }\n-    if (!IsSelectableSocket(hListenSocket))\n-    {\n-        strError = \"Error: Couldn't create a listenable socket for incoming connections\";\n-        LogPrintf(\"%s\\n\", strError);\n-        return false;\n-    }\n-\n \n #ifndef WIN32\n #ifdef SO_NOSIGPIPE\n@@ -1740,17 +1600,6 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (!adb.Read(addrman))\n             LogPrintf(\"Invalid or missing peers.dat; recreating\\n\");\n     }\n-\n-    //try to read stored banlist\n-    CBanDB bandb;\n-    banmap_t banmap;\n-    if (!bandb.Read(banmap))\n-        LogPrintf(\"Invalid or missing banlist.dat; recreating\\n\");\n-\n-    CNode::SetBanned(banmap); //thread save setter\n-    CNode::SetBannedSetDirty(false); //no need to write down just read or nonexistent data\n-    CNode::SweepBanned(); //sweap out unused entries\n-\n     LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\",\n            addrman.size(), GetTimeMillis() - nStart);\n     fAddressesInitialized = true;\n@@ -1791,7 +1640,7 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n     threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"msghand\", &ThreadMessageHandler));\n \n     // Dump network addresses\n-    scheduler.scheduleEvery(&DumpData, DUMP_ADDRESSES_INTERVAL);\n+    scheduler.scheduleEvery(&DumpAddresses, DUMP_ADDRESSES_INTERVAL);\n }\n \n bool StopNode()\n@@ -1804,7 +1653,7 @@ bool StopNode()\n \n     if (fAddressesInitialized)\n     {\n-        DumpData();\n+        DumpAddresses();\n         fAddressesInitialized = false;\n     }\n \n@@ -2008,11 +1857,11 @@ bool CAddrDB::Read(CAddrMan& addr)\n         return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n \n     // use file size to size memory buffer\n-    uint64_t fileSize = boost::filesystem::file_size(pathAddr);\n-    uint64_t dataSize = 0;\n+    int fileSize = boost::filesystem::file_size(pathAddr);\n+    int dataSize = fileSize - sizeof(uint256);\n     // Don't try to resize to a negative number if file is small\n-    if (fileSize >= sizeof(uint256))\n-        dataSize = fileSize - sizeof(uint256);\n+    if (dataSize < 0)\n+        dataSize = 0;\n     vector<unsigned char> vchData;\n     vchData.resize(dataSize);\n     uint256 hashIn;\n@@ -2183,10 +2032,8 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n         Fuzz(GetArg(\"-fuzzmessagestest\", 10));\n \n     if (ssSend.size() == 0)\n-    {\n-        LEAVE_CRITICAL_SECTION(cs_vSend);\n         return;\n-    }\n+\n     // Set the size\n     unsigned int nSize = ssSend.size() - CMessageHeader::HEADER_SIZE;\n     WriteLE32((uint8_t*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], nSize);\n@@ -2210,119 +2057,3 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     LEAVE_CRITICAL_SECTION(cs_vSend);\n }\n-\n-//\n-// CBanDB\n-//\n-\n-CBanDB::CBanDB()\n-{\n-    pathBanlist = GetDataDir() / \"banlist.dat\";\n-}\n-\n-bool CBanDB::Write(const banmap_t& banSet)\n-{\n-    // Generate random temporary filename\n-    unsigned short randv = 0;\n-    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n-    std::string tmpfn = strprintf(\"banlist.dat.%04x\", randv);\n-\n-    // serialize banlist, checksum data up to that point, then append csum\n-    CDataStream ssBanlist(SER_DISK, CLIENT_VERSION);\n-    ssBanlist << FLATDATA(Params().MessageStart());\n-    ssBanlist << banSet;\n-    uint256 hash = Hash(ssBanlist.begin(), ssBanlist.end());\n-    ssBanlist << hash;\n-\n-    // open temp output file, and associate with CAutoFile\n-    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n-    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n-    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n-    if (fileout.IsNull())\n-        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n-\n-    // Write and commit header, data\n-    try {\n-        fileout << ssBanlist;\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n-    }\n-    FileCommit(fileout.Get());\n-    fileout.fclose();\n-\n-    // replace existing banlist.dat, if any, with new banlist.dat.XXXX\n-    if (!RenameOver(pathTmp, pathBanlist))\n-        return error(\"%s: Rename-into-place failed\", __func__);\n-\n-    return true;\n-}\n-\n-bool CBanDB::Read(banmap_t& banSet)\n-{\n-    // open input file, and associate with CAutoFile\n-    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n-    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n-    if (filein.IsNull())\n-        return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n-\n-    // use file size to size memory buffer\n-    uint64_t fileSize = boost::filesystem::file_size(pathBanlist);\n-    uint64_t dataSize = 0;\n-    // Don't try to resize to a negative number if file is small\n-    if (fileSize >= sizeof(uint256))\n-        dataSize = fileSize - sizeof(uint256);\n-    vector<unsigned char> vchData;\n-    vchData.resize(dataSize);\n-    uint256 hashIn;\n-\n-    // read data and checksum from file\n-    try {\n-        filein.read((char *)&vchData[0], dataSize);\n-        filein >> hashIn;\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n-    }\n-    filein.fclose();\n-\n-    CDataStream ssBanlist(vchData, SER_DISK, CLIENT_VERSION);\n-\n-    // verify stored checksum matches input data\n-    uint256 hashTmp = Hash(ssBanlist.begin(), ssBanlist.end());\n-    if (hashIn != hashTmp)\n-        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n-\n-    unsigned char pchMsgTmp[4];\n-    try {\n-        // de-serialize file header (network specific magic number) and ..\n-        ssBanlist >> FLATDATA(pchMsgTmp);\n-\n-        // ... verify the network matches ours\n-        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n-            return error(\"%s: Invalid network magic number\", __func__);\n-        \n-        // de-serialize address data into one CAddrMan object\n-        ssBanlist >> banSet;\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n-    }\n-    \n-    return true;\n-}\n-\n-void DumpBanlist()\n-{\n-    int64_t nStart = GetTimeMillis();\n-\n-    CNode::SweepBanned(); //clean unused entires (if bantime has expired)\n-\n-    CBanDB bandb;\n-    banmap_t banmap;\n-    CNode::GetBanned(banmap);\n-    bandb.Write(banmap);\n-\n-    LogPrint(\"net\", \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n-             banmap.size(), GetTimeMillis() - nStart);\n-}"
      },
      {
        "sha": "938f2376f706699659652b74b4af9a9bdc7c27cb",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 102,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -66,7 +66,6 @@ unsigned int SendBufferSize();\n void AddOneShot(const std::string& strDest);\n void AddressCurrentlyConnected(const CService& addr);\n CNode* FindNode(const CNetAddr& ip);\n-CNode* FindNode(const CSubNet& subNet);\n CNode* FindNode(const std::string& addrName);\n CNode* FindNode(const CService& ip);\n CNode* ConnectNode(CAddress addrConnect, const char *pszDest = NULL);\n@@ -141,20 +140,7 @@ extern bool fListen;\n extern uint64_t nLocalServices;\n extern uint64_t nLocalHostNonce;\n extern CAddrMan addrman;\n-\n-// The allocation of connections against the maximum allowed (nMaxConnections)\n-// is prioritized as follows:\n-// 1st: Outbound connections (MAX_OUTBOUND_CONNECTIONS)\n-// 2nd: Inbound connections from whitelisted peers (nWhiteConnections)\n-// 3rd: Inbound connections from non-whitelisted peers\n-// Thus, the number of connection slots for the general public to use is:\n-// nMaxConnections - (MAX_OUTBOUND_CONNECTIONS + nWhiteConnections)\n-// Any additional inbound connections beyond limits will be immediately closed\n-\n-/** Maximum number of connections to simultaneously allow (aka connection slots) */\n extern int nMaxConnections;\n-/** Number of connection slots to reserve for inbound from whitelisted peers */\n-extern int nWhiteConnections;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n@@ -241,66 +227,8 @@ class CNetMessage {\n };\n \n \n-typedef enum BanReason\n-{\n-    BanReasonUnknown          = 0,\n-    BanReasonNodeMisbehaving  = 1,\n-    BanReasonManuallyAdded    = 2\n-} BanReason;\n-\n-class CBanEntry\n-{\n-public:\n-    static const int CURRENT_VERSION=1;\n-    int nVersion;\n-    int64_t nCreateTime;\n-    int64_t nBanUntil;\n-    uint8_t banReason;\n-\n-    CBanEntry()\n-    {\n-        SetNull();\n-    }\n-\n-    CBanEntry(int64_t nCreateTimeIn)\n-    {\n-        SetNull();\n-        nCreateTime = nCreateTimeIn;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(nCreateTime);\n-        READWRITE(nBanUntil);\n-        READWRITE(banReason);\n-    }\n-\n-    void SetNull()\n-    {\n-        nVersion = CBanEntry::CURRENT_VERSION;\n-        nCreateTime = 0;\n-        nBanUntil = 0;\n-        banReason = BanReasonUnknown;\n-    }\n \n-    std::string banReasonToString()\n-    {\n-        switch (banReason) {\n-        case BanReasonNodeMisbehaving:\n-            return \"node misbehabing\";\n-        case BanReasonManuallyAdded:\n-            return \"manually added\";\n-        default:\n-            return \"unknown\";\n-        }\n-    }\n-};\n \n-typedef std::map<CSubNet, CBanEntry> banmap_t;\n \n /** Information about a peer */\n class CNode\n@@ -356,9 +284,8 @@ class CNode\n \n     // Denial-of-service detection/prevention\n     // Key is IP address, value is banned-until-time\n-    static banmap_t setBanned;\n+    static std::map<CNetAddr, int64_t> setBanned;\n     static CCriticalSection cs_setBanned;\n-    static bool setBannedIsDirty;\n \n     // Whitelisted ranges. Any node connecting from these is automatically\n     // whitelisted (as well as those connecting to whitelisted binds).\n@@ -679,21 +606,7 @@ class CNode\n     // new code.\n     static void ClearBanned(); // needed for unit testing\n     static bool IsBanned(CNetAddr ip);\n-    static bool IsBanned(CSubNet subnet);\n-    static void Ban(const CNetAddr &ip, const BanReason &banReason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    static void Ban(const CSubNet &subNet, const BanReason &banReason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    static bool Unban(const CNetAddr &ip);\n-    static bool Unban(const CSubNet &ip);\n-    static void GetBanned(banmap_t &banmap);\n-    static void SetBanned(const banmap_t &banmap);\n-\n-    //!check is the banlist has unwritten changes\n-    static bool BannedSetIsDirty();\n-    //!set the \"dirty\" flag for the banlist\n-    static void SetBannedSetDirty(bool dirty=true);\n-    //!clean unused entires (if bantime has expired)\n-    static void SweepBanned();\n-\n+    static bool Ban(const CNetAddr &ip);\n     void copyStats(CNodeStats &stats);\n \n     static bool IsWhitelistedRange(const CNetAddr &ip);\n@@ -724,17 +637,4 @@ class CAddrDB\n     bool Read(CAddrMan& addr);\n };\n \n-/** Access to the banlist database (banlist.dat) */\n-class CBanDB\n-{\n-private:\n-    boost::filesystem::path pathBanlist;\n-public:\n-    CBanDB();\n-    bool Write(const banmap_t& banSet);\n-    bool Read(banmap_t& banSet);\n-};\n-\n-void DumpBanlist();\n-\n #endif // BITCOIN_NET_H"
      },
      {
        "sha": "e3cb4e706f8f99c0399f171afbc63c163c3ced3a",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -266,9 +266,6 @@ bool static InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSock\n         } else { // Other error or blocking\n             int nErr = WSAGetLastError();\n             if (nErr == WSAEINPROGRESS || nErr == WSAEWOULDBLOCK || nErr == WSAEINVAL) {\n-                if (!IsSelectableSocket(hSocket)) {\n-                    return false;\n-                }\n                 struct timeval tval = MillisToTimeval(std::min(endTime - curTime, maxWait));\n                 fd_set fdset;\n                 FD_ZERO(&fdset);\n@@ -1294,13 +1291,6 @@ CSubNet::CSubNet(const std::string &strSubnet, bool fAllowLookup)\n         network.ip[x] &= netmask[x];\n }\n \n-CSubNet::CSubNet(const CNetAddr &addr):\n-    valid(addr.IsValid())\n-{\n-    memset(netmask, 255, sizeof(netmask));\n-    network = addr;\n-}\n-\n bool CSubNet::Match(const CNetAddr &addr) const\n {\n     if (!valid || !addr.IsValid())\n@@ -1340,11 +1330,6 @@ bool operator!=(const CSubNet& a, const CSubNet& b)\n     return !(a==b);\n }\n \n-bool operator<(const CSubNet& a, const CSubNet& b)\n-{\n-    return (a.network < b.network || (a.network == b.network && memcmp(a.netmask, b.netmask, 16) < 0));\n-}\n-\n #ifdef WIN32\n std::string NetworkErrorString(int err)\n {"
      },
      {
        "sha": "1f2957116e3ed561cc420f879a2df1ab780357c0",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -118,26 +118,13 @@ class CSubNet\n         CSubNet();\n         explicit CSubNet(const std::string &strSubnet, bool fAllowLookup = false);\n \n-        //constructor for single ip subnet (<ipv4>/32 or <ipv6>/128)\n-        explicit CSubNet(const CNetAddr &addr);\n-\n         bool Match(const CNetAddr &addr) const;\n \n         std::string ToString() const;\n         bool IsValid() const;\n \n         friend bool operator==(const CSubNet& a, const CSubNet& b);\n         friend bool operator!=(const CSubNet& a, const CSubNet& b);\n-        friend bool operator<(const CSubNet& a, const CSubNet& b);\n-\n-        ADD_SERIALIZE_METHODS;\n-\n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-            READWRITE(network);\n-            READWRITE(FLATDATA(netmask));\n-            READWRITE(FLATDATA(valid));\n-        }\n };\n \n /** A combination of a network address (CNetAddr) and a (TCP) port */"
      },
      {
        "sha": "169fef4af4602dfe327d8311ab90bd714c5e12f4",
        "filename": "src/policy/policy.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 178,
        "changes": 178,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,178 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n-\n-#include \"policy/policy.h\"\n-\n-#include \"main.h\"\n-#include \"tinyformat.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-\n-#include <boost/foreach.hpp>\n-\n-    /**\n-     * Check transaction inputs to mitigate two\n-     * potential denial-of-service attacks:\n-     * \n-     * 1. scriptSigs with extra data stuffed into them,\n-     *    not consumed by scriptPubKey (or P2SH script)\n-     * 2. P2SH scripts with a crazy number of expensive\n-     *    CHECKSIG/CHECKMULTISIG operations\n-     *\n-     * Check transaction inputs, and make sure any\n-     * pay-to-script-hash transactions are evaluating IsStandard scripts\n-     * \n-     * Why bother? To avoid denial-of-service attacks; an attacker\n-     * can submit a standard HASH... OP_EQUAL transaction,\n-     * which will get accepted into blocks. The redemption\n-     * script can be anything; an attacker could use a very\n-     * expensive-to-check-upon-redemption script like:\n-     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n-     */\n-\n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n-{\n-    std::vector<std::vector<unsigned char> > vSolutions;\n-    if (!Solver(scriptPubKey, whichType, vSolutions))\n-        return false;\n-\n-    if (whichType == TX_MULTISIG)\n-    {\n-        unsigned char m = vSolutions.front()[0];\n-        unsigned char n = vSolutions.back()[0];\n-        // Support up to x-of-3 multisig txns as standard\n-        if (n < 1 || n > 3)\n-            return false;\n-        if (m < 1 || m > n)\n-            return false;\n-    }\n-\n-    return whichType != TX_NONSTANDARD;\n-}\n-\n-bool IsStandardTx(const CTransaction& tx, std::string& reason)\n-{\n-    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n-        reason = \"version\";\n-        return false;\n-    }\n-\n-    // Extremely large transactions with lots of inputs can cost the network\n-    // almost as much to process as they cost the sender in fees, because\n-    // computing signature hashes is O(ninputs*txsize). Limiting transactions\n-    // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n-    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n-    if (sz >= MAX_STANDARD_TX_SIZE) {\n-        reason = \"tx-size\";\n-        return false;\n-    }\n-\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n-        // keys. (remember the 520 byte limit on redeemScript size) That works\n-        // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)+3=1627\n-        // bytes of scriptSig, which we round off to 1650 bytes for some minor\n-        // future-proofing. That's also enough to spend a 20-of-20\n-        // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n-        // considered standard)\n-        if (txin.scriptSig.size() > 1650) {\n-            reason = \"scriptsig-size\";\n-            return false;\n-        }\n-        if (!txin.scriptSig.IsPushOnly()) {\n-            reason = \"scriptsig-not-pushonly\";\n-            return false;\n-        }\n-    }\n-\n-    unsigned int nDataOut = 0;\n-    txnouttype whichType;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n-            reason = \"scriptpubkey\";\n-            return false;\n-        }\n-\n-        if (whichType == TX_NULL_DATA)\n-            nDataOut++;\n-        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n-            reason = \"bare-multisig\";\n-            return false;\n-        } else if (txout.IsDust(::minRelayTxFee)) {\n-            reason = \"dust\";\n-            return false;\n-        }\n-    }\n-\n-    // only one OP_RETURN txout is permitted\n-    if (nDataOut > 1) {\n-        reason = \"multi-op-return\";\n-        return false;\n-    }\n-\n-    return true;\n-}\n-\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n-{\n-    if (tx.IsCoinBase())\n-        return true; // Coinbases don't use vin normally\n-\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n-\n-        std::vector<std::vector<unsigned char> > vSolutions;\n-        txnouttype whichType;\n-        // get the scriptPubKey corresponding to this input:\n-        const CScript& prevScript = prev.scriptPubKey;\n-        if (!Solver(prevScript, whichType, vSolutions))\n-            return false;\n-        int nArgsExpected = ScriptSigArgsExpected(whichType, vSolutions);\n-        if (nArgsExpected < 0)\n-            return false;\n-\n-        // Transactions with extra stuff in their scriptSigs are\n-        // non-standard. Note that this EvalScript() call will\n-        // be quick, because if there are any operations\n-        // beside \"push data\" in the scriptSig\n-        // IsStandardTx() will have already returned false\n-        // and this method isn't called.\n-        std::vector<std::vector<unsigned char> > stack;\n-        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n-            return false;\n-\n-        if (whichType == TX_SCRIPTHASH)\n-        {\n-            if (stack.empty())\n-                return false;\n-            CScript subscript(stack.back().begin(), stack.back().end());\n-            std::vector<std::vector<unsigned char> > vSolutions2;\n-            txnouttype whichType2;\n-            if (Solver(subscript, whichType2, vSolutions2))\n-            {\n-                int tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n-                if (tmpExpected < 0)\n-                    return false;\n-                nArgsExpected += tmpExpected;\n-            }\n-            else\n-            {\n-                // Any other Script with less than 15 sigops OK:\n-                unsigned int sigops = subscript.GetSigOpCount(true);\n-                // ... extra data left on the stack after execution is OK, too:\n-                return (sigops <= MAX_P2SH_SIGOPS);\n-            }\n-        }\n-\n-        if (stack.size() != (unsigned int)nArgsExpected)\n-            return false;\n-    }\n-\n-    return true;\n-}"
      },
      {
        "sha": "1551aecde8c33eab3dd9ba74fbced371671ac0ca",
        "filename": "src/policy/policy.h",
        "status": "removed",
        "additions": 0,
        "deletions": 58,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d17982187d506fe271f8fdcc42c0f5ef814c50/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=a7d17982187d506fe271f8fdcc42c0f5ef814c50",
        "patch": "@@ -1,58 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_POLICY_H\n-#define BITCOIN_POLICY_H\n-\n-#include \"consensus/consensus.h\"\n-#include \"script/interpreter.h\"\n-#include \"script/standard.h\"\n-\n-#include <string>\n-\n-class CCoinsViewCache;\n-\n-/** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n-static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n-/** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n-static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n-/** The maximum size for transactions we're willing to relay/mine */\n-static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n-/** Maximum number of signature check operations in an IsStandard() P2SH script */\n-static const unsigned int MAX_P2SH_SIGOPS = 15;\n-/** The maximum number of sigops we're willing to relay/mine in a single tx */\n-static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n-/**\n- * Standard script verification flags that standard transactions will comply\n- * with. However scripts violating these flags may still be present in valid\n- * blocks and we must accept those blocks.\n- */\n-static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n-                                                         SCRIPT_VERIFY_DERSIG |\n-                                                         SCRIPT_VERIFY_STRICTENC |\n-                                                         SCRIPT_VERIFY_MINIMALDATA |\n-                                                         SCRIPT_VERIFY_NULLDUMMY |\n-                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n-                                                         SCRIPT_VERIFY_CLEANSTACK |\n-                                                         SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n-\n-/** For convenience, standard but not mandatory verify flags. */\n-static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n-\n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n-    /**\n-     * Check for standard transaction types\n-     * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n-     */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n-    /**\n-     * Check for standard transaction types\n-     * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n-     * @return True if all inputs (scriptSigs) use only standard transaction forms\n-     */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n-\n-#endif // BITCOIN_POLICY_H"
      },
      {
        "sha": "6cfd93a9a1891c6d19884b0096ffcb124d8c45ba",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -141,13 +141,10 @@ class CTxOut\n         // which has units satoshis-per-kilobyte.\n         // If you'd pay more than 1/3 in fees\n         // to spend something, then we consider it dust.\n-        // A typical spendable txout is 34 bytes big, and will\n+        // A typical txout is 34 bytes big, and will\n         // need a CTxIn of at least 148 bytes to spend:\n-        // so dust is a spendable txout less than 546 satoshis\n+        // so dust is a txout less than 546 satoshis \n         // with default minRelayTxFee.\n-        if (scriptPubKey.IsUnspendable())\n-            return 0;\n-\n         size_t nSize = GetSerializeSize(SER_DISK,0)+148u;\n         return 3*minRelayTxFee.GetFee(nSize);\n     }"
      },
      {
        "sha": "5485d89f3e1804943d4647eea4ab9432763e8101",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -254,7 +254,8 @@ void AddressBookPage::done(int retval)\n     // Figure out which address was selected, and return it\n     QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n \n-    Q_FOREACH (const QModelIndex& index, indexes) {\n+    foreach (QModelIndex index, indexes)\n+    {\n         QVariant address = table->model()->data(index);\n         returnValue = address.toString();\n     }"
      },
      {
        "sha": "5105f09ced897f74f7f3b36c0e6b851ec4118406",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -45,7 +45,7 @@ class AddressBookPage : public QDialog\n     void setModel(AddressTableModel *model);\n     const QString &getReturnValue() const { return returnValue; }\n \n-public Q_SLOTS:\n+public slots:\n     void done(int retval);\n \n private:\n@@ -59,7 +59,7 @@ public Q_SLOTS:\n     QAction *deleteAction; // to be able to explicitly disable it\n     QString newAddressToSelect;\n \n-private Q_SLOTS:\n+private slots:\n     /** Delete currently selected address entry */\n     void on_deleteAddress_clicked();\n     /** Create a new address for receiving coins and / or add a new address book entry */\n@@ -80,7 +80,7 @@ private Q_SLOTS:\n     /** New entry/entries were added to address table */\n     void selectNewAddress(const QModelIndex &parent, int begin, int /*end*/);\n \n-Q_SIGNALS:\n+signals:\n     void sendCoins(QString addr);\n };\n "
      },
      {
        "sha": "8e20836c65459ffe4eb46ff58eefdaaa83a844d5",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -450,5 +450,5 @@ int AddressTableModel::lookupAddress(const QString &address) const\n \n void AddressTableModel::emitDataChanged(int idx)\n {\n-    Q_EMIT dataChanged(index(idx, 0, QModelIndex()), index(idx, columns.length()-1, QModelIndex()));\n+    emit dataChanged(index(idx, 0, QModelIndex()), index(idx, columns.length()-1, QModelIndex()));\n }"
      },
      {
        "sha": "6b34b2eac2246ccf05802fd890e5165ed08082c8",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -84,7 +84,7 @@ class AddressTableModel : public QAbstractTableModel\n     /** Notify listeners that data changed. */\n     void emitDataChanged(int index);\n \n-public Q_SLOTS:\n+public slots:\n     /* Update address list from core.\n      */\n     void updateEntry(const QString &address, const QString &label, bool isMine, const QString &purpose, int status);"
      },
      {
        "sha": "74d54d18f7bb7b40b4845ececfc34ed1575ceefd",
        "filename": "src/qt/askpassphrasedialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/askpassphrasedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/askpassphrasedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -40,7 +40,7 @@ class AskPassphraseDialog : public QDialog\n     WalletModel *model;\n     bool fCapsLock;\n \n-private Q_SLOTS:\n+private slots:\n     void textChanged();\n \n protected:"
      },
      {
        "sha": "8740b98b70cb1a7625ab0e295e7d4e12b3bb7578",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 19,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -48,7 +48,6 @@\n #include <QThread>\n #include <QTimer>\n #include <QTranslator>\n-#include <QSslConfiguration>\n \n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>\n@@ -169,11 +168,11 @@ class BitcoinCore: public QObject\n public:\n     explicit BitcoinCore();\n \n-public Q_SLOTS:\n+public slots:\n     void initialize();\n     void shutdown();\n \n-Q_SIGNALS:\n+signals:\n     void initializeResult(int retval);\n     void shutdownResult(int retval);\n     void runawayException(const QString &message);\n@@ -216,13 +215,13 @@ class BitcoinApplication: public QApplication\n     /// Get window identifier of QMainWindow (BitcoinGUI)\n     WId getMainWinId() const;\n \n-public Q_SLOTS:\n+public slots:\n     void initializeResult(int retval);\n     void shutdownResult(int retval);\n     /// Handle runaway exceptions. Shows a message box with the problem and quits the program.\n     void handleRunawayException(const QString &message);\n \n-Q_SIGNALS:\n+signals:\n     void requestedInitialize();\n     void requestedShutdown();\n     void stopThread();\n@@ -253,7 +252,7 @@ BitcoinCore::BitcoinCore():\n void BitcoinCore::handleRunawayException(const std::exception *e)\n {\n     PrintExceptionContinue(e, \"Runaway exception\");\n-    Q_EMIT runawayException(QString::fromStdString(strMiscWarning));\n+    emit runawayException(QString::fromStdString(strMiscWarning));\n }\n \n void BitcoinCore::initialize()\n@@ -269,7 +268,7 @@ void BitcoinCore::initialize()\n              */\n             StartDummyRPCThread();\n         }\n-        Q_EMIT initializeResult(rv);\n+        emit initializeResult(rv);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);\n     } catch (...) {\n@@ -286,7 +285,7 @@ void BitcoinCore::shutdown()\n         threadGroup.join_all();\n         Shutdown();\n         qDebug() << __func__ << \": Shutdown finished\";\n-        Q_EMIT shutdownResult(1);\n+        emit shutdownResult(1);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);\n     } catch (...) {\n@@ -315,7 +314,7 @@ BitcoinApplication::~BitcoinApplication()\n     if(coreThread)\n     {\n         qDebug() << __func__ << \": Stopping thread\";\n-        Q_EMIT stopThread();\n+        emit stopThread();\n         coreThread->wait();\n         qDebug() << __func__ << \": Stopped thread\";\n     }\n@@ -386,7 +385,7 @@ void BitcoinApplication::requestInitialize()\n {\n     qDebug() << __func__ << \": Requesting initialize\";\n     startThread();\n-    Q_EMIT requestedInitialize();\n+    emit requestedInitialize();\n }\n \n void BitcoinApplication::requestShutdown()\n@@ -409,7 +408,7 @@ void BitcoinApplication::requestShutdown()\n     ShutdownWindow::showShutdownWindow(window);\n \n     // Request shutdown from core thread\n-    Q_EMIT requestedShutdown();\n+    emit requestedShutdown();\n }\n \n void BitcoinApplication::initializeResult(int retval)\n@@ -449,7 +448,7 @@ void BitcoinApplication::initializeResult(int retval)\n         {\n             window->show();\n         }\n-        Q_EMIT splashFinished(window);\n+        emit splashFinished(window);\n \n #ifdef ENABLE_WALLET\n         // Now that initialization/startup is done, process any command-line\n@@ -516,13 +515,6 @@ int main(int argc, char *argv[])\n #ifdef Q_OS_MAC\n     QApplication::setAttribute(Qt::AA_DontShowIconsInMenus);\n #endif\n-#if QT_VERSION >= 0x050500\n-    // Because of the POODLE attack it is recommended to disable SSLv3 (https://disablessl3.com/),\n-    // so set SSL protocols to TLS1.0+.\n-    QSslConfiguration sslconf = QSslConfiguration::defaultConfiguration();\n-    sslconf.setProtocol(QSsl::TlsV1_0OrLater);\n-    QSslConfiguration::setDefaultConfiguration(sslconf);\n-#endif\n \n     // Register meta types used for QMetaObject::invokeMethod\n     qRegisterMetaType< bool* >();"
      },
      {
        "sha": "d31a1e018b2898a5bea2338abd3ad84002040cdb",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -61,7 +61,7 @@ class AmountSpinBox: public QAbstractSpinBox\n     void setValue(const CAmount& value)\n     {\n         lineEdit()->setText(BitcoinUnits::format(currentUnit, value, false, BitcoinUnits::separatorAlways));\n-        Q_EMIT valueChanged();\n+        emit valueChanged();\n     }\n \n     void stepBy(int steps)\n@@ -184,7 +184,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         return rv;\n     }\n \n-Q_SIGNALS:\n+signals:\n     void valueChanged();\n };\n "
      },
      {
        "sha": "b047e6c51a07afa87a1459b3c3ad81077bbe7c5b",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -56,7 +56,7 @@ class BitcoinAmountField: public QWidget\n     */\n     QWidget *setupTabChain(QWidget *prev);\n \n-Q_SIGNALS:\n+signals:\n     void valueChanged();\n \n protected:\n@@ -67,7 +67,7 @@ class BitcoinAmountField: public QWidget\n     AmountSpinBox *amount;\n     QValueComboBox *unit;\n \n-private Q_SLOTS:\n+private slots:\n     void unitChanged(int idx);\n \n };"
      },
      {
        "sha": "efba0f5e18ed6e6897ac9ae4e48ac9dd11320450",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -600,7 +600,7 @@ void BitcoinGUI::openClicked()\n     OpenURIDialog dlg(this);\n     if(dlg.exec())\n     {\n-        Q_EMIT receivedURI(dlg.getURI());\n+        emit receivedURI(dlg.getURI());\n     }\n }\n \n@@ -886,9 +886,9 @@ void BitcoinGUI::dropEvent(QDropEvent *event)\n {\n     if(event->mimeData()->hasUrls())\n     {\n-        Q_FOREACH(const QUrl &uri, event->mimeData()->urls())\n+        foreach(const QUrl &uri, event->mimeData()->urls())\n         {\n-            Q_EMIT receivedURI(uri.toString());\n+            emit receivedURI(uri.toString());\n         }\n     }\n     event->acceptProposedAction();\n@@ -1050,7 +1050,7 @@ UnitDisplayStatusBarControl::UnitDisplayStatusBarControl() :\n     QList<BitcoinUnits::Unit> units = BitcoinUnits::availableUnits();\n     int max_width = 0;\n     const QFontMetrics fm(font());\n-    Q_FOREACH (const BitcoinUnits::Unit unit, units)\n+    foreach (const BitcoinUnits::Unit unit, units)\n     {\n         max_width = qMax(max_width, fm.width(BitcoinUnits::name(unit)));\n     }\n@@ -1069,7 +1069,7 @@ void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)\n void UnitDisplayStatusBarControl::createContextMenu()\n {\n     menu = new QMenu();\n-    Q_FOREACH(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n+    foreach(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n     {\n         QAction *menuAction = new QAction(QString(BitcoinUnits::name(u)), this);\n         menuAction->setData(QVariant(u));"
      },
      {
        "sha": "494541f0027d9514a14ae1923289718278796939",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -136,11 +136,11 @@ class BitcoinGUI : public QMainWindow\n     /** Disconnect core signals from GUI client */\n     void unsubscribeFromCoreSignals();\n \n-Q_SIGNALS:\n+signals:\n     /** Signal raised when a URI was entered or dragged to the GUI */\n     void receivedURI(const QString &uri);\n \n-public Q_SLOTS:\n+public slots:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n@@ -168,7 +168,7 @@ public Q_SLOTS:\n     void incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address, const QString& label);\n #endif // ENABLE_WALLET\n \n-private Q_SLOTS:\n+private slots:\n #ifdef ENABLE_WALLET\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n@@ -232,7 +232,7 @@ class UnitDisplayStatusBarControl : public QLabel\n     /** Creates context menu, its actions, and wires up all the relevant signals for mouse events. */\n     void createContextMenu();\n \n-private Q_SLOTS:\n+private slots:\n     /** When Display Units are changed on OptionsModel it will refresh the display text of the control on the status bar */\n     void updateDisplayUnit(int newUnits);\n     /** Tells underlying optionsModel to update its current display unit. */"
      },
      {
        "sha": "8e29cdeb06a6e56c62a395544f79cbdba2965264",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -53,9 +53,9 @@ int ClientModel::getNumConnections(unsigned int flags) const\n         return vNodes.size();\n \n     int nNum = 0;\n-    BOOST_FOREACH(const CNode* pnode, vNodes)\n-        if (flags & (pnode->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT))\n-            nNum++;\n+    BOOST_FOREACH(CNode* pnode, vNodes)\n+    if (flags & (pnode->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT))\n+        nNum++;\n \n     return nNum;\n }\n@@ -117,15 +117,15 @@ void ClientModel::updateTimer()\n         cachedReindexing = fReindex;\n         cachedImporting = fImporting;\n \n-        Q_EMIT numBlocksChanged(newNumBlocks, newBlockDate);\n+        emit numBlocksChanged(newNumBlocks, newBlockDate);\n     }\n \n-    Q_EMIT bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n+    emit bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n }\n \n void ClientModel::updateNumConnections(int numConnections)\n {\n-    Q_EMIT numConnectionsChanged(numConnections);\n+    emit numConnectionsChanged(numConnections);\n }\n \n void ClientModel::updateAlert(const QString &hash, int status)\n@@ -138,11 +138,11 @@ void ClientModel::updateAlert(const QString &hash, int status)\n         CAlert alert = CAlert::getAlertByHash(hash_256);\n         if(!alert.IsNull())\n         {\n-            Q_EMIT message(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), CClientUIInterface::ICON_ERROR);\n+            emit message(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), CClientUIInterface::ICON_ERROR);\n         }\n     }\n \n-    Q_EMIT alertsChanged(getStatusBarWarnings());\n+    emit alertsChanged(getStatusBarWarnings());\n }\n \n bool ClientModel::inInitialBlockDownload() const"
      },
      {
        "sha": "214701810c0dff36dabcc3aa77fe17e989685e1f",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -82,7 +82,7 @@ class ClientModel : public QObject\n     void subscribeToCoreSignals();\n     void unsubscribeFromCoreSignals();\n \n-Q_SIGNALS:\n+signals:\n     void numConnectionsChanged(int count);\n     void numBlocksChanged(int count, const QDateTime& blockDate);\n     void alertsChanged(const QString &warnings);\n@@ -94,7 +94,7 @@ class ClientModel : public QObject\n     // Show progress dialog e.g. for verifychain\n     void showProgress(const QString &title, int nProgress);\n \n-public Q_SLOTS:\n+public slots:\n     void updateTimer();\n     void updateNumConnections(int numConnections);\n     void updateAlert(const QString &hash, int status);"
      },
      {
        "sha": "7531fbddcbef0aebaf612b316fe25ac8c0b089aa",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -30,6 +30,7 @@\n #include <QTreeWidget>\n #include <QTreeWidgetItem>\n \n+using namespace std;\n QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n bool CoinControlDialog::fSubtractFeeFromAmount = false;\n@@ -117,7 +118,7 @@ CoinControlDialog::CoinControlDialog(QWidget *parent) :\n     // (un)select all\n     connect(ui->pushButtonSelectAll, SIGNAL(clicked()), this, SLOT(buttonSelectAllClicked()));\n \n-    // change coin control first column label due Qt4 bug.\n+    // change coin control first column label due Qt4 bug. \n     // see https://github.com/bitcoin/bitcoin/issues/5716\n     ui->treeWidget->headerItem()->setText(COLUMN_CHECKBOX, QString());\n \n@@ -441,7 +442,7 @@ QString CoinControlDialog::getPriorityLabel(double dPriority, double mempoolEsti\n // shows count of locked unspent outputs\n void CoinControlDialog::updateLabelLocked()\n {\n-    std::vector<COutPoint> vOutpts;\n+    vector<COutPoint> vOutpts;\n     model->listLockedCoins(vOutpts);\n     if (vOutpts.size() > 0)\n     {\n@@ -460,13 +461,13 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     CAmount nPayAmount = 0;\n     bool fDust = false;\n     CMutableTransaction txDummy;\n-    Q_FOREACH(const CAmount &amount, CoinControlDialog::payAmounts)\n+    foreach(const CAmount &amount, CoinControlDialog::payAmounts)\n     {\n         nPayAmount += amount;\n \n         if (amount > 0)\n         {\n-            CTxOut txout(amount, (CScript)std::vector<unsigned char>(24, 0));\n+            CTxOut txout(amount, (CScript)vector<unsigned char>(24, 0));\n             txDummy.vout.push_back(txout);\n             if (txout.IsDust(::minRelayTxFee))\n                fDust = true;\n@@ -486,12 +487,13 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     int nQuantityUncompressed   = 0;\n     bool fAllowFree             = false;\n \n-    std::vector<COutPoint> vCoinControl;\n-    std::vector<COutput>   vOutputs;\n+    vector<COutPoint> vCoinControl;\n+    vector<COutput>   vOutputs;\n     coinControl->ListSelected(vCoinControl);\n     model->getOutputs(vCoinControl, vOutputs);\n \n-    BOOST_FOREACH(const COutput& out, vOutputs) {\n+    BOOST_FOREACH(const COutput& out, vOutputs)\n+    {\n         // unselect already spent, very unlikely scenario, this could happen\n         // when selected are spent elsewhere, like rpc or another computer\n         uint256 txhash = out.tx->GetHash();\n@@ -567,7 +569,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             // Never create dust outputs; if we would, just add the dust to the fee.\n             if (nChange > 0 && nChange < CENT)\n             {\n-                CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n+                CTxOut txout(nChange, (CScript)vector<unsigned char>(24, 0));\n                 if (txout.IsDust(::minRelayTxFee))\n                 {\n                     if (CoinControlDialog::fSubtractFeeFromAmount) // dust-change will be raised until no dust\n@@ -686,10 +688,11 @@ void CoinControlDialog::updateView()\n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n     double mempoolEstimatePriority = mempool.estimatePriority(nTxConfirmTarget);\n \n-    std::map<QString, std::vector<COutput> > mapCoins;\n+    map<QString, vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);\n \n-    BOOST_FOREACH(const PAIRTYPE(QString, std::vector<COutput>)& coins, mapCoins) {\n+    BOOST_FOREACH(PAIRTYPE(QString, vector<COutput>) coins, mapCoins)\n+    {\n         QTreeWidgetItem *itemWalletAddress = new QTreeWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         QString sWalletAddress = coins.first;\n@@ -716,7 +719,8 @@ void CoinControlDialog::updateView()\n         double dPrioritySum = 0;\n         int nChildren = 0;\n         int nInputSum = 0;\n-        BOOST_FOREACH(const COutput& out, coins.second) {\n+        BOOST_FOREACH(const COutput& out, coins.second)\n+        {\n             int nInputSize = 0;\n             nSum += out.tx->vout[out.i].nValue;\n             nChildren++;"
      },
      {
        "sha": "5ec382838f9069442773ec09a9d5571adf495214",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -102,7 +102,7 @@ class CoinControlDialog : public QDialog\n         return column;\n     }\n \n-private Q_SLOTS:\n+private slots:\n     void showMenu(const QPoint &);\n     void copyAmount();\n     void copyLabel();"
      },
      {
        "sha": "13c6da8edaf755d568c64f3f2fa058a0f774d5df",
        "filename": "src/qt/editaddressdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/editaddressdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/editaddressdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -40,7 +40,7 @@ class EditAddressDialog : public QDialog\n     QString getAddress() const;\n     void setAddress(const QString &address);\n \n-public Q_SLOTS:\n+public slots:\n     void accept();\n \n private:"
      },
      {
        "sha": "55df64a25667072d4a2addd6118f4fa9b4630928",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -169,7 +169,7 @@ namespace GUIUtil\n             void setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode);\n             void resizeColumn(int nColumnIndex, int width);\n \n-        private Q_SLOTS:\n+        private slots:\n             void on_sectionResized(int logicalIndex, int oldSize, int newSize);\n             void on_geometriesChanged();\n     };"
      },
      {
        "sha": "9f72602b4dcd152bd8d26783c2335dccd2ab6ce8",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -42,10 +42,10 @@ class FreespaceChecker : public QObject\n         ST_ERROR\n     };\n \n-public Q_SLOTS:\n+public slots:\n     void check();\n \n-Q_SIGNALS:\n+signals:\n     void reply(int status, const QString &message, quint64 available);\n \n private:\n@@ -102,7 +102,7 @@ void FreespaceChecker::check()\n         replyStatus = ST_ERROR;\n         replyMessage = tr(\"Cannot create data directory here.\");\n     }\n-    Q_EMIT reply(replyStatus, replyMessage, freeBytesAvailable);\n+    emit reply(replyStatus, replyMessage, freeBytesAvailable);\n }\n \n \n@@ -121,7 +121,7 @@ Intro::~Intro()\n {\n     delete ui;\n     /* Ensure thread is finished before it is deleted */\n-    Q_EMIT stopThread();\n+    emit stopThread();\n     thread->wait();\n }\n \n@@ -277,7 +277,7 @@ void Intro::checkPath(const QString &dataDir)\n     if(!signalled)\n     {\n         signalled = true;\n-        Q_EMIT requestCheck();\n+        emit requestCheck();\n     }\n     mutex.unlock();\n }"
      },
      {
        "sha": "c9735615b67127ca3db115df617b2be3c6faafad",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -43,14 +43,14 @@ class Intro : public QDialog\n      */\n     static QString getDefaultDataDirectory();\n \n-Q_SIGNALS:\n+signals:\n     void requestCheck();\n     void stopThread();\n \n-public Q_SLOTS:\n+public slots:\n     void setStatus(int status, const QString &message, quint64 bytesAvailable);\n \n-private Q_SLOTS:\n+private slots:\n     void on_dataDirectory_textChanged(const QString &arg1);\n     void on_ellipsisButton_clicked();\n     void on_dataDirDefault_clicked();"
      },
      {
        "sha": "15a6583ca44c45c26acf66236b8cacbf285f1931",
        "filename": "src/qt/macdockiconhandler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/macdockiconhandler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/macdockiconhandler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -30,7 +30,7 @@ class MacDockIconHandler : public QObject\n     static void cleanup();\n     void handleDockIconClickEvent();\n \n-Q_SIGNALS:\n+signals:\n     void dockIconClicked();\n \n private:"
      },
      {
        "sha": "58a0365d3dca8923b94203ab74912ea7e4544914",
        "filename": "src/qt/macdockiconhandler.mm",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/macdockiconhandler.mm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/macdockiconhandler.mm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.mm?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -130,5 +130,5 @@ void setupDockClickHandler() {\n         this->mainWindow->show();\n     }\n \n-    Q_EMIT this->dockIconClicked();\n+    emit this->dockIconClicked();\n }"
      },
      {
        "sha": "182e948c7d43ec48d176a7ac8ca1f8c84fb595a5",
        "filename": "src/qt/notificator.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/notificator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/notificator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -40,7 +40,7 @@ class Notificator: public QObject\n         Critical        /**< An error occurred */\n     };\n \n-public Q_SLOTS:\n+public slots:\n     /** Show notification message.\n        @param[in] cls    general message class\n        @param[in] title  title shown with message"
      },
      {
        "sha": "d5c434ba9c8c97e0195fa20006ade96e5f50da2c",
        "filename": "src/qt/openuridialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/openuridialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/openuridialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -21,10 +21,10 @@ class OpenURIDialog : public QDialog\n \n     QString getURI();\n \n-protected Q_SLOTS:\n+protected slots:\n     void accept();\n \n-private Q_SLOTS:\n+private slots:\n     void on_selectFileButton_clicked();\n \n private:"
      },
      {
        "sha": "efb2bf4158d9eefa96ac0843387c42b885456071",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -42,7 +42,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     /* Main elements init */\n     ui->databaseCache->setMinimum(nMinDbCache);\n     ui->databaseCache->setMaximum(nMaxDbCache);\n-    ui->threadsScriptVerif->setMinimum(-GetNumCores());\n+    ui->threadsScriptVerif->setMinimum(-(int)boost::thread::hardware_concurrency());\n     ui->threadsScriptVerif->setMaximum(MAX_SCRIPTCHECK_THREADS);\n \n     /* Network elements init */\n@@ -73,7 +73,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     /* Display elements init */\n     QDir translations(\":translations\");\n     ui->lang->addItem(QString(\"(\") + tr(\"default\") + QString(\")\"), QVariant(\"\"));\n-    Q_FOREACH(const QString &langStr, translations.entryList())\n+    foreach(const QString &langStr, translations.entryList())\n     {\n         QLocale locale(langStr);\n \n@@ -281,7 +281,7 @@ bool OptionsDialog::eventFilter(QObject *object, QEvent *event)\n     {\n         if(object == ui->proxyIp)\n         {\n-            Q_EMIT proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n+            emit proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n         }\n     }\n     return QDialog::eventFilter(object, event);"
      },
      {
        "sha": "f4e5157595b62e42ce1cff5e8203d6fe413d1049",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -33,7 +33,7 @@ class OptionsDialog : public QDialog\n protected:\n     bool eventFilter(QObject *object, QEvent *event);\n \n-private Q_SLOTS:\n+private slots:\n     /* enable OK button */\n     void enableOkButton();\n     /* disable OK button */\n@@ -48,7 +48,7 @@ private Q_SLOTS:\n     void clearStatusLabel();\n     void doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n \n-Q_SIGNALS:\n+signals:\n     void proxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n \n private:"
      },
      {
        "sha": "41d6acf3584fb2d09b801b85902db84dd889c69a",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -286,7 +286,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n         case CoinControlFeatures:\n             fCoinControlFeatures = value.toBool();\n             settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n-            Q_EMIT coinControlFeaturesChanged(fCoinControlFeatures);\n+            emit coinControlFeaturesChanged(fCoinControlFeatures);\n             break;\n         case DatabaseCache:\n             if (settings.value(\"nDatabaseCache\") != value) {\n@@ -311,7 +311,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n         }\n     }\n \n-    Q_EMIT dataChanged(index, index);\n+    emit dataChanged(index, index);\n \n     return successful;\n }\n@@ -324,7 +324,7 @@ void OptionsModel::setDisplayUnit(const QVariant &value)\n         QSettings settings;\n         nDisplayUnit = value.toInt();\n         settings.setValue(\"nDisplayUnit\", nDisplayUnit);\n-        Q_EMIT displayUnitChanged(nDisplayUnit);\n+        emit displayUnitChanged(nDisplayUnit);\n     }\n }\n "
      },
      {
        "sha": "bf892768ed594e74ad7bd22f8ace0d3a89484caf",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -81,7 +81,7 @@ class OptionsModel : public QAbstractListModel\n     /// Add option to list of GUI options overridden through command line/config file\n     void addOverriddenOption(const std::string &option);\n \n-Q_SIGNALS:\n+signals:\n     void displayUnitChanged(int unit);\n     void coinControlFeaturesChanged(bool);\n };"
      },
      {
        "sha": "2e33b9adf8d8fae63a59f95c0b34c2d01c9a0587",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -142,7 +142,7 @@ OverviewPage::OverviewPage(QWidget *parent) :\n void OverviewPage::handleTransactionClicked(const QModelIndex &index)\n {\n     if(filter)\n-        Q_EMIT transactionClicked(filter->mapToSource(index));\n+        emit transactionClicked(filter->mapToSource(index));\n }\n \n OverviewPage::~OverviewPage()"
      },
      {
        "sha": "64cb1dc4e0b2c730d61d8d2bcffb64efc83be31a",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -35,11 +35,11 @@ class OverviewPage : public QWidget\n     void setWalletModel(WalletModel *walletModel);\n     void showOutOfSyncWarning(bool fShow);\n \n-public Q_SLOTS:\n+public slots:\n     void setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n                     const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n-Q_SIGNALS:\n+signals:\n     void transactionClicked(const QModelIndex &index);\n \n private:\n@@ -56,7 +56,7 @@ public Q_SLOTS:\n     TxViewDelegate *txdelegate;\n     TransactionFilterProxy *filter;\n \n-private Q_SLOTS:\n+private slots:\n     void updateDisplayUnit();\n     void handleTransactionClicked(const QModelIndex &index);\n     void updateAlerts(const QString &warnings);"
      },
      {
        "sha": "7e9729eeb9c07862a7f0b2817cf3c31fae6aed74",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -19,6 +19,8 @@\n #include <QDebug>\n #include <QSslCertificate>\n \n+using namespace std;\n+\n class SSLVerifyError : public std::runtime_error\n {\n public:\n@@ -47,7 +49,7 @@ bool PaymentRequestPlus::parse(const QByteArray& data)\n     return true;\n }\n \n-bool PaymentRequestPlus::SerializeToString(std::string* output) const\n+bool PaymentRequestPlus::SerializeToString(string* output) const\n {\n     return paymentRequest.SerializeToString(output);\n }"
      },
      {
        "sha": "09e9949b1035d4c7a21670599c9b00b9bb9a2581",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 30,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -46,6 +46,8 @@\n #include <QUrlQuery>\n #endif\n \n+using namespace std;\n+\n const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; // milliseconds\n const QString BITCOIN_IPC_PREFIX(\"bitcoin:\");\n // BIP70 payment protocol messages\n@@ -146,7 +148,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n     int nRootCerts = 0;\n     const QDateTime currentTime = QDateTime::currentDateTime();\n \n-    Q_FOREACH (const QSslCertificate& cert, certList) {\n+    foreach (const QSslCertificate& cert, certList) {\n         // Don't log NULL certificates\n         if (cert.isNull())\n             continue;\n@@ -199,7 +201,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n // when uiReady() is called.\n //\n // Warning: ipcSendCommandLine() is called early in init,\n-// so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n+// so don't use \"emit message()\", but \"QMessageBox::\"!\n //\n void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n {\n@@ -267,7 +269,7 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n bool PaymentServer::ipcSendCommandLine()\n {\n     bool fResult = false;\n-    Q_FOREACH (const QString& r, savedPaymentRequests)\n+    foreach (const QString& r, savedPaymentRequests)\n     {\n         QLocalSocket* socket = new QLocalSocket();\n         socket->connectToServer(ipcServerName(), QIODevice::WriteOnly);\n@@ -324,7 +326,7 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :\n         uriServer = new QLocalServer(this);\n \n         if (!uriServer->listen(name)) {\n-            // constructor is called early in init, so don't use \"Q_EMIT message()\" here\n+            // constructor is called early in init, so don't use \"emit message()\" here\n             QMessageBox::critical(0, tr(\"Payment request error\"),\n                 tr(\"Cannot start bitcoin: click-to-pay handler\"));\n         }\n@@ -392,7 +394,7 @@ void PaymentServer::uiReady()\n     initNetManager();\n \n     saveURIs = false;\n-    Q_FOREACH (const QString& s, savedPaymentRequests)\n+    foreach (const QString& s, savedPaymentRequests)\n     {\n         handleURIOrFile(s);\n     }\n@@ -429,7 +431,7 @@ void PaymentServer::handleURIOrFile(const QString& s)\n             else\n             {\n                 qWarning() << \"PaymentServer::handleURIOrFile: Invalid URL: \" << fetchUrl;\n-                Q_EMIT message(tr(\"URI handling\"),\n+                emit message(tr(\"URI handling\"),\n                     tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n                     CClientUIInterface::ICON_WARNING);\n             }\n@@ -443,14 +445,14 @@ void PaymentServer::handleURIOrFile(const QString& s)\n             {\n                 CBitcoinAddress address(recipient.address.toStdString());\n                 if (!address.IsValid()) {\n-                    Q_EMIT message(tr(\"URI handling\"), tr(\"Invalid payment address %1\").arg(recipient.address),\n+                    emit message(tr(\"URI handling\"), tr(\"Invalid payment address %1\").arg(recipient.address),\n                         CClientUIInterface::MSG_ERROR);\n                 }\n                 else\n-                    Q_EMIT receivedPaymentRequest(recipient);\n+                    emit receivedPaymentRequest(recipient);\n             }\n             else\n-                Q_EMIT message(tr(\"URI handling\"),\n+                emit message(tr(\"URI handling\"),\n                     tr(\"URI cannot be parsed! This can be caused by an invalid Bitcoin address or malformed URI parameters.\"),\n                     CClientUIInterface::ICON_WARNING);\n \n@@ -464,12 +466,12 @@ void PaymentServer::handleURIOrFile(const QString& s)\n         SendCoinsRecipient recipient;\n         if (!readPaymentRequestFromFile(s, request))\n         {\n-            Q_EMIT message(tr(\"Payment request file handling\"),\n+            emit message(tr(\"Payment request file handling\"),\n                 tr(\"Payment request file cannot be read! This can be caused by an invalid payment request file.\"),\n                 CClientUIInterface::ICON_WARNING);\n         }\n         else if (processPaymentRequest(request, recipient))\n-            Q_EMIT receivedPaymentRequest(recipient);\n+            emit receivedPaymentRequest(recipient);\n \n         return;\n     }\n@@ -498,7 +500,7 @@ void PaymentServer::handleURIConnection()\n \n //\n // Warning: readPaymentRequestFromFile() is used in ipcSendCommandLine()\n-// so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n+// so don't use \"emit message()\", but \"QMessageBox::\"!\n //\n bool PaymentServer::readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request)\n {\n@@ -531,7 +533,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n     if (request.IsInitialized()) {\n         // Payment request network matches client network?\n         if (!verifyNetwork(request.getDetails())) {\n-            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n+            emit message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n             return false;\n@@ -540,13 +542,13 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n         // Make sure any payment requests involved are still valid.\n         // This is re-checked just before sending coins in WalletModel::sendCoins().\n         if (verifyExpired(request.getDetails())) {\n-            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Payment request expired.\"),\n+            emit message(tr(\"Payment request rejected\"), tr(\"Payment request expired.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n             return false;\n         }\n     } else {\n-        Q_EMIT message(tr(\"Payment request error\"), tr(\"Payment request is not initialized.\"),\n+        emit message(tr(\"Payment request error\"), tr(\"Payment request is not initialized.\"),\n             CClientUIInterface::MSG_ERROR);\n \n         return false;\n@@ -560,7 +562,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n     QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    Q_FOREACH(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    foreach(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {\n@@ -571,7 +573,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n             // Unauthenticated payment requests to custom bitcoin addresses are not supported\n             // (there is no good way to tell the user where they are paying in a way they'd\n             // have a chance of understanding).\n-            Q_EMIT message(tr(\"Payment request rejected\"),\n+            emit message(tr(\"Payment request rejected\"),\n                 tr(\"Unverified payment requests to custom payment scripts are unsupported.\"),\n                 CClientUIInterface::MSG_ERROR);\n             return false;\n@@ -581,14 +583,14 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n         // but CAmount is defined as int64_t. Because of that we need to verify that amounts are in a valid range\n         // and no overflow has happened.\n         if (!verifyAmount(sendingTo.second)) {\n-            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n             return false;\n         }\n \n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n         if (txOut.IsDust(::minRelayTxFee)) {\n-            Q_EMIT message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n+            emit message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second)),\n                 CClientUIInterface::MSG_ERROR);\n \n@@ -598,7 +600,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n         recipient.amount += sendingTo.second;\n         // Also verify that the final amount is still in a valid range after adding additional amounts.\n         if (!verifyAmount(recipient.amount)) {\n-            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n             return false;\n         }\n     }\n@@ -645,7 +647,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     // Create a new refund address, or re-use:\n     QString account = tr(\"Refund from %1\").arg(recipient.authenticatedMerchant);\n     std::string strAccount = account.toStdString();\n-    std::set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n+    set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n     if (!refundAddresses.empty()) {\n         CScript s = GetScriptForDestination(*refundAddresses.begin());\n         payments::Output* refund_to = payment.add_refund_to();\n@@ -692,7 +694,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             .arg(BIP70_MAX_PAYMENTREQUEST_SIZE);\n \n         qWarning() << QString(\"PaymentServer::%1:\").arg(__func__) << msg;\n-        Q_EMIT message(tr(\"Payment request DoS protection\"), msg, CClientUIInterface::MSG_ERROR);\n+        emit message(tr(\"Payment request DoS protection\"), msg, CClientUIInterface::MSG_ERROR);\n         return;\n     }\n \n@@ -702,7 +704,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             .arg(reply->errorString());\n \n         qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n-        Q_EMIT message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n+        emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         return;\n     }\n \n@@ -716,12 +718,12 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n         if (!request.parse(data))\n         {\n             qWarning() << \"PaymentServer::netRequestFinished: Error parsing payment request\";\n-            Q_EMIT message(tr(\"Payment request error\"),\n+            emit message(tr(\"Payment request error\"),\n                 tr(\"Payment request cannot be parsed!\"),\n                 CClientUIInterface::MSG_ERROR);\n         }\n         else if (processPaymentRequest(request, recipient))\n-            Q_EMIT receivedPaymentRequest(recipient);\n+            emit receivedPaymentRequest(recipient);\n \n         return;\n     }\n@@ -734,11 +736,11 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n                 .arg(reply->request().url().toString());\n \n             qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n-            Q_EMIT message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n+            emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         }\n         else\n         {\n-            Q_EMIT receivedPaymentACK(GUIUtil::HtmlEscape(paymentACK.memo()));\n+            emit receivedPaymentACK(GUIUtil::HtmlEscape(paymentACK.memo()));\n         }\n     }\n }\n@@ -748,11 +750,11 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n     Q_UNUSED(reply);\n \n     QString errString;\n-    Q_FOREACH (const QSslError& err, errs) {\n+    foreach (const QSslError& err, errs) {\n         qWarning() << \"PaymentServer::reportSslErrors: \" << err;\n         errString += err.errorString() + \"\\n\";\n     }\n-    Q_EMIT message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);\n+    emit message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);\n }\n \n void PaymentServer::setOptionsModel(OptionsModel *optionsModel)\n@@ -763,7 +765,7 @@ void PaymentServer::setOptionsModel(OptionsModel *optionsModel)\n void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n {\n     // currently we don't futher process or store the paymentACK message\n-    Q_EMIT message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n+    emit message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n }\n \n bool PaymentServer::verifyNetwork(const payments::PaymentDetails& requestDetails)"
      },
      {
        "sha": "32ed27983eb5f3beded9f821f5ac5baec213492e",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -98,7 +98,7 @@ class PaymentServer : public QObject\n     // Verify the payment request amount is valid\n     static bool verifyAmount(const CAmount& requestAmount);\n \n-Q_SIGNALS:\n+signals:\n     // Fired when a valid payment request is received\n     void receivedPaymentRequest(SendCoinsRecipient);\n \n@@ -108,7 +108,7 @@ class PaymentServer : public QObject\n     // Fired when a message should be reported to the user\n     void message(const QString &title, const QString &message, unsigned int style);\n \n-public Q_SLOTS:\n+public slots:\n     // Signal this when the main window's UI is ready\n     // to display payment requests to the user\n     void uiReady();\n@@ -119,7 +119,7 @@ public Q_SLOTS:\n     // Handle an incoming URI, URI with local file scheme or file\n     void handleURIOrFile(const QString& s);\n \n-private Q_SLOTS:\n+private slots:\n     void handleURIConnection();\n     void netRequestFinished(QNetworkReply*);\n     void reportSslErrors(QNetworkReply*, const QList<QSslError> &);"
      },
      {
        "sha": "f5904a4d8e33faec0a98ba8e5ec63a42f1d7769a",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -63,7 +63,7 @@ class PeerTablePriv\n #if QT_VERSION >= 0x040700\n             cachedNodeStats.reserve(vNodes.size());\n #endif\n-            Q_FOREACH (CNode* pnode, vNodes)\n+            foreach (CNode* pnode, vNodes)\n             {\n                 CNodeCombinedStats stats;\n                 stats.nodeStateStats.nMisbehavior = 0;\n@@ -92,7 +92,7 @@ class PeerTablePriv\n         // build index map\n         mapNodeRows.clear();\n         int row = 0;\n-        Q_FOREACH (const CNodeCombinedStats& stats, cachedNodeStats)\n+        foreach (const CNodeCombinedStats& stats, cachedNodeStats)\n             mapNodeRows.insert(std::pair<NodeId, int>(stats.nodeStats.nodeid, row++));\n     }\n \n@@ -220,9 +220,9 @@ const CNodeCombinedStats *PeerTableModel::getNodeStats(int idx)\n \n void PeerTableModel::refresh()\n {\n-    Q_EMIT layoutAboutToBeChanged();\n+    emit layoutAboutToBeChanged();\n     priv->refreshPeers();\n-    Q_EMIT layoutChanged();\n+    emit layoutChanged();\n }\n \n int PeerTableModel::getRowByNodeId(NodeId nodeid)"
      },
      {
        "sha": "bff7bb824ef5937097b164213c3e104df01be27d",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -68,7 +68,7 @@ class PeerTableModel : public QAbstractTableModel\n     void sort(int column, Qt::SortOrder order);\n     /*@}*/\n \n-public Q_SLOTS:\n+public slots:\n     void refresh();\n \n private:"
      },
      {
        "sha": "f63568d27f7832988df1b6f85fdade63a04d31b6",
        "filename": "src/qt/qvalidatedlineedit.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/qvalidatedlineedit.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/qvalidatedlineedit.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -27,11 +27,11 @@ class QValidatedLineEdit : public QLineEdit\n     bool valid;\n     const QValidator *checkValidator;\n \n-public Q_SLOTS:\n+public slots:\n     void setValid(bool valid);\n     void setEnabled(bool enabled);\n \n-private Q_SLOTS:\n+private slots:\n     void markValid();\n     void checkValidity();\n };"
      },
      {
        "sha": "f73268c9587900bda7aec0c2c8add3d67ec07a9e",
        "filename": "src/qt/qvaluecombobox.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/qvaluecombobox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/qvaluecombobox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -27,5 +27,5 @@ void QValueComboBox::setRole(int role)\n \n void QValueComboBox::handleSelectionChanged(int idx)\n {\n-    Q_EMIT valueChanged();\n+    emit valueChanged();\n }"
      },
      {
        "sha": "dc85d64cb5b254f25ee97f744192ab3364eb0f4a",
        "filename": "src/qt/qvaluecombobox.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/qvaluecombobox.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/qvaluecombobox.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -24,13 +24,13 @@ class QValueComboBox : public QComboBox\n     /** Specify model role to use as ordinal value (defaults to Qt::UserRole) */\n     void setRole(int role);\n \n-Q_SIGNALS:\n+signals:\n     void valueChanged();\n \n private:\n     int role;\n \n-private Q_SLOTS:\n+private slots:\n     void handleSelectionChanged(int idx);\n };\n "
      },
      {
        "sha": "28cbd3abed75b0271864e28c251b33d2137301c9",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -185,7 +185,8 @@ void ReceiveCoinsDialog::on_showRequestButton_clicked()\n         return;\n     QModelIndexList selection = ui->recentRequestsView->selectionModel()->selectedRows();\n \n-    Q_FOREACH (const QModelIndex& index, selection) {\n+    foreach (QModelIndex index, selection)\n+    {\n         on_recentRequestsView_doubleClicked(index);\n     }\n }"
      },
      {
        "sha": "70a1842fa2ec1fa2a31c6089cc7a7bad2a346de4",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -44,7 +44,7 @@ class ReceiveCoinsDialog : public QDialog\n \n     void setModel(WalletModel *model);\n \n-public Q_SLOTS:\n+public slots:\n     void clear();\n     void reject();\n     void accept();\n@@ -60,7 +60,7 @@ public Q_SLOTS:\n     void copyColumnToClipboard(int column);\n     virtual void resizeEvent(QResizeEvent *event);\n \n-private Q_SLOTS:\n+private slots:\n     void on_receiveButton_clicked();\n     void on_showRequestButton_clicked();\n     void on_removeRequestButton_clicked();"
      },
      {
        "sha": "3e5f897be6fad367d6903334f7398a91339f15e9",
        "filename": "src/qt/receiverequestdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/receiverequestdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/receiverequestdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -32,7 +32,7 @@ class QRImageWidget : public QLabel\n     explicit QRImageWidget(QWidget *parent = 0);\n     QImage exportImage();\n \n-public Q_SLOTS:\n+public slots:\n     void saveImage();\n     void copyImage();\n \n@@ -55,7 +55,7 @@ class ReceiveRequestDialog : public QDialog\n     void setModel(OptionsModel *model);\n     void setInfo(const SendCoinsRecipient &info);\n \n-private Q_SLOTS:\n+private slots:\n     void on_btnCopyURI_clicked();\n     void on_btnCopyAddress_clicked();\n "
      },
      {
        "sha": "543b977d8fbf34d8117f9724e2d27c2edfc4f3e0",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -119,7 +119,7 @@ QVariant RecentRequestsTableModel::headerData(int section, Qt::Orientation orien\n void RecentRequestsTableModel::updateAmountColumnTitle()\n {\n     columns[Amount] = getAmountTitle();\n-    Q_EMIT headerDataChanged(Qt::Horizontal,Amount,Amount);\n+    emit headerDataChanged(Qt::Horizontal,Amount,Amount);\n }\n \n /** Gets title for amount column including current display unit if optionsModel reference available. */\n@@ -214,7 +214,7 @@ void RecentRequestsTableModel::addNewRequest(RecentRequestEntry &recipient)\n void RecentRequestsTableModel::sort(int column, Qt::SortOrder order)\n {\n     qSort(list.begin(), list.end(), RecentRequestEntryLessThan(column, order));\n-    Q_EMIT dataChanged(index(0, 0, QModelIndex()), index(list.size() - 1, NUMBER_OF_COLUMNS - 1, QModelIndex()));\n+    emit dataChanged(index(0, 0, QModelIndex()), index(list.size() - 1, NUMBER_OF_COLUMNS - 1, QModelIndex()));\n }\n \n void RecentRequestsTableModel::updateDisplayUnit()"
      },
      {
        "sha": "85bad126dbab735c516b4e4d3ee5f37db1e583df",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -89,7 +89,7 @@ class RecentRequestsTableModel: public QAbstractTableModel\n     void addNewRequest(const std::string &recipient);\n     void addNewRequest(RecentRequestEntry &recipient);\n \n-public Q_SLOTS:\n+public slots:\n     void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);\n     void updateDisplayUnit();\n "
      },
      {
        "sha": "681617bd8172a4a81c86f0a0971da771ff7a2f24",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -60,10 +60,10 @@ class RPCExecutor : public QObject\n {\n     Q_OBJECT\n \n-public Q_SLOTS:\n+public slots:\n     void request(const QString &command);\n \n-Q_SIGNALS:\n+signals:\n     void reply(int category, const QString &command);\n };\n \n@@ -95,7 +95,7 @@ bool parseCommandLine(std::vector<std::string> &args, const std::string &strComm\n         STATE_ESCAPE_DOUBLEQUOTED\n     } state = STATE_EATING_SPACES;\n     std::string curarg;\n-    Q_FOREACH(char ch, strCommand)\n+    foreach(char ch, strCommand)\n     {\n         switch(state)\n         {\n@@ -158,7 +158,7 @@ void RPCExecutor::request(const QString &command)\n     std::vector<std::string> args;\n     if(!parseCommandLine(args, command.toStdString()))\n     {\n-        Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n+        emit reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n         return;\n     }\n     if(args.empty())\n@@ -180,24 +180,24 @@ void RPCExecutor::request(const QString &command)\n         else\n             strPrint = result.write(2);\n \n-        Q_EMIT reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n+        emit reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n     }\n     catch (UniValue& objError)\n     {\n         try // Nice formatting for standard-format error\n         {\n             int code = find_value(objError, \"code\").get_int();\n             std::string message = find_value(objError, \"message\").get_str();\n-            Q_EMIT reply(RPCConsole::CMD_ERROR, QString::fromStdString(message) + \" (code \" + QString::number(code) + \")\");\n+            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(message) + \" (code \" + QString::number(code) + \")\");\n         }\n         catch (const std::runtime_error&) // raised when converting to invalid type, i.e. missing code or message\n         {   // Show raw JSON object\n-            Q_EMIT reply(RPCConsole::CMD_ERROR, QString::fromStdString(objError.write()));\n+            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(objError.write()));\n         }\n     }\n     catch (const std::exception& e)\n     {\n-        Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Error: \") + QString::fromStdString(e.what()));\n+        emit reply(RPCConsole::CMD_ERROR, QString(\"Error: \") + QString::fromStdString(e.what()));\n     }\n }\n \n@@ -245,7 +245,7 @@ RPCConsole::RPCConsole(QWidget *parent) :\n RPCConsole::~RPCConsole()\n {\n     GUIUtil::saveWindowGeometry(\"nRPCConsoleWindow\", this);\n-    Q_EMIT stopExecutor();\n+    emit stopExecutor();\n     delete ui;\n }\n \n@@ -431,7 +431,7 @@ void RPCConsole::on_lineEdit_returnPressed()\n     if(!cmd.isEmpty())\n     {\n         message(CMD_REQUEST, cmd);\n-        Q_EMIT cmdRequest(cmd);\n+        emit cmdRequest(cmd);\n         // Remove command, if already in history\n         history.removeOne(cmd);\n         // Append command to history\n@@ -687,7 +687,7 @@ void RPCConsole::disconnectSelectedNode()\n     QString strNode = GUIUtil::getEntryData(ui->peerWidget, 0, PeerTableModel::Address);\n     // Find the node, disconnect it and clear the selected node\n     if (CNode *bannedNode = FindNode(strNode.toStdString())) {\n-        bannedNode->fDisconnect = true;\n+        bannedNode->CloseSocketDisconnect();\n         clearSelectedNode();\n     }\n }"
      },
      {
        "sha": "a309df7ba74bab5bf5cb24896f4e58d1121ee67a",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -46,7 +46,7 @@ class RPCConsole: public QWidget\n     virtual bool eventFilter(QObject* obj, QEvent *event);\n     void keyPressEvent(QKeyEvent *);\n \n-private Q_SLOTS:\n+private slots:\n     void on_lineEdit_returnPressed();\n     void on_tabWidget_currentChanged(int index);\n     /** open the debug.log from the current datadir */\n@@ -61,7 +61,7 @@ private Q_SLOTS:\n     /** Show custom context menu on Peers tab */\n     void showMenu(const QPoint& point);\n \n-public Q_SLOTS:\n+public slots:\n     void clear();\n     void message(int category, const QString &message, bool html = false);\n     /** Set number of connections shown in the UI */\n@@ -79,7 +79,7 @@ public Q_SLOTS:\n     /** Disconnect a selected node on the Peers tab */\n     void disconnectSelectedNode();\n \n-Q_SIGNALS:\n+signals:\n     // For RPC command executor\n     void stopExecutor();\n     void cmdRequest(const QString &command);"
      },
      {
        "sha": "3d57711568ae823fed9627377c4ec4f35cbf296d",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -251,7 +251,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     // Format confirmation message\n     QStringList formatted;\n-    Q_FOREACH(const SendCoinsRecipient &rcp, currentTransaction.getRecipients())\n+    foreach(const SendCoinsRecipient &rcp, currentTransaction.getRecipients())\n     {\n         // generate bold amount string\n         QString amount = \"<b>\" + BitcoinUnits::formatHtmlWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n@@ -305,7 +305,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     questionString.append(\"<hr />\");\n     CAmount totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n     QStringList alternativeUnits;\n-    Q_FOREACH(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n+    foreach(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n     {\n         if(u != model->getOptionsModel()->getDisplayUnit())\n             alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n@@ -540,7 +540,7 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         return;\n     }\n \n-    Q_EMIT message(tr(\"Send Coins\"), msgParams.first, msgParams.second);\n+    emit message(tr(\"Send Coins\"), msgParams.first, msgParams.second);\n }\n \n void SendCoinsDialog::minimizeFeeSection(bool fMinimize)"
      },
      {
        "sha": "fc513bf2ba5cbb899f86b0300e36f4cd9983a65f",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -45,7 +45,7 @@ class SendCoinsDialog : public QDialog\n     void pasteEntry(const SendCoinsRecipient &rv);\n     bool handlePaymentRequest(const SendCoinsRecipient &recipient);\n \n-public Q_SLOTS:\n+public slots:\n     void clear();\n     void reject();\n     void accept();\n@@ -62,13 +62,13 @@ public Q_SLOTS:\n     bool fFeeMinimized;\n \n     // Process WalletModel::SendCoinsReturn and generate a pair consisting\n-    // of a message and message flags for use in Q_EMIT message().\n+    // of a message and message flags for use in emit message().\n     // Additional parameter msgArg can be used via .arg(msgArg).\n     void processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg = QString());\n     void minimizeFeeSection(bool fMinimize);\n     void updateFeeMinimizedLabel();\n \n-private Q_SLOTS:\n+private slots:\n     void on_sendButton_clicked();\n     void on_buttonChooseFee_clicked();\n     void on_buttonMinimizeFee_clicked();\n@@ -93,7 +93,7 @@ private Q_SLOTS:\n     void updateSmartFeeLabel();\n     void updateGlobalFeeVariables();\n \n-Q_SIGNALS:\n+signals:\n     // Fired when a message should be reported to the user\n     void message(const QString &title, const QString &message, unsigned int style);\n };"
      },
      {
        "sha": "6eec33ffd4a5d452a7f1e1f08c94eb2c4bf279ba",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -114,7 +114,7 @@ void SendCoinsEntry::clear()\n \n void SendCoinsEntry::deleteClicked()\n {\n-    Q_EMIT removeEntry(this);\n+    emit removeEntry(this);\n }\n \n bool SendCoinsEntry::validate()"
      },
      {
        "sha": "c2d1185bddb8e29ebfda6925001e2943934bd935",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -45,15 +45,15 @@ class SendCoinsEntry : public QStackedWidget\n \n     void setFocus();\n \n-public Q_SLOTS:\n+public slots:\n     void clear();\n \n-Q_SIGNALS:\n+signals:\n     void removeEntry(SendCoinsEntry *entry);\n     void payAmountChanged();\n     void subtractFeeFromAmountChanged();\n \n-private Q_SLOTS:\n+private slots:\n     void deleteClicked();\n     void on_payTo_textChanged(const QString &address);\n     void on_addressBookButton_clicked();"
      },
      {
        "sha": "27807adc8490d4b7379697a262a8ed55d1a23ff8",
        "filename": "src/qt/signverifymessagedialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/signverifymessagedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/signverifymessagedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -35,7 +35,7 @@ class SignVerifyMessageDialog : public QDialog\n     Ui::SignVerifyMessageDialog *ui;\n     WalletModel *model;\n \n-private Q_SLOTS:\n+private slots:\n     /* sign message */\n     void on_addressBookButton_SM_clicked();\n     void on_pasteButton_SM_clicked();"
      },
      {
        "sha": "84e4556dd861a55eba45eff1e27a2f0c8cd0ac4a",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -27,7 +27,7 @@ class SplashScreen : public QWidget\n     void paintEvent(QPaintEvent *event);\n     void closeEvent(QCloseEvent *event);\n \n-public Q_SLOTS:\n+public slots:\n     /** Slot to call finish() method as it's not defined as slot */\n     void slotFinish(QWidget *mainWin);\n "
      },
      {
        "sha": "e2ec439b2e39a1550230b4744f24a4feef8bbac6",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -195,7 +195,7 @@ void PaymentServerTests::paymentServerTests()\n     QVERIFY(r.paymentRequest.IsInitialized());\n     // Extract address and amount from the request\n     QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n-    Q_FOREACH (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    foreach (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest))\n             QCOMPARE(PaymentServer::verifyAmount(sendingTo.second), false);"
      },
      {
        "sha": "c98bbf0833a335a5043003333118803b01349b1e",
        "filename": "src/qt/test/paymentservertests.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/test/paymentservertests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/test/paymentservertests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -14,7 +14,7 @@ class PaymentServerTests : public QObject\n {\n     Q_OBJECT\n \n-private Q_SLOTS:\n+private slots:\n     void paymentServerTests();\n };\n \n@@ -25,7 +25,7 @@ class RecipientCatcher : public QObject\n {\n     Q_OBJECT\n \n-public Q_SLOTS:\n+public slots:\n     void getRecipient(SendCoinsRecipient r);\n \n public:"
      },
      {
        "sha": "a0b7dc6c72ee93d6290c65547c8c3e15372faa70",
        "filename": "src/qt/test/uritests.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/test/uritests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/test/uritests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/uritests.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -12,7 +12,7 @@ class URITests : public QObject\n {\n     Q_OBJECT\n \n-private Q_SLOTS:\n+private slots:\n     void uriTests();\n };\n "
      },
      {
        "sha": "0b2eb9eaf2e05865d4c297bc9fa0a1b04b922fd2",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -139,10 +139,10 @@ void TrafficGraphWidget::updateRates()\n     }\n \n     float tmax = 0.0f;\n-    Q_FOREACH(float f, vSamplesIn) {\n+    foreach(float f, vSamplesIn) {\n         if(f > tmax) tmax = f;\n     }\n-    Q_FOREACH(float f, vSamplesOut) {\n+    foreach(float f, vSamplesOut) {\n         if(f > tmax) tmax = f;\n     }\n     fMax = tmax;"
      },
      {
        "sha": "4c6b17fe7ea16d66d80f734ed8dbdfa8112b1b81",
        "filename": "src/qt/trafficgraphwidget.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/trafficgraphwidget.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/trafficgraphwidget.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -27,7 +27,7 @@ class TrafficGraphWidget : public QWidget\n protected:\n     void paintEvent(QPaintEvent *);\n \n-public Q_SLOTS:\n+public slots:\n     void updateRates();\n     void setGraphRangeMins(int mins);\n     void clear();"
      },
      {
        "sha": "5662b1665751a4f2a02611d89008739cef38d23e",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -21,6 +21,8 @@\n #include <stdint.h>\n #include <string>\n \n+using namespace std;\n+\n QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n {\n     AssertLockHeld(cs_main);\n@@ -241,14 +243,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + TransactionRecord::formatSubTxId(wtx.GetHash(), rec->idx) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n+    foreach (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n         if (r.first == \"Message\")\n             strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n     //\n     // PaymentRequest info:\n     //\n-    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n+    foreach (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n     {\n         if (r.first == \"PaymentRequest\")\n         {"
      },
      {
        "sha": "34464b4075e5dfd0da669e549cd3f24eacc0b565",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -142,7 +142,7 @@ class TransactionTablePriv\n                 {\n                     parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex+toInsert.size()-1);\n                     int insert_idx = lowerIndex;\n-                    Q_FOREACH(const TransactionRecord &rec, toInsert)\n+                    foreach(const TransactionRecord &rec, toInsert)\n                     {\n                         cachedWallet.insert(insert_idx, rec);\n                         insert_idx += 1;\n@@ -245,7 +245,7 @@ TransactionTableModel::~TransactionTableModel()\n void TransactionTableModel::updateAmountColumnTitle()\n {\n     columns[Amount] = BitcoinUnits::getAmountColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n-    Q_EMIT headerDataChanged(Qt::Horizontal,Amount,Amount);\n+    emit headerDataChanged(Qt::Horizontal,Amount,Amount);\n }\n \n void TransactionTableModel::updateTransaction(const QString &hash, int status, bool showTransaction)\n@@ -262,8 +262,8 @@ void TransactionTableModel::updateConfirmations()\n     // Invalidate status (number of confirmations) and (possibly) description\n     //  for all rows. Qt is smart enough to only actually request the data for the\n     //  visible rows.\n-    Q_EMIT dataChanged(index(0, Status), index(priv->size()-1, Status));\n-    Q_EMIT dataChanged(index(0, ToAddress), index(priv->size()-1, ToAddress));\n+    emit dataChanged(index(0, Status), index(priv->size()-1, Status));\n+    emit dataChanged(index(0, ToAddress), index(priv->size()-1, ToAddress));\n }\n \n int TransactionTableModel::rowCount(const QModelIndex &parent) const\n@@ -650,7 +650,7 @@ void TransactionTableModel::updateDisplayUnit()\n {\n     // emit dataChanged to update Amount column with the current unit\n     updateAmountColumnTitle();\n-    Q_EMIT dataChanged(index(0, Amount), index(priv->size()-1, Amount));\n+    emit dataChanged(index(0, Amount), index(priv->size()-1, Amount));\n }\n \n // queue notifications to show a non freezing progress dialog e.g. for rescan"
      },
      {
        "sha": "30a15df9e6e06ee3206d134f360eab04546bfdf9",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -98,7 +98,7 @@ class TransactionTableModel : public QAbstractTableModel\n     QVariant txWatchonlyDecoration(const TransactionRecord *wtx) const;\n     QVariant txAddressDecoration(const TransactionRecord *wtx) const;\n \n-public Q_SLOTS:\n+public slots:\n     /* New transaction, or transaction changed status */\n     void updateTransaction(const QString &hash, int status, bool showTransaction);\n     void updateConfirmations();"
      },
      {
        "sha": "526940632e06c66493992e21903f5bf829c644e6",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -341,11 +341,11 @@ void TransactionView::exportClicked()\n     writer.addColumn(tr(\"ID\"), 0, TransactionTableModel::TxIDRole);\n \n     if(!writer.write()) {\n-        Q_EMIT message(tr(\"Exporting Failed\"), tr(\"There was an error trying to save the transaction history to %1.\").arg(filename),\n+        emit message(tr(\"Exporting Failed\"), tr(\"There was an error trying to save the transaction history to %1.\").arg(filename),\n             CClientUIInterface::MSG_ERROR);\n     }\n     else {\n-        Q_EMIT message(tr(\"Exporting Successful\"), tr(\"The transaction history was successfully saved to %1.\").arg(filename),\n+        emit message(tr(\"Exporting Successful\"), tr(\"The transaction history was successfully saved to %1.\").arg(filename),\n             CClientUIInterface::MSG_INFORMATION);\n     }\n }"
      },
      {
        "sha": "092d919042691cc5d50ef724a140aca2deff571f",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -83,7 +83,7 @@ class TransactionView : public QWidget\n \n     bool eventFilter(QObject *obj, QEvent *event);\n \n-private Q_SLOTS:\n+private slots:\n     void contextualMenu(const QPoint &);\n     void dateRangeChanged();\n     void showDetails();\n@@ -95,13 +95,13 @@ private Q_SLOTS:\n     void openThirdPartyTxUrl(QString url);\n     void updateWatchOnlyColumn(bool fHaveWatchOnly);\n \n-Q_SIGNALS:\n+signals:\n     void doubleClicked(const QModelIndex&);\n \n     /**  Fired when a message should be reported to the user */\n     void message(const QString &title, const QString &message, unsigned int style);\n \n-public Q_SLOTS:\n+public slots:\n     void chooseDate(int idx);\n     void chooseType(int idx);\n     void chooseWatchonly(int idx);"
      },
      {
        "sha": "386cf31d736850acc2bf95eebe3c76ddebeee2f6",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -84,7 +84,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         QTextCharFormat bold;\n         bold.setFontWeight(QFont::Bold);\n \n-        Q_FOREACH (const QString &line, coreOptions.split(\"\\n\")) {\n+        foreach (const QString &line, coreOptions.split(\"\\n\")) {\n             if (line.startsWith(\"  -\"))\n             {\n                 cursor.currentTable()->appendRows(1);"
      },
      {
        "sha": "288b985f137f3ec640e5c1ea9e7ecbdcce5cddc8",
        "filename": "src/qt/utilitydialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/utilitydialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/utilitydialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -31,7 +31,7 @@ class HelpMessageDialog : public QDialog\n     Ui::HelpMessageDialog *ui;\n     QString text;\n \n-private Q_SLOTS:\n+private slots:\n     void on_okButton_accepted();\n };\n "
      },
      {
        "sha": "eea97defc93a58fc12bda7269559f55ccb202853",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -47,7 +47,7 @@ class WalletFrame : public QFrame\n \n     WalletView *currentWalletView();\n \n-public Q_SLOTS:\n+public slots:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n     /** Switch to history (transactions) page */"
      },
      {
        "sha": "9b8be76bebfa9dc9934d5c2bb9fb01b26af0cc74",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -25,6 +25,8 @@\n #include <QSet>\n #include <QTimer>\n \n+using namespace std;\n+\n WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n     transactionTableModel(0),\n@@ -105,7 +107,7 @@ void WalletModel::updateStatus()\n     EncryptionStatus newEncryptionStatus = getEncryptionStatus();\n \n     if(cachedEncryptionStatus != newEncryptionStatus)\n-        Q_EMIT encryptionStatusChanged(newEncryptionStatus);\n+        emit encryptionStatusChanged(newEncryptionStatus);\n }\n \n void WalletModel::pollBalanceChanged()\n@@ -157,7 +159,7 @@ void WalletModel::checkBalanceChanged()\n         cachedWatchOnlyBalance = newWatchOnlyBalance;\n         cachedWatchUnconfBalance = newWatchUnconfBalance;\n         cachedWatchImmatureBalance = newWatchImmatureBalance;\n-        Q_EMIT balanceChanged(newBalance, newUnconfirmedBalance, newImmatureBalance,\n+        emit balanceChanged(newBalance, newUnconfirmedBalance, newImmatureBalance,\n                             newWatchOnlyBalance, newWatchUnconfBalance, newWatchImmatureBalance);\n     }\n }\n@@ -178,7 +180,7 @@ void WalletModel::updateAddressBook(const QString &address, const QString &label\n void WalletModel::updateWatchOnlyFlag(bool fHaveWatchonly)\n {\n     fHaveWatchOnly = fHaveWatchonly;\n-    Q_EMIT notifyWatchonlyChanged(fHaveWatchonly);\n+    emit notifyWatchonlyChanged(fHaveWatchonly);\n }\n \n bool WalletModel::validateAddress(const QString &address)\n@@ -203,7 +205,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     int nAddresses = 0;\n \n     // Pre-check input data for validity\n-    Q_FOREACH(const SendCoinsRecipient &rcp, recipients)\n+    foreach(const SendCoinsRecipient &rcp, recipients)\n     {\n         if (rcp.fSubtractFeeFromAmount)\n             fSubtractFeeFromAmount = true;\n@@ -283,7 +285,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             {\n                 return SendCoinsReturn(AmountWithFeeExceedsBalance);\n             }\n-            Q_EMIT message(tr(\"Send Coins\"), QString::fromStdString(strFailReason),\n+            emit message(tr(\"Send Coins\"), QString::fromStdString(strFailReason),\n                          CClientUIInterface::MSG_ERROR);\n             return TransactionCreationFailed;\n         }\n@@ -304,7 +306,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         LOCK2(cs_main, wallet->cs_wallet);\n         CWalletTx *newTx = transaction.getTransaction();\n \n-        Q_FOREACH(const SendCoinsRecipient &rcp, transaction.getRecipients())\n+        foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n         {\n             if (rcp.paymentRequest.IsInitialized())\n             {\n@@ -335,7 +337,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n \n     // Add addresses / update labels that we've sent to to the address book,\n     // and emit coinsSent signal for each recipient\n-    Q_FOREACH(const SendCoinsRecipient &rcp, transaction.getRecipients())\n+    foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n     {\n         // Don't touch the address book when we have a payment request\n         if (!rcp.paymentRequest.IsInitialized())\n@@ -359,7 +361,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n                 }\n             }\n         }\n-        Q_EMIT coinsSent(wallet, rcp, transaction_array);\n+        emit coinsSent(wallet, rcp, transaction_array);\n     }\n     checkBalanceChanged(); // update balance immediately, otherwise there could be a short noticeable delay until pollBalanceChanged hits\n \n@@ -519,7 +521,7 @@ WalletModel::UnlockContext WalletModel::requestUnlock()\n     if(was_locked)\n     {\n         // Request UI to unlock wallet\n-        Q_EMIT requireUnlock();\n+        emit requireUnlock();\n     }\n     // If wallet is still locked, unlock was failed or cancelled, mark context as invalid\n     bool valid = getEncryptionStatus() != Locked;"
      },
      {
        "sha": "e263438880c62f7c3decfc6940ae040b91789dd8",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -227,7 +227,7 @@ class WalletModel : public QObject\n     void unsubscribeFromCoreSignals();\n     void checkBalanceChanged();\n \n-Q_SIGNALS:\n+signals:\n     // Signal that balance in wallet changed\n     void balanceChanged(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n                         const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n@@ -252,7 +252,7 @@ class WalletModel : public QObject\n     // Watch-only address added\n     void notifyWatchonlyChanged(bool fHaveWatchonly);\n \n-public Q_SLOTS:\n+public slots:\n     /* Wallet status might have changed */\n     void updateStatus();\n     /* New transaction, or transaction changed status */"
      },
      {
        "sha": "206bb7c77494e9e52026136d3bcfc8f7d399296b",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -81,7 +81,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n CAmount WalletModelTransaction::getTotalTransactionAmount()\n {\n     CAmount totalTransactionAmount = 0;\n-    Q_FOREACH(const SendCoinsRecipient &rcp, recipients)\n+    foreach(const SendCoinsRecipient &rcp, recipients)\n     {\n         totalTransactionAmount += rcp.amount;\n     }"
      },
      {
        "sha": "956c8b891319d436b599c6cf09c53c565b863976",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -153,7 +153,7 @@ void WalletView::processNewTransaction(const QModelIndex& parent, int start, int\n     QString address = ttm->data(index, TransactionTableModel::AddressRole).toString();\n     QString label = ttm->data(index, TransactionTableModel::LabelRole).toString();\n \n-    Q_EMIT incomingTransaction(date, walletModel->getOptionsModel()->getDisplayUnit(), amount, type, address, label);\n+    emit incomingTransaction(date, walletModel->getOptionsModel()->getDisplayUnit(), amount, type, address, label);\n }\n \n void WalletView::gotoOverviewPage()\n@@ -215,7 +215,7 @@ void WalletView::showOutOfSyncWarning(bool fShow)\n \n void WalletView::updateEncryptionStatus()\n {\n-    Q_EMIT encryptionStatusChanged(walletModel->getEncryptionStatus());\n+    emit encryptionStatusChanged(walletModel->getEncryptionStatus());\n }\n \n void WalletView::encryptWallet(bool status)\n@@ -239,11 +239,11 @@ void WalletView::backupWallet()\n         return;\n \n     if (!walletModel->backupWallet(filename)) {\n-        Q_EMIT message(tr(\"Backup Failed\"), tr(\"There was an error trying to save the wallet data to %1.\").arg(filename),\n+        emit message(tr(\"Backup Failed\"), tr(\"There was an error trying to save the wallet data to %1.\").arg(filename),\n             CClientUIInterface::MSG_ERROR);\n         }\n     else {\n-        Q_EMIT message(tr(\"Backup Successful\"), tr(\"The wallet data was successfully saved to %1.\").arg(filename),\n+        emit message(tr(\"Backup Successful\"), tr(\"The wallet data was successfully saved to %1.\").arg(filename),\n             CClientUIInterface::MSG_INFORMATION);\n     }\n }"
      },
      {
        "sha": "1840e21e9cf010344000bd51ef11f65ab54d67e2",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -65,7 +65,7 @@ class WalletView : public QStackedWidget\n \n     QProgressDialog *progressDialog;\n \n-public Q_SLOTS:\n+public slots:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n     /** Switch to history (transactions) page */\n@@ -105,7 +105,7 @@ public Q_SLOTS:\n     /** Show progress dialog e.g. for rescan */\n     void showProgress(const QString &title, int nProgress);\n \n-Q_SIGNALS:\n+signals:\n     /** Signal that we want to show the main window */\n     void showNormalIfMinimized();\n     /**  Fired when a message should be reported to the user */"
      },
      {
        "sha": "1fce7dfc9c5f6a20cb6446abdea2458e43921d74",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 16,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -20,7 +20,7 @@\n \n using namespace std;\n \n-static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n+static const int MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n \n enum RetFormat {\n     RF_UNDEF,\n@@ -65,7 +65,6 @@ class RestErr\n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n extern UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n-extern UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n static RestErr RESTERR(enum HTTPStatusCode status, string message)\n {\n@@ -135,23 +134,23 @@ static bool rest_headers(AcceptedConnection* conn,\n     if (!ParseHashStr(hashStr, hash))\n         throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n-    std::vector<const CBlockIndex *> headers;\n+    std::vector<CBlockHeader> headers;\n     headers.reserve(count);\n     {\n         LOCK(cs_main);\n         BlockMap::const_iterator it = mapBlockIndex.find(hash);\n         const CBlockIndex *pindex = (it != mapBlockIndex.end()) ? it->second : NULL;\n         while (pindex != NULL && chainActive.Contains(pindex)) {\n-            headers.push_back(pindex);\n+            headers.push_back(pindex->GetBlockHeader());\n             if (headers.size() == (unsigned long)count)\n                 break;\n             pindex = chainActive.Next(pindex);\n         }\n     }\n \n     CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n-    BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n-        ssHeader << pindex->GetBlockHeader();\n+    BOOST_FOREACH(const CBlockHeader &header, headers) {\n+        ssHeader << header;\n     }\n \n     switch (rf) {\n@@ -167,16 +166,6 @@ static bool rest_headers(AcceptedConnection* conn,\n         return true;\n     }\n \n-    case RF_JSON: {\n-        UniValue jsonHeaders(UniValue::VARR);\n-        BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n-            jsonHeaders.push_back(blockheaderToJSON(pindex));\n-        }\n-        string strJSON = jsonHeaders.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n-        return true;\n-    }\n-\n     default: {\n         throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n     }"
      },
      {
        "sha": "e45368cb97633adcb74b842d17b61de165e5f08d",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 136,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -51,31 +51,6 @@ double GetDifficulty(const CBlockIndex* blockindex)\n     return dDiff;\n }\n \n-UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n-{\n-    UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hash\", blockindex->GetBlockHash().GetHex()));\n-    int confirmations = -1;\n-    // Only report confirmations if the block is on the main chain\n-    if (chainActive.Contains(blockindex))\n-        confirmations = chainActive.Height() - blockindex->nHeight + 1;\n-    result.push_back(Pair(\"confirmations\", confirmations));\n-    result.push_back(Pair(\"height\", blockindex->nHeight));\n-    result.push_back(Pair(\"version\", blockindex->nVersion));\n-    result.push_back(Pair(\"merkleroot\", blockindex->hashMerkleRoot.GetHex()));\n-    result.push_back(Pair(\"time\", (int64_t)blockindex->nTime));\n-    result.push_back(Pair(\"nonce\", (uint64_t)blockindex->nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", blockindex->nBits)));\n-    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n-    result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n-\n-    if (blockindex->pprev)\n-        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n-    CBlockIndex *pnext = chainActive.Next(blockindex);\n-    if (pnext)\n-        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n-    return result;\n-}\n \n UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false)\n {\n@@ -117,6 +92,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     return result;\n }\n \n+\n UniValue getblockcount(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -279,62 +255,6 @@ UniValue getblockhash(const UniValue& params, bool fHelp)\n     return pblockindex->GetBlockHash().GetHex();\n }\n \n-UniValue getblockheader(const UniValue& params, bool fHelp)\n-{\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n-        throw runtime_error(\n-            \"getblockheader \\\"hash\\\" ( verbose )\\n\"\n-            \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n-            \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n-            \"2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data\\n\"\n-            \"\\nResult (for verbose = true):\\n\"\n-            \"{\\n\"\n-            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n-            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n-            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n-            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n-            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n-            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n-            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n-            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n-            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n-            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n-            \"}\\n\"\n-            \"\\nResult (for verbose=false):\\n\"\n-            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n-            + HelpExampleRpc(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n-        );\n-\n-    LOCK(cs_main);\n-\n-    std::string strHash = params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n-\n-    bool fVerbose = true;\n-    if (params.size() > 1)\n-        fVerbose = params[1].get_bool();\n-\n-    if (mapBlockIndex.count(hash) == 0)\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n-\n-    CBlockIndex* pblockindex = mapBlockIndex[hash];\n-\n-    if (!fVerbose)\n-    {\n-        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n-        ssBlock << pblockindex->GetBlockHeader();\n-        std::string strHex = HexStr(ssBlock.begin(), ssBlock.end());\n-        return strHex;\n-    }\n-\n-    return blockheaderToJSON(pblockindex);\n-}\n-\n UniValue getblock(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -425,6 +345,8 @@ UniValue gettxoutsetinfo(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n         );\n \n+    LOCK(cs_main);\n+\n     UniValue ret(UniValue::VOBJ);\n \n     CCoinsStats stats;\n@@ -549,36 +471,6 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n     return CVerifyDB().VerifyDB(pcoinsTip, nCheckLevel, nCheckDepth);\n }\n \n-/** Implementation of IsSuperMajority with better feedback */\n-static UniValue SoftForkMajorityDesc(int minVersion, CBlockIndex* pindex, int nRequired, const Consensus::Params& consensusParams)\n-{\n-    int nFound = 0;\n-    CBlockIndex* pstart = pindex;\n-    for (int i = 0; i < consensusParams.nMajorityWindow && pstart != NULL; i++)\n-    {\n-        if (pstart->nVersion >= minVersion)\n-            ++nFound;\n-        pstart = pstart->pprev;\n-    }\n-\n-    UniValue rv(UniValue::VOBJ);\n-    rv.push_back(Pair(\"status\", nFound >= nRequired));\n-    rv.push_back(Pair(\"found\", nFound));\n-    rv.push_back(Pair(\"required\", nRequired));\n-    rv.push_back(Pair(\"window\", consensusParams.nMajorityWindow));\n-    return rv;\n-}\n-\n-static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n-{\n-    UniValue rv(UniValue::VOBJ);\n-    rv.push_back(Pair(\"id\", name));\n-    rv.push_back(Pair(\"version\", version));\n-    rv.push_back(Pair(\"enforce\", SoftForkMajorityDesc(version, pindex, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams)));\n-    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams.nMajorityRejectBlockOutdated, consensusParams)));\n-    return rv;\n-}\n-\n UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -594,21 +486,6 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"  \\\"difficulty\\\": xxxxxx,     (numeric) the current difficulty\\n\"\n             \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n-            \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\"\n-            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) heighest block available\\n\"\n-            \"  \\\"softforks\\\": [            (array) status of softforks in progress\\n\"\n-            \"     {\\n\"\n-            \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\"\n-            \"        \\\"version\\\": xx,         (numeric) block version\\n\"\n-            \"        \\\"enforce\\\": {           (object) progress toward enforcing the softfork rules for new-version blocks\\n\"\n-            \"           \\\"status\\\": xx,       (boolean) true if threshold reached\\n\"\n-            \"           \\\"found\\\": xx,        (numeric) number of blocks with the new version found\\n\"\n-            \"           \\\"required\\\": xx,     (numeric) number of blocks required to trigger\\n\"\n-            \"           \\\"window\\\": xx,       (numeric) maximum size of examined window of recent blocks\\n\"\n-            \"        },\\n\"\n-            \"        \\\"reject\\\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \\\"enforce\\\")\\n\"\n-            \"     }, ...\\n\"\n-            \"  ]\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getblockchaininfo\", \"\")\n@@ -626,14 +503,6 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"verificationprogress\",  Checkpoints::GuessVerificationProgress(Params().Checkpoints(), chainActive.Tip())));\n     obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n     obj.push_back(Pair(\"pruned\",                fPruneMode));\n-\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n-    CBlockIndex* tip = chainActive.Tip();\n-    UniValue softforks(UniValue::VARR);\n-    softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n-    softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n-    obj.push_back(Pair(\"softforks\",             softforks));\n-\n     if (fPruneMode)\n     {\n         CBlockIndex *block = chainActive.Tip();\n@@ -760,7 +629,6 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"size\\\": xxxxx                (numeric) Current tx count\\n\"\n             \"  \\\"bytes\\\": xxxxx               (numeric) Sum of all tx sizes\\n\"\n-            \"  \\\"usage\\\": xxxxx               (numeric) Total memory usage for the mempool\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmempoolinfo\", \"\")\n@@ -770,7 +638,6 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n     UniValue ret(UniValue::VOBJ);\n     ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n     ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n-    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n \n     return ret;\n }"
      },
      {
        "sha": "f254da5de0146d419da8de6113a975550d341b22",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -71,15 +71,13 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listunspent\", 1 },\n     { \"listunspent\", 2 },\n     { \"getblock\", 1 },\n-    { \"getblockheader\", 1 },\n     { \"gettransaction\", 1 },\n     { \"getrawtransaction\", 1 },\n     { \"createrawtransaction\", 0 },\n     { \"createrawtransaction\", 1 },\n     { \"signrawtransaction\", 1 },\n     { \"signrawtransaction\", 2 },\n     { \"sendrawtransaction\", 1 },\n-    { \"fundrawtransaction\", 1 },\n     { \"gettxout\", 1 },\n     { \"gettxout\", 2 },\n     { \"gettxoutproof\", 0 },\n@@ -95,8 +93,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"estimatepriority\", 0 },\n     { \"prioritisetransaction\", 1 },\n     { \"prioritisetransaction\", 2 },\n-    { \"setban\", 2 },\n-    { \"setban\", 3 },\n };\n \n class CRPCConvertTable"
      },
      {
        "sha": "f33281461107d6f44cb9f20208a9aabde42e14a6",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 24,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -16,11 +16,13 @@\n #include \"rpcserver.h\"\n #include \"util.h\"\n #include \"validationinterface.h\"\n+#ifdef ENABLE_WALLET\n+#include \"wallet/wallet.h\"\n+#endif\n \n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n-#include <boost/shared_ptr.hpp>\n \n #include \"univalue/univalue.h\"\n \n@@ -90,6 +92,7 @@ UniValue getnetworkhashps(const UniValue& params, bool fHelp)\n     return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n }\n \n+#ifdef ENABLE_WALLET\n UniValue getgenerate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -124,20 +127,16 @@ UniValue generate(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"generate\", \"11\")\n         );\n \n+    if (pwalletMain == NULL)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n     if (!Params().MineBlocksOnDemand())\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"This method can only be used on regtest\");\n \n     int nHeightStart = 0;\n     int nHeightEnd = 0;\n     int nHeight = 0;\n     int nGenerate = params[0].get_int();\n-\n-    boost::shared_ptr<CReserveScript> coinbaseScript;\n-    GetMainSignals().ScriptForMining(coinbaseScript);\n-\n-    //throw an error if no script was provided\n-    if (!coinbaseScript->reserveScript.size())\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n+    CReserveKey reservekey(pwalletMain);\n \n     {   // Don't keep cs_main locked\n         LOCK(cs_main);\n@@ -149,9 +148,9 @@ UniValue generate(const UniValue& params, bool fHelp)\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd)\n     {\n-        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript->reserveScript));\n+        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n         if (!pblocktemplate.get())\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Wallet keypool empty\");\n         CBlock *pblock = &pblocktemplate->block;\n         {\n             LOCK(cs_main);\n@@ -167,13 +166,11 @@ UniValue generate(const UniValue& params, bool fHelp)\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n-\n-        //mark script as important because it was used at least for one coinbase output\n-        coinbaseScript->KeepScript();\n     }\n     return blockHashes;\n }\n \n+\n UniValue setgenerate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -196,6 +193,8 @@ UniValue setgenerate(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"setgenerate\", \"true, 1\")\n         );\n \n+    if (pwalletMain == NULL)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n     if (Params().MineBlocksOnDemand())\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Use the generate method instead of setgenerate on this network\");\n \n@@ -213,10 +212,12 @@ UniValue setgenerate(const UniValue& params, bool fHelp)\n \n     mapArgs[\"-gen\"] = (fGenerate ? \"1\" : \"0\");\n     mapArgs [\"-genproclimit\"] = itostr(nGenProcLimit);\n-    GenerateBitcoins(fGenerate, nGenProcLimit, Params());\n+    GenerateBitcoins(fGenerate, pwalletMain, nGenProcLimit);\n \n     return NullUniValue;\n }\n+#endif\n+\n \n UniValue getmininginfo(const UniValue& params, bool fHelp)\n {\n@@ -256,7 +257,9 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"testnet\",          Params().TestnetToBeDeprecatedFieldRPC()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n+#ifdef ENABLE_WALLET\n     obj.push_back(Pair(\"generate\",         getgenerate(params, false)));\n+#endif\n     return obj;\n }\n \n@@ -666,15 +669,16 @@ UniValue estimatefee(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"estimatefee nblocks\\n\"\n-            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within nblocks blocks.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte\\n\"\n+            \"needed for a transaction to begin confirmation\\n\"\n+            \"within nblocks blocks.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks     (numeric)\\n\"\n             \"\\nResult:\\n\"\n-            \"n              (numeric) estimated fee-per-kilobyte\\n\"\n+            \"n :    (numeric) estimated fee-per-kilobyte\\n\"\n             \"\\n\"\n-            \"A negative value is returned if not enough transactions and blocks\\n\"\n-            \"have been observed to make an estimate.\\n\"\n+            \"-1.0 is returned if not enough transactions and\\n\"\n+            \"blocks have been observed to make an estimate.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );\n@@ -697,15 +701,16 @@ UniValue estimatepriority(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"estimatepriority nblocks\\n\"\n-            \"\\nEstimates the approximate priority a zero-fee transaction needs to begin\\n\"\n-            \"confirmation within nblocks blocks.\\n\"\n+            \"\\nEstimates the approximate priority\\n\"\n+            \"a zero-fee transaction needs to begin confirmation\\n\"\n+            \"within nblocks blocks.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks     (numeric)\\n\"\n             \"\\nResult:\\n\"\n-            \"n              (numeric) estimated priority\\n\"\n+            \"n :    (numeric) estimated priority\\n\"\n             \"\\n\"\n-            \"A negative value is returned if not enough transactions and blocks\\n\"\n-            \"have been observed to make an estimate.\\n\"\n+            \"-1.0 is returned if not enough transactions and\\n\"\n+            \"blocks have been observed to make an estimate.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatepriority\", \"6\")\n             );"
      },
      {
        "sha": "fe6eb81b848cec0dbbc91a20219acee10bc63379",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -109,14 +109,20 @@ UniValue getinfo(const UniValue& params, bool fHelp)\n #ifdef ENABLE_WALLET\n class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n {\n+private:\n+    isminetype mine;\n+\n public:\n+    DescribeAddressVisitor(isminetype mineIn) : mine(mineIn) {}\n+\n     UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n \n     UniValue operator()(const CKeyID &keyID) const {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n         obj.push_back(Pair(\"isscript\", false));\n-        if (pwalletMain->GetPubKey(keyID, vchPubKey)) {\n+        if (mine == ISMINE_SPENDABLE) {\n+            pwalletMain->GetPubKey(keyID, vchPubKey);\n             obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n             obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n         }\n@@ -125,9 +131,10 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n \n     UniValue operator()(const CScriptID &scriptID) const {\n         UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n         obj.push_back(Pair(\"isscript\", true));\n-        if (pwalletMain->GetCScript(scriptID, subscript)) {\n+        if (mine != ISMINE_NO) {\n+            CScript subscript;\n+            pwalletMain->GetCScript(scriptID, subscript);\n             std::vector<CTxDestination> addresses;\n             txnouttype whichType;\n             int nRequired;\n@@ -193,9 +200,11 @@ UniValue validateaddress(const UniValue& params, bool fHelp)\n #ifdef ENABLE_WALLET\n         isminetype mine = pwalletMain ? IsMine(*pwalletMain, dest) : ISMINE_NO;\n         ret.push_back(Pair(\"ismine\", (mine & ISMINE_SPENDABLE) ? true : false));\n-        ret.push_back(Pair(\"iswatchonly\", (mine & ISMINE_WATCH_ONLY) ? true: false));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n-        ret.pushKVs(detail);\n+        if (mine != ISMINE_NO) {\n+            ret.push_back(Pair(\"iswatchonly\", (mine & ISMINE_WATCH_ONLY) ? true: false));\n+            UniValue detail = boost::apply_visitor(DescribeAddressVisitor(mine), dest);\n+            ret.pushKVs(detail);\n+        }\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n             ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));\n #endif\n@@ -378,19 +387,10 @@ UniValue setmocktime(const UniValue& params, bool fHelp)\n     if (!Params().MineBlocksOnDemand())\n         throw runtime_error(\"setmocktime for regression testing (-regtest mode) only\");\n \n-    // cs_vNodes is locked and node send/receive times are updated\n-    // atomically with the time change to prevent peers from being\n-    // disconnected because we think we haven't communicated with them\n-    // in a long time.\n-    LOCK2(cs_main, cs_vNodes);\n+    LOCK(cs_main);\n \n     RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n     SetMockTime(params[0].get_int64());\n \n-    uint64_t t = GetTime();\n-    BOOST_FOREACH(CNode* pnode, vNodes) {\n-        pnode->nLastSend = pnode->nLastRecv = t;\n-    }\n-\n     return NullUniValue;\n }"
      },
      {
        "sha": "a36831de2ac78e60edf3d3f742ae828c0594da5c",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 136,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -214,28 +214,6 @@ UniValue addnode(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue disconnectnode(const UniValue& params, bool fHelp)\n-{\n-    if (fHelp || params.size() != 1)\n-        throw runtime_error(\n-            \"disconnectnode \\\"node\\\" \\n\"\n-            \"\\nImmediately disconnects from the specified node.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n-            + HelpExampleRpc(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n-        );\n-\n-    CNode* pNode = FindNode(params[0].get_str());\n-    if (pNode == NULL)\n-        throw JSONRPCError(RPC_CLIENT_NODE_NOT_CONNECTED, \"Node not found in connected nodes\");\n-\n-    pNode->fDisconnect = true;\n-\n-    return NullUniValue;\n-}\n-\n UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -430,7 +408,6 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"  ]\\n\"\n-            \"  \\\"warnings\\\": \\\"...\\\"                    (string) any network warnings (such as alert messages) \\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getnetworkinfo\", \"\")\n@@ -462,118 +439,5 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n         }\n     }\n     obj.push_back(Pair(\"localaddresses\", localAddresses));\n-    obj.push_back(Pair(\"warnings\",       GetWarnings(\"statusbar\")));\n     return obj;\n }\n-\n-UniValue setban(const UniValue& params, bool fHelp)\n-{\n-    string strCommand;\n-    if (params.size() >= 2)\n-        strCommand = params[1].get_str();\n-    if (fHelp || params.size() < 2 ||\n-        (strCommand != \"add\" && strCommand != \"remove\"))\n-        throw runtime_error(\n-                            \"setban \\\"ip(/netmask)\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n-                            \"\\nAttempts add or remove a IP/Subnet from the banned list.\\n\"\n-                            \"\\nArguments:\\n\"\n-                            \"1. \\\"ip(/netmask)\\\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)\\n\"\n-                            \"2. \\\"command\\\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list\\n\"\n-                            \"3. \\\"bantime\\\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n-                            \"4. \\\"absolute\\\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-                            \"\\nExamples:\\n\"\n-                            + HelpExampleCli(\"setban\", \"\\\"192.168.0.6\\\" \\\"add\\\" 86400\")\n-                            + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")\n-                            + HelpExampleRpc(\"setban\", \"\\\"192.168.0.6\\\", \\\"add\\\" 86400\")\n-                            );\n-\n-    CSubNet subNet;\n-    CNetAddr netAddr;\n-    bool isSubnet = false;\n-\n-    if (params[0].get_str().find(\"/\") != string::npos)\n-        isSubnet = true;\n-\n-    if (!isSubnet)\n-        netAddr = CNetAddr(params[0].get_str());\n-    else\n-        subNet = CSubNet(params[0].get_str());\n-\n-    if (! (isSubnet ? subNet.IsValid() : netAddr.IsValid()) )\n-        throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Invalid IP/Subnet\");\n-\n-    if (strCommand == \"add\")\n-    {\n-        if (isSubnet ? CNode::IsBanned(subNet) : CNode::IsBanned(netAddr))\n-            throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n-\n-        int64_t banTime = 0; //use standard bantime if not specified\n-        if (params.size() >= 3 && !params[2].isNull())\n-            banTime = params[2].get_int64();\n-\n-        bool absolute = false;\n-        if (params.size() == 4 && params[3].isTrue())\n-            absolute = true;\n-\n-        isSubnet ? CNode::Ban(subNet, BanReasonManuallyAdded, banTime, absolute) : CNode::Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n-\n-        //disconnect possible nodes\n-        while(CNode *bannedNode = (isSubnet ? FindNode(subNet) : FindNode(netAddr)))\n-            bannedNode->fDisconnect = true;\n-    }\n-    else if(strCommand == \"remove\")\n-    {\n-        if (!( isSubnet ? CNode::Unban(subNet) : CNode::Unban(netAddr) ))\n-            throw JSONRPCError(RPC_MISC_ERROR, \"Error: Unban failed\");\n-    }\n-\n-    DumpBanlist(); //store banlist to disk\n-    return NullUniValue;\n-}\n-\n-UniValue listbanned(const UniValue& params, bool fHelp)\n-{\n-    if (fHelp || params.size() != 0)\n-        throw runtime_error(\n-                            \"listbanned\\n\"\n-                            \"\\nList all banned IPs/Subnets.\\n\"\n-                            \"\\nExamples:\\n\"\n-                            + HelpExampleCli(\"listbanned\", \"\")\n-                            + HelpExampleRpc(\"listbanned\", \"\")\n-                            );\n-\n-    banmap_t banMap;\n-    CNode::GetBanned(banMap);\n-\n-    UniValue bannedAddresses(UniValue::VARR);\n-    for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); it++)\n-    {\n-        CBanEntry banEntry = (*it).second;\n-        UniValue rec(UniValue::VOBJ);\n-        rec.push_back(Pair(\"address\", (*it).first.ToString()));\n-        rec.push_back(Pair(\"banned_until\", banEntry.nBanUntil));\n-        rec.push_back(Pair(\"ban_created\", banEntry.nCreateTime));\n-        rec.push_back(Pair(\"ban_reason\", banEntry.banReasonToString()));\n-\n-        bannedAddresses.push_back(rec);\n-    }\n-\n-    return bannedAddresses;\n-}\n-\n-UniValue clearbanned(const UniValue& params, bool fHelp)\n-{\n-    if (fHelp || params.size() != 0)\n-        throw runtime_error(\n-                            \"clearbanned\\n\"\n-                            \"\\nClear all banned IPs.\\n\"\n-                            \"\\nExamples:\\n\"\n-                            + HelpExampleCli(\"clearbanned\", \"\")\n-                            + HelpExampleRpc(\"clearbanned\", \"\")\n-                            );\n-\n-    CNode::ClearBanned();\n-    DumpBanlist(); //store banlist to disk\n-\n-    return NullUniValue;\n-}"
      },
      {
        "sha": "090e5ea7f4b366f8989a97973b9c196e6784d741",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 67,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -6,15 +6,13 @@\n #include \"rpcprotocol.h\"\n \n #include \"clientversion.h\"\n-#include \"random.h\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"utiltime.h\"\n #include \"version.h\"\n \n #include <stdint.h>\n-#include <fstream>\n \n #include <boost/algorithm/string.hpp>\n #include <boost/asio.hpp>\n@@ -253,6 +251,7 @@ int ReadHTTPMessage(std::basic_istream<char>& stream, map<string,\n  * \n  * 1.0 spec: http://json-rpc.org/wiki/specification\n  * 1.2 spec: http://jsonrpc.org/historical/json-rpc-over-http.html\n+ * http://www.codeproject.com/KB/recipes/JSON_Spirit.aspx\n  */\n \n string JSONRPCRequest(const string& strMethod, const UniValue& params, const UniValue& id)\n@@ -289,68 +288,3 @@ UniValue JSONRPCError(int code, const string& message)\n     error.push_back(Pair(\"message\", message));\n     return error;\n }\n-\n-/** Username used when cookie authentication is in use (arbitrary, only for\n- * recognizability in debugging/logging purposes)\n- */\n-static const std::string COOKIEAUTH_USER = \"__cookie__\";\n-/** Default name for auth cookie file */\n-static const std::string COOKIEAUTH_FILE = \".cookie\";\n-\n-boost::filesystem::path GetAuthCookieFile()\n-{\n-    boost::filesystem::path path(GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE));\n-    if (!path.is_complete()) path = GetDataDir() / path;\n-    return path;\n-}\n-\n-bool GenerateAuthCookie(std::string *cookie_out)\n-{\n-    unsigned char rand_pwd[32];\n-    GetRandBytes(rand_pwd, 32);\n-    std::string cookie = COOKIEAUTH_USER + \":\" + EncodeBase64(&rand_pwd[0],32);\n-\n-    /** the umask determines what permissions are used to create this file -\n-     * these are set to 077 in init.cpp unless overridden with -sysperms.\n-     */\n-    std::ofstream file;\n-    boost::filesystem::path filepath = GetAuthCookieFile();\n-    file.open(filepath.string().c_str());\n-    if (!file.is_open()) {\n-        LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath.string());\n-        return false;\n-    }\n-    file << cookie;\n-    file.close();\n-    LogPrintf(\"Generated RPC authentication cookie %s\\n\", filepath.string());\n-\n-    if (cookie_out)\n-        *cookie_out = cookie;\n-    return true;\n-}\n-\n-bool GetAuthCookie(std::string *cookie_out)\n-{\n-    std::ifstream file;\n-    std::string cookie;\n-    boost::filesystem::path filepath = GetAuthCookieFile();\n-    file.open(filepath.string().c_str());\n-    if (!file.is_open())\n-        return false;\n-    std::getline(file, cookie);\n-    file.close();\n-\n-    if (cookie_out)\n-        *cookie_out = cookie;\n-    return true;\n-}\n-\n-void DeleteAuthCookie()\n-{\n-    try {\n-        boost::filesystem::remove(GetAuthCookieFile());\n-    } catch (const boost::filesystem::filesystem_error& e) {\n-        LogPrintf(\"%s: Unable to remove random auth cookie file: %s\\n\", __func__, e.what());\n-    }\n-}\n-"
      },
      {
        "sha": "b9fa091955810276865bd4f65ba9e641edee3d3e",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -14,7 +14,6 @@\n #include <boost/iostreams/stream.hpp>\n #include <boost/asio.hpp>\n #include <boost/asio/ssl.hpp>\n-#include <boost/filesystem.hpp>\n \n #include \"univalue/univalue.h\"\n \n@@ -64,8 +63,6 @@ enum RPCErrorCode\n     RPC_CLIENT_IN_INITIAL_DOWNLOAD  = -10, //! Still downloading initial blocks\n     RPC_CLIENT_NODE_ALREADY_ADDED   = -23, //! Node is already added\n     RPC_CLIENT_NODE_NOT_ADDED       = -24, //! Node has not been added before\n-    RPC_CLIENT_NODE_NOT_CONNECTED   = -29, //! Node to disconnect not found in connected nodes\n-    RPC_CLIENT_INVALID_IP_OR_SUBNET = -30, //! Invalid IP/Subnet\n \n     //! Wallet errors\n     RPC_WALLET_ERROR                = -4,  //! Unspecified problem with wallet (key not found etc.)\n@@ -166,13 +163,4 @@ UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const Un\n std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n UniValue JSONRPCError(int code, const std::string& message);\n \n-/** Get name of RPC authentication cookie file */\n-boost::filesystem::path GetAuthCookieFile();\n-/** Generate a new RPC authentication cookie and write it to disk */\n-bool GenerateAuthCookie(std::string *cookie_out);\n-/** Read the RPC authentication cookie from disk */\n-bool GetAuthCookie(std::string *cookie_out);\n-/** Delete RPC authentication cookie from disk */\n-void DeleteAuthCookie();\n-\n #endif // BITCOIN_RPCPROTOCOL_H"
      },
      {
        "sha": "20394fc2c1ed1eeef5f728130b9331204954a57d",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -11,7 +11,6 @@\n #include \"main.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n-#include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "3894dd08bba86a0a7d7f819a6652da5db2c80e80",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 29,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -124,7 +124,7 @@ CAmount AmountFromValue(const UniValue& value)\n     if (!value.isReal() && !value.isNum())\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number\");\n     CAmount amount;\n-    if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n+    if (!ParseMoney(value.getValStr(), amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n     if (!MoneyRange(amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Amount out of range\");\n@@ -273,23 +273,18 @@ static const CRPCCommand vRPCCommands[] =\n     /* P2P networking */\n     { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true  },\n     { \"network\",            \"addnode\",                &addnode,                true  },\n-    { \"network\",            \"disconnectnode\",         &disconnectnode,         true  },\n     { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true  },\n     { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true  },\n     { \"network\",            \"getnettotals\",           &getnettotals,           true  },\n     { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true  },\n     { \"network\",            \"ping\",                   &ping,                   true  },\n-    { \"network\",            \"setban\",                 &setban,                 true  },\n-    { \"network\",            \"listbanned\",             &listbanned,             true  },\n-    { \"network\",            \"clearbanned\",            &clearbanned,            true  },\n \n     /* Block chain and UTXO */\n     { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true  },\n     { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true  },\n     { \"blockchain\",         \"getblockcount\",          &getblockcount,          true  },\n     { \"blockchain\",         \"getblock\",               &getblock,               true  },\n     { \"blockchain\",         \"getblockhash\",           &getblockhash,           true  },\n-    { \"blockchain\",         \"getblockheader\",         &getblockheader,         true  },\n     { \"blockchain\",         \"getchaintips\",           &getchaintips,           true  },\n     { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true  },\n     { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true  },\n@@ -307,10 +302,12 @@ static const CRPCCommand vRPCCommands[] =\n     { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true  },\n     { \"mining\",             \"submitblock\",            &submitblock,            true  },\n \n+#ifdef ENABLE_WALLET\n     /* Coin generation */\n     { \"generating\",         \"getgenerate\",            &getgenerate,            true  },\n     { \"generating\",         \"setgenerate\",            &setgenerate,            true  },\n     { \"generating\",         \"generate\",               &generate,               true  },\n+#endif\n \n     /* Raw transactions */\n     { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true  },\n@@ -319,9 +316,6 @@ static const CRPCCommand vRPCCommands[] =\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true  },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false },\n     { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false }, /* uses wallet if enabled */\n-#ifdef ENABLE_WALLET\n-    { \"rawtransactions\",    \"fundrawtransaction\",     &fundrawtransaction,     false },\n-#endif\n \n     /* Utility functions */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true  },\n@@ -597,18 +591,28 @@ void StartRPCThreads()\n         strAllowed += subnet.ToString() + \" \";\n     LogPrint(\"rpc\", \"Allowing RPC connections from: %s\\n\", strAllowed);\n \n-    if (mapArgs[\"-rpcpassword\"] == \"\")\n+    strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n+    if (((mapArgs[\"-rpcpassword\"] == \"\") ||\n+         (mapArgs[\"-rpcuser\"] == mapArgs[\"-rpcpassword\"])) && Params().RequireRPCPassword())\n     {\n-        LogPrintf(\"No rpcpassword set - using random cookie authentication\\n\");\n-        if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n-            uiInterface.ThreadSafeMessageBox(\n-                _(\"Error: A fatal internal error occured, see debug.log for details\"), // Same message as AbortNode\n-                \"\", CClientUIInterface::MSG_ERROR);\n-            StartShutdown();\n-            return;\n-        }\n-    } else {\n-        strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n+        unsigned char rand_pwd[32];\n+        GetRandBytes(rand_pwd, 32);\n+        uiInterface.ThreadSafeMessageBox(strprintf(\n+            _(\"To use bitcoind, or the -server option to bitcoin-qt, you must set an rpcpassword in the configuration file:\\n\"\n+              \"%s\\n\"\n+              \"It is recommended you use the following random password:\\n\"\n+              \"rpcuser=bitcoinrpc\\n\"\n+              \"rpcpassword=%s\\n\"\n+              \"(you do not need to remember this password)\\n\"\n+              \"The username and password MUST NOT be the same.\\n\"\n+              \"If the file does not exist, create it with owner-readable-only file permissions.\\n\"\n+              \"It is also recommended to set alertnotify so you are notified of problems;\\n\"\n+              \"for example: alertnotify=echo %%s | mail -s \\\"Bitcoin Alert\\\" admin@foo.com\\n\"),\n+                GetConfigFile().string(),\n+                EncodeBase58(&rand_pwd[0],&rand_pwd[0]+32)),\n+                \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::SECURE);\n+        StartShutdown();\n+        return;\n     }\n \n     assert(rpc_io_service == NULL);\n@@ -759,8 +763,6 @@ void StopRPCThreads()\n     }\n     deadlineTimers.clear();\n \n-    DeleteAuthCookie();\n-\n     rpc_io_service->stop();\n     g_rpcSignals.Stopped();\n     if (rpc_worker_group != NULL)\n@@ -923,6 +925,13 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n         if (!valRequest.read(strRequest))\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n \n+        // Return immediately if in warmup\n+        {\n+            LOCK(cs_rpcWarmup);\n+            if (fRPCInWarmup)\n+                throw JSONRPCError(RPC_IN_WARMUP, rpcWarmupStatus);\n+        }\n+\n         string strReply;\n \n         // singleton request\n@@ -994,13 +1003,6 @@ void ServiceConnection(AcceptedConnection *conn)\n \n UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params) const\n {\n-    // Return immediately if in warmup\n-    {\n-        LOCK(cs_rpcWarmup);\n-        if (fRPCInWarmup)\n-            throw JSONRPCError(RPC_IN_WARMUP, rpcWarmupStatus);\n-    }\n-\n     // Find method\n     const CRPCCommand *pcmd = tableRPC[strMethod];\n     if (!pcmd)"
      },
      {
        "sha": "7b462a8b7954cbcf5de88e5a8156a67b5f99b6cd",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -151,12 +151,8 @@ extern UniValue getconnectioncount(const UniValue& params, bool fHelp); // in rp\n extern UniValue getpeerinfo(const UniValue& params, bool fHelp);\n extern UniValue ping(const UniValue& params, bool fHelp);\n extern UniValue addnode(const UniValue& params, bool fHelp);\n-extern UniValue disconnectnode(const UniValue& params, bool fHelp);\n extern UniValue getaddednodeinfo(const UniValue& params, bool fHelp);\n extern UniValue getnettotals(const UniValue& params, bool fHelp);\n-extern UniValue setban(const UniValue& params, bool fHelp);\n-extern UniValue listbanned(const UniValue& params, bool fHelp);\n-extern UniValue clearbanned(const UniValue& params, bool fHelp);\n \n extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n extern UniValue importprivkey(const UniValue& params, bool fHelp);\n@@ -221,7 +217,6 @@ extern UniValue listlockunspent(const UniValue& params, bool fHelp);\n extern UniValue createrawtransaction(const UniValue& params, bool fHelp);\n extern UniValue decoderawtransaction(const UniValue& params, bool fHelp);\n extern UniValue decodescript(const UniValue& params, bool fHelp);\n-extern UniValue fundrawtransaction(const UniValue& params, bool fHelp);\n extern UniValue signrawtransaction(const UniValue& params, bool fHelp);\n extern UniValue sendrawtransaction(const UniValue& params, bool fHelp);\n extern UniValue gettxoutproof(const UniValue& params, bool fHelp);\n@@ -234,7 +229,6 @@ extern UniValue settxfee(const UniValue& params, bool fHelp);\n extern UniValue getmempoolinfo(const UniValue& params, bool fHelp);\n extern UniValue getrawmempool(const UniValue& params, bool fHelp);\n extern UniValue getblockhash(const UniValue& params, bool fHelp);\n-extern UniValue getblockheader(const UniValue& params, bool fHelp);\n extern UniValue getblock(const UniValue& params, bool fHelp);\n extern UniValue gettxoutsetinfo(const UniValue& params, bool fHelp);\n extern UniValue gettxout(const UniValue& params, bool fHelp);"
      },
      {
        "sha": "c42eb7244d52d949b1acd74cc38988e8ddb2b931",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -50,10 +50,8 @@ void CScheduler::serviceQueue()\n                 // Keep waiting until timeout\n             }\n #else\n-            // Some boost versions have a conflicting overload of wait_until that returns void.\n-            // Explicitly use a template here to avoid hitting that overload.\n             while (!shouldStop() && !taskQueue.empty() &&\n-                   newTaskScheduled.wait_until<>(lock, taskQueue.begin()->first) != boost::cv_status::timeout) {\n+                   newTaskScheduled.wait_until(lock, taskQueue.begin()->first) != boost::cv_status::timeout) {\n                 // Keep waiting until timeout\n             }\n #endif"
      },
      {
        "sha": "84a7432fdbdd3515efb4574c8a74aed4539cc552",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 81,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -335,51 +335,9 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 // Control\n                 //\n                 case OP_NOP:\n-                    break;\n-\n-                case OP_CHECKLOCKTIMEVERIFY:\n-                {\n-                    if (!(flags & SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {\n-                        // not enabled; treat as a NOP2\n-                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n-                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n-                        }\n-                        break;\n-                    }\n-\n-                    if (stack.size() < 1)\n-                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n-\n-                    // Note that elsewhere numeric opcodes are limited to\n-                    // operands in the range -2**31+1 to 2**31-1, however it is\n-                    // legal for opcodes to produce results exceeding that\n-                    // range. This limitation is implemented by CScriptNum's\n-                    // default 4-byte limit.\n-                    //\n-                    // If we kept to that limit we'd have a year 2038 problem,\n-                    // even though the nLockTime field in transactions\n-                    // themselves is uint32 which only becomes meaningless\n-                    // after the year 2106.\n-                    //\n-                    // Thus as a special case we tell CScriptNum to accept up\n-                    // to 5-byte bignums, which are good until 2**39-1, well\n-                    // beyond the 2**32-1 limit of the nLockTime field itself.\n-                    const CScriptNum nLockTime(stacktop(-1), fRequireMinimal, 5);\n-\n-                    // In the rare event that the argument may be < 0 due to\n-                    // some arithmetic being done first, you can always use\n-                    // 0 MAX CHECKLOCKTIMEVERIFY.\n-                    if (nLockTime < 0)\n-                        return set_error(serror, SCRIPT_ERR_NEGATIVE_LOCKTIME);\n-\n-                    // Actually compare the specified lock time with the transaction.\n-                    if (!checker.CheckLockTime(nLockTime))\n-                        return set_error(serror, SCRIPT_ERR_UNSATISFIED_LOCKTIME);\n-\n-                    break;\n-                }\n+                break;\n \n-                case OP_NOP1: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n+                case OP_NOP1: case OP_NOP2: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n                 case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\n                 {\n                     if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n@@ -1126,43 +1084,6 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     return true;\n }\n \n-bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n-{\n-    // There are two times of nLockTime: lock-by-blockheight\n-    // and lock-by-blocktime, distinguished by whether\n-    // nLockTime < LOCKTIME_THRESHOLD.\n-    //\n-    // We want to compare apples to apples, so fail the script\n-    // unless the type of nLockTime being tested is the same as\n-    // the nLockTime in the transaction.\n-    if (!(\n-        (txTo->nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n-        (txTo->nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n-    ))\n-        return false;\n-\n-    // Now that we know we're comparing apples-to-apples, the\n-    // comparison is a simple numeric one.\n-    if (nLockTime > (int64_t)txTo->nLockTime)\n-        return false;\n-\n-    // Finally the nLockTime feature can be disabled and thus\n-    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n-    // finalized by setting nSequence to maxint. The\n-    // transaction would be allowed into the blockchain, making\n-    // the opcode ineffective.\n-    //\n-    // Testing if this vin is not final is sufficient to\n-    // prevent this condition. Alternatively we could test all\n-    // inputs, but testing just this input minimizes the data\n-    // required to prove correct CHECKLOCKTIMEVERIFY execution.\n-    if (txTo->vin[nIn].IsFinal())\n-        return false;\n-\n-    return true;\n-}\n-\n-\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);"
      },
      {
        "sha": "fc64438f6873bc005a4688f5b231c5ebb9499b69",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -76,11 +76,6 @@ enum\n     // (softfork safe, BIP62 rule 6)\n     // Note: CLEANSTACK should never be used without P2SH.\n     SCRIPT_VERIFY_CLEANSTACK = (1U << 8),\n-\n-    // Verify CHECKLOCKTIMEVERIFY\n-    //\n-    // See BIP65 for details.\n-    SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),\n };\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n@@ -93,11 +88,6 @@ class BaseSignatureChecker\n         return false;\n     }\n \n-    virtual bool CheckLockTime(const CScriptNum& nLockTime) const\n-    {\n-         return false;\n-    }\n-\n     virtual ~BaseSignatureChecker() {}\n };\n \n@@ -113,7 +103,6 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n public:\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n-    bool CheckLockTime(const CScriptNum& nLockTime) const;\n };\n \n class MutableTransactionSignatureChecker : public TransactionSignatureChecker"
      },
      {
        "sha": "d5045005be143e1f2cf3667eaf267bfbec738035",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 3,
        "deletions": 18,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -19,10 +19,6 @@\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n \n-// Threshold for nLockTime: below this value it is interpreted as block number,\n-// otherwise as UNIX timestamp.\n-static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n-\n template <typename T>\n std::vector<unsigned char> ToByteVector(const T& in)\n {\n@@ -155,7 +151,6 @@ enum opcodetype\n     // expansion\n     OP_NOP1 = 0xb0,\n     OP_NOP2 = 0xb1,\n-    OP_CHECKLOCKTIMEVERIFY = OP_NOP2,\n     OP_NOP3 = 0xb2,\n     OP_NOP4 = 0xb3,\n     OP_NOP5 = 0xb4,\n@@ -201,10 +196,7 @@ class CScriptNum\n         m_value = n;\n     }\n \n-    static const size_t nDefaultMaxNumSize = 4;\n-\n-    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal,\n-                        const size_t nMaxNumSize = nDefaultMaxNumSize)\n+    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal)\n     {\n         if (vch.size() > nMaxNumSize) {\n             throw scriptnum_error(\"script number overflow\");\n@@ -327,6 +319,8 @@ class CScriptNum\n         return result;\n     }\n \n+    static const size_t nMaxNumSize = 4;\n+\n private:\n     static int64_t set_vch(const std::vector<unsigned char>& vch)\n     {\n@@ -609,13 +603,4 @@ class CScript : public std::vector<unsigned char>\n     }\n };\n \n-class CReserveScript\n-{\n-public:\n-    CScript reserveScript;\n-    virtual void KeepScript() {}\n-    CReserveScript() {}\n-    virtual ~CReserveScript() {}\n-};\n-\n #endif // BITCOIN_SCRIPT_SCRIPT_H"
      },
      {
        "sha": "d8ecfde1d71f597d504ae6b12402f16e167db94a",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -47,10 +47,6 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"OP_RETURN was encountered\";\n         case SCRIPT_ERR_UNBALANCED_CONDITIONAL:\n             return \"Invalid OP_IF construction\";\n-        case SCRIPT_ERR_NEGATIVE_LOCKTIME:\n-            return \"Negative locktime\";\n-        case SCRIPT_ERR_UNSATISFIED_LOCKTIME:\n-            return \"Locktime requirement not satisfied\";\n         case SCRIPT_ERR_SIG_HASHTYPE:\n             return \"Signature hash type missing or not understood\";\n         case SCRIPT_ERR_SIG_DER:"
      },
      {
        "sha": "6365680b2981aef3d7740219a366f0d4b5a7b398",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -35,10 +35,6 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_INVALID_ALTSTACK_OPERATION,\n     SCRIPT_ERR_UNBALANCED_CONDITIONAL,\n \n-    /* OP_CHECKLOCKTIMEVERIFY */\n-    SCRIPT_ERR_NEGATIVE_LOCKTIME,\n-    SCRIPT_ERR_UNSATISFIED_LOCKTIME,\n-\n     /* BIP62 */\n     SCRIPT_ERR_SIG_HASHTYPE,\n     SCRIPT_ERR_SIG_DER,"
      },
      {
        "sha": "eab629cd9133022e4d4e01eebf372dc2b18216f7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 38,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -5,10 +5,9 @@\n \n #include \"script/sign.h\"\n \n+#include \"primitives/transaction.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"policy/policy.h\"\n-#include \"primitives/transaction.h\"\n #include \"script/standard.h\"\n #include \"uint256.h\"\n \n@@ -276,39 +275,3 @@ CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecke\n \n     return CombineSignatures(scriptPubKey, checker, txType, vSolutions, stack1, stack2);\n }\n-\n-namespace {\n-/** Dummy signature checker which accepts all signatures. */\n-class DummySignatureChecker : public BaseSignatureChecker\n-{\n-public:\n-    DummySignatureChecker() {}\n-\n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n-    {\n-        return true;\n-    }\n-};\n-const DummySignatureChecker dummyChecker;\n-}\n-\n-const BaseSignatureChecker& DummySignatureCreator::Checker() const\n-{\n-    return dummyChecker;\n-}\n-\n-bool DummySignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const\n-{\n-    // Create a dummy signature that is a valid DER-encoding\n-    vchSig.assign(72, '\\000');\n-    vchSig[0] = 0x30;\n-    vchSig[1] = 69;\n-    vchSig[2] = 0x02;\n-    vchSig[3] = 33;\n-    vchSig[4] = 0x01;\n-    vchSig[4 + 33] = 0x02;\n-    vchSig[5 + 33] = 32;\n-    vchSig[6 + 33] = 0x01;\n-    vchSig[6 + 33 + 32] = SIGHASH_ALL;\n-    return true;\n-}"
      },
      {
        "sha": "0c4cf61e5e74f2a1fcbe6ac985412a857351244d",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -43,14 +43,6 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n     bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n };\n \n-/** A signature creator that just produces 72-byte empty signatyres. */\n-class DummySignatureCreator : public BaseSignatureCreator {\n-public:\n-    DummySignatureCreator(const CKeyStore* keystoreIn) : BaseSignatureCreator(keystoreIn) {}\n-    const BaseSignatureChecker& Checker() const;\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n-};\n-\n /** Produce a script signature using a generic signature creator. */\n bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, CScript& scriptSig);\n "
      },
      {
        "sha": "ce50e3aad834487e245d60fd62f8851c3f3e3fad",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -180,6 +180,26 @@ int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned c\n     return -1;\n }\n \n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n+{\n+    vector<valtype> vSolutions;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n+        return false;\n+\n+    if (whichType == TX_MULTISIG)\n+    {\n+        unsigned char m = vSolutions.front()[0];\n+        unsigned char n = vSolutions.back()[0];\n+        // Support up to x-of-3 multisig txns as standard\n+        if (n < 1 || n > 3)\n+            return false;\n+        if (m < 1 || m > n)\n+            return false;\n+    }\n+\n+    return whichType != TX_NONSTANDARD;\n+}\n+\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n {\n     vector<valtype> vSolutions;"
      },
      {
        "sha": "a8b0acc98150ba5b4fa85fcc88b5c438a115b8ab",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -39,6 +39,22 @@ extern unsigned nMaxDatacarrierBytes;\n  */\n static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n \n+/**\n+ * Standard script verification flags that standard transactions will comply\n+ * with. However scripts violating these flags may still be present in valid\n+ * blocks and we must accept those blocks.\n+ */\n+static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n+                                                         SCRIPT_VERIFY_DERSIG |\n+                                                         SCRIPT_VERIFY_STRICTENC |\n+                                                         SCRIPT_VERIFY_MINIMALDATA |\n+                                                         SCRIPT_VERIFY_NULLDUMMY |\n+                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n+                                                         SCRIPT_VERIFY_CLEANSTACK;\n+\n+/** For convenience, standard but not mandatory verify flags. */\n+static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n+\n enum txnouttype\n {\n     TX_NONSTANDARD,\n@@ -69,6 +85,7 @@ const char* GetTxnOutputType(txnouttype t);\n \n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n "
      },
      {
        "sha": "a422939964277912d3a4732a12d9e12cfa1644ef",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 39,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -33,22 +33,20 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n \n struct CLockLocation {\n-    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn)\n+    CLockLocation(const char* pszName, const char* pszFile, int nLine)\n     {\n         mutexName = pszName;\n         sourceFile = pszFile;\n         sourceLine = nLine;\n-        fTry = fTryIn;\n     }\n \n     std::string ToString() const\n     {\n-        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine) + (fTry ? \" (TRY)\" : \"\");\n+        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine);\n     }\n \n     std::string MutexName() const { return mutexName; }\n \n-    bool fTry;\n private:\n     std::string mutexName;\n     std::string sourceFile;\n@@ -64,52 +62,23 @@ static boost::thread_specific_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n-    // We attempt to not assert on probably-not deadlocks by assuming that\n-    // a try lock will immediately have otherwise bailed if it had\n-    // failed to get the lock\n-    // We do this by, for the locks which triggered the potential deadlock,\n-    // in either lockorder, checking that the second of the two which is locked\n-    // is only a TRY_LOCK, ignoring locks if they are reentrant.\n-    bool firstLocked = false;\n-    bool secondLocked = false;\n-    bool onlyMaybeDeadlock = false;\n-\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n-        if (i.first == mismatch.first) {\n+        if (i.first == mismatch.first)\n             LogPrintf(\" (1)\");\n-            if (!firstLocked && secondLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            firstLocked = true;\n-        }\n-        if (i.first == mismatch.second) {\n+        if (i.first == mismatch.second)\n             LogPrintf(\" (2)\");\n-            if (!secondLocked && firstLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            secondLocked = true;\n-        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n-    firstLocked = false;\n-    secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n-        if (i.first == mismatch.first) {\n+        if (i.first == mismatch.first)\n             LogPrintf(\" (1)\");\n-            if (!firstLocked && secondLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            firstLocked = true;\n-        }\n-        if (i.first == mismatch.second) {\n+        if (i.first == mismatch.second)\n             LogPrintf(\" (2)\");\n-            if (!secondLocked && firstLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            secondLocked = true;\n-        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n-    assert(onlyMaybeDeadlock);\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n@@ -132,8 +101,10 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n             lockorders[p1] = (*lockstack);\n \n             std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            if (lockorders.count(p2))\n+            if (lockorders.count(p2)) {\n                 potential_deadlock_detected(p1, lockorders[p2], lockorders[p1]);\n+                break;\n+            }\n         }\n     }\n     dd_mutex.unlock();\n@@ -148,7 +119,7 @@ static void pop_lock()\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n {\n-    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry), fTry);\n+    push_lock(cs, CLockLocation(pszName, pszFile, nLine), fTry);\n }\n \n void LeaveCritical()"
      },
      {
        "sha": "78b9043477e1d38dc689122b63e54f05aae92c35",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -101,7 +101,7 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine);\n \n /** Wrapper around boost::unique_lock<Mutex> */\n template <typename Mutex>\n-class SCOPED_LOCKABLE CMutexLock\n+class CMutexLock\n {\n private:\n     boost::unique_lock<Mutex> lock;\n@@ -129,15 +129,15 @@ class SCOPED_LOCKABLE CMutexLock\n     }\n \n public:\n-    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : lock(mutexIn, boost::defer_lock)\n+    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) : lock(mutexIn, boost::defer_lock)\n     {\n         if (fTry)\n             TryEnter(pszName, pszFile, nLine);\n         else\n             Enter(pszName, pszFile, nLine);\n     }\n \n-    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(pmutexIn)\n+    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false)\n     {\n         if (!pmutexIn) return;\n \n@@ -148,7 +148,7 @@ class SCOPED_LOCKABLE CMutexLock\n             Enter(pszName, pszFile, nLine);\n     }\n \n-    ~CMutexLock() UNLOCK_FUNCTION()\n+    ~CMutexLock()\n     {\n         if (lock.owns_lock())\n             LeaveCritical();"
      },
      {
        "sha": "34b311b804fd942918cd52b6fa2995d62ea91546",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -70,9 +70,9 @@ class CCoinsViewCacheTest : public CCoinsViewCache\n         // Manually recompute the dynamic usage of the whole data, and compare it.\n         size_t ret = memusage::DynamicUsage(cacheCoins);\n         for (CCoinsMap::iterator it = cacheCoins.begin(); it != cacheCoins.end(); it++) {\n-            ret += it->second.coins.DynamicMemoryUsage();\n+            ret += memusage::DynamicUsage(it->second.coins);\n         }\n-        BOOST_CHECK_EQUAL(DynamicMemoryUsage(), ret);\n+        BOOST_CHECK_EQUAL(memusage::DynamicUsage(*this), ret);\n     }\n \n };"
      },
      {
        "sha": "6090421cb66f621c8869f7848569e52594451bf9",
        "filename": "src/test/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/bitcoin-util-test.json?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -52,7 +52,7 @@\n     [\"-create\",\n      \"in=4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485:0\",\n      \"set=privatekeys:[\\\"5HpHagT65TZzG1PH3CSu63k8DbpvD8s5ip4nEB3kEsreAnchuDf\\\"]\",\n-     \"set=prevtxs:[{\\\"txid\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485\\\",\\\"vout\\\":0,\\\"scriptPubKey\\\":\\\"76a91491b24bf9f5288532960ac687abb035127b1d28a588ac\\\"}]\",\n+     \"set=prevtxs:[{\\\"txid\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485\\\",\\\"vout\\\":0,\\\"scriptPubKey\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485\\\"}]\",\n      \"sign=ALL\",\n      \"outaddr=0.001:193P6LtvS4nCnkDvM9uXn1gsSRqh4aDAz7\"],\n     \"output_cmp\": \"txcreatesign.hex\""
      },
      {
        "sha": "31d33c63fb71c3cbbd4b488277157e89aa547615",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 0,
        "deletions": 72,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -120,78 +120,6 @@\n [[[\"a955032f4d6b0c9bfe8cad8f00a8933790b9c1dc28c82e0f48e75b35da0e4944\", 0, \"IF CODESEPARATOR ENDIF 0x21 0x0378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71 CHECKSIGVERIFY CODESEPARATOR 1\"]],\n \"010000000144490eda355be7480f2ec828dcc1b9903793a8008fad8cfe9b0c6b4d2f0355a9000000004a483045022100fa4a74ba9fd59c59f46c3960cf90cbe0d2b743c471d24a3d5d6db6002af5eebb02204d70ec490fd0f7055a7c45f86514336e3a7f03503dacecabb247fc23f15c83510100ffffffff010000000000000000016a00000000\", \"P2SH\"],\n \n-[\"CHECKLOCKTIMEVERIFY tests\"],\n-\n-[\"By-height locks, with argument just beyond tx nLockTime\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 NOP2 1\"]],\n-\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n-\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000fe64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000001 NOP2 1\"]],\n-\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP2 1\"]],\n-\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000feffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"Argument missing\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"NOP2 1\"]],\n-\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n-\"010000000100010000000000000000000000000000000000000000000000000000000000000000000001b1010000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"Argument negative with by-blockheight nLockTime=0\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP2 1\"]],\n-\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"Argument negative with by-blocktime nLockTime=500,000,000\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP2 1\"]],\n-\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n-\"010000000100010000000000000000000000000000000000000000000000000000000000000000000004005194b1010000000100000000000000000002000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"Input locked\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n-\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0\"]],\n-\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b1ffffffff0100000000000000000002000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"Another input being unlocked isn't sufficient; the CHECKLOCKTIMEVERIFY-using input must be unlocked\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"] ,\n-  [\"0000000000000000000000000000000000000000000000000000000000000200\", 1, \"1\"]],\n-\"010000000200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00020000000000000000000000000000000000000000000000000000000000000100000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"Argument/tx height/time mismatch, both versions\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n-\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0\"]],\n-\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b100000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n-\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n-\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n-\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"Argument 2^32 with nLockTime=2^32-1\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967296 NOP2 1\"]],\n-\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"Same, but with nLockTime=2^31-1\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP2 1\"]],\n-\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffff7f\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"6 byte non-minimally-encoded arguments are invalid even in their contents are valid\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x06 0x000000000000 NOP2 1\"]],\n-\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"Failure due to failing CHECKLOCKTIMEVERIFY in scriptSig\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n-\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b1000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"Failure due to failing CHECKLOCKTIMEVERIFY in redeemScript\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n-\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "182b88ef67f84168428886c3a004f45182b92cbf",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 0,
        "deletions": 42,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -187,47 +187,5 @@\n \"0100000002dbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce000000006b4830450221009627444320dc5ef8d7f68f35010b4c050a6ed0d96b67a84db99fda9c9de58b1e02203e4b4aaa019e012e65d69b487fdf8719df72f488fa91506a80c49a33929f1fd50121022b78b756e2258af13779c1a1f37ea6800259716ca4b7f0b87610e0bf3ab52a01ffffffffdbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce010000009300483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303ffffffff01a0860100000000001976a9149bc0bbdd3024da4d0c38ed1aecf5c68dd1d3fa1288ac00000000\", \"P2SH\"],\n \n \n-[\"CHECKLOCKTIMEVERIFY tests\"],\n-\n-[\"By-height locks, with argument == 0 and == tx nLockTime\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n-\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n-\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n-\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n-\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP2 1\"]],\n-\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n-\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"Any non-maxint nSequence is fine\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n-\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000feffffff0100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"The argument can be calculated rather than created directly by a PUSHDATA\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 1ADD NOP2 1\"]],\n-\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"Perhaps even by an ADD producing a 5-byte result that is out of bounds for other opcodes\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483647 2147483647 ADD NOP2 1\"]],\n-\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000feffffff\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"5 byte non-minimally-encoded arguments are valid\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x05 0x0000000000 NOP2 1\"]],\n-\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"Valid CHECKLOCKTIMEVERIFY in scriptSig\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n-\"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b1000000000100000000000000000001000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n-[\"Valid CHECKLOCKTIMEVERIFY in redeemScript\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n-\"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000001000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n-\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "56ce28a8655b16f53919fa9d26936621c151ecd7",
        "filename": "src/test/data/txcreatesign.hex",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/data/txcreatesign.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/data/txcreatesign.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatesign.hex?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -1 +1 @@\n-01000000018594c5bdcaec8f06b78b596f31cd292a294fd031e24eec716f43dac91ea7494d000000008b48304502210096a75056c9e2cc62b7214777b3d2a592cfda7092520126d4ebfcd6d590c99bd8022051bb746359cf98c0603f3004477eac68701132380db8facba19c89dc5ab5c5e201410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ffffffff01a0860100000000001976a9145834479edbbe0539b31ffd3a8f8ebadc2165ed0188ac00000000\n+01000000018594c5bdcaec8f06b78b596f31cd292a294fd031e24eec716f43dac91ea7494d0000000000ffffffff01a0860100000000001976a9145834479edbbe0539b31ffd3a8f8ebadc2165ed0188ac00000000"
      },
      {
        "sha": "6b189a6b55faab6f4f106d245da0f88e6628cea4",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"policy/policy.h\"\n+#include \"main.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/interpreter.h\""
      },
      {
        "sha": "0f5e1615c63359f2452fc182502e877bea0955fb",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -143,17 +143,6 @@ BOOST_AUTO_TEST_CASE(subnet_test)\n     BOOST_CHECK(CSubNet(\"1:2:3:4:5:6:7:8/128\").IsValid());\n     BOOST_CHECK(!CSubNet(\"1:2:3:4:5:6:7:8/129\").IsValid());\n     BOOST_CHECK(!CSubNet(\"fuzzy\").IsValid());\n-\n-    //CNetAddr constructor test\n-    BOOST_CHECK(CSubNet(CNetAddr(\"127.0.0.1\")).IsValid());\n-    BOOST_CHECK(CSubNet(CNetAddr(\"127.0.0.1\")).Match(CNetAddr(\"127.0.0.1\")));\n-    BOOST_CHECK(!CSubNet(CNetAddr(\"127.0.0.1\")).Match(CNetAddr(\"127.0.0.2\")));\n-    BOOST_CHECK(CSubNet(CNetAddr(\"127.0.0.1\")).ToString() == \"127.0.0.1/255.255.255.255\");\n-\n-    BOOST_CHECK(CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).IsValid());\n-    BOOST_CHECK(CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).Match(CNetAddr(\"1:2:3:4:5:6:7:8\")));\n-    BOOST_CHECK(!CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).Match(CNetAddr(\"1:2:3:4:5:6:7:9\")));\n-    BOOST_CHECK(CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).ToString() == \"1:2:3:4:5:6:7:8/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "08f988fdbf7fc21691aeb387b4858d8bd14a85d0",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 104,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -142,24 +142,6 @@ BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"1.00000000\")), 100000000LL);\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"20999999.9999999\")), 2099999999999990LL);\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"20999999.99999999\")), 2099999999999999LL);\n-\n-    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"1e-8\")), COIN/100000000);\n-    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.1e-7\")), COIN/100000000);\n-    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.01e-6\")), COIN/100000000);\n-    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.0000000000000000000000000000000000000000000000000000000000000000000000000001e+68\")), COIN/100000000);\n-    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"10000000000000000000000000000000000000000000000000000000000000000e-64\")), COIN);\n-    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000e64\")), COIN);\n-\n-    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e-9\")), UniValue); //should fail\n-    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"0.000000019\")), UniValue); //should fail\n-    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.00000001000000\")), 1LL); //should pass, cut trailing 0\n-    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"19e-9\")), UniValue); //should fail\n-    BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.19e-6\")), 19); //should pass, leading 0 is present\n-\n-    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"92233720368.54775808\")), UniValue); //overflow error\n-    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e+11\")), UniValue); //overflow error\n-    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e11\")), UniValue); //overflow error signless\n-    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"93e+9\")), UniValue); //overflow error\n }\n \n BOOST_AUTO_TEST_CASE(json_parse_errors)\n@@ -169,9 +151,6 @@ BOOST_AUTO_TEST_CASE(json_parse_errors)\n     // Valid, with leading or trailing whitespace\n     BOOST_CHECK_EQUAL(ParseNonRFCJSONValue(\" 1.0\").get_real(), 1.0);\n     BOOST_CHECK_EQUAL(ParseNonRFCJSONValue(\"1.0 \").get_real(), 1.0);\n-\n-    BOOST_CHECK_THROW(AmountFromValue(ParseNonRFCJSONValue(\".19e-6\")), std::runtime_error); //should fail, missing leading 0, therefore invalid JSON\n-    BOOST_CHECK_EQUAL(AmountFromValue(ParseNonRFCJSONValue(\"0.00000000000000000000000000000000000001e+30 \")), 1);\n     // Invalid, initial garbage\n     BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"[1.0\"), std::runtime_error);\n     BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"a1.0\"), std::runtime_error);\n@@ -198,87 +177,4 @@ BOOST_AUTO_TEST_CASE(rpc_boostasiotocnetaddr)\n     BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::ffff:127.0.0.1\")).ToString(), \"127.0.0.1\");\n }\n \n-BOOST_AUTO_TEST_CASE(rpc_ban)\n-{\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n-    \n-    UniValue r;\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0 add\")));\n-    BOOST_CHECK_THROW(r = CallRPC(string(\"setban 127.0.0.0:8334\")), runtime_error); //portnumber for setban not allowed\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n-    UniValue ar = r.get_array();\n-    UniValue o1 = ar[0].get_obj();\n-    UniValue adr = find_value(o1, \"address\");\n-    BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.255\");\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"setban 127.0.0.0 remove\")));;\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n-    ar = r.get_array();\n-    BOOST_CHECK_EQUAL(ar.size(), 0);\n-\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0/24 add 1607731200 true\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n-    ar = r.get_array();\n-    o1 = ar[0].get_obj();\n-    adr = find_value(o1, \"address\");\n-    UniValue banned_until = find_value(o1, \"banned_until\");\n-    BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.0\");\n-    BOOST_CHECK_EQUAL(banned_until.get_int64(), 1607731200); // absolute time check\n-\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n-\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0/24 add 200\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n-    ar = r.get_array();\n-    o1 = ar[0].get_obj();\n-    adr = find_value(o1, \"address\");\n-    banned_until = find_value(o1, \"banned_until\");\n-    BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.0\");\n-    int64_t now = GetTime();    \n-    BOOST_CHECK(banned_until.get_int64() > now);\n-    BOOST_CHECK(banned_until.get_int64()-now <= 200);\n-\n-    // must throw an exception because 127.0.0.1 is in already banned suubnet range\n-    BOOST_CHECK_THROW(r = CallRPC(string(\"setban 127.0.0.1 add\")), runtime_error);\n-\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"setban 127.0.0.0/24 remove\")));;\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n-    ar = r.get_array();\n-    BOOST_CHECK_EQUAL(ar.size(), 0);\n-\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0/255.255.0.0 add\")));\n-    BOOST_CHECK_THROW(r = CallRPC(string(\"setban 127.0.1.1 add\")), runtime_error);\n-\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n-    ar = r.get_array();\n-    BOOST_CHECK_EQUAL(ar.size(), 0);\n-\n-\n-    BOOST_CHECK_THROW(r = CallRPC(string(\"setban test add\")), runtime_error); //invalid IP\n-\n-    //IPv6 tests\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban FE80:0000:0000:0000:0202:B3FF:FE1E:8329 add\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n-    ar = r.get_array();\n-    o1 = ar[0].get_obj();\n-    adr = find_value(o1, \"address\");\n-    BOOST_CHECK_EQUAL(adr.get_str(), \"fe80::202:b3ff:fe1e:8329/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n-\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 2001:db8::/30 add\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n-    ar = r.get_array();\n-    o1 = ar[0].get_obj();\n-    adr = find_value(o1, \"address\");\n-    BOOST_CHECK_EQUAL(adr.get_str(), \"2001:db8::/ffff:fffc:0:0:0:0:0:0\");\n-\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/128 add\")));\n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n-    ar = r.get_array();\n-    o1 = ar[0].get_obj();\n-    adr = find_value(o1, \"address\");\n-    BOOST_CHECK_EQUAL(adr.get_str(), \"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "a72b6561004aa680890b674f2529b3eaf8963762",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -217,12 +217,6 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     UniValue arr = retValue.get_array();\n     BOOST_CHECK(arr.size() > 0);\n     BOOST_CHECK(CBitcoinAddress(arr[0].get_str()).Get() == demoAddress.Get());\n-\n-    /*********************************\n-     * \t     fundrawtransaction\n-     *********************************/\n-    BOOST_CHECK_THROW(CallRPC(\"fundrawtransaction 28z\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"fundrawtransaction 01000000000180969800000000001976a91450ce0a4b0ee0ddeb633da85199728b940ac3fe9488ac00000000\"), runtime_error);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "c8cfe28729c51ad0100ed23a470d5222e94ff3ca",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -5,7 +5,6 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n-#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "24c7dd3d5a4745efa22d7a0d89087fa2f9510685",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -145,7 +145,7 @@ static void RunCreate(const int64_t& num)\n {\n     CheckCreateInt(num);\n     CScriptNum scriptnum(num);\n-    if (scriptnum.getvch().size() <= CScriptNum::nDefaultMaxNumSize)\n+    if (scriptnum.getvch().size() <= CScriptNum::nMaxNumSize)\n         CheckCreateVch(num);\n     else\n     {"
      },
      {
        "sha": "4cfdec12677385154470d49d86befd6ba22d28e5",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -12,7 +12,6 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n-#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n \n@@ -42,8 +41,7 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"MINIMALDATA\"), (unsigned int)SCRIPT_VERIFY_MINIMALDATA)\n     (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY)\n     (string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n-    (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK)\n-    (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY);\n+    (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK);\n \n unsigned int ParseScriptFlags(string strFlags)\n {"
      },
      {
        "sha": "2c1d303f660698ae731b7de1e5fec4f95c753817",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -286,7 +286,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n }\n \n static const char *json1 =\n-\"[1.10000000,{\\\"key1\\\":\\\"str\\\\u0000\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian http://test.com\\\"}}]\";\n+\"[1.10000000,{\\\"key1\\\":\\\"str\\\\u0000\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian\\\"}}]\";\n \n BOOST_AUTO_TEST_CASE(univalue_readwrite)\n {"
      },
      {
        "sha": "5cb589425139f2e748918ec54fe8f6d9381bf4be",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 66,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -418,70 +418,4 @@ BOOST_AUTO_TEST_CASE(test_FormatSubVersion)\n     BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments),std::string(\"/Test:0.9.99(comment1)/\"));\n     BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments2),std::string(\"/Test:0.9.99(comment1; comment2)/\"));\n }\n-\n-BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n-{\n-    int64_t amount = 0;\n-    BOOST_CHECK(ParseFixedPoint(\"0\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, 0LL);\n-    BOOST_CHECK(ParseFixedPoint(\"1\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, 100000000LL);\n-    BOOST_CHECK(ParseFixedPoint(\"0.0\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, 0LL);\n-    BOOST_CHECK(ParseFixedPoint(\"-0.1\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, -10000000LL);\n-    BOOST_CHECK(ParseFixedPoint(\"1.1\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, 110000000LL);\n-    BOOST_CHECK(ParseFixedPoint(\"1.10000000000000000\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, 110000000LL);\n-    BOOST_CHECK(ParseFixedPoint(\"1.1e1\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, 1100000000LL);\n-    BOOST_CHECK(ParseFixedPoint(\"1.1e-1\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, 11000000LL);\n-    BOOST_CHECK(ParseFixedPoint(\"1000\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, 100000000000LL);\n-    BOOST_CHECK(ParseFixedPoint(\"-1000\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, -100000000000LL);\n-    BOOST_CHECK(ParseFixedPoint(\"0.00000001\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, 1LL);\n-    BOOST_CHECK(ParseFixedPoint(\"0.0000000100000000\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, 1LL);\n-    BOOST_CHECK(ParseFixedPoint(\"-0.00000001\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, -1LL);\n-    BOOST_CHECK(ParseFixedPoint(\"1000000000.00000001\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, 100000000000000001LL);\n-    BOOST_CHECK(ParseFixedPoint(\"9999999999.99999999\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, 999999999999999999LL);\n-    BOOST_CHECK(ParseFixedPoint(\"-9999999999.99999999\", 8, &amount));\n-    BOOST_CHECK_EQUAL(amount, -999999999999999999LL);\n-\n-    BOOST_CHECK(!ParseFixedPoint(\"\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"-\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"a-1000\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"-a1000\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"-1000a\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"-01000\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"00.1\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\".1\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"--0.1\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"0.000000001\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"-0.000000001\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"0.00000001000000001\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"-10000000000.00000000\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"10000000000.00000000\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"-10000000000.00000001\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"10000000000.00000001\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"-10000000000.00000009\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"10000000000.00000009\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"-99999999999.99999999\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"99999909999.09999999\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"92233720368.54775807\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"92233720368.54775808\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"-92233720368.54775808\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"-92233720368.54775809\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"1.1e\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"1.1e-\", 8, &amount));\n-    BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "df9ff8d8c98a14f7698dd784bb40ea98644406a6",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -147,10 +147,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n             return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }\n-    {\n-        LOCK(cs_main);\n-        stats.nHeight = mapBlockIndex.find(stats.hashBlock)->second->nHeight;\n-    }\n+    stats.nHeight = mapBlockIndex.find(GetBestBlock())->second->nHeight;\n     stats.hashSerialized = ss.GetHash();\n     stats.nTotalAmount = nTotalAmount;\n     return true;"
      },
      {
        "sha": "1c16e2092e43b011389259011c84e944cb1b2695",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 14,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -18,7 +18,7 @@\n using namespace std;\n \n CTxMemPoolEntry::CTxMemPoolEntry():\n-    nFee(0), nTxSize(0), nModSize(0), nUsageSize(0), nTime(0), dPriority(0.0), hadNoDependencies(false)\n+    nFee(0), nTxSize(0), nModSize(0), nTime(0), dPriority(0.0), hadNoDependencies(false)\n {\n     nHeight = MEMPOOL_HEIGHT;\n }\n@@ -31,7 +31,6 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n-    nUsageSize = RecursiveDynamicUsage(tx);\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -102,7 +101,6 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n         mapNextTx[tx.vin[i].prevout] = CInPoint(&tx, i);\n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n-    cachedInnerUsage += entry.DynamicMemoryUsage();\n     minerPolicyEstimator->processTransaction(entry, fCurrentEstimate);\n \n     return true;\n@@ -148,7 +146,6 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n \n             removed.push_back(tx);\n             totalTxSize -= mapTx[hash].GetTxSize();\n-            cachedInnerUsage -= mapTx[hash].DynamicMemoryUsage();\n             mapTx.erase(hash);\n             nTransactionsUpdated++;\n             minerPolicyEstimator->removeTx(hash);\n@@ -169,7 +166,7 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n                 continue;\n             const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n             if (fSanityCheck) assert(coins);\n-            if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n+            if (!coins || (coins->IsCoinBase() && nMemPoolHeight - coins->nHeight < COINBASE_MATURITY)) {\n                 transactionsToRemove.push_back(tx);\n                 break;\n             }\n@@ -229,7 +226,6 @@ void CTxMemPool::clear()\n     mapTx.clear();\n     mapNextTx.clear();\n     totalTxSize = 0;\n-    cachedInnerUsage = 0;\n     ++nTransactionsUpdated;\n }\n \n@@ -241,7 +237,6 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     LogPrint(\"mempool\", \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n \n     uint64_t checkTotal = 0;\n-    uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n \n@@ -250,7 +245,6 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         checkTotal += it->second.GetTxSize();\n-        innerUsage += it->second.DynamicMemoryUsage();\n         const CTransaction& tx = it->second.GetTx();\n         bool fDependsWait = false;\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n@@ -305,7 +299,6 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     }\n \n     assert(totalTxSize == checkTotal);\n-    assert(innerUsage == cachedInnerUsage);\n }\n \n void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n@@ -426,8 +419,3 @@ bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {\n bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n     return mempool.exists(txid) || base->HaveCoins(txid);\n }\n-\n-size_t CTxMemPool::DynamicMemoryUsage() const {\n-    LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n-}"
      },
      {
        "sha": "7271a5f603c7554b9c090dc805c70dcd25df0f1d",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -40,7 +40,6 @@ class CTxMemPoolEntry\n     CAmount nFee; //! Cached to avoid expensive parent-transaction lookups\n     size_t nTxSize; //! ... and avoid recomputing tx size\n     size_t nModSize; //! ... and modified size for priority\n-    size_t nUsageSize; //! ... and total memory usage\n     int64_t nTime; //! Local time when entering the mempool\n     double dPriority; //! Priority when entering the mempool\n     unsigned int nHeight; //! Chain height when entering the mempool\n@@ -59,7 +58,6 @@ class CTxMemPoolEntry\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n-    size_t DynamicMemoryUsage() const { return nUsageSize; }\n };\n \n class CBlockPolicyEstimator;\n@@ -75,7 +73,6 @@ class CInPoint\n     CInPoint(const CTransaction* ptxIn, uint32_t nIn) { ptx = ptxIn; n = nIn; }\n     void SetNull() { ptx = NULL; n = (uint32_t) -1; }\n     bool IsNull() const { return (ptx == NULL && n == (uint32_t) -1); }\n-    size_t DynamicMemoryUsage() const { return 0; }\n };\n \n /**\n@@ -96,7 +93,6 @@ class CTxMemPool\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n     uint64_t totalTxSize; //! sum of all mempool tx' byte sizes\n-    uint64_t cachedInnerUsage; //! sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n public:\n     mutable CCriticalSection cs;\n@@ -143,7 +139,6 @@ class CTxMemPool\n         LOCK(cs);\n         return mapTx.size();\n     }\n-\n     uint64_t GetTotalTxSize()\n     {\n         LOCK(cs);\n@@ -167,8 +162,6 @@ class CTxMemPool\n     /** Write/Read estimates to disk */\n     bool WriteFeeEstimates(CAutoFile& fileout) const;\n     bool ReadFeeEstimates(CAutoFile& filein);\n-\n-    size_t DynamicMemoryUsage() const;\n };\n \n /** "
      },
      {
        "sha": "abebe88634964320070535856d59b03b154ea9ae",
        "filename": "src/univalue/gen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/univalue/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/univalue/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/gen.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -22,6 +22,7 @@ static void initJsonEscape()\n {\n     escapes[(int)'\"'] = \"\\\\\\\"\";\n     escapes[(int)'\\\\'] = \"\\\\\\\\\";\n+    escapes[(int)'/'] = \"\\\\/\";\n     escapes[(int)'\\b'] = \"\\\\b\";\n     escapes[(int)'\\f'] = \"\\\\f\";\n     escapes[(int)'\\n'] = \"\\\\n\";"
      },
      {
        "sha": "05141182859a0b457e40a6ac96b912dbed0454cd",
        "filename": "src/univalue/univalue_escapes.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/univalue/univalue_escapes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/univalue/univalue_escapes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_escapes.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -49,7 +49,7 @@ static const char *escapes[256] = {\n \tNULL,\n \tNULL,\n \tNULL,\n-\tNULL,\n+\t\"\\\\/\",\n \tNULL,\n \tNULL,\n \tNULL,"
      },
      {
        "sha": "da5821e530d351628335c145e6565f3a7f16e8ad",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 96,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -83,7 +83,6 @@\n #include <boost/thread.hpp>\n #include <openssl/crypto.h>\n #include <openssl/rand.h>\n-#include <openssl/conf.h>\n \n // Work around clang compilation problem in Boost 1.46:\n // /usr/include/boost/program_options/detail/config_file.hpp:163:17: error: call to function 'to_internal' that is neither visible in the template definition nor found by argument-dependent lookup\n@@ -114,7 +113,7 @@ CTranslationInterface translationInterface;\n \n /** Init OpenSSL library multithreading support */\n static CCriticalSection** ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n+void locking_callback(int mode, int i, const char* file, int line)\n {\n     if (mode & CRYPTO_LOCK) {\n         ENTER_CRITICAL_SECTION(*ppmutexOpenSSL[i]);\n@@ -135,13 +134,6 @@ class CInit\n             ppmutexOpenSSL[i] = new CCriticalSection();\n         CRYPTO_set_locking_callback(locking_callback);\n \n-        // OpenSSL can optionally load a config file which lists optional loadable modules and engines.\n-        // We don't use them so we don't require the config. However some of our libs may call functions\n-        // which attempt to load the config file, possibly resulting in an exit() or crash if it is missing\n-        // or corrupt. Explicitly tell OpenSSL not to try to load the file. The result for our libs will be\n-        // that the config appears to have been loaded and there are no modules/engines available.\n-        OPENSSL_no_config();\n-\n #ifdef WIN32\n         // Seed OpenSSL PRNG with current contents of the screen\n         RAND_screen();\n@@ -175,51 +167,23 @@ instance_of_cinit;\n  */\n \n static boost::once_flag debugPrintInitFlag = BOOST_ONCE_INIT;\n-\n /**\n- * We use boost::call_once() to make sure mutexDebugLog and\n- * vMsgsBeforeOpenLog are initialized in a thread-safe manner.\n- *\n- * NOTE: fileout, mutexDebugLog and sometimes vMsgsBeforeOpenLog\n- * are leaked on exit. This is ugly, but will be cleaned up by\n- * the OS/libc. When the shutdown sequence is fully audited and\n- * tested, explicit destruction of these objects can be implemented.\n+ * We use boost::call_once() to make sure these are initialized\n+ * in a thread-safe manner the first time called:\n  */\n static FILE* fileout = NULL;\n static boost::mutex* mutexDebugLog = NULL;\n-static list<string> *vMsgsBeforeOpenLog;\n-\n-static int FileWriteStr(const std::string &str, FILE *fp)\n-{\n-    return fwrite(str.data(), 1, str.size(), fp);\n-}\n \n static void DebugPrintInit()\n {\n+    assert(fileout == NULL);\n     assert(mutexDebugLog == NULL);\n-    mutexDebugLog = new boost::mutex();\n-    vMsgsBeforeOpenLog = new list<string>;\n-}\n-\n-void OpenDebugLog()\n-{\n-    boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n-    boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n-    assert(fileout == NULL);\n-    assert(vMsgsBeforeOpenLog);\n     boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n     fileout = fopen(pathDebug.string().c_str(), \"a\");\n     if (fileout) setbuf(fileout, NULL); // unbuffered\n \n-    // dump buffered messages from before we opened the log\n-    while (!vMsgsBeforeOpenLog->empty()) {\n-        FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);\n-        vMsgsBeforeOpenLog->pop_front();\n-    }\n-\n-    delete vMsgsBeforeOpenLog;\n-    vMsgsBeforeOpenLog = NULL;\n+    mutexDebugLog = new boost::mutex();\n }\n \n bool LogAcceptCategory(const char* category)\n@@ -251,67 +215,44 @@ bool LogAcceptCategory(const char* category)\n     return true;\n }\n \n-/**\n- * fStartedNewLine is a state variable held by the calling context that will\n- * suppress printing of the timestamp when multiple calls are made that don't\n- * end in a newline. Initialize it to true, and hold it, in the calling context.\n- */\n-static std::string LogTimestampStr(const std::string &str, bool *fStartedNewLine)\n-{\n-    string strStamped;\n-\n-    if (!fLogTimestamps)\n-        return str;\n-\n-    if (*fStartedNewLine)\n-        strStamped =  DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()) + ' ' + str;\n-    else\n-        strStamped = str;\n-\n-    if (!str.empty() && str[str.size()-1] == '\\n')\n-        *fStartedNewLine = true;\n-    else\n-        *fStartedNewLine = false;\n-\n-    return strStamped;\n-}\n-\n int LogPrintStr(const std::string &str)\n {\n     int ret = 0; // Returns total number of characters written\n-    static bool fStartedNewLine = true;\n     if (fPrintToConsole)\n     {\n         // print to console\n         ret = fwrite(str.data(), 1, str.size(), stdout);\n         fflush(stdout);\n     }\n-    else if (fPrintToDebugLog)\n+    else if (fPrintToDebugLog && AreBaseParamsConfigured())\n     {\n+        static bool fStartedNewLine = true;\n         boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n-        boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n-        string strTimestamped = LogTimestampStr(str, &fStartedNewLine);\n+        if (fileout == NULL)\n+            return ret;\n \n-        // buffer if we haven't opened the log yet\n-        if (fileout == NULL) {\n-            assert(vMsgsBeforeOpenLog);\n-            ret = strTimestamped.length();\n-            vMsgsBeforeOpenLog->push_back(strTimestamped);\n+        boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n+\n+        // reopen the log file, if requested\n+        if (fReopenDebugLog) {\n+            fReopenDebugLog = false;\n+            boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n+            if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n+                setbuf(fileout, NULL); // unbuffered\n         }\n+\n+        // Debug print useful for profiling\n+        if (fLogTimestamps && fStartedNewLine)\n+            ret += fprintf(fileout, \"%s \", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()).c_str());\n+        if (!str.empty() && str[str.size()-1] == '\\n')\n+            fStartedNewLine = true;\n         else\n-        {\n-            // reopen the log file, if requested\n-            if (fReopenDebugLog) {\n-                fReopenDebugLog = false;\n-                boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n-                if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n-                    setbuf(fileout, NULL); // unbuffered\n-            }\n-\n-            ret = FileWriteStr(strTimestamped, fileout);\n-        }\n+            fStartedNewLine = false;\n+\n+        ret = fwrite(str.data(), 1, str.size(), fileout);\n     }\n+\n     return ret;\n }\n \n@@ -815,13 +756,3 @@ void SetThreadPriority(int nPriority)\n #endif // PRIO_THREAD\n #endif // WIN32\n }\n-\n-int GetNumCores()\n-{\n-#if BOOST_VERSION >= 105600\n-    return boost::thread::physical_concurrency();\n-#else // Must fall back to hardware_concurrency, which unfortunately counts virtual cores\n-    return boost::thread::hardware_concurrency();\n-#endif\n-}\n-"
      },
      {
        "sha": "6ec81698ea52729b0c6b3108870b4a4a353b166b",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -125,7 +125,6 @@ void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map\n boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n boost::filesystem::path GetTempPath();\n-void OpenDebugLog();\n void ShrinkDebugFile();\n void runCommand(const std::string& strCommand);\n \n@@ -200,13 +199,6 @@ std::string HelpMessageGroup(const std::string& message);\n  */\n std::string HelpMessageOpt(const std::string& option, const std::string& message);\n \n-/**\n- * Return the number of physical cores available on the current system.\n- * @note This does not count virtual cores, such as those provided by HyperThreading\n- * when boost is newer than 1.56.\n- */\n-int GetNumCores();\n-\n void SetThreadPriority(int nPriority);\n void RenameThread(const char* name);\n "
      },
      {
        "sha": "7d1de7d6a8710db55711feebbfbc9d1156fd697f",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 120,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -538,123 +538,3 @@ int atoi(const std::string& str)\n {\n     return atoi(str.c_str());\n }\n-\n-/** Upper bound for mantissa.\n- * 10^18-1 is the largest arbitrary decimal that will fit in a signed 64-bit integer.\n- * Larger integers cannot consist of arbitrary combinations of 0-9:\n- *\n- *   999999999999999999  1^18-1\n- *  9223372036854775807  (1<<63)-1  (max int64_t)\n- *  9999999999999999999  1^19-1     (would overflow)\n- */\n-static const int64_t UPPER_BOUND = 1000000000000000000LL - 1LL;\n-\n-/** Helper function for ParseFixedPoint */\n-static inline bool ProcessMantissaDigit(char ch, int64_t &mantissa, int &mantissa_tzeros)\n-{\n-    if(ch == '0')\n-        ++mantissa_tzeros;\n-    else {\n-        for (int i=0; i<=mantissa_tzeros; ++i) {\n-            if (mantissa > (UPPER_BOUND / 10LL))\n-                return false; /* overflow */\n-            mantissa *= 10;\n-        }\n-        mantissa += ch - '0';\n-        mantissa_tzeros = 0;\n-    }\n-    return true;\n-}\n-\n-bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n-{\n-    int64_t mantissa = 0;\n-    int64_t exponent = 0;\n-    int mantissa_tzeros = 0;\n-    bool mantissa_sign = false;\n-    bool exponent_sign = false;\n-    int ptr = 0;\n-    int end = val.size();\n-    int point_ofs = 0;\n-\n-    if (ptr < end && val[ptr] == '-') {\n-        mantissa_sign = true;\n-        ++ptr;\n-    }\n-    if (ptr < end)\n-    {\n-        if (val[ptr] == '0') {\n-            /* pass single 0 */\n-            ++ptr;\n-        } else if (val[ptr] >= '1' && val[ptr] <= '9') {\n-            while (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n-                if (!ProcessMantissaDigit(val[ptr], mantissa, mantissa_tzeros))\n-                    return false; /* overflow */\n-                ++ptr;\n-            }\n-        } else return false; /* missing expected digit */\n-    } else return false; /* empty string or loose '-' */\n-    if (ptr < end && val[ptr] == '.')\n-    {\n-        ++ptr;\n-        if (ptr < end && val[ptr] >= '0' && val[ptr] <= '9')\n-        {\n-            while (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n-                if (!ProcessMantissaDigit(val[ptr], mantissa, mantissa_tzeros))\n-                    return false; /* overflow */\n-                ++ptr;\n-                ++point_ofs;\n-            }\n-        } else return false; /* missing expected digit */\n-    }\n-    if (ptr < end && (val[ptr] == 'e' || val[ptr] == 'E'))\n-    {\n-        ++ptr;\n-        if (ptr < end && val[ptr] == '+')\n-            ++ptr;\n-        else if (ptr < end && val[ptr] == '-') {\n-            exponent_sign = true;\n-            ++ptr;\n-        }\n-        if (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n-            while (ptr < end && val[ptr] >= '0' && val[ptr] <= '9') {\n-                if (exponent > (UPPER_BOUND / 10LL))\n-                    return false; /* overflow */\n-                exponent = exponent * 10 + val[ptr] - '0';\n-                ++ptr;\n-            }\n-        } else return false; /* missing expected digit */\n-    }\n-    if (ptr != end)\n-        return false; /* trailing garbage */\n-\n-    /* finalize exponent */\n-    if (exponent_sign)\n-        exponent = -exponent;\n-    exponent = exponent - point_ofs + mantissa_tzeros;\n-\n-    /* finalize mantissa */\n-    if (mantissa_sign)\n-        mantissa = -mantissa;\n-\n-    /* convert to one 64-bit fixed-point value */\n-    exponent += decimals;\n-    if (exponent < 0)\n-        return false; /* cannot represent values smaller than 10^-decimals */\n-    if (exponent >= 18)\n-        return false; /* cannot represent values larger than or equal to 10^(18-decimals) */\n-\n-    for (int i=0; i < exponent; ++i) {\n-        if (mantissa > (UPPER_BOUND / 10LL) || mantissa < -(UPPER_BOUND / 10LL))\n-            return false; /* overflow */\n-        mantissa *= 10;\n-    }\n-    if (mantissa > UPPER_BOUND || mantissa < -UPPER_BOUND)\n-        return false; /* overflow */\n-\n-    if (amount_out)\n-        *amount_out = mantissa;\n-\n-    return true;\n-}\n-"
      },
      {
        "sha": "58329b51bb8586928a459ad8f40ed2459d85f4fc",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -109,11 +109,4 @@ bool TimingResistantEqual(const T& a, const T& b)\n     return accumulator == 0;\n }\n \n-/** Parse number as fixed point according to JSON number syntax.\n- * See http://json.org/number.gif\n- * @returns true on success, false on error.\n- * @note The result must be in the range (-10^18,10^18), otherwise an overflow error will trigger.\n- */\n-bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n-\n #endif // BITCOIN_UTILSTRENCODINGS_H"
      },
      {
        "sha": "0532da5f37cb22f74cb3504eb21349a1bce35f1d",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -19,13 +19,9 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1));\n     g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.ScriptForMining.connect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n-    g_signals.BlockFound.connect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.BlockFound.disconnect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n-    g_signals.ScriptForMining.disconnect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1));\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -35,8 +31,6 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n }\n \n void UnregisterAllValidationInterfaces() {\n-    g_signals.BlockFound.disconnect_all_slots();\n-    g_signals.ScriptForMining.disconnect_all_slots();\n     g_signals.BlockChecked.disconnect_all_slots();\n     g_signals.Broadcast.disconnect_all_slots();\n     g_signals.Inventory.disconnect_all_slots();"
      },
      {
        "sha": "a911d1efeb5c9e40a340aff318545d26798b8257",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -7,11 +7,9 @@\n #define BITCOIN_VALIDATIONINTERFACE_H\n \n #include <boost/signals2/signal.hpp>\n-#include <boost/shared_ptr.hpp>\n \n class CBlock;\n struct CBlockLocator;\n-class CReserveScript;\n class CTransaction;\n class CValidationInterface;\n class CValidationState;\n@@ -36,8 +34,6 @@ class CValidationInterface {\n     virtual void Inventory(const uint256 &hash) {}\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime) {}\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n-    virtual void GetScriptForMining(boost::shared_ptr<CReserveScript>&) {};\n-    virtual void ResetRequestCount(const uint256 &hash) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n@@ -56,10 +52,6 @@ struct CMainSignals {\n     boost::signals2::signal<void (int64_t nBestBlockTime)> Broadcast;\n     /** Notifies listeners of a block validation result */\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n-    /** Notifies listeners that a key for mining is required (coinbase) */\n-    boost::signals2::signal<void (boost::shared_ptr<CReserveScript>&)> ScriptForMining;\n-    /** Notifies listeners that a block has been successfully mined */\n-    boost::signals2::signal<void (const uint256 &)> BlockFound;\n };\n \n CMainSignals& GetMainSignals();"
      },
      {
        "sha": "53cfcf0961ac9d77135fe15453730f8642588f52",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -43,7 +43,7 @@ void CDBEnv::EnvShutdown()\n     if (ret != 0)\n         LogPrintf(\"CDBEnv::EnvShutdown: Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n-        DbEnv(0).remove(strPath.c_str(), 0);\n+        DbEnv(0).remove(path.string().c_str(), 0);\n }\n \n void CDBEnv::Reset()\n@@ -78,10 +78,10 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n \n     boost::this_thread::interruption_point();\n \n-    strPath = pathIn.string();\n-    boost::filesystem::path pathLogDir = pathIn / \"database\";\n+    path = pathIn;\n+    boost::filesystem::path pathLogDir = path / \"database\";\n     TryCreateDirectory(pathLogDir);\n-    boost::filesystem::path pathErrorFile = pathIn / \"db.log\";\n+    boost::filesystem::path pathErrorFile = path / \"db.log\";\n     LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n@@ -98,7 +98,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     dbenv->set_flags(DB_AUTO_COMMIT, 1);\n     dbenv->set_flags(DB_TXN_WRITE_NOSYNC, 1);\n     dbenv->log_set_config(DB_LOG_AUTO_REMOVE, 1);\n-    int ret = dbenv->open(strPath.c_str(),\n+    int ret = dbenv->open(path.string().c_str(),\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -455,7 +455,7 @@ void CDBEnv::Flush(bool fShutdown)\n                 dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb)\n-                    boost::filesystem::remove_all(boost::filesystem::path(strPath) / \"database\");\n+                    boost::filesystem::remove_all(path / \"database\");\n             }\n         }\n     }"
      },
      {
        "sha": "2df6f6e5a94e1057028ad1cfe2e99470c6c91756",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -27,9 +27,7 @@ class CDBEnv\n private:\n     bool fDbEnvInit;\n     bool fMockDb;\n-    // Don't change into boost::filesystem::path, as that can result in\n-    // shutdown problems/crashes caused by a static initialized internal pointer.\n-    std::string strPath;\n+    boost::filesystem::path path;\n \n     void EnvShutdown();\n "
      },
      {
        "sha": "d284fcf15c253b573066d049d72e361158d47830",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 58,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -476,6 +476,7 @@ UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n             addressInfo.push_back(CBitcoinAddress(address).ToString());\n             addressInfo.push_back(ValueFromAmount(balances[address]));\n             {\n+                LOCK(pwalletMain->cs_wallet);\n                 if (pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get()) != pwalletMain->mapAddressBook.end())\n                     addressInfo.push_back(pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get())->second.name);\n             }\n@@ -732,12 +733,12 @@ UniValue getbalance(const UniValue& params, bool fHelp)\n     if (params[0].get_str() == \"*\") {\n         // Calculate total balance a different way from GetBalance()\n         // (GetBalance() sums up all unspent TxOuts)\n-        // getbalance and \"getbalance * 1 true\" should return the same number\n+        // getbalance and getbalance '*' 0 should return the same number\n         CAmount nBalance = 0;\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n-            if (!CheckFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n+            if (!wtx.IsTrusted() || wtx.GetBlocksToMaturity() > 0)\n                 continue;\n \n             CAmount allFee;\n@@ -2200,7 +2201,6 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n             \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in btc/kb\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2219,7 +2219,6 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n     if (pwalletMain->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n     return obj;\n }\n \n@@ -2360,57 +2359,3 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n-\n-UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n-{\n-    if (!EnsureWalletIsAvailable(fHelp))\n-        return NullUniValue;\n-\n-    if (fHelp || params.size() != 1)\n-        throw runtime_error(\n-                            \"fundrawtransaction \\\"hexstring\\\"\\n\"\n-                            \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n-                            \"This will not modify existing inputs, and will add one change output to the outputs.\\n\"\n-                            \"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\\n\"\n-                            \"The inputs added will not be signed, use signrawtransaction for that.\\n\"\n-                            \"\\nArguments:\\n\"\n-                            \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction\\n\"\n-                            \"\\nResult:\\n\"\n-                            \"{\\n\"\n-                            \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n-                            \"  \\\"fee\\\":       n,         (numeric) The fee added to the transaction\\n\"\n-                            \"  \\\"changepos\\\": n          (numeric) The position of the added change output, or -1\\n\"\n-                            \"}\\n\"\n-                            \"\\\"hex\\\"             \\n\"\n-                            \"\\nExamples:\\n\"\n-                            \"\\nCreate a transaction with no inputs\\n\"\n-                            + HelpExampleCli(\"createrawtransaction\", \"\\\"[]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n-                            \"\\nAdd sufficient unsigned inputs to meet the output value\\n\"\n-                            + HelpExampleCli(\"fundrawtransaction\", \"\\\"rawtransactionhex\\\"\") +\n-                            \"\\nSign the transaction\\n\"\n-                            + HelpExampleCli(\"signrawtransaction\", \"\\\"fundedtransactionhex\\\"\") +\n-                            \"\\nSend the transaction\\n\"\n-                            + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n-                            );\n-\n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n-\n-    // parse hex string from parameter\n-    CTransaction origTx;\n-    if (!DecodeHexTx(origTx, params[0].get_str()))\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-\n-    CMutableTransaction tx(origTx);\n-    CAmount nFee;\n-    string strFailReason;\n-    int nChangePos = -1;\n-    if(!pwalletMain->FundTransaction(tx, nFee, nChangePos, strFailReason))\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n-\n-    UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hex\", EncodeHexTx(tx)));\n-    result.push_back(Pair(\"changepos\", nChangePos));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n-\n-    return result;\n-}"
      },
      {
        "sha": "3f12d88e79520621dcd37f2bbb8fd999cd197069",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 136,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -12,7 +12,6 @@\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"net.h\"\n-#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\"\n@@ -420,7 +419,6 @@ void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n         const uint256& hash = it->second;\n         CWalletTx* copyTo = &mapWallet[hash];\n         if (copyFrom == copyTo) continue;\n-        if (!copyFrom->IsEquivalentTo(*copyTo)) continue;\n         copyTo->mapValue = copyFrom->mapValue;\n         copyTo->vOrderForm = copyFrom->vOrderForm;\n         // fTimeReceivedIsTxTime not copied on purpose\n@@ -1332,15 +1330,6 @@ bool CWalletTx::IsTrusted() const\n     return true;\n }\n \n-bool CWalletTx::IsEquivalentTo(const CWalletTx& tx) const\n-{\n-        CMutableTransaction tx1 = *this;\n-        CMutableTransaction tx2 = tx;\n-        for (unsigned int i = 0; i < tx1.vin.size(); i++) tx1.vin[i].scriptSig = CScript();\n-        for (unsigned int i = 0; i < tx2.vin.size(); i++) tx2.vin[i].scriptSig = CScript();\n-        return CTransaction(tx1) == CTransaction(tx2);\n-}\n-\n std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime)\n {\n     std::vector<uint256> result;\n@@ -1520,7 +1509,7 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                 isminetype mine = IsMine(pcoin->vout[i]);\n                 if (!(IsSpent(wtxid, i)) && mine != ISMINE_NO &&\n                     !IsLockedCoin((*it).first, i) && (pcoin->vout[i].nValue > 0 || fIncludeZeroValue) &&\n-                    (!coinControl || !coinControl->HasSelected() || coinControl->fAllowOtherInputs || coinControl->IsSelected((*it).first, i)))\n+                    (!coinControl || !coinControl->HasSelected() || coinControl->IsSelected((*it).first, i)))\n                         vCoins.push_back(COutput(pcoin, i, nDepth, (mine & ISMINE_SPENDABLE) != ISMINE_NO));\n             }\n         }\n@@ -1680,108 +1669,25 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n     AvailableCoins(vCoins, true, coinControl);\n \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n-    if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs)\n+    if (coinControl && coinControl->HasSelected())\n     {\n         BOOST_FOREACH(const COutput& out, vCoins)\n         {\n-            if (!out.fSpendable)\n-                 continue;\n+            if(!out.fSpendable)\n+                continue;\n             nValueRet += out.tx->vout[out.i].nValue;\n             setCoinsRet.insert(make_pair(out.tx, out.i));\n         }\n         return (nValueRet >= nTargetValue);\n     }\n \n-    // calculate value from preset inputs and store them\n-    set<pair<const CWalletTx*, uint32_t> > setPresetCoins;\n-    CAmount nValueFromPresetInputs = 0;\n-\n-    std::vector<COutPoint> vPresetInputs;\n-    if (coinControl)\n-        coinControl->ListSelected(vPresetInputs);\n-    BOOST_FOREACH(const COutPoint& outpoint, vPresetInputs)\n-    {\n-        map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\n-        if (it != mapWallet.end())\n-        {\n-            const CWalletTx* pcoin = &it->second;\n-            // Clearly invalid input, fail\n-            if (pcoin->vout.size() <= outpoint.n)\n-                return false;\n-            nValueFromPresetInputs += pcoin->vout[outpoint.n].nValue;\n-            setPresetCoins.insert(make_pair(pcoin, outpoint.n));\n-        } else\n-            return false; // TODO: Allow non-wallet inputs\n-    }\n-\n-    // remove preset inputs from vCoins\n-    for (vector<COutput>::iterator it = vCoins.begin(); it != vCoins.end() && coinControl && coinControl->HasSelected();)\n-    {\n-        if (setPresetCoins.count(make_pair(it->tx, it->i)))\n-            it = vCoins.erase(it);\n-        else\n-            ++it;\n-    }\n-\n-    bool res = nTargetValue <= nValueFromPresetInputs ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 6, vCoins, setCoinsRet, nValueRet) ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 1, vCoins, setCoinsRet, nValueRet) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, vCoins, setCoinsRet, nValueRet));\n-\n-    // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible inputs to the coinset\n-    setCoinsRet.insert(setPresetCoins.begin(), setPresetCoins.end());\n-\n-    // add preset inputs to the total value selected\n-    nValueRet += nValueFromPresetInputs;\n-\n-    return res;\n+    return (SelectCoinsMinConf(nTargetValue, 1, 6, vCoins, setCoinsRet, nValueRet) ||\n+            SelectCoinsMinConf(nTargetValue, 1, 1, vCoins, setCoinsRet, nValueRet) ||\n+            (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue, 0, 1, vCoins, setCoinsRet, nValueRet)));\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason)\n-{\n-    vector<CRecipient> vecSend;\n-\n-    // Turn the txout set into a CRecipient vector\n-    BOOST_FOREACH(const CTxOut& txOut, tx.vout)\n-    {\n-        CRecipient recipient = {txOut.scriptPubKey, txOut.nValue, false};\n-        vecSend.push_back(recipient);\n-    }\n-\n-    CCoinControl coinControl;\n-    coinControl.fAllowOtherInputs = true;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        coinControl.Select(txin.prevout);\n-\n-    CReserveKey reservekey(this);\n-    CWalletTx wtx;\n-    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosRet, strFailReason, &coinControl, false))\n-        return false;\n-\n-    if (nChangePosRet != -1)\n-        tx.vout.insert(tx.vout.begin() + nChangePosRet, wtx.vout[nChangePosRet]);\n-\n-    // Add new txins (keeping original txin scriptSig/order)\n-    BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n-    {\n-        bool found = false;\n-        BOOST_FOREACH(const CTxIn& origTxIn, tx.vin)\n-        {\n-            if (txin.prevout.hash == origTxIn.prevout.hash && txin.prevout.n == origTxIn.prevout.n)\n-            {\n-                found = true;\n-                break;\n-            }\n-        }\n-        if (!found)\n-            tx.vin.push_back(txin);\n-    }\n-\n-    return true;\n-}\n-\n-bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n-                                int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n+bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl)\n {\n     CAmount nValue = 0;\n     unsigned int nSubtractFeeFromAmount = 0;\n@@ -1984,43 +1890,23 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                 // Sign\n                 int nIn = 0;\n-                CTransaction txNewConst(txNew);\n                 BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n-                {\n-                    bool signSuccess;\n-                    const CScript& scriptPubKey = coin.first->vout[coin.second].scriptPubKey;\n-                    CScript& scriptSigRes = txNew.vin[nIn].scriptSig;\n-                    if (sign)\n-                        signSuccess = ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, scriptSigRes);\n-                    else\n-                        signSuccess = ProduceSignature(DummySignatureCreator(this), scriptPubKey, scriptSigRes);\n-\n-                    if (!signSuccess)\n+                    if (!SignSignature(*this, *coin.first, txNew, nIn++))\n                     {\n                         strFailReason = _(\"Signing transaction failed\");\n                         return false;\n                     }\n-                    nIn++;\n-                }\n-\n-                unsigned int nBytes = ::GetSerializeSize(txNew, SER_NETWORK, PROTOCOL_VERSION);\n-\n-                // Remove scriptSigs if we used dummy signatures for fee calculation\n-                if (!sign) {\n-                    BOOST_FOREACH (CTxIn& vin, txNew.vin)\n-                        vin.scriptSig = CScript();\n-                }\n \n                 // Embed the constructed transaction data in wtxNew.\n                 *static_cast<CTransaction*>(&wtxNew) = CTransaction(txNew);\n \n                 // Limit size\n+                unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtxNew, SER_NETWORK, PROTOCOL_VERSION);\n                 if (nBytes >= MAX_STANDARD_TX_SIZE)\n                 {\n                     strFailReason = _(\"Transaction too large\");\n                     return false;\n                 }\n-\n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n                 // Can we complete this as a free transaction?\n@@ -2594,17 +2480,6 @@ void CWallet::UpdatedTransaction(const uint256 &hashTx)\n     }\n }\n \n-void CWallet::GetScriptForMining(boost::shared_ptr<CReserveScript> &script)\n-{\n-    boost::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n-    CPubKey pubkey;\n-    if (!rKey->GetReservedKey(pubkey))\n-        return;\n-\n-    script = rKey;\n-    script->reserveScript = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n-}\n-\n void CWallet::LockCoin(COutPoint& output)\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins"
      },
      {
        "sha": "9f3f08d1170fb4826b7a52f7ec22c8b4b60a8935",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 17,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f014be8ebcd3fd8a8a7a96f88ee4a83dbe67c0cc",
        "patch": "@@ -28,8 +28,6 @@\n #include <utility>\n #include <vector>\n \n-#include <boost/shared_ptr.hpp>\n-\n /**\n  * Settings\n  */\n@@ -378,9 +376,6 @@ class CWalletTx : public CMerkleTx\n         return (GetDebit(filter) > 0);\n     }\n \n-    // True if only scriptSigs are different\n-    bool IsEquivalentTo(const CWalletTx& tx) const;\n-\n     bool IsTrusted() const;\n \n     bool WriteToDisk(CWalletDB *pwalletdb);\n@@ -630,9 +625,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason);\n-    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet,\n-                           std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n     static CFeeRate minTxFee;\n@@ -685,13 +679,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void GetScriptForMining(boost::shared_ptr<CReserveScript> &script);\n-    void ResetRequestCount(const uint256 &hash)\n-    {\n-        LOCK(cs_wallet);\n-        mapRequestCount[hash] = 0;\n-    };\n-    \n     unsigned int GetKeyPoolSize()\n     {\n         AssertLockHeld(cs_wallet); // setKeyPool\n@@ -747,7 +734,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n };\n \n /** A key allocated from the key pool. */\n-class CReserveKey : public CReserveScript\n+class CReserveKey\n {\n protected:\n     CWallet* pwallet;\n@@ -768,7 +755,6 @@ class CReserveKey : public CReserveScript\n     void ReturnKey();\n     bool GetReservedKey(CPubKey &pubkey);\n     void KeepKey();\n-    void KeepScript() { KeepKey(); }\n };\n \n "
      }
    ]
  }
]