gmaxwell,2017-07-09T11:35:43Z,"Super mega concept ACK.  FWIW, I tested something functionally like this before (eliminating the signals with a direct function call) and saw a measurable performance improvement, I assume because there is synchronization inside the signals stuff (plus a super deep call stack).",https://github.com/bitcoin/bitcoin/pull/10756#issuecomment-313914683,313914683,
TheBlueMatt,2017-07-10T00:22:21Z,"This is awesome. Lots of future work to do, but good first step. Will circle back around post-15.",https://github.com/bitcoin/bitcoin/pull/10756#issuecomment-313975394,313975394,
jnewbery,2017-07-10T13:59:26Z,"@gmaxwell \n\n> tested something functionally like this before (eliminating the signals with a direct function call) and saw a measurable performance improvement\n\nHow did you test that? It'd be good to benchmark whether this gives us a performance improvement.",https://github.com/bitcoin/bitcoin/pull/10756#issuecomment-314113978,314113978,
theuni,2017-07-11T00:19:32Z,"Remembering @gmaxwell's mention of it before, I was hoping to see a slight speedup here, but I haven't been able to observe anything substantial either. No test varies more than 1% from any other.\n\n@jnewbery my test was to do a sync to block 150000 between two localhost nodes running from ramdisk datadirs. I believe that focuses on the hot-spot well enough.",https://github.com/bitcoin/bitcoin/pull/10756#issuecomment-314286460,314286460,
theuni,2017-07-11T16:37:58Z,"Needed rebase after #10179, so I went ahead and squashed it down too.",https://github.com/bitcoin/bitcoin/pull/10756#issuecomment-314501830,314501830,
gmaxwell,2017-07-11T19:17:42Z,"@jnewbery GBE connected hosts running a patch like this, out of ram, may have also required turning up our networking buffers. maybe that other locking changes we made mooted the improvement. I'll go see if I can find the relevant chat logs.",https://github.com/bitcoin/bitcoin/pull/10756#issuecomment-314544580,314544580,
TheBlueMatt,2017-08-02T23:22:53Z,"Note that some of the Process functions are likely to move again into CNodeState or so, I believe, but this is an obviously good step.",https://github.com/bitcoin/bitcoin/pull/10756#issuecomment-319825474,319825474,
theuni,2017-08-16T18:22:42Z,"Rebased, updated for recent changes, and addressed @TheBlueMatt's feedback",https://github.com/bitcoin/bitcoin/pull/10756#issuecomment-322857510,322857510,
theuni,2017-09-05T23:12:44Z,"Rebased. Same as before, plus I took the suggestion here: https://github.com/bitcoin/bitcoin/pull/10756#discussion_r133860799",https://github.com/bitcoin/bitcoin/pull/10756#issuecomment-327328977,327328977,
TheBlueMatt,2017-09-07T18:37:39Z,utACK 2525b972af6645ca239ac1078cffb132b402bfbb,https://github.com/bitcoin/bitcoin/pull/10756#issuecomment-327887233,327887233,
jnewbery,2017-07-10T14:07:10Z,Nit: move `Receive messages` comment into the if block (the block covers both receiving and sending messages. Having the comment outside the block suggests it's just for receiving messages),https://github.com/bitcoin/bitcoin/pull/10756#discussion_r126431076,126431076,src/net.cpp
jnewbery,2017-07-10T14:11:03Z,Change comment to `Interface for message handling`,https://github.com/bitcoin/bitcoin/pull/10756#discussion_r126432093,126432093,src/net.h
jnewbery,2017-07-10T14:18:43Z,remove this line. connman is no longer a param for this function.,https://github.com/bitcoin/bitcoin/pull/10756#discussion_r126434185,126434185,src/net_processing.h
TheBlueMatt,2017-08-02T18:37:31Z,Can you drop cs_sendProcessing while you're here? Its literally entirely unused except for this lock here.,https://github.com/bitcoin/bitcoin/pull/10756#discussion_r130960169,130960169,src/net.cpp
TheBlueMatt,2017-08-02T18:58:36Z,I believe we're nullptr'ing now?,https://github.com/bitcoin/bitcoin/pull/10756#discussion_r130966042,130966042,src/net.cpp
TheBlueMatt,2017-08-02T19:00:39Z,I feel like we should just go for the direct deref here. A CConnman without a messageInterface feels like a client-of-the-API failure. Maybe just assert(messageInterface) in ::Start?,https://github.com/bitcoin/bitcoin/pull/10756#discussion_r130966566,130966566,src/net.cpp
TheBlueMatt,2017-08-02T19:01:39Z,Why did you define the constructor here?,https://github.com/bitcoin/bitcoin/pull/10756#discussion_r130966827,130966827,src/net.h
TheBlueMatt,2017-08-02T19:02:11Z,"Why do we need to make the destructor virtual? CConnman doesn't care about construction/destruction, it just takes a ptr.",https://github.com/bitcoin/bitcoin/pull/10756#discussion_r130966942,130966942,src/net.h
theuni,2017-08-02T20:35:04Z,"Sure. It's safe to drop it now, but we'd need to put it back for parallel processing.",https://github.com/bitcoin/bitcoin/pull/10756#discussion_r130988967,130988967,src/net.cpp
theuni,2017-08-02T20:35:20Z,ok,https://github.com/bitcoin/bitcoin/pull/10756#discussion_r130989034,130989034,src/net.cpp
theuni,2017-08-02T20:39:11Z,"Just a habit of mine to declare the ctor as protected for classes that should be inherited from. Since there are pure virtuals here, it's not really necessary.",https://github.com/bitcoin/bitcoin/pull/10756#discussion_r130989951,130989951,src/net.h
theuni,2017-08-02T20:46:26Z,"To make sure that the base gets cleaned up if, for example, it's stored as an abstract std::unique_ptr<NetEventsInterface>",https://github.com/bitcoin/bitcoin/pull/10756#discussion_r130991719,130991719,src/net.h
theuni,2017-08-02T20:49:26Z,"Heh, I went back and forth on this. Was waiting for someone to complain. Agreed.",https://github.com/bitcoin/bitcoin/pull/10756#discussion_r130992477,130992477,src/net.cpp
TheBlueMatt,2017-08-02T23:22:24Z,"Well my point was the CConnman (and related net stuff), which ""owns"" this interface explicitly does not do so (and does not have any desire to ever own the object), so adding anything additional to the interface feels strange to me.",https://github.com/bitcoin/bitcoin/pull/10756#discussion_r131021473,131021473,src/net.h
theuni,2017-08-03T22:49:19Z,"I must be missing your point. This is just a safety precaution in case anything ever wants to hold an abstract pointer. This may be the case if, for example, we create a vector of message processors in order to run them against each-other.\n\nI can remove it if you'd like, but I'm not understanding the objection to being cautious.",https://github.com/bitcoin/bitcoin/pull/10756#discussion_r131278418,131278418,src/net.h
TheBlueMatt,2017-08-03T23:02:26Z,"Well my objection was just that it forces you into a virtual destructor unless you remember to call derived classes final, and since I dont think anything should ever have anything other than a reference to (ie will not destruct directly) a NetEventsInterface, no need to make anything virtual. I don't care too strongly, however.",https://github.com/bitcoin/bitcoin/pull/10756#discussion_r131280159,131280159,src/net.h
TheBlueMatt,2017-08-18T00:44:34Z,"Can drop the & now for connman, can just copy (and in a few other places).",https://github.com/bitcoin/bitcoin/pull/10756#discussion_r133860799,133860799,src/net_processing.cpp
laanwj,2017-09-06T21:10:35Z,"Another global block gone, nice!",https://github.com/bitcoin/bitcoin/pull/10756#discussion_r137391363,137391363,src/net.cpp
laanwj,2017-09-06T21:12:25Z,Empty line?,https://github.com/bitcoin/bitcoin/pull/10756#discussion_r137391728,137391728,src/net.h
laanwj,2017-09-06T21:13:47Z,"Ideally we'd use a doxygen-compliant comment here, so that it shows the class description\n```\n/**\n * Interface for message handling\n */\n```",https://github.com/bitcoin/bitcoin/pull/10756#discussion_r137392017,137392017,src/net.h
theuni,2017-09-06T23:34:30Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10756#discussion_r137416275,137416275,src/net.h
theuni,2017-09-06T23:34:53Z,"I had to rebase anyway, so I went ahead and fixed these two nits as well.",https://github.com/bitcoin/bitcoin/pull/10756#discussion_r137416347,137416347,src/net.h
JeremyRubin,2017-09-07T00:50:26Z,Maybe it makes sense to mark stuff final/not be overriding an abc here? NetEventsInterface feels overkill  unless we anticipate per-connection different handlers.,https://github.com/bitcoin/bitcoin/pull/10756#discussion_r137424958,137424958,src/net_processing.h
theuni,2017-09-07T05:47:45Z,"I don't anticipate per-connection, but definitely per-connman. I have immediate plans to add different handlers and run them against each-other for testing.\n\nMaking this final is a good idea, but I'd rather not keep squashing more changes in. Let's do that in a follow up that also renames PeerLogicValidation to something that better reflects what it's doing.",https://github.com/bitcoin/bitcoin/pull/10756#discussion_r137450657,137450657,src/net_processing.h
TheBlueMatt,2017-09-07T17:52:50Z,"As discussed, peerLogic should probably get destroyed before g_connman, though g_connman needs to be stopped first (and all references to m_msgproc in CConnman need to be in threads that will be stopped or should be gated on running - OpenNetworkConnection I believe is the only current violation of this).",https://github.com/bitcoin/bitcoin/pull/10756#discussion_r137610636,137610636,src/init.cpp
