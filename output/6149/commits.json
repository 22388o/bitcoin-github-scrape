[
  {
    "sha": "27d760580456d206c5a02ef29797f296f510099c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2Q3NjA1ODA0NTZkMjA2YzVhMDJlZjI5Nzk3ZjI5NmY1MTAwOTlj",
    "commit": {
      "author": {
        "name": "Adam Weiss",
        "email": "adam@signal11.com",
        "date": "2015-05-15T19:31:14Z"
      },
      "committer": {
        "name": "Adam Weiss",
        "email": "adam@signal11.com",
        "date": "2015-07-07T01:54:31Z"
      },
      "message": "Buffer log messages and explicitly open logs\n\nPrevents stomping on debug logs in datadirs that are locked by other\ninstances and lost parameter interaction messages that can get wiped by\nShrinkDebugFile().\n\nThe log is now opened explicitly and all emitted messages are buffered\nuntil this open occurs.  The version message and log cut have also been\nmoved to the earliest possible sensible location.",
      "tree": {
        "sha": "e8e592a71e2c2149fa8a476a86532e04f18688b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8e592a71e2c2149fa8a476a86532e04f18688b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27d760580456d206c5a02ef29797f296f510099c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27d760580456d206c5a02ef29797f296f510099c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27d760580456d206c5a02ef29797f296f510099c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27d760580456d206c5a02ef29797f296f510099c/comments",
    "author": {
      "login": "ajweiss",
      "id": 430315,
      "node_id": "MDQ6VXNlcjQzMDMxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/430315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajweiss",
      "html_url": "https://github.com/ajweiss",
      "followers_url": "https://api.github.com/users/ajweiss/followers",
      "following_url": "https://api.github.com/users/ajweiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajweiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajweiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajweiss/subscriptions",
      "organizations_url": "https://api.github.com/users/ajweiss/orgs",
      "repos_url": "https://api.github.com/users/ajweiss/repos",
      "events_url": "https://api.github.com/users/ajweiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajweiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajweiss",
      "id": 430315,
      "node_id": "MDQ6VXNlcjQzMDMxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/430315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajweiss",
      "html_url": "https://github.com/ajweiss",
      "followers_url": "https://api.github.com/users/ajweiss/followers",
      "following_url": "https://api.github.com/users/ajweiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajweiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajweiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajweiss/subscriptions",
      "organizations_url": "https://api.github.com/users/ajweiss/orgs",
      "repos_url": "https://api.github.com/users/ajweiss/repos",
      "events_url": "https://api.github.com/users/ajweiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajweiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "086cb336cd8ac0b2a7ad9ff0544c014569c7db38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/086cb336cd8ac0b2a7ad9ff0544c014569c7db38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/086cb336cd8ac0b2a7ad9ff0544c014569c7db38"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 85,
      "deletions": 28
    },
    "files": [
      {
        "sha": "62d5e4dbdbfd6d6f31d4a31dc42f0a68f03a11dd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d760580456d206c5a02ef29797f296f510099c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d760580456d206c5a02ef29797f296f510099c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=27d760580456d206c5a02ef29797f296f510099c",
        "patch": "@@ -667,6 +667,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n     fLogIPs = GetBoolArg(\"-logips\", false);\n \n+    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n+    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n+\n     // when specifying an explicit binding address, you want to listen on it\n     // even when -connect or -proxy is specified\n     if (mapArgs.count(\"-bind\")) {\n@@ -909,8 +912,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #endif\n     if (GetBoolArg(\"-shrinkdebugfile\", !fDebug))\n         ShrinkDebugFile();\n-    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n-    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n+\n+    if (fPrintToDebugLog)\n+        OpenDebugLog();\n+\n     LogPrintf(\"Using OpenSSL version %s\\n\", SSLeay_version(SSLEAY_VERSION));\n #ifdef ENABLE_WALLET\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));"
      },
      {
        "sha": "634d8a7056834e97569518cc01c66e48a3847a6a",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 26,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d760580456d206c5a02ef29797f296f510099c/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d760580456d206c5a02ef29797f296f510099c/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=27d760580456d206c5a02ef29797f296f510099c",
        "patch": "@@ -167,23 +167,51 @@ instance_of_cinit;\n  */\n \n static boost::once_flag debugPrintInitFlag = BOOST_ONCE_INIT;\n+\n /**\n- * We use boost::call_once() to make sure these are initialized\n- * in a thread-safe manner the first time called:\n+ * We use boost::call_once() to make sure mutexDebugLog and\n+ * vMsgsBeforeOpenLog are initialized in a thread-safe manner.\n+ *\n+ * NOTE: fileout, mutexDebugLog and sometimes vMsgsBeforeOpenLog\n+ * are leaked on exit. This is ugly, but will be cleaned up by\n+ * the OS/libc. When the shutdown sequence is fully audited and\n+ * tested, explicit destruction of these objects can be implemented.\n  */\n static FILE* fileout = NULL;\n static boost::mutex* mutexDebugLog = NULL;\n+static list<string> *vMsgsBeforeOpenLog;\n+\n+static int FileWriteStr(const std::string &str, FILE *fp)\n+{\n+    return fwrite(str.data(), 1, str.size(), fp);\n+}\n \n static void DebugPrintInit()\n {\n-    assert(fileout == NULL);\n     assert(mutexDebugLog == NULL);\n+    mutexDebugLog = new boost::mutex();\n+    vMsgsBeforeOpenLog = new list<string>;\n+}\n+\n+void OpenDebugLog()\n+{\n+    boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n+    boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n+    assert(fileout == NULL);\n+    assert(vMsgsBeforeOpenLog);\n     boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n     fileout = fopen(pathDebug.string().c_str(), \"a\");\n     if (fileout) setbuf(fileout, NULL); // unbuffered\n \n-    mutexDebugLog = new boost::mutex();\n+    // dump buffered messages from before we opened the log\n+    while (!vMsgsBeforeOpenLog->empty()) {\n+        FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);\n+        vMsgsBeforeOpenLog->pop_front();\n+    }\n+\n+    delete vMsgsBeforeOpenLog;\n+    vMsgsBeforeOpenLog = NULL;\n }\n \n bool LogAcceptCategory(const char* category)\n@@ -215,44 +243,67 @@ bool LogAcceptCategory(const char* category)\n     return true;\n }\n \n+/**\n+ * fStartedNewLine is a state variable held by the calling context that will\n+ * suppress printing of the timestamp when multiple calls are made that don't\n+ * end in a newline. Initialize it to true, and hold it, in the calling context.\n+ */\n+static std::string LogTimestampStr(const std::string &str, bool *fStartedNewLine)\n+{\n+    string strStamped;\n+\n+    if (!fLogTimestamps)\n+        return str;\n+\n+    if (*fStartedNewLine)\n+        strStamped =  DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()) + ' ' + str;\n+    else\n+        strStamped = str;\n+\n+    if (!str.empty() && str[str.size()-1] == '\\n')\n+        *fStartedNewLine = true;\n+    else\n+        *fStartedNewLine = false;\n+\n+    return strStamped;\n+}\n+\n int LogPrintStr(const std::string &str)\n {\n     int ret = 0; // Returns total number of characters written\n+    static bool fStartedNewLine = true;\n     if (fPrintToConsole)\n     {\n         // print to console\n         ret = fwrite(str.data(), 1, str.size(), stdout);\n         fflush(stdout);\n     }\n-    else if (fPrintToDebugLog && AreBaseParamsConfigured())\n+    else if (fPrintToDebugLog)\n     {\n-        static bool fStartedNewLine = true;\n         boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n-\n-        if (fileout == NULL)\n-            return ret;\n-\n         boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n-        // reopen the log file, if requested\n-        if (fReopenDebugLog) {\n-            fReopenDebugLog = false;\n-            boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n-            if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n-                setbuf(fileout, NULL); // unbuffered\n-        }\n+        string strTimestamped = LogTimestampStr(str, &fStartedNewLine);\n \n-        // Debug print useful for profiling\n-        if (fLogTimestamps && fStartedNewLine)\n-            ret += fprintf(fileout, \"%s \", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()).c_str());\n-        if (!str.empty() && str[str.size()-1] == '\\n')\n-            fStartedNewLine = true;\n+        // buffer if we haven't opened the log yet\n+        if (fileout == NULL) {\n+            assert(vMsgsBeforeOpenLog);\n+            ret = strTimestamped.length();\n+            vMsgsBeforeOpenLog->push_back(strTimestamped);\n+        }\n         else\n-            fStartedNewLine = false;\n-\n-        ret = fwrite(str.data(), 1, str.size(), fileout);\n+        {\n+            // reopen the log file, if requested\n+            if (fReopenDebugLog) {\n+                fReopenDebugLog = false;\n+                boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n+                if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n+                    setbuf(fileout, NULL); // unbuffered\n+            }\n+\n+            ret = FileWriteStr(strTimestamped, fileout);\n+        }\n     }\n-\n     return ret;\n }\n "
      },
      {
        "sha": "afc9a378bbaf82db7da0c1fcf40f5447c5fcda1b",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d760580456d206c5a02ef29797f296f510099c/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d760580456d206c5a02ef29797f296f510099c/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=27d760580456d206c5a02ef29797f296f510099c",
        "patch": "@@ -125,6 +125,7 @@ void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map\n boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n boost::filesystem::path GetTempPath();\n+void OpenDebugLog();\n void ShrinkDebugFile();\n void runCommand(const std::string& strCommand);\n "
      }
    ]
  }
]