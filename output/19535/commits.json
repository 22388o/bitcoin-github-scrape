[
  {
    "sha": "46fe1d1a1d39030d54eeeefca181c0bd9429c90d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmZlMWQxYTFkMzkwMzBkNTRlZWVlZmNhMTgxYzBiZDk0MjljOTBk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-07-07T15:00:19Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-07-14T15:08:19Z"
      },
      "message": "Add base_blob and BaseHash data() methods\n\nHaving size() and data() methods makes these work more nicely with spans and\nmultiprocess serialization code",
      "tree": {
        "sha": "7a1928a73ac8f3ebaad99b2be466abb2a1609a31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a1928a73ac8f3ebaad99b2be466abb2a1609a31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46fe1d1a1d39030d54eeeefca181c0bd9429c90d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46fe1d1a1d39030d54eeeefca181c0bd9429c90d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46fe1d1a1d39030d54eeeefca181c0bd9429c90d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46fe1d1a1d39030d54eeeefca181c0bd9429c90d/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4de89edfa8be4501534fec0c662c650a4ce7ef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4de89edfa8be4501534fec0c662c650a4ce7ef2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4de89edfa8be4501534fec0c662c650a4ce7ef2"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 38,
      "deletions": 18
    },
    "files": [
      {
        "sha": "e5b34ad0f094b9757c50e6ac993f23d916dc9257",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46fe1d1a1d39030d54eeeefca181c0bd9429c90d/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46fe1d1a1d39030d54eeeefca181c0bd9429c90d/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=46fe1d1a1d39030d54eeeefca181c0bd9429c90d",
        "patch": "@@ -75,6 +75,16 @@ class BaseHash\n         return m_hash < other.m_hash;\n     }\n \n+    unsigned char* data()\n+    {\n+        return m_hash.data();\n+    }\n+\n+    const unsigned char* data() const\n+    {\n+        return m_hash.data();\n+    }\n+\n     size_t size() const\n     {\n         return m_hash.size();"
      },
      {
        "sha": "a5dfba41e25379d73e60d2b44d666894fc1c739f",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46fe1d1a1d39030d54eeeefca181c0bd9429c90d/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46fe1d1a1d39030d54eeeefca181c0bd9429c90d/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=46fe1d1a1d39030d54eeeefca181c0bd9429c90d",
        "patch": "@@ -12,20 +12,20 @@\n template <unsigned int BITS>\n base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)\n {\n-    assert(vch.size() == sizeof(data));\n-    memcpy(data, vch.data(), sizeof(data));\n+    assert(vch.size() == sizeof(m_data));\n+    memcpy(m_data, vch.data(), sizeof(m_data));\n }\n \n template <unsigned int BITS>\n std::string base_blob<BITS>::GetHex() const\n {\n-    return HexStr(std::reverse_iterator<const uint8_t*>(data + sizeof(data)), std::reverse_iterator<const uint8_t*>(data));\n+    return HexStr(std::reverse_iterator<const uint8_t*>(m_data + sizeof(m_data)), std::reverse_iterator<const uint8_t*>(m_data));\n }\n \n template <unsigned int BITS>\n void base_blob<BITS>::SetHex(const char* psz)\n {\n-    memset(data, 0, sizeof(data));\n+    memset(m_data, 0, sizeof(m_data));\n \n     // skip leading spaces\n     while (IsSpace(*psz))\n@@ -39,7 +39,7 @@ void base_blob<BITS>::SetHex(const char* psz)\n     size_t digits = 0;\n     while (::HexDigit(psz[digits]) != -1)\n         digits++;\n-    unsigned char* p1 = (unsigned char*)data;\n+    unsigned char* p1 = (unsigned char*)m_data;\n     unsigned char* pend = p1 + WIDTH;\n     while (digits > 0 && p1 < pend) {\n         *p1 = ::HexDigit(psz[--digits]);"
      },
      {
        "sha": "096a88c724496d58599e1ac2df78b74602100131",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 23,
        "deletions": 13,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46fe1d1a1d39030d54eeeefca181c0bd9429c90d/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46fe1d1a1d39030d54eeeefca181c0bd9429c90d/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=46fe1d1a1d39030d54eeeefca181c0bd9429c90d",
        "patch": "@@ -18,29 +18,29 @@ class base_blob\n {\n protected:\n     static constexpr int WIDTH = BITS / 8;\n-    uint8_t data[WIDTH];\n+    uint8_t m_data[WIDTH];\n public:\n     base_blob()\n     {\n-        memset(data, 0, sizeof(data));\n+        memset(m_data, 0, sizeof(m_data));\n     }\n \n     explicit base_blob(const std::vector<unsigned char>& vch);\n \n     bool IsNull() const\n     {\n         for (int i = 0; i < WIDTH; i++)\n-            if (data[i] != 0)\n+            if (m_data[i] != 0)\n                 return false;\n         return true;\n     }\n \n     void SetNull()\n     {\n-        memset(data, 0, sizeof(data));\n+        memset(m_data, 0, sizeof(m_data));\n     }\n \n-    inline int Compare(const base_blob& other) const { return memcmp(data, other.data, sizeof(data)); }\n+    inline int Compare(const base_blob& other) const { return memcmp(m_data, other.m_data, sizeof(m_data)); }\n \n     friend inline bool operator==(const base_blob& a, const base_blob& b) { return a.Compare(b) == 0; }\n     friend inline bool operator!=(const base_blob& a, const base_blob& b) { return a.Compare(b) != 0; }\n@@ -53,32 +53,42 @@ class base_blob\n \n     unsigned char* begin()\n     {\n-        return &data[0];\n+        return &m_data[0];\n     }\n \n     unsigned char* end()\n     {\n-        return &data[WIDTH];\n+        return &m_data[WIDTH];\n     }\n \n     const unsigned char* begin() const\n     {\n-        return &data[0];\n+        return &m_data[0];\n     }\n \n     const unsigned char* end() const\n     {\n-        return &data[WIDTH];\n+        return &m_data[WIDTH];\n+    }\n+\n+    unsigned char* data()\n+    {\n+        return &m_data[0];\n+    }\n+\n+    const unsigned char* data() const\n+    {\n+        return &m_data[0];\n     }\n \n     unsigned int size() const\n     {\n-        return sizeof(data);\n+        return sizeof(m_data);\n     }\n \n     uint64_t GetUint64(int pos) const\n     {\n-        const uint8_t* ptr = data + pos * 8;\n+        const uint8_t* ptr = m_data + pos * 8;\n         return ((uint64_t)ptr[0]) | \\\n                ((uint64_t)ptr[1]) << 8 | \\\n                ((uint64_t)ptr[2]) << 16 | \\\n@@ -92,13 +102,13 @@ class base_blob\n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        s.write((char*)data, sizeof(data));\n+        s.write((char*)m_data, sizeof(m_data));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream& s)\n     {\n-        s.read((char*)data, sizeof(data));\n+        s.read((char*)m_data, sizeof(m_data));\n     }\n };\n "
      }
    ]
  }
]