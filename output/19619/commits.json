[
  {
    "sha": "288b4ffb6b291f0466d513ff3c40af6758ca7c88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODhiNGZmYjZiMjkxZjA0NjZkNTEzZmYzYzQwYWY2NzU4Y2E3Yzg4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-07-28T23:25:14Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-09-03T16:24:32Z"
      },
      "message": "Remove WalletLocation class\n\nThis removes a source of complexity and indirection that makes it harder to\nunderstand path checking code. Path checks will be simplified in upcoming\ncommits.\n\nThere is no change in behavior in this commit other than a slightly more\ndescriptive error message in `loadwallet` if the default \"\" wallet can't be\nfound. (The error message is improved more in upcoming commit \"wallet: Remove\npath checking code from loadwallet RPC\".)",
      "tree": {
        "sha": "f8a6f5d532a5fca1f3229a4949165eef70ce5220",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8a6f5d532a5fca1f3229a4949165eef70ce5220"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/288b4ffb6b291f0466d513ff3c40af6758ca7c88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/288b4ffb6b291f0466d513ff3c40af6758ca7c88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/288b4ffb6b291f0466d513ff3c40af6758ca7c88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/288b4ffb6b291f0466d513ff3c40af6758ca7c88/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0a422c34cfd6514d0cc445bd784d3ee1a2d1749",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0a422c34cfd6514d0cc445bd784d3ee1a2d1749",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0a422c34cfd6514d0cc445bd784d3ee1a2d1749"
      }
    ],
    "stats": {
      "total": 208,
      "additions": 86,
      "deletions": 122
    },
    "files": [
      {
        "sha": "99aafd8dfc73eb3c43f69e6dc95c7109cb8fee3b",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -31,7 +31,7 @@ static void CoinSelection(benchmark::Bench& bench)\n {\n     NodeContext node;\n     auto chain = interfaces::MakeChain(node);\n-    CWallet wallet(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+    CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n     wallet.SetupLegacyScriptPubKeyMan();\n     std::vector<std::unique_ptr<CWalletTx>> wtxs;\n     LOCK(wallet.cs_wallet);\n@@ -65,7 +65,7 @@ static void CoinSelection(benchmark::Bench& bench)\n typedef std::set<CInputCoin> CoinSet;\n static NodeContext testNode;\n static auto testChain = interfaces::MakeChain(testNode);\n-static CWallet testWallet(testChain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+static CWallet testWallet(testChain.get(), \"\", CreateDummyWalletDatabase());\n std::vector<std::unique_ptr<CWalletTx>> wtxn;\n \n // Copied from src/wallet/test/coinselector_tests.cpp"
      },
      {
        "sha": "b3b73284d88565e4fa1bc1af39f41cb79a8dcc3e",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -26,7 +26,7 @@ static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const b\n \n     NodeContext node;\n     std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(node);\n-    CWallet wallet{chain.get(), WalletLocation(), CreateMockWalletDatabase()};\n+    CWallet wallet{chain.get(), \"\", CreateMockWalletDatabase()};\n     {\n         wallet.SetupLegacyScriptPubKeyMan();\n         bool first_run;"
      },
      {
        "sha": "d17110a0f6af2cd25279acf46c011ff9958f547c",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -522,7 +522,7 @@ class WalletClientImpl : public WalletClient\n     }\n     std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) override\n     {\n-        return MakeWallet(LoadWallet(*m_context.chain, WalletLocation(name), true /* load_on_start */, error, warnings));\n+        return MakeWallet(LoadWallet(*m_context.chain, name, true /* load_on_start */, error, warnings));\n     }\n     std::string getWalletDir() override\n     {"
      },
      {
        "sha": "35fcb2b0ca67cb66e65f5300c267cb3b84a85495",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -61,7 +61,7 @@ void TestAddAddressesToSendBook(interfaces::Node& node)\n {\n     TestChain100Setup test;\n     node.setContext(&test.m_node);\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), CreateMockWalletDatabase());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n     wallet->SetupLegacyScriptPubKeyMan();\n     bool firstRun;\n     wallet->LoadWallet(firstRun);"
      },
      {
        "sha": "d6d2d0e3dfd51eb9f1fe49da6456630099e00e16",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -139,7 +139,7 @@ void TestGUI(interfaces::Node& node)\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n     node.setContext(&test.m_node);\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), CreateMockWalletDatabase());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n     {"
      },
      {
        "sha": "dde29842ecc5734839db8df7ef1fcf232a259196",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <wallet/load.h>\n \n+#include <fs.h>\n #include <interfaces/chain.h>\n #include <scheduler.h>\n #include <util/string.h>\n@@ -44,16 +45,16 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n     std::set<fs::path> wallet_paths;\n \n     for (const auto& wallet_file : wallet_files) {\n-        WalletLocation location(wallet_file);\n+        const fs::path path = fs::absolute(wallet_file, GetWalletDir());\n \n-        if (!wallet_paths.insert(location.GetPath()).second) {\n+        if (!wallet_paths.insert(path).second) {\n             chain.initError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n             return false;\n         }\n \n         bilingual_str error_string;\n         std::vector<bilingual_str> warnings;\n-        bool verify_success = CWallet::Verify(chain, location, error_string, warnings);\n+        bool verify_success = CWallet::Verify(chain, wallet_file, error_string, warnings);\n         if (!warnings.empty()) chain.initWarning(Join(warnings, Untranslated(\"\\n\")));\n         if (!verify_success) {\n             chain.initError(error_string);\n@@ -70,7 +71,7 @@ bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& walle\n         for (const std::string& walletFile : wallet_files) {\n             bilingual_str error;\n             std::vector<bilingual_str> warnings;\n-            std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, WalletLocation(walletFile), error, warnings);\n+            std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, walletFile, error, warnings);\n             if (!warnings.empty()) chain.initWarning(Join(warnings, Untranslated(\"\\n\")));\n             if (!pwallet) {\n                 chain.initError(error);"
      },
      {
        "sha": "312b3455186052dc9b1cc7759a22011c8365bfd1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -2502,22 +2502,23 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n             }.Check(request);\n \n     WalletContext& context = EnsureWalletContext(request.context);\n-    WalletLocation location(request.params[0].get_str());\n+    const std::string name(request.params[0].get_str());\n+    fs::path path(fs::absolute(name, GetWalletDir()));\n \n-    if (!location.Exists()) {\n-        throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Wallet \" + location.GetName() + \" not found.\");\n-    } else if (fs::is_directory(location.GetPath())) {\n+    if (fs::symlink_status(path).type() == fs::file_not_found) {\n+        throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Wallet \" + name + \" not found.\");\n+    } else if (fs::is_directory(path)) {\n         // The given filename is a directory. Check that there's a wallet.dat file.\n-        fs::path wallet_dat_file = location.GetPath() / \"wallet.dat\";\n+        fs::path wallet_dat_file = path / \"wallet.dat\";\n         if (fs::symlink_status(wallet_dat_file).type() == fs::file_not_found) {\n-            throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Directory \" + location.GetName() + \" does not contain a wallet.dat file.\");\n+            throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Directory \" + name + \" does not contain a wallet.dat file.\");\n         }\n     }\n \n     bilingual_str error;\n     std::vector<bilingual_str> warnings;\n     Optional<bool> load_on_start = request.params[1].isNull() ? nullopt : Optional<bool>(request.params[1].get_bool());\n-    std::shared_ptr<CWallet> const wallet = LoadWallet(*context.chain, location, load_on_start, error, warnings);\n+    std::shared_ptr<CWallet> const wallet = LoadWallet(*context.chain, name, load_on_start, error, warnings);\n     if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n \n     UniValue obj(UniValue::VOBJ);"
      },
      {
        "sha": "96fba21339897af99c16ee302db5309c6db33089",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -123,7 +123,7 @@ bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::v\n     }\n \n     DbTxn* ptxn = env->TxnBegin();\n-    CWallet dummyWallet(nullptr, WalletLocation(), CreateDummyWalletDatabase());\n+    CWallet dummyWallet(nullptr, \"\", CreateDummyWalletDatabase());\n     for (KeyValPair& row : salvagedData)\n     {\n         /* Filter for only private key type KV pairs to be added to the salvaged wallet */"
      },
      {
        "sha": "f38ccba38447d4f72097d954a4e644c1f8453eed",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -29,7 +29,7 @@ typedef std::set<CInputCoin> CoinSet;\n static std::vector<COutput> vCoins;\n static NodeContext testNode;\n static auto testChain = interfaces::MakeChain(testNode);\n-static CWallet testWallet(testChain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+static CWallet testWallet(testChain.get(), \"\", CreateDummyWalletDatabase());\n static CAmount balance = 0;\n \n CoinEligibilityFilter filter_standard(1, 6, 0);\n@@ -283,7 +283,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     // Make sure that can use BnB when there are preset inputs\n     empty_wallet();\n     {\n-        std::unique_ptr<CWallet> wallet = MakeUnique<CWallet>(m_chain.get(), WalletLocation(), CreateMockWalletDatabase());\n+        std::unique_ptr<CWallet> wallet = MakeUnique<CWallet>(m_chain.get(), \"\", CreateMockWalletDatabase());\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         wallet->SetupLegacyScriptPubKeyMan();"
      },
      {
        "sha": "d5aed99d9983f9aed5f5ec5b577a974bb50a9a95",
        "filename": "src/wallet/test/ismine_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/test/ismine_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/test/ismine_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/ismine_tests.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -35,7 +35,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PK compressed\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n@@ -52,7 +52,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PK uncompressed\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n@@ -69,7 +69,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PKH compressed\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForDestination(PKHash(pubkeys[0]));\n@@ -86,7 +86,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PKH uncompressed\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForDestination(PKHash(uncompressedPubkey));\n@@ -103,7 +103,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2SH\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -127,7 +127,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // (P2PKH inside) P2SH inside P2SH (invalid)\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -145,7 +145,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // (P2PKH inside) P2SH inside P2WSH (invalid)\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -163,7 +163,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WPKH inside P2WSH (invalid)\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -179,7 +179,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // (P2PKH inside) P2WSH inside P2WSH (invalid)\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -197,7 +197,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WPKH compressed\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -212,7 +212,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WPKH uncompressed\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n@@ -231,7 +231,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // scriptPubKey multisig\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -262,7 +262,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2SH multisig\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n@@ -283,7 +283,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WSH multisig with compressed keys\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -309,7 +309,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WSH multisig with uncompressed key\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n@@ -335,7 +335,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WSH multisig wrapped in P2SH\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -362,7 +362,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // OP_RETURN\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -376,7 +376,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // witness unspendable\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -390,7 +390,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // witness unknown\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -404,7 +404,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // Nonstandard\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet keystore(chain.get(), \"\", CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));"
      },
      {
        "sha": "f7c1337b0dd07d62f814357ce9b08d1b81ebda35",
        "filename": "src/wallet/test/scriptpubkeyman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/test/scriptpubkeyman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/test/scriptpubkeyman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/scriptpubkeyman_tests.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -19,7 +19,7 @@ BOOST_AUTO_TEST_CASE(CanProvide)\n     // Set up wallet and keyman variables.\n     NodeContext node;\n     std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(node);\n-    CWallet wallet(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+    CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n     LegacyScriptPubKeyMan& keyman = *wallet.GetOrCreateLegacyScriptPubKeyMan();\n \n     // Make a 1 of 2 multisig script"
      },
      {
        "sha": "4d6f42761839c17ada291897f3ef61364c59b4b4",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -6,7 +6,7 @@\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName)\n     : TestingSetup(chainName),\n-      m_wallet(m_chain.get(), WalletLocation(), CreateMockWalletDatabase())\n+      m_wallet(m_chain.get(), \"\", CreateMockWalletDatabase())\n {\n     bool fFirstRun;\n     m_wallet.LoadWallet(fFirstRun);"
      },
      {
        "sha": "b3001efd55db429211a7047fcf9ae69a455d7c08",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -39,7 +39,7 @@ static std::shared_ptr<CWallet> TestLoadWallet(interfaces::Chain& chain)\n {\n     bilingual_str error;\n     std::vector<bilingual_str> warnings;\n-    auto wallet = CWallet::CreateWalletFromFile(chain, WalletLocation(\"\"), error, warnings);\n+    auto wallet = CWallet::CreateWalletFromFile(chain, \"\", error, warnings);\n     wallet->postInitProcess();\n     return wallet;\n }\n@@ -85,7 +85,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n \n     // Verify ScanForWalletTransactions fails to read an unknown start block.\n     {\n-        CWallet wallet(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -104,7 +104,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n     {\n-        CWallet wallet(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -130,7 +130,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // Verify ScanForWalletTransactions only picks transactions in the new block\n     // file.\n     {\n-        CWallet wallet(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -155,7 +155,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n \n     // Verify ScanForWalletTransactions scans no blocks.\n     {\n-        CWallet wallet(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -194,7 +194,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n     // before the missing block, and success for a key whose creation time is\n     // after.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), \"\", CreateDummyWalletDatabase());\n         wallet->SetupLegacyScriptPubKeyMan();\n         WITH_LOCK(wallet->cs_wallet, wallet->SetLastBlockProcessed(newTip->nHeight, newTip->GetBlockHash()));\n         AddWallet(wallet);\n@@ -259,7 +259,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n             LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n@@ -281,7 +281,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n     // were scanned, and no prior blocks were scanned.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), \"\", CreateDummyWalletDatabase());\n         LOCK(wallet->cs_wallet);\n         wallet->SetupLegacyScriptPubKeyMan();\n \n@@ -317,7 +317,7 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     NodeContext node;\n     auto chain = interfaces::MakeChain(node);\n \n-    CWallet wallet(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+    CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n     auto spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n \n@@ -492,7 +492,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        wallet = MakeUnique<CWallet>(m_chain.get(), WalletLocation(), CreateMockWalletDatabase());\n+        wallet = MakeUnique<CWallet>(m_chain.get(), \"\", CreateMockWalletDatabase());\n         {\n             LOCK2(wallet->cs_wallet, ::cs_main);\n             wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -610,7 +610,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n     NodeContext node;\n     auto chain = interfaces::MakeChain(node);\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), \"\", CreateDummyWalletDatabase());\n     wallet->SetupLegacyScriptPubKeyMan();\n     wallet->SetMinVersion(FEATURE_LATEST);\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);"
      },
      {
        "sha": "43dbd48262d032a2bff7b745dd80235294cfa32e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -200,15 +200,15 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n }\n \n namespace {\n-std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const WalletLocation& location, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     try {\n-        if (!CWallet::Verify(chain, location, error, warnings)) {\n+        if (!CWallet::Verify(chain, name, error, warnings)) {\n             error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n             return nullptr;\n         }\n \n-        std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, error, warnings);\n+        std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, name, error, warnings);\n         if (!wallet) {\n             error = Untranslated(\"Wallet loading failed.\") + Untranslated(\" \") + error;\n             return nullptr;\n@@ -217,7 +217,7 @@ std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const Wall\n         wallet->postInitProcess();\n \n         // Write the wallet setting\n-        UpdateWalletSetting(chain, location.GetName(), load_on_start, warnings);\n+        UpdateWalletSetting(chain, name, load_on_start, warnings);\n \n         return wallet;\n     } catch (const std::runtime_error& e) {\n@@ -227,14 +227,14 @@ std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const Wall\n }\n } // namespace\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n-    auto result = WITH_LOCK(g_loading_wallet_mutex, return g_loading_wallet_set.insert(location.GetName()));\n+    auto result = WITH_LOCK(g_loading_wallet_mutex, return g_loading_wallet_set.insert(name));\n     if (!result.second) {\n         error = Untranslated(\"Wallet already being loading.\");\n         return nullptr;\n     }\n-    auto wallet = LoadWalletInternal(chain, location, load_on_start, error, warnings);\n+    auto wallet = LoadWalletInternal(chain, name, load_on_start, error, warnings);\n     WITH_LOCK(g_loading_wallet_mutex, g_loading_wallet_set.erase(result.first));\n     return wallet;\n }\n@@ -250,14 +250,13 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     }\n \n     // Check the wallet file location\n-    WalletLocation location(name);\n-    if (location.Exists()) {\n-        error = strprintf(Untranslated(\"Wallet %s already exists.\"), location.GetName());\n+    if (fs::symlink_status(fs::absolute(name.empty() ? \"wallet.dat\" : name, GetWalletDir())).type() != fs::file_not_found) {\n+        error = strprintf(Untranslated(\"Wallet %s already exists.\"), name);\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n \n     // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n-    if (!CWallet::Verify(chain, location, error, warnings)) {\n+    if (!CWallet::Verify(chain, name, error, warnings)) {\n         error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n@@ -269,7 +268,7 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     }\n \n     // Make the wallet\n-    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, error, warnings, wallet_creation_flags);\n+    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, name, error, warnings, wallet_creation_flags);\n     if (!wallet) {\n         error = Untranslated(\"Wallet creation failed.\") + Untranslated(\" \") + error;\n         return WalletCreationStatus::CREATION_FAILED;\n@@ -3770,7 +3769,7 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error_string, std::vector<bilingual_str>& warnings)\n+bool CWallet::Verify(interfaces::Chain& chain, const std::string& name, bilingual_str& error_string, std::vector<bilingual_str>& warnings)\n {\n     // Do some checking on wallet path. It should be either a:\n     //\n@@ -3779,22 +3778,22 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n     // 3. Path to a symlink to a directory.\n     // 4. For backwards compatibility, the name of a data file in -walletdir.\n     LOCK(cs_wallets);\n-    const fs::path& wallet_path = location.GetPath();\n+    const fs::path& wallet_path = fs::absolute(name, GetWalletDir());\n     fs::file_type path_type = fs::symlink_status(wallet_path).type();\n     if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n           (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n-          (path_type == fs::regular_file && fs::path(location.GetName()).filename() == location.GetName()))) {\n+          (path_type == fs::regular_file && fs::path(name).filename() == name))) {\n         error_string = Untranslated(strprintf(\n               \"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n               \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n               \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\",\n-              location.GetName(), GetWalletDir()));\n+              name, GetWalletDir()));\n         return false;\n     }\n \n     // Make sure that the wallet path doesn't clash with an existing wallet path\n     if (IsWalletLoaded(wallet_path)) {\n-        error_string = Untranslated(strprintf(\"Error loading wallet %s. Duplicate -wallet filename specified.\", location.GetName()));\n+        error_string = Untranslated(strprintf(\"Error loading wallet %s. Duplicate -wallet filename specified.\", name));\n         return false;\n     }\n \n@@ -3804,22 +3803,23 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n     try {\n         return database->Verify(error_string);\n     } catch (const fs::filesystem_error& e) {\n-        error_string = Untranslated(strprintf(\"Error loading wallet %s. %s\", location.GetName(), fsbridge::get_filesystem_error_message(e)));\n+        error_string = Untranslated(strprintf(\"Error loading wallet %s. %s\", name, fsbridge::get_filesystem_error_message(e)));\n         return false;\n     }\n }\n \n-std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags)\n+std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags)\n {\n-    const std::string walletFile = WalletDataFilePath(location.GetPath()).string();\n+    fs::path path = fs::absolute(name, GetWalletDir());\n+    const std::string walletFile = WalletDataFilePath(path).string();\n \n     chain.initMessage(_(\"Loading wallet...\").translated);\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n-    std::shared_ptr<CWallet> walletInstance(new CWallet(&chain, location, CreateWalletDatabase(location.GetPath())), ReleaseWallet);\n+    std::shared_ptr<CWallet> walletInstance(new CWallet(&chain, name, CreateWalletDatabase(path)), ReleaseWallet);\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DBErrors::LOAD_OK) {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {"
      },
      {
        "sha": "9c04873c5b01f00ec4d1181b2f0793a4ecb91e87",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -54,7 +54,7 @@ bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on\n bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on_start);\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings);\n std::unique_ptr<interfaces::Handler> HandleLoadWallet(LoadWalletFn load_wallet);\n \n enum class WalletCreationStatus {\n@@ -700,8 +700,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     /** Interface for accessing chain state. */\n     interfaces::Chain* m_chain;\n \n-    /** Wallet location which includes wallet name (see WalletLocation). */\n-    WalletLocation m_location;\n+    /** Wallet name: relative directory name or \"\" for default wallet. */\n+    std::string m_name;\n \n     /** Internal database handle. */\n     std::unique_ptr<WalletDatabase> database;\n@@ -755,20 +755,18 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet,\n                     const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params, bool& bnb_used) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    const WalletLocation& GetLocation() const { return m_location; }\n-\n     /** Get a name for this wallet for logging/debugging purposes.\n      */\n-    const std::string& GetName() const { return m_location.GetName(); }\n+    const std::string& GetName() const { return m_name; }\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID = 0;\n \n     /** Construct wallet with specified name and database implementation. */\n-    CWallet(interfaces::Chain* chain, const WalletLocation& location, std::unique_ptr<WalletDatabase> database)\n+    CWallet(interfaces::Chain* chain, const std::string& name, std::unique_ptr<WalletDatabase> database)\n         : m_chain(chain),\n-          m_location(location),\n+          m_name(name),\n           database(std::move(database))\n     {\n     }\n@@ -1154,10 +1152,10 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     //! Verify wallet naming and perform salvage on the wallet if required\n-    static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error_string, std::vector<bilingual_str>& warnings);\n+    static bool Verify(interfaces::Chain& chain, const std::string& name, bilingual_str& error_string, std::vector<bilingual_str>& warnings);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags = 0);\n+    static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags = 0);\n \n     /**\n      * Wallet post-init setup"
      },
      {
        "sha": "abd5652fe74fb1b98a346ced710d5e36e508a293",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -28,7 +28,7 @@ static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::\n         return nullptr;\n     }\n     // dummy chain interface\n-    std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, WalletLocation(name), CreateWalletDatabase(path)), WalletToolReleaseWallet);\n+    std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, name, CreateWalletDatabase(path)), WalletToolReleaseWallet);\n     LOCK(wallet_instance->cs_wallet);\n     bool first_run = true;\n     DBErrors load_wallet_ret = wallet_instance->LoadWallet(first_run);\n@@ -57,7 +57,7 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n     }\n \n     // dummy chain interface\n-    std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, WalletLocation(name), CreateWalletDatabase(path)), WalletToolReleaseWallet);\n+    std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, name, CreateWalletDatabase(path)), WalletToolReleaseWallet);\n     DBErrors load_wallet_ret;\n     try {\n         bool first_run;"
      },
      {
        "sha": "d6a8ee9e023f2cfa5ee3d3a0f4f6ba6e05510068",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -91,19 +91,3 @@ std::vector<fs::path> ListWalletDir()\n \n     return paths;\n }\n-\n-WalletLocation::WalletLocation(const std::string& name)\n-    : m_name(name)\n-    , m_path(fs::absolute(name, GetWalletDir()))\n-{\n-}\n-\n-bool WalletLocation::Exists() const\n-{\n-    fs::path path = m_path;\n-    // For the default wallet, check specifically for the wallet.dat file\n-    if (m_name.empty()) {\n-        path = fs::absolute(\"wallet.dat\", m_path);\n-    }\n-    return fs::symlink_status(path).type() != fs::file_not_found;\n-}"
      },
      {
        "sha": "afdcb2e18a091d8437ed5b569355f6c9d0d3d1b0",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288b4ffb6b291f0466d513ff3c40af6758ca7c88/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "patch": "@@ -67,26 +67,6 @@ fs::path GetWalletDir();\n //! Get wallets in wallet directory.\n std::vector<fs::path> ListWalletDir();\n \n-//! The WalletLocation class provides wallet information.\n-class WalletLocation final\n-{\n-    std::string m_name;\n-    fs::path m_path;\n-\n-public:\n-    explicit WalletLocation() {}\n-    explicit WalletLocation(const std::string& name);\n-\n-    //! Get wallet name.\n-    const std::string& GetName() const { return m_name; }\n-\n-    //! Get wallet absolute path.\n-    const fs::path& GetPath() const { return m_path; }\n-\n-    //! Return whether the wallet exists.\n-    bool Exists() const;\n-};\n-\n /** Descriptor with some wallet metadata */\n class WalletDescriptor\n {"
      }
    ]
  },
  {
    "sha": "b5b414151af32e5a07b5757b64482d77519d77c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWI0MTQxNTFhZjMyZTVhMDdiNTc1N2I2NDQ4MmQ3NzUxOWQ3N2Mw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-08-04T20:40:31Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-09-03T16:24:32Z"
      },
      "message": "wallet: Add MakeDatabase function\n\nNew function is not currently called but will be called in upcoming commits. It\nmoves database path checking, and existence checking, and already-loaded\nchecking, and verification into a single function so this logic does not need\nto be repeated all over higher level wallet code, and so higher level code does\nnot need to change when SQLite support is added in\nhttps://github.com/bitcoin/bitcoin/pull/19077. This also lets higher level\nwallet code make fewer assumptions about the contents of wallet directories.\n\nThis commit just adds the new function and does not change behavior in any way.",
      "tree": {
        "sha": "c6149426f3c4e7c72507db59d59b62d2ecb774b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6149426f3c4e7c72507db59d59b62d2ecb774b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5b414151af32e5a07b5757b64482d77519d77c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5b414151af32e5a07b5757b64482d77519d77c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5b414151af32e5a07b5757b64482d77519d77c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5b414151af32e5a07b5757b64482d77519d77c0/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/288b4ffb6b291f0466d513ff3c40af6758ca7c88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/288b4ffb6b291f0466d513ff3c40af6758ca7c88"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 103,
      "deletions": 1
    },
    "files": [
      {
        "sha": "61463aaf5e4434769bf23c21b131f4082781afd3",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5b414151af32e5a07b5757b64482d77519d77c0/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5b414151af32e5a07b5757b64482d77519d77c0/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=b5b414151af32e5a07b5757b64482d77519d77c0",
        "patch": "@@ -824,3 +824,35 @@ std::unique_ptr<DatabaseBatch> BerkeleyDatabase::MakeBatch(const char* mode, boo\n {\n     return MakeUnique<BerkeleyBatch>(*this, mode, flush_on_close);\n }\n+\n+bool ExistsBerkeleyDatabase(const fs::path& path)\n+{\n+    fs::path env_directory;\n+    std::string data_filename;\n+    SplitWalletPath(path, env_directory, data_filename);\n+    return IsBerkeleyBtree(env_directory / data_filename);\n+}\n+\n+std::unique_ptr<BerkeleyDatabase> MakeBerkeleyDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n+{\n+    std::unique_ptr<BerkeleyDatabase> db;\n+    {\n+        LOCK(cs_db); // Lock env.m_databases until insert in BerkeleyDatabase constructor\n+        std::string data_filename;\n+        std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(path, data_filename);\n+        if (env->m_databases.count(data_filename)) {\n+            error = Untranslated(strprintf(\"Refusing to load database. Data file '%s' is already loaded.\", (env->Directory() / data_filename).string()));\n+            status = DatabaseStatus::FAILED_ALREADY_LOADED;\n+            return nullptr;\n+        }\n+        db = MakeUnique<BerkeleyDatabase>(std::move(env), std::move(data_filename));\n+    }\n+\n+    if (options.verify && !db->Verify(error)) {\n+        status = DatabaseStatus::FAILED_VERIFY;\n+        return nullptr;\n+    }\n+\n+    status = DatabaseStatus::SUCCESS;\n+    return db;\n+}"
      },
      {
        "sha": "82ad136649e3b73a3ccbaa700aace36593b17786",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5b414151af32e5a07b5757b64482d77519d77c0/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5b414151af32e5a07b5757b64482d77519d77c0/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=b5b414151af32e5a07b5757b64482d77519d77c0",
        "patch": "@@ -90,6 +90,9 @@ std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, s\n /** Return whether a BDB wallet database is currently loaded. */\n bool IsBDBWalletLoaded(const fs::path& wallet_path);\n \n+/** Check format of database file */\n+bool IsBerkeleyBtree(const fs::path& path);\n+\n class BerkeleyBatch;\n \n /** An instance of this class represents one database.\n@@ -224,4 +227,10 @@ class BerkeleyBatch : public DatabaseBatch\n \n std::string BerkeleyDatabaseVersion();\n \n+//! Check if Berkeley database exists at specified path.\n+bool ExistsBerkeleyDatabase(const fs::path& path);\n+\n+//! Return object giving access to Berkeley database at specified path.\n+std::unique_ptr<BerkeleyDatabase> MakeBerkeleyDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\n+\n #endif // BITCOIN_WALLET_BDB_H"
      },
      {
        "sha": "f0f6f03c4377e382275f038485faec41c4d21b4a",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5b414151af32e5a07b5757b64482d77519d77c0/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5b414151af32e5a07b5757b64482d77519d77c0/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=b5b414151af32e5a07b5757b64482d77519d77c0",
        "patch": "@@ -195,4 +195,26 @@ class DummyDatabase : public WalletDatabase\n     std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override { return MakeUnique<DummyBatch>(); }\n };\n \n+enum class DatabaseFormat {\n+    BERKELEY,\n+};\n+\n+struct DatabaseOptions {\n+    bool require_existing = false;\n+    bool require_create = false;\n+    bool verify = true;\n+};\n+\n+enum class DatabaseStatus {\n+    SUCCESS,\n+    FAILED_BAD_PATH,\n+    FAILED_BAD_FORMAT,\n+    FAILED_ALREADY_LOADED,\n+    FAILED_ALREADY_EXISTS,\n+    FAILED_NOT_FOUND,\n+    FAILED_VERIFY,\n+};\n+\n+std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\n+\n #endif // BITCOIN_WALLET_DB_H"
      },
      {
        "sha": "23c4b6977794a6aec5f40ca88107de8ade1eeaa0",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5b414151af32e5a07b5757b64482d77519d77c0/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5b414151af32e5a07b5757b64482d77519d77c0/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b5b414151af32e5a07b5757b64482d77519d77c0",
        "patch": "@@ -13,6 +13,8 @@\n #include <util/bip32.h>\n #include <util/system.h>\n #include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/bdb.h>\n #include <wallet/wallet.h>\n \n #include <atomic>\n@@ -993,6 +995,43 @@ bool WalletBatch::TxnAbort()\n     return m_batch->TxnAbort();\n }\n \n+std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n+{\n+    bool exists;\n+    try {\n+        exists = fs::symlink_status(path).type() != fs::file_not_found;\n+    } catch (const fs::filesystem_error& e) {\n+        error = Untranslated(strprintf(\"Failed to access database path '%s': %s\", path.string(), fsbridge::get_filesystem_error_message(e)));\n+        status = DatabaseStatus::FAILED_BAD_PATH;\n+        return nullptr;\n+    }\n+\n+    Optional<DatabaseFormat> format;\n+    if (exists) {\n+        if (ExistsBerkeleyDatabase(path)) {\n+            format = DatabaseFormat::BERKELEY;\n+        }\n+    } else if (options.require_existing) {\n+        error = Untranslated(strprintf(\"Failed to load database path '%s'. Path does not exist.\", path.string()));\n+        status = DatabaseStatus::FAILED_NOT_FOUND;\n+        return nullptr;\n+    }\n+\n+    if (!format && options.require_existing) {\n+        error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is not in recognized format.\", path.string()));\n+        status = DatabaseStatus::FAILED_BAD_FORMAT;\n+        return nullptr;\n+    }\n+\n+    if (format && options.require_create) {\n+        error = Untranslated(strprintf(\"Failed to create database path '%s'. Database already exists.\", path.string()));\n+        status = DatabaseStatus::FAILED_ALREADY_EXISTS;\n+        return nullptr;\n+    }\n+\n+    return MakeBerkeleyDatabase(path, options, status, error);\n+}\n+\n bool IsWalletLoaded(const fs::path& wallet_path)\n {\n     return IsBDBWalletLoaded(wallet_path);"
      },
      {
        "sha": "e4c72aed987717346caf566e9904ca387add3c73",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5b414151af32e5a07b5757b64482d77519d77c0/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5b414151af32e5a07b5757b64482d77519d77c0/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=b5b414151af32e5a07b5757b64482d77519d77c0",
        "patch": "@@ -29,7 +29,7 @@ fs::path GetWalletDir()\n     return path;\n }\n \n-static bool IsBerkeleyBtree(const fs::path& path)\n+bool IsBerkeleyBtree(const fs::path& path)\n {\n     if (!fs::exists(path)) return false;\n "
      }
    ]
  },
  {
    "sha": "0d94e6062547f288a75921d2433458a44a5f2297",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDk0ZTYwNjI1NDdmMjg4YTc1OTIxZDI0MzM0NThhNDRhNWYyMjk3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-08-04T21:55:13Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-09-03T16:24:32Z"
      },
      "message": "refactor: Use DatabaseStatus and DatabaseOptions types\n\nNo changes in behavior. Just replaces arguments and return types",
      "tree": {
        "sha": "cabcf5f08e3924b8f7e8a89a318e7d579ecca760",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cabcf5f08e3924b8f7e8a89a318e7d579ecca760"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d94e6062547f288a75921d2433458a44a5f2297",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d94e6062547f288a75921d2433458a44a5f2297",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d94e6062547f288a75921d2433458a44a5f2297",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d94e6062547f288a75921d2433458a44a5f2297/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5b414151af32e5a07b5757b64482d77519d77c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5b414151af32e5a07b5757b64482d77519d77c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5b414151af32e5a07b5757b64482d77519d77c0"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 55,
      "deletions": 42
    },
    "files": [
      {
        "sha": "d19d0406b6afe181609e5b9d5890d95e44f0a325",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d94e6062547f288a75921d2433458a44a5f2297/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d94e6062547f288a75921d2433458a44a5f2297/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=0d94e6062547f288a75921d2433458a44a5f2297",
        "patch": "@@ -514,15 +514,22 @@ class WalletClientImpl : public WalletClient\n     void setMockTime(int64_t time) override { return SetMockTime(time); }\n \n     //! WalletClient methods\n-    std::unique_ptr<Wallet> createWallet(const std::string& name, const SecureString& passphrase, uint64_t wallet_creation_flags, WalletCreationStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings) override\n+    std::unique_ptr<Wallet> createWallet(const std::string& name, const SecureString& passphrase, uint64_t wallet_creation_flags, bilingual_str& error, std::vector<bilingual_str>& warnings) override\n     {\n         std::shared_ptr<CWallet> wallet;\n-        status = CreateWallet(*m_context.chain, passphrase, wallet_creation_flags, name, true /* load_on_start */, error, warnings, wallet);\n-        return MakeWallet(std::move(wallet));\n+        DatabaseOptions options;\n+        DatabaseStatus status;\n+        options.require_create = true;\n+        options.create_flags = wallet_creation_flags;\n+        options.create_passphrase = passphrase;\n+        return MakeWallet(CreateWallet(*m_context.chain, name, true /* load_on_start */, options, status, error, warnings));\n     }\n     std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) override\n     {\n-        return MakeWallet(LoadWallet(*m_context.chain, name, true /* load_on_start */, error, warnings));\n+        DatabaseOptions options;\n+        DatabaseStatus status;\n+        options.require_existing = true;\n+        return MakeWallet(LoadWallet(*m_context.chain, name, true /* load_on_start */, options, status, error, warnings));\n     }\n     std::string getWalletDir() override\n     {"
      },
      {
        "sha": "b1afbbfd7ce9ec05a202d61a9ca63aff5187cd61",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d94e6062547f288a75921d2433458a44a5f2297/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d94e6062547f288a75921d2433458a44a5f2297/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=0d94e6062547f288a75921d2433458a44a5f2297",
        "patch": "@@ -29,7 +29,6 @@ class CWallet;\n enum class FeeReason;\n enum class OutputType;\n enum class TransactionError;\n-enum class WalletCreationStatus;\n enum isminetype : unsigned int;\n struct CRecipient;\n struct PartiallySignedTransaction;\n@@ -311,7 +310,7 @@ class WalletClient : public ChainClient\n {\n public:\n     //! Create new wallet.\n-    virtual std::unique_ptr<Wallet> createWallet(const std::string& name, const SecureString& passphrase, uint64_t wallet_creation_flags, WalletCreationStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings) = 0;\n+    virtual std::unique_ptr<Wallet> createWallet(const std::string& name, const SecureString& passphrase, uint64_t wallet_creation_flags, bilingual_str& error, std::vector<bilingual_str>& warnings) = 0;\n \n    //! Load existing wallet.\n    virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) = 0;"
      },
      {
        "sha": "bee17abf11d06c9321849ec408e49776cc6a1615",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d94e6062547f288a75921d2433458a44a5f2297/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d94e6062547f288a75921d2433458a44a5f2297/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=0d94e6062547f288a75921d2433458a44a5f2297",
        "patch": "@@ -249,10 +249,9 @@ void CreateWalletActivity::createWallet()\n     }\n \n     QTimer::singleShot(500, worker(), [this, name, flags] {\n-        WalletCreationStatus status;\n-        std::unique_ptr<interfaces::Wallet> wallet = node().walletClient().createWallet(name, m_passphrase, flags, status, m_error_message, m_warning_message);\n+        std::unique_ptr<interfaces::Wallet> wallet = node().walletClient().createWallet(name, m_passphrase, flags, m_error_message, m_warning_message);\n \n-        if (status == WalletCreationStatus::SUCCESS) m_wallet_model = m_wallet_controller->getOrCreateWallet(std::move(wallet));\n+        if (wallet) m_wallet_model = m_wallet_controller->getOrCreateWallet(std::move(wallet));\n \n         QTimer::singleShot(500, this, &CreateWalletActivity::finish);\n     });"
      },
      {
        "sha": "6a918ec925f9a7b57908527f8d0109d36450638d",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d94e6062547f288a75921d2433458a44a5f2297/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d94e6062547f288a75921d2433458a44a5f2297/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=0d94e6062547f288a75921d2433458a44a5f2297",
        "patch": "@@ -9,6 +9,7 @@\n #include <clientversion.h>\n #include <fs.h>\n #include <streams.h>\n+#include <support/allocators/secure.h>\n #include <util/memory.h>\n \n #include <atomic>\n@@ -202,6 +203,8 @@ enum class DatabaseFormat {\n struct DatabaseOptions {\n     bool require_existing = false;\n     bool require_create = false;\n+    uint64_t create_flags = 0;\n+    SecureString create_passphrase;\n     bool verify = true;\n };\n \n@@ -212,7 +215,9 @@ enum class DatabaseStatus {\n     FAILED_ALREADY_LOADED,\n     FAILED_ALREADY_EXISTS,\n     FAILED_NOT_FOUND,\n+    FAILED_CREATE,\n     FAILED_VERIFY,\n+    FAILED_ENCRYPT,\n };\n \n std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);"
      },
      {
        "sha": "536d11ddd9fd171df7a087d9f3c90a90d89195cc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d94e6062547f288a75921d2433458a44a5f2297/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d94e6062547f288a75921d2433458a44a5f2297/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0d94e6062547f288a75921d2433458a44a5f2297",
        "patch": "@@ -2515,10 +2515,12 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n         }\n     }\n \n+    DatabaseOptions options;\n+    DatabaseStatus status;\n     bilingual_str error;\n     std::vector<bilingual_str> warnings;\n     Optional<bool> load_on_start = request.params[1].isNull() ? nullopt : Optional<bool>(request.params[1].get_bool());\n-    std::shared_ptr<CWallet> const wallet = LoadWallet(*context.chain, name, load_on_start, error, warnings);\n+    std::shared_ptr<CWallet> const wallet = LoadWallet(*context.chain, name, load_on_start, options, status, error, warnings);\n     if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n \n     UniValue obj(UniValue::VOBJ);\n@@ -2648,18 +2650,16 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         warnings.emplace_back(Untranslated(\"Wallet is an experimental descriptor wallet\"));\n     }\n \n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    options.create_flags = flags;\n+    options.create_passphrase = passphrase;\n     bilingual_str error;\n-    std::shared_ptr<CWallet> wallet;\n     Optional<bool> load_on_start = request.params[6].isNull() ? nullopt : Optional<bool>(request.params[6].get_bool());\n-    WalletCreationStatus status = CreateWallet(*context.chain, passphrase, flags, request.params[0].get_str(), load_on_start, error, warnings, wallet);\n-    switch (status) {\n-        case WalletCreationStatus::CREATION_FAILED:\n-            throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n-        case WalletCreationStatus::ENCRYPTION_FAILED:\n-            throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, error.original);\n-        case WalletCreationStatus::SUCCESS:\n-            break;\n-        // no default case, so the compiler can warn about missing cases\n+    std::shared_ptr<CWallet> wallet = CreateWallet(*context.chain, request.params[0].get_str(), load_on_start, options, status, error, warnings);\n+    if (!wallet) {\n+        RPCErrorCode code = status == DatabaseStatus::FAILED_ENCRYPT ? RPC_WALLET_ENCRYPTION_FAILED : RPC_WALLET_ERROR;\n+        throw JSONRPCError(code, error.original);\n     }\n \n     UniValue obj(UniValue::VOBJ);"
      },
      {
        "sha": "4d7c51401966d3475c7d7966b8ebcb2feaebfd43",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 13,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d94e6062547f288a75921d2433458a44a5f2297/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d94e6062547f288a75921d2433458a44a5f2297/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0d94e6062547f288a75921d2433458a44a5f2297",
        "patch": "@@ -200,7 +200,7 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n }\n \n namespace {\n-std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     try {\n         if (!CWallet::Verify(chain, name, error, warnings)) {\n@@ -227,20 +227,23 @@ std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std:\n }\n } // namespace\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     auto result = WITH_LOCK(g_loading_wallet_mutex, return g_loading_wallet_set.insert(name));\n     if (!result.second) {\n         error = Untranslated(\"Wallet already being loading.\");\n         return nullptr;\n     }\n-    auto wallet = LoadWalletInternal(chain, name, load_on_start, error, warnings);\n+    auto wallet = LoadWalletInternal(chain, name, load_on_start, options, status, error, warnings);\n     WITH_LOCK(g_loading_wallet_mutex, g_loading_wallet_set.erase(result.first));\n     return wallet;\n }\n \n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result)\n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n+    uint64_t wallet_creation_flags = options.create_flags;\n+    const SecureString& passphrase = options.create_passphrase;\n+\n     // Indicate that the wallet is actually supposed to be blank and not just blank to make it encrypted\n     bool create_blank = (wallet_creation_flags & WALLET_FLAG_BLANK_WALLET);\n \n@@ -252,39 +255,45 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     // Check the wallet file location\n     if (fs::symlink_status(fs::absolute(name.empty() ? \"wallet.dat\" : name, GetWalletDir())).type() != fs::file_not_found) {\n         error = strprintf(Untranslated(\"Wallet %s already exists.\"), name);\n-        return WalletCreationStatus::CREATION_FAILED;\n+        status = DatabaseStatus::FAILED_CREATE;\n+        return nullptr;\n     }\n \n     // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n     if (!CWallet::Verify(chain, name, error, warnings)) {\n         error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n-        return WalletCreationStatus::CREATION_FAILED;\n+        status = DatabaseStatus::FAILED_VERIFY;\n+        return nullptr;\n     }\n \n     // Do not allow a passphrase when private keys are disabled\n     if (!passphrase.empty() && (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         error = Untranslated(\"Passphrase provided but private keys are disabled. A passphrase is only used to encrypt private keys, so cannot be used for wallets with private keys disabled.\");\n-        return WalletCreationStatus::CREATION_FAILED;\n+        status = DatabaseStatus::FAILED_CREATE;\n+        return nullptr;\n     }\n \n     // Make the wallet\n     std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, name, error, warnings, wallet_creation_flags);\n     if (!wallet) {\n         error = Untranslated(\"Wallet creation failed.\") + Untranslated(\" \") + error;\n-        return WalletCreationStatus::CREATION_FAILED;\n+        status = DatabaseStatus::FAILED_CREATE;\n+        return nullptr;\n     }\n \n     // Encrypt the wallet\n     if (!passphrase.empty() && !(wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         if (!wallet->EncryptWallet(passphrase)) {\n             error = Untranslated(\"Error: Wallet created but failed to encrypt.\");\n-            return WalletCreationStatus::ENCRYPTION_FAILED;\n+            status = DatabaseStatus::FAILED_ENCRYPT;\n+            return nullptr;\n         }\n         if (!create_blank) {\n             // Unlock the wallet\n             if (!wallet->Unlock(passphrase)) {\n                 error = Untranslated(\"Error: Wallet was encrypted but could not be unlocked\");\n-                return WalletCreationStatus::ENCRYPTION_FAILED;\n+                status = DatabaseStatus::FAILED_ENCRYPT;\n+                return nullptr;\n             }\n \n             // Set a seed for the wallet\n@@ -296,7 +305,8 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n                     for (auto spk_man : wallet->GetActiveScriptPubKeyMans()) {\n                         if (!spk_man->SetupGeneration()) {\n                             error = Untranslated(\"Unable to generate initial keys\");\n-                            return WalletCreationStatus::CREATION_FAILED;\n+                            status = DatabaseStatus::FAILED_CREATE;\n+                            return nullptr;\n                         }\n                     }\n                 }\n@@ -308,12 +318,12 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     }\n     AddWallet(wallet);\n     wallet->postInitProcess();\n-    result = wallet;\n \n     // Write the wallet settings\n     UpdateWalletSetting(chain, name, load_on_start, warnings);\n \n-    return WalletCreationStatus::SUCCESS;\n+    status = DatabaseStatus::SUCCESS;\n+    return wallet;\n }\n \n const uint256 CWalletTx::ABANDON_HASH(UINT256_ONE());"
      },
      {
        "sha": "2e6434f5cad5bb6a6a2b1ceee49d8a2ed62a51f4",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d94e6062547f288a75921d2433458a44a5f2297/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d94e6062547f288a75921d2433458a44a5f2297/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0d94e6062547f288a75921d2433458a44a5f2297",
        "patch": "@@ -54,17 +54,10 @@ bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on\n bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on_start);\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n std::unique_ptr<interfaces::Handler> HandleLoadWallet(LoadWalletFn load_wallet);\n \n-enum class WalletCreationStatus {\n-    SUCCESS,\n-    CREATION_FAILED,\n-    ENCRYPTION_FAILED\n-};\n-\n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result);\n-\n //! -paytxfee default\n constexpr CAmount DEFAULT_PAY_TX_FEE = 0;\n //! -fallbackfee default"
      }
    ]
  },
  {
    "sha": "3c815cfe54087fd139169161d2fd175e99840e6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzgxNWNmZTU0MDg3ZmQxMzkxNjkxNjFkMmZkMTc1ZTk5ODQwZTZh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-08-04T23:33:37Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-09-03T16:24:32Z"
      },
      "message": "wallet: Remove Verify and IsLoaded methods\n\nChecks are now consolidated in MakeBerkeleyDatabase function instead of\nhappening in higher level code.\n\nThis commit does not change behavior except for error messages which now\ninclude more complete information.",
      "tree": {
        "sha": "9845581f644144cb90197b46f94f61bf18ccde50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9845581f644144cb90197b46f94f61bf18ccde50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c815cfe54087fd139169161d2fd175e99840e6a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c815cfe54087fd139169161d2fd175e99840e6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c815cfe54087fd139169161d2fd175e99840e6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c815cfe54087fd139169161d2fd175e99840e6a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d94e6062547f288a75921d2433458a44a5f2297",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d94e6062547f288a75921d2433458a44a5f2297",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d94e6062547f288a75921d2433458a44a5f2297"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 16,
      "deletions": 59
    },
    "files": [
      {
        "sha": "8f8652bb0b133713c689446ae0bf18ca0d952867",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=3c815cfe54087fd139169161d2fd175e99840e6a",
        "patch": "@@ -52,18 +52,6 @@ bool WalletDatabaseFileId::operator==(const WalletDatabaseFileId& rhs) const\n     return memcmp(value, &rhs.value, sizeof(value)) == 0;\n }\n \n-bool IsBDBWalletLoaded(const fs::path& wallet_path)\n-{\n-    fs::path env_directory;\n-    std::string database_filename;\n-    SplitWalletPath(wallet_path, env_directory, database_filename);\n-    LOCK(cs_db);\n-    auto env = g_dbenvs.find(env_directory.string());\n-    if (env == g_dbenvs.end()) return false;\n-    auto database = env->second.lock();\n-    return database && database->IsDatabaseLoaded(database_filename);\n-}\n-\n /**\n  * @param[in] wallet_path Path to wallet directory. Or (for backwards compatibility only) a path to a berkeley btree data file inside a wallet directory.\n  * @param[out] database_filename Filename of berkeley btree data file inside the wallet directory."
      },
      {
        "sha": "9f24a2f10bc87b7d403fb4e627655a5a6441714b",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=3c815cfe54087fd139169161d2fd175e99840e6a",
        "patch": "@@ -63,7 +63,6 @@ class BerkeleyEnvironment\n \n     bool IsMock() const { return fMockDb; }\n     bool IsInitialized() const { return fDbEnvInit; }\n-    bool IsDatabaseLoaded(const std::string& db_filename) const { return m_databases.find(db_filename) != m_databases.end(); }\n     fs::path Directory() const { return strPath; }\n \n     bool Open(bilingual_str& error);\n@@ -87,9 +86,6 @@ class BerkeleyEnvironment\n /** Get BerkeleyEnvironment and database filename given a wallet path. */\n std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, std::string& database_filename);\n \n-/** Return whether a BDB wallet database is currently loaded. */\n-bool IsBDBWalletLoaded(const fs::path& wallet_path);\n-\n /** Check format of database file */\n bool IsBerkeleyBtree(const fs::path& path);\n \n@@ -146,7 +142,7 @@ class BerkeleyDatabase : public WalletDatabase\n     void ReloadDbEnv() override;\n \n     /** Verifies the environment and database file */\n-    bool Verify(bilingual_str& error) override;\n+    bool Verify(bilingual_str& error);\n \n     /**\n      * Pointer to shared database environment."
      },
      {
        "sha": "6e11d7de88eb32125418925ab2c3fe46cea776d0",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=3c815cfe54087fd139169161d2fd175e99840e6a",
        "patch": "@@ -147,9 +147,6 @@ class WalletDatabase\n     unsigned int nLastFlushed;\n     int64_t nLastWalletUpdate;\n \n-    /** Verifies the environment and database file */\n-    virtual bool Verify(bilingual_str& error) = 0;\n-\n     std::string m_file_path;\n \n     /** Make a DatabaseBatch connected to this database */\n@@ -192,7 +189,6 @@ class DummyDatabase : public WalletDatabase\n     bool PeriodicFlush() override { return true; }\n     void IncrementUpdateCounter() override { ++nUpdateCounter; }\n     void ReloadDbEnv() override {}\n-    bool Verify(bilingual_str& errorStr) override { return true; }\n     std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override { return MakeUnique<DummyBatch>(); }\n };\n "
      },
      {
        "sha": "84dc5adf662a229651101b7ea91260a5673be197",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=3c815cfe54087fd139169161d2fd175e99840e6a",
        "patch": "@@ -52,11 +52,11 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n             return false;\n         }\n \n+        DatabaseOptions options;\n+        DatabaseStatus status;\n+        options.verify = true;\n         bilingual_str error_string;\n-        std::vector<bilingual_str> warnings;\n-        bool verify_success = CWallet::Verify(chain, wallet_file, error_string, warnings);\n-        if (!warnings.empty()) chain.initWarning(Join(warnings, Untranslated(\"\\n\")));\n-        if (!verify_success) {\n+        if (!MakeWalletDatabase(wallet_file, options, status, error_string)) {\n             chain.initError(error_string);\n             return false;\n         }"
      },
      {
        "sha": "b5928f2b7e0d495d7105ec1ce4fee7fc60759588",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 21,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3c815cfe54087fd139169161d2fd175e99840e6a",
        "patch": "@@ -203,7 +203,7 @@ namespace {\n std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     try {\n-        if (!CWallet::Verify(chain, name, error, warnings)) {\n+        if (!MakeWalletDatabase(name, options, status, error)) {\n             error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n             return nullptr;\n         }\n@@ -260,7 +260,7 @@ std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::strin\n     }\n \n     // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n-    if (!CWallet::Verify(chain, name, error, warnings)) {\n+    if (!MakeWalletDatabase(name, options, status, error)) {\n         error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n         status = DatabaseStatus::FAILED_VERIFY;\n         return nullptr;\n@@ -3779,15 +3779,14 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-bool CWallet::Verify(interfaces::Chain& chain, const std::string& name, bilingual_str& error_string, std::vector<bilingual_str>& warnings)\n+std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error_string)\n {\n     // Do some checking on wallet path. It should be either a:\n     //\n     // 1. Path where a directory can be created.\n     // 2. Path to an existing directory.\n     // 3. Path to a symlink to a directory.\n     // 4. For backwards compatibility, the name of a data file in -walletdir.\n-    LOCK(cs_wallets);\n     const fs::path& wallet_path = fs::absolute(name, GetWalletDir());\n     fs::file_type path_type = fs::symlink_status(wallet_path).type();\n     if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n@@ -3798,24 +3797,10 @@ bool CWallet::Verify(interfaces::Chain& chain, const std::string& name, bilingua\n               \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n               \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\",\n               name, GetWalletDir()));\n-        return false;\n-    }\n-\n-    // Make sure that the wallet path doesn't clash with an existing wallet path\n-    if (IsWalletLoaded(wallet_path)) {\n-        error_string = Untranslated(strprintf(\"Error loading wallet %s. Duplicate -wallet filename specified.\", name));\n-        return false;\n-    }\n-\n-    // Keep same database environment instance across Verify/Recover calls below.\n-    std::unique_ptr<WalletDatabase> database = CreateWalletDatabase(wallet_path);\n-\n-    try {\n-        return database->Verify(error_string);\n-    } catch (const fs::filesystem_error& e) {\n-        error_string = Untranslated(strprintf(\"Error loading wallet %s. %s\", name, fsbridge::get_filesystem_error_message(e)));\n-        return false;\n+        status = DatabaseStatus::FAILED_BAD_PATH;\n+        return nullptr;\n     }\n+    return MakeDatabase(wallet_path, options, status, error_string);\n }\n \n std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags)"
      },
      {
        "sha": "c9ebb94dc14f1418a89b5cbd150b781dda30390e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3c815cfe54087fd139169161d2fd175e99840e6a",
        "patch": "@@ -57,6 +57,7 @@ std::shared_ptr<CWallet> GetWallet(const std::string& name);\n std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n std::unique_ptr<interfaces::Handler> HandleLoadWallet(LoadWalletFn load_wallet);\n+std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\n \n //! -paytxfee default\n constexpr CAmount DEFAULT_PAY_TX_FEE = 0;\n@@ -1144,9 +1145,6 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     /** Mark a transaction as replaced by another transaction (e.g., BIP 125). */\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n-    //! Verify wallet naming and perform salvage on the wallet if required\n-    static bool Verify(interfaces::Chain& chain, const std::string& name, bilingual_str& error_string, std::vector<bilingual_str>& warnings);\n-\n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n     static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags = 0);\n "
      },
      {
        "sha": "29ac52cb3e242ba8e1b0bcd330151d2f17686737",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3c815cfe54087fd139169161d2fd175e99840e6a",
        "patch": "@@ -1032,11 +1032,6 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n     return MakeBerkeleyDatabase(path, options, status, error);\n }\n \n-bool IsWalletLoaded(const fs::path& wallet_path)\n-{\n-    return IsBDBWalletLoaded(wallet_path);\n-}\n-\n /** Return object for accessing database at specified path. */\n std::unique_ptr<WalletDatabase> CreateWalletDatabase(const fs::path& path)\n {"
      },
      {
        "sha": "7e83e3902a280fff864d937a0ed2ac9be064e573",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c815cfe54087fd139169161d2fd175e99840e6a/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=3c815cfe54087fd139169161d2fd175e99840e6a",
        "patch": "@@ -285,9 +285,6 @@ using KeyFilterFn = std::function<bool(const std::string&)>;\n //! Unserialize a given Key-Value pair and load it into the wallet\n bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr);\n \n-/** Return whether a wallet database is currently loaded. */\n-bool IsWalletLoaded(const fs::path& wallet_path);\n-\n /** Return object for accessing database at specified path. */\n std::unique_ptr<WalletDatabase> CreateWalletDatabase(const fs::path& path);\n "
      },
      {
        "sha": "cc9d0ac4c4602ab5a4b8093e021d337094cee998",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c815cfe54087fd139169161d2fd175e99840e6a/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c815cfe54087fd139169161d2fd175e99840e6a/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=3c815cfe54087fd139169161d2fd175e99840e6a",
        "patch": "@@ -247,10 +247,12 @@ def wallet_file(name):\n         assert_raises_rpc_error(-18, 'Wallet wallets not found.', self.nodes[0].loadwallet, 'wallets')\n \n         # Fail to load duplicate wallets\n-        assert_raises_rpc_error(-4, 'Wallet file verification failed. Error loading wallet w1. Duplicate -wallet filename specified.', self.nodes[0].loadwallet, wallet_names[0])\n+        path = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\", \"w1\", \"wallet.dat\")\n+        assert_raises_rpc_error(-4, \"Wallet file verification failed. Refusing to load database. Data file '{}' is already loaded.\".format(path), self.nodes[0].loadwallet, wallet_names[0])\n \n         # Fail to load duplicate wallets by different ways (directory and filepath)\n-        assert_raises_rpc_error(-4, \"Wallet file verification failed. Error loading wallet wallet.dat. Duplicate -wallet filename specified.\", self.nodes[0].loadwallet, 'wallet.dat')\n+        path = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\", \"wallet.dat\")\n+        assert_raises_rpc_error(-4, \"Wallet file verification failed. Refusing to load database. Data file '{}' is already loaded.\".format(path), self.nodes[0].loadwallet, 'wallet.dat')\n \n         # Fail to load if one wallet is a copy of another\n         assert_raises_rpc_error(-4, \"BerkeleyDatabase: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')"
      }
    ]
  },
  {
    "sha": "8b5e7297c02f3100a9cb27bfe206e3fc617ec173",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjVlNzI5N2MwMmYzMTAwYTljYjI3YmZlMjA2ZTNmYzYxN2VjMTcz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-08-05T00:45:28Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-09-03T16:24:32Z"
      },
      "message": "refactor: Pass wallet database into CWallet::Create\n\nNo changes in behavior",
      "tree": {
        "sha": "d77b54fad59498c100511fe1565d9b06c55fe444",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d77b54fad59498c100511fe1565d9b06c55fe444"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b5e7297c02f3100a9cb27bfe206e3fc617ec173",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b5e7297c02f3100a9cb27bfe206e3fc617ec173",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b5e7297c02f3100a9cb27bfe206e3fc617ec173",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c815cfe54087fd139169161d2fd175e99840e6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c815cfe54087fd139169161d2fd175e99840e6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c815cfe54087fd139169161d2fd175e99840e6a"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 27,
      "deletions": 25
    },
    "files": [
      {
        "sha": "fbb3d2cac57dd4ed710d6a3b0176b6d4cdc319b8",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=8b5e7297c02f3100a9cb27bfe206e3fc617ec173",
        "patch": "@@ -359,7 +359,6 @@ void BerkeleyDatabase::Open(const char* pszMode)\n             if (ret != 0) {\n                 throw std::runtime_error(strprintf(\"BerkeleyDatabase: Error %d, can't open database %s\", ret, strFile));\n             }\n-            m_file_path = (env->Directory() / strFile).string();\n \n             // Call CheckUniqueFileid on the containing BDB environment to\n             // avoid BDB data consistency bugs that happen when different data"
      },
      {
        "sha": "fd5a49acc31325f6278d989575feac3b08267468",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=8b5e7297c02f3100a9cb27bfe206e3fc617ec173",
        "patch": "@@ -144,6 +144,9 @@ class BerkeleyDatabase : public WalletDatabase\n     /** Verifies the environment and database file */\n     bool Verify(bilingual_str& error);\n \n+    /** Return path to main database filename */\n+    std::string Filename() override { return (env->Directory() / strFile).string(); }\n+\n     /**\n      * Pointer to shared database environment.\n      *"
      },
      {
        "sha": "bd1d1147303f04228aee7fada8a533785bfb66a9",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=8b5e7297c02f3100a9cb27bfe206e3fc617ec173",
        "patch": "@@ -23,11 +23,3 @@ void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::\n         database_filename = \"wallet.dat\";\n     }\n }\n-\n-fs::path WalletDataFilePath(const fs::path& wallet_path)\n-{\n-    fs::path env_directory;\n-    std::string database_filename;\n-    SplitWalletPath(wallet_path, env_directory, database_filename);\n-    return env_directory / database_filename;\n-}"
      },
      {
        "sha": "96d1f44d91f08e7ac46b3835cb62a6000e893f80",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=8b5e7297c02f3100a9cb27bfe206e3fc617ec173",
        "patch": "@@ -18,8 +18,6 @@\n \n struct bilingual_str;\n \n-/** Given a wallet directory path or legacy file path, return path to main data file in the wallet database. */\n-fs::path WalletDataFilePath(const fs::path& wallet_path);\n void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename);\n \n /** RAII class that provides access to a WalletDatabase */\n@@ -142,13 +140,14 @@ class WalletDatabase\n \n     virtual void ReloadDbEnv() = 0;\n \n+    /** Return path to main database file for logs and error messages. */\n+    virtual std::string Filename() = 0;\n+\n     std::atomic<unsigned int> nUpdateCounter;\n     unsigned int nLastSeen;\n     unsigned int nLastFlushed;\n     int64_t nLastWalletUpdate;\n \n-    std::string m_file_path;\n-\n     /** Make a DatabaseBatch connected to this database */\n     virtual std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) = 0;\n };\n@@ -189,6 +188,7 @@ class DummyDatabase : public WalletDatabase\n     bool PeriodicFlush() override { return true; }\n     void IncrementUpdateCounter() override { ++nUpdateCounter; }\n     void ReloadDbEnv() override {}\n+    std::string Filename() override { return \"dummy\"; }\n     std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override { return MakeUnique<DummyBatch>(); }\n };\n "
      },
      {
        "sha": "c5d045e9ef6411b1658cdb8a561afa3ee40b2844",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=8b5e7297c02f3100a9cb27bfe206e3fc617ec173",
        "patch": "@@ -68,10 +68,14 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)\n {\n     try {\n-        for (const std::string& walletFile : wallet_files) {\n+        for (const std::string& name : wallet_files) {\n+            DatabaseOptions options;\n+            DatabaseStatus status;\n+            options.verify = false; // No need to verify, assuming verified earlier in VerifyWallets()\n             bilingual_str error;\n             std::vector<bilingual_str> warnings;\n-            std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, walletFile, error, warnings);\n+            std::unique_ptr<WalletDatabase> database = MakeWalletDatabase(name, options, status, error);\n+            std::shared_ptr<CWallet> pwallet = database ? CWallet::Create(chain, name, std::move(database), options.create_flags, error, warnings) : nullptr;\n             if (!warnings.empty()) chain.initWarning(Join(warnings, Untranslated(\"\\n\")));\n             if (!pwallet) {\n                 chain.initError(error);"
      },
      {
        "sha": "6b98482f9809cbb63b07559406ea2d6f98d3b0a7",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=8b5e7297c02f3100a9cb27bfe206e3fc617ec173",
        "patch": "@@ -37,9 +37,12 @@ BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n \n static std::shared_ptr<CWallet> TestLoadWallet(interfaces::Chain& chain)\n {\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n     bilingual_str error;\n     std::vector<bilingual_str> warnings;\n-    auto wallet = CWallet::CreateWalletFromFile(chain, \"\", error, warnings);\n+    auto database = MakeWalletDatabase(\"\", options, status, error);\n+    auto wallet = CWallet::Create(chain, \"\", std::move(database), options.create_flags, error, warnings);\n     wallet->postInitProcess();\n     return wallet;\n }"
      },
      {
        "sha": "1751cbf5bc099cdb27ddbfedf81b34f8ff52b21f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8b5e7297c02f3100a9cb27bfe206e3fc617ec173",
        "patch": "@@ -203,12 +203,13 @@ namespace {\n std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     try {\n-        if (!MakeWalletDatabase(name, options, status, error)) {\n+        std::unique_ptr<WalletDatabase> database = MakeWalletDatabase(name, options, status, error);\n+        if (!database) {\n             error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n             return nullptr;\n         }\n \n-        std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, name, error, warnings);\n+        std::shared_ptr<CWallet> wallet = CWallet::Create(chain, name, std::move(database), options.create_flags, error, warnings);\n         if (!wallet) {\n             error = Untranslated(\"Wallet loading failed.\") + Untranslated(\" \") + error;\n             return nullptr;\n@@ -260,7 +261,8 @@ std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::strin\n     }\n \n     // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n-    if (!MakeWalletDatabase(name, options, status, error)) {\n+    std::unique_ptr<WalletDatabase> database = MakeWalletDatabase(name, options, status, error);\n+    if (!database) {\n         error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n         status = DatabaseStatus::FAILED_VERIFY;\n         return nullptr;\n@@ -274,7 +276,7 @@ std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::strin\n     }\n \n     // Make the wallet\n-    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, name, error, warnings, wallet_creation_flags);\n+    std::shared_ptr<CWallet> wallet = CWallet::Create(chain, name, std::move(database), wallet_creation_flags, error, warnings);\n     if (!wallet) {\n         error = Untranslated(\"Wallet creation failed.\") + Untranslated(\" \") + error;\n         status = DatabaseStatus::FAILED_CREATE;\n@@ -3803,18 +3805,17 @@ std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, cons\n     return MakeDatabase(wallet_path, options, status, error_string);\n }\n \n-std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags)\n+std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::string& name, std::unique_ptr<WalletDatabase> database, uint64_t wallet_creation_flags, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n-    fs::path path = fs::absolute(name, GetWalletDir());\n-    const std::string walletFile = WalletDataFilePath(path).string();\n+    const std::string& walletFile = database->Filename();\n \n     chain.initMessage(_(\"Loading wallet...\").translated);\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n-    std::shared_ptr<CWallet> walletInstance(new CWallet(&chain, name, CreateWalletDatabase(path)), ReleaseWallet);\n+    std::shared_ptr<CWallet> walletInstance(new CWallet(&chain, name, std::move(database)), ReleaseWallet);\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DBErrors::LOAD_OK) {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {"
      },
      {
        "sha": "c54480612ac3b5b6d18a226202f2f979f69293ef",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b5e7297c02f3100a9cb27bfe206e3fc617ec173/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8b5e7297c02f3100a9cb27bfe206e3fc617ec173",
        "patch": "@@ -1146,7 +1146,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags = 0);\n+    static std::shared_ptr<CWallet> Create(interfaces::Chain& chain, const std::string& name, std::unique_ptr<WalletDatabase> database, uint64_t wallet_creation_flags, bilingual_str& error, std::vector<bilingual_str>& warnings);\n \n     /**\n      * Wallet post-init setup"
      }
    ]
  },
  {
    "sha": "a987438e9d9cad0b5530e218a447928485f3fd93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTg3NDM4ZTlkOWNhZDBiNTUzMGUyMThhNDQ3OTI4NDg1ZjNmZDkz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-08-05T00:58:43Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-09-03T16:24:32Z"
      },
      "message": "wallet: Remove path checking code from loadwallet RPC\n\nThis commit does not change behavior except for error messages which now\ninclude more complete information.",
      "tree": {
        "sha": "4cd45f0556d2133d1fb88860ca0d3b14404d0c47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cd45f0556d2133d1fb88860ca0d3b14404d0c47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a987438e9d9cad0b5530e218a447928485f3fd93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a987438e9d9cad0b5530e218a447928485f3fd93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a987438e9d9cad0b5530e218a447928485f3fd93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a987438e9d9cad0b5530e218a447928485f3fd93/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b5e7297c02f3100a9cb27bfe206e3fc617ec173",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b5e7297c02f3100a9cb27bfe206e3fc617ec173",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b5e7297c02f3100a9cb27bfe206e3fc617ec173"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 13,
      "deletions": 15
    },
    "files": [
      {
        "sha": "497a4120e5f595ec76a4d8cbca2f00d23059d884",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a987438e9d9cad0b5530e218a447928485f3fd93/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a987438e9d9cad0b5530e218a447928485f3fd93/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a987438e9d9cad0b5530e218a447928485f3fd93",
        "patch": "@@ -2503,25 +2503,20 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n     WalletContext& context = EnsureWalletContext(request.context);\n     const std::string name(request.params[0].get_str());\n-    fs::path path(fs::absolute(name, GetWalletDir()));\n-\n-    if (fs::symlink_status(path).type() == fs::file_not_found) {\n-        throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Wallet \" + name + \" not found.\");\n-    } else if (fs::is_directory(path)) {\n-        // The given filename is a directory. Check that there's a wallet.dat file.\n-        fs::path wallet_dat_file = path / \"wallet.dat\";\n-        if (fs::symlink_status(wallet_dat_file).type() == fs::file_not_found) {\n-            throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Directory \" + name + \" does not contain a wallet.dat file.\");\n-        }\n-    }\n \n     DatabaseOptions options;\n     DatabaseStatus status;\n+    options.require_existing = true;\n     bilingual_str error;\n     std::vector<bilingual_str> warnings;\n     Optional<bool> load_on_start = request.params[1].isNull() ? nullopt : Optional<bool>(request.params[1].get_bool());\n     std::shared_ptr<CWallet> const wallet = LoadWallet(*context.chain, name, load_on_start, options, status, error, warnings);\n-    if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n+    if (!wallet) {\n+        // Map bad format to not found, since bad format is returned when the\n+        // wallet directory exists, but doesn't contain a data file.\n+        RPCErrorCode code = status == DatabaseStatus::FAILED_NOT_FOUND || status == DatabaseStatus::FAILED_BAD_FORMAT ? RPC_WALLET_NOT_FOUND : RPC_WALLET_ERROR;\n+        throw JSONRPCError(code, error.original);\n+    }\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());"
      },
      {
        "sha": "f19c60dc362a79467cbc330e5e8914013b5181ae",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a987438e9d9cad0b5530e218a447928485f3fd93/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a987438e9d9cad0b5530e218a447928485f3fd93/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=a987438e9d9cad0b5530e218a447928485f3fd93",
        "patch": "@@ -129,7 +129,8 @@ def do_multisig(self):\n             try:\n                 node1.loadwallet('wmulti')\n             except JSONRPCException as e:\n-                if e.error['code'] == -18 and 'Wallet wmulti not found' in e.error['message']:\n+                path = os.path.join(self.options.tmpdir, \"node1\", \"regtest\", \"wallets\", \"wmulti\")\n+                if e.error['code'] == -18 and \"Wallet file verification failed. Failed to load database path '{}'. Path does not exist.\".format(path) in e.error['message']:\n                     node1.createwallet(wallet_name='wmulti', disable_private_keys=True)\n                 else:\n                     raise"
      },
      {
        "sha": "168d6be42ceae16dcfb9906e62600bbd1ab44ce1",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a987438e9d9cad0b5530e218a447928485f3fd93/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a987438e9d9cad0b5530e218a447928485f3fd93/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=a987438e9d9cad0b5530e218a447928485f3fd93",
        "patch": "@@ -244,7 +244,8 @@ def wallet_file(name):\n         assert_equal(set(self.nodes[0].listwallets()), set(wallet_names))\n \n         # Fail to load if wallet doesn't exist\n-        assert_raises_rpc_error(-18, 'Wallet wallets not found.', self.nodes[0].loadwallet, 'wallets')\n+        path = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\", \"wallets\")\n+        assert_raises_rpc_error(-18, \"Wallet file verification failed. Failed to load database path '{}'. Path does not exist.\".format(path), self.nodes[0].loadwallet, 'wallets')\n \n         # Fail to load duplicate wallets\n         path = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\", \"w1\", \"wallet.dat\")\n@@ -266,7 +267,8 @@ def wallet_file(name):\n \n         # Fail to load if a directory is specified that doesn't contain a wallet\n         os.mkdir(wallet_dir('empty_wallet_dir'))\n-        assert_raises_rpc_error(-18, \"Directory empty_wallet_dir does not contain a wallet.dat file\", self.nodes[0].loadwallet, 'empty_wallet_dir')\n+        path = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\", \"empty_wallet_dir\")\n+        assert_raises_rpc_error(-18, \"Wallet file verification failed. Failed to load database path '{}'. Data is not in recognized format.\".format(path), self.nodes[0].loadwallet, 'empty_wallet_dir')\n \n         self.log.info(\"Test dynamic wallet creation.\")\n "
      }
    ]
  },
  {
    "sha": "77d5bb72b8722ec7a6c7c33479a532cbd5870ba4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2Q1YmI3MmI4NzIyZWM3YTZjN2MzMzQ3OWE1MzJjYmQ1ODcwYmE0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-08-05T01:03:27Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-09-03T16:24:32Z"
      },
      "message": "wallet: Remove path checking code from createwallet RPC\n\nThis commit does not change behavior except for error messages which now\ninclude more complete information.",
      "tree": {
        "sha": "84b7820a100705154d6635483486aaa119b9fa43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84b7820a100705154d6635483486aaa119b9fa43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77d5bb72b8722ec7a6c7c33479a532cbd5870ba4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77d5bb72b8722ec7a6c7c33479a532cbd5870ba4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77d5bb72b8722ec7a6c7c33479a532cbd5870ba4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77d5bb72b8722ec7a6c7c33479a532cbd5870ba4/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a987438e9d9cad0b5530e218a447928485f3fd93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a987438e9d9cad0b5530e218a447928485f3fd93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a987438e9d9cad0b5530e218a447928485f3fd93"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 3,
      "deletions": 8
    },
    "files": [
      {
        "sha": "891d650ad3dffa7c2da0e352c992799f51f4aeda",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77d5bb72b8722ec7a6c7c33479a532cbd5870ba4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77d5bb72b8722ec7a6c7c33479a532cbd5870ba4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=77d5bb72b8722ec7a6c7c33479a532cbd5870ba4",
        "patch": "@@ -2647,6 +2647,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n \n     DatabaseOptions options;\n     DatabaseStatus status;\n+    options.require_create = true;\n     options.create_flags = flags;\n     options.create_passphrase = passphrase;\n     bilingual_str error;"
      },
      {
        "sha": "0d07904924f436592af92a04d3bcde12df20d23b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77d5bb72b8722ec7a6c7c33479a532cbd5870ba4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77d5bb72b8722ec7a6c7c33479a532cbd5870ba4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=77d5bb72b8722ec7a6c7c33479a532cbd5870ba4",
        "patch": "@@ -253,13 +253,6 @@ std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::strin\n         wallet_creation_flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n \n-    // Check the wallet file location\n-    if (fs::symlink_status(fs::absolute(name.empty() ? \"wallet.dat\" : name, GetWalletDir())).type() != fs::file_not_found) {\n-        error = strprintf(Untranslated(\"Wallet %s already exists.\"), name);\n-        status = DatabaseStatus::FAILED_CREATE;\n-        return nullptr;\n-    }\n-\n     // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n     std::unique_ptr<WalletDatabase> database = MakeWalletDatabase(name, options, status, error);\n     if (!database) {"
      },
      {
        "sha": "d64d3dcb4945bb69159e83d1921ccba3487f4901",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77d5bb72b8722ec7a6c7c33479a532cbd5870ba4/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77d5bb72b8722ec7a6c7c33479a532cbd5870ba4/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=77d5bb72b8722ec7a6c7c33479a532cbd5870ba4",
        "patch": "@@ -273,7 +273,8 @@ def wallet_file(name):\n         self.log.info(\"Test dynamic wallet creation.\")\n \n         # Fail to create a wallet if it already exists.\n-        assert_raises_rpc_error(-4, \"Wallet w2 already exists.\", self.nodes[0].createwallet, 'w2')\n+        path = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\", \"w2\")\n+        assert_raises_rpc_error(-4, \"Failed to create database path '{}'. Database already exists.\".format(path), self.nodes[0].createwallet, 'w2')\n \n         # Successfully create a wallet with a new name\n         loadwallet_name = self.nodes[0].createwallet('w9')"
      }
    ]
  },
  {
    "sha": "7bf6dfbb484adfda3b8df26ee3e2ebda239dd263",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmY2ZGZiYjQ4NGFkZmRhM2I4ZGYyNmVlM2UyZWJkYTIzOWRkMjYz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-08-05T01:16:48Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-09-03T16:24:32Z"
      },
      "message": "wallet: Remove path checking code from bitcoin-wallet tool\n\nThis commit does not change behavior except for error messages which now\ninclude more complete information.",
      "tree": {
        "sha": "2ed5e50ed96e0196bf5c7bf4925b45bf6aa808fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ed5e50ed96e0196bf5c7bf4925b45bf6aa808fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77d5bb72b8722ec7a6c7c33479a532cbd5870ba4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77d5bb72b8722ec7a6c7c33479a532cbd5870ba4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77d5bb72b8722ec7a6c7c33479a532cbd5870ba4"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 29,
      "deletions": 39
    },
    "files": [
      {
        "sha": "225b9750678c8adf2f5d7e06f48efea87ed16a11",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=7bf6dfbb484adfda3b8df26ee3e2ebda239dd263",
        "patch": "@@ -23,6 +23,13 @@ static bool KeyFilter(const std::string& type)\n \n bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    options.require_existing = true;\n+    options.verify = false;\n+    std::unique_ptr<WalletDatabase> database = MakeDatabase(file_path, options, status, error);\n+    if (!database) return false;\n+\n     std::string filename;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n "
      },
      {
        "sha": "5bf21eb91fc33b28ed52dee8e744cfff162c124d",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=7bf6dfbb484adfda3b8df26ee3e2ebda239dd263",
        "patch": "@@ -1032,13 +1032,6 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n     return MakeBerkeleyDatabase(path, options, status, error);\n }\n \n-/** Return object for accessing database at specified path. */\n-std::unique_ptr<WalletDatabase> CreateWalletDatabase(const fs::path& path)\n-{\n-    std::string filename;\n-    return MakeUnique<BerkeleyDatabase>(GetWalletEnv(path, filename), std::move(filename));\n-}\n-\n /** Return object for accessing dummy database with no read/write capabilities. */\n std::unique_ptr<WalletDatabase> CreateDummyWalletDatabase()\n {"
      },
      {
        "sha": "eda810ed8a6ea0333a5936274a4e57723f739b0e",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=7bf6dfbb484adfda3b8df26ee3e2ebda239dd263",
        "patch": "@@ -285,9 +285,6 @@ using KeyFilterFn = std::function<bool(const std::string&)>;\n //! Unserialize a given Key-Value pair and load it into the wallet\n bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr, const KeyFilterFn& filter_fn = nullptr);\n \n-/** Return object for accessing database at specified path. */\n-std::unique_ptr<WalletDatabase> CreateWalletDatabase(const fs::path& path);\n-\n /** Return object for accessing dummy database with no read/write capabilities. */\n std::unique_ptr<WalletDatabase> CreateDummyWalletDatabase();\n "
      },
      {
        "sha": "4452840eb14522934a057ab58503361110e60347",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 25,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=7bf6dfbb484adfda3b8df26ee3e2ebda239dd263",
        "patch": "@@ -21,21 +21,9 @@ static void WalletToolReleaseWallet(CWallet* wallet)\n     delete wallet;\n }\n \n-static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::path& path)\n+static void WalletCreate(CWallet* wallet_instance)\n {\n-    if (fs::exists(path)) {\n-        tfm::format(std::cerr, \"Error: File exists already\\n\");\n-        return nullptr;\n-    }\n-    // dummy chain interface\n-    std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, name, CreateWalletDatabase(path)), WalletToolReleaseWallet);\n     LOCK(wallet_instance->cs_wallet);\n-    bool first_run = true;\n-    DBErrors load_wallet_ret = wallet_instance->LoadWallet(first_run);\n-    if (load_wallet_ret != DBErrors::LOAD_OK) {\n-        tfm::format(std::cerr, \"Error creating %s\", name);\n-        return nullptr;\n-    }\n \n     wallet_instance->SetMinVersion(FEATURE_HD_SPLIT);\n \n@@ -46,18 +34,26 @@ static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::\n \n     tfm::format(std::cout, \"Topping up keypool...\\n\");\n     wallet_instance->TopUpKeyPool();\n-    return wallet_instance;\n }\n \n-static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::path& path)\n+static std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::path& path, bool create)\n {\n-    if (!fs::exists(path)) {\n-        tfm::format(std::cerr, \"Error: Wallet files does not exist\\n\");\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    if (create) {\n+        options.require_create = true;\n+    } else {\n+        options.require_existing = true;\n+    }\n+    bilingual_str error;\n+    std::unique_ptr<WalletDatabase> database = MakeDatabase(path, options, status, error);\n+    if (!database) {\n+        tfm::format(std::cerr, \"%s\\n\", error.original);\n         return nullptr;\n     }\n \n     // dummy chain interface\n-    std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, name, CreateWalletDatabase(path)), WalletToolReleaseWallet);\n+    std::shared_ptr<CWallet> wallet_instance{new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet};\n     DBErrors load_wallet_ret;\n     try {\n         bool first_run;\n@@ -89,6 +85,8 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n         }\n     }\n \n+    if (create) WalletCreate(wallet_instance.get());\n+\n     return wallet_instance;\n }\n \n@@ -109,19 +107,14 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n     fs::path path = fs::absolute(name, GetWalletDir());\n \n     if (command == \"create\") {\n-        std::shared_ptr<CWallet> wallet_instance = CreateWallet(name, path);\n+        std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, /* create= */ true);\n         if (wallet_instance) {\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Close();\n         }\n     } else if (command == \"info\" || command == \"salvage\") {\n-        if (!fs::exists(path)) {\n-            tfm::format(std::cerr, \"Error: no wallet file at %s\\n\", name);\n-            return false;\n-        }\n-\n         if (command == \"info\") {\n-            std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n+            std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, /* create= */ false);\n             if (!wallet_instance) return false;\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Close();"
      },
      {
        "sha": "d0b8d6812a7dca7cab9b80de51bfcc279d2f935a",
        "filename": "src/wallet/wallettool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263/src/wallet/wallettool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263/src/wallet/wallettool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.h?ref=7bf6dfbb484adfda3b8df26ee3e2ebda239dd263",
        "patch": "@@ -9,8 +9,6 @@\n \n namespace WalletTool {\n \n-std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::path& path);\n-std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::path& path);\n void WalletShowInfo(CWallet* wallet_instance);\n bool ExecuteWalletToolFunc(const std::string& command, const std::string& file);\n "
      },
      {
        "sha": "fa5b5c10ff50e41d27bc521967f3cccb46112d26",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf6dfbb484adfda3b8df26ee3e2ebda239dd263/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=7bf6dfbb484adfda3b8df26ee3e2ebda239dd263",
        "patch": "@@ -70,12 +70,14 @@ def test_invalid_tool_commands_and_args(self):\n         self.assert_raises_tool_error('Invalid command: help', 'help')\n         self.assert_raises_tool_error('Error: two methods provided (info and create). Only one method should be provided.', 'info', 'create')\n         self.assert_raises_tool_error('Error parsing command line arguments: Invalid parameter -foo', '-foo')\n+        locked_dir = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\")\n         self.assert_raises_tool_error(\n-            'Error loading wallet.dat. Is wallet being used by another process?',\n+            'Error initializing wallet database environment \"{}\"!'.format(locked_dir),\n             '-wallet=wallet.dat',\n             'info',\n         )\n-        self.assert_raises_tool_error('Error: no wallet file at nonexistent.dat', '-wallet=nonexistent.dat', 'info')\n+        path = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\", \"nonexistent.dat\")\n+        self.assert_raises_tool_error(\"Failed to load database path '{}'. Path does not exist.\".format(path), '-wallet=nonexistent.dat', 'info')\n \n     def test_tool_wallet_info(self):\n         # Stop the node to close the wallet to call the info command."
      }
    ]
  }
]