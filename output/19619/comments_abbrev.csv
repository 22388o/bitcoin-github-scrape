hebasto,2020-07-29 14:15:38,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-665690746,665690746,
DrahtBot,2020-07-29 14:28:44,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19425 (refactor: Get rid of more redundant chain methods by ryanofsky)\n* #19245 ([WIP DONOTMERGE] Replace boost::filesys",https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-665698519,665698519,
achow101,2020-07-29 19:20:13,"Could the second commit be split up a bit? It seems to be doing a lot and several functions are being renamed and removed.\n\nFrom what I understand, the second commit adds `DatabaseOptions` and `DatabaseStatus`. Then `CreateWalletDatabase` is renamed to `MakeWalletDatabase` and all of the various checks (file existence checks and database verify) are pushed into that function with `DatabaseOpti",https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-665853496,665853496,
ryanofsky,2020-07-29 20:15:39,"> Could the second commit be split up a bit? It seems to be doing a lot and several functions are being renamed and removed.\n\nSure, I think I can split up like you're suggesting. The main change is introducing the `MakeBerkeleyDatabase` function. Then that function is called various places to get rid of path operations. So I think introducing MakeBerkeleyDatabase could be one commit, and then ",https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-665903005,665903005,
ryanofsky,2020-07-29 20:18:29,"Oh, also I didn't want this PR to depend on #19099, but this would be a little smaller with #19099 merged frist, because then there would be no need to change interfaces/node and walletinitinterface code here\n\n---\n\nRebased 8994145cb336862a51151cbaa2e222e3e2a5be96 -> 0e4cb50e3c86c3093b18fe2dfb47f563db32afef ([`pr/path.2`](https://github.com/ryanofsky/bitcoin/commits/pr/path.2) -> [`pr/path.",https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-665904386,665904386,
luke-jr,2020-07-31 01:44:03,"I can see why we'd want to move anything about ""wallet.dat"" or the ""wallet is a directory"" stuff into the database layer, but IMO it doesn't make sense to hide the path the wallet is located within...",https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-666864816,666864816,
meshcollider,2020-07-31 11:46:25,"Concept ACK, as a logical separation I think it makes sense to have database-format-specific stuff like this at a lower layer than the logical use of a generic database in the rest of the code.",https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-667080181,667080181,
ryanofsky,2020-08-05 03:12:13,"re: https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-665853496\n\n> Could the second commit be split up a bit? It seems to be doing a lot and several functions are being renamed and removed.\n\nTook some work, but I split this up into smaller commits that should make it more obvious nothing is changing.\n\n---\n\nre: https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-6668",https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-668954043,668954043,
achow101,2020-08-10 23:26:01,ACK 977bfc5aef22c21ff9612068faf0672bf0f022eb,https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-671638752,671638752,
ryanofsky,2020-08-14 17:01:25,"Rebased 977bfc5aef22c21ff9612068faf0672bf0f022eb -> f190f67ca7b3315c9dc46bf882dbc96af778b607 ([`pr/path.5`](https://github.com/ryanofsky/bitcoin/commits/pr/path.5) -> [`pr/path.6`](https://github.com/ryanofsky/bitcoin/commits/pr/path.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/path.5-rebase..pr/path.6)) due to conflict with #19457",https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-674170083,674170083,
hebasto,2020-08-15 08:54:11,"Commit 134f1807e51a8b64c813bf994c8752d55ff3469f ""wallet: Add MakeDatabase function"" confuses me:\n\n1. `bool IsBerkeleyBtree()` declaration is added to `wallet/bdb.h` but its definition remains in `wallet/walletutil.cpp`\n\n2. `std::unique_ptr<WalletDatabase> MakeDatabase()` declaration is added to `wallet/db.h` but its definition is added to `wallet/walletdb.cpp`\n\nIf this made on purpose,",https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-674370405,674370405,
achow101,2020-08-17 22:48:29,ACK 1233419c88c31f21e1b59b4e3f0cdad34d92413b Since last only rebase and some suggestions. My comments on this aren't really blocking.,https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-675152638,675152638,
Sjors,2020-08-31 12:35:31,"Concept ACK. On macOS `wallet_multiwallet.py` fails for me with:\n\n```\n2020-08-31T12:20:37.628000Z TestFramework (INFO): Concurrent wallet loading\n2020-08-31T12:20:38.768000Z TestFramework (ERROR): Assertion failed\nTraceback (most recent call last):\n  File ""/Users/sjors/dev/bitcoin/test/functional/test_framework/test_framework.py"", line 118, in main\n    self.run_test()\n  File ""test/",https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-683751130,683751130,
achow101,2020-09-01 17:24:41,ACK 83a8f51da5bb86c39f030e027100f0eb5f1f52ad,https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-685015221,685015221,
achow101,2020-09-04 00:25:20,ACK 7bf6dfbb484adfda3b8df26ee3e2ebda239dd263,https://github.com/bitcoin/bitcoin/pull/19619#issuecomment-686830528,686830528,
achow101,2020-08-05 17:37:24,I think the non-BDB specific parts of this should be part of `MakeDatabase`. It would make this easier to handle in #19077 ,https://github.com/bitcoin/bitcoin/pull/19619#discussion_r465893207,465893207,src/wallet/bdb.cpp
achow101,2020-08-05 17:38:44,"There is a `m_file_path` variable in `WalletDatabase` that does this. If we add `Filename`, we should remove that.",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r465893924,465893924,src/wallet/db.h
achow101,2020-08-05 17:41:26,"It seems like #19077 still needs `Verify`. Even if we don't necessarily use this outside of database specific code paths, I think it's still useful to keep it part of `WalletDatabase`.",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r465895375,465895375,src/wallet/db.h
ryanofsky,2020-08-06 18:05:13,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r465893207\n\n> I think the non-BDB specific parts of this should be part of `MakeDatabase`. It would make this easier to handle in #19077\n\nYou're right, moved this code since it didn't really support detecting the database format.",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r466593355,466593355,src/wallet/bdb.cpp
ryanofsky,2020-08-06 18:05:27,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r465893924\n\n> There is a `m_file_path` variable in `WalletDatabase` that does this. If we add `Filename`, we should remove that.\n\nThanks, cleaned this up.",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r466593480,466593480,src/wallet/db.h
ryanofsky,2020-08-06 18:05:35,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r465895375\n\n> It seems like #19077 still needs `Verify`. Even if we don't necessarily use this outside of database specific code paths, I think it's still useful to keep it part of `WalletDatabase`.\n\nWill take a look. The thought was that the API should either support offline verification at load time or online verification after",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r466593575,466593575,src/wallet/db.h
achow101,2020-08-07 20:07:55,I think we can require that verify is an online verification function and call it from `MakeDatabase` rather than `MakeBerkeleyDatabase`.,https://github.com/bitcoin/bitcoin/pull/19619#discussion_r467245932,467245932,src/wallet/db.h
achow101,2020-08-14 17:20:09,Might as well remove this `else if` as it's pointless now.,https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470754389,470754389,src/wallet/wallettool.cpp
achow101,2020-08-14 17:25:16,I think we need to close and destroy the `database`. Having it created and potentially open now could interfere with the salvage below. We only want to do this for the path existence check.,https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470756846,470756846,src/wallet/salvage.cpp
promag,2020-08-15 00:39:36,"ee5bb1bb09d9834edb6cd15d233be504f00615db\n\nCould be const?",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470915633,470915633,src/wallet/bdb.h
promag,2020-08-15 00:46:22,"ee5bb1bb09d9834edb6cd15d233be504f00615db\n\nWhy not take `name` from  `database`? Is it intentional to allow independent names and filenames?",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470916468,470916468,src/wallet/wallet.cpp
hebasto,2020-08-15 08:33:48,"aac063f28e4ed48180c2ba7a51706af969ca1e55, nit\n```suggestion\n        const fs::path path = fs::absolute(wallet_file, GetWalletDir());\n```",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470954536,470954536,src/wallet/load.cpp
hebasto,2020-08-15 08:34:40,"aac063f28e4ed48180c2ba7a51706af969ca1e55\nAdd `#include <fs.h>` ?",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470954586,470954586,src/wallet/load.cpp
hebasto,2020-08-15 08:36:12,"aac063f28e4ed48180c2ba7a51706af969ca1e55, nit\n```suggestion\n    const std::string name(request.params[0].get_str());\n```",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470954743,470954743,src/wallet/rpcwallet.cpp
hebasto,2020-08-15 09:07:33,"134f1807e51a8b64c813bf994c8752d55ff3469f\nWhy locking is required here? Doesn't `GetWalletEnv()` do this job?",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470957223,470957223,src/wallet/bdb.cpp
ryanofsky,2020-08-17 01:54:53,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470915633\n\n> [ee5bb1b](https://github.com/bitcoin/bitcoin/commit/ee5bb1bb09d9834edb6cd15d233be504f00615db)\n> \n> Could be const?\n\nI don't like virtual methods to be const. I don't think a superclass declaration should prevent subclasses from being able to modify their own state, expose this implementation detail to callers, a",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r471194705,471194705,src/wallet/bdb.h
ryanofsky,2020-08-17 01:55:19,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r467245932\n\n> I think we can require that verify is an online verification function and call it from `MakeDatabase` rather than `MakeBerkeleyDatabase`.\n\nAgree we can add an extra method to the interface, but would want to know advantages to doing this. Sticking with a verify option instead of a verify method seems more flexible f",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r471194800,471194800,src/wallet/db.h
ryanofsky,2020-08-17 01:55:27,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470954536\n\n> [aac063f](https://github.com/bitcoin/bitcoin/commit/aac063f28e4ed48180c2ba7a51706af969ca1e55), nit\n\nThanks, added",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r471194826,471194826,src/wallet/load.cpp
ryanofsky,2020-08-17 01:55:55,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470954743\n\n> [aac063f](https://github.com/bitcoin/bitcoin/commit/aac063f28e4ed48180c2ba7a51706af969ca1e55), nit\n\nThanks, added",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r471194914,471194914,src/wallet/rpcwallet.cpp
ryanofsky,2020-08-17 01:56:02,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470756846\n\n> I think we need to close and destroy the `database`. Having it created and potentially open now could interfere with the salvage below.\n\nI'm not sure exactly what change is being asked for here. Closing an unopened database won't do anything. Goal of this commit is to remove path manipulation from wallet tool while ",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r471194943,471194943,src/wallet/salvage.cpp
ryanofsky,2020-08-17 01:56:10,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470916468\n\n> [ee5bb1b](https://github.com/bitcoin/bitcoin/commit/ee5bb1bb09d9834edb6cd15d233be504f00615db)\n> \n> Why not take `name` from `database`? Is it intentional to allow independent names and filenames?\n\nYes it's intentional. Database objects don't have names. They aren't passed names, can't construct names, and don't ",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r471194968,471194968,src/wallet/wallet.cpp
ryanofsky,2020-08-17 01:56:18,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470754389\n\n> Might as well remove this `else if` as it's pointless now.\n\nDon't want to increase scope of this PR, but agree wallet tool command dispatching can be simplified later.",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r471194992,471194992,src/wallet/wallettool.cpp
ryanofsky,2020-08-17 12:01:31,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r470957223\n\n> 134f1807e51a8b64c813bf994c8752d55ff3469f\n> Why locking is required here? Doesn't `GetWalletEnv()` do this job?\n\nAdded comment. The lock needs to cover both  GetWalletEnv and the Database constructor to prevent a race condition. In the future I think all these little functions should be inlined so code is clearer, ",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r471431230,471431230,src/wallet/bdb.cpp
achow101,2020-08-17 16:46:28,"The main idea is that the verify is an option for all `WalletDatabase` implementations and always done within `MakeDatabase` so that there isn't an implementation that doesn't do this verification. I think we should be requiring that all `WalletDatabase` implementations have some kind of online verification, and if a database doesn't provide this, perhaps we shouldn't be using it.",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r471606646,471606646,src/wallet/db.h
achow101,2020-08-17 16:49:48,"What I was asking for was to have a `database = nullptr` here so that `database` isn't valid further down.\n\nIf we do want to do the salvage through `WalletDatabase` (I'm not sure that we should though), then I would expect that all of this recovery code ends up back in `bdb.cpp/h`.",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r471608447,471608447,src/wallet/salvage.cpp
MarcoFalke,2020-08-27 15:41:47,"in commit 83e4ead9917735b2ba92c8a35fe37504206ffe32\n\nplease don't change behavior in refactoring commits.\n\nPreviously:\n\n```\ntest_framework.authproxy.JSONRPCException: Wallet  not found. (-18)\n```\n\nNow:\n\n```\ntest_framework.authproxy.JSONRPCException: Directory  does not contain a wallet.dat file. (-18)\n",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r478516042,478516042,src/wallet/rpcwallet.cpp
MarcoFalke,2020-08-27 15:47:31,I sort of liked that the functionality was wrapped in one function. This avoids issues exactly like this,https://github.com/bitcoin/bitcoin/pull/19619#discussion_r478519929,478519929,src/wallet/rpcwallet.cpp
meshcollider,2020-08-31 11:05:24,Why treat `FAILED_BAD_FORMAT ` as a not-found error?,https://github.com/bitcoin/bitcoin/pull/19619#discussion_r480057501,480057501,src/wallet/rpcwallet.cpp
ryanofsky,2020-09-01 01:43:52,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r480057501\n\n> Why treat `FAILED_BAD_FORMAT ` as a not-found error?\n\nI added a code comment. I can change to different error code, but FAILED_BAD_FORMAT is returned when the wallet directory exists but doesn't have a `wallet.dat` file. `RPC_WALLET_NOT_FOUND` was what the previous code returned in this case so this is not a change ",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r480569047,480569047,src/wallet/rpcwallet.cpp
ryanofsky,2020-09-01 01:44:44,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r471606646\n\n> The main idea is that the verify is an option for all `WalletDatabase` implementations and always done within `MakeDatabase` so that there isn't an implementation that doesn't do this verification. I think we should be requiring that all `WalletDatabase` implementations have some kind of online verification, and if a da",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r480570017,480570017,src/wallet/db.h
ryanofsky,2020-09-01 01:45:03,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r471608447\n\n> What I was asking for was to have a `database = nullptr` here so that `database` isn't valid further down.\n> \n> If we do want to do the salvage through `WalletDatabase` (I'm not sure that we should though), then I would expect that all of this recovery code ends up back in `bdb.cpp/h`.\n\nNo harm other than verbos",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r480570344,480570344,src/wallet/salvage.cpp
hebasto,2020-09-03 15:37:47,"4dba0c5ac68223b218b33d49e3621ea863042a07, nit:\n```suggestion\n    const auto wallet = CreateWallet(*context.chain, request.params[0].get_str(), options, status, error, warnings);\n```",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483073055,483073055,src/wallet/rpcwallet.cpp
hebasto,2020-09-03 15:52:12,"8c14ac68863bb4727f774315d9b0e3820543252a, nit:\n```suggestion\n        auto database = MakeWalletDatabase(name, options, status, error);\n```",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483082852,483082852,src/wallet/wallet.cpp
hebasto,2020-09-03 15:52:51,"8c14ac68863bb4727f774315d9b0e3820543252a, nit:\n```suggestion\n        const auto wallet = CWallet::Create(chain, name, std::move(database), options.create_flags, error, warnings);\n```",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483083308,483083308,src/wallet/wallet.cpp
hebasto,2020-09-03 15:54:09,"8c14ac68863bb4727f774315d9b0e3820543252a, nit:\n```suggestion\n    auto database = MakeWalletDatabase(name, options, status, error);\n```",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483084081,483084081,src/wallet/wallet.cpp
hebasto,2020-09-03 15:55:33,"8c14ac68863bb4727f774315d9b0e3820543252a, nit:\n```suggestion\n    const auto wallet = CWallet::Create(chain, name, std::move(database), wallet_creation_flags, error, warnings);\n```",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483085127,483085127,src/wallet/wallet.cpp
hebasto,2020-09-03 15:56:52,"8c14ac68863bb4727f774315d9b0e3820543252a, nit:\n```suggestion\n            auto database = MakeWalletDatabase(name, options, status, error);\n```",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483085993,483085993,src/wallet/load.cpp
hebasto,2020-09-03 16:12:37,"83a8f51da5bb86c39f030e027100f0eb5f1f52ad, nit:\n```suggestion\n    auto database = MakeDatabase(file_path, options, status, error);\n```",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483097023,483097023,src/wallet/salvage.cpp
ryanofsky,2020-09-03 18:32:01,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483073055\n\n> [4dba0c5](https://github.com/bitcoin/bitcoin/commit/4dba0c5ac68223b218b33d49e3621ea863042a07), nit:\n\nDisagree with the suggestion. I do like `auto` when writing the type would be very verbose (iterators) or when type would be just be repeated (new, make_shared, MakeUnique expressions). But this isn't one of those ca",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483177601,483177601,src/wallet/rpcwallet.cpp
ryanofsky,2020-09-03 18:34:01,"> I sort of liked that the functionality was wrapped in one function. This avoids issues exactly like this\n\nReplied https://github.com/bitcoin/bitcoin/pull/19619#pullrequestreview-479302679",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483178605,483178605,src/wallet/rpcwallet.cpp
ryanofsky,2020-09-03 18:35:22,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483085993\n\n> [8c14ac6](https://github.com/bitcoin/bitcoin/commit/8c14ac68863bb4727f774315d9b0e3820543252a), nit:\n\nDisagree with `auto` here, see previous comment",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483179415,483179415,src/wallet/load.cpp
ryanofsky,2020-09-03 18:35:35,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483082852\n\n> [8c14ac6](https://github.com/bitcoin/bitcoin/commit/8c14ac68863bb4727f774315d9b0e3820543252a), nit:\n\nDisagree with `auto` here, see previous comment",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483179500,483179500,src/wallet/wallet.cpp
ryanofsky,2020-09-03 18:35:44,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483083308\n\n> [8c14ac6](https://github.com/bitcoin/bitcoin/commit/8c14ac68863bb4727f774315d9b0e3820543252a), nit:\n\nDisagree with `auto` here, see previous comment",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483179599,483179599,src/wallet/wallet.cpp
ryanofsky,2020-09-03 18:35:54,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483085127\n\n> [8c14ac6](https://github.com/bitcoin/bitcoin/commit/8c14ac68863bb4727f774315d9b0e3820543252a), nit:\n\nDisagree with `auto` here, see previous comment",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483179685,483179685,src/wallet/wallet.cpp
ryanofsky,2020-09-03 18:36:20,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483084081\n\n> [8c14ac6](https://github.com/bitcoin/bitcoin/commit/8c14ac68863bb4727f774315d9b0e3820543252a), nit:\n\nDisagree with `auto` here, see previous comment",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483179915,483179915,src/wallet/wallet.cpp
ryanofsky,2020-09-03 18:36:34,"re: https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483097023\n\n> [83a8f51](https://github.com/bitcoin/bitcoin/commit/83a8f51da5bb86c39f030e027100f0eb5f1f52ad), nit:\n\nDisagree with `auto` here, see previous comment",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483180065,483180065,src/wallet/salvage.cpp
hebasto,2020-09-04 08:41:39,"Ok. Using `auto` is a matter of taste or [philosophy](https://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/).\n\nBut what is wrong with `const`?",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483476198,483476198,src/wallet/rpcwallet.cpp
ryanofsky,2020-09-04 15:03:07,"> Ok. Using `auto` is a matter of taste or [philosophy](https://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/).\n> \n> But what is wrong with `const`?\n\nI don't have a problem with it, but it isn't my preference to tag every variable that could possibly be tagged const with const. It's clarifying and helpful and some cases, and noise in other cases. In these specifi",https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483675691,483675691,src/wallet/rpcwallet.cpp
hebasto,2020-09-04 15:04:33,ok,https://github.com/bitcoin/bitcoin/pull/19619#discussion_r483676481,483676481,src/wallet/rpcwallet.cpp
