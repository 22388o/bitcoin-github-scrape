[
  {
    "sha": "510c6532bae9abc5beda1c126c945923a64680cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTBjNjUzMmJhZTlhYmM1YmVkYTFjMTI2Yzk0NTkyM2E2NDY4MGNi",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-04-04T07:39:04Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-04-14T01:52:11Z"
      },
      "message": "Extract ParseDescriptorRange\n\nSo as to be consistently informative when the checks fail, and\nto protect against unintentional divergence among the checks.",
      "tree": {
        "sha": "08817bc88ad774370833066ca14714a6f8a2d262",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08817bc88ad774370833066ca14714a6f8a2d262"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/510c6532bae9abc5beda1c126c945923a64680cb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlyykkwACgkQTYykuhgE\nCQaPvw/9HM1qrMPOgokH5xMudlVDKFlLWfon3fMRGQkfk+qtKeKHBA0Vaw8yGpa8\n2kx/S9EBxTHH95hKINlz8ERynzfyRb7oeNSD40v6yYvk6uE/wAVQnE4yEawPfAk0\nFvHxMNgkxY++JW8THq7/VSG8QHDkJLEgnF1M6A0agY4B18BOGFJAEX0QOlgP+zZg\nTmyv2lBcdee9959SQwQs1uZbFu0LU7/kigpeihJT741gLutjJNjii+PQaOMVbOOt\nt9f5PWf5jlI5HhC24C6V0+ozuVKl0m4XjUUByJdFY1BzzLDRHBqoI5L6mWfsVFcO\nI2Ma4ZhAR4NBxjb+HI1/p+37svJ7twXz3rzNYFf3YAyfnGbV9+uqBLjuprUNMo6w\nnaCGWBmHNbSQ0mcG+Znsu+h1ybm9ujonZCwqIo0TEsYgPxi43g8AtRQ5c7I/7IUE\n5WzmgSkmy8YmxIEPGB1wZOcj21C3QAgcoG+ce2SaRrTZH47wXSLiRbpvnCNeyMXD\n/NTO8qig2N5Aipj+HXxOLlCgkujqVb/bdf1UkF/8MtYgc8IbIqjDYxVgDZQIE4Am\nbsvA7bx+edDXiywcJrBcD3fBnFPY74wakmb3OAheGNYXny0Hbw1kycg1fychxwnV\ng3U2VoAcMIQxkH0V+J1XPRDMuGYJDgR73aOgS8ceV/qPQA5PcoM=\n=rS1E\n-----END PGP SIGNATURE-----",
        "payload": "tree 08817bc88ad774370833066ca14714a6f8a2d262\nparent ba54342c9dd3f2e5cdeed9ac57f1924f0d885cc6\nauthor Ben Woosley <ben.woosley@gmail.com> 1554363544 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1555206731 -0700\n\nExtract ParseDescriptorRange\n\nSo as to be consistently informative when the checks fail, and\nto protect against unintentional divergence among the checks.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/510c6532bae9abc5beda1c126c945923a64680cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/510c6532bae9abc5beda1c126c945923a64680cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/510c6532bae9abc5beda1c126c945923a64680cb/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba54342c9dd3f2e5cdeed9ac57f1924f0d885cc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba54342c9dd3f2e5cdeed9ac57f1924f0d885cc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba54342c9dd3f2e5cdeed9ac57f1924f0d885cc6"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 48,
      "deletions": 23
    },
    "files": [
      {
        "sha": "53f8dfebaa2b0a65a83232d1d6cbb44482215d78",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/510c6532bae9abc5beda1c126c945923a64680cb/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/510c6532bae9abc5beda1c126c945923a64680cb/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=510c6532bae9abc5beda1c126c945923a64680cb",
        "patch": "@@ -2224,8 +2224,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                 desc_str = desc_uni.get_str();\n                 UniValue range_uni = find_value(scanobject, \"range\");\n                 if (!range_uni.isNull()) {\n-                    range = ParseRange(range_uni);\n-                    if (range.first < 0 || (range.second >> 31) != 0 || range.second >= range.first + 1000000) throw JSONRPCError(RPC_INVALID_PARAMETER, \"range out of range\");\n+                    range = ParseDescriptorRange(range_uni);\n                 }\n             } else {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");"
      },
      {
        "sha": "e07b02aa23767e052119d0b518d1619394a70e7c",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 12,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/510c6532bae9abc5beda1c126c945923a64680cb/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/510c6532bae9abc5beda1c126c945923a64680cb/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=510c6532bae9abc5beda1c126c945923a64680cb",
        "patch": "@@ -23,6 +23,7 @@\n #include <warnings.h>\n \n #include <stdint.h>\n+#include <tuple>\n #ifdef HAVE_MALLOC_INFO\n #include <malloc.h>\n #endif\n@@ -214,18 +215,7 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n     int64_t range_end = 0;\n \n     if (request.params.size() >= 2 && !request.params[1].isNull()) {\n-        auto range = ParseRange(request.params[1]);\n-        if (range.first < 0) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should be greater or equal than 0\");\n-        }\n-        if ((range.second >> 31) != 0) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End of range is too high\");\n-        }\n-        if (range.second >= range.first + 1000000) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range is too large\");\n-        }\n-        range_begin = range.first;\n-        range_end = range.second;\n+        std::tie(range_begin, range_end) = ParseDescriptorRange(request.params[1]);\n     }\n \n     FlatSigningProvider provider;"
      },
      {
        "sha": "8f8488bc5f1e06ff4beb171d16c276fe92cd2730",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/510c6532bae9abc5beda1c126c945923a64680cb/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/510c6532bae9abc5beda1c126c945923a64680cb/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=510c6532bae9abc5beda1c126c945923a64680cb",
        "patch": "@@ -8,6 +8,8 @@\n #include <tinyformat.h>\n #include <util/strencodings.h>\n \n+#include <tuple>\n+\n InitInterfaces* g_rpc_interfaces = nullptr;\n \n // Converts a hex string to a public key if possible\n@@ -529,7 +531,7 @@ std::string RPCArg::ToString(const bool oneline) const\n     assert(false);\n }\n \n-std::pair<int64_t, int64_t> ParseRange(const UniValue& value)\n+static std::pair<int64_t, int64_t> ParseRange(const UniValue& value)\n {\n     if (value.isNum()) {\n         return {0, value.get_int64()};\n@@ -542,3 +544,19 @@ std::pair<int64_t, int64_t> ParseRange(const UniValue& value)\n     }\n     throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified as end or as [begin,end]\");\n }\n+\n+std::pair<int64_t, int64_t> ParseDescriptorRange(const UniValue& value)\n+{\n+    int64_t low, high;\n+    std::tie(low, high) = ParseRange(value);\n+    if (low < 0) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should be greater or equal than 0\");\n+    }\n+    if ((high >> 31) != 0) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"End of range is too high\");\n+    }\n+    if (high >= low + 1000000) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range is too large\");\n+    }\n+    return {low, high};\n+}"
      },
      {
        "sha": "d2edf30e0277e4ab4ce54bca99afd0fec67088c8",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/510c6532bae9abc5beda1c126c945923a64680cb/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/510c6532bae9abc5beda1c126c945923a64680cb/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=510c6532bae9abc5beda1c126c945923a64680cb",
        "patch": "@@ -39,7 +39,7 @@ RPCErrorCode RPCErrorFromTransactionError(TransactionError terr);\n UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_string = \"\");\n \n //! Parse a JSON range specified as int64, or [int64, int64]\n-std::pair<int64_t, int64_t> ParseRange(const UniValue& value);\n+std::pair<int64_t, int64_t> ParseDescriptorRange(const UniValue& value);\n \n struct RPCArg {\n     enum class Type {"
      },
      {
        "sha": "674b56fe9d89d8d336711eb62f038c143e48f657",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/510c6532bae9abc5beda1c126c945923a64680cb/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/510c6532bae9abc5beda1c126c945923a64680cb/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=510c6532bae9abc5beda1c126c945923a64680cb",
        "patch": "@@ -22,6 +22,7 @@\n #include <wallet/rpcwallet.h>\n \n #include <stdint.h>\n+#include <tuple>\n \n #include <boost/algorithm/string.hpp>\n #include <boost/date_time/posix_time/posix_time.hpp>\n@@ -1144,12 +1145,7 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n         if (!data.exists(\"range\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor is ranged, please specify the range\");\n         }\n-        auto range = ParseRange(data[\"range\"]);\n-        range_start = range.first;\n-        range_end = range.second;\n-        if (range_start < 0 || (range_end >> 31) != 0 || range_end - range_start >= 1000000) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid descriptor range specified\");\n-        }\n+        std::tie(range_start, range_end) = ParseDescriptorRange(data[\"range\"]);\n     }\n \n     const UniValue& priv_keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();"
      },
      {
        "sha": "a1cd33ad5406fccc28738275836d1d74ec637797",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/510c6532bae9abc5beda1c126c945923a64680cb/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/510c6532bae9abc5beda1c126c945923a64680cb/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=510c6532bae9abc5beda1c126c945923a64680cb",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the scantxoutset rpc call.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n from decimal import Decimal\n import shutil\n@@ -67,6 +67,13 @@ def run_test(self):\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"addr(\" + addr_P2SH_SEGWIT + \")\", \"addr(\" + addr_LEGACY + \")\", \"addr(\" + addr_BECH32 + \")\"])['total_amount'], Decimal(\"0.007\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"addr(\" + addr_P2SH_SEGWIT + \")\", \"addr(\" + addr_LEGACY + \")\", \"combo(\" + pubk3 + \")\"])['total_amount'], Decimal(\"0.007\"))\n \n+        self.log.info(\"Test range validation.\")\n+        assert_raises_rpc_error(-8, \"End of range is too high\", self.nodes[0].scantxoutset, \"start\", [ {\"desc\": \"desc\", \"range\": -1}])\n+        assert_raises_rpc_error(-8, \"Range should be greater or equal than 0\", self.nodes[0].scantxoutset, \"start\", [ {\"desc\": \"desc\", \"range\": [-1, 10]}])\n+        assert_raises_rpc_error(-8, \"End of range is too high\", self.nodes[0].scantxoutset, \"start\", [ {\"desc\": \"desc\", \"range\": [(2 << 31 + 1) - 1000000, (2 << 31 + 1)]}])\n+        assert_raises_rpc_error(-8, \"Range specified as [begin,end] must not have begin after end\", self.nodes[0].scantxoutset, \"start\", [ {\"desc\": \"desc\", \"range\": [2, 1]}])\n+        assert_raises_rpc_error(-8, \"Range is too large\", self.nodes[0].scantxoutset, \"start\", [ {\"desc\": \"desc\", \"range\": [0, 1000001]}])\n+\n         self.log.info(\"Test extended key derivation.\")\n         # Run various scans, and verify that the sum of the amounts of the matches corresponds to the expected subset.\n         # Note that all amounts in the UTXO set are powers of 2 multiplied by 0.001 BTC, so each amounts uniquely identifies a subset."
      },
      {
        "sha": "939390ecfec25794fb0ed11fc6be2ab201135da3",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/510c6532bae9abc5beda1c126c945923a64680cb/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/510c6532bae9abc5beda1c126c945923a64680cb/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=510c6532bae9abc5beda1c126c945923a64680cb",
        "patch": "@@ -591,6 +591,21 @@ def run_test(self):\n                          key.p2sh_p2wpkh_addr,\n                          solvable=True)\n \n+        self.test_importmulti({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": -1},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importmulti({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [-1, 10]},\n+                              success=False, error_code=-8, error_message='Range should be greater or equal than 0')\n+\n+        self.test_importmulti({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [(2 << 31 + 1) - 1000000, (2 << 31 + 1)]},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importmulti({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [2, 1]},\n+                              success=False, error_code=-8, error_message='Range specified as [begin,end] must not have begin after end')\n+\n+        self.test_importmulti({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n+                              success=False, error_code=-8, error_message='Range is too large')\n+\n         # Test importing of a P2PKH address via descriptor\n         key = get_key(self.nodes[0])\n         self.log.info(\"Should import a p2pkh address from descriptor\")"
      }
    ]
  }
]