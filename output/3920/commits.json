[
  {
    "sha": "8c29273ff058f90dfa16a30b3d8457b842c0954d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzI5MjczZmYwNThmOTBkZmExNmEzMGIzZDg0NTdiODQyYzA5NTRk",
    "commit": {
      "author": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-03-21T05:45:47Z"
      },
      "committer": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-03-21T05:45:47Z"
      },
      "message": "[QT] Fixes feel when resizing the last column on tables (issue #2862)\n\nRe-submitting this pull request with a single commit.\n\nThis patch introduces a GUIUtil class that is used when setting up the 2 tables we have so far on the Qt-GUI.\nIn the past you could only resize the last column, which has BTC amounts from the right border of the column header, something that was rather unnatural.\n\nIf a new table were ever to be added to the interface, fixing the last columns resizing behavior is rather simple. Just look at how we initialize here a TableViewLastColumnResizingFixer object when setting up the table header's behavior, and then how we override the resize event of the component (can be the table, or the dialog) and we invoke columnResizingFixer->stretchColumnWidth(columnIndex);",
      "tree": {
        "sha": "d6e52183eb06a512319343373ddc4a11e56b350b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6e52183eb06a512319343373ddc4a11e56b350b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c29273ff058f90dfa16a30b3d8457b842c0954d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c29273ff058f90dfa16a30b3d8457b842c0954d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c29273ff058f90dfa16a30b3d8457b842c0954d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c29273ff058f90dfa16a30b3d8457b842c0954d/comments",
    "author": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6539cfc583c5963fbb3138b99c1a8677970e0305",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6539cfc583c5963fbb3138b99c1a8677970e0305",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6539cfc583c5963fbb3138b99c1a8677970e0305"
      }
    ],
    "stats": {
      "total": 244,
      "additions": 217,
      "deletions": 27
    },
    "files": [
      {
        "sha": "4a4fece3e144c350f10ab867cd019efc9539888f",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c29273ff058f90dfa16a30b3d8457b842c0954d/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c29273ff058f90dfa16a30b3d8457b842c0954d/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=8c29273ff058f90dfa16a30b3d8457b842c0954d",
        "patch": "@@ -379,6 +379,121 @@ bool ToolTipToRichTextFilter::eventFilter(QObject *obj, QEvent *evt)\n     return QObject::eventFilter(obj, evt);\n }\n \n+void TableViewLastColumnResizingFixer::connectViewHeadersSignals()\n+{\n+    connect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized(int,int,int)));\n+    connect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n+}\n+\n+//we need to disconnect these while handling the resize events, otherwise we can enter infinite loops\n+void TableViewLastColumnResizingFixer::disconnectViewHeadersSignals()\n+{\n+    disconnect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized(int,int,int)));\n+    disconnect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n+}\n+\n+//setup the resize mode, handles compatibility for QT5 and below as the method signatures changed. (refactored here for readability)\n+void TableViewLastColumnResizingFixer::setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode)\n+{\n+#if QT_VERSION < 0x050000\n+    tableView->horizontalHeader()->setResizeMode(logicalIndex, resizeMode);\n+#else\n+    tableView->horizontalHeader()->setSectionResizeMode(logicalIndex, resizeMode);\n+#endif\n+}\n+\n+void TableViewLastColumnResizingFixer::resizeColumn(int nColumnIndex, int width) {\n+    tableView->setColumnWidth(nColumnIndex, width);\n+    tableView->horizontalHeader()->resizeSection(nColumnIndex, width);\n+}\n+\n+int TableViewLastColumnResizingFixer::getColumnsWidth()\n+{\n+    int nColumnsWidthSum = 0;\n+    for (int i = 0; i < columnCount; i++)\n+    {\n+        nColumnsWidthSum += tableView->horizontalHeader()->sectionSize(i);\n+    }\n+    return nColumnsWidthSum;\n+}\n+\n+int TableViewLastColumnResizingFixer::getAvailableWidthForColumn(int column)\n+{\n+    int nResult = lastColumnMinimumWidth;\n+    int nTableWidth = tableView->horizontalHeader()->width();\n+\n+    if (nTableWidth > 0)\n+    {\n+        int nOtherColsWidth = getColumnsWidth() - tableView->horizontalHeader()->sectionSize(column);\n+        nResult = std::max(nResult, nTableWidth - nOtherColsWidth);\n+    }\n+\n+    return nResult;\n+}\n+\n+//make sure we don't make the columns wider than the table's viewport's width.\n+void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()\n+{\n+    disconnectViewHeadersSignals();\n+    resizeColumn(lastColumnIndex, getAvailableWidthForColumn(lastColumnIndex));\n+    connectViewHeadersSignals();\n+\n+    int nTableWidth = tableView->horizontalHeader()->width();\n+    int nColsWidth = getColumnsWidth();\n+    if (nColsWidth > nTableWidth)\n+    {\n+        resizeColumn(secondToLastColumnIndex,getAvailableWidthForColumn(secondToLastColumnIndex));\n+    }\n+}\n+\n+//make column use all the space available, useful during window resizing.\n+void TableViewLastColumnResizingFixer::stretchColumnWidth(int column) {\n+    disconnectViewHeadersSignals();\n+    resizeColumn(column, getAvailableWidthForColumn(column));\n+    connectViewHeadersSignals();\n+}\n+\n+//when a section is resized this is a slot-proxy for ajustAmountColumnWidth()\n+void TableViewLastColumnResizingFixer::on_sectionResized(int logicalIndex, int oldSize, int newSize)\n+{\n+    adjustTableColumnsWidth();\n+    int remainingWidth = getAvailableWidthForColumn(logicalIndex);\n+    if (newSize > remainingWidth)\n+    {\n+       resizeColumn(logicalIndex, remainingWidth);\n+    }\n+}\n+\n+//when the table's geometry is ready, we manually perform the Stretch of the \"Message\" column\n+//as the \"Stretch\" resize mode does not allow for interactive resizing.\n+void TableViewLastColumnResizingFixer::on_geometriesChanged()\n+{\n+    if ((getColumnsWidth() - this->tableView->horizontalHeader()->width()) != 0)\n+    {\n+        disconnectViewHeadersSignals();\n+        resizeColumn(secondToLastColumnIndex, getAvailableWidthForColumn(secondToLastColumnIndex));\n+        connectViewHeadersSignals();\n+    }\n+}\n+\n+/**\n+ * Initializes all internal variables and prepares the\n+ * the resize modes of the last 2 columns of the table and\n+ */\n+TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth) :\n+        tableView(table),\n+        lastColumnMinimumWidth(lastColMinimumWidth),\n+        allColumnsMinimumWidth(allColsMinimumWidth)\n+{\n+    columnCount = tableView->horizontalHeader()->count();\n+    lastColumnIndex = columnCount - 1;\n+    secondToLastColumnIndex = columnCount - 2;\n+    tableView->horizontalHeader()->setMinimumSectionSize(allColumnsMinimumWidth);\n+    setViewHeaderResizeMode(secondToLastColumnIndex, QHeaderView::Interactive);\n+    setViewHeaderResizeMode(lastColumnIndex, QHeaderView::Interactive);\n+}\n+\n+\n #ifdef WIN32\n boost::filesystem::path static StartupShortcutPath()\n {"
      },
      {
        "sha": "26202e8d41160dee298037f12d67d30263ee275a",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c29273ff058f90dfa16a30b3d8457b842c0954d/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c29273ff058f90dfa16a30b3d8457b842c0954d/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=8c29273ff058f90dfa16a30b3d8457b842c0954d",
        "patch": "@@ -8,6 +8,8 @@\n #include <QMessageBox>\n #include <QObject>\n #include <QString>\n+#include <QTableView>\n+#include <QHeaderView>\n \n class QValidatedLineEdit;\n class SendCoinsRecipient;\n@@ -116,6 +118,44 @@ namespace GUIUtil\n         int size_threshold;\n     };\n \n+    /**\n+     * Makes a QTableView last column feel as if it was being resized from its left border.\n+     * Also makes sure the column widths are never larger than the table's viewport.\n+     * In Qt, all columns are resizable from the right, but it's not intuitive resizing the last column from the right.\n+     * Usually our second to last columns behave as if stretched, and when on strech mode, columns aren't resizable\n+     * interactively or programatically.\n+     *\n+     * This helper object takes care of this issue.\n+     *\n+     */\n+    class TableViewLastColumnResizingFixer: public QObject\n+    {\n+    Q_OBJECT\n+    public:\n+        TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth);\n+        void stretchColumnWidth(int column);\n+\n+    private:\n+        QTableView* tableView;\n+        int lastColumnMinimumWidth;\n+        int allColumnsMinimumWidth;\n+        int lastColumnIndex;\n+        int columnCount;\n+        int secondToLastColumnIndex;\n+\n+        void adjustTableColumnsWidth();\n+        int getAvailableWidthForColumn(int column);\n+        int getColumnsWidth();\n+        void connectViewHeadersSignals();\n+        void disconnectViewHeadersSignals();\n+        void setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode);\n+        void resizeColumn(int nColumnIndex, int width);\n+\n+    private slots:\n+        void on_sectionResized(int logicalIndex, int oldSize, int newSize);\n+        void on_geometriesChanged();\n+    };\n+\n     bool GetStartOnSystemStartup();\n     bool SetStartOnSystemStartup(bool fAutoStart);\n "
      },
      {
        "sha": "f630324947cb81327aae2051a654332d66ea4420",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 17,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c29273ff058f90dfa16a30b3d8457b842c0954d/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c29273ff058f90dfa16a30b3d8457b842c0954d/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=8c29273ff058f90dfa16a30b3d8457b842c0954d",
        "patch": "@@ -55,34 +55,35 @@ ReceiveCoinsDialog::ReceiveCoinsDialog(QWidget *parent) :\n     connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));\n }\n \n+\n+\n void ReceiveCoinsDialog::setModel(WalletModel *model)\n {\n     this->model = model;\n \n     if(model && model->getOptionsModel())\n     {\n-        connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n-        updateDisplayUnit();\n-\n-        ui->recentRequestsView->setModel(model->getRecentRequestsTableModel());\n-        ui->recentRequestsView->setAlternatingRowColors(true);\n-        ui->recentRequestsView->setSelectionBehavior(QAbstractItemView::SelectRows);\n-        ui->recentRequestsView->setSelectionMode(QAbstractItemView::ContiguousSelection);\n-        ui->recentRequestsView->horizontalHeader()->resizeSection(RecentRequestsTableModel::Date, 130);\n-        ui->recentRequestsView->horizontalHeader()->resizeSection(RecentRequestsTableModel::Label, 120);\n-#if QT_VERSION < 0x050000\n-        ui->recentRequestsView->horizontalHeader()->setResizeMode(RecentRequestsTableModel::Message, QHeaderView::Stretch);\n-#else\n-        ui->recentRequestsView->horizontalHeader()->setSectionResizeMode(RecentRequestsTableModel::Message, QHeaderView::Stretch);\n-#endif\n-        ui->recentRequestsView->horizontalHeader()->resizeSection(RecentRequestsTableModel::Amount, 100);\n-\n         model->getRecentRequestsTableModel()->sort(RecentRequestsTableModel::Date, Qt::DescendingOrder);\n-\n+        connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n         connect(ui->recentRequestsView->selectionModel(),\n             SIGNAL(selectionChanged(QItemSelection, QItemSelection)),\n             this,\n             SLOT(on_recentRequestsView_selectionChanged(QItemSelection, QItemSelection)));\n+        updateDisplayUnit();\n+\n+        QTableView* tableView = ui->recentRequestsView;\n+\n+        tableView->verticalHeader()->hide();\n+        tableView->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);\n+        tableView->setModel(model->getRecentRequestsTableModel());\n+        tableView->setAlternatingRowColors(true);\n+        tableView->setSelectionBehavior(QAbstractItemView::SelectRows);\n+        tableView->setSelectionMode(QAbstractItemView::ContiguousSelection);\n+        tableView->setColumnWidth(RecentRequestsTableModel::Date, DATE_COLUMN_WIDTH);\n+        tableView->setColumnWidth(RecentRequestsTableModel::Label, LABEL_COLUMN_WIDTH);\n+\n+        //(last 2 columns are set when the table geometry is ready) by the columnResizingFixer.\n+        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(tableView, AMOUNT_MINIMUM_COLUMN_WIDTH, DATE_COLUMN_WIDTH);\n     }\n }\n \n@@ -200,6 +201,12 @@ void ReceiveCoinsDialog::on_removeRequestButton_clicked()\n     model->getRecentRequestsTableModel()->removeRows(firstIndex.row(), selection.length(), firstIndex.parent());\n }\n \n+//We override the virtual resizeEvent of the QWidget to adjust tablet's column sizes as the table's width is proportional to the dialog's.\n+void ReceiveCoinsDialog::resizeEvent(QResizeEvent* event) {\n+  QWidget::resizeEvent(event);\n+  columnResizingFixer->stretchColumnWidth(RecentRequestsTableModel::Message);\n+}\n+\n void ReceiveCoinsDialog::keyPressEvent(QKeyEvent *event)\n {\n     if (event->key() == Qt::Key_Return)"
      },
      {
        "sha": "1d051d9324358407155033e4b61644b0f765b792",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c29273ff058f90dfa16a30b3d8457b842c0954d/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c29273ff058f90dfa16a30b3d8457b842c0954d/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=8c29273ff058f90dfa16a30b3d8457b842c0954d",
        "patch": "@@ -10,7 +10,9 @@\n #include <QMenu>\n #include <QPoint>\n #include <QVariant>\n+#include <QHeaderView>\n #include <QItemSelection>\n+#include \"guiutil.h\"\n \n namespace Ui {\n     class ReceiveCoinsDialog;\n@@ -28,11 +30,18 @@ class ReceiveCoinsDialog : public QDialog\n     Q_OBJECT\n \n public:\n+    enum ColumnWidths {\n+      DATE_COLUMN_WIDTH = 130,\n+      LABEL_COLUMN_WIDTH = 120,\n+      AMOUNT_MINIMUM_COLUMN_WIDTH = 160,\n+      MINIMUM_COLUMN_WIDTH = 130\n+    };\n+\n     explicit ReceiveCoinsDialog(QWidget *parent = 0);\n     ~ReceiveCoinsDialog();\n-\n     void setModel(WalletModel *model);\n \n+\n public slots:\n     void clear();\n     void reject();\n@@ -43,9 +52,11 @@ public slots:\n \n private:\n     Ui::ReceiveCoinsDialog *ui;\n+    GUIUtil::TableViewLastColumnResizingFixer *columnResizingFixer;\n     WalletModel *model;\n     QMenu *contextMenu;\n     void copyColumnToClipboard(int column);\n+    virtual void resizeEvent(QResizeEvent* event);\n \n private slots:\n     void on_receiveButton_clicked();"
      },
      {
        "sha": "d178efe8d58071de142e00aa608a7c295f54dcee",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c29273ff058f90dfa16a30b3d8457b842c0954d/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c29273ff058f90dfa16a30b3d8457b842c0954d/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=8c29273ff058f90dfa16a30b3d8457b842c0954d",
        "patch": "@@ -168,6 +168,7 @@ void TransactionView::setModel(WalletModel *model)\n \n         transactionProxyModel->setSortRole(Qt::EditRole);\n \n+        transactionView->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);\n         transactionView->setModel(transactionProxyModel);\n         transactionView->setAlternatingRowColors(true);\n         transactionView->setSelectionBehavior(QAbstractItemView::SelectRows);\n@@ -176,15 +177,12 @@ void TransactionView::setModel(WalletModel *model)\n         transactionView->sortByColumn(TransactionTableModel::Status, Qt::DescendingOrder);\n         transactionView->verticalHeader()->hide();\n \n-        transactionView->horizontalHeader()->resizeSection(TransactionTableModel::Status, 23);\n-        transactionView->horizontalHeader()->resizeSection(TransactionTableModel::Date, 120);\n-        transactionView->horizontalHeader()->resizeSection(TransactionTableModel::Type, 120);\n-#if QT_VERSION < 0x050000\n-        transactionView->horizontalHeader()->setResizeMode(TransactionTableModel::ToAddress, QHeaderView::Stretch);\n-#else\n-        transactionView->horizontalHeader()->setSectionResizeMode(TransactionTableModel::ToAddress, QHeaderView::Stretch);\n-#endif\n-        transactionView->horizontalHeader()->resizeSection(TransactionTableModel::Amount, 100);\n+        transactionView->setColumnWidth(TransactionTableModel::Status, STATUS_COLUMN_WIDTH);\n+        transactionView->setColumnWidth(TransactionTableModel::Date, DATE_COLUMN_WIDTH);\n+        transactionView->setColumnWidth(TransactionTableModel::Type, TYPE_COLUMN_WIDTH);\n+        transactionView->setColumnWidth(TransactionTableModel::Amount, AMOUNT_MINIMUM_COLUMN_WIDTH);\n+\n+        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(transactionView, AMOUNT_MINIMUM_COLUMN_WIDTH, MINIMUM_COLUMN_WIDTH);\n     }\n }\n \n@@ -439,3 +437,9 @@ void TransactionView::focusTransaction(const QModelIndex &idx)\n     transactionView->setCurrentIndex(targetIdx);\n     transactionView->setFocus();\n }\n+\n+//We override the virtual resizeEvent of the QWidget to adjust tablet's column sizes as the table's width is proportional to the dialog's.\n+void TransactionView::resizeEvent(QResizeEvent* event) {\n+  QWidget::resizeEvent(event);\n+  columnResizingFixer->stretchColumnWidth(TransactionTableModel::ToAddress);\n+}"
      },
      {
        "sha": "fe8e205d6c99933cfc0a7622a26f0ecc2ec55dfc",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c29273ff058f90dfa16a30b3d8457b842c0954d/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c29273ff058f90dfa16a30b3d8457b842c0954d/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=8c29273ff058f90dfa16a30b3d8457b842c0954d",
        "patch": "@@ -6,6 +6,7 @@\n #define TRANSACTIONVIEW_H\n \n #include <QWidget>\n+#include \"guiutil.h\"\n \n class TransactionFilterProxy;\n class WalletModel;\n@@ -44,6 +45,14 @@ class TransactionView : public QWidget\n         Range\n     };\n \n+    enum ColumnWidths {\n+      STATUS_COLUMN_WIDTH = 23,\n+      DATE_COLUMN_WIDTH = 120,\n+      TYPE_COLUMN_WIDTH = 120,\n+      AMOUNT_MINIMUM_COLUMN_WIDTH = 120,\n+      MINIMUM_COLUMN_WIDTH = 23\n+    };\n+\n private:\n     WalletModel *model;\n     TransactionFilterProxy *transactionProxyModel;\n@@ -62,6 +71,10 @@ class TransactionView : public QWidget\n \n     QWidget *createDateRangeWidget();\n \n+    GUIUtil::TableViewLastColumnResizingFixer *columnResizingFixer;\n+\n+    virtual void resizeEvent(QResizeEvent* event);\n+\n private slots:\n     void contextualMenu(const QPoint &);\n     void dateRangeChanged();"
      }
    ]
  }
]