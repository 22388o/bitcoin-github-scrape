[
  {
    "sha": "c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmVhNGRkYWZjZjQwZWQ4OTQ5NzRlMmU1ZjIyYmQ1NjI1ZjVjMWNj",
    "commit": {
      "author": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-01-19T13:05:44Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-06-24T22:06:30Z"
      },
      "message": "Cache hashes",
      "tree": {
        "sha": "a5463edd5a89e9ab00658eb94649456abe577edc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5463edd5a89e9ab00658eb94649456abe577edc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cdc54b4b62d36e4e226da9984bf7a1c34944216",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cdc54b4b62d36e4e226da9984bf7a1c34944216",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cdc54b4b62d36e4e226da9984bf7a1c34944216"
      }
    ],
    "stats": {
      "total": 248,
      "additions": 207,
      "deletions": 41
    },
    "files": [
      {
        "sha": "ddcbdf1475455aea5ac740d22ee544235ffce156",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 11,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
        "patch": "@@ -1492,14 +1492,16 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             scriptVerifyFlags = GetArg(\"-promiscuousmempoolflags\", scriptVerifyFlags);\n         }\n \n+        CachedHashesMap cachedHashesMap;\n+\n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true)) {\n+        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true, cachedHashesMap)) {\n             // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n             // need to turn both off, and compare against just turning off CLEANSTACK\n             // to see if the failure is specifically due to witness validation.\n-            if (CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true) &&\n-                !CheckInputs(tx, state, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true)) {\n+            if (CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, cachedHashesMap) &&\n+                !CheckInputs(tx, state, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, cachedHashesMap)) {\n                 // Only the witness is wrong, so the transaction itself may be fine.\n                 state.SetCorruptionPossible();\n             }\n@@ -1515,7 +1517,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // There is a similar check in CreateNewBlock() to prevent creating\n         // invalid blocks, however allowing such transactions into the mempool\n         // can be exploited as a DoS attack.\n-        if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n+        if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true, cachedHashesMap))\n         {\n             return error(\"%s: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s, %s\",\n                 __func__, hash.ToString(), FormatStateMessage(state));\n@@ -1912,10 +1914,22 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     const CScriptWitness *witness = (nIn < ptxTo->wit.vtxinwit.size()) ? &ptxTo->wit.vtxinwit[nIn].scriptWitness : NULL;\n-    if (!VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, amount, cacheStore), &error)) {\n-        return false;\n+    CachedHashes cachedHashes;\n+    int version;\n+    std::vector<unsigned char> program;\n+    // if the cache map is available, and we get a cache miss, then we'll need to update the cache later\n+    // if the scriptPubKey is not witness program, no need for cachedHashes, so do not read the map (it would acquire the lock needlessly)\n+    bool addCachedHashesToMap = cachedHashesMap != NULL &&\n+                                scriptPubKey.IsWitnessProgram(version, program) &&\n+                                !cachedHashesMap->TryGet(this->ptxTo->GetHash(), &cachedHashes);\n+    bool result = VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, amount, cacheStore, cachedHashes), &error);\n+    // do not update the cache if cachedHashes is still empty, it can happen if the evaluation ends before any segwit CheckSig operation could run\n+    addCachedHashesToMap &= !cachedHashes.IsEmpty();\n+    if(addCachedHashesToMap)\n+    {\n+        cachedHashesMap->TrySet(this->ptxTo->GetHash(), cachedHashes);\n     }\n-    return true;\n+    return result;\n }\n \n int GetSpendHeight(const CCoinsViewCache& inputs)\n@@ -1971,7 +1985,7 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n }\n }// namespace Consensus\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, CachedHashesMap& cachedHashesMap, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n     {\n@@ -1998,7 +2012,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                 assert(coins);\n \n                 // Verify signature\n-                CScriptCheck check(*coins, tx, i, flags, cacheStore);\n+                CScriptCheck check(*coins, tx, i, flags, cacheStore, &cachedHashesMap);\n                 if (pvChecks) {\n                     pvChecks->push_back(CScriptCheck());\n                     check.swap(pvChecks->back());\n@@ -2011,7 +2025,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         // avoid splitting the network between upgraded and\n                         // non-upgraded nodes.\n                         CScriptCheck check2(*coins, tx, i,\n-                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheStore);\n+                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheStore, &cachedHashesMap);\n                         if (check2())\n                             return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n                     }\n@@ -2471,6 +2485,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n     blockundo.vtxundo.reserve(block.vtx.size() - 1);\n+    CachedHashesMap cachedHashesMap;\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n         const CTransaction &tx = block.vtx[i];\n@@ -2523,7 +2538,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n             std::vector<CScriptCheck> vChecks;\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, nScriptCheckThreads ? &vChecks : NULL))\n+            if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, cachedHashesMap, nScriptCheckThreads ? &vChecks : NULL))\n                 return error(\"ConnectBlock(): CheckInputs on %s failed with %s\",\n                     tx.GetHash().ToString(), FormatStateMessage(state));\n             control.Add(vChecks);"
      },
      {
        "sha": "43adddf3d239849779c2db662581961c5d00b5e2",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
        "patch": "@@ -38,6 +38,8 @@ class CScriptCheck;\n class CTxMemPool;\n class CValidationInterface;\n class CValidationState;\n+class CachedHashes;\n+class CachedHashesMap;\n \n struct CNodeStateStats;\n struct LockPoints;\n@@ -348,7 +350,7 @@ int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& i\n  * instead of being performed inline.\n  */\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, bool fScriptChecks,\n-                 unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks = NULL);\n+                 unsigned int flags, bool cacheStore, CachedHashesMap& cachedHashesMap, std::vector<CScriptCheck> *pvChecks = NULL);\n \n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n@@ -409,12 +411,13 @@ class CScriptCheck\n     unsigned int nFlags;\n     bool cacheStore;\n     ScriptError error;\n+    CachedHashesMap *cachedHashesMap;\n \n public:\n     CScriptCheck(): amount(0), ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n-    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn) :\n+    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, CachedHashesMap* cachedHashesMapIn) :\n         scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey), amount(txFromIn.vout[txToIn.vin[nInIn].prevout.n].nValue),\n-        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR) { }\n+        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR), cachedHashesMap(cachedHashesMapIn) { }\n \n     bool operator()();\n \n@@ -426,6 +429,7 @@ class CScriptCheck\n         std::swap(nFlags, check.nFlags);\n         std::swap(cacheStore, check.cacheStore);\n         std::swap(error, check.error);\n+        std::swap(cachedHashesMap, check.cachedHashesMap);\n     }\n \n     ScriptError GetScriptError() const { return error; }"
      },
      {
        "sha": "37de2170eefe34cec6cb9fda7a2d37e79df28787",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
        "patch": "@@ -84,8 +84,8 @@ static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptP\n \n         // Regardless of the verification result, the tx did not error.\n         set_error(err, bitcoinconsensus_ERR_OK);\n-\n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, amount), NULL);\n+        CachedHashes cachedHashes;\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, amount, cachedHashes), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "e43e7c2e1a3bdf58133952ccbc10dbc956f9be71",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 17,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
        "patch": "@@ -1110,35 +1110,46 @@ class CTransactionSignatureSerializer {\n \n } // anon namespace\n \n-uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion)\n+uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, CachedHashes* cache)\n {\n+    CachedHashes empty;\n+    if(cache == NULL)\n+    {\n+        cache = &empty;\n+    }\n+\n     if (sigversion == SIGVERSION_WITNESS_V0) {\n+        if(cache->IsEmpty())\n+        {\n+            CHashWriter ssPrevouts(SER_GETHASH, 0);\n+            CHashWriter ssSequence(SER_GETHASH, 0);\n+            for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n+                ssPrevouts << txTo.vin[n].prevout;\n+                ssSequence << txTo.vin[n].nSequence;\n+            }\n+            cache->hashPrevouts = ssPrevouts.GetHash();\n+            cache->hashSequence = ssSequence.GetHash();\n+\n+            CHashWriter ssOutputs(SER_GETHASH, 0);\n+            for (unsigned int n = 0; n < txTo.vout.size(); n++) {\n+                ssOutputs << txTo.vout[n];\n+            }\n+            cache->hashOutputs = ssOutputs.GetHash();\n+        }\n         uint256 hashPrevouts;\n         uint256 hashSequence;\n         uint256 hashOutputs;\n \n         if (!(nHashType & SIGHASH_ANYONECANPAY)) {\n-            CHashWriter ss(SER_GETHASH, 0);\n-            for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n-                ss << txTo.vin[n].prevout;\n-            }\n-            hashPrevouts = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+            hashPrevouts = cache->hashPrevouts;\n         }\n \n         if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {\n-            CHashWriter ss(SER_GETHASH, 0);\n-            for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n-                ss << txTo.vin[n].nSequence;\n-            }\n-            hashSequence = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+            hashSequence = cache->hashSequence;\n         }\n \n         if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {\n-            CHashWriter ss(SER_GETHASH, 0);\n-            for (unsigned int n = 0; n < txTo.vout.size(); n++) {\n-                ss << txTo.vout[n];\n-            }\n-            hashOutputs = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+            hashOutputs = cache->hashOutputs;\n         } else if ((nHashType & 0x1f) == SIGHASH_SINGLE && nIn < txTo.vout.size()) {\n             CHashWriter ss(SER_GETHASH, 0);\n             ss << txTo.vout[nIn];\n@@ -1209,7 +1220,7 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n-    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);\n+    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion, this->cachedHashes);\n \n     if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;"
      },
      {
        "sha": "85053ae243c5744659d8089d79259bdd200d89bc",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
        "patch": "@@ -98,13 +98,30 @@ enum\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n+class CachedHashes\n+{\n+public:\n+    uint256 hashPrevouts,hashSequence,hashOutputs;\n+    bool IsEmpty() const\n+    {\n+        CachedHashes empty;\n+        return (*this) == empty;\n+    }\n+    bool operator==(const CachedHashes& rhs) const\n+    {\n+        return hashPrevouts == rhs.hashPrevouts &&\n+               hashSequence == rhs.hashSequence &&\n+               hashOutputs == rhs.hashOutputs;\n+    }\n+};\n+\n enum SigVersion\n {\n     SIGVERSION_BASE = 0,\n     SIGVERSION_WITNESS_V0 = 1,\n };\n \n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion);\n+uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, CachedHashes* cache = NULL);\n \n class BaseSignatureChecker\n {\n@@ -133,12 +150,14 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n     const CTransaction* txTo;\n     unsigned int nIn;\n     const CAmount amount;\n+    mutable CachedHashes* cachedHashes;\n \n protected:\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn) {}\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), cachedHashes(NULL) {}\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, CachedHashes& cachedHashesIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), cachedHashes(&cachedHashesIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const;\n     bool CheckLockTime(const CScriptNum& nLockTime) const;\n     bool CheckSequence(const CScriptNum& nSequence) const;"
      },
      {
        "sha": "bc6e2f40e674a6eb74e3479d06cb2cfb565f0f85",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_SCRIPT_SIGCACHE_H\n \n #include \"script/interpreter.h\"\n+#include \"sync.h\"\n \n #include <vector>\n \n@@ -16,13 +17,40 @@ static const unsigned int DEFAULT_MAX_SIG_CACHE_SIZE = 40;\n \n class CPubKey;\n \n+/**\n+ * A thread safe map which caches mid state witness signature hash calculation by transaction id\n+ */\n+class CachedHashesMap\n+{\n+private:\n+    std::map<uint256, CachedHashes> map;\n+    CCriticalSection cs;\n+public:\n+    bool TryGet(uint256 txId, CachedHashes* hashes)\n+    {\n+        LOCK(cs);\n+        if(!map.count(txId))\n+            return false;\n+        *hashes = map[txId];\n+        return true;\n+    }\n+    bool TrySet(uint256 txId, const CachedHashes& hashes)\n+    {\n+        LOCK(cs);\n+        if(map.count(txId))\n+            return false;\n+        map[txId] = hashes;\n+        return true;\n+    }\n+};\n+\n class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n {\n private:\n     bool store;\n \n public:\n-    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount, bool storeIn) : TransactionSignatureChecker(txToIn, nInIn, amount), store(storeIn) {}\n+    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount, bool storeIn, CachedHashes& cachedHashesIn) : TransactionSignatureChecker(txToIn, nInIn, amount, cachedHashesIn), store(storeIn) {}\n \n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };"
      },
      {
        "sha": "de338d4a105e3830117c6d6cb2d9b48ddfab3695",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
        "patch": "@@ -16,6 +16,7 @@\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n+#include \"script/sigcache.h\"\n \n using namespace std;\n \n@@ -105,14 +106,15 @@ BOOST_AUTO_TEST_CASE(sign)\n     {\n         BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0, SIGHASH_ALL), strprintf(\"SignSignature %d\", i));\n     }\n+    CachedHashesMap cachedHashesMap;\n     // All of the above should be OK, and the txTos have valid signatures\n     // Check to make sure signature verification fails if we use the wrong ScriptSig:\n     for (int i = 0; i < 8; i++)\n         for (int j = 0; j < 8; j++)\n         {\n             CScript sigSave = txTo[i].vin[0].scriptSig;\n             txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n-            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false)();\n+            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false, &cachedHashesMap)();\n             if (i == j)\n                 BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             else"
      },
      {
        "sha": "7022e24cd82000769222020344a1ff1efabcae51",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 87,
        "deletions": 2,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
        "patch": "@@ -7,6 +7,7 @@\n #include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n+#include \"checkqueue.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"key.h\"\n@@ -17,6 +18,7 @@\n #include \"script/sign.h\"\n #include \"script/script_error.h\"\n #include \"script/standard.h\"\n+#include \"script/sigcache.h\"\n #include \"utilstrencodings.h\"\n \n #include <map>\n@@ -153,6 +155,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n             BOOST_CHECK(state.IsValid());\n \n+            CachedHashes cachedHashes;\n             for (unsigned int i = 0; i < tx.vin.size(); i++)\n             {\n                 if (!mapprevOutScriptPubKeys.count(tx.vin[i].prevout))\n@@ -168,7 +171,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 const CScriptWitness *witness = (i < tx.wit.vtxinwit.size()) ? &tx.wit.vtxinwit[i].scriptWitness : NULL;\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 witness, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err),\n+                                                 witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, cachedHashes), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -237,6 +240,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             CValidationState state;\n             fValid = CheckTransaction(tx, state) && state.IsValid();\n \n+            CachedHashes cachedHashes;\n             for (unsigned int i = 0; i < tx.vin.size() && fValid; i++)\n             {\n                 if (!mapprevOutScriptPubKeys.count(tx.vin[i].prevout))\n@@ -252,7 +256,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                 }\n                 const CScriptWitness *witness = (i < tx.wit.vtxinwit.size()) ? &tx.wit.vtxinwit[i].scriptWitness : NULL;\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      witness, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err);\n+                                      witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, cachedHashes), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));\n@@ -419,8 +423,89 @@ void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)\n     script = PushAll(stack);\n }\n \n+BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n+    CMutableTransaction mtx;\n+    mtx.nVersion = 1;\n+\n+    CKey key;\n+    key.MakeNewKey(false);\n+    CBasicKeyStore keystore;\n+    keystore.AddKeyPubKey(key, key.GetPubKey());\n+    CKeyID hash = key.GetPubKey().GetID();\n+    CScript scriptPubKey = CScript() << OP_0 << std::vector<unsigned char>(hash.begin(), hash.end());\n+\n+    vector<int> sigHashes;\n+    sigHashes.push_back(SIGHASH_NONE | SIGHASH_ANYONECANPAY);\n+    sigHashes.push_back(SIGHASH_SINGLE | SIGHASH_ANYONECANPAY);\n+    sigHashes.push_back(SIGHASH_ALL | SIGHASH_ANYONECANPAY);\n+    sigHashes.push_back(SIGHASH_NONE);\n+    sigHashes.push_back(SIGHASH_SINGLE);\n+    sigHashes.push_back(SIGHASH_ALL);\n+\n+    // create a big transaction of 4500 inputs signed by the same key\n+    for(uint32_t ij = 0; ij < 4500; ij++) {\n+        uint32_t i = mtx.vin.size();\n+        uint256 prevId;\n+        prevId.SetHex(\"0000000000000000000000000000000000000000000000000000000000000100\");\n+        COutPoint outpoint(prevId, i);\n+\n+        mtx.vin.resize(mtx.vin.size() + 1);\n+        mtx.vin[i].prevout = outpoint;\n+        mtx.vin[i].scriptSig = CScript();\n+\n+        mtx.vout.resize(mtx.vout.size() + 1);\n+        mtx.vout[i].nValue = 1000;\n+        mtx.vout[i].scriptPubKey = CScript() << OP_1;\n+    }\n+\n+    // sign all inputs\n+    for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n+        bool hashSigned = SignSignature(keystore, scriptPubKey, mtx, i, 1000, sigHashes.at(i % sigHashes.size()));\n+        assert(hashSigned);\n+    }\n+\n+    CTransaction tx;\n+    CDataStream ssout(SER_NETWORK, PROTOCOL_VERSION);\n+    WithOrVersion(&ssout, 0) << mtx;\n+    WithOrVersion(&ssout, 0) >> tx;\n+\n+    // check all inputs concurrently, with the cache\n+    CachedHashesMap cachedHashesMap;\n+    boost::thread_group threadGroup;\n+    CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n+    CCheckQueueControl<CScriptCheck> control(&scriptcheckqueue);\n+\n+    for (int i=0; i<20; i++)\n+        threadGroup.create_thread(boost::bind(&CCheckQueue<CScriptCheck>::Thread, boost::ref(scriptcheckqueue)));\n+\n+    CCoins coins;\n+    coins.nVersion = 1;\n+    coins.fCoinBase = false;\n+    for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n+        CTxOut txout;\n+        txout.nValue = 1000;\n+        txout.scriptPubKey = scriptPubKey;\n+        coins.vout.push_back(txout);\n+    }\n+\n+    for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n+        std::vector<CScriptCheck> vChecks;\n+        CScriptCheck check(coins, tx, i, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false, &cachedHashesMap);\n+        vChecks.push_back(CScriptCheck());\n+        check.swap(vChecks.back());\n+        control.Add(vChecks);\n+    }\n+\n+    bool controlCheck = control.Wait();\n+    assert(controlCheck);\n+\n+    threadGroup.interrupt_all();\n+    threadGroup.join_all();\n+}\n+\n BOOST_AUTO_TEST_CASE(test_witness)\n {\n+    ScriptError serror;\n     CBasicKeyStore keystore, keystore2;\n     CKey key1, key2, key3, key1L, key2L;\n     CPubKey pubkey1, pubkey2, pubkey3, pubkey1L, pubkey2L;"
      },
      {
        "sha": "4ab4469085f0f094009044384155eae47c545825",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
        "patch": "@@ -8,6 +8,7 @@\n #include \"clientversion.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"script/sigcache.h\"\n #include \"main.h\"\n #include \"policy/policy.h\"\n #include \"policy/fees.h\"\n@@ -658,6 +659,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n \n+    CachedHashesMap cachedHashesMap;\n     LOCK(cs);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n@@ -737,7 +739,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             waitingOnDependants.push_back(&(*it));\n         else {\n             CValidationState state;\n-            assert(CheckInputs(tx, state, mempoolDuplicate, false, 0, false, NULL));\n+            assert(CheckInputs(tx, state, mempoolDuplicate, false, 0, false, cachedHashesMap, NULL));\n             UpdateCoins(tx, mempoolDuplicate, 1000000);\n         }\n     }\n@@ -751,7 +753,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             stepsSinceLastRemove++;\n             assert(stepsSinceLastRemove < waitingOnDependants.size());\n         } else {\n-            assert(CheckInputs(entry->GetTx(), state, mempoolDuplicate, false, 0, false, NULL));\n+            assert(CheckInputs(entry->GetTx(), state, mempoolDuplicate, false, 0, false, cachedHashesMap, NULL));\n             UpdateCoins(entry->GetTx(), mempoolDuplicate, 1000000);\n             stepsSinceLastRemove = 0;\n         }"
      }
    ]
  },
  {
    "sha": "dc188d82da8925c6b6f08a12a3ff2c1fc4d6f983",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzE4OGQ4MmRhODkyNWM2YjZmMDhhMTJhM2ZmMmMxZmM0ZDZmOTgz",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-06-28T09:23:19Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-06-28T09:23:19Z"
      },
      "message": "nits and micro optimisation for the cache hash map",
      "tree": {
        "sha": "dec7b5379b6af753a511b8a1dbc0a84358bce422",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dec7b5379b6af753a511b8a1dbc0a84358bce422"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc188d82da8925c6b6f08a12a3ff2c1fc4d6f983",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc188d82da8925c6b6f08a12a3ff2c1fc4d6f983",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc188d82da8925c6b6f08a12a3ff2c1fc4d6f983",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc188d82da8925c6b6f08a12a3ff2c1fc4d6f983/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2ea4ddafcf40ed894974e2e5f22bd5625f5c1cc"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "cb2704b9ca937314d409bddbd29be56564cd3d4a",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc188d82da8925c6b6f08a12a3ff2c1fc4d6f983/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc188d82da8925c6b6f08a12a3ff2c1fc4d6f983/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=dc188d82da8925c6b6f08a12a3ff2c1fc4d6f983",
        "patch": "@@ -101,7 +101,7 @@ bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned i\n class CachedHashes\n {\n public:\n-    uint256 hashPrevouts,hashSequence,hashOutputs;\n+    uint256 hashPrevouts, hashSequence, hashOutputs;\n     bool IsEmpty() const\n     {\n         CachedHashes empty;"
      },
      {
        "sha": "a15b03f5960c99c459886b9d6bae78c48b9b36d9",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc188d82da8925c6b6f08a12a3ff2c1fc4d6f983/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc188d82da8925c6b6f08a12a3ff2c1fc4d6f983/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=dc188d82da8925c6b6f08a12a3ff2c1fc4d6f983",
        "patch": "@@ -29,18 +29,18 @@ class CachedHashesMap\n     bool TryGet(uint256 txId, CachedHashes* hashes)\n     {\n         LOCK(cs);\n-        if(!map.count(txId))\n+        auto iter = map.find(txId);\n+        if (iter == map.end())\n             return false;\n-        *hashes = map[txId];\n+        *hashes = iter->second;\n         return true;\n     }\n     bool TrySet(uint256 txId, const CachedHashes& hashes)\n     {\n         LOCK(cs);\n-        if(map.count(txId))\n-            return false;\n-        map[txId] = hashes;\n-        return true;\n+        auto sizeBefore = map.size();\n+        map.insert(std::pair<uint256, CachedHashes>(txId, hashes));\n+        return map.size() != sizeBefore;\n     }\n };\n "
      }
    ]
  }
]