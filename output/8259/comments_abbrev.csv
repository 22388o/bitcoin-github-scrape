jl2012,2016-06-25T20:01:32Z,This one is hopefully merged for versions with segwit defined on mainnet\n,https://github.com/bitcoin/bitcoin/pull/8259#issuecomment-228567883,228567883,
dcousens,2016-06-27T03:35:46Z,"> hashcashes\n\nhash **caches**?,  had me confused for a second haha\n\nutACK c2ea4dd\n",https://github.com/bitcoin/bitcoin/pull/8259#issuecomment-228647612,228647612,
NicolasDorier,2016-06-28T09:25:03Z,@dcousens addressed your nits in dc188d8.\n,https://github.com/bitcoin/bitcoin/pull/8259#issuecomment-228997940,228997940,
dcousens,2016-06-29T02:18:00Z,utACK dc188d8\n,https://github.com/bitcoin/bitcoin/pull/8259#issuecomment-229238640,229238640,
sipa,2016-07-28T22:41:50Z,"Assume a transaction has many signatures. One is SIGHASH_SINGLE, all the others are SIGHASH_ALL | SIGHASH_ANYONECANPAY.\n\nThe first computes and stores hashPrevouts. All the others will compute hashOutputs. However, after the first call, all TrySets will not do anything, as there is already a result in the cache, so it gets computed over and over again.\n\nI think CachedHashes needs a Merge metho",https://github.com/bitcoin/bitcoin/pull/8259#issuecomment-236046843,236046843,
NicolasDorier,2016-07-28T23:08:55Z,"> so it gets computed over and over again\n\nThat's not true, I would be calculating the three hashes at the same time during the SIGHASH_SINGLE.\nTake a look at the SignatureHash method, I changed it to calculate the three hashes aggressively.\n\nI prefer not doing a merge. Without a merge my lock only have to protect the internal map as CachedHashes instances are read only. If we calculate the m",https://github.com/bitcoin/bitcoin/pull/8259#issuecomment-236051694,236051694,
sipa,2016-07-28T23:11:35Z,"@NicolasDorier Oh, I see. I agree that the current code is fine in that case.\n\nI don't understand the argument about the lock. The Merge function would also grab the lock, and be the only code that touches the map.\n",https://github.com/bitcoin/bitcoin/pull/8259#issuecomment-236052125,236052125,
NicolasDorier,2016-07-28T23:18:47Z,"@sipa The Merge function as you did here can't grab the lock, because the lock is at the cache map level, not at the CachedHashes instance level.\n\nBut basically, if doing that way, I would need to grab the lock of the map around the Merge, as well as around any hash read of the HashedCaches instance. (so one can't read and call merge on the HashedCaches at the same time)\nThis would make lots of",https://github.com/bitcoin/bitcoin/pull/8259#issuecomment-236053263,236053263,
NicolasDorier,2016-07-29T01:58:22Z,Closing this one in favor of #8422 which calculate hashes lazily.\n,https://github.com/bitcoin/bitcoin/pull/8259#issuecomment-236075552,236075552,
dcousens,2016-06-27T03:33:09Z,"You could avoid two look ups (IIRC) by comparing the size of the container before and after instead.\n\nAka:\n\n``` cpp\nauto sizeBefore = map.size();\nmap.insert(txId, hashes);\nreturn map.size() != sizeBefore;\n```\n",https://github.com/bitcoin/bitcoin/pull/8259#discussion_r68519098,68519098,src/script/sigcache.h
dcousens,2016-06-27T03:33:54Z,Why not:\n\n``` cpp\nauto iter = map.find(txId);\nif (iter == map.end()) return false;\n*hashes = iter->second;\nreturn true;\n```\n\n**edit**: fixed early-exit\n,https://github.com/bitcoin/bitcoin/pull/8259#discussion_r68519121,68519121,src/script/sigcache.h
dcousens,2016-06-27T03:37:23Z,trivial: maybe spacing between names?\n,https://github.com/bitcoin/bitcoin/pull/8259#discussion_r68519324,68519324,src/script/interpreter.h
dcousens,2016-06-27T03:38:46Z,Would this need to enforce the lock on `check`?\n,https://github.com/bitcoin/bitcoin/pull/8259#discussion_r68519384,68519384,src/main.h
NicolasDorier,2016-06-27T10:31:13Z,"Actually, I don't think I _really_ need TrySet to return a bool.\n",https://github.com/bitcoin/bitcoin/pull/8259#discussion_r68554463,68554463,src/script/sigcache.h
NicolasDorier,2016-06-27T10:32:23Z,"What do you mean by ""fixed early-exit"" ?\nYes, I think your proposition is better as it makes only one lookup.\n",https://github.com/bitcoin/bitcoin/pull/8259#discussion_r68554603,68554603,src/script/sigcache.h
NicolasDorier,2016-06-27T14:17:17Z,"I don't understand, you mean the internal lock of cachedHashesMap ? no, the lock is only meant to protect the internal map, which is not accessed during the swap.\n",https://github.com/bitcoin/bitcoin/pull/8259#discussion_r68583689,68583689,src/main.h
dcousens,2016-06-28T04:44:59Z,"> What do you mean by ""fixed early-exit"" ?\n\nI accidentally inverted the early exit logic,  I've since fixed it,  but left the edit in case you read it in an email and followed up.\n",https://github.com/bitcoin/bitcoin/pull/8259#discussion_r68696925,68696925,src/script/sigcache.h
dcousens,2016-06-28T04:49:14Z,"My logic was based on the presence of the lock implies multi-threaded access,  and this function implies the entire memory is being swapped when `swap()` is called. \nTo me,  that would imply that it should be `LOCK`'d to avoid another thread reading it during this swap.\n\nPerhaps it isn't needed for this case,  but I just figured I'd ask.\n",https://github.com/bitcoin/bitcoin/pull/8259#discussion_r68697180,68697180,src/main.h
NicolasDorier,2016-06-28T08:23:23Z,"Ah I see. Well, I don't think we need it. The swap is always called before the closure is executed (which is only when we start having concurrent access)\n",https://github.com/bitcoin/bitcoin/pull/8259#discussion_r68716077,68716077,src/main.h
jtimon,2016-07-28T20:31:47Z,Perhaps here we can do the same trick we did with the script/sigcache to keep script/interpreter simpler and more reusable.\nping @sipa  \n,https://github.com/bitcoin/bitcoin/pull/8259#discussion_r72696773,72696773,src/script/interpreter.cpp
jtimon,2016-07-28T20:34:32Z,Or maybe move SignatureHash to BaseSignatureChecker. Just brainstorming.\n,https://github.com/bitcoin/bitcoin/pull/8259#discussion_r72697198,72697198,src/script/interpreter.cpp
