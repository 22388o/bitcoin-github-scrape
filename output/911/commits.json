[
  {
    "sha": "142e604184e3ab6dcbe02cebcbe08e5623182b81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDJlNjA0MTg0ZTNhYjZkY2JlMDJjZWJjYmUwOGU1NjIzMTgyYjgx",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-02-29T15:14:18Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-02-29T16:46:46Z"
      },
      "message": "DoS fix for mapOrphanTransactions",
      "tree": {
        "sha": "0906a390af4ec3314983a62e9fa2ae66dd348ab0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0906a390af4ec3314983a62e9fa2ae66dd348ab0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/142e604184e3ab6dcbe02cebcbe08e5623182b81",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/142e604184e3ab6dcbe02cebcbe08e5623182b81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/142e604184e3ab6dcbe02cebcbe08e5623182b81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/142e604184e3ab6dcbe02cebcbe08e5623182b81/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "722d9387be4b267b689d7b7d78daeb7157bd12d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/722d9387be4b267b689d7b7d78daeb7157bd12d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/722d9387be4b267b689d7b7d78daeb7157bd12d8"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 104,
      "deletions": 1
    },
    "files": [
      {
        "sha": "995195289f8cd0208a13317aba58a5ce78e56ebf",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/142e604184e3ab6dcbe02cebcbe08e5623182b81/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/142e604184e3ab6dcbe02cebcbe08e5623182b81/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=142e604184e3ab6dcbe02cebcbe08e5623182b81",
        "patch": "@@ -167,13 +167,14 @@ void static ResendWalletTransactions()\n // mapOrphanTransactions\n //\n \n-void static AddOrphanTx(const CDataStream& vMsg)\n+void AddOrphanTx(const CDataStream& vMsg)\n {\n     CTransaction tx;\n     CDataStream(vMsg) >> tx;\n     uint256 hash = tx.GetHash();\n     if (mapOrphanTransactions.count(hash))\n         return;\n+\n     CDataStream* pvMsg = mapOrphanTransactions[hash] = new CDataStream(vMsg);\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         mapOrphanTransactionsByPrev.insert(make_pair(txin.prevout.hash, pvMsg));\n@@ -201,6 +202,23 @@ void static EraseOrphanTx(uint256 hash)\n     mapOrphanTransactions.erase(hash);\n }\n \n+int LimitOrphanTxSize(int nMaxOrphans)\n+{\n+    int nEvicted = 0;\n+    while (mapOrphanTransactions.size() > nMaxOrphans)\n+    {\n+        // Evict a random orphan:\n+        std::vector<unsigned char> randbytes(32);\n+        RAND_bytes(&randbytes[0], 32);\n+        uint256 randomhash(randbytes);\n+        map<uint256, CDataStream*>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n+        if (it == mapOrphanTransactions.end())\n+            it = mapOrphanTransactions.begin();\n+        EraseOrphanTx(it->first);\n+        ++nEvicted;\n+    }\n+    return nEvicted;\n+}\n \n \n \n@@ -2473,6 +2491,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         {\n             printf(\"storing orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n             AddOrphanTx(vMsg);\n+\n+            // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n+            int nEvicted = LimitOrphanTxSize(MAX_ORPHAN_TRANSACTIONS);\n+            if (nEvicted > 0)\n+                printf(\"mapOrphan overflow, removed %d tx\\n\", nEvicted);\n         }\n         if (tx.nDoS) pfrom->Misbehaving(tx.nDoS);\n     }"
      },
      {
        "sha": "25750dae461269cf41fdfe99f428944a0f7475eb",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/142e604184e3ab6dcbe02cebcbe08e5623182b81/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/142e604184e3ab6dcbe02cebcbe08e5623182b81/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=142e604184e3ab6dcbe02cebcbe08e5623182b81",
        "patch": "@@ -33,6 +33,7 @@ extern const std::string CLIENT_NAME;\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n static const unsigned int MAX_BLOCK_SIZE_GEN = MAX_BLOCK_SIZE/2;\n static const int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n+static const int MAX_ORPHAN_TRANSACTIONS = MAX_BLOCK_SIZE/100;\n static const int64 COIN = 100000000;\n static const int64 CENT = 1000000;\n static const int64 MIN_TX_FEE = 50000;"
      },
      {
        "sha": "0b89414048e50d2a51cd0fb74708767916bce97e",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 0,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/142e604184e3ab6dcbe02cebcbe08e5623182b81/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/142e604184e3ab6dcbe02cebcbe08e5623182b81/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=142e604184e3ab6dcbe02cebcbe08e5623182b81",
        "patch": "@@ -12,6 +12,12 @@\n \n #include <stdint.h>\n \n+// Tests this internal-to-main.cpp method:\n+extern void AddOrphanTx(const CDataStream& vMsg);\n+extern int LimitOrphanTxSize(int nMaxOrphans);\n+extern std::map<uint256, CDataStream*> mapOrphanTransactions;\n+extern std::multimap<uint256, CDataStream*> mapOrphanTransactionsByPrev;\n+\n CService ip(uint32_t i)\n {\n     struct in_addr s;\n@@ -123,4 +129,77 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n     \n }\n \n+static uint256 RandomHash()\n+{\n+    std::vector<unsigned char> randbytes(32);\n+    RAND_bytes(&randbytes[0], 32);\n+    uint256 randomhash(randbytes);\n+    return randomhash;\n+}\n+\n+CTransaction RandomOrphan()\n+{\n+    std::map<uint256, CDataStream*>::iterator it;\n+    it = mapOrphanTransactions.lower_bound(RandomHash());\n+    if (it == mapOrphanTransactions.end())\n+        it = mapOrphanTransactions.begin();\n+    const CDataStream* pvMsg = it->second;\n+    CTransaction tx;\n+    CDataStream(*pvMsg) >> tx;\n+    return tx;\n+}\n+\n+BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n+{\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CBasicKeyStore keystore;\n+    keystore.AddKey(key);\n+\n+    // 50 orphan transactions:\n+    for (int i = 0; i < 50; i++)\n+    {\n+        CTransaction tx;\n+        tx.vin.resize(1);\n+        tx.vin[0].prevout.n = 0;\n+        tx.vin[0].prevout.hash = RandomHash();\n+        tx.vin[0].scriptSig << OP_1;\n+        tx.vout.resize(1);\n+        tx.vout[0].nValue = 1*CENT;\n+        tx.vout[0].scriptPubKey.SetBitcoinAddress(key.GetPubKey());\n+\n+        CDataStream ds;\n+        ds << tx;\n+        AddOrphanTx(ds);\n+    }\n+\n+    // ... and 50 that depend on other orphans:\n+    for (int i = 0; i < 50; i++)\n+    {\n+        CTransaction txPrev = RandomOrphan();\n+\n+        CTransaction tx;\n+        tx.vin.resize(1);\n+        tx.vin[0].prevout.n = 0;\n+        tx.vin[0].prevout.hash = txPrev.GetHash();\n+        tx.vout.resize(1);\n+        tx.vout[0].nValue = 1*CENT;\n+        tx.vout[0].scriptPubKey.SetBitcoinAddress(key.GetPubKey());\n+        SignSignature(keystore, txPrev, tx, 0);\n+\n+        CDataStream ds;\n+        ds << tx;\n+        AddOrphanTx(ds);\n+    }\n+\n+    // Test LimitOrphanTxSize() function:\n+    LimitOrphanTxSize(40);\n+    BOOST_CHECK(mapOrphanTransactions.size() <= 40);\n+    LimitOrphanTxSize(10);\n+    BOOST_CHECK(mapOrphanTransactions.size() <= 10);\n+    LimitOrphanTxSize(0);\n+    BOOST_CHECK(mapOrphanTransactions.empty());\n+    BOOST_CHECK(mapOrphanTransactionsByPrev.empty());\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]