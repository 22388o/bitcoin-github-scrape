[
  {
    "sha": "5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2RmMTA2MTFmZTVlYTc3ZDQ2MzJjMjRlNjllNjhhYTliODExOWUw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-20T21:55:26Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-20T21:56:11Z"
      },
      "message": "Remove redundant semicolons in Python code",
      "tree": {
        "sha": "75f0b57b7d9d177d97e285aa2f3bc9e40bb10429",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75f0b57b7d9d177d97e285aa2f3bc9e40bb10429"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82274c02ed2d82537dc55f008a29edb1bc09bbc4"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "7ea49b65e1776a00084375c5271a7d1d7ec4d477",
        "filename": "contrib/devtools/clang-format-diff.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/contrib/devtools/clang-format-diff.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/contrib/devtools/clang-format-diff.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format-diff.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -128,7 +128,7 @@ def main():\n         line_count = int(match.group(3))\n       if line_count == 0:\n         continue\n-      end_line = start_line + line_count - 1;\n+      end_line = start_line + line_count - 1\n       lines_by_file.setdefault(filename, []).extend(\n           ['-lines', str(start_line) + ':' + str(end_line)])\n \n@@ -147,7 +147,7 @@ def main():\n                          stderr=None, stdin=subprocess.PIPE)\n     stdout, stderr = p.communicate()\n     if p.returncode != 0:\n-      sys.exit(p.returncode);\n+      sys.exit(p.returncode)\n \n     if not args.i:\n       with open(filename) as f:"
      },
      {
        "sha": "9286ab731f2955ed8f01e2b5ab2e56351564eb6c",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -39,7 +39,7 @@ def content_hash(filename):\n         if extension.lower() == '.png':\n             print(\"optimizing \"+file+\"...\"),\n             file_path = os.path.join(absFolder, file)\n-            fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : file_hash(file_path)};\n+            fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : file_hash(file_path)}\n             fileMetaMap['contentHashPre'] = content_hash(file_path)\n         \n             pngCrushOutput = \"\""
      },
      {
        "sha": "5707188f23f85dfcbe3f7eb04d7e59e518db1368",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -22,7 +22,7 @@\n         msg = zmqSubSocket.recv_multipart()\n         topic = str(msg[0])\n         body = msg[1]\n-        sequence = \"Unknown\";\n+        sequence = \"Unknown\"\n         if len(msg[-1]) == 4:\n           msgSequence = struct.unpack('<I', msg[-1])[-1]\n           sequence = str(msgSequence)"
      },
      {
        "sha": "162004065bb688ae4b5d07fc589bd226c06e2315",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -226,7 +226,7 @@ def run_test(self):\n             assert(False)\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        out = dec_tx['vout'][0];\n+        out = dec_tx['vout'][0]\n         assert_equal(change, out['scriptPubKey']['addresses'][0])\n \n "
      },
      {
        "sha": "e100a3af9d44db250670962ed5148d48ae488ff7",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -108,7 +108,7 @@ def run_test (self):\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"pubkeys\": [ address['pubkey'] ],\n             \"internal\": True\n-        }];\n+        }]\n         result = self.nodes[1].importmulti(request)\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(address['address'])\n@@ -121,7 +121,7 @@ def run_test (self):\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"pubkeys\": [ address['pubkey'] ]\n-        }];\n+        }]\n         result = self.nodes[1].importmulti(request)\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n@@ -197,7 +197,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n-        transaction = self.nodes[1].gettransaction(transactionid);\n+        transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh\")\n         result = self.nodes[1].importmulti([{\n@@ -222,7 +222,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n-        transaction = self.nodes[1].gettransaction(transactionid);\n+        transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script\")\n         result = self.nodes[1].importmulti([{\n@@ -246,7 +246,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n-        transaction = self.nodes[1].gettransaction(transactionid);\n+        transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script and private keys\")\n         result = self.nodes[1].importmulti([{\n@@ -270,7 +270,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n-        transaction = self.nodes[1].gettransaction(transactionid);\n+        transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script and private keys\")\n         result = self.nodes[1].importmulti([{\n@@ -312,7 +312,7 @@ def run_test (self):\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"pubkeys\": [ address2['pubkey'] ],\n             \"internal\": True\n-        }];\n+        }]\n         result = self.nodes[1].importmulti(request)\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)"
      },
      {
        "sha": "86ce0b42e639aedc55aef106c54809e1f0139265",
        "filename": "qa/rpc-tests/p2p-feefilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-feefilter.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -21,9 +21,9 @@ def allInvsMatch(invsExpected, testnode):\n     for x in range(60):\n         with mininode_lock:\n             if (sorted(invsExpected) == sorted(testnode.txinvs)):\n-                return True;\n+                return True\n         time.sleep(1)\n-    return False;\n+    return False\n \n # TestNode: bare-bones \"peer\".  Used to track which invs are received from a node\n # and to send the node feefilter messages."
      },
      {
        "sha": "a7858ad3d854ae375322d0b299f038e272ab23bf",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -1662,7 +1662,7 @@ def test_witness_sigops(self):\n         # too many sigops (contributing to legacy sigop count).\n         checksig_count = (extra_sigops_available // 4) + 1\n         scriptPubKey_checksigs = CScript([OP_CHECKSIG]*checksig_count)\n-        tx2.vout.append(CTxOut(0, scriptPubKey_checksigs));\n+        tx2.vout.append(CTxOut(0, scriptPubKey_checksigs))\n         tx2.vin.pop()\n         tx2.wit.vtxinwit.pop()\n         tx2.vout[0].nValue -= tx.vout[-2].nValue"
      },
      {
        "sha": "299f5387e7c24c1935a9c1d7e271bdbc93ab7731",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -39,7 +39,7 @@ def addlength(script):\n     return scriptlen + script\n \n def create_witnessprogram(version, node, utxo, pubkey, encode_p2sh, amount):\n-    pkscript = witness_script(version, pubkey);\n+    pkscript = witness_script(version, pubkey)\n     if (encode_p2sh):\n         p2sh_hash = bytes_to_hex_str(ripemd160(sha256(hex_str_to_bytes(pkscript))))\n         pkscript = \"a914\"+p2sh_hash+\"87\""
      }
    ]
  }
]