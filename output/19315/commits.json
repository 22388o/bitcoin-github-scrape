[
  {
    "sha": "5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmMwNGU4ODM3YzA0NTI5MjNjZWJkMWI4MjNhODVlNWM0ZGNkZmE2",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-06-02T16:46:41Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-07T18:15:56Z"
      },
      "message": "[rpc/net] Introduce addconnection to test outbounds & blockrelay\n\nAdd a new RPC endpoint to enable opening outbound connections from\nthe tests. The functional test framework currently uses the addnode RPC, which\nhas different behavior than general outbound peers. These changes enable\ncreating both full-relay and block-relay-only connections. The new RPC\nendpoint calls through to a newly introduced AddConnection method on\nCConnman that ensures we stay within the allocated max.",
      "tree": {
        "sha": "53e4946c569cd17b054d7dc57854001f3630f569",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53e4946c569cd17b054d7dc57854001f3630f569"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6a71b80d28c79796b557cdb6bae05abb34d1225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6a71b80d28c79796b557cdb6bae05abb34d1225",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6a71b80d28c79796b557cdb6bae05abb34d1225"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 93,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6050e1354cb3d3825cfba3f069685a528de4afa7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
        "patch": "@@ -1132,6 +1132,27 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     RandAddEvent((uint32_t)id);\n }\n \n+bool CConnman::AddConnection(const std::string& address, ConnectionType conn_type)\n+{\n+    if (conn_type != ConnectionType::OUTBOUND_FULL_RELAY && conn_type != ConnectionType::BLOCK_RELAY) return false;\n+\n+    const int max_connections = conn_type == ConnectionType::OUTBOUND_FULL_RELAY ? m_max_outbound_full_relay : m_max_outbound_block_relay;\n+\n+    // Count existing connections\n+    int existing_connections = WITH_LOCK(cs_vNodes,\n+                                         return std::count_if(vNodes.begin(), vNodes.end(), [conn_type](CNode* node) { return node->m_conn_type == conn_type; }););\n+\n+    // Max connections of specified type already exist\n+    if (existing_connections >= max_connections) return false;\n+\n+    // Max total outbound connections already exist\n+    CSemaphoreGrant grant(*semOutbound, true);\n+    if (!grant) return false;\n+\n+    OpenNetworkConnection(CAddress(), false, &grant, address.c_str(), conn_type);\n+    return true;\n+}\n+\n void CConnman::DisconnectNodes()\n {\n     {"
      },
      {
        "sha": "2973ddd0b9a5516f56927bb6911ab8c6005473e8",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
        "patch": "@@ -955,6 +955,19 @@ class CConnman\n     bool RemoveAddedNode(const std::string& node);\n     std::vector<AddedNodeInfo> GetAddedNodeInfo();\n \n+    /**\n+     * Attempts to open a connection. Currently only used from tests.\n+     *\n+     * @param[in]   address     Address of node to try connecting to\n+     * @param[in]   conn_type   ConnectionType::OUTBOUND or ConnectionType::BLOCK_RELAY\n+     * @return      bool        Returns false if there are no available\n+     *                          slots for this connection:\n+     *                          - conn_type not a supported ConnectionType\n+     *                          - Max total outbound connection capacity filled\n+     *                          - Max connection capacity for type is filled\n+     */\n+    bool AddConnection(const std::string& address, ConnectionType conn_type);\n+\n     size_t GetNodeCount(NumConnections num);\n     void GetNodeStats(std::vector<CNodeStats>& vstats);\n     bool DisconnectNode(const std::string& node);"
      },
      {
        "sha": "a96d9d774b172bf2adc36c6e7820316bfe1faf99",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
        "patch": "@@ -5,6 +5,7 @@\n #include <rpc/server.h>\n \n #include <banman.h>\n+#include <chainparams.h>\n #include <clientversion.h>\n #include <core_io.h>\n #include <net.h>\n@@ -314,6 +315,61 @@ static RPCHelpMan addnode()\n     };\n }\n \n+static RPCHelpMan addconnection()\n+{\n+    return RPCHelpMan{\"addconnection\",\n+        \"\\nOpen an outbound connection to a specified node. This RPC is for testing only.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address and port to attempt connecting to.\"},\n+            {\"connection_type\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of connection to open, either \\\"outbound-full-relay\\\" or \\\"block-relay-only\\\".\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                { RPCResult::Type::STR, \"address\", \"Address of newly added connection.\" },\n+                { RPCResult::Type::STR, \"connection_type\", \"Type of connection opened.\" },\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound-full-relay\\\"\")\n+            + HelpExampleRpc(\"addconnection\", \"\\\"192.168.0.6:8333\\\" \\\"outbound-full-relay\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (Params().NetworkIDString() != CBaseChainParams::REGTEST) {\n+        throw std::runtime_error(\"addconnection is for regression testing (-regtest mode) only.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string address = request.params[0].get_str();\n+    const std::string conn_type_in{TrimString(request.params[1].get_str())};\n+    ConnectionType conn_type{};\n+    if (conn_type_in == \"outbound-full-relay\") {\n+        conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+    } else if (conn_type_in == \"block-relay-only\") {\n+        conn_type = ConnectionType::BLOCK_RELAY;\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, self.ToString());\n+    }\n+\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if (!node.connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled.\");\n+    }\n+\n+    const bool success = node.connman->AddConnection(address, conn_type);\n+    if (!success) {\n+        throw JSONRPCError(RPC_CLIENT_NODE_CAPACITY_REACHED, \"Error: Already at capacity for specified connection type.\");\n+    }\n+\n+    UniValue info(UniValue::VOBJ);\n+    info.pushKV(\"address\", address);\n+    info.pushKV(\"connection_type\", conn_type_in);\n+\n+    return info;\n+},\n+    };\n+}\n+\n static RPCHelpMan disconnectnode()\n {\n     return RPCHelpMan{\"disconnectnode\",\n@@ -900,6 +956,8 @@ static const CRPCCommand commands[] =\n     { \"network\",            \"clearbanned\",            &clearbanned,            {} },\n     { \"network\",            \"setnetworkactive\",       &setnetworkactive,       {\"state\"} },\n     { \"network\",            \"getnodeaddresses\",       &getnodeaddresses,       {\"count\"} },\n+\n+    { \"hidden\",             \"addconnection\",          &addconnection,          {\"address\", \"connection_type\"} },\n     { \"hidden\",             \"addpeeraddress\",         &addpeeraddress,         {\"address\", \"port\"} },\n };\n // clang-format on"
      },
      {
        "sha": "c8ceb2c186418cc769f6cd8abca53c60a8e2c041",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
        "patch": "@@ -62,6 +62,7 @@ enum RPCErrorCode\n     RPC_CLIENT_NODE_NOT_CONNECTED   = -29, //!< Node to disconnect not found in connected nodes\n     RPC_CLIENT_INVALID_IP_OR_SUBNET = -30, //!< Invalid IP/Subnet\n     RPC_CLIENT_P2P_DISABLED         = -31, //!< No valid connection manager instance found\n+    RPC_CLIENT_NODE_CAPACITY_REACHED= -34, //!< Max number of outbound or block-relay connections already open\n \n     //! Chain errors\n     RPC_CLIENT_MEMPOOL_DISABLED     = -33, //!< No mempool instance found"
      }
    ]
  },
  {
    "sha": "3997ab915451a702eed2153a0727b0a78c0450ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTk3YWI5MTU0NTFhNzAyZWVkMjE1M2EwNzI3YjBhNzhjMDQ1MGFj",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-06-10T20:29:07Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-07T18:15:56Z"
      },
      "message": "[test] Add test framework support to create outbound connections.\n\nIn the interest of increasing our P2P test coverage, add support to create\nfull-relay or block-relay-only connections. To support this, a P2P connection\nspins up a listening thread & uses a callback to trigger the node initiating\nthe connection.\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "tree": {
        "sha": "9f92126cc96d68a032d2854cdfb8bd1e2b4582a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f92126cc96d68a032d2854cdfb8bd1e2b4582a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3997ab915451a702eed2153a0727b0a78c0450ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3997ab915451a702eed2153a0727b0a78c0450ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3997ab915451a702eed2153a0727b0a78c0450ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3997ab915451a702eed2153a0727b0a78c0450ac/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bc04e8837c0452923cebd1b823a85e5c4dcdfa6"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 110,
      "deletions": 16
    },
    "files": [
      {
        "sha": "fa4a567aac57491176c762f28bc4d03f924d7034",
        "filename": "test/functional/test_framework/p2p.py",
        "status": "modified",
        "additions": 84,
        "deletions": 15,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3997ab915451a702eed2153a0727b0a78c0450ac/test/functional/test_framework/p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3997ab915451a702eed2153a0727b0a78c0450ac/test/functional/test_framework/p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/p2p.py?ref=3997ab915451a702eed2153a0727b0a78c0450ac",
        "patch": "@@ -71,7 +71,11 @@\n     NODE_WITNESS,\n     sha256,\n )\n-from test_framework.util import wait_until_helper\n+from test_framework.util import (\n+    MAX_NODES,\n+    p2p_port,\n+    wait_until_helper,\n+)\n \n logger = logging.getLogger(\"TestFramework.p2p\")\n \n@@ -139,7 +143,7 @@ def __init__(self):\n     def is_connected(self):\n         return self._transport is not None\n \n-    def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n+    def peer_connect_helper(self, dstaddr, dstport, net, timeout_factor):\n         assert not self.is_connected\n         self.timeout_factor = timeout_factor\n         self.dstaddr = dstaddr\n@@ -148,12 +152,20 @@ def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n         self.on_connection_send_msg = None\n         self.recvbuf = b\"\"\n         self.magic_bytes = MAGIC_BYTES[net]\n-        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+\n+    def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n+        self.peer_connect_helper(dstaddr, dstport, net, timeout_factor)\n \n         loop = NetworkThread.network_event_loop\n-        conn_gen_unsafe = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n-        conn_gen = lambda: loop.call_soon_threadsafe(loop.create_task, conn_gen_unsafe)\n-        return conn_gen\n+        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+        coroutine = loop.create_connection(lambda: self, host=self.dstaddr, port=self.dstport)\n+        return lambda: loop.call_soon_threadsafe(loop.create_task, coroutine)\n+\n+    def peer_accept_connection(self, connect_id, connect_cb=lambda: None, *, net, timeout_factor):\n+        self.peer_connect_helper('0', 0, net, timeout_factor)\n+\n+        logger.debug('Listening for Bitcoin Node with id: {}'.format(connect_id))\n+        return lambda: NetworkThread.listen(self, connect_cb, idx=connect_id)\n \n     def peer_disconnect(self):\n         # Connection could have already been closed by other end.\n@@ -312,18 +324,27 @@ def __init__(self, support_addrv2=False, wtxidrelay=True):\n         # If the peer supports wtxid-relay\n         self.wtxidrelay = wtxidrelay\n \n-    def peer_connect(self, *args, services=NODE_NETWORK|NODE_WITNESS, send_version=True, **kwargs):\n+    def peer_connect_send_version(self, services):\n+        # Send a version msg\n+        vt = msg_version()\n+        vt.nServices = services\n+        vt.addrTo.ip = self.dstaddr\n+        vt.addrTo.port = self.dstport\n+        vt.addrFrom.ip = \"0.0.0.0\"\n+        vt.addrFrom.port = 0\n+        self.on_connection_send_msg = vt  # Will be sent in connection_made callback\n+\n+    def peer_connect(self, *args, services=NODE_NETWORK | NODE_WITNESS, send_version=True, **kwargs):\n         create_conn = super().peer_connect(*args, **kwargs)\n \n         if send_version:\n-            # Send a version msg\n-            vt = msg_version()\n-            vt.nServices = services\n-            vt.addrTo.ip = self.dstaddr\n-            vt.addrTo.port = self.dstport\n-            vt.addrFrom.ip = \"0.0.0.0\"\n-            vt.addrFrom.port = 0\n-            self.on_connection_send_msg = vt  # Will be sent soon after connection_made\n+            self.peer_connect_send_version(services)\n+\n+        return create_conn\n+\n+    def peer_accept_connection(self, *args, services=NODE_NETWORK | NODE_WITNESS, **kwargs):\n+        create_conn = super().peer_accept_connection(*args, **kwargs)\n+        self.peer_connect_send_version(services)\n \n         return create_conn\n \n@@ -414,6 +435,10 @@ def test_function():\n \n         wait_until_helper(test_function, timeout=timeout, lock=p2p_lock, timeout_factor=self.timeout_factor)\n \n+    def wait_for_connect(self, timeout=60):\n+        test_function = lambda: self.is_connected\n+        wait_until_helper(test_function, timeout=timeout, lock=p2p_lock)\n+\n     def wait_for_disconnect(self, timeout=60):\n         test_function = lambda: not self.is_connected\n         self.wait_until(test_function, timeout=timeout, check_connected=False)\n@@ -527,6 +552,8 @@ def __init__(self):\n         # There is only one event loop and no more than one thread must be created\n         assert not self.network_event_loop\n \n+        NetworkThread.listeners = {}\n+        NetworkThread.protos = {}\n         NetworkThread.network_event_loop = asyncio.new_event_loop()\n \n     def run(self):\n@@ -542,6 +569,48 @@ def close(self, timeout=10):\n         # Safe to remove event loop.\n         NetworkThread.network_event_loop = None\n \n+    @classmethod\n+    def listen(cls, p2p, callback, port=None, addr=None, idx=1):\n+        \"\"\" Ensure a listening server is running on the given port, and run the\n+        protocol specified by `p2p` on the next connection to it. Once ready\n+        for connections, call `callback`.\"\"\"\n+\n+        if port is None:\n+            assert 0 < idx <= MAX_NODES\n+            port = p2p_port(MAX_NODES - idx)\n+        if addr is None:\n+            addr = '127.0.0.1'\n+\n+        coroutine = cls.create_listen_server(addr, port, callback, p2p)\n+        cls.network_event_loop.call_soon_threadsafe(cls.network_event_loop.create_task, coroutine)\n+\n+    @classmethod\n+    async def create_listen_server(cls, addr, port, callback, proto):\n+        def peer_protocol():\n+            \"\"\"Returns a function that does the protocol handling for a new\n+            connection. To allow different connections to have different\n+            behaviors, the protocol function is first put in the cls.protos\n+            dict. When the connection is made, the function removes the\n+            protocol function from that dict, and returns it so the event loop\n+            can start executing it.\"\"\"\n+            response = cls.protos.get((addr, port))\n+            cls.protos[(addr, port)] = None\n+            return response\n+\n+        if (addr, port) not in cls.listeners:\n+            # When creating a listener on a given (addr, port) we only need to\n+            # do it once. If we want different behaviors for different\n+            # connections, we can accomplish this by providing different\n+            # `proto` functions\n+\n+            listener = await cls.network_event_loop.create_server(peer_protocol, addr, port)\n+            logger.debug(\"Listening server on %s:%d should be started\" % (addr, port))\n+            cls.listeners[(addr, port)] = listener\n+\n+        cls.protos[(addr, port)] = proto\n+        callback(addr, port)\n+\n+\n class P2PDataStore(P2PInterface):\n     \"\"\"A P2P data store class.\n "
      },
      {
        "sha": "b61d433652ffcc55fa57750cea0f0239c2b03436",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3997ab915451a702eed2153a0727b0a78c0450ac/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3997ab915451a702eed2153a0727b0a78c0450ac/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=3997ab915451a702eed2153a0727b0a78c0450ac",
        "patch": "@@ -71,6 +71,7 @@ def __init__(self, i, datadir, *, chain, rpchost, timewait, timeout_factor, bitc\n         \"\"\"\n \n         self.index = i\n+        self.p2p_conn_index = 1\n         self.datadir = datadir\n         self.bitcoinconf = os.path.join(self.datadir, \"bitcoin.conf\")\n         self.stdout_dir = os.path.join(self.datadir, \"stdout\")\n@@ -517,7 +518,7 @@ def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, mat\n                 self._raise_assertion_error(assert_msg)\n \n     def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n-        \"\"\"Add a p2p connection to the node.\n+        \"\"\"Add an inbound p2p connection to the node.\n \n         This method adds the p2p connection to the self.p2ps list and also\n         returns the connection to the caller.\"\"\"\n@@ -546,6 +547,29 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n \n         return p2p_conn\n \n+    def add_outbound_p2p_connection(self, p2p_conn, *, p2p_idx, connection_type=\"outbound-full-relay\", **kwargs):\n+        \"\"\"Add an outbound p2p connection from node. Either\n+        full-relay(\"outbound-full-relay\") or\n+        block-relay-only(\"block-relay-only\") connection.\n+\n+        This method adds the p2p connection to the self.p2ps list and returns\n+        the connection to the caller.\n+        \"\"\"\n+\n+        def addconnection_callback(address, port):\n+            self.log.debug(\"Connecting to %s:%d %s\" % (address, port, connection_type))\n+            self.addconnection('%s:%d' % (address, port), connection_type)\n+\n+        p2p_conn.peer_accept_connection(connect_cb=addconnection_callback, connect_id=p2p_idx + 1, net=self.chain, timeout_factor=self.timeout_factor, **kwargs)()\n+\n+        p2p_conn.wait_for_connect()\n+        self.p2ps.append(p2p_conn)\n+\n+        p2p_conn.wait_for_verack()\n+        p2p_conn.sync_with_ping()\n+\n+        return p2p_conn\n+\n     def num_test_p2p_connections(self):\n         \"\"\"Return number of test framework p2p connections to the node.\"\"\"\n         return len([peer for peer in self.getpeerinfo() if peer['subver'] == MY_SUBVERSION.decode(\"utf-8\")])\n@@ -555,6 +579,7 @@ def disconnect_p2ps(self):\n         for p in self.p2ps:\n             p.peer_disconnect()\n         del self.p2ps[:]\n+\n         wait_until_helper(lambda: self.num_test_p2p_connections() == 0, timeout_factor=self.timeout_factor)\n \n "
      }
    ]
  },
  {
    "sha": "99791e7560d40ad094eaa73e0be3987581338e2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTc5MWU3NTYwZDQwYWQwOTRlYWE3M2UwYmUzOTg3NTgxMzM4ZTJk",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-06-10T22:46:39Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-07T18:15:56Z"
      },
      "message": "[test/refactor] P2PBlocksOnly - simplify transaction creation using blocktool helper.",
      "tree": {
        "sha": "8ed10c18db7227d4cf3fac1decc7dd913072ecb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ed10c18db7227d4cf3fac1decc7dd913072ecb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99791e7560d40ad094eaa73e0be3987581338e2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99791e7560d40ad094eaa73e0be3987581338e2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99791e7560d40ad094eaa73e0be3987581338e2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99791e7560d40ad094eaa73e0be3987581338e2d/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3997ab915451a702eed2153a0727b0a78c0450ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3997ab915451a702eed2153a0727b0a78c0450ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3997ab915451a702eed2153a0727b0a78c0450ac"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 16,
      "deletions": 28
    },
    "files": [
      {
        "sha": "993999b23962617755e80c825f998abfb5b66cd8",
        "filename": "test/functional/p2p_blocksonly.py",
        "status": "modified",
        "additions": 16,
        "deletions": 28,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99791e7560d40ad094eaa73e0be3987581338e2d/test/functional/p2p_blocksonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99791e7560d40ad094eaa73e0be3987581338e2d/test/functional/p2p_blocksonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blocksonly.py?ref=99791e7560d40ad094eaa73e0be3987581338e2d",
        "patch": "@@ -4,7 +4,8 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test p2p blocksonly\"\"\"\n \n-from test_framework.messages import msg_tx, CTransaction, FromHex\n+from test_framework.blocktools import create_transaction\n+from test_framework.messages import msg_tx\n from test_framework.p2p import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -16,32 +17,20 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-blocksonly\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         block_relay_peer = self.nodes[0].add_p2p_connection(P2PInterface())\n \n-        self.log.info('Check that txs from p2p are rejected and result in disconnect')\n-        prevtx = self.nodes[0].getblock(self.nodes[0].getblockhash(1), 2)['tx'][0]\n-        rawtx = self.nodes[0].createrawtransaction(\n-            inputs=[{\n-                'txid': prevtx['txid'],\n-                'vout': 0\n-            }],\n-            outputs=[{\n-                self.nodes[0].get_deterministic_priv_key().address: 50 - 0.00125\n-            }],\n-        )\n-        sigtx = self.nodes[0].signrawtransactionwithkey(\n-            hexstring=rawtx,\n-            privkeys=[self.nodes[0].get_deterministic_priv_key().key],\n-            prevtxs=[{\n-                'txid': prevtx['txid'],\n-                'vout': 0,\n-                'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n-            }],\n-        )['hex']\n+        input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1), 2)['tx'][0]['txid']\n+        tx = create_transaction(self.nodes[0], input_txid, self.nodes[0].getnewaddress(), amount=(50 - 0.001))\n+        txid = tx.rehash()\n+        tx_hex = tx.serialize().hex()\n+\n         assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], False)\n         with self.nodes[0].assert_debug_log(['transaction sent in violation of protocol peer=0']):\n-            block_relay_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            block_relay_peer.send_message(msg_tx(tx))\n             block_relay_peer.wait_for_disconnect()\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 0)\n \n@@ -51,13 +40,13 @@ def run_test(self):\n \n         self.log.info('Check that txs from rpc are not rejected and relayed to other peers')\n         assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n         with self.nodes[0].assert_debug_log(['received getdata for: wtx {} peer=1'.format(txid)]):\n-            self.nodes[0].sendrawtransaction(sigtx)\n+            self.nodes[0].sendrawtransaction(tx_hex)\n             tx_relay_peer.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n \n-        self.log.info('Check that txs from peers with relay-permission are not rejected and relayed to others')\n         self.log.info(\"Restarting node 0 with relay permission and blocksonly\")\n         self.restart_node(0, [\"-persistmempool=0\", \"-whitelist=relay@127.0.0.1\", \"-blocksonly\"])\n         assert_equal(self.nodes[0].getrawmempool(), [])\n@@ -67,8 +56,7 @@ def run_test(self):\n         assert_equal(peer_1_info['permissions'], ['relay'])\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['permissions'], ['relay'])\n-        assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n-        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n \n         self.log.info('Check that the tx from first_peer with relay-permission is relayed to others (ie.second_peer)')\n         with self.nodes[0].assert_debug_log([\"received getdata\"]):\n@@ -78,7 +66,7 @@ def run_test(self):\n             # But if, for some reason, first_peer decides to relay transactions to us anyway, we should relay them to\n             # second_peer since we gave relay permission to first_peer.\n             # See https://github.com/bitcoin/bitcoin/issues/19943 for details.\n-            first_peer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            first_peer.send_message(msg_tx(tx))\n             self.log.info('Check that the peer with relay-permission is still connected after sending the transaction')\n             assert_equal(first_peer.is_connected, True)\n             second_peer.wait_for_tx(txid)"
      }
    ]
  },
  {
    "sha": "8bb6beacb19864b1fca766b3e153349a31dc0459",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmI2YmVhY2IxOTg2NGIxZmNhNzY2YjNlMTUzMzQ5YTMxZGMwNDU5",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-06-10T23:01:40Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-07T18:15:56Z"
      },
      "message": "[test/refactor] P2PBlocksOnly - Extract transaction violation test into helper.\n\nThis is in preparation for use in the next commit.",
      "tree": {
        "sha": "709529d7c0e9a283b31ba15e04af71d6ece2c9d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/709529d7c0e9a283b31ba15e04af71d6ece2c9d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bb6beacb19864b1fca766b3e153349a31dc0459",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bb6beacb19864b1fca766b3e153349a31dc0459",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8bb6beacb19864b1fca766b3e153349a31dc0459",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bb6beacb19864b1fca766b3e153349a31dc0459/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99791e7560d40ad094eaa73e0be3987581338e2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99791e7560d40ad094eaa73e0be3987581338e2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99791e7560d40ad094eaa73e0be3987581338e2d"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 24,
      "deletions": 13
    },
    "files": [
      {
        "sha": "4f188d47231d42164cd996090a5ec5ac26c4237e",
        "filename": "test/functional/p2p_blocksonly.py",
        "status": "modified",
        "additions": 24,
        "deletions": 13,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bb6beacb19864b1fca766b3e153349a31dc0459/test/functional/p2p_blocksonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bb6beacb19864b1fca766b3e153349a31dc0459/test/functional/p2p_blocksonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blocksonly.py?ref=8bb6beacb19864b1fca766b3e153349a31dc0459",
        "patch": "@@ -21,24 +21,17 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        block_relay_peer = self.nodes[0].add_p2p_connection(P2PInterface())\n-\n-        input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1), 2)['tx'][0]['txid']\n-        tx = create_transaction(self.nodes[0], input_txid, self.nodes[0].getnewaddress(), amount=(50 - 0.001))\n-        txid = tx.rehash()\n-        tx_hex = tx.serialize().hex()\n+        self.blocksonly_mode_tests()\n \n+    def blocksonly_mode_tests(self):\n+        self.log.info(\"Tests with node running in -blocksonly mode\")\n         assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], False)\n-        with self.nodes[0].assert_debug_log(['transaction sent in violation of protocol peer=0']):\n-            block_relay_peer.send_message(msg_tx(tx))\n-            block_relay_peer.wait_for_disconnect()\n-            assert_equal(self.nodes[0].getmempoolinfo()['size'], 0)\n \n-        # Remove the disconnected peer and add a new one.\n-        del self.nodes[0].p2ps[0]\n-        tx_relay_peer = self.nodes[0].add_p2p_connection(P2PInterface())\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+        tx, txid, tx_hex = self.check_p2p_tx_violation()\n \n         self.log.info('Check that txs from rpc are not rejected and relayed to other peers')\n+        tx_relay_peer = self.nodes[0].add_p2p_connection(P2PInterface())\n         assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], True)\n \n         assert_equal(self.nodes[0].testmempoolaccept([tx_hex])[0]['allowed'], True)\n@@ -73,6 +66,24 @@ def run_test(self):\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Relay-permission peer's transaction is accepted and relayed\")\n \n+    def check_p2p_tx_violation(self):\n+        self.log.info('Check that txs from P2P are rejected and result in disconnect')\n+\n+        input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1), 2)['tx'][0]['txid']\n+        tx = create_transaction(self.nodes[0], input_txid, self.nodes[0].getnewaddress(), amount=(50 - 0.001))\n+        txid = tx.rehash()\n+        tx_hex = tx.serialize().hex()\n+\n+        with self.nodes[0].assert_debug_log(['transaction sent in violation of protocol peer=0']):\n+            self.nodes[0].p2ps[0].send_message(msg_tx(tx))\n+            self.nodes[0].p2ps[0].wait_for_disconnect()\n+            assert_equal(self.nodes[0].getmempoolinfo()['size'], 0)\n+\n+        # Remove the disconnected peer\n+        del self.nodes[0].p2ps[0]\n+\n+        return tx, txid, tx_hex\n+\n \n if __name__ == '__main__':\n     P2PBlocksOnly().main()"
      }
    ]
  },
  {
    "sha": "602e69e4278f0ed25c65fb568ab395e4c7ca9ceb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDJlNjllNDI3OGYwZWQyNWM2NWZiNTY4YWIzOTVlNGM3Y2E5Y2Vi",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-06-09T01:40:18Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-07T18:15:56Z"
      },
      "message": "[test] P2PBlocksOnly - Test block-relay-only connections.\n\nEnsure we will disconnect if the peer sends us a transaction & we don't\nannounce transactions to the peer.",
      "tree": {
        "sha": "1ecc3a0303c846dc04c96bb0c277e61b5807286d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ecc3a0303c846dc04c96bb0c277e61b5807286d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/602e69e4278f0ed25c65fb568ab395e4c7ca9ceb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/602e69e4278f0ed25c65fb568ab395e4c7ca9ceb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/602e69e4278f0ed25c65fb568ab395e4c7ca9ceb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/602e69e4278f0ed25c65fb568ab395e4c7ca9ceb/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bb6beacb19864b1fca766b3e153349a31dc0459",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bb6beacb19864b1fca766b3e153349a31dc0459",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bb6beacb19864b1fca766b3e153349a31dc0459"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 35,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c592ab52b169156a4c334976e3287063c13e6b01",
        "filename": "test/functional/p2p_blocksonly.py",
        "status": "modified",
        "additions": 35,
        "deletions": 5,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602e69e4278f0ed25c65fb568ab395e4c7ca9ceb/test/functional/p2p_blocksonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602e69e4278f0ed25c65fb568ab395e4c7ca9ceb/test/functional/p2p_blocksonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blocksonly.py?ref=602e69e4278f0ed25c65fb568ab395e4c7ca9ceb",
        "patch": "@@ -2,11 +2,13 @@\n # Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test p2p blocksonly\"\"\"\n+\"\"\"Test p2p blocksonly mode & block-relay-only connections.\"\"\"\n+\n+import time\n \n from test_framework.blocktools import create_transaction\n from test_framework.messages import msg_tx\n-from test_framework.p2p import P2PInterface\n+from test_framework.p2p import P2PInterface, P2PTxInvStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n@@ -22,6 +24,7 @@ def skip_test_if_missing_module(self):\n \n     def run_test(self):\n         self.blocksonly_mode_tests()\n+        self.blocks_relay_conn_tests()\n \n     def blocksonly_mode_tests(self):\n         self.log.info(\"Tests with node running in -blocksonly mode\")\n@@ -66,10 +69,37 @@ def blocksonly_mode_tests(self):\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n         self.log.info(\"Relay-permission peer's transaction is accepted and relayed\")\n \n-    def check_p2p_tx_violation(self):\n-        self.log.info('Check that txs from P2P are rejected and result in disconnect')\n+        self.nodes[0].disconnect_p2ps()\n+        self.nodes[0].generate(1)\n+\n+    def blocks_relay_conn_tests(self):\n+        self.log.info('Tests with node in normal mode with block-relay-only connections')\n+        self.restart_node(0, [\"-noblocksonly\"])  # disables blocks only mode\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], True)\n+\n+        # Ensure we disconnect if a block-relay-only connection sends us a transaction\n+        self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=0, connection_type=\"block-relay-only\")\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], False)\n+        _, txid, tx_hex = self.check_p2p_tx_violation(index=2)\n+\n+        self.log.info(\"Check that txs from RPC are not sent to blockrelay connection\")\n+        conn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), p2p_idx=1, connection_type=\"block-relay-only\")\n \n-        input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1), 2)['tx'][0]['txid']\n+        self.nodes[0].sendrawtransaction(tx_hex)\n+\n+        # Bump time forward to ensure nNextInvSend timer pops\n+        self.nodes[0].setmocktime(int(time.time()) + 60)\n+\n+        # Calling sync_with_ping twice requires that the node calls\n+        # `ProcessMessage` twice, and thus ensures `SendMessages` must have\n+        # been called at least once\n+        conn.sync_with_ping()\n+        conn.sync_with_ping()\n+        assert(int(txid, 16) not in conn.get_invs())\n+\n+    def check_p2p_tx_violation(self, index=1):\n+        self.log.info('Check that txs from P2P are rejected and result in disconnect')\n+        input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(index), 2)['tx'][0]['txid']\n         tx = create_transaction(self.nodes[0], input_txid, self.nodes[0].getnewaddress(), amount=(50 - 0.001))\n         txid = tx.rehash()\n         tx_hex = tx.serialize().hex()"
      }
    ]
  },
  {
    "sha": "b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGRkMmVmODAwOTcwM2I4MTIzNWUyZDlhMmE3MzZhM2E1ZTgxNTJm",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-18T21:41:18Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-07T18:15:56Z"
      },
      "message": "[test] Test the add_outbound_p2p_connection functionality\n\nOpen max number of full-relay and block-relay-only connections from a\nfunctional test with different sorts of behaviors to ensure it behaves as\nexpected.",
      "tree": {
        "sha": "20b5afdc472ded22a00bf206107b0abc99708e9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20b5afdc472ded22a00bf206107b0abc99708e9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4dd2ef8009703b81235e2d9a2a736a3a5e8152f/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "602e69e4278f0ed25c65fb568ab395e4c7ca9ceb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/602e69e4278f0ed25c65fb568ab395e4c7ca9ceb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/602e69e4278f0ed25c65fb568ab395e4c7ca9ceb"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 98,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a63c3a3287c8448f41576108b2b6bdaac0fc2aa1",
        "filename": "test/functional/p2p_add_connections.py",
        "status": "added",
        "additions": 97,
        "deletions": 0,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4dd2ef8009703b81235e2d9a2a736a3a5e8152f/test/functional/p2p_add_connections.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4dd2ef8009703b81235e2d9a2a736a3a5e8152f/test/functional/p2p_add_connections.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_add_connections.py?ref=b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
        "patch": "@@ -0,0 +1,97 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test add_outbound_p2p_connection test framework functionality\"\"\"\n+\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+\n+def check_node_connections(*, node, num_in, num_out):\n+    info = node.getnetworkinfo()\n+    assert_equal(info[\"connections_in\"], num_in)\n+    assert_equal(info[\"connections_out\"], num_out)\n+\n+\n+class P2PAddConnections(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+        # Don't connect the nodes\n+\n+    def run_test(self):\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(f\"outbound: {i}\")\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(f\"block-relay-only: {i}\")\n+            # set p2p_idx based on the outbound connections already open to the\n+            # node, so add 8 to account for the previous full-relay connections\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i + 8, connection_type=\"block-relay-only\")\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 1\")\n+        for i in range(2):\n+            self.log.info(f\"block-relay-only: {i}\")\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i, connection_type=\"block-relay-only\")\n+\n+        self.log.info(\"Add 5 inbound connections to node 1\")\n+        for i in range(5):\n+            self.log.info(f\"inbound: {i}\")\n+            self.nodes[1].add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Add 8 outbounds to node 1\")\n+        for i in range(8):\n+            self.log.info(f\"outbound: {i}\")\n+            # bump p2p_idx to account for the 2 existing outbounds on node 1\n+            self.nodes[1].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i + 2)\n+\n+        self.log.info(\"Check the connections opened as expected\")\n+        check_node_connections(node=self.nodes[0], num_in=0, num_out=10)\n+        check_node_connections(node=self.nodes[1], num_in=5, num_out=10)\n+\n+        self.log.info(\"Disconnect p2p connections & try to re-open\")\n+        self.nodes[0].disconnect_p2ps()\n+        check_node_connections(node=self.nodes[0], num_in=0, num_out=0)\n+\n+        self.log.info(\"Add 8 outbounds to node 0\")\n+        for i in range(8):\n+            self.log.info(f\"outbound: {i}\")\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i)\n+        check_node_connections(node=self.nodes[0], num_in=0, num_out=8)\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(f\"block-relay-only: {i}\")\n+            # bump p2p_idx to account for the 8 existing outbounds on node 0\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i + 8, connection_type=\"block-relay-only\")\n+        check_node_connections(node=self.nodes[0], num_in=0, num_out=10)\n+\n+        self.log.info(\"Restart node 0 and try to reconnect to p2ps\")\n+        self.restart_node(0)\n+\n+        self.log.info(\"Add 4 outbounds to node 0\")\n+        for i in range(4):\n+            self.log.info(f\"outbound: {i}\")\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i)\n+        check_node_connections(node=self.nodes[0], num_in=0, num_out=4)\n+\n+        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n+        for i in range(2):\n+            self.log.info(f\"block-relay-only: {i}\")\n+            # bump p2p_idx to account for the 4 existing outbounds on node 0\n+            self.nodes[0].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i + 4, connection_type=\"block-relay-only\")\n+        check_node_connections(node=self.nodes[0], num_in=0, num_out=6)\n+\n+        check_node_connections(node=self.nodes[1], num_in=5, num_out=10)\n+\n+\n+if __name__ == '__main__':\n+    P2PAddConnections().main()"
      },
      {
        "sha": "9bbf8625681c33e9f524e03a779e1c334c6e1c81",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4dd2ef8009703b81235e2d9a2a736a3a5e8152f/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4dd2ef8009703b81235e2d9a2a736a3a5e8152f/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=b4dd2ef8009703b81235e2d9a2a736a3a5e8152f",
        "patch": "@@ -261,6 +261,7 @@\n     'feature_filelock.py',\n     'feature_loadblock.py',\n     'p2p_dos_header_tree.py',\n+    'p2p_add_connections.py',\n     'p2p_unrequested_blocks.py',\n     'p2p_blockfilters.py',\n     'feature_includeconf.py',"
      }
    ]
  }
]