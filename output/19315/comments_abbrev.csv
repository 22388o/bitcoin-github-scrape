DrahtBot,2020-06-17 23:09:44,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20726 (p2p: Add DISABLETX message for negotiating block-relay-only connections by sdaftuar)\n* #20277 (p2p: Stop processi",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-645672477,645672477,
jnewbery,2020-06-18 19:49:16,Concept ACK. Being able to explicitly test different connection types including outbounds will be really useful.,https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-646271653,646271653,
ariard,2020-07-03 04:05:05,"Concept ACK, that's a substantial move to increase coverage of p2p!\n\n@t-bast, see https://github.com/ariard/bitcoin/commits/2020-07-tda-mitigation-block-relay, based on this PR, it should allow you to open manual block-relay-only connection to a side-node _without_ leaking its presence due to addr-relay. That's one of the mitigation we talked offline against time-dilation and it should prevent",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-653332533,653332533,
jnewbery,2020-07-03 15:35:54,"@t-bast I'd strongly encourage you to _not_ use this branch or anything based on it for anything other than testing:\n\n- it's not merged yet, so still unreviewed\n- it's intended for testing only, and there are no guarantees about how it would work long-term in production (for example, the way that CConnman tracks the number of open connections is not updated to take account of these test conn",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-653599673,653599673,
t-bast,2020-07-03 16:10:01,"Thanks for the concerns @jnewbery, no worries I'm not planning on using anything else than official `bitcoind` releases for `eclair`, I'm simply adding my concept ACK on the overall direction that will be quite helpful for hardening lightning!",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-653610473,653610473,
ariard,2020-07-03 17:02:19,"@jnewbery thanks to press on the warning. The provided commit is for experimentation-only and MUST NOT be used in production for reasons aforementioned.\n\nFor anyone reading this and providing more context, Lightning nodes interested to prevent against time-dilation attacks (a no-hashrate eclipse variant against offchain protocols) should have multiple access to the chain view. As of today, the",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-653624340,653624340,
jnewbery,2020-08-18 18:59:57,"Yay rebase! You can remove the ""This PR builds on #19316. Please review that first."" from the PR description. Is this PR now ready for review?",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-675656643,675656643,
amitiuttarwar,2020-08-18 19:01:56,"hahha I was going to let the tests pass first, but yes it should be ready for review :) ",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-675657592,675657592,
jnewbery,2020-08-25 10:18:45,"Thanks for addressing all my comments @amitiuttarwar . Changes look good to me.\n\nI'll wait until you've resolved the test timeout issue before a full rereview.",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-679938150,679938150,
practicalswift,2020-08-29 01:13:12,"Concept ACK\n\nVery nice to be able to test this extremely important logic. Thanks for doing this!",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-683210775,683210775,
glozow,2020-08-30 17:00:32,I've been [looking into](https://github.com/gzhao408/bitcoin/commit/651ef496dbd82e3fffad73e220f51372cf76ca17) the port management stuff to see the limits of how many connections can be opened. Quick [example_test.py](https://github.com/gzhao408/bitcoin/blob/651ef496dbd82e3fffad73e220f51372cf76ca17/test/functional/example_test.py): add 8 outbounds and 2 blockrelays to `nodes[0]` and `nodes[1]` each,https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-683444413,683444413,
hebasto,2020-09-19 10:59:41,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-695199099,695199099,
amitiuttarwar,2020-09-22 01:57:28,"thank you for all of this awesome feedback! 🙌🏽\n\nand CI is green! 💃🏼  \nthis PR is ready for the next round of review :) \n\nsome updates since last time: \n- rebased onto master \n- reworked the port logic (as described [here](https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492419398)) \n- removed the `dstport` and `dstaddr` from `add_outbound_p2p_connection` & `peer_accept_con",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-696470826,696470826,
amitiuttarwar,2020-09-30 01:55:47,"@mzumsande, thanks for taking a look :)  \n> I already used this some days ago for testing some outbound getaddr behavior, and it worked great!\n\nthats so awesome!! would it be a test we can permanently introduce with this patch? ",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-701112240,701112240,
mzumsande,2020-09-30 18:39:18,"> thats so awesome!! would it be a test we can permanently introduce with this patch?\n\nI think it would best be one of (hopefully several) follow-ups, using the new possibilities introduced by this PR!",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-701571168,701571168,
amitiuttarwar,2020-10-28 04:08:29,rebased & incorporated @hebasto's suggestions,https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-717682865,717682865,
amitiuttarwar,2020-10-30 05:21:39,"fixed a silent merge conflict that was causing travis failure. \n\nready for review! ",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-719195613,719195613,
amitiuttarwar,2020-11-18 23:18:48,looks like the CI failure is just a generic timeout? if yes -> PR is ready for review. all review comments have been addressed,https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-730017485,730017485,
jnewbery,2020-11-19 10:19:36,"> looks like the CI failure is just a generic timeout?\n\nI believe this is improved in master. @MarcoFalke would know. Perhaps try rebasing on latest master?",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-730274196,730274196,
jonatack,2020-11-19 10:23:59,"Yes, the valgrind fuzzer timeout issue was affecting everyone and was resolved in master a few days ago; rebasing fixed it for me. Will review.",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-730276841,730276841,
amitiuttarwar,2020-11-20 02:19:36,"thanks, rebased! and CI is green (appveyor pending) \n",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-730802652,730802652,
amitiuttarwar,2020-11-23 01:21:27,"thanks for the review @jonatack, I've taken most of your feedback (and left comments / questions on the rest) \n\nlooks like the [one CI failure](https://cirrus-ci.com/task/4545582645641216?command=ci#L3449) is indeed based on this code. In `p2p_add_connections`, in the section ""Disconnect p2p connections & try to re-open"", the call to `check_node_connections` is failing because it seems that `g",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-731884495,731884495,
jonatack,2020-11-23 20:49:21,"> looks like the [one CI failure](https://cirrus-ci.com/task/4545582645641216?command=ci#L3449) is indeed based on this code. In `p2p_add_connections`, in the section ""Disconnect p2p connections & try to re-open"", the call to `check_node_connections` is failing because it seems that `getnetworkinfo()['connections_out']` is returning 4 instead of 0. it seems strange because `TestNode.disconnect_p2p",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-732418091,732418091,
amitiuttarwar,2020-11-28 19:48:57,"All review comments are addressed. CI is green.\n\nThe CI failure was caused by a test framework issue addressed in #20522 (thanks for the find @jnewbery!) Rebased, so hopefully now CI will be green.\n\nI'm going to resolve comments that propose ideas for follow-ups, and am consolidating them here for convenient future reference \n- remove `p2p_blocksonly.py` wallet dependency by using `miniw",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-735282520,735282520,
amitiuttarwar,2020-11-30 23:51:07,forgot to update- CI is green. this PR is ready for review! ,https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-736124441,736124441,
amitiuttarwar,2020-12-11 20:24:10,"thank you for these thoughtful reviews! \n\nreview comments addressed and CI is green ",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-743408776,743408776,
amitiuttarwar,2020-12-16 19:31:25,Rebased ,https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-746885067,746885067,
amitiuttarwar,2020-12-16 23:49:34,small update to address aj's suggestion about variable name ,https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-747109525,747109525,
amitiuttarwar,2021-01-01 19:15:50,rebased,https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-753370155,753370155,
troygiorshev,2021-01-06 03:11:40,"reACK 092da16e89b42de7e44a83b184d95a967875f135\n\nWith some help from `git range-diff master 22ba154 HEAD`.\n\nThe changes to the python asyncio pieces (renames, refactors, comments) are great!\n",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-755048206,755048206,
amitiuttarwar,2021-01-07 18:31:22,rebased,https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-756298162,756298162,
amitiuttarwar,2021-01-07 18:32:08,"thanks for the re-review @troygiorshev ! should be trivial to re-ack, the rebase was just because of adjacent lines in `net.h`",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-756298630,756298630,
jnewbery,2021-01-08 11:07:29,"I think this is very close to being ready for merge.\n\nPrevious ACKs: @troygiorshev (https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-755048206)\nPrevious concept/approack ACKs: @ajtowns (https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-543415029), @jonatack (https://github.com/bitcoin/bitcoin/pull/19315#pullrequestreview-535555222), @hebasto (https://github.com/bitcoi",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-756697355,756697355,
troygiorshev,2021-01-08 22:13:47,"reACK b4dd2ef8009703b81235e2d9a2a736a3a5e8152f\n\nTrivial from my last ACK :)\n\nFor anyone interested resources on the python asyncio parts, [the python asyncio docs](https://docs.python.org/3/library/asyncio.html), especially the [transports and protocols page](https://docs.python.org/3/library/asyncio-protocol.html) and the examples on the bottom of that page are useful!",https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-757025249,757025249,
t-bast,2020-07-03 06:59:16,very nit: `conn_type` or `connType`?,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r449410050,449410050,src/net.cpp
t-bast,2020-07-03 07:04:32,"My 2 cents (feel free to ignore as I'm clearly very new to the bitcoin codebase): it feels to me that the distinction manual vs non-manual (automatic?) is orthogonal to the connection type and could be a separate enum.\n\nIIUC `MANUAL` can be composed with either `OUTBOUND`, `FEELER`, `BLOCK_RELAY` or `ADDR_FETCH`.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r449412035,449412035,src/net.h
jnewbery,2020-07-03 15:28:35,`conn_type` is correct. See the developer guide: https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r449634741,449634741,src/net.cpp
jnewbery,2020-07-03 15:29:15,See rationale here: https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479 and here: https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649776062,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r449634943,449634943,src/net.h
t-bast,2020-07-03 16:04:44,"Thanks for the pointer, I was wondering about the inconsistency between variables (`addrConnect` instead of `addr_connect`), but this probably falls under `These are preferred in new code, but are not required when doing so would need changes to significant pieces of existing code.`",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r449646549,449646549,src/net.cpp
t-bast,2020-07-03 16:08:07,"Thanks, I should have done my homework and read that PR first (as was clearly said in the PR description!).",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r449647582,449647582,src/net.h
jnewbery,2020-08-20 09:59:17,"Either remove this comment or place it above `addpeeraddress`, since they're both not shown in help.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r473836629,473836629,src/rpc/net.cpp
jnewbery,2020-08-20 10:04:43,style: sort and place on separate lines,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r473841451,473841451,test/functional/test_framework/mininode.py
jnewbery,2020-08-20 10:22:34,"Consider renaming this function (and the equivalents in `P2PInterface` and `TestNode`) to `peer_accept_connection()` or similar. From the perspective of the `P2PConnection`, this is an inbound connection since it's initiated by the bitcoind node.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r473856088,473856088,test/functional/test_framework/mininode.py
jnewbery,2020-08-20 10:28:16,"This doesn't actually test that the transaction won't get announced by the node, since transaction announcements are batched and only sent when the `nNextInvSend` timer pops. The `sync_with_ping()` above doesn't guarantee that there's nothing in the `setInventoryTxToSend` waiting to be sent (ie I think this test would still pass if this were an outbound-full-relay peer). I don't have any good sugg",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r473860655,473860655,test/functional/p2p_blocksonly.py
jnewbery,2020-08-20 10:35:25,"`getnewaddress` requires a wallet, so this test fails without the wallet compiled. Can you replace it with a hard-coded address?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r473866387,473866387,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-08-21 21:06:12,"great point. renaming this & the equivalent on `P2PInterface` to `peer_accept_connection()` is much clearer. \n\nbut for `TestNode`, I think `add_outbound_p2p_connection()` makes sense? its a connection from node -> p2p conn, so outbound for node. inbound / accept for the P2P connections.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r474970241,474970241,test/functional/test_framework/mininode.py
jnewbery,2020-08-24 09:17:58,Good point. It makes sense for the `TestNode` function to stay as `add_outbound_p2p_connection()`.,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r475454108,475454108,test/functional/test_framework/mininode.py
amitiuttarwar,2020-08-24 20:46:35,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r475884039,475884039,src/rpc/net.cpp
amitiuttarwar,2020-08-24 20:46:55,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r475884229,475884229,test/functional/test_framework/mininode.py
amitiuttarwar,2020-08-24 20:47:37,renamed both instances of `peer_outbound_connect` to `peer_accept_connection`. thanks! ,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r475884574,475884574,test/functional/test_framework/mininode.py
amitiuttarwar,2020-08-24 20:53:37,"ah, yeah I missed that. luckily `nNextInvSend` is mockable so I'm able to bump time forward to ensure the transaction would send. I also fixed a bug with the matching condition (was comparing different types). I think the test now functions correctly- if you remove the `connection_type=""blockrelay""` param when adding the p2p conn, the tx sends and the test fails. what do you think? ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r475887647,475887647,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-08-24 20:54:40,so simple! done :) ,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r475888230,475888230,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-08-25 05:53:27,"ah, looks like the blocktools helper uses wallet, so I ended up just adding `skip_if_no_wallet` and reverting this. ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r476194074,476194074,test/functional/p2p_blocksonly.py
MarcoFalke,2020-08-25 09:09:43,nit: For new code it might be good to use the non-deprecated constructor (see e.g. #19528) ,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r476299424,476299424,src/rpc/net.cpp
MarcoFalke,2020-08-25 09:10:49,"nit: Would be good to either consistently mention this in every file where ""hidden"" is used or nowhere. Maybe just keep the newline?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r476300109,476300109,src/rpc/net.cpp
MarcoFalke,2020-08-25 09:12:18,nit: Any reason for this unrelated change? This also violates pep8,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r476300969,476300969,test/functional/p2p_blocksonly.py
MarcoFalke,2020-08-25 09:17:51,"nit: Any reason to remove the star? I think keyword args that are simply passed on in python are denoted by `**kwargs` in intermediate function calls in the stack, not by explicitly listing them each. Though, I am not a python expert, so feel free to ignore.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r476304181,476304181,test/functional/test_framework/mininode.py
MarcoFalke,2020-08-25 09:24:05,"The line times out intermittently: https://cirrus-ci.com/task/5292757864415232?command=ci#L5215\n\n```\n test  2020-08-25T06:50:18.197000Z TestFramework.node0 (DEBUG): RPC successfully started \n node0 2020-08-25T06:50:18.198698Z [http] Received a POST request for / from 127.0.0.1:43672 \n node0 2020-08-25T06:50:18.199052Z [httpworker.2] ThreadRPCServer method=getnetworkinfo user=__cookie__ ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r476308135,476308135,test/functional/p2p_blocksonly.py
jnewbery,2020-08-25 09:27:14,"ok, it's a bit of a shame to require the wallet to be compiled to run this test. Ideally, I think we'd want just the `wallet_` tests to require the wallet, but we're a long way from that.\n\nNo need to change this here, but a useful future project would be to eliminate the wallet dependency from the non-wallet tests.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r476310077,476310077,test/functional/p2p_blocksonly.py
robot-dreams,2020-08-27 15:32:07,"For context, it looks like the star forces subsequent arguments to be present and named:\n\n```\ndef foo(a, b, *, c):\n    print(a, b, c)\n\nfoo(1, 2)\n# TypeError: foo() missing 1 required keyword-only argument: 'c'\n\nfoo(1, 2, 3)\n# TypeError: foo() takes 2 positional arguments but 3 were given\n\nfoo(1, 2, c=3)\n# 1 2 3\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r478509021,478509021,test/functional/test_framework/mininode.py
robot-dreams,2020-08-27 16:02:32,"It looks like line 520 above checks `if 'dstport' not in kwargs:`; naive question, would this be needed here as well?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r478529683,478529683,test/functional/test_framework/test_node.py
robot-dreams,2020-08-27 18:06:37,"I'm not sure if I'm understanding this correctly, but if you have more than `MAX_NODES / 2` nodes, could you get a port conflict?\n\ne.g. with `MAX_NODES = 12`:\n\n- Some code for node 7 calls `p2p_port(12 - 7)` here to get a p2p port on the Python side\n- Some other code for node 5 calls `p2p_port(5)` to get a p2p port for a `bitcoind` process",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r478602722,478602722,test/functional/test_framework/mininode.py
robot-dreams,2020-08-27 18:22:50,"I looked into the flaky test a bit.\n\nLocally, I see this:\n\n	2020-08-27T06:35:37.249000Z TestFramework.mininode (DEBUG): Listening for Bitcoin Node: 0:\n	2020-08-27T06:35:37.250000Z TestFramework.mininode (DEBUG): Listening server on 127.0.0.1:15398 should be started\n\nHowever, in the CI logs, the ""Listening server on ..."" never appears:\n\n	2020-08-25T06:50:18.202000Z TestFramework.m",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r478611513,478611513,test/functional/test_framework/mininode.py
ajtowns,2020-08-28 00:38:58,"Yeah, the `*` forces subsequent params to be specified by keyword not position",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r478768406,478768406,test/functional/test_framework/mininode.py
glozow,2020-08-28 13:23:06,"Maybe add a comment here mentioning this is only used for tests? I think it could be confusing without the context (e.g. a newcomer thinking this is how connections are added in general).\nI initially thought it should be named `AddTestOutbound` or something but I imagine this could be used for something else in the future, so a comment makes more sense.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479284359,479284359,src/net.h
glozow,2020-08-28 13:33:17,"nit: ""soon"" is pretty vague... Since you're refactoring, maybe edit a little bit like this?\n```suggestion\n        self.on_connection_send_msg = vt  # Will be sent in connection_made callback\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479293812,479293812,test/functional/test_framework/mininode.py
glozow,2020-08-28 13:43:22,"tiny pep nit: remove space before Add\nAnd put the closing """""" on a newline",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479303202,479303202,test/functional/test_framework/test_node.py
glozow,2020-08-28 13:52:45,"nit\n```suggestion\n    const bool success = context.connman->AddConnection(address, conn_type);\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479312039,479312039,src/rpc/net.cpp
glozow,2020-08-28 13:53:33,"or \n```suggestion\n    if(!context.connman->AddConnection(address, conn_type))\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479312802,479312802,src/rpc/net.cpp
glozow,2020-08-28 14:46:29,"Why is this needed? If the test fails, is it not ok to fail for `sendrawtransaction` validation/mempool reasons?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479353496,479353496,test/functional/p2p_blocksonly.py
glozow,2020-08-28 14:48:51,Is this to clear the mempool?,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479354900,479354900,test/functional/p2p_blocksonly.py
glozow,2020-08-28 14:54:21,nit: I think `height` would be more clear than `index`,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479358247,479358247,test/functional/p2p_blocksonly.py
ariard,2020-09-15 17:00:03,"Note for the future, I think we could refactor out this code snippet in some accounting type helper. We're computing `nOutboundFullRelay`/`nOutboundBlockRelay` in diverse parts of the codebase, at least after #19858 \n\nLike returning a struct with an aliased int for each type we have.\n```\nstruct SetConnectionType {\n       int  full_relay;\n       int   blocksonly;\n       ...\n};\n\n",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r488821301,488821301,src/net.cpp
ariard,2020-09-15 17:03:18,"If understand new test well, could you document the 2 behaviors tested, namely that sender doesn't relay transaction to a block-relay-only peer and that receiver disconnect a block-relay-only peer relaying transaction ?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r488823128,488823128,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-09-21 23:35:58,"I haven't looked too closely at #19800 yet, but I think I should now be able to replace this `create_transaction` call with `miniwallet.send_self_transfer` and remove the wallet dependency? does this sound right? cc @MarcoFalke ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492403950,492403950,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-09-21 23:41:37,"done! how's it look now? \n\nq: is there anywhere that captures the current conventions around RPC functions? during original implementation I was looking around, but clearly wasn't able to successfully identify which methods are preferred",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492405564,492405564,src/rpc/net.cpp
amitiuttarwar,2020-09-21 23:41:47,removed ,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492405610,492405610,src/rpc/net.cpp
amitiuttarwar,2020-09-21 23:42:15,"oops, fixed now",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492405748,492405748,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-09-21 23:44:32,"yup, thats why I removed the `*` from the helper. \n\nalso note that the `*` is still present in the `peer_connect` function, just git is showing the diff since I added the helper. I don't fully understand what's going on here with the `*` on the actual functions though (`peer_connect`, `peer_accept_connection`), so please let me know if I'm missing something / should dig in more. ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492406400,492406400,test/functional/test_framework/mininode.py
amitiuttarwar,2020-09-21 23:51:24,"good point. I actually ended up removing `dstport` and `dstaddr` from the `peer_accept_connection` function signature, because they aren't being set here (we don't know the exact info until the listening server is spun up, which is why we pass a callback through)- so it seems more like a red herring.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492408256,492408256,test/functional/test_framework/test_node.py
amitiuttarwar,2020-09-22 00:15:03,"great question! however, I don't _think_ this is a problem. here's why: the `p2p_port` function in `util.py` calculates in a few different factors, one of which is the `PortSeed.n`, which is set by the `BitcoinTestFramework`. It either explicitly sets this value or defaults to the process id, which would be different for each test. so I think this would only cause a conflict if there are conflicti",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492414635,492414635,test/functional/test_framework/mininode.py
amitiuttarwar,2020-09-22 00:35:02,"thank you very much for looking into the flaky test :) you are a brave soul! hahaha\n\nwith ~some~ a lot of help from @ajtowns, my best understanding of what was probably happening here is an off-by-one error. the port allocation is intended to have 12 unique slots for each test, allowing test runner to run multiple tests in parallel. previously, the idx was starting at 0, so p2p_port was being ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492419398,492419398,test/functional/test_framework/mininode.py
amitiuttarwar,2020-09-22 00:35:26,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492419476,492419476,src/net.h
amitiuttarwar,2020-09-22 00:35:43,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492419538,492419538,test/functional/test_framework/mininode.py
amitiuttarwar,2020-09-22 00:37:26,"done\n\nTIL about the closing """""" on a newline. looks like quite a lot of our docstrings don't follow this convention 😛",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492419934,492419934,test/functional/test_framework/test_node.py
amitiuttarwar,2020-09-22 00:43:48,"yeah, I know I could inline but I separated it into its own variable in an attempt to emphasize that this is where the actual work happens since it gets compiled out anyways. so I don't think the `const` does anything, but I threw it in there anyways",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492421394,492421394,src/rpc/net.cpp
amitiuttarwar,2020-09-22 00:44:19,"yup, resetting to clean state for next test",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492421519,492421519,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-09-22 00:45:40,"thanks but I'm a pass. its true that this number is used for block height, but I think index is more accurate to what's passed in, and height is how the index is used",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492421829,492421829,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-09-22 00:50:10,"I don't really understand this question- the test is essentially checking that there is a well formed transaction, submits it to the node, then checks if the p2p connection received the transaction. the goal is to isolate (as much as possible) the reason the conn didn't receive the transaction is due to being a block-relay-only connection.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492422923,492422923,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-09-22 00:55:45,"sounds good for a future PR 👍🏽\n\ngoing to resolve this conversation to keep the review comments focused on these changes ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492424295,492424295,src/net.cpp
amitiuttarwar,2020-09-22 01:03:51,"hm, yeah those are the main behavioral checks for the block-relay-only connection, but there are also tests for blocks-only mode. the checks seem pretty well documented in the test logs (`self.log.info`), is there a particular reason you'd find them helpful here as well? ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492426039,492426039,test/functional/p2p_blocksonly.py
MarcoFalke,2020-09-22 15:16:42,"> does this sound right? cc @MarcoFalke\n\nno idea ;)\n\nJust try it and let me know if you run into any problems. If there are bugs in miniwallet, feel free to fix them along the way.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r492821017,492821017,test/functional/p2p_blocksonly.py
glozow,2020-09-27 02:27:51,"Hm, I guess I found it odd because `sendrawtransaction` will throw a JSONRPCError if validation fails just like `testmempoolaccept` would return False. I don't think they'd have different results unless mempool changes in between calls or something. So it seems like something unnecessary that the test needs to pass. It doesn't make the test incorrect or anything ofc, just seemed peculiar",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r495517956,495517956,test/functional/p2p_blocksonly.py
mzumsande,2020-09-27 18:27:11,"When I change this from 2 to 3 I won't get an RPC error (""at capacity for connection type"") as I would have expected, but an ""address in use"" OSError from the python asyncio. Would it be possible to have some tolerance here, so that the node behavior at maximum outbound connections can be tested?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r495600743,495600743,test/functional/p2p_add_connections.py
amitiuttarwar,2020-09-30 01:54:35,"🤔 good question. I expected there to be some room because we allow 12 `MAX_NODES` and here we are using 10 of those ports, but indeed, I get the same issue. somehow that port is already being used, but I don't understand by what. its none of the other connections. I'll continue digging in. \n\nbut will note that we can check the bounds of each type if they came first. eg. by adding 9 full-relay ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r497199834,497199834,test/functional/p2p_add_connections.py
hebasto,2020-10-05 10:04:20,"0958cbc7211b04e537b3742abd34213023196900\n\nCould add EOL and follow the current wording:\n```suggestion\n        ""\nOpen an outbound connection to a specified node. This RPC is for testing only.\n"",\n```\n?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499484755,499484755,src/rpc/net.cpp
hebasto,2020-10-05 10:23:04,"0958cbc7211b04e537b3742abd34213023196900\nnit: It seems readability could be better w/o this empty line, no?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499494832,499494832,src/rpc/net.cpp
hebasto,2020-10-05 10:31:27,"0958cbc7211b04e537b3742abd34213023196900\n```suggestion\n    RPCTypeCheckArgument(request.params[0], UniValue::VSTR);\n```\n\nI know, that this LOC is changed in the next commit, but this commit is broken in its current state.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499499590,499499590,src/rpc/net.cpp
hebasto,2020-10-05 10:38:20,"0958cbc7211b04e537b3742abd34213023196900\nMind being consistent about full stops at the end of the error messages :)",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499503110,499503110,src/rpc/net.cpp
hebasto,2020-10-05 10:54:09,"0958cbc7211b04e537b3742abd34213023196900\nMind following naming convention?\n```suggestion\n    int outbound_full_relay = 0;\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499510944,499510944,src/net.cpp
hebasto,2020-10-05 10:54:39,"0958cbc7211b04e537b3742abd34213023196900\n```suggestion\n    OpenNetworkConnection(CAddress(), false, &grant, address.c_str(), ConnectionType::OUTBOUND_FULL_RELAY);\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499511188,499511188,src/net.cpp
hebasto,2020-10-05 10:56:55,"0fb4635bbabb1bea10a215bde4c803ceb5bc5f26\nMind following naming convention?\n```suggestion\n    int outbound_block_relay = 0;\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499512363,499512363,src/net.cpp
hebasto,2020-10-05 11:03:46,"0fb4635bbabb1bea10a215bde4c803ceb5bc5f26\nWhy not keep consistency about full stops at the end of argument descriptions?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499515798,499515798,src/rpc/net.cpp
hebasto,2020-10-05 11:10:28,"0fb4635bbabb1bea10a215bde4c803ceb5bc5f26\nDoes this error message describe not having `grant` in the `AddConnection` function?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r499519175,499519175,src/rpc/net.cpp
ajtowns,2020-10-11 03:38:39,"2 bitcoin nodes, 8 full relay outbounds, and 2 blocks-only outbounds fills up the `MAX_NODES==12` ports",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r502860553,502860553,test/functional/p2p_add_connections.py
amitiuttarwar,2020-10-28 03:27:29,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513158022,513158022,src/rpc/net.cpp
amitiuttarwar,2020-10-28 03:39:39,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513161239,513161239,src/rpc/net.cpp
amitiuttarwar,2020-10-28 03:39:46,fixed (by squashing the two commits) ,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513161268,513161268,src/rpc/net.cpp
amitiuttarwar,2020-10-28 03:52:45,okay I think I got them all =P ,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513164838,513164838,src/rpc/net.cpp
amitiuttarwar,2020-10-28 03:52:50,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513164866,513164866,src/net.cpp
amitiuttarwar,2020-10-28 03:53:01,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513164912,513164912,src/net.cpp
amitiuttarwar,2020-10-28 03:53:09,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513164945,513164945,src/net.cpp
amitiuttarwar,2020-10-28 03:53:46,fixed,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513165073,513165073,src/rpc/net.cpp
amitiuttarwar,2020-10-28 04:00:08,"depends for what type. `AddConnection` goes through the nodes and counts how many full relays & block relays there currently are, then compares this to their respective max. it also checks the grant for the total outbound grants. if any of these fail, this error message is hit ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513166623,513166623,src/rpc/net.cpp
amitiuttarwar,2020-10-28 04:07:30,"@mzumsande do you think it would be useful to bump the port allocation, or does the workaround I proposed suffice for the use cases you're thinking about? I'm hesitant because of the potential of creating sporadic test framework issues, but I can look deeper into it if we have a good use case. ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r513168407,513168407,test/functional/p2p_add_connections.py
mzumsande,2020-11-10 22:33:28,"Not sure, but I tend to think it is ok to keep it as it is. For none of the use cases I can think of, two bitcoin nodes are necessary. ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r520916884,520916884,test/functional/p2p_add_connections.py
jnewbery,2020-11-11 11:21:52,"There are several reasons that `OpenNetworkConnections()` can fail (eg a connection to that peer already exists, we fail to open a socket, etc). It'd be nice to change `OpenNetworkConnection()` to return a boolean and return that to the RPC caller.\n\nIf we don't return this value, then the RPC looks like it succeeded even if a connection has not been opened:\n\n```\n→ .bitcoin-cli addconnect",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521290049,521290049,src/net.cpp
jnewbery,2020-11-11 11:28:00,"You don't need to count the number both connection types if you're only going to test against one. It might also be clearer to use the standard library count_if rather than hand writing the loop.\n\nSee what you think of this:\n\n```suggestion\n    const int max_connections = conn_type == ConnectionType::OUTBOUND_FULL_RELAY ? m_max_outbound_full_relay :\n                                     ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521293172,521293172,src/net.cpp
jnewbery,2020-11-11 11:34:30,Perhaps make this less specific (e.g. FAILED_TO_CONNECT).,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521296406,521296406,src/rpc/protocol.h
jnewbery,2020-11-11 11:48:24,I agree. This doesn't seem necessary. You could just as easily call `sendrawtransaction` and then `getmempoolentry` to confirm that the transaction reached the mempool.,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521303287,521303287,test/functional/p2p_blocksonly.py
jnewbery,2020-11-11 11:51:27,"Do we need some kind of sleep/setmocktime here? The node will only send out inventory to outbound connections every 2.5s on average, so this won't catch if we accidentally send out invs to this peer.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521304814,521304814,test/functional/p2p_blocksonly.py
ariard,2020-11-11 16:58:12,"IMO, it's quite nice to have a succinct high-level description of test coverage without necessary getting into the details.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521500638,521500638,test/functional/p2p_blocksonly.py
ariard,2020-11-11 19:30:36,"I don't understand exactly what `CSemaphoreGrant` is enforcing given that:\n* `semOutbound` is initialized with a value of `std::min(m_max_outbound, nMaxConnections)` (L2510 in `src/net.cpp`)\n* thread ""addconnection"" is accessing this semaphore L1179 in `src/net.cpp` with `fTry=true` thus calling `CSemaphoreGrant::TryAcquire`, decrementing the semaphore by one (L281 in `src/sync.h`) and returni",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521589772,521589772,src/net.cpp
ariard,2020-11-11 19:31:32,"nit: ""max outbound connection""",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r521590231,521590231,src/net.h
ajtowns,2020-11-13 01:53:19,"`./bitcoin-cli addnode i-am-not-an-address onetry` gives the same result, as does trying with a valid but unreachable address. Even with NET logging enabled, I only see an error in debug.log for the unreachable address (""connection to XXX timeout""). Having a more reliable indication *somewhere* of what went wrong would probably be a good idea both here and for addnode might be good. Not sure that ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r522558783,522558783,src/net.cpp
ajtowns,2020-11-13 02:01:40,"`a.MoveTo(b)` calls `b.Release()` -- but `b` in this case is a brand new `CSemaphoreGrant` that was default initialized, so `b.fHaveGrant` is false and `b.Release()` is a no-op, and `b.sem->post()` is not called.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r522561165,522561165,src/net.cpp
amitiuttarwar,2020-11-17 19:04:21,"seems related to your previous feedback https://github.com/bitcoin/bitcoin/pull/19315#discussion_r473860655. thanks for helping me ensure this test is meaningful :) \n\nthe way I've sanity tested this assertion is by removing the `connection_type=""blockrelay""` arg to see that it fails. I think the mocktime bump a few lines up should be covering the `INVENTORY_BROADCAST_INTERVAL` delay. is that w",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525413509,525413509,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-11-17 19:05:45,"? \n\nreturns false if its at max connection of the specified type (full relay or block relay), as well as checking total outbound connections ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525414419,525414419,src/net.h
jnewbery,2020-11-17 19:35:45,Agree that this can be done separately if the behaviour here is the same as for `addnode`.,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525435591,525435591,src/net.cpp
amitiuttarwar,2020-11-17 19:37:42,"@ariard I agree that `CSemaphoreGrant` is far-from-ideal, and that its strange / redundant that we also have the individual counts of our different types. However, I'm not understanding exactly what you're trying to suggest here. Are you saying that the overall design of this mechanism is confusing, and the guarantees minimal? Or are you saying that this proposed implementation is problematic? ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525437816,525437816,src/net.cpp
amitiuttarwar,2020-11-17 19:38:37,"cc @MarcoFalke, test sync expert 😛",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525438953,525438953,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-11-17 21:23:38,resolving this conversation so we can continue over here: https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525413509,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525533443,525533443,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-11-17 21:44:06,"ok. I didn't look closely at exactly what errors `testmempoolaccept` returns vs `sendrawtransaction`. I think I probably just copied the existing pattern in the tests. \n\n@glozow - are you suggesting I should just delete this line? (fine by me, just trying to understand)\n\n@jnewbery your suggestion just seems like an alternative that's about the same? ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525544492,525544492,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-11-17 21:59:42,agree with the idea. I've started a branch to incorporate: https://github.com/amitiuttarwar/bitcoin/commits/2020-11-open-conn-improvements. I want to add some testing and review the failures / think through logging. but will do this as a follow up. ,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525552821,525552821,src/net.cpp
amitiuttarwar,2020-11-17 21:59:58,this is great! thank you! I've incorporated the suggestion ,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525552977,525552977,src/net.cpp
amitiuttarwar,2020-11-17 22:00:33,"leaving it for this PR since the specificity is accurate, but updating in the branch (https://github.com/amitiuttarwar/bitcoin/commits/2020-11-open-conn-improvements) that generalizes and returns more general failures",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525553290,525553290,src/rpc/protocol.h
MarcoFalke,2020-11-18 06:45:13,"`sendrawtransaction` error handling is undocumented, but it will indeed return an jsonrpc error when the tx couldn't be added to the mempool",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525847965,525847965,test/functional/p2p_blocksonly.py
MarcoFalke,2020-11-18 06:47:38,wouldn't the setmocktime be called after the tx has been added to the mempool?,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525848859,525848859,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-11-18 18:47:10,"oh great point. I think its working fine on my machine bc the window between bumping mocktime + making txn is small enough, but I've just pushed an update to have the right order.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r526336974,526336974,test/functional/p2p_blocksonly.py
jonatack,2020-11-20 16:00:06,"0c4d67371 argument name in snakecase and improved description\n```suggestion\n            {""connection_type"", RPCArg::Type::STR, RPCArg::Optional::NO, ""The type of connection to open, either (case insensitive) \""outbound\"" or \""blockrelay\"".""},\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527789415,527789415,src/rpc/net.cpp
jonatack,2020-11-20 16:01:06,"0c4d67371\n```suggestion\n                { RPCResult::Type::STR, ""connection_type"", ""Type of connection opened."" },\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527790065,527790065,src/rpc/net.cpp
jonatack,2020-11-20 16:01:46,"0c4d673716f2eb37 trim and make case-insensitive\n```suggestion\n    const std::string conn_type_in{ToLower(TrimString(request.params[1].get_str()))};\n```\n",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527790484,527790484,src/rpc/net.cpp
jonatack,2020-11-20 16:02:59,"0c4d673716f2eb37\n```suggestion\n    info.pushKV(""connection_type"", conn_type_in);\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527791265,527791265,src/rpc/net.cpp
jonatack,2020-11-20 16:03:36,"0c4d673716f2eb37efdb81ad2d7d20f69de960b3 wishlist :)\n```diff\n+    info.pushKV(""peer id"", number);\n+    info.pushKV(""result"", ""...string description..."");\n```\n",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527791634,527791634,src/rpc/net.cpp
jonatack,2020-11-20 16:04:39,"0c4d673716f2eb37efdb81ad2d7d20f69de960b3 s/connectiontype/connection_type/ (nit, sort before addpeeraddress)",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527792294,527792294,src/rpc/net.cpp
jonatack,2020-11-20 16:06:18,"0c4d673716f2eb37efdb81ad2d7d20f69de960b3 nit, pass by value or by reference to const, but not const value, idem for the declaration in net.h\n```suggestion\nbool CConnman::AddConnection(const std::string& address, ConnectionType conn_type)\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527793436,527793436,src/net.cpp
jonatack,2020-11-20 16:09:25,"0c4d673716f2eb37efdb81ad2d7d2\n\n```suggestion\n    OpenNetworkConnection(CAddress(), /* fCountFailure */ false, &grant, address.c_str(), conn_type);\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527795332,527795332,src/net.cpp
jonatack,2020-11-20 16:10:36,I agree with returning a boolean; it may also be convenient for it to return the peer id of the connection via an out param.,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527796158,527796158,src/net.cpp
jonatack,2020-11-20 16:13:28,"50720f411e05 Suggest also testing passing ""outbound"" in one of these calls (and one with e.g. ""  OUTbound "" if you make it case-insensitive and trimmed)",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527797992,527797992,test/functional/p2p_add_connections.py
jonatack,2020-11-20 16:16:24,"50720f411e05cf1bba fun nit, can use `product` here (thanks to @jnewbery for the tip a few months ago) to replace these two blocks:\n```diff\n+from itertools import product\n...\n-        self.log.info(""Add 2 block-relay-only connections to node 0"")\n-        for i in range(2):\n-            self.log.info(""block-relay-only: {}"".format(i))\n-            self.nodes[0].add_outbound_p2p_connecti",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527799898,527799898,test/functional/p2p_add_connections.py
jonatack,2020-11-20 16:18:38,"50720f411e05c maybe log and simplify\n```diff\n-        # check node0 has all outbound connections\n-        node0_peers = []\n-        for i in range(10):\n-            node0_peers.append(self.nodes[0].getpeerinfo()[i]['inbound'])\n-        assert_equal(node0_peers.count(False), 10)\n+        self.log.info(""Check node 0 has outbound connections only"")\n+        info = self.nodes[0].getnet",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527801276,527801276,test/functional/p2p_add_connections.py
jonatack,2020-11-20 16:20:50,"50720f411e05cf1bbaa91174b389c54f3c5287cf perhaps log and simplify\n```diff\n-        # check node1 has 10 outbounds & 5 inbounds\n-        node1_peers = []\n-        for i in range(15):\n-            node1_peers.append(self.nodes[1].getpeerinfo()[i]['inbound'])\n \n-        assert_equal(node1_peers.count(False), 10)\n-        assert_equal(node1_peers.count(True), 5)\n+        self.log.inf",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527802854,527802854,test/functional/p2p_add_connections.py
jonatack,2020-11-20 16:21:59,"50720f411e05cf1bba added these as sanity checks. Could add a helper test that checks the passed number of in/out connections for each node, e.g. `self.test_conns([(0, 10), (5, 10)])` to assert these convienently \n```diff\n         self.log.info(""Disconnect p2p connections & try to re-open"")\n         self.nodes[0].disconnect_p2ps()\n+        assert_equal(self.nodes[0].getnetworkinfo()[""connec",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527803556,527803556,test/functional/p2p_add_connections.py
jonatack,2020-11-20 16:35:08,"OCD nit, maybe enclose `50 - 0.001` in parens, or better yet, assign this magical entity to a well-named variable (or with a comment) that documents what/why",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527812329,527812329,test/functional/p2p_blocksonly.py
jonatack,2020-11-20 16:42:11,"(""BlockRelay"" in the suggestion because I was testing the case-insensitive code above)",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527816958,527816958,test/functional/p2p_add_connections.py
jonatack,2020-11-20 16:47:16,(getnetworkinfo didn't have these two fields yet when you opened this PR),https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527820759,527820759,test/functional/p2p_add_connections.py
amitiuttarwar,2020-11-22 00:45:29,what would be described in the result field? ,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528262717,528262717,src/rpc/net.cpp
amitiuttarwar,2020-11-22 01:56:16,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528268488,528268488,src/rpc/net.cpp
amitiuttarwar,2020-11-22 01:56:35,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528268519,528268519,src/rpc/net.cpp
amitiuttarwar,2020-11-22 01:57:02,"cool, thanks. done ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528268543,528268543,src/rpc/net.cpp
amitiuttarwar,2020-11-22 01:57:39,"also, what are some use cases you have in mind for returning the peer's id? ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528268593,528268593,src/rpc/net.cpp
amitiuttarwar,2020-11-22 01:57:56,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528268612,528268612,src/net.cpp
amitiuttarwar,2020-11-22 01:58:17,added outbound to one and BlockRelay to another ,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528268634,528268634,test/functional/p2p_add_connections.py
amitiuttarwar,2020-11-22 02:08:30,"thanks but I am a pass, within the context of this test, I find this a bit less clear in terms of test structure (putting together node 0 & 1) and logging. ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528269456,528269456,test/functional/p2p_add_connections.py
amitiuttarwar,2020-11-22 02:09:19,"cool thanks, incorporated the `getnetworkinfo` call. definitely cleaner.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528269529,528269529,test/functional/p2p_add_connections.py
amitiuttarwar,2020-11-22 02:10:34,"same as https://github.com/bitcoin/bitcoin/pull/19315#discussion_r527801276, it's been updated",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528269676,528269676,test/functional/p2p_add_connections.py
amitiuttarwar,2020-11-22 02:11:01,👍 added a helper to compare connections using `getnetworkinfo` and added more checks. ,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528269702,528269702,test/functional/p2p_add_connections.py
amitiuttarwar,2020-11-22 02:12:47,"@MarcoFalke, @jnewbery if you get the chance, lmk if this looks good and I'll resolve. but leaving the thread open for now bc I want a second opinion on whether I've solved the issue ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528269854,528269854,test/functional/p2p_blocksonly.py
glozow,2020-11-23 02:01:01,"Yep, `testmempoolaccept` is unnecessary here. And if you need to make sure it's in mempool then submit + `getmempoolentry` is the move.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528441996,528441996,test/functional/p2p_blocksonly.py
jonatack,2020-11-23 20:16:25,"New helper :+1:, just add named args in the callers (maybe drop the `num_` prefixes).\n```suggestion\n        self.check_node_connections(num_node=1, num_in=5, num_out=10)\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528970423,528970423,test/functional/p2p_add_connections.py
jonatack,2020-11-23 20:33:51,"Is there any point in also testing calls like\n```python\nself.nodes[0].addconnection(""127.0.0.1:36848"", ""outbound"")\n```\n",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528979140,528979140,test/functional/p2p_add_connections.py
jonatack,2020-11-23 20:44:07,"Off-hand, I imagined the peer id might be useful for testing, but that can wait until there is an actual use case or need for it. The result might be a success (`""result"": ""connection successful""`) or failure (`""error"": ""unable to connect""`), but I'm not sure how much `addconnection` would be used manually in the CLI or like https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528979140 that ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r528984312,528984312,src/rpc/net.cpp
amitiuttarwar,2020-11-27 18:39:50,"okay, I'm going to resolve this comment. we can revisit once there are specific use cases",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r531729151,531729151,src/rpc/net.cpp
amitiuttarwar,2020-11-28 19:22:55,removed `testmempoolaccept` call ,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r532096690,532096690,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-11-28 19:50:17,"resolving this conversation, tracking as a future improvement at https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-735282520",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r532099463,532099463,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-11-28 19:53:07,"resolving this conversation, tracking better return value from OpenNetworkConnection as a future improvement in https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-735282520",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r532099696,532099696,src/net.cpp
amitiuttarwar,2020-11-28 19:53:36,added named args,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r532099720,532099720,test/functional/p2p_add_connections.py
amitiuttarwar,2020-11-28 19:56:04,"`addconnection` currently doesn't have sanity tests to the RPC endpoint, but I'm leaving that as a future improvement since I'm trying to maximize reviewability and the added benefit seems small (esp since its a test-only RPC endpoint). this future improvement is tracked in https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-735282520",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r532099993,532099993,test/functional/p2p_add_connections.py
jnewbery,2020-12-01 12:58:43,"The average delay between sending INVs to outbound peers is 2.5s, so bumping mocktime by 5 seconds is only double the mean. Is there any downside in bumping it by a minute so there's overwhelming probability that the node's timer for sending an INV to this peer has popped?\n\nYou could also update this to call `sync_with_ping()` twice to ensure that the node has called `SendMessages()` for this ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533388268,533388268,test/functional/p2p_blocksonly.py
jnewbery,2020-12-01 13:02:26,"You always call this function with all arguments, so no need to have defaults (and in fact the function would fail if you called it without arguments because `self.nodes[None]` is a TypeError.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533390362,533390362,test/functional/p2p_add_connections.py
jnewbery,2020-12-01 13:05:22,"You could also change this to be a standalone function rather than a method in the P2PAddConnections class and just take a node as an argument rather than an index:\n\n```python\ndef check_node_connections(node, num_in, num_out):\n    info = node.getnetworkinfo()\n    assert_equal(info[""connections_in""], num_in)\n    assert_equal(info[""connections_out""], num_out)\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533392053,533392053,test/functional/p2p_add_connections.py
jnewbery,2020-12-01 13:08:06,"Rather than connecting two nodes and then disconnecting them, you can just not have them connect to each other by overriding the `setup_network()` method:\n\n```python\ndef setup_network(self):\n    self.setup_nodes()\n    # Don't connect the nodes\n```",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533393627,533393627,test/functional/p2p_add_connections.py
jnewbery,2020-12-01 13:08:55,Is there any reason for this line?,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533394134,533394134,test/functional/p2p_add_connections.py
jnewbery,2020-12-01 13:09:15,sort,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533394335,533394335,test/functional/p2p_add_connections.py
jnewbery,2020-12-01 13:09:58,Remove this. The test can run without a wallet.,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533394769,533394769,test/functional/p2p_add_connections.py
ariard,2020-12-01 14:38:33,"That was a nit, to specify _outbound_ at argument comment :p ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533455822,533455822,src/net.h
ariard,2020-12-01 14:54:13,"Thanks @ajtowns  for the code reading correction! Okay so the semaphore should accomplish its design of preventing to open too much outbound connections.\n\n@amitiuttarwar yes I was saying the overall design of this mechanism is confusing thus making it hard to understand the proposed implementation, but not an issue introduced by the present PR. `CSemaphoreGrant` would gain to be documented bet",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533473895,533473895,src/net.cpp
ariard,2020-12-01 16:35:02,"I guess that hebasto point is this message could be ""Error: Already at capacity for specified connection type or max total outbound connection already exist"" to cover both failure cases.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533553730,533553730,src/rpc/net.cpp
ariard,2020-12-01 16:36:32,"Should this RPC returns an error if the connection is already existent, like RPC_CLIENT_NODE_ALREADY_ADDED ? It's for test-only but at least it would catch this kind of logic bug in test framework ?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533554882,533554882,src/rpc/net.cpp
ariard,2020-12-01 16:39:48,Isn't this redundant as this information is already passed by caller and RPC won't swap connection type for any reason ? Maybe remove this result field ?,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533557365,533557365,src/rpc/net.cpp
ariard,2020-12-01 16:47:17,"nit: ""Add 5 inbound connections..."" ?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533562928,533562928,test/functional/p2p_add_connections.py
troygiorshev,2020-12-02 06:49:17,"Possibly it's nice to check that nothing has happened to node 1 since disconnecting and reconnecting the peers of node 0.\n\nNote: This is a reply to a thread.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533932612,533932612,test/functional/p2p_add_connections.py
troygiorshev,2020-12-02 06:55:02,Is checking `IsMockableChain` the best way to ensure we're in a test?  Have you considered checking `NetworkIDString != CBaseChainParams::REGTEST` instead?,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533934701,533934701,src/rpc/net.cpp
troygiorshev,2020-12-02 07:00:12,"Probably `throw JSONRPCError(RPC_INVALID_PARAMS, ""Something..."");` is better here.  `RPC_INVALID_PARAMS` is a standard JSON-RPC 2.0 error.  However, we seem to use our custom `RPC_INVALID_PARAMETER` more often, so maybe that's a better choice.  (2 instances to 136 instances)",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533936622,533936622,src/rpc/net.cpp
troygiorshev,2020-12-02 07:06:50,"nit: I'm really not fond of this name, being that it appears to be an intentional collision with `asyncio`'s `create_server`.  It's hard enough to tell _who's_ calling _what_ and _when_ in concurrent python, and this makes it harder.  Maybe something like `listen_helper`?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533939178,533939178,test/functional/test_framework/p2p.py
troygiorshev,2020-12-02 07:12:44,"Since this is a sanity check, it would be nice if the values weren't the same as when we called this before restarting the node.  Maybe add only 7 outbounds and a few inbounds?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533941575,533941575,test/functional/p2p_add_connections.py
troygiorshev,2020-12-02 07:17:22,"I agree with ariard here, I would prefer this comment was longer and more verbose.  ""Returns false if at max connection capacity for given connection type or at max total outbound connection capacity""",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533943505,533943505,src/net.h
troygiorshev,2020-12-02 07:19:18,"Same as https://github.com/bitcoin/bitcoin/pull/19315/files#r533943505, consider making this more detailed?  I could see this being misleading if the RPC fails because of max total outbound capacity, as opposed to max capacity for the given type.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r533944308,533944308,src/rpc/net.cpp
jonatack,2020-12-02 09:52:48,"This field confirms what the RPC parsed from the user input per Postel's Law. If you pass "" BLOCKRELAY   "", it's good to know, without needing to check the source code, that it was correctly understood as ""blockrelay"".",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534033801,534033801,src/rpc/net.cpp
MarcoFalke,2020-12-02 10:20:11,"If the args can't be parsed, a parse failure will be thrown already https://github.com/bitcoin/bitcoin/pull/19315/files#r533936622\n",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534052888,534052888,src/rpc/net.cpp
jonatack,2020-12-02 10:25:47,"Agree with @jnewbery's suggestions. @MarcoFalke also reminded me recently in https://github.com/bitcoin/bitcoin/pull/20403#discussion_r530307834 that you can enforce use of named args with the splat. [Example](https://github.com/bitcoin/bitcoin/pull/20391/files#diff-5450eea6e8ed6364028357e2f1abc3dfcf458177655f518336266f08190f0dcfR323).\n```suggestion\n    def check_node_connections(*, node, num_",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534056768,534056768,test/functional/p2p_add_connections.py
jonatack,2020-12-02 10:29:32,"Yes, but in the absence of failure, feedback is better than uncertainty or requiring the user to check the source code.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534059297,534059297,src/rpc/net.cpp
jonatack,2020-12-02 14:04:47,"Oh, now that the minimum Python version has been bumped to 3.6 (in #19504), you can use Python f-strings instead of `format` for new code.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534190714,534190714,test/functional/p2p_add_connections.py
amitiuttarwar,2020-12-03 01:00:05,"yup exactly, sanity check that there aren't unexpected interactions ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534587053,534587053,test/functional/p2p_add_connections.py
amitiuttarwar,2020-12-03 02:21:36,"it's hard to hit the total max without hitting the max for the type :) \n\nthe max values are \noutbound: 8\nblock-relay-only: 2\ntotal: 10 ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534617752,534617752,src/rpc/net.cpp
ajtowns,2020-12-03 03:07:29,Filed an issue for this at #20552,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534633804,534633804,src/net.cpp
ajtowns,2020-12-03 03:27:25,"Could shorten it to:\n\n```c++\n    int existing_connections = WITH_LOCK(cs_vNodes,\n        return std::count_if(vNodes.begin(), vNodes.end(), [conn_type](CNode* node) { return node->m_conn_type == conn_type; });-\n    );\n```\n\n(EDIT: remove redundant `{}`)\n\nI think there's a race condition here in that you could decide there's currently one block relay outbound so it's fine to crea",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534640401,534640401,src/net.cpp
amitiuttarwar,2020-12-03 03:36:25,"good point & clever trick! I've bumped the mocktime by a minute, added two calls to `sync_with_ping()` and a comment explaining this reasoning. \n\nthanks for this thoughtful response! going to resolve the comment now, let me know incase there's anything else I should be thinking about.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534643176,534643176,test/functional/p2p_blocksonly.py
amitiuttarwar,2020-12-03 03:39:01,"ah, yes I put in the defaults to try to enforce the named args. cool splat trick @jonatack.\n\nalso converted to standalone function ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534643978,534643978,test/functional/p2p_add_connections.py
amitiuttarwar,2020-12-03 03:39:17,👍🏽 done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534644050,534644050,test/functional/p2p_add_connections.py
amitiuttarwar,2020-12-03 03:39:55,"since this test is 50% sanity checks & I don't think it detracts to leave this one in, I'm resolving this conversation. ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534644227,534644227,test/functional/p2p_add_connections.py
amitiuttarwar,2020-12-03 03:41:07,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534644613,534644613,test/functional/p2p_add_connections.py
amitiuttarwar,2020-12-03 03:42:24,"💡\n\nthanks :) ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534645028,534645028,test/functional/p2p_add_connections.py
amitiuttarwar,2020-12-03 03:47:21,"I feel completely indifferent as to whether there's a return result or not. I believe the initial implementation left it out but then I got review comments requesting it be added. \n\nHappy to do whatever reviewers prefer. To me it doesn't feel super important one way or the other since its a test-only RPC so we don't have to adhere to normal RPC deprecation rules. ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534646521,534646521,src/rpc/net.cpp
amitiuttarwar,2020-12-03 03:47:44,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534646659,534646659,test/functional/p2p_add_connections.py
ajtowns,2020-12-03 03:47:56,"I don't think the `ToLower` here is a good idea. The RPC interface is, in general, case-sensitive -- eg, `addnode .. OneTry` will give an error, changing the capitalisation of a wallet name refers to a different wallet, and calling `AddConnection` instead of `addconnection` will give `Method not found`. Special-casing this particular argument just seems confusing.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534646707,534646707,src/rpc/net.cpp
amitiuttarwar,2020-12-03 03:48:25,"oh nice, that is more direct / explicit. done.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534646857,534646857,src/rpc/net.cpp
amitiuttarwar,2020-12-03 03:50:12,"done.\n\nyeah interesting that we have both `RPC_INVALID_PARAMS` and `RPC_INVALID_PARAMETER`. opted for the second since its more used. ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534647465,534647465,src/rpc/net.cpp
amitiuttarwar,2020-12-03 03:54:06,"yeah that's reasonable, I updated to `create_listen_server` ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534648609,534648609,test/functional/test_framework/p2p.py
amitiuttarwar,2020-12-03 03:54:14,"kewl, done.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534648639,534648639,test/functional/p2p_add_connections.py
amitiuttarwar,2020-12-03 03:54:23,done,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534648707,534648707,test/functional/p2p_add_connections.py
amitiuttarwar,2020-12-03 04:00:00,"haha, I fully agree 😛\n\ngoing to resolve this conversation to help me keep track of outstanding issues on this PR",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534650523,534650523,src/net.cpp
ajtowns,2020-12-03 04:56:45,Should this just return `false` for different connection types rather than assert?,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534668415,534668415,src/net.cpp
ajtowns,2020-12-03 05:00:37,Shouldn't these match `ConnectionTypeAsString()` -- ie `outbound-full-relay` and `block-relay-only` ?,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534669600,534669600,src/rpc/net.cpp
ajtowns,2020-12-03 05:01:44,This is `NodeContext& node` everywhere else?,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534669954,534669954,src/rpc/net.cpp
ajtowns,2020-12-03 06:47:40,"I think this could use some refactoring and comments. Maybe something like:\n\n```python\n    @classmethod\n    def listen(cls, p2p, callback, port=None, addr=None, idx=1):\n        """"""Ensure a listening server is running on the given port, and run the protocol\n           specified by `p2p` on the next connection to it. Once ready for connections,\n           call `callback`.""""""\n\n     ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534747237,534747237,test/functional/test_framework/p2p.py
ajtowns,2020-12-03 06:51:28,"I think specifying the `p2p_conn_index` explicitly, eg with\n\n```python\ndef add_outbound_p2p_connection(self, p2p_conn, *, p2pidx, connection_type=""outbound"", **kwargs)\n```\nand calling it as:\n\n```python\nconn = self.nodes[0].add_outbound_p2p_connection(P2PTxInvStore(), p2pidx=1, connection_type=""blockrelay"")\n```\n\nwould make the tests clearer. At present it's very hard to track ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534751258,534751258,test/functional/test_framework/test_node.py
jonatack,2020-12-03 08:08:10,"Many RPCs (sendtoaddress, sendmany, send, fundrawtransaction, walletcreatefundedpsbt, and bumpfee) have a case-insensitive string param, estimate_mode, that is also indicated as case insensitive in the various helps.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r534874538,534874538,src/rpc/net.cpp
jnewbery,2020-12-03 10:23:37,I agree with @ajtowns. We should be strict about capitalization in rpc arguments. Adding a special case here doesn't make sense.,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r535063313,535063313,src/rpc/net.cpp
ajtowns,2020-12-03 10:30:21,"I thnk `estimate_mode` only allows case-insensitivity because it initially required all-uppercase, see https://github.com/bitcoin/bitcoin/pull/11413#pullrequestreview-271355849 . Doesn't seem like a good example to replicate.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r535071140,535071140,src/rpc/net.cpp
jonatack,2020-12-03 15:28:16,"Ok, noted. Grepping a bit, it looks like `estimate_mode` is the only one.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r535330737,535330737,src/rpc/net.cpp
ariard,2020-12-10 16:22:02,"@jonatack I don't have a strong opinion on this, I was more surprised to notify the discrepancy with other usual RPCs. \n\nMaybe this RPC design principle should be documented in https://github.com/bitcoin/bitcoin/blob/master/doc/JSON-RPC-interface.md ? The Postel's Law sounds a rational good enough to me but I'm not heavily developing against Core RPC so don't feel competent here to evaluate he",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540305220,540305220,src/rpc/net.cpp
amitiuttarwar,2020-12-11 01:25:01,"updated to `WITH_LOCK` syntax. \n\nwe discussed this offline, but to document here for other reviewers- \n\nSince we hold the `cs_vNodes` lock for counting open connections but then release it before invoking `OpenNetworkConnection`, `AddConnection` and `ThreadOpenConnections` could both count, determine there's space for an extra, and attempt to open a block-relay-only. We could fix this by h",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540621380,540621380,src/net.cpp
amitiuttarwar,2020-12-11 01:25:56,reverted to being case sensitive ,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540621708,540621708,src/rpc/net.cpp
amitiuttarwar,2020-12-11 01:29:39,"sure. the `addconnection` RPC currently interprets `false` to be `Error: Already at capacity for specified connection type.`, which I think is reasonable enough that I've kept it (capacity for other connection types is 0.) I'm also planning to make this net wider in the follow-up, as discussed here:  https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525552821. For now, I've updated to retu",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540623057,540623057,src/net.cpp
amitiuttarwar,2020-12-11 01:29:59,"yes definitely. thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540623169,540623169,src/rpc/net.cpp
amitiuttarwar,2020-12-11 01:30:19,yeah but I find that pretty confusing so I made it context 😅,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540623277,540623277,src/rpc/net.cpp
amitiuttarwar,2020-12-11 01:31:56,"ok AJ, you have convinced me, I made the counter explicit :) ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540623816,540623816,test/functional/test_framework/test_node.py
amitiuttarwar,2020-12-11 01:55:14,"hmmm, I see that `addnode` RPC returns this error, but seems like that's what is indicated by the bool that the `AddNode` function returns since it's comparing to `vAddedNodes`. In the current implementation, we don't currently know that information until we call through to `OpenNetworkConnection`, which simply returns if we are  `AlreadyConnectedToAddress(addrConnect))`. We could add a call from ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540632078,540632078,src/rpc/net.cpp
amitiuttarwar,2020-12-11 01:57:24,"yes this looks great, thank you 🙌🏽\n\nI like the refactor into making `peer_protocol` a part of `create_server`. Helps makes the usage pattern more apparent. \n\nAlso appreciate the comments. I was struggling to write helpful words. \n\nTook the patch pretty much as is. Convenient that you are already a co-author on the commit :) ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r540632971,540632971,test/functional/test_framework/p2p.py
ajtowns,2020-12-16 21:34:58,"""node"" seems much less confusing to me; `node` gives you access to all the bits of the node, `request.context` gives you the overall context available for the rpc. In general, picking a convention and sticking with it makes the codebase much easier to navigate.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r544639295,544639295,src/rpc/net.cpp
amitiuttarwar,2020-12-16 23:48:26,"alright, I definitely agree with the rationale of staying consistent with conventions, so I pushed a fix ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r544705501,544705501,src/rpc/net.cpp
jnewbery,2021-01-08 10:11:43,This seems like an appropriate amount of detail for an error message (especially one for an RPC which is test-only).,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r553855408,553855408,src/rpc/net.cpp
jnewbery,2021-01-08 10:14:17,"Similar to https://github.com/bitcoin/bitcoin/pull/19315#discussion_r525435591, I think more detailed error reporting can be done in a follow-up PR.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r553856609,553856609,src/rpc/net.cpp
jnewbery,2021-01-08 10:14:47,It seems no-one has a strong opinion on this. I think it's fine as is. Resolve?,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r553856841,553856841,src/rpc/net.cpp
jnewbery,2021-01-08 10:17:19,"(Only if you have to retouch this branch for other reasons): use new style string formatting (`""{}"".format(var)`) here, or even better, f-strings (`f""{var}""`).",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r553858110,553858110,test/functional/test_framework/p2p.py
jnewbery,2021-01-08 10:20:02,"I'm not sure what ""should be"" means here. I think the log could just say ""Listening server on x started"". Also, could use new style string formatting or f-strings.\n\nThis isn't a big deal. Only change it if you need to retouch the branch.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r553859419,553859419,test/functional/test_framework/p2p.py
jnewbery,2021-01-08 10:56:02,"(re: https://github.com/bitcoin/bitcoin/pull/19315#discussion_r479358247)\n\nI don't think you need to pass the height at all. Just get the block at the tip:\n\n```diff\ndiff --git a/test/functional/p2p_blocksonly.py b/test/functional/p2p_blocksonly.py\nindex c592ab52b1..e6c3f75955 100755\n--- a/test/functional/p2p_blocksonly.py\n+++ b/test/functional/p2p_blocksonly.py\n@@ -80,7 +80,7 @@ ",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r553876856,553876856,test/functional/p2p_blocksonly.py
MarcoFalke,2021-01-11 12:53:14,"5bc04e8837c0452923cebd1b823a85e5c4dcdfa6:\n\nIf this is only used in test, why not call it `AddTestConnection`? Otherwise someone might use it in ""production"".",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555025874,555025874,src/net.h
MarcoFalke,2021-01-11 15:21:41,"I still think this should be removed. If this can't be parsed, a parse-failure will already be thrown.\n\nThough, can be done in a follow-up to not invalidate reviews.\n\nUnrelated, but posels' law is probably not applicable to security sensitive software, see http://www.langsec.org/papers/postel-patch.pdf",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555121932,555121932,src/rpc/net.cpp
MarcoFalke,2021-01-11 15:29:38,Same commit: Any reason to trim the string? We don't do this anywhere else.,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555127628,555127628,src/rpc/net.cpp
MarcoFalke,2021-01-11 17:48:04,"3997ab915451a702eed2153a0727b0a78c0450ac:\n\nWhat is this?",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555230229,555230229,test/functional/test_framework/test_node.py
MarcoFalke,2021-01-11 17:48:26,3997ab915451a702eed2153a0727b0a78c0450ac: The `+1` seems like a layer violation that should be done in the p2p module instead.,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555230459,555230459,test/functional/test_framework/test_node.py
MarcoFalke,2021-01-11 18:16:28,"3997ab915451a702eed2153a0727b0a78c0450ac:\n\nAny reason to add default arguments for an arg that is set in all call sites? I don't think it makes sense to skip the connect_cb here?\n\nAlso could enforce named args with `*`",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555246808,555246808,test/functional/test_framework/p2p.py
MarcoFalke,2021-01-11 18:21:46,"3997ab9:\n\nWould be nice to not use the helper unless necessary. It doesn't matter here, but  it won't propagate the scaling factor",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555249793,555249793,test/functional/test_framework/p2p.py
MarcoFalke,2021-01-11 18:27:46,"same commit:\n\nWhat is the point of allowing those args when they are never set? I'd say *if* there is ever a test that needs them set, that pull can make the needed changes here. Because other changes are required for this anyway to work.",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555253158,555253158,test/functional/test_framework/p2p.py
MarcoFalke,2021-01-11 19:05:30,"99791e7560d40ad094eaa73e0be3987581338e2d: If you touch this, I'd prefer to remove it. This doesn't check anything",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555274018,555274018,test/functional/p2p_blocksonly.py
MarcoFalke,2021-01-11 19:06:08,99791e7560d40ad094eaa73e0be3987581338e2d: Same,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555274399,555274399,test/functional/p2p_blocksonly.py
jonatack,2021-01-11 20:33:12,"That paper on Postel's Law appears to discuss issues of computational complexity involving difficult parsing or high ambiguity, which IIRC isn't the case for this RPC, and states among other things that a balance should be struck, which I agree with. In security-sensitive missions for airports, power grids, industry manufacturers, etc., my experience was that it depended on the context, stakeholde",https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555320342,555320342,src/rpc/net.cpp
jonatack,2021-01-11 20:56:04,This was my fault--I suggested it earlier on.,https://github.com/bitcoin/bitcoin/pull/19315#discussion_r555331970,555331970,src/rpc/net.cpp
