[
  {
    "sha": "e35e4b2ba052c9a533626286026dbe0a2d546c5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzVlNGIyYmEwNTJjOWE1MzM2MjYyODYwMjZkYmUwYTJkNTQ2YzVi",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-12T11:23:09Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-01-08T15:21:34Z"
      },
      "message": "util: Add PruneMiBtoGB() function\n\nNow the text of prune QCheckBox shows the space in GB instead of\nthousands MiB, which is consistent with other parts of the GUI.",
      "tree": {
        "sha": "f1da9cbddeb6fd0f81c4f21b4b08d435563e702f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1da9cbddeb6fd0f81c4f21b4b08d435563e702f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e35e4b2ba052c9a533626286026dbe0a2d546c5b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl4V834ACgkQQQEIES5+\nqB8akg//bkRkDGHnj87HSdyyRSrHDgBD1GBy+fGUd+lHvP4KTLFtd2DQpoBq0usW\nCYxLB04gsHiHMWJ1mgJ7VZuSRhXz+ZtW974SaYtt5L88YTJ/v6RNgID4HEIYN6/7\nTnlMKjtUDhR9+C1FEU2DWS5S8IYbNdl96NvVRn2ZzpKbEi+4Fs1T+bagkzvCgoCA\n88SbbkmlfZWOJj9vq8gaHmc72bpDrDbpbp/JwcsT78CHUS1mzh9heIy8iFPXv0xC\nNxRhKYyv1vIMWwX/MOGM9cesXrlBEbqaMj9GmNrKcQvfuFbQNd35CBRojnHnFezI\nZeDjMvv298F6GMa47FnwPoVmc2iaN1AJnIBoJvAvIa7K7g+58Ym+01LYw2+VWcvh\nxOP0BEvIIBbWlb/dyhaU/nFeCjv30xqEwBHbmwMIr3h/padyavYRcmUFLMxVfFPr\nsdrDLafxMHdit3nDcOZLCIXa+RslEnajsHrjVXhWEONyCsoaTzDvRSaymCcj2FGN\nZwazpW0ZkvlCiMifVwY4ludyZaK73KPasPBlLbypNeTL8AweizCyE3pCO9Zkzh1q\nfBblRisbIn9Wm8Zz0YBX6CXIHatqBff2X1nfVirgYLJzeyvMsHZUQYz6KIG0hpQD\n7Y04pVCVeq3XLO8dSjkS9OcJ53tuVr8v8nMfFTZ2GNdEtvgrSXg=\n=Z/5w\n-----END PGP SIGNATURE-----",
        "payload": "tree f1da9cbddeb6fd0f81c4f21b4b08d435563e702f\nparent 295211e668290d7741eb0fd46223087c21fc7c59\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1573557789 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1578496894 +0200\n\nutil: Add PruneMiBtoGB() function\n\nNow the text of prune QCheckBox shows the space in GB instead of\nthousands MiB, which is consistent with other parts of the GUI.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e35e4b2ba052c9a533626286026dbe0a2d546c5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e35e4b2ba052c9a533626286026dbe0a2d546c5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e35e4b2ba052c9a533626286026dbe0a2d546c5b/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "295211e668290d7741eb0fd46223087c21fc7c59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/295211e668290d7741eb0fd46223087c21fc7c59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/295211e668290d7741eb0fd46223087c21fc7c59"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 15,
      "deletions": 8
    },
    "files": [
      {
        "sha": "183c2fcfb696d0004bcefca445df9a6f0220db5f",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e35e4b2ba052c9a533626286026dbe0a2d546c5b/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e35e4b2ba052c9a533626286026dbe0a2d546c5b/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=e35e4b2ba052c9a533626286026dbe0a2d546c5b",
        "patch": "@@ -12,6 +12,7 @@\n \n #include <qt/guiconstants.h>\n #include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n \n #include <interfaces/node.h>\n #include <util/system.h>\n@@ -23,7 +24,7 @@\n #include <cmath>\n \n /* Total required space (in GB) depending on user choice (prune, not prune) */\n-static uint64_t requiredSpace;\n+static int64_t requiredSpace;\n \n /* Check free space asynchronously to prevent hanging the UI thread.\n \n@@ -130,18 +131,18 @@ Intro::Intro(QWidget *parent, uint64_t blockchain_size, uint64_t chain_state_siz\n     );\n     ui->lblExplanation2->setText(ui->lblExplanation2->text().arg(PACKAGE_NAME));\n \n-    uint64_t pruneTarget = std::max<int64_t>(0, gArgs.GetArg(\"-prune\", 0));\n-    if (pruneTarget > 1) { // -prune=1 means enabled, above that it's a size in MB\n+    int64_t prune_target_mib = std::max<int64_t>(0, gArgs.GetArg(\"-prune\", 0));\n+    if (prune_target_mib > 1) { // -prune=1 means enabled, above that it's a size in MiB\n         ui->prune->setChecked(true);\n         ui->prune->setEnabled(false);\n     }\n-    ui->prune->setText(tr(\"Discard blocks after verification, except most recent %1 GB (prune)\").arg(pruneTarget ? pruneTarget / 1000 : DEFAULT_PRUNE_TARGET_GB));\n+    const int prune_target_gb = PruneMiBtoGB(prune_target_mib);\n+    ui->prune->setText(tr(\"Discard blocks after verification, except most recent %1 GB (prune)\").arg(prune_target_gb ? prune_target_gb : DEFAULT_PRUNE_TARGET_GB));\n     requiredSpace = m_blockchain_size;\n     QString storageRequiresMsg = tr(\"At least %1 GB of data will be stored in this directory, and it will grow over time.\");\n-    if (pruneTarget) {\n-        uint64_t prunedGBs = std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n-        if (prunedGBs <= requiredSpace) {\n-            requiredSpace = prunedGBs;\n+    if (prune_target_gb) {\n+        if (prune_target_gb <= requiredSpace) {\n+            requiredSpace = prune_target_gb;\n             storageRequiresMsg = tr(\"Approximately %1 GB of data will be stored in this directory.\");\n         }\n         ui->lblExplanation3->setVisible(true);"
      },
      {
        "sha": "9751deadc43bcb85acdb4ac7cf4718db2e87225b",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e35e4b2ba052c9a533626286026dbe0a2d546c5b/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e35e4b2ba052c9a533626286026dbe0a2d546c5b/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=e35e4b2ba052c9a533626286026dbe0a2d546c5b",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_OPTIONSMODEL_H\n \n #include <amount.h>\n+#include <qt/guiconstants.h>\n \n #include <QAbstractListModel>\n \n@@ -16,6 +17,11 @@ class Node;\n extern const char *DEFAULT_GUI_PROXY_HOST;\n static constexpr unsigned short DEFAULT_GUI_PROXY_PORT = 9050;\n \n+/**\n+ * Convert configured prune target MiB to displayed GB. Round up to avoid underestimating max disk usage.\n+ */\n+static inline int PruneMiBtoGB(int64_t mib) { return (mib * 1024 * 1024 + GB_BYTES - 1) / GB_BYTES; }\n+\n /** Interface from Qt to configuration data structure for Bitcoin client.\n    To Qt, the options are presented as a list with the different options\n    laid out vertically."
      }
    ]
  },
  {
    "sha": "2bede28cd9ec638d8bb32c187ccf12d89345218e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmVkZTI4Y2Q5ZWM2MzhkOGJiMzJjMTg3Y2NmMTJkODkzNDUyMThl",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-12T10:14:52Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-01-08T15:21:40Z"
      },
      "message": "util: Add PruneGBtoMiB() function\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "9562a0b91bd66adae244f9d7222a1e7d5e995d40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9562a0b91bd66adae244f9d7222a1e7d5e995d40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bede28cd9ec638d8bb32c187ccf12d89345218e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl4V84QACgkQQQEIES5+\nqB9tCxAAmnbsNNE3p0Ja1DuJn2Ih7ebMyBtRGHBjBxQlby5sLT+hVn7Kxx+VrzBC\nvvHfhUsgGnSN0VAZD6G9VIUp5DTFjun4iDtpKs6L7gHtu/Xgv67ieibFDmI4yKf2\nQ74Ues/5SXSENJyZHndR6wgiObMwE1d+vxiW2n7e8BGpilKmc8RGYe5BGbKJW+L2\n993YqOpj95pb1hNWeZrv6dauXMzq3MQ1ou0eCbp7GWIkjftlNZFxAsh+8oHAs1RN\neD399a+2k6zH2vSsGcKiUIdmzpaSLlrjenjtt1YLqr1+CTDxrwMBx/zq9H20t8Nw\n8YNWBj2G05bKzmSVO+ZiLPKDDKSX5Oe1jmdly/PLGKbZ6k1o52eOChkteM3P75vi\nLzpu1ueZeE+934rQo9aUISifa2x5RZx7jFLQtVh5/0ualWbUgjr9jQnSLU3QUwW4\n5IQjGOW6m4uXKjYL7OGlg26XkfT6W9rvNLw6CvNraSVDC+YWh4hwgkPaM+WX+yHx\nnX5wr69UolGzG1Tc5b/6aQj43/Pc+IdCBpI9a/iZ4IYPnVf+hkoCwEzASYNO43ji\nWRTr5cFmneeDWLWmQ/KjkykWJ3yRaDAlzc3CSZ7Hr49pcgQfagvP7J7ZKA/QsK+j\n459hCzAH1kdtKM6aAaTurIcuVVlsY2d5gRMmU6CoBfmopl1f9W4=\n=JlAC\n-----END PGP SIGNATURE-----",
        "payload": "tree 9562a0b91bd66adae244f9d7222a1e7d5e995d40\nparent e35e4b2ba052c9a533626286026dbe0a2d546c5b\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1573553692 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1578496900 +0200\n\nutil: Add PruneGBtoMiB() function\n\nThis commit does not change behavior.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bede28cd9ec638d8bb32c187ccf12d89345218e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2bede28cd9ec638d8bb32c187ccf12d89345218e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bede28cd9ec638d8bb32c187ccf12d89345218e/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e35e4b2ba052c9a533626286026dbe0a2d546c5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e35e4b2ba052c9a533626286026dbe0a2d546c5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e35e4b2ba052c9a533626286026dbe0a2d546c5b"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f8cbd8358ab711d308b97483258650c8551cb6e1",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bede28cd9ec638d8bb32c187ccf12d89345218e/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bede28cd9ec638d8bb32c187ccf12d89345218e/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=2bede28cd9ec638d8bb32c187ccf12d89345218e",
        "patch": "@@ -240,9 +240,8 @@ void OptionsModel::SetPruneEnabled(bool prune, bool force)\n {\n     QSettings settings;\n     settings.setValue(\"bPrune\", prune);\n-    // Convert prune size from GB to MiB:\n-    const uint64_t nPruneSizeMiB = (settings.value(\"nPruneSize\").toInt() * GB_BYTES) >> 20;\n-    std::string prune_val = prune ? std::to_string(nPruneSizeMiB) : \"0\";\n+    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n+    std::string prune_val = prune ? std::to_string(prune_target_mib) : \"0\";\n     if (force) {\n         m_node.forceSetArg(\"-prune\", prune_val);\n         return;"
      },
      {
        "sha": "81ab0008e4d49053d2939901a07a1aac68cb61f9",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bede28cd9ec638d8bb32c187ccf12d89345218e/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bede28cd9ec638d8bb32c187ccf12d89345218e/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=2bede28cd9ec638d8bb32c187ccf12d89345218e",
        "patch": "@@ -22,6 +22,11 @@ static constexpr unsigned short DEFAULT_GUI_PROXY_PORT = 9050;\n  */\n static inline int PruneMiBtoGB(int64_t mib) { return (mib * 1024 * 1024 + GB_BYTES - 1) / GB_BYTES; }\n \n+/**\n+ * Convert displayed prune target GB to configured MiB. Round down so roundtrip GB -> MiB -> GB conversion is stable.\n+ */\n+static inline int64_t PruneGBtoMiB(int gb) { return gb * GB_BYTES / 1024 / 1024; }\n+\n /** Interface from Qt to configuration data structure for Bitcoin client.\n    To Qt, the options are presented as a list with the different options\n    laid out vertically."
      }
    ]
  },
  {
    "sha": "e4caa82a03df5c6a6d5d29f34ab006d732c6dac1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGNhYTgyYTAzZGY1YzZhNmQ1ZDI5ZjM0YWIwMDZkNzMyYzZkYWMx",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-12T12:25:43Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-01-14T16:47:50Z"
      },
      "message": "refactor: Replace static variable with data member",
      "tree": {
        "sha": "596d3d74f87441fe14e80e40eb325d7074791bf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/596d3d74f87441fe14e80e40eb325d7074791bf5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4caa82a03df5c6a6d5d29f34ab006d732c6dac1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl4d8LkACgkQQQEIES5+\nqB/fSxAAo1QF+vjsF7yeJIdYPZZLy5CRz0Lsi26co+Ihq1pNkPw02JYnAfVOsqbG\n6EHYKdztdwn0nvPExscupwDufNLNKrHStUO4zaEdK1ZZS47QDX7ntcN7sXYQaCzz\nH15qlwfRP/0j2pqUlEXn4gas1irZ8WJAAZ66Fv8Mn2gJ8J9KjrkGdgFwBnK7+sCP\nycd3k9hG2jcowo6TIK3kO1S8suhAR9r45HntIb7iO2MqfmyaEi5/CWbQBGN0WQ/V\nMEevS3YkQiPNAg3hmbKIUO3vAD+tp5NaUa4weg9daJO3J/MVBXJT+Qb2MOIF4wkz\njejFN/NDg3hnTClyEYPVvl5qhRmCZ1+ReEbRF0D0c1rdFpgQhrQ4/GTaqoNN4mj1\n+5Uxc+zFjWE7vKZ+nzpHX8yqG+VyALgHz6t7ID/xbzK44uF/2hBLwidSlEjV5tr6\nl/Ee8BTKUUoxku+oBeMzfahKqxFqfIblQc5L162YaSiYXM5tsdQdhJ0m1nrMmnyC\njktgsaQsMg0ycEgolR0c1YoIX5yBRxFCkxcY89bOHxV8+j8OHIg3sr3/mUse733D\nkUI6PPYBECpdpFjaAf0tUZDnPOdx4Yq6J+0tvpyr7kTIRu1eP9DfkNi7rSlklvOT\nyRsKjLcsC+kstXIYypvRaAMgfgxavRe32LUXV+SIIwo5unAwyrI=\n=lRj/\n-----END PGP SIGNATURE-----",
        "payload": "tree 596d3d74f87441fe14e80e40eb325d7074791bf5\nparent 2bede28cd9ec638d8bb32c187ccf12d89345218e\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1573561543 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1579020470 +0200\n\nrefactor: Replace static variable with data member\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4caa82a03df5c6a6d5d29f34ab006d732c6dac1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4caa82a03df5c6a6d5d29f34ab006d732c6dac1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4caa82a03df5c6a6d5d29f34ab006d732c6dac1/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2bede28cd9ec638d8bb32c187ccf12d89345218e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bede28cd9ec638d8bb32c187ccf12d89345218e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bede28cd9ec638d8bb32c187ccf12d89345218e"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 19,
      "deletions": 26
    },
    "files": [
      {
        "sha": "196f4b50bc4eeccd80d77a05878792af758aca2e",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 23,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4caa82a03df5c6a6d5d29f34ab006d732c6dac1/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4caa82a03df5c6a6d5d29f34ab006d732c6dac1/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=e4caa82a03df5c6a6d5d29f34ab006d732c6dac1",
        "patch": "@@ -23,9 +23,6 @@\n \n #include <cmath>\n \n-/* Total required space (in GB) depending on user choice (prune, not prune) */\n-static int64_t requiredSpace;\n-\n /* Check free space asynchronously to prevent hanging the UI thread.\n \n    Up to one request to check a path is in flight to this thread; when the check()\n@@ -111,21 +108,21 @@ void FreespaceChecker::check()\n }\n \n \n-Intro::Intro(QWidget *parent, uint64_t blockchain_size, uint64_t chain_state_size) :\n+Intro::Intro(QWidget *parent, int64_t blockchain_size_gb, int64_t chain_state_size_gb) :\n     QDialog(parent),\n     ui(new Ui::Intro),\n     thread(nullptr),\n     signalled(false),\n-    m_blockchain_size(blockchain_size),\n-    m_chain_state_size(chain_state_size)\n+    m_blockchain_size_gb(blockchain_size_gb),\n+    m_chain_state_size_gb(chain_state_size_gb)\n {\n     ui->setupUi(this);\n     ui->welcomeLabel->setText(ui->welcomeLabel->text().arg(PACKAGE_NAME));\n     ui->storageLabel->setText(ui->storageLabel->text().arg(PACKAGE_NAME));\n \n     ui->lblExplanation1->setText(ui->lblExplanation1->text()\n         .arg(PACKAGE_NAME)\n-        .arg(m_blockchain_size)\n+        .arg(m_blockchain_size_gb)\n         .arg(2009)\n         .arg(tr(\"Bitcoin\"))\n     );\n@@ -138,21 +135,16 @@ Intro::Intro(QWidget *parent, uint64_t blockchain_size, uint64_t chain_state_siz\n     }\n     const int prune_target_gb = PruneMiBtoGB(prune_target_mib);\n     ui->prune->setText(tr(\"Discard blocks after verification, except most recent %1 GB (prune)\").arg(prune_target_gb ? prune_target_gb : DEFAULT_PRUNE_TARGET_GB));\n-    requiredSpace = m_blockchain_size;\n+    m_required_space_gb = m_blockchain_size_gb + m_chain_state_size_gb;\n     QString storageRequiresMsg = tr(\"At least %1 GB of data will be stored in this directory, and it will grow over time.\");\n-    if (prune_target_gb) {\n-        if (prune_target_gb <= requiredSpace) {\n-            requiredSpace = prune_target_gb;\n-            storageRequiresMsg = tr(\"Approximately %1 GB of data will be stored in this directory.\");\n-        }\n-        ui->lblExplanation3->setVisible(true);\n-    } else {\n-        ui->lblExplanation3->setVisible(false);\n+    if (0 < prune_target_gb && prune_target_gb <= m_blockchain_size_gb) {\n+        m_required_space_gb = prune_target_gb + m_chain_state_size_gb;\n+        storageRequiresMsg = tr(\"Approximately %1 GB of data will be stored in this directory.\");\n     }\n-    requiredSpace += m_chain_state_size;\n+    ui->lblExplanation3->setVisible(prune_target_gb > 0);\n     ui->sizeWarningLabel->setText(\n         tr(\"%1 will download and store a copy of the Bitcoin block chain.\").arg(PACKAGE_NAME) + \" \" +\n-        storageRequiresMsg.arg(requiredSpace) + \" \" +\n+        storageRequiresMsg.arg(m_required_space_gb) + \" \" +\n         tr(\"The wallet will also be stored in this directory.\")\n     );\n     this->adjustSize();\n@@ -272,13 +264,12 @@ void Intro::setStatus(int status, const QString &message, quint64 bytesAvailable\n         ui->freeSpace->setText(\"\");\n     } else {\n         QString freeString = tr(\"%n GB of free space available\", \"\", bytesAvailable/GB_BYTES);\n-        if(bytesAvailable < requiredSpace * GB_BYTES)\n-        {\n-            freeString += \" \" + tr(\"(of %n GB needed)\", \"\", requiredSpace);\n+        if (bytesAvailable < m_required_space_gb * GB_BYTES) {\n+            freeString += \" \" + tr(\"(of %n GB needed)\", \"\", m_required_space_gb);\n             ui->freeSpace->setStyleSheet(\"QLabel { color: #800000 }\");\n             ui->prune->setChecked(true);\n-        } else if (bytesAvailable / GB_BYTES - requiredSpace < 10) {\n-            freeString += \" \" + tr(\"(%n GB needed for full chain)\", \"\", requiredSpace);\n+        } else if (bytesAvailable / GB_BYTES - m_required_space_gb < 10) {\n+            freeString += \" \" + tr(\"(%n GB needed for full chain)\", \"\", m_required_space_gb);\n             ui->freeSpace->setStyleSheet(\"QLabel { color: #999900 }\");\n             ui->prune->setChecked(true);\n         } else {"
      },
      {
        "sha": "157b33b45614f6a365f4880f0dfad244867588cd",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4caa82a03df5c6a6d5d29f34ab006d732c6dac1/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4caa82a03df5c6a6d5d29f34ab006d732c6dac1/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=e4caa82a03df5c6a6d5d29f34ab006d732c6dac1",
        "patch": "@@ -31,7 +31,7 @@ class Intro : public QDialog\n \n public:\n     explicit Intro(QWidget *parent = nullptr,\n-                   uint64_t blockchain_size = 0, uint64_t chain_state_size = 0);\n+                   int64_t blockchain_size_gb = 0, int64_t chain_state_size_gb = 0);\n     ~Intro();\n \n     QString getDataDirectory();\n@@ -67,8 +67,10 @@ private Q_SLOTS:\n     QMutex mutex;\n     bool signalled;\n     QString pathToCheck;\n-    uint64_t m_blockchain_size;\n-    uint64_t m_chain_state_size;\n+    const int64_t m_blockchain_size_gb;\n+    const int64_t m_chain_state_size_gb;\n+    //! Total required space (in GB) depending on user choice (prune or not prune).\n+    int64_t m_required_space_gb{0};\n \n     void startThread();\n     void checkPath(const QString &dataDir);"
      }
    ]
  },
  {
    "sha": "daa3f3fa9071a229275dd6a1b8445237ddc3fa97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWEzZjNmYTkwNzFhMjI5Mjc1ZGQ2YTFiODQ0NTIzN2RkYzNmYTk3",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-11-12T13:21:20Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-01-14T16:53:02Z"
      },
      "message": "refactor: Add Intro::UpdatePruneLabels()\n\nThis is a move-only commit and it does not change behavior.",
      "tree": {
        "sha": "85ffc0f0b1e137a988e89e6a5feee1a54b848586",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85ffc0f0b1e137a988e89e6a5feee1a54b848586"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/daa3f3fa9071a229275dd6a1b8445237ddc3fa97",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl4d8fQACgkQQQEIES5+\nqB8QJg/+NBWsDFIXwa5jGw/Gr81OVzKYTlvdix57fARlUhtCs8ZYruww+k+1re2m\nMBywtJCrTdGuwXNF/IIXvmglpAHU7ATuVrw9VS8Vl2ay4fMzfUEGyGrkVAalEC0P\nz6c7Z5/FviS7MCLlAzTXm1VeBnkfumFJeUoPh4NEioev05am8SXCuyt4Ijggmnrv\neaRTop0I6U9zNBVNpS6KPHp3HBouf8ZQFefqJtfzRKY7ZlL1IrjsQWQIJYleGs+1\nkW9D/dJfKAJck4l13a6TveQLZpeoZan0q0EEdhJspf0hYCpvRteFasMjUwPLEy9I\n7TSZp49XCgFbCGXTajur2SOTPxnjD3ecuI30sScM1PrBR8rNzXD3PNPd5uKK0frq\nfoCAX9uXkNu6Tfe08un84HDNaz0ZKVCiq2syVJc0VISGVbGWgifdgXjhdcbGJ6Hw\nEq77vxWuDw/X7L2l3Q4DZwRJVn/du5obf3DFcgrDH/KXqonAorWLKrSF+YlI5lQZ\n4z97op4tpRLgycTiUB1BC6MDts9smdA6q3BHESOtO+8OlVUBi4EM52G5CuupCfZT\nqcivfObBcB4QxnReBWaNGH+NhXTskXLz82OL41ax6wzFf1dIWA0LoZNUlpb5sOTF\n4iLRmoWmSWEEWxvwNO14qgPxlCv7u955L29ZuIDVVkm+rDa1+Us=\n=1PvN\n-----END PGP SIGNATURE-----",
        "payload": "tree 85ffc0f0b1e137a988e89e6a5feee1a54b848586\nparent e4caa82a03df5c6a6d5d29f34ab006d732c6dac1\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1573564880 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1579020782 +0200\n\nrefactor: Add Intro::UpdatePruneLabels()\n\nThis is a move-only commit and it does not change behavior.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daa3f3fa9071a229275dd6a1b8445237ddc3fa97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/daa3f3fa9071a229275dd6a1b8445237ddc3fa97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daa3f3fa9071a229275dd6a1b8445237ddc3fa97/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4caa82a03df5c6a6d5d29f34ab006d732c6dac1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4caa82a03df5c6a6d5d29f34ab006d732c6dac1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4caa82a03df5c6a6d5d29f34ab006d732c6dac1"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 19,
      "deletions": 13
    },
    "files": [
      {
        "sha": "a1a7c8ab8b4aa847760deca0c0c61f2587f7b7ac",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 13,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daa3f3fa9071a229275dd6a1b8445237ddc3fa97/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daa3f3fa9071a229275dd6a1b8445237ddc3fa97/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=daa3f3fa9071a229275dd6a1b8445237ddc3fa97",
        "patch": "@@ -135,19 +135,7 @@ Intro::Intro(QWidget *parent, int64_t blockchain_size_gb, int64_t chain_state_si\n     }\n     const int prune_target_gb = PruneMiBtoGB(prune_target_mib);\n     ui->prune->setText(tr(\"Discard blocks after verification, except most recent %1 GB (prune)\").arg(prune_target_gb ? prune_target_gb : DEFAULT_PRUNE_TARGET_GB));\n-    m_required_space_gb = m_blockchain_size_gb + m_chain_state_size_gb;\n-    QString storageRequiresMsg = tr(\"At least %1 GB of data will be stored in this directory, and it will grow over time.\");\n-    if (0 < prune_target_gb && prune_target_gb <= m_blockchain_size_gb) {\n-        m_required_space_gb = prune_target_gb + m_chain_state_size_gb;\n-        storageRequiresMsg = tr(\"Approximately %1 GB of data will be stored in this directory.\");\n-    }\n-    ui->lblExplanation3->setVisible(prune_target_gb > 0);\n-    ui->sizeWarningLabel->setText(\n-        tr(\"%1 will download and store a copy of the Bitcoin block chain.\").arg(PACKAGE_NAME) + \" \" +\n-        storageRequiresMsg.arg(m_required_space_gb) + \" \" +\n-        tr(\"The wallet will also be stored in this directory.\")\n-    );\n-    this->adjustSize();\n+    UpdatePruneLabels(prune_target_gb);\n     startThread();\n }\n \n@@ -341,3 +329,20 @@ QString Intro::getPathToCheck()\n     mutex.unlock();\n     return retval;\n }\n+\n+void Intro::UpdatePruneLabels(int64_t prune_target_gb)\n+{\n+    m_required_space_gb = m_blockchain_size_gb + m_chain_state_size_gb;\n+    QString storageRequiresMsg = tr(\"At least %1 GB of data will be stored in this directory, and it will grow over time.\");\n+    if (0 < prune_target_gb && prune_target_gb <= m_blockchain_size_gb) {\n+        m_required_space_gb = prune_target_gb + m_chain_state_size_gb;\n+        storageRequiresMsg = tr(\"Approximately %1 GB of data will be stored in this directory.\");\n+    }\n+    ui->lblExplanation3->setVisible(prune_target_gb > 0);\n+    ui->sizeWarningLabel->setText(\n+        tr(\"%1 will download and store a copy of the Bitcoin block chain.\").arg(PACKAGE_NAME) + \" \" +\n+        storageRequiresMsg.arg(m_required_space_gb) + \" \" +\n+        tr(\"The wallet will also be stored in this directory.\")\n+    );\n+    this->adjustSize();\n+}"
      },
      {
        "sha": "b4fd390006fdc04656860496363921ca228617c5",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daa3f3fa9071a229275dd6a1b8445237ddc3fa97/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daa3f3fa9071a229275dd6a1b8445237ddc3fa97/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=daa3f3fa9071a229275dd6a1b8445237ddc3fa97",
        "patch": "@@ -75,6 +75,7 @@ private Q_SLOTS:\n     void startThread();\n     void checkPath(const QString &dataDir);\n     QString getPathToCheck();\n+    void UpdatePruneLabels(int64_t prune_target_gb);\n \n     friend class FreespaceChecker;\n };"
      }
    ]
  },
  {
    "sha": "4824a7d36cf47e766865e0fefe952ec860eb82dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODI0YTdkMzZjZjQ3ZTc2Njg2NWUwZmVmZTk1MmVjODYwZWI4MmRk",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-12-08T15:18:15Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-01-14T16:53:08Z"
      },
      "message": "gui: Add Intro::UpdateFreeSpaceLabel()\n\nIf a new custom datadir has enough free space, the prune checkbox gets\nunchecked, unless -prune=NNN command-line option is provided.",
      "tree": {
        "sha": "7a50b61ceac14aef96a03c4a0a92bd7009649c2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a50b61ceac14aef96a03c4a0a92bd7009649c2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4824a7d36cf47e766865e0fefe952ec860eb82dd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl4d8fQACgkQQQEIES5+\nqB8bkg/+OsYyQUvObker0l20L1M5uhyA8TOKicS72XJMF+n1JmtQOX8Ax3wYTr1Q\n8mseRrH4a3jM8JTUDbXJRM2pD1RrFYsR1ttTxdenkNH9d32c8cyvQlH5bdWDvFL7\nLLKifT5GZMncFWlw2z4jHZ0cBhfErSJgJQzkgWm2Z8v0lkAsvhw1RU8sSdLyqYK9\numCvS65eIpfR4YKGUe4ptn+wrQplbhBlvO/SqtUlchy5QXLMCOw3Fxz3GEST7UI8\n5wgs3KNK2dGAGbXLn8WFDQYnW0/7Ugi6xdnhfR+diHLM3DFN8uOb5a55k4lv3sCk\nXg0dbJZOAgV0kAsAxE+o5LOGWHAuXerIEkskxdMKDN/7oMylw9xZj+5Llbzc4Dr6\nguIiw8NL5pn1C/rTwJUexLChkrp0+q3ZlM3dfT4/fQC3kPraIrdSciC56VjA8dN1\nEd6NIB5P15fbzBexy+yR36MFLR20oepJSONrsDf1+vB7/OcuDit2UNlApf3JVhJo\naBcwAhAHjE22m8Jpm+LoNvEQ0wXwLmikVP6ARgnAPbjZxCos0SQTh2ZstOAcbv9T\nP4lS9s/OPLrNcBXOjP5r/siUQvu/KlSFaqjL6SC80Ty0Ukh0w4nxWxMwWGx7+Ehy\nkWFBS2e+0oH+XwaSc7tMU7IuEO/BghfqS/vRhx1B+o80jZQwoaE=\n=uQbA\n-----END PGP SIGNATURE-----",
        "payload": "tree 7a50b61ceac14aef96a03c4a0a92bd7009649c2a\nparent daa3f3fa9071a229275dd6a1b8445237ddc3fa97\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1575818295 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1579020788 +0200\n\ngui: Add Intro::UpdateFreeSpaceLabel()\n\nIf a new custom datadir has enough free space, the prune checkbox gets\nunchecked, unless -prune=NNN command-line option is provided.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4824a7d36cf47e766865e0fefe952ec860eb82dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4824a7d36cf47e766865e0fefe952ec860eb82dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4824a7d36cf47e766865e0fefe952ec860eb82dd/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "daa3f3fa9071a229275dd6a1b8445237ddc3fa97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daa3f3fa9071a229275dd6a1b8445237ddc3fa97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/daa3f3fa9071a229275dd6a1b8445237ddc3fa97"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 21,
      "deletions": 12
    },
    "files": [
      {
        "sha": "cb7b13260adeb6a5978e71e5877d19104fc7a57e",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 12,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4824a7d36cf47e766865e0fefe952ec860eb82dd/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4824a7d36cf47e766865e0fefe952ec860eb82dd/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=4824a7d36cf47e766865e0fefe952ec860eb82dd",
        "patch": "@@ -251,24 +251,31 @@ void Intro::setStatus(int status, const QString &message, quint64 bytesAvailable\n     {\n         ui->freeSpace->setText(\"\");\n     } else {\n-        QString freeString = tr(\"%n GB of free space available\", \"\", bytesAvailable/GB_BYTES);\n-        if (bytesAvailable < m_required_space_gb * GB_BYTES) {\n-            freeString += \" \" + tr(\"(of %n GB needed)\", \"\", m_required_space_gb);\n-            ui->freeSpace->setStyleSheet(\"QLabel { color: #800000 }\");\n-            ui->prune->setChecked(true);\n-        } else if (bytesAvailable / GB_BYTES - m_required_space_gb < 10) {\n-            freeString += \" \" + tr(\"(%n GB needed for full chain)\", \"\", m_required_space_gb);\n-            ui->freeSpace->setStyleSheet(\"QLabel { color: #999900 }\");\n-            ui->prune->setChecked(true);\n-        } else {\n-            ui->freeSpace->setStyleSheet(\"\");\n+        m_bytes_available = bytesAvailable;\n+        if (ui->prune->isEnabled()) {\n+            ui->prune->setChecked(m_bytes_available < (m_blockchain_size_gb + m_chain_state_size_gb + 10) * GB_BYTES);\n         }\n-        ui->freeSpace->setText(freeString + \".\");\n+        UpdateFreeSpaceLabel();\n     }\n     /* Don't allow confirm in ERROR state */\n     ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(status != FreespaceChecker::ST_ERROR);\n }\n \n+void Intro::UpdateFreeSpaceLabel()\n+{\n+    QString freeString = tr(\"%n GB of free space available\", \"\", m_bytes_available / GB_BYTES);\n+    if (m_bytes_available < m_required_space_gb * GB_BYTES) {\n+        freeString += \" \" + tr(\"(of %n GB needed)\", \"\", m_required_space_gb);\n+        ui->freeSpace->setStyleSheet(\"QLabel { color: #800000 }\");\n+    } else if (m_bytes_available / GB_BYTES - m_required_space_gb < 10) {\n+        freeString += \" \" + tr(\"(%n GB needed for full chain)\", \"\", m_required_space_gb);\n+        ui->freeSpace->setStyleSheet(\"QLabel { color: #999900 }\");\n+    } else {\n+        ui->freeSpace->setStyleSheet(\"\");\n+    }\n+    ui->freeSpace->setText(freeString + \".\");\n+}\n+\n void Intro::on_dataDirectory_textChanged(const QString &dataDirStr)\n {\n     /* Disable OK button until check result comes in */"
      },
      {
        "sha": "8375847cc01c9d268938d176fb7b586798dd24bf",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4824a7d36cf47e766865e0fefe952ec860eb82dd/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4824a7d36cf47e766865e0fefe952ec860eb82dd/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=4824a7d36cf47e766865e0fefe952ec860eb82dd",
        "patch": "@@ -71,11 +71,13 @@ private Q_SLOTS:\n     const int64_t m_chain_state_size_gb;\n     //! Total required space (in GB) depending on user choice (prune or not prune).\n     int64_t m_required_space_gb{0};\n+    uint64_t m_bytes_available{0};\n \n     void startThread();\n     void checkPath(const QString &dataDir);\n     QString getPathToCheck();\n     void UpdatePruneLabels(int64_t prune_target_gb);\n+    void UpdateFreeSpaceLabel();\n \n     friend class FreespaceChecker;\n };"
      }
    ]
  },
  {
    "sha": "4f7127d1e3a51f0f55d42a08439c516dcc8d1a26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjcxMjdkMWUzYTUxZjBmNTVkNDJhMDg0MzljNTE2ZGNjOGQxYTI2",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-12-08T21:28:50Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-01-14T17:14:14Z"
      },
      "message": "gui: Make Intro consistent with prune checkbox\n\nWhen prune checkbox is toggled, the related text labels and the amount\nof required space shown are updated (previously they were only updated\nwhen the data directory was updated).",
      "tree": {
        "sha": "47da20e9c1cc77f8d3d287f6b270bb255c516df3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47da20e9c1cc77f8d3d287f6b270bb255c516df3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f7127d1e3a51f0f55d42a08439c516dcc8d1a26",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl4d9ugACgkQQQEIES5+\nqB/zMA/+ObQP0lGyvgV19TBFWc6kEtqmCD2OgtLokuFka4IBOUUCxgCPXnEByule\n49HFANHrk5rxAr+i/jxtnAjBAkFyYYjnxCqi1SfuIqlLj280UQU7l1p9ZuaSdCgt\ndcGhQSdL/4swdYTFgReaszMWR6zKHV5mS76WlITBNlqAOUpb+NBhykRQW9Cp+OzN\nxcz/zHLK6osgxYoIvIigXAyahgNFFH9XReJZDIJ9zF0sQ1ih9r4EclPHtUwmerCB\nJJR2ci1kANHneKetQZuUKY6AcaX97Ffx1gqoUGEMcYrBMHxaJWdzTzH+SKg2ku4P\n4eth3BjWeqA0wkkOED7C/f3Hiwl3mw+ZGBkvnwl1HjTdVNDFYQSzu5X91Bmcat3A\ni0x/ama7O0mYmX02JKYKnM2T9jjULeshMdGu5PJPIjFRV5Fs670R5jV8oYctFfd6\n2Xul9/n5gTtyW3nGOrtlbhGCaIJgx9tfJhiZbvxVojUlkI1a7luS6wL/L4Rq08+m\nGQC6WIbkrH4FNVcpbOb1576ZTo2p/tLxmOnj9/nrkjVqBV6KUW2THHmxRMQBjnGl\nNNb/Te9U/nfjcKQXd9HX5H35927WDXmsZ3ieKV+6TeEpc9CvV2N/MXDdvQjjrz0G\nddeGKlfwxHEKQG0VDfudhxK3Prj65gh8ZEHf5pey9MCqnfo9ncM=\n=a52E\n-----END PGP SIGNATURE-----",
        "payload": "tree 47da20e9c1cc77f8d3d287f6b270bb255c516df3\nparent 4824a7d36cf47e766865e0fefe952ec860eb82dd\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1575840530 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1579022054 +0200\n\ngui: Make Intro consistent with prune checkbox\n\nWhen prune checkbox is toggled, the related text labels and the amount\nof required space shown are updated (previously they were only updated\nwhen the data directory was updated).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f7127d1e3a51f0f55d42a08439c516dcc8d1a26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f7127d1e3a51f0f55d42a08439c516dcc8d1a26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f7127d1e3a51f0f55d42a08439c516dcc8d1a26/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4824a7d36cf47e766865e0fefe952ec860eb82dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4824a7d36cf47e766865e0fefe952ec860eb82dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4824a7d36cf47e766865e0fefe952ec860eb82dd"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 26,
      "deletions": 11
    },
    "files": [
      {
        "sha": "873d9dcd6f2aebd7d9b9fd3427983c472f8088f3",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 10,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f7127d1e3a51f0f55d42a08439c516dcc8d1a26/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f7127d1e3a51f0f55d42a08439c516dcc8d1a26/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=4f7127d1e3a51f0f55d42a08439c516dcc8d1a26",
        "patch": "@@ -107,14 +107,24 @@ void FreespaceChecker::check()\n     Q_EMIT reply(replyStatus, replyMessage, freeBytesAvailable);\n }\n \n+namespace {\n+//! Return pruning size that will be used if automatic pruning is enabled.\n+int GetPruneTargetGB()\n+{\n+    int64_t prune_target_mib = gArgs.GetArg(\"-prune\", 0);\n+    // >1 means automatic pruning is enabled by config, 1 means manual pruning, 0 means no pruning.\n+    return prune_target_mib > 1 ? PruneMiBtoGB(prune_target_mib) : DEFAULT_PRUNE_TARGET_GB;\n+}\n+} // namespace\n \n Intro::Intro(QWidget *parent, int64_t blockchain_size_gb, int64_t chain_state_size_gb) :\n     QDialog(parent),\n     ui(new Ui::Intro),\n     thread(nullptr),\n     signalled(false),\n     m_blockchain_size_gb(blockchain_size_gb),\n-    m_chain_state_size_gb(chain_state_size_gb)\n+    m_chain_state_size_gb(chain_state_size_gb),\n+    m_prune_target_gb{GetPruneTargetGB()}\n {\n     ui->setupUi(this);\n     ui->welcomeLabel->setText(ui->welcomeLabel->text().arg(PACKAGE_NAME));\n@@ -128,14 +138,18 @@ Intro::Intro(QWidget *parent, int64_t blockchain_size_gb, int64_t chain_state_si\n     );\n     ui->lblExplanation2->setText(ui->lblExplanation2->text().arg(PACKAGE_NAME));\n \n-    int64_t prune_target_mib = std::max<int64_t>(0, gArgs.GetArg(\"-prune\", 0));\n-    if (prune_target_mib > 1) { // -prune=1 means enabled, above that it's a size in MiB\n+    if (gArgs.GetArg(\"-prune\", 0) > 1) { // -prune=1 means enabled, above that it's a size in MiB\n         ui->prune->setChecked(true);\n         ui->prune->setEnabled(false);\n     }\n-    const int prune_target_gb = PruneMiBtoGB(prune_target_mib);\n-    ui->prune->setText(tr(\"Discard blocks after verification, except most recent %1 GB (prune)\").arg(prune_target_gb ? prune_target_gb : DEFAULT_PRUNE_TARGET_GB));\n-    UpdatePruneLabels(prune_target_gb);\n+    ui->prune->setText(tr(\"Discard blocks after verification, except most recent %1 GB (prune)\").arg(m_prune_target_gb));\n+    UpdatePruneLabels(ui->prune->isChecked());\n+\n+    connect(ui->prune, &QCheckBox::toggled, [this](bool prune_checked) {\n+        UpdatePruneLabels(prune_checked);\n+        UpdateFreeSpaceLabel();\n+    });\n+\n     startThread();\n }\n \n@@ -337,15 +351,15 @@ QString Intro::getPathToCheck()\n     return retval;\n }\n \n-void Intro::UpdatePruneLabels(int64_t prune_target_gb)\n+void Intro::UpdatePruneLabels(bool prune_checked)\n {\n     m_required_space_gb = m_blockchain_size_gb + m_chain_state_size_gb;\n     QString storageRequiresMsg = tr(\"At least %1 GB of data will be stored in this directory, and it will grow over time.\");\n-    if (0 < prune_target_gb && prune_target_gb <= m_blockchain_size_gb) {\n-        m_required_space_gb = prune_target_gb + m_chain_state_size_gb;\n+    if (prune_checked && m_prune_target_gb <= m_blockchain_size_gb) {\n+        m_required_space_gb = m_prune_target_gb + m_chain_state_size_gb;\n         storageRequiresMsg = tr(\"Approximately %1 GB of data will be stored in this directory.\");\n     }\n-    ui->lblExplanation3->setVisible(prune_target_gb > 0);\n+    ui->lblExplanation3->setVisible(prune_checked);\n     ui->sizeWarningLabel->setText(\n         tr(\"%1 will download and store a copy of the Bitcoin block chain.\").arg(PACKAGE_NAME) + \" \" +\n         storageRequiresMsg.arg(m_required_space_gb) + \" \" +"
      },
      {
        "sha": "732393246ef1e4af17851cb89ca487b056cd13dc",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f7127d1e3a51f0f55d42a08439c516dcc8d1a26/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f7127d1e3a51f0f55d42a08439c516dcc8d1a26/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=4f7127d1e3a51f0f55d42a08439c516dcc8d1a26",
        "patch": "@@ -72,11 +72,12 @@ private Q_SLOTS:\n     //! Total required space (in GB) depending on user choice (prune or not prune).\n     int64_t m_required_space_gb{0};\n     uint64_t m_bytes_available{0};\n+    const int64_t m_prune_target_gb;\n \n     void startThread();\n     void checkPath(const QString &dataDir);\n     QString getPathToCheck();\n-    void UpdatePruneLabels(int64_t prune_target_gb);\n+    void UpdatePruneLabels(bool prune_checked);\n     void UpdateFreeSpaceLabel();\n \n     friend class FreespaceChecker;"
      }
    ]
  }
]