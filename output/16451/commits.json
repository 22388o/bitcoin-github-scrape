[
  {
    "sha": "b3a9d179f23f654b8fba63924bbca5fd31ad4bb0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2E5ZDE3OWYyM2Y2NTRiOGZiYTYzOTI0YmJjYTVmZDMxYWQ0YmIw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-07-25T14:42:34Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-07-30T15:57:06Z"
      },
      "message": "[wallet] Move CMerkleTx functions into CWalletTx\n\nCMerkleTx only exists as a base class for CWalletTx and for wallet file\nserialization/deserialization. Move CMerkleTx methods into CWalletTx,\nbut leave class hierarchy and serialization logic in place.",
      "tree": {
        "sha": "bb455458a7454ea5f45e800daf6947e4ac8b1920",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb455458a7454ea5f45e800daf6947e4ac8b1920"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3a9d179f23f654b8fba63924bbca5fd31ad4bb0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3a9d179f23f654b8fba63924bbca5fd31ad4bb0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3a9d179f23f654b8fba63924bbca5fd31ad4bb0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3a9d179f23f654b8fba63924bbca5fd31ad4bb0/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74f1a27f2f45af7dafcc34df766cf76d29c7c6ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74f1a27f2f45af7dafcc34df766cf76d29c7c6ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74f1a27f2f45af7dafcc34df766cf76d29c7c6ed"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 38,
      "deletions": 34
    },
    "files": [
      {
        "sha": "11a2154f53cba7a00c189180f7b8e4027ff1b949",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3a9d179f23f654b8fba63924bbca5fd31ad4bb0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3a9d179f23f654b8fba63924bbca5fd31ad4bb0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b3a9d179f23f654b8fba63924bbca5fd31ad4bb0",
        "patch": "@@ -228,7 +228,7 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n \n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n-const uint256 CMerkleTx::ABANDON_HASH(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n+const uint256 CWalletTx::ABANDON_HASH(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n \n /** @defgroup mapWallet\n  *\n@@ -4627,7 +4627,7 @@ CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn)\n     m_pre_split = false;\n }\n \n-void CMerkleTx::SetMerkleBranch(const uint256& block_hash, int posInBlock)\n+void CWalletTx::SetMerkleBranch(const uint256& block_hash, int posInBlock)\n {\n     // Update the tx's hashBlock\n     hashBlock = block_hash;\n@@ -4636,15 +4636,15 @@ void CMerkleTx::SetMerkleBranch(const uint256& block_hash, int posInBlock)\n     nIndex = posInBlock;\n }\n \n-int CMerkleTx::GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const\n+int CWalletTx::GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const\n {\n     if (hashUnset())\n         return 0;\n \n     return locked_chain.getBlockDepth(hashBlock) * (nIndex == -1 ? -1 : 1);\n }\n \n-int CMerkleTx::GetBlocksToMaturity(interfaces::Chain::Lock& locked_chain) const\n+int CWalletTx::GetBlocksToMaturity(interfaces::Chain::Lock& locked_chain) const\n {\n     if (!IsCoinBase())\n         return 0;\n@@ -4653,7 +4653,7 @@ int CMerkleTx::GetBlocksToMaturity(interfaces::Chain::Lock& locked_chain) const\n     return std::max(0, (COINBASE_MATURITY+1) - chain_depth);\n }\n \n-bool CMerkleTx::IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const\n+bool CWalletTx::IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const\n {\n     // note GetBlocksToMaturity is 0 for non-coinbase tx\n     return GetBlocksToMaturity(locked_chain) > 0;"
      },
      {
        "sha": "7fb349a9a9b7c47768dcc6159d893d0366cfe2cb",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 33,
        "deletions": 29,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3a9d179f23f654b8fba63924bbca5fd31ad4bb0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3a9d179f23f654b8fba63924bbca5fd31ad4bb0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b3a9d179f23f654b8fba63924bbca5fd31ad4bb0",
        "patch": "@@ -364,13 +364,13 @@ struct COutputEntry\n     int vout;\n };\n \n-/** A transaction with a merkle branch linking it to the block chain. */\n+/** Legacy class used for deserializing vtxPrev for backwards compatibility.\n+ * vtxPrev was removed in commit 93a18a3650292afbb441a47d1fa1b94aeb0164e3,\n+ * but old wallet.dat files may still contain vtxPrev vectors of CMerkleTxs.\n+ * These need to get deserialized for field alignment when deserializing\n+ * a CWalletTx, but the deserialized values are discarded.**/\n class CMerkleTx\n {\n-private:\n-  /** Constant used in hashBlock to indicate tx has been abandoned */\n-    static const uint256 ABANDON_HASH;\n-\n public:\n     CTransactionRef tx;\n     uint256 hashBlock;\n@@ -416,30 +416,6 @@ class CMerkleTx\n         READWRITE(nIndex);\n     }\n \n-    void SetMerkleBranch(const uint256& block_hash, int posInBlock);\n-\n-    /**\n-     * Return depth of transaction in blockchain:\n-     * <0  : conflicts with a transaction this deep in the blockchain\n-     *  0  : in memory pool, waiting to be included in a block\n-     * >=1 : this many blocks deep in the main chain\n-     */\n-    int GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const;\n-    bool IsInMainChain(interfaces::Chain::Lock& locked_chain) const { return GetDepthInMainChain(locked_chain) > 0; }\n-\n-    /**\n-     * @return number of blocks to maturity for this transaction:\n-     *  0 : is not a coinbase transaction, or is a mature coinbase transaction\n-     * >0 : is a coinbase transaction which matures in this many blocks\n-     */\n-    int GetBlocksToMaturity(interfaces::Chain::Lock& locked_chain) const;\n-    bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n-    bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n-    void setAbandoned() { hashBlock = ABANDON_HASH; }\n-\n-    const uint256& GetHash() const { return tx->GetHash(); }\n-    bool IsCoinBase() const { return tx->IsCoinBase(); }\n-    bool IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const;\n };\n \n //Get the marginal bytes of spending the specified output\n@@ -454,6 +430,9 @@ class CWalletTx : public CMerkleTx\n private:\n     const CWallet* pwallet;\n \n+  /** Constant used in hashBlock to indicate tx has been abandoned */\n+    static const uint256 ABANDON_HASH;\n+\n public:\n     /**\n      * Key/value map with information about the transaction.\n@@ -630,6 +609,31 @@ class CWalletTx : public CMerkleTx\n     // that we still have the runtime check \"AssertLockHeld(pwallet->cs_wallet)\"\n     // in place.\n     std::set<uint256> GetConflicts() const NO_THREAD_SAFETY_ANALYSIS;\n+\n+    void SetMerkleBranch(const uint256& block_hash, int posInBlock);\n+\n+    /**\n+     * Return depth of transaction in blockchain:\n+     * <0  : conflicts with a transaction this deep in the blockchain\n+     *  0  : in memory pool, waiting to be included in a block\n+     * >=1 : this many blocks deep in the main chain\n+     */\n+    int GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const;\n+    bool IsInMainChain(interfaces::Chain::Lock& locked_chain) const { return GetDepthInMainChain(locked_chain) > 0; }\n+\n+    /**\n+     * @return number of blocks to maturity for this transaction:\n+     *  0 : is not a coinbase transaction, or is a mature coinbase transaction\n+     * >0 : is a coinbase transaction which matures in this many blocks\n+     */\n+    int GetBlocksToMaturity(interfaces::Chain::Lock& locked_chain) const;\n+    bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n+    bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n+    void setAbandoned() { hashBlock = ABANDON_HASH; }\n+\n+    const uint256& GetHash() const { return tx->GetHash(); }\n+    bool IsCoinBase() const { return tx->IsCoinBase(); }\n+    bool IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const;\n };\n \n class COutput"
      }
    ]
  },
  {
    "sha": "783a76f23ba4f33b6e6f609eaf3bf41afd9bcd6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODNhNzZmMjNiYTRmMzNiNmU2ZjYwOWVhZjNiZjQxYWZkOWJjZDZm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-07-25T14:43:54Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-07-30T15:57:06Z"
      },
      "message": "[wallet] Flatten CWalletTx class hierarchy\n\nRemoves CMerkleTx as a base class for CWalletTx. Serialization logic is\nmoved from CMerkleTx to CWalletTx.",
      "tree": {
        "sha": "76eac9e0297222e93f073f741abd6a31c3912302",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76eac9e0297222e93f073f741abd6a31c3912302"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/783a76f23ba4f33b6e6f609eaf3bf41afd9bcd6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/783a76f23ba4f33b6e6f609eaf3bf41afd9bcd6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/783a76f23ba4f33b6e6f609eaf3bf41afd9bcd6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/783a76f23ba4f33b6e6f609eaf3bf41afd9bcd6f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3a9d179f23f654b8fba63924bbca5fd31ad4bb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3a9d179f23f654b8fba63924bbca5fd31ad4bb0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3a9d179f23f654b8fba63924bbca5fd31ad4bb0"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 26,
      "deletions": 37
    },
    "files": [
      {
        "sha": "faed0f46a70abdc4d4d877b08dd14d008bdadf66",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 26,
        "deletions": 37,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/783a76f23ba4f33b6e6f609eaf3bf41afd9bcd6f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/783a76f23ba4f33b6e6f609eaf3bf41afd9bcd6f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=783a76f23ba4f33b6e6f609eaf3bf41afd9bcd6f",
        "patch": "@@ -372,43 +372,13 @@ struct COutputEntry\n class CMerkleTx\n {\n public:\n-    CTransactionRef tx;\n-    uint256 hashBlock;\n-\n-    /* An nIndex == -1 means that hashBlock (in nonzero) refers to the earliest\n-     * block in the chain we know this or any in-wallet dependency conflicts\n-     * with. Older clients interpret nIndex == -1 as unconfirmed for backward\n-     * compatibility.\n-     */\n-    int nIndex;\n-\n-    CMerkleTx()\n-    {\n-        SetTx(MakeTransactionRef());\n-        Init();\n-    }\n-\n-    explicit CMerkleTx(CTransactionRef arg)\n-    {\n-        SetTx(std::move(arg));\n-        Init();\n-    }\n-\n-    void Init()\n-    {\n-        hashBlock = uint256();\n-        nIndex = -1;\n-    }\n-\n-    void SetTx(CTransactionRef arg)\n-    {\n-        tx = std::move(arg);\n-    }\n-\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n+        CTransactionRef tx;\n+        uint256 hashBlock;\n+        int nIndex;\n         std::vector<uint256> vMerkleBranch; // For compatibility with older versions.\n         READWRITE(tx);\n         READWRITE(hashBlock);\n@@ -425,7 +395,7 @@ int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* pwallet,\n  * A transaction with a bunch of additional info that only the owner cares about.\n  * It includes any unrecorded transactions needed to link it back to the block chain.\n  */\n-class CWalletTx : public CMerkleTx\n+class CWalletTx\n {\n private:\n     const CWallet* pwallet;\n@@ -490,7 +460,10 @@ class CWalletTx : public CMerkleTx\n     mutable bool fInMempool;\n     mutable CAmount nChangeCached;\n \n-    CWalletTx(const CWallet* pwalletIn, CTransactionRef arg) : CMerkleTx(std::move(arg))\n+    CWalletTx(const CWallet* pwalletIn, CTransactionRef arg)\n+        : tx(std::move(arg)),\n+          hashBlock(uint256()),\n+          nIndex(-1)\n     {\n         Init(pwalletIn);\n     }\n@@ -510,6 +483,15 @@ class CWalletTx : public CMerkleTx\n         nOrderPos = -1;\n     }\n \n+    CTransactionRef tx;\n+    uint256 hashBlock;\n+    /* An nIndex == -1 means that hashBlock (in nonzero) refers to the earliest\n+     * block in the chain we know this or any in-wallet dependency conflicts\n+     * with. Older clients interpret nIndex == -1 as unconfirmed for backward\n+     * compatibility.\n+     */\n+    int nIndex;\n+\n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n@@ -522,7 +504,8 @@ class CWalletTx : public CMerkleTx\n             mapValueCopy[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        s << static_cast<const CMerkleTx&>(*this);\n+        std::vector<uint256> dummy_vector; //!< Used to be vMerkleBranch\n+        s << tx << hashBlock << dummy_vector << nIndex;\n         std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n         s << vUnused << mapValueCopy << vOrderForm << fTimeReceivedIsTxTime << nTimeReceived << fFromMe << fSpent;\n     }\n@@ -533,7 +516,8 @@ class CWalletTx : public CMerkleTx\n         Init(nullptr);\n         char fSpent;\n \n-        s >> static_cast<CMerkleTx&>(*this);\n+        std::vector<uint256> dummy_vector; //!< Used to be vMerkleBranch\n+        s >> tx >> hashBlock >> dummy_vector >> nIndex;\n         std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n         s >> vUnused >> mapValue >> vOrderForm >> fTimeReceivedIsTxTime >> nTimeReceived >> fFromMe >> fSpent;\n \n@@ -546,6 +530,11 @@ class CWalletTx : public CMerkleTx\n         mapValue.erase(\"timesmart\");\n     }\n \n+    void SetTx(CTransactionRef arg)\n+    {\n+        tx = std::move(arg);\n+    }\n+\n     //! make sure balances are recalculated\n     void MarkDirty()\n     {"
      }
    ]
  },
  {
    "sha": "05b56d1c937b7667ad51400d2f9fb674af72953f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWI1NmQxYzkzN2I3NjY3YWQ1MTQwMGQyZjlmYjY3NGFmNzI5NTNm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-07-24T18:09:28Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-07-30T15:57:06Z"
      },
      "message": "[wallet] Remove CMerkleTx serialization logic\n\nCMerkleTx is only used for deserialization of old wallet files. Remove\nthe serialization logic, and tidy up CWalletTx serialization logic.",
      "tree": {
        "sha": "e2e472524e2a4449d9a42ac60e4a9e36c3c3de2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2e472524e2a4449d9a42ac60e4a9e36c3c3de2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05b56d1c937b7667ad51400d2f9fb674af72953f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05b56d1c937b7667ad51400d2f9fb674af72953f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05b56d1c937b7667ad51400d2f9fb674af72953f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05b56d1c937b7667ad51400d2f9fb674af72953f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "783a76f23ba4f33b6e6f609eaf3bf41afd9bcd6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/783a76f23ba4f33b6e6f609eaf3bf41afd9bcd6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/783a76f23ba4f33b6e6f609eaf3bf41afd9bcd6f"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 14,
      "deletions": 20
    },
    "files": [
      {
        "sha": "27f7472806282028795b6eaa7d042fb801c5cc66",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 14,
        "deletions": 20,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05b56d1c937b7667ad51400d2f9fb674af72953f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05b56d1c937b7667ad51400d2f9fb674af72953f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=05b56d1c937b7667ad51400d2f9fb674af72953f",
        "patch": "@@ -372,20 +372,16 @@ struct COutputEntry\n class CMerkleTx\n {\n public:\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n         CTransactionRef tx;\n         uint256 hashBlock;\n+        std::vector<uint256> vMerkleBranch;\n         int nIndex;\n-        std::vector<uint256> vMerkleBranch; // For compatibility with older versions.\n-        READWRITE(tx);\n-        READWRITE(hashBlock);\n-        READWRITE(vMerkleBranch);\n-        READWRITE(nIndex);\n-    }\n \n+        s >> tx >> hashBlock >> vMerkleBranch >> nIndex;\n+    }\n };\n \n //Get the marginal bytes of spending the specified output\n@@ -495,7 +491,6 @@ class CWalletTx\n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        char fSpent = false;\n         mapValue_t mapValueCopy = mapValue;\n \n         mapValueCopy[\"fromaccount\"] = \"\";\n@@ -504,22 +499,21 @@ class CWalletTx\n             mapValueCopy[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        std::vector<uint256> dummy_vector; //!< Used to be vMerkleBranch\n-        s << tx << hashBlock << dummy_vector << nIndex;\n-        std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n-        s << vUnused << mapValueCopy << vOrderForm << fTimeReceivedIsTxTime << nTimeReceived << fFromMe << fSpent;\n+        std::vector<char> dummy_vector1; //!< Used to be vMerkleBranch\n+        std::vector<char> dummy_vector2; //!< Used to be vtxPrev\n+        char dummy_char = false; //!< Used to be fSpent\n+        s << tx << hashBlock << dummy_vector1 << nIndex << dummy_vector2 << mapValueCopy << vOrderForm << fTimeReceivedIsTxTime << nTimeReceived << fFromMe << dummy_char;\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream& s)\n     {\n         Init(nullptr);\n-        char fSpent;\n \n-        std::vector<uint256> dummy_vector; //!< Used to be vMerkleBranch\n-        s >> tx >> hashBlock >> dummy_vector >> nIndex;\n-        std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n-        s >> vUnused >> mapValue >> vOrderForm >> fTimeReceivedIsTxTime >> nTimeReceived >> fFromMe >> fSpent;\n+        std::vector<uint256> dummy_vector1; //!< Used to be vMerkleBranch\n+        std::vector<CMerkleTx> dummy_vector2; //!< Used to be vtxPrev\n+        char dummy_char; //! Used to be fSpent\n+        s >> tx >> hashBlock >> dummy_vector1 >> nIndex >> dummy_vector2 >> mapValue >> vOrderForm >> fTimeReceivedIsTxTime >> nTimeReceived >> fFromMe >> dummy_char;\n \n         ReadOrderPos(nOrderPos, mapValue);\n         nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;"
      }
    ]
  }
]