MarcoFalke,2019-07-24 15:36:59,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-514684598,514684598,
jnewbery,2019-07-24 15:49:56,"> When I open+close an ""old"" wallet file, this will overwrite all merkle txs with zeros?\n\nNo. When opening the old file, the CWalletTx deserialization logic will deserialize the merkle txs into a locally scoped `vUnused` which is thrown away. When closing the wallet, `CWalletTx::Serialize()` serializes an empty vector `vUnused` into the file. From my reading of serialize.h, that just writes a ",https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-514689722,514689722,
ariard,2019-07-24 17:54:24,"Concept ACK, should go before #15931 as it lets me remove one commit",https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-514734660,514734660,
DrahtBot,2019-07-24 17:59:58,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16341](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16341.html) (Introduce ScriptPubKeyMan interface and use",https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-514736670,514736670,
jnewbery,2019-07-24 18:13:36,"@MarcoFalke \n> Yeah, I am interested in seeing that commit.\n\nI've added a second commit that removes the `CMerkleTx` serialization code (since we never actually have to use it). I couldn't figure out how to replicate the deserialization code for `CMerkleTx` in `CWalletTx::deserialize()` and be sure that I'd replicated it byte-for-byte, so I left that in.\n\nLet me know if you think that se",https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-514741538,514741538,
ryanofsky,2019-07-24 20:32:56,"IMO, messing with this serialization code is not an improvement. It makes the PR more longer and more confusing than it needs to be and now repeats the `READWRITE(tx, hashBlock, vMerkleBranch, nIndex)` logic across 3 different functions instead of just leaving it in one place.\n\nI'd suggest leave the inheritance untouched, leave the serialization untouched, getting rid of the comment explaining",https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-514789002,514789002,
jnewbery,2019-07-24 21:47:50,"> IMO, messing with this serialization code is not an improvement. It makes the PR more longer and more confusing than it needs to be and now repeats the READWRITE(tx, hashBlock, vMerkleBranch, nIndex) logic across 3 different functions instead of just leaving it in one place.\n> \n> I'd suggest leave the inheritance untouched, leave the serialization untouched, getting rid of the comment explai",https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-514812510,514812510,
ryanofsky,2019-07-24 22:19:14,"> but I can understand your point about making this PR smaller\n\nPR size isn't the main issue. The main thing I don't like is that READWRITE(tx, hashBlock, vMerkleBranch, nIndex) logic is now repeated in 3 places, rewritten 3 slightly different ways, when it only needs to live in one place. The current serialization seems fine and little seems to be gained by blowing it up, since either way you",https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-514820889,514820889,
jnewbery,2019-07-25 14:26:35,"> The main thing I don't like is that READWRITE(tx, hashBlock, vMerkleBranch, nIndex) logic is now repeated in 3 places, rewritten 3 slightly different ways, when it only needs to live in one place.\n\n`CWalletTx` already has separate functions for serialize and deserialize, and adding the logic to both places seems to fit with that pattern.\n\nI much prefer that after this PR I can look at a ",https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-515065679,515065679,
jnewbery,2019-07-25 15:00:41,"@ryanofsky \n> I also don't understand the division between the two commits.\n\nI've resplit the changes into three commits:\n1. Moves the all `CMerkleTx` methods except initialization and serialization into `CWalletTx`\n2. Moves `CMerkleTx` data members into `CWalletTx` and moves the serialization logic into `CWalletTx`.\n3. Removes `CMerkleTx` serialization, just leaving `CMerkleTx` deseri",https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-515080038,515080038,
sipa,2019-07-25 16:12:25,"> I couldn't figure out how to replicate the deserialization code for CMerkleTx in CWalletTx::deserialize() and be sure that I'd replicated it byte-for-byte, so I left that in.\n\nFWIW, it's possible to do something like `std::vector<std::pair<CTransactionRef, std::pair<uint256, std::pair<...>>>> tmp; ss >> tmp;` (with a nesting of pairs correspond to all the fields in the original CMerkleTx).\n\n",https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-515107456,515107456,
jnewbery,2019-07-25 16:38:27,"@sipa \n> FWIW, it's possible to do something like std::vector<std::pair<CTransactionRef, std::pair<uint256, std::pair<...>>>> tmp; ss >> tmp; (with a nesting of pairs correspond to all the fields in the original CMerkleTx).\n\nThanks! I've implemented that here: https://github.com/jnewbery/bitcoin/commit/efcdb2e02c2c2b1726fc0c973869bb325685a893, which removes `CMerkleTx` entirely. I don't feel",https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-515116770,515116770,
jnewbery,2019-07-30 15:57:21,rebased,https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-516482229,516482229,
laanwj,2019-07-31 06:57:54,"ACK 05b56d1c937b7667ad51400d2f9fb674af72953f. Looks good to me.\n\n> I can certainly do that. The main aim of this PR is to move the CMerkleTx members into CWalletTx. Flattening the class hierarchy seemed like a good next step\n\nHaving an intermediate base class just for serialization/deserialization is just silly and I'm all for getting rid of that in this PR.\n\nAnd I think flattening the",https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-516723652,516723652,
MarcoFalke,2019-07-24 15:29:27,Could add the commit or wallet version where this was changed?,https://github.com/bitcoin/bitcoin/pull/16451#discussion_r306876633,306876633,src/wallet/wallet.h
MarcoFalke,2019-07-24 15:34:56,Would this write uninitialized memory to the wallet file?,https://github.com/bitcoin/bitcoin/pull/16451#discussion_r306879493,306879493,src/wallet/wallet.h
jnewbery,2019-07-24 15:52:08,"No `CMerkleTx` object is ever serialized.\n\nI could go even further in this PR and remove the `CMerkleTx` object entirely. Let me add a commit to see what that looks like.",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r306888393,306888393,src/wallet/wallet.h
MarcoFalke,2019-07-24 17:36:12,"Yeah, I am interested in seeing that commit. That probably means you can get rid of the `static_cast<const CMerkleTx&>(*this)` that happens in the serialization of `CWalletTx`",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r306934546,306934546,src/wallet/wallet.h
MarcoFalke,2019-07-24 17:39:15,"> `static_cast<const CMerkleTx&>(*this)`\n\nOh, that probably means that serialization *is* called, so I'd like to re-raise my previous question of uninitialized memory.",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r306935848,306935848,src/wallet/wallet.h
jnewbery,2019-07-24 18:08:59,"> That probably means you can get rid of the static_cast<const CMerkleTx&>(*this) that happens in the serialization of CWalletTx\n\nHuh? This PR already does get rid of the `static_cast<const CMerkleTx&>(*this)`",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r306949098,306949098,src/wallet/wallet.h
jnewbery,2019-07-24 18:10:00,I've expanded the comment here,https://github.com/bitcoin/bitcoin/pull/16451#discussion_r306949473,306949473,src/wallet/wallet.h
sipa,2019-07-24 18:11:47,You're invoking the serialization operators inside an Unserialize function. I suspect you mean to call the `>>` ones instead.,https://github.com/bitcoin/bitcoin/pull/16451#discussion_r306950209,306950209,src/wallet/wallet.h
jnewbery,2019-07-24 21:41:59,gah. Thanks. Fixed.,https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307034222,307034222,src/wallet/wallet.h
promag,2019-07-24 22:43:40,"fd2773f2eba659d78fae9d74461d9dd952609aa9\n\n> No CMerkleTx object is ever serialized.\n\nRight, the vector is always empty. You could add `assert(ser_action.ForRead())`. But the following removes the serialization support so maybe not worth it?",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307051192,307051192,src/wallet/wallet.h
promag,2019-07-24 22:45:32,"fd2773f2eba659d78fae9d74461d9dd952609aa9\n\nnit, personally I prefer\n```cpp\n: tx(std::move(arg))\n, hashBlock(uint256())\n, nIndex(-1)\n```",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307051619,307051619,src/wallet/wallet.h
promag,2019-07-24 23:56:24,"fad5decb1fdab249f626c6468174c50be15f14cf\n\nJust to be sure, this means that an empty `vector<char>` serialized is compatible with the unserialization of `vector<CMerkleTx>`?\n\nEdit: nervermind, went and see `Unserialize_impl` for vectors.",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307067374,307067374,src/wallet/wallet.h
promag,2019-07-25 00:00:23,"fad5decb1fdab249f626c6468174c50be15f14cf\n\nCould remove this and inline `CMerkleTx::Unserialize`, see:\n\n<details>\n\n```diff\n--- a/src/wallet/wallet.h\n+++ b/src/wallet/wallet.h\n@@ -365,26 +365,6 @@ struct COutputEntry\n     int vout;\n };\n\n-/** Legacy class used for deserializing vtxPrev for backwards compatibility.\n- * vtxPrev was removed in commit 93a18a3650292afbb441a47d1",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307068102,307068102,src/wallet/wallet.h
MarcoFalke,2019-07-25 13:55:31,That is neither in the style-guide nor in `clang-format`,https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307308874,307308874,src/wallet/wallet.h
MarcoFalke,2019-07-25 13:58:19,I like the assert,https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307310363,307310363,src/wallet/wallet.h
jnewbery,2019-07-25 14:00:20,"This isn't equivalent. `vtxPrev` was a vector, so:\n\n- there can be multiple `CMerkleTx` objects serialized\n- the serialization is preceded with a compactSize\n\nI would like to remove `CMerkleTx` entirely, but implementing the low-lever deserialization logic for a vector of `CMerkleTx`s here seems like it could be easy to introduce an inconsistency (potentially causing wallets to get corru",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307311451,307311451,src/wallet/wallet.h
jnewbery,2019-07-25 14:00:58,Correct. Empty `vector<>`s get serialized to a single 0 byte (the compactSize of an empty vector),https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307311779,307311779,src/wallet/wallet.h
jnewbery,2019-07-25 14:01:45,"> But the following removes the serialization support so maybe not worth it?\n\nI agree (if we decide to keep the second commit)",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307312156,307312156,src/wallet/wallet.h
MarcoFalke,2019-07-25 14:31:49,"in commit fad5decb1fdab249f626c6468174c:\n\nI think this function does not need to be changed and can be kept as is.",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307328049,307328049,src/wallet/wallet.h
MarcoFalke,2019-07-25 14:32:58,"in commit fad5dec:\n\nI think you can keep everything in this function as is (except changing the type of the vector). This should simplify review.",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307328695,307328695,src/wallet/wallet.h
jnewbery,2019-07-25 15:01:10,See https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-515080038. I'll remove everything after the first commit if others agree.,https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307344434,307344434,src/wallet/wallet.h
jnewbery,2019-07-25 15:01:15,See https://github.com/bitcoin/bitcoin/pull/16451#issuecomment-515080038. I'll remove everything after the first commit if others agree.,https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307344463,307344463,src/wallet/wallet.h
promag,2019-07-25 15:11:52,"Ah sorry.. You could read compact size, then loop to read dummy values but really not worth it. You can resolve this.",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307350173,307350173,src/wallet/wallet.h
promag,2019-07-25 15:13:55,"6779b7cbdeec091bf2c5a704c07a018641625d5f\n\nNone is AFAICT.",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307351466,307351466,src/wallet/wallet.h
promag,2019-07-25 15:36:13,"6779b7cbdeec091bf2c5a704c07a018641625d5f\n\nJust noting that it's not really necessary to make these local variables since that unserialized `CMerkleTx` are discarded anyway. I guess you are doing this to underline the idea, so maybe also add a comment here?",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307364123,307364123,src/wallet/wallet.h
jnewbery,2019-07-25 15:44:55,"> You could read compact size, then loop to read dummy values but really not worth it.\n\nExactly. Seems error-prone and redundant.",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307368697,307368697,src/wallet/wallet.h
MarcoFalke,2019-07-25 15:48:02,https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#variable-names ;),https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307370401,307370401,src/wallet/wallet.h
jnewbery,2019-07-25 15:48:59,"Yeah, it's equivalent, but I think the intent is clearer this way. Why have data members in a class where any instantiated objects are just going to be thrown away?\n\nI don't think an additional comment is necessary here - the code along with the comment on the `CMerkleTx` class should be clear enough.",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307370957,307370957,src/wallet/wallet.h
jnewbery,2019-07-25 15:49:58,"I actually prefer your style @promag , but I'll keep this as is for now to not invalidate your review. If I need to update the PR again I'll swap to your style.",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r307371505,307371505,src/wallet/wallet.h
laanwj,2019-07-31 06:19:04,"This code is fine. Please do not give formatting comments about preferences, that are not in the code style or developer notes,",https://github.com/bitcoin/bitcoin/pull/16451#discussion_r309053692,309053692,src/wallet/wallet.h
