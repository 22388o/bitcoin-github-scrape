[
  {
    "sha": "1cdbea7f742fa128062009ea8ca22383bceacd1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2RiZWE3Zjc0MmZhMTI4MDYyMDA5ZWE4Y2EyMjM4M2JjZWFjZDFl",
    "commit": {
      "author": {
        "name": "Thomas Kerin",
        "email": "thomas.kerin@bitmaintech.com",
        "date": "2018-07-13T11:47:07Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-07-29T21:08:45Z"
      },
      "message": "bitcoinconsensus: invalid flags should be set to bitcoinconsensus_error type, add test cases covering bitcoinconsensus error codes\n\nGithub-Pull: #13655\nRebased-From: 417b6c1d2990ffc78c029442e027797d724a101f",
      "tree": {
        "sha": "de01ffe2fd6c1700977bbe96ab5c8b98a314e7b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de01ffe2fd6c1700977bbe96ab5c8b98a314e7b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cdbea7f742fa128062009ea8ca22383bceacd1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cdbea7f742fa128062009ea8ca22383bceacd1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cdbea7f742fa128062009ea8ca22383bceacd1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cdbea7f742fa128062009ea8ca22383bceacd1e/comments",
    "author": {
      "login": "afk11",
      "id": 5617245,
      "node_id": "MDQ6VXNlcjU2MTcyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5617245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/afk11",
      "html_url": "https://github.com/afk11",
      "followers_url": "https://api.github.com/users/afk11/followers",
      "following_url": "https://api.github.com/users/afk11/following{/other_user}",
      "gists_url": "https://api.github.com/users/afk11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/afk11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
      "organizations_url": "https://api.github.com/users/afk11/orgs",
      "repos_url": "https://api.github.com/users/afk11/repos",
      "events_url": "https://api.github.com/users/afk11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/afk11/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d9c4185fadaf243bb97c226e2fef16b65299699",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d9c4185fadaf243bb97c226e2fef16b65299699",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d9c4185fadaf243bb97c226e2fef16b65299699"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 143,
      "deletions": 1
    },
    "files": [
      {
        "sha": "752176f73ffdf95bd7e9ac4a775b45ef763e2823",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cdbea7f742fa128062009ea8ca22383bceacd1e/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cdbea7f742fa128062009ea8ca22383bceacd1e/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=1cdbea7f742fa128062009ea8ca22383bceacd1e",
        "patch": "@@ -81,7 +81,7 @@ static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptP\n                                     unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n {\n     if (!verify_flags(flags)) {\n-        return bitcoinconsensus_ERR_INVALID_FLAGS;\n+        return set_error(err, bitcoinconsensus_ERR_INVALID_FLAGS);\n     }\n     try {\n         TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION, txTo, txToLen);"
      },
      {
        "sha": "de90b00aba06aec52a33abc1a8353c92cc410a50",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 142,
        "deletions": 0,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cdbea7f742fa128062009ea8ca22383bceacd1e/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cdbea7f742fa128062009ea8ca22383bceacd1e/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=1cdbea7f742fa128062009ea8ca22383bceacd1e",
        "patch": "@@ -1479,4 +1479,146 @@ BOOST_AUTO_TEST_CASE(script_can_append_self)\n     BOOST_CHECK(s == d);\n }\n \n+\n+#if defined(HAVE_CONSENSUS_LIB)\n+\n+/* Test simple (successful) usage of bitcoinconsensus_verify_script */\n+BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_returns_true)\n+{\n+    unsigned int libconsensus_flags = 0;\n+    int nIn = 0;\n+\n+    CScript scriptPubKey;\n+    CScript scriptSig;\n+    CScriptWitness wit;\n+\n+    scriptPubKey << OP_1;\n+    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << spendTx;\n+\n+    bitcoinconsensus_error err;\n+    int result = bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), nIn, libconsensus_flags, &err);\n+    BOOST_CHECK_EQUAL(result, 1);\n+    BOOST_CHECK_EQUAL(err, bitcoinconsensus_ERR_OK);\n+}\n+\n+/* Test bitcoinconsensus_verify_script returns invalid tx index err*/\n+BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_index_err)\n+{\n+    unsigned int libconsensus_flags = 0;\n+    int nIn = 3;\n+\n+    CScript scriptPubKey;\n+    CScript scriptSig;\n+    CScriptWitness wit;\n+\n+    scriptPubKey << OP_EQUAL;\n+    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << spendTx;\n+\n+    bitcoinconsensus_error err;\n+    int result = bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), nIn, libconsensus_flags, &err);\n+    BOOST_CHECK_EQUAL(result, 0);\n+    BOOST_CHECK_EQUAL(err, bitcoinconsensus_ERR_TX_INDEX);\n+}\n+\n+/* Test bitcoinconsensus_verify_script returns tx size mismatch err*/\n+BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_size)\n+{\n+    unsigned int libconsensus_flags = 0;\n+    int nIn = 0;\n+\n+    CScript scriptPubKey;\n+    CScript scriptSig;\n+    CScriptWitness wit;\n+\n+    scriptPubKey << OP_EQUAL;\n+    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << spendTx;\n+\n+    bitcoinconsensus_error err;\n+    int result = bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size() * 2, nIn, libconsensus_flags, &err);\n+    BOOST_CHECK_EQUAL(result, 0);\n+    BOOST_CHECK_EQUAL(err, bitcoinconsensus_ERR_TX_SIZE_MISMATCH);\n+}\n+\n+/* Test bitcoinconsensus_verify_script returns invalid tx serialization error */\n+BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_serialization)\n+{\n+    unsigned int libconsensus_flags = 0;\n+    int nIn = 0;\n+\n+    CScript scriptPubKey;\n+    CScript scriptSig;\n+    CScriptWitness wit;\n+\n+    scriptPubKey << OP_EQUAL;\n+    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << 0xffffffff;\n+\n+    bitcoinconsensus_error err;\n+    int result = bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), nIn, libconsensus_flags, &err);\n+    BOOST_CHECK_EQUAL(result, 0);\n+    BOOST_CHECK_EQUAL(err, bitcoinconsensus_ERR_TX_DESERIALIZE);\n+}\n+\n+/* Test bitcoinconsensus_verify_script returns amount required error */\n+BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_amount_required_err)\n+{\n+    unsigned int libconsensus_flags = bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS;\n+    int nIn = 0;\n+\n+    CScript scriptPubKey;\n+    CScript scriptSig;\n+    CScriptWitness wit;\n+\n+    scriptPubKey << OP_EQUAL;\n+    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << spendTx;\n+\n+    bitcoinconsensus_error err;\n+    int result = bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), nIn, libconsensus_flags, &err);\n+    BOOST_CHECK_EQUAL(result, 0);\n+    BOOST_CHECK_EQUAL(err, bitcoinconsensus_ERR_AMOUNT_REQUIRED);\n+}\n+\n+/* Test bitcoinconsensus_verify_script returns invalid flags err */\n+BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_invalid_flags)\n+{\n+    unsigned int libconsensus_flags = 1 << 3;\n+    int nIn = 0;\n+\n+    CScript scriptPubKey;\n+    CScript scriptSig;\n+    CScriptWitness wit;\n+\n+    scriptPubKey << OP_EQUAL;\n+    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << spendTx;\n+\n+    bitcoinconsensus_error err;\n+    int result = bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), nIn, libconsensus_flags, &err);\n+    BOOST_CHECK_EQUAL(result, 0);\n+    BOOST_CHECK_EQUAL(err, bitcoinconsensus_ERR_INVALID_FLAGS);\n+}\n+\n+#endif\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]