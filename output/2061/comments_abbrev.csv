gavinandresen,2012-12-03T00:34:05Z,"I don't think the 20% speedup is worth the extra code complexity. I could be convinced if there are some EC crypto experts hanging around who will chime in and say ""oh, yeah, that's an obvious optimization and implementation looks correct....""\n\nIt seems to me that this type of low-level speedup would be better implemented in OpenSSL. I don't know if they would accept a patch to speed up one curv",https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-10938112,10938112,
gmaxwell,2012-12-03T00:52:56Z,"Hal claims that it can be increased to 40% with some other changes, but they weren't immediately clear to me. I think Pieter's plan was to get this in (as it has the structural changes) and then talk to an EC expert he may have access to about doing the rest. That might satisfy both your concerns.\n\nI would note that script checking all txn with Hal is similar in performance to script skipping be",https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-10938336,10938336,
gmaxwell,2012-12-03T04:30:55Z,I was a little over eager in my last claim there: syncing from start to 210000 the current parallel checking branch without hal is 23:58  while without checkpoints but with hal it's 37:10 for me (47:21 hal-less).\n,https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-10941306,10941306,
laanwj,2012-12-06T07:26:33Z,"If we decide to include low-level crypto code like this, we could just as well include all the ECDSA code (for the particular curve that we use) so that we can build with OpenSSL built without ECDSA.\n",https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-11075455,11075455,
sipa,2012-12-08T15:37:33Z,@laanwj I believe there is quite some non-ECDSA-specific EC code left in OpenSSL that would need to be included in that case too...\n,https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-11159798,11159798,
sipa,2012-12-09T18:37:54Z,"Refactored the optimized algorithm into an almost exact copy of OpenSSL's own ecdsa_do_verify() function, but using an optimized version of EC_POINT_mul().\n",https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-11174025,11174025,
sipa,2012-12-10T23:15:57Z,"New commit: if compiled with -DVERIFY_OPTIMIZED_SECP256K1, checks will be compiled in that compare the generic OpenSSL code with the specialized one. It's not enabled by default, but I verified it for the entire current block chain & unit tests.\n",https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-11223375,11223375,
Diapolo,2012-12-12T20:29:11Z,@sipa This pull can be tested independently from your other one with parallel verification or do they depend on eachother?\n,https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-11308007,11308007,
sipa,2012-12-12T20:36:38Z,They're independent.\n,https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-11308287,11308287,
sipa,2012-12-15T17:25:49Z,Added verification code for checking k == k1 + lambda_k2 and for checking p2 == lambda_p. Verified against unit tests and testnet.\n\nEDIT: and mainnet now as well.\n,https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-11406843,11406843,
sipa,2012-12-25T18:30:43Z,New commit: implemented a small improvement suggested by Hal.\n,https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-11675195,11675195,
sipa,2013-01-24T17:15:45Z,"Added a commit to build the core .o files for tests separately, and add - DVERIFY_OPTIMIZED_SECP256K1 to them, so the unit tests now compare the internal values in ECDSA verification between optimized and non-optimized code.\n",https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-12661868,12661868,
sipa,2013-01-30T04:52:51Z,"Added a fuzzer that compares intermediate values during validation in optimized and non-optimized code, for message hashes with a random 1-bit difference for every real check.\n",https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-12874245,12874245,
BitcoinPullTester,2013-01-30T05:23:05Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/1f369d512b5b5c66e9623d2eaf9692eee9b11d36 for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-12874862,12874862,
SergioDemianLerner,2013-02-01T22:38:57Z,It would be good if someone checks this new implementation against timing attacks. Systems that automatically sign transactions (like exchanges) may be vulnerable to key recovery using timing attacks.\n,https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-13017997,13017997,
sipa,2013-02-01T22:48:13Z,This code isn't used for signing.\n,https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-13018325,13018325,
SergioDemianLerner,2013-02-02T00:14:46Z,"Ok, I will check against specially crafted pubkeys/signatures in a few weeks. I've found bugs in other implementations.\n",https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-13020838,13020838,
sipa,2013-02-02T01:25:23Z,@SergioDemianLerner: thanks!\n,https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-13022367,13022367,
sipa,2013-02-24T20:50:15Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-14015691,14015691,
sipa,2013-03-04T17:53:58Z,"Added precomputation of G (doable as a separate pull if necessary), which improves verify performance by 2-3% (consistently), and turn off Hal's optimizations by default; -turbo turns them on.\n",https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-14394283,14394283,
Diapolo,2013-05-02T20:49:48Z,"How do these pulls get tagged updated, when I see no changes here? Rebase?\n",https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-17363862,17363862,
sipa,2013-05-02T20:54:51Z,"I don't intend to keep this updated, as I'm working on a separately library that implements ECDSA directly, with much more optimizations than this pullreq does. See http://github.com/sipa/secp256k1\n",https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-17364138,17364138,
Diapolo,2013-05-02T21:00:31Z,"You missunderstood my comment, this pull or issue was listed updated for me and I asked what made Github think it was updated. I think your work on this is great, but my intention was just to understand Github here.\n",https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-17364435,17364435,
sipa,2013-05-02T21:02:04Z,"@Diapolo Github hiccup, I guess.\n",https://github.com/bitcoin/bitcoin/pull/2061#issuecomment-17364528,17364528,
