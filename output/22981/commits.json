[
  {
    "sha": "fac49470ca36ff944a613f4358386bf8e0967427",
    "node_id": "C_kwDOABII59oAKGZhYzQ5NDcwY2EzNmZmOTQ0YTYxM2Y0MzU4Mzg2YmY4ZTA5Njc0Mjc",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-15T09:10:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-17T08:25:14Z"
      },
      "message": "doc: Fix incorrect C++ named args",
      "tree": {
        "sha": "dcc31a3b3ffa738c68720f09198001263b1963c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dcc31a3b3ffa738c68720f09198001263b1963c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac49470ca36ff944a613f4358386bf8e0967427",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi74wwAqCpqTA6mcrSTCWyEpfR5mAmU0J2QVr22gjS0pSpFZPl5JFeAw9ahYncz\nlcKaxxBXuYDFMmmwRkUXLgdqB4AfvT6OfyjShKo3Vdo6CyZ18TA/U1UVM58ns2yE\nu5KbxJMIGEgInIucKiWbmZnvSbUZPQrJ7s5qBVrIAY0RI3FbeK0SLumjlAC+Tq7j\nJrAi8veOdsXvFeHeyCsIA8NvpQAPX/owRWYAP3LNYVenJpvs/Jo5wQvwlfqGloXi\nFUVvlH1MdwQyg0glVAhbvtB9rSylwtBB0QP+pEODn7zG70DnfXL9WzAvhGe9JGIn\nvMnkzrPV5HK6ZbyP2b44FNjE0agtqNZKPRi0caqXaXlF+bkVKYW0Ks7vRSMvkXyB\niws2OpAzQomzC9Nu/UEyLaOaqeWGFPE3TkDnWOKHw/G1jGFIEEM/lmrmsKh5Q1P1\nm2m5KcFu0PRD6szbii73h5eipcXtsHlwsvuEKw13oqm6gUV9qnTcx3e7EtiTNXgJ\no9nyKuUg\n=9vSg\n-----END PGP SIGNATURE-----",
        "payload": "tree dcc31a3b3ffa738c68720f09198001263b1963c0\nparent 398fd63356db9023665396c371d67a8c76edeb4d\nauthor MarcoFalke <falke.marco@gmail.com> 1631697051 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1637137514 +0100\n\ndoc: Fix incorrect C++ named args\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac49470ca36ff944a613f4358386bf8e0967427",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac49470ca36ff944a613f4358386bf8e0967427",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac49470ca36ff944a613f4358386bf8e0967427/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "398fd63356db9023665396c371d67a8c76edeb4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/398fd63356db9023665396c371d67a8c76edeb4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/398fd63356db9023665396c371d67a8c76edeb4d"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 29,
      "deletions": 29
    },
    "files": [
      {
        "sha": "67c827d0d3348119889650c5905d43dcf4440fa7",
        "filename": "src/bench/rpc_mempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac49470ca36ff944a613f4358386bf8e0967427/src/bench/rpc_mempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac49470ca36ff944a613f4358386bf8e0967427/src/bench/rpc_mempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_mempool.cpp?ref=fac49470ca36ff944a613f4358386bf8e0967427",
        "patch": "@@ -12,7 +12,7 @@\n static void AddTx(const CTransactionRef& tx, const CAmount& fee, CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)\n {\n     LockPoints lp;\n-    pool.addUnchecked(CTxMemPoolEntry(tx, fee, /* time */ 0, /* height */ 1, /* spendsCoinbase */ false, /* sigOpCost */ 4, lp));\n+    pool.addUnchecked(CTxMemPoolEntry(tx, fee, /*time=*/0, /*entry_height=*/1, /*spends_coinbase=*/false, /*sigops_cost=*/4, lp));\n }\n \n static void RpcMempool(benchmark::Bench& bench)"
      },
      {
        "sha": "d1f1b54007228f760f454bdaee14b65bb1367aa1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac49470ca36ff944a613f4358386bf8e0967427/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac49470ca36ff944a613f4358386bf8e0967427/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fac49470ca36ff944a613f4358386bf8e0967427",
        "patch": "@@ -3024,7 +3024,7 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     size_t nMessageSize = msg.data.size();\n     LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\", msg.m_type, nMessageSize, pnode->GetId());\n     if (gArgs.GetBoolArg(\"-capturemessages\", false)) {\n-        CaptureMessage(pnode->addr, msg.m_type, msg.data, /* incoming */ false);\n+        CaptureMessage(pnode->addr, msg.m_type, msg.data, /*is_incoming=*/false);\n     }\n \n     TRACE6(net, outbound_message,"
      },
      {
        "sha": "a896bb76aee258dcc5c7cbed33a25e8d6cddf1ac",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac49470ca36ff944a613f4358386bf8e0967427/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac49470ca36ff944a613f4358386bf8e0967427/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fac49470ca36ff944a613f4358386bf8e0967427",
        "patch": "@@ -4105,7 +4105,7 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     );\n \n     if (gArgs.GetBoolArg(\"-capturemessages\", false)) {\n-        CaptureMessage(pfrom->addr, msg.m_command, MakeUCharSpan(msg.m_recv), /* incoming */ true);\n+        CaptureMessage(pfrom->addr, msg.m_command, MakeUCharSpan(msg.m_recv), /*is_incoming=*/true);\n     }\n \n     msg.SetVersion(pfrom->GetCommonVersion());"
      },
      {
        "sha": "e7a3d724bbe6fb2cb297b03dd7ba6c163fb64612",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac49470ca36ff944a613f4358386bf8e0967427/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac49470ca36ff944a613f4358386bf8e0967427/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=fac49470ca36ff944a613f4358386bf8e0967427",
        "patch": "@@ -69,7 +69,7 @@ int main(int argc, char* argv[])\n     #if defined(WIN32)\n         if (getenv(\"QT_QPA_PLATFORM\") == nullptr) _putenv_s(\"QT_QPA_PLATFORM\", \"minimal\");\n     #else\n-        setenv(\"QT_QPA_PLATFORM\", \"minimal\", /* overwrite */ 0);\n+        setenv(\"QT_QPA_PLATFORM\", \"minimal\", 0 /* overwrite */);\n     #endif\n \n     // Don't remove this, it's needed to access"
      },
      {
        "sha": "9e2b1ab07e9b5555a8bf0b3d63f21ffebc4c6bc1",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac49470ca36ff944a613f4358386bf8e0967427/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac49470ca36ff944a613f4358386bf8e0967427/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fac49470ca36ff944a613f4358386bf8e0967427",
        "patch": "@@ -1010,7 +1010,7 @@ static RPCHelpMan submitblock()\n     bool new_block;\n     auto sc = std::make_shared<submitblock_StateCatcher>(block.GetHash());\n     RegisterSharedValidationInterface(sc);\n-    bool accepted = chainman.ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    bool accepted = chainman.ProcessNewBlock(Params(), blockptr, /*force_processing=*/true, /*new_block=*/&new_block);\n     UnregisterSharedValidationInterface(sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";"
      },
      {
        "sha": "2dd121c6f654c8166341d68ad6ec96f695d24753",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac49470ca36ff944a613f4358386bf8e0967427/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac49470ca36ff944a613f4358386bf8e0967427/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fac49470ca36ff944a613f4358386bf8e0967427",
        "patch": "@@ -1619,7 +1619,7 @@ static RPCHelpMan utxoupdatepsbt()\n         }\n     }\n     // We don't actually need private keys further on; hide them as a precaution.\n-    HidingSigningProvider public_provider(&provider, /* nosign */ true, /* nobip32derivs */ false);\n+    HidingSigningProvider public_provider(&provider, /*hide_secret=*/true, /*hide_origin=*/false);\n \n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n@@ -1658,7 +1658,7 @@ static RPCHelpMan utxoupdatepsbt()\n         // Update script/keypath information using descriptor data.\n         // Note that SignPSBTInput does a lot more than just constructing ECDSA signatures\n         // we don't actually care about those here, in fact.\n-        SignPSBTInput(public_provider, psbtx, i, &txdata, /* sighash_type */ 1);\n+        SignPSBTInput(public_provider, psbtx, i, &txdata, /*sighash=*/1);\n     }\n \n     // Update script/keypath information using descriptor data."
      },
      {
        "sha": "765663e0ef2dc8078121b833d8d37f4cb3b0e7f7",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac49470ca36ff944a613f4358386bf8e0967427/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac49470ca36ff944a613f4358386bf8e0967427/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=fac49470ca36ff944a613f4358386bf8e0967427",
        "patch": "@@ -59,7 +59,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr1, /* nKeyedNetGroupIn */ 0, /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\", ConnectionType::OUTBOUND_FULL_RELAY, /* inbound_onion */ false);\n+    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr1, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false);\n     dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n \n     peerLogic->InitializeNode(&dummyNode1);\n@@ -108,7 +108,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n static void AddRandomOutboundPeer(std::vector<CNode*>& vNodes, PeerManager& peerLogic, ConnmanTestMsg& connman)\n {\n     CAddress addr(ip(g_insecure_rand_ctx.randbits(32)), NODE_NONE);\n-    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr, /* nKeyedNetGroupIn */ 0, /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\", ConnectionType::OUTBOUND_FULL_RELAY, /* inbound_onion */ false));\n+    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false));\n     CNode &node = *vNodes.back();\n     node.SetCommonVersion(PROTOCOL_VERSION);\n \n@@ -212,9 +212,9 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     std::array<CNode*, 3> nodes;\n \n     banman->ClearBanned();\n-    nodes[0] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[0], /* nKeyedNetGroupIn */ 0,\n-                         /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\",\n-                         ConnectionType::INBOUND, /* inbound_onion */ false};\n+    nodes[0] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[0], /*nKeyedNetGroupIn=*/0,\n+                         /*nLocalHostNonceIn */ 0, CAddress(), /*addrNameIn=*/\"\",\n+                         ConnectionType::INBOUND, /*inbound_onion=*/false};\n     nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(nodes[0]);\n     nodes[0]->fSuccessfullyConnected = true;\n@@ -228,9 +228,9 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     BOOST_CHECK(nodes[0]->fDisconnect);\n     BOOST_CHECK(!banman->IsDiscouraged(other_addr)); // Different address, not discouraged\n \n-    nodes[1] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[1], /* nKeyedNetGroupIn */ 1,\n-                         /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\",\n-                         ConnectionType::INBOUND, /* inbound_onion */ false};\n+    nodes[1] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[1], /*nKeyedNetGroupIn=*/1,\n+                         /*nLocalHostNonceIn */ 1, CAddress(), /*addrNameIn=*/\"\",\n+                         ConnectionType::INBOUND, /*inbound_onion=*/false};\n     nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(nodes[1]);\n     nodes[1]->fSuccessfullyConnected = true;\n@@ -259,9 +259,9 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n \n     // Make sure non-IP peers are discouraged and disconnected properly.\n \n-    nodes[2] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[2], /* nKeyedNetGroupIn */ 1,\n-                         /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\",\n-                         ConnectionType::OUTBOUND_FULL_RELAY, /* inbound_onion */ false};\n+    nodes[2] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[2], /*nKeyedNetGroupIn=*/1,\n+                         /*nLocalHostNonceIn */ 1, CAddress(), /*addrNameIn=*/\"\",\n+                         ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n     nodes[2]->SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(nodes[2]);\n     nodes[2]->fSuccessfullyConnected = true;\n@@ -297,7 +297,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode(id++, NODE_NETWORK, INVALID_SOCKET, addr, /* nKeyedNetGroupIn */ 4, /* nLocalHostNonceIn */ 4, CAddress(), /* pszDest */ \"\", ConnectionType::INBOUND, /* inbound_onion */ false);\n+    CNode dummyNode(id++, NODE_NETWORK, INVALID_SOCKET, addr, /*nKeyedNetGroupIn=*/4, /*nLocalHostNonceIn=*/4, CAddress(), /*addrNameIn=*/\"\", ConnectionType::INBOUND, /*inbound_onion=*/false);\n     dummyNode.SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(&dummyNode);\n     dummyNode.fSuccessfullyConnected = true;"
      },
      {
        "sha": "752e882608dbe71337ff6288a3db158a8009d100",
        "filename": "src/test/fuzz/tx_pool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac49470ca36ff944a613f4358386bf8e0967427/src/test/fuzz/tx_pool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac49470ca36ff944a613f4358386bf8e0967427/src/test/fuzz/tx_pool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/tx_pool.cpp?ref=fac49470ca36ff944a613f4358386bf8e0967427",
        "patch": "@@ -93,7 +93,7 @@ void Finish(FuzzedDataProvider& fuzzed_data_provider, MockedTxPool& tx_pool, CCh\n     const auto info_all = tx_pool.infoAll();\n     if (!info_all.empty()) {\n         const auto& tx_to_remove = *PickValue(fuzzed_data_provider, info_all).tx;\n-        WITH_LOCK(tx_pool.cs, tx_pool.removeRecursive(tx_to_remove, /* dummy */ MemPoolRemovalReason::BLOCK));\n+        WITH_LOCK(tx_pool.cs, tx_pool.removeRecursive(tx_to_remove, MemPoolRemovalReason::BLOCK /* dummy */));\n         std::vector<uint256> all_txids;\n         tx_pool.queryHashes(all_txids);\n         assert(all_txids.size() < info_all.size());"
      },
      {
        "sha": "8d92bee22161c9cfb94ad7f66968c1dad943c24d",
        "filename": "src/test/txpackage_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac49470ca36ff944a613f4358386bf8e0967427/src/test/txpackage_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac49470ca36ff944a613f4358386bf8e0967427/src/test/txpackage_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txpackage_tests.cpp?ref=fac49470ca36ff944a613f4358386bf8e0967427",
        "patch": "@@ -73,19 +73,19 @@ BOOST_FIXTURE_TEST_CASE(package_validation_tests, TestChain100Setup)\n     CKey parent_key;\n     parent_key.MakeNewKey(true);\n     CScript parent_locking_script = GetScriptForDestination(PKHash(parent_key.GetPubKey()));\n-    auto mtx_parent = CreateValidMempoolTransaction(/* input_transaction */ m_coinbase_txns[0], /* vout */ 0,\n-                                                    /* input_height */ 0, /* input_signing_key */ coinbaseKey,\n-                                                    /* output_destination */ parent_locking_script,\n-                                                    /* output_amount */ CAmount(49 * COIN), /* submit */ false);\n+    auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[0], /*input_vout=*/0,\n+                                                    /*input_height=*/ 0, /*input_signing_key=*/coinbaseKey,\n+                                                    /*output_destination=*/ parent_locking_script,\n+                                                    /*output_amount=*/ CAmount(49 * COIN), /*submit=*/false);\n     CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n \n     CKey child_key;\n     child_key.MakeNewKey(true);\n     CScript child_locking_script = GetScriptForDestination(PKHash(child_key.GetPubKey()));\n-    auto mtx_child = CreateValidMempoolTransaction(/* input_transaction */ tx_parent, /* vout */ 0,\n-                                                   /* input_height */ 101, /* input_signing_key */ parent_key,\n-                                                   /* output_destination */ child_locking_script,\n-                                                   /* output_amount */ CAmount(48 * COIN), /* submit */ false);\n+    auto mtx_child = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent, /*input_vout=*/0,\n+                                                   /*input_height=*/ 101, /*input_signing_key=*/parent_key,\n+                                                   /*output_destination */ child_locking_script,\n+                                                   /*output_amount=*/ CAmount(48 * COIN), /*submit=*/false);\n     CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n     const auto result_parent_child = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, {tx_parent, tx_child}, /* test_accept */ true);\n     BOOST_CHECK_MESSAGE(result_parent_child.m_state.IsValid(),"
      },
      {
        "sha": "54873ce6fa830c3df0d4cd54f0b16996757b5ec6",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac49470ca36ff944a613f4358386bf8e0967427/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac49470ca36ff944a613f4358386bf8e0967427/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=fac49470ca36ff944a613f4358386bf8e0967427",
        "patch": "@@ -222,7 +222,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n {\n     bool ignored;\n     auto ProcessBlock = [&](std::shared_ptr<const CBlock> block) -> bool {\n-        return Assert(m_node.chainman)->ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+        return Assert(m_node.chainman)->ProcessNewBlock(Params(), block, /*force_processing=*/true, /*new_block=*/&ignored);\n     };\n \n     // Process all mined blocks"
      }
    ]
  }
]