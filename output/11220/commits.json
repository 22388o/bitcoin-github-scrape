[
  {
    "sha": "12781db0585ed7ddcfd7134bc2a0cbabb4de21e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjc4MWRiMDU4NWVkN2RkY2ZkNzEzNGJjMmEwY2JhYmI0ZGUyMWUz",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2017-11-09T11:02:46Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2017-11-09T11:02:46Z"
      },
      "message": "[Tests] check specific validation error in miner tests\n\nBOOST_CHECK_THROW merely checks that some std::runtime_error is\nthrown, but not which one.\n\nOne example of how this could lead to a test passing when a developer\nintroduces a consensus bug: the test for the sigops limit assumes\nthat CreateNewBlock fails with bad-blk-sigops. However it can\nalso fail with bad-txns-vout-negative, e.g. if a naive developer lowers\nBLOCKSUBSIDY to 1*COIN in the test.\n\nBOOST_CHECK_EXCEPTION allows an additional predicate function. This\ncommit uses this for all exceptions that are checked for in\nminer_tets.cpp:\n* bad-blk-sigops\n* bad-cb-multiple\n* bad-txns-inputs-missingorspent\n* block-validation-failed\n\nAn instance of the CheckRejectInvalid class (for a given validation string)\nis passed to BOOST_CHECK_EXCEPTION.",
      "tree": {
        "sha": "2f890bdb735840b440c0ee9c8bd61ce1af3f3573",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f890bdb735840b440c0ee9c8bd61ce1af3f3573"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12781db0585ed7ddcfd7134bc2a0cbabb4de21e3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCgAxFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAloENd0THHNqb3JzQHNw\ncm92b29zdC5ubAAKCRBX/5vbzDAQCZlbD/9qbyw3mWqEm0cAUKqbmP+R43TuQ4EE\ndLdulBMNqA05xb9Ulzql4XCzxolmTLaVYjJ8U5KN8g9QRDEzz35aXvv1lEAEVggu\nA+3YLkATciReb2hNoP0Tu4N5Zb/chqLs8xszYEd0RvZEtny8RkaB+hhi/8YuzU4M\nMhG6N9BfyVMiOYaveLqyKmsjErM92u0oOu4YoxtCa/i70eS8lI0VmfBF6hqWL8Rb\nk6zpCYt3Ral5iJyP8M5bwsecOY0k/PmyCmrs4HBYfgoaVQm+s9demn7rDqY8027Q\nPT5z0yor2FODngsZStUNLgP6ANdI3dlsI0j5f371uMbeo9qjnu8r3JdCpyvtxWB4\nVD4LrL5V/4MoNtZDz0WowkmAWWeNv+KW3ioDEkZt1m+Rm1u4V/sJ6q7V6E7GI8aY\nk0blCk7dccRQR3GnVacBVQGSpCVOttqnNBHT00SMOj7btlz5tPToF9EoUDs1WUDD\nat3lzukPzO13Qc/o9g0VZ1aJOnwmEWrfB/Z34iC2i1EorrCclXhdACBD8DfLsbOy\nWgjLEXFGptnSV9FiORA7PWk6Gf7qR7sFpHHPSDZxeAef87uh3++pWDkIK2q/w9Jy\n6E4qA9kD6cPplors3beyJD2uq8nMSO1wIcnjTd3OMU9v6nGgAaoGrzlSrDJe56yk\nnJ37KAxeQJm6Ag==\n=BTgE\n-----END PGP SIGNATURE-----",
        "payload": "tree 2f890bdb735840b440c0ee9c8bd61ce1af3f3573\nparent f7388e93d3dd91a90239aedac4ec58404f103a2e\nauthor Sjors Provoost <sjors@sprovoost.nl> 1510225366 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1510225366 +0100\n\n[Tests] check specific validation error in miner tests\n\nBOOST_CHECK_THROW merely checks that some std::runtime_error is\nthrown, but not which one.\n\nOne example of how this could lead to a test passing when a developer\nintroduces a consensus bug: the test for the sigops limit assumes\nthat CreateNewBlock fails with bad-blk-sigops. However it can\nalso fail with bad-txns-vout-negative, e.g. if a naive developer lowers\nBLOCKSUBSIDY to 1*COIN in the test.\n\nBOOST_CHECK_EXCEPTION allows an additional predicate function. This\ncommit uses this for all exceptions that are checked for in\nminer_tets.cpp:\n* bad-blk-sigops\n* bad-cb-multiple\n* bad-txns-inputs-missingorspent\n* block-validation-failed\n\nAn instance of the CheckRejectInvalid class (for a given validation string)\nis passed to BOOST_CHECK_EXCEPTION.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12781db0585ed7ddcfd7134bc2a0cbabb4de21e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12781db0585ed7ddcfd7134bc2a0cbabb4de21e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12781db0585ed7ddcfd7134bc2a0cbabb4de21e3/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7388e93d3dd91a90239aedac4ec58404f103a2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7388e93d3dd91a90239aedac4ec58404f103a2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7388e93d3dd91a90239aedac4ec58404f103a2e"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 19,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0d7bc50cd7e253e7d0e47ae952aebc6c903d6c73",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 5,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12781db0585ed7ddcfd7134bc2a0cbabb4de21e3/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12781db0585ed7ddcfd7134bc2a0cbabb4de21e3/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=12781db0585ed7ddcfd7134bc2a0cbabb4de21e3",
        "patch": "@@ -26,6 +26,17 @@\n \n BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)\n \n+// BOOST_CHECK_EXCEPTION predicates to check the specific validation error\n+class HasReason {\n+public:\n+    HasReason(const std::string& reason) : m_reason(reason) {}\n+    bool operator() (const std::runtime_error& e) const {\n+        return std::string(e.what()).find(m_reason) != std::string::npos;\n+    };\n+private:\n+    const std::string m_reason;\n+};\n+\n static CFeeRate blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n \n static BlockAssembler AssemblerForTest(const CChainParams& params) {\n@@ -264,7 +275,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK_THROW(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-blk-sigops\"));\n     mempool.clear();\n \n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -304,7 +316,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // orphan in mempool, template creation fails\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK_THROW(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n     mempool.clear();\n \n     // child with higher feerate than parent\n@@ -332,7 +344,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     // give it a fee so it'll get mined\n     mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n-    BOOST_CHECK_THROW(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    // Should throw bad-cb-multiple\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-cb-multiple\"));\n     mempool.clear();\n \n     // double spend txn pair in mempool, template creation fails\n@@ -345,7 +358,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK_THROW(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n     mempool.clear();\n \n     // subsidy changing\n@@ -389,7 +402,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue -= LOWFEE;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n-    BOOST_CHECK_THROW(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    // Should throw block-validation-failed\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"block-validation-failed\"));\n     mempool.clear();\n \n     // Delete the dummy blocks again."
      }
    ]
  }
]