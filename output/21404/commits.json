[
  {
    "sha": "3ba2840e7ee81341b0748c0121aedc2e9305041a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmEyODQwZTdlZTgxMzQxYjA3NDhjMDEyMWFlZGMyZTkzMDUwNDFh",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-03-10T09:28:08Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-03-11T05:45:14Z"
      },
      "message": "scripted-diff: remove MakeUnique<T>()\n\n-BEGIN VERIFY SCRIPT-\ngit rm src/util/memory.h\nsed -i -e 's/MakeUnique/std::make_unique/g' $(git grep -l MakeUnique src)\nsed -i -e '/#include <util\\/memory.h>/d' $(git grep -l '#include <util/memory.h>' src)\nsed -i -e '/util\\/memory.h \\\\/d' src/Makefile.am\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "1249a7df5095bc27d9af6cb214bb9f9530eb2fa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1249a7df5095bc27d9af6cb214bb9f9530eb2fa4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ba2840e7ee81341b0748c0121aedc2e9305041a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmBJrnIACgkQLuufXMCV\nJsHYpxAAjH/qZbOVGDV22dxVaU7n4YrZ07wV3PLOISXrVFv3acp1t+MjkQ4/48lb\nzP1viokS/2nbYVq5XetM0ng7I0PTyYg8bE+fYkqx8oPGhRXIQ+gIgIXmJxBMe3XC\nrBA/lPlxf+7K6Vlp4vDBGZQhStZZALCG8YzYZ4oyN7A/niMdDQDlPf2YCfiw2V0x\nuMUxuOmciNwGa0Rqs26ln1uwZDXoCIz8PiP3GnpMFWpVts8fq/Z5LGZVH6NuvppG\n7qmKyacnsaL8iKmAHxdyiI5ztxGj1HEwYkE7h4jM5OJCE0UtW7phjVTMluCr6QJ3\n/i+Kv9bzOBIcGXl5AzTUErDXQuBO88kgacSGD4xOM1sM4bHPPYOaw8CduvjWDfwr\n/rTpZiF96qws57oMM7t23smfOGL2IbpVM3yhVbGzgot0iE5tNMyVAqywJA4Qra/c\nkvQDyW+c2pyGrLQUs803ZwpsKbjfY99vq92OxEvB5hymhR+95soGdEOrW0PYKdkS\n4krVi0X1TRD+vzz3/pus6TjTWLdmWf0KK2W8I5WIAQlbLQALcQ5e4RytGn1l/bxO\n29UfsWxaMGEvP8yOo/+gexqWlfX4sYVrNtI5pddxaHOBnnFb9D7rQGpujCsioH15\nVcL9UUAHkgVMmTu6sLXMCTsKSwk8ULrlG90sU9lw9Y/18Q4IuIo=\n=Vcsb\n-----END PGP SIGNATURE-----",
        "payload": "tree 1249a7df5095bc27d9af6cb214bb9f9530eb2fa4\nparent 63314b8211d795b2bf0814e244d801e74f50b152\nauthor fanquake <fanquake@gmail.com> 1615368488 +0800\ncommitter fanquake <fanquake@gmail.com> 1615441514 +0800\n\nscripted-diff: remove MakeUnique<T>()\n\n-BEGIN VERIFY SCRIPT-\ngit rm src/util/memory.h\nsed -i -e 's/MakeUnique/std::make_unique/g' $(git grep -l MakeUnique src)\nsed -i -e '/#include <util\\/memory.h>/d' $(git grep -l '#include <util/memory.h>' src)\nsed -i -e '/util\\/memory.h \\\\/d' src/Makefile.am\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba2840e7ee81341b0748c0121aedc2e9305041a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ba2840e7ee81341b0748c0121aedc2e9305041a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba2840e7ee81341b0748c0121aedc2e9305041a/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63314b8211d795b2bf0814e244d801e74f50b152",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63314b8211d795b2bf0814e244d801e74f50b152",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63314b8211d795b2bf0814e244d801e74f50b152"
      }
    ],
    "stats": {
      "total": 266,
      "additions": 110,
      "deletions": 156
    },
    "files": [
      {
        "sha": "17b2a7982d135e24aaa3ad54798b7b2e444342e7",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -240,7 +240,6 @@ BITCOIN_CORE_H = \\\n   util/golombrice.h \\\n   util/hasher.h \\\n   util/macros.h \\\n-  util/memory.h \\\n   util/message.h \\\n   util/moneystr.h \\\n   util/rbf.h \\"
      },
      {
        "sha": "376e70ffbadcf6fd46c0a9cd61ea1bb72b2f55e8",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -17,7 +17,7 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<st\n     tx.nLockTime = nextLockTime++; // so all transactions get different hashes\n     tx.vout.resize(1);\n     tx.vout[0].nValue = nValue;\n-    wtxs.push_back(MakeUnique<CWalletTx>(&wallet, MakeTransactionRef(std::move(tx))));\n+    wtxs.push_back(std::make_unique<CWalletTx>(&wallet, MakeTransactionRef(std::move(tx))));\n }\n \n // Simple benchmark for wallet coin selection. Note that it maybe be necessary\n@@ -73,7 +73,7 @@ static void add_coin(const CAmount& nValue, int nInput, std::vector<OutputGroup>\n     CMutableTransaction tx;\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n-    std::unique_ptr<CWalletTx> wtx = MakeUnique<CWalletTx>(&testWallet, MakeTransactionRef(std::move(tx)));\n+    std::unique_ptr<CWalletTx> wtx = std::make_unique<CWalletTx>(&testWallet, MakeTransactionRef(std::move(tx)));\n     set.emplace_back();\n     set.back().Insert(COutput(wtx.get(), nInput, 0, true, true, true).GetInputCoin(), 0, true, 0, 0, false);\n     wtxn.emplace_back(std::move(wtx));"
      },
      {
        "sha": "16311764778cd7d8c4b13851d4dc67e58d3b001d",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -7,7 +7,6 @@\n \n #include <tinyformat.h>\n #include <util/system.h>\n-#include <util/memory.h>\n \n #include <assert.h>\n \n@@ -44,13 +43,13 @@ const CBaseChainParams& BaseParams()\n std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN) {\n-        return MakeUnique<CBaseChainParams>(\"\", 8332, 8334);\n+        return std::make_unique<CBaseChainParams>(\"\", 8332, 8334);\n     } else if (chain == CBaseChainParams::TESTNET) {\n-        return MakeUnique<CBaseChainParams>(\"testnet3\", 18332, 18334);\n+        return std::make_unique<CBaseChainParams>(\"testnet3\", 18332, 18334);\n     } else if (chain == CBaseChainParams::SIGNET) {\n-        return MakeUnique<CBaseChainParams>(\"signet\", 38332, 38334);\n+        return std::make_unique<CBaseChainParams>(\"signet\", 38332, 38334);\n     } else if (chain == CBaseChainParams::REGTEST) {\n-        return MakeUnique<CBaseChainParams>(\"regtest\", 18443, 18445);\n+        return std::make_unique<CBaseChainParams>(\"regtest\", 18443, 18445);\n     }\n     throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }"
      },
      {
        "sha": "867ddb090e7c4c14bbc06a672ee7bfeb7defc55b",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -301,7 +301,7 @@ bool StartHTTPRPC(const util::Ref& context)\n     }\n     struct event_base* eventBase = EventBase();\n     assert(eventBase);\n-    httpRPCTimerInterface = MakeUnique<HTTPRPCTimerInterface>(eventBase);\n+    httpRPCTimerInterface = std::make_unique<HTTPRPCTimerInterface>(eventBase);\n     RPCSetTimerInterface(httpRPCTimerInterface.get());\n     return true;\n }"
      },
      {
        "sha": "32271fb7ab7cb5330808eb132dac0a6257e9d682",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -102,8 +102,8 @@ BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n     fs::create_directories(path);\n \n     m_name = filter_name + \" block filter index\";\n-    m_db = MakeUnique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n-    m_filter_fileseq = MakeUnique<FlatFileSeq>(std::move(path), \"fltr\", FLTR_FILE_CHUNK_SIZE);\n+    m_db = std::make_unique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+    m_filter_fileseq = std::make_unique<FlatFileSeq>(std::move(path), \"fltr\", FLTR_FILE_CHUNK_SIZE);\n }\n \n bool BlockFilterIndex::Init()"
      },
      {
        "sha": "f41985c344b3bd23a73311326f1898b6bf5ab51d",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -192,7 +192,7 @@ bool TxIndex::DB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator&\n }\n \n TxIndex::TxIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n-    : m_db(MakeUnique<TxIndex::DB>(n_cache_size, f_memory, f_wipe))\n+    : m_db(std::make_unique<TxIndex::DB>(n_cache_size, f_memory, f_wipe))\n {}\n \n TxIndex::~TxIndex() {}"
      },
      {
        "sha": "dfa848c8c2b72b3d310450db426718503ae6c930",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -1349,7 +1349,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     }\n \n     assert(!node.scheduler);\n-    node.scheduler = MakeUnique<CScheduler>();\n+    node.scheduler = std::make_unique<CScheduler>();\n \n     // Start the lightweight task scheduler thread\n     node.scheduler->m_service_thread = std::thread([&] { TraceThread(\"scheduler\", [&] { node.scheduler->serviceQueue(); }); });\n@@ -1401,9 +1401,9 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     const bool ignores_incoming_txs{args.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)};\n \n     assert(!node.banman);\n-    node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    node.banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n-    node.connman = MakeUnique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), args.GetBoolArg(\"-networkactive\", true));\n+    node.connman = std::make_unique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), args.GetBoolArg(\"-networkactive\", true));\n \n     assert(!node.fee_estimator);\n     // Don't initialize fee estimation with old data if we don't relay transactions,\n@@ -1799,7 +1799,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n \n     // ********************************************************* Step 8: start indexers\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        g_txindex = MakeUnique<TxIndex>(nTxIndexCache, false, fReindex);\n+        g_txindex = std::make_unique<TxIndex>(nTxIndexCache, false, fReindex);\n         g_txindex->Start();\n     }\n "
      },
      {
        "sha": "c6bbbed4450dca9d1b69d20988f3d31654421df5",
        "filename": "src/interfaces/handler.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/interfaces/handler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/interfaces/handler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/handler.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -4,7 +4,6 @@\n \n #include <interfaces/handler.h>\n \n-#include <util/memory.h>\n \n #include <boost/signals2/connection.hpp>\n #include <utility>\n@@ -35,12 +34,12 @@ class CleanupHandler : public Handler\n \n std::unique_ptr<Handler> MakeHandler(boost::signals2::connection connection)\n {\n-    return MakeUnique<HandlerImpl>(std::move(connection));\n+    return std::make_unique<HandlerImpl>(std::move(connection));\n }\n \n std::unique_ptr<Handler> MakeHandler(std::function<void()> cleanup)\n {\n-    return MakeUnique<CleanupHandler>(std::move(cleanup));\n+    return std::make_unique<CleanupHandler>(std::move(cleanup));\n }\n \n } // namespace interfaces"
      },
      {
        "sha": "1e4a6a9aa783d853e4da4bec863a97c74b4677d8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -2466,11 +2466,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n \n     if (semOutbound == nullptr) {\n         // initialize semaphore\n-        semOutbound = MakeUnique<CSemaphore>(std::min(m_max_outbound, nMaxConnections));\n+        semOutbound = std::make_unique<CSemaphore>(std::min(m_max_outbound, nMaxConnections));\n     }\n     if (semAddnode == nullptr) {\n         // initialize semaphore\n-        semAddnode = MakeUnique<CSemaphore>(nMaxAddnode);\n+        semAddnode = std::make_unique<CSemaphore>(nMaxAddnode);\n     }\n \n     //\n@@ -2906,11 +2906,11 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const\n     hSocket = hSocketIn;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     if (conn_type_in != ConnectionType::BLOCK_RELAY) {\n-        m_tx_relay = MakeUnique<TxRelay>();\n+        m_tx_relay = std::make_unique<TxRelay>();\n     }\n \n     if (RelayAddrsWithConn()) {\n-        m_addr_known = MakeUnique<CRollingBloomFilter>(5000, 0.001);\n+        m_addr_known = std::make_unique<CRollingBloomFilter>(5000, 0.001);\n     }\n \n     for (const std::string &msg : getAllNetMessageTypes())\n@@ -2923,8 +2923,8 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const\n         LogPrint(BCLog::NET, \"Added connection peer=%d\\n\", id);\n     }\n \n-    m_deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params(), GetId(), SER_NETWORK, INIT_PROTO_VERSION));\n-    m_serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+    m_deserializer = std::make_unique<V1TransportDeserializer>(V1TransportDeserializer(Params(), GetId(), SER_NETWORK, INIT_PROTO_VERSION));\n+    m_serializer = std::make_unique<V1TransportSerializer>(V1TransportSerializer());\n }\n \n CNode::~CNode()"
      },
      {
        "sha": "8611989d0198debde781f706d8d9e4d3874a985b",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -613,7 +613,7 @@ class ChainImpl : public Chain\n     }\n     std::unique_ptr<Handler> handleNotifications(std::shared_ptr<Notifications> notifications) override\n     {\n-        return MakeUnique<NotificationsHandlerImpl>(std::move(notifications));\n+        return std::make_unique<NotificationsHandlerImpl>(std::move(notifications));\n     }\n     void waitForNotificationsIfTipChanged(const uint256& old_tip) override\n     {\n@@ -626,7 +626,7 @@ class ChainImpl : public Chain\n     }\n     std::unique_ptr<Handler> handleRpc(const CRPCCommand& command) override\n     {\n-        return MakeUnique<RpcHandlerImpl>(command);\n+        return std::make_unique<RpcHandlerImpl>(command);\n     }\n     bool rpcEnableDeprecated(const std::string& method) override { return IsDeprecatedRPCEnabled(method); }\n     void rpcRunLater(const std::string& name, std::function<void()> fn, int64_t seconds) override\n@@ -669,6 +669,6 @@ class ChainImpl : public Chain\n } // namespace node\n \n namespace interfaces {\n-std::unique_ptr<Node> MakeNode(NodeContext* context) { return MakeUnique<node::NodeImpl>(context); }\n-std::unique_ptr<Chain> MakeChain(NodeContext& context) { return MakeUnique<node::ChainImpl>(context); }\n+std::unique_ptr<Node> MakeNode(NodeContext* context) { return std::make_unique<node::NodeImpl>(context); }\n+std::unique_ptr<Chain> MakeChain(NodeContext& context) { return std::make_unique<node::ChainImpl>(context); }\n } // namespace interfaces"
      },
      {
        "sha": "d722e0346ebc700e19def87dfabd864b38d4e5f8",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -266,7 +266,7 @@ bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informa\n     }\n \n     // prepare transaction for getting txFee earlier\n-    m_current_transaction = MakeUnique<WalletModelTransaction>(recipients);\n+    m_current_transaction = std::make_unique<WalletModelTransaction>(recipients);\n     WalletModel::SendCoinsReturn prepareStatus;\n \n     updateCoinControlState(*m_coin_control);"
      },
      {
        "sha": "889cb4f06e9523ad238f4a08ed8ae158f12f605e",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -853,7 +853,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const S\n             CPubKey pubkey(data);\n             if (pubkey.IsFullyValid()) {\n                 if (permit_uncompressed || pubkey.IsCompressed()) {\n-                    return MakeUnique<ConstPubkeyProvider>(key_exp_index, pubkey);\n+                    return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey);\n                 } else {\n                     error = \"Uncompressed keys are not allowed\";\n                     return nullptr;\n@@ -867,7 +867,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const S\n             if (permit_uncompressed || key.IsCompressed()) {\n                 CPubKey pubkey = key.GetPubKey();\n                 out.keys.emplace(pubkey.GetID(), key);\n-                return MakeUnique<ConstPubkeyProvider>(key_exp_index, pubkey);\n+                return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey);\n             } else {\n                 error = \"Uncompressed keys are not allowed\";\n                 return nullptr;\n@@ -894,7 +894,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const S\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n     }\n-    return MakeUnique<BIP32PubkeyProvider>(key_exp_index, extpubkey, std::move(path), type);\n+    return std::make_unique<BIP32PubkeyProvider>(key_exp_index, extpubkey, std::move(path), type);\n }\n \n /** Parse a public key including origin information (if enabled). */\n@@ -931,7 +931,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkey(uint32_t key_exp_index, const Span<c\n     if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n     auto provider = ParsePubkeyInner(key_exp_index, origin_split[1], permit_uncompressed, out, error);\n     if (!provider) return nullptr;\n-    return MakeUnique<OriginPubkeyProvider>(key_exp_index, std::move(info), std::move(provider));\n+    return std::make_unique<OriginPubkeyProvider>(key_exp_index, std::move(info), std::move(provider));\n }\n \n /** Parse a script in a particular context. */\n@@ -944,17 +944,17 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t key_exp_index, Span<const c\n     if (Func(\"pk\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n-        return MakeUnique<PKDescriptor>(std::move(pubkey));\n+        return std::make_unique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n-        return MakeUnique<PKHDescriptor>(std::move(pubkey));\n+        return std::make_unique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, true, out, error);\n         if (!pubkey) return nullptr;\n-        return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+        return std::make_unique<ComboDescriptor>(std::move(pubkey));\n     } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n         error = \"Cannot have combo in non-top level\";\n         return nullptr;\n@@ -1002,28 +1002,28 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t key_exp_index, Span<const c\n                 return nullptr;\n             }\n         }\n-        return MakeUnique<MultisigDescriptor>(thres, std::move(providers), sorted_multi);\n+        return std::make_unique<MultisigDescriptor>(thres, std::move(providers), sorted_multi);\n     }\n     if (ctx != ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, false, out, error);\n         if (!pubkey) return nullptr;\n-        return MakeUnique<WPKHDescriptor>(std::move(pubkey));\n+        return std::make_unique<WPKHDescriptor>(std::move(pubkey));\n     } else if (ctx == ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n         error = \"Cannot have wpkh within wsh\";\n         return nullptr;\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"sh\", expr)) {\n         auto desc = ParseScript(key_exp_index, expr, ParseScriptContext::P2SH, out, error);\n         if (!desc || expr.size()) return nullptr;\n-        return MakeUnique<SHDescriptor>(std::move(desc));\n+        return std::make_unique<SHDescriptor>(std::move(desc));\n     } else if (ctx != ParseScriptContext::TOP && Func(\"sh\", expr)) {\n         error = \"Cannot have sh in non-top level\";\n         return nullptr;\n     }\n     if (ctx != ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n         auto desc = ParseScript(key_exp_index, expr, ParseScriptContext::P2WSH, out, error);\n         if (!desc || expr.size()) return nullptr;\n-        return MakeUnique<WSHDescriptor>(std::move(desc));\n+        return std::make_unique<WSHDescriptor>(std::move(desc));\n     } else if (ctx == ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n         error = \"Cannot have wsh within wsh\";\n         return nullptr;\n@@ -1034,7 +1034,7 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t key_exp_index, Span<const c\n             error = \"Address is not valid\";\n             return nullptr;\n         }\n-        return MakeUnique<AddressDescriptor>(std::move(dest));\n+        return std::make_unique<AddressDescriptor>(std::move(dest));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"raw\", expr)) {\n         std::string str(expr.begin(), expr.end());\n@@ -1043,7 +1043,7 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t key_exp_index, Span<const c\n             return nullptr;\n         }\n         auto bytes = ParseHex(str);\n-        return MakeUnique<RawDescriptor>(CScript(bytes.begin(), bytes.end()));\n+        return std::make_unique<RawDescriptor>(CScript(bytes.begin(), bytes.end()));\n     }\n     if (ctx == ParseScriptContext::P2SH) {\n         error = \"A function is needed within P2SH\";\n@@ -1058,10 +1058,10 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t key_exp_index, Span<const c\n \n std::unique_ptr<PubkeyProvider> InferPubkey(const CPubKey& pubkey, ParseScriptContext, const SigningProvider& provider)\n {\n-    std::unique_ptr<PubkeyProvider> key_provider = MakeUnique<ConstPubkeyProvider>(0, pubkey);\n+    std::unique_ptr<PubkeyProvider> key_provider = std::make_unique<ConstPubkeyProvider>(0, pubkey);\n     KeyOriginInfo info;\n     if (provider.GetKeyOrigin(pubkey.GetID(), info)) {\n-        return MakeUnique<OriginPubkeyProvider>(0, std::move(info), std::move(key_provider));\n+        return std::make_unique<OriginPubkeyProvider>(0, std::move(info), std::move(key_provider));\n     }\n     return key_provider;\n }\n@@ -1074,23 +1074,23 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n     if (txntype == TxoutType::PUBKEY) {\n         CPubKey pubkey(data[0].begin(), data[0].end());\n         if (pubkey.IsValid()) {\n-            return MakeUnique<PKDescriptor>(InferPubkey(pubkey, ctx, provider));\n+            return std::make_unique<PKDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n     if (txntype == TxoutType::PUBKEYHASH) {\n         uint160 hash(data[0]);\n         CKeyID keyid(hash);\n         CPubKey pubkey;\n         if (provider.GetPubKey(keyid, pubkey)) {\n-            return MakeUnique<PKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n+            return std::make_unique<PKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n     if (txntype == TxoutType::WITNESS_V0_KEYHASH && ctx != ParseScriptContext::P2WSH) {\n         uint160 hash(data[0]);\n         CKeyID keyid(hash);\n         CPubKey pubkey;\n         if (provider.GetPubKey(keyid, pubkey)) {\n-            return MakeUnique<WPKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n+            return std::make_unique<WPKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n     if (txntype == TxoutType::MULTISIG) {\n@@ -1099,15 +1099,15 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n             CPubKey pubkey(data[i].begin(), data[i].end());\n             providers.push_back(InferPubkey(pubkey, ctx, provider));\n         }\n-        return MakeUnique<MultisigDescriptor>((int)data[0][0], std::move(providers));\n+        return std::make_unique<MultisigDescriptor>((int)data[0][0], std::move(providers));\n     }\n     if (txntype == TxoutType::SCRIPTHASH && ctx == ParseScriptContext::TOP) {\n         uint160 hash(data[0]);\n         CScriptID scriptid(hash);\n         CScript subscript;\n         if (provider.GetCScript(scriptid, subscript)) {\n             auto sub = InferScript(subscript, ParseScriptContext::P2SH, provider);\n-            if (sub) return MakeUnique<SHDescriptor>(std::move(sub));\n+            if (sub) return std::make_unique<SHDescriptor>(std::move(sub));\n         }\n     }\n     if (txntype == TxoutType::WITNESS_V0_SCRIPTHASH && ctx != ParseScriptContext::P2WSH) {\n@@ -1116,18 +1116,18 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n         CScript subscript;\n         if (provider.GetCScript(scriptid, subscript)) {\n             auto sub = InferScript(subscript, ParseScriptContext::P2WSH, provider);\n-            if (sub) return MakeUnique<WSHDescriptor>(std::move(sub));\n+            if (sub) return std::make_unique<WSHDescriptor>(std::move(sub));\n         }\n     }\n \n     CTxDestination dest;\n     if (ExtractDestination(script, dest)) {\n         if (GetScriptForDestination(dest) == script) {\n-            return MakeUnique<AddressDescriptor>(std::move(dest));\n+            return std::make_unique<AddressDescriptor>(std::move(dest));\n         }\n     }\n \n-    return MakeUnique<RawDescriptor>(script);\n+    return std::make_unique<RawDescriptor>(script);\n }\n \n "
      },
      {
        "sha": "b523173a4526b76712f7c354297bbb9b3c2f67b8",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <util/memory.h>\n #include <util/system.h>\n \n #include <test/util/setup_common.h>\n@@ -163,7 +162,7 @@ class TestLockedPageAllocator: public LockedPageAllocator\n BOOST_AUTO_TEST_CASE(lockedpool_tests_mock)\n {\n     // Test over three virtual arenas, of which one will succeed being locked\n-    std::unique_ptr<LockedPageAllocator> x = MakeUnique<TestLockedPageAllocator>(3, 1);\n+    std::unique_ptr<LockedPageAllocator> x = std::make_unique<TestLockedPageAllocator>(3, 1);\n     LockedPool pool(std::move(x));\n     BOOST_CHECK(pool.stats().total == 0);\n     BOOST_CHECK(pool.stats().locked == 0);"
      },
      {
        "sha": "64c6d7f634964635ba89b8c98fc4615429c85ae2",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -5,7 +5,6 @@\n #include <checkqueue.h>\n #include <sync.h>\n #include <test/util/setup_common.h>\n-#include <util/memory.h>\n #include <util/system.h>\n #include <util/time.h>\n \n@@ -146,7 +145,7 @@ typedef CCheckQueue<FrozenCleanupCheck> FrozenCleanup_Queue;\n  */\n static void Correct_Queue_range(std::vector<size_t> range)\n {\n-    auto small_queue = MakeUnique<Correct_Queue>(QUEUE_BATCH_SIZE);\n+    auto small_queue = std::make_unique<Correct_Queue>(QUEUE_BATCH_SIZE);\n     small_queue->StartWorkerThreads(SCRIPT_CHECK_THREADS);\n     // Make vChecks here to save on malloc (this test can be slow...)\n     std::vector<FakeCheckCheckCompletion> vChecks;\n@@ -206,7 +205,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Random)\n /** Test that failing checks are caught */\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n {\n-    auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n+    auto fail_queue = std::make_unique<Failing_Queue>(QUEUE_BATCH_SIZE);\n     fail_queue->StartWorkerThreads(SCRIPT_CHECK_THREADS);\n \n     for (size_t i = 0; i < 1001; ++i) {\n@@ -234,7 +233,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n // future blocks, ie, the bad state is cleared.\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n {\n-    auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n+    auto fail_queue = std::make_unique<Failing_Queue>(QUEUE_BATCH_SIZE);\n     fail_queue->StartWorkerThreads(SCRIPT_CHECK_THREADS);\n \n     for (auto times = 0; times < 10; ++times) {\n@@ -258,7 +257,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n // more than once as well\n BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n {\n-    auto queue = MakeUnique<Unique_Queue>(QUEUE_BATCH_SIZE);\n+    auto queue = std::make_unique<Unique_Queue>(QUEUE_BATCH_SIZE);\n     queue->StartWorkerThreads(SCRIPT_CHECK_THREADS);\n \n     size_t COUNT = 100000;\n@@ -293,7 +292,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n // time could leave the data hanging across a sequence of blocks.\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n {\n-    auto queue = MakeUnique<Memory_Queue>(QUEUE_BATCH_SIZE);\n+    auto queue = std::make_unique<Memory_Queue>(QUEUE_BATCH_SIZE);\n     queue->StartWorkerThreads(SCRIPT_CHECK_THREADS);\n     for (size_t i = 0; i < 1000; ++i) {\n         size_t total = i;\n@@ -320,7 +319,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n // have been destructed\n BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n {\n-    auto queue = MakeUnique<FrozenCleanup_Queue>(QUEUE_BATCH_SIZE);\n+    auto queue = std::make_unique<FrozenCleanup_Queue>(QUEUE_BATCH_SIZE);\n     bool fails = false;\n     queue->StartWorkerThreads(SCRIPT_CHECK_THREADS);\n     std::thread t0([&]() {\n@@ -360,7 +359,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n /** Test that CCheckQueueControl is threadsafe */\n BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n {\n-    auto queue = MakeUnique<Standard_Queue>(QUEUE_BATCH_SIZE);\n+    auto queue = std::make_unique<Standard_Queue>(QUEUE_BATCH_SIZE);\n     {\n         std::vector<std::thread> tg;\n         std::atomic<int> nThreads {0};"
      },
      {
        "sha": "a6080ad3ddb9a553ac601edc6fb13ac4c75b2ea4",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -5,7 +5,6 @@\n #include <dbwrapper.h>\n #include <test/util/setup_common.h>\n #include <uint256.h>\n-#include <util/memory.h>\n \n #include <memory>\n \n@@ -207,7 +206,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    std::unique_ptr<CDBWrapper> dbw = MakeUnique<CDBWrapper>(ph, (1 << 10), false, false, false);\n+    std::unique_ptr<CDBWrapper> dbw = std::make_unique<CDBWrapper>(ph, (1 << 10), false, false, false);\n     char key = 'k';\n     uint256 in = InsecureRand256();\n     uint256 res;\n@@ -248,7 +247,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    std::unique_ptr<CDBWrapper> dbw = MakeUnique<CDBWrapper>(ph, (1 << 10), false, false, false);\n+    std::unique_ptr<CDBWrapper> dbw = std::make_unique<CDBWrapper>(ph, (1 << 10), false, false, false);\n     char key = 'k';\n     uint256 in = InsecureRand256();\n     uint256 res;"
      },
      {
        "sha": "e75982bc6fe2f5e8a4cdaa31cff3cb24bf351b32",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -15,7 +15,6 @@\n #include <script/standard.h>\n #include <serialize.h>\n #include <txorphanage.h>\n-#include <util/memory.h>\n #include <util/string.h>\n #include <util/system.h>\n #include <util/time.h>\n@@ -68,7 +67,7 @@ BOOST_FIXTURE_TEST_SUITE(denialofservice_tests, TestingSetup)\n BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n {\n     const CChainParams& chainparams = Params();\n-    auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n+    auto connman = std::make_unique<CConnman>(0x1337, 0x1337);\n     auto peerLogic = PeerManager::make(chainparams, *connman, nullptr, *m_node.scheduler,\n                                        *m_node.chainman, *m_node.mempool, false);\n \n@@ -138,7 +137,7 @@ static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerManager &pee\n BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n {\n     const CChainParams& chainparams = Params();\n-    auto connman = MakeUnique<CConnmanTest>(0x1337, 0x1337);\n+    auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337);\n     auto peerLogic = PeerManager::make(chainparams, *connman, nullptr, *m_node.scheduler,\n                                        *m_node.chainman, *m_node.mempool, false);\n \n@@ -211,8 +210,8 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n-    auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n+    auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto connman = std::make_unique<CConnman>(0x1337, 0x1337);\n     auto peerLogic = PeerManager::make(chainparams, *connman, banman.get(), *m_node.scheduler,\n                                        *m_node.chainman, *m_node.mempool, false);\n \n@@ -258,8 +257,8 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n     const CChainParams& chainparams = Params();\n-    auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n+    auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto connman = std::make_unique<CConnman>(0x1337, 0x1337);\n     auto peerLogic = PeerManager::make(chainparams, *connman, banman.get(), *m_node.scheduler,\n                                        *m_node.chainman, *m_node.mempool, false);\n "
      },
      {
        "sha": "ffe48556623c080b7aa35b91fc24707082557e64",
        "filename": "src/test/fuzz/descriptor_parse.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/descriptor_parse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/descriptor_parse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/descriptor_parse.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -6,7 +6,6 @@\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n-#include <util/memory.h>\n \n void initialize_descriptor_parse()\n {"
      },
      {
        "sha": "77ed7989232e51fefa4833d6a2e33e6f3a5f4317",
        "filename": "src/test/fuzz/eval_script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/eval_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/eval_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/eval_script.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -6,7 +6,6 @@\n #include <script/interpreter.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n-#include <util/memory.h>\n \n #include <limits>\n "
      },
      {
        "sha": "32077b1fe2c909ae279c25653383426ca64a0deb",
        "filename": "src/test/fuzz/key.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/key.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -17,7 +17,6 @@\n #include <script/standard.h>\n #include <streams.h>\n #include <test/fuzz/fuzz.h>\n-#include <util/memory.h>\n #include <util/strencodings.h>\n \n #include <cassert>"
      },
      {
        "sha": "3fffaac8d0341b24c4e7f7d2d3e5474090a8db92",
        "filename": "src/test/fuzz/parse_univalue.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/parse_univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/parse_univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/parse_univalue.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -7,7 +7,6 @@\n #include <rpc/client.h>\n #include <rpc/util.h>\n #include <test/fuzz/fuzz.h>\n-#include <util/memory.h>\n \n #include <limits>\n #include <string>"
      },
      {
        "sha": "04fc6da9b10b47b5c63577094195ee7b1bc7de9c",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -19,7 +19,6 @@\n #include <test/util/setup_common.h>\n #include <test/util/validation.h>\n #include <txorphanage.h>\n-#include <util/memory.h>\n #include <validationinterface.h>\n #include <version.h>\n "
      },
      {
        "sha": "ee402dba38d7be05c8005276763c018b93c03c65",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -14,7 +14,6 @@\n #include <test/util/setup_common.h>\n #include <test/util/validation.h>\n #include <txorphanage.h>\n-#include <util/memory.h>\n #include <validation.h>\n #include <validationinterface.h>\n "
      },
      {
        "sha": "eb2754054a361322a51ba3f68f429fcc5288e9c5",
        "filename": "src/test/fuzz/psbt.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/psbt.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -10,7 +10,6 @@\n #include <pubkey.h>\n #include <script/script.h>\n #include <streams.h>\n-#include <util/memory.h>\n #include <version.h>\n \n #include <cstdint>"
      },
      {
        "sha": "8219a04e49d393788d89e7cff8207c2fb629840c",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -20,7 +20,6 @@\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n #include <univalue.h>\n-#include <util/memory.h>\n \n #include <algorithm>\n #include <cassert>"
      },
      {
        "sha": "561230707c82bcf0856c9c50cb5fbd5485c88bd4",
        "filename": "src/test/fuzz/script_flags.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/script_flags.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/script_flags.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_flags.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -5,7 +5,6 @@\n #include <pubkey.h>\n #include <script/interpreter.h>\n #include <streams.h>\n-#include <util/memory.h>\n #include <version.h>\n \n #include <test/fuzz/fuzz.h>"
      },
      {
        "sha": "7b57c5dfd81ef3d565c43b757455ecf62650057c",
        "filename": "src/test/fuzz/signature_checker.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/signature_checker.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/fuzz/signature_checker.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/signature_checker.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -6,7 +6,6 @@\n #include <script/interpreter.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n-#include <util/memory.h>\n \n #include <cstdint>\n #include <limits>\n@@ -15,7 +14,7 @@\n \n void initialize_signature_checker()\n {\n-    static const auto verify_handle = MakeUnique<ECCVerifyHandle>();\n+    static const auto verify_handle = std::make_unique<ECCVerifyHandle>();\n }\n \n namespace {"
      },
      {
        "sha": "167242a971ee9974a15136d05c7331b6c5e7fd8b",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -14,7 +14,6 @@\n #include <span.h>\n #include <streams.h>\n #include <test/util/setup_common.h>\n-#include <util/memory.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n #include <util/system.h>\n@@ -188,7 +187,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     CAddress addr = CAddress(CService(ipv4Addr, 7777), NODE_NETWORK);\n     std::string pszDest;\n \n-    std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(\n+    std::unique_ptr<CNode> pnode1 = std::make_unique<CNode>(\n         id++, NODE_NETWORK, hSocket, addr,\n         /* nKeyedNetGroupIn = */ 0,\n         /* nLocalHostNonceIn = */ 0,\n@@ -203,7 +202,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     BOOST_CHECK(pnode1->m_inbound_onion == false);\n     BOOST_CHECK_EQUAL(pnode1->ConnectedThroughNetwork(), Network::NET_IPV4);\n \n-    std::unique_ptr<CNode> pnode2 = MakeUnique<CNode>(\n+    std::unique_ptr<CNode> pnode2 = std::make_unique<CNode>(\n         id++, NODE_NETWORK, hSocket, addr,\n         /* nKeyedNetGroupIn = */ 1,\n         /* nLocalHostNonceIn = */ 1,\n@@ -218,7 +217,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     BOOST_CHECK(pnode2->m_inbound_onion == false);\n     BOOST_CHECK_EQUAL(pnode2->ConnectedThroughNetwork(), Network::NET_IPV4);\n \n-    std::unique_ptr<CNode> pnode3 = MakeUnique<CNode>(\n+    std::unique_ptr<CNode> pnode3 = std::make_unique<CNode>(\n         id++, NODE_NETWORK, hSocket, addr,\n         /* nKeyedNetGroupIn = */ 0,\n         /* nLocalHostNonceIn = */ 0,\n@@ -233,7 +232,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     BOOST_CHECK(pnode3->m_inbound_onion == false);\n     BOOST_CHECK_EQUAL(pnode3->ConnectedThroughNetwork(), Network::NET_IPV4);\n \n-    std::unique_ptr<CNode> pnode4 = MakeUnique<CNode>(\n+    std::unique_ptr<CNode> pnode4 = std::make_unique<CNode>(\n         id++, NODE_NETWORK, hSocket, addr,\n         /* nKeyedNetGroupIn = */ 1,\n         /* nLocalHostNonceIn = */ 1,\n@@ -711,7 +710,7 @@ BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)\n     in_addr ipv4AddrPeer;\n     ipv4AddrPeer.s_addr = 0xa0b0c001;\n     CAddress addr = CAddress(CService(ipv4AddrPeer, 7777), NODE_NETWORK);\n-    std::unique_ptr<CNode> pnode = MakeUnique<CNode>(0, NODE_NETWORK, INVALID_SOCKET, addr, /* nKeyedNetGroupIn */ 0, /* nLocalHostNonceIn */ 0, CAddress{}, /* pszDest */ std::string{}, ConnectionType::OUTBOUND_FULL_RELAY, /* inbound_onion */ false);\n+    std::unique_ptr<CNode> pnode = std::make_unique<CNode>(0, NODE_NETWORK, INVALID_SOCKET, addr, /* nKeyedNetGroupIn */ 0, /* nLocalHostNonceIn */ 0, CAddress{}, /* pszDest */ std::string{}, ConnectionType::OUTBOUND_FULL_RELAY, /* inbound_onion */ false);\n     pnode->fSuccessfullyConnected.store(true);\n \n     // the peer claims to be reaching us via IPv6"
      },
      {
        "sha": "66f4efc139f943973c0ddd47bbc68d0d6ef519e5",
        "filename": "src/test/util/logging.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/util/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/util/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/logging.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -7,7 +7,6 @@\n #include <logging.h>\n #include <noui.h>\n #include <tinyformat.h>\n-#include <util/memory.h>\n \n #include <stdexcept>\n "
      },
      {
        "sha": "bfff21ebe69024d70caaa332d9e4ba3f50533276",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -25,7 +25,6 @@\n #include <script/sigcache.h>\n #include <streams.h>\n #include <txdb.h>\n-#include <util/memory.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n #include <util/time.h>\n@@ -131,7 +130,7 @@ ChainTestingSetup::ChainTestingSetup(const std::string& chainName, const std::ve\n {\n     // We have to run a scheduler thread to prevent ActivateBestChain\n     // from blocking due to queue overrun.\n-    m_node.scheduler = MakeUnique<CScheduler>();\n+    m_node.scheduler = std::make_unique<CScheduler>();\n     m_node.scheduler->m_service_thread = std::thread([&] { TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\n     GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n \n@@ -188,8 +187,8 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n \n-    m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n+    m_node.banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, m_node.banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool,\n                                        false);"
      },
      {
        "sha": "b742fcaf0b940349d78abfd8b910549b52e66e41",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -71,7 +71,7 @@ BOOST_AUTO_TEST_CASE(util_datadir)\n BOOST_AUTO_TEST_CASE(util_check)\n {\n     // Check that Assert can forward\n-    const std::unique_ptr<int> p_two = Assert(MakeUnique<int>(2));\n+    const std::unique_ptr<int> p_two = Assert(std::make_unique<int>(2));\n     // Check that Assert works on lvalues and rvalues\n     const int two = *Assert(p_two);\n     Assert(two == 2);"
      },
      {
        "sha": "3a08e28c013b7336edba99fc853ba7683ad90b58",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -10,7 +10,6 @@\n #include <random.h>\n #include <shutdown.h>\n #include <uint256.h>\n-#include <util/memory.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <util/vector.h>\n@@ -41,7 +40,7 @@ struct CoinEntry {\n }\n \n CCoinsViewDB::CCoinsViewDB(fs::path ldb_path, size_t nCacheSize, bool fMemory, bool fWipe) :\n-    m_db(MakeUnique<CDBWrapper>(ldb_path, nCacheSize, fMemory, fWipe, true)),\n+    m_db(std::make_unique<CDBWrapper>(ldb_path, nCacheSize, fMemory, fWipe, true)),\n     m_ldb_path(ldb_path),\n     m_is_memory(fMemory) { }\n \n@@ -53,7 +52,7 @@ void CCoinsViewDB::ResizeCache(size_t new_cache_size)\n         // Have to do a reset first to get the original `m_db` state to release its\n         // filesystem lock.\n         m_db.reset();\n-        m_db = MakeUnique<CDBWrapper>(\n+        m_db = std::make_unique<CDBWrapper>(\n             m_ldb_path, new_cache_size, m_is_memory, /*fWipe*/ false, /*obfuscate*/ true);\n     }\n }"
      },
      {
        "sha": "58424134b0259a8dcea34f5615afcae1d7e0b3f9",
        "filename": "src/txrequest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/txrequest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/txrequest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrequest.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -9,7 +9,6 @@\n #include <primitives/transaction.h>\n #include <random.h>\n #include <uint256.h>\n-#include <util/memory.h>\n \n #include <boost/multi_index_container.hpp>\n #include <boost/multi_index/ordered_index.hpp>\n@@ -711,7 +710,7 @@ class TxRequestTracker::Impl {\n };\n \n TxRequestTracker::TxRequestTracker(bool deterministic) :\n-    m_impl{MakeUnique<TxRequestTracker::Impl>(deterministic)} {}\n+    m_impl{std::make_unique<TxRequestTracker::Impl>(deterministic)} {}\n \n TxRequestTracker::~TxRequestTracker() = default;\n "
      },
      {
        "sha": "f21b81bade23ff11520e121622c7fa146821f24b",
        "filename": "src/util/memory.h",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63314b8211d795b2bf0814e244d801e74f50b152/src/util/memory.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63314b8211d795b2bf0814e244d801e74f50b152/src/util/memory.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/memory.h?ref=63314b8211d795b2bf0814e244d801e74f50b152",
        "patch": "@@ -1,20 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2020 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_UTIL_MEMORY_H\n-#define BITCOIN_UTIL_MEMORY_H\n-\n-#include <memory>\n-#include <utility>\n-\n-//! Substitute for C++14 std::make_unique.\n-//! DEPRECATED use std::make_unique in new code.\n-template <typename T, typename... Args>\n-std::unique_ptr<T> MakeUnique(Args&&... args)\n-{\n-    return std::make_unique<T>(std::forward<Args>(args)...);\n-}\n-\n-#endif"
      },
      {
        "sha": "63b3c52ee5cb456d830cbeb1e22ac23f316eac40",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -100,7 +100,7 @@ bool LockDirectory(const fs::path& directory, const std::string lockfile_name, b\n     // Create empty lock file if it doesn't exist.\n     FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n-    auto lock = MakeUnique<fsbridge::FileLock>(pathLockFile);\n+    auto lock = std::make_unique<fsbridge::FileLock>(pathLockFile);\n     if (!lock->TryLock()) {\n         return error(\"Error while attempting to lock directory %s: %s\", directory.string(), lock->GetReason());\n     }"
      },
      {
        "sha": "30b8cb1c68a4f1b2ec4f868461f8d38ee282a0f4",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -22,7 +22,6 @@\n #include <optional.h>\n #include <sync.h>\n #include <tinyformat.h>\n-#include <util/memory.h>\n #include <util/settings.h>\n #include <util/threadnames.h>\n #include <util/time.h>"
      },
      {
        "sha": "7df2561375c1d7fa136baa613739d50c814faec7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -1287,7 +1287,7 @@ CoinsViews::CoinsViews(\n \n void CoinsViews::InitCache()\n {\n-    m_cacheview = MakeUnique<CCoinsViewCache>(&m_catcherview);\n+    m_cacheview = std::make_unique<CCoinsViewCache>(&m_catcherview);\n }\n \n CChainState::CChainState(CTxMemPool& mempool, BlockManager& blockman, uint256 from_snapshot_blockhash)\n@@ -1305,7 +1305,7 @@ void CChainState::InitCoinsDB(\n         leveldb_name += \"_\" + m_from_snapshot_blockhash.ToString();\n     }\n \n-    m_coins_views = MakeUnique<CoinsViews>(\n+    m_coins_views = std::make_unique<CoinsViews>(\n         leveldb_name, cache_size_bytes, in_memory, should_wipe);\n }\n \n@@ -5279,7 +5279,7 @@ bool ChainstateManager::ActivateSnapshot(\n             static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n     }\n \n-    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return std::make_unique<CChainState>(\n             this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n \n     {"
      },
      {
        "sha": "1dc23374e319e0b1bee76b16979ef3c6986d9499",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -331,7 +331,7 @@ void BerkeleyDatabase::Open()\n \n         if (m_db == nullptr) {\n             int ret;\n-            std::unique_ptr<Db> pdb_temp = MakeUnique<Db>(env->dbenv.get(), 0);\n+            std::unique_ptr<Db> pdb_temp = std::make_unique<Db>(env->dbenv.get(), 0);\n \n             bool fMockDb = env->IsMock();\n             if (fMockDb) {\n@@ -462,7 +462,7 @@ bool BerkeleyDatabase::Rewrite(const char* pszSkip)\n                 std::string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     BerkeleyBatch db(*this, true);\n-                    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n+                    std::unique_ptr<Db> pdbCopy = std::make_unique<Db>(env->dbenv.get(), 0);\n \n                     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                                             strFileRes.c_str(), // Filename\n@@ -819,7 +819,7 @@ void BerkeleyDatabase::RemoveRef()\n \n std::unique_ptr<DatabaseBatch> BerkeleyDatabase::MakeBatch(bool flush_on_close)\n {\n-    return MakeUnique<BerkeleyBatch>(*this, false, flush_on_close);\n+    return std::make_unique<BerkeleyBatch>(*this, false, flush_on_close);\n }\n \n std::unique_ptr<BerkeleyDatabase> MakeBerkeleyDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n@@ -835,7 +835,7 @@ std::unique_ptr<BerkeleyDatabase> MakeBerkeleyDatabase(const fs::path& path, con\n             status = DatabaseStatus::FAILED_ALREADY_LOADED;\n             return nullptr;\n         }\n-        db = MakeUnique<BerkeleyDatabase>(std::move(env), std::move(data_filename));\n+        db = std::make_unique<BerkeleyDatabase>(std::move(env), std::move(data_filename));\n     }\n \n     if (options.verify && !db->Verify(error)) {"
      },
      {
        "sha": "b64e9fa53378a4b6b97a0571e7a87b5c14cec75f",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -11,7 +11,6 @@\n #include <optional.h>\n #include <streams.h>\n #include <support/allocators/secure.h>\n-#include <util/memory.h>\n \n #include <atomic>\n #include <memory>\n@@ -193,7 +192,7 @@ class DummyDatabase : public WalletDatabase\n     void ReloadDbEnv() override {}\n     std::string Filename() override { return \"dummy\"; }\n     std::string Format() override { return \"dummy\"; }\n-    std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) override { return MakeUnique<DummyBatch>(); }\n+    std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) override { return std::make_unique<DummyBatch>(); }\n };\n \n enum class DatabaseFormat {"
      },
      {
        "sha": "ada586119a4c33423334c2db10db3ccc9f2e290c",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -588,10 +588,10 @@ class WalletClientImpl : public WalletClient\n } // namespace wallet\n \n namespace interfaces {\n-std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet) { return wallet ? MakeUnique<wallet::WalletImpl>(wallet) : nullptr; }\n+std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet) { return wallet ? std::make_unique<wallet::WalletImpl>(wallet) : nullptr; }\n \n std::unique_ptr<WalletClient> MakeWalletClient(Chain& chain, ArgsManager& args)\n {\n-    return MakeUnique<wallet::WalletClientImpl>(chain, args);\n+    return std::make_unique<wallet::WalletClientImpl>(chain, args);\n }\n } // namespace interfaces"
      },
      {
        "sha": "50423c3e32518901ea0409ff387f57b12119fc19",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -982,14 +982,14 @@ static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CP\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script \\\"\" + strRedeemScript + \"\\\": must be hex string\");\n         }\n         auto parsed_redeemscript = ParseHex(strRedeemScript);\n-        import_data.redeemscript = MakeUnique<CScript>(parsed_redeemscript.begin(), parsed_redeemscript.end());\n+        import_data.redeemscript = std::make_unique<CScript>(parsed_redeemscript.begin(), parsed_redeemscript.end());\n     }\n     if (witness_script_hex.size()) {\n         if (!IsHex(witness_script_hex)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script \\\"\" + witness_script_hex + \"\\\": must be hex string\");\n         }\n         auto parsed_witnessscript = ParseHex(witness_script_hex);\n-        import_data.witnessscript = MakeUnique<CScript>(parsed_witnessscript.begin(), parsed_witnessscript.end());\n+        import_data.witnessscript = std::make_unique<CScript>(parsed_witnessscript.begin(), parsed_witnessscript.end());\n     }\n     for (size_t i = 0; i < pubKeys.size(); ++i) {\n         const auto& str = pubKeys[i].get_str();"
      },
      {
        "sha": "6d912be019424e986e1f54e07ab6826169fd8038",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -119,7 +119,7 @@ bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::v\n         return false;\n     }\n \n-    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n+    std::unique_ptr<Db> pdbCopy = std::make_unique<Db>(env->dbenv.get(), 0);\n     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name"
      },
      {
        "sha": "a8200981d883c0a30892256518e89bff3c5d2118",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -378,7 +378,7 @@ void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n         return;\n     }\n \n-    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(m_storage.GetDatabase());\n+    std::unique_ptr<WalletBatch> batch = std::make_unique<WalletBatch>(m_storage.GetDatabase());\n     for (auto& meta_pair : mapKeyMetadata) {\n         CKeyMetadata& meta = meta_pair.second;\n         if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n@@ -551,7 +551,7 @@ int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const\n \n std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSolvingProvider(const CScript& script) const\n {\n-    return MakeUnique<LegacySigningProvider>(*this);\n+    return std::make_unique<LegacySigningProvider>(*this);\n }\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n@@ -651,14 +651,14 @@ std::unique_ptr<CKeyMetadata> LegacyScriptPubKeyMan::GetMetadata(const CTxDestin\n     if (!key_id.IsNull()) {\n         auto it = mapKeyMetadata.find(key_id);\n         if (it != mapKeyMetadata.end()) {\n-            return MakeUnique<CKeyMetadata>(it->second);\n+            return std::make_unique<CKeyMetadata>(it->second);\n         }\n     }\n \n     CScript scriptPubKey = GetScriptForDestination(dest);\n     auto it = m_script_metadata.find(CScriptID(scriptPubKey));\n     if (it != m_script_metadata.end()) {\n-        return MakeUnique<CKeyMetadata>(it->second);\n+        return std::make_unique<CKeyMetadata>(it->second);\n     }\n \n     return nullptr;\n@@ -2026,7 +2026,7 @@ std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvid\n {\n     AssertLockHeld(cs_desc_man);\n     // Get the scripts, keys, and key origins for this script\n-    std::unique_ptr<FlatSigningProvider> out_keys = MakeUnique<FlatSigningProvider>();\n+    std::unique_ptr<FlatSigningProvider> out_keys = std::make_unique<FlatSigningProvider>();\n     std::vector<CScript> scripts_temp;\n     if (!m_wallet_descriptor.descriptor->ExpandFromCache(index, m_wallet_descriptor.cache, scripts_temp, *out_keys)) return nullptr;\n \n@@ -2051,7 +2051,7 @@ bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData&\n \n bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n {\n-    std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+    std::unique_ptr<FlatSigningProvider> keys = std::make_unique<FlatSigningProvider>();\n     for (const auto& coin_pair : coins) {\n         std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(coin_pair.second.out.scriptPubKey, true);\n         if (!coin_keys) {\n@@ -2115,13 +2115,13 @@ TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction&\n         SignatureData sigdata;\n         input.FillSignatureData(sigdata);\n \n-        std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+        std::unique_ptr<FlatSigningProvider> keys = std::make_unique<FlatSigningProvider>();\n         std::unique_ptr<FlatSigningProvider> script_keys = GetSigningProvider(script, sign);\n         if (script_keys) {\n             *keys = Merge(*keys, *script_keys);\n         } else {\n             // Maybe there are pubkeys listed that we can sign for\n-            script_keys = MakeUnique<FlatSigningProvider>();\n+            script_keys = std::make_unique<FlatSigningProvider>();\n             for (const auto& pk_pair : input.hd_keypaths) {\n                 const CPubKey& pubkey = pk_pair.first;\n                 std::unique_ptr<FlatSigningProvider> pk_keys = GetSigningProvider(pubkey);\n@@ -2162,7 +2162,7 @@ std::unique_ptr<CKeyMetadata> DescriptorScriptPubKeyMan::GetMetadata(const CTxDe\n         CKeyID key_id = GetKeyForDestination(*provider, dest);\n         if (provider->GetKeyOrigin(key_id, orig)) {\n             LOCK(cs_desc_man);\n-            std::unique_ptr<CKeyMetadata> meta = MakeUnique<CKeyMetadata>();\n+            std::unique_ptr<CKeyMetadata> meta = std::make_unique<CKeyMetadata>();\n             meta->key_origin = orig;\n             meta->has_key_origin = true;\n             meta->nCreateTime = m_wallet_descriptor.creation_time;"
      },
      {
        "sha": "975974cb6a261f1124479aa84cec5fe6939d8bba",
        "filename": "src/wallet/sqlite.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/sqlite.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/sqlite.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -8,7 +8,6 @@\n #include <crypto/common.h>\n #include <logging.h>\n #include <sync.h>\n-#include <util/memory.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/translation.h>\n@@ -330,7 +329,7 @@ void SQLiteDatabase::Close()\n std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(bool flush_on_close)\n {\n     // We ignore flush_on_close because we don't do manual flushing for SQLite\n-    return MakeUnique<SQLiteBatch>(*this);\n+    return std::make_unique<SQLiteBatch>(*this);\n }\n \n SQLiteBatch::SQLiteBatch(SQLiteDatabase& database)\n@@ -571,7 +570,7 @@ std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const D\n {\n     try {\n         fs::path data_file = SQLiteDataFile(path);\n-        auto db = MakeUnique<SQLiteDatabase>(data_file.parent_path(), data_file);\n+        auto db = std::make_unique<SQLiteDatabase>(data_file.parent_path(), data_file);\n         if (options.verify && !db->Verify(error)) {\n             status = DatabaseStatus::FAILED_VERIFY;\n             return nullptr;"
      },
      {
        "sha": "0e9f3819ebfd5a77359b11baca9d5985defe7f7a",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -290,7 +290,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     // Make sure that can use BnB when there are preset inputs\n     empty_wallet();\n     {\n-        std::unique_ptr<CWallet> wallet = MakeUnique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+        std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         wallet->SetupLegacyScriptPubKeyMan();"
      },
      {
        "sha": "4598999b3c358f3e364c6ad6e5f4233089980e0b",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -485,7 +485,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        wallet = MakeUnique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+        wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n         {\n             LOCK2(wallet->cs_wallet, ::cs_main);\n             wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());"
      },
      {
        "sha": "a5a454f9a8299802a388b3bee0ade6fc279c0c1b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -1086,15 +1086,15 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n /** Return object for accessing dummy database with no read/write capabilities. */\n std::unique_ptr<WalletDatabase> CreateDummyWalletDatabase()\n {\n-    return MakeUnique<DummyDatabase>();\n+    return std::make_unique<DummyDatabase>();\n }\n \n /** Return object for accessing temporary in-memory database. */\n std::unique_ptr<WalletDatabase> CreateMockWalletDatabase()\n {\n #ifdef USE_BDB\n-    return MakeUnique<BerkeleyDatabase>(std::make_shared<BerkeleyEnvironment>(), \"\");\n+    return std::make_unique<BerkeleyDatabase>(std::make_shared<BerkeleyEnvironment>(), \"\");\n #elif USE_SQLITE\n-    return MakeUnique<SQLiteDatabase>(\"\", \"\", true);\n+    return std::make_unique<SQLiteDatabase>(\"\", \"\", true);\n #endif\n }"
      },
      {
        "sha": "49c1c2a07d58cd0ec55d594165ad4c9e2709f463",
        "filename": "src/zmq/zmqabstractnotifier.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/zmq/zmqabstractnotifier.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba2840e7ee81341b0748c0121aedc2e9305041a/src/zmq/zmqabstractnotifier.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqabstractnotifier.h?ref=3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "patch": "@@ -5,7 +5,6 @@\n #ifndef BITCOIN_ZMQ_ZMQABSTRACTNOTIFIER_H\n #define BITCOIN_ZMQ_ZMQABSTRACTNOTIFIER_H\n \n-#include <util/memory.h>\n \n #include <memory>\n #include <string>\n@@ -27,7 +26,7 @@ class CZMQAbstractNotifier\n     template <typename T>\n     static std::unique_ptr<CZMQAbstractNotifier> Create()\n     {\n-        return MakeUnique<T>();\n+        return std::make_unique<T>();\n     }\n \n     std::string GetType() const { return type; }"
      }
    ]
  },
  {
    "sha": "1a6323bdbe20bdb7b1c907d8fa0333ffa88b21ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTYzMjNiZGJlMjBiZGI3YjFjOTA3ZDhmYTAzMzNmZmE4OGIyMWZm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-03-10T09:29:08Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-03-11T05:45:50Z"
      },
      "message": "doc: update developer notes for removal of MakeUnique",
      "tree": {
        "sha": "6fe5bb2f5cada3f43ad4e062a8b213142192b7da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fe5bb2f5cada3f43ad4e062a8b213142192b7da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a6323bdbe20bdb7b1c907d8fa0333ffa88b21ff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmBJro8ACgkQLuufXMCV\nJsH2kA//aMEN8w4HArKy8AiqKz9UBJ/wcHy3wIcIlLpP1z+2Upje8QZuH283dIO6\nC+dlA1Fcz50zsu7FZ/+SOADl5YKZYxaBONBmdOb+qLtd9Bh/fkMikDb5NwFD2uSw\nf6WlcQZZhCjteADdRUF1xJ3lWIq+dQnlY7FM8fVJYoAc37SROby8TPX1IgLaIOyI\n1DXq1rid6qcriKrE+i9LXULlYZFRknSI+rb1Ufn3+rfuFPZbSxDNirWNMkyCdT8H\nPGmG+nz8DdcIsy2pwfmhdzl98EjElFHxmZB53FSfpJHiSYgyY9YU8WW+nJocP2L7\nWAaRSXYfKtufsuzSUP45d1vEMCa9ADZNEuCuNU3CHlbA93YpiwwiKYM8O8emZ2bC\nv6lL9IP7zhB/Lz2G8utnXFMG0g0lNt0WBbOgarYtdaLeXO+6VVxrqMnumGTUKmht\nXCOkrmPgx3Q6HGYr31C7nfm9YLjkwj6tS0Xw8AthNr3HMTtAl6EUz0J16tNIuU3j\nKKOTrgTfDS3ODAzW/0cXxiWpjqyqm5Vh0ZOay8X+j/N4ktbl7/K2Nr8iBICwi38y\nCezColwglkdX83LBXC/Xd7+qdVJSsxpKDIKp9GorRoBCGLF771W7gEi3yZa7TkNL\nt3MzjpWg03ZVGtw5Rgtw0ZhdUyLhvu3QiFyXAsNQDfwwr+i13OQ=\n=UwYA\n-----END PGP SIGNATURE-----",
        "payload": "tree 6fe5bb2f5cada3f43ad4e062a8b213142192b7da\nparent 3ba2840e7ee81341b0748c0121aedc2e9305041a\nauthor fanquake <fanquake@gmail.com> 1615368548 +0800\ncommitter fanquake <fanquake@gmail.com> 1615441550 +0800\n\ndoc: update developer notes for removal of MakeUnique\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a6323bdbe20bdb7b1c907d8fa0333ffa88b21ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a6323bdbe20bdb7b1c907d8fa0333ffa88b21ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a6323bdbe20bdb7b1c907d8fa0333ffa88b21ff/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba2840e7ee81341b0748c0121aedc2e9305041a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ba2840e7ee81341b0748c0121aedc2e9305041a"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 0,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0a78cdff202464ecc37641916eb708594d9fbfd8",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a6323bdbe20bdb7b1c907d8fa0333ffa88b21ff/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a6323bdbe20bdb7b1c907d8fa0333ffa88b21ff/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=1a6323bdbe20bdb7b1c907d8fa0333ffa88b21ff",
        "patch": "@@ -595,11 +595,6 @@ Common misconceptions are clarified in those sections:\n \n   - *Rationale*: This avoids memory and resource leaks, and ensures exception safety.\n \n-- Use `MakeUnique()` to construct objects owned by `unique_ptr`s.\n-\n-  - *Rationale*: `MakeUnique` is concise and ensures exception safety in complex expressions.\n-    `MakeUnique` is a temporary project local implementation of `std::make_unique` (C++14).\n-\n C++ data structures\n --------------------\n "
      }
    ]
  }
]