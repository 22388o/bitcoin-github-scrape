[
  {
    "sha": "aa5e7c9471c50771bc77b0ec4e0e0929e4a32eae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTVlN2M5NDcxYzUwNzcxYmM3N2IwZWM0ZTBlMDkyOWU0YTMyZWFl",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-08-22T14:50:36Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-08-24T05:44:09Z"
      },
      "message": "Fix typo in bitcoin-cli.cpp",
      "tree": {
        "sha": "b0722621859541a87178702447eaa62e4b5b98ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0722621859541a87178702447eaa62e4b5b98ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa5e7c9471c50771bc77b0ec4e0e0929e4a32eae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa5e7c9471c50771bc77b0ec4e0e0929e4a32eae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa5e7c9471c50771bc77b0ec4e0e0929e4a32eae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa5e7c9471c50771bc77b0ec4e0e0929e4a32eae/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b20ad0eb16b9142a246a4f64c4c81ce89d51d7f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b20ad0eb16b9142a246a4f64c4c81ce89d51d7f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b20ad0eb16b9142a246a4f64c4c81ce89d51d7f4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "34785bf6a416d481131358bf85f5441a2eeedc37",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5e7c9471c50771bc77b0ec4e0e0929e4a32eae/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5e7c9471c50771bc77b0ec4e0e0929e4a32eae/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=aa5e7c9471c50771bc77b0ec4e0e0929e4a32eae",
        "patch": "@@ -885,7 +885,7 @@ static void GetWalletBalances(UniValue& result)\n }\n \n /**\n- * GetProgressBar contructs a progress bar with 5% intervals.\n+ * GetProgressBar constructs a progress bar with 5% intervals.\n  *\n  * @param[in]   progress      The proportion of the progress bar to be filled between 0 and 1.\n  * @param[out]  progress_bar  String representation of the progress bar."
      }
    ]
  },
  {
    "sha": "25de4e77feddf9b2f4d134bab5faa26c3e5a764d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWRlNGU3N2ZlZGRmOWIyZjRkMTM0YmFiNWZhYTI2YzNlNWE3NjRk",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-08-19T19:36:16Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-08-24T05:46:52Z"
      },
      "message": "Use `context.args` in `CWallet::Create` instead of `gArgs`.",
      "tree": {
        "sha": "c01b3031d783819e0d83344cb9843080017e5c59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c01b3031d783819e0d83344cb9843080017e5c59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25de4e77feddf9b2f4d134bab5faa26c3e5a764d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25de4e77feddf9b2f4d134bab5faa26c3e5a764d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25de4e77feddf9b2f4d134bab5faa26c3e5a764d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25de4e77feddf9b2f4d134bab5faa26c3e5a764d/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa5e7c9471c50771bc77b0ec4e0e0929e4a32eae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa5e7c9471c50771bc77b0ec4e0e0929e4a32eae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa5e7c9471c50771bc77b0ec4e0e0929e4a32eae"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 36,
      "deletions": 29
    },
    "files": [
      {
        "sha": "bc5498c88eae21900ee82a7ae1d4254bf02ae26d",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25de4e77feddf9b2f4d134bab5faa26c3e5a764d/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25de4e77feddf9b2f4d134bab5faa26c3e5a764d/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=25de4e77feddf9b2f4d134bab5faa26c3e5a764d",
        "patch": "@@ -200,6 +200,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n         wallet->SetupLegacyScriptPubKeyMan();\n         WITH_LOCK(wallet->cs_wallet, wallet->SetLastBlockProcessed(newTip->nHeight, newTip->GetBlockHash()));\n         WalletContext context;\n+        context.args = &gArgs;\n         AddWallet(context, wallet);\n         UniValue keys;\n         keys.setArray();\n@@ -260,6 +261,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n         WalletContext context;\n+        context.args = &gArgs;\n         std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n@@ -287,6 +289,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         wallet->SetupLegacyScriptPubKeyMan();\n \n         WalletContext context;\n+        context.args = &gArgs;\n         JSONRPCRequest request;\n         request.context = &context;\n         request.params.setArray();\n@@ -685,6 +688,7 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n     gArgs.ForceSetArg(\"-unsafesqlitesync\", \"1\");\n     // Create new wallet with known key and unload it.\n     WalletContext context;\n+    context.args = &gArgs;\n     context.chain = m_node.chain.get();\n     auto wallet = TestLoadWallet(context);\n     CKey key;\n@@ -781,6 +785,7 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n BOOST_FIXTURE_TEST_CASE(CreateWalletWithoutChain, BasicTestingSetup)\n {\n     WalletContext context;\n+    context.args = &gArgs;\n     auto wallet = TestLoadWallet(context);\n     BOOST_CHECK(wallet);\n     UnloadWallet(std::move(wallet));\n@@ -790,6 +795,7 @@ BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup)\n {\n     gArgs.ForceSetArg(\"-unsafesqlitesync\", \"1\");\n     WalletContext context;\n+    context.args = &gArgs;\n     context.chain = m_node.chain.get();\n     auto wallet = TestLoadWallet(context);\n     CKey key;"
      },
      {
        "sha": "68e577fe3303e9433905cb13cd381d0126fa1ff8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 29,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25de4e77feddf9b2f4d134bab5faa26c3e5a764d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25de4e77feddf9b2f4d134bab5faa26c3e5a764d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=25de4e77feddf9b2f4d134bab5faa26c3e5a764d",
        "patch": "@@ -2509,6 +2509,7 @@ std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, cons\n std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::string& name, std::unique_ptr<WalletDatabase> database, uint64_t wallet_creation_flags, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     interfaces::Chain* chain = context.chain;\n+    ArgsManager& args = *Assert(context.args);\n     const std::string& walletFile = database->Filename();\n \n     int64_t nStart = GetTimeMillis();\n@@ -2590,28 +2591,28 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n         }\n     }\n \n-    if (!gArgs.GetArg(\"-addresstype\", \"\").empty()) {\n-        std::optional<OutputType> parsed = ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"));\n+    if (!args.GetArg(\"-addresstype\", \"\").empty()) {\n+        std::optional<OutputType> parsed = ParseOutputType(args.GetArg(\"-addresstype\", \"\"));\n         if (!parsed) {\n-            error = strprintf(_(\"Unknown address type '%s'\"), gArgs.GetArg(\"-addresstype\", \"\"));\n+            error = strprintf(_(\"Unknown address type '%s'\"), args.GetArg(\"-addresstype\", \"\"));\n             return nullptr;\n         }\n         walletInstance->m_default_address_type = parsed.value();\n     }\n \n-    if (!gArgs.GetArg(\"-changetype\", \"\").empty()) {\n-        std::optional<OutputType> parsed = ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"));\n+    if (!args.GetArg(\"-changetype\", \"\").empty()) {\n+        std::optional<OutputType> parsed = ParseOutputType(args.GetArg(\"-changetype\", \"\"));\n         if (!parsed) {\n-            error = strprintf(_(\"Unknown change type '%s'\"), gArgs.GetArg(\"-changetype\", \"\"));\n+            error = strprintf(_(\"Unknown change type '%s'\"), args.GetArg(\"-changetype\", \"\"));\n             return nullptr;\n         }\n         walletInstance->m_default_change_type = parsed.value();\n     }\n \n-    if (gArgs.IsArgSet(\"-mintxfee\")) {\n-        std::optional<CAmount> min_tx_fee = ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"));\n+    if (args.IsArgSet(\"-mintxfee\")) {\n+        std::optional<CAmount> min_tx_fee = ParseMoney(args.GetArg(\"-mintxfee\", \"\"));\n         if (!min_tx_fee || min_tx_fee.value() == 0) {\n-            error = AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\"));\n+            error = AmountErrMsg(\"mintxfee\", args.GetArg(\"-mintxfee\", \"\"));\n             return nullptr;\n         } else if (min_tx_fee.value() > HIGH_TX_FEE_PER_KB) {\n             warnings.push_back(AmountHighWarn(\"-mintxfee\") + Untranslated(\" \") +\n@@ -2621,8 +2622,8 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n         walletInstance->m_min_fee = CFeeRate{min_tx_fee.value()};\n     }\n \n-    if (gArgs.IsArgSet(\"-maxapsfee\")) {\n-        const std::string max_aps_fee{gArgs.GetArg(\"-maxapsfee\", \"\")};\n+    if (args.IsArgSet(\"-maxapsfee\")) {\n+        const std::string max_aps_fee{args.GetArg(\"-maxapsfee\", \"\")};\n         if (max_aps_fee == \"-1\") {\n             walletInstance->m_max_aps_fee = -1;\n         } else if (std::optional<CAmount> max_fee = ParseMoney(max_aps_fee)) {\n@@ -2637,10 +2638,10 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n         }\n     }\n \n-    if (gArgs.IsArgSet(\"-fallbackfee\")) {\n-        std::optional<CAmount> fallback_fee = ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"));\n+    if (args.IsArgSet(\"-fallbackfee\")) {\n+        std::optional<CAmount> fallback_fee = ParseMoney(args.GetArg(\"-fallbackfee\", \"\"));\n         if (!fallback_fee) {\n-            error = strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\"));\n+            error = strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), args.GetArg(\"-fallbackfee\", \"\"));\n             return nullptr;\n         } else if (fallback_fee.value() > HIGH_TX_FEE_PER_KB) {\n             warnings.push_back(AmountHighWarn(\"-fallbackfee\") + Untranslated(\" \") +\n@@ -2652,10 +2653,10 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n     // Disable fallback fee in case value was set to 0, enable if non-null value\n     walletInstance->m_allow_fallback_fee = walletInstance->m_fallback_fee.GetFeePerK() != 0;\n \n-    if (gArgs.IsArgSet(\"-discardfee\")) {\n-        std::optional<CAmount> discard_fee = ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"));\n+    if (args.IsArgSet(\"-discardfee\")) {\n+        std::optional<CAmount> discard_fee = ParseMoney(args.GetArg(\"-discardfee\", \"\"));\n         if (!discard_fee) {\n-            error = strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\"));\n+            error = strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), args.GetArg(\"-discardfee\", \"\"));\n             return nullptr;\n         } else if (discard_fee.value() > HIGH_TX_FEE_PER_KB) {\n             warnings.push_back(AmountHighWarn(\"-discardfee\") + Untranslated(\" \") +\n@@ -2664,10 +2665,10 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n         walletInstance->m_discard_rate = CFeeRate{discard_fee.value()};\n     }\n \n-    if (gArgs.IsArgSet(\"-paytxfee\")) {\n-        std::optional<CAmount> pay_tx_fee = ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"));\n+    if (args.IsArgSet(\"-paytxfee\")) {\n+        std::optional<CAmount> pay_tx_fee = ParseMoney(args.GetArg(\"-paytxfee\", \"\"));\n         if (!pay_tx_fee) {\n-            error = AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\"));\n+            error = AmountErrMsg(\"paytxfee\", args.GetArg(\"-paytxfee\", \"\"));\n             return nullptr;\n         } else if (pay_tx_fee.value() > HIGH_TX_FEE_PER_KB) {\n             warnings.push_back(AmountHighWarn(\"-paytxfee\") + Untranslated(\" \") +\n@@ -2678,23 +2679,23 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n \n         if (chain && walletInstance->m_pay_tx_fee < chain->relayMinFee()) {\n             error = strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                gArgs.GetArg(\"-paytxfee\", \"\"), chain->relayMinFee().ToString());\n+                args.GetArg(\"-paytxfee\", \"\"), chain->relayMinFee().ToString());\n             return nullptr;\n         }\n     }\n \n-    if (gArgs.IsArgSet(\"-maxtxfee\")) {\n-        std::optional<CAmount> max_fee = ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"));\n+    if (args.IsArgSet(\"-maxtxfee\")) {\n+        std::optional<CAmount> max_fee = ParseMoney(args.GetArg(\"-maxtxfee\", \"\"));\n         if (!max_fee) {\n-            error = AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\"));\n+            error = AmountErrMsg(\"maxtxfee\", args.GetArg(\"-maxtxfee\", \"\"));\n             return nullptr;\n         } else if (max_fee.value() > HIGH_MAX_TX_FEE) {\n             warnings.push_back(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         }\n \n         if (chain && CFeeRate{max_fee.value(), 1000} < chain->relayMinFee()) {\n             error = strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                gArgs.GetArg(\"-maxtxfee\", \"\"), chain->relayMinFee().ToString());\n+                args.GetArg(\"-maxtxfee\", \"\"), chain->relayMinFee().ToString());\n             return nullptr;\n         }\n \n@@ -2706,9 +2707,9 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n                            _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n     }\n \n-    walletInstance->m_confirm_target = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    walletInstance->m_spend_zero_conf_change = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n-    walletInstance->m_signal_rbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n+    walletInstance->m_confirm_target = args.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n+    walletInstance->m_spend_zero_conf_change = args.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    walletInstance->m_signal_rbf = args.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n \n     walletInstance->WalletLogPrintf(\"Wallet completed loading in %15dms\\n\", GetTimeMillis() - nStart);\n \n@@ -2728,7 +2729,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n         }\n     }\n \n-    walletInstance->SetBroadcastTransactions(gArgs.GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n+    walletInstance->SetBroadcastTransactions(args.GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n \n     {\n         walletInstance->WalletLogPrintf(\"setKeyPool.size() = %u\\n\",      walletInstance->GetKeyPoolSize());"
      }
    ]
  },
  {
    "sha": "c3c213215b25f3e6f36d46b1d49dfcc3040cee1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2MyMTMyMTViMjVmM2U2ZjM2ZDQ2YjFkNDlkZmNjMzA0MGNlZTFj",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-08-25T14:08:51Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-08-25T14:08:51Z"
      },
      "message": "Use `context.args` in `src/wallet/load.cpp`.",
      "tree": {
        "sha": "630461856058338ae75ab6974ab0c6d3d0bfcc4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/630461856058338ae75ab6974ab0c6d3d0bfcc4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3c213215b25f3e6f36d46b1d49dfcc3040cee1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3c213215b25f3e6f36d46b1d49dfcc3040cee1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3c213215b25f3e6f36d46b1d49dfcc3040cee1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3c213215b25f3e6f36d46b1d49dfcc3040cee1c/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25de4e77feddf9b2f4d134bab5faa26c3e5a764d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25de4e77feddf9b2f4d134bab5faa26c3e5a764d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25de4e77feddf9b2f4d134bab5faa26c3e5a764d"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "85cdbb67c9a6c2aa098eb20291e244d38cb9d3fc",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3c213215b25f3e6f36d46b1d49dfcc3040cee1c/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3c213215b25f3e6f36d46b1d49dfcc3040cee1c/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=c3c213215b25f3e6f36d46b1d49dfcc3040cee1c",
        "patch": "@@ -8,6 +8,7 @@\n #include <fs.h>\n #include <interfaces/chain.h>\n #include <scheduler.h>\n+#include <util/check.h>\n #include <util/string.h>\n #include <util/system.h>\n #include <util/translation.h>\n@@ -20,8 +21,10 @@\n bool VerifyWallets(WalletContext& context)\n {\n     interfaces::Chain& chain = *context.chain;\n-    if (gArgs.IsArgSet(\"-walletdir\")) {\n-        fs::path wallet_dir = gArgs.GetArg(\"-walletdir\", \"\");\n+    ArgsManager& args = *Assert(context.args);\n+\n+    if (args.IsArgSet(\"-walletdir\")) {\n+        fs::path wallet_dir = args.GetArg(\"-walletdir\", \"\");\n         boost::system::error_code error;\n         // The canonical path cleans the path, preventing >1 Berkeley environment instances for the same directory\n         fs::path canonical_wallet_dir = fs::canonical(wallet_dir, error);\n@@ -36,7 +39,7 @@ bool VerifyWallets(WalletContext& context)\n             chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n             return false;\n         }\n-        gArgs.ForceSetArg(\"-walletdir\", canonical_wallet_dir.string());\n+        args.ForceSetArg(\"-walletdir\", canonical_wallet_dir.string());\n     }\n \n     LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n@@ -45,7 +48,7 @@ bool VerifyWallets(WalletContext& context)\n \n     // For backwards compatibility if an unnamed top level wallet exists in the\n     // wallets directory, include it in the default list of wallets to load.\n-    if (!gArgs.IsArgSet(\"wallet\")) {\n+    if (!args.IsArgSet(\"wallet\")) {\n         DatabaseOptions options;\n         DatabaseStatus status;\n         bilingual_str error_string;"
      }
    ]
  }
]