[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637210666",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-637210666",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 637210666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzIxMDY2Ng==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-02T01:16:45Z",
    "updated_at": "2020-12-17T05:44:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #16546 (External signer support - Wallet Box edition by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637210666/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637311651",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-637311651",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 637311651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzMxMTY1MQ==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-02T06:40:03Z",
    "updated_at": "2020-06-02T06:40:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637311651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640543096",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-640543096",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 640543096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDU0MzA5Ng==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-08T11:24:06Z",
    "updated_at": "2020-06-08T11:24:06Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. Can you add a sanity check to the test? E.g. a `getaddressinfo` call.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640543096/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647727895",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-647727895",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 647727895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzcyNzg5NQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-22T19:29:37Z",
    "updated_at": "2020-06-22T19:29:37Z",
    "author_association": "MEMBER",
    "body": "> Maybe there should be a checksum at the end of the file to detect corruption.\r\n\r\nI'm not sure if that's really useful or practical. We are writing to the wallet file as we read the records so a checksum wouldn't be able to be computed until all records have been read and written to the file, at which point it's too late for a checksum to be useful.\r\n\r\n> Maybe there should be a magic string or version number at the beginning in case we want to extend the format in the future and prevent current parsing function from trying to read it\r\n\r\nI've added a line at the beginning to identify the file with the magic string `BITCOIN_CORE_WALLET_DUMP` and a version number.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647727895/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656274176",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-656274176",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 656274176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjI3NDE3Ng==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-09T18:09:36Z",
    "updated_at": "2020-07-09T18:09:36Z",
    "author_association": "MEMBER",
    "body": "Not sure about the path issue. I just use our fs module to try to get the absolute path.\r\n\r\nAlso updated the OP.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656274176/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684090845",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-684090845",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 684090845,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDA5MDg0NQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T23:14:23Z",
    "updated_at": "2020-08-31T23:14:23Z",
    "author_association": "MEMBER",
    "body": "> I wonder if we should include a warning either in the output or in the dumpfile itself that the file should not be shared.\r\n\r\nI suppose we should. I would prefer to just output it on stdout rather than put it in the file.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684090845/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684101944",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-684101944",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 684101944,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDEwMTk0NA==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T23:33:24Z",
    "updated_at": "2020-08-31T23:33:24Z",
    "author_association": "MEMBER",
    "body": "@achow101 that sounds fine. Can you quickly add that in before I merge please.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684101944/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684105921",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-684105921",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 684105921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDEwNTkyMQ==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T23:46:56Z",
    "updated_at": "2020-08-31T23:46:56Z",
    "author_association": "MEMBER",
    "body": "@promag do you have a proposed use-case for piping a wallet dump? That seems a little dangerous to me.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684105921/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684106734",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-684106734",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 684106734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDEwNjczNA==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-31T23:49:49Z",
    "updated_at": "2020-08-31T23:49:49Z",
    "author_association": "MEMBER",
    "body": "Compress or encrypt or grep \ud83d\ude49 ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684106734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684111211",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-684111211",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 684111211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDExMTIxMQ==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T00:04:41Z",
    "updated_at": "2020-09-01T00:04:41Z",
    "author_association": "MEMBER",
    "body": "I think it should be left for a followup but in that case I think it should be done in a way that you have to explicitly choose to pass to stdout. I think many users may accidentally type \"dump\" without realizing they need to configure -dumpfile, and have their whole wallet just dumped to their terminal.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684111211/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684112844",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-684112844",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 684112844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDExMjg0NA==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T00:09:33Z",
    "updated_at": "2020-09-01T00:09:33Z",
    "author_association": "MEMBER",
    "body": "Yeah that's fine, like `-dumpfile -` or something.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684112844/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684158119",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-684158119",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 684158119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDE1ODExOQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T02:38:38Z",
    "updated_at": "2020-09-01T02:38:38Z",
    "author_association": "MEMBER",
    "body": "Added the warning and a checksum to the dumpfile.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684158119/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684761162",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-684761162",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 684761162,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDc2MTE2Mg==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T10:44:39Z",
    "updated_at": "2020-09-01T10:44:39Z",
    "author_association": "MEMBER",
    "body": "Re-utACK 7e845b87c18719274c1db3c9d04fbf99407716c0",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684761162/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684818114",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-684818114",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 684818114,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDgxODExNA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T12:31:55Z",
    "updated_at": "2020-09-01T12:44:27Z",
    "author_association": "MEMBER",
    "body": "Spurious Travis failure reported in #19853 and intentionally not restarted.\r\n\r\nAlso:\r\n```\r\nwallet/wallettool.cpp:134:33: warning: loop variable 'warning' of type 'const bilingual_str' creates a copy from type 'const bilingual_str' [-Wrange-loop-analysis]\r\n                for (const auto warning : warnings) {\r\n                                ^\r\nwallet/wallettool.cpp:134:22: note: use reference type 'const bilingual_str &' to prevent copying\r\n                for (const auto warning : warnings) {\r\n                     ^~~~~~~~~~~~~~~~~~~~\r\n1 warning generated.\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684818114/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684973008",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-684973008",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 684973008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDk3MzAwOA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T16:15:53Z",
    "updated_at": "2020-09-01T16:15:53Z",
    "author_association": "MEMBER",
    "body": "@sjors I don't think that was caused by this PR.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684973008/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686156813",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-686156813",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 686156813,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjE1NjgxMw==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-03T00:26:39Z",
    "updated_at": "2020-09-03T00:26:39Z",
    "author_association": "MEMBER",
    "body": "I wonder if the content should have the dump timestamp, at the end like `timestamp,...`?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686156813/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686585184",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-686585184",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 686585184,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjU4NTE4NA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-03T15:51:38Z",
    "updated_at": "2020-09-03T15:51:38Z",
    "author_association": "MEMBER",
    "body": "> I wonder if the content should have the dump timestamp, at the end like `timestamp,...`?\r\n\r\nI don't think that's necessary. The file itself will have a creation timestamp and I think that's good enough.\r\n\r\nIf we do want this, we can add it later. Records can be added after the checksum and `createfromdump` will ignore them.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686585184/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/709620942",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-709620942",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 709620942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwOTYyMDk0Mg==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-15T22:22:32Z",
    "updated_at": "2020-10-15T22:22:32Z",
    "author_association": "MEMBER",
    "body": "This will need to have a format option to specify bdb or sqlite. I'll work on that next week.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/709620942/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/709928840",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-709928840",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 709928840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwOTkyODg0MA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-16T09:14:25Z",
    "updated_at": "2020-10-16T09:14:25Z",
    "author_association": "MEMBER",
    "body": "Great, I'll try migrating some BDB descriptor wallets to Sqlite once that's ready.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/709928840/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/711371247",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-711371247",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 711371247,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMTM3MTI0Nw==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-18T18:49:23Z",
    "updated_at": "2020-10-18T18:49:23Z",
    "author_association": "MEMBER",
    "body": "Updated with a `-format` option added to `createfromdump`",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/711371247/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/713689400",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-713689400",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 713689400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzY4OTQwMA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-21T16:12:34Z",
    "updated_at": "2020-10-21T16:12:34Z",
    "author_association": "MEMBER",
    "body": "> Apparently this fails to dump/restore the wallet unique id.\r\n\r\nThe wallet id is not something we are actually using and supporting. It is a byproduct of BDB. Instead of forcing this wallet logic and database type agnostic tool to have to understand BDB, we should make the wallet id actually supported with #20205. I'm not adding BDB id stuff to this PR, it's out of scope and a layer violation.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/713689400/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/714891534",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-714891534",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 714891534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNDg5MTUzNA==",
    "user": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-23T03:49:17Z",
    "updated_at": "2020-10-23T03:49:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Code review ACK 225cfa9f0c44798ab42c27d161670c5ee74902a3\r\nCI failure seems unrelated",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/714891534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/716477601",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-716477601",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 716477601,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNjQ3NzYwMQ==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-26T11:07:40Z",
    "updated_at": "2020-10-26T11:07:40Z",
    "author_association": "MEMBER",
    "body": "tACK eff678b",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/716477601/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/721294197",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-721294197",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 721294197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMTI5NDE5Nw==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-03T18:12:31Z",
    "updated_at": "2020-11-03T18:12:31Z",
    "author_association": "MEMBER",
    "body": "Rebased and updated the tests.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/721294197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/730679352",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-730679352",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 730679352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMDY3OTM1Mg==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-19T22:33:56Z",
    "updated_at": "2020-11-19T22:33:56Z",
    "author_association": "MEMBER",
    "body": "Any reason to disallow dumping to stdout and creating from stdin?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/730679352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/743258945",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-743258945",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 743258945,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MzI1ODk0NQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-11T15:26:38Z",
    "updated_at": "2020-12-11T15:26:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is a somewhat complicated change but it only affects wallet tool and has had ACKs at different points from me https://github.com/bitcoin/bitcoin/pull/19137#pullrequestreview-543253329, Sjors https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-716477601, Ivan https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-714891534, promag https://github.com/bitcoin/bitcoin/pull/19137#pullrequestreview-483101258, meshcollider https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-684761162 and some review suggestions implemented from Luke https://github.com/bitcoin/bitcoin/pull/19137#discussion_r526240887.\r\n\r\nIt seems about ready for merge to me. Does it need more reviewers or reacks?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/743258945/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745252814",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-745252814",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 745252814,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTI1MjgxNA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-15T12:18:40Z",
    "updated_at": "2020-12-15T12:18:40Z",
    "author_association": "MEMBER",
    "body": "re-tACK 19b2f4d\r\n\r\nMore appropriate use of stdout and stderr would be nice, but can wait for a followup.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745252814/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745437684",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-745437684",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 745437684,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTQzNzY4NA==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-15T17:18:24Z",
    "updated_at": "2020-12-15T17:18:24Z",
    "author_association": "MEMBER",
    "body": "NACK until this can handle dumping/restoring the wallet id. (Or alternatively simply refuse to dump/restore BDB wallets until this is fixed)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745437684/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745497062",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-745497062",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 745497062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTQ5NzA2Mg==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-15T18:58:09Z",
    "updated_at": "2020-12-15T18:58:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "> NACK until this can handle dumping/restoring the wallet id. (Or alternatively simply refuse to dump/restore BDB wallets until this is fixed)\r\n\r\nWhat are the negative consequences of merging the PR without this feature? The [only place wallet ids are used](https://github.com/bitcoin/bitcoin/blob/8bb40d5f56c8e46f12786da0b6444cdde3b6f7c8/src/wallet/bdb.cpp#L356-L359) is to forbid opening an older type of wallet that we don't create anymore to avoid runtime data corruption (#11429). This isn't relevant to dump/createfromdump because createfromdump doesn't create the type of wallet that would have this corruption (a BDB wallet sharing an BDB environment with another wallet that has the same fileid), and even if it did you'd think choosing a new id would actually be more helpful than choosing a duplicate id.\r\n\r\nI know there are future PRs and maybe forks that envision using unique ids for new purposes, but if this PR causes a problem for them, I think a substantive NACK would explain specifically how the problem arises and what the consequences are.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745497062/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745515785",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-745515785",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 745515785,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTUxNTc4NQ==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-15T19:30:18Z",
    "updated_at": "2020-12-15T19:30:18Z",
    "author_association": "MEMBER",
    "body": ">What are the negative consequences of merging the PR without this feature?\r\n\r\nA user might think they've created an identical clone of a wallet that is in fact different.\r\n\r\n>an older type of wallet that we don't create anymore\r\n\r\nInteresting, I didn't realise the dedicated db environments fixed that. But ultimately not relevant.\r\n\r\n> I know there are future PRs and maybe forks that envision using unique ids for new purposes, but if this PR causes a problem for them, I think a substantive NACK would explain specifically how the problem arises and what the consequences are.\r\n\r\nAnything that uses wallet ids (eg, pruning locks that persist even when the wallet is unloaded, across renames/moves/etc) would treat these \"clones\" as independent/unrelated wallets.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745515785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745540605",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-745540605",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 745540605,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTU0MDYwNQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-15T20:14:47Z",
    "updated_at": "2020-12-15T20:26:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > What are the negative consequences of merging the PR without this feature?\r\n> \r\n> A user might think they've created an identical clone of a wallet that is in fact different.\r\n\r\nAs I explained, we don't have any code that treats these wallets as different. So the NACK above is based on other code which isn't part of the software and hasn't been described in any detail, which makes it not seem very substantive. If there is a legitimate objection, it should be possible to describe a scenario where createfromdump interacts badly with prunelocks or another feature in some other code where not merging this PR somehow makes things better.\r\n\r\n(For prunelocks, it would seem like the safest thing would be to treat different wallet files as different and not automatically delete locks, but you would be the expert there so please fill me in!)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745540605/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745804532",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-745804532",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 745804532,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTgwNDUzMg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-16T06:49:29Z",
    "updated_at": "2020-12-16T06:49:29Z",
    "author_association": "MEMBER",
    "body": "It is already possible with RPCs to create an \"identical clone of a wallet that is in fact different\", so I think the NACK describes something unrelated to this pull and should thus be filed as an issue.\r\n\r\nEven if the NACK applied to this pull, instead of wholesale rejecting it, a simple documentation fixup can be applied to document the shortcomings and dangers, if there are any.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745804532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746001910",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-746001910",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 746001910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NjAwMTkxMA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-16T09:46:22Z",
    "updated_at": "2020-12-16T09:46:22Z",
    "author_association": "MEMBER",
    "body": "> More appropriate use of stdout and stderr would be nice, but can wait for a followup.\r\n\r\nSorry, this has been removed based on my feedback, because I missed that all strings written are hex-encoded (or ascii). See https://github.com/bitcoin/bitcoin/pull/19137#discussion_r443120133",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746001910/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746002518",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-746002518",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 746002518,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NjAwMjUxOA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-16T09:46:51Z",
    "updated_at": "2020-12-16T09:46:51Z",
    "author_association": "MEMBER",
    "body": "@achow101 Let me know if you want this merged or want to address the style nits",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746002518/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746658980",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-746658980",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 746658980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NjY1ODk4MA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-16T17:13:49Z",
    "updated_at": "2020-12-16T17:13:49Z",
    "author_association": "MEMBER",
    "body": "Seeing as this now needs rebase, I guess I'll address the style nits.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746658980/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747409722",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-747409722",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 747409722,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzQwOTcyMg==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-17T12:27:33Z",
    "updated_at": "2020-12-17T12:33:14Z",
    "author_association": "MEMBER",
    "body": "In my experience treating wallets created from a dump as unique is a feature, not a bug. By definition the dump no longer gets updated, while the original does. And when you load from a dump, any rescan has to start where the dump left off, rather than whenever you closed the original wallet. In fact I like to keep both Sqlite and BDB versions around, and open, while testing these features (though that's not a common use case).\r\n\r\nA followup could add an option to reuse the same wallet id.\r\n\r\nre-utACK 23cac24",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747409722/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747412246",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#issuecomment-747412246",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19137",
    "id": 747412246,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzQxMjI0Ng==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-17T12:33:02Z",
    "updated_at": "2020-12-17T12:33:02Z",
    "author_association": "MEMBER",
    "body": "re review ACK 23cac24dd3f2aaf88aab978e7ef4905772815cd2 only change is rebase and removing useless shared_ptr wrapper \ud83c\udfbc\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nre review ACK 23cac24dd3f2aaf88aab978e7ef4905772815cd2 only change is rebase and removing useless shared_ptr wrapper \ud83c\udfbc\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjHkwv/YsYYRt14UrM5EcbCKReDDt9Ul4OE3P6iwjGU7ztOmfpT4yvDVwxvs6N4\r\nx2YVIkLx7tCJSZagdgg3aJY5P4g7GLzFRtR4Gpz6iLRD3Q4BXvKgRlYqpbWfVY0Z\r\nFypJn0duhvB6GT6YlduyaZlqzepPmDo9RNMxsZJ0DsU9dSwP498LfDnpPPxI4Cu2\r\nZ7XGrNRRPPRlBPpD88ZNCC3NxAfjcmpecbfv3aAKwUuWdw7H1ksNiDZeYXuBtw9I\r\n9XdwJhzzVxyj+8uhwqTljUVBIp+kDnhCqZCZeaEVNx66aG/2YdkBinY3D5Z+rpSd\r\ndB6b22W2S3TnbUrjCiz/bF7NxaZxbsGms3hXG332+VKSQR+/6PSVh33VGK7woHDM\r\nTQ/cwmw7xCHeVVtwhsbpUFiAzSh+Hen89jsXNM0PlB8n1rhO2T/DufYFeQyNskhi\r\nWjglPPQTcugCpRZo/TLYEuZ1WrcrtzaATNI+ROpcDCsA16WaSKG5XLO/4QwhLUsF\r\nrcaeEhD0\r\n=Do37\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `82f548fd46541ccebb08bdfe077afdd42eda0b903148cceba0f7b365cebec1ab  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010882f548fd46541ccebb08bdfe077afdd42eda0b903148cceba0f7b365cebec1abf01097204261420549d81a1ba64a723f5c1b08fff0102005acb45201b9cbdf358595063b8a0008f0204db9ea1d46f74672c55f46664a71c8d2a24e0f0374f869395852e330522070ef08f1045fdb4ff1f00847c98eae014ca9f10083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff0103d4a28dae7fe3335941252098b9ea7de08f020aad417580f89f07d3317038ff7143252df45bbf6df739daad38f60d2b70b3ed608f1045fdb4ff0f008ac0a626f49be08a20083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010838a7ea3479451be743c922fa27e321508f02024c53517479b0fc0fd040ade91501c76b4ca77ddcc312c7c5606dd0a3112b12a08f1045fdb4ff0f008f6bdefa20f4f93330083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6df010e204d7d7db8fe728f3544b7f20740b3e08f12002b60d9927e27228e9941c2b86acd76347e7d91bbfc567ccf261f669623b36d908f1045fdb4ff0f0085e18e9a90290cf280083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747412246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442510191",
    "pull_request_review_id": 433656956,
    "id": 442510191,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxMDE5MQ==",
    "diff_hunk": "@@ -183,6 +183,79 @@ static bool DumpWallet(std::shared_ptr<CWallet> wallet)\n     return ret;\n }\n \n+static bool CreateFromDump(const std::string& name, const fs::path& wallet_path)",
    "path": "src/wallet/wallettool.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "7ea3df8ccd13096088538fb4602208eae0831c13",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"wallettool: Add createfromdump command\" (7ea3df8ccd13096088538fb4602208eae0831c13)\r\n\r\nWould suggest moving this to src/wallet/dump.cpp similar to src/wallet/salvage.cpp so the dump /load functionality be accessed other places outside the wallet tool, like by RPCs, the GUI, and c++ unit tests. Way arguments passed and errors are returned might have to change a little, though",
    "created_at": "2020-06-18T21:22:48Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r442510191",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442510191"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r442510191"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442510191/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 186,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442574059",
    "pull_request_review_id": 433734927,
    "id": 442574059,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3NDA1OQ==",
    "diff_hunk": "@@ -183,6 +183,79 @@ static bool DumpWallet(std::shared_ptr<CWallet> wallet)\n     return ret;\n }\n \n+static bool CreateFromDump(const std::string& name, const fs::path& wallet_path)",
    "path": "src/wallet/wallettool.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "7ea3df8ccd13096088538fb4602208eae0831c13",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've moved it to a new file.",
    "created_at": "2020-06-19T00:46:50Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r442574059",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442574059"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r442574059"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442574059/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 186,
    "side": "RIGHT",
    "in_reply_to_id": 442510191
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443120133",
    "pull_request_review_id": 434419042,
    "id": 443120133,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyMDEzMw==",
    "diff_hunk": "@@ -26,12 +26,15 @@ static void SetupWalletToolArgs()\n \n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file instead of printing to stdout. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);",
    "path": "src/bitcoin-wallet.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "348be8dafe6642ff2084f8ebfd3471b7c4ed7508",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is there any reason to support stdout?\r\n\r\nI'd find it easier to force this setting for both settings and it would simplify reasoning about arbitrary code execution. IIRC in bash simply catting a file can execute arbitrary commands.",
    "created_at": "2020-06-20T10:27:10Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r443120133",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443120133"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r443120133"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443120133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 29,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443777592",
    "pull_request_review_id": 435211281,
    "id": 443777592,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc3NzU5Mg==",
    "diff_hunk": "@@ -26,12 +26,15 @@ static void SetupWalletToolArgs()\n \n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file instead of printing to stdout. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);",
    "path": "src/bitcoin-wallet.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "348be8dafe6642ff2084f8ebfd3471b7c4ed7508",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Removed the output to stdout.",
    "created_at": "2020-06-22T19:27:23Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r443777592",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443777592"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r443777592"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443777592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 29,
    "side": "RIGHT",
    "in_reply_to_id": 443120133
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447154380",
    "pull_request_review_id": 439379277,
    "id": 447154380,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1NDM4MA==",
    "diff_hunk": "@@ -211,6 +211,56 @@ def test_salvage(self):\n \n         self.assert_tool_output('', '-wallet=salvage', 'salvage')\n \n+    def test_dump_createfromdump(self):\n+        self.start_node(0, ['-wallet=todump', '-wallet=todump2'])\n+        self.stop_node(0)\n+\n+        self.log.info('Checking dump arguments')\n+        self.assert_raises_tool_error('No dump file provided. To use dump, -dumpfile=<filename> must be provided.', '-wallet=todump', 'dump');",
    "path": "test/functional/tool_wallet.py",
    "position": null,
    "original_position": 9,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "abd8925e047112971f3df0cdda0868acca2e29e6",
    "user": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Remove `;` at end of line.",
    "created_at": "2020-06-29T18:02:14Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r447154380",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447154380"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r447154380"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447154380/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 219,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447155606",
    "pull_request_review_id": 439379277,
    "id": 447155606,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1NTYwNg==",
    "diff_hunk": "@@ -211,6 +211,56 @@ def test_salvage(self):\n \n         self.assert_tool_output('', '-wallet=salvage', 'salvage')\n \n+    def test_dump_createfromdump(self):\n+        self.start_node(0, ['-wallet=todump', '-wallet=todump2'])\n+        self.stop_node(0)\n+\n+        self.log.info('Checking dump arguments')\n+        self.assert_raises_tool_error('No dump file provided. To use dump, -dumpfile=<filename> must be provided.', '-wallet=todump', 'dump');\n+\n+        self.log.info('Checking basic dump')\n+        wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet.dump\")\n+        self.assert_tool_output('', '-wallet=todump', '-dumpfile={}'.format(wallet_dump), 'dump')\n+\n+        with open(wallet_dump, 'r') as f:",
    "path": "test/functional/tool_wallet.py",
    "position": null,
    "original_position": 15,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "abd8925e047112971f3df0cdda0868acca2e29e6",
    "user": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is getting caught in lint-python-utf8-encoding for not specifying `encoding=\"utf8\"`.\r\n```suggestion\r\n        with open(wallet_dump, 'r', encoding=\"utf8\") as f:\r\n```\r\n\r\nSame with the other `with open`s below (lines 244, 250, 255, and 260).",
    "created_at": "2020-06-29T18:04:28Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r447155606",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447155606"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r447155606"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447155606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 225,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447166733",
    "pull_request_review_id": 439394340,
    "id": 447166733,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2NjczMw==",
    "diff_hunk": "@@ -93,53 +93,66 @@ std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, s\n /** Return wheter a BDB wallet database is currently loaded. */",
    "path": "src/wallet/bdb.h",
    "position": null,
    "original_position": 1,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "abd8925e047112971f3df0cdda0868acca2e29e6",
    "user": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "not your line but, s/wheter/whether/ if you have to touch-up",
    "created_at": "2020-06-29T18:24:52Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r447166733",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447166733"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r447166733"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447166733/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 93,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447249011",
    "pull_request_review_id": 439494256,
    "id": 447249011,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0OTAxMQ==",
    "diff_hunk": "@@ -211,6 +211,56 @@ def test_salvage(self):\n \n         self.assert_tool_output('', '-wallet=salvage', 'salvage')\n \n+    def test_dump_createfromdump(self):\n+        self.start_node(0, ['-wallet=todump', '-wallet=todump2'])\n+        self.stop_node(0)\n+\n+        self.log.info('Checking dump arguments')\n+        self.assert_raises_tool_error('No dump file provided. To use dump, -dumpfile=<filename> must be provided.', '-wallet=todump', 'dump');",
    "path": "test/functional/tool_wallet.py",
    "position": null,
    "original_position": 9,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "abd8925e047112971f3df0cdda0868acca2e29e6",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-06-29T20:56:38Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r447249011",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447249011"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r447249011"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447249011/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 219,
    "side": "RIGHT",
    "in_reply_to_id": 447154380
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447249073",
    "pull_request_review_id": 439494344,
    "id": 447249073,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0OTA3Mw==",
    "diff_hunk": "@@ -211,6 +211,56 @@ def test_salvage(self):\n \n         self.assert_tool_output('', '-wallet=salvage', 'salvage')\n \n+    def test_dump_createfromdump(self):\n+        self.start_node(0, ['-wallet=todump', '-wallet=todump2'])\n+        self.stop_node(0)\n+\n+        self.log.info('Checking dump arguments')\n+        self.assert_raises_tool_error('No dump file provided. To use dump, -dumpfile=<filename> must be provided.', '-wallet=todump', 'dump');\n+\n+        self.log.info('Checking basic dump')\n+        wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet.dump\")\n+        self.assert_tool_output('', '-wallet=todump', '-dumpfile={}'.format(wallet_dump), 'dump')\n+\n+        with open(wallet_dump, 'r') as f:",
    "path": "test/functional/tool_wallet.py",
    "position": null,
    "original_position": 15,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "abd8925e047112971f3df0cdda0868acca2e29e6",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed",
    "created_at": "2020-06-29T20:56:46Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r447249073",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447249073"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r447249073"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447249073/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 225,
    "side": "RIGHT",
    "in_reply_to_id": 447155606
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447249331",
    "pull_request_review_id": 439494708,
    "id": 447249331,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0OTMzMQ==",
    "diff_hunk": "@@ -93,53 +93,66 @@ std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, s\n /** Return wheter a BDB wallet database is currently loaded. */",
    "path": "src/wallet/bdb.h",
    "position": null,
    "original_position": 1,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "abd8925e047112971f3df0cdda0868acca2e29e6",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think that'd be better to fix in one of the prerequisite PRs or a followup to this whole PR stack.",
    "created_at": "2020-06-29T20:57:20Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r447249331",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447249331"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r447249331"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/447249331/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 93,
    "side": "RIGHT",
    "in_reply_to_id": 447166733
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452388016",
    "pull_request_review_id": 445837897,
    "id": 452388016,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4ODAxNg==",
    "diff_hunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/translation.h>\n+#include <wallet/wallet.h>\n+\n+static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use dump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path path = dump_filename;\n+    path = fs::absolute(path);\n+    if (fs::exists(path)) {\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        return false;\n+    }\n+    fsbridge::ofstream dump_file;\n+    dump_file.open(path);\n+\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+\n+    bool ret = true;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Couldn't create cursor into database\");\n+        ret = false;\n+    }\n+\n+    // Write out a magic string with version\n+    tfm::format(dump_file, \"%s,1\\n\", DUMP_MAGIC);\n+\n+    if (ret) {\n+        // Read the records\n+        while (true) {\n+            CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+            CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+            bool complete;\n+            bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+            if (complete) {\n+                break;\n+            } else if (!ret) {\n+                error = _(\"Error reading next record from wallet database\");\n+                ret = false;",
    "path": "src/wallet/dump.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "4d7d60a710f38a7bd2d9b8fb5da92186f2ad64ee",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "4d7d60a710f38a7bd2d9b8fb5da92186f2ad64ee: `ret` is already `false`",
    "created_at": "2020-07-09T17:47:22Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r452388016",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452388016"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r452388016"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452388016/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 51,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452399561",
    "pull_request_review_id": 445852958,
    "id": 452399561,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5OTU2MQ==",
    "diff_hunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/translation.h>\n+#include <wallet/wallet.h>\n+\n+static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use dump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path path = dump_filename;\n+    path = fs::absolute(path);\n+    if (fs::exists(path)) {\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        return false;\n+    }\n+    fsbridge::ofstream dump_file;\n+    dump_file.open(path);\n+\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+\n+    bool ret = true;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Couldn't create cursor into database\");\n+        ret = false;\n+    }\n+\n+    // Write out a magic string with version\n+    tfm::format(dump_file, \"%s,1\\n\", DUMP_MAGIC);\n+\n+    if (ret) {\n+        // Read the records\n+        while (true) {\n+            CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+            CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+            bool complete;\n+            bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+            if (complete) {\n+                break;\n+            } else if (!ret) {\n+                error = _(\"Error reading next record from wallet database\");\n+                ret = false;",
    "path": "src/wallet/dump.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "4d7d60a710f38a7bd2d9b8fb5da92186f2ad64ee",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hmm. That should be a break. Fixed.",
    "created_at": "2020-07-09T18:08:54Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r452399561",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452399561"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r452399561"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452399561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 51,
    "side": "RIGHT",
    "in_reply_to_id": 452388016
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480299273",
    "pull_request_review_id": 478830735,
    "id": 480299273,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5OTI3Mw==",
    "diff_hunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/translation.h>\n+#include <wallet/wallet.h>\n+\n+static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use dump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path path = dump_filename;\n+    path = fs::absolute(path);\n+    if (fs::exists(path)) {\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        return false;\n+    }\n+    fsbridge::ofstream dump_file;\n+    dump_file.open(path);\n+\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+\n+    bool ret = true;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Couldn't create cursor into database\");\n+        ret = false;\n+    }\n+\n+    // Write out a magic string with version\n+    tfm::format(dump_file, \"%s,1\\n\", DUMP_MAGIC);",
    "path": "src/wallet/dump.cpp",
    "position": null,
    "original_position": 38,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "4e631d278abec3801ddf245450cb8b362d4d2607",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: `DUMP_VERSION`",
    "created_at": "2020-08-31T18:08:38Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r480299273",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480299273"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r480299273"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480299273/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 38,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480632428",
    "pull_request_review_id": 479361570,
    "id": 480632428,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDYzMjQyOA==",
    "diff_hunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/translation.h>\n+#include <wallet/wallet.h>\n+\n+static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use dump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path path = dump_filename;\n+    path = fs::absolute(path);\n+    if (fs::exists(path)) {\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        return false;\n+    }\n+    fsbridge::ofstream dump_file;\n+    dump_file.open(path);\n+\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+\n+    bool ret = true;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Couldn't create cursor into database\");\n+        ret = false;\n+    }\n+\n+    // Write out a magic string with version\n+    tfm::format(dump_file, \"%s,1\\n\", DUMP_MAGIC);",
    "path": "src/wallet/dump.cpp",
    "position": null,
    "original_position": 38,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "4e631d278abec3801ddf245450cb8b362d4d2607",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-09-01T02:38:26Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r480632428",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480632428"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r480632428"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480632428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 38,
    "side": "RIGHT",
    "in_reply_to_id": 480299273
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482009780",
    "pull_request_review_id": 480742588,
    "id": 482009780,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAwOTc4MA==",
    "diff_hunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/translation.h>\n+#include <wallet/wallet.h>\n+\n+static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n+uint32_t DUMP_VERSION = 1;\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use dump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path path = dump_filename;\n+    path = fs::absolute(path);\n+    if (fs::exists(path)) {\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        return false;\n+    }\n+    fsbridge::ofstream dump_file;\n+    dump_file.open(path);",
    "path": "src/wallet/dump.cpp",
    "position": 29,
    "original_position": 27,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "b9cb50ed299c55cf03093654e0af8dc98edf6d60",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could check if open is successful and add corresponding test.",
    "created_at": "2020-09-02T11:52:09Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r482009780",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482009780"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r482009780"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482009780/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 29,
    "original_line": 29,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482228428",
    "pull_request_review_id": 481029049,
    "id": 482228428,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyODQyOA==",
    "diff_hunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/translation.h>\n+#include <wallet/wallet.h>\n+\n+static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n+uint32_t DUMP_VERSION = 1;\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use dump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path path = dump_filename;\n+    path = fs::absolute(path);\n+    if (fs::exists(path)) {\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        return false;\n+    }\n+    fsbridge::ofstream dump_file;\n+    dump_file.open(path);",
    "path": "src/wallet/dump.cpp",
    "position": 29,
    "original_position": 27,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "b9cb50ed299c55cf03093654e0af8dc98edf6d60",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Not sure how that would be tested. The `open` occurs after file existence has been checked for, so the only thing it would error on is some system thing.",
    "created_at": "2020-09-02T17:07:30Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r482228428",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482228428"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r482228428"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482228428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 29,
    "original_line": 29,
    "side": "RIGHT",
    "in_reply_to_id": 482009780
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482243457",
    "pull_request_review_id": 481044114,
    "id": 482243457,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0MzQ1Nw==",
    "diff_hunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/translation.h>\n+#include <wallet/wallet.h>\n+\n+static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n+uint32_t DUMP_VERSION = 1;\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use dump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path path = dump_filename;\n+    path = fs::absolute(path);\n+    if (fs::exists(path)) {\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        return false;\n+    }\n+    fsbridge::ofstream dump_file;\n+    dump_file.open(path);",
    "path": "src/wallet/dump.cpp",
    "position": 29,
    "original_position": 27,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "b9cb50ed299c55cf03093654e0af8dc98edf6d60",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added a check that `open` doesn't fail.",
    "created_at": "2020-09-02T17:27:35Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r482243457",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482243457"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r482243457"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482243457/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 29,
    "original_line": 29,
    "side": "RIGHT",
    "in_reply_to_id": 482009780
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482266130",
    "pull_request_review_id": 481125569,
    "id": 482266130,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NjEzMA==",
    "diff_hunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/translation.h>\n+#include <wallet/wallet.h>\n+\n+static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n+uint32_t DUMP_VERSION = 1;\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use dump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path path = dump_filename;\n+    path = fs::absolute(path);\n+    if (fs::exists(path)) {\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        return false;\n+    }\n+    fsbridge::ofstream dump_file;\n+    dump_file.open(path);",
    "path": "src/wallet/dump.cpp",
    "position": 29,
    "original_position": 27,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "b9cb50ed299c55cf03093654e0af8dc98edf6d60",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You can test by creating a directory and removing write access, then try to create the dump there.",
    "created_at": "2020-09-02T18:06:49Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r482266130",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482266130"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r482266130"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482266130/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 29,
    "original_line": 29,
    "side": "RIGHT",
    "in_reply_to_id": 482009780
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482614513",
    "pull_request_review_id": 481398822,
    "id": 482614513,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxNDUxMw==",
    "diff_hunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/translation.h>\n+#include <wallet/wallet.h>\n+\n+static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n+uint32_t DUMP_VERSION = 1;\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use dump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path path = dump_filename;\n+    path = fs::absolute(path);\n+    if (fs::exists(path)) {\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        return false;\n+    }\n+    fsbridge::ofstream dump_file;\n+    dump_file.open(path);",
    "path": "src/wallet/dump.cpp",
    "position": 29,
    "original_position": 27,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "b9cb50ed299c55cf03093654e0af8dc98edf6d60",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Like\r\n```py\r\nself.assert_raises_tool_error('Unable to open /root/cant_write for writing', '-wallet=todump', '-dumpfile=/root/cant_write', 'dump')\r\n```",
    "created_at": "2020-09-03T00:24:09Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r482614513",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482614513"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r482614513"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482614513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 29,
    "original_line": 29,
    "side": "RIGHT",
    "in_reply_to_id": 482009780
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509792246",
    "pull_request_review_id": 514259089,
    "id": 509792246,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5MjI0Ng==",
    "diff_hunk": "@@ -212,6 +212,92 @@ def test_salvage(self):\n \n         self.assert_tool_output('', '-wallet=salvage', 'salvage')\n \n+    def test_dump_createfromdump(self):\n+        self.start_node(0, ['-wallet=todump', '-wallet=todump2'])\n+        self.stop_node(0)\n+\n+        self.log.info('Checking dump arguments')\n+        self.assert_raises_tool_error('No dump file provided. To use dump, -dumpfile=<filename> must be provided.', '-wallet=todump', 'dump')\n+\n+        self.log.info('Checking basic dump')\n+        wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet.dump\")\n+        self.assert_tool_output('The dumpfile may contain private keys. To ensure the safety of your Bitcoin, do not share the dumpfile.\\n', '-wallet=todump', '-dumpfile={}'.format(wallet_dump), 'dump')\n+\n+        with open(wallet_dump, 'r', encoding='utf8') as f:\n+            dump_data = f.read()\n+        # Check the dump magic\n+        assert dump_data.startswith('BITCOIN_CORE_WALLET_DUMP,1')\n+\n+        self.log.info('Checking that a dumpfile cannot be overwritten')\n+        self.assert_raises_tool_error('File {} already exists. If you are sure this is what you want, move it out of the way first.'.format(wallet_dump),  '-wallet=todump2', '-dumpfile={}'.format(wallet_dump), 'dump')\n+\n+        self.log.info('Checking createfromdump arguments')\n+        self.assert_raises_tool_error('No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.', '-wallet=todump', 'createfromdump')\n+        non_exist_dump = os.path.join(self.nodes[0].datadir, \"wallet.nodump\")\n+        self.assert_raises_tool_error('No wallet file format provided. To use createfromdump, -format=<format> must be provided.', '-wallet=todump', '-dumpfile={}'.format(non_exist_dump), 'createfromdump')\n+        self.assert_raises_tool_error('Unknown wallet file format \"notaformat\" provided. Please provide one of \"bdb\" or \"sqlite\".', '-wallet=todump', '-format=notaformat', '-dumpfile={}'.format(non_exist_dump), 'createfromdump')\n+        self.assert_raises_tool_error('Dump file {} does not exist.'.format(non_exist_dump), '-wallet=todump', '-format=bdb', '-dumpfile={}'.format(non_exist_dump), 'createfromdump')\n+        wallet_path = os.path.join(self.nodes[0].datadir, 'regtest/wallets/todump2')\n+        self.assert_raises_tool_error('Error: Wallet File {} exists already'.format(wallet_path), '-wallet=todump2', '-format=bdb', '-dumpfile={}'.format(wallet_dump), 'createfromdump')\n+\n+        self.log.info('Checking createfromdump')\n+        self.assert_tool_output('', '-wallet=load', '-format=bdb', '-dumpfile={}'.format(wallet_dump), 'createfromdump')\n+        wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-rt.dump\")\n+        self.assert_tool_output('The dumpfile may contain private keys. To ensure the safety of your Bitcoin, do not share the dumpfile.\\n', '-wallet=load', '-dumpfile={}'.format(wallet_dump), 'dump')\n+        with open(wallet_dump, 'r', encoding='utf8') as f:\n+            assert_equal(dump_data, f.read())\n+        orig_dump = dump_data\n+        wallet_dat = os.path.join(self.nodes[0].datadir, \"regtest/wallets/load\", \"wallet.dat\")\n+        with open(wallet_dat, 'rb') as f:\n+            f.seek(12, 0)\n+            file_magic = f.read(4)\n+            assert file_magic == b'\\x00\\x05\\x31\\x62' or file_magic == b'\\x62\\x31\\x05\\x00'\n+        self.assert_tool_output('', '-wallet=load-sqlite', '-format=sqlite', '-dumpfile={}'.format(wallet_dump), 'createfromdump')\n+        wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-rt-sqlite.dump\")\n+        self.assert_tool_output('The dumpfile may contain private keys. To ensure the safety of your Bitcoin, do not share the dumpfile.\\n', '-wallet=load-sqlite', '-dumpfile={}'.format(wallet_dump), 'dump')\n+        with open(wallet_dump, 'r', encoding='utf8') as f:\n+            assert_equal(dump_data, f.read())\n+        wallet_dat = os.path.join(self.nodes[0].datadir, \"regtest/wallets/load-sqlite\", \"wallet.dat\")\n+        with open(wallet_dat, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert file_magic == b'SQLite format 3\\x00'\n+\n+        self.log.info('Checking createfromdump handling of magic and versions')\n+        bad_ver_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_ver1.dump\")\n+        dump_data = 'BITCOIN_CORE_WALLET_DUMP,0\\n' + dump_data[27:] # Change the version number\n+        with open(bad_ver_wallet_dump, 'w+', encoding='utf8') as f:\n+            f.write(dump_data)\n+        self.assert_raises_tool_error('Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version 0', '-wallet=load1', '-format=bdb', '-dumpfile={}'.format(bad_ver_wallet_dump), 'createfromdump')\n+        bad_ver_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_ver2.dump\")\n+        dump_data = 'BITCOIN_CORE_WALLET_DUMP,2\\n' + dump_data[27:] # Change the version number\n+        with open(bad_ver_wallet_dump, 'w+', encoding='utf8') as f:\n+            f.write(dump_data)\n+        self.assert_raises_tool_error('Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version 2', '-wallet=load2', '-format=bdb', '-dumpfile={}'.format(bad_ver_wallet_dump), 'createfromdump')\n+        bad_magic_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_magic.dump\")\n+        dump_data = 'not_the_right_magic,1\\n' + dump_data[27:]\n+        with open(bad_magic_wallet_dump, 'w+', encoding='utf8') as f:\n+            f.write(dump_data)\n+        self.assert_raises_tool_error('Error: Dumpfile identifier record is incorrect. Got \"not_the_right_magic\", expected \"BITCOIN_CORE_WALLET_DUMP\".', '-wallet=load3', '-format=bdb', '-dumpfile={}'.format(bad_magic_wallet_dump), 'createfromdump')\n+\n+        self.log.info('Checking createfromdump handling of checksums')\n+        bad_sum_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_sum1.dump\")\n+        checksum = dump_data[-65:-1]\n+        dump_data = orig_dump[:-65] + \"1\" * 64 + \"\\n\"\n+        with open(bad_sum_wallet_dump, 'w+', encoding='utf8') as f:\n+            f.write(dump_data)\n+        self.assert_raises_tool_error('Error: Dumpfile checksum does not match. Computed {}, expected {}'.format(checksum, \"1\" * 64), '-wallet=load4', '-format=bdb', '-dumpfile={}'.format(bad_sum_wallet_dump), 'createfromdump')\n+        bad_sum_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_sum2.dump\")\n+        dump_data = orig_dump[:-75]\n+        with open(bad_sum_wallet_dump, 'w+', encoding='utf8') as f:\n+            f.write(dump_data)\n+        self.assert_raises_tool_error('Error: Missing checksum', '-wallet=load5', '-format=bdb', '-dumpfile={}'.format(bad_sum_wallet_dump), 'createfromdump')\n+        bad_sum_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_sum3.dump\")\n+        dump_data = orig_dump[:-65] + \"2\" * 10\n+        with open(bad_sum_wallet_dump, 'w+', encoding='utf8') as f:\n+            f.write(dump_data)\n+        self.assert_raises_tool_error('Error: Dumpfile checksum does not match. Computed {}, expected {}{}'.format(checksum, \"2\" * 10, \"0\" * 54), '-wallet=load6', '-format=bdb', '-dumpfile={}'.format(bad_sum_wallet_dump), 'createfromdump')",
    "path": "test/functional/tool_wallet.py",
    "position": null,
    "original_position": 87,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "35442fa568583c0da2c687966e49b3742f403870",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"tests: Test bitcoin-wallet dump and createfromdump\" (35442fa568583c0da2c687966e49b3742f403870)\r\n\r\nLooking at the `CreateFromDump` implementation it seems like the wallet will be created but empty if there is a checksum error or other import error. It would be good if there was a check at this point to verify if the created wallets are loadable if they are supposed to be loadable or not loadable if they are not supposed be loadable.\r\n\r\n",
    "created_at": "2020-10-21T23:27:23Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509792246",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509792246"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509792246"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509792246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 298,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509792748",
    "pull_request_review_id": 514259089,
    "id": 509792748,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5Mjc0OA==",
    "diff_hunk": "@@ -78,3 +78,167 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n     wallet->Close();\n     return ret;\n }\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");\n+        return false;\n+    }\n+    DatabaseFormat data_format;\n+    if (file_format == \"bdb\") {\n+        data_format = DatabaseFormat::BERKELEY;\n+    } else if (file_format == \"sqlite\") {\n+        data_format = DatabaseFormat::SQLITE;\n+    } else {\n+        error = strprintf(_(\"Unknown wallet file format \\\"%s\\\" provided. Please provide one of \\\"bdb\\\" or \\\"sqlite\\\".\"), file_format);\n+        return false;\n+    }\n+\n+    fs::path dump_path = dump_filename;\n+    dump_path = fs::absolute(dump_path);\n+    if (!fs::exists(dump_path)) {\n+        error = strprintf(_(\"Dump file %s does not exist.\"), dump_path.string());\n+        return false;\n+    }\n+    fsbridge::ifstream dump_file(dump_path);\n+\n+    if (fs::exists(wallet_path)) {\n+        error = strprintf(_(\"Error: Wallet File %s exists already\"), wallet_path.string());\n+        return false;\n+    }\n+\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    options.require_create = true;\n+    options.require_format = data_format;\n+    std::unique_ptr<WalletDatabase> database = MakeDatabase(wallet_path, options, status, error);\n+    if (!database) return false;\n+\n+    // dummy chain interface\n+    std::shared_ptr<CWallet> wallet(new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet);\n+    LOCK(wallet->cs_wallet);\n+    bool first_run = true;\n+    DBErrors load_wallet_ret = wallet->LoadWallet(first_run);\n+    if (load_wallet_ret != DBErrors::LOAD_OK) {\n+        error = strprintf(_(\"Error creating %s\"), name);\n+        return false;\n+    }\n+\n+    // Get the database handle\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+    batch->TxnBegin();\n+\n+    // Compute the checksum\n+    CHashWriter hasher(0, 0);\n+    uint256 checksum;\n+\n+    // Read the records from the dump file and write them to the database\n+    bool ret = true;\n+    bool first = true;\n+    while (dump_file.good()) {\n+        std::string key;\n+        std::getline(dump_file, key, ',');\n+        std::string value;\n+        std::getline(dump_file, value, '\\n');\n+\n+        if (key == \"checksum\") {\n+            std::vector<unsigned char> parsed_checksum = ParseHex(value);\n+            std::copy(parsed_checksum.begin(), parsed_checksum.end(), checksum.begin());\n+            break;\n+        }\n+\n+        std::string line = strprintf(\"%s,%s\\n\", key, value);\n+        hasher.write(line.data(), line.size());\n+\n+        if (key.empty() || value.empty()) {\n+            continue;\n+        }\n+\n+        // Check magic for first record\n+        if (first) {\n+            if (key != DUMP_MAGIC) {\n+                error = strprintf(_(\"Error: Dumpfile identifier record is incorrect. Got \\\"%s\\\", expected \\\"%s\\\".\"), key, DUMP_MAGIC);\n+                ret = false;\n+                break;\n+            }\n+            // Check the version number (value of first record)\n+            uint32_t ver;\n+            if (!ParseUInt32(value, &ver)) {\n+                error =strprintf(_(\"Error: Unable to parse version %u as a uint32_t\"), value);\n+                ret = false;\n+                break;\n+            }\n+            if (ver != DUMP_VERSION) {\n+                error = strprintf(_(\"Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version %s\"), value);\n+                ret = false;\n+                break;\n+            }\n+            first = false;\n+            continue;\n+        }\n+\n+        if (!IsHex(key)) {\n+            error = strprintf(_(\"Error: Got key that was not hex: %s\"), key);\n+            ret = false;\n+            break;\n+        }\n+        if (!IsHex(value)) {\n+            error = strprintf(_(\"Error: Got value that was not hex: %s\"), value);\n+            ret = false;\n+            break;\n+        }\n+\n+        std::vector<unsigned char> k = ParseHex(key);\n+        std::vector<unsigned char> v = ParseHex(value);\n+\n+        CDataStream ss_key(k, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(v, SER_DISK, CLIENT_VERSION);\n+\n+        batch->Write(ss_key, ss_value);",
    "path": "src/wallet/dump.cpp",
    "position": null,
    "original_position": 141,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "6137750082dd28bf38bbb2922d6d040d4e854643",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"wallettool: Add createfromdump command\" (6137750082dd28bf38bbb2922d6d040d4e854643)\r\n\r\n`ret` should be set to false if the Write call fails",
    "created_at": "2020-10-21T23:28:58Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509792748",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509792748"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509792748"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509792748/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 218,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509794068",
    "pull_request_review_id": 514259089,
    "id": 509794068,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NDA2OA==",
    "diff_hunk": "@@ -78,3 +78,167 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n     wallet->Close();\n     return ret;\n }\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");\n+        return false;\n+    }\n+    DatabaseFormat data_format;\n+    if (file_format == \"bdb\") {\n+        data_format = DatabaseFormat::BERKELEY;\n+    } else if (file_format == \"sqlite\") {\n+        data_format = DatabaseFormat::SQLITE;\n+    } else {\n+        error = strprintf(_(\"Unknown wallet file format \\\"%s\\\" provided. Please provide one of \\\"bdb\\\" or \\\"sqlite\\\".\"), file_format);\n+        return false;\n+    }\n+\n+    fs::path dump_path = dump_filename;\n+    dump_path = fs::absolute(dump_path);\n+    if (!fs::exists(dump_path)) {\n+        error = strprintf(_(\"Dump file %s does not exist.\"), dump_path.string());\n+        return false;\n+    }\n+    fsbridge::ifstream dump_file(dump_path);\n+\n+    if (fs::exists(wallet_path)) {\n+        error = strprintf(_(\"Error: Wallet File %s exists already\"), wallet_path.string());\n+        return false;\n+    }\n+\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    options.require_create = true;\n+    options.require_format = data_format;\n+    std::unique_ptr<WalletDatabase> database = MakeDatabase(wallet_path, options, status, error);\n+    if (!database) return false;\n+\n+    // dummy chain interface\n+    std::shared_ptr<CWallet> wallet(new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet);\n+    LOCK(wallet->cs_wallet);\n+    bool first_run = true;\n+    DBErrors load_wallet_ret = wallet->LoadWallet(first_run);\n+    if (load_wallet_ret != DBErrors::LOAD_OK) {\n+        error = strprintf(_(\"Error creating %s\"), name);\n+        return false;\n+    }\n+\n+    // Get the database handle\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+    batch->TxnBegin();\n+\n+    // Compute the checksum\n+    CHashWriter hasher(0, 0);\n+    uint256 checksum;\n+\n+    // Read the records from the dump file and write them to the database\n+    bool ret = true;\n+    bool first = true;\n+    while (dump_file.good()) {\n+        std::string key;\n+        std::getline(dump_file, key, ',');\n+        std::string value;\n+        std::getline(dump_file, value, '\\n');\n+\n+        if (key == \"checksum\") {\n+            std::vector<unsigned char> parsed_checksum = ParseHex(value);\n+            std::copy(parsed_checksum.begin(), parsed_checksum.end(), checksum.begin());\n+            break;\n+        }\n+\n+        std::string line = strprintf(\"%s,%s\\n\", key, value);\n+        hasher.write(line.data(), line.size());\n+\n+        if (key.empty() || value.empty()) {\n+            continue;\n+        }\n+\n+        // Check magic for first record\n+        if (first) {\n+            if (key != DUMP_MAGIC) {\n+                error = strprintf(_(\"Error: Dumpfile identifier record is incorrect. Got \\\"%s\\\", expected \\\"%s\\\".\"), key, DUMP_MAGIC);\n+                ret = false;\n+                break;\n+            }\n+            // Check the version number (value of first record)\n+            uint32_t ver;\n+            if (!ParseUInt32(value, &ver)) {\n+                error =strprintf(_(\"Error: Unable to parse version %u as a uint32_t\"), value);\n+                ret = false;\n+                break;\n+            }\n+            if (ver != DUMP_VERSION) {\n+                error = strprintf(_(\"Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version %s\"), value);\n+                ret = false;\n+                break;\n+            }\n+            first = false;\n+            continue;\n+        }\n+\n+        if (!IsHex(key)) {\n+            error = strprintf(_(\"Error: Got key that was not hex: %s\"), key);\n+            ret = false;\n+            break;\n+        }\n+        if (!IsHex(value)) {\n+            error = strprintf(_(\"Error: Got value that was not hex: %s\"), value);\n+            ret = false;\n+            break;\n+        }\n+\n+        std::vector<unsigned char> k = ParseHex(key);\n+        std::vector<unsigned char> v = ParseHex(value);\n+\n+        CDataStream ss_key(k, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(v, SER_DISK, CLIENT_VERSION);\n+\n+        batch->Write(ss_key, ss_value);\n+    }\n+\n+    if (ret) {\n+        uint256 comp_checksum = hasher.GetHash();\n+        if (checksum.IsNull()) {\n+            error = _(\"Error: Missing checksum\");\n+            ret = false;\n+        } else if (checksum != comp_checksum) {\n+            error = strprintf(_(\"Error: Dumpfile checksum does not match. Computed %s, expected %s\"), HexStr(comp_checksum), HexStr(checksum));\n+            ret = false;\n+        }\n+    }\n+\n+    if (ret) {\n+        batch->TxnCommit();\n+    } else {\n+        batch->TxnAbort();",
    "path": "src/wallet/dump.cpp",
    "position": null,
    "original_position": 158,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "6137750082dd28bf38bbb2922d6d040d4e854643",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"wallettool: Add createfromdump command\" (6137750082dd28bf38bbb2922d6d040d4e854643)\r\n\r\nIdeally, it would probably be preferable to delete the half created wallet than to just leave it behind. \r\n\r\nI think you could add `if (!ret) wallet->Delete()` after `Wallet->Close()` below with Delete method implementations that just delete the main datafile after the database is closed.",
    "created_at": "2020-10-21T23:33:22Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509794068",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509794068"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509794068"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509794068/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 243,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509797552",
    "pull_request_review_id": 514265298,
    "id": 509797552,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NzU1Mg==",
    "diff_hunk": "@@ -78,3 +78,167 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n     wallet->Close();\n     return ret;\n }\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");\n+        return false;\n+    }\n+    DatabaseFormat data_format;\n+    if (file_format == \"bdb\") {\n+        data_format = DatabaseFormat::BERKELEY;\n+    } else if (file_format == \"sqlite\") {\n+        data_format = DatabaseFormat::SQLITE;\n+    } else {\n+        error = strprintf(_(\"Unknown wallet file format \\\"%s\\\" provided. Please provide one of \\\"bdb\\\" or \\\"sqlite\\\".\"), file_format);\n+        return false;\n+    }\n+\n+    fs::path dump_path = dump_filename;\n+    dump_path = fs::absolute(dump_path);\n+    if (!fs::exists(dump_path)) {\n+        error = strprintf(_(\"Dump file %s does not exist.\"), dump_path.string());\n+        return false;\n+    }\n+    fsbridge::ifstream dump_file(dump_path);\n+\n+    if (fs::exists(wallet_path)) {\n+        error = strprintf(_(\"Error: Wallet File %s exists already\"), wallet_path.string());\n+        return false;\n+    }\n+\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    options.require_create = true;\n+    options.require_format = data_format;\n+    std::unique_ptr<WalletDatabase> database = MakeDatabase(wallet_path, options, status, error);\n+    if (!database) return false;\n+\n+    // dummy chain interface\n+    std::shared_ptr<CWallet> wallet(new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet);\n+    LOCK(wallet->cs_wallet);\n+    bool first_run = true;\n+    DBErrors load_wallet_ret = wallet->LoadWallet(first_run);\n+    if (load_wallet_ret != DBErrors::LOAD_OK) {\n+        error = strprintf(_(\"Error creating %s\"), name);\n+        return false;\n+    }\n+\n+    // Get the database handle\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+    batch->TxnBegin();\n+\n+    // Compute the checksum\n+    CHashWriter hasher(0, 0);\n+    uint256 checksum;\n+\n+    // Read the records from the dump file and write them to the database\n+    bool ret = true;\n+    bool first = true;\n+    while (dump_file.good()) {\n+        std::string key;\n+        std::getline(dump_file, key, ',');\n+        std::string value;\n+        std::getline(dump_file, value, '\\n');\n+\n+        if (key == \"checksum\") {\n+            std::vector<unsigned char> parsed_checksum = ParseHex(value);\n+            std::copy(parsed_checksum.begin(), parsed_checksum.end(), checksum.begin());\n+            break;\n+        }\n+\n+        std::string line = strprintf(\"%s,%s\\n\", key, value);\n+        hasher.write(line.data(), line.size());\n+\n+        if (key.empty() || value.empty()) {\n+            continue;\n+        }\n+\n+        // Check magic for first record\n+        if (first) {\n+            if (key != DUMP_MAGIC) {\n+                error = strprintf(_(\"Error: Dumpfile identifier record is incorrect. Got \\\"%s\\\", expected \\\"%s\\\".\"), key, DUMP_MAGIC);\n+                ret = false;\n+                break;\n+            }\n+            // Check the version number (value of first record)\n+            uint32_t ver;\n+            if (!ParseUInt32(value, &ver)) {\n+                error =strprintf(_(\"Error: Unable to parse version %u as a uint32_t\"), value);\n+                ret = false;\n+                break;\n+            }\n+            if (ver != DUMP_VERSION) {\n+                error = strprintf(_(\"Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version %s\"), value);\n+                ret = false;\n+                break;\n+            }\n+            first = false;\n+            continue;\n+        }\n+\n+        if (!IsHex(key)) {\n+            error = strprintf(_(\"Error: Got key that was not hex: %s\"), key);\n+            ret = false;\n+            break;\n+        }\n+        if (!IsHex(value)) {\n+            error = strprintf(_(\"Error: Got value that was not hex: %s\"), value);\n+            ret = false;\n+            break;\n+        }\n+\n+        std::vector<unsigned char> k = ParseHex(key);\n+        std::vector<unsigned char> v = ParseHex(value);\n+\n+        CDataStream ss_key(k, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(v, SER_DISK, CLIENT_VERSION);\n+\n+        batch->Write(ss_key, ss_value);\n+    }\n+\n+    if (ret) {\n+        uint256 comp_checksum = hasher.GetHash();\n+        if (checksum.IsNull()) {\n+            error = _(\"Error: Missing checksum\");\n+            ret = false;\n+        } else if (checksum != comp_checksum) {\n+            error = strprintf(_(\"Error: Dumpfile checksum does not match. Computed %s, expected %s\"), HexStr(comp_checksum), HexStr(checksum));\n+            ret = false;\n+        }\n+    }\n+\n+    if (ret) {\n+        batch->TxnCommit();\n+    } else {\n+        batch->TxnAbort();",
    "path": "src/wallet/dump.cpp",
    "position": null,
    "original_position": 158,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "6137750082dd28bf38bbb2922d6d040d4e854643",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It would be preferable to do that but deleting things was non-trivial enough that I didn't want to spend the effort to figure it out.",
    "created_at": "2020-10-21T23:45:08Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509797552",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509797552"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509797552"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509797552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 243,
    "side": "RIGHT",
    "in_reply_to_id": 509794068
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509803825",
    "pull_request_review_id": 514272411,
    "id": 509803825,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwMzgyNQ==",
    "diff_hunk": "@@ -78,3 +78,167 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n     wallet->Close();\n     return ret;\n }\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");\n+        return false;\n+    }\n+    DatabaseFormat data_format;\n+    if (file_format == \"bdb\") {\n+        data_format = DatabaseFormat::BERKELEY;\n+    } else if (file_format == \"sqlite\") {\n+        data_format = DatabaseFormat::SQLITE;\n+    } else {\n+        error = strprintf(_(\"Unknown wallet file format \\\"%s\\\" provided. Please provide one of \\\"bdb\\\" or \\\"sqlite\\\".\"), file_format);\n+        return false;\n+    }\n+\n+    fs::path dump_path = dump_filename;\n+    dump_path = fs::absolute(dump_path);\n+    if (!fs::exists(dump_path)) {\n+        error = strprintf(_(\"Dump file %s does not exist.\"), dump_path.string());\n+        return false;\n+    }\n+    fsbridge::ifstream dump_file(dump_path);\n+\n+    if (fs::exists(wallet_path)) {\n+        error = strprintf(_(\"Error: Wallet File %s exists already\"), wallet_path.string());\n+        return false;\n+    }\n+\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    options.require_create = true;\n+    options.require_format = data_format;\n+    std::unique_ptr<WalletDatabase> database = MakeDatabase(wallet_path, options, status, error);\n+    if (!database) return false;\n+\n+    // dummy chain interface\n+    std::shared_ptr<CWallet> wallet(new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet);\n+    LOCK(wallet->cs_wallet);\n+    bool first_run = true;\n+    DBErrors load_wallet_ret = wallet->LoadWallet(first_run);\n+    if (load_wallet_ret != DBErrors::LOAD_OK) {\n+        error = strprintf(_(\"Error creating %s\"), name);\n+        return false;\n+    }\n+\n+    // Get the database handle\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+    batch->TxnBegin();\n+\n+    // Compute the checksum\n+    CHashWriter hasher(0, 0);\n+    uint256 checksum;\n+\n+    // Read the records from the dump file and write them to the database\n+    bool ret = true;\n+    bool first = true;\n+    while (dump_file.good()) {\n+        std::string key;\n+        std::getline(dump_file, key, ',');\n+        std::string value;\n+        std::getline(dump_file, value, '\\n');\n+\n+        if (key == \"checksum\") {\n+            std::vector<unsigned char> parsed_checksum = ParseHex(value);\n+            std::copy(parsed_checksum.begin(), parsed_checksum.end(), checksum.begin());\n+            break;\n+        }\n+\n+        std::string line = strprintf(\"%s,%s\\n\", key, value);\n+        hasher.write(line.data(), line.size());\n+\n+        if (key.empty() || value.empty()) {\n+            continue;\n+        }\n+\n+        // Check magic for first record\n+        if (first) {\n+            if (key != DUMP_MAGIC) {\n+                error = strprintf(_(\"Error: Dumpfile identifier record is incorrect. Got \\\"%s\\\", expected \\\"%s\\\".\"), key, DUMP_MAGIC);\n+                ret = false;\n+                break;\n+            }\n+            // Check the version number (value of first record)\n+            uint32_t ver;\n+            if (!ParseUInt32(value, &ver)) {\n+                error =strprintf(_(\"Error: Unable to parse version %u as a uint32_t\"), value);\n+                ret = false;\n+                break;\n+            }\n+            if (ver != DUMP_VERSION) {\n+                error = strprintf(_(\"Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version %s\"), value);\n+                ret = false;\n+                break;\n+            }\n+            first = false;\n+            continue;\n+        }\n+\n+        if (!IsHex(key)) {\n+            error = strprintf(_(\"Error: Got key that was not hex: %s\"), key);\n+            ret = false;\n+            break;\n+        }\n+        if (!IsHex(value)) {\n+            error = strprintf(_(\"Error: Got value that was not hex: %s\"), value);\n+            ret = false;\n+            break;\n+        }\n+\n+        std::vector<unsigned char> k = ParseHex(key);\n+        std::vector<unsigned char> v = ParseHex(value);\n+\n+        CDataStream ss_key(k, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(v, SER_DISK, CLIENT_VERSION);\n+\n+        batch->Write(ss_key, ss_value);\n+    }\n+\n+    if (ret) {\n+        uint256 comp_checksum = hasher.GetHash();\n+        if (checksum.IsNull()) {\n+            error = _(\"Error: Missing checksum\");\n+            ret = false;\n+        } else if (checksum != comp_checksum) {\n+            error = strprintf(_(\"Error: Dumpfile checksum does not match. Computed %s, expected %s\"), HexStr(comp_checksum), HexStr(checksum));\n+            ret = false;\n+        }\n+    }\n+\n+    if (ret) {\n+        batch->TxnCommit();\n+    } else {\n+        batch->TxnAbort();",
    "path": "src/wallet/dump.cpp",
    "position": null,
    "original_position": 158,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "6137750082dd28bf38bbb2922d6d040d4e854643",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> It would be preferable to do that but deleting things was non-trivial enough that I didn't want to spend the effort to figure it out.\r\n\r\nSure. I don't know, but I'd expect a simple implementation like the following to be adequate and safe:\r\n\r\n```c++\r\nassert(!m_db);\r\nfs::remove(m_file_path);\r\nfs::remove(m_dir_path);\r\n```",
    "created_at": "2020-10-22T00:05:49Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509803825",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509803825"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509803825"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509803825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 243,
    "side": "RIGHT",
    "in_reply_to_id": 509794068
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509854140",
    "pull_request_review_id": 514329903,
    "id": 509854140,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1NDE0MA==",
    "diff_hunk": "@@ -212,6 +212,92 @@ def test_salvage(self):\n \n         self.assert_tool_output('', '-wallet=salvage', 'salvage')\n \n+    def test_dump_createfromdump(self):\n+        self.start_node(0, ['-wallet=todump', '-wallet=todump2'])\n+        self.stop_node(0)\n+\n+        self.log.info('Checking dump arguments')\n+        self.assert_raises_tool_error('No dump file provided. To use dump, -dumpfile=<filename> must be provided.', '-wallet=todump', 'dump')\n+\n+        self.log.info('Checking basic dump')\n+        wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet.dump\")\n+        self.assert_tool_output('The dumpfile may contain private keys. To ensure the safety of your Bitcoin, do not share the dumpfile.\\n', '-wallet=todump', '-dumpfile={}'.format(wallet_dump), 'dump')\n+\n+        with open(wallet_dump, 'r', encoding='utf8') as f:\n+            dump_data = f.read()\n+        # Check the dump magic\n+        assert dump_data.startswith('BITCOIN_CORE_WALLET_DUMP,1')\n+\n+        self.log.info('Checking that a dumpfile cannot be overwritten')\n+        self.assert_raises_tool_error('File {} already exists. If you are sure this is what you want, move it out of the way first.'.format(wallet_dump),  '-wallet=todump2', '-dumpfile={}'.format(wallet_dump), 'dump')\n+\n+        self.log.info('Checking createfromdump arguments')\n+        self.assert_raises_tool_error('No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.', '-wallet=todump', 'createfromdump')\n+        non_exist_dump = os.path.join(self.nodes[0].datadir, \"wallet.nodump\")\n+        self.assert_raises_tool_error('No wallet file format provided. To use createfromdump, -format=<format> must be provided.', '-wallet=todump', '-dumpfile={}'.format(non_exist_dump), 'createfromdump')\n+        self.assert_raises_tool_error('Unknown wallet file format \"notaformat\" provided. Please provide one of \"bdb\" or \"sqlite\".', '-wallet=todump', '-format=notaformat', '-dumpfile={}'.format(non_exist_dump), 'createfromdump')\n+        self.assert_raises_tool_error('Dump file {} does not exist.'.format(non_exist_dump), '-wallet=todump', '-format=bdb', '-dumpfile={}'.format(non_exist_dump), 'createfromdump')\n+        wallet_path = os.path.join(self.nodes[0].datadir, 'regtest/wallets/todump2')\n+        self.assert_raises_tool_error('Error: Wallet File {} exists already'.format(wallet_path), '-wallet=todump2', '-format=bdb', '-dumpfile={}'.format(wallet_dump), 'createfromdump')\n+\n+        self.log.info('Checking createfromdump')\n+        self.assert_tool_output('', '-wallet=load', '-format=bdb', '-dumpfile={}'.format(wallet_dump), 'createfromdump')\n+        wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-rt.dump\")\n+        self.assert_tool_output('The dumpfile may contain private keys. To ensure the safety of your Bitcoin, do not share the dumpfile.\\n', '-wallet=load', '-dumpfile={}'.format(wallet_dump), 'dump')\n+        with open(wallet_dump, 'r', encoding='utf8') as f:\n+            assert_equal(dump_data, f.read())\n+        orig_dump = dump_data\n+        wallet_dat = os.path.join(self.nodes[0].datadir, \"regtest/wallets/load\", \"wallet.dat\")\n+        with open(wallet_dat, 'rb') as f:\n+            f.seek(12, 0)\n+            file_magic = f.read(4)\n+            assert file_magic == b'\\x00\\x05\\x31\\x62' or file_magic == b'\\x62\\x31\\x05\\x00'\n+        self.assert_tool_output('', '-wallet=load-sqlite', '-format=sqlite', '-dumpfile={}'.format(wallet_dump), 'createfromdump')\n+        wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-rt-sqlite.dump\")\n+        self.assert_tool_output('The dumpfile may contain private keys. To ensure the safety of your Bitcoin, do not share the dumpfile.\\n', '-wallet=load-sqlite', '-dumpfile={}'.format(wallet_dump), 'dump')\n+        with open(wallet_dump, 'r', encoding='utf8') as f:\n+            assert_equal(dump_data, f.read())\n+        wallet_dat = os.path.join(self.nodes[0].datadir, \"regtest/wallets/load-sqlite\", \"wallet.dat\")\n+        with open(wallet_dat, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert file_magic == b'SQLite format 3\\x00'\n+\n+        self.log.info('Checking createfromdump handling of magic and versions')\n+        bad_ver_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_ver1.dump\")\n+        dump_data = 'BITCOIN_CORE_WALLET_DUMP,0\\n' + dump_data[27:] # Change the version number\n+        with open(bad_ver_wallet_dump, 'w+', encoding='utf8') as f:\n+            f.write(dump_data)\n+        self.assert_raises_tool_error('Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version 0', '-wallet=load1', '-format=bdb', '-dumpfile={}'.format(bad_ver_wallet_dump), 'createfromdump')\n+        bad_ver_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_ver2.dump\")\n+        dump_data = 'BITCOIN_CORE_WALLET_DUMP,2\\n' + dump_data[27:] # Change the version number\n+        with open(bad_ver_wallet_dump, 'w+', encoding='utf8') as f:\n+            f.write(dump_data)\n+        self.assert_raises_tool_error('Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version 2', '-wallet=load2', '-format=bdb', '-dumpfile={}'.format(bad_ver_wallet_dump), 'createfromdump')\n+        bad_magic_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_magic.dump\")\n+        dump_data = 'not_the_right_magic,1\\n' + dump_data[27:]\n+        with open(bad_magic_wallet_dump, 'w+', encoding='utf8') as f:\n+            f.write(dump_data)\n+        self.assert_raises_tool_error('Error: Dumpfile identifier record is incorrect. Got \"not_the_right_magic\", expected \"BITCOIN_CORE_WALLET_DUMP\".', '-wallet=load3', '-format=bdb', '-dumpfile={}'.format(bad_magic_wallet_dump), 'createfromdump')\n+\n+        self.log.info('Checking createfromdump handling of checksums')\n+        bad_sum_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_sum1.dump\")\n+        checksum = dump_data[-65:-1]\n+        dump_data = orig_dump[:-65] + \"1\" * 64 + \"\\n\"\n+        with open(bad_sum_wallet_dump, 'w+', encoding='utf8') as f:\n+            f.write(dump_data)\n+        self.assert_raises_tool_error('Error: Dumpfile checksum does not match. Computed {}, expected {}'.format(checksum, \"1\" * 64), '-wallet=load4', '-format=bdb', '-dumpfile={}'.format(bad_sum_wallet_dump), 'createfromdump')\n+        bad_sum_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_sum2.dump\")\n+        dump_data = orig_dump[:-75]\n+        with open(bad_sum_wallet_dump, 'w+', encoding='utf8') as f:\n+            f.write(dump_data)\n+        self.assert_raises_tool_error('Error: Missing checksum', '-wallet=load5', '-format=bdb', '-dumpfile={}'.format(bad_sum_wallet_dump), 'createfromdump')\n+        bad_sum_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_sum3.dump\")\n+        dump_data = orig_dump[:-65] + \"2\" * 10\n+        with open(bad_sum_wallet_dump, 'w+', encoding='utf8') as f:\n+            f.write(dump_data)\n+        self.assert_raises_tool_error('Error: Dumpfile checksum does not match. Computed {}, expected {}{}'.format(checksum, \"2\" * 10, \"0\" * 54), '-wallet=load6', '-format=bdb', '-dumpfile={}'.format(bad_sum_wallet_dump), 'createfromdump')",
    "path": "test/functional/tool_wallet.py",
    "position": null,
    "original_position": 87,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "35442fa568583c0da2c687966e49b3742f403870",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've added a check that the file exists (or doesn't for failure cases).",
    "created_at": "2020-10-22T03:13:00Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509854140",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509854140"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509854140"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509854140/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 298,
    "side": "RIGHT",
    "in_reply_to_id": 509792246
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509854162",
    "pull_request_review_id": 514329928,
    "id": 509854162,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1NDE2Mg==",
    "diff_hunk": "@@ -78,3 +78,167 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n     wallet->Close();\n     return ret;\n }\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");\n+        return false;\n+    }\n+    DatabaseFormat data_format;\n+    if (file_format == \"bdb\") {\n+        data_format = DatabaseFormat::BERKELEY;\n+    } else if (file_format == \"sqlite\") {\n+        data_format = DatabaseFormat::SQLITE;\n+    } else {\n+        error = strprintf(_(\"Unknown wallet file format \\\"%s\\\" provided. Please provide one of \\\"bdb\\\" or \\\"sqlite\\\".\"), file_format);\n+        return false;\n+    }\n+\n+    fs::path dump_path = dump_filename;\n+    dump_path = fs::absolute(dump_path);\n+    if (!fs::exists(dump_path)) {\n+        error = strprintf(_(\"Dump file %s does not exist.\"), dump_path.string());\n+        return false;\n+    }\n+    fsbridge::ifstream dump_file(dump_path);\n+\n+    if (fs::exists(wallet_path)) {\n+        error = strprintf(_(\"Error: Wallet File %s exists already\"), wallet_path.string());\n+        return false;\n+    }\n+\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    options.require_create = true;\n+    options.require_format = data_format;\n+    std::unique_ptr<WalletDatabase> database = MakeDatabase(wallet_path, options, status, error);\n+    if (!database) return false;\n+\n+    // dummy chain interface\n+    std::shared_ptr<CWallet> wallet(new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet);\n+    LOCK(wallet->cs_wallet);\n+    bool first_run = true;\n+    DBErrors load_wallet_ret = wallet->LoadWallet(first_run);\n+    if (load_wallet_ret != DBErrors::LOAD_OK) {\n+        error = strprintf(_(\"Error creating %s\"), name);\n+        return false;\n+    }\n+\n+    // Get the database handle\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+    batch->TxnBegin();\n+\n+    // Compute the checksum\n+    CHashWriter hasher(0, 0);\n+    uint256 checksum;\n+\n+    // Read the records from the dump file and write them to the database\n+    bool ret = true;\n+    bool first = true;\n+    while (dump_file.good()) {\n+        std::string key;\n+        std::getline(dump_file, key, ',');\n+        std::string value;\n+        std::getline(dump_file, value, '\\n');\n+\n+        if (key == \"checksum\") {\n+            std::vector<unsigned char> parsed_checksum = ParseHex(value);\n+            std::copy(parsed_checksum.begin(), parsed_checksum.end(), checksum.begin());\n+            break;\n+        }\n+\n+        std::string line = strprintf(\"%s,%s\\n\", key, value);\n+        hasher.write(line.data(), line.size());\n+\n+        if (key.empty() || value.empty()) {\n+            continue;\n+        }\n+\n+        // Check magic for first record\n+        if (first) {\n+            if (key != DUMP_MAGIC) {\n+                error = strprintf(_(\"Error: Dumpfile identifier record is incorrect. Got \\\"%s\\\", expected \\\"%s\\\".\"), key, DUMP_MAGIC);\n+                ret = false;\n+                break;\n+            }\n+            // Check the version number (value of first record)\n+            uint32_t ver;\n+            if (!ParseUInt32(value, &ver)) {\n+                error =strprintf(_(\"Error: Unable to parse version %u as a uint32_t\"), value);\n+                ret = false;\n+                break;\n+            }\n+            if (ver != DUMP_VERSION) {\n+                error = strprintf(_(\"Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version %s\"), value);\n+                ret = false;\n+                break;\n+            }\n+            first = false;\n+            continue;\n+        }\n+\n+        if (!IsHex(key)) {\n+            error = strprintf(_(\"Error: Got key that was not hex: %s\"), key);\n+            ret = false;\n+            break;\n+        }\n+        if (!IsHex(value)) {\n+            error = strprintf(_(\"Error: Got value that was not hex: %s\"), value);\n+            ret = false;\n+            break;\n+        }\n+\n+        std::vector<unsigned char> k = ParseHex(key);\n+        std::vector<unsigned char> v = ParseHex(value);\n+\n+        CDataStream ss_key(k, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(v, SER_DISK, CLIENT_VERSION);\n+\n+        batch->Write(ss_key, ss_value);",
    "path": "src/wallet/dump.cpp",
    "position": null,
    "original_position": 141,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "6137750082dd28bf38bbb2922d6d040d4e854643",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-10-22T03:13:06Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509854162",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509854162"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509854162"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509854162/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 218,
    "side": "RIGHT",
    "in_reply_to_id": 509792748
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509854321",
    "pull_request_review_id": 514330123,
    "id": 509854321,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1NDMyMQ==",
    "diff_hunk": "@@ -78,3 +78,167 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n     wallet->Close();\n     return ret;\n }\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");\n+        return false;\n+    }\n+    DatabaseFormat data_format;\n+    if (file_format == \"bdb\") {\n+        data_format = DatabaseFormat::BERKELEY;\n+    } else if (file_format == \"sqlite\") {\n+        data_format = DatabaseFormat::SQLITE;\n+    } else {\n+        error = strprintf(_(\"Unknown wallet file format \\\"%s\\\" provided. Please provide one of \\\"bdb\\\" or \\\"sqlite\\\".\"), file_format);\n+        return false;\n+    }\n+\n+    fs::path dump_path = dump_filename;\n+    dump_path = fs::absolute(dump_path);\n+    if (!fs::exists(dump_path)) {\n+        error = strprintf(_(\"Dump file %s does not exist.\"), dump_path.string());\n+        return false;\n+    }\n+    fsbridge::ifstream dump_file(dump_path);\n+\n+    if (fs::exists(wallet_path)) {\n+        error = strprintf(_(\"Error: Wallet File %s exists already\"), wallet_path.string());\n+        return false;\n+    }\n+\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    options.require_create = true;\n+    options.require_format = data_format;\n+    std::unique_ptr<WalletDatabase> database = MakeDatabase(wallet_path, options, status, error);\n+    if (!database) return false;\n+\n+    // dummy chain interface\n+    std::shared_ptr<CWallet> wallet(new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet);\n+    LOCK(wallet->cs_wallet);\n+    bool first_run = true;\n+    DBErrors load_wallet_ret = wallet->LoadWallet(first_run);\n+    if (load_wallet_ret != DBErrors::LOAD_OK) {\n+        error = strprintf(_(\"Error creating %s\"), name);\n+        return false;\n+    }\n+\n+    // Get the database handle\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+    batch->TxnBegin();\n+\n+    // Compute the checksum\n+    CHashWriter hasher(0, 0);\n+    uint256 checksum;\n+\n+    // Read the records from the dump file and write them to the database\n+    bool ret = true;\n+    bool first = true;\n+    while (dump_file.good()) {\n+        std::string key;\n+        std::getline(dump_file, key, ',');\n+        std::string value;\n+        std::getline(dump_file, value, '\\n');\n+\n+        if (key == \"checksum\") {\n+            std::vector<unsigned char> parsed_checksum = ParseHex(value);\n+            std::copy(parsed_checksum.begin(), parsed_checksum.end(), checksum.begin());\n+            break;\n+        }\n+\n+        std::string line = strprintf(\"%s,%s\\n\", key, value);\n+        hasher.write(line.data(), line.size());\n+\n+        if (key.empty() || value.empty()) {\n+            continue;\n+        }\n+\n+        // Check magic for first record\n+        if (first) {\n+            if (key != DUMP_MAGIC) {\n+                error = strprintf(_(\"Error: Dumpfile identifier record is incorrect. Got \\\"%s\\\", expected \\\"%s\\\".\"), key, DUMP_MAGIC);\n+                ret = false;\n+                break;\n+            }\n+            // Check the version number (value of first record)\n+            uint32_t ver;\n+            if (!ParseUInt32(value, &ver)) {\n+                error =strprintf(_(\"Error: Unable to parse version %u as a uint32_t\"), value);\n+                ret = false;\n+                break;\n+            }\n+            if (ver != DUMP_VERSION) {\n+                error = strprintf(_(\"Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version %s\"), value);\n+                ret = false;\n+                break;\n+            }\n+            first = false;\n+            continue;\n+        }\n+\n+        if (!IsHex(key)) {\n+            error = strprintf(_(\"Error: Got key that was not hex: %s\"), key);\n+            ret = false;\n+            break;\n+        }\n+        if (!IsHex(value)) {\n+            error = strprintf(_(\"Error: Got value that was not hex: %s\"), value);\n+            ret = false;\n+            break;\n+        }\n+\n+        std::vector<unsigned char> k = ParseHex(key);\n+        std::vector<unsigned char> v = ParseHex(value);\n+\n+        CDataStream ss_key(k, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(v, SER_DISK, CLIENT_VERSION);\n+\n+        batch->Write(ss_key, ss_value);\n+    }\n+\n+    if (ret) {\n+        uint256 comp_checksum = hasher.GetHash();\n+        if (checksum.IsNull()) {\n+            error = _(\"Error: Missing checksum\");\n+            ret = false;\n+        } else if (checksum != comp_checksum) {\n+            error = strprintf(_(\"Error: Dumpfile checksum does not match. Computed %s, expected %s\"), HexStr(comp_checksum), HexStr(checksum));\n+            ret = false;\n+        }\n+    }\n+\n+    if (ret) {\n+        batch->TxnCommit();\n+    } else {\n+        batch->TxnAbort();",
    "path": "src/wallet/dump.cpp",
    "position": null,
    "original_position": 158,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "6137750082dd28bf38bbb2922d6d040d4e854643",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added wallet removal.",
    "created_at": "2020-10-22T03:13:48Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509854321",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509854321"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509854321"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509854321/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 243,
    "side": "RIGHT",
    "in_reply_to_id": 509794068
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509868556",
    "pull_request_review_id": 514345983,
    "id": 509868556,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg2ODU1Ng==",
    "diff_hunk": "@@ -0,0 +1,253 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/translation.h>\n+#include <wallet/wallet.h>\n+\n+static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n+uint32_t DUMP_VERSION = 1;\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use dump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path path = dump_filename;\n+    path = fs::absolute(path);\n+    if (fs::exists(path)) {\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        return false;\n+    }\n+    fsbridge::ofstream dump_file;\n+    dump_file.open(path);\n+    if (dump_file.fail()) {\n+        error = strprintf(_(\"Unable to open %s for writing\"), path.string());\n+        return false;\n+    }\n+\n+    CHashWriter hasher(0, 0);\n+\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+\n+    bool ret = true;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Couldn't create cursor into database\");\n+        ret = false;\n+    }\n+\n+    // Write out a magic string with version\n+    std::string line = strprintf(\"%s,%u\\n\", DUMP_MAGIC, DUMP_VERSION);\n+    dump_file.write(line.data(), line.size());\n+    hasher.write(line.data(), line.size());\n+\n+    if (ret) {\n+\n+        // Read the records\n+        while (true) {\n+            CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+            CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+            bool complete;\n+            bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+            if (complete) {\n+                break;\n+            } else if (!ret) {\n+                error = _(\"Error reading next record from wallet database\");\n+                break;",
    "path": "src/wallet/dump.cpp",
    "position": 69,
    "original_position": 61,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "f7a5bf729cfa5a134bc6dd02a97f793d64107d4e",
    "user": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "1) Because `ret` overshadows another variable in the parent scope the function will return `true` and the error won't be shown to the user.\r\n\r\n2) even if we return `false` and show an error the dumpfile is still not complete, which could lead to broken backups if user misses an error. I suggest we remove the file if something goes wrong. So if the dumpfile exists it's always a complete dump.",
    "created_at": "2020-10-22T04:10:29Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509868556",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509868556"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509868556"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509868556/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 69,
    "original_line": 69,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509869271",
    "pull_request_review_id": 514345983,
    "id": 509869271,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg2OTI3MQ==",
    "diff_hunk": "@@ -112,7 +113,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Close();\n         }\n-    } else if (command == \"info\" || command == \"salvage\") {\n+    } else if (command == \"info\" || command == \"salvage\" || command == \"dump\") {",
    "path": "src/wallet/wallettool.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "f7a5bf729cfa5a134bc6dd02a97f793d64107d4e",
    "user": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: What's similar about `info`, `salvage` and `dump`? Can we make it a one-level switch instead?\r\n",
    "created_at": "2020-10-22T04:14:06Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509869271",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509869271"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509869271"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509869271/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 116,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509876468",
    "pull_request_review_id": 514345983,
    "id": 509876468,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3NjQ2OA==",
    "diff_hunk": "@@ -0,0 +1,253 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/translation.h>\n+#include <wallet/wallet.h>\n+\n+static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n+uint32_t DUMP_VERSION = 1;\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use dump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path path = dump_filename;\n+    path = fs::absolute(path);\n+    if (fs::exists(path)) {\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        return false;\n+    }\n+    fsbridge::ofstream dump_file;\n+    dump_file.open(path);\n+    if (dump_file.fail()) {\n+        error = strprintf(_(\"Unable to open %s for writing\"), path.string());\n+        return false;\n+    }\n+\n+    CHashWriter hasher(0, 0);\n+\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+\n+    bool ret = true;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Couldn't create cursor into database\");\n+        ret = false;\n+    }\n+\n+    // Write out a magic string with version\n+    std::string line = strprintf(\"%s,%u\\n\", DUMP_MAGIC, DUMP_VERSION);\n+    dump_file.write(line.data(), line.size());\n+    hasher.write(line.data(), line.size());\n+\n+    if (ret) {\n+\n+        // Read the records\n+        while (true) {\n+            CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+            CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+            bool complete;\n+            bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+            if (complete) {\n+                break;\n+            } else if (!ret) {\n+                error = _(\"Error reading next record from wallet database\");\n+                break;\n+            }\n+            std::string key_str = HexStr(ss_key);\n+            std::string value_str = HexStr(ss_value);\n+            line = strprintf(\"%s,%s\\n\", key_str, value_str);\n+            dump_file.write(line.data(), line.size());\n+            hasher.write(line.data(), line.size());\n+        }\n+    }\n+\n+    // Write the hash\n+    tfm::format(dump_file, \"checksum,%s\\n\", HexStr(hasher.GetHash()));\n+\n+    batch->CloseCursor();\n+    batch.reset();\n+\n+    // Close the wallet after we're done with it. The caller won't be doing this\n+    wallet->Close();\n+    return ret;\n+}\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");\n+        return false;\n+    }\n+    DatabaseFormat data_format;\n+    if (file_format == \"bdb\") {\n+        data_format = DatabaseFormat::BERKELEY;\n+    } else if (file_format == \"sqlite\") {\n+        data_format = DatabaseFormat::SQLITE;\n+    } else {\n+        error = strprintf(_(\"Unknown wallet file format \\\"%s\\\" provided. Please provide one of \\\"bdb\\\" or \\\"sqlite\\\".\"), file_format);\n+        return false;\n+    }\n+\n+    fs::path dump_path = dump_filename;\n+    dump_path = fs::absolute(dump_path);\n+    if (!fs::exists(dump_path)) {\n+        error = strprintf(_(\"Dump file %s does not exist.\"), dump_path.string());\n+        return false;\n+    }\n+    fsbridge::ifstream dump_file(dump_path);\n+\n+    if (fs::exists(wallet_path)) {",
    "path": "src/wallet/dump.cpp",
    "position": null,
    "original_position": 125,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "f7a5bf729cfa5a134bc6dd02a97f793d64107d4e",
    "user": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: not necessary as `MakeDatabase` with `options.require_create = true` will guarantee it doesn't exist.",
    "created_at": "2020-10-22T04:44:43Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509876468",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509876468"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509876468"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509876468/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 125,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509887594",
    "pull_request_review_id": 514368898,
    "id": 509887594,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4NzU5NA==",
    "diff_hunk": "@@ -0,0 +1,253 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/translation.h>\n+#include <wallet/wallet.h>\n+\n+static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n+uint32_t DUMP_VERSION = 1;\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use dump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path path = dump_filename;\n+    path = fs::absolute(path);\n+    if (fs::exists(path)) {\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        return false;\n+    }\n+    fsbridge::ofstream dump_file;\n+    dump_file.open(path);\n+    if (dump_file.fail()) {\n+        error = strprintf(_(\"Unable to open %s for writing\"), path.string());\n+        return false;\n+    }\n+\n+    CHashWriter hasher(0, 0);\n+\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+\n+    bool ret = true;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Couldn't create cursor into database\");\n+        ret = false;\n+    }\n+\n+    // Write out a magic string with version\n+    std::string line = strprintf(\"%s,%u\\n\", DUMP_MAGIC, DUMP_VERSION);\n+    dump_file.write(line.data(), line.size());\n+    hasher.write(line.data(), line.size());\n+\n+    if (ret) {\n+\n+        // Read the records\n+        while (true) {\n+            CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+            CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+            bool complete;\n+            bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+            if (complete) {\n+                break;\n+            } else if (!ret) {\n+                error = _(\"Error reading next record from wallet database\");\n+                break;",
    "path": "src/wallet/dump.cpp",
    "position": 69,
    "original_position": 61,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "f7a5bf729cfa5a134bc6dd02a97f793d64107d4e",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "1. Stopped shadowing.\r\n2. Removing the dump file if `!ret`.",
    "created_at": "2020-10-22T05:26:02Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509887594",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509887594"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509887594"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509887594/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 69,
    "original_line": 69,
    "side": "RIGHT",
    "in_reply_to_id": 509868556
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509887762",
    "pull_request_review_id": 514369103,
    "id": 509887762,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4Nzc2Mg==",
    "diff_hunk": "@@ -112,7 +113,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Close();\n         }\n-    } else if (command == \"info\" || command == \"salvage\") {\n+    } else if (command == \"info\" || command == \"salvage\" || command == \"dump\") {",
    "path": "src/wallet/wallettool.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "f7a5bf729cfa5a134bc6dd02a97f793d64107d4e",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Removed this `else if`. I think this is a left over of when `info` and `salvage` shared wallet opening code.",
    "created_at": "2020-10-22T05:26:35Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509887762",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509887762"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509887762"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509887762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 116,
    "side": "RIGHT",
    "in_reply_to_id": 509869271
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509887805",
    "pull_request_review_id": 514369144,
    "id": 509887805,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4NzgwNQ==",
    "diff_hunk": "@@ -0,0 +1,253 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/translation.h>\n+#include <wallet/wallet.h>\n+\n+static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n+uint32_t DUMP_VERSION = 1;\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use dump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path path = dump_filename;\n+    path = fs::absolute(path);\n+    if (fs::exists(path)) {\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        return false;\n+    }\n+    fsbridge::ofstream dump_file;\n+    dump_file.open(path);\n+    if (dump_file.fail()) {\n+        error = strprintf(_(\"Unable to open %s for writing\"), path.string());\n+        return false;\n+    }\n+\n+    CHashWriter hasher(0, 0);\n+\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+\n+    bool ret = true;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Couldn't create cursor into database\");\n+        ret = false;\n+    }\n+\n+    // Write out a magic string with version\n+    std::string line = strprintf(\"%s,%u\\n\", DUMP_MAGIC, DUMP_VERSION);\n+    dump_file.write(line.data(), line.size());\n+    hasher.write(line.data(), line.size());\n+\n+    if (ret) {\n+\n+        // Read the records\n+        while (true) {\n+            CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+            CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+            bool complete;\n+            bool ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+            if (complete) {\n+                break;\n+            } else if (!ret) {\n+                error = _(\"Error reading next record from wallet database\");\n+                break;\n+            }\n+            std::string key_str = HexStr(ss_key);\n+            std::string value_str = HexStr(ss_value);\n+            line = strprintf(\"%s,%s\\n\", key_str, value_str);\n+            dump_file.write(line.data(), line.size());\n+            hasher.write(line.data(), line.size());\n+        }\n+    }\n+\n+    // Write the hash\n+    tfm::format(dump_file, \"checksum,%s\\n\", HexStr(hasher.GetHash()));\n+\n+    batch->CloseCursor();\n+    batch.reset();\n+\n+    // Close the wallet after we're done with it. The caller won't be doing this\n+    wallet->Close();\n+    return ret;\n+}\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");\n+        return false;\n+    }\n+    DatabaseFormat data_format;\n+    if (file_format == \"bdb\") {\n+        data_format = DatabaseFormat::BERKELEY;\n+    } else if (file_format == \"sqlite\") {\n+        data_format = DatabaseFormat::SQLITE;\n+    } else {\n+        error = strprintf(_(\"Unknown wallet file format \\\"%s\\\" provided. Please provide one of \\\"bdb\\\" or \\\"sqlite\\\".\"), file_format);\n+        return false;\n+    }\n+\n+    fs::path dump_path = dump_filename;\n+    dump_path = fs::absolute(dump_path);\n+    if (!fs::exists(dump_path)) {\n+        error = strprintf(_(\"Dump file %s does not exist.\"), dump_path.string());\n+        return false;\n+    }\n+    fsbridge::ifstream dump_file(dump_path);\n+\n+    if (fs::exists(wallet_path)) {",
    "path": "src/wallet/dump.cpp",
    "position": null,
    "original_position": 125,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "f7a5bf729cfa5a134bc6dd02a97f793d64107d4e",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Removed.",
    "created_at": "2020-10-22T05:26:43Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509887805",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509887805"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509887805"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509887805/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 125,
    "side": "RIGHT",
    "in_reply_to_id": 509876468
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510719813",
    "pull_request_review_id": 515449842,
    "id": 510719813,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcxOTgxMw==",
    "diff_hunk": "@@ -26,12 +26,16 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n \n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\".\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
    "path": "src/bitcoin-wallet.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "225cfa9f0c44798ab42c27d161670c5ee74902a3",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This doesn't seem to affect the `create` command, but the `createfromdump` command? Should that be mentioned?",
    "created_at": "2020-10-23T08:27:01Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r510719813",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510719813"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r510719813"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510719813/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 31,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/511007422",
    "pull_request_review_id": 515833612,
    "id": 511007422,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwNzQyMg==",
    "diff_hunk": "@@ -26,12 +26,16 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n \n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\".\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
    "path": "src/bitcoin-wallet.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "225cfa9f0c44798ab42c27d161670c5ee74902a3",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added a mention.",
    "created_at": "2020-10-23T16:39:52Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r511007422",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/511007422"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r511007422"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/511007422/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 31,
    "side": "RIGHT",
    "in_reply_to_id": 510719813
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516779603",
    "pull_request_review_id": 522647530,
    "id": 516779603,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc3OTYwMw==",
    "diff_hunk": "@@ -87,3 +87,171 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n \n     return ret;\n }\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");",
    "path": "src/wallet/dump.cpp",
    "position": 167,
    "original_position": 27,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "fd1f2380cf736df25a27c2607f745ae248c73933",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"wallettool: Add createfromdump command\" (fd1f2380cf736df25a27c2607f745ae248c73933)\r\n\r\nThis seems all right for now, but we should think about how to improve usability in the future because this is inconsistent with other ways wallets are created. Other ways to create wallets either default to BDB format or choose format based on a _descriptors/no descriptors_ option, not a _BDB/SQLite_ format option. Also, dumping and recreating a wallet in the original format may be a challenge here, since both wallet formats look like directories with `wallet.dat` files, and you can't tell them apart without opening them or looking for external clues. This `-format` option could also lead to creation of less well tested BDB+descriptor or SQLite+no-descriptor wallet types.\r\n\r\nI think:\r\n\r\n- Ideally best format would be detected automatically and there should be no need to have a `-format` option.\r\n- If `-format` option is kept it should give either a warning or an error if an unusual BDB+descriptor or SQLite+no-descriptor wallet is created.\r\n- If `-format` option is kept, wallet `wallet-tool create` command should either respect it or explicitly disallow it, not ignore it. More ideally a `-descriptors`/-`nodescriptors` option would be used to choose the format, so `wallet-tool create` command would be consistent with other ways wallets are created",
    "created_at": "2020-11-03T16:03:57Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r516779603",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516779603"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r516779603"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516779603/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 167,
    "original_line": 167,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516795262",
    "pull_request_review_id": 522647530,
    "id": 516795262,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc5NTI2Mg==",
    "diff_hunk": "@@ -87,3 +87,171 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n \n     return ret;\n }\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");\n+        return false;\n+    }\n+    DatabaseFormat data_format;\n+    if (file_format == \"bdb\") {\n+        data_format = DatabaseFormat::BERKELEY;\n+    } else if (file_format == \"sqlite\") {\n+        data_format = DatabaseFormat::SQLITE;\n+    } else {\n+        error = strprintf(_(\"Unknown wallet file format \\\"%s\\\" provided. Please provide one of \\\"bdb\\\" or \\\"sqlite\\\".\"), file_format);\n+        return false;\n+    }\n+\n+    fs::path dump_path = dump_filename;\n+    dump_path = fs::absolute(dump_path);\n+    if (!fs::exists(dump_path)) {\n+        error = strprintf(_(\"Dump file %s does not exist.\"), dump_path.string());\n+        return false;\n+    }\n+    fsbridge::ifstream dump_file(dump_path);\n+\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    options.require_create = true;\n+    options.require_format = data_format;\n+    std::unique_ptr<WalletDatabase> database = MakeDatabase(wallet_path, options, status, error);\n+    if (!database) return false;\n+\n+    // dummy chain interface\n+    std::shared_ptr<CWallet> wallet(new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet);\n+    LOCK(wallet->cs_wallet);\n+    bool first_run = true;\n+    DBErrors load_wallet_ret = wallet->LoadWallet(first_run);\n+    if (load_wallet_ret != DBErrors::LOAD_OK) {\n+        error = strprintf(_(\"Error creating %s\"), name);\n+        return false;\n+    }\n+\n+    // Get the database handle\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+    batch->TxnBegin();\n+\n+    // Compute the checksum\n+    CHashWriter hasher(0, 0);\n+    uint256 checksum;\n+\n+    // Read the records from the dump file and write them to the database\n+    bool ret = true;\n+    bool first = true;\n+    while (dump_file.good()) {\n+        std::string key;\n+        std::getline(dump_file, key, ',');\n+        std::string value;\n+        std::getline(dump_file, value, '\\n');\n+\n+        if (key == \"checksum\") {\n+            std::vector<unsigned char> parsed_checksum = ParseHex(value);\n+            std::copy(parsed_checksum.begin(), parsed_checksum.end(), checksum.begin());\n+            break;\n+        }\n+\n+        std::string line = strprintf(\"%s,%s\\n\", key, value);\n+        hasher.write(line.data(), line.size());\n+\n+        if (key.empty() || value.empty()) {\n+            continue;\n+        }\n+\n+        // Check magic for first record\n+        if (first) {\n+            if (key != DUMP_MAGIC) {\n+                error = strprintf(_(\"Error: Dumpfile identifier record is incorrect. Got \\\"%s\\\", expected \\\"%s\\\".\"), key, DUMP_MAGIC);\n+                ret = false;\n+                break;\n+            }\n+            // Check the version number (value of first record)\n+            uint32_t ver;\n+            if (!ParseUInt32(value, &ver)) {\n+                error =strprintf(_(\"Error: Unable to parse version %u as a uint32_t\"), value);\n+                ret = false;\n+                break;\n+            }\n+            if (ver != DUMP_VERSION) {\n+                error = strprintf(_(\"Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version %s\"), value);\n+                ret = false;\n+                break;\n+            }\n+            first = false;\n+            continue;\n+        }\n+\n+        if (!IsHex(key)) {\n+            error = strprintf(_(\"Error: Got key that was not hex: %s\"), key);\n+            ret = false;\n+            break;\n+        }\n+        if (!IsHex(value)) {\n+            error = strprintf(_(\"Error: Got value that was not hex: %s\"), value);\n+            ret = false;\n+            break;\n+        }\n+\n+        std::vector<unsigned char> k = ParseHex(key);\n+        std::vector<unsigned char> v = ParseHex(value);\n+\n+        CDataStream ss_key(k, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(v, SER_DISK, CLIENT_VERSION);\n+\n+        if (!batch->Write(ss_key, ss_value)) {\n+            error = strprintf(_(\"Error: Unable to write record to new wallet\"));\n+            ret = false;\n+            break;\n+        }\n+    }\n+\n+    if (ret) {\n+        uint256 comp_checksum = hasher.GetHash();\n+        if (checksum.IsNull()) {\n+            error = _(\"Error: Missing checksum\");\n+            ret = false;\n+        } else if (checksum != comp_checksum) {\n+            error = strprintf(_(\"Error: Dumpfile checksum does not match. Computed %s, expected %s\"), HexStr(comp_checksum), HexStr(checksum));\n+            ret = false;\n+        }\n+    }\n+\n+    if (ret) {\n+        batch->TxnCommit();\n+    } else {\n+        batch->TxnAbort();\n+    }\n+\n+    batch.reset();\n+\n+    dump_file.close();\n+    wallet->Close();\n+\n+    // Remove the wallet dir if we have a failure\n+    if (!ret) {\n+        fs::remove_all(wallet_path);",
    "path": "src/wallet/dump.cpp",
    "position": 278,
    "original_position": 167,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "fd1f2380cf736df25a27c2607f745ae248c73933",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"wallettool: Add createfromdump command\" (fd1f2380cf736df25a27c2607f745ae248c73933)\r\n\r\n- I think code probably should call wallet.reset() before this point. `wallet->Close` is called above, but it seems like Close for BDB only flushes the database, so the environment might not get freed until after fs::remove_all, and lead to later attempted writes.\r\n- Alternately this could use a different approach and call a WalletDatabase::Remove method that just removes the known wallet files and empty directory (https://github.com/bitcoin/bitcoin/pull/19137#discussion_r509803825) instead of calling `fs::remove_all`. Even though `remove_all` should be safe because of the `options.require_create = true` line above, a selective remove would seem more safe than a recursive one",
    "created_at": "2020-11-03T16:26:11Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r516795262",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516795262"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r516795262"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516795262/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 278,
    "original_line": 278,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516863717",
    "pull_request_review_id": 522758585,
    "id": 516863717,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg2MzcxNw==",
    "diff_hunk": "@@ -87,3 +87,171 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n \n     return ret;\n }\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");\n+        return false;\n+    }\n+    DatabaseFormat data_format;\n+    if (file_format == \"bdb\") {\n+        data_format = DatabaseFormat::BERKELEY;\n+    } else if (file_format == \"sqlite\") {\n+        data_format = DatabaseFormat::SQLITE;\n+    } else {\n+        error = strprintf(_(\"Unknown wallet file format \\\"%s\\\" provided. Please provide one of \\\"bdb\\\" or \\\"sqlite\\\".\"), file_format);\n+        return false;\n+    }\n+\n+    fs::path dump_path = dump_filename;\n+    dump_path = fs::absolute(dump_path);\n+    if (!fs::exists(dump_path)) {\n+        error = strprintf(_(\"Dump file %s does not exist.\"), dump_path.string());\n+        return false;\n+    }\n+    fsbridge::ifstream dump_file(dump_path);\n+\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    options.require_create = true;\n+    options.require_format = data_format;\n+    std::unique_ptr<WalletDatabase> database = MakeDatabase(wallet_path, options, status, error);\n+    if (!database) return false;\n+\n+    // dummy chain interface\n+    std::shared_ptr<CWallet> wallet(new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet);\n+    LOCK(wallet->cs_wallet);\n+    bool first_run = true;\n+    DBErrors load_wallet_ret = wallet->LoadWallet(first_run);\n+    if (load_wallet_ret != DBErrors::LOAD_OK) {\n+        error = strprintf(_(\"Error creating %s\"), name);\n+        return false;\n+    }\n+\n+    // Get the database handle\n+    WalletDatabase& db = wallet->GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+    batch->TxnBegin();\n+\n+    // Compute the checksum\n+    CHashWriter hasher(0, 0);\n+    uint256 checksum;\n+\n+    // Read the records from the dump file and write them to the database\n+    bool ret = true;\n+    bool first = true;\n+    while (dump_file.good()) {\n+        std::string key;\n+        std::getline(dump_file, key, ',');\n+        std::string value;\n+        std::getline(dump_file, value, '\\n');\n+\n+        if (key == \"checksum\") {\n+            std::vector<unsigned char> parsed_checksum = ParseHex(value);\n+            std::copy(parsed_checksum.begin(), parsed_checksum.end(), checksum.begin());\n+            break;\n+        }\n+\n+        std::string line = strprintf(\"%s,%s\\n\", key, value);\n+        hasher.write(line.data(), line.size());\n+\n+        if (key.empty() || value.empty()) {\n+            continue;\n+        }\n+\n+        // Check magic for first record\n+        if (first) {\n+            if (key != DUMP_MAGIC) {\n+                error = strprintf(_(\"Error: Dumpfile identifier record is incorrect. Got \\\"%s\\\", expected \\\"%s\\\".\"), key, DUMP_MAGIC);\n+                ret = false;\n+                break;\n+            }\n+            // Check the version number (value of first record)\n+            uint32_t ver;\n+            if (!ParseUInt32(value, &ver)) {\n+                error =strprintf(_(\"Error: Unable to parse version %u as a uint32_t\"), value);\n+                ret = false;\n+                break;\n+            }\n+            if (ver != DUMP_VERSION) {\n+                error = strprintf(_(\"Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version %s\"), value);\n+                ret = false;\n+                break;\n+            }\n+            first = false;\n+            continue;\n+        }\n+\n+        if (!IsHex(key)) {\n+            error = strprintf(_(\"Error: Got key that was not hex: %s\"), key);\n+            ret = false;\n+            break;\n+        }\n+        if (!IsHex(value)) {\n+            error = strprintf(_(\"Error: Got value that was not hex: %s\"), value);\n+            ret = false;\n+            break;\n+        }\n+\n+        std::vector<unsigned char> k = ParseHex(key);\n+        std::vector<unsigned char> v = ParseHex(value);\n+\n+        CDataStream ss_key(k, SER_DISK, CLIENT_VERSION);\n+        CDataStream ss_value(v, SER_DISK, CLIENT_VERSION);\n+\n+        if (!batch->Write(ss_key, ss_value)) {\n+            error = strprintf(_(\"Error: Unable to write record to new wallet\"));\n+            ret = false;\n+            break;\n+        }\n+    }\n+\n+    if (ret) {\n+        uint256 comp_checksum = hasher.GetHash();\n+        if (checksum.IsNull()) {\n+            error = _(\"Error: Missing checksum\");\n+            ret = false;\n+        } else if (checksum != comp_checksum) {\n+            error = strprintf(_(\"Error: Dumpfile checksum does not match. Computed %s, expected %s\"), HexStr(comp_checksum), HexStr(checksum));\n+            ret = false;\n+        }\n+    }\n+\n+    if (ret) {\n+        batch->TxnCommit();\n+    } else {\n+        batch->TxnAbort();\n+    }\n+\n+    batch.reset();\n+\n+    dump_file.close();\n+    wallet->Close();\n+\n+    // Remove the wallet dir if we have a failure\n+    if (!ret) {\n+        fs::remove_all(wallet_path);",
    "path": "src/wallet/dump.cpp",
    "position": 278,
    "original_position": 167,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "fd1f2380cf736df25a27c2607f745ae248c73933",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added a reset.",
    "created_at": "2020-11-03T18:12:05Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r516863717",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516863717"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r516863717"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516863717/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 278,
    "original_line": 278,
    "side": "RIGHT",
    "in_reply_to_id": 516795262
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526240887",
    "pull_request_review_id": 533647214,
    "id": 526240887,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0MDg4Nw==",
    "diff_hunk": "@@ -87,3 +87,171 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n \n     return ret;\n }\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");",
    "path": "src/wallet/dump.cpp",
    "position": 167,
    "original_position": 27,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "fd1f2380cf736df25a27c2607f745ae248c73933",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe it should be included in the dump? (Can allow overriding still if user desires to do so)",
    "created_at": "2020-11-18T16:47:12Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r526240887",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526240887"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r526240887"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526240887/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 167,
    "original_line": 167,
    "side": "RIGHT",
    "in_reply_to_id": 516779603
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526319192",
    "pull_request_review_id": 533747927,
    "id": 526319192,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMxOTE5Mg==",
    "diff_hunk": "@@ -87,3 +87,171 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n \n     return ret;\n }\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");",
    "path": "src/wallet/dump.cpp",
    "position": 167,
    "original_position": 27,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "fd1f2380cf736df25a27c2607f745ae248c73933",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/19137#discussion_r526240887\r\n\r\n> Maybe it should be included in the dump? (Can allow overriding still if user desires to do so)\r\n\r\n:+1:\r\n\r\nLike that idea",
    "created_at": "2020-11-18T18:18:41Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r526319192",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526319192"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r526319192"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526319192/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 167,
    "original_line": 167,
    "side": "RIGHT",
    "in_reply_to_id": 516779603
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527092004",
    "pull_request_review_id": 534714357,
    "id": 527092004,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MjAwNA==",
    "diff_hunk": "@@ -87,3 +87,171 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n \n     return ret;\n }\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");",
    "path": "src/wallet/dump.cpp",
    "position": 167,
    "original_position": 27,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "fd1f2380cf736df25a27c2607f745ae248c73933",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Given that this tool is supposed to operate at the database level, I don't think it makes sense to have a `-descriptors`/`-nodescriptors` option for it. Additionally, because this tool doesn't have application level logic, I don't think it should be able to do any introspection of the wallet it creates in order to warn about unusual format and wallet type combinations.\r\n\r\nI would prefer that we keep `-format` but make it directly an option of `createfromdump`. It would be better if our args system had something like Python Argparse's subcommands. But I don't think that is currently possible to do with our args system.",
    "created_at": "2020-11-19T18:04:44Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r527092004",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527092004"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r527092004"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527092004/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 167,
    "original_line": 167,
    "side": "RIGHT",
    "in_reply_to_id": 516779603
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527167792",
    "pull_request_review_id": 534811295,
    "id": 527167792,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2Nzc5Mg==",
    "diff_hunk": "@@ -87,3 +87,171 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\n \n     return ret;\n }\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    // Get the data file format\n+    std::string file_format = gArgs.GetArg(\"-format\", \"\");\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");",
    "path": "src/wallet/dump.cpp",
    "position": 167,
    "original_position": 27,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "fd1f2380cf736df25a27c2607f745ae248c73933",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've limited `-format` to only `createfromdump`. I've also added a `format` line to the dump which is used to determine the database format if `-format` isn't provided. This required shuffling around some of the code in `createfromdump`. Tests have also been updated and partially refactored to make them a bit more readable.",
    "created_at": "2020-11-19T20:11:23Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r527167792",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527167792"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r527167792"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527167792/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 167,
    "original_line": 167,
    "side": "RIGHT",
    "in_reply_to_id": 516779603
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527251029",
    "pull_request_review_id": 534915275,
    "id": 527251029,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1MTAyOQ==",
    "diff_hunk": "@@ -109,32 +110,63 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n {\n     fs::path path = fs::absolute(name, GetWalletDir());\n \n+    // -format is only allowed with createfromdump. Disallow it for all other commands.\n+    if (gArgs.IsArgSet(\"-format\") && command != \"createfromdump\") {\n+        tfm::format(std::cerr, \"The -format option can only be used with the \\\"createfromdump\\\" command.\\n\");\n+        return false;\n+    }\n+    // -dumpfile is only allowed with dump and createfromdump. Disallow it for all other commands.\n+    if (gArgs.IsArgSet(\"-dumpfile\") && command != \"dump\" && command != \"createfromdump\") {\n+        tfm::format(std::cerr, \"The -dumpfile option can only be used with the \\\"dump\\\" and \\\"createfromdump\\\" commands.\\n\");\n+        return false;\n+    }\n+\n     if (command == \"create\") {\n         std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, /* create= */ true);\n         if (wallet_instance) {\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Close();\n         }\n-    } else if (command == \"info\" || command == \"salvage\") {\n-        if (command == \"info\") {\n-            std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, /* create= */ false);\n-            if (!wallet_instance) return false;\n-            WalletShowInfo(wallet_instance.get());\n-            wallet_instance->Close();\n-        } else if (command == \"salvage\") {\n-            bilingual_str error;\n-            std::vector<bilingual_str> warnings;\n-            bool ret = RecoverDatabaseFile(path, error, warnings);\n-            if (!ret) {\n-                for (const auto& warning : warnings) {\n-                    tfm::format(std::cerr, \"%s\\n\", warning.original);\n-                }\n-                if (!error.empty()) {\n-                    tfm::format(std::cerr, \"%s\\n\", error.original);\n-                }\n+    } else if (command == \"info\") {\n+        std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, /* create= */ false);\n+        if (!wallet_instance) return false;\n+        WalletShowInfo(wallet_instance.get());\n+        wallet_instance->Close();\n+    } else if (command == \"salvage\") {\n+        bilingual_str error;\n+        std::vector<bilingual_str> warnings;\n+        bool ret = RecoverDatabaseFile(path, error, warnings);\n+        if (!ret) {\n+            for (const auto& warning : warnings) {\n+                tfm::format(std::cerr, \"%s\\n\", warning.original);\n+            }\n+            if (!error.empty()) {\n+                tfm::format(std::cerr, \"%s\\n\", error.original);\n             }\n+        }\n+        return ret;\n+    } else if (command == \"dump\") {\n+        std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, /* create= */ false);\n+        if (!wallet_instance) return false;\n+        bilingual_str error;\n+        bool ret = DumpWallet(wallet_instance, error);\n+        if (!ret && !error.empty()) {\n+            tfm::format(std::cerr, \"%s\\n\", error.original);\n             return ret;\n         }\n+        tfm::format(std::cout, \"The dumpfile may contain private keys. To ensure the safety of your Bitcoin, do not share the dumpfile.\\n\");\n+        return ret;\n+    } else if (command == \"createfromdump\") {\n+        bilingual_str error;\n+        std::vector<bilingual_str> warnings;\n+        bool ret = CreateFromDump(name, path, error, warnings);\n+        for (const auto& warning : warnings) {\n+            tfm::format(std::cout, \"%s\\n\", warning.original);",
    "path": "src/wallet/wallettool.cpp",
    "position": 95,
    "original_position": 80,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "47b4599b7b1483c1523588e47989eae6369fb0b5",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Warnings should typically go to stderr.",
    "created_at": "2020-11-19T22:38:03Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r527251029",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527251029"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r527251029"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527251029/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 177,
    "original_line": 177,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527251531",
    "pull_request_review_id": 534915921,
    "id": 527251531,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1MTUzMQ==",
    "diff_hunk": "@@ -109,32 +110,63 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n {\n     fs::path path = fs::absolute(name, GetWalletDir());\n \n+    // -format is only allowed with createfromdump. Disallow it for all other commands.\n+    if (gArgs.IsArgSet(\"-format\") && command != \"createfromdump\") {\n+        tfm::format(std::cerr, \"The -format option can only be used with the \\\"createfromdump\\\" command.\\n\");\n+        return false;\n+    }\n+    // -dumpfile is only allowed with dump and createfromdump. Disallow it for all other commands.\n+    if (gArgs.IsArgSet(\"-dumpfile\") && command != \"dump\" && command != \"createfromdump\") {\n+        tfm::format(std::cerr, \"The -dumpfile option can only be used with the \\\"dump\\\" and \\\"createfromdump\\\" commands.\\n\");\n+        return false;\n+    }\n+\n     if (command == \"create\") {\n         std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, /* create= */ true);\n         if (wallet_instance) {\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Close();\n         }\n-    } else if (command == \"info\" || command == \"salvage\") {\n-        if (command == \"info\") {\n-            std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, /* create= */ false);\n-            if (!wallet_instance) return false;\n-            WalletShowInfo(wallet_instance.get());\n-            wallet_instance->Close();\n-        } else if (command == \"salvage\") {\n-            bilingual_str error;\n-            std::vector<bilingual_str> warnings;\n-            bool ret = RecoverDatabaseFile(path, error, warnings);\n-            if (!ret) {\n-                for (const auto& warning : warnings) {\n-                    tfm::format(std::cerr, \"%s\\n\", warning.original);\n-                }\n-                if (!error.empty()) {\n-                    tfm::format(std::cerr, \"%s\\n\", error.original);\n-                }\n+    } else if (command == \"info\") {\n+        std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, /* create= */ false);\n+        if (!wallet_instance) return false;\n+        WalletShowInfo(wallet_instance.get());\n+        wallet_instance->Close();\n+    } else if (command == \"salvage\") {\n+        bilingual_str error;\n+        std::vector<bilingual_str> warnings;\n+        bool ret = RecoverDatabaseFile(path, error, warnings);\n+        if (!ret) {\n+            for (const auto& warning : warnings) {\n+                tfm::format(std::cerr, \"%s\\n\", warning.original);\n+            }\n+            if (!error.empty()) {\n+                tfm::format(std::cerr, \"%s\\n\", error.original);\n             }\n+        }\n+        return ret;\n+    } else if (command == \"dump\") {\n+        std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, /* create= */ false);\n+        if (!wallet_instance) return false;\n+        bilingual_str error;\n+        bool ret = DumpWallet(wallet_instance, error);\n+        if (!ret && !error.empty()) {\n+            tfm::format(std::cerr, \"%s\\n\", error.original);\n             return ret;\n         }\n+        tfm::format(std::cout, \"The dumpfile may contain private keys. To ensure the safety of your Bitcoin, do not share the dumpfile.\\n\");",
    "path": "src/wallet/wallettool.cpp",
    "position": 88,
    "original_position": 73,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "47b4599b7b1483c1523588e47989eae6369fb0b5",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Better to send this to stderr too, in case dumping to stdout (which can always be done with `-dumpfile /dev/stdout` even if not explicitly supported)",
    "created_at": "2020-11-19T22:39:11Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r527251531",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527251531"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r527251531"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/527251531/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 170,
    "original_line": 170,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544126240",
    "pull_request_review_id": 553480028,
    "id": 544126240,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyNjI0MA==",
    "diff_hunk": "@@ -0,0 +1,14 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_DUMP_H\n+#define BITCOIN_WALLET_DUMP_H\n+\n+class CWallet;\n+\n+struct bilingual_str;\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error);",
    "path": "src/wallet/dump.h",
    "position": null,
    "original_position": 12,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "75ac0ad9ac664d50a779ba9e8fdffb1371997046",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n./wallet/dump.h:12:17: error: use of undeclared identifier 'std'\r\nbool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error);\r\n                ^\r\n",
    "created_at": "2020-12-16T09:03:57Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r544126240",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544126240"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r544126240"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544126240/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 12,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544132696",
    "pull_request_review_id": 553480028,
    "id": 544132696,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzMjY5Ng==",
    "diff_hunk": "@@ -0,0 +1,14 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_DUMP_H\n+#define BITCOIN_WALLET_DUMP_H\n+\n+class CWallet;\n+\n+struct bilingual_str;\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error);",
    "path": "src/wallet/dump.h",
    "position": null,
    "original_position": 12,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "75ac0ad9ac664d50a779ba9e8fdffb1371997046",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also, is there any reason to pass a shared_ptr, when a reference suffices?\r\n\r\nSuggested diff for first commit:\r\n\r\n```diff\r\ndiff --git a/src/wallet/dump.cpp b/src/wallet/dump.cpp\r\nindex 242d8dc31c..2e366b2a19 100644\r\n--- a/src/wallet/dump.cpp\r\n+++ b/src/wallet/dump.cpp\r\n@@ -2,13 +2,15 @@\r\n // Distributed under the MIT software license, see the accompanying\r\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n \r\n+#include <wallet/dump.h>\r\n+\r\n #include <util/translation.h>\r\n #include <wallet/wallet.h>\r\n \r\n static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\r\n uint32_t DUMP_VERSION = 1;\r\n \r\n-bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\r\n+bool DumpWallet(CWallet& wallet, bilingual_str& error)\r\n {\r\n     // Get the dumpfile\r\n     std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\r\n@@ -32,7 +34,7 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\r\n \r\n     CHashWriter hasher(0, 0);\r\n \r\n-    WalletDatabase& db = wallet->GetDatabase();\r\n+    WalletDatabase& db = wallet.GetDatabase();\r\n     std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\r\n \r\n     bool ret = true;\r\n@@ -52,7 +54,6 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\r\n     hasher.write(line.data(), line.size());\r\n \r\n     if (ret) {\r\n-\r\n         // Read the records\r\n         while (true) {\r\n             CDataStream ss_key(SER_DISK, CLIENT_VERSION);\r\n@@ -78,7 +79,7 @@ bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error)\r\n     batch.reset();\r\n \r\n     // Close the wallet after we're done with it. The caller won't be doing this\r\n-    wallet->Close();\r\n+    wallet.Close();\r\n \r\n     if (ret) {\r\n         // Write the hash\r\ndiff --git a/src/wallet/dump.h b/src/wallet/dump.h\r\nindex a62c388b72..0f17ee1d0d 100644\r\n--- a/src/wallet/dump.h\r\n+++ b/src/wallet/dump.h\r\n@@ -9,6 +9,6 @@ class CWallet;\r\n \r\n struct bilingual_str;\r\n \r\n-bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error);\r\n+bool DumpWallet(CWallet& wallet, bilingual_str& error);\r\n \r\n #endif // BITCOIN_WALLET_DUMP_H\r\ndiff --git a/src/wallet/wallettool.cpp b/src/wallet/wallettool.cpp\r\nindex 1fed63b755..f78ebd4376 100644\r\n--- a/src/wallet/wallettool.cpp\r\n+++ b/src/wallet/wallettool.cpp\r\n@@ -149,7 +149,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\r\n         std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, /* create= */ false);\r\n         if (!wallet_instance) return false;\r\n         bilingual_str error;\r\n-        bool ret = DumpWallet(wallet_instance, error);\r\n+        bool ret = DumpWallet(*wallet_instance, error);\r\n         if (!ret && !error.empty()) {\r\n             tfm::format(std::cerr, \"%s\\n\", error.original);\r\n             return ret;\r\n",
    "created_at": "2020-12-16T09:13:54Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r544132696",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544132696"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r544132696"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544132696/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 12,
    "side": "RIGHT",
    "in_reply_to_id": 544126240
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544492574",
    "pull_request_review_id": 553927955,
    "id": 544492574,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5MjU3NA==",
    "diff_hunk": "@@ -0,0 +1,14 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_DUMP_H\n+#define BITCOIN_WALLET_DUMP_H\n+\n+class CWallet;\n+\n+struct bilingual_str;\n+\n+bool DumpWallet(std::shared_ptr<CWallet> wallet, bilingual_str& error);",
    "path": "src/wallet/dump.h",
    "position": null,
    "original_position": 12,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "75ac0ad9ac664d50a779ba9e8fdffb1371997046",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-12-16T17:37:44Z",
    "updated_at": "2020-12-16T17:37:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r544492574",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544492574"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r544492574"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544492574/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 12,
    "side": "RIGHT",
    "in_reply_to_id": 544126240
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545091767",
    "pull_request_review_id": 554605202,
    "id": 545091767,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA5MTc2Nw==",
    "diff_hunk": "@@ -106,6 +107,12 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n {\n     fs::path path = fs::absolute(name, GetWalletDir());\n \n+    // -dumpfile is only allowed with dump and createfromdump. Disallow it for all other commands.\n+    if (gArgs.IsArgSet(\"-dumpfile\") && command != \"dump\" && command != \"createfromdump\") {",
    "path": "src/wallet/wallettool.cpp",
    "position": 18,
    "original_position": 13,
    "commit_id": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "original_commit_id": "e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"wallettool: Add dump command\" (e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4)\r\n\r\nFor a followup, it would be good to print an error in the `if (gArgs.IsArgSet(\"-descriptors\") && command != \"create\")` case so there is an explicit error if someone tries to pass `-descriptors`/`-nodescriptors` to `createfromdump`. (Suggested originally in S3RK's PR https://github.com/bitcoin/bitcoin/pull/20365#discussion_r534395176)",
    "created_at": "2020-12-17T13:32:17Z",
    "updated_at": "2020-12-17T13:34:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r545091767",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545091767"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19137#discussion_r545091767"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19137"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545091767/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 116,
    "original_line": 111,
    "side": "RIGHT"
  }
]