[
  {
    "sha": "e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWU3YTkwZDVmMDYxNmE0NmZmYWRkNjJhOWYxYzY1NDA2Y2NhNmI0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-01T20:31:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-12-16T17:32:47Z"
      },
      "message": "wallettool: Add dump command\n\nAdds a new dump command to bitcoin-wallet which prints out all of the\nwallet's records in hex.",
      "tree": {
        "sha": "04cbbcb640810668c7ecee5f89acf4dad51e9bd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04cbbcb640810668c7ecee5f89acf4dad51e9bd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad3d4b3929ab19ab5b0623a1153279ec9bd21ea1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad3d4b3929ab19ab5b0623a1153279ec9bd21ea1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad3d4b3929ab19ab5b0623a1153279ec9bd21ea1"
      }
    ],
    "stats": {
      "total": 176,
      "additions": 154,
      "deletions": 22
    },
    "files": [
      {
        "sha": "48efdb24cd23c07b3a2acfcd4cf88e0f60e90979",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4",
        "patch": "@@ -249,6 +249,7 @@ BITCOIN_CORE_H = \\\n   wallet/context.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n+  wallet/dump.h \\\n   wallet/feebumper.h \\\n   wallet/fees.h \\\n   wallet/ismine.h \\\n@@ -361,6 +362,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/context.cpp \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n+  wallet/dump.cpp \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\\n   wallet/interfaces.cpp \\"
      },
      {
        "sha": "87f08376748872663b2e9c4f130eac34d020de4c",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4",
        "patch": "@@ -27,13 +27,15 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file.\", ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for create\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n \n     argsman.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     argsman.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     argsman.AddArg(\"salvage\", \"Attempt to recover private keys from a corrupt wallet. Warning: 'salvage' is experimental.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddArg(\"dump\", \"Print out all of the wallet key-value records\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n }\n \n static bool WalletAppInit(int argc, char* argv[])"
      },
      {
        "sha": "0d82863de14d687f5e2113d4a814c7a19d067853",
        "filename": "src/wallet/dump.cpp",
        "status": "added",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4/src/wallet/dump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4/src/wallet/dump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/dump.cpp?ref=e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4",
        "patch": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/dump.h>\n+\n+#include <util/translation.h>\n+#include <wallet/wallet.h>\n+\n+static const std::string DUMP_MAGIC = \"BITCOIN_CORE_WALLET_DUMP\";\n+uint32_t DUMP_VERSION = 1;\n+\n+bool DumpWallet(CWallet& wallet, bilingual_str& error)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use dump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path path = dump_filename;\n+    path = fs::absolute(path);\n+    if (fs::exists(path)) {\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        return false;\n+    }\n+    fsbridge::ofstream dump_file;\n+    dump_file.open(path);\n+    if (dump_file.fail()) {\n+        error = strprintf(_(\"Unable to open %s for writing\"), path.string());\n+        return false;\n+    }\n+\n+    CHashWriter hasher(0, 0);\n+\n+    WalletDatabase& db = wallet.GetDatabase();\n+    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+\n+    bool ret = true;\n+    if (!batch->StartCursor()) {\n+        error = _(\"Error: Couldn't create cursor into database\");\n+        ret = false;\n+    }\n+\n+    // Write out a magic string with version\n+    std::string line = strprintf(\"%s,%u\\n\", DUMP_MAGIC, DUMP_VERSION);\n+    dump_file.write(line.data(), line.size());\n+    hasher.write(line.data(), line.size());\n+\n+    // Write out the file format\n+    line = strprintf(\"%s,%s\\n\", \"format\", db.Format());\n+    dump_file.write(line.data(), line.size());\n+    hasher.write(line.data(), line.size());\n+\n+    if (ret) {\n+\n+        // Read the records\n+        while (true) {\n+            CDataStream ss_key(SER_DISK, CLIENT_VERSION);\n+            CDataStream ss_value(SER_DISK, CLIENT_VERSION);\n+            bool complete;\n+            ret = batch->ReadAtCursor(ss_key, ss_value, complete);\n+            if (complete) {\n+                ret = true;\n+                break;\n+            } else if (!ret) {\n+                error = _(\"Error reading next record from wallet database\");\n+                break;\n+            }\n+            std::string key_str = HexStr(ss_key);\n+            std::string value_str = HexStr(ss_value);\n+            line = strprintf(\"%s,%s\\n\", key_str, value_str);\n+            dump_file.write(line.data(), line.size());\n+            hasher.write(line.data(), line.size());\n+        }\n+    }\n+\n+    batch->CloseCursor();\n+    batch.reset();\n+\n+    // Close the wallet after we're done with it. The caller won't be doing this\n+    wallet.Close();\n+\n+    if (ret) {\n+        // Write the hash\n+        tfm::format(dump_file, \"checksum,%s\\n\", HexStr(hasher.GetHash()));\n+        dump_file.close();\n+    } else {\n+        // Remove the dumpfile on failure\n+        dump_file.close();\n+        fs::remove(path);\n+    }\n+\n+    return ret;\n+}"
      },
      {
        "sha": "0f17ee1d0dc313a3f6737a054870611c912d6ff2",
        "filename": "src/wallet/dump.h",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4/src/wallet/dump.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4/src/wallet/dump.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/dump.h?ref=e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4",
        "patch": "@@ -0,0 +1,14 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_DUMP_H\n+#define BITCOIN_WALLET_DUMP_H\n+\n+class CWallet;\n+\n+struct bilingual_str;\n+\n+bool DumpWallet(CWallet& wallet, bilingual_str& error);\n+\n+#endif // BITCOIN_WALLET_DUMP_H"
      },
      {
        "sha": "39dad871840c7536d75c7142116c089798f6ffa6",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 22,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4",
        "patch": "@@ -5,6 +5,7 @@\n #include <fs.h>\n #include <util/system.h>\n #include <util/translation.h>\n+#include <wallet/dump.h>\n #include <wallet/salvage.h>\n #include <wallet/wallet.h>\n #include <wallet/walletutil.h>\n@@ -106,6 +107,12 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n {\n     fs::path path = fs::absolute(name, GetWalletDir());\n \n+    // -dumpfile is only allowed with dump and createfromdump. Disallow it for all other commands.\n+    if (gArgs.IsArgSet(\"-dumpfile\") && command != \"dump\" && command != \"createfromdump\") {\n+        tfm::format(std::cerr, \"The -dumpfile option can only be used with the \\\"dump\\\" and \\\"createfromdump\\\" commands.\\n\");\n+        return false;\n+    }\n+\n     if (command == \"create\") {\n         DatabaseOptions options;\n         options.require_create = true;\n@@ -119,33 +126,44 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Close();\n         }\n-    } else if (command == \"info\" || command == \"salvage\") {\n-        if (command == \"info\") {\n-            DatabaseOptions options;\n-            options.require_existing = true;\n-            std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n-            if (!wallet_instance) return false;\n-            WalletShowInfo(wallet_instance.get());\n-            wallet_instance->Close();\n-        } else if (command == \"salvage\") {\n+    } else if (command == \"info\") {\n+        DatabaseOptions options;\n+        options.require_existing = true;\n+        std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n+        if (!wallet_instance) return false;\n+        WalletShowInfo(wallet_instance.get());\n+        wallet_instance->Close();\n+    } else if (command == \"salvage\") {\n #ifdef USE_BDB\n-            bilingual_str error;\n-            std::vector<bilingual_str> warnings;\n-            bool ret = RecoverDatabaseFile(path, error, warnings);\n-            if (!ret) {\n-                for (const auto& warning : warnings) {\n-                    tfm::format(std::cerr, \"%s\\n\", warning.original);\n-                }\n-                if (!error.empty()) {\n-                    tfm::format(std::cerr, \"%s\\n\", error.original);\n-                }\n+        bilingual_str error;\n+        std::vector<bilingual_str> warnings;\n+        bool ret = RecoverDatabaseFile(path, error, warnings);\n+        if (!ret) {\n+            for (const auto& warning : warnings) {\n+                tfm::format(std::cerr, \"%s\\n\", warning.original);\n             }\n-            return ret;\n+            if (!error.empty()) {\n+                tfm::format(std::cerr, \"%s\\n\", error.original);\n+            }\n+        }\n+        return ret;\n #else\n-            tfm::format(std::cerr, \"Salvage command is not available as BDB support is not compiled\");\n-            return false;\n+        tfm::format(std::cerr, \"Salvage command is not available as BDB support is not compiled\");\n+        return false;\n #endif\n+    } else if (command == \"dump\") {\n+        DatabaseOptions options;\n+        options.require_existing = true;\n+        std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n+        if (!wallet_instance) return false;\n+        bilingual_str error;\n+        bool ret = DumpWallet(*wallet_instance, error);\n+        if (!ret && !error.empty()) {\n+            tfm::format(std::cerr, \"%s\\n\", error.original);\n+            return ret;\n         }\n+        tfm::format(std::cout, \"The dumpfile may contain private keys. To ensure the safety of your Bitcoin, do not share the dumpfile.\\n\");\n+        return ret;\n     } else {\n         tfm::format(std::cerr, \"Invalid command: %s\\n\", command);\n         return false;"
      }
    ]
  },
  {
    "sha": "a88c320041bd1cd1786b2dfd9ab698a67c2a57c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODhjMzIwMDQxYmQxY2QxNzg2YjJkZmQ5YWI2OThhNjdjMmE1N2M2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-01T22:00:22Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-12-16T17:33:06Z"
      },
      "message": "wallettool: Add createfromdump command\n\nCreates a new wallet file using the dump file produced by the dump\ncommand",
      "tree": {
        "sha": "4068ec0a74df5218029732b74752036afd362c70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4068ec0a74df5218029732b74752036afd362c70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a88c320041bd1cd1786b2dfd9ab698a67c2a57c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a88c320041bd1cd1786b2dfd9ab698a67c2a57c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a88c320041bd1cd1786b2dfd9ab698a67c2a57c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a88c320041bd1cd1786b2dfd9ab698a67c2a57c6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1e7a90d5f0616a46ffadd62a9f1c65406cca6b4"
      }
    ],
    "stats": {
      "total": 209,
      "additions": 208,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0f8d312c5e629f848ecb4de47c84f0ac52086810",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a88c320041bd1cd1786b2dfd9ab698a67c2a57c6/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a88c320041bd1cd1786b2dfd9ab698a67c2a57c6/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=a88c320041bd1cd1786b2dfd9ab698a67c2a57c6",
        "patch": "@@ -27,15 +27,17 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file.\", ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for create\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\". Only used with 'createfromdump'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n \n     argsman.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     argsman.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     argsman.AddArg(\"salvage\", \"Attempt to recover private keys from a corrupt wallet. Warning: 'salvage' is experimental.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     argsman.AddArg(\"dump\", \"Print out all of the wallet key-value records\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddArg(\"createfromdump\", \"Create new wallet file from dumped records\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n }\n \n static bool WalletAppInit(int argc, char* argv[])"
      },
      {
        "sha": "e314107988bdda410ffc5f583a91b6acd0fd25c3",
        "filename": "src/wallet/dump.cpp",
        "status": "modified",
        "additions": 186,
        "deletions": 0,
        "changes": 186,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a88c320041bd1cd1786b2dfd9ab698a67c2a57c6/src/wallet/dump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a88c320041bd1cd1786b2dfd9ab698a67c2a57c6/src/wallet/dump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/dump.cpp?ref=a88c320041bd1cd1786b2dfd9ab698a67c2a57c6",
        "patch": "@@ -94,3 +94,189 @@ bool DumpWallet(CWallet& wallet, bilingual_str& error)\n \n     return ret;\n }\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Close();\n+    delete wallet;\n+}\n+\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+{\n+    // Get the dumpfile\n+    std::string dump_filename = gArgs.GetArg(\"-dumpfile\", \"\");\n+    if (dump_filename.empty()) {\n+        error = _(\"No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.\");\n+        return false;\n+    }\n+\n+    fs::path dump_path = dump_filename;\n+    dump_path = fs::absolute(dump_path);\n+    if (!fs::exists(dump_path)) {\n+        error = strprintf(_(\"Dump file %s does not exist.\"), dump_path.string());\n+        return false;\n+    }\n+    fsbridge::ifstream dump_file(dump_path);\n+\n+    // Compute the checksum\n+    CHashWriter hasher(0, 0);\n+    uint256 checksum;\n+\n+    // Check the magic and version\n+    std::string magic_key;\n+    std::getline(dump_file, magic_key, ',');\n+    std::string version_value;\n+    std::getline(dump_file, version_value, '\\n');\n+    if (magic_key != DUMP_MAGIC) {\n+        error = strprintf(_(\"Error: Dumpfile identifier record is incorrect. Got \\\"%s\\\", expected \\\"%s\\\".\"), magic_key, DUMP_MAGIC);\n+        dump_file.close();\n+        return false;\n+    }\n+    // Check the version number (value of first record)\n+    uint32_t ver;\n+    if (!ParseUInt32(version_value, &ver)) {\n+        error =strprintf(_(\"Error: Unable to parse version %u as a uint32_t\"), version_value);\n+        dump_file.close();\n+        return false;\n+    }\n+    if (ver != DUMP_VERSION) {\n+        error = strprintf(_(\"Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version %s\"), version_value);\n+        dump_file.close();\n+        return false;\n+    }\n+    std::string magic_hasher_line = strprintf(\"%s,%s\\n\", magic_key, version_value);\n+    hasher.write(magic_hasher_line.data(), magic_hasher_line.size());\n+\n+    // Get the stored file format\n+    std::string format_key;\n+    std::getline(dump_file, format_key, ',');\n+    std::string format_value;\n+    std::getline(dump_file, format_value, '\\n');\n+    if (format_key != \"format\") {\n+        error = strprintf(_(\"Error: Dumpfile format record is incorrect. Got \\\"%s\\\", expected \\\"format\\\".\"), format_key);\n+        dump_file.close();\n+        return false;\n+    }\n+    // Get the data file format with format_value as the default\n+    std::string file_format = gArgs.GetArg(\"-format\", format_value);\n+    if (file_format.empty()) {\n+        error = _(\"No wallet file format provided. To use createfromdump, -format=<format> must be provided.\");\n+        return false;\n+    }\n+    DatabaseFormat data_format;\n+    if (file_format == \"bdb\") {\n+        data_format = DatabaseFormat::BERKELEY;\n+    } else if (file_format == \"sqlite\") {\n+        data_format = DatabaseFormat::SQLITE;\n+    } else {\n+        error = strprintf(_(\"Unknown wallet file format \\\"%s\\\" provided. Please provide one of \\\"bdb\\\" or \\\"sqlite\\\".\"), file_format);\n+        return false;\n+    }\n+    if (file_format != format_value) {\n+        warnings.push_back(strprintf(_(\"Warning: Dumpfile wallet format \\\"%s\\\" does not match command line specified format \\\"%s\\\".\"), format_value, file_format));\n+    }\n+    std::string format_hasher_line = strprintf(\"%s,%s\\n\", format_key, format_value);\n+    hasher.write(format_hasher_line.data(), format_hasher_line.size());\n+\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    options.require_create = true;\n+    options.require_format = data_format;\n+    std::unique_ptr<WalletDatabase> database = MakeDatabase(wallet_path, options, status, error);\n+    if (!database) return false;\n+\n+    // dummy chain interface\n+    bool ret = true;\n+    std::shared_ptr<CWallet> wallet(new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet);\n+    {\n+        LOCK(wallet->cs_wallet);\n+        bool first_run = true;\n+        DBErrors load_wallet_ret = wallet->LoadWallet(first_run);\n+        if (load_wallet_ret != DBErrors::LOAD_OK) {\n+            error = strprintf(_(\"Error creating %s\"), name);\n+            return false;\n+        }\n+\n+        // Get the database handle\n+        WalletDatabase& db = wallet->GetDatabase();\n+        std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\n+        batch->TxnBegin();\n+\n+        // Read the records from the dump file and write them to the database\n+        while (dump_file.good()) {\n+            std::string key;\n+            std::getline(dump_file, key, ',');\n+            std::string value;\n+            std::getline(dump_file, value, '\\n');\n+\n+            if (key == \"checksum\") {\n+                std::vector<unsigned char> parsed_checksum = ParseHex(value);\n+                std::copy(parsed_checksum.begin(), parsed_checksum.end(), checksum.begin());\n+                break;\n+            }\n+\n+            std::string line = strprintf(\"%s,%s\\n\", key, value);\n+            hasher.write(line.data(), line.size());\n+\n+            if (key.empty() || value.empty()) {\n+                continue;\n+            }\n+\n+            if (!IsHex(key)) {\n+                error = strprintf(_(\"Error: Got key that was not hex: %s\"), key);\n+                ret = false;\n+                break;\n+            }\n+            if (!IsHex(value)) {\n+                error = strprintf(_(\"Error: Got value that was not hex: %s\"), value);\n+                ret = false;\n+                break;\n+            }\n+\n+            std::vector<unsigned char> k = ParseHex(key);\n+            std::vector<unsigned char> v = ParseHex(value);\n+\n+            CDataStream ss_key(k, SER_DISK, CLIENT_VERSION);\n+            CDataStream ss_value(v, SER_DISK, CLIENT_VERSION);\n+\n+            if (!batch->Write(ss_key, ss_value)) {\n+                error = strprintf(_(\"Error: Unable to write record to new wallet\"));\n+                ret = false;\n+                break;\n+            }\n+        }\n+\n+        if (ret) {\n+            uint256 comp_checksum = hasher.GetHash();\n+            if (checksum.IsNull()) {\n+                error = _(\"Error: Missing checksum\");\n+                ret = false;\n+            } else if (checksum != comp_checksum) {\n+                error = strprintf(_(\"Error: Dumpfile checksum does not match. Computed %s, expected %s\"), HexStr(comp_checksum), HexStr(checksum));\n+                ret = false;\n+            }\n+        }\n+\n+        if (ret) {\n+            batch->TxnCommit();\n+        } else {\n+            batch->TxnAbort();\n+        }\n+\n+        batch.reset();\n+\n+        dump_file.close();\n+    }\n+    wallet.reset(); // The pointer deleter will close the wallet for us.\n+\n+    // Remove the wallet dir if we have a failure\n+    if (!ret) {\n+        fs::remove_all(wallet_path);\n+    }\n+\n+    return ret;\n+}"
      },
      {
        "sha": "d0a4f5ef1d65cd8b611eda971b83a9b64a0b2b35",
        "filename": "src/wallet/dump.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a88c320041bd1cd1786b2dfd9ab698a67c2a57c6/src/wallet/dump.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a88c320041bd1cd1786b2dfd9ab698a67c2a57c6/src/wallet/dump.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/dump.h?ref=a88c320041bd1cd1786b2dfd9ab698a67c2a57c6",
        "patch": "@@ -5,10 +5,13 @@\n #ifndef BITCOIN_WALLET_DUMP_H\n #define BITCOIN_WALLET_DUMP_H\n \n+#include <fs.h>\n+\n class CWallet;\n \n struct bilingual_str;\n \n bool DumpWallet(CWallet& wallet, bilingual_str& error);\n+bool CreateFromDump(const std::string& name, const fs::path& wallet_path, bilingual_str& error, std::vector<bilingual_str>& warnings);\n \n #endif // BITCOIN_WALLET_DUMP_H"
      },
      {
        "sha": "fe3fcb32c2699d59c8e2f3c86e6c49a11f0fba3a",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a88c320041bd1cd1786b2dfd9ab698a67c2a57c6/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a88c320041bd1cd1786b2dfd9ab698a67c2a57c6/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=a88c320041bd1cd1786b2dfd9ab698a67c2a57c6",
        "patch": "@@ -107,6 +107,11 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n {\n     fs::path path = fs::absolute(name, GetWalletDir());\n \n+    // -format is only allowed with createfromdump. Disallow it for all other commands.\n+    if (gArgs.IsArgSet(\"-format\") && command != \"createfromdump\") {\n+        tfm::format(std::cerr, \"The -format option can only be used with the \\\"createfromdump\\\" command.\\n\");\n+        return false;\n+    }\n     // -dumpfile is only allowed with dump and createfromdump. Disallow it for all other commands.\n     if (gArgs.IsArgSet(\"-dumpfile\") && command != \"dump\" && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -dumpfile option can only be used with the \\\"dump\\\" and \\\"createfromdump\\\" commands.\\n\");\n@@ -164,6 +169,17 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n         }\n         tfm::format(std::cout, \"The dumpfile may contain private keys. To ensure the safety of your Bitcoin, do not share the dumpfile.\\n\");\n         return ret;\n+    } else if (command == \"createfromdump\") {\n+        bilingual_str error;\n+        std::vector<bilingual_str> warnings;\n+        bool ret = CreateFromDump(name, path, error, warnings);\n+        for (const auto& warning : warnings) {\n+            tfm::format(std::cout, \"%s\\n\", warning.original);\n+        }\n+        if (!ret && !error.empty()) {\n+            tfm::format(std::cerr, \"%s\\n\", error.original);\n+        }\n+        return ret;\n     } else {\n         tfm::format(std::cerr, \"Invalid command: %s\\n\", command);\n         return false;"
      }
    ]
  },
  {
    "sha": "23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2NhYzI0ZGQzZjJhYWY4OGFhYjk3OGU3ZWY0OTA1NzcyODE1Y2Qy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-01T22:22:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-12-16T17:33:09Z"
      },
      "message": "tests: Test bitcoin-wallet dump and createfromdump",
      "tree": {
        "sha": "e856130b82a18f1d3ab45f918dbc48f9902e9b42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e856130b82a18f1d3ab45f918dbc48f9902e9b42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23cac24dd3f2aaf88aab978e7ef4905772815cd2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23cac24dd3f2aaf88aab978e7ef4905772815cd2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23cac24dd3f2aaf88aab978e7ef4905772815cd2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a88c320041bd1cd1786b2dfd9ab698a67c2a57c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a88c320041bd1cd1786b2dfd9ab698a67c2a57c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a88c320041bd1cd1786b2dfd9ab698a67c2a57c6"
      }
    ],
    "stats": {
      "total": 161,
      "additions": 161,
      "deletions": 0
    },
    "files": [
      {
        "sha": "10939829295cc1fb691220a1992e4dcdb9819fac",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 161,
        "deletions": 0,
        "changes": 161,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23cac24dd3f2aaf88aab978e7ef4905772815cd2/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23cac24dd3f2aaf88aab978e7ef4905772815cd2/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=23cac24dd3f2aaf88aab978e7ef4905772815cd2",
        "patch": "@@ -10,6 +10,8 @@\n import subprocess\n import textwrap\n \n+from collections import OrderedDict\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n@@ -96,6 +98,89 @@ def get_expected_info_output(self, name=\"\", transactions=0, keypool=2, address=0\n                 Address Book: %d\n             ''' % (wallet_name, keypool, transactions, address * output_types))\n \n+    def read_dump(self, filename):\n+        dump = OrderedDict()\n+        with open(filename, \"r\", encoding=\"utf8\") as f:\n+            for row in f:\n+                row = row.strip()\n+                key, value = row.split(',')\n+                dump[key] = value\n+        return dump\n+\n+    def assert_is_sqlite(self, filename):\n+        with open(filename, 'rb') as f:\n+            file_magic = f.read(16)\n+            assert file_magic == b'SQLite format 3\\x00'\n+\n+    def assert_is_bdb(self, filename):\n+        with open(filename, 'rb') as f:\n+            f.seek(12, 0)\n+            file_magic = f.read(4)\n+            assert file_magic == b'\\x00\\x05\\x31\\x62' or file_magic == b'\\x62\\x31\\x05\\x00'\n+\n+    def write_dump(self, dump, filename, magic=None, skip_checksum=False):\n+        if magic is None:\n+            magic = \"BITCOIN_CORE_WALLET_DUMP\"\n+        with open(filename, \"w\", encoding=\"utf8\") as f:\n+            row = \",\".join([magic, dump[magic]]) + \"\\n\"\n+            f.write(row)\n+            for k, v in dump.items():\n+                if k == magic or k == \"checksum\":\n+                    continue\n+                row = \",\".join([k, v]) + \"\\n\"\n+                f.write(row)\n+            if not skip_checksum:\n+                row = \",\".join([\"checksum\", dump[\"checksum\"]]) + \"\\n\"\n+                f.write(row)\n+\n+    def assert_dump(self, expected, received):\n+        e = expected.copy()\n+        r = received.copy()\n+\n+        # BDB will add a \"version\" record that is not present in sqlite\n+        # In that case, we should ignore this record in both\n+        # But because this also effects the checksum, we also need to drop that.\n+        v_key = \"0776657273696f6e\" # Version key\n+        if v_key in e and v_key not in r:\n+            del e[v_key]\n+            del e[\"checksum\"]\n+            del r[\"checksum\"]\n+        if v_key not in e and v_key in r:\n+            del r[v_key]\n+            del e[\"checksum\"]\n+            del r[\"checksum\"]\n+\n+        assert_equal(len(e), len(r))\n+        for k, v in e.items():\n+            assert_equal(v, r[k])\n+\n+    def do_tool_createfromdump(self, wallet_name, dumpfile, file_format=None):\n+        dumppath = os.path.join(self.nodes[0].datadir, dumpfile)\n+        rt_dumppath = os.path.join(self.nodes[0].datadir, \"rt-{}.dump\".format(wallet_name))\n+\n+        dump_data = self.read_dump(dumppath)\n+\n+        args = [\"-wallet={}\".format(wallet_name),\n+                \"-dumpfile={}\".format(dumppath)]\n+        if file_format is not None:\n+            args.append(\"-format={}\".format(file_format))\n+        args.append(\"createfromdump\")\n+\n+        load_output = \"\"\n+        if file_format is not None and file_format != dump_data[\"format\"]:\n+            load_output += \"Warning: Dumpfile wallet format \\\"{}\\\" does not match command line specified format \\\"{}\\\".\\n\".format(dump_data[\"format\"], file_format)\n+        self.assert_tool_output(load_output, *args)\n+        assert os.path.isdir(os.path.join(self.nodes[0].datadir, \"regtest/wallets\", wallet_name))\n+\n+        self.assert_tool_output(\"The dumpfile may contain private keys. To ensure the safety of your Bitcoin, do not share the dumpfile.\\n\", '-wallet={}'.format(wallet_name), '-dumpfile={}'.format(rt_dumppath), 'dump')\n+\n+        rt_dump_data = self.read_dump(rt_dumppath)\n+        wallet_dat = os.path.join(self.nodes[0].datadir, \"regtest/wallets/\", wallet_name, \"wallet.dat\")\n+        if rt_dump_data[\"format\"] == \"bdb\":\n+            self.assert_is_bdb(wallet_dat)\n+        else:\n+            self.assert_is_sqlite(wallet_dat)\n+\n     def test_invalid_tool_commands_and_args(self):\n         self.log.info('Testing that various invalid commands raise with specific error messages')\n         self.assert_raises_tool_error('Invalid command: foo', 'foo')\n@@ -228,6 +313,81 @@ def test_salvage(self):\n \n         self.assert_tool_output('', '-wallet=salvage', 'salvage')\n \n+    def test_dump_createfromdump(self):\n+        self.start_node(0)\n+        self.nodes[0].createwallet(\"todump\")\n+        file_format = self.nodes[0].get_wallet_rpc(\"todump\").getwalletinfo()[\"format\"]\n+        self.nodes[0].createwallet(\"todump2\")\n+        self.stop_node(0)\n+\n+        self.log.info('Checking dump arguments')\n+        self.assert_raises_tool_error('No dump file provided. To use dump, -dumpfile=<filename> must be provided.', '-wallet=todump', 'dump')\n+\n+        self.log.info('Checking basic dump')\n+        wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet.dump\")\n+        self.assert_tool_output('The dumpfile may contain private keys. To ensure the safety of your Bitcoin, do not share the dumpfile.\\n', '-wallet=todump', '-dumpfile={}'.format(wallet_dump), 'dump')\n+\n+        dump_data = self.read_dump(wallet_dump)\n+        orig_dump = dump_data.copy()\n+        # Check the dump magic\n+        assert_equal(dump_data['BITCOIN_CORE_WALLET_DUMP'], '1')\n+        # Check the file format\n+        assert_equal(dump_data[\"format\"], file_format)\n+\n+        self.log.info('Checking that a dumpfile cannot be overwritten')\n+        self.assert_raises_tool_error('File {} already exists. If you are sure this is what you want, move it out of the way first.'.format(wallet_dump),  '-wallet=todump2', '-dumpfile={}'.format(wallet_dump), 'dump')\n+\n+        self.log.info('Checking createfromdump arguments')\n+        self.assert_raises_tool_error('No dump file provided. To use createfromdump, -dumpfile=<filename> must be provided.', '-wallet=todump', 'createfromdump')\n+        non_exist_dump = os.path.join(self.nodes[0].datadir, \"wallet.nodump\")\n+        self.assert_raises_tool_error('Unknown wallet file format \"notaformat\" provided. Please provide one of \"bdb\" or \"sqlite\".', '-wallet=todump', '-format=notaformat', '-dumpfile={}'.format(wallet_dump), 'createfromdump')\n+        self.assert_raises_tool_error('Dump file {} does not exist.'.format(non_exist_dump), '-wallet=todump', '-dumpfile={}'.format(non_exist_dump), 'createfromdump')\n+        wallet_path = os.path.join(self.nodes[0].datadir, 'regtest/wallets/todump2')\n+        self.assert_raises_tool_error('Failed to create database path \\'{}\\'. Database already exists.'.format(wallet_path), '-wallet=todump2', '-dumpfile={}'.format(wallet_dump), 'createfromdump')\n+\n+        self.log.info('Checking createfromdump')\n+        self.do_tool_createfromdump(\"load\", \"wallet.dump\")\n+        self.do_tool_createfromdump(\"load-bdb\", \"wallet.dump\", \"bdb\")\n+        self.do_tool_createfromdump(\"load-sqlite\", \"wallet.dump\", \"sqlite\")\n+\n+        self.log.info('Checking createfromdump handling of magic and versions')\n+        bad_ver_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_ver1.dump\")\n+        dump_data[\"BITCOIN_CORE_WALLET_DUMP\"] = \"0\"\n+        self.write_dump(dump_data, bad_ver_wallet_dump)\n+        self.assert_raises_tool_error('Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version 0', '-wallet=badload', '-dumpfile={}'.format(bad_ver_wallet_dump), 'createfromdump')\n+        assert not os.path.isdir(os.path.join(self.nodes[0].datadir, \"regtest/wallets\", \"badload\"))\n+        bad_ver_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_ver2.dump\")\n+        dump_data[\"BITCOIN_CORE_WALLET_DUMP\"] = \"2\"\n+        self.write_dump(dump_data, bad_ver_wallet_dump)\n+        self.assert_raises_tool_error('Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version 2', '-wallet=badload', '-dumpfile={}'.format(bad_ver_wallet_dump), 'createfromdump')\n+        assert not os.path.isdir(os.path.join(self.nodes[0].datadir, \"regtest/wallets\", \"badload\"))\n+        bad_magic_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_magic.dump\")\n+        del dump_data[\"BITCOIN_CORE_WALLET_DUMP\"]\n+        dump_data[\"not_the_right_magic\"] = \"1\"\n+        self.write_dump(dump_data, bad_magic_wallet_dump, \"not_the_right_magic\")\n+        self.assert_raises_tool_error('Error: Dumpfile identifier record is incorrect. Got \"not_the_right_magic\", expected \"BITCOIN_CORE_WALLET_DUMP\".', '-wallet=badload', '-dumpfile={}'.format(bad_magic_wallet_dump), 'createfromdump')\n+        assert not os.path.isdir(os.path.join(self.nodes[0].datadir, \"regtest/wallets\", \"badload\"))\n+\n+        self.log.info('Checking createfromdump handling of checksums')\n+        bad_sum_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_sum1.dump\")\n+        dump_data = orig_dump.copy()\n+        checksum = dump_data[\"checksum\"]\n+        dump_data[\"checksum\"] = \"1\" * 64\n+        self.write_dump(dump_data, bad_sum_wallet_dump)\n+        self.assert_raises_tool_error('Error: Dumpfile checksum does not match. Computed {}, expected {}'.format(checksum, \"1\" * 64), '-wallet=bad', '-dumpfile={}'.format(bad_sum_wallet_dump), 'createfromdump')\n+        assert not os.path.isdir(os.path.join(self.nodes[0].datadir, \"regtest/wallets\", \"badload\"))\n+        bad_sum_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_sum2.dump\")\n+        del dump_data[\"checksum\"]\n+        self.write_dump(dump_data, bad_sum_wallet_dump, skip_checksum=True)\n+        self.assert_raises_tool_error('Error: Missing checksum', '-wallet=badload', '-dumpfile={}'.format(bad_sum_wallet_dump), 'createfromdump')\n+        assert not os.path.isdir(os.path.join(self.nodes[0].datadir, \"regtest/wallets\", \"badload\"))\n+        bad_sum_wallet_dump = os.path.join(self.nodes[0].datadir, \"wallet-bad_sum3.dump\")\n+        dump_data[\"checksum\"] = \"2\" * 10\n+        self.write_dump(dump_data, bad_sum_wallet_dump)\n+        self.assert_raises_tool_error('Error: Dumpfile checksum does not match. Computed {}, expected {}{}'.format(checksum, \"2\" * 10, \"0\" * 54), '-wallet=badload', '-dumpfile={}'.format(bad_sum_wallet_dump), 'createfromdump')\n+        assert not os.path.isdir(os.path.join(self.nodes[0].datadir, \"regtest/wallets\", \"badload\"))\n+\n+\n     def run_test(self):\n         self.wallet_path = os.path.join(self.nodes[0].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename)\n         self.test_invalid_tool_commands_and_args()\n@@ -239,6 +399,7 @@ def run_test(self):\n         if not self.options.descriptors:\n             # Salvage is a legacy wallet only thing\n             self.test_salvage()\n+        self.test_dump_createfromdump()\n \n if __name__ == '__main__':\n     ToolWalletTest().main()"
      }
    ]
  }
]