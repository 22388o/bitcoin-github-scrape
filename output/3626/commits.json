[
  {
    "sha": "a70df083e2fc14dc33c4fc257dbb16734191f63c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzBkZjA4M2UyZmMxNGRjMzNjNGZjMjU3ZGJiMTY3MzQxOTFmNjNj",
    "commit": {
      "author": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-04T20:36:43Z"
      },
      "committer": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-04T20:36:43Z"
      },
      "message": "[Qt] Issue #2862 Fixed: Receive Tab > 'Amount' table column could not be resized.",
      "tree": {
        "sha": "8a744a20d51e69c34634c315b553e3a8e7258ab5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a744a20d51e69c34634c315b553e3a8e7258ab5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a70df083e2fc14dc33c4fc257dbb16734191f63c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a70df083e2fc14dc33c4fc257dbb16734191f63c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a70df083e2fc14dc33c4fc257dbb16734191f63c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a70df083e2fc14dc33c4fc257dbb16734191f63c/comments",
    "author": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15ec451554b5889a92651b9fe71bf01047ba9fc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15ec451554b5889a92651b9fe71bf01047ba9fc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15ec451554b5889a92651b9fe71bf01047ba9fc3"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 103,
      "deletions": 9
    },
    "files": [
      {
        "sha": "87af40694642d4f80d97f4943b5d68b75899ef2f",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 86,
        "deletions": 8,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a70df083e2fc14dc33c4fc257dbb16734191f63c/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a70df083e2fc14dc33c4fc257dbb16734191f63c/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=a70df083e2fc14dc33c4fc257dbb16734191f63c",
        "patch": "@@ -54,6 +54,29 @@ ReceiveCoinsDialog::ReceiveCoinsDialog(QWidget *parent) :\n     connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));\n }\n \n+//recent request table's header signals\n+void ReceiveCoinsDialog::connectRecentRequestsViewHeadersSignals() \n+{\n+    connect(ui->recentRequestsView->horizontalHeader(),SIGNAL(sectionResized(int,int,int)),this,SLOT(on_sectionResized()));\n+    connect(ui->recentRequestsView->horizontalHeader(),SIGNAL(geometriesChanged()),this,SLOT(on_geometriesChanged()));\n+}\n+\n+//we need to disconnect these while handling the resize events, otherwise we can enter an infinite loop\n+void ReceiveCoinsDialog::disconnectRecentRequestsViewHeadersSignals() \n+{\n+    disconnect(ui->recentRequestsView->horizontalHeader(),SIGNAL(sectionResized(int,int,int)),this,SLOT(on_sectionResized()));\n+    disconnect(ui->recentRequestsView->horizontalHeader(),SIGNAL(geometriesChanged()),this,SLOT(on_geometriesChanged()));\n+}\n+\n+//setup the resize mode, handles compatibility for QT5 and below as the method signatures changed. (refactored here for readability)\n+void ReceiveCoinsDialog::setRecentRequestViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode) {\n+#if QT_VERSION < 0x050000\n+    ui->recentRequestsView->horizontalHeader()->setResizeMode(logicalIndex, resizeMode);\n+#else\n+    ui->recentRequestsView->horizontalHeader()->setSectionResizeMode(logicalIndex, resizeMode);\n+#endif\n+}\n+\n void ReceiveCoinsDialog::setModel(WalletModel *model)\n {\n     this->model = model;\n@@ -63,20 +86,23 @@ void ReceiveCoinsDialog::setModel(WalletModel *model)\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n         updateDisplayUnit();\n \n+        ui->recentRequestsView->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);\n         ui->recentRequestsView->setModel(model->getRecentRequestsTableModel());\n         ui->recentRequestsView->setAlternatingRowColors(true);\n         ui->recentRequestsView->setSelectionBehavior(QAbstractItemView::SelectRows);\n         ui->recentRequestsView->setSelectionMode(QAbstractItemView::ContiguousSelection);\n-        ui->recentRequestsView->horizontalHeader()->resizeSection(RecentRequestsTableModel::Date, 130);\n-        ui->recentRequestsView->horizontalHeader()->resizeSection(RecentRequestsTableModel::Label, 120);\n-#if QT_VERSION < 0x050000\n-        ui->recentRequestsView->horizontalHeader()->setResizeMode(RecentRequestsTableModel::Message, QHeaderView::Stretch);\n-#else\n-        ui->recentRequestsView->horizontalHeader()->setSectionResizeMode(RecentRequestsTableModel::Message, QHeaderView::Stretch);\n-#endif\n-        ui->recentRequestsView->horizontalHeader()->resizeSection(RecentRequestsTableModel::Amount, 100);\n+        ui->recentRequestsView->setColumnWidth(RecentRequestsTableModel::Date, DATE_COLUMN_WIDTH);\n+        ui->recentRequestsView->setColumnWidth(RecentRequestsTableModel::Label, LABEL_COLUMN_WIDTH);\n+\t//(last 2 columns are set when the table geometry is ready)\n+\n+        setRecentRequestViewHeaderResizeMode(RecentRequestsTableModel::Message, QHeaderView::Interactive);\n+        setRecentRequestViewHeaderResizeMode(RecentRequestsTableModel::Amount, QHeaderView::Fixed);\n+\n+        //this honors a minimum size while resizing for all columns. Wish they had a method for a single column.\n+        ui->recentRequestsView->horizontalHeader()->setMinimumSectionSize(MINIMUM_COLUMN_WIDTH);\n \n         model->getRecentRequestsTableModel()->sort(RecentRequestsTableModel::Date, Qt::DescendingOrder);\n+        connectRecentRequestsViewHeadersSignals(); //now we're ready to handle events on the table header.\n     }\n }\n \n@@ -185,6 +211,58 @@ void ReceiveCoinsDialog::on_removeRequestButton_clicked()\n     model->getRecentRequestsTableModel()->removeRows(firstIndex.row(), selection.length(), firstIndex.parent());\n }\n \n+//given a column index, returns the maximum allowable width by substracting the other column's widths from the table's width\n+//NOTE: works only for the two columns we care for: The last (\"Amount\"), and second to last (\"Message\").\n+//      if given another column number, it will always return the remaining width for the last column (\"Amount\")\n+int ReceiveCoinsDialog::getRemainingWidthForColumn(int column) \n+{\n+    int nResult = AMOUNT_MINIMUM_COLUMN_WIDTH;\n+\n+    QTableView* recentRequestsTableView = ui->recentRequestsView;\n+    QHeaderView* headerView = recentRequestsTableView->horizontalHeader();\n+    int nTableWidth = recentRequestsTableView->width();\n+\n+    if (nTableWidth > 0) \n+    {\n+        int nOtherColsWidth = headerView->sectionSize(RecentRequestsTableModel::Date);\n+        nOtherColsWidth += headerView->sectionSize(RecentRequestsTableModel::Label);\n+        nOtherColsWidth += headerView->sectionSize(column == RecentRequestsTableModel::Amount ? RecentRequestsTableModel::Message : RecentRequestsTableModel::Amount);\n+        nResult = std::max(nResult, nTableWidth - nOtherColsWidth);\n+    }\n+\n+    return nResult;\n+}\n+\n+\n+//make sure we don't make the columns wider than the table's viewport's width.\n+void ReceiveCoinsDialog::adjustRecentRequestsColumnsWidth()\n+{\n+    disconnectRecentRequestsViewHeadersSignals(); \n+    ui->recentRequestsView->setColumnWidth(RecentRequestsTableModel::Amount, getRemainingWidthForColumn(RecentRequestsTableModel::Amount));\n+    ui->recentRequestsView->setColumnWidth(RecentRequestsTableModel::Message, getRemainingWidthForColumn(RecentRequestsTableModel::Message));\n+    connectRecentRequestsViewHeadersSignals(); \n+}\n+\n+//when a section is resized this is a slot-proxy for ajustAmountColumnWidth()\n+void ReceiveCoinsDialog::on_sectionResized()\n+{\n+    adjustRecentRequestsColumnsWidth();\n+}\n+\n+//when the table's geometry is ready, we manually perform the Stretch of the \"Message\" column\n+//as the \"Stretch\" resize mode does not allow for interactive resizing.\n+void ReceiveCoinsDialog::on_geometriesChanged()\n+{\n+    ui->recentRequestsView->setColumnWidth(RecentRequestsTableModel::Amount, AMOUNT_MINIMUM_COLUMN_WIDTH);\n+    ui->recentRequestsView->setColumnWidth(RecentRequestsTableModel::Message, getRemainingWidthForColumn(RecentRequestsTableModel::Message));\n+}\n+\n+//We override the virtual resizeEvent of the QWidget to adjust tablet's column sizes as the table's width is proportional to the dialog's.\n+void ReceiveCoinsDialog::resizeEvent(QResizeEvent* event) {\n+  QWidget::resizeEvent(event);\n+  adjustRecentRequestsColumnsWidth();\n+}\n+\n void ReceiveCoinsDialog::keyPressEvent(QKeyEvent *event)\n {\n     if (event->key() == Qt::Key_Return)"
      },
      {
        "sha": "3c158e038cb42350ea461d1031345b539147be93",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a70df083e2fc14dc33c4fc257dbb16734191f63c/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a70df083e2fc14dc33c4fc257dbb16734191f63c/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=a70df083e2fc14dc33c4fc257dbb16734191f63c",
        "patch": "@@ -10,6 +10,7 @@\n #include <QMenu>\n #include <QPoint>\n #include <QVariant>\n+#include <QHeaderView>\n \n namespace Ui {\n     class ReceiveCoinsDialog;\n@@ -27,11 +28,18 @@ class ReceiveCoinsDialog : public QDialog\n     Q_OBJECT\n \n public:\n+    enum ColumnWidths {\n+      DATE_COLUMN_WIDTH = 130,\n+      LABEL_COLUMN_WIDTH = 120,\n+      AMOUNT_MINIMUM_COLUMN_WIDTH = 160,\n+      MINIMUM_COLUMN_WIDTH = 130\n+    };\n+\n     explicit ReceiveCoinsDialog(QWidget *parent = 0);\n     ~ReceiveCoinsDialog();\n-\n     void setModel(WalletModel *model);\n \n+\n public slots:\n     void clear();\n     void reject();\n@@ -45,12 +53,20 @@ public slots:\n     WalletModel *model;\n     QMenu *contextMenu;\n     void copyColumnToClipboard(int column);\n+    int  getRemainingWidthForColumn(int column);\n+    void adjustRecentRequestsColumnsWidth();\n+    void connectRecentRequestsViewHeadersSignals();\n+    void disconnectRecentRequestsViewHeadersSignals();\n+    void setRecentRequestViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode);\n+    virtual void resizeEvent(QResizeEvent* event);\n \n private slots:\n     void on_receiveButton_clicked();\n     void on_showRequestButton_clicked();\n     void on_removeRequestButton_clicked();\n     void on_recentRequestsView_doubleClicked(const QModelIndex &index);\n+    void on_sectionResized();\n+    void on_geometriesChanged();\n     void updateDisplayUnit();\n     void showMenu(const QPoint &);\n     void copyLabel();"
      }
    ]
  },
  {
    "sha": "8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmVlYjBhOGNkY2MzNGUxNWMwNzM5ZTBkNDMxNzkyMjNhOGZiMmI0",
    "commit": {
      "author": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-04T20:37:30Z"
      },
      "committer": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-04T20:37:30Z"
      },
      "message": "Merge branch 'master' into QT-issue-2862-last-coumn-cannot-be-resized",
      "tree": {
        "sha": "dd5593ff909c14272918e36a35a6684a384d649f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd5593ff909c14272918e36a35a6684a384d649f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/comments",
    "author": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a70df083e2fc14dc33c4fc257dbb16734191f63c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a70df083e2fc14dc33c4fc257dbb16734191f63c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a70df083e2fc14dc33c4fc257dbb16734191f63c"
      },
      {
        "sha": "f30fbbfbd69b39dfbf770b997e2809303c935868",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f30fbbfbd69b39dfbf770b997e2809303c935868",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f30fbbfbd69b39dfbf770b997e2809303c935868"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 29,
      "deletions": 7
    },
    "files": [
      {
        "sha": "48b27aa26dddc1fca042a51306b99e9797fdc56e",
        "filename": "contrib/gitian-descriptors/boost-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/contrib/gitian-descriptors/boost-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/contrib/gitian-descriptors/boost-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/boost-linux.yml?ref=8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4",
        "patch": "@@ -6,6 +6,7 @@ architectures:\n - \"i386\"\n - \"amd64\"\n packages:\n+- \"g++\"\n - \"unzip\"\n - \"pkg-config\"\n - \"libtool\""
      },
      {
        "sha": "12c3179ea107ce8efed1dc6be7d9a4a43bb826ef",
        "filename": "contrib/gitian-descriptors/deps-linux.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/contrib/gitian-descriptors/deps-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/contrib/gitian-descriptors/deps-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/deps-linux.yml?ref=8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4",
        "patch": "@@ -6,6 +6,7 @@ architectures:\n - \"i386\"\n - \"amd64\"\n packages:\n+- \"g++\"\n - \"unzip\"\n - \"zip\"\n - \"pkg-config\"\n@@ -50,7 +51,7 @@ script: |\n   tar xjfm qrencode-3.4.3.tar.bz2\n   cd qrencode-3.4.3\n   #   need --with-pic to avoid relocation error in 64 bit builds\n-  ./configure --prefix=$STAGING --enable-static --disable-shared -with-pic --without-tools\n+  ./configure --prefix=$STAGING --enable-static --disable-shared --with-pic --without-tools --disable-maintainer-mode --disable-dependency-tracking\n   make $MAKEOPTS install\n   cd ..\n   #"
      },
      {
        "sha": "13d3a86fd944f4353fc8d752e4bfbc0633bb5e19",
        "filename": "contrib/gitian-descriptors/deps-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/contrib/gitian-descriptors/deps-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/contrib/gitian-descriptors/deps-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/deps-win.yml?ref=8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4",
        "patch": "@@ -107,7 +107,7 @@ script: |\n     #\n     tar xjf $INDIR/qrencode-3.4.3.tar.bz2\n     cd qrencode-3.4.3\n-    png_CFLAGS=\"-I$INSTALLPREFIX/include\" png_LIBS=\"-L$INSTALLPREFIX/lib -lpng\" ./configure --prefix=$INSTALLPREFIX --host=$HOST\n+    png_CFLAGS=\"-I$INSTALLPREFIX/include\" png_LIBS=\"-L$INSTALLPREFIX/lib -lpng\" ./configure --prefix=$INSTALLPREFIX --host=$HOST --enable-static --disable-shared --without-tools --disable-maintainer-mode --disable-dependency-tracking\n     make\n     make install\n     cd .."
      },
      {
        "sha": "329f4c6b49f6fde9a8ad24bb69c66a4a993c4c11",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4",
        "patch": "@@ -6,6 +6,7 @@ architectures:\n - \"i386\"\n - \"amd64\"\n packages: \n+- \"g++\"\n - \"libqt4-dev\"\n - \"git-core\"\n - \"unzip\""
      },
      {
        "sha": "db0966c2011f4f126317592bcb3ca377e32b807f",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4",
        "patch": "@@ -22,8 +22,8 @@ remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files:\n-- \"qt-win32-5.2.0-gitian-r1.zip\"\n-- \"qt-win64-5.2.0-gitian-r1.zip\"\n+- \"qt-win32-5.2.0-gitian-r2.zip\"\n+- \"qt-win64-5.2.0-gitian-r2.zip\"\n - \"boost-win32-1.55.0-gitian-r6.zip\"\n - \"boost-win64-1.55.0-gitian-r6.zip\"\n - \"bitcoin-deps-win32-gitian-r10.zip\"\n@@ -36,6 +36,14 @@ script: |\n   INDIR=$HOME/build\n   OPTFLAGS='-O2'\n   NEEDDIST=1\n+  # Qt: workaround for determinism in resource ordering\n+  #  Qt5's rcc uses a QHash to store the files for the resource.\n+  #  A security fix in QHash makes the ordering of keys to be different on every run\n+  #  (https://qt.gitorious.org/qt/qtbase/commit/c01eaa438200edc9a3bbcd8ae1e8ded058bea268).\n+  #  This is good in general but qrc shouldn't be doing a traversal over a randomized container.\n+  #  The thorough solution would be to use QMap instead of QHash, but this requires patching Qt.\n+  #  For now luckily there is a test mode that forces a fixed seed.\n+  export QT_RCC_TEST=1\n   for BITS in 32 64; do # for architectures\n     #\n     STAGING=$HOME/staging${BITS}\n@@ -49,7 +57,7 @@ script: |\n     mkdir -p $STAGING $BUILDDIR $BINDIR\n     #\n     cd $STAGING\n-    unzip $INDIR/qt-win${BITS}-5.2.0-gitian-r1.zip\n+    unzip $INDIR/qt-win${BITS}-5.2.0-gitian-r2.zip\n     unzip $INDIR/boost-win${BITS}-1.55.0-gitian-r6.zip\n     unzip $INDIR/bitcoin-deps-win${BITS}-gitian-r10.zip\n     unzip $INDIR/protobuf-win${BITS}-2.5.0-gitian-r4.zip"
      },
      {
        "sha": "fed39cbc7cfd110eb47f79924b674b5458fc8c9d",
        "filename": "contrib/gitian-descriptors/qt-win.yml",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/contrib/gitian-descriptors/qt-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/contrib/gitian-descriptors/qt-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/qt-win.yml?ref=8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4",
        "patch": "@@ -21,6 +21,14 @@ script: |\n   # Defines\n   export TZ=UTC\n   INDIR=$HOME/build\n+  # Qt: workaround for determinism in resource ordering\n+  #  Qt5's rcc uses a QHash to store the files for the resource.\n+  #  A security fix in QHash makes the ordering of keys to be different on every run\n+  #  (https://qt.gitorious.org/qt/qtbase/commit/c01eaa438200edc9a3bbcd8ae1e8ded058bea268).\n+  #  This is good in general but qrc shouldn't be doing a traversal over a randomized container.\n+  #  The thorough solution would be to use QMap instead of QHash, but this requires patching Qt.\n+  #  For now luckily there is a test mode that forces a fixed seed.\n+  export QT_RCC_TEST=1\n   # Integrity Check\n   echo \"395ec72277c5786c65b8163ef5817fd03d0a1f524a6d47f53624baf8056f1081  qt-everywhere-opensource-src-5.2.0.tar.gz\" | sha256sum -c\n \n@@ -71,7 +79,7 @@ script: |\n \n     # as zip stores file timestamps, use faketime to intercept stat calls to set dates for all files to reference date\n     export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n-    zip -r $OUTDIR/qt-win${BITS}-5.2.0-gitian-r1.zip *\n+    zip -r $OUTDIR/qt-win${BITS}-5.2.0-gitian-r2.zip *\n     unset LD_PRELOAD\n     unset FAKETIME\n   done # for BITS in"
      },
      {
        "sha": "fcb9a37f3d53d944c2083323816895e4e74c9ba7",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4",
        "patch": "@@ -69,7 +69,7 @@ Instructions: Homebrew\n \n #### Install dependencies using Homebrew\n \n-        brew install autoconf automake berkeley-db4 boost miniupnpc openssl pkg-config protobuf\n+        brew install autoconf automake berkeley-db4 boost miniupnpc openssl pkg-config protobuf qt\n \n Note: After you have installed the dependencies, you should check that the Homebrew installed version of OpenSSL is the one available for compilation. You can check this by typing\n "
      },
      {
        "sha": "c1dbd916b323cdbcd7ca94d141ca64e4cac0ac08",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4",
        "patch": "@@ -73,6 +73,9 @@ void OptionsModel::Init()\n #ifdef ENABLE_WALLET\n     if (!settings.contains(\"nTransactionFee\"))\n         settings.setValue(\"nTransactionFee\", 0);\n+    nTransactionFee = settings.value(\"nTransactionFee\").toLongLong(); // if -paytxfee is set, this will be overridden later in init.cpp\n+    if (mapArgs.count(\"-paytxfee\"))\n+        strOverriddenByCommandLine += \"-paytxfee \";\n #endif\n \n     if (!settings.contains(\"nDatabaseCache\"))"
      }
    ]
  },
  {
    "sha": "b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2E0MGJmYzBjYjRjOWUwMThhYmIwNTQ2NzJmNTgyZGY3YWE2MWE4",
    "commit": {
      "author": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-09T18:06:51Z"
      },
      "committer": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-09T18:06:51Z"
      },
      "message": "Merge https://github.com/bitcoin/bitcoin into QT-issue-2862-last-coumn-cannot-be-resized",
      "tree": {
        "sha": "8a28e728119316a4a1b000c19a34804d0fda165c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a28e728119316a4a1b000c19a34804d0fda165c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/comments",
    "author": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8feeb0a8cdcc34e15c0739e0d43179223a8fb2b4"
      },
      {
        "sha": "b19bcb752bc19f7b6780fd8c099bb3d79e4d7cc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b19bcb752bc19f7b6780fd8c099bb3d79e4d7cc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b19bcb752bc19f7b6780fd8c099bb3d79e4d7cc9"
      }
    ],
    "stats": {
      "total": 446,
      "additions": 322,
      "deletions": 124
    },
    "files": [
      {
        "sha": "4f623f6c645090c469358190888fb412f38d17c5",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -16,7 +16,7 @@ OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n OSX_PLIST=$(top_srcdir)/share/qt/Info.plist #not installed\n \n-DIST_DOCS = $(wildcard doc/*.md)\n+DIST_DOCS = $(wildcard doc/*.md) $(wildcard doc/release-notes/*.md)\n \n WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n   $(top_srcdir)/share/pixmaps/nsis-header.bmp \\"
      },
      {
        "sha": "3ed4549a88f12fb5fdc11c9f8c175bf84719ed73",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -303,8 +303,8 @@ if test x$use_hardening != xno; then\n \n   AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n   AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [LDFLAGS=\"-Wl,-z,relro\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [LDFLAGS=\"-Wl,-z,now\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"])\n \n   if test x$TARGET_OS != xwindows; then\n     # -pie will link successfully with MinGW, but it's unsupported and leads to undeterministic binaries"
      },
      {
        "sha": "40bb26e28ecc8cbef1c7b8281aeab474e66a306c",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 282,
        "deletions": 2,
        "changes": 284,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -1,3 +1,283 @@\n-(note: this is a temporary file, to be added-to by anybody, and moved to\n-release-notes at release time)\n+Bitcoin Core version 0.9.0rc1 is now available from:\n \n+  http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.9.0rc1/\n+\n+This is a release candidate for a new major version. A major version brings\n+both new features and bug fixes.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  https://github.com/bitcoin/bitcoin/issues\n+\n+How to Upgrade\n+--------------\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), uninstall all\n+earlier versions of Bitcoin, then run the installer (on Windows) or just copy\n+over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).\n+\n+If you are upgrading from version 0.7.2 or earlier, the first time you run\n+0.9.0 your blockchain files will be re-indexed, which will take anywhere from\n+30 minutes to several hours, depending on the speed of your machine.\n+\n+On Windows, do not forget to uninstall all earlier versions of the Bitcoin\n+client first, especially if you are switching to the 64-bit version.\n+\n+Windows 64-bit installer\n+-------------------------\n+\n+New in 0.9.0 is the Windows 64-bit version of the client. There have been\n+frequent reports of users running out of virtual memory on 32-bit systems\n+during the initial sync. Because of this it is recommended to install the\n+64-bit version if your system supports it.\n+\n+Rebranding to Bitcoin Core\n+---------------------------\n+\n+To reduce confusion between Bitcoin-the-network and Bitcoin-the-software we\n+have renamed the reference client to Bitcoin Core.\n+\n+Autotools build system\n+-----------------------\n+\n+For 0.9.0 we switched to an autotools-based build system instead of individual\n+(q)makefiles.\n+\n+Using the standard \u201c./autogen.sh; ./configure; make\u201d to build Bitcoin-Qt and\n+bitcoind makes it easier for experienced open source developers to contribute\n+to the project.\n+\n+Be sure to check doc/build-*.md for your platform before building from source.\n+\n+Bitcoin-cli\n+-------------\n+\n+Another change in the 0.9 release is moving away from the bitcoind executable\n+functioning both as a server and as a RPC client. The RPC client functionality\n+(\u201ctell the running bitcoin daemon to do THIS\u201d) was split into a separate\n+executable, 'bitcoin-cli'. The RPC client code will eventually be removed from\n+bitcoind, but will be kept for backwards compatibility for a release or two.\n+\n+0.9.0rc1 Release notes\n+=======================\n+\n+RPC:\n+\n+- 'listreceivedbyaddress' now provides tx ids\n+- Updated help and tests for 'getreceivedby(account|address)'\n+- In 'getblock', accept 2nd 'verbose' parameter, similar to getrawtransaction,\n+  but defaulting to 1 for backward compatibility\n+- Add 'verifychain', to verify chain database at runtime\n+- Add 'dumpwallet' and 'importwallet' RPCs\n+- 'keypoolrefill' gains optional size parameter\n+- Add 'getbestblockhash', to return tip of best chain\n+- Add 'chainwork' (the total work done by all blocks since the genesis block)\n+  to 'getblock' output\n+- Make RPC password resistant to timing attacks\n+- Clarify help messages and add examples\n+- Add 'getrawchangeaddress' call for raw transaction change destinations\n+- Reject insanely high fees by default in 'sendrawtransaction'\n+- Add RPC call 'decodescript' to decode a hex-encoded transaction script\n+- Make 'validateaddress' provide redeemScript\n+- Add 'getnetworkhashps' to get the calculated network hashrate\n+- New RPC 'ping' command to request ping, new 'pingtime' and 'pingwait' fields\n+  in 'getpeerinfo' output\n+- Adding new 'addrlocal' field to 'getpeerinfo' output\n+- Add verbose boolean to 'getrawmempool'\n+- Add rpc command 'getunconfirmedbalance' to obtain total unconfirmed balance\n+- Explicitly ensure that wallet is unlocked in `importprivkey`\n+- Add check for valid keys in `importprivkey`\n+\n+Command-line options:\n+\n+- Rename option '-tor' to '-onion' to better reflect what it does\n+- Add '-disablewallet' mode to let bitcoind run entirely without wallet (when\n+  built with wallet)\n+- Update default '-rpcsslciphers' to include TLSv1.2\n+- make '-logtimestamps' default on and rework help-message\n+- RPC client option: '-rpcwait', to wait for server start\n+- Remove '-logtodebugger'\n+- Allow `-noserver` with bitcoind\n+\n+Block-chain handling and storage:\n+\n+- Update leveldb to 1.15\n+- Check for correct genesis (prevent cases where a datadir from the wrong\n+  network is accidentally loaded)\n+- Allow txindex to be removed and add a reindex dialog\n+- Log aborted block database rebuilds\n+- Store orphan blocks in serialized form, to save memory\n+- Limit the number of orphan blocks in memory to 750\n+- Fix non-standard disconnected transactions causing mempool orphans\n+- Add a new checkpoint at block 279,000\n+\n+Wallet:\n+\n+- Store key creation time. Calculate whole-wallet birthday.\n+- Optimize rescan to skip blocks prior to birthday\n+- Let user select wallet file with -wallet=foo.dat\n+- Consider generated coins mature at 101 instead of 120 blocks\n+- Improve wallet load time\n+- Don't count txins for priority to encourage sweeping\n+- Don't create empty transactions when reading a corrupted wallet\n+- Fix rescan to start from beginning after importprivkey\n+- Only create signatures with low S values.\n+\n+Mining:\n+\n+- Increase default -blockmaxsize/prioritysize to 750K/50K\n+- 'getblocktemplate' does not require a key to create a block template\n+\n+Protocol and network:\n+\n+- Send tx relay flag with version\n+- New 'reject' P2P message (BIP 0061, see https://gist.github.com/gavinandresen/7079034 for draft)\n+- Dump addresses every 15 minutes instead of 10 seconds\n+- Relay OP_RETURN data TxOut as standard transaction type\n+- Remove CENT-output free transaction rule when relaying\n+- Lower maximum size for free transaction creation\n+- Send multiple inv messages if mempool.size > MAX_INV_SZ\n+- Split MIN_PROTO_VERSION into INIT_PROTO_VERSION and MIN_PEER_PROTO_VERSION\n+- Do not treat fFromMe transaction differently when broadcasting\n+- Process received messages one at a time without sleeping between messages\n+- Improve logging of failed connections\n+- Bump protocol version to 70002\n+- Add some additional logging to give extra network insight\n+- Added new DNS seed from bitcoinstats.com\n+\n+Validation:\n+\n+- Log reason for non-standard transaction rejection\n+- Prune provably-unspendable outputs, and adapt consistency check for it.\n+- Detect any sufficiently long fork and add a warning\n+- Call the -alertnotify script when we see a long or invalid fork\n+- Fix multi-block reorg transaction resurrection\n+- Reject non-canonically-encoded serialization sizes\n+- Reject dust amounts during validation\n+- Accept nLockTime transactions that finalize in the next block\n+\n+Build system:\n+\n+- Switch to autotools-based build system\n+- Build without wallet by passing `--disable-wallet` to configure, this removes\n+  the BerkeleyDB dependency\n+- Upgrade gitian dependencies (libpng, libz, libupnpc, boost, openssl) to more\n+  recent versions\n+- Windows 64-bit build support\n+- Solaris compatibility fixes\n+- Check integrity of gitian input source tarballs\n+- Enable full GCC Stack-smashing protection for all OSes\n+\n+GUI:\n+\n+- Switch to Qt 5.2.0 for Windows build\n+- Add payment request (BIP 0070) support\n+- Improve options dialog\n+- Show transaction fee in new send confirmation dialog\n+- Add total balance in overview page\n+- Allow user to choose data directory on first start, when data directory is\n+  missing, or when the -choosedatadir option is passed\n+- Save and restore window positions\n+- Add vout index to transaction id in transactions details dialog\n+- Add network traffic graph in debug window\n+- Add open URI dialog\n+- Add Coin Control Features\n+- Improve receive coins workflow: make the 'Receive' tab into a form to request\n+  payments, and move historical address list functionality to File menu.\n+- Rebrand to `Bitcoin Core`\n+- Move initialization/shutdown to a thread. This prevents \u201cNot responding\u201d\n+  messages during startup. Also show a window during shutdown.\n+- Don't regenerate autostart link on every client startup\n+- Show and store message of normal bitcoin:URI\n+- Fix richtext detection hang issue on very old Qt versions\n+- osx: Make use of the 10.8+ user notification center to display growl like\n+       notifications\n+- osx: Added NSHighResolutionCapable flag to Info.plist for better font\n+       rendering on Retina displays.\n+- osx: Fix bitcoin-qt startup crash when clicking dock icon\n+- linux: Fix Gnome bitcoin: URI handler\n+\n+Miscellaneous:\n+\n+- Add Linux script (contrib/qos/tc.sh) to limit outgoing bandwidth\n+- Add '-regtest' mode, similar to testnet but private with instant block\n+  generation with 'setgenerate' RPC.\n+- Add 'linearize.py' script to contrib, for creating bootstrap.dat\n+- Add separate bitcoin-cli client\n+\n+Credits\n+--------\n+\n+Thanks to everyone who contributed to this release:\n+\n+- Andrey\n+- bitsofproof\n+- Brandon Dahler\n+- Christian Decker\n+- Christopher Latham\n+- Chuck\n+- coblee\n+- constantined\n+- Cory Fields\n+- Cozz Lovan\n+- Daniel Larimer\n+- David Hill\n+- Dmitry Smirnov\n+- Eric Lombrozo\n+- fanquake\n+- fcicq\n+- Florin\n+- Gavin Andresen\n+- Gregory Maxwell\n+- Guillermo C\u00e9spedes Tab\u00e1rez\n+- HaltingState\n+- Han Lin Yap\n+- harry\n+- Jeff Garzik\n+- Johnathan Corgan\n+- Jonas Schnelli\n+- Josh Lehan\n+- Josh Triplett\n+- Julian Langschaedel\n+- Kangmo\n+- Lake Denman\n+- Luke Dashjr\n+- Mark Friedenbach\n+- Matt Corallo\n+- Michael Bauer\n+- Michael Ford\n+- Michagogo\n+- Mike Hearn\n+- Nils Schneider\n+- Olivier Langlois\n+- patrick s\n+- Patrick Strateman\n+- Peter Todd\n+- phantomcircuit\n+- phelixbtc\n+- Philip Kaufmann\n+- Pieter Wuille\n+- Rav3nPL\n+- regergregregerrge\n+- Robert Backhaus\n+- Roman Mindalev\n+- Rune K. Svendsen\n+- Ryan Niebur\n+- Scott Ellis\n+- Scott Willeke\n+- Sergey Kazenyuk\n+- Shawn Wilkinson\n+- Sined\n+- sje\n+- super3\n+- Tamas Blummer\n+- theuni\n+- Thomas Holenstein\n+- Timon Rapp\n+- Timothy Stranex\n+- Vaclav Vobornik\n+- vhf / victor felder\n+- Vinnie Falco\n+- Warren Togami\n+- Wladimir J. van der Laan"
      },
      {
        "sha": "eea9ba2a2c3c88b7fa5ac3b8f138f8ae39a59b75",
        "filename": "doc/release-notes/release-notes-0.8.2.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/doc/release-notes/release-notes-0.8.2.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/doc/release-notes/release-notes-0.8.2.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.8.2.md?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -74,7 +74,7 @@ Command-line options\n JSON-RPC API changes\n \n * fixed a getblocktemplate bug that caused excessive CPU creating blocks.\n-* listunspent now lists account and address infromation.\n+* listunspent now lists account and address information.\n * getinfo now also returns the time adjustment estimated from your peers.\n * getpeerinfo now returns bytessent, bytesrecv and syncnode.\n * gettxoutsetinfo returns statistics about the unspent transaction output database."
      },
      {
        "sha": "459819e59699a17a16a329b51a0466ad1af61b37",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -43,7 +43,7 @@ Release Process\n \twget 'https://www.openssl.org/source/openssl-1.0.1e.tar.gz'\n \twget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'\n \twget 'http://zlib.net/zlib-1.2.8.tar.gz'\n-\twget 'ftp://ftp.simplesystems.org/pub/png/src/libpng16/libpng-1.6.8.tar.gz'\n+\twget 'ftp://ftp.simplesystems.org/pub/png/src/history/libpng16/libpng-1.6.8.tar.gz'\n \twget 'https://fukuchi.org/works/qrencode/qrencode-3.4.3.tar.bz2'\n \twget 'https://downloads.sourceforge.net/project/boost/boost/1.55.0/boost_1_55_0.tar.bz2'\n \twget 'https://svn.boost.org/trac/boost/raw-attachment/ticket/7262/boost-mingw.patch' -O \\ "
      },
      {
        "sha": "b5eb91e12ef44c4de01c27ec87ca9945a9cee9bb",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -11,7 +11,7 @@ configure Tor.\n ---------------------------------\n \n The first step is running Bitcoin behind a Tor proxy. This will already make all\n-outgoing connections be anonimized, but more is possible.\n+outgoing connections be anonymized, but more is possible.\n \n \t-socks=5        SOCKS5 supports connecting-to-hostname, which can be used instead\n \t                of doing a (leaking) local DNS lookup. SOCKS5 is the default,"
      },
      {
        "sha": "d33ad2fa9508b32939b3f830e567e6978e87aaa8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 1,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -1054,6 +1054,31 @@ uint256 static GetOrphanRoot(const uint256& hash)\n     } while(true);\n }\n \n+// Remove a random orphan block (which does not have any dependent orphans).\n+void static PruneOrphanBlocks()\n+{\n+    if (mapOrphanBlocksByPrev.size() <= MAX_ORPHAN_BLOCKS)\n+        return;\n+\n+    // Pick a random orphan block.\n+    int pos = insecure_rand() % mapOrphanBlocksByPrev.size();\n+    std::multimap<uint256, COrphanBlock*>::iterator it = mapOrphanBlocksByPrev.begin();\n+    while (pos--) it++;\n+\n+    // As long as this block has other orphans depending on it, move to one of those successors.\n+    do {\n+        std::multimap<uint256, COrphanBlock*>::iterator it2 = mapOrphanBlocksByPrev.find(it->second->hashBlock);\n+        if (it2 == mapOrphanBlocksByPrev.end())\n+            break;\n+        it = it2;\n+    } while(1);\n+\n+    uint256 hash = it->second->hashBlock;\n+    delete it->second;\n+    mapOrphanBlocksByPrev.erase(it);\n+    mapOrphanBlocks.erase(hash);\n+}\n+\n int64_t GetBlockValue(int nHeight, int64_t nFees)\n {\n     int64_t nSubsidy = 50 * COIN;\n@@ -2373,10 +2398,11 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n     // If we don't already have its previous block, shunt it off to holding area until we get it\n     if (pblock->hashPrevBlock != 0 && !mapBlockIndex.count(pblock->hashPrevBlock))\n     {\n-        LogPrintf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString());\n+        LogPrintf(\"ProcessBlock: ORPHAN BLOCK %lu, prev=%s\\n\", (unsigned long)mapOrphanBlocks.size(), pblock->hashPrevBlock.ToString());\n \n         // Accept orphans as long as there is a node to request its parents from\n         if (pfrom) {\n+            PruneOrphanBlocks();\n             COrphanBlock* pblock2 = new COrphanBlock();\n             {\n                 CDataStream ss(SER_DISK, CLIENT_VERSION);"
      },
      {
        "sha": "05210e516467a3bf5b3c6a2721eb3b8e4183d101",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -45,6 +45,8 @@ static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** The maximum number of orphan transactions kept in memory */\n static const unsigned int MAX_ORPHAN_TRANSACTIONS = MAX_BLOCK_SIZE/100;\n+/** The maximum number of orphan blocks kept in memory */\n+static const unsigned int MAX_ORPHAN_BLOCKS = 750;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n /** The pre-allocation chunk size for blk?????.dat files (since 0.8) */"
      },
      {
        "sha": "dda79e3d0e1fa7201588a54ea84706fd1ee08e89",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -376,9 +376,6 @@ void BitcoinApplication::initializeResult(int retval)\n     returnValue = retval ? 0 : 1;\n     if(retval)\n     {\n-        // Miscellaneous initialization after core is initialized\n-        optionsModel->Upgrade(); // Must be done after AppInit2\n-\n #ifdef ENABLE_WALLET\n         PaymentServer::LoadRootCAs();\n         paymentServer->setOptionsModel(optionsModel);"
      },
      {
        "sha": "a2a2732b1cedaae17462140185b89d378830424f",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 63,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -130,69 +130,6 @@ void OptionsModel::Reset()\n     // default setting for OptionsModel::StartAtStartup - disabled\n     if (GUIUtil::GetStartOnSystemStartup())\n         GUIUtil::SetStartOnSystemStartup(false);\n-\n-    // Ensure Upgrade() is not running again by setting the bImportFinished flag\n-    settings.setValue(\"bImportFinished\", true);\n-}\n-\n-void OptionsModel::Upgrade()\n-{\n-    QSettings settings;\n-\n-    // Already upgraded\n-    if (settings.contains(\"bImportFinished\"))\n-        return;\n-\n-    settings.setValue(\"bImportFinished\", true);\n-\n-#ifdef ENABLE_WALLET\n-    // Move settings from old wallet.dat (if any):\n-    CWalletDB walletdb(strWalletFile);\n-\n-    QList<QString> intOptions;\n-    intOptions << \"nDisplayUnit\" << \"nTransactionFee\";\n-    foreach(QString key, intOptions)\n-    {\n-        int value = 0;\n-        if (walletdb.ReadSetting(key.toStdString(), value))\n-        {\n-            settings.setValue(key, value);\n-            walletdb.EraseSetting(key.toStdString());\n-        }\n-    }\n-    QList<QString> boolOptions;\n-    boolOptions << \"bDisplayAddresses\" << \"fMinimizeToTray\" << \"fMinimizeOnClose\" << \"fUseProxy\" << \"fUseUPnP\";\n-    foreach(QString key, boolOptions)\n-    {\n-        bool value = false;\n-        if (walletdb.ReadSetting(key.toStdString(), value))\n-        {\n-            settings.setValue(key, value);\n-            walletdb.EraseSetting(key.toStdString());\n-        }\n-    }\n-    try\n-    {\n-        CAddress addrProxyAddress;\n-        if (walletdb.ReadSetting(\"addrProxy\", addrProxyAddress))\n-        {\n-            settings.setValue(\"addrProxy\", addrProxyAddress.ToStringIPPort().c_str());\n-            walletdb.EraseSetting(\"addrProxy\");\n-        }\n-    }\n-    catch (std::ios_base::failure &e)\n-    {\n-        // 0.6.0rc1 saved this as a CService, which causes failure when parsing as a CAddress\n-        CService addrProxy;\n-        if (walletdb.ReadSetting(\"addrProxy\", addrProxy))\n-        {\n-            settings.setValue(\"addrProxy\", addrProxy.ToStringIPPort().c_str());\n-            walletdb.EraseSetting(\"addrProxy\");\n-        }\n-    }\n-#endif\n-\n-    Init();\n }\n \n int OptionsModel::rowCount(const QModelIndex & parent) const"
      },
      {
        "sha": "e5c1e3e8b909d32ce33365331ed64df56686ceae",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -46,9 +46,6 @@ class OptionsModel : public QAbstractListModel\n     void Init();\n     void Reset();\n \n-    /* Migrate settings from wallet.dat after app initialization */\n-    void Upgrade();\n-\n     int rowCount(const QModelIndex & parent = QModelIndex()) const;\n     QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const;\n     bool setData(const QModelIndex & index, const QVariant & value, int role = Qt::EditRole);"
      },
      {
        "sha": "78a92ce1e9d55ba56b3ed5ca53c03592328b8d98",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -410,8 +410,8 @@ Value verifychain(const Array& params, bool fHelp)\n             \"verifychain ( checklevel numblocks )\\n\"\n             \"\\nVerifies blockchain database.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. checklevel   (numeric, optional, default=3) The level\\n\"\n-            \"2. numblocks    (numeric, optional, 288) The number of blocks\\n\"\n+            \"1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.\\n\"\n+            \"2. numblocks    (numeric, optional, default=288, 0=all) The number of blocks to check.\\n\"\n             \"\\nResult:\\n\"\n             \"true|false       (boolean) Verified or not\\n\"\n             \"\\nExamples:\\n\""
      },
      {
        "sha": "d9bcc3429d9c0290b6ffb26480b2c05c3ad45d33",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -47,7 +47,7 @@ Value ping(const Array& params, bool fHelp)\n             \"ping\\n\"\n             \"\\nRequests that a ping be sent to all other nodes, to measure ping time.\\n\"\n             \"Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\\n\"\n-            \"Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\"\n+            \"Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"ping\", \"\")\n             + HelpExampleRpc(\"ping\", \"\")"
      },
      {
        "sha": "70452258252d24ae6e08bcc9e42fd3a8bb55e446",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -1850,9 +1850,9 @@ Value settxfee(const Array& params, bool fHelp)\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n             \"settxfee amount\\n\"\n-            \"\\nSet the transaction fee per KB.\\n\"\n+            \"\\nSet the transaction fee per kB.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. amount         (numeric, required) The transaction fee in BTC/KB rounded to the nearest 0.00000001\\n\"\n+            \"1. amount         (numeric, required) The transaction fee in BTC/kB rounded to the nearest 0.00000001\\n\"\n             \"\\nResult\\n\"\n             \"true|false        (boolean) Returns true if successful\\n\"\n             \"\\nExamples:\\n\""
      },
      {
        "sha": "979560651c64750c3cb1e1d4af01794ccbefa163",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -191,18 +191,6 @@ void CWallet::SetBestChain(const CBlockLocator& loc)\n     walletdb.WriteBestBlock(loc);\n }\n \n-// This class implements an addrIncoming entry that causes pre-0.4\n-// clients to crash on startup if reading a private-key-encrypted wallet.\n-class CCorruptAddress\n-{\n-public:\n-    IMPLEMENT_SERIALIZE\n-    (\n-        if (nType & SER_DISK)\n-            READWRITE(nVersion);\n-    )\n-};\n-\n bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn, bool fExplicit)\n {\n     AssertLockHeld(cs_wallet); // nWalletVersion\n@@ -221,13 +209,6 @@ bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn,\n     if (fFileBacked)\n     {\n         CWalletDB* pwalletdb = pwalletdbIn ? pwalletdbIn : new CWalletDB(strWalletFile);\n-        if (nWalletVersion >= 40000)\n-        {\n-            // Versions prior to 0.4.0 did not support the \"minversion\" record.\n-            // Use a CCorruptAddress to make them crash instead.\n-            CCorruptAddress corruptAddress;\n-            pwalletdb->WriteSetting(\"addrIncoming\", corruptAddress);\n-        }\n         if (nWalletVersion > 40000)\n             pwalletdb->WriteMinVersion(nWalletVersion);\n         if (!pwalletdbIn)"
      },
      {
        "sha": "56349fcfbdb8ca0c3cce607f0fc2da1e14b4aeaa",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -154,12 +154,6 @@ bool CWalletDB::ErasePool(int64_t nPool)\n     return Erase(std::make_pair(std::string(\"pool\"), nPool));\n }\n \n-bool CWalletDB::EraseSetting(const std::string& strKey)\n-{\n-    nWalletDBUpdated++;\n-    return Erase(std::make_pair(std::string(\"setting\"), strKey));\n-}\n-\n bool CWalletDB::WriteMinVersion(int nVersion)\n {\n     return Write(std::string(\"minversion\"), nVersion);"
      },
      {
        "sha": "4f3e29283e830d25639c60338a10cfd4d10ba6e9",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a40bfc0cb4c9e018abb054672f582df7aa61a8/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "patch": "@@ -104,22 +104,6 @@ class CWalletDB : public CDB\n     bool WritePool(int64_t nPool, const CKeyPool& keypool);\n     bool ErasePool(int64_t nPool);\n \n-    // Settings are no longer stored in wallet.dat; these are\n-    // used only for backwards compatibility:\n-    template<typename T>\n-    bool ReadSetting(const std::string& strKey, T& value)\n-    {\n-        return Read(std::make_pair(std::string(\"setting\"), strKey), value);\n-    }\n-    template<typename T>\n-    bool WriteSetting(const std::string& strKey, const T& value)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"setting\"), strKey), value);\n-    }\n- \n-    bool EraseSetting(const std::string& strKey);\n-\n     bool WriteMinVersion(int nVersion);\n \n     bool ReadAccount(const std::string& strAccount, CAccount& account);"
      }
    ]
  },
  {
    "sha": "7a5765e047c06e90a28ad7b3d1ee56c57edd64de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTU3NjVlMDQ3YzA2ZTkwYTI4YWQ3YjNkMWVlNTZjNTdlZGQ2NGRl",
    "commit": {
      "author": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-09T21:55:32Z"
      },
      "committer": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-09T21:55:32Z"
      },
      "message": "Moved all last column resizing logic into a GUIUtils fixer class, encapsulates low level resizing calculations and it is now reusable for other tables.",
      "tree": {
        "sha": "703d1a107abc1562a3ed94587125491f0193ef41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/703d1a107abc1562a3ed94587125491f0193ef41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a5765e047c06e90a28ad7b3d1ee56c57edd64de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a5765e047c06e90a28ad7b3d1ee56c57edd64de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a5765e047c06e90a28ad7b3d1ee56c57edd64de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a5765e047c06e90a28ad7b3d1ee56c57edd64de/comments",
    "author": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7a40bfc0cb4c9e018abb054672f582df7aa61a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7a40bfc0cb4c9e018abb054672f582df7aa61a8"
      }
    ],
    "stats": {
      "total": 221,
      "additions": 137,
      "deletions": 84
    },
    "files": [
      {
        "sha": "19512a1538c6e72ca1bf8d1546a364d63a971aca",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a5765e047c06e90a28ad7b3d1ee56c57edd64de/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a5765e047c06e90a28ad7b3d1ee56c57edd64de/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=7a5765e047c06e90a28ad7b3d1ee56c57edd64de",
        "patch": "@@ -379,6 +379,100 @@ bool ToolTipToRichTextFilter::eventFilter(QObject *obj, QEvent *evt)\n     return QObject::eventFilter(obj, evt);\n }\n \n+//recent request table's header signals\n+void TableViewLastColumnResizingFixer::connectViewHeadersSignals()\n+{\n+    connect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized()));\n+    connect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n+}\n+\n+//we need to disconnect these while handling the resize events, otherwise we can enter an infinite loop\n+void TableViewLastColumnResizingFixer::disconnectViewHeadersSignals()\n+{\n+    disconnect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized()));\n+    disconnect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n+}\n+\n+//setup the resize mode, handles compatibility for QT5 and below as the method signatures changed. (refactored here for readability)\n+void TableViewLastColumnResizingFixer::setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode)\n+{\n+#if QT_VERSION < 0x050000\n+    tableView->horizontalHeader()->setResizeMode(logicalIndex, resizeMode);\n+#else\n+    tableView->horizontalHeader()->setSectionResizeMode(logicalIndex, resizeMode);\n+#endif\n+}\n+\n+int TableViewLastColumnResizingFixer::getWidthSumForOtherColumns(int nColumnIndex)\n+{\n+    int result = 0;\n+    QHeaderView* headerView = tableView->horizontalHeader();\n+\n+    for (int i = 0; i < headerView->count(); i++)\n+    {\n+        if (i!=nColumnIndex) {\n+            result += headerView->sectionSize(i);\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+int TableViewLastColumnResizingFixer::getRemainingWidthForColumn(int column)\n+{\n+    int nResult = lastColumnMinimumWidth;\n+    int nTableWidth = tableView->width();\n+\n+    if (nTableWidth > 0)\n+    {\n+        int nOtherColsWidth = getWidthSumForOtherColumns(column);\n+        nResult = std::max(nResult, nTableWidth - nOtherColsWidth);\n+    }\n+\n+    return nResult;\n+}\n+\n+//make sure we don't make the columns wider than the table's viewport's width.\n+void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()\n+{\n+    disconnectViewHeadersSignals();\n+    tableView->setColumnWidth(lastColumnIndex, getRemainingWidthForColumn(lastColumnIndex));\n+    tableView->setColumnWidth(secondToLastColumnIndex, getRemainingWidthForColumn(secondToLastColumnIndex));\n+    connectViewHeadersSignals();\n+}\n+\n+//when a section is resized this is a slot-proxy for ajustAmountColumnWidth()\n+void TableViewLastColumnResizingFixer::on_sectionResized()\n+{\n+    adjustTableColumnsWidth();\n+}\n+\n+//when the table's geometry is ready, we manually perform the Stretch of the \"Message\" column\n+//as the \"Stretch\" resize mode does not allow for interactive resizing.\n+void TableViewLastColumnResizingFixer::on_geometriesChanged()\n+{\n+    tableView->setColumnWidth(lastColumnIndex, lastColumnMinimumWidth);\n+    tableView->setColumnWidth(secondToLastColumnIndex, getRemainingWidthForColumn(secondToLastColumnIndex));\n+}\n+\n+/**\n+ * Initializes all internal variables and prepares the resize modes of the last 2 columns of the table.\n+ */\n+TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth) :\n+        tableView(table), lastColumnMinimumWidth(lastColMinimumWidth)\n+{\n+\n+    int columnCount = tableView->model()->columnCount();\n+    lastColumnIndex = columnCount - 1;\n+    secondToLastColumnIndex = columnCount - 2;\n+\n+    setViewHeaderResizeMode(secondToLastColumnIndex, QHeaderView::Interactive);\n+    setViewHeaderResizeMode(lastColumnIndex, QHeaderView::Fixed);\n+\n+    tableView->horizontalHeader()->setMinimumSectionSize(lastColMinimumWidth);\n+    connectViewHeadersSignals();\n+}\n+\n #ifdef WIN32\n boost::filesystem::path static StartupShortcutPath()\n {"
      },
      {
        "sha": "027ade789283387d2d5825fa81491062959b0797",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a5765e047c06e90a28ad7b3d1ee56c57edd64de/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a5765e047c06e90a28ad7b3d1ee56c57edd64de/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=7a5765e047c06e90a28ad7b3d1ee56c57edd64de",
        "patch": "@@ -8,6 +8,8 @@\n #include <QMessageBox>\n #include <QObject>\n #include <QString>\n+#include <QTableView>\n+#include <QHeaderView>\n \n class QValidatedLineEdit;\n class SendCoinsRecipient;\n@@ -116,6 +118,40 @@ namespace GUIUtil\n         int size_threshold;\n     };\n \n+    /**\n+     * Makes a QTableView last column feel as if it was being resized from its left border.\n+     * In Qt, all columns are resizable from the right, but it's not intuitive resizing the last column from the right.\n+     * Usually our second to last columns behave as if stretched, and when on strech mode, columns aren't resizable\n+     * interactively or programatically.\n+     *\n+     * This helper object takes care of this issue.\n+     *\n+     */\n+    class TableViewLastColumnResizingFixer: public QObject\n+    {\n+    Q_OBJECT\n+    public:\n+        TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth);\n+\n+        int getRemainingWidthForColumn(int column);\n+        void adjustTableColumnsWidth();\n+        void connectViewHeadersSignals();\n+        void disconnectViewHeadersSignals();\n+        void setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode);\n+\n+    private:\n+        QTableView* tableView;\n+        int lastColumnMinimumWidth;\n+        int lastColumnIndex;\n+        int secondToLastColumnIndex;\n+\n+        int getWidthSumForOtherColumns(int nColumnIndex);\n+\n+    private slots:\n+        void on_sectionResized();\n+        void on_geometriesChanged();\n+    };\n+\n     bool GetStartOnSystemStartup();\n     bool SetStartOnSystemStartup(bool fAutoStart);\n "
      },
      {
        "sha": "f8329e1e006e5fcb48a48a0aae8c74aebf2f32c3",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 77,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a5765e047c06e90a28ad7b3d1ee56c57edd64de/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a5765e047c06e90a28ad7b3d1ee56c57edd64de/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=7a5765e047c06e90a28ad7b3d1ee56c57edd64de",
        "patch": "@@ -54,35 +54,16 @@ ReceiveCoinsDialog::ReceiveCoinsDialog(QWidget *parent) :\n     connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));\n }\n \n-//recent request table's header signals\n-void ReceiveCoinsDialog::connectRecentRequestsViewHeadersSignals() \n-{\n-    connect(ui->recentRequestsView->horizontalHeader(),SIGNAL(sectionResized(int,int,int)),this,SLOT(on_sectionResized()));\n-    connect(ui->recentRequestsView->horizontalHeader(),SIGNAL(geometriesChanged()),this,SLOT(on_geometriesChanged()));\n-}\n-\n-//we need to disconnect these while handling the resize events, otherwise we can enter an infinite loop\n-void ReceiveCoinsDialog::disconnectRecentRequestsViewHeadersSignals() \n-{\n-    disconnect(ui->recentRequestsView->horizontalHeader(),SIGNAL(sectionResized(int,int,int)),this,SLOT(on_sectionResized()));\n-    disconnect(ui->recentRequestsView->horizontalHeader(),SIGNAL(geometriesChanged()),this,SLOT(on_geometriesChanged()));\n-}\n \n-//setup the resize mode, handles compatibility for QT5 and below as the method signatures changed. (refactored here for readability)\n-void ReceiveCoinsDialog::setRecentRequestViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode) {\n-#if QT_VERSION < 0x050000\n-    ui->recentRequestsView->horizontalHeader()->setResizeMode(logicalIndex, resizeMode);\n-#else\n-    ui->recentRequestsView->horizontalHeader()->setSectionResizeMode(logicalIndex, resizeMode);\n-#endif\n-}\n \n void ReceiveCoinsDialog::setModel(WalletModel *model)\n {\n     this->model = model;\n \n     if(model && model->getOptionsModel())\n     {\n+        model->getRecentRequestsTableModel()->sort(RecentRequestsTableModel::Date, Qt::DescendingOrder);\n+\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n         updateDisplayUnit();\n \n@@ -93,16 +74,9 @@ void ReceiveCoinsDialog::setModel(WalletModel *model)\n         ui->recentRequestsView->setSelectionMode(QAbstractItemView::ContiguousSelection);\n         ui->recentRequestsView->setColumnWidth(RecentRequestsTableModel::Date, DATE_COLUMN_WIDTH);\n         ui->recentRequestsView->setColumnWidth(RecentRequestsTableModel::Label, LABEL_COLUMN_WIDTH);\n-\t//(last 2 columns are set when the table geometry is ready)\n-\n-        setRecentRequestViewHeaderResizeMode(RecentRequestsTableModel::Message, QHeaderView::Interactive);\n-        setRecentRequestViewHeaderResizeMode(RecentRequestsTableModel::Amount, QHeaderView::Fixed);\n \n-        //this honors a minimum size while resizing for all columns. Wish they had a method for a single column.\n-        ui->recentRequestsView->horizontalHeader()->setMinimumSectionSize(MINIMUM_COLUMN_WIDTH);\n-\n-        model->getRecentRequestsTableModel()->sort(RecentRequestsTableModel::Date, Qt::DescendingOrder);\n-        connectRecentRequestsViewHeadersSignals(); //now we're ready to handle events on the table header.\n+        //(last 2 columns are set when the table geometry is ready) by the columnResizingFixer.\n+        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(ui->recentRequestsView,AMOUNT_MINIMUM_COLUMN_WIDTH);\n     }\n }\n \n@@ -211,56 +185,10 @@ void ReceiveCoinsDialog::on_removeRequestButton_clicked()\n     model->getRecentRequestsTableModel()->removeRows(firstIndex.row(), selection.length(), firstIndex.parent());\n }\n \n-//given a column index, returns the maximum allowable width by substracting the other column's widths from the table's width\n-//NOTE: works only for the two columns we care for: The last (\"Amount\"), and second to last (\"Message\").\n-//      if given another column number, it will always return the remaining width for the last column (\"Amount\")\n-int ReceiveCoinsDialog::getRemainingWidthForColumn(int column) \n-{\n-    int nResult = AMOUNT_MINIMUM_COLUMN_WIDTH;\n-\n-    QTableView* recentRequestsTableView = ui->recentRequestsView;\n-    QHeaderView* headerView = recentRequestsTableView->horizontalHeader();\n-    int nTableWidth = recentRequestsTableView->width();\n-\n-    if (nTableWidth > 0) \n-    {\n-        int nOtherColsWidth = headerView->sectionSize(RecentRequestsTableModel::Date);\n-        nOtherColsWidth += headerView->sectionSize(RecentRequestsTableModel::Label);\n-        nOtherColsWidth += headerView->sectionSize(column == RecentRequestsTableModel::Amount ? RecentRequestsTableModel::Message : RecentRequestsTableModel::Amount);\n-        nResult = std::max(nResult, nTableWidth - nOtherColsWidth);\n-    }\n-\n-    return nResult;\n-}\n-\n-\n-//make sure we don't make the columns wider than the table's viewport's width.\n-void ReceiveCoinsDialog::adjustRecentRequestsColumnsWidth()\n-{\n-    disconnectRecentRequestsViewHeadersSignals(); \n-    ui->recentRequestsView->setColumnWidth(RecentRequestsTableModel::Amount, getRemainingWidthForColumn(RecentRequestsTableModel::Amount));\n-    ui->recentRequestsView->setColumnWidth(RecentRequestsTableModel::Message, getRemainingWidthForColumn(RecentRequestsTableModel::Message));\n-    connectRecentRequestsViewHeadersSignals(); \n-}\n-\n-//when a section is resized this is a slot-proxy for ajustAmountColumnWidth()\n-void ReceiveCoinsDialog::on_sectionResized()\n-{\n-    adjustRecentRequestsColumnsWidth();\n-}\n-\n-//when the table's geometry is ready, we manually perform the Stretch of the \"Message\" column\n-//as the \"Stretch\" resize mode does not allow for interactive resizing.\n-void ReceiveCoinsDialog::on_geometriesChanged()\n-{\n-    ui->recentRequestsView->setColumnWidth(RecentRequestsTableModel::Amount, AMOUNT_MINIMUM_COLUMN_WIDTH);\n-    ui->recentRequestsView->setColumnWidth(RecentRequestsTableModel::Message, getRemainingWidthForColumn(RecentRequestsTableModel::Message));\n-}\n-\n //We override the virtual resizeEvent of the QWidget to adjust tablet's column sizes as the table's width is proportional to the dialog's.\n void ReceiveCoinsDialog::resizeEvent(QResizeEvent* event) {\n   QWidget::resizeEvent(event);\n-  adjustRecentRequestsColumnsWidth();\n+  columnResizingFixer->adjustTableColumnsWidth();\n }\n \n void ReceiveCoinsDialog::keyPressEvent(QKeyEvent *event)"
      },
      {
        "sha": "4e51cae6eddeb81968773c12cab61276d755c8ac",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a5765e047c06e90a28ad7b3d1ee56c57edd64de/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a5765e047c06e90a28ad7b3d1ee56c57edd64de/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=7a5765e047c06e90a28ad7b3d1ee56c57edd64de",
        "patch": "@@ -11,6 +11,7 @@\n #include <QPoint>\n #include <QVariant>\n #include <QHeaderView>\n+#include \"guiutil.h\"\n \n namespace Ui {\n     class ReceiveCoinsDialog;\n@@ -50,23 +51,17 @@ public slots:\n \n private:\n     Ui::ReceiveCoinsDialog *ui;\n+    GUIUtil::TableViewLastColumnResizingFixer *columnResizingFixer;\n     WalletModel *model;\n     QMenu *contextMenu;\n     void copyColumnToClipboard(int column);\n-    int  getRemainingWidthForColumn(int column);\n-    void adjustRecentRequestsColumnsWidth();\n-    void connectRecentRequestsViewHeadersSignals();\n-    void disconnectRecentRequestsViewHeadersSignals();\n-    void setRecentRequestViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode);\n     virtual void resizeEvent(QResizeEvent* event);\n \n private slots:\n     void on_receiveButton_clicked();\n     void on_showRequestButton_clicked();\n     void on_removeRequestButton_clicked();\n     void on_recentRequestsView_doubleClicked(const QModelIndex &index);\n-    void on_sectionResized();\n-    void on_geometriesChanged();\n     void updateDisplayUnit();\n     void showMenu(const QPoint &);\n     void copyLabel();"
      }
    ]
  },
  {
    "sha": "218b0f93a5fa8c878965fdad5804070ba7e45ac3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMThiMGY5M2E1ZmE4Yzg3ODk2NWZkYWQ1ODA0MDcwYmE3ZTQ1YWMz",
    "commit": {
      "author": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-10T01:43:21Z"
      },
      "committer": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-10T01:43:21Z"
      },
      "message": "More progress on table resizing fixer, now being integrated into transactions table.",
      "tree": {
        "sha": "fa76c726cb39d3cacbb0e3cd2918d3bc2224b5f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa76c726cb39d3cacbb0e3cd2918d3bc2224b5f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/218b0f93a5fa8c878965fdad5804070ba7e45ac3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/218b0f93a5fa8c878965fdad5804070ba7e45ac3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/218b0f93a5fa8c878965fdad5804070ba7e45ac3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/218b0f93a5fa8c878965fdad5804070ba7e45ac3/comments",
    "author": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a5765e047c06e90a28ad7b3d1ee56c57edd64de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a5765e047c06e90a28ad7b3d1ee56c57edd64de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a5765e047c06e90a28ad7b3d1ee56c57edd64de"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 74,
      "deletions": 23
    },
    "files": [
      {
        "sha": "35dbf5dd923715815f098b2fe47e939d556e50de",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 5,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/218b0f93a5fa8c878965fdad5804070ba7e45ac3/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/218b0f93a5fa8c878965fdad5804070ba7e45ac3/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=218b0f93a5fa8c878965fdad5804070ba7e45ac3",
        "patch": "@@ -436,9 +436,11 @@ int TableViewLastColumnResizingFixer::getRemainingWidthForColumn(int column)\n void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()\n {\n     disconnectViewHeadersSignals();\n-    tableView->setColumnWidth(lastColumnIndex, getRemainingWidthForColumn(lastColumnIndex));\n+    tableView->setColumnWidth(lastColumnIndex, std::max(getRemainingWidthForColumn(lastColumnIndex),lastColumnMinimumWidth));\n     tableView->setColumnWidth(secondToLastColumnIndex, getRemainingWidthForColumn(secondToLastColumnIndex));\n     connectViewHeadersSignals();\n+    std::cout << \"adjustTableColumnsWidth -> \";\n+    debugColumns();\n }\n \n //when a section is resized this is a slot-proxy for ajustAmountColumnWidth()\n@@ -447,29 +449,56 @@ void TableViewLastColumnResizingFixer::on_sectionResized()\n     adjustTableColumnsWidth();\n }\n \n+void TableViewLastColumnResizingFixer::debugColumns()\n+{\n+   auto columnCount = tableView->model()->columnCount();\n+   for (int i=0; i < columnCount; i++) {\n+       std::cout << \"col \" << i << \" \" << tableView->columnWidth(i);\n+       if (i == columnCount-1) {\n+           std::cout << std::endl;\n+       } else {\n+           std::cout << \", \";\n+       }\n+   }\n+}\n+\n //when the table's geometry is ready, we manually perform the Stretch of the \"Message\" column\n //as the \"Stretch\" resize mode does not allow for interactive resizing.\n void TableViewLastColumnResizingFixer::on_geometriesChanged()\n {\n+    disconnectViewHeadersSignals();\n     tableView->setColumnWidth(lastColumnIndex, lastColumnMinimumWidth);\n+    qDebug(\"on geometries changed:\\n\");\n+    std::cout << \"\\t last column (\"<< lastColumnIndex <<\") set it to \" << lastColumnMinimumWidth << \"; get width = \" << tableView->columnWidth(lastColumnIndex) << \"\\n\";\n     tableView->setColumnWidth(secondToLastColumnIndex, getRemainingWidthForColumn(secondToLastColumnIndex));\n+    std::cout << \"\\t 2nd to last column (\" << secondToLastColumnIndex << \") width = \" << getRemainingWidthForColumn(secondToLastColumnIndex) << \"\\n\";\n+    debugColumns();\n+    std::cout << endl;\n+    connectViewHeadersSignals();\n }\n \n /**\n- * Initializes all internal variables and prepares the resize modes of the last 2 columns of the table.\n+ * Initializes all internal variables,\n+ * prepares the resize modes of the last 2 columns of the table and\n+ * connects the appropiate signals of the table's view header.\n  */\n-TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth) :\n-        tableView(table), lastColumnMinimumWidth(lastColMinimumWidth)\n+TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth) :\n+        tableView(table),\n+        lastColumnMinimumWidth(lastColMinimumWidth),\n+        allColumnsMinimumWidth(allColsMinimumWidth)\n {\n \n     int columnCount = tableView->model()->columnCount();\n+    qDebug(\"Column Count %d\\n\", columnCount);\n     lastColumnIndex = columnCount - 1;\n     secondToLastColumnIndex = columnCount - 2;\n \n     setViewHeaderResizeMode(secondToLastColumnIndex, QHeaderView::Interactive);\n     setViewHeaderResizeMode(lastColumnIndex, QHeaderView::Fixed);\n \n-    tableView->horizontalHeader()->setMinimumSectionSize(lastColMinimumWidth);\n+    tableView->horizontalHeader()->setMinimumSectionSize(allColsMinimumWidth);\n+    tableView->setColumnWidth(lastColMinimumWidth, lastColMinimumWidth);\n+\n     connectViewHeadersSignals();\n }\n "
      },
      {
        "sha": "881b7d6a9cffd9666ec61c63c420000cffd8d423",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/218b0f93a5fa8c878965fdad5804070ba7e45ac3/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/218b0f93a5fa8c878965fdad5804070ba7e45ac3/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=218b0f93a5fa8c878965fdad5804070ba7e45ac3",
        "patch": "@@ -131,7 +131,7 @@ namespace GUIUtil\n     {\n     Q_OBJECT\n     public:\n-        TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth);\n+        TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth);\n \n         int getRemainingWidthForColumn(int column);\n         void adjustTableColumnsWidth();\n@@ -142,10 +142,12 @@ namespace GUIUtil\n     private:\n         QTableView* tableView;\n         int lastColumnMinimumWidth;\n+        int allColumnsMinimumWidth;\n         int lastColumnIndex;\n         int secondToLastColumnIndex;\n \n         int getWidthSumForOtherColumns(int nColumnIndex);\n+        void debugColumns();\n \n     private slots:\n         void on_sectionResized();"
      },
      {
        "sha": "f375550a5068f5d69629ff6d74fd614c435cc154",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/218b0f93a5fa8c878965fdad5804070ba7e45ac3/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/218b0f93a5fa8c878965fdad5804070ba7e45ac3/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=218b0f93a5fa8c878965fdad5804070ba7e45ac3",
        "patch": "@@ -67,16 +67,19 @@ void ReceiveCoinsDialog::setModel(WalletModel *model)\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n         updateDisplayUnit();\n \n-        ui->recentRequestsView->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);\n-        ui->recentRequestsView->setModel(model->getRecentRequestsTableModel());\n-        ui->recentRequestsView->setAlternatingRowColors(true);\n-        ui->recentRequestsView->setSelectionBehavior(QAbstractItemView::SelectRows);\n-        ui->recentRequestsView->setSelectionMode(QAbstractItemView::ContiguousSelection);\n-        ui->recentRequestsView->setColumnWidth(RecentRequestsTableModel::Date, DATE_COLUMN_WIDTH);\n-        ui->recentRequestsView->setColumnWidth(RecentRequestsTableModel::Label, LABEL_COLUMN_WIDTH);\n+        QTableView* tableView = ui->recentRequestsView;\n+\n+        tableView->verticalHeader()->hide();\n+        tableView->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);\n+        tableView->setModel(model->getRecentRequestsTableModel());\n+        tableView->setAlternatingRowColors(true);\n+        tableView->setSelectionBehavior(QAbstractItemView::SelectRows);\n+        tableView->setSelectionMode(QAbstractItemView::ContiguousSelection);\n+        tableView->setColumnWidth(RecentRequestsTableModel::Date, DATE_COLUMN_WIDTH);\n+        tableView->setColumnWidth(RecentRequestsTableModel::Label, LABEL_COLUMN_WIDTH);\n \n         //(last 2 columns are set when the table geometry is ready) by the columnResizingFixer.\n-        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(ui->recentRequestsView,AMOUNT_MINIMUM_COLUMN_WIDTH);\n+        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(tableView, AMOUNT_MINIMUM_COLUMN_WIDTH, DATE_COLUMN_WIDTH);\n     }\n }\n "
      },
      {
        "sha": "d25fa9ed088e599de15f2a3f83fe89e8a1a0d7d8",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/218b0f93a5fa8c878965fdad5804070ba7e45ac3/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/218b0f93a5fa8c878965fdad5804070ba7e45ac3/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=218b0f93a5fa8c878965fdad5804070ba7e45ac3",
        "patch": "@@ -168,6 +168,7 @@ void TransactionView::setModel(WalletModel *model)\n \n         transactionProxyModel->setSortRole(Qt::EditRole);\n \n+        transactionView->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);\n         transactionView->setModel(transactionProxyModel);\n         transactionView->setAlternatingRowColors(true);\n         transactionView->setSelectionBehavior(QAbstractItemView::SelectRows);\n@@ -176,15 +177,12 @@ void TransactionView::setModel(WalletModel *model)\n         transactionView->sortByColumn(TransactionTableModel::Status, Qt::DescendingOrder);\n         transactionView->verticalHeader()->hide();\n \n-        transactionView->horizontalHeader()->resizeSection(TransactionTableModel::Status, 23);\n-        transactionView->horizontalHeader()->resizeSection(TransactionTableModel::Date, 120);\n-        transactionView->horizontalHeader()->resizeSection(TransactionTableModel::Type, 120);\n-#if QT_VERSION < 0x050000\n-        transactionView->horizontalHeader()->setResizeMode(TransactionTableModel::ToAddress, QHeaderView::Stretch);\n-#else\n-        transactionView->horizontalHeader()->setSectionResizeMode(TransactionTableModel::ToAddress, QHeaderView::Stretch);\n-#endif\n-        transactionView->horizontalHeader()->resizeSection(TransactionTableModel::Amount, 100);\n+        transactionView->setColumnWidth(TransactionTableModel::Status, STATUS_COLUMN_WIDTH);\n+        transactionView->setColumnWidth(TransactionTableModel::Date, DATE_COLUMN_WIDTH);\n+        transactionView->setColumnWidth(TransactionTableModel::Type, TYPE_COLUMN_WIDTH);\n+        transactionView->setColumnWidth(TransactionTableModel::Amount, AMOUNT_MINIMUM_COLUMN_WIDTH);\n+\n+        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(transactionView, AMOUNT_MINIMUM_COLUMN_WIDTH, MINIMUM_COLUMN_WIDTH);\n     }\n }\n \n@@ -439,3 +437,9 @@ void TransactionView::focusTransaction(const QModelIndex &idx)\n     transactionView->setCurrentIndex(targetIdx);\n     transactionView->setFocus();\n }\n+\n+//We override the virtual resizeEvent of the QWidget to adjust tablet's column sizes as the table's width is proportional to the dialog's.\n+void TransactionView::resizeEvent(QResizeEvent* event) {\n+  QWidget::resizeEvent(event);\n+  columnResizingFixer->adjustTableColumnsWidth();\n+}"
      },
      {
        "sha": "5c50e49ff485cf82ea59cc0d77ce83b51e652873",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/218b0f93a5fa8c878965fdad5804070ba7e45ac3/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/218b0f93a5fa8c878965fdad5804070ba7e45ac3/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=218b0f93a5fa8c878965fdad5804070ba7e45ac3",
        "patch": "@@ -6,6 +6,7 @@\n #define TRANSACTIONVIEW_H\n \n #include <QWidget>\n+#include \"guiutil.h\"\n \n class TransactionFilterProxy;\n class WalletModel;\n@@ -44,6 +45,14 @@ class TransactionView : public QWidget\n         Range\n     };\n \n+    enum ColumnWidths {\n+      STATUS_COLUMN_WIDTH = 23,\n+      DATE_COLUMN_WIDTH = 120,\n+      TYPE_COLUMN_WIDTH = 120,\n+      AMOUNT_MINIMUM_COLUMN_WIDTH = 100,\n+      MINIMUM_COLUMN_WIDTH = 23\n+    };\n+\n private:\n     WalletModel *model;\n     TransactionFilterProxy *transactionProxyModel;\n@@ -62,6 +71,10 @@ class TransactionView : public QWidget\n \n     QWidget *createDateRangeWidget();\n \n+    GUIUtil::TableViewLastColumnResizingFixer *columnResizingFixer;\n+\n+    virtual void resizeEvent(QResizeEvent* event);\n+\n private slots:\n     void contextualMenu(const QPoint &);\n     void dateRangeChanged();"
      }
    ]
  },
  {
    "sha": "c34293cef6c1409916bdee65243e6fbee2d0a433",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzQyOTNjZWY2YzE0MDk5MTZiZGVlNjUyNDNlNmZiZWUyZDBhNDMz",
    "commit": {
      "author": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-10T02:31:33Z"
      },
      "committer": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-10T02:31:33Z"
      },
      "message": "forgot to remove c++11 test",
      "tree": {
        "sha": "324d3d08d466dfa85df5f68c1e3974d58a5a82c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/324d3d08d466dfa85df5f68c1e3974d58a5a82c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c34293cef6c1409916bdee65243e6fbee2d0a433",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c34293cef6c1409916bdee65243e6fbee2d0a433",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c34293cef6c1409916bdee65243e6fbee2d0a433",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c34293cef6c1409916bdee65243e6fbee2d0a433/comments",
    "author": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "218b0f93a5fa8c878965fdad5804070ba7e45ac3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/218b0f93a5fa8c878965fdad5804070ba7e45ac3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/218b0f93a5fa8c878965fdad5804070ba7e45ac3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "829e7202299c932a40bf3f5f0fa57f7f3d0734d3",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c34293cef6c1409916bdee65243e6fbee2d0a433/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c34293cef6c1409916bdee65243e6fbee2d0a433/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=c34293cef6c1409916bdee65243e6fbee2d0a433",
        "patch": "@@ -451,7 +451,7 @@ void TableViewLastColumnResizingFixer::on_sectionResized()\n \n void TableViewLastColumnResizingFixer::debugColumns()\n {\n-   auto columnCount = tableView->model()->columnCount();\n+   int columnCount = tableView->model()->columnCount();\n    for (int i=0; i < columnCount; i++) {\n        std::cout << \"col \" << i << \" \" << tableView->columnWidth(i);\n        if (i == columnCount-1) {"
      }
    ]
  },
  {
    "sha": "0a95ec59c0cfddb26aa4e63847da6d2a22f2e06f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTk1ZWM1OWMwY2ZkZGIyNmFhNGU2Mzg0N2RhNmQyYTIyZjJlMDZm",
    "commit": {
      "author": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-22T00:40:16Z"
      },
      "committer": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-22T00:40:16Z"
      },
      "message": "patch should be ready to go.",
      "tree": {
        "sha": "4d60a13974f6bba67a26f2c8f10c99b294ed32a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d60a13974f6bba67a26f2c8f10c99b294ed32a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a95ec59c0cfddb26aa4e63847da6d2a22f2e06f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a95ec59c0cfddb26aa4e63847da6d2a22f2e06f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a95ec59c0cfddb26aa4e63847da6d2a22f2e06f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a95ec59c0cfddb26aa4e63847da6d2a22f2e06f/comments",
    "author": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c34293cef6c1409916bdee65243e6fbee2d0a433",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c34293cef6c1409916bdee65243e6fbee2d0a433",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c34293cef6c1409916bdee65243e6fbee2d0a433"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 58,
      "deletions": 66
    },
    "files": [
      {
        "sha": "f0cc2d2d744e6e73354cf30c489dbd399d86f84b",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 58,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a95ec59c0cfddb26aa4e63847da6d2a22f2e06f/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a95ec59c0cfddb26aa4e63847da6d2a22f2e06f/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=0a95ec59c0cfddb26aa4e63847da6d2a22f2e06f",
        "patch": "@@ -379,17 +379,16 @@ bool ToolTipToRichTextFilter::eventFilter(QObject *obj, QEvent *evt)\n     return QObject::eventFilter(obj, evt);\n }\n \n-//recent request table's header signals\n void TableViewLastColumnResizingFixer::connectViewHeadersSignals()\n {\n-    connect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized()));\n+    connect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized(int,int,int)));\n     connect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n }\n \n-//we need to disconnect these while handling the resize events, otherwise we can enter an infinite loop\n+//we need to disconnect these while handling the resize events, otherwise we can enter infinite loops\n void TableViewLastColumnResizingFixer::disconnectViewHeadersSignals()\n {\n-    disconnect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized()));\n+    disconnect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized(int,int,int)));\n     disconnect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n }\n \n@@ -403,29 +402,29 @@ void TableViewLastColumnResizingFixer::setViewHeaderResizeMode(int logicalIndex,\n #endif\n }\n \n-int TableViewLastColumnResizingFixer::getWidthSumForOtherColumns(int nColumnIndex)\n-{\n-    int result = 0;\n-    QHeaderView* headerView = tableView->horizontalHeader();\n+void TableViewLastColumnResizingFixer::resizeColumn(int nColumnIndex, int width) {\n+    tableView->setColumnWidth(nColumnIndex, width);\n+    tableView->horizontalHeader()->resizeSection(nColumnIndex, width);\n+}\n \n-    for (int i = 0; i < headerView->count(); i++)\n+int TableViewLastColumnResizingFixer::getColumnsWidth()\n+{\n+    int nColumnsWidthSum = 0;\n+    for (int i = 0; i < columnCount; i++)\n     {\n-        if (i!=nColumnIndex) {\n-            result += headerView->sectionSize(i);\n-        }\n+        nColumnsWidthSum += tableView->horizontalHeader()->sectionSize(i);\n     }\n-\n-    return result;\n+    return nColumnsWidthSum;\n }\n \n-int TableViewLastColumnResizingFixer::getRemainingWidthForColumn(int column)\n+int TableViewLastColumnResizingFixer::getAvailableWidthForColumn(int column)\n {\n     int nResult = lastColumnMinimumWidth;\n-    int nTableWidth = tableView->width();\n+    int nTableWidth = tableView->horizontalHeader()->width();\n \n     if (nTableWidth > 0)\n     {\n-        int nOtherColsWidth = getWidthSumForOtherColumns(column);\n+        int nOtherColsWidth = getColumnsWidth() - tableView->horizontalHeader()->sectionSize(column);\n         nResult = std::max(nResult, nTableWidth - nOtherColsWidth);\n     }\n \n@@ -436,72 +435,63 @@ int TableViewLastColumnResizingFixer::getRemainingWidthForColumn(int column)\n void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()\n {\n     disconnectViewHeadersSignals();\n-    tableView->setColumnWidth(lastColumnIndex, std::max(getRemainingWidthForColumn(lastColumnIndex),lastColumnMinimumWidth));\n-    tableView->setColumnWidth(secondToLastColumnIndex, getRemainingWidthForColumn(secondToLastColumnIndex));\n+    resizeColumn(lastColumnIndex, getAvailableWidthForColumn(lastColumnIndex));\n     connectViewHeadersSignals();\n-    std::cout << \"adjustTableColumnsWidth -> \";\n-    debugColumns();\n+\n+    int nTableWidth = tableView->horizontalHeader()->width();\n+    int nColsWidth = getColumnsWidth();\n+    if (nColsWidth > nTableWidth)\n+    {\n+        int nWidestColumnIndex = secondToLastColumnIndex;\n+        resizeColumn(nWidestColumnIndex,getAvailableWidthForColumn(nWidestColumnIndex));\n+    }\n+\n }\n \n //when a section is resized this is a slot-proxy for ajustAmountColumnWidth()\n-void TableViewLastColumnResizingFixer::on_sectionResized()\n+void TableViewLastColumnResizingFixer::on_sectionResized(int logicalIndex, int oldSize, int newSize)\n {\n     adjustTableColumnsWidth();\n-}\n-\n-void TableViewLastColumnResizingFixer::debugColumns()\n-{\n-   int columnCount = tableView->model()->columnCount();\n-   for (int i=0; i < columnCount; i++) {\n-       std::cout << \"col \" << i << \" \" << tableView->columnWidth(i);\n-       if (i == columnCount-1) {\n-           std::cout << std::endl;\n-       } else {\n-           std::cout << \", \";\n-       }\n-   }\n+    int remainingWidth = getAvailableWidthForColumn(logicalIndex);\n+    if (newSize > remainingWidth)\n+    {\n+       resizeColumn(logicalIndex, remainingWidth);\n+    }\n }\n \n //when the table's geometry is ready, we manually perform the Stretch of the \"Message\" column\n //as the \"Stretch\" resize mode does not allow for interactive resizing.\n void TableViewLastColumnResizingFixer::on_geometriesChanged()\n {\n-    disconnectViewHeadersSignals();\n-    tableView->setColumnWidth(lastColumnIndex, lastColumnMinimumWidth);\n-    qDebug(\"on geometries changed:\\n\");\n-    std::cout << \"\\t last column (\"<< lastColumnIndex <<\") set it to \" << lastColumnMinimumWidth << \"; get width = \" << tableView->columnWidth(lastColumnIndex) << \"\\n\";\n-    tableView->setColumnWidth(secondToLastColumnIndex, getRemainingWidthForColumn(secondToLastColumnIndex));\n-    std::cout << \"\\t 2nd to last column (\" << secondToLastColumnIndex << \") width = \" << getRemainingWidthForColumn(secondToLastColumnIndex) << \"\\n\";\n-    debugColumns();\n-    std::cout << endl;\n-    connectViewHeadersSignals();\n+    if (!geometryInitialized)\n+    {\n+        disconnectViewHeadersSignals();\n+        resizeColumn(lastColumnIndex, lastColumnMinimumWidth);\n+        resizeColumn(secondToLastColumnIndex, getAvailableWidthForColumn(secondToLastColumnIndex));\n+        connectViewHeadersSignals();\n+        geometryInitialized = true;\n+    }\n }\n \n /**\n- * Initializes all internal variables,\n- * prepares the resize modes of the last 2 columns of the table and\n- * connects the appropiate signals of the table's view header.\n+ * Initializes all internal variables and prepares the\n+ * the resize modes of the last 2 columns of the table and\n  */\n TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth) :\n         tableView(table),\n         lastColumnMinimumWidth(lastColMinimumWidth),\n-        allColumnsMinimumWidth(allColsMinimumWidth)\n+        allColumnsMinimumWidth(allColsMinimumWidth),\n+        geometryInitialized(false)\n {\n-\n-    int columnCount = tableView->model()->columnCount();\n-    qDebug(\"Column Count %d\\n\", columnCount);\n+    columnCount = tableView->horizontalHeader()->count();\n     lastColumnIndex = columnCount - 1;\n     secondToLastColumnIndex = columnCount - 2;\n-\n+    tableView->horizontalHeader()->setMinimumSectionSize(allColumnsMinimumWidth);\n     setViewHeaderResizeMode(secondToLastColumnIndex, QHeaderView::Interactive);\n-    setViewHeaderResizeMode(lastColumnIndex, QHeaderView::Fixed);\n-\n-    tableView->horizontalHeader()->setMinimumSectionSize(allColsMinimumWidth);\n-    tableView->setColumnWidth(lastColMinimumWidth, lastColMinimumWidth);\n-\n-    connectViewHeadersSignals();\n+    setViewHeaderResizeMode(lastColumnIndex, QHeaderView::Interactive);\n }\n \n+\n #ifdef WIN32\n boost::filesystem::path static StartupShortcutPath()\n {"
      },
      {
        "sha": "94760403e5b42cddc0f1eca0b28159007cf3b3b9",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a95ec59c0cfddb26aa4e63847da6d2a22f2e06f/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a95ec59c0cfddb26aa4e63847da6d2a22f2e06f/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=0a95ec59c0cfddb26aa4e63847da6d2a22f2e06f",
        "patch": "@@ -120,6 +120,7 @@ namespace GUIUtil\n \n     /**\n      * Makes a QTableView last column feel as if it was being resized from its left border.\n+     * Also makes sure the column widths are never larger than the table's viewport.\n      * In Qt, all columns are resizable from the right, but it's not intuitive resizing the last column from the right.\n      * Usually our second to last columns behave as if stretched, and when on strech mode, columns aren't resizable\n      * interactively or programatically.\n@@ -132,25 +133,26 @@ namespace GUIUtil\n     Q_OBJECT\n     public:\n         TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth);\n-\n-        int getRemainingWidthForColumn(int column);\n         void adjustTableColumnsWidth();\n-        void connectViewHeadersSignals();\n-        void disconnectViewHeadersSignals();\n-        void setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode);\n \n     private:\n         QTableView* tableView;\n         int lastColumnMinimumWidth;\n         int allColumnsMinimumWidth;\n         int lastColumnIndex;\n+        int columnCount;\n         int secondToLastColumnIndex;\n+        bool geometryInitialized;\n \n-        int getWidthSumForOtherColumns(int nColumnIndex);\n-        void debugColumns();\n+        int getAvailableWidthForColumn(int column);\n+        int getColumnsWidth();\n+        void connectViewHeadersSignals();\n+        void disconnectViewHeadersSignals();\n+        void setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode);\n+        void resizeColumn(int nColumnIndex, int width);\n \n     private slots:\n-        void on_sectionResized();\n+        void on_sectionResized(int logicalIndex, int oldSize, int newSize);\n         void on_geometriesChanged();\n     };\n "
      }
    ]
  },
  {
    "sha": "951c38e8c46d24fdbaee16d7aca3834b39724490",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTFjMzhlOGM0NmQyNGZkYmFlZTE2ZDdhY2EzODM0YjM5NzI0NDkw",
    "commit": {
      "author": {
        "name": "Gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-25T02:21:22Z"
      },
      "committer": {
        "name": "Gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-02-25T02:21:22Z"
      },
      "message": "Merge branch 'master' into QT-issue-2862-last-coumn-cannot-be-resized",
      "tree": {
        "sha": "c93b6b4064df6cec014d51da21702feeb7e6c7eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c93b6b4064df6cec014d51da21702feeb7e6c7eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/951c38e8c46d24fdbaee16d7aca3834b39724490",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/951c38e8c46d24fdbaee16d7aca3834b39724490",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/951c38e8c46d24fdbaee16d7aca3834b39724490",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/951c38e8c46d24fdbaee16d7aca3834b39724490/comments",
    "author": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a95ec59c0cfddb26aa4e63847da6d2a22f2e06f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a95ec59c0cfddb26aa4e63847da6d2a22f2e06f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a95ec59c0cfddb26aa4e63847da6d2a22f2e06f"
      },
      {
        "sha": "a16ad1c0f465935d437bd9ae9875b28be49ec65b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a16ad1c0f465935d437bd9ae9875b28be49ec65b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a16ad1c0f465935d437bd9ae9875b28be49ec65b"
      }
    ],
    "stats": {
      "total": 1831,
      "additions": 1467,
      "deletions": 364
    },
    "files": [
      {
        "sha": "cd0dd3b0235c526920dba3cf53e1f47dd48f8677",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -52,7 +52,7 @@ tests each pull and when master is tested using jenkins.\n ### [Verify SF Binaries](/contrib/verifysfbinaries) ###\n This script attempts to download and verify the signature file SHA256SUMS.asc from SourceForge.\n \n-### [Developer tools](/control/devtools) ###\n+### [Developer tools](/contrib/devtools) ###\n Specific tools for developers working on this repository.\n Contains the script `github-merge.sh` for merging github pull requests securely and signing them using GPG.\n "
      },
      {
        "sha": "f0d25fd7a2350c0940a2776cb7bae83347283847",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -36,3 +36,14 @@ Configuring the github-merge tool for the bitcoin repository is done in the foll\n     git config githubmerge.testcmd \"make -j4 check\" (adapt to whatever you want to use for testing)\n     git config --global user.signingkey mykeyid (if you want to GPG sign)\n \n+## fix-copyright-headers.py\n+\n+Every year newly updated files need to have its copyright headers updated to reflect the current year.\n+If you run this script from src/ it will automatically update the year on the copyright header for all\n+.cpp and .h files if these have a git commit from the current year.\n+\n+For example a file changed in 2014 (with 2014 being the current year):\n+```// Copyright (c) 2009-2013 The Bitcoin developers```\n+\n+would be changed to:\n+```// Copyright (c) 2009-2014 The Bitcoin developers```\n\\ No newline at end of file"
      },
      {
        "sha": "52fdc99144b4762bc157365ca231b256cbb282d2",
        "filename": "contrib/devtools/fix-copyright-headers.py",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/devtools/fix-copyright-headers.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/devtools/fix-copyright-headers.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/fix-copyright-headers.py?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -0,0 +1,53 @@\n+#!/usr/bin/env python\n+'''\n+Run this script inside of src/ and it will look for all the files\n+that were changed this year that still have the last year in the\n+copyright headers, and it will fix the headers on that file using\n+a perl regex one liner.\n+\n+For example: if it finds something like this and we're in 2014\n+\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+\n+it will change it to\n+\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+\n+It will do this for all the files in the folder and its children.\n+\n+Author: @gubatron\n+'''\n+import os\n+import time\n+\n+year = time.gmtime()[0]\n+last_year = year - 1\n+command = \"perl -pi -e 's/%s The Bitcoin/%s The Bitcoin/' %s\"\n+listFilesCommand = \"find . | grep %s\"\n+\n+extensions = [\".cpp\",\".h\"]\n+\n+def getLastGitModifiedDate(filePath):\n+  gitGetLastCommitDateCommand = \"git log \" + filePath +\" | grep Date | head -n 1\"\n+  p = os.popen(gitGetLastCommitDateCommand)\n+  result = \"\"\n+  for l in p:\n+    result = l\n+    break\n+  result = result.replace(\"\\n\",\"\")\n+  return result\n+\n+n=1\n+for extension in extensions:\n+  foundFiles = os.popen(listFilesCommand % extension)\n+  for filePath in foundFiles:\n+    filePath = filePath[1:-1]\n+    if filePath.endswith(extension):\n+      filePath = os.getcwd() + filePath\n+      modifiedTime = getLastGitModifiedDate(filePath)\n+      if len(modifiedTime) > 0 and str(year) in modifiedTime:\n+        print n,\"Last Git Modified: \", modifiedTime, \" - \", filePath\n+        os.popen(command % (last_year,year,filePath))\n+        n = n + 1\n+\n+"
      },
      {
        "sha": "bd3534633737acf904f8a256f758b01a0d7a9b10",
        "filename": "contrib/gitian-descriptors/boost-linux.yml",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/boost-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/boost-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/boost-linux.yml?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -13,18 +13,23 @@ packages:\n - \"faketime\"\n - \"bsdmainutils\"\n - \"zip\"\n+- \"libz-dev\"\n reference_datetime: \"2011-01-30 00:00:00\"\n remotes: []\n files:\n - \"boost_1_55_0.tar.bz2\"\n script: |\n   STAGING=\"$HOME/install\"\n+  TEMPDIR=\"$HOME/tmp\"\n   export LIBRARY_PATH=\"$STAGING/lib\"\n+  export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n+  export FAKETIME=$REFERENCE_DATETIME\n+  export TZ=UTC\n   # Input Integrity Check\n   echo \"fff00023dd79486d444c8e29922f4072e1d451fc5a4d2b6075852ead7f2b7b52  boost_1_55_0.tar.bz2\" | shasum -c\n \n   mkdir -p \"$STAGING\"\n-  tar xjf boost_1_55_0.tar.bz2\n+  tar --warning=no-timestamp -xjf boost_1_55_0.tar.bz2\n   cd boost_1_55_0\n   GCCVERSION=$(g++ -E -dM $(mktemp --suffix=.h) | grep __VERSION__ | cut -d ' ' -f 3 | cut -d '\"' -f 2)\n   # note: bjam with -d+2 reveals that -O3 is implied by default, no need to provide it in cxxflags\n@@ -35,9 +40,16 @@ script: |\n \n   ./bootstrap.sh --without-icu\n \n-  ./bjam toolset=gcc threadapi=pthread threading=multi variant=release link=static runtime-link=shared --user-config=user-config.jam --without-mpi --without-python -sNO_BZIP2=1 --layout=tagged --build-type=complete --prefix=\"$STAGING\" $MAKEOPTS install\n+  ./bjam toolset=gcc threadapi=pthread threading=multi variant=release link=static runtime-link=shared --user-config=user-config.jam --without-mpi --without-python -sNO_BZIP2=1 --layout=tagged --build-type=complete --prefix=\"$STAGING\" $MAKEOPTS -d+2 install\n \n+  # post-process all generated libraries to be deterministic\n+  # extract them to a temporary directory then re-build them deterministically\n+  for LIB in $(find $STAGING -name \\*.a); do\n+    rm -rf $TEMPDIR && mkdir $TEMPDIR && cd $TEMPDIR\n+    ar xv $LIB | cut -b5- > /tmp/list.txt\n+    rm $LIB\n+    ar crsD $LIB $(cat /tmp/list.txt)\n+  done\n+  #\n   cd \"$STAGING\"\n-  export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n-  export FAKETIME=$REFERENCE_DATETIME\n-  zip -r $OUTDIR/boost-linux${GBUILD_BITS}-1.55.0-gitian-r1.zip *\n+  find | sort | zip -X@ $OUTDIR/boost-linux${GBUILD_BITS}-1.55.0-gitian-r1.zip"
      },
      {
        "sha": "db5d6bab1d92d1280a01d2f345408bc5f64afae6",
        "filename": "contrib/gitian-descriptors/boost-win.yml",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/boost-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/boost-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/boost-win.yml?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -16,8 +16,11 @@ files:\n - \"boost-mingw-gas-cross-compile-2013-03-03.patch\"\n script: |\n   # Defines\n+  export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n+  export FAKETIME=$REFERENCE_DATETIME\n   export TZ=UTC\n   INDIR=$HOME/build\n+  TEMPDIR=$HOME/tmp\n   # Input Integrity Check\n   echo \"fff00023dd79486d444c8e29922f4072e1d451fc5a4d2b6075852ead7f2b7b52  boost_1_55_0.tar.bz2\" | shasum -c\n   echo \"d2b7f6a1d7051faef3c9cf41a92fa3671d905ef1e1da920d07651a43299f6268  boost-mingw-gas-cross-compile-2013-03-03.patch\" | shasum -c\n@@ -35,7 +38,7 @@ script: |\n     mkdir -p $INSTALLPREFIX $BUILDDIR\n     cd $BUILDDIR\n     #\n-    tar xjf $INDIR/boost_1_55_0.tar.bz2\n+    tar --warning=no-timestamp -xjf $INDIR/boost_1_55_0.tar.bz2\n     cd boost_1_55_0\n     GCCVERSION=$($HOST-g++ -E -dM $(mktemp --suffix=.h) | grep __VERSION__ | cut -d ' ' -f 3 | cut -d '\"' -f 2)\n     echo \"using gcc : $GCCVERSION : $HOST-g++\n@@ -68,12 +71,16 @@ script: |\n     # http://statmt.org/~s0565741/software/boost_1_52_0/libs/context/doc/html/context/requirements.html\n     # \"For cross-compiling the lib you must specify certain additional properties at bjam command line: target-os, abi, binary-format, architecture and address-model.\"\n     ./bjam toolset=gcc binary-format=pe target-os=windows threadapi=win32 address-model=$BITS threading=multi variant=release link=static runtime-link=static --user-config=user-config.jam --without-mpi --without-python -sNO_BZIP2=1 -sNO_ZLIB=1 --layout=tagged --build-type=complete --prefix=\"$INSTALLPREFIX\" $MAKEOPTS install\n+    # post-process all generated libraries to be deterministic\n+    # extract them to a temporary directory then re-build them deterministically\n+    for LIB in $(find $INSTALLPREFIX -name \\*.a); do\n+        rm -rf $TEMPDIR && mkdir $TEMPDIR && cd $TEMPDIR\n+        $HOST-ar xv $LIB | cut -b5- > /tmp/list.txt\n+        rm $LIB\n+        $HOST-ar crsD $LIB $(cat /tmp/list.txt)\n+    done\n     #\n     cd \"$INSTALLPREFIX\"\n-    export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n-    export FAKETIME=$REFERENCE_DATETIME\n-    zip -r $OUTDIR/boost-win$BITS-1.55.0-gitian-r6.zip *\n-    unset LD_PRELOAD\n-    unset FAKETIME\n+    find | sort | zip -X@ $OUTDIR/boost-win$BITS-1.55.0-gitian-r6.zip\n   done # for BITS in\n "
      },
      {
        "sha": "908f9321a4a196964e4e78c14e4f6f705c9b70f4",
        "filename": "contrib/gitian-descriptors/deps-linux.yml",
        "status": "modified",
        "additions": 28,
        "deletions": 5,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/deps-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/deps-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/deps-linux.yml?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -23,7 +23,11 @@ files:\n - \"db-4.8.30.NC.tar.gz\"\n script: |\n   STAGING=\"$HOME/install\"\n+  TEMPDIR=\"$HOME/tmp\"\n   OPTFLAGS='-O2'\n+  export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n+  export FAKETIME=$REFERENCE_DATETIME\n+  export TZ=UTC\n   export LIBRARY_PATH=\"$STAGING/lib\"\n   # Integrity Check\n   echo \"f74f15e8c8ff11aa3d5bb5f276d202ec18d7246e95f961db76054199c69c1ae3  openssl-1.0.1e.tar.gz\"  | sha256sum -c\n@@ -37,6 +41,7 @@ script: |\n   cd openssl-1.0.1e\n   #   need -fPIC to avoid relocation error in 64 bit builds\n   ./config no-shared no-zlib no-dso no-krb5 --openssldir=$STAGING -fPIC\n+  #   need to build OpenSSL with faketime because a timestamp is embedded into cversion.o\n   make\n   make install_sw\n   cd ..\n@@ -48,28 +53,46 @@ script: |\n   rm -f $STAGING/lib/libminiupnpc.so* # no way to skip shared lib build\n   cd ..\n   #\n-  tar xjfm qrencode-3.4.3.tar.bz2\n+  tar xjf qrencode-3.4.3.tar.bz2\n   cd qrencode-3.4.3\n+  unset FAKETIME # unset fake time during configure, as it does some clock sanity tests\n   #   need --with-pic to avoid relocation error in 64 bit builds\n-  ./configure --prefix=$STAGING --enable-static --disable-shared --with-pic --without-tools --disable-maintainer-mode --disable-dependency-tracking\n+  ./configure --prefix=$STAGING --enable-static --disable-shared --with-pic --without-tools --disable-dependency-tracking\n+  # Workaround to prevent re-configuring by make; make all files have a date in the past\n+  find . -print0 | xargs -r0 touch -t 200001010000\n+  export FAKETIME=$REFERENCE_DATETIME\n   make $MAKEOPTS install\n   cd ..\n   #\n-  tar xjfm protobuf-2.5.0.tar.bz2\n+  tar xjf protobuf-2.5.0.tar.bz2\n   cd protobuf-2.5.0\n   mkdir -p $STAGING/host/bin\n+  unset FAKETIME # unset fake time during configure, as it does some clock sanity tests\n   #   need --with-pic to avoid relocation error in 64 bit builds\n-  ./configure --prefix=$STAGING --bindir=$STAGING/host/bin --enable-static --disable-shared --with-pic\n+  ./configure --prefix=$STAGING --bindir=$STAGING/host/bin --enable-static --disable-shared --with-pic --without-zlib\n+  # Workaround to prevent re-configuring by make; make all files have a date in the past\n+  find . -print0 | xargs -r0 touch -t 200001010000\n+  export FAKETIME=$REFERENCE_DATETIME\n   make $MAKEOPTS install\n   cd ..\n   #\n   tar xzf db-4.8.30.NC.tar.gz\n   cd db-4.8.30.NC/build_unix\n   #   need --with-pic to avoid relocation error in 64 bit builds\n   ../dist/configure --prefix=$STAGING --enable-cxx --disable-shared --with-pic\n+  # Workaround to prevent re-configuring by make; make all files have a date in the past\n+  find . -print0 | xargs -r0 touch -t 200001010000\n   make $MAKEOPTS library_build\n   make install_lib install_include\n   cd ../..\n+  # post-process all generated libraries to be deterministic\n+  # extract them to a temporary directory then re-build them deterministically\n+  for LIB in $(find $STAGING -name \\*.a); do\n+    rm -rf $TEMPDIR && mkdir $TEMPDIR && cd $TEMPDIR\n+    ar xv $LIB | cut -b5- > /tmp/list.txt\n+    rm $LIB\n+    ar crsD $LIB $(cat /tmp/list.txt)\n+  done\n   #\n   cd $STAGING\n-  zip -r $OUTDIR/bitcoin-deps-linux${GBUILD_BITS}-gitian-r2.zip include lib bin host\n+  find include lib bin host | sort | zip -X@ $OUTDIR/bitcoin-deps-linux${GBUILD_BITS}-gitian-r3.zip"
      },
      {
        "sha": "87ebf3e87bcfd116233f3abf3dd097fd66cde453",
        "filename": "contrib/gitian-descriptors/deps-win.yml",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/deps-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/deps-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/deps-win.yml?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -26,6 +26,7 @@ script: |\n   export FAKETIME=$REFERENCE_DATETIME\n   export TZ=UTC\n   INDIR=$HOME/build\n+  TEMPDIR=$HOME/tmp\n   # Input Integrity Check\n   echo \"f74f15e8c8ff11aa3d5bb5f276d202ec18d7246e95f961db76054199c69c1ae3  openssl-1.0.1e.tar.gz\"  | sha256sum -c\n   echo \"12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef  db-4.8.30.NC.tar.gz\"    | sha256sum -c\n@@ -107,11 +108,21 @@ script: |\n     #\n     tar xjf $INDIR/qrencode-3.4.3.tar.bz2\n     cd qrencode-3.4.3\n-    png_CFLAGS=\"-I$INSTALLPREFIX/include\" png_LIBS=\"-L$INSTALLPREFIX/lib -lpng\" ./configure --prefix=$INSTALLPREFIX --host=$HOST --enable-static --disable-shared --without-tools --disable-maintainer-mode --disable-dependency-tracking\n+    png_CFLAGS=\"-I$INSTALLPREFIX/include\" png_LIBS=\"-L$INSTALLPREFIX/lib -lpng\" ./configure --prefix=$INSTALLPREFIX --host=$HOST --enable-static --disable-shared --without-tools --disable-dependency-tracking\n+    # Workaround to prevent re-configuring by make (resulting in missing m4 error); make all files have a date in the past\n+    find . -print0 | xargs -r0 touch -t 200001010000\n     make\n     make install\n     cd ..\n+    # post-process all generated libraries to be deterministic\n+    # extract them to a temporary directory then re-build them deterministically\n+    for LIB in $(find $INSTALLPREFIX -name \\*.a); do\n+        rm -rf $TEMPDIR && mkdir $TEMPDIR && cd $TEMPDIR\n+        $HOST-ar xv $LIB | cut -b5- > /tmp/list.txt\n+        rm $LIB\n+        $HOST-ar crsD $LIB $(cat /tmp/list.txt)\n+    done\n     #\n     cd $INSTALLPREFIX\n-    zip -r $OUTDIR/bitcoin-deps-win$BITS-gitian-r10.zip include lib\n+    find include lib | sort | zip -X@ $OUTDIR/bitcoin-deps-win$BITS-gitian-r10.zip\n   done # for BITS in"
      },
      {
        "sha": "bf355fd828984114947b80b71f8ee839080b0698",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -21,33 +21,40 @@ remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files:\n-- \"bitcoin-deps-linux32-gitian-r2.zip\"\n-- \"bitcoin-deps-linux64-gitian-r2.zip\"\n+- \"bitcoin-deps-linux32-gitian-r3.zip\"\n+- \"bitcoin-deps-linux64-gitian-r3.zip\"\n - \"boost-linux32-1.55.0-gitian-r1.zip\"\n - \"boost-linux64-1.55.0-gitian-r1.zip\"\n script: |\n   STAGING=\"$HOME/install\"\n   OPTFLAGS='-O2'\n   BINDIR=\"${OUTDIR}/bin/${GBUILD_BITS}\" # 32/64 bit build specific output directory\n+  TEMPDIR=\"$HOME/tempdir\"\n+  export TZ=UTC\n   export LIBRARY_PATH=\"$STAGING/lib\"\n   mkdir -p ${BINDIR}\n   #\n   mkdir -p $STAGING\n   cd $STAGING\n-  unzip ../build/bitcoin-deps-linux${GBUILD_BITS}-gitian-r2.zip\n+  unzip ../build/bitcoin-deps-linux${GBUILD_BITS}-gitian-r3.zip\n   unzip ../build/boost-linux${GBUILD_BITS}-1.55.0-gitian-r1.zip\n   cd ../build\n   #\n   cd bitcoin\n-  export TAR_OPTIONS=--mtime=`echo $REFERENCE_DATETIME | awk '{ print $1 }'`\n   ./autogen.sh\n   ./configure --prefix=$STAGING --bindir=$BINDIR --with-protoc-bindir=$STAGING/host/bin --with-boost=$STAGING --disable-maintainer-mode --disable-dependency-tracking PKG_CONFIG_PATH=\"$STAGING/lib/pkgconfig\" CPPFLAGS=\"-I$STAGING/include ${OPTFLAGS}\" LDFLAGS=\"-L$STAGING/lib ${OPTFLAGS}\" CXXFLAGS=\"-frandom-seed=bitcoin ${OPTFLAGS}\" BOOST_CHRONO_EXTRALIBS=\"-lrt\"\n   make dist\n+  DISTNAME=`echo bitcoin-*.tar.gz`\n   mkdir -p distsrc\n   cd distsrc\n-  tar --strip-components=1 -xf ../bitcoin-*.tar.*\n+  tar --strip-components=1 -xf ../$DISTNAME\n   ./configure --prefix=$STAGING --bindir=$BINDIR --with-protoc-bindir=$STAGING/host/bin --with-boost=$STAGING --disable-maintainer-mode --disable-dependency-tracking PKG_CONFIG_PATH=\"$STAGING/lib/pkgconfig\" CPPFLAGS=\"-I$STAGING/include ${OPTFLAGS}\" LDFLAGS=\"-L$STAGING/lib ${OPTFLAGS}\" CXXFLAGS=\"-frandom-seed=bitcoin ${OPTFLAGS}\" BOOST_CHRONO_EXTRALIBS=\"-lrt\"\n   make $MAKEOPTS\n   make $MAKEOPTS install-strip\n+  \n+  # sort distribution tar file and normalize user/group/mtime information for deterministic output\n   mkdir -p $OUTDIR/src\n-  cp ../bitcoin-*.tar.* $OUTDIR/src\n+  rm -rf $TEMPDIR\n+  mkdir -p $TEMPDIR\n+  cd $TEMPDIR\n+  tar -xvf $HOME/build/bitcoin/$DISTNAME | sort | tar --no-recursion -cT /dev/stdin --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 --mtime=\"$REFERENCE_DATETIME\" | gzip -n > $OUTDIR/src/$DISTNAME"
      },
      {
        "sha": "6e43c218234077237b0a4066d3423dd5c3feec6e",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -35,6 +35,7 @@ script: |\n   export TZ=UTC\n   INDIR=$HOME/build\n   OPTFLAGS='-O2'\n+  TEMPDIR=\"$HOME/tempdir\"\n   NEEDDIST=1\n   # Qt: workaround for determinism in resource ordering\n   #  Qt5's rcc uses a QHash to store the files for the resource.\n@@ -54,6 +55,7 @@ script: |\n     else\n       HOST=x86_64-w64-mingw32\n     fi\n+    export PATH=$STAGING/host/bin:$PATH\n     mkdir -p $STAGING $BUILDDIR $BINDIR\n     #\n     cd $STAGING\n@@ -63,22 +65,18 @@ script: |\n     unzip $INDIR/protobuf-win${BITS}-2.5.0-gitian-r4.zip\n     if [ \"$NEEDDIST\" == \"1\" ]; then\n       # Make source code archive which is architecture independent so it only needs to be done once\n-      cd $HOME/build/\n-      cd bitcoin\n-      export PATH=$STAGING/host/bin:$PATH\n-      export TAR_OPTIONS=--mtime=`echo $REFERENCE_DATETIME | awk '{ print $1 }'`\n+      cd $HOME/build/bitcoin\n       ./autogen.sh\n       ./configure --bindir=$OUTDIR --prefix=$STAGING --host=$HOST --with-qt-plugindir=$STAGING/plugins  --with-qt-incdir=$STAGING/include --with-qt-bindir=$STAGING/host/bin --with-boost=$STAGING --disable-maintainer-mode --with-protoc-bindir=$STAGING/host/bin --disable-dependency-tracking CPPFLAGS=\"-I$STAGING/include ${OPTFLAGS}\" LDFLAGS=\"-L$STAGING/lib ${OPTFLAGS}\" CXXFLAGS=\"-frandom-seed=bitcoin ${OPTFLAGS}\"\n       make dist\n-      mkdir -p $OUTDIR/src\n-      cp -f bitcoin-*.tar.* $OUTDIR/src\n+      DISTNAME=`echo bitcoin-*.tar.gz`\n       NEEDDIST=0\n     fi\n     # Build platform-dependent executables from source archive\n     cd $BUILDDIR\n     mkdir -p distsrc\n     cd distsrc\n-    tar --strip-components=1 -xf $HOME/build/bitcoin/bitcoin-*.tar.*\n+    tar --strip-components=1 -xf $HOME/build/bitcoin/$DISTNAME\n     ./configure --bindir=$BINDIR --prefix=$STAGING --host=$HOST --with-qt-plugindir=$STAGING/plugins  --with-qt-incdir=$STAGING/include --with-qt-bindir=$STAGING/host/bin --with-boost=$STAGING --disable-maintainer-mode --with-protoc-bindir=$STAGING/host/bin --disable-dependency-tracking CPPFLAGS=\"-I$STAGING/include ${OPTFLAGS}\" LDFLAGS=\"-L$STAGING/lib ${OPTFLAGS}\" CXXFLAGS=\"-frandom-seed=bitcoin ${OPTFLAGS}\"\n     export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n     export FAKETIME=$REFERENCE_DATETIME\n@@ -90,3 +88,10 @@ script: |\n     unset FAKETIME\n   done # for BITS in\n \n+  # sort distribution tar file and normalize user/group/mtime information for deterministic output\n+  mkdir -p $OUTDIR/src\n+  rm -rf $TEMPDIR\n+  mkdir -p $TEMPDIR\n+  cd $TEMPDIR\n+  tar -xvf $HOME/build/bitcoin/$DISTNAME | sort | tar --no-recursion -cT /dev/stdin --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 --mtime=\"$REFERENCE_DATETIME\" | gzip -n > $OUTDIR/src/$DISTNAME\n+"
      },
      {
        "sha": "543f20b394575adebd1a999723d3ca7524a9d3a4",
        "filename": "contrib/gitian-descriptors/protobuf-win.yml",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/protobuf-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/protobuf-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/protobuf-win.yml?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -17,6 +17,7 @@ script: |\n   #\n   export TZ=UTC\n   INDIR=$HOME/build\n+  TEMPDIR=$HOME/tmp\n   OPTFLAGS=\"-O2\"\n   # Integrity Check\n   echo \"13bfc5ae543cf3aa180ac2485c0bc89495e3ae711fc6fab4f8ffe90dfb4bb677  protobuf-2.5.0.tar.bz2\" | sha256sum -c\n@@ -44,13 +45,21 @@ script: |\n     # Now recompile with the mingw cross-compiler:\n     make distclean\n     ./configure --prefix=$INSTALLPREFIX --enable-shared=no --disable-dependency-tracking --with-protoc=$INSTALLPREFIX/host/bin/protoc --host=$HOST CXXFLAGS=\"-frandom-seed=11 ${OPTFLAGS}\"\n+    export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n+    export FAKETIME=$REFERENCE_DATETIME\n     make\n     make install\n+    # post-process all generated libraries to be deterministic\n+    # extract them to a temporary directory then re-build them deterministically\n+    for LIB in $(find $INSTALLPREFIX -name \\*.a); do\n+        rm -rf $TEMPDIR && mkdir $TEMPDIR && cd $TEMPDIR\n+        $HOST-ar xv $LIB | cut -b5- > /tmp/list.txt\n+        rm $LIB\n+        $HOST-ar crsD $LIB $(cat /tmp/list.txt)\n+    done\n     #\n     cd $INSTALLPREFIX\n-    export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n-    export FAKETIME=$REFERENCE_DATETIME\n-    zip -r $OUTDIR/protobuf-win$BITS-2.5.0-gitian-r4.zip include lib host\n+    find include lib host | sort | zip -X@ $OUTDIR/protobuf-win$BITS-2.5.0-gitian-r4.zip\n     unset LD_PRELOAD\n     unset FAKETIME\n   done # for BITS in"
      },
      {
        "sha": "e3de2c02efc6522695819f9fe86636f67b5b27d9",
        "filename": "contrib/gitian-descriptors/qt-win.yml",
        "status": "modified",
        "additions": 20,
        "deletions": 13,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/qt-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/gitian-descriptors/qt-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/qt-win.yml?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -21,6 +21,7 @@ script: |\n   # Defines\n   export TZ=UTC\n   INDIR=$HOME/build\n+  TEMPDIR=$HOME/tmp\n   # Qt: workaround for determinism in resource ordering\n   #  Qt5's rcc uses a QHash to store the files for the resource.\n   #  A security fix in QHash makes the ordering of keys to be different on every run\n@@ -55,31 +56,37 @@ script: |\n     cd qt-everywhere-opensource-src-5.2.0\n     SPECNAME=\"win32-g++\"\n     SPECFILE=\"qtbase/mkspecs/${SPECNAME}/qmake.conf\"\n-    sed 's/$TODAY/2011-01-30/' -i configure\n+    sed 's/qt_instdate=`date +%Y-%m-%d`/qt_instdate=2011-01-30/' -i qtbase/configure\n     sed --posix \"s|QMAKE_CFLAGS            = -pipe -fno-keep-inline-dllexport|QMAKE_CFLAGS\\t\\t= -pipe -fno-keep-inline-dllexport -isystem /usr/$HOST/include/ -frandom-seed=qtbuild -I$DEPSDIR/include|\" -i ${SPECFILE}\n     sed --posix \"s|QMAKE_LFLAGS            =|QMAKE_LFLAGS\\t\\t= -L$DEPSDIR/lib|\" -i ${SPECFILE}\n-    # ar adds timestamps to every object file included in the static library\n-    # providing -D as ar argument is supposed to solve it, but doesn't work as qmake strips off the arguments and adds -M to pass a script...\n-    # which somehow cannot be combined with other flags.\n-    # use faketime only for ar, as it confuses make/qmake into hanging sometimes\n-    sed --posix \"s|QMAKE_LIB               = \\\\\\$\\\\\\${CROSS_COMPILE}ar -ru|QMAKE_LIB\\t\\t= $HOME/ar -Dr|\" -i ${SPECFILE}\n-    echo '#!/bin/bash' > $HOME/ar\n-    echo 'export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1' >> $HOME/ar\n-    echo \"$HOST-ar \\\"\\$@\\\"\" >> $HOME/ar\n-    chmod +x $HOME/ar\n+    # Before we tried to pass arguments to ar (static linking) in using QMAKE_LIB, however\n+    #  qt removes the arguments for ar and provides a script which makes it impossible to pass the determinism flag -\n+    #  so rather than try to replace ar, post-process all libraries and plugins at the end.\n+    #\n     # Don't load faketime while compiling Qt, qmake will get stuck in nearly infinite loops\n     #export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n-    export FAKETIME=$REFERENCE_DATETIME\n+    #export FAKETIME=$REFERENCE_DATETIME\n     #\n     # Compile static libraries, and use statically linked openssl (-openssl-linked):\n     OPENSSL_LIBS=\"-L$DEPSDIR/lib -lssl -lcrypto -lgdi32\" ./configure -prefix $INSTALLPREFIX -bindir $INSTALLPREFIX/host/bin -confirm-license -release -opensource -static -xplatform $SPECNAME -device-option CROSS_COMPILE=\"$HOST-\" -no-audio-backend -no-javascript-jit -no-sql-sqlite -no-sql-odbc -no-nis -no-cups -no-iconv -no-dbus -no-gif -no-opengl -no-compile-examples -no-feature-style-windowsce -no-feature-style-windowsmobile -no-qml-debug -openssl-linked -skip qtsvg -skip qtwebkit -skip qtwebkit-examples -skip qtserialport -skip qtdeclarative -skip qtmultimedia -skip qtimageformats -skip qtlocation -skip qtsensors -skip qtquick1 -skip qtquickcontrols -skip qtactiveqt -skip qtconnectivity -skip qtwinextras -skip qtxmlpatterns -skip qtscript -skip qtdoc -system-libpng -system-zlib\n     make $MAKEOPTS install\n+    # post-process all generated libraries and plugins to be deterministic\n+    # extract them to a temporary directory then re-build them deterministically\n+    for LIB in $(find $INSTALLPREFIX -name *.a); do\n+        rm -rf $TEMPDIR && mkdir $TEMPDIR && cd $TEMPDIR\n+        $HOST-ar xv $LIB | cut -b5- > /tmp/list.txt\n+        rm $LIB\n+        $HOST-ar crsD $LIB $(cat /tmp/list.txt)\n+    done\n     #\n     cd $INSTALLPREFIX\n-\n+    # Remove unused non-deterministic stuff\n+    rm host/bin/qtpaths.exe lib/libQt5Bootstrap.a lib/libQt5Bootstrap.la\n     # as zip stores file timestamps, use faketime to intercept stat calls to set dates for all files to reference date\n     export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n-    zip -r $OUTDIR/qt-win${BITS}-5.2.0-gitian-r2.zip *\n+    export FAKETIME=$REFERENCE_DATETIME\n+    find -print0 | xargs -r0 touch # fix up timestamps before packaging\n+    find | sort | zip -X@ $OUTDIR/qt-win${BITS}-5.2.0-gitian-r2.zip\n     unset LD_PRELOAD\n     unset FAKETIME\n   done # for BITS in"
      },
      {
        "sha": "f5cdab5325742cbc19dca993d912946c922d3f1f",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,7 +1,7 @@\n \n # bitcoind RPC settings\n rpcuser=someuser\n-rpcpass=somepassword\n+rpcpassword=somepassword\n host=127.0.0.1\n port=8332\n "
      },
      {
        "sha": "650f7d36849046e6613facf6778e9cc835f97bf4",
        "filename": "contrib/linearize/linearize.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/linearize/linearize.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/contrib/linearize/linearize.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize.py?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -71,7 +71,7 @@ def getblock(rpc, settings, n):\n \n def get_blocks(settings):\n \trpc = BitcoinRPC(settings['host'], settings['port'],\n-\t\t\t settings['rpcuser'], settings['rpcpass'])\n+\t\t\t settings['rpcuser'], settings['rpcpassword'])\n \n \toutf = open(settings['output'], 'ab')\n \n@@ -118,7 +118,7 @@ def get_blocks(settings):\n \t\tsettings['min_height'] = 0\n \tif 'max_height' not in settings:\n \t\tsettings['max_height'] = 279000\n-\tif 'rpcuser' not in settings or 'rpcpass' not in settings:\n+\tif 'rpcuser' not in settings or 'rpcpassword' not in settings:\n \t\tprint \"Missing username and/or password in cfg file\"\n \t\tsys.exit(1)\n "
      },
      {
        "sha": "8bf0b50bc09e870cb2e924bbf7bf9a965eb3620a",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -59,6 +59,27 @@ functioning both as a server and as a RPC client. The RPC client functionality\n executable, 'bitcoin-cli'. The RPC client code will eventually be removed from\n bitcoind, but will be kept for backwards compatibility for a release or two.\n \n+`walletpassphrase` RPC\n+-----------------------\n+\n+The behavior of the `walletpassphrase` RPC when the wallet is already unlocked\n+has changed between 0.8 and 0.9.\n+\n+The 0.8 behavior of `walletpassphrase` is to fail when the wallet is already unlocked:\n+\n+    > walletpassphrase 1000\n+    walletunlocktime = now + 1000\n+    > walletpassphrase 10\n+    Error: Wallet is already unlocked (old unlock time stays)\n+\n+The new behavior of `walletpassphrase` is to set a new unlock time overriding\n+the old one:\n+\n+    > walletpassphrase 1000\n+    walletunlocktime = now + 1000\n+    > walletpassphrase 10\n+    walletunlocktime = now + 10 (overriding the old unlock time)\n+\n 0.9.0rc1 Release notes\n =======================\n "
      },
      {
        "sha": "ee9e8b35ca713914fc6f93e4516099ef9fa45686",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,6 +1,25 @@\n Regression tests of RPC interface\n =================================\n \n-wallet.sh : Test wallet send/receive code (see comments for details)\n+wallet.sh : Exercise wallet send/receive code.\n \n-util.sh : useful re-usable functions \n+walletbackup.sh : Exercise wallet backup / dump / import\n+\n+txnmall.sh : Test proper accounting of malleable transactions\n+\n+conflictedbalance.sh : More testing of malleable transaction handling\n+\n+util.sh : useful re-usable bash functions\n+\n+\n+Tips for creating new tests\n+===========================\n+\n+To cleanup after a failed or interrupted test:\n+  killall bitcoind\n+  rm -rf test.*\n+\n+The most difficult part of writing reproducible tests is\n+keeping multiple nodes in sync. See WaitBlocks,\n+WaitPeers, and WaitMemPools for how other tests\n+deal with this."
      },
      {
        "sha": "2c0d5375c063f6e105cf2e46834ecd07158e86a3",
        "filename": "qa/rpc-tests/send.sh",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/qa/rpc-tests/send.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/qa/rpc-tests/send.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/send.sh?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,14 +1,28 @@\n #!/bin/bash\n TIMEOUT=10\n SIGNAL=HUP\n+PIDFILE=.send.pid\n if [ $# -eq 0 ]; then\n   echo -e \"Usage:\\t$0 <cmd>\"\n   echo -e \"\\tRuns <cmd> and wait ${TIMEOUT} seconds or until SIG${SIGNAL} is received.\"\n   echo -e \"\\tReturns: 0 if SIG${SIGNAL} is received, 1 otherwise.\"\n+  echo -e \"Or:\\t$0 -STOP\"\n+  echo -e \"\\tsends SIG${SIGNAL} to running send.sh\"\n   exit 0\n fi\n+\n+if [ $1 == \"-STOP\" ]; then\n+  if [ -s ${PIDFILE} ]; then\n+      kill -s ${SIGNAL} $(<${PIDFILE})\n+  fi\n+  exit 0\n+fi\n+\n trap '[[ ${PID} ]] && kill ${PID}' ${SIGNAL}\n+trap 'rm -f ${PIDFILE}' EXIT\n+echo $$ > ${PIDFILE}\n \"$@\"\n sleep ${TIMEOUT} & PID=$!\n wait ${PID} && exit 1\n+\n exit 0"
      },
      {
        "sha": "06e4f7102de57dce1ddadeeb322e4c5296093637",
        "filename": "qa/rpc-tests/txnmall.sh",
        "status": "added",
        "additions": 150,
        "deletions": 0,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/qa/rpc-tests/txnmall.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/qa/rpc-tests/txnmall.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txnmall.sh?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -0,0 +1,150 @@\n+#!/usr/bin/env bash\n+\n+# Test block generation and basic wallet sending\n+\n+if [ $# -lt 1 ]; then\n+        echo \"Usage: $0 path_to_binaries\"\n+        echo \"e.g. $0 ../../src\"\n+        exit 1\n+fi\n+\n+set -f\n+\n+BITCOIND=${1}/bitcoind\n+CLI=${1}/bitcoin-cli\n+\n+DIR=\"${BASH_SOURCE%/*}\"\n+SENDANDWAIT=\"${DIR}/send.sh\"\n+if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n+. \"$DIR/util.sh\"\n+\n+D=$(mktemp -d test.XXXXX)\n+\n+# Two nodes; one will play the part of merchant, the\n+# other an evil transaction-mutating miner.\n+\n+D1=${D}/node1\n+CreateDataDir $D1 port=11000 rpcport=11001\n+B1ARGS=\"-datadir=$D1\"\n+$BITCOIND $B1ARGS &\n+B1PID=$!\n+\n+D2=${D}/node2\n+CreateDataDir $D2 port=11010 rpcport=11011\n+B2ARGS=\"-datadir=$D2\"\n+$BITCOIND $B2ARGS &\n+B2PID=$!\n+\n+trap \"kill -9 $B1PID $B2PID; rm -rf $D\" EXIT\n+\n+# Wait until all four nodes are at the same block number\n+function WaitBlocks {\n+    while :\n+    do\n+        sleep 1\n+        BLOCKS1=$( GetBlocks $B1ARGS )\n+        BLOCKS2=$( GetBlocks $B2ARGS )\n+        if (( $BLOCKS1 == $BLOCKS2 ))\n+        then\n+            break\n+        fi\n+    done\n+}\n+\n+# Wait until node has $N peers\n+function WaitPeers {\n+    while :\n+    do\n+        PEERS=$( $CLI $1 getconnectioncount )\n+        if (( \"$PEERS\" == $2 ))\n+        then\n+            break\n+        fi\n+        sleep 1\n+    done\n+}\n+\n+# Start with B2 connected to B1:\n+$CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n+WaitPeers \"$B1ARGS\" 1\n+\n+# 1 block, 50 XBT each == 50 XBT\n+$CLI $B1ARGS setgenerate true 1\n+\n+WaitBlocks\n+# 100 blocks, 0 mature == 0 XBT\n+$CLI $B2ARGS setgenerate true 100\n+WaitBlocks\n+\n+CheckBalance $B1ARGS 50\n+CheckBalance $B2ARGS 0\n+\n+# restart B2 with no connection\n+$CLI $B2ARGS stop > /dev/null 2>&1\n+wait $B2PID\n+$BITCOIND $B2ARGS &\n+B2PID=$!\n+\n+B2ADDRESS=$( $CLI $B2ARGS getnewaddress )\n+\n+# Have B1 create two transactions; second will\n+# spend change from first, since B1 starts with only a single\n+# 50 bitcoin output:\n+$CLI $B1ARGS move \"\" \"foo\" 10.0\n+$CLI $B1ARGS move \"\" \"bar\" 10.0\n+TXID1=$( $CLI $B1ARGS sendfrom foo $B2ADDRESS 1.0 0)\n+TXID2=$( $CLI $B1ARGS sendfrom bar $B2ADDRESS 2.0 0)\n+\n+# Mutate TXID1 and add it to B2's memory pool:\n+RAWTX1=$( $CLI $B1ARGS getrawtransaction $TXID1 )\n+RAWTX2=$( $CLI $B1ARGS getrawtransaction $TXID2 )\n+# ... mutate RAWTX1:\n+# RAWTX1 is hex-encoded, serialized transaction. So each\n+# byte is two characters; we'll prepend the first\n+# \"push\" in the scriptsig with OP_PUSHDATA1 (0x4c),\n+# and add one to the length of the signature.\n+# Fields are fixed; from the beginning:\n+# 4-byte version\n+# 1-byte varint number-of inputs (one in this case)\n+# 32-byte previous txid\n+# 4-byte previous output\n+# 1-byte varint length-of-scriptsig\n+# 1-byte PUSH this many bytes onto stack\n+#  ... etc\n+# So: to mutate, we want to get byte 41 (hex characters 82-83),\n+# increment it, and insert 0x4c after it.\n+L=${RAWTX1:82:2}\n+NEWLEN=$( printf \"%x\" $(( 16#$L + 1 )) )\n+MUTATEDTX1=${RAWTX1:0:82}${NEWLEN}4c${RAWTX1:84}\n+# ... give mutated tx1 to B2:\n+MUTATEDTXID=$( $CLI $B2ARGS sendrawtransaction $MUTATEDTX1 )\n+\n+echo \"TXID1: \" $TXID1\n+echo \"Mutated: \" $MUTATEDTXID\n+\n+# Re-connect nodes, and have B2 mine a block\n+$CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n+WaitPeers \"$B1ARGS\" 1\n+\n+$CLI $B2ARGS setgenerate true 3\n+WaitBlocks\n+$CLI $B1ARGS setgenerate true 3\n+WaitBlocks\n+\n+$CLI $B2ARGS stop > /dev/null 2>&1\n+wait $B2PID\n+$CLI $B1ARGS stop > /dev/null 2>&1\n+wait $B1PID\n+\n+trap \"\" EXIT\n+\n+echo \"Done, bitcoind's shut down. To rerun/poke around:\"\n+echo \"${1}/bitcoind -datadir=$D1 -daemon\"\n+echo \"${1}/bitcoind -datadir=$D2 -daemon -connect=127.0.0.1:11000\"\n+echo \"To cleanup:\"\n+echo \"killall bitcoind; rm -rf test.*\"\n+exit 0\n+\n+echo \"Tests successful, cleaning up\"\n+rm -rf $D\n+exit 0"
      },
      {
        "sha": "d1e4c941cc1a80c07720d9e376bcaa68dd904a33",
        "filename": "qa/rpc-tests/util.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/qa/rpc-tests/util.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/qa/rpc-tests/util.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.sh?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -23,7 +23,7 @@ function CreateDataDir {\n   echo \"rpcuser=rt\" >> $CONF\n   echo \"rpcpassword=rt\" >> $CONF\n   echo \"rpcwait=1\" >> $CONF\n-  echo \"walletnotify=killall -HUP `basename ${SENDANDWAIT}`\" >> $CONF\n+  echo \"walletnotify=${SENDANDWAIT} -STOP\" >> $CONF\n   shift\n   while (( \"$#\" )); do\n       echo $1 >> $CONF"
      },
      {
        "sha": "9207243b62454160be2cb562f1d463d5d22ece3f",
        "filename": "qa/rpc-tests/walletbackup.sh",
        "status": "added",
        "additions": 293,
        "deletions": 0,
        "changes": 293,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/qa/rpc-tests/walletbackup.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/qa/rpc-tests/walletbackup.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.sh?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env bash\n+\n+# Test wallet backup / dump / restore functionality\n+\n+# Test case is:\n+# 4 nodes. 1 2 3 and send transactions between each other,\n+# fourth node is a miner.\n+# 1 2 3 and each mine a block to start, then\n+# miner creates 100 blocks so 1 2 3 each have 50 mature\n+# coins to spend.\n+# Then 5 iterations of 1/2/3 sending coins amongst\n+# themselves to get transactions in the wallets,\n+# and the miner mining one block.\n+#\n+# Wallets are backed up using dumpwallet/backupwallet.\n+# Then 5 more iterations of transactions, then block.\n+#\n+# Miner then generates 101 more blocks, so any\n+# transaction fees paid mature.\n+#\n+# Sanity checks done:\n+#   Miner balance >= 150*50\n+#   Sum(1,2,3,4 balances) == 153*150\n+#\n+# 1/2/3 are shutdown, and their wallets erased.\n+# Then restore using wallet.dat backup. And\n+# confirm 1/2/3/4 balances are same as before.\n+#\n+# Shutdown again, restore using importwallet,\n+# and confirm again balances are correct.\n+#\n+\n+if [ $# -lt 1 ]; then\n+        echo \"Usage: $0 path_to_binaries\"\n+        echo \"e.g. $0 ../../src\"\n+        exit 1\n+fi\n+\n+BITCOIND=${1}/bitcoind\n+CLI=${1}/bitcoin-cli\n+\n+DIR=\"${BASH_SOURCE%/*}\"\n+SENDANDWAIT=\"${DIR}/send.sh\"\n+if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n+. \"$DIR/util.sh\"\n+\n+D=$(mktemp -d test.XXXXX)\n+\n+echo \"Starting nodes...\"\n+\n+# \"Miner\":\n+D4=${D}/node4\n+CreateDataDir $D4 port=11030 rpcport=11031\n+B4ARGS=\"-datadir=$D4\"\n+$BITCOIND $BITCOINDARGS $B4ARGS &\n+B4PID=$!\n+\n+# Want default keypool for 1/2/3, and\n+# don't need send-and-wait functionality,\n+# so don't use CreateDataDir:\n+function CreateConfDir {\n+  DIR=$1\n+  mkdir -p $DIR\n+  CONF=$DIR/bitcoin.conf\n+  echo \"regtest=1\" >> $CONF\n+  echo \"rpcuser=rt\" >> $CONF\n+  echo \"rpcpassword=rt\" >> $CONF\n+  echo \"rpcwait=1\" >> $CONF\n+  shift\n+  while (( \"$#\" )); do\n+      echo $1 >> $CONF\n+      shift\n+  done\n+}\n+\n+# \"Spenders\" 1/2/3\n+D1=${D}/node1\n+CreateConfDir $D1 port=11000 rpcport=11001 addnode=127.0.0.1:11030\n+B1ARGS=\"-datadir=$D1\"\n+$BITCOIND $B1ARGS &\n+B1PID=$!\n+D2=${D}/node2\n+CreateConfDir $D2 port=11010 rpcport=11011 addnode=127.0.0.1:11030\n+B2ARGS=\"-datadir=$D2\"\n+$BITCOIND $B2ARGS &\n+B2PID=$!\n+D3=${D}/node3\n+CreateConfDir $D3 port=11020 rpcport=11021 addnode=127.0.0.1:11030 addnode=127.0.0.1:11000\n+B3ARGS=\"-datadir=$D3\"\n+$BITCOIND $BITCOINDARGS $B3ARGS &\n+B3PID=$!\n+\n+# Wait until all nodes are at the same block number\n+function WaitBlocks {\n+    while :\n+    do\n+        sleep 1\n+        BLOCKS1=$( GetBlocks \"$B1ARGS\" )\n+        BLOCKS2=$( GetBlocks \"$B2ARGS\" )\n+        BLOCKS3=$( GetBlocks \"$B3ARGS\" )\n+        BLOCKS4=$( GetBlocks \"$B4ARGS\" )\n+        if (( BLOCKS1 == BLOCKS4 && BLOCKS2 == BLOCKS4 && BLOCKS3 == BLOCKS4 ))\n+        then\n+            break\n+        fi\n+    done\n+}\n+\n+# Wait until all nodes have the same txns in\n+# their memory pools\n+function WaitMemPools {\n+    while :\n+    do\n+        sleep 1\n+        MEMPOOL1=$( $CLI \"$B1ARGS\" getrawmempool | sort | shasum )\n+        MEMPOOL2=$( $CLI \"$B2ARGS\" getrawmempool | sort | shasum )\n+        MEMPOOL3=$( $CLI \"$B3ARGS\" getrawmempool | sort | shasum )\n+        MEMPOOL4=$( $CLI \"$B4ARGS\" getrawmempool | sort | shasum )\n+        if [[ $MEMPOOL1 = $MEMPOOL4 && $MEMPOOL2 = $MEMPOOL4 && $MEMPOOL3 = $MEMPOOL4 ]]\n+        then\n+            break\n+        fi\n+    done\n+}\n+\n+echo \"Generating initial blockchain...\"\n+\n+# 1 block, 50 XBT each == 50 BTC\n+$CLI $B1ARGS setgenerate true 1\n+WaitBlocks\n+$CLI $B2ARGS setgenerate true 1\n+WaitBlocks\n+$CLI $B3ARGS setgenerate true 1\n+WaitBlocks\n+\n+# 100 blocks, 0 mature\n+$CLI $B4ARGS setgenerate true 100\n+WaitBlocks\n+\n+CheckBalance \"$B1ARGS\" 50\n+CheckBalance \"$B2ARGS\" 50\n+CheckBalance \"$B3ARGS\" 50\n+CheckBalance \"$B4ARGS\" 0\n+\n+echo \"Creating transactions...\"\n+\n+function S {\n+  TXID=$( $CLI -datadir=${D}/node${1} sendtoaddress ${2} \"${3}\" 0 )\n+  if [[ $TXID == \"\" ]] ; then\n+      echoerr \"node${1}: error sending ${3} btc\"\n+      echo -n \"node${1} balance: \"\n+      $CLI -datadir=${D}/node${1} getbalance \"*\" 0\n+      exit 1\n+  fi\n+}\n+\n+function OneRound {\n+  A1=$( $CLI $B1ARGS getnewaddress )\n+  A2=$( $CLI $B2ARGS getnewaddress )\n+  A3=$( $CLI $B3ARGS getnewaddress )\n+  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n+      N=$(( $RANDOM % 9 + 1 ))\n+      S 1 $A2 \"0.$N\"\n+  fi\n+  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n+      N=$(( $RANDOM % 9 + 1 ))\n+      S 1 $A3 \"0.0$N\"\n+  fi\n+  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n+      N=$(( $RANDOM % 9 + 1 ))\n+      S 2 $A1 \"0.$N\"\n+  fi\n+  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n+      N=$(( $RANDOM % 9 + 1 ))\n+      S 2 $A3 \"0.$N\"\n+  fi\n+  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n+      N=$(( $RANDOM % 9 + 1 ))\n+      S 3 $A1 \"0.$N\"\n+  fi\n+  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n+      N=$(( $RANDOM % 9 + 1 ))\n+      S 3 $A2 \"0.0$N\"\n+  fi\n+  $CLI \"$B4ARGS\" setgenerate true 1\n+}\n+\n+for i in {1..5}; do OneRound ; done\n+\n+echo \"Backing up...\"\n+\n+$CLI \"$B1ARGS\" backupwallet \"$D1/wallet.bak\"\n+$CLI \"$B1ARGS\" dumpwallet \"$D1/wallet.dump\"\n+$CLI \"$B2ARGS\" backupwallet \"$D2/wallet.bak\"\n+$CLI \"$B2ARGS\" dumpwallet \"$D2/wallet.dump\"\n+$CLI \"$B3ARGS\" backupwallet \"$D3/wallet.bak\"\n+$CLI \"$B3ARGS\" dumpwallet \"$D3/wallet.dump\"\n+\n+echo \"More transactions...\"\n+for i in {1..5}; do OneRound ; done\n+\n+WaitMemPools\n+\n+# Generate 101 more blocks, so any fees paid\n+# mature\n+$CLI \"$B4ARGS\" setgenerate true 101\n+\n+BALANCE1=$( $CLI \"$B1ARGS\" getbalance )\n+BALANCE2=$( $CLI \"$B2ARGS\" getbalance )\n+BALANCE3=$( $CLI \"$B3ARGS\" getbalance )\n+BALANCE4=$( $CLI \"$B4ARGS\" getbalance )\n+\n+TOTAL=$( dc -e \"$BALANCE1 $BALANCE2 $BALANCE3 $BALANCE4 + + + p\" )\n+\n+AssertEqual $TOTAL 5700.00000000\n+\n+function StopThree {\n+  $CLI $B1ARGS stop > /dev/null 2>&1\n+  $CLI $B2ARGS stop > /dev/null 2>&1\n+  $CLI $B3ARGS stop > /dev/null 2>&1\n+  wait $B1PID\n+  wait $B2PID\n+  wait $B3PID\n+}\n+function EraseThree {\n+  rm $D1/regtest/wallet.dat\n+  rm $D2/regtest/wallet.dat\n+  rm $D3/regtest/wallet.dat\n+}\n+function StartThree {\n+  $BITCOIND $BITCOINDARGS $B1ARGS &\n+  B1PID=$!\n+  $BITCOIND $BITCOINDARGS $B2ARGS &\n+  B2PID=$!\n+  $BITCOIND $BITCOINDARGS $B3ARGS &\n+  B3PID=$!\n+}\n+\n+echo \"Restoring using wallet.dat\"\n+\n+StopThree\n+EraseThree\n+\n+# Start node3 with no chain\n+rm -rf $D3/regtest/blocks\n+rm -rf $D3/regtest/chainstate\n+rm -rf $D3/regtest/database\n+\n+cp $D1/wallet.bak $D1/regtest/wallet.dat\n+cp $D2/wallet.bak $D2/regtest/wallet.dat\n+cp $D3/wallet.bak $D3/regtest/wallet.dat\n+\n+StartThree\n+WaitBlocks\n+\n+AssertEqual $BALANCE1 $( $CLI \"$B1ARGS\" getbalance )\n+AssertEqual $BALANCE2 $( $CLI \"$B2ARGS\" getbalance )\n+AssertEqual $BALANCE3 $( $CLI \"$B3ARGS\" getbalance )\n+\n+echo \"Restoring using dumped wallet\"\n+\n+StopThree\n+EraseThree\n+\n+# Start node3 with no chain\n+rm -rf $D3/regtest/blocks\n+rm -rf $D3/regtest/chainstate\n+rm -rf $D3/regtest/database\n+\n+StartThree\n+\n+AssertEqual 0 $( $CLI \"$B1ARGS\" getbalance )\n+AssertEqual 0 $( $CLI \"$B2ARGS\" getbalance )\n+AssertEqual 0 $( $CLI \"$B3ARGS\" getbalance )\n+\n+$CLI \"$B1ARGS\" importwallet $D1/wallet.dump\n+$CLI \"$B2ARGS\" importwallet $D2/wallet.dump\n+$CLI \"$B3ARGS\" importwallet $D3/wallet.dump\n+\n+WaitBlocks\n+\n+AssertEqual $BALANCE1 $( $CLI \"$B1ARGS\" getbalance )\n+AssertEqual $BALANCE2 $( $CLI \"$B2ARGS\" getbalance )\n+AssertEqual $BALANCE3 $( $CLI \"$B3ARGS\" getbalance )\n+\n+StopThree\n+$CLI $B4ARGS stop > /dev/null 2>&1\n+wait $B4PID\n+\n+echo \"Tests successful, cleaning up\"\n+trap \"\" EXIT\n+rm -rf $D\n+exit 0"
      },
      {
        "sha": "4429ecadcec6a082069619a6d0b8851c59f705be",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,7 +11,6 @@\n #include \"util.h\"\n \n #include <algorithm>\n-#include <inttypes.h>\n #include <map>\n \n #include <boost/algorithm/string/classification.hpp>"
      },
      {
        "sha": "5e6566a7ac78a0410593f550e3e4af76b296cb16",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "f5c460761e36fa9cde3318eca0d6abd2561380c0",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "5eb953610d0a0de3f5f94de510d0f953711cf0fd",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -156,8 +156,8 @@ class CTxOut\n         // to spend something, then we consider it dust.\n         // A typical txout is 34 bytes big, and will\n         // need a CTxIn of at least 148 bytes to spend,\n-        // so dust is a txout less than 54 uBTC\n-        // (5460 satoshis) with default nMinRelayTxFee\n+        // so dust is a txout less than 546 satoshis \n+        // with default nMinRelayTxFee.\n         return ((nValue*1000)/(3*((int)GetSerializeSize(SER_DISK,0)+148)) < nMinRelayTxFee);\n     }\n "
      },
      {
        "sha": "591d4ed47789d1e96ce6f2ea666cb9a5a7ac8891",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,7 +10,6 @@\n #include \"protocol.h\"\n #include \"util.h\"\n \n-#include <inttypes.h>\n #include <stdint.h>\n \n #ifndef WIN32"
      },
      {
        "sha": "4cc04f52059e7fd8cea7b3d127d6098761e8373e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 7,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -24,7 +24,6 @@\n #include \"walletdb.h\"\n #endif\n \n-#include <inttypes.h>\n #include <stdint.h>\n \n #ifndef WIN32\n@@ -196,7 +195,7 @@ std::string HelpMessage(HelpMessageMode hmm)\n     strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n     strUsage += \"  -pid=<file>            \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\";\n     strUsage += \"  -gen                   \" + _(\"Generate coins (default: 0)\") + \"\\n\";\n-    strUsage += \"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\";\n+    strUsage += \"  -dbcache=<n>           \" + strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache) + \"\\n\";\n     strUsage += \"  -timeout=<n>           \" + _(\"Specify connection timeout in milliseconds (default: 5000)\") + \"\\n\";\n     strUsage += \"  -proxy=<ip:port>       \" + _(\"Connect through SOCKS proxy\") + \"\\n\";\n     strUsage += \"  -socks=<n>             \" + _(\"Select SOCKS version for -proxy (4 or 5, default: 5)\") + \"\\n\";\n@@ -270,10 +269,12 @@ std::string HelpMessage(HelpMessageMode hmm)\n     strUsage += \"  -disablewallet         \" + _(\"Do not load the wallet and disable wallet RPC calls\") + \"\\n\";\n     strUsage += \"  -paytxfee=<amt>        \" + _(\"Fee per kB to add to transactions you send\") + \"\\n\";\n     strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\";\n+    strUsage += \"  -zapwallettxes         \" + _(\"Clear list of wallet transactions (diagnostic tool; implies -rescan)\") + \"\\n\";\n     strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \"\\n\";\n     strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \"\\n\";\n     strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \"\\n\";\n     strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n+    strUsage += \"  -spendzeroconfchange   \" + _(\"Spend unconfirmed change when sending transactions (default: 1)\") + \"\\n\";\n #endif\n     strUsage += \"\\n\" + _(\"Block creation options:\") + \"\\n\";\n     strUsage += \"  -blockminsize=<n>      \" + _(\"Set minimum block size in bytes (default: 0)\") + \"\\n\";\n@@ -336,6 +337,8 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n             LoadExternalBlockFile(file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n+        } else {\n+            LogPrintf(\"Warning: Could not open bootstrap file %s\\n\", pathBootstrap.string());\n         }\n     }\n \n@@ -344,8 +347,10 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         FILE *file = fopen(path.string().c_str(), \"rb\");\n         if (file) {\n             CImportingNow imp;\n-            LogPrintf(\"Importing %s...\\n\", path.string());\n+            LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n             LoadExternalBlockFile(file);\n+        } else {\n+            LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n         }\n     }\n }\n@@ -453,6 +458,12 @@ bool AppInit2(boost::thread_group& threadGroup)\n             LogPrintf(\"AppInit2 : parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\");\n     }\n \n+    // -zapwallettx implies a rescan\n+    if (GetBoolArg(\"-zapwallettxes\", false)) {\n+        if (SoftSetBoolArg(\"-rescan\", true))\n+            LogPrintf(\"AppInit2 : parameter interaction: -zapwallettxes=1 -> setting -rescan=1\\n\");\n+    }\n+\n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\"), 1);\n     nMaxConnections = GetArg(\"-maxconnections\", 125);\n@@ -539,6 +550,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         if (nTransactionFee > 0.25 * COIN)\n             InitWarning(_(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n     }\n+    bSpendZeroConfChange = GetArg(\"-spendzeroconfchange\", true);\n \n     strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif\n@@ -763,9 +775,11 @@ bool AppInit2(boost::thread_group& threadGroup)\n     }\n \n     // cache size calculations\n-    size_t nTotalCache = GetArg(\"-dbcache\", 25) << 20;\n-    if (nTotalCache < (1 << 22))\n-        nTotalCache = (1 << 22); // total cache cannot be less than 4 MiB\n+    size_t nTotalCache = (GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n+    if (nTotalCache < (nMinDbCache << 20))\n+        nTotalCache = (nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n+    else if (nTotalCache > (nMaxDbCache << 20))\n+        nTotalCache = (nMaxDbCache << 20); // total cache cannot be greater than nMaxDbCache\n     size_t nBlockTreeDBCache = nTotalCache / 8;\n     if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", false))\n         nBlockTreeDBCache = (1 << 21); // block tree db cache shouldn't be larger than 2 MiB\n@@ -897,6 +911,20 @@ bool AppInit2(boost::thread_group& threadGroup)\n         pwalletMain = NULL;\n         LogPrintf(\"Wallet disabled!\\n\");\n     } else {\n+        if (GetBoolArg(\"-zapwallettxes\", false)) {\n+            uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n+\n+            pwalletMain = new CWallet(strWalletFile);\n+            DBErrors nZapWalletRet = pwalletMain->ZapWalletTx();\n+            if (nZapWalletRet != DB_LOAD_OK) {\n+                uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n+                return false;\n+            }\n+\n+            delete pwalletMain;\n+            pwalletMain = NULL;\n+        }\n+\n         uiInterface.InitMessage(_(\"Loading wallet...\"));\n \n         nStart = GetTimeMillis();"
      },
      {
        "sha": "43c737a599a3e975c4a3802addd181b9788deead",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2012-2013 The Bitcoin developers\n+// Copyright (c) 2012-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "53b99101d93902eaf3fbd2dd8c52aee370642faa",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 5,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -17,7 +17,6 @@\n #include \"ui_interface.h\"\n #include \"util.h\"\n \n-#include <inttypes.h>\n #include <sstream>\n \n #include <boost/algorithm/string/replace.hpp>\n@@ -53,7 +52,7 @@ unsigned int nCoinCacheSize = 5000;\n /** Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) */\n int64_t CTransaction::nMinTxFee = 10000;  // Override with -mintxfee\n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying) */\n-int64_t CTransaction::nMinRelayTxFee = 10000;\n+int64_t CTransaction::nMinRelayTxFee = 1000;\n \n static CMedianFilter<int> cPeerBlockCounts(8, 0); // Amount of blocks that other nodes claim to have\n \n@@ -442,6 +441,10 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n             reason = \"scriptsig-not-pushonly\";\n             return false;\n         }\n+        if (!txin.scriptSig.HasCanonicalPushes()) {\n+            reason = \"scriptsig-non-canonical-push\";\n+            return false;\n+        }\n     }\n \n     unsigned int nDataOut = 0;\n@@ -868,7 +871,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n }\n \n \n-int CMerkleTx::GetDepthInMainChain(CBlockIndex* &pindexRet) const\n+int CMerkleTx::GetDepthInMainChainINTERNAL(CBlockIndex* &pindexRet) const\n {\n     if (hashBlock == 0 || nIndex == -1)\n         return 0;\n@@ -893,6 +896,14 @@ int CMerkleTx::GetDepthInMainChain(CBlockIndex* &pindexRet) const\n     return chainActive.Height() - pindex->nHeight + 1;\n }\n \n+int CMerkleTx::GetDepthInMainChain(CBlockIndex* &pindexRet) const\n+{\n+    int nResult = GetDepthInMainChainINTERNAL(pindexRet);\n+    if (nResult == 0 && !mempool.exists(GetHash()))\n+        return -1; // Not in chain, not in mempool\n+\n+    return nResult;\n+}\n \n int CMerkleTx::GetBlocksToMaturity() const\n {\n@@ -2264,6 +2275,11 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp)\n             return state.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lock-in at %d\", nHeight),\n                              REJECT_CHECKPOINT, \"checkpoint mismatch\");\n \n+        // Don't accept any forks from the main chain prior to last checkpoint\n+        CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n+        if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n+            return state.DoS(100, error(\"AcceptBlock() : forked chain older than last checkpoint (height %d)\", nHeight));\n+\n         // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n         if (block.nVersion < 2)\n         {\n@@ -3121,10 +3137,28 @@ void static ProcessGetData(CNode* pfrom)\n \n             if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n             {\n-                // Send block from disk\n+                bool send = false;\n                 map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(inv.hash);\n                 if (mi != mapBlockIndex.end())\n                 {\n+                    // If the requested block is at a height below our last\n+                    // checkpoint, only serve it if it's in the checkpointed chain\n+                    int nHeight = mi->second->nHeight;\n+                    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n+                    if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n+                       if (!chainActive.Contains(mi->second))\n+                       {\n+                         LogPrintf(\"ProcessGetData(): ignoring request for old block that isn't in the main chain\\n\");\n+                       } else {\n+                         send = true;\n+                       }\n+                    } else {\n+                      send = true;\n+                    }\n+                }\n+                if (send)\n+                {\n+                    // Send block from disk\n                     CBlock block;\n                     ReadBlockFromDisk(block, (*mi).second);\n                     if (inv.type == MSG_BLOCK)"
      },
      {
        "sha": "781562854f418845325d63ec1ee32cbfec993bcb",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -77,12 +77,6 @@ static const unsigned char REJECT_CHECKPOINT = 0x43;\n \n \n extern CScript COINBASE_FLAGS;\n-\n-\n-\n-\n-\n-\n extern CCriticalSection cs_main;\n extern CTxMemPool mempool;\n extern std::map<uint256, CBlockIndex*> mapBlockIndex;\n@@ -96,7 +90,6 @@ extern bool fBenchmark;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern unsigned int nCoinCacheSize;\n-extern bool fHaveGUI;\n \n // Minimum disk space required - used in CheckDiskSpace()\n static const uint64_t nMinDiskSpace = 52428800;\n@@ -423,6 +416,8 @@ class CScriptCheck\n /** A transaction with a merkle branch linking it to the block chain. */\n class CMerkleTx : public CTransaction\n {\n+private:\n+    int GetDepthInMainChainINTERNAL(CBlockIndex* &pindexRet) const;\n public:\n     uint256 hashBlock;\n     std::vector<uint256> vMerkleBranch;\n@@ -461,9 +456,14 @@ class CMerkleTx : public CTransaction\n \n \n     int SetMerkleBranch(const CBlock* pblock=NULL);\n+\n+    // Return depth of transaction in blockchain:\n+    // -1  : not in blockchain, and not in memory pool (conflicted transaction)\n+    //  0  : in memory pool, waiting to be included in a block\n+    // >=1 : this many blocks deep in the main chain\n     int GetDepthInMainChain(CBlockIndex* &pindexRet) const;\n     int GetDepthInMainChain() const { CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n-    bool IsInMainChain() const { return GetDepthInMainChain() > 0; }\n+    bool IsInMainChain() const { CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n     bool AcceptToMemoryPool(bool fLimitFree=true);\n };"
      },
      {
        "sha": "73dd0a749d7049b86fd6563b72a407a1adbb65b4",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "359e629295ec7df1b300e43137daa708fb06419a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "da590f89e172c6d9949cf6c995481b4ca643f2ab",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -18,7 +18,6 @@\n #include \"util.h\"\n \n #include <deque>\n-#include <inttypes.h>\n #include <stdint.h>\n \n #ifndef WIN32"
      },
      {
        "sha": "d5b75d6afdb1c7dab24b4f604d35172fd666b16e",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "32c861b0d9decf000cc6ace73a542965796a25ff",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "c77a92f02066f893af564094948d972adbfda839",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "030804db6e44601d7561c52f3f9d5a7edde9c9be",
        "filename": "src/qt/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/Makefile.am?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -243,6 +243,7 @@ RES_ICONS = \\\n   res/icons/toolbar_testnet.png \\\n   res/icons/transaction0.png \\\n   res/icons/transaction2.png \\\n+  res/icons/transaction_conflicted.png \\\n   res/icons/tx_inout.png \\\n   res/icons/tx_input.png \\\n   res/icons/tx_output.png \\"
      },
      {
        "sha": "162009f5de7a5e7339bb1bab7b05dee0a43c786f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7c3a7756b79348794ab981bbdd8681d1bbf9c8a9",
        "filename": "src/qt/bitcoin.qrc",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/bitcoin.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/bitcoin.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.qrc?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -12,6 +12,7 @@\n         <file alias=\"connect_4\">res/icons/connect4_16.png</file>\n         <file alias=\"transaction_0\">res/icons/transaction0.png</file>\n         <file alias=\"transaction_confirmed\">res/icons/transaction2.png</file>\n+        <file alias=\"transaction_conflicted\">res/icons/transaction_conflicted.png</file>\n         <file alias=\"transaction_1\">res/icons/clock1.png</file>\n         <file alias=\"transaction_2\">res/icons/clock2.png</file>\n         <file alias=\"transaction_3\">res/icons/clock3.png</file>"
      },
      {
        "sha": "25ad0c66af1dda590db35e254798c28fc8f470aa",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -19,12 +19,12 @@ BitcoinAmountField::BitcoinAmountField(QWidget *parent) :\n     amount(0),\n     currentUnit(-1)\n {\n+    nSingleStep = 100000; // satoshis\n+\n     amount = new QDoubleSpinBox(this);\n     amount->setLocale(QLocale::c());\n-    amount->setDecimals(8);\n     amount->installEventFilter(this);\n     amount->setMaximumWidth(170);\n-    amount->setSingleStep(0.001);\n \n     QHBoxLayout *layout = new QHBoxLayout(this);\n     layout->addWidget(amount);\n@@ -159,11 +159,7 @@ void BitcoinAmountField::unitChanged(int idx)\n     // Set max length after retrieving the value, to prevent truncation\n     amount->setDecimals(BitcoinUnits::decimals(currentUnit));\n     amount->setMaximum(qPow(10, BitcoinUnits::amountDigits(currentUnit)) - qPow(10, -amount->decimals()));\n-\n-    if (currentUnit == BitcoinUnits::uBTC)\n-        amount->setSingleStep(0.01);\n-    else\n-        amount->setSingleStep(0.001);\n+    amount->setSingleStep((double)nSingleStep / (double)BitcoinUnits::factor(currentUnit));\n \n     if (valid)\n     {\n@@ -182,3 +178,9 @@ void BitcoinAmountField::setDisplayUnit(int newUnit)\n {\n     unit->setValue(newUnit);\n }\n+\n+void BitcoinAmountField::setSingleStep(qint64 step)\n+{\n+    nSingleStep = step;\n+    unitChanged(unit->currentIndex());\n+}"
      },
      {
        "sha": "521a9ed561b3d006bb1e64ebf10abaa62cf43b44",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -26,6 +26,9 @@ class BitcoinAmountField: public QWidget\n     qint64 value(bool *valid=0) const;\n     void setValue(qint64 value);\n \n+    /** Set single step in satoshis **/\n+    void setSingleStep(qint64 step);\n+\n     /** Make read-only **/\n     void setReadOnly(bool fReadOnly);\n \n@@ -56,6 +59,7 @@ class BitcoinAmountField: public QWidget\n     QDoubleSpinBox *amount;\n     QValueComboBox *unit;\n     int currentUnit;\n+    qint64 nSingleStep;\n \n     void setText(const QString &text);\n     QString text() const;"
      },
      {
        "sha": "f66fab496cea40bae3ce31da8113f59d018800f3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "0cc1ebc502972fa074645a6282ec7e9e7c18168e",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "a31c491e953210399e182f6229aeb81f7df0e1de",
        "filename": "src/qt/forms/coincontroldialog.ui",
        "status": "modified",
        "additions": 71,
        "deletions": 77,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/forms/coincontroldialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/forms/coincontroldialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/coincontroldialog.ui?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -346,83 +346,77 @@\n      <property name=\"frameShadow\">\n       <enum>QFrame::Sunken</enum>\n      </property>\n-     <widget class=\"QWidget\" name=\"horizontalLayoutWidget\">\n-      <property name=\"geometry\">\n-       <rect>\n-        <x>10</x>\n-        <y>0</y>\n-        <width>781</width>\n-        <height>41</height>\n-       </rect>\n-      </property>\n-      <layout class=\"QHBoxLayout\" name=\"horizontalLayoutPanel\" stretch=\"0,0,0,0,0\">\n-       <property name=\"spacing\">\n-        <number>14</number>\n-       </property>\n-       <item>\n-        <widget class=\"QPushButton\" name=\"pushButtonSelectAll\">\n-         <property name=\"sizePolicy\">\n-          <sizepolicy hsizetype=\"Maximum\" vsizetype=\"Fixed\">\n-           <horstretch>0</horstretch>\n-           <verstretch>0</verstretch>\n-          </sizepolicy>\n-         </property>\n-         <property name=\"text\">\n-          <string>(un)select all</string>\n-         </property>\n-        </widget>\n-       </item>\n-       <item>\n-        <widget class=\"QRadioButton\" name=\"radioTreeMode\">\n-         <property name=\"sizePolicy\">\n-          <sizepolicy hsizetype=\"Maximum\" vsizetype=\"Fixed\">\n-           <horstretch>0</horstretch>\n-           <verstretch>0</verstretch>\n-          </sizepolicy>\n-         </property>\n-         <property name=\"text\">\n-          <string>Tree mode</string>\n-         </property>\n-         <property name=\"checked\">\n-          <bool>true</bool>\n-         </property>\n-        </widget>\n-       </item>\n-       <item>\n-        <widget class=\"QRadioButton\" name=\"radioListMode\">\n-         <property name=\"sizePolicy\">\n-          <sizepolicy hsizetype=\"Maximum\" vsizetype=\"Fixed\">\n-           <horstretch>0</horstretch>\n-           <verstretch>0</verstretch>\n-          </sizepolicy>\n-         </property>\n-         <property name=\"text\">\n-          <string>List mode</string>\n-         </property>\n-        </widget>\n-       </item>\n-       <item>\n-        <widget class=\"QLabel\" name=\"labelLocked\">\n-         <property name=\"text\">\n-          <string notr=\"true\">(1 locked)</string>\n-         </property>\n-        </widget>\n-       </item>\n-       <item>\n-        <spacer name=\"horizontalSpacer\">\n-         <property name=\"orientation\">\n-          <enum>Qt::Horizontal</enum>\n-         </property>\n-         <property name=\"sizeHint\" stdset=\"0\">\n-          <size>\n-           <width>40</width>\n-           <height>20</height>\n-          </size>\n-         </property>\n-        </spacer>\n-       </item>\n-      </layout>\n-     </widget>\n+     <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n+      <item>\n+       <layout class=\"QHBoxLayout\" name=\"horizontalLayoutPanel\" stretch=\"0,0,0,0,0\">\n+        <property name=\"spacing\">\n+         <number>14</number>\n+        </property>\n+        <item>\n+         <widget class=\"QPushButton\" name=\"pushButtonSelectAll\">\n+          <property name=\"sizePolicy\">\n+           <sizepolicy hsizetype=\"Maximum\" vsizetype=\"Fixed\">\n+            <horstretch>0</horstretch>\n+            <verstretch>0</verstretch>\n+           </sizepolicy>\n+          </property>\n+          <property name=\"text\">\n+           <string>(un)select all</string>\n+          </property>\n+         </widget>\n+        </item>\n+        <item>\n+         <widget class=\"QRadioButton\" name=\"radioTreeMode\">\n+          <property name=\"sizePolicy\">\n+           <sizepolicy hsizetype=\"Maximum\" vsizetype=\"Fixed\">\n+            <horstretch>0</horstretch>\n+            <verstretch>0</verstretch>\n+           </sizepolicy>\n+          </property>\n+          <property name=\"text\">\n+           <string>Tree mode</string>\n+          </property>\n+          <property name=\"checked\">\n+           <bool>true</bool>\n+          </property>\n+         </widget>\n+        </item>\n+        <item>\n+         <widget class=\"QRadioButton\" name=\"radioListMode\">\n+          <property name=\"sizePolicy\">\n+           <sizepolicy hsizetype=\"Maximum\" vsizetype=\"Fixed\">\n+            <horstretch>0</horstretch>\n+            <verstretch>0</verstretch>\n+           </sizepolicy>\n+          </property>\n+          <property name=\"text\">\n+           <string>List mode</string>\n+          </property>\n+         </widget>\n+        </item>\n+        <item>\n+         <widget class=\"QLabel\" name=\"labelLocked\">\n+          <property name=\"text\">\n+           <string notr=\"true\">(1 locked)</string>\n+          </property>\n+         </widget>\n+        </item>\n+        <item>\n+         <spacer name=\"horizontalSpacer\">\n+          <property name=\"orientation\">\n+           <enum>Qt::Horizontal</enum>\n+          </property>\n+          <property name=\"sizeHint\" stdset=\"0\">\n+           <size>\n+            <width>40</width>\n+            <height>20</height>\n+           </size>\n+          </property>\n+         </spacer>\n+        </item>\n+       </layout>\n+      </item>\n+     </layout>\n     </widget>\n    </item>\n    <item>"
      },
      {
        "sha": "a555f13c2a6a93cd64dcfd895a44ab63d0266e4c",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 87,
        "deletions": 57,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -27,52 +27,6 @@\n        <string>&amp;Main</string>\n       </attribute>\n       <layout class=\"QVBoxLayout\" name=\"verticalLayout_Main\">\n-       <item>\n-        <widget class=\"QLabel\" name=\"transactionFeeInfoLabel\">\n-         <property name=\"text\">\n-          <string>Optional transaction fee per kB that helps make sure your transactions are processed quickly. Most transactions are 1 kB.</string>\n-         </property>\n-         <property name=\"textFormat\">\n-          <enum>Qt::PlainText</enum>\n-         </property>\n-         <property name=\"wordWrap\">\n-          <bool>true</bool>\n-         </property>\n-        </widget>\n-       </item>\n-       <item>\n-        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_1_Main\">\n-         <item>\n-          <widget class=\"QLabel\" name=\"transactionFeeLabel\">\n-           <property name=\"text\">\n-            <string>Pay transaction &amp;fee</string>\n-           </property>\n-           <property name=\"textFormat\">\n-            <enum>Qt::PlainText</enum>\n-           </property>\n-           <property name=\"buddy\">\n-            <cstring>transactionFee</cstring>\n-           </property>\n-          </widget>\n-         </item>\n-         <item>\n-          <widget class=\"BitcoinAmountField\" name=\"transactionFee\"/>\n-         </item>\n-         <item>\n-          <spacer name=\"horizontalSpacer_1_Main\">\n-           <property name=\"orientation\">\n-            <enum>Qt::Horizontal</enum>\n-           </property>\n-           <property name=\"sizeHint\" stdset=\"0\">\n-            <size>\n-             <width>40</width>\n-             <height>20</height>\n-            </size>\n-           </property>\n-          </spacer>\n-         </item>\n-        </layout>\n-       </item>\n        <item>\n         <widget class=\"QCheckBox\" name=\"bitcoinAtStartup\">\n          <property name=\"toolTip\">\n@@ -99,17 +53,7 @@\n           </widget>\n          </item>\n          <item>\n-          <widget class=\"QSpinBox\" name=\"databaseCache\">\n-           <property name=\"toolTip\">\n-            <string>Set database cache size in megabytes (default: 25)</string>\n-           </property>\n-           <property name=\"maximum\">\n-            <number>1024</number>\n-           </property>\n-           <property name=\"value\">\n-            <number>25</number>\n-           </property>\n-          </widget>\n+          <widget class=\"QSpinBox\" name=\"databaseCache\"/>\n          </item>\n          <item>\n           <widget class=\"QLabel\" name=\"databaseCacheUnitLabel\">\n@@ -194,6 +138,92 @@\n        </item>\n       </layout>\n      </widget>\n+     <widget class=\"QWidget\" name=\"tabWallet\">\n+      <attribute name=\"title\">\n+       <string>W&amp;allet</string>\n+      </attribute>\n+      <layout class=\"QVBoxLayout\" name=\"verticalLayout_Wallet\">\n+       <item>\n+        <widget class=\"QLabel\" name=\"transactionFeeInfoLabel\">\n+         <property name=\"text\">\n+          <string>Optional transaction fee per kB that helps make sure your transactions are processed quickly. Most transactions are 1 kB.</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"wordWrap\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_1_Wallet\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"transactionFeeLabel\">\n+           <property name=\"text\">\n+            <string>Pay transaction &amp;fee</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>transactionFee</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"BitcoinAmountField\" name=\"transactionFee\"/>\n+         </item>\n+         <item>\n+          <spacer name=\"horizontalSpacer_1_Wallet\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Horizontal</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>40</width>\n+             <height>20</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <widget class=\"QLabel\" name=\"spendZeroConfChangeInfoLabel\">\n+         <property name=\"text\">\n+          <string>If you disable the spending of unconfirmed change, the change from a transaction cannot be used until that transaction has at least one confirmation. This also affects how your balance is computed.</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"wordWrap\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <widget class=\"QCheckBox\" name=\"spendZeroConfChange\">\n+         <property name=\"text\">\n+          <string>&amp;Spend unconfirmed change (experts only)</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <spacer name=\"verticalSpacer_Wallet\">\n+         <property name=\"orientation\">\n+          <enum>Qt::Vertical</enum>\n+         </property>\n+         <property name=\"sizeHint\" stdset=\"0\">\n+          <size>\n+           <width>20</width>\n+           <height>40</height>\n+          </size>\n+         </property>\n+        </spacer>\n+       </item>\n+      </layout>\n+     </widget>\n      <widget class=\"QWidget\" name=\"tabNetwork\">\n       <attribute name=\"title\">\n        <string>&amp;Network</string>"
      },
      {
        "sha": "e662912781c647e5887d803fc11c507931013541",
        "filename": "src/qt/forms/overviewpage.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/forms/overviewpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/forms/overviewpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/overviewpage.ui?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -105,7 +105,7 @@\n             <item row=\"0\" column=\"0\">\n              <widget class=\"QLabel\" name=\"label\">\n               <property name=\"text\">\n-               <string>Confirmed:</string>\n+               <string>Available:</string>\n               </property>\n              </widget>\n             </item>\n@@ -137,7 +137,7 @@\n             <item row=\"1\" column=\"0\">\n              <widget class=\"QLabel\" name=\"label_3\">\n               <property name=\"text\">\n-               <string>Unconfirmed:</string>\n+               <string>Pending:</string>\n               </property>\n              </widget>\n             </item>"
      },
      {
        "sha": "9f6588bc9ede44a496a90ccf9060a1cf19c6efe1",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "fc1258827e5535ba0296a823325744ab91be4e6b",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e31542961cad5790e979d3c37ce4f92ae4edd868",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -14,7 +14,9 @@\n #include \"monitoreddatamapper.h\"\n #include \"optionsmodel.h\"\n \n+#include \"main.h\" // for CTransaction::nMinTxFee\n #include \"netbase.h\"\n+#include \"txdb.h\" // for -dbcache defaults\n \n #include <QDir>\n #include <QIntValidator>\n@@ -33,7 +35,8 @@ OptionsDialog::OptionsDialog(QWidget *parent) :\n     GUIUtil::restoreWindowGeometry(\"nOptionsDialogWindow\", this->size(), this);\n \n     /* Main elements init */\n-    ui->databaseCache->setMaximum(sizeof(void*) > 4 ? 4096 : 1024);\n+    ui->databaseCache->setMinimum(nMinDbCache);\n+    ui->databaseCache->setMaximum(nMaxDbCache);\n \n     /* Network elements init */\n #ifndef USE_UPNP\n@@ -93,6 +96,7 @@ OptionsDialog::OptionsDialog(QWidget *parent) :\n     }\n \n     ui->unit->setModel(new BitcoinUnits(this));\n+    ui->transactionFee->setSingleStep(CTransaction::nMinTxFee);\n \n     /* Widget-to-option mapper */\n     mapper = new MonitoredDataMapper(this);\n@@ -148,11 +152,14 @@ void OptionsDialog::setModel(OptionsModel *model)\n void OptionsDialog::setMapper()\n {\n     /* Main */\n-    mapper->addMapping(ui->transactionFee, OptionsModel::Fee);\n     mapper->addMapping(ui->bitcoinAtStartup, OptionsModel::StartAtStartup);\n     mapper->addMapping(ui->threadsScriptVerif, OptionsModel::ThreadsScriptVerif);\n     mapper->addMapping(ui->databaseCache, OptionsModel::DatabaseCache);\n \n+    /* Wallet */\n+    mapper->addMapping(ui->transactionFee, OptionsModel::Fee);\n+    mapper->addMapping(ui->spendZeroConfChange, OptionsModel::SpendZeroConfChange);\n+\n     /* Network */\n     mapper->addMapping(ui->mapPortUpnp, OptionsModel::MapPortUPnP);\n "
      },
      {
        "sha": "3b83a5ff62f2b5d09b8a16a556c2fac716cb42d3",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -14,6 +14,7 @@\n #include \"init.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"txdb.h\" // for -dbcache defaults\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #include \"walletdb.h\"\n@@ -76,10 +77,15 @@ void OptionsModel::Init()\n     nTransactionFee = settings.value(\"nTransactionFee\").toLongLong(); // if -paytxfee is set, this will be overridden later in init.cpp\n     if (mapArgs.count(\"-paytxfee\"))\n         strOverriddenByCommandLine += \"-paytxfee \";\n+\n+    if (!settings.contains(\"bSpendZeroConfChange\"))\n+        settings.setValue(\"bSpendZeroConfChange\", true);\n+    if (!SoftSetBoolArg(\"-spendzeroconfchange\", settings.value(\"bSpendZeroConfChange\").toBool()))\n+        strOverriddenByCommandLine += \"-spendzeroconfchange \";\n #endif\n \n     if (!settings.contains(\"nDatabaseCache\"))\n-        settings.setValue(\"nDatabaseCache\", 25);\n+        settings.setValue(\"nDatabaseCache\", (qint64)nDefaultDbCache);\n     if (!SoftSetArg(\"-dbcache\", settings.value(\"nDatabaseCache\").toString().toStdString()))\n         strOverriddenByCommandLine += \"-dbcache \";\n \n@@ -184,6 +190,8 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n             // Todo: Consider to revert back to use just nTransactionFee here, if we don't want\n             // -paytxfee to update our QSettings!\n             return settings.value(\"nTransactionFee\");\n+        case SpendZeroConfChange:\n+            return settings.value(\"bSpendZeroConfChange\");\n #endif\n         case DisplayUnit:\n             return nDisplayUnit;\n@@ -274,6 +282,12 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             settings.setValue(\"nTransactionFee\", (qint64)nTransactionFee);\n             emit transactionFeeChanged(nTransactionFee);\n             break;\n+        case SpendZeroConfChange:\n+            if (settings.value(\"bSpendZeroConfChange\") != value) {\n+                settings.setValue(\"bSpendZeroConfChange\", value);\n+                setRestartRequired(true);\n+            }\n+            break;\n #endif\n         case DisplayUnit:\n             nDisplayUnit = value.toInt();"
      },
      {
        "sha": "a3487ddd2e2e36476f08bace336b418532502c5f",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -40,6 +40,7 @@ class OptionsModel : public QAbstractListModel\n         CoinControlFeatures,    // bool\n         ThreadsScriptVerif,     // int\n         DatabaseCache,          // int\n+        SpendZeroConfChange,    // bool\n         OptionIDRowCount,\n     };\n "
      },
      {
        "sha": "1a9d1de571d9709c71406565c56df9b55c8c7863",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -175,6 +175,7 @@ void OverviewPage::setWalletModel(WalletModel *model)\n         filter->setLimit(NUM_ITEMS);\n         filter->setDynamicSortFilter(true);\n         filter->setSortRole(Qt::EditRole);\n+        filter->setShowInactive(false);\n         filter->sort(TransactionTableModel::Status, Qt::DescendingOrder);\n \n         ui->listTransactions->setModel(filter);"
      },
      {
        "sha": "d84d09c57d6c8039f532baf8b52b0e8eef44b22e",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "9cc7bba822851fa229cb3cba2c679a9aa7f28ebb",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "35a76d7b8b7a9a0ad81a7e02419f2b47355fa5da",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "844d62518cef826a2698150005d9241fab779363",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "d4cc5078aac86c58f9701238fad17ecadc12b3c0",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "51fff649abfaf8097bcfe7b69e2f02f5ebfd6107",
        "filename": "src/qt/res/icons/transaction_conflicted.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/res/icons/transaction_conflicted.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/res/icons/transaction_conflicted.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/transaction_conflicted.png?ref=951c38e8c46d24fdbaee16d7aca3834b39724490"
      },
      {
        "sha": "bd29efee86a3d8a6a36351dc36ed292bc0db3479",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e5da01546af66d3b7e268712166d35e82793e31b",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "33621e54b029f2f47bac408d87223cc553c7c264",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "cacf5dc49bf8da070384d081aec319fee769583c",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "d79038d81d13a3dbf3ba3d24a48b52c1feb43824",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "4aebaa1e7f0b79f777bf957fae68695fc078490d",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -30,7 +30,9 @@ QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n     else\n     {\n         int nDepth = wtx.GetDepthInMainChain();\n-        if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n+        if (nDepth < 0)\n+            return tr(\"conflicted\");\n+        else if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n             return tr(\"%1/offline\").arg(nDepth);\n         else if (nDepth < 6)\n             return tr(\"%1/unconfirmed\").arg(nDepth);"
      },
      {
        "sha": "f9546fddb5edbbb385760c5b2cb1665e9087b6c1",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -5,6 +5,7 @@\n #include \"transactionfilterproxy.h\"\n \n #include \"transactiontablemodel.h\"\n+#include \"transactionrecord.h\"\n \n #include <cstdlib>\n \n@@ -22,7 +23,8 @@ TransactionFilterProxy::TransactionFilterProxy(QObject *parent) :\n     addrPrefix(),\n     typeFilter(ALL_TYPES),\n     minAmount(0),\n-    limitRows(-1)\n+    limitRows(-1),\n+    showInactive(true)\n {\n }\n \n@@ -35,7 +37,10 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n     QString address = index.data(TransactionTableModel::AddressRole).toString();\n     QString label = index.data(TransactionTableModel::LabelRole).toString();\n     qint64 amount = llabs(index.data(TransactionTableModel::AmountRole).toLongLong());\n+    int status = index.data(TransactionTableModel::StatusRole).toInt();\n \n+    if(!showInactive && status == TransactionStatus::Conflicted)\n+        return false;\n     if(!(TYPE(type) & typeFilter))\n         return false;\n     if(datetime < dateFrom || datetime > dateTo)\n@@ -78,6 +83,12 @@ void TransactionFilterProxy::setLimit(int limit)\n     this->limitRows = limit;\n }\n \n+void TransactionFilterProxy::setShowInactive(bool showInactive)\n+{\n+    this->showInactive = showInactive;\n+    invalidateFilter();\n+}\n+\n int TransactionFilterProxy::rowCount(const QModelIndex &parent) const\n {\n     if(limitRows != -1)"
      },
      {
        "sha": "9919bc3fd68f13dd250546245bdcff215c0bbc27",
        "filename": "src/qt/transactionfilterproxy.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/transactionfilterproxy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/transactionfilterproxy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -36,6 +36,9 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n     /** Set maximum number of rows returned, -1 if unlimited. */\n     void setLimit(int limit);\n \n+    /** Set whether to show conflicted transactions. */\n+    void setShowInactive(bool showInactive);\n+\n     int rowCount(const QModelIndex &parent = QModelIndex()) const;\n \n protected:\n@@ -48,6 +51,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n     quint32 typeFilter;\n     qint64 minAmount;\n     int limitRows;\n+    bool showInactive;\n };\n \n #endif // TRANSACTIONFILTERPROXY_H"
      },
      {
        "sha": "8cfaed27c7de529be83494008e3fea10ce738550",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -164,7 +164,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n         (wtx.IsCoinBase() ? 1 : 0),\n         wtx.nTimeReceived,\n         idx);\n-    status.confirmed = wtx.IsConfirmed();\n+    status.confirmed = wtx.IsTrusted();\n     status.depth = wtx.GetDepthInMainChain();\n     status.cur_num_blocks = chainActive.Height();\n \n@@ -183,7 +183,11 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     }\n     else\n     {\n-        if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n+        if (status.depth < 0)\n+        {\n+            status.status = TransactionStatus::Conflicted;\n+        }\n+        else if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n         {\n             status.status = TransactionStatus::Offline;\n         }"
      },
      {
        "sha": "d7be0bc438fee80c1d741be2c946d463323a5595",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -36,7 +36,8 @@ class TransactionStatus\n         OpenUntilBlock,\n         Offline,\n         Unconfirmed,\n-        HaveConfirmations\n+        HaveConfirmations,\n+        Conflicted\n     };\n \n     bool confirmed;"
      },
      {
        "sha": "7d76204ba47ab295dce69b6ba70e4c071215458f",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -312,14 +312,17 @@ QString TransactionTableModel::formatTxStatus(const TransactionRecord *wtx) cons\n             status = tr(\"Open until %1\").arg(GUIUtil::dateTimeStr(wtx->status.open_for));\n             break;\n         case TransactionStatus::Offline:\n-            status = tr(\"Offline (%1 confirmations)\").arg(wtx->status.depth);\n+            status = tr(\"Offline\");\n             break;\n         case TransactionStatus::Unconfirmed:\n             status = tr(\"Unconfirmed (%1 of %2 confirmations)\").arg(wtx->status.depth).arg(TransactionRecord::NumConfirmations);\n             break;\n         case TransactionStatus::HaveConfirmations:\n             status = tr(\"Confirmed (%1 confirmations)\").arg(wtx->status.depth);\n             break;\n+        case TransactionStatus::Conflicted:\n+            status = tr(\"Conflicted\");\n+            break;\n         }\n     }\n \n@@ -471,7 +474,6 @@ QVariant TransactionTableModel::txStatusDecoration(const TransactionRecord *wtx)\n         case TransactionStatus::OpenUntilBlock:\n         case TransactionStatus::OpenUntilDate:\n             return QColor(64,64,255);\n-            break;\n         case TransactionStatus::Offline:\n             return QColor(192,192,192);\n         case TransactionStatus::Unconfirmed:\n@@ -486,6 +488,8 @@ QVariant TransactionTableModel::txStatusDecoration(const TransactionRecord *wtx)\n             };\n         case TransactionStatus::HaveConfirmations:\n             return QIcon(\":/icons/transaction_confirmed\");\n+        case TransactionStatus::Conflicted:\n+            return QIcon(\":/icons/transaction_conflicted\");\n         }\n     }\n     return QColor(0,0,0);\n@@ -587,6 +591,8 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n                                           rec->status.maturity != TransactionStatus::Mature);\n     case FormattedAmountRole:\n         return formatTxAmount(rec, false);\n+    case StatusRole:\n+        return rec->status.status;\n     }\n     return QVariant();\n }"
      },
      {
        "sha": "7b9cf09cbeb8be785e93723bb76b12daf3611c88",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -53,7 +53,9 @@ class TransactionTableModel : public QAbstractTableModel\n         /** Is transaction confirmed? */\n         ConfirmedRole,\n         /** Formatted amount, without brackets when unconfirmed */\n-        FormattedAmountRole\n+        FormattedAmountRole,\n+        /** Transaction status (TransactionRecord::Status) */\n+        StatusRole\n     };\n \n     int rowCount(const QModelIndex &parent) const;"
      },
      {
        "sha": "24992db465f86b5f5bcc278b800e502ad61f6f58",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -38,9 +38,9 @@ void AboutDialog::setModel(ClientModel *model)\n          * 32 and 64 bit builds. On other architectures, 32/64 bit may be more ambigious.\n          */\n #if defined(__x86_64__)\n-        version += \" (64-bit)\";\n+        version += tr(\" (%1-bit)\").arg(64);\n #elif defined(__i386__ )\n-        version += \" (32-bit)\";\n+        version += tr(\" (%1-bit)\").arg(32);\n #endif\n         ui->versionLabel->setText(version);\n     }"
      },
      {
        "sha": "3549cd49f086770aac1fa49210625fbae6b13d76",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -494,7 +494,9 @@ void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vect\n     BOOST_FOREACH(const COutPoint& outpoint, vOutpoints)\n     {\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n-        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, wallet->mapWallet[outpoint.hash].GetDepthInMainChain());\n+        int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n+        if (nDepth < 0) continue;\n+        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth);\n         vOutputs.push_back(out);\n     }\n }\n@@ -513,7 +515,9 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n     BOOST_FOREACH(const COutPoint& outpoint, vLockedCoins)\n     {\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n-        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, wallet->mapWallet[outpoint.hash].GetDepthInMainChain());\n+        int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n+        if (nDepth < 0) continue;\n+        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth);\n         vCoins.push_back(out);\n     }\n "
      },
      {
        "sha": "91a6fba222f636914ce92b4ded1f5767dd87eeb8",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "9e1d47846ef15ef172393bea800e22cc2adcdfcc",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -23,13 +23,13 @@ using namespace std;\n void EnsureWalletIsUnlocked();\n \n std::string static EncodeDumpTime(int64_t nTime) {\n-    return DateTimeStrFormat(\"%Y-%m-%\"PRId64\"T%H:%M:%SZ\", nTime);\n+    return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n }\n \n int64_t static DecodeDumpTime(const std::string &str) {\n-    static boost::posix_time::time_input_facet facet(\"%Y-%m-%dT%H:%M:%SZ\");\n     static const boost::posix_time::ptime epoch = boost::posix_time::from_time_t(0);\n-    const std::locale loc(std::locale::classic(), &facet);\n+    static const std::locale loc(std::locale::classic(),\n+        new boost::posix_time::time_input_facet(\"%Y-%m-%dT%H:%M:%SZ\"));\n     std::istringstream iss(str);\n     iss.imbue(loc);\n     boost::posix_time::ptime ptime(boost::date_time::not_a_date_time);"
      },
      {
        "sha": "353fb77b889fb38327f37eaae79279e9744886bd",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "738b966b8a985c878d9072977709c89288f1fd94",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -15,8 +15,6 @@\n #include \"wallet.h\" // for getinfo\n #endif\n \n-#include <inttypes.h>\n-\n #include <boost/foreach.hpp>\n #include \"json/json_spirit_value.h\"\n "
      },
      {
        "sha": "4ea84e99bea1a1cf19024654c59d793ba5bd26d1",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "80cdb34f15358666d11a0fe5c62fe5675afdec8d",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "837aee7eaa2d159f2f1c46563e44ce12e233c0d5",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -522,7 +522,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n             \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n-            \"     [               (json array of json objects)\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n             \"       {\\n\"\n             \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n             \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n@@ -532,7 +532,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             \"       ,...\\n\"\n             \"    ]\\n\"\n             \"3. \\\"privatekeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                  (json array of strings)\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n             \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\""
      },
      {
        "sha": "4d110124b21fc2e0638c5bfd38b6eb599812d45d",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "0dd583c8eb40513bde8ce3f2cbebc0eece134e08",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7b605af589b07f853c59fec110cf65d1f2e349e5",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 5,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -45,13 +45,18 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n     entry.push_back(Pair(\"confirmations\", confirms));\n     if (wtx.IsCoinBase())\n         entry.push_back(Pair(\"generated\", true));\n-    if (confirms)\n+    if (confirms > 0)\n     {\n         entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n         entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n         entry.push_back(Pair(\"blocktime\", (boost::int64_t)(mapBlockIndex[wtx.hashBlock]->nTime)));\n     }\n-    entry.push_back(Pair(\"txid\", wtx.GetHash().GetHex()));\n+    uint256 hash = wtx.GetHash();\n+    entry.push_back(Pair(\"txid\", hash.GetHex()));\n+    Array conflicts;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts())\n+        conflicts.push_back(conflict.GetHex());\n+    entry.push_back(Pair(\"walletconflicts\", conflicts));\n     entry.push_back(Pair(\"time\", (boost::int64_t)wtx.GetTxTime()));\n     entry.push_back(Pair(\"timereceived\", (boost::int64_t)wtx.nTimeReceived));\n     BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n@@ -621,7 +626,7 @@ Value getbalance(const Array& params, bool fHelp)\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n-            if (!wtx.IsConfirmed())\n+            if (!wtx.IsTrusted() || wtx.GetBlocksToMaturity() > 0)\n                 continue;\n \n             int64_t allFee;\n@@ -1141,7 +1146,9 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n                         entry.push_back(Pair(\"category\", \"generate\"));\n                 }\n                 else\n+                {\n                     entry.push_back(Pair(\"category\", \"receive\"));\n+                }\n                 entry.push_back(Pair(\"amount\", ValueFromAmount(r.second)));\n                 if (fLong)\n                     WalletTxToJSON(wtx, entry);\n@@ -1317,6 +1324,8 @@ Value listaccounts(const Array& params, bool fHelp)\n         string strSentAccount;\n         list<pair<CTxDestination, int64_t> > listReceived;\n         list<pair<CTxDestination, int64_t> > listSent;\n+        if (wtx.GetBlocksToMaturity() > 0)\n+            continue;\n         wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n         mapAccountBalances[strSentAccount] -= nFee;\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)\n@@ -1448,7 +1457,8 @@ Value gettransaction(const Array& params, bool fHelp)\n             \"      \\\"amount\\\" : x.xxx                  (numeric) The amount in btc\\n\"\n             \"    }\\n\"\n             \"    ,...\\n\"\n-            \"  ]\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"hex\\\" : \\\"data\\\"         (string) Raw data for transaction\\n\"\n             \"}\\n\"\n \n             \"\\nbExamples\\n\"\n@@ -1479,6 +1489,11 @@ Value gettransaction(const Array& params, bool fHelp)\n     ListTransactions(wtx, \"*\", 0, false, details);\n     entry.push_back(Pair(\"details\", details));\n \n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << static_cast<CTransaction>(wtx);\n+    string strHex = HexStr(ssTx.begin(), ssTx.end());\n+    entry.push_back(Pair(\"hex\", strHex));\n+\n     return entry;\n }\n \n@@ -1553,6 +1568,9 @@ Value walletpassphrase(const Array& params, bool fHelp)\n             \"\\nArguments:\\n\"\n             \"1. \\\"passphrase\\\"     (string, required) The wallet passphrase\\n\"\n             \"2. timeout            (numeric, required) The time to keep the decryption key in seconds.\\n\"\n+            \"\\nNote:\\n\"\n+            \"Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\\n\"\n+            \"time that overrides the old one.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nunlock the wallet for 60 seconds\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"my pass phrase\\\" 60\") +"
      },
      {
        "sha": "f03a1e3cbb6e5de5c5b85fac20d6602c1536d3ed",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 2,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1261,7 +1261,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n             // Template matching opcodes:\n             if (opcode2 == OP_PUBKEYS)\n             {\n-                while (vch1.size() >= 33 && vch1.size() <= 120)\n+                while (vch1.size() >= 33 && vch1.size() <= 65)\n                 {\n                     vSolutionsRet.push_back(vch1);\n                     if (!script1.GetOp(pc1, opcode1, vch1))\n@@ -1275,7 +1275,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n \n             if (opcode2 == OP_PUBKEY)\n             {\n-                if (vch1.size() < 33 || vch1.size() > 120)\n+                if (vch1.size() < 33 || vch1.size() > 65)\n                     break;\n                 vSolutionsRet.push_back(vch1);\n             }\n@@ -1863,6 +1863,51 @@ bool CScript::IsPayToScriptHash() const\n             this->at(22) == OP_EQUAL);\n }\n \n+bool CScript::IsPushOnly() const\n+{\n+    const_iterator pc = begin();\n+    while (pc < end())\n+    {\n+        opcodetype opcode;\n+        if (!GetOp(pc, opcode))\n+            return false;\n+        // Note that IsPushOnly() *does* consider OP_RESERVED to be a\n+        // push-type opcode, however execution of OP_RESERVED fails, so\n+        // it's not relevant to P2SH as the scriptSig would fail prior to\n+        // the P2SH special validation code being executed.\n+        if (opcode > OP_16)\n+            return false;\n+    }\n+    return true;\n+}\n+\n+bool CScript::HasCanonicalPushes() const\n+{\n+    const_iterator pc = begin();\n+    while (pc < end())\n+    {\n+        opcodetype opcode;\n+        std::vector<unsigned char> data;\n+        if (!GetOp(pc, opcode, data))\n+            return false;\n+        if (opcode > OP_16)\n+            continue;\n+        if (opcode < OP_PUSHDATA1 && opcode > OP_0 && (data.size() == 1 && data[0] <= 16))\n+            // Could have used an OP_n code, rather than a 1-byte push.\n+            return false;\n+        if (opcode == OP_PUSHDATA1 && data.size() < OP_PUSHDATA1)\n+            // Could have used a normal n-byte push, rather than OP_PUSHDATA1.\n+            return false;\n+        if (opcode == OP_PUSHDATA2 && data.size() <= 0xFF)\n+            // Could have used an OP_PUSHDATA1.\n+            return false;\n+        if (opcode == OP_PUSHDATA4 && data.size() <= 0xFFFF)\n+            // Could have used an OP_PUSHDATA2.\n+            return false;\n+    }\n+    return true;\n+}\n+\n class CScriptVisitor : public boost::static_visitor<bool>\n {\n private:"
      },
      {
        "sha": "335ddfb1b230bec563c18709adb6d05dae94b441",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 5,
        "deletions": 18,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -541,24 +541,11 @@ class CScript : public std::vector<unsigned char>\n \n     bool IsPayToScriptHash() const;\n \n-    // Called by IsStandardTx\n-    bool IsPushOnly() const\n-    {\n-        const_iterator pc = begin();\n-        while (pc < end())\n-        {\n-            opcodetype opcode;\n-            if (!GetOp(pc, opcode))\n-                return false;\n-            // Note that IsPushOnly() *does* consider OP_RESERVED to be a\n-            // push-type opcode, however execution of OP_RESERVED fails, so\n-            // it's not relevant to P2SH as the scriptSig would fail prior to\n-            // the P2SH special validation code being executed.\n-            if (opcode > OP_16)\n-                return false;\n-        }\n-        return true;\n-    }\n+    // Called by IsStandardTx and P2SH VerifyScript (which makes it consensus-critical).\n+    bool IsPushOnly() const;\n+\n+    // Called by IsStandardTx.\n+    bool HasCanonicalPushes() const;\n \n     // Returns whether the script is guaranteed to fail at execution,\n     // regardless of the initial stack. This allows outputs to be pruned"
      },
      {
        "sha": "e624a9ee8499ba2fe9b601254f642a3fb9ce7f86",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -140,8 +140,9 @@ void AssertLockHeldInternal(const char *pszName, const char* pszFile, int nLine,\n {\n     BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)&i, *lockstack)\n         if (i.first == cs) return;\n-    LogPrintf(\"Lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\n-    assert(0);\n+    fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\",\n+            pszName, pszFile, nLine, LocksHeld().c_str());\n+    abort();\n }\n \n #endif /* DEBUG_LOCKORDER */"
      },
      {
        "sha": "dd1b61304773b4be136b5677048d432ce874ae4f",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -438,4 +438,22 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     BOOST_CHECK(combined == partial3c);\n }\n \n+BOOST_AUTO_TEST_CASE(script_standard_push)\n+{\n+    for (int i=0; i<1000; i++) {\n+        CScript script;\n+        script << i;\n+        BOOST_CHECK_MESSAGE(script.IsPushOnly(), \"Number \" << i << \" is not pure push.\");\n+        BOOST_CHECK_MESSAGE(script.HasCanonicalPushes(), \"Number \" << i << \" push is not canonical.\");\n+    }\n+\n+    for (int i=0; i<1000; i++) {\n+        std::vector<unsigned char> data(i, '\\111');\n+        CScript script;\n+        script << data;\n+        BOOST_CHECK_MESSAGE(script.IsPushOnly(), \"Length \" << i << \" is not pure push.\");\n+        BOOST_CHECK_MESSAGE(script.HasCanonicalPushes(), \"Length \" << i << \" push is not canonical.\");\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "5212dfc70df3cae87e90d9eedb23c49813b214cb",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -271,10 +271,10 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     string reason;\n     BOOST_CHECK(IsStandardTx(t, reason));\n \n-    t.vout[0].nValue = 5011; // dust\n+    t.vout[0].nValue = 501; // dust\n     BOOST_CHECK(!IsStandardTx(t, reason));\n \n-    t.vout[0].nValue = 6011; // not dust\n+    t.vout[0].nValue = 601; // not dust\n     BOOST_CHECK(IsStandardTx(t, reason));\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;"
      },
      {
        "sha": "d06639a1120fd78fe2a581f999389ac56c037afb",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "5eb5731db3d6dd37b134b4c25876bc995ae94e77",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -18,6 +18,13 @@ class CBigNum;\n class CCoins;\n class uint256;\n \n+// -dbcache default (MiB)\n+static const int64_t nDefaultDbCache = 100;\n+// max. -dbcache in (MiB)\n+static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 4096 : 1024;\n+// min. -dbcache in (MiB)\n+static const int64_t nMinDbCache = 4;\n+\n /** CCoinsView backed by the LevelDB coin database (chainstate/) */\n class CCoinsViewDB : public CCoinsView\n {"
      },
      {
        "sha": "8cfd1c2e031028bc27b6af385e5c040d682d1923",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "6ef93021fde502fc5abcb6dc978329d15a54d3cd",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 20,
        "deletions": 9,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -16,7 +16,6 @@\n \n #include <cstdio>\n #include <exception>\n-#include <inttypes.h>\n #include <map>\n #include <stdarg.h>\n #include <stdint.h>\n@@ -45,13 +44,25 @@ static const int64_t CENT = 1000000;\n #define UEND(a)             ((unsigned char*)&((&(a))[1]))\n #define ARRAYLEN(array)     (sizeof(array)/sizeof((array)[0]))\n \n-/* Format characters for (s)size_t and ptrdiff_t (C99 standard) */\n-#define PRIszx    \"zx\"\n-#define PRIszu    \"zu\"\n-#define PRIszd    \"zd\"\n-#define PRIpdx    \"tx\"\n-#define PRIpdu    \"tu\"\n-#define PRIpdd    \"td\"\n+/* Format characters for (s)size_t, ptrdiff_t, uint64_t.\n+ *\n+ * As the tinyformat-based formatting system is type-safe, no special format\n+ * characters are really needed to specify sizes. Tinyformat can support\n+ * (ignores) the C99 prefixes such as \"ll\" but chokes on MSVC's inttypes\n+ * defines prefixes such as \"I64X\".  So don't include inttypes.h and define our\n+ * own for compatibility.\n+ * If you get a warning here about a redefine of PRI?64, make sure that\n+ * inttypes.h is not included.\n+ */\n+#define PRIszx    \"x\"\n+#define PRIszu    \"u\"\n+#define PRIszd    \"d\"\n+#define PRIpdx    \"x\"\n+#define PRIpdu    \"u\"\n+#define PRIpdd    \"d\"\n+#define PRIx64    \"x\"\n+#define PRIu64    \"u\"\n+#define PRId64    \"d\"\n \n // This is needed because the foreach macro can't get over the comma in pair<t1, t2>\n #define PAIRTYPE(t1, t2)    std::pair<t1, t2>"
      },
      {
        "sha": "5e24738b54d0ea3472f4d776fe15b4e4461d4909",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 156,
        "deletions": 28,
        "changes": 184,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -9,15 +9,14 @@\n #include \"coincontrol.h\"\n #include \"net.h\"\n \n-#include <inttypes.h>\n-\n #include <boost/algorithm/string/replace.hpp>\n #include <openssl/rand.h>\n \n using namespace std;\n \n // Settings\n int64_t nTransactionFee = 0;\n+bool bSpendZeroConfChange = true;\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -193,7 +192,7 @@ void CWallet::SetBestChain(const CBlockLocator& loc)\n \n bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn, bool fExplicit)\n {\n-    AssertLockHeld(cs_wallet); // nWalletVersion\n+    LOCK(cs_wallet); // nWalletVersion\n     if (nWalletVersion >= nVersion)\n         return true;\n \n@@ -220,7 +219,7 @@ bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn,\n \n bool CWallet::SetMaxVersion(int nVersion)\n {\n-    AssertLockHeld(cs_wallet); // nWalletVersion, nWalletMaxVersion\n+    LOCK(cs_wallet); // nWalletVersion, nWalletMaxVersion\n     // cannot downgrade below current version\n     if (nWalletVersion > nVersion)\n         return false;\n@@ -230,6 +229,82 @@ bool CWallet::SetMaxVersion(int nVersion)\n     return true;\n }\n \n+set<uint256> CWallet::GetConflicts(const uint256& txid) const\n+{\n+    set<uint256> result;\n+    AssertLockHeld(cs_wallet);\n+\n+    std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(txid);\n+    if (it == mapWallet.end())\n+        return result;\n+    const CWalletTx& wtx = it->second;\n+\n+    std::pair<TxConflicts::const_iterator, TxConflicts::const_iterator> range;\n+\n+    BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+    {\n+        range = mapTxConflicts.equal_range(txin.prevout);\n+        for (TxConflicts::const_iterator it = range.first; it != range.second; ++it)\n+            result.insert(it->second);\n+    }\n+    return result;\n+}\n+\n+void CWallet::SyncMetaData(pair<TxConflicts::iterator, TxConflicts::iterator> range)\n+{\n+    // We want all the wallet transactions in range to have the same metadata as\n+    // the oldest (smallest nOrderPos).\n+    // So: find smallest nOrderPos:\n+\n+    int nMinOrderPos = std::numeric_limits<int>::max();\n+    const CWalletTx* copyFrom = NULL;\n+    for (TxConflicts::iterator it = range.first; it != range.second; ++it)\n+    {\n+        const uint256& hash = it->second;\n+        int n = mapWallet[hash].nOrderPos;\n+        if (n < nMinOrderPos)\n+        {\n+            nMinOrderPos = n;\n+            copyFrom = &mapWallet[hash];\n+        }\n+    }\n+    // Now copy data from copyFrom to rest:\n+    for (TxConflicts::iterator it = range.first; it != range.second; ++it)\n+    {\n+        const uint256& hash = it->second;\n+        CWalletTx* copyTo = &mapWallet[hash];\n+        if (copyFrom == copyTo) continue;\n+        copyTo->mapValue = copyFrom->mapValue;\n+        copyTo->vOrderForm = copyFrom->vOrderForm;\n+        // fTimeReceivedIsTxTime not copied on purpose\n+        // nTimeReceived not copied on purpose\n+        copyTo->nTimeSmart = copyFrom->nTimeSmart;\n+        copyTo->fFromMe = copyFrom->fFromMe;\n+        copyTo->strFromAccount = copyFrom->strFromAccount;\n+        // vfSpent not copied on purpose\n+        // nOrderPos not copied on purpose\n+        // cached members not copied on purpose\n+    }\n+}\n+\n+void CWallet::AddToConflicts(const uint256& wtxhash)\n+{\n+    assert(mapWallet.count(wtxhash));\n+    CWalletTx& thisTx = mapWallet[wtxhash];\n+    if (thisTx.IsCoinBase())\n+        return;\n+\n+    BOOST_FOREACH(const CTxIn& txin, thisTx.vin)\n+    {\n+        mapTxConflicts.insert(make_pair(txin.prevout, wtxhash));\n+\n+        pair<TxConflicts::iterator, TxConflicts::iterator> range;\n+        range = mapTxConflicts.equal_range(txin.prevout);\n+        if (range.first != range.second)\n+            SyncMetaData(range);\n+    }\n+}\n+\n bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n {\n     if (IsCrypted())\n@@ -384,9 +459,16 @@ void CWallet::MarkDirty()\n     }\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n+bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n {\n     uint256 hash = wtxIn.GetHash();\n+\n+    if (fFromLoadWallet)\n+    {\n+        mapWallet[hash] = wtxIn;\n+        AddToConflicts(hash);\n+    }\n+    else\n     {\n         LOCK(cs_wallet);\n         // Inserts only if not already there, returns tx inserted or tx found\n@@ -444,6 +526,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n                              wtxIn.GetHash().ToString(),\n                              wtxIn.hashBlock.ToString());\n             }\n+            AddToConflicts(hash);\n         }\n \n         bool fUpdated = false;\n@@ -906,6 +989,18 @@ void CWalletTx::RelayWalletTransaction()\n     }\n }\n \n+set<uint256> CWalletTx::GetConflicts() const\n+{\n+    set<uint256> result;\n+    if (pwallet != NULL)\n+    {\n+        uint256 myHash = GetHash();\n+        result = pwallet->GetConflicts(myHash);\n+        result.erase(myHash);\n+    }\n+    return result;\n+}\n+\n void CWallet::ResendWalletTransactions()\n {\n     // Do this infrequently and randomly to avoid giving away\n@@ -963,7 +1058,7 @@ int64_t CWallet::GetBalance() const\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n-            if (pcoin->IsConfirmed())\n+            if (pcoin->IsTrusted())\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n     }\n@@ -979,7 +1074,7 @@ int64_t CWallet::GetUnconfirmedBalance() const\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n-            if (!IsFinalTx(*pcoin) || !pcoin->IsConfirmed())\n+            if (!IsFinalTx(*pcoin) || (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0))\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n     }\n@@ -1014,17 +1109,21 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n             if (!IsFinalTx(*pcoin))\n                 continue;\n \n-            if (fOnlyConfirmed && !pcoin->IsConfirmed())\n+            if (fOnlyConfirmed && !pcoin->IsTrusted())\n                 continue;\n \n             if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n                 continue;\n \n+            int nDepth = pcoin->GetDepthInMainChain();\n+            if (nDepth < 0)\n+                continue;\n+\n             for (unsigned int i = 0; i < pcoin->vout.size(); i++) {\n                 if (!(pcoin->IsSpent(i)) && IsMine(pcoin->vout[i]) &&\n                     !IsLockedCoin((*it).first, i) && pcoin->vout[i].nValue > 0 &&\n                     (!coinControl || !coinControl->HasSelected() || coinControl->IsSelected((*it).first, i)))\n-                        vCoins.push_back(COutput(pcoin, i, pcoin->GetDepthInMainChain()));\n+                        vCoins.push_back(COutput(pcoin, i, nDepth));\n             }\n         }\n     }\n@@ -1192,7 +1291,7 @@ bool CWallet::SelectCoins(int64_t nTargetValue, set<pair<const CWalletTx*,unsign\n \n     return (SelectCoinsMinConf(nTargetValue, 1, 6, vCoins, setCoinsRet, nValueRet) ||\n             SelectCoinsMinConf(nTargetValue, 1, 1, vCoins, setCoinsRet, nValueRet) ||\n-            SelectCoinsMinConf(nTargetValue, 0, 1, vCoins, setCoinsRet, nValueRet));\n+            (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue, 0, 1, vCoins, setCoinsRet, nValueRet)));\n }\n \n \n@@ -1496,16 +1595,43 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n }\n \n \n+DBErrors CWallet::ZapWalletTx()\n+{\n+    if (!fFileBacked)\n+        return DB_LOAD_OK;\n+    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this);\n+    if (nZapWalletTxRet == DB_NEED_REWRITE)\n+    {\n+        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        {\n+            LOCK(cs_wallet);\n+            setKeyPool.clear();\n+            // Note: can't top-up keypool here, because wallet is locked.\n+            // User will be prompted to unlock wallet the next operation\n+            // the requires a new key.\n+        }\n+    }\n+\n+    if (nZapWalletTxRet != DB_LOAD_OK)\n+        return nZapWalletTxRet;\n+\n+    return DB_LOAD_OK;\n+}\n+\n+\n bool CWallet::SetAddressBook(const CTxDestination& address, const string& strName, const string& strPurpose)\n {\n-    AssertLockHeld(cs_wallet); // mapAddressBook\n-    std::map<CTxDestination, CAddressBookData>::iterator mi = mapAddressBook.find(address);\n-    mapAddressBook[address].name = strName;\n-    if (!strPurpose.empty()) /* update purpose only if requested */\n-        mapAddressBook[address].purpose = strPurpose;\n+    bool fUpdated = false;\n+    {\n+        LOCK(cs_wallet); // mapAddressBook\n+        std::map<CTxDestination, CAddressBookData>::iterator mi = mapAddressBook.find(address);\n+        fUpdated = mi != mapAddressBook.end();\n+        mapAddressBook[address].name = strName;\n+        if (!strPurpose.empty()) /* update purpose only if requested */\n+            mapAddressBook[address].purpose = strPurpose;\n+    }\n     NotifyAddressBookChanged(this, address, strName, ::IsMine(*this, address),\n-            mapAddressBook[address].purpose,\n-            (mi == mapAddressBook.end()) ?  CT_NEW : CT_UPDATED);\n+                             strPurpose, (fUpdated ? CT_UPDATED : CT_NEW) );\n     if (!fFileBacked)\n         return false;\n     if (!strPurpose.empty() && !CWalletDB(strWalletFile).WritePurpose(CBitcoinAddress(address).ToString(), strPurpose))\n@@ -1515,21 +1641,23 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const string& strNam\n \n bool CWallet::DelAddressBook(const CTxDestination& address)\n {\n-\n-    AssertLockHeld(cs_wallet); // mapAddressBook\n-\n-    if(fFileBacked)\n     {\n-        // Delete destdata tuples associated with address\n-        std::string strAddress = CBitcoinAddress(address).ToString();\n-        BOOST_FOREACH(const PAIRTYPE(string, string) &item, mapAddressBook[address].destdata)\n+        LOCK(cs_wallet); // mapAddressBook\n+\n+        if(fFileBacked)\n         {\n-            CWalletDB(strWalletFile).EraseDestData(strAddress, item.first);\n+            // Delete destdata tuples associated with address\n+            std::string strAddress = CBitcoinAddress(address).ToString();\n+            BOOST_FOREACH(const PAIRTYPE(string, string) &item, mapAddressBook[address].destdata)\n+            {\n+                CWalletDB(strWalletFile).EraseDestData(strAddress, item.first);\n+            }\n         }\n+        mapAddressBook.erase(address);\n     }\n \n-    mapAddressBook.erase(address);\n     NotifyAddressBookChanged(this, address, \"\", ::IsMine(*this, address), \"\", CT_DELETED);\n+\n     if (!fFileBacked)\n         return false;\n     CWalletDB(strWalletFile).ErasePurpose(CBitcoinAddress(address).ToString());\n@@ -1709,7 +1837,7 @@ std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n         {\n             CWalletTx *pcoin = &walletEntry.second;\n \n-            if (!IsFinalTx(*pcoin) || !pcoin->IsConfirmed())\n+            if (!IsFinalTx(*pcoin) || !pcoin->IsTrusted())\n                 continue;\n \n             if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)"
      },
      {
        "sha": "eb192f1ca6ecc353a82a6a1d28e69d7a38f0adac",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 26,
        "deletions": 6,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -25,6 +25,7 @@\n \n // Settings\n extern int64_t nTransactionFee;\n+extern bool bSpendZeroConfChange;\n \n class CAccountingEntry;\n class CCoinControl;\n@@ -107,6 +108,12 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int64_t nNextResend;\n     int64_t nLastResend;\n \n+    // Used to detect and report conflicted transactions:\n+    typedef std::multimap<COutPoint, uint256> TxConflicts;\n+    TxConflicts mapTxConflicts;\n+    void AddToConflicts(const uint256& wtxhash);\n+    void SyncMetaData(std::pair<TxConflicts::iterator, TxConflicts::iterator>);\n+\n public:\n     /// Main wallet lock.\n     /// This lock protects all the fields added by CWallet\n@@ -150,6 +157,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n+\n     int64_t nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n \n@@ -222,7 +230,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     TxItems OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount = \"\");\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn);\n+    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet=false);\n     void SyncTransaction(const uint256 &hash, const CTransaction& tx, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     void EraseFromWallet(const uint256 &hash);\n@@ -322,6 +330,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     void SetBestChain(const CBlockLocator& loc);\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n+    DBErrors ZapWalletTx();\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n \n@@ -354,7 +363,10 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     bool SetMaxVersion(int nVersion);\n \n     // get the current wallet format (the oldest client version guaranteed to understand this wallet)\n-    int GetVersion() { AssertLockHeld(cs_wallet); return nWalletVersion; }\n+    int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n+\n+    // Get wallet transactions that conflict with given transaction (spend same outputs)\n+    std::set<uint256> GetConflicts(const uint256& txid) const;\n \n     /** Address book entry changed.\n      * @note called with lock cs_wallet held.\n@@ -694,14 +706,17 @@ class CWalletTx : public CMerkleTx\n         return (GetDebit() > 0);\n     }\n \n-    bool IsConfirmed() const\n+    bool IsTrusted() const\n     {\n         // Quick answer in most cases\n         if (!IsFinalTx(*this))\n             return false;\n-        if (GetDepthInMainChain() >= 1)\n+        int nDepth = GetDepthInMainChain();\n+        if (nDepth >= 1)\n             return true;\n-        if (!IsFromMe()) // using wtx's cached debit\n+        if (nDepth < 0)\n+            return false;\n+        if (!bSpendZeroConfChange || !IsFromMe()) // using wtx's cached debit\n             return false;\n \n         // If no confirmations but it's from us, we can still\n@@ -716,8 +731,11 @@ class CWalletTx : public CMerkleTx\n \n             if (!IsFinalTx(*ptx))\n                 return false;\n-            if (ptx->GetDepthInMainChain() >= 1)\n+            int nPDepth = ptx->GetDepthInMainChain();\n+            if (nPDepth >= 1)\n                 continue;\n+            if (nPDepth < 0)\n+                return false;\n             if (!pwallet->IsFromMe(*ptx))\n                 return false;\n \n@@ -745,6 +763,8 @@ class CWalletTx : public CMerkleTx\n     void AddSupportingTransactions();\n     bool AcceptWalletTransaction();\n     void RelayWalletTransaction();\n+\n+    std::set<uint256> GetConflicts() const;\n };\n \n "
      },
      {
        "sha": "b5b523740b1287900eb67ca95c7d7cd659ac94e5",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 4,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,8 +11,6 @@\n #include \"sync.h\"\n #include \"wallet.h\"\n \n-#include <inttypes.h>\n-\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n \n@@ -382,7 +380,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             if (wtx.nOrderPos == -1)\n                 wss.fAnyUnordered = true;\n \n-            pwallet->mapWallet[hash] = wtx;\n+            pwallet->AddToWallet(wtx, true);\n             //// debug print\n             //LogPrintf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString());\n             //LogPrintf(\" %12\"PRId64\"  %s  %s  %s\\n\",\n@@ -684,6 +682,86 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     return result;\n }\n \n+DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash)\n+{\n+    pwallet->vchDefaultKey = CPubKey();\n+    CWalletScanState wss;\n+    bool fNoncriticalErrors = false;\n+    DBErrors result = DB_LOAD_OK;\n+\n+    try {\n+        LOCK(pwallet->cs_wallet);\n+        int nMinVersion = 0;\n+        if (Read((string)\"minversion\", nMinVersion))\n+        {\n+            if (nMinVersion > CLIENT_VERSION)\n+                return DB_TOO_NEW;\n+            pwallet->LoadMinVersion(nMinVersion);\n+        }\n+\n+        // Get cursor\n+        Dbc* pcursor = GetCursor();\n+        if (!pcursor)\n+        {\n+            LogPrintf(\"Error getting wallet database cursor\\n\");\n+            return DB_CORRUPT;\n+        }\n+\n+        while (true)\n+        {\n+            // Read next record\n+            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+            int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n+            if (ret == DB_NOTFOUND)\n+                break;\n+            else if (ret != 0)\n+            {\n+                LogPrintf(\"Error reading next record from wallet database\\n\");\n+                return DB_CORRUPT;\n+            }\n+\n+            string strType;\n+            ssKey >> strType;\n+            if (strType == \"tx\") {\n+                uint256 hash;\n+                ssKey >> hash;\n+\n+                vTxHash.push_back(hash);\n+            }\n+        }\n+        pcursor->close();\n+    }\n+    catch (boost::thread_interrupted) {\n+        throw;\n+    }\n+    catch (...) {\n+        result = DB_CORRUPT;\n+    }\n+\n+    if (fNoncriticalErrors && result == DB_LOAD_OK)\n+        result = DB_NONCRITICAL_ERROR;\n+\n+    return result;\n+}\n+\n+DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet)\n+{\n+    // build list of wallet TXs\n+    vector<uint256> vTxHash;\n+    DBErrors err = FindWalletTx(pwallet, vTxHash);\n+    if (err != DB_LOAD_OK)\n+        return err;\n+\n+    // erase each wallet TX\n+    BOOST_FOREACH (uint256& hash, vTxHash) {\n+        if (!EraseTx(hash))\n+            return DB_CORRUPT;\n+    }\n+\n+    return DB_LOAD_OK;\n+}\n+\n void ThreadFlushWalletDB(const string& strFile)\n {\n     // Make this thread recognisable as the wallet flushing thread"
      },
      {
        "sha": "3bfb436050476266bcd8edc04ace664568703fe4",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951c38e8c46d24fdbaee16d7aca3834b39724490/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951c38e8c46d24fdbaee16d7aca3834b39724490/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=951c38e8c46d24fdbaee16d7aca3834b39724490",
        "patch": "@@ -122,6 +122,8 @@ class CWalletDB : public CDB\n \n     DBErrors ReorderTransactions(CWallet*);\n     DBErrors LoadWallet(CWallet* pwallet);\n+    DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash);\n+    DBErrors ZapWalletTx(CWallet* pwallet);\n     static bool Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, std::string filename);\n };"
      }
    ]
  }
]