[
  {
    "sha": "cb8f28a8f8c967bbb11dc6ee412c52bb2b0a56fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjhmMjhhOGY4Yzk2N2JiYjExZGM2ZWU0MTJjNTJiYjJiMGE1NmZh",
    "commit": {
      "author": {
        "name": "saibato",
        "email": "saibato.naga@pm.me",
        "date": "2020-07-10T15:36:18Z"
      },
      "committer": {
        "name": "saibato",
        "email": "saibato.naga@pm.me",
        "date": "2020-08-15T11:55:59Z"
      },
      "message": "torcontrol: Create also a v3 ed25519-V3 service address.\n\nIf the Tor version supports this, from now on we\nalso create also ED25519-V3 in torcontrol.",
      "tree": {
        "sha": "2e93a97b043de1ca1ae0b99d0ab73b7495e6811a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e93a97b043de1ca1ae0b99d0ab73b7495e6811a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb8f28a8f8c967bbb11dc6ee412c52bb2b0a56fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8f28a8f8c967bbb11dc6ee412c52bb2b0a56fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb8f28a8f8c967bbb11dc6ee412c52bb2b0a56fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8f28a8f8c967bbb11dc6ee412c52bb2b0a56fa/comments",
    "author": {
      "login": "Saibato",
      "id": 34917548,
      "node_id": "MDQ6VXNlcjM0OTE3NTQ4",
      "avatar_url": "https://avatars.githubusercontent.com/u/34917548?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Saibato",
      "html_url": "https://github.com/Saibato",
      "followers_url": "https://api.github.com/users/Saibato/followers",
      "following_url": "https://api.github.com/users/Saibato/following{/other_user}",
      "gists_url": "https://api.github.com/users/Saibato/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Saibato/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Saibato/subscriptions",
      "organizations_url": "https://api.github.com/users/Saibato/orgs",
      "repos_url": "https://api.github.com/users/Saibato/repos",
      "events_url": "https://api.github.com/users/Saibato/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Saibato/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Saibato",
      "id": 34917548,
      "node_id": "MDQ6VXNlcjM0OTE3NTQ4",
      "avatar_url": "https://avatars.githubusercontent.com/u/34917548?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Saibato",
      "html_url": "https://github.com/Saibato",
      "followers_url": "https://api.github.com/users/Saibato/followers",
      "following_url": "https://api.github.com/users/Saibato/following{/other_user}",
      "gists_url": "https://api.github.com/users/Saibato/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Saibato/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Saibato/subscriptions",
      "organizations_url": "https://api.github.com/users/Saibato/orgs",
      "repos_url": "https://api.github.com/users/Saibato/repos",
      "events_url": "https://api.github.com/users/Saibato/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Saibato/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cde97374d5c7fc22cc0a13f2f74ca45af33279d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cde97374d5c7fc22cc0a13f2f74ca45af33279d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cde97374d5c7fc22cc0a13f2f74ca45af33279d"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 57,
      "deletions": 24
    },
    "files": [
      {
        "sha": "14e13f5455d042564976581c3c0bc79f15059417",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 24,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb8f28a8f8c967bbb11dc6ee412c52bb2b0a56fa/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb8f28a8f8c967bbb11dc6ee412c52bb2b0a56fa/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=cb8f28a8f8c967bbb11dc6ee412c52bb2b0a56fa",
        "patch": "@@ -47,6 +47,11 @@ static const float RECONNECT_TIMEOUT_EXP = 1.5;\n  */\n static const int MAX_LINE_LENGTH = 100000;\n \n+enum Tor_proto_version {\n+    TOR_NET_V2,\n+    TOR_NET_V3\n+};\n+\n /****** Low-level TorControlConnection ********/\n \n /** Reply from Tor, can be single or multi-line */\n@@ -422,6 +427,7 @@ class TorController\n     struct event_base* base;\n     std::string target;\n     TorControlConnection conn;\n+    Tor_proto_version tor_version = TOR_NET_V2;\n     std::string private_key;\n     std::string service_id;\n     bool reconnect;\n@@ -463,12 +469,6 @@ TorController::TorController(struct event_base* _base, const std::string& _targe\n          std::bind(&TorController::disconnected_cb, this, std::placeholders::_1) )) {\n         LogPrintf(\"tor: Initiating connection to Tor control port %s failed\\n\", _target);\n     }\n-    // Read service private key if cached\n-    std::pair<bool,std::string> pkf = ReadBinaryFile(GetPrivateKeyFile());\n-    if (pkf.first) {\n-        LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile().string());\n-        private_key = pkf.second;\n-    }\n }\n \n TorController::~TorController()\n@@ -485,7 +485,7 @@ TorController::~TorController()\n void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlReply& reply)\n {\n     if (reply.code == 250) {\n-        LogPrint(BCLog::TOR, \"tor: ADD_ONION successful\\n\");\n+        LogPrint(BCLog::TOR, \"tor: ADD_ONION %s successful\\n\", tor_version == TOR_NET_V2 ? \"V2\" : \"V3\");\n         for (const std::string &s : reply.lines) {\n             std::map<std::string,std::string> m = ParseTorReplyMapping(s);\n             std::map<std::string,std::string>::iterator i;\n@@ -495,25 +495,49 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n                 private_key = i->second;\n         }\n         if (service_id.empty()) {\n-            LogPrintf(\"tor: Error parsing ADD_ONION parameters:\\n\");\n+            LogPrintf(\"tor: Error parsing ADD_ONION %s parameters:\\n\", tor_version == TOR_NET_V2 ? \"V2\" : \"V3\");\n             for (const std::string &s : reply.lines) {\n                 LogPrintf(\"    %s\\n\", SanitizeString(s));\n             }\n-            return;\n+\n+        } else {\n+            service = LookupNumeric(std::string(service_id + \".onion\"), Params().GetDefaultPort());\n+            if (service_id.length() > 16)\n+                tor_version = TOR_NET_V3;\n+            else\n+                tor_version = TOR_NET_V2;\n+            LogPrintf(\"tor: Got service ID %s, created %s.onion, advertising service %s\\n\", service_id, service_id, service.ToString());\n+            if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n+                LogPrint(BCLog::TOR, \"tor: Write cached service private key to %s\\n\", GetPrivateKeyFile().string());\n+            } else {\n+                LogPrintf(\"tor: Error writing service private key to %s\\n\", GetPrivateKeyFile().string());\n+            }\n+            AddLocal(service, LOCAL_MANUAL);\n+            // ... onion requested - keep connection open\n+\n+            if (reply.code == 510) { // 510 Unrecognized command\n+                LogPrintf(\"tor: Add onion failed with unrecognized command (You probably need to upgrade Tor)\\n\");\n+            }\n         }\n-        service = LookupNumeric(std::string(service_id+\".onion\"), Params().GetDefaultPort());\n-        LogPrintf(\"tor: Got service ID %s, advertising service %s\\n\", service_id, service.ToString());\n-        if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n-            LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().string());\n         } else {\n-            LogPrintf(\"tor: Error writing service private key to %s\\n\", GetPrivateKeyFile().string());\n+            LogPrintf(\"tor: Add onion failed; error code %d\\n\", reply.code);\n         }\n-        AddLocal(service, LOCAL_MANUAL);\n-        // ... onion requested - keep connection open\n-    } else if (reply.code == 510) { // 510 Unrecognized command\n-        LogPrintf(\"tor: Add onion failed with unrecognized command (You probably need to upgrade Tor)\\n\");\n-    } else {\n-        LogPrintf(\"tor: Add onion failed; error code %d\\n\", reply.code);\n+        // Tor might deprecate v2-onions so we try to create from now on also v3 onions\n+        // Now we try to create the v3-service\n+        if (tor_version == TOR_NET_V2) {\n+            tor_version = TOR_NET_V3;\n+            private_key = \"\";\n+            std::pair<bool, std::string> pkf = ReadBinaryFile(GetPrivateKeyFile());\n+            if (pkf.first) {\n+                LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile().string());\n+                private_key = pkf.second;\n+            }\n+            if (private_key.empty())  // No private key, generate one\n+                private_key = \"NEW:ED25519-V3\"; // Explicitly request ED25519-V3\n+            // Request v3-hidden service, redirect port.\n+            // Note that the 'virtual' port is always the default port to avoid decloaking nodes using other ports.\n+            conn.Command(strprintf(\"ADD_ONION %s Port=%i,127.0.0.1:%i\", private_key, Params().GetDefaultPort(), GetListenPort()),\n+                         std::bind(&TorController::add_onion_cb, this, std::placeholders::_1, std::placeholders::_2));\n     }\n }\n \n@@ -522,7 +546,7 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n     if (reply.code == 250) {\n         LogPrint(BCLog::TOR, \"tor: Authentication successful\\n\");\n \n-        // Now that we know Tor is running setup the proxy for onion addresses\n+        // Now that we know Tor is running, set up the proxy for onion addresses\n         // if -onion isn't set to something else.\n         if (gArgs.GetArg(\"-onion\", \"\") == \"\") {\n             CService resolved(LookupNumeric(\"127.0.0.1\", 9050));\n@@ -531,13 +555,22 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n             SetReachable(NET_ONION, true);\n         }\n \n-        // Finally - now create the service\n+        // Finaly we create the v2-service\n+        tor_version = TOR_NET_V2;\n+        private_key = \"\";\n+        std::pair<bool, std::string> pkf = ReadBinaryFile(GetPrivateKeyFile());\n+        if (pkf.first) {\n+            LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile().string());\n+            private_key = pkf.second;\n+        }\n+        tor_version = TOR_NET_V2;\n         if (private_key.empty()) // No private key, generate one\n             private_key = \"NEW:RSA1024\"; // Explicitly request RSA1024 - see issue #9214\n         // Request onion service, redirect port.\n         // Note that the 'virtual' port is always the default port to avoid decloaking nodes using other ports.\n         _conn.Command(strprintf(\"ADD_ONION %s Port=%i,127.0.0.1:%i\", private_key, Params().GetDefaultPort(), GetListenPort()),\n             std::bind(&TorController::add_onion_cb, this, std::placeholders::_1, std::placeholders::_2));\n+\n     } else {\n         LogPrintf(\"tor: Authentication failed\\n\");\n     }\n@@ -718,7 +751,8 @@ void TorController::Reconnect()\n \n fs::path TorController::GetPrivateKeyFile()\n {\n-    return GetDataDir() / \"onion_private_key\";\n+    if (tor_version == TOR_NET_V2) return GetDataDir() / \"onion_private_key\";\n+    return GetDataDir() / \"onion_private_key_v3\";\n }\n \n void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)\n@@ -734,7 +768,6 @@ static std::thread torControlThread;\n static void TorControlThread()\n {\n     TorController ctrl(gBase, gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL));\n-\n     event_base_dispatch(gBase);\n }\n "
      }
    ]
  }
]