[
  {
    "sha": "212bcca92089f406d9313dbe6d0e1d25143d61ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTJiY2NhOTIwODlmNDA2ZDkzMTNkYmU2ZDBlMWQyNTE0M2Q2MWZm",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2015-03-22T17:51:43Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2015-08-10T17:23:59Z"
      },
      "message": "Add optional locktime to createrawtransaction\n\nA non-zero locktime also causes input sequences to be set to\nnon-max, activating the locktime.",
      "tree": {
        "sha": "1cb7ce50735a3db840649e9ebbb6c482c124aac0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cb7ce50735a3db840649e9ebbb6c482c124aac0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/212bcca92089f406d9313dbe6d0e1d25143d61ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/212bcca92089f406d9313dbe6d0e1d25143d61ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/212bcca92089f406d9313dbe6d0e1d25143d61ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/212bcca92089f406d9313dbe6d0e1d25143d61ff/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 17,
      "deletions": 4
    },
    "files": [
      {
        "sha": "85c05354a27ba1ca08740b1e3e43c436e6fad79a",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/212bcca92089f406d9313dbe6d0e1d25143d61ff/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/212bcca92089f406d9313dbe6d0e1d25143d61ff/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=212bcca92089f406d9313dbe6d0e1d25143d61ff",
        "patch": "@@ -76,6 +76,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getrawtransaction\", 1 },\n     { \"createrawtransaction\", 0 },\n     { \"createrawtransaction\", 1 },\n+    { \"createrawtransaction\", 2 },\n     { \"signrawtransaction\", 1 },\n     { \"signrawtransaction\", 2 },\n     { \"sendrawtransaction\", 1 },"
      },
      {
        "sha": "d800149eba22a45f3c83f23b26e532b4612702c4",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/212bcca92089f406d9313dbe6d0e1d25143d61ff/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/212bcca92089f406d9313dbe6d0e1d25143d61ff/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=212bcca92089f406d9313dbe6d0e1d25143d61ff",
        "patch": "@@ -316,9 +316,9 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n \n UniValue createrawtransaction(const UniValue& params, bool fHelp)\n {\n-    if (fHelp || params.size() != 2)\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n         throw runtime_error(\n-            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...}\\n\"\n+            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...} ( locktime )\\n\"\n             \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n             \"Outputs can be addresses or data.\\n\"\n             \"Returns hex-encoded raw transaction.\\n\"\n@@ -340,6 +340,7 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n             \"      \\\"data\\\": \\\"hex\\\",     (string, required) The key is \\\"data\\\", the value is hex encoded data\\n\"\n             \"      ...\\n\"\n             \"    }\\n\"\n+            \"3. locktime                (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"transaction\\\"            (string) hex string of the transaction\\n\"\n \n@@ -351,13 +352,22 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ)(UniValue::VNUM), true);\n+    if (params[0].isNull() || params[1].isNull())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n \n     UniValue inputs = params[0].get_array();\n     UniValue sendTo = params[1].get_obj();\n \n     CMutableTransaction rawTx;\n \n+    if (params.size() > 2 && !params[2].isNull()) {\n+        int64_t nLockTime = params[2].get_int64();\n+        if (nLockTime < 0 || nLockTime > std::numeric_limits<uint32_t>::max())\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, locktime out of range\");\n+        rawTx.nLockTime = nLockTime;\n+    }\n+\n     for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n         const UniValue& input = inputs[idx];\n         const UniValue& o = input.get_obj();\n@@ -371,7 +381,9 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n         if (nOutput < 0)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n \n-        CTxIn in(COutPoint(txid, nOutput));\n+        uint32_t nSequence = (rawTx.nLockTime ? std::numeric_limits<uint32_t>::max() - 1 : std::numeric_limits<uint32_t>::max());\n+        CTxIn in(COutPoint(txid, nOutput), CScript(), nSequence);\n+\n         rawTx.vin.push_back(in);\n     }\n "
      }
    ]
  }
]