[
  {
    "sha": "260cf5c0a4754be39b05f6a247b8a354de7eced6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjBjZjVjMGE0NzU0YmUzOWIwNWY2YTI0N2I4YTM1NGRlN2VjZWQ2",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-26T20:07:33Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-28T20:23:50Z"
      },
      "message": "Squashed 'qa/rpc-tests/python-bitcoinrpc/' content from commit e484743\n\ngit-subtree-dir: qa/rpc-tests/python-bitcoinrpc\ngit-subtree-split: e48474322de165212c5aa29574297e78b09df8d6",
      "tree": {
        "sha": "4ac8e483e10c45005af2b853b1b243cf0f2705fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ac8e483e10c45005af2b853b1b243cf0f2705fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/260cf5c0a4754be39b05f6a247b8a354de7eced6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/260cf5c0a4754be39b05f6a247b8a354de7eced6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/260cf5c0a4754be39b05f6a247b8a354de7eced6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/260cf5c0a4754be39b05f6a247b8a354de7eced6/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "829f82226795f1306de87cfbd53544509d75b406",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/829f82226795f1306de87cfbd53544509d75b406",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/829f82226795f1306de87cfbd53544509d75b406"
      }
    ],
    "stats": {
      "total": 193,
      "additions": 193,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9edd5a2121bbe3bf011220f9af05d57392fa10b9",
        "filename": "README",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/260cf5c0a4754be39b05f6a247b8a354de7eced6/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/260cf5c0a4754be39b05f6a247b8a354de7eced6/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README?ref=260cf5c0a4754be39b05f6a247b8a354de7eced6",
        "patch": "@@ -0,0 +1,21 @@\n+AuthServiceProxy is an improved version of python-jsonrpc.\n+\n+It includes the following generic improvements:\n+\n+- HTTP connections persist for the life of the AuthServiceProxy object\n+- sends protocol 'version', per JSON-RPC 1.1\n+- sends proper, incrementing 'id'\n+- uses standard Python json lib\n+\n+It also includes the following bitcoin-specific details:\n+\n+- sends Basic HTTP authentication headers\n+- parses all JSON numbers that look like floats as Decimal\n+\n+Installation:\n+\n+- change the first line of setup.py to point to the directory of your installation of python 2.*\n+- run setup.py\n+\n+Note: This will only install bitcoinrpc. If you also want to install jsonrpc to preserve \n+backwards compatibility, you have to replace 'bitcoinrpc' with 'jsonrpc' in setup.py and run it again."
      },
      {
        "sha": "2f78cf5b66514f2506d9af5f3dadf3dee7aa6d9f",
        "filename": "bitcoinrpc/.gitignore",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/260cf5c0a4754be39b05f6a247b8a354de7eced6/bitcoinrpc/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/260cf5c0a4754be39b05f6a247b8a354de7eced6/bitcoinrpc/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoinrpc/.gitignore?ref=260cf5c0a4754be39b05f6a247b8a354de7eced6",
        "patch": "@@ -0,0 +1,2 @@\n+*.pyc\n+"
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "bitcoinrpc/__init__.py",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/260cf5c0a4754be39b05f6a247b8a354de7eced6/bitcoinrpc/__init__.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/260cf5c0a4754be39b05f6a247b8a354de7eced6/bitcoinrpc/__init__.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoinrpc/__init__.py?ref=260cf5c0a4754be39b05f6a247b8a354de7eced6"
      },
      {
        "sha": "291447717006f3f10edf1b460b820ce9473f3e80",
        "filename": "bitcoinrpc/authproxy.py",
        "status": "added",
        "additions": 140,
        "deletions": 0,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/260cf5c0a4754be39b05f6a247b8a354de7eced6/bitcoinrpc/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/260cf5c0a4754be39b05f6a247b8a354de7eced6/bitcoinrpc/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoinrpc/authproxy.py?ref=260cf5c0a4754be39b05f6a247b8a354de7eced6",
        "patch": "@@ -0,0 +1,140 @@\n+\n+\"\"\"\n+  Copyright 2011 Jeff Garzik\n+\n+  AuthServiceProxy has the following improvements over python-jsonrpc's\n+  ServiceProxy class:\n+\n+  - HTTP connections persist for the life of the AuthServiceProxy object\n+    (if server supports HTTP/1.1)\n+  - sends protocol 'version', per JSON-RPC 1.1\n+  - sends proper, incrementing 'id'\n+  - sends Basic HTTP authentication headers\n+  - parses all JSON numbers that look like floats as Decimal\n+  - uses standard Python json lib\n+\n+  Previous copyright, from python-jsonrpc/jsonrpc/proxy.py:\n+\n+  Copyright (c) 2007 Jan-Klaas Kollhof\n+\n+  This file is part of jsonrpc.\n+\n+  jsonrpc is free software; you can redistribute it and/or modify\n+  it under the terms of the GNU Lesser General Public License as published by\n+  the Free Software Foundation; either version 2.1 of the License, or\n+  (at your option) any later version.\n+\n+  This software is distributed in the hope that it will be useful,\n+  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+  GNU Lesser General Public License for more details.\n+\n+  You should have received a copy of the GNU Lesser General Public License\n+  along with this software; if not, write to the Free Software\n+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+\"\"\"\n+\n+try:\n+    import http.client as httplib\n+except ImportError:\n+    import httplib\n+import base64\n+import json\n+import decimal\n+try:\n+    import urllib.parse as urlparse\n+except ImportError:\n+    import urlparse\n+\n+USER_AGENT = \"AuthServiceProxy/0.1\"\n+\n+HTTP_TIMEOUT = 30\n+\n+\n+class JSONRPCException(Exception):\n+    def __init__(self, rpc_error):\n+        Exception.__init__(self)\n+        self.error = rpc_error\n+\n+\n+class AuthServiceProxy(object):\n+    def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connection=None):\n+        self.__service_url = service_url\n+        self.__service_name = service_name\n+        self.__url = urlparse.urlparse(service_url)\n+        if self.__url.port is None:\n+            port = 80\n+        else:\n+            port = self.__url.port\n+        self.__id_count = 0\n+        (user, passwd) = (self.__url.username, self.__url.password)\n+        try:\n+            user = user.encode('utf8')\n+        except AttributeError:\n+            pass\n+        try:\n+            passwd = passwd.encode('utf8')\n+        except AttributeError:\n+            pass\n+        authpair = user + b':' + passwd\n+        self.__auth_header = b'Basic ' + base64.b64encode(authpair)\n+        \n+        if connection: \n+            # Callables re-use the connection of the original proxy \n+            self.__conn = connection\n+        elif self.__url.scheme == 'https':\n+            self.__conn = httplib.HTTPSConnection(self.__url.hostname, port,\n+                                                  None, None, False,\n+                                                  timeout)\n+        else:\n+            self.__conn = httplib.HTTPConnection(self.__url.hostname, port,\n+                                                 False, timeout)\n+\n+    def __getattr__(self, name):\n+        if name.startswith('__') and name.endswith('__'):\n+            # Python internal stuff\n+            raise AttributeError\n+        if self.__service_name is not None:\n+            name = \"%s.%s\" % (self.__service_name, name)\n+        return AuthServiceProxy(self.__service_url, name, connection=self.__conn)\n+\n+    def __call__(self, *args):\n+        self.__id_count += 1\n+\n+        postdata = json.dumps({'version': '1.1',\n+                               'method': self.__service_name,\n+                               'params': args,\n+                               'id': self.__id_count})\n+        self.__conn.request('POST', self.__url.path, postdata,\n+                            {'Host': self.__url.hostname,\n+                             'User-Agent': USER_AGENT,\n+                             'Authorization': self.__auth_header,\n+                             'Content-type': 'application/json'})\n+\n+        response = self._get_response()\n+        if response['error'] is not None:\n+            raise JSONRPCException(response['error'])\n+        elif 'result' not in response:\n+            raise JSONRPCException({\n+                'code': -343, 'message': 'missing JSON-RPC result'})\n+        else:\n+            return response['result']\n+\n+    def _batch(self, rpc_call_list):\n+        postdata = json.dumps(list(rpc_call_list))\n+        self.__conn.request('POST', self.__url.path, postdata,\n+                            {'Host': self.__url.hostname,\n+                             'User-Agent': USER_AGENT,\n+                             'Authorization': self.__auth_header,\n+                             'Content-type': 'application/json'})\n+\n+        return self._get_response()\n+\n+    def _get_response(self):\n+        http_response = self.__conn.getresponse()\n+        if http_response is None:\n+            raise JSONRPCException({\n+                'code': -342, 'message': 'missing HTTP response from server'})\n+\n+        return json.loads(http_response.read().decode('utf8'),\n+                          parse_float=decimal.Decimal)"
      },
      {
        "sha": "8441fa31202ead8175d6a3546b1ea9790953c76b",
        "filename": "jsonrpc/__init__.py",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/260cf5c0a4754be39b05f6a247b8a354de7eced6/jsonrpc/__init__.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/260cf5c0a4754be39b05f6a247b8a354de7eced6/jsonrpc/__init__.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/jsonrpc/__init__.py?ref=260cf5c0a4754be39b05f6a247b8a354de7eced6",
        "patch": "@@ -0,0 +1,2 @@\n+from .json import loads, dumps, JSONEncodeException, JSONDecodeException\n+from jsonrpc.proxy import ServiceProxy, JSONRPCException"
      },
      {
        "sha": "e90ef361d0e86da7ecbabd207dcebbdd12a31289",
        "filename": "jsonrpc/authproxy.py",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/260cf5c0a4754be39b05f6a247b8a354de7eced6/jsonrpc/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/260cf5c0a4754be39b05f6a247b8a354de7eced6/jsonrpc/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/jsonrpc/authproxy.py?ref=260cf5c0a4754be39b05f6a247b8a354de7eced6",
        "patch": "@@ -0,0 +1,3 @@\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+\n+__all__ = ['AuthServiceProxy', 'JSONRPCException']"
      },
      {
        "sha": "95398630f74f0a523b6754270bc14429b8b2b447",
        "filename": "jsonrpc/json.py",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/260cf5c0a4754be39b05f6a247b8a354de7eced6/jsonrpc/json.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/260cf5c0a4754be39b05f6a247b8a354de7eced6/jsonrpc/json.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/jsonrpc/json.py?ref=260cf5c0a4754be39b05f6a247b8a354de7eced6",
        "patch": "@@ -0,0 +1,9 @@\n+_json = __import__('json')\n+loads = _json.loads\n+dumps = _json.dumps\n+if hasattr(_json, 'JSONEncodeException'):\n+\tJSONEncodeException = _json.JSONEncodeException\n+\tJSONDecodeException = _json.JSONDecodeException\n+else:\n+\tJSONEncodeException = TypeError\n+\tJSONDecodeException = ValueError"
      },
      {
        "sha": "0d2be1e93b2c68761b3efab0b9ea365b9ee67353",
        "filename": "jsonrpc/proxy.py",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/260cf5c0a4754be39b05f6a247b8a354de7eced6/jsonrpc/proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/260cf5c0a4754be39b05f6a247b8a354de7eced6/jsonrpc/proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/jsonrpc/proxy.py?ref=260cf5c0a4754be39b05f6a247b8a354de7eced6",
        "patch": "@@ -0,0 +1 @@\n+from bitcoinrpc.authproxy import AuthServiceProxy as ServiceProxy, JSONRPCException"
      },
      {
        "sha": "b5a217bf93e4678075b605ae3ffabd0d6019c15f",
        "filename": "setup.py",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/260cf5c0a4754be39b05f6a247b8a354de7eced6/setup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/260cf5c0a4754be39b05f6a247b8a354de7eced6/setup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/setup.py?ref=260cf5c0a4754be39b05f6a247b8a354de7eced6",
        "patch": "@@ -0,0 +1,15 @@\n+#!/usr/bin/env python\n+\n+from distutils.core import setup\n+\n+setup(name='python-bitcoinrpc',\n+      version='0.1',\n+      description='Enhanced version of python-jsonrpc for use with Bitcoin',\n+      long_description=open('README').read(),\n+      author='Jeff Garzik',\n+      author_email='<jgarzik@exmulti.com>',\n+      maintainer='Jeff Garzik',\n+      maintainer_email='<jgarzik@exmulti.com>',\n+      url='http://www.github.com/jgarzik/python-bitcoinrpc',\n+      packages=['bitcoinrpc'],\n+      classifiers=['License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)', 'Operating System :: OS Independent'])"
      }
    ]
  },
  {
    "sha": "356cfe83065aa4f120707f026c10c83f1e62be89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTZjZmU4MzA2NWFhNGYxMjA3MDdmMDI2YzEwYzgzZjFlNjJiZTg5",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-26T21:31:18Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-28T20:24:31Z"
      },
      "message": "Python-based regression tests\n\nskeleton.py : a do-nothing test skeleton\nlisttransactions.py : start of regression test for listtransactions call",
      "tree": {
        "sha": "4b7cb43de0e900b89d6422511f28a5b2e020d25e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b7cb43de0e900b89d6422511f28a5b2e020d25e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/356cfe83065aa4f120707f026c10c83f1e62be89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/356cfe83065aa4f120707f026c10c83f1e62be89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/356cfe83065aa4f120707f026c10c83f1e62be89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/356cfe83065aa4f120707f026c10c83f1e62be89/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "260cf5c0a4754be39b05f6a247b8a354de7eced6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/260cf5c0a4754be39b05f6a247b8a354de7eced6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/260cf5c0a4754be39b05f6a247b8a354de7eced6"
      }
    ],
    "stats": {
      "total": 406,
      "additions": 392,
      "deletions": 14
    },
    "files": [
      {
        "sha": "cb41d94423e46d410462a6d1edb686a7e62a8e97",
        "filename": "qa/rpc-tests/.gitignore",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/356cfe83065aa4f120707f026c10c83f1e62be89/qa/rpc-tests/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/356cfe83065aa4f120707f026c10c83f1e62be89/qa/rpc-tests/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/.gitignore?ref=356cfe83065aa4f120707f026c10c83f1e62be89",
        "patch": "@@ -0,0 +1,2 @@\n+*.pyc\n+cache"
      },
      {
        "sha": "835ff110574cd778842b9ccdeffe694c4d8d68a7",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 24,
        "deletions": 14,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/356cfe83065aa4f120707f026c10c83f1e62be89/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/356cfe83065aa4f120707f026c10c83f1e62be89/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=356cfe83065aa4f120707f026c10c83f1e62be89",
        "patch": "@@ -1,26 +1,36 @@\n Regression tests of RPC interface\n =================================\n \n-Bash scripts that use the RPC interface and command-line bitcoin-cli to test\n-full functionality in -regtest mode.\n+python-bitcoinrpc: git subtree of https://github.com/jgarzik/python-bitcoinrpc\n+Changes to python-bitcoinrpc should be made upstream, and then\n+pulled here using git subtree\n \n-wallet.sh : Exercise wallet send/receive code.\n+skeleton.py : Copy this to create new regression tests.\n \n-txnmall.sh : Test proper accounting of malleable transactions\n+listtransactions.py : Tests for the listtransactions RPC call\n+\n+util.py : generally useful functions\n \n+Bash-based tests, to be ported to Python:\n+-----------------------------------------\n+wallet.sh : Exercise wallet send/receive code.\n+walletbackup.sh : Exercise wallet backup / dump / import\n+txnmall.sh : Test proper accounting of malleable transactions\n conflictedbalance.sh : More testing of malleable transaction handling\n \n-util.sh : useful re-usable bash functions\n+Notes\n+=====\n \n+A 200-block -regtest blockchain and wallets for four nodes\n+is created the first time a regression test is run and\n+is stored in the cache/ directory. Each node has 25 mature\n+blocks (25*50=1250 BTC) in their wallet.\n \n-Tips for creating new tests\n-===========================\n+After the first run, the cache/ blockchain and wallets are\n+copied into a temporary directory and used as the initial\n+test state.\n \n-To cleanup after a failed or interrupted test:\n+If you get into a bad state, you should be able\n+to recover with:\n+  rm -rf cache\n   killall bitcoind\n-  rm -rf test.*\n-\n-The most difficult part of writing reproducible tests is\n-keeping multiple nodes in sync. See WaitBlocks,\n-WaitPeers, and WaitMemPools for how other tests\n-deal with this."
      },
      {
        "sha": "fec3acfbb378a85f23a5604cc6e8c42099b55c2f",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "added",
        "additions": 151,
        "deletions": 0,
        "changes": 151,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/356cfe83065aa4f120707f026c10c83f1e62be89/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/356cfe83065aa4f120707f026c10c83f1e62be89/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=356cfe83065aa4f120707f026c10c83f1e62be89",
        "patch": "@@ -0,0 +1,151 @@\n+#!/usr/bin/env python\n+\n+# Exercise the listtransactions API\n+\n+# Add python-bitcoinrpc to module search path:\n+import os\n+import sys\n+sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n+\n+import json\n+import shutil\n+import subprocess\n+import tempfile\n+import traceback\n+\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+\n+def check_array_result(object_array, to_match, expected):\n+    \"\"\"\n+    Pass in array of JSON objects, a dictionary with key/value pairs\n+    to match against, and another dictionary with expected key/value\n+    pairs.\n+    \"\"\"\n+    num_matched = 0\n+    for item in object_array:\n+        all_match = True\n+        for key,value in to_match.items():\n+            if item[key] != value:\n+                all_match = False\n+        if not all_match:\n+            continue\n+        for key,value in expected.items():\n+            if item[key] != value:\n+                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n+            num_matched = num_matched+1\n+    if num_matched == 0:\n+        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n+\n+def run_test(nodes):\n+    # Simple send, 0 to 1:\n+    txid = nodes[0].sendtoaddress(nodes[1].getnewaddress(), 0.1)\n+    sync_mempools(nodes)\n+    check_array_result(nodes[0].listtransactions(),\n+                       {\"txid\":txid},\n+                       {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":0})\n+    check_array_result(nodes[1].listtransactions(),\n+                       {\"txid\":txid},\n+                       {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":0})\n+    # mine a block, confirmations should change:\n+    nodes[0].setgenerate(True, 1)\n+    sync_blocks(nodes)\n+    check_array_result(nodes[0].listtransactions(),\n+                       {\"txid\":txid},\n+                       {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":1})\n+    check_array_result(nodes[1].listtransactions(),\n+                       {\"txid\":txid},\n+                       {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":1})\n+\n+    # send-to-self:\n+    txid = nodes[0].sendtoaddress(nodes[0].getnewaddress(), 0.2)\n+    check_array_result(nodes[0].listtransactions(),\n+                       {\"txid\":txid, \"category\":\"send\"},\n+                       {\"amount\":Decimal(\"-0.2\")})\n+    check_array_result(nodes[0].listtransactions(),\n+                       {\"txid\":txid, \"category\":\"receive\"},\n+                       {\"amount\":Decimal(\"0.2\")})\n+\n+    # sendmany from node1: twice to self, twice to node2:\n+    send_to = { nodes[0].getnewaddress() : 0.11, nodes[1].getnewaddress() : 0.22,\n+                nodes[0].getaccountaddress(\"from1\") : 0.33, nodes[1].getaccountaddress(\"toself\") : 0.44 }\n+    txid = nodes[1].sendmany(\"\", send_to)\n+    sync_mempools(nodes)\n+    check_array_result(nodes[1].listtransactions(),\n+                       {\"category\":\"send\",\"amount\":Decimal(\"-0.11\")},\n+                       {\"txid\":txid} )\n+    check_array_result(nodes[0].listtransactions(),\n+                       {\"category\":\"receive\",\"amount\":Decimal(\"0.11\")},\n+                       {\"txid\":txid} )\n+    check_array_result(nodes[1].listtransactions(),\n+                       {\"category\":\"send\",\"amount\":Decimal(\"-0.22\")},\n+                       {\"txid\":txid} )\n+    check_array_result(nodes[1].listtransactions(),\n+                       {\"category\":\"receive\",\"amount\":Decimal(\"0.22\")},\n+                       {\"txid\":txid} )\n+    check_array_result(nodes[1].listtransactions(),\n+                       {\"category\":\"send\",\"amount\":Decimal(\"-0.33\")},\n+                       {\"txid\":txid} )\n+    check_array_result(nodes[0].listtransactions(),\n+                       {\"category\":\"receive\",\"amount\":Decimal(\"0.33\")},\n+                       {\"txid\":txid, \"account\" : \"from1\"} )\n+    check_array_result(nodes[1].listtransactions(),\n+                       {\"category\":\"send\",\"amount\":Decimal(\"-0.44\")},\n+                       {\"txid\":txid, \"account\" : \"\"} )\n+    check_array_result(nodes[1].listtransactions(),\n+                       {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n+                       {\"txid\":txid, \"account\" : \"toself\"} )\n+    \n+\n+def main():\n+    import optparse\n+\n+    parser = optparse.OptionParser(usage=\"%prog [options]\")\n+    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n+                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n+    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n+                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n+    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n+                      help=\"Root directory for datadirs\")\n+    (options, args) = parser.parse_args()\n+\n+    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n+\n+    check_json_precision()\n+\n+    success = False\n+    try:\n+        print(\"Initializing test directory \"+options.tmpdir)\n+        if not os.path.isdir(options.tmpdir):\n+            os.makedirs(options.tmpdir)\n+        initialize_chain(options.tmpdir)\n+\n+        nodes = start_nodes(2, options.tmpdir)\n+        connect_nodes(nodes[1], 0)\n+        sync_blocks(nodes)\n+        run_test(nodes)\n+\n+        success = True\n+\n+    except AssertionError as e:\n+        print(\"Assertion failed: \"+e.message)\n+    except Exception as e:\n+        print(\"Unexpected exception caught during testing: \"+str(e))\n+        stack = traceback.extract_tb(sys.exc_info()[2])\n+        print(stack[-1])\n+\n+    if not options.nocleanup:\n+        print(\"Cleaning up\")\n+        stop_nodes()\n+        shutil.rmtree(options.tmpdir)\n+\n+    if success:\n+        print(\"Tests successful\")\n+        sys.exit(0)\n+    else:\n+        print(\"Failed\")\n+        sys.exit(1)\n+\n+if __name__ == '__main__':\n+    main()"
      },
      {
        "sha": "0bace6f4eb4d8b2de170113363615d565b0c540e",
        "filename": "qa/rpc-tests/skeleton.py",
        "status": "added",
        "additions": 79,
        "deletions": 0,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/356cfe83065aa4f120707f026c10c83f1e62be89/qa/rpc-tests/skeleton.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/356cfe83065aa4f120707f026c10c83f1e62be89/qa/rpc-tests/skeleton.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/skeleton.py?ref=356cfe83065aa4f120707f026c10c83f1e62be89",
        "patch": "@@ -0,0 +1,79 @@\n+#!/usr/bin/env python\n+\n+# Skeleton for python-based regression tests using\n+# JSON-RPC\n+\n+\n+# Add python-bitcoinrpc to module search path:\n+import os\n+import sys\n+sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n+\n+import json\n+import shutil\n+import subprocess\n+import tempfile\n+import traceback\n+\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+\n+def run_test(nodes):\n+    # Replace this as appropriate\n+    for node in nodes:\n+        assert_equal(node.getblockcount(), 200)\n+        assert_equal(node.getbalance(), 25*50)\n+\n+def main():\n+    import optparse\n+\n+    parser = optparse.OptionParser(usage=\"%prog [options]\")\n+    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n+                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n+    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n+                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n+    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n+                      help=\"Root directory for datadirs\")\n+    (options, args) = parser.parse_args()\n+\n+    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n+\n+    check_json_precision()\n+\n+    success = False\n+    try:\n+        print(\"Initializing test directory \"+options.tmpdir)\n+        if not os.path.isdir(options.tmpdir):\n+            os.makedirs(options.tmpdir)\n+        initialize_chain(options.tmpdir)\n+\n+        nodes = start_nodes(2, options.tmpdir)\n+        connect_nodes(nodes[1], 0)\n+        sync_blocks(nodes)\n+\n+        run_test(nodes)\n+\n+        success = True\n+\n+    except AssertionError as e:\n+        print(\"Assertion failed: \"+e.message)\n+    except Exception as e:\n+        print(\"Unexpected exception caught during testing: \"+str(e))\n+        stack = traceback.extract_tb(sys.exc_info()[2])\n+        print(stack[-1])\n+\n+    if not options.nocleanup:\n+        print(\"Cleaning up\")\n+        stop_nodes()\n+        shutil.rmtree(options.tmpdir)\n+\n+    if success:\n+        print(\"Tests successful\")\n+        sys.exit(0)\n+    else:\n+        print(\"Failed\")\n+        sys.exit(1)\n+\n+if __name__ == '__main__':\n+    main()"
      },
      {
        "sha": "fbb27ae2dfe603c8cfe17d527ecafce4bb773ece",
        "filename": "qa/rpc-tests/util.py",
        "status": "added",
        "additions": 136,
        "deletions": 0,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/356cfe83065aa4f120707f026c10c83f1e62be89/qa/rpc-tests/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/356cfe83065aa4f120707f026c10c83f1e62be89/qa/rpc-tests/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.py?ref=356cfe83065aa4f120707f026c10c83f1e62be89",
        "patch": "@@ -0,0 +1,136 @@\n+#\n+# Helpful routines for regression testing\n+#\n+\n+# Add python-bitcoinrpc to module search path:\n+import os\n+import sys\n+sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n+\n+from decimal import Decimal\n+import json\n+import shutil\n+import subprocess\n+import time\n+\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+START_P2P_PORT=11000\n+START_RPC_PORT=11100\n+\n+def check_json_precision():\n+    \"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"\n+    n = Decimal(\"20000000.00000003\")\n+    satoshis = int(json.loads(json.dumps(float(n)))*1.0e8)\n+    if satoshis != 2000000000000003:\n+        raise RuntimeError(\"JSON encode/decode loses precision\")\n+\n+def sync_blocks(rpc_connections):\n+    \"\"\"\n+    Wait until everybody has the same block count\n+    \"\"\"\n+    while True:\n+        counts = [ x.getblockcount() for x in rpc_connections ]\n+        if counts == [ counts[0] ]*len(counts):\n+            break\n+        time.sleep(1)\n+\n+def sync_mempools(rpc_connections):\n+    \"\"\"\n+    Wait until everybody has the same transactions in their memory\n+    pools\n+    \"\"\"\n+    while True:\n+        pool = set(rpc_connections[0].getrawmempool())\n+        num_match = 1\n+        for i in range(1, len(rpc_connections)):\n+            if set(rpc_connections[i].getrawmempool()) == pool:\n+                num_match = num_match+1\n+        if num_match == len(rpc_connections):\n+            break\n+        time.sleep(1)\n+        \n+\n+def initialize_chain(test_dir):\n+    \"\"\"\n+    Create (or copy from cache) a 200-block-long chain and\n+    4 wallets.\n+    bitcoind and bitcoin-cli must be in search path.\n+    \"\"\"\n+\n+    if not os.path.isdir(os.path.join(\"cache\", \"node0\")):\n+        # Create cache directories, run bitcoinds:\n+        bitcoinds = []\n+        for i in range(4):\n+            datadir = os.path.join(\"cache\", \"node\"+str(i))\n+            os.makedirs(datadir)\n+            with open(os.path.join(datadir, \"bitcoin.conf\"), 'w') as f:\n+                f.write(\"regtest=1\\n\");\n+                f.write(\"rpcuser=rt\\n\");\n+                f.write(\"rpcpassword=rt\\n\");\n+                f.write(\"port=\"+str(START_P2P_PORT+i)+\"\\n\");\n+                f.write(\"rpcport=\"+str(START_RPC_PORT+i)+\"\\n\");\n+            args = [ \"bitcoind\", \"-keypool=1\", \"-datadir=\"+datadir ]\n+            if i > 0:\n+                args.append(\"-connect=127.0.0.1:\"+str(START_P2P_PORT))\n+            bitcoinds.append(subprocess.Popen(args))\n+            subprocess.check_output([ \"bitcoin-cli\", \"-datadir=\"+datadir,\n+                                      \"-rpcwait\", \"getblockcount\"])\n+\n+        rpcs = []\n+        for i in range(4):\n+            try:\n+                url = \"http://rt:rt@127.0.0.1:%d\"%(START_RPC_PORT+i,)\n+                rpcs.append(AuthServiceProxy(url))\n+            except:\n+                sys.stderr.write(\"Error connecting to \"+url+\"\\n\")\n+                sys.exit(1)\n+\n+        import pdb; pdb.set_trace()\n+\n+        # Create a 200-block-long chain; each of the 4 nodes\n+        # gets 25 mature blocks and 25 immature.\n+        for i in range(4):\n+            rpcs[i].setgenerate(True, 25)\n+            sync_blocks(rpcs)\n+        for i in range(4):\n+            rpcs[i].setgenerate(True, 25)\n+            sync_blocks(rpcs)\n+        # Shut them down\n+        for i in range(4):\n+            rpcs[i].stop()\n+\n+    for i in range(4):\n+        from_dir = os.path.join(\"cache\", \"node\"+str(i))\n+        to_dir = os.path.join(test_dir,  \"node\"+str(i))\n+        shutil.copytree(from_dir, to_dir)\n+\n+bitcoind_processes = []\n+\n+def start_nodes(num_nodes, dir):\n+    # Start bitcoinds, and wait for RPC interface to be up and running:\n+    for i in range(num_nodes):\n+        datadir = os.path.join(dir, \"node\"+str(i))\n+        args = [ \"bitcoind\", \"-datadir=\"+datadir ]\n+        bitcoind_processes.append(subprocess.Popen(args))\n+        subprocess.check_output([ \"bitcoin-cli\", \"-datadir=\"+datadir,\n+                                  \"-rpcwait\", \"getblockcount\"])\n+    # Create&return JSON-RPC connections\n+    rpc_connections = []\n+    for i in range(num_nodes):\n+        url = \"http://rt:rt@127.0.0.1:%d\"%(START_RPC_PORT+i,)\n+        rpc_connections.append(AuthServiceProxy(url))\n+    return rpc_connections\n+\n+def stop_nodes():\n+    for process in bitcoind_processes:\n+        process.kill()\n+\n+def connect_nodes(from_connection, node_num):\n+    ip_port = \"127.0.0.1:\"+str(START_P2P_PORT+node_num)\n+    from_connection.addnode(ip_port, \"onetry\")\n+\n+def assert_equal(thing1, thing2):\n+    if thing1 != thing2:\n+        raise AssertionError(\"%s != %s\"%(str(thing1),str(thing2)))"
      }
    ]
  }
]